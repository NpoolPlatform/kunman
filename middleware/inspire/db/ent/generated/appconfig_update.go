// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/appconfig"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// AppConfigUpdate is the builder for updating AppConfig entities.
type AppConfigUpdate struct {
	config
	hooks     []Hook
	mutation  *AppConfigMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppConfigUpdate builder.
func (acu *AppConfigUpdate) Where(ps ...predicate.AppConfig) *AppConfigUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetCreatedAt sets the "created_at" field.
func (acu *AppConfigUpdate) SetCreatedAt(u uint32) *AppConfigUpdate {
	acu.mutation.ResetCreatedAt()
	acu.mutation.SetCreatedAt(u)
	return acu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acu *AppConfigUpdate) SetNillableCreatedAt(u *uint32) *AppConfigUpdate {
	if u != nil {
		acu.SetCreatedAt(*u)
	}
	return acu
}

// AddCreatedAt adds u to the "created_at" field.
func (acu *AppConfigUpdate) AddCreatedAt(u int32) *AppConfigUpdate {
	acu.mutation.AddCreatedAt(u)
	return acu
}

// SetUpdatedAt sets the "updated_at" field.
func (acu *AppConfigUpdate) SetUpdatedAt(u uint32) *AppConfigUpdate {
	acu.mutation.ResetUpdatedAt()
	acu.mutation.SetUpdatedAt(u)
	return acu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (acu *AppConfigUpdate) AddUpdatedAt(u int32) *AppConfigUpdate {
	acu.mutation.AddUpdatedAt(u)
	return acu
}

// SetDeletedAt sets the "deleted_at" field.
func (acu *AppConfigUpdate) SetDeletedAt(u uint32) *AppConfigUpdate {
	acu.mutation.ResetDeletedAt()
	acu.mutation.SetDeletedAt(u)
	return acu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (acu *AppConfigUpdate) SetNillableDeletedAt(u *uint32) *AppConfigUpdate {
	if u != nil {
		acu.SetDeletedAt(*u)
	}
	return acu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (acu *AppConfigUpdate) AddDeletedAt(u int32) *AppConfigUpdate {
	acu.mutation.AddDeletedAt(u)
	return acu
}

// SetEntID sets the "ent_id" field.
func (acu *AppConfigUpdate) SetEntID(u uuid.UUID) *AppConfigUpdate {
	acu.mutation.SetEntID(u)
	return acu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (acu *AppConfigUpdate) SetNillableEntID(u *uuid.UUID) *AppConfigUpdate {
	if u != nil {
		acu.SetEntID(*u)
	}
	return acu
}

// SetAppID sets the "app_id" field.
func (acu *AppConfigUpdate) SetAppID(u uuid.UUID) *AppConfigUpdate {
	acu.mutation.SetAppID(u)
	return acu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (acu *AppConfigUpdate) SetNillableAppID(u *uuid.UUID) *AppConfigUpdate {
	if u != nil {
		acu.SetAppID(*u)
	}
	return acu
}

// ClearAppID clears the value of the "app_id" field.
func (acu *AppConfigUpdate) ClearAppID() *AppConfigUpdate {
	acu.mutation.ClearAppID()
	return acu
}

// SetSettleMode sets the "settle_mode" field.
func (acu *AppConfigUpdate) SetSettleMode(s string) *AppConfigUpdate {
	acu.mutation.SetSettleMode(s)
	return acu
}

// SetNillableSettleMode sets the "settle_mode" field if the given value is not nil.
func (acu *AppConfigUpdate) SetNillableSettleMode(s *string) *AppConfigUpdate {
	if s != nil {
		acu.SetSettleMode(*s)
	}
	return acu
}

// ClearSettleMode clears the value of the "settle_mode" field.
func (acu *AppConfigUpdate) ClearSettleMode() *AppConfigUpdate {
	acu.mutation.ClearSettleMode()
	return acu
}

// SetSettleAmountType sets the "settle_amount_type" field.
func (acu *AppConfigUpdate) SetSettleAmountType(s string) *AppConfigUpdate {
	acu.mutation.SetSettleAmountType(s)
	return acu
}

// SetNillableSettleAmountType sets the "settle_amount_type" field if the given value is not nil.
func (acu *AppConfigUpdate) SetNillableSettleAmountType(s *string) *AppConfigUpdate {
	if s != nil {
		acu.SetSettleAmountType(*s)
	}
	return acu
}

// ClearSettleAmountType clears the value of the "settle_amount_type" field.
func (acu *AppConfigUpdate) ClearSettleAmountType() *AppConfigUpdate {
	acu.mutation.ClearSettleAmountType()
	return acu
}

// SetSettleInterval sets the "settle_interval" field.
func (acu *AppConfigUpdate) SetSettleInterval(s string) *AppConfigUpdate {
	acu.mutation.SetSettleInterval(s)
	return acu
}

// SetNillableSettleInterval sets the "settle_interval" field if the given value is not nil.
func (acu *AppConfigUpdate) SetNillableSettleInterval(s *string) *AppConfigUpdate {
	if s != nil {
		acu.SetSettleInterval(*s)
	}
	return acu
}

// ClearSettleInterval clears the value of the "settle_interval" field.
func (acu *AppConfigUpdate) ClearSettleInterval() *AppConfigUpdate {
	acu.mutation.ClearSettleInterval()
	return acu
}

// SetCommissionType sets the "commission_type" field.
func (acu *AppConfigUpdate) SetCommissionType(s string) *AppConfigUpdate {
	acu.mutation.SetCommissionType(s)
	return acu
}

// SetNillableCommissionType sets the "commission_type" field if the given value is not nil.
func (acu *AppConfigUpdate) SetNillableCommissionType(s *string) *AppConfigUpdate {
	if s != nil {
		acu.SetCommissionType(*s)
	}
	return acu
}

// ClearCommissionType clears the value of the "commission_type" field.
func (acu *AppConfigUpdate) ClearCommissionType() *AppConfigUpdate {
	acu.mutation.ClearCommissionType()
	return acu
}

// SetSettleBenefit sets the "settle_benefit" field.
func (acu *AppConfigUpdate) SetSettleBenefit(b bool) *AppConfigUpdate {
	acu.mutation.SetSettleBenefit(b)
	return acu
}

// SetNillableSettleBenefit sets the "settle_benefit" field if the given value is not nil.
func (acu *AppConfigUpdate) SetNillableSettleBenefit(b *bool) *AppConfigUpdate {
	if b != nil {
		acu.SetSettleBenefit(*b)
	}
	return acu
}

// ClearSettleBenefit clears the value of the "settle_benefit" field.
func (acu *AppConfigUpdate) ClearSettleBenefit() *AppConfigUpdate {
	acu.mutation.ClearSettleBenefit()
	return acu
}

// SetMaxLevel sets the "max_level" field.
func (acu *AppConfigUpdate) SetMaxLevel(u uint32) *AppConfigUpdate {
	acu.mutation.ResetMaxLevel()
	acu.mutation.SetMaxLevel(u)
	return acu
}

// SetNillableMaxLevel sets the "max_level" field if the given value is not nil.
func (acu *AppConfigUpdate) SetNillableMaxLevel(u *uint32) *AppConfigUpdate {
	if u != nil {
		acu.SetMaxLevel(*u)
	}
	return acu
}

// AddMaxLevel adds u to the "max_level" field.
func (acu *AppConfigUpdate) AddMaxLevel(u int32) *AppConfigUpdate {
	acu.mutation.AddMaxLevel(u)
	return acu
}

// ClearMaxLevel clears the value of the "max_level" field.
func (acu *AppConfigUpdate) ClearMaxLevel() *AppConfigUpdate {
	acu.mutation.ClearMaxLevel()
	return acu
}

// SetStartAt sets the "start_at" field.
func (acu *AppConfigUpdate) SetStartAt(u uint32) *AppConfigUpdate {
	acu.mutation.ResetStartAt()
	acu.mutation.SetStartAt(u)
	return acu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (acu *AppConfigUpdate) SetNillableStartAt(u *uint32) *AppConfigUpdate {
	if u != nil {
		acu.SetStartAt(*u)
	}
	return acu
}

// AddStartAt adds u to the "start_at" field.
func (acu *AppConfigUpdate) AddStartAt(u int32) *AppConfigUpdate {
	acu.mutation.AddStartAt(u)
	return acu
}

// ClearStartAt clears the value of the "start_at" field.
func (acu *AppConfigUpdate) ClearStartAt() *AppConfigUpdate {
	acu.mutation.ClearStartAt()
	return acu
}

// SetEndAt sets the "end_at" field.
func (acu *AppConfigUpdate) SetEndAt(u uint32) *AppConfigUpdate {
	acu.mutation.ResetEndAt()
	acu.mutation.SetEndAt(u)
	return acu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (acu *AppConfigUpdate) SetNillableEndAt(u *uint32) *AppConfigUpdate {
	if u != nil {
		acu.SetEndAt(*u)
	}
	return acu
}

// AddEndAt adds u to the "end_at" field.
func (acu *AppConfigUpdate) AddEndAt(u int32) *AppConfigUpdate {
	acu.mutation.AddEndAt(u)
	return acu
}

// ClearEndAt clears the value of the "end_at" field.
func (acu *AppConfigUpdate) ClearEndAt() *AppConfigUpdate {
	acu.mutation.ClearEndAt()
	return acu
}

// Mutation returns the AppConfigMutation object of the builder.
func (acu *AppConfigUpdate) Mutation() *AppConfigMutation {
	return acu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *AppConfigUpdate) Save(ctx context.Context) (int, error) {
	acu.defaults()
	return withHooks(ctx, acu.sqlSave, acu.mutation, acu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acu *AppConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *AppConfigUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *AppConfigUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acu *AppConfigUpdate) defaults() {
	if _, ok := acu.mutation.UpdatedAt(); !ok {
		v := appconfig.UpdateDefaultUpdatedAt()
		acu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (acu *AppConfigUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppConfigUpdate {
	acu.modifiers = append(acu.modifiers, modifiers...)
	return acu
}

func (acu *AppConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appconfig.Table, appconfig.Columns, sqlgraph.NewFieldSpec(appconfig.FieldID, field.TypeUint32))
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acu.mutation.CreatedAt(); ok {
		_spec.SetField(appconfig.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := acu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(appconfig.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := acu.mutation.UpdatedAt(); ok {
		_spec.SetField(appconfig.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := acu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(appconfig.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := acu.mutation.DeletedAt(); ok {
		_spec.SetField(appconfig.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := acu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(appconfig.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := acu.mutation.EntID(); ok {
		_spec.SetField(appconfig.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := acu.mutation.AppID(); ok {
		_spec.SetField(appconfig.FieldAppID, field.TypeUUID, value)
	}
	if acu.mutation.AppIDCleared() {
		_spec.ClearField(appconfig.FieldAppID, field.TypeUUID)
	}
	if value, ok := acu.mutation.SettleMode(); ok {
		_spec.SetField(appconfig.FieldSettleMode, field.TypeString, value)
	}
	if acu.mutation.SettleModeCleared() {
		_spec.ClearField(appconfig.FieldSettleMode, field.TypeString)
	}
	if value, ok := acu.mutation.SettleAmountType(); ok {
		_spec.SetField(appconfig.FieldSettleAmountType, field.TypeString, value)
	}
	if acu.mutation.SettleAmountTypeCleared() {
		_spec.ClearField(appconfig.FieldSettleAmountType, field.TypeString)
	}
	if value, ok := acu.mutation.SettleInterval(); ok {
		_spec.SetField(appconfig.FieldSettleInterval, field.TypeString, value)
	}
	if acu.mutation.SettleIntervalCleared() {
		_spec.ClearField(appconfig.FieldSettleInterval, field.TypeString)
	}
	if value, ok := acu.mutation.CommissionType(); ok {
		_spec.SetField(appconfig.FieldCommissionType, field.TypeString, value)
	}
	if acu.mutation.CommissionTypeCleared() {
		_spec.ClearField(appconfig.FieldCommissionType, field.TypeString)
	}
	if value, ok := acu.mutation.SettleBenefit(); ok {
		_spec.SetField(appconfig.FieldSettleBenefit, field.TypeBool, value)
	}
	if acu.mutation.SettleBenefitCleared() {
		_spec.ClearField(appconfig.FieldSettleBenefit, field.TypeBool)
	}
	if value, ok := acu.mutation.MaxLevel(); ok {
		_spec.SetField(appconfig.FieldMaxLevel, field.TypeUint32, value)
	}
	if value, ok := acu.mutation.AddedMaxLevel(); ok {
		_spec.AddField(appconfig.FieldMaxLevel, field.TypeUint32, value)
	}
	if acu.mutation.MaxLevelCleared() {
		_spec.ClearField(appconfig.FieldMaxLevel, field.TypeUint32)
	}
	if value, ok := acu.mutation.StartAt(); ok {
		_spec.SetField(appconfig.FieldStartAt, field.TypeUint32, value)
	}
	if value, ok := acu.mutation.AddedStartAt(); ok {
		_spec.AddField(appconfig.FieldStartAt, field.TypeUint32, value)
	}
	if acu.mutation.StartAtCleared() {
		_spec.ClearField(appconfig.FieldStartAt, field.TypeUint32)
	}
	if value, ok := acu.mutation.EndAt(); ok {
		_spec.SetField(appconfig.FieldEndAt, field.TypeUint32, value)
	}
	if value, ok := acu.mutation.AddedEndAt(); ok {
		_spec.AddField(appconfig.FieldEndAt, field.TypeUint32, value)
	}
	if acu.mutation.EndAtCleared() {
		_spec.ClearField(appconfig.FieldEndAt, field.TypeUint32)
	}
	_spec.AddModifiers(acu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	acu.mutation.done = true
	return n, nil
}

// AppConfigUpdateOne is the builder for updating a single AppConfig entity.
type AppConfigUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppConfigMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (acuo *AppConfigUpdateOne) SetCreatedAt(u uint32) *AppConfigUpdateOne {
	acuo.mutation.ResetCreatedAt()
	acuo.mutation.SetCreatedAt(u)
	return acuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acuo *AppConfigUpdateOne) SetNillableCreatedAt(u *uint32) *AppConfigUpdateOne {
	if u != nil {
		acuo.SetCreatedAt(*u)
	}
	return acuo
}

// AddCreatedAt adds u to the "created_at" field.
func (acuo *AppConfigUpdateOne) AddCreatedAt(u int32) *AppConfigUpdateOne {
	acuo.mutation.AddCreatedAt(u)
	return acuo
}

// SetUpdatedAt sets the "updated_at" field.
func (acuo *AppConfigUpdateOne) SetUpdatedAt(u uint32) *AppConfigUpdateOne {
	acuo.mutation.ResetUpdatedAt()
	acuo.mutation.SetUpdatedAt(u)
	return acuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (acuo *AppConfigUpdateOne) AddUpdatedAt(u int32) *AppConfigUpdateOne {
	acuo.mutation.AddUpdatedAt(u)
	return acuo
}

// SetDeletedAt sets the "deleted_at" field.
func (acuo *AppConfigUpdateOne) SetDeletedAt(u uint32) *AppConfigUpdateOne {
	acuo.mutation.ResetDeletedAt()
	acuo.mutation.SetDeletedAt(u)
	return acuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (acuo *AppConfigUpdateOne) SetNillableDeletedAt(u *uint32) *AppConfigUpdateOne {
	if u != nil {
		acuo.SetDeletedAt(*u)
	}
	return acuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (acuo *AppConfigUpdateOne) AddDeletedAt(u int32) *AppConfigUpdateOne {
	acuo.mutation.AddDeletedAt(u)
	return acuo
}

// SetEntID sets the "ent_id" field.
func (acuo *AppConfigUpdateOne) SetEntID(u uuid.UUID) *AppConfigUpdateOne {
	acuo.mutation.SetEntID(u)
	return acuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (acuo *AppConfigUpdateOne) SetNillableEntID(u *uuid.UUID) *AppConfigUpdateOne {
	if u != nil {
		acuo.SetEntID(*u)
	}
	return acuo
}

// SetAppID sets the "app_id" field.
func (acuo *AppConfigUpdateOne) SetAppID(u uuid.UUID) *AppConfigUpdateOne {
	acuo.mutation.SetAppID(u)
	return acuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (acuo *AppConfigUpdateOne) SetNillableAppID(u *uuid.UUID) *AppConfigUpdateOne {
	if u != nil {
		acuo.SetAppID(*u)
	}
	return acuo
}

// ClearAppID clears the value of the "app_id" field.
func (acuo *AppConfigUpdateOne) ClearAppID() *AppConfigUpdateOne {
	acuo.mutation.ClearAppID()
	return acuo
}

// SetSettleMode sets the "settle_mode" field.
func (acuo *AppConfigUpdateOne) SetSettleMode(s string) *AppConfigUpdateOne {
	acuo.mutation.SetSettleMode(s)
	return acuo
}

// SetNillableSettleMode sets the "settle_mode" field if the given value is not nil.
func (acuo *AppConfigUpdateOne) SetNillableSettleMode(s *string) *AppConfigUpdateOne {
	if s != nil {
		acuo.SetSettleMode(*s)
	}
	return acuo
}

// ClearSettleMode clears the value of the "settle_mode" field.
func (acuo *AppConfigUpdateOne) ClearSettleMode() *AppConfigUpdateOne {
	acuo.mutation.ClearSettleMode()
	return acuo
}

// SetSettleAmountType sets the "settle_amount_type" field.
func (acuo *AppConfigUpdateOne) SetSettleAmountType(s string) *AppConfigUpdateOne {
	acuo.mutation.SetSettleAmountType(s)
	return acuo
}

// SetNillableSettleAmountType sets the "settle_amount_type" field if the given value is not nil.
func (acuo *AppConfigUpdateOne) SetNillableSettleAmountType(s *string) *AppConfigUpdateOne {
	if s != nil {
		acuo.SetSettleAmountType(*s)
	}
	return acuo
}

// ClearSettleAmountType clears the value of the "settle_amount_type" field.
func (acuo *AppConfigUpdateOne) ClearSettleAmountType() *AppConfigUpdateOne {
	acuo.mutation.ClearSettleAmountType()
	return acuo
}

// SetSettleInterval sets the "settle_interval" field.
func (acuo *AppConfigUpdateOne) SetSettleInterval(s string) *AppConfigUpdateOne {
	acuo.mutation.SetSettleInterval(s)
	return acuo
}

// SetNillableSettleInterval sets the "settle_interval" field if the given value is not nil.
func (acuo *AppConfigUpdateOne) SetNillableSettleInterval(s *string) *AppConfigUpdateOne {
	if s != nil {
		acuo.SetSettleInterval(*s)
	}
	return acuo
}

// ClearSettleInterval clears the value of the "settle_interval" field.
func (acuo *AppConfigUpdateOne) ClearSettleInterval() *AppConfigUpdateOne {
	acuo.mutation.ClearSettleInterval()
	return acuo
}

// SetCommissionType sets the "commission_type" field.
func (acuo *AppConfigUpdateOne) SetCommissionType(s string) *AppConfigUpdateOne {
	acuo.mutation.SetCommissionType(s)
	return acuo
}

// SetNillableCommissionType sets the "commission_type" field if the given value is not nil.
func (acuo *AppConfigUpdateOne) SetNillableCommissionType(s *string) *AppConfigUpdateOne {
	if s != nil {
		acuo.SetCommissionType(*s)
	}
	return acuo
}

// ClearCommissionType clears the value of the "commission_type" field.
func (acuo *AppConfigUpdateOne) ClearCommissionType() *AppConfigUpdateOne {
	acuo.mutation.ClearCommissionType()
	return acuo
}

// SetSettleBenefit sets the "settle_benefit" field.
func (acuo *AppConfigUpdateOne) SetSettleBenefit(b bool) *AppConfigUpdateOne {
	acuo.mutation.SetSettleBenefit(b)
	return acuo
}

// SetNillableSettleBenefit sets the "settle_benefit" field if the given value is not nil.
func (acuo *AppConfigUpdateOne) SetNillableSettleBenefit(b *bool) *AppConfigUpdateOne {
	if b != nil {
		acuo.SetSettleBenefit(*b)
	}
	return acuo
}

// ClearSettleBenefit clears the value of the "settle_benefit" field.
func (acuo *AppConfigUpdateOne) ClearSettleBenefit() *AppConfigUpdateOne {
	acuo.mutation.ClearSettleBenefit()
	return acuo
}

// SetMaxLevel sets the "max_level" field.
func (acuo *AppConfigUpdateOne) SetMaxLevel(u uint32) *AppConfigUpdateOne {
	acuo.mutation.ResetMaxLevel()
	acuo.mutation.SetMaxLevel(u)
	return acuo
}

// SetNillableMaxLevel sets the "max_level" field if the given value is not nil.
func (acuo *AppConfigUpdateOne) SetNillableMaxLevel(u *uint32) *AppConfigUpdateOne {
	if u != nil {
		acuo.SetMaxLevel(*u)
	}
	return acuo
}

// AddMaxLevel adds u to the "max_level" field.
func (acuo *AppConfigUpdateOne) AddMaxLevel(u int32) *AppConfigUpdateOne {
	acuo.mutation.AddMaxLevel(u)
	return acuo
}

// ClearMaxLevel clears the value of the "max_level" field.
func (acuo *AppConfigUpdateOne) ClearMaxLevel() *AppConfigUpdateOne {
	acuo.mutation.ClearMaxLevel()
	return acuo
}

// SetStartAt sets the "start_at" field.
func (acuo *AppConfigUpdateOne) SetStartAt(u uint32) *AppConfigUpdateOne {
	acuo.mutation.ResetStartAt()
	acuo.mutation.SetStartAt(u)
	return acuo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (acuo *AppConfigUpdateOne) SetNillableStartAt(u *uint32) *AppConfigUpdateOne {
	if u != nil {
		acuo.SetStartAt(*u)
	}
	return acuo
}

// AddStartAt adds u to the "start_at" field.
func (acuo *AppConfigUpdateOne) AddStartAt(u int32) *AppConfigUpdateOne {
	acuo.mutation.AddStartAt(u)
	return acuo
}

// ClearStartAt clears the value of the "start_at" field.
func (acuo *AppConfigUpdateOne) ClearStartAt() *AppConfigUpdateOne {
	acuo.mutation.ClearStartAt()
	return acuo
}

// SetEndAt sets the "end_at" field.
func (acuo *AppConfigUpdateOne) SetEndAt(u uint32) *AppConfigUpdateOne {
	acuo.mutation.ResetEndAt()
	acuo.mutation.SetEndAt(u)
	return acuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (acuo *AppConfigUpdateOne) SetNillableEndAt(u *uint32) *AppConfigUpdateOne {
	if u != nil {
		acuo.SetEndAt(*u)
	}
	return acuo
}

// AddEndAt adds u to the "end_at" field.
func (acuo *AppConfigUpdateOne) AddEndAt(u int32) *AppConfigUpdateOne {
	acuo.mutation.AddEndAt(u)
	return acuo
}

// ClearEndAt clears the value of the "end_at" field.
func (acuo *AppConfigUpdateOne) ClearEndAt() *AppConfigUpdateOne {
	acuo.mutation.ClearEndAt()
	return acuo
}

// Mutation returns the AppConfigMutation object of the builder.
func (acuo *AppConfigUpdateOne) Mutation() *AppConfigMutation {
	return acuo.mutation
}

// Where appends a list predicates to the AppConfigUpdate builder.
func (acuo *AppConfigUpdateOne) Where(ps ...predicate.AppConfig) *AppConfigUpdateOne {
	acuo.mutation.Where(ps...)
	return acuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *AppConfigUpdateOne) Select(field string, fields ...string) *AppConfigUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated AppConfig entity.
func (acuo *AppConfigUpdateOne) Save(ctx context.Context) (*AppConfig, error) {
	acuo.defaults()
	return withHooks(ctx, acuo.sqlSave, acuo.mutation, acuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *AppConfigUpdateOne) SaveX(ctx context.Context) *AppConfig {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *AppConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *AppConfigUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acuo *AppConfigUpdateOne) defaults() {
	if _, ok := acuo.mutation.UpdatedAt(); !ok {
		v := appconfig.UpdateDefaultUpdatedAt()
		acuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (acuo *AppConfigUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppConfigUpdateOne {
	acuo.modifiers = append(acuo.modifiers, modifiers...)
	return acuo
}

func (acuo *AppConfigUpdateOne) sqlSave(ctx context.Context) (_node *AppConfig, err error) {
	_spec := sqlgraph.NewUpdateSpec(appconfig.Table, appconfig.Columns, sqlgraph.NewFieldSpec(appconfig.FieldID, field.TypeUint32))
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AppConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appconfig.FieldID)
		for _, f := range fields {
			if !appconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != appconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acuo.mutation.CreatedAt(); ok {
		_spec.SetField(appconfig.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := acuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(appconfig.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := acuo.mutation.UpdatedAt(); ok {
		_spec.SetField(appconfig.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := acuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(appconfig.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := acuo.mutation.DeletedAt(); ok {
		_spec.SetField(appconfig.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := acuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(appconfig.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := acuo.mutation.EntID(); ok {
		_spec.SetField(appconfig.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := acuo.mutation.AppID(); ok {
		_spec.SetField(appconfig.FieldAppID, field.TypeUUID, value)
	}
	if acuo.mutation.AppIDCleared() {
		_spec.ClearField(appconfig.FieldAppID, field.TypeUUID)
	}
	if value, ok := acuo.mutation.SettleMode(); ok {
		_spec.SetField(appconfig.FieldSettleMode, field.TypeString, value)
	}
	if acuo.mutation.SettleModeCleared() {
		_spec.ClearField(appconfig.FieldSettleMode, field.TypeString)
	}
	if value, ok := acuo.mutation.SettleAmountType(); ok {
		_spec.SetField(appconfig.FieldSettleAmountType, field.TypeString, value)
	}
	if acuo.mutation.SettleAmountTypeCleared() {
		_spec.ClearField(appconfig.FieldSettleAmountType, field.TypeString)
	}
	if value, ok := acuo.mutation.SettleInterval(); ok {
		_spec.SetField(appconfig.FieldSettleInterval, field.TypeString, value)
	}
	if acuo.mutation.SettleIntervalCleared() {
		_spec.ClearField(appconfig.FieldSettleInterval, field.TypeString)
	}
	if value, ok := acuo.mutation.CommissionType(); ok {
		_spec.SetField(appconfig.FieldCommissionType, field.TypeString, value)
	}
	if acuo.mutation.CommissionTypeCleared() {
		_spec.ClearField(appconfig.FieldCommissionType, field.TypeString)
	}
	if value, ok := acuo.mutation.SettleBenefit(); ok {
		_spec.SetField(appconfig.FieldSettleBenefit, field.TypeBool, value)
	}
	if acuo.mutation.SettleBenefitCleared() {
		_spec.ClearField(appconfig.FieldSettleBenefit, field.TypeBool)
	}
	if value, ok := acuo.mutation.MaxLevel(); ok {
		_spec.SetField(appconfig.FieldMaxLevel, field.TypeUint32, value)
	}
	if value, ok := acuo.mutation.AddedMaxLevel(); ok {
		_spec.AddField(appconfig.FieldMaxLevel, field.TypeUint32, value)
	}
	if acuo.mutation.MaxLevelCleared() {
		_spec.ClearField(appconfig.FieldMaxLevel, field.TypeUint32)
	}
	if value, ok := acuo.mutation.StartAt(); ok {
		_spec.SetField(appconfig.FieldStartAt, field.TypeUint32, value)
	}
	if value, ok := acuo.mutation.AddedStartAt(); ok {
		_spec.AddField(appconfig.FieldStartAt, field.TypeUint32, value)
	}
	if acuo.mutation.StartAtCleared() {
		_spec.ClearField(appconfig.FieldStartAt, field.TypeUint32)
	}
	if value, ok := acuo.mutation.EndAt(); ok {
		_spec.SetField(appconfig.FieldEndAt, field.TypeUint32, value)
	}
	if value, ok := acuo.mutation.AddedEndAt(); ok {
		_spec.AddField(appconfig.FieldEndAt, field.TypeUint32, value)
	}
	if acuo.mutation.EndAtCleared() {
		_spec.ClearField(appconfig.FieldEndAt, field.TypeUint32)
	}
	_spec.AddModifiers(acuo.modifiers...)
	_node = &AppConfig{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	acuo.mutation.done = true
	return _node, nil
}

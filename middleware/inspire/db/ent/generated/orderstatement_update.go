// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/orderstatement"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// OrderStatementUpdate is the builder for updating OrderStatement entities.
type OrderStatementUpdate struct {
	config
	hooks     []Hook
	mutation  *OrderStatementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrderStatementUpdate builder.
func (osu *OrderStatementUpdate) Where(ps ...predicate.OrderStatement) *OrderStatementUpdate {
	osu.mutation.Where(ps...)
	return osu
}

// SetCreatedAt sets the "created_at" field.
func (osu *OrderStatementUpdate) SetCreatedAt(u uint32) *OrderStatementUpdate {
	osu.mutation.ResetCreatedAt()
	osu.mutation.SetCreatedAt(u)
	return osu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (osu *OrderStatementUpdate) SetNillableCreatedAt(u *uint32) *OrderStatementUpdate {
	if u != nil {
		osu.SetCreatedAt(*u)
	}
	return osu
}

// AddCreatedAt adds u to the "created_at" field.
func (osu *OrderStatementUpdate) AddCreatedAt(u int32) *OrderStatementUpdate {
	osu.mutation.AddCreatedAt(u)
	return osu
}

// SetUpdatedAt sets the "updated_at" field.
func (osu *OrderStatementUpdate) SetUpdatedAt(u uint32) *OrderStatementUpdate {
	osu.mutation.ResetUpdatedAt()
	osu.mutation.SetUpdatedAt(u)
	return osu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (osu *OrderStatementUpdate) AddUpdatedAt(u int32) *OrderStatementUpdate {
	osu.mutation.AddUpdatedAt(u)
	return osu
}

// SetDeletedAt sets the "deleted_at" field.
func (osu *OrderStatementUpdate) SetDeletedAt(u uint32) *OrderStatementUpdate {
	osu.mutation.ResetDeletedAt()
	osu.mutation.SetDeletedAt(u)
	return osu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (osu *OrderStatementUpdate) SetNillableDeletedAt(u *uint32) *OrderStatementUpdate {
	if u != nil {
		osu.SetDeletedAt(*u)
	}
	return osu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (osu *OrderStatementUpdate) AddDeletedAt(u int32) *OrderStatementUpdate {
	osu.mutation.AddDeletedAt(u)
	return osu
}

// SetEntID sets the "ent_id" field.
func (osu *OrderStatementUpdate) SetEntID(u uuid.UUID) *OrderStatementUpdate {
	osu.mutation.SetEntID(u)
	return osu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (osu *OrderStatementUpdate) SetNillableEntID(u *uuid.UUID) *OrderStatementUpdate {
	if u != nil {
		osu.SetEntID(*u)
	}
	return osu
}

// SetAppID sets the "app_id" field.
func (osu *OrderStatementUpdate) SetAppID(u uuid.UUID) *OrderStatementUpdate {
	osu.mutation.SetAppID(u)
	return osu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (osu *OrderStatementUpdate) SetNillableAppID(u *uuid.UUID) *OrderStatementUpdate {
	if u != nil {
		osu.SetAppID(*u)
	}
	return osu
}

// ClearAppID clears the value of the "app_id" field.
func (osu *OrderStatementUpdate) ClearAppID() *OrderStatementUpdate {
	osu.mutation.ClearAppID()
	return osu
}

// SetUserID sets the "user_id" field.
func (osu *OrderStatementUpdate) SetUserID(u uuid.UUID) *OrderStatementUpdate {
	osu.mutation.SetUserID(u)
	return osu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (osu *OrderStatementUpdate) SetNillableUserID(u *uuid.UUID) *OrderStatementUpdate {
	if u != nil {
		osu.SetUserID(*u)
	}
	return osu
}

// ClearUserID clears the value of the "user_id" field.
func (osu *OrderStatementUpdate) ClearUserID() *OrderStatementUpdate {
	osu.mutation.ClearUserID()
	return osu
}

// SetGoodID sets the "good_id" field.
func (osu *OrderStatementUpdate) SetGoodID(u uuid.UUID) *OrderStatementUpdate {
	osu.mutation.SetGoodID(u)
	return osu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (osu *OrderStatementUpdate) SetNillableGoodID(u *uuid.UUID) *OrderStatementUpdate {
	if u != nil {
		osu.SetGoodID(*u)
	}
	return osu
}

// ClearGoodID clears the value of the "good_id" field.
func (osu *OrderStatementUpdate) ClearGoodID() *OrderStatementUpdate {
	osu.mutation.ClearGoodID()
	return osu
}

// SetAppGoodID sets the "app_good_id" field.
func (osu *OrderStatementUpdate) SetAppGoodID(u uuid.UUID) *OrderStatementUpdate {
	osu.mutation.SetAppGoodID(u)
	return osu
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (osu *OrderStatementUpdate) SetNillableAppGoodID(u *uuid.UUID) *OrderStatementUpdate {
	if u != nil {
		osu.SetAppGoodID(*u)
	}
	return osu
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (osu *OrderStatementUpdate) ClearAppGoodID() *OrderStatementUpdate {
	osu.mutation.ClearAppGoodID()
	return osu
}

// SetOrderID sets the "order_id" field.
func (osu *OrderStatementUpdate) SetOrderID(u uuid.UUID) *OrderStatementUpdate {
	osu.mutation.SetOrderID(u)
	return osu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (osu *OrderStatementUpdate) SetNillableOrderID(u *uuid.UUID) *OrderStatementUpdate {
	if u != nil {
		osu.SetOrderID(*u)
	}
	return osu
}

// ClearOrderID clears the value of the "order_id" field.
func (osu *OrderStatementUpdate) ClearOrderID() *OrderStatementUpdate {
	osu.mutation.ClearOrderID()
	return osu
}

// SetDirectContributorID sets the "direct_contributor_id" field.
func (osu *OrderStatementUpdate) SetDirectContributorID(u uuid.UUID) *OrderStatementUpdate {
	osu.mutation.SetDirectContributorID(u)
	return osu
}

// SetNillableDirectContributorID sets the "direct_contributor_id" field if the given value is not nil.
func (osu *OrderStatementUpdate) SetNillableDirectContributorID(u *uuid.UUID) *OrderStatementUpdate {
	if u != nil {
		osu.SetDirectContributorID(*u)
	}
	return osu
}

// ClearDirectContributorID clears the value of the "direct_contributor_id" field.
func (osu *OrderStatementUpdate) ClearDirectContributorID() *OrderStatementUpdate {
	osu.mutation.ClearDirectContributorID()
	return osu
}

// SetOrderUserID sets the "order_user_id" field.
func (osu *OrderStatementUpdate) SetOrderUserID(u uuid.UUID) *OrderStatementUpdate {
	osu.mutation.SetOrderUserID(u)
	return osu
}

// SetNillableOrderUserID sets the "order_user_id" field if the given value is not nil.
func (osu *OrderStatementUpdate) SetNillableOrderUserID(u *uuid.UUID) *OrderStatementUpdate {
	if u != nil {
		osu.SetOrderUserID(*u)
	}
	return osu
}

// ClearOrderUserID clears the value of the "order_user_id" field.
func (osu *OrderStatementUpdate) ClearOrderUserID() *OrderStatementUpdate {
	osu.mutation.ClearOrderUserID()
	return osu
}

// SetGoodCoinTypeID sets the "good_coin_type_id" field.
func (osu *OrderStatementUpdate) SetGoodCoinTypeID(u uuid.UUID) *OrderStatementUpdate {
	osu.mutation.SetGoodCoinTypeID(u)
	return osu
}

// SetNillableGoodCoinTypeID sets the "good_coin_type_id" field if the given value is not nil.
func (osu *OrderStatementUpdate) SetNillableGoodCoinTypeID(u *uuid.UUID) *OrderStatementUpdate {
	if u != nil {
		osu.SetGoodCoinTypeID(*u)
	}
	return osu
}

// ClearGoodCoinTypeID clears the value of the "good_coin_type_id" field.
func (osu *OrderStatementUpdate) ClearGoodCoinTypeID() *OrderStatementUpdate {
	osu.mutation.ClearGoodCoinTypeID()
	return osu
}

// SetUnits sets the "units" field.
func (osu *OrderStatementUpdate) SetUnits(d decimal.Decimal) *OrderStatementUpdate {
	osu.mutation.SetUnits(d)
	return osu
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (osu *OrderStatementUpdate) SetNillableUnits(d *decimal.Decimal) *OrderStatementUpdate {
	if d != nil {
		osu.SetUnits(*d)
	}
	return osu
}

// ClearUnits clears the value of the "units" field.
func (osu *OrderStatementUpdate) ClearUnits() *OrderStatementUpdate {
	osu.mutation.ClearUnits()
	return osu
}

// SetGoodValueUsd sets the "good_value_usd" field.
func (osu *OrderStatementUpdate) SetGoodValueUsd(d decimal.Decimal) *OrderStatementUpdate {
	osu.mutation.SetGoodValueUsd(d)
	return osu
}

// SetNillableGoodValueUsd sets the "good_value_usd" field if the given value is not nil.
func (osu *OrderStatementUpdate) SetNillableGoodValueUsd(d *decimal.Decimal) *OrderStatementUpdate {
	if d != nil {
		osu.SetGoodValueUsd(*d)
	}
	return osu
}

// ClearGoodValueUsd clears the value of the "good_value_usd" field.
func (osu *OrderStatementUpdate) ClearGoodValueUsd() *OrderStatementUpdate {
	osu.mutation.ClearGoodValueUsd()
	return osu
}

// SetPaymentAmountUsd sets the "payment_amount_usd" field.
func (osu *OrderStatementUpdate) SetPaymentAmountUsd(d decimal.Decimal) *OrderStatementUpdate {
	osu.mutation.SetPaymentAmountUsd(d)
	return osu
}

// SetNillablePaymentAmountUsd sets the "payment_amount_usd" field if the given value is not nil.
func (osu *OrderStatementUpdate) SetNillablePaymentAmountUsd(d *decimal.Decimal) *OrderStatementUpdate {
	if d != nil {
		osu.SetPaymentAmountUsd(*d)
	}
	return osu
}

// ClearPaymentAmountUsd clears the value of the "payment_amount_usd" field.
func (osu *OrderStatementUpdate) ClearPaymentAmountUsd() *OrderStatementUpdate {
	osu.mutation.ClearPaymentAmountUsd()
	return osu
}

// SetCommissionAmountUsd sets the "commission_amount_usd" field.
func (osu *OrderStatementUpdate) SetCommissionAmountUsd(d decimal.Decimal) *OrderStatementUpdate {
	osu.mutation.SetCommissionAmountUsd(d)
	return osu
}

// SetNillableCommissionAmountUsd sets the "commission_amount_usd" field if the given value is not nil.
func (osu *OrderStatementUpdate) SetNillableCommissionAmountUsd(d *decimal.Decimal) *OrderStatementUpdate {
	if d != nil {
		osu.SetCommissionAmountUsd(*d)
	}
	return osu
}

// ClearCommissionAmountUsd clears the value of the "commission_amount_usd" field.
func (osu *OrderStatementUpdate) ClearCommissionAmountUsd() *OrderStatementUpdate {
	osu.mutation.ClearCommissionAmountUsd()
	return osu
}

// SetAppConfigID sets the "app_config_id" field.
func (osu *OrderStatementUpdate) SetAppConfigID(u uuid.UUID) *OrderStatementUpdate {
	osu.mutation.SetAppConfigID(u)
	return osu
}

// SetNillableAppConfigID sets the "app_config_id" field if the given value is not nil.
func (osu *OrderStatementUpdate) SetNillableAppConfigID(u *uuid.UUID) *OrderStatementUpdate {
	if u != nil {
		osu.SetAppConfigID(*u)
	}
	return osu
}

// ClearAppConfigID clears the value of the "app_config_id" field.
func (osu *OrderStatementUpdate) ClearAppConfigID() *OrderStatementUpdate {
	osu.mutation.ClearAppConfigID()
	return osu
}

// SetCommissionConfigID sets the "commission_config_id" field.
func (osu *OrderStatementUpdate) SetCommissionConfigID(u uuid.UUID) *OrderStatementUpdate {
	osu.mutation.SetCommissionConfigID(u)
	return osu
}

// SetNillableCommissionConfigID sets the "commission_config_id" field if the given value is not nil.
func (osu *OrderStatementUpdate) SetNillableCommissionConfigID(u *uuid.UUID) *OrderStatementUpdate {
	if u != nil {
		osu.SetCommissionConfigID(*u)
	}
	return osu
}

// ClearCommissionConfigID clears the value of the "commission_config_id" field.
func (osu *OrderStatementUpdate) ClearCommissionConfigID() *OrderStatementUpdate {
	osu.mutation.ClearCommissionConfigID()
	return osu
}

// SetCommissionConfigType sets the "commission_config_type" field.
func (osu *OrderStatementUpdate) SetCommissionConfigType(s string) *OrderStatementUpdate {
	osu.mutation.SetCommissionConfigType(s)
	return osu
}

// SetNillableCommissionConfigType sets the "commission_config_type" field if the given value is not nil.
func (osu *OrderStatementUpdate) SetNillableCommissionConfigType(s *string) *OrderStatementUpdate {
	if s != nil {
		osu.SetCommissionConfigType(*s)
	}
	return osu
}

// ClearCommissionConfigType clears the value of the "commission_config_type" field.
func (osu *OrderStatementUpdate) ClearCommissionConfigType() *OrderStatementUpdate {
	osu.mutation.ClearCommissionConfigType()
	return osu
}

// Mutation returns the OrderStatementMutation object of the builder.
func (osu *OrderStatementUpdate) Mutation() *OrderStatementMutation {
	return osu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (osu *OrderStatementUpdate) Save(ctx context.Context) (int, error) {
	osu.defaults()
	return withHooks(ctx, osu.sqlSave, osu.mutation, osu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osu *OrderStatementUpdate) SaveX(ctx context.Context) int {
	affected, err := osu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (osu *OrderStatementUpdate) Exec(ctx context.Context) error {
	_, err := osu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osu *OrderStatementUpdate) ExecX(ctx context.Context) {
	if err := osu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osu *OrderStatementUpdate) defaults() {
	if _, ok := osu.mutation.UpdatedAt(); !ok {
		v := orderstatement.UpdateDefaultUpdatedAt()
		osu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (osu *OrderStatementUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderStatementUpdate {
	osu.modifiers = append(osu.modifiers, modifiers...)
	return osu
}

func (osu *OrderStatementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderstatement.Table, orderstatement.Columns, sqlgraph.NewFieldSpec(orderstatement.FieldID, field.TypeUint32))
	if ps := osu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osu.mutation.CreatedAt(); ok {
		_spec.SetField(orderstatement.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := osu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(orderstatement.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := osu.mutation.UpdatedAt(); ok {
		_spec.SetField(orderstatement.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := osu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(orderstatement.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := osu.mutation.DeletedAt(); ok {
		_spec.SetField(orderstatement.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := osu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(orderstatement.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := osu.mutation.EntID(); ok {
		_spec.SetField(orderstatement.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := osu.mutation.AppID(); ok {
		_spec.SetField(orderstatement.FieldAppID, field.TypeUUID, value)
	}
	if osu.mutation.AppIDCleared() {
		_spec.ClearField(orderstatement.FieldAppID, field.TypeUUID)
	}
	if value, ok := osu.mutation.UserID(); ok {
		_spec.SetField(orderstatement.FieldUserID, field.TypeUUID, value)
	}
	if osu.mutation.UserIDCleared() {
		_spec.ClearField(orderstatement.FieldUserID, field.TypeUUID)
	}
	if value, ok := osu.mutation.GoodID(); ok {
		_spec.SetField(orderstatement.FieldGoodID, field.TypeUUID, value)
	}
	if osu.mutation.GoodIDCleared() {
		_spec.ClearField(orderstatement.FieldGoodID, field.TypeUUID)
	}
	if value, ok := osu.mutation.AppGoodID(); ok {
		_spec.SetField(orderstatement.FieldAppGoodID, field.TypeUUID, value)
	}
	if osu.mutation.AppGoodIDCleared() {
		_spec.ClearField(orderstatement.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := osu.mutation.OrderID(); ok {
		_spec.SetField(orderstatement.FieldOrderID, field.TypeUUID, value)
	}
	if osu.mutation.OrderIDCleared() {
		_spec.ClearField(orderstatement.FieldOrderID, field.TypeUUID)
	}
	if value, ok := osu.mutation.DirectContributorID(); ok {
		_spec.SetField(orderstatement.FieldDirectContributorID, field.TypeUUID, value)
	}
	if osu.mutation.DirectContributorIDCleared() {
		_spec.ClearField(orderstatement.FieldDirectContributorID, field.TypeUUID)
	}
	if value, ok := osu.mutation.OrderUserID(); ok {
		_spec.SetField(orderstatement.FieldOrderUserID, field.TypeUUID, value)
	}
	if osu.mutation.OrderUserIDCleared() {
		_spec.ClearField(orderstatement.FieldOrderUserID, field.TypeUUID)
	}
	if value, ok := osu.mutation.GoodCoinTypeID(); ok {
		_spec.SetField(orderstatement.FieldGoodCoinTypeID, field.TypeUUID, value)
	}
	if osu.mutation.GoodCoinTypeIDCleared() {
		_spec.ClearField(orderstatement.FieldGoodCoinTypeID, field.TypeUUID)
	}
	if value, ok := osu.mutation.Units(); ok {
		_spec.SetField(orderstatement.FieldUnits, field.TypeOther, value)
	}
	if osu.mutation.UnitsCleared() {
		_spec.ClearField(orderstatement.FieldUnits, field.TypeOther)
	}
	if value, ok := osu.mutation.GoodValueUsd(); ok {
		_spec.SetField(orderstatement.FieldGoodValueUsd, field.TypeOther, value)
	}
	if osu.mutation.GoodValueUsdCleared() {
		_spec.ClearField(orderstatement.FieldGoodValueUsd, field.TypeOther)
	}
	if value, ok := osu.mutation.PaymentAmountUsd(); ok {
		_spec.SetField(orderstatement.FieldPaymentAmountUsd, field.TypeOther, value)
	}
	if osu.mutation.PaymentAmountUsdCleared() {
		_spec.ClearField(orderstatement.FieldPaymentAmountUsd, field.TypeOther)
	}
	if value, ok := osu.mutation.CommissionAmountUsd(); ok {
		_spec.SetField(orderstatement.FieldCommissionAmountUsd, field.TypeOther, value)
	}
	if osu.mutation.CommissionAmountUsdCleared() {
		_spec.ClearField(orderstatement.FieldCommissionAmountUsd, field.TypeOther)
	}
	if value, ok := osu.mutation.AppConfigID(); ok {
		_spec.SetField(orderstatement.FieldAppConfigID, field.TypeUUID, value)
	}
	if osu.mutation.AppConfigIDCleared() {
		_spec.ClearField(orderstatement.FieldAppConfigID, field.TypeUUID)
	}
	if value, ok := osu.mutation.CommissionConfigID(); ok {
		_spec.SetField(orderstatement.FieldCommissionConfigID, field.TypeUUID, value)
	}
	if osu.mutation.CommissionConfigIDCleared() {
		_spec.ClearField(orderstatement.FieldCommissionConfigID, field.TypeUUID)
	}
	if value, ok := osu.mutation.CommissionConfigType(); ok {
		_spec.SetField(orderstatement.FieldCommissionConfigType, field.TypeString, value)
	}
	if osu.mutation.CommissionConfigTypeCleared() {
		_spec.ClearField(orderstatement.FieldCommissionConfigType, field.TypeString)
	}
	_spec.AddModifiers(osu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, osu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderstatement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	osu.mutation.done = true
	return n, nil
}

// OrderStatementUpdateOne is the builder for updating a single OrderStatement entity.
type OrderStatementUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrderStatementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (osuo *OrderStatementUpdateOne) SetCreatedAt(u uint32) *OrderStatementUpdateOne {
	osuo.mutation.ResetCreatedAt()
	osuo.mutation.SetCreatedAt(u)
	return osuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (osuo *OrderStatementUpdateOne) SetNillableCreatedAt(u *uint32) *OrderStatementUpdateOne {
	if u != nil {
		osuo.SetCreatedAt(*u)
	}
	return osuo
}

// AddCreatedAt adds u to the "created_at" field.
func (osuo *OrderStatementUpdateOne) AddCreatedAt(u int32) *OrderStatementUpdateOne {
	osuo.mutation.AddCreatedAt(u)
	return osuo
}

// SetUpdatedAt sets the "updated_at" field.
func (osuo *OrderStatementUpdateOne) SetUpdatedAt(u uint32) *OrderStatementUpdateOne {
	osuo.mutation.ResetUpdatedAt()
	osuo.mutation.SetUpdatedAt(u)
	return osuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (osuo *OrderStatementUpdateOne) AddUpdatedAt(u int32) *OrderStatementUpdateOne {
	osuo.mutation.AddUpdatedAt(u)
	return osuo
}

// SetDeletedAt sets the "deleted_at" field.
func (osuo *OrderStatementUpdateOne) SetDeletedAt(u uint32) *OrderStatementUpdateOne {
	osuo.mutation.ResetDeletedAt()
	osuo.mutation.SetDeletedAt(u)
	return osuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (osuo *OrderStatementUpdateOne) SetNillableDeletedAt(u *uint32) *OrderStatementUpdateOne {
	if u != nil {
		osuo.SetDeletedAt(*u)
	}
	return osuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (osuo *OrderStatementUpdateOne) AddDeletedAt(u int32) *OrderStatementUpdateOne {
	osuo.mutation.AddDeletedAt(u)
	return osuo
}

// SetEntID sets the "ent_id" field.
func (osuo *OrderStatementUpdateOne) SetEntID(u uuid.UUID) *OrderStatementUpdateOne {
	osuo.mutation.SetEntID(u)
	return osuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (osuo *OrderStatementUpdateOne) SetNillableEntID(u *uuid.UUID) *OrderStatementUpdateOne {
	if u != nil {
		osuo.SetEntID(*u)
	}
	return osuo
}

// SetAppID sets the "app_id" field.
func (osuo *OrderStatementUpdateOne) SetAppID(u uuid.UUID) *OrderStatementUpdateOne {
	osuo.mutation.SetAppID(u)
	return osuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (osuo *OrderStatementUpdateOne) SetNillableAppID(u *uuid.UUID) *OrderStatementUpdateOne {
	if u != nil {
		osuo.SetAppID(*u)
	}
	return osuo
}

// ClearAppID clears the value of the "app_id" field.
func (osuo *OrderStatementUpdateOne) ClearAppID() *OrderStatementUpdateOne {
	osuo.mutation.ClearAppID()
	return osuo
}

// SetUserID sets the "user_id" field.
func (osuo *OrderStatementUpdateOne) SetUserID(u uuid.UUID) *OrderStatementUpdateOne {
	osuo.mutation.SetUserID(u)
	return osuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (osuo *OrderStatementUpdateOne) SetNillableUserID(u *uuid.UUID) *OrderStatementUpdateOne {
	if u != nil {
		osuo.SetUserID(*u)
	}
	return osuo
}

// ClearUserID clears the value of the "user_id" field.
func (osuo *OrderStatementUpdateOne) ClearUserID() *OrderStatementUpdateOne {
	osuo.mutation.ClearUserID()
	return osuo
}

// SetGoodID sets the "good_id" field.
func (osuo *OrderStatementUpdateOne) SetGoodID(u uuid.UUID) *OrderStatementUpdateOne {
	osuo.mutation.SetGoodID(u)
	return osuo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (osuo *OrderStatementUpdateOne) SetNillableGoodID(u *uuid.UUID) *OrderStatementUpdateOne {
	if u != nil {
		osuo.SetGoodID(*u)
	}
	return osuo
}

// ClearGoodID clears the value of the "good_id" field.
func (osuo *OrderStatementUpdateOne) ClearGoodID() *OrderStatementUpdateOne {
	osuo.mutation.ClearGoodID()
	return osuo
}

// SetAppGoodID sets the "app_good_id" field.
func (osuo *OrderStatementUpdateOne) SetAppGoodID(u uuid.UUID) *OrderStatementUpdateOne {
	osuo.mutation.SetAppGoodID(u)
	return osuo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (osuo *OrderStatementUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *OrderStatementUpdateOne {
	if u != nil {
		osuo.SetAppGoodID(*u)
	}
	return osuo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (osuo *OrderStatementUpdateOne) ClearAppGoodID() *OrderStatementUpdateOne {
	osuo.mutation.ClearAppGoodID()
	return osuo
}

// SetOrderID sets the "order_id" field.
func (osuo *OrderStatementUpdateOne) SetOrderID(u uuid.UUID) *OrderStatementUpdateOne {
	osuo.mutation.SetOrderID(u)
	return osuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (osuo *OrderStatementUpdateOne) SetNillableOrderID(u *uuid.UUID) *OrderStatementUpdateOne {
	if u != nil {
		osuo.SetOrderID(*u)
	}
	return osuo
}

// ClearOrderID clears the value of the "order_id" field.
func (osuo *OrderStatementUpdateOne) ClearOrderID() *OrderStatementUpdateOne {
	osuo.mutation.ClearOrderID()
	return osuo
}

// SetDirectContributorID sets the "direct_contributor_id" field.
func (osuo *OrderStatementUpdateOne) SetDirectContributorID(u uuid.UUID) *OrderStatementUpdateOne {
	osuo.mutation.SetDirectContributorID(u)
	return osuo
}

// SetNillableDirectContributorID sets the "direct_contributor_id" field if the given value is not nil.
func (osuo *OrderStatementUpdateOne) SetNillableDirectContributorID(u *uuid.UUID) *OrderStatementUpdateOne {
	if u != nil {
		osuo.SetDirectContributorID(*u)
	}
	return osuo
}

// ClearDirectContributorID clears the value of the "direct_contributor_id" field.
func (osuo *OrderStatementUpdateOne) ClearDirectContributorID() *OrderStatementUpdateOne {
	osuo.mutation.ClearDirectContributorID()
	return osuo
}

// SetOrderUserID sets the "order_user_id" field.
func (osuo *OrderStatementUpdateOne) SetOrderUserID(u uuid.UUID) *OrderStatementUpdateOne {
	osuo.mutation.SetOrderUserID(u)
	return osuo
}

// SetNillableOrderUserID sets the "order_user_id" field if the given value is not nil.
func (osuo *OrderStatementUpdateOne) SetNillableOrderUserID(u *uuid.UUID) *OrderStatementUpdateOne {
	if u != nil {
		osuo.SetOrderUserID(*u)
	}
	return osuo
}

// ClearOrderUserID clears the value of the "order_user_id" field.
func (osuo *OrderStatementUpdateOne) ClearOrderUserID() *OrderStatementUpdateOne {
	osuo.mutation.ClearOrderUserID()
	return osuo
}

// SetGoodCoinTypeID sets the "good_coin_type_id" field.
func (osuo *OrderStatementUpdateOne) SetGoodCoinTypeID(u uuid.UUID) *OrderStatementUpdateOne {
	osuo.mutation.SetGoodCoinTypeID(u)
	return osuo
}

// SetNillableGoodCoinTypeID sets the "good_coin_type_id" field if the given value is not nil.
func (osuo *OrderStatementUpdateOne) SetNillableGoodCoinTypeID(u *uuid.UUID) *OrderStatementUpdateOne {
	if u != nil {
		osuo.SetGoodCoinTypeID(*u)
	}
	return osuo
}

// ClearGoodCoinTypeID clears the value of the "good_coin_type_id" field.
func (osuo *OrderStatementUpdateOne) ClearGoodCoinTypeID() *OrderStatementUpdateOne {
	osuo.mutation.ClearGoodCoinTypeID()
	return osuo
}

// SetUnits sets the "units" field.
func (osuo *OrderStatementUpdateOne) SetUnits(d decimal.Decimal) *OrderStatementUpdateOne {
	osuo.mutation.SetUnits(d)
	return osuo
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (osuo *OrderStatementUpdateOne) SetNillableUnits(d *decimal.Decimal) *OrderStatementUpdateOne {
	if d != nil {
		osuo.SetUnits(*d)
	}
	return osuo
}

// ClearUnits clears the value of the "units" field.
func (osuo *OrderStatementUpdateOne) ClearUnits() *OrderStatementUpdateOne {
	osuo.mutation.ClearUnits()
	return osuo
}

// SetGoodValueUsd sets the "good_value_usd" field.
func (osuo *OrderStatementUpdateOne) SetGoodValueUsd(d decimal.Decimal) *OrderStatementUpdateOne {
	osuo.mutation.SetGoodValueUsd(d)
	return osuo
}

// SetNillableGoodValueUsd sets the "good_value_usd" field if the given value is not nil.
func (osuo *OrderStatementUpdateOne) SetNillableGoodValueUsd(d *decimal.Decimal) *OrderStatementUpdateOne {
	if d != nil {
		osuo.SetGoodValueUsd(*d)
	}
	return osuo
}

// ClearGoodValueUsd clears the value of the "good_value_usd" field.
func (osuo *OrderStatementUpdateOne) ClearGoodValueUsd() *OrderStatementUpdateOne {
	osuo.mutation.ClearGoodValueUsd()
	return osuo
}

// SetPaymentAmountUsd sets the "payment_amount_usd" field.
func (osuo *OrderStatementUpdateOne) SetPaymentAmountUsd(d decimal.Decimal) *OrderStatementUpdateOne {
	osuo.mutation.SetPaymentAmountUsd(d)
	return osuo
}

// SetNillablePaymentAmountUsd sets the "payment_amount_usd" field if the given value is not nil.
func (osuo *OrderStatementUpdateOne) SetNillablePaymentAmountUsd(d *decimal.Decimal) *OrderStatementUpdateOne {
	if d != nil {
		osuo.SetPaymentAmountUsd(*d)
	}
	return osuo
}

// ClearPaymentAmountUsd clears the value of the "payment_amount_usd" field.
func (osuo *OrderStatementUpdateOne) ClearPaymentAmountUsd() *OrderStatementUpdateOne {
	osuo.mutation.ClearPaymentAmountUsd()
	return osuo
}

// SetCommissionAmountUsd sets the "commission_amount_usd" field.
func (osuo *OrderStatementUpdateOne) SetCommissionAmountUsd(d decimal.Decimal) *OrderStatementUpdateOne {
	osuo.mutation.SetCommissionAmountUsd(d)
	return osuo
}

// SetNillableCommissionAmountUsd sets the "commission_amount_usd" field if the given value is not nil.
func (osuo *OrderStatementUpdateOne) SetNillableCommissionAmountUsd(d *decimal.Decimal) *OrderStatementUpdateOne {
	if d != nil {
		osuo.SetCommissionAmountUsd(*d)
	}
	return osuo
}

// ClearCommissionAmountUsd clears the value of the "commission_amount_usd" field.
func (osuo *OrderStatementUpdateOne) ClearCommissionAmountUsd() *OrderStatementUpdateOne {
	osuo.mutation.ClearCommissionAmountUsd()
	return osuo
}

// SetAppConfigID sets the "app_config_id" field.
func (osuo *OrderStatementUpdateOne) SetAppConfigID(u uuid.UUID) *OrderStatementUpdateOne {
	osuo.mutation.SetAppConfigID(u)
	return osuo
}

// SetNillableAppConfigID sets the "app_config_id" field if the given value is not nil.
func (osuo *OrderStatementUpdateOne) SetNillableAppConfigID(u *uuid.UUID) *OrderStatementUpdateOne {
	if u != nil {
		osuo.SetAppConfigID(*u)
	}
	return osuo
}

// ClearAppConfigID clears the value of the "app_config_id" field.
func (osuo *OrderStatementUpdateOne) ClearAppConfigID() *OrderStatementUpdateOne {
	osuo.mutation.ClearAppConfigID()
	return osuo
}

// SetCommissionConfigID sets the "commission_config_id" field.
func (osuo *OrderStatementUpdateOne) SetCommissionConfigID(u uuid.UUID) *OrderStatementUpdateOne {
	osuo.mutation.SetCommissionConfigID(u)
	return osuo
}

// SetNillableCommissionConfigID sets the "commission_config_id" field if the given value is not nil.
func (osuo *OrderStatementUpdateOne) SetNillableCommissionConfigID(u *uuid.UUID) *OrderStatementUpdateOne {
	if u != nil {
		osuo.SetCommissionConfigID(*u)
	}
	return osuo
}

// ClearCommissionConfigID clears the value of the "commission_config_id" field.
func (osuo *OrderStatementUpdateOne) ClearCommissionConfigID() *OrderStatementUpdateOne {
	osuo.mutation.ClearCommissionConfigID()
	return osuo
}

// SetCommissionConfigType sets the "commission_config_type" field.
func (osuo *OrderStatementUpdateOne) SetCommissionConfigType(s string) *OrderStatementUpdateOne {
	osuo.mutation.SetCommissionConfigType(s)
	return osuo
}

// SetNillableCommissionConfigType sets the "commission_config_type" field if the given value is not nil.
func (osuo *OrderStatementUpdateOne) SetNillableCommissionConfigType(s *string) *OrderStatementUpdateOne {
	if s != nil {
		osuo.SetCommissionConfigType(*s)
	}
	return osuo
}

// ClearCommissionConfigType clears the value of the "commission_config_type" field.
func (osuo *OrderStatementUpdateOne) ClearCommissionConfigType() *OrderStatementUpdateOne {
	osuo.mutation.ClearCommissionConfigType()
	return osuo
}

// Mutation returns the OrderStatementMutation object of the builder.
func (osuo *OrderStatementUpdateOne) Mutation() *OrderStatementMutation {
	return osuo.mutation
}

// Where appends a list predicates to the OrderStatementUpdate builder.
func (osuo *OrderStatementUpdateOne) Where(ps ...predicate.OrderStatement) *OrderStatementUpdateOne {
	osuo.mutation.Where(ps...)
	return osuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (osuo *OrderStatementUpdateOne) Select(field string, fields ...string) *OrderStatementUpdateOne {
	osuo.fields = append([]string{field}, fields...)
	return osuo
}

// Save executes the query and returns the updated OrderStatement entity.
func (osuo *OrderStatementUpdateOne) Save(ctx context.Context) (*OrderStatement, error) {
	osuo.defaults()
	return withHooks(ctx, osuo.sqlSave, osuo.mutation, osuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osuo *OrderStatementUpdateOne) SaveX(ctx context.Context) *OrderStatement {
	node, err := osuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (osuo *OrderStatementUpdateOne) Exec(ctx context.Context) error {
	_, err := osuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osuo *OrderStatementUpdateOne) ExecX(ctx context.Context) {
	if err := osuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osuo *OrderStatementUpdateOne) defaults() {
	if _, ok := osuo.mutation.UpdatedAt(); !ok {
		v := orderstatement.UpdateDefaultUpdatedAt()
		osuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (osuo *OrderStatementUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderStatementUpdateOne {
	osuo.modifiers = append(osuo.modifiers, modifiers...)
	return osuo
}

func (osuo *OrderStatementUpdateOne) sqlSave(ctx context.Context) (_node *OrderStatement, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderstatement.Table, orderstatement.Columns, sqlgraph.NewFieldSpec(orderstatement.FieldID, field.TypeUint32))
	id, ok := osuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "OrderStatement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := osuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderstatement.FieldID)
		for _, f := range fields {
			if !orderstatement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != orderstatement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := osuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osuo.mutation.CreatedAt(); ok {
		_spec.SetField(orderstatement.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := osuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(orderstatement.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := osuo.mutation.UpdatedAt(); ok {
		_spec.SetField(orderstatement.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := osuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(orderstatement.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := osuo.mutation.DeletedAt(); ok {
		_spec.SetField(orderstatement.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := osuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(orderstatement.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := osuo.mutation.EntID(); ok {
		_spec.SetField(orderstatement.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := osuo.mutation.AppID(); ok {
		_spec.SetField(orderstatement.FieldAppID, field.TypeUUID, value)
	}
	if osuo.mutation.AppIDCleared() {
		_spec.ClearField(orderstatement.FieldAppID, field.TypeUUID)
	}
	if value, ok := osuo.mutation.UserID(); ok {
		_spec.SetField(orderstatement.FieldUserID, field.TypeUUID, value)
	}
	if osuo.mutation.UserIDCleared() {
		_spec.ClearField(orderstatement.FieldUserID, field.TypeUUID)
	}
	if value, ok := osuo.mutation.GoodID(); ok {
		_spec.SetField(orderstatement.FieldGoodID, field.TypeUUID, value)
	}
	if osuo.mutation.GoodIDCleared() {
		_spec.ClearField(orderstatement.FieldGoodID, field.TypeUUID)
	}
	if value, ok := osuo.mutation.AppGoodID(); ok {
		_spec.SetField(orderstatement.FieldAppGoodID, field.TypeUUID, value)
	}
	if osuo.mutation.AppGoodIDCleared() {
		_spec.ClearField(orderstatement.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := osuo.mutation.OrderID(); ok {
		_spec.SetField(orderstatement.FieldOrderID, field.TypeUUID, value)
	}
	if osuo.mutation.OrderIDCleared() {
		_spec.ClearField(orderstatement.FieldOrderID, field.TypeUUID)
	}
	if value, ok := osuo.mutation.DirectContributorID(); ok {
		_spec.SetField(orderstatement.FieldDirectContributorID, field.TypeUUID, value)
	}
	if osuo.mutation.DirectContributorIDCleared() {
		_spec.ClearField(orderstatement.FieldDirectContributorID, field.TypeUUID)
	}
	if value, ok := osuo.mutation.OrderUserID(); ok {
		_spec.SetField(orderstatement.FieldOrderUserID, field.TypeUUID, value)
	}
	if osuo.mutation.OrderUserIDCleared() {
		_spec.ClearField(orderstatement.FieldOrderUserID, field.TypeUUID)
	}
	if value, ok := osuo.mutation.GoodCoinTypeID(); ok {
		_spec.SetField(orderstatement.FieldGoodCoinTypeID, field.TypeUUID, value)
	}
	if osuo.mutation.GoodCoinTypeIDCleared() {
		_spec.ClearField(orderstatement.FieldGoodCoinTypeID, field.TypeUUID)
	}
	if value, ok := osuo.mutation.Units(); ok {
		_spec.SetField(orderstatement.FieldUnits, field.TypeOther, value)
	}
	if osuo.mutation.UnitsCleared() {
		_spec.ClearField(orderstatement.FieldUnits, field.TypeOther)
	}
	if value, ok := osuo.mutation.GoodValueUsd(); ok {
		_spec.SetField(orderstatement.FieldGoodValueUsd, field.TypeOther, value)
	}
	if osuo.mutation.GoodValueUsdCleared() {
		_spec.ClearField(orderstatement.FieldGoodValueUsd, field.TypeOther)
	}
	if value, ok := osuo.mutation.PaymentAmountUsd(); ok {
		_spec.SetField(orderstatement.FieldPaymentAmountUsd, field.TypeOther, value)
	}
	if osuo.mutation.PaymentAmountUsdCleared() {
		_spec.ClearField(orderstatement.FieldPaymentAmountUsd, field.TypeOther)
	}
	if value, ok := osuo.mutation.CommissionAmountUsd(); ok {
		_spec.SetField(orderstatement.FieldCommissionAmountUsd, field.TypeOther, value)
	}
	if osuo.mutation.CommissionAmountUsdCleared() {
		_spec.ClearField(orderstatement.FieldCommissionAmountUsd, field.TypeOther)
	}
	if value, ok := osuo.mutation.AppConfigID(); ok {
		_spec.SetField(orderstatement.FieldAppConfigID, field.TypeUUID, value)
	}
	if osuo.mutation.AppConfigIDCleared() {
		_spec.ClearField(orderstatement.FieldAppConfigID, field.TypeUUID)
	}
	if value, ok := osuo.mutation.CommissionConfigID(); ok {
		_spec.SetField(orderstatement.FieldCommissionConfigID, field.TypeUUID, value)
	}
	if osuo.mutation.CommissionConfigIDCleared() {
		_spec.ClearField(orderstatement.FieldCommissionConfigID, field.TypeUUID)
	}
	if value, ok := osuo.mutation.CommissionConfigType(); ok {
		_spec.SetField(orderstatement.FieldCommissionConfigType, field.TypeString, value)
	}
	if osuo.mutation.CommissionConfigTypeCleared() {
		_spec.ClearField(orderstatement.FieldCommissionConfigType, field.TypeString)
	}
	_spec.AddModifiers(osuo.modifiers...)
	_node = &OrderStatement{config: osuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, osuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderstatement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	osuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/appgoodcommissionconfig"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppGoodCommissionConfigCreate is the builder for creating a AppGoodCommissionConfig entity.
type AppGoodCommissionConfigCreate struct {
	config
	mutation *AppGoodCommissionConfigMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (agccc *AppGoodCommissionConfigCreate) SetCreatedAt(u uint32) *AppGoodCommissionConfigCreate {
	agccc.mutation.SetCreatedAt(u)
	return agccc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (agccc *AppGoodCommissionConfigCreate) SetNillableCreatedAt(u *uint32) *AppGoodCommissionConfigCreate {
	if u != nil {
		agccc.SetCreatedAt(*u)
	}
	return agccc
}

// SetUpdatedAt sets the "updated_at" field.
func (agccc *AppGoodCommissionConfigCreate) SetUpdatedAt(u uint32) *AppGoodCommissionConfigCreate {
	agccc.mutation.SetUpdatedAt(u)
	return agccc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (agccc *AppGoodCommissionConfigCreate) SetNillableUpdatedAt(u *uint32) *AppGoodCommissionConfigCreate {
	if u != nil {
		agccc.SetUpdatedAt(*u)
	}
	return agccc
}

// SetDeletedAt sets the "deleted_at" field.
func (agccc *AppGoodCommissionConfigCreate) SetDeletedAt(u uint32) *AppGoodCommissionConfigCreate {
	agccc.mutation.SetDeletedAt(u)
	return agccc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (agccc *AppGoodCommissionConfigCreate) SetNillableDeletedAt(u *uint32) *AppGoodCommissionConfigCreate {
	if u != nil {
		agccc.SetDeletedAt(*u)
	}
	return agccc
}

// SetEntID sets the "ent_id" field.
func (agccc *AppGoodCommissionConfigCreate) SetEntID(u uuid.UUID) *AppGoodCommissionConfigCreate {
	agccc.mutation.SetEntID(u)
	return agccc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (agccc *AppGoodCommissionConfigCreate) SetNillableEntID(u *uuid.UUID) *AppGoodCommissionConfigCreate {
	if u != nil {
		agccc.SetEntID(*u)
	}
	return agccc
}

// SetAppID sets the "app_id" field.
func (agccc *AppGoodCommissionConfigCreate) SetAppID(u uuid.UUID) *AppGoodCommissionConfigCreate {
	agccc.mutation.SetAppID(u)
	return agccc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (agccc *AppGoodCommissionConfigCreate) SetNillableAppID(u *uuid.UUID) *AppGoodCommissionConfigCreate {
	if u != nil {
		agccc.SetAppID(*u)
	}
	return agccc
}

// SetGoodID sets the "good_id" field.
func (agccc *AppGoodCommissionConfigCreate) SetGoodID(u uuid.UUID) *AppGoodCommissionConfigCreate {
	agccc.mutation.SetGoodID(u)
	return agccc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (agccc *AppGoodCommissionConfigCreate) SetNillableGoodID(u *uuid.UUID) *AppGoodCommissionConfigCreate {
	if u != nil {
		agccc.SetGoodID(*u)
	}
	return agccc
}

// SetAppGoodID sets the "app_good_id" field.
func (agccc *AppGoodCommissionConfigCreate) SetAppGoodID(u uuid.UUID) *AppGoodCommissionConfigCreate {
	agccc.mutation.SetAppGoodID(u)
	return agccc
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (agccc *AppGoodCommissionConfigCreate) SetNillableAppGoodID(u *uuid.UUID) *AppGoodCommissionConfigCreate {
	if u != nil {
		agccc.SetAppGoodID(*u)
	}
	return agccc
}

// SetLevel sets the "level" field.
func (agccc *AppGoodCommissionConfigCreate) SetLevel(u uint32) *AppGoodCommissionConfigCreate {
	agccc.mutation.SetLevel(u)
	return agccc
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (agccc *AppGoodCommissionConfigCreate) SetNillableLevel(u *uint32) *AppGoodCommissionConfigCreate {
	if u != nil {
		agccc.SetLevel(*u)
	}
	return agccc
}

// SetThresholdAmount sets the "threshold_amount" field.
func (agccc *AppGoodCommissionConfigCreate) SetThresholdAmount(d decimal.Decimal) *AppGoodCommissionConfigCreate {
	agccc.mutation.SetThresholdAmount(d)
	return agccc
}

// SetNillableThresholdAmount sets the "threshold_amount" field if the given value is not nil.
func (agccc *AppGoodCommissionConfigCreate) SetNillableThresholdAmount(d *decimal.Decimal) *AppGoodCommissionConfigCreate {
	if d != nil {
		agccc.SetThresholdAmount(*d)
	}
	return agccc
}

// SetAmountOrPercent sets the "amount_or_percent" field.
func (agccc *AppGoodCommissionConfigCreate) SetAmountOrPercent(d decimal.Decimal) *AppGoodCommissionConfigCreate {
	agccc.mutation.SetAmountOrPercent(d)
	return agccc
}

// SetNillableAmountOrPercent sets the "amount_or_percent" field if the given value is not nil.
func (agccc *AppGoodCommissionConfigCreate) SetNillableAmountOrPercent(d *decimal.Decimal) *AppGoodCommissionConfigCreate {
	if d != nil {
		agccc.SetAmountOrPercent(*d)
	}
	return agccc
}

// SetStartAt sets the "start_at" field.
func (agccc *AppGoodCommissionConfigCreate) SetStartAt(u uint32) *AppGoodCommissionConfigCreate {
	agccc.mutation.SetStartAt(u)
	return agccc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (agccc *AppGoodCommissionConfigCreate) SetNillableStartAt(u *uint32) *AppGoodCommissionConfigCreate {
	if u != nil {
		agccc.SetStartAt(*u)
	}
	return agccc
}

// SetEndAt sets the "end_at" field.
func (agccc *AppGoodCommissionConfigCreate) SetEndAt(u uint32) *AppGoodCommissionConfigCreate {
	agccc.mutation.SetEndAt(u)
	return agccc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (agccc *AppGoodCommissionConfigCreate) SetNillableEndAt(u *uint32) *AppGoodCommissionConfigCreate {
	if u != nil {
		agccc.SetEndAt(*u)
	}
	return agccc
}

// SetInvites sets the "invites" field.
func (agccc *AppGoodCommissionConfigCreate) SetInvites(u uint32) *AppGoodCommissionConfigCreate {
	agccc.mutation.SetInvites(u)
	return agccc
}

// SetNillableInvites sets the "invites" field if the given value is not nil.
func (agccc *AppGoodCommissionConfigCreate) SetNillableInvites(u *uint32) *AppGoodCommissionConfigCreate {
	if u != nil {
		agccc.SetInvites(*u)
	}
	return agccc
}

// SetSettleType sets the "settle_type" field.
func (agccc *AppGoodCommissionConfigCreate) SetSettleType(s string) *AppGoodCommissionConfigCreate {
	agccc.mutation.SetSettleType(s)
	return agccc
}

// SetNillableSettleType sets the "settle_type" field if the given value is not nil.
func (agccc *AppGoodCommissionConfigCreate) SetNillableSettleType(s *string) *AppGoodCommissionConfigCreate {
	if s != nil {
		agccc.SetSettleType(*s)
	}
	return agccc
}

// SetDisabled sets the "disabled" field.
func (agccc *AppGoodCommissionConfigCreate) SetDisabled(b bool) *AppGoodCommissionConfigCreate {
	agccc.mutation.SetDisabled(b)
	return agccc
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (agccc *AppGoodCommissionConfigCreate) SetNillableDisabled(b *bool) *AppGoodCommissionConfigCreate {
	if b != nil {
		agccc.SetDisabled(*b)
	}
	return agccc
}

// SetID sets the "id" field.
func (agccc *AppGoodCommissionConfigCreate) SetID(u uint32) *AppGoodCommissionConfigCreate {
	agccc.mutation.SetID(u)
	return agccc
}

// Mutation returns the AppGoodCommissionConfigMutation object of the builder.
func (agccc *AppGoodCommissionConfigCreate) Mutation() *AppGoodCommissionConfigMutation {
	return agccc.mutation
}

// Save creates the AppGoodCommissionConfig in the database.
func (agccc *AppGoodCommissionConfigCreate) Save(ctx context.Context) (*AppGoodCommissionConfig, error) {
	agccc.defaults()
	return withHooks(ctx, agccc.sqlSave, agccc.mutation, agccc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (agccc *AppGoodCommissionConfigCreate) SaveX(ctx context.Context) *AppGoodCommissionConfig {
	v, err := agccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agccc *AppGoodCommissionConfigCreate) Exec(ctx context.Context) error {
	_, err := agccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agccc *AppGoodCommissionConfigCreate) ExecX(ctx context.Context) {
	if err := agccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agccc *AppGoodCommissionConfigCreate) defaults() {
	if _, ok := agccc.mutation.CreatedAt(); !ok {
		v := appgoodcommissionconfig.DefaultCreatedAt()
		agccc.mutation.SetCreatedAt(v)
	}
	if _, ok := agccc.mutation.UpdatedAt(); !ok {
		v := appgoodcommissionconfig.DefaultUpdatedAt()
		agccc.mutation.SetUpdatedAt(v)
	}
	if _, ok := agccc.mutation.DeletedAt(); !ok {
		v := appgoodcommissionconfig.DefaultDeletedAt()
		agccc.mutation.SetDeletedAt(v)
	}
	if _, ok := agccc.mutation.EntID(); !ok {
		v := appgoodcommissionconfig.DefaultEntID()
		agccc.mutation.SetEntID(v)
	}
	if _, ok := agccc.mutation.AppID(); !ok {
		v := appgoodcommissionconfig.DefaultAppID()
		agccc.mutation.SetAppID(v)
	}
	if _, ok := agccc.mutation.GoodID(); !ok {
		v := appgoodcommissionconfig.DefaultGoodID()
		agccc.mutation.SetGoodID(v)
	}
	if _, ok := agccc.mutation.AppGoodID(); !ok {
		v := appgoodcommissionconfig.DefaultAppGoodID()
		agccc.mutation.SetAppGoodID(v)
	}
	if _, ok := agccc.mutation.Level(); !ok {
		v := appgoodcommissionconfig.DefaultLevel
		agccc.mutation.SetLevel(v)
	}
	if _, ok := agccc.mutation.ThresholdAmount(); !ok {
		v := appgoodcommissionconfig.DefaultThresholdAmount
		agccc.mutation.SetThresholdAmount(v)
	}
	if _, ok := agccc.mutation.AmountOrPercent(); !ok {
		v := appgoodcommissionconfig.DefaultAmountOrPercent
		agccc.mutation.SetAmountOrPercent(v)
	}
	if _, ok := agccc.mutation.StartAt(); !ok {
		v := appgoodcommissionconfig.DefaultStartAt
		agccc.mutation.SetStartAt(v)
	}
	if _, ok := agccc.mutation.EndAt(); !ok {
		v := appgoodcommissionconfig.DefaultEndAt
		agccc.mutation.SetEndAt(v)
	}
	if _, ok := agccc.mutation.Invites(); !ok {
		v := appgoodcommissionconfig.DefaultInvites
		agccc.mutation.SetInvites(v)
	}
	if _, ok := agccc.mutation.SettleType(); !ok {
		v := appgoodcommissionconfig.DefaultSettleType
		agccc.mutation.SetSettleType(v)
	}
	if _, ok := agccc.mutation.Disabled(); !ok {
		v := appgoodcommissionconfig.DefaultDisabled
		agccc.mutation.SetDisabled(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (agccc *AppGoodCommissionConfigCreate) check() error {
	if _, ok := agccc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "AppGoodCommissionConfig.created_at"`)}
	}
	if _, ok := agccc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "AppGoodCommissionConfig.updated_at"`)}
	}
	if _, ok := agccc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "AppGoodCommissionConfig.deleted_at"`)}
	}
	if _, ok := agccc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "AppGoodCommissionConfig.ent_id"`)}
	}
	return nil
}

func (agccc *AppGoodCommissionConfigCreate) sqlSave(ctx context.Context) (*AppGoodCommissionConfig, error) {
	if err := agccc.check(); err != nil {
		return nil, err
	}
	_node, _spec := agccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, agccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	agccc.mutation.id = &_node.ID
	agccc.mutation.done = true
	return _node, nil
}

func (agccc *AppGoodCommissionConfigCreate) createSpec() (*AppGoodCommissionConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &AppGoodCommissionConfig{config: agccc.config}
		_spec = sqlgraph.NewCreateSpec(appgoodcommissionconfig.Table, sqlgraph.NewFieldSpec(appgoodcommissionconfig.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = agccc.conflict
	if id, ok := agccc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := agccc.mutation.CreatedAt(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := agccc.mutation.UpdatedAt(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := agccc.mutation.DeletedAt(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := agccc.mutation.EntID(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := agccc.mutation.AppID(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := agccc.mutation.GoodID(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldGoodID, field.TypeUUID, value)
		_node.GoodID = value
	}
	if value, ok := agccc.mutation.AppGoodID(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldAppGoodID, field.TypeUUID, value)
		_node.AppGoodID = value
	}
	if value, ok := agccc.mutation.Level(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldLevel, field.TypeUint32, value)
		_node.Level = value
	}
	if value, ok := agccc.mutation.ThresholdAmount(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldThresholdAmount, field.TypeOther, value)
		_node.ThresholdAmount = value
	}
	if value, ok := agccc.mutation.AmountOrPercent(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldAmountOrPercent, field.TypeOther, value)
		_node.AmountOrPercent = value
	}
	if value, ok := agccc.mutation.StartAt(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldStartAt, field.TypeUint32, value)
		_node.StartAt = value
	}
	if value, ok := agccc.mutation.EndAt(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldEndAt, field.TypeUint32, value)
		_node.EndAt = value
	}
	if value, ok := agccc.mutation.Invites(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldInvites, field.TypeUint32, value)
		_node.Invites = value
	}
	if value, ok := agccc.mutation.SettleType(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldSettleType, field.TypeString, value)
		_node.SettleType = value
	}
	if value, ok := agccc.mutation.Disabled(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldDisabled, field.TypeBool, value)
		_node.Disabled = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppGoodCommissionConfig.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppGoodCommissionConfigUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (agccc *AppGoodCommissionConfigCreate) OnConflict(opts ...sql.ConflictOption) *AppGoodCommissionConfigUpsertOne {
	agccc.conflict = opts
	return &AppGoodCommissionConfigUpsertOne{
		create: agccc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppGoodCommissionConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (agccc *AppGoodCommissionConfigCreate) OnConflictColumns(columns ...string) *AppGoodCommissionConfigUpsertOne {
	agccc.conflict = append(agccc.conflict, sql.ConflictColumns(columns...))
	return &AppGoodCommissionConfigUpsertOne{
		create: agccc,
	}
}

type (
	// AppGoodCommissionConfigUpsertOne is the builder for "upsert"-ing
	//  one AppGoodCommissionConfig node.
	AppGoodCommissionConfigUpsertOne struct {
		create *AppGoodCommissionConfigCreate
	}

	// AppGoodCommissionConfigUpsert is the "OnConflict" setter.
	AppGoodCommissionConfigUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *AppGoodCommissionConfigUpsert) SetCreatedAt(v uint32) *AppGoodCommissionConfigUpsert {
	u.Set(appgoodcommissionconfig.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsert) UpdateCreatedAt() *AppGoodCommissionConfigUpsert {
	u.SetExcluded(appgoodcommissionconfig.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppGoodCommissionConfigUpsert) AddCreatedAt(v uint32) *AppGoodCommissionConfigUpsert {
	u.Add(appgoodcommissionconfig.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppGoodCommissionConfigUpsert) SetUpdatedAt(v uint32) *AppGoodCommissionConfigUpsert {
	u.Set(appgoodcommissionconfig.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsert) UpdateUpdatedAt() *AppGoodCommissionConfigUpsert {
	u.SetExcluded(appgoodcommissionconfig.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppGoodCommissionConfigUpsert) AddUpdatedAt(v uint32) *AppGoodCommissionConfigUpsert {
	u.Add(appgoodcommissionconfig.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppGoodCommissionConfigUpsert) SetDeletedAt(v uint32) *AppGoodCommissionConfigUpsert {
	u.Set(appgoodcommissionconfig.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsert) UpdateDeletedAt() *AppGoodCommissionConfigUpsert {
	u.SetExcluded(appgoodcommissionconfig.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppGoodCommissionConfigUpsert) AddDeletedAt(v uint32) *AppGoodCommissionConfigUpsert {
	u.Add(appgoodcommissionconfig.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppGoodCommissionConfigUpsert) SetEntID(v uuid.UUID) *AppGoodCommissionConfigUpsert {
	u.Set(appgoodcommissionconfig.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsert) UpdateEntID() *AppGoodCommissionConfigUpsert {
	u.SetExcluded(appgoodcommissionconfig.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppGoodCommissionConfigUpsert) SetAppID(v uuid.UUID) *AppGoodCommissionConfigUpsert {
	u.Set(appgoodcommissionconfig.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsert) UpdateAppID() *AppGoodCommissionConfigUpsert {
	u.SetExcluded(appgoodcommissionconfig.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppGoodCommissionConfigUpsert) ClearAppID() *AppGoodCommissionConfigUpsert {
	u.SetNull(appgoodcommissionconfig.FieldAppID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *AppGoodCommissionConfigUpsert) SetGoodID(v uuid.UUID) *AppGoodCommissionConfigUpsert {
	u.Set(appgoodcommissionconfig.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsert) UpdateGoodID() *AppGoodCommissionConfigUpsert {
	u.SetExcluded(appgoodcommissionconfig.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *AppGoodCommissionConfigUpsert) ClearGoodID() *AppGoodCommissionConfigUpsert {
	u.SetNull(appgoodcommissionconfig.FieldGoodID)
	return u
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppGoodCommissionConfigUpsert) SetAppGoodID(v uuid.UUID) *AppGoodCommissionConfigUpsert {
	u.Set(appgoodcommissionconfig.FieldAppGoodID, v)
	return u
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsert) UpdateAppGoodID() *AppGoodCommissionConfigUpsert {
	u.SetExcluded(appgoodcommissionconfig.FieldAppGoodID)
	return u
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppGoodCommissionConfigUpsert) ClearAppGoodID() *AppGoodCommissionConfigUpsert {
	u.SetNull(appgoodcommissionconfig.FieldAppGoodID)
	return u
}

// SetLevel sets the "level" field.
func (u *AppGoodCommissionConfigUpsert) SetLevel(v uint32) *AppGoodCommissionConfigUpsert {
	u.Set(appgoodcommissionconfig.FieldLevel, v)
	return u
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsert) UpdateLevel() *AppGoodCommissionConfigUpsert {
	u.SetExcluded(appgoodcommissionconfig.FieldLevel)
	return u
}

// AddLevel adds v to the "level" field.
func (u *AppGoodCommissionConfigUpsert) AddLevel(v uint32) *AppGoodCommissionConfigUpsert {
	u.Add(appgoodcommissionconfig.FieldLevel, v)
	return u
}

// ClearLevel clears the value of the "level" field.
func (u *AppGoodCommissionConfigUpsert) ClearLevel() *AppGoodCommissionConfigUpsert {
	u.SetNull(appgoodcommissionconfig.FieldLevel)
	return u
}

// SetThresholdAmount sets the "threshold_amount" field.
func (u *AppGoodCommissionConfigUpsert) SetThresholdAmount(v decimal.Decimal) *AppGoodCommissionConfigUpsert {
	u.Set(appgoodcommissionconfig.FieldThresholdAmount, v)
	return u
}

// UpdateThresholdAmount sets the "threshold_amount" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsert) UpdateThresholdAmount() *AppGoodCommissionConfigUpsert {
	u.SetExcluded(appgoodcommissionconfig.FieldThresholdAmount)
	return u
}

// ClearThresholdAmount clears the value of the "threshold_amount" field.
func (u *AppGoodCommissionConfigUpsert) ClearThresholdAmount() *AppGoodCommissionConfigUpsert {
	u.SetNull(appgoodcommissionconfig.FieldThresholdAmount)
	return u
}

// SetAmountOrPercent sets the "amount_or_percent" field.
func (u *AppGoodCommissionConfigUpsert) SetAmountOrPercent(v decimal.Decimal) *AppGoodCommissionConfigUpsert {
	u.Set(appgoodcommissionconfig.FieldAmountOrPercent, v)
	return u
}

// UpdateAmountOrPercent sets the "amount_or_percent" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsert) UpdateAmountOrPercent() *AppGoodCommissionConfigUpsert {
	u.SetExcluded(appgoodcommissionconfig.FieldAmountOrPercent)
	return u
}

// ClearAmountOrPercent clears the value of the "amount_or_percent" field.
func (u *AppGoodCommissionConfigUpsert) ClearAmountOrPercent() *AppGoodCommissionConfigUpsert {
	u.SetNull(appgoodcommissionconfig.FieldAmountOrPercent)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *AppGoodCommissionConfigUpsert) SetStartAt(v uint32) *AppGoodCommissionConfigUpsert {
	u.Set(appgoodcommissionconfig.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsert) UpdateStartAt() *AppGoodCommissionConfigUpsert {
	u.SetExcluded(appgoodcommissionconfig.FieldStartAt)
	return u
}

// AddStartAt adds v to the "start_at" field.
func (u *AppGoodCommissionConfigUpsert) AddStartAt(v uint32) *AppGoodCommissionConfigUpsert {
	u.Add(appgoodcommissionconfig.FieldStartAt, v)
	return u
}

// ClearStartAt clears the value of the "start_at" field.
func (u *AppGoodCommissionConfigUpsert) ClearStartAt() *AppGoodCommissionConfigUpsert {
	u.SetNull(appgoodcommissionconfig.FieldStartAt)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *AppGoodCommissionConfigUpsert) SetEndAt(v uint32) *AppGoodCommissionConfigUpsert {
	u.Set(appgoodcommissionconfig.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsert) UpdateEndAt() *AppGoodCommissionConfigUpsert {
	u.SetExcluded(appgoodcommissionconfig.FieldEndAt)
	return u
}

// AddEndAt adds v to the "end_at" field.
func (u *AppGoodCommissionConfigUpsert) AddEndAt(v uint32) *AppGoodCommissionConfigUpsert {
	u.Add(appgoodcommissionconfig.FieldEndAt, v)
	return u
}

// ClearEndAt clears the value of the "end_at" field.
func (u *AppGoodCommissionConfigUpsert) ClearEndAt() *AppGoodCommissionConfigUpsert {
	u.SetNull(appgoodcommissionconfig.FieldEndAt)
	return u
}

// SetInvites sets the "invites" field.
func (u *AppGoodCommissionConfigUpsert) SetInvites(v uint32) *AppGoodCommissionConfigUpsert {
	u.Set(appgoodcommissionconfig.FieldInvites, v)
	return u
}

// UpdateInvites sets the "invites" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsert) UpdateInvites() *AppGoodCommissionConfigUpsert {
	u.SetExcluded(appgoodcommissionconfig.FieldInvites)
	return u
}

// AddInvites adds v to the "invites" field.
func (u *AppGoodCommissionConfigUpsert) AddInvites(v uint32) *AppGoodCommissionConfigUpsert {
	u.Add(appgoodcommissionconfig.FieldInvites, v)
	return u
}

// ClearInvites clears the value of the "invites" field.
func (u *AppGoodCommissionConfigUpsert) ClearInvites() *AppGoodCommissionConfigUpsert {
	u.SetNull(appgoodcommissionconfig.FieldInvites)
	return u
}

// SetSettleType sets the "settle_type" field.
func (u *AppGoodCommissionConfigUpsert) SetSettleType(v string) *AppGoodCommissionConfigUpsert {
	u.Set(appgoodcommissionconfig.FieldSettleType, v)
	return u
}

// UpdateSettleType sets the "settle_type" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsert) UpdateSettleType() *AppGoodCommissionConfigUpsert {
	u.SetExcluded(appgoodcommissionconfig.FieldSettleType)
	return u
}

// ClearSettleType clears the value of the "settle_type" field.
func (u *AppGoodCommissionConfigUpsert) ClearSettleType() *AppGoodCommissionConfigUpsert {
	u.SetNull(appgoodcommissionconfig.FieldSettleType)
	return u
}

// SetDisabled sets the "disabled" field.
func (u *AppGoodCommissionConfigUpsert) SetDisabled(v bool) *AppGoodCommissionConfigUpsert {
	u.Set(appgoodcommissionconfig.FieldDisabled, v)
	return u
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsert) UpdateDisabled() *AppGoodCommissionConfigUpsert {
	u.SetExcluded(appgoodcommissionconfig.FieldDisabled)
	return u
}

// ClearDisabled clears the value of the "disabled" field.
func (u *AppGoodCommissionConfigUpsert) ClearDisabled() *AppGoodCommissionConfigUpsert {
	u.SetNull(appgoodcommissionconfig.FieldDisabled)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppGoodCommissionConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appgoodcommissionconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppGoodCommissionConfigUpsertOne) UpdateNewValues() *AppGoodCommissionConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appgoodcommissionconfig.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppGoodCommissionConfig.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppGoodCommissionConfigUpsertOne) Ignore() *AppGoodCommissionConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppGoodCommissionConfigUpsertOne) DoNothing() *AppGoodCommissionConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppGoodCommissionConfigCreate.OnConflict
// documentation for more info.
func (u *AppGoodCommissionConfigUpsertOne) Update(set func(*AppGoodCommissionConfigUpsert)) *AppGoodCommissionConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppGoodCommissionConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppGoodCommissionConfigUpsertOne) SetCreatedAt(v uint32) *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppGoodCommissionConfigUpsertOne) AddCreatedAt(v uint32) *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertOne) UpdateCreatedAt() *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppGoodCommissionConfigUpsertOne) SetUpdatedAt(v uint32) *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppGoodCommissionConfigUpsertOne) AddUpdatedAt(v uint32) *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertOne) UpdateUpdatedAt() *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppGoodCommissionConfigUpsertOne) SetDeletedAt(v uint32) *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppGoodCommissionConfigUpsertOne) AddDeletedAt(v uint32) *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertOne) UpdateDeletedAt() *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *AppGoodCommissionConfigUpsertOne) SetEntID(v uuid.UUID) *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertOne) UpdateEntID() *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppGoodCommissionConfigUpsertOne) SetAppID(v uuid.UUID) *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertOne) UpdateAppID() *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppGoodCommissionConfigUpsertOne) ClearAppID() *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.ClearAppID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *AppGoodCommissionConfigUpsertOne) SetGoodID(v uuid.UUID) *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertOne) UpdateGoodID() *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *AppGoodCommissionConfigUpsertOne) ClearGoodID() *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.ClearGoodID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppGoodCommissionConfigUpsertOne) SetAppGoodID(v uuid.UUID) *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertOne) UpdateAppGoodID() *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppGoodCommissionConfigUpsertOne) ClearAppGoodID() *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.ClearAppGoodID()
	})
}

// SetLevel sets the "level" field.
func (u *AppGoodCommissionConfigUpsertOne) SetLevel(v uint32) *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetLevel(v)
	})
}

// AddLevel adds v to the "level" field.
func (u *AppGoodCommissionConfigUpsertOne) AddLevel(v uint32) *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.AddLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertOne) UpdateLevel() *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateLevel()
	})
}

// ClearLevel clears the value of the "level" field.
func (u *AppGoodCommissionConfigUpsertOne) ClearLevel() *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.ClearLevel()
	})
}

// SetThresholdAmount sets the "threshold_amount" field.
func (u *AppGoodCommissionConfigUpsertOne) SetThresholdAmount(v decimal.Decimal) *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetThresholdAmount(v)
	})
}

// UpdateThresholdAmount sets the "threshold_amount" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertOne) UpdateThresholdAmount() *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateThresholdAmount()
	})
}

// ClearThresholdAmount clears the value of the "threshold_amount" field.
func (u *AppGoodCommissionConfigUpsertOne) ClearThresholdAmount() *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.ClearThresholdAmount()
	})
}

// SetAmountOrPercent sets the "amount_or_percent" field.
func (u *AppGoodCommissionConfigUpsertOne) SetAmountOrPercent(v decimal.Decimal) *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetAmountOrPercent(v)
	})
}

// UpdateAmountOrPercent sets the "amount_or_percent" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertOne) UpdateAmountOrPercent() *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateAmountOrPercent()
	})
}

// ClearAmountOrPercent clears the value of the "amount_or_percent" field.
func (u *AppGoodCommissionConfigUpsertOne) ClearAmountOrPercent() *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.ClearAmountOrPercent()
	})
}

// SetStartAt sets the "start_at" field.
func (u *AppGoodCommissionConfigUpsertOne) SetStartAt(v uint32) *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *AppGoodCommissionConfigUpsertOne) AddStartAt(v uint32) *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertOne) UpdateStartAt() *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *AppGoodCommissionConfigUpsertOne) ClearStartAt() *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *AppGoodCommissionConfigUpsertOne) SetEndAt(v uint32) *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *AppGoodCommissionConfigUpsertOne) AddEndAt(v uint32) *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertOne) UpdateEndAt() *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *AppGoodCommissionConfigUpsertOne) ClearEndAt() *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.ClearEndAt()
	})
}

// SetInvites sets the "invites" field.
func (u *AppGoodCommissionConfigUpsertOne) SetInvites(v uint32) *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetInvites(v)
	})
}

// AddInvites adds v to the "invites" field.
func (u *AppGoodCommissionConfigUpsertOne) AddInvites(v uint32) *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.AddInvites(v)
	})
}

// UpdateInvites sets the "invites" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertOne) UpdateInvites() *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateInvites()
	})
}

// ClearInvites clears the value of the "invites" field.
func (u *AppGoodCommissionConfigUpsertOne) ClearInvites() *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.ClearInvites()
	})
}

// SetSettleType sets the "settle_type" field.
func (u *AppGoodCommissionConfigUpsertOne) SetSettleType(v string) *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetSettleType(v)
	})
}

// UpdateSettleType sets the "settle_type" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertOne) UpdateSettleType() *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateSettleType()
	})
}

// ClearSettleType clears the value of the "settle_type" field.
func (u *AppGoodCommissionConfigUpsertOne) ClearSettleType() *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.ClearSettleType()
	})
}

// SetDisabled sets the "disabled" field.
func (u *AppGoodCommissionConfigUpsertOne) SetDisabled(v bool) *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetDisabled(v)
	})
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertOne) UpdateDisabled() *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateDisabled()
	})
}

// ClearDisabled clears the value of the "disabled" field.
func (u *AppGoodCommissionConfigUpsertOne) ClearDisabled() *AppGoodCommissionConfigUpsertOne {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.ClearDisabled()
	})
}

// Exec executes the query.
func (u *AppGoodCommissionConfigUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppGoodCommissionConfigCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppGoodCommissionConfigUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppGoodCommissionConfigUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppGoodCommissionConfigUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppGoodCommissionConfigCreateBulk is the builder for creating many AppGoodCommissionConfig entities in bulk.
type AppGoodCommissionConfigCreateBulk struct {
	config
	err      error
	builders []*AppGoodCommissionConfigCreate
	conflict []sql.ConflictOption
}

// Save creates the AppGoodCommissionConfig entities in the database.
func (agcccb *AppGoodCommissionConfigCreateBulk) Save(ctx context.Context) ([]*AppGoodCommissionConfig, error) {
	if agcccb.err != nil {
		return nil, agcccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(agcccb.builders))
	nodes := make([]*AppGoodCommissionConfig, len(agcccb.builders))
	mutators := make([]Mutator, len(agcccb.builders))
	for i := range agcccb.builders {
		func(i int, root context.Context) {
			builder := agcccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppGoodCommissionConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, agcccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = agcccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, agcccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, agcccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (agcccb *AppGoodCommissionConfigCreateBulk) SaveX(ctx context.Context) []*AppGoodCommissionConfig {
	v, err := agcccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agcccb *AppGoodCommissionConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := agcccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agcccb *AppGoodCommissionConfigCreateBulk) ExecX(ctx context.Context) {
	if err := agcccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppGoodCommissionConfig.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppGoodCommissionConfigUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (agcccb *AppGoodCommissionConfigCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppGoodCommissionConfigUpsertBulk {
	agcccb.conflict = opts
	return &AppGoodCommissionConfigUpsertBulk{
		create: agcccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppGoodCommissionConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (agcccb *AppGoodCommissionConfigCreateBulk) OnConflictColumns(columns ...string) *AppGoodCommissionConfigUpsertBulk {
	agcccb.conflict = append(agcccb.conflict, sql.ConflictColumns(columns...))
	return &AppGoodCommissionConfigUpsertBulk{
		create: agcccb,
	}
}

// AppGoodCommissionConfigUpsertBulk is the builder for "upsert"-ing
// a bulk of AppGoodCommissionConfig nodes.
type AppGoodCommissionConfigUpsertBulk struct {
	create *AppGoodCommissionConfigCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppGoodCommissionConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appgoodcommissionconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppGoodCommissionConfigUpsertBulk) UpdateNewValues() *AppGoodCommissionConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appgoodcommissionconfig.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppGoodCommissionConfig.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppGoodCommissionConfigUpsertBulk) Ignore() *AppGoodCommissionConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppGoodCommissionConfigUpsertBulk) DoNothing() *AppGoodCommissionConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppGoodCommissionConfigCreateBulk.OnConflict
// documentation for more info.
func (u *AppGoodCommissionConfigUpsertBulk) Update(set func(*AppGoodCommissionConfigUpsert)) *AppGoodCommissionConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppGoodCommissionConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppGoodCommissionConfigUpsertBulk) SetCreatedAt(v uint32) *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppGoodCommissionConfigUpsertBulk) AddCreatedAt(v uint32) *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertBulk) UpdateCreatedAt() *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppGoodCommissionConfigUpsertBulk) SetUpdatedAt(v uint32) *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppGoodCommissionConfigUpsertBulk) AddUpdatedAt(v uint32) *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertBulk) UpdateUpdatedAt() *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppGoodCommissionConfigUpsertBulk) SetDeletedAt(v uint32) *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppGoodCommissionConfigUpsertBulk) AddDeletedAt(v uint32) *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertBulk) UpdateDeletedAt() *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *AppGoodCommissionConfigUpsertBulk) SetEntID(v uuid.UUID) *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertBulk) UpdateEntID() *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppGoodCommissionConfigUpsertBulk) SetAppID(v uuid.UUID) *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertBulk) UpdateAppID() *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppGoodCommissionConfigUpsertBulk) ClearAppID() *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.ClearAppID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *AppGoodCommissionConfigUpsertBulk) SetGoodID(v uuid.UUID) *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertBulk) UpdateGoodID() *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *AppGoodCommissionConfigUpsertBulk) ClearGoodID() *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.ClearGoodID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppGoodCommissionConfigUpsertBulk) SetAppGoodID(v uuid.UUID) *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertBulk) UpdateAppGoodID() *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppGoodCommissionConfigUpsertBulk) ClearAppGoodID() *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.ClearAppGoodID()
	})
}

// SetLevel sets the "level" field.
func (u *AppGoodCommissionConfigUpsertBulk) SetLevel(v uint32) *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetLevel(v)
	})
}

// AddLevel adds v to the "level" field.
func (u *AppGoodCommissionConfigUpsertBulk) AddLevel(v uint32) *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.AddLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertBulk) UpdateLevel() *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateLevel()
	})
}

// ClearLevel clears the value of the "level" field.
func (u *AppGoodCommissionConfigUpsertBulk) ClearLevel() *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.ClearLevel()
	})
}

// SetThresholdAmount sets the "threshold_amount" field.
func (u *AppGoodCommissionConfigUpsertBulk) SetThresholdAmount(v decimal.Decimal) *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetThresholdAmount(v)
	})
}

// UpdateThresholdAmount sets the "threshold_amount" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertBulk) UpdateThresholdAmount() *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateThresholdAmount()
	})
}

// ClearThresholdAmount clears the value of the "threshold_amount" field.
func (u *AppGoodCommissionConfigUpsertBulk) ClearThresholdAmount() *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.ClearThresholdAmount()
	})
}

// SetAmountOrPercent sets the "amount_or_percent" field.
func (u *AppGoodCommissionConfigUpsertBulk) SetAmountOrPercent(v decimal.Decimal) *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetAmountOrPercent(v)
	})
}

// UpdateAmountOrPercent sets the "amount_or_percent" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertBulk) UpdateAmountOrPercent() *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateAmountOrPercent()
	})
}

// ClearAmountOrPercent clears the value of the "amount_or_percent" field.
func (u *AppGoodCommissionConfigUpsertBulk) ClearAmountOrPercent() *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.ClearAmountOrPercent()
	})
}

// SetStartAt sets the "start_at" field.
func (u *AppGoodCommissionConfigUpsertBulk) SetStartAt(v uint32) *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *AppGoodCommissionConfigUpsertBulk) AddStartAt(v uint32) *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertBulk) UpdateStartAt() *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *AppGoodCommissionConfigUpsertBulk) ClearStartAt() *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *AppGoodCommissionConfigUpsertBulk) SetEndAt(v uint32) *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *AppGoodCommissionConfigUpsertBulk) AddEndAt(v uint32) *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertBulk) UpdateEndAt() *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *AppGoodCommissionConfigUpsertBulk) ClearEndAt() *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.ClearEndAt()
	})
}

// SetInvites sets the "invites" field.
func (u *AppGoodCommissionConfigUpsertBulk) SetInvites(v uint32) *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetInvites(v)
	})
}

// AddInvites adds v to the "invites" field.
func (u *AppGoodCommissionConfigUpsertBulk) AddInvites(v uint32) *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.AddInvites(v)
	})
}

// UpdateInvites sets the "invites" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertBulk) UpdateInvites() *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateInvites()
	})
}

// ClearInvites clears the value of the "invites" field.
func (u *AppGoodCommissionConfigUpsertBulk) ClearInvites() *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.ClearInvites()
	})
}

// SetSettleType sets the "settle_type" field.
func (u *AppGoodCommissionConfigUpsertBulk) SetSettleType(v string) *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetSettleType(v)
	})
}

// UpdateSettleType sets the "settle_type" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertBulk) UpdateSettleType() *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateSettleType()
	})
}

// ClearSettleType clears the value of the "settle_type" field.
func (u *AppGoodCommissionConfigUpsertBulk) ClearSettleType() *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.ClearSettleType()
	})
}

// SetDisabled sets the "disabled" field.
func (u *AppGoodCommissionConfigUpsertBulk) SetDisabled(v bool) *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.SetDisabled(v)
	})
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *AppGoodCommissionConfigUpsertBulk) UpdateDisabled() *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.UpdateDisabled()
	})
}

// ClearDisabled clears the value of the "disabled" field.
func (u *AppGoodCommissionConfigUpsertBulk) ClearDisabled() *AppGoodCommissionConfigUpsertBulk {
	return u.Update(func(s *AppGoodCommissionConfigUpsert) {
		s.ClearDisabled()
	})
}

// Exec executes the query.
func (u *AppGoodCommissionConfigUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the AppGoodCommissionConfigCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppGoodCommissionConfigCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppGoodCommissionConfigUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

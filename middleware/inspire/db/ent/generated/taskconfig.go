// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/taskconfig"
	"github.com/google/uuid"
)

// TaskConfig is the model entity for the TaskConfig schema.
type TaskConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID uuid.UUID `json:"event_id,omitempty"`
	// TaskType holds the value of the "task_type" field.
	TaskType string `json:"task_type,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// TaskDesc holds the value of the "task_desc" field.
	TaskDesc string `json:"task_desc,omitempty"`
	// StepGuide holds the value of the "step_guide" field.
	StepGuide string `json:"step_guide,omitempty"`
	// RecommendMessage holds the value of the "recommend_message" field.
	RecommendMessage string `json:"recommend_message,omitempty"`
	// Index holds the value of the "index" field.
	Index uint32 `json:"index,omitempty"`
	// LastTaskID holds the value of the "last_task_id" field.
	LastTaskID uuid.UUID `json:"last_task_id,omitempty"`
	// MaxRewardCount holds the value of the "max_reward_count" field.
	MaxRewardCount uint32 `json:"max_reward_count,omitempty"`
	// CooldownSecond holds the value of the "cooldown_second" field.
	CooldownSecond uint32 `json:"cooldown_second,omitempty"`
	// IntervalReset holds the value of the "interval_reset" field.
	IntervalReset bool `json:"interval_reset,omitempty"`
	// IntervalResetSecond holds the value of the "interval_reset_second" field.
	IntervalResetSecond uint32 `json:"interval_reset_second,omitempty"`
	// MaxIntervalRewardCount holds the value of the "max_interval_reward_count" field.
	MaxIntervalRewardCount uint32 `json:"max_interval_reward_count,omitempty"`
	selectValues           sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaskConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case taskconfig.FieldIntervalReset:
			values[i] = new(sql.NullBool)
		case taskconfig.FieldID, taskconfig.FieldCreatedAt, taskconfig.FieldUpdatedAt, taskconfig.FieldDeletedAt, taskconfig.FieldIndex, taskconfig.FieldMaxRewardCount, taskconfig.FieldCooldownSecond, taskconfig.FieldIntervalResetSecond, taskconfig.FieldMaxIntervalRewardCount:
			values[i] = new(sql.NullInt64)
		case taskconfig.FieldTaskType, taskconfig.FieldName, taskconfig.FieldTaskDesc, taskconfig.FieldStepGuide, taskconfig.FieldRecommendMessage:
			values[i] = new(sql.NullString)
		case taskconfig.FieldEntID, taskconfig.FieldAppID, taskconfig.FieldEventID, taskconfig.FieldLastTaskID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaskConfig fields.
func (tc *TaskConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case taskconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tc.ID = uint32(value.Int64)
		case taskconfig.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tc.CreatedAt = uint32(value.Int64)
			}
		case taskconfig.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tc.UpdatedAt = uint32(value.Int64)
			}
		case taskconfig.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tc.DeletedAt = uint32(value.Int64)
			}
		case taskconfig.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				tc.EntID = *value
			}
		case taskconfig.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				tc.AppID = *value
			}
		case taskconfig.FieldEventID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value != nil {
				tc.EventID = *value
			}
		case taskconfig.FieldTaskType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_type", values[i])
			} else if value.Valid {
				tc.TaskType = value.String
			}
		case taskconfig.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tc.Name = value.String
			}
		case taskconfig.FieldTaskDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_desc", values[i])
			} else if value.Valid {
				tc.TaskDesc = value.String
			}
		case taskconfig.FieldStepGuide:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field step_guide", values[i])
			} else if value.Valid {
				tc.StepGuide = value.String
			}
		case taskconfig.FieldRecommendMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field recommend_message", values[i])
			} else if value.Valid {
				tc.RecommendMessage = value.String
			}
		case taskconfig.FieldIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field index", values[i])
			} else if value.Valid {
				tc.Index = uint32(value.Int64)
			}
		case taskconfig.FieldLastTaskID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field last_task_id", values[i])
			} else if value != nil {
				tc.LastTaskID = *value
			}
		case taskconfig.FieldMaxRewardCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_reward_count", values[i])
			} else if value.Valid {
				tc.MaxRewardCount = uint32(value.Int64)
			}
		case taskconfig.FieldCooldownSecond:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cooldown_second", values[i])
			} else if value.Valid {
				tc.CooldownSecond = uint32(value.Int64)
			}
		case taskconfig.FieldIntervalReset:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field interval_reset", values[i])
			} else if value.Valid {
				tc.IntervalReset = value.Bool
			}
		case taskconfig.FieldIntervalResetSecond:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field interval_reset_second", values[i])
			} else if value.Valid {
				tc.IntervalResetSecond = uint32(value.Int64)
			}
		case taskconfig.FieldMaxIntervalRewardCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_interval_reward_count", values[i])
			} else if value.Valid {
				tc.MaxIntervalRewardCount = uint32(value.Int64)
			}
		default:
			tc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TaskConfig.
// This includes values selected through modifiers, order, etc.
func (tc *TaskConfig) Value(name string) (ent.Value, error) {
	return tc.selectValues.Get(name)
}

// Update returns a builder for updating this TaskConfig.
// Note that you need to call TaskConfig.Unwrap() before calling this method if this TaskConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (tc *TaskConfig) Update() *TaskConfigUpdateOne {
	return NewTaskConfigClient(tc.config).UpdateOne(tc)
}

// Unwrap unwraps the TaskConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tc *TaskConfig) Unwrap() *TaskConfig {
	_tx, ok := tc.config.driver.(*txDriver)
	if !ok {
		panic("generated: TaskConfig is not a transactional entity")
	}
	tc.config.driver = _tx.drv
	return tc
}

// String implements the fmt.Stringer.
func (tc *TaskConfig) String() string {
	var builder strings.Builder
	builder.WriteString("TaskConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", tc.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", tc.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", tc.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", tc.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", tc.AppID))
	builder.WriteString(", ")
	builder.WriteString("event_id=")
	builder.WriteString(fmt.Sprintf("%v", tc.EventID))
	builder.WriteString(", ")
	builder.WriteString("task_type=")
	builder.WriteString(tc.TaskType)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(tc.Name)
	builder.WriteString(", ")
	builder.WriteString("task_desc=")
	builder.WriteString(tc.TaskDesc)
	builder.WriteString(", ")
	builder.WriteString("step_guide=")
	builder.WriteString(tc.StepGuide)
	builder.WriteString(", ")
	builder.WriteString("recommend_message=")
	builder.WriteString(tc.RecommendMessage)
	builder.WriteString(", ")
	builder.WriteString("index=")
	builder.WriteString(fmt.Sprintf("%v", tc.Index))
	builder.WriteString(", ")
	builder.WriteString("last_task_id=")
	builder.WriteString(fmt.Sprintf("%v", tc.LastTaskID))
	builder.WriteString(", ")
	builder.WriteString("max_reward_count=")
	builder.WriteString(fmt.Sprintf("%v", tc.MaxRewardCount))
	builder.WriteString(", ")
	builder.WriteString("cooldown_second=")
	builder.WriteString(fmt.Sprintf("%v", tc.CooldownSecond))
	builder.WriteString(", ")
	builder.WriteString("interval_reset=")
	builder.WriteString(fmt.Sprintf("%v", tc.IntervalReset))
	builder.WriteString(", ")
	builder.WriteString("interval_reset_second=")
	builder.WriteString(fmt.Sprintf("%v", tc.IntervalResetSecond))
	builder.WriteString(", ")
	builder.WriteString("max_interval_reward_count=")
	builder.WriteString(fmt.Sprintf("%v", tc.MaxIntervalRewardCount))
	builder.WriteByte(')')
	return builder.String()
}

// TaskConfigs is a parsable slice of TaskConfig.
type TaskConfigs []*TaskConfig

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/creditallocated"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// CreditAllocatedCreate is the builder for creating a CreditAllocated entity.
type CreditAllocatedCreate struct {
	config
	mutation *CreditAllocatedMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cac *CreditAllocatedCreate) SetCreatedAt(u uint32) *CreditAllocatedCreate {
	cac.mutation.SetCreatedAt(u)
	return cac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cac *CreditAllocatedCreate) SetNillableCreatedAt(u *uint32) *CreditAllocatedCreate {
	if u != nil {
		cac.SetCreatedAt(*u)
	}
	return cac
}

// SetUpdatedAt sets the "updated_at" field.
func (cac *CreditAllocatedCreate) SetUpdatedAt(u uint32) *CreditAllocatedCreate {
	cac.mutation.SetUpdatedAt(u)
	return cac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cac *CreditAllocatedCreate) SetNillableUpdatedAt(u *uint32) *CreditAllocatedCreate {
	if u != nil {
		cac.SetUpdatedAt(*u)
	}
	return cac
}

// SetDeletedAt sets the "deleted_at" field.
func (cac *CreditAllocatedCreate) SetDeletedAt(u uint32) *CreditAllocatedCreate {
	cac.mutation.SetDeletedAt(u)
	return cac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cac *CreditAllocatedCreate) SetNillableDeletedAt(u *uint32) *CreditAllocatedCreate {
	if u != nil {
		cac.SetDeletedAt(*u)
	}
	return cac
}

// SetEntID sets the "ent_id" field.
func (cac *CreditAllocatedCreate) SetEntID(u uuid.UUID) *CreditAllocatedCreate {
	cac.mutation.SetEntID(u)
	return cac
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cac *CreditAllocatedCreate) SetNillableEntID(u *uuid.UUID) *CreditAllocatedCreate {
	if u != nil {
		cac.SetEntID(*u)
	}
	return cac
}

// SetAppID sets the "app_id" field.
func (cac *CreditAllocatedCreate) SetAppID(u uuid.UUID) *CreditAllocatedCreate {
	cac.mutation.SetAppID(u)
	return cac
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (cac *CreditAllocatedCreate) SetNillableAppID(u *uuid.UUID) *CreditAllocatedCreate {
	if u != nil {
		cac.SetAppID(*u)
	}
	return cac
}

// SetUserID sets the "user_id" field.
func (cac *CreditAllocatedCreate) SetUserID(u uuid.UUID) *CreditAllocatedCreate {
	cac.mutation.SetUserID(u)
	return cac
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cac *CreditAllocatedCreate) SetNillableUserID(u *uuid.UUID) *CreditAllocatedCreate {
	if u != nil {
		cac.SetUserID(*u)
	}
	return cac
}

// SetValue sets the "value" field.
func (cac *CreditAllocatedCreate) SetValue(d decimal.Decimal) *CreditAllocatedCreate {
	cac.mutation.SetValue(d)
	return cac
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (cac *CreditAllocatedCreate) SetNillableValue(d *decimal.Decimal) *CreditAllocatedCreate {
	if d != nil {
		cac.SetValue(*d)
	}
	return cac
}

// SetExtra sets the "extra" field.
func (cac *CreditAllocatedCreate) SetExtra(s string) *CreditAllocatedCreate {
	cac.mutation.SetExtra(s)
	return cac
}

// SetNillableExtra sets the "extra" field if the given value is not nil.
func (cac *CreditAllocatedCreate) SetNillableExtra(s *string) *CreditAllocatedCreate {
	if s != nil {
		cac.SetExtra(*s)
	}
	return cac
}

// SetID sets the "id" field.
func (cac *CreditAllocatedCreate) SetID(u uint32) *CreditAllocatedCreate {
	cac.mutation.SetID(u)
	return cac
}

// Mutation returns the CreditAllocatedMutation object of the builder.
func (cac *CreditAllocatedCreate) Mutation() *CreditAllocatedMutation {
	return cac.mutation
}

// Save creates the CreditAllocated in the database.
func (cac *CreditAllocatedCreate) Save(ctx context.Context) (*CreditAllocated, error) {
	cac.defaults()
	return withHooks(ctx, cac.sqlSave, cac.mutation, cac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cac *CreditAllocatedCreate) SaveX(ctx context.Context) *CreditAllocated {
	v, err := cac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cac *CreditAllocatedCreate) Exec(ctx context.Context) error {
	_, err := cac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cac *CreditAllocatedCreate) ExecX(ctx context.Context) {
	if err := cac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cac *CreditAllocatedCreate) defaults() {
	if _, ok := cac.mutation.CreatedAt(); !ok {
		v := creditallocated.DefaultCreatedAt()
		cac.mutation.SetCreatedAt(v)
	}
	if _, ok := cac.mutation.UpdatedAt(); !ok {
		v := creditallocated.DefaultUpdatedAt()
		cac.mutation.SetUpdatedAt(v)
	}
	if _, ok := cac.mutation.DeletedAt(); !ok {
		v := creditallocated.DefaultDeletedAt()
		cac.mutation.SetDeletedAt(v)
	}
	if _, ok := cac.mutation.EntID(); !ok {
		v := creditallocated.DefaultEntID()
		cac.mutation.SetEntID(v)
	}
	if _, ok := cac.mutation.AppID(); !ok {
		v := creditallocated.DefaultAppID()
		cac.mutation.SetAppID(v)
	}
	if _, ok := cac.mutation.UserID(); !ok {
		v := creditallocated.DefaultUserID()
		cac.mutation.SetUserID(v)
	}
	if _, ok := cac.mutation.Value(); !ok {
		v := creditallocated.DefaultValue
		cac.mutation.SetValue(v)
	}
	if _, ok := cac.mutation.Extra(); !ok {
		v := creditallocated.DefaultExtra
		cac.mutation.SetExtra(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cac *CreditAllocatedCreate) check() error {
	if _, ok := cac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "CreditAllocated.created_at"`)}
	}
	if _, ok := cac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "CreditAllocated.updated_at"`)}
	}
	if _, ok := cac.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "CreditAllocated.deleted_at"`)}
	}
	if _, ok := cac.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "CreditAllocated.ent_id"`)}
	}
	if v, ok := cac.mutation.Extra(); ok {
		if err := creditallocated.ExtraValidator(v); err != nil {
			return &ValidationError{Name: "extra", err: fmt.Errorf(`generated: validator failed for field "CreditAllocated.extra": %w`, err)}
		}
	}
	return nil
}

func (cac *CreditAllocatedCreate) sqlSave(ctx context.Context) (*CreditAllocated, error) {
	if err := cac.check(); err != nil {
		return nil, err
	}
	_node, _spec := cac.createSpec()
	if err := sqlgraph.CreateNode(ctx, cac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	cac.mutation.id = &_node.ID
	cac.mutation.done = true
	return _node, nil
}

func (cac *CreditAllocatedCreate) createSpec() (*CreditAllocated, *sqlgraph.CreateSpec) {
	var (
		_node = &CreditAllocated{config: cac.config}
		_spec = sqlgraph.NewCreateSpec(creditallocated.Table, sqlgraph.NewFieldSpec(creditallocated.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = cac.conflict
	if id, ok := cac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cac.mutation.CreatedAt(); ok {
		_spec.SetField(creditallocated.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := cac.mutation.UpdatedAt(); ok {
		_spec.SetField(creditallocated.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := cac.mutation.DeletedAt(); ok {
		_spec.SetField(creditallocated.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := cac.mutation.EntID(); ok {
		_spec.SetField(creditallocated.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := cac.mutation.AppID(); ok {
		_spec.SetField(creditallocated.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := cac.mutation.UserID(); ok {
		_spec.SetField(creditallocated.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := cac.mutation.Value(); ok {
		_spec.SetField(creditallocated.FieldValue, field.TypeOther, value)
		_node.Value = value
	}
	if value, ok := cac.mutation.Extra(); ok {
		_spec.SetField(creditallocated.FieldExtra, field.TypeString, value)
		_node.Extra = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CreditAllocated.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CreditAllocatedUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cac *CreditAllocatedCreate) OnConflict(opts ...sql.ConflictOption) *CreditAllocatedUpsertOne {
	cac.conflict = opts
	return &CreditAllocatedUpsertOne{
		create: cac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CreditAllocated.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cac *CreditAllocatedCreate) OnConflictColumns(columns ...string) *CreditAllocatedUpsertOne {
	cac.conflict = append(cac.conflict, sql.ConflictColumns(columns...))
	return &CreditAllocatedUpsertOne{
		create: cac,
	}
}

type (
	// CreditAllocatedUpsertOne is the builder for "upsert"-ing
	//  one CreditAllocated node.
	CreditAllocatedUpsertOne struct {
		create *CreditAllocatedCreate
	}

	// CreditAllocatedUpsert is the "OnConflict" setter.
	CreditAllocatedUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *CreditAllocatedUpsert) SetCreatedAt(v uint32) *CreditAllocatedUpsert {
	u.Set(creditallocated.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CreditAllocatedUpsert) UpdateCreatedAt() *CreditAllocatedUpsert {
	u.SetExcluded(creditallocated.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CreditAllocatedUpsert) AddCreatedAt(v uint32) *CreditAllocatedUpsert {
	u.Add(creditallocated.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CreditAllocatedUpsert) SetUpdatedAt(v uint32) *CreditAllocatedUpsert {
	u.Set(creditallocated.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CreditAllocatedUpsert) UpdateUpdatedAt() *CreditAllocatedUpsert {
	u.SetExcluded(creditallocated.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CreditAllocatedUpsert) AddUpdatedAt(v uint32) *CreditAllocatedUpsert {
	u.Add(creditallocated.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CreditAllocatedUpsert) SetDeletedAt(v uint32) *CreditAllocatedUpsert {
	u.Set(creditallocated.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CreditAllocatedUpsert) UpdateDeletedAt() *CreditAllocatedUpsert {
	u.SetExcluded(creditallocated.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CreditAllocatedUpsert) AddDeletedAt(v uint32) *CreditAllocatedUpsert {
	u.Add(creditallocated.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *CreditAllocatedUpsert) SetEntID(v uuid.UUID) *CreditAllocatedUpsert {
	u.Set(creditallocated.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CreditAllocatedUpsert) UpdateEntID() *CreditAllocatedUpsert {
	u.SetExcluded(creditallocated.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *CreditAllocatedUpsert) SetAppID(v uuid.UUID) *CreditAllocatedUpsert {
	u.Set(creditallocated.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CreditAllocatedUpsert) UpdateAppID() *CreditAllocatedUpsert {
	u.SetExcluded(creditallocated.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *CreditAllocatedUpsert) ClearAppID() *CreditAllocatedUpsert {
	u.SetNull(creditallocated.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *CreditAllocatedUpsert) SetUserID(v uuid.UUID) *CreditAllocatedUpsert {
	u.Set(creditallocated.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CreditAllocatedUpsert) UpdateUserID() *CreditAllocatedUpsert {
	u.SetExcluded(creditallocated.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *CreditAllocatedUpsert) ClearUserID() *CreditAllocatedUpsert {
	u.SetNull(creditallocated.FieldUserID)
	return u
}

// SetValue sets the "value" field.
func (u *CreditAllocatedUpsert) SetValue(v decimal.Decimal) *CreditAllocatedUpsert {
	u.Set(creditallocated.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *CreditAllocatedUpsert) UpdateValue() *CreditAllocatedUpsert {
	u.SetExcluded(creditallocated.FieldValue)
	return u
}

// ClearValue clears the value of the "value" field.
func (u *CreditAllocatedUpsert) ClearValue() *CreditAllocatedUpsert {
	u.SetNull(creditallocated.FieldValue)
	return u
}

// SetExtra sets the "extra" field.
func (u *CreditAllocatedUpsert) SetExtra(v string) *CreditAllocatedUpsert {
	u.Set(creditallocated.FieldExtra, v)
	return u
}

// UpdateExtra sets the "extra" field to the value that was provided on create.
func (u *CreditAllocatedUpsert) UpdateExtra() *CreditAllocatedUpsert {
	u.SetExcluded(creditallocated.FieldExtra)
	return u
}

// ClearExtra clears the value of the "extra" field.
func (u *CreditAllocatedUpsert) ClearExtra() *CreditAllocatedUpsert {
	u.SetNull(creditallocated.FieldExtra)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CreditAllocated.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(creditallocated.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CreditAllocatedUpsertOne) UpdateNewValues() *CreditAllocatedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(creditallocated.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CreditAllocated.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CreditAllocatedUpsertOne) Ignore() *CreditAllocatedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CreditAllocatedUpsertOne) DoNothing() *CreditAllocatedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CreditAllocatedCreate.OnConflict
// documentation for more info.
func (u *CreditAllocatedUpsertOne) Update(set func(*CreditAllocatedUpsert)) *CreditAllocatedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CreditAllocatedUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CreditAllocatedUpsertOne) SetCreatedAt(v uint32) *CreditAllocatedUpsertOne {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CreditAllocatedUpsertOne) AddCreatedAt(v uint32) *CreditAllocatedUpsertOne {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CreditAllocatedUpsertOne) UpdateCreatedAt() *CreditAllocatedUpsertOne {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CreditAllocatedUpsertOne) SetUpdatedAt(v uint32) *CreditAllocatedUpsertOne {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CreditAllocatedUpsertOne) AddUpdatedAt(v uint32) *CreditAllocatedUpsertOne {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CreditAllocatedUpsertOne) UpdateUpdatedAt() *CreditAllocatedUpsertOne {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CreditAllocatedUpsertOne) SetDeletedAt(v uint32) *CreditAllocatedUpsertOne {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CreditAllocatedUpsertOne) AddDeletedAt(v uint32) *CreditAllocatedUpsertOne {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CreditAllocatedUpsertOne) UpdateDeletedAt() *CreditAllocatedUpsertOne {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *CreditAllocatedUpsertOne) SetEntID(v uuid.UUID) *CreditAllocatedUpsertOne {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CreditAllocatedUpsertOne) UpdateEntID() *CreditAllocatedUpsertOne {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *CreditAllocatedUpsertOne) SetAppID(v uuid.UUID) *CreditAllocatedUpsertOne {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CreditAllocatedUpsertOne) UpdateAppID() *CreditAllocatedUpsertOne {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *CreditAllocatedUpsertOne) ClearAppID() *CreditAllocatedUpsertOne {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *CreditAllocatedUpsertOne) SetUserID(v uuid.UUID) *CreditAllocatedUpsertOne {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CreditAllocatedUpsertOne) UpdateUserID() *CreditAllocatedUpsertOne {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *CreditAllocatedUpsertOne) ClearUserID() *CreditAllocatedUpsertOne {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.ClearUserID()
	})
}

// SetValue sets the "value" field.
func (u *CreditAllocatedUpsertOne) SetValue(v decimal.Decimal) *CreditAllocatedUpsertOne {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *CreditAllocatedUpsertOne) UpdateValue() *CreditAllocatedUpsertOne {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.UpdateValue()
	})
}

// ClearValue clears the value of the "value" field.
func (u *CreditAllocatedUpsertOne) ClearValue() *CreditAllocatedUpsertOne {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.ClearValue()
	})
}

// SetExtra sets the "extra" field.
func (u *CreditAllocatedUpsertOne) SetExtra(v string) *CreditAllocatedUpsertOne {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.SetExtra(v)
	})
}

// UpdateExtra sets the "extra" field to the value that was provided on create.
func (u *CreditAllocatedUpsertOne) UpdateExtra() *CreditAllocatedUpsertOne {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.UpdateExtra()
	})
}

// ClearExtra clears the value of the "extra" field.
func (u *CreditAllocatedUpsertOne) ClearExtra() *CreditAllocatedUpsertOne {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.ClearExtra()
	})
}

// Exec executes the query.
func (u *CreditAllocatedUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CreditAllocatedCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CreditAllocatedUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CreditAllocatedUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CreditAllocatedUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CreditAllocatedCreateBulk is the builder for creating many CreditAllocated entities in bulk.
type CreditAllocatedCreateBulk struct {
	config
	err      error
	builders []*CreditAllocatedCreate
	conflict []sql.ConflictOption
}

// Save creates the CreditAllocated entities in the database.
func (cacb *CreditAllocatedCreateBulk) Save(ctx context.Context) ([]*CreditAllocated, error) {
	if cacb.err != nil {
		return nil, cacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cacb.builders))
	nodes := make([]*CreditAllocated, len(cacb.builders))
	mutators := make([]Mutator, len(cacb.builders))
	for i := range cacb.builders {
		func(i int, root context.Context) {
			builder := cacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CreditAllocatedMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cacb *CreditAllocatedCreateBulk) SaveX(ctx context.Context) []*CreditAllocated {
	v, err := cacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cacb *CreditAllocatedCreateBulk) Exec(ctx context.Context) error {
	_, err := cacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cacb *CreditAllocatedCreateBulk) ExecX(ctx context.Context) {
	if err := cacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CreditAllocated.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CreditAllocatedUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cacb *CreditAllocatedCreateBulk) OnConflict(opts ...sql.ConflictOption) *CreditAllocatedUpsertBulk {
	cacb.conflict = opts
	return &CreditAllocatedUpsertBulk{
		create: cacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CreditAllocated.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cacb *CreditAllocatedCreateBulk) OnConflictColumns(columns ...string) *CreditAllocatedUpsertBulk {
	cacb.conflict = append(cacb.conflict, sql.ConflictColumns(columns...))
	return &CreditAllocatedUpsertBulk{
		create: cacb,
	}
}

// CreditAllocatedUpsertBulk is the builder for "upsert"-ing
// a bulk of CreditAllocated nodes.
type CreditAllocatedUpsertBulk struct {
	create *CreditAllocatedCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CreditAllocated.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(creditallocated.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CreditAllocatedUpsertBulk) UpdateNewValues() *CreditAllocatedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(creditallocated.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CreditAllocated.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CreditAllocatedUpsertBulk) Ignore() *CreditAllocatedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CreditAllocatedUpsertBulk) DoNothing() *CreditAllocatedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CreditAllocatedCreateBulk.OnConflict
// documentation for more info.
func (u *CreditAllocatedUpsertBulk) Update(set func(*CreditAllocatedUpsert)) *CreditAllocatedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CreditAllocatedUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CreditAllocatedUpsertBulk) SetCreatedAt(v uint32) *CreditAllocatedUpsertBulk {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CreditAllocatedUpsertBulk) AddCreatedAt(v uint32) *CreditAllocatedUpsertBulk {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CreditAllocatedUpsertBulk) UpdateCreatedAt() *CreditAllocatedUpsertBulk {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CreditAllocatedUpsertBulk) SetUpdatedAt(v uint32) *CreditAllocatedUpsertBulk {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CreditAllocatedUpsertBulk) AddUpdatedAt(v uint32) *CreditAllocatedUpsertBulk {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CreditAllocatedUpsertBulk) UpdateUpdatedAt() *CreditAllocatedUpsertBulk {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CreditAllocatedUpsertBulk) SetDeletedAt(v uint32) *CreditAllocatedUpsertBulk {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CreditAllocatedUpsertBulk) AddDeletedAt(v uint32) *CreditAllocatedUpsertBulk {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CreditAllocatedUpsertBulk) UpdateDeletedAt() *CreditAllocatedUpsertBulk {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *CreditAllocatedUpsertBulk) SetEntID(v uuid.UUID) *CreditAllocatedUpsertBulk {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CreditAllocatedUpsertBulk) UpdateEntID() *CreditAllocatedUpsertBulk {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *CreditAllocatedUpsertBulk) SetAppID(v uuid.UUID) *CreditAllocatedUpsertBulk {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CreditAllocatedUpsertBulk) UpdateAppID() *CreditAllocatedUpsertBulk {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *CreditAllocatedUpsertBulk) ClearAppID() *CreditAllocatedUpsertBulk {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *CreditAllocatedUpsertBulk) SetUserID(v uuid.UUID) *CreditAllocatedUpsertBulk {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CreditAllocatedUpsertBulk) UpdateUserID() *CreditAllocatedUpsertBulk {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *CreditAllocatedUpsertBulk) ClearUserID() *CreditAllocatedUpsertBulk {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.ClearUserID()
	})
}

// SetValue sets the "value" field.
func (u *CreditAllocatedUpsertBulk) SetValue(v decimal.Decimal) *CreditAllocatedUpsertBulk {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *CreditAllocatedUpsertBulk) UpdateValue() *CreditAllocatedUpsertBulk {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.UpdateValue()
	})
}

// ClearValue clears the value of the "value" field.
func (u *CreditAllocatedUpsertBulk) ClearValue() *CreditAllocatedUpsertBulk {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.ClearValue()
	})
}

// SetExtra sets the "extra" field.
func (u *CreditAllocatedUpsertBulk) SetExtra(v string) *CreditAllocatedUpsertBulk {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.SetExtra(v)
	})
}

// UpdateExtra sets the "extra" field to the value that was provided on create.
func (u *CreditAllocatedUpsertBulk) UpdateExtra() *CreditAllocatedUpsertBulk {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.UpdateExtra()
	})
}

// ClearExtra clears the value of the "extra" field.
func (u *CreditAllocatedUpsertBulk) ClearExtra() *CreditAllocatedUpsertBulk {
	return u.Update(func(s *CreditAllocatedUpsert) {
		s.ClearExtra()
	})
}

// Exec executes the query.
func (u *CreditAllocatedUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the CreditAllocatedCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CreditAllocatedCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CreditAllocatedUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package orderstatement

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the orderstatement type in the database.
	Label = "order_statement"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldGoodID holds the string denoting the good_id field in the database.
	FieldGoodID = "good_id"
	// FieldAppGoodID holds the string denoting the app_good_id field in the database.
	FieldAppGoodID = "app_good_id"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldDirectContributorID holds the string denoting the direct_contributor_id field in the database.
	FieldDirectContributorID = "direct_contributor_id"
	// FieldOrderUserID holds the string denoting the order_user_id field in the database.
	FieldOrderUserID = "order_user_id"
	// FieldGoodCoinTypeID holds the string denoting the good_coin_type_id field in the database.
	FieldGoodCoinTypeID = "good_coin_type_id"
	// FieldUnits holds the string denoting the units field in the database.
	FieldUnits = "units"
	// FieldGoodValueUsd holds the string denoting the good_value_usd field in the database.
	FieldGoodValueUsd = "good_value_usd"
	// FieldPaymentAmountUsd holds the string denoting the payment_amount_usd field in the database.
	FieldPaymentAmountUsd = "payment_amount_usd"
	// FieldCommissionAmountUsd holds the string denoting the commission_amount_usd field in the database.
	FieldCommissionAmountUsd = "commission_amount_usd"
	// FieldAppConfigID holds the string denoting the app_config_id field in the database.
	FieldAppConfigID = "app_config_id"
	// FieldCommissionConfigID holds the string denoting the commission_config_id field in the database.
	FieldCommissionConfigID = "commission_config_id"
	// FieldCommissionConfigType holds the string denoting the commission_config_type field in the database.
	FieldCommissionConfigType = "commission_config_type"
	// Table holds the table name of the orderstatement in the database.
	Table = "order_statements"
)

// Columns holds all SQL columns for orderstatement fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldEntID,
	FieldAppID,
	FieldUserID,
	FieldGoodID,
	FieldAppGoodID,
	FieldOrderID,
	FieldDirectContributorID,
	FieldOrderUserID,
	FieldGoodCoinTypeID,
	FieldUnits,
	FieldGoodValueUsd,
	FieldPaymentAmountUsd,
	FieldCommissionAmountUsd,
	FieldAppConfigID,
	FieldCommissionConfigID,
	FieldCommissionConfigType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() uint32
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() uint32
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() uint32
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt func() uint32
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultAppID holds the default value on creation for the "app_id" field.
	DefaultAppID func() uuid.UUID
	// DefaultUserID holds the default value on creation for the "user_id" field.
	DefaultUserID func() uuid.UUID
	// DefaultGoodID holds the default value on creation for the "good_id" field.
	DefaultGoodID func() uuid.UUID
	// DefaultAppGoodID holds the default value on creation for the "app_good_id" field.
	DefaultAppGoodID func() uuid.UUID
	// DefaultOrderID holds the default value on creation for the "order_id" field.
	DefaultOrderID func() uuid.UUID
	// DefaultDirectContributorID holds the default value on creation for the "direct_contributor_id" field.
	DefaultDirectContributorID func() uuid.UUID
	// DefaultOrderUserID holds the default value on creation for the "order_user_id" field.
	DefaultOrderUserID func() uuid.UUID
	// DefaultGoodCoinTypeID holds the default value on creation for the "good_coin_type_id" field.
	DefaultGoodCoinTypeID func() uuid.UUID
	// DefaultUnits holds the default value on creation for the "units" field.
	DefaultUnits decimal.Decimal
	// DefaultGoodValueUsd holds the default value on creation for the "good_value_usd" field.
	DefaultGoodValueUsd decimal.Decimal
	// DefaultPaymentAmountUsd holds the default value on creation for the "payment_amount_usd" field.
	DefaultPaymentAmountUsd decimal.Decimal
	// DefaultCommissionAmountUsd holds the default value on creation for the "commission_amount_usd" field.
	DefaultCommissionAmountUsd decimal.Decimal
	// DefaultAppConfigID holds the default value on creation for the "app_config_id" field.
	DefaultAppConfigID func() uuid.UUID
	// DefaultCommissionConfigID holds the default value on creation for the "commission_config_id" field.
	DefaultCommissionConfigID func() uuid.UUID
	// DefaultCommissionConfigType holds the default value on creation for the "commission_config_type" field.
	DefaultCommissionConfigType string
)

// OrderOption defines the ordering options for the OrderStatement queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByAppID orders the results by the app_id field.
func ByAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByGoodID orders the results by the good_id field.
func ByGoodID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodID, opts...).ToFunc()
}

// ByAppGoodID orders the results by the app_good_id field.
func ByAppGoodID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppGoodID, opts...).ToFunc()
}

// ByOrderID orders the results by the order_id field.
func ByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderID, opts...).ToFunc()
}

// ByDirectContributorID orders the results by the direct_contributor_id field.
func ByDirectContributorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDirectContributorID, opts...).ToFunc()
}

// ByOrderUserID orders the results by the order_user_id field.
func ByOrderUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderUserID, opts...).ToFunc()
}

// ByGoodCoinTypeID orders the results by the good_coin_type_id field.
func ByGoodCoinTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodCoinTypeID, opts...).ToFunc()
}

// ByUnits orders the results by the units field.
func ByUnits(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnits, opts...).ToFunc()
}

// ByGoodValueUsd orders the results by the good_value_usd field.
func ByGoodValueUsd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodValueUsd, opts...).ToFunc()
}

// ByPaymentAmountUsd orders the results by the payment_amount_usd field.
func ByPaymentAmountUsd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentAmountUsd, opts...).ToFunc()
}

// ByCommissionAmountUsd orders the results by the commission_amount_usd field.
func ByCommissionAmountUsd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommissionAmountUsd, opts...).ToFunc()
}

// ByAppConfigID orders the results by the app_config_id field.
func ByAppConfigID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppConfigID, opts...).ToFunc()
}

// ByCommissionConfigID orders the results by the commission_config_id field.
func ByCommissionConfigID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommissionConfigID, opts...).ToFunc()
}

// ByCommissionConfigType orders the results by the commission_config_type field.
func ByCommissionConfigType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommissionConfigType, opts...).ToFunc()
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/achievementuser"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AchievementUserCreate is the builder for creating a AchievementUser entity.
type AchievementUserCreate struct {
	config
	mutation *AchievementUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (auc *AchievementUserCreate) SetCreatedAt(u uint32) *AchievementUserCreate {
	auc.mutation.SetCreatedAt(u)
	return auc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auc *AchievementUserCreate) SetNillableCreatedAt(u *uint32) *AchievementUserCreate {
	if u != nil {
		auc.SetCreatedAt(*u)
	}
	return auc
}

// SetUpdatedAt sets the "updated_at" field.
func (auc *AchievementUserCreate) SetUpdatedAt(u uint32) *AchievementUserCreate {
	auc.mutation.SetUpdatedAt(u)
	return auc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (auc *AchievementUserCreate) SetNillableUpdatedAt(u *uint32) *AchievementUserCreate {
	if u != nil {
		auc.SetUpdatedAt(*u)
	}
	return auc
}

// SetDeletedAt sets the "deleted_at" field.
func (auc *AchievementUserCreate) SetDeletedAt(u uint32) *AchievementUserCreate {
	auc.mutation.SetDeletedAt(u)
	return auc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auc *AchievementUserCreate) SetNillableDeletedAt(u *uint32) *AchievementUserCreate {
	if u != nil {
		auc.SetDeletedAt(*u)
	}
	return auc
}

// SetEntID sets the "ent_id" field.
func (auc *AchievementUserCreate) SetEntID(u uuid.UUID) *AchievementUserCreate {
	auc.mutation.SetEntID(u)
	return auc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (auc *AchievementUserCreate) SetNillableEntID(u *uuid.UUID) *AchievementUserCreate {
	if u != nil {
		auc.SetEntID(*u)
	}
	return auc
}

// SetAppID sets the "app_id" field.
func (auc *AchievementUserCreate) SetAppID(u uuid.UUID) *AchievementUserCreate {
	auc.mutation.SetAppID(u)
	return auc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (auc *AchievementUserCreate) SetNillableAppID(u *uuid.UUID) *AchievementUserCreate {
	if u != nil {
		auc.SetAppID(*u)
	}
	return auc
}

// SetUserID sets the "user_id" field.
func (auc *AchievementUserCreate) SetUserID(u uuid.UUID) *AchievementUserCreate {
	auc.mutation.SetUserID(u)
	return auc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (auc *AchievementUserCreate) SetNillableUserID(u *uuid.UUID) *AchievementUserCreate {
	if u != nil {
		auc.SetUserID(*u)
	}
	return auc
}

// SetTotalCommission sets the "total_commission" field.
func (auc *AchievementUserCreate) SetTotalCommission(d decimal.Decimal) *AchievementUserCreate {
	auc.mutation.SetTotalCommission(d)
	return auc
}

// SetNillableTotalCommission sets the "total_commission" field if the given value is not nil.
func (auc *AchievementUserCreate) SetNillableTotalCommission(d *decimal.Decimal) *AchievementUserCreate {
	if d != nil {
		auc.SetTotalCommission(*d)
	}
	return auc
}

// SetSelfCommission sets the "self_commission" field.
func (auc *AchievementUserCreate) SetSelfCommission(d decimal.Decimal) *AchievementUserCreate {
	auc.mutation.SetSelfCommission(d)
	return auc
}

// SetNillableSelfCommission sets the "self_commission" field if the given value is not nil.
func (auc *AchievementUserCreate) SetNillableSelfCommission(d *decimal.Decimal) *AchievementUserCreate {
	if d != nil {
		auc.SetSelfCommission(*d)
	}
	return auc
}

// SetDirectConsumeAmount sets the "direct_consume_amount" field.
func (auc *AchievementUserCreate) SetDirectConsumeAmount(d decimal.Decimal) *AchievementUserCreate {
	auc.mutation.SetDirectConsumeAmount(d)
	return auc
}

// SetNillableDirectConsumeAmount sets the "direct_consume_amount" field if the given value is not nil.
func (auc *AchievementUserCreate) SetNillableDirectConsumeAmount(d *decimal.Decimal) *AchievementUserCreate {
	if d != nil {
		auc.SetDirectConsumeAmount(*d)
	}
	return auc
}

// SetInviteeConsumeAmount sets the "invitee_consume_amount" field.
func (auc *AchievementUserCreate) SetInviteeConsumeAmount(d decimal.Decimal) *AchievementUserCreate {
	auc.mutation.SetInviteeConsumeAmount(d)
	return auc
}

// SetNillableInviteeConsumeAmount sets the "invitee_consume_amount" field if the given value is not nil.
func (auc *AchievementUserCreate) SetNillableInviteeConsumeAmount(d *decimal.Decimal) *AchievementUserCreate {
	if d != nil {
		auc.SetInviteeConsumeAmount(*d)
	}
	return auc
}

// SetDirectInvitees sets the "direct_invitees" field.
func (auc *AchievementUserCreate) SetDirectInvitees(u uint32) *AchievementUserCreate {
	auc.mutation.SetDirectInvitees(u)
	return auc
}

// SetNillableDirectInvitees sets the "direct_invitees" field if the given value is not nil.
func (auc *AchievementUserCreate) SetNillableDirectInvitees(u *uint32) *AchievementUserCreate {
	if u != nil {
		auc.SetDirectInvitees(*u)
	}
	return auc
}

// SetIndirectInvitees sets the "indirect_invitees" field.
func (auc *AchievementUserCreate) SetIndirectInvitees(u uint32) *AchievementUserCreate {
	auc.mutation.SetIndirectInvitees(u)
	return auc
}

// SetNillableIndirectInvitees sets the "indirect_invitees" field if the given value is not nil.
func (auc *AchievementUserCreate) SetNillableIndirectInvitees(u *uint32) *AchievementUserCreate {
	if u != nil {
		auc.SetIndirectInvitees(*u)
	}
	return auc
}

// SetID sets the "id" field.
func (auc *AchievementUserCreate) SetID(u uint32) *AchievementUserCreate {
	auc.mutation.SetID(u)
	return auc
}

// Mutation returns the AchievementUserMutation object of the builder.
func (auc *AchievementUserCreate) Mutation() *AchievementUserMutation {
	return auc.mutation
}

// Save creates the AchievementUser in the database.
func (auc *AchievementUserCreate) Save(ctx context.Context) (*AchievementUser, error) {
	auc.defaults()
	return withHooks(ctx, auc.sqlSave, auc.mutation, auc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (auc *AchievementUserCreate) SaveX(ctx context.Context) *AchievementUser {
	v, err := auc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (auc *AchievementUserCreate) Exec(ctx context.Context) error {
	_, err := auc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auc *AchievementUserCreate) ExecX(ctx context.Context) {
	if err := auc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auc *AchievementUserCreate) defaults() {
	if _, ok := auc.mutation.CreatedAt(); !ok {
		v := achievementuser.DefaultCreatedAt()
		auc.mutation.SetCreatedAt(v)
	}
	if _, ok := auc.mutation.UpdatedAt(); !ok {
		v := achievementuser.DefaultUpdatedAt()
		auc.mutation.SetUpdatedAt(v)
	}
	if _, ok := auc.mutation.DeletedAt(); !ok {
		v := achievementuser.DefaultDeletedAt()
		auc.mutation.SetDeletedAt(v)
	}
	if _, ok := auc.mutation.EntID(); !ok {
		v := achievementuser.DefaultEntID()
		auc.mutation.SetEntID(v)
	}
	if _, ok := auc.mutation.AppID(); !ok {
		v := achievementuser.DefaultAppID()
		auc.mutation.SetAppID(v)
	}
	if _, ok := auc.mutation.UserID(); !ok {
		v := achievementuser.DefaultUserID()
		auc.mutation.SetUserID(v)
	}
	if _, ok := auc.mutation.TotalCommission(); !ok {
		v := achievementuser.DefaultTotalCommission
		auc.mutation.SetTotalCommission(v)
	}
	if _, ok := auc.mutation.SelfCommission(); !ok {
		v := achievementuser.DefaultSelfCommission
		auc.mutation.SetSelfCommission(v)
	}
	if _, ok := auc.mutation.DirectConsumeAmount(); !ok {
		v := achievementuser.DefaultDirectConsumeAmount
		auc.mutation.SetDirectConsumeAmount(v)
	}
	if _, ok := auc.mutation.InviteeConsumeAmount(); !ok {
		v := achievementuser.DefaultInviteeConsumeAmount
		auc.mutation.SetInviteeConsumeAmount(v)
	}
	if _, ok := auc.mutation.DirectInvitees(); !ok {
		v := achievementuser.DefaultDirectInvitees
		auc.mutation.SetDirectInvitees(v)
	}
	if _, ok := auc.mutation.IndirectInvitees(); !ok {
		v := achievementuser.DefaultIndirectInvitees
		auc.mutation.SetIndirectInvitees(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auc *AchievementUserCreate) check() error {
	if _, ok := auc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "AchievementUser.created_at"`)}
	}
	if _, ok := auc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "AchievementUser.updated_at"`)}
	}
	if _, ok := auc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "AchievementUser.deleted_at"`)}
	}
	if _, ok := auc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "AchievementUser.ent_id"`)}
	}
	return nil
}

func (auc *AchievementUserCreate) sqlSave(ctx context.Context) (*AchievementUser, error) {
	if err := auc.check(); err != nil {
		return nil, err
	}
	_node, _spec := auc.createSpec()
	if err := sqlgraph.CreateNode(ctx, auc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	auc.mutation.id = &_node.ID
	auc.mutation.done = true
	return _node, nil
}

func (auc *AchievementUserCreate) createSpec() (*AchievementUser, *sqlgraph.CreateSpec) {
	var (
		_node = &AchievementUser{config: auc.config}
		_spec = sqlgraph.NewCreateSpec(achievementuser.Table, sqlgraph.NewFieldSpec(achievementuser.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = auc.conflict
	if id, ok := auc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := auc.mutation.CreatedAt(); ok {
		_spec.SetField(achievementuser.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := auc.mutation.UpdatedAt(); ok {
		_spec.SetField(achievementuser.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := auc.mutation.DeletedAt(); ok {
		_spec.SetField(achievementuser.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := auc.mutation.EntID(); ok {
		_spec.SetField(achievementuser.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := auc.mutation.AppID(); ok {
		_spec.SetField(achievementuser.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := auc.mutation.UserID(); ok {
		_spec.SetField(achievementuser.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := auc.mutation.TotalCommission(); ok {
		_spec.SetField(achievementuser.FieldTotalCommission, field.TypeOther, value)
		_node.TotalCommission = value
	}
	if value, ok := auc.mutation.SelfCommission(); ok {
		_spec.SetField(achievementuser.FieldSelfCommission, field.TypeOther, value)
		_node.SelfCommission = value
	}
	if value, ok := auc.mutation.DirectConsumeAmount(); ok {
		_spec.SetField(achievementuser.FieldDirectConsumeAmount, field.TypeOther, value)
		_node.DirectConsumeAmount = value
	}
	if value, ok := auc.mutation.InviteeConsumeAmount(); ok {
		_spec.SetField(achievementuser.FieldInviteeConsumeAmount, field.TypeOther, value)
		_node.InviteeConsumeAmount = value
	}
	if value, ok := auc.mutation.DirectInvitees(); ok {
		_spec.SetField(achievementuser.FieldDirectInvitees, field.TypeUint32, value)
		_node.DirectInvitees = value
	}
	if value, ok := auc.mutation.IndirectInvitees(); ok {
		_spec.SetField(achievementuser.FieldIndirectInvitees, field.TypeUint32, value)
		_node.IndirectInvitees = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AchievementUser.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AchievementUserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (auc *AchievementUserCreate) OnConflict(opts ...sql.ConflictOption) *AchievementUserUpsertOne {
	auc.conflict = opts
	return &AchievementUserUpsertOne{
		create: auc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AchievementUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (auc *AchievementUserCreate) OnConflictColumns(columns ...string) *AchievementUserUpsertOne {
	auc.conflict = append(auc.conflict, sql.ConflictColumns(columns...))
	return &AchievementUserUpsertOne{
		create: auc,
	}
}

type (
	// AchievementUserUpsertOne is the builder for "upsert"-ing
	//  one AchievementUser node.
	AchievementUserUpsertOne struct {
		create *AchievementUserCreate
	}

	// AchievementUserUpsert is the "OnConflict" setter.
	AchievementUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *AchievementUserUpsert) SetCreatedAt(v uint32) *AchievementUserUpsert {
	u.Set(achievementuser.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AchievementUserUpsert) UpdateCreatedAt() *AchievementUserUpsert {
	u.SetExcluded(achievementuser.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AchievementUserUpsert) AddCreatedAt(v uint32) *AchievementUserUpsert {
	u.Add(achievementuser.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AchievementUserUpsert) SetUpdatedAt(v uint32) *AchievementUserUpsert {
	u.Set(achievementuser.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AchievementUserUpsert) UpdateUpdatedAt() *AchievementUserUpsert {
	u.SetExcluded(achievementuser.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AchievementUserUpsert) AddUpdatedAt(v uint32) *AchievementUserUpsert {
	u.Add(achievementuser.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AchievementUserUpsert) SetDeletedAt(v uint32) *AchievementUserUpsert {
	u.Set(achievementuser.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AchievementUserUpsert) UpdateDeletedAt() *AchievementUserUpsert {
	u.SetExcluded(achievementuser.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AchievementUserUpsert) AddDeletedAt(v uint32) *AchievementUserUpsert {
	u.Add(achievementuser.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AchievementUserUpsert) SetEntID(v uuid.UUID) *AchievementUserUpsert {
	u.Set(achievementuser.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AchievementUserUpsert) UpdateEntID() *AchievementUserUpsert {
	u.SetExcluded(achievementuser.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AchievementUserUpsert) SetAppID(v uuid.UUID) *AchievementUserUpsert {
	u.Set(achievementuser.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AchievementUserUpsert) UpdateAppID() *AchievementUserUpsert {
	u.SetExcluded(achievementuser.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *AchievementUserUpsert) ClearAppID() *AchievementUserUpsert {
	u.SetNull(achievementuser.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *AchievementUserUpsert) SetUserID(v uuid.UUID) *AchievementUserUpsert {
	u.Set(achievementuser.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AchievementUserUpsert) UpdateUserID() *AchievementUserUpsert {
	u.SetExcluded(achievementuser.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *AchievementUserUpsert) ClearUserID() *AchievementUserUpsert {
	u.SetNull(achievementuser.FieldUserID)
	return u
}

// SetTotalCommission sets the "total_commission" field.
func (u *AchievementUserUpsert) SetTotalCommission(v decimal.Decimal) *AchievementUserUpsert {
	u.Set(achievementuser.FieldTotalCommission, v)
	return u
}

// UpdateTotalCommission sets the "total_commission" field to the value that was provided on create.
func (u *AchievementUserUpsert) UpdateTotalCommission() *AchievementUserUpsert {
	u.SetExcluded(achievementuser.FieldTotalCommission)
	return u
}

// ClearTotalCommission clears the value of the "total_commission" field.
func (u *AchievementUserUpsert) ClearTotalCommission() *AchievementUserUpsert {
	u.SetNull(achievementuser.FieldTotalCommission)
	return u
}

// SetSelfCommission sets the "self_commission" field.
func (u *AchievementUserUpsert) SetSelfCommission(v decimal.Decimal) *AchievementUserUpsert {
	u.Set(achievementuser.FieldSelfCommission, v)
	return u
}

// UpdateSelfCommission sets the "self_commission" field to the value that was provided on create.
func (u *AchievementUserUpsert) UpdateSelfCommission() *AchievementUserUpsert {
	u.SetExcluded(achievementuser.FieldSelfCommission)
	return u
}

// ClearSelfCommission clears the value of the "self_commission" field.
func (u *AchievementUserUpsert) ClearSelfCommission() *AchievementUserUpsert {
	u.SetNull(achievementuser.FieldSelfCommission)
	return u
}

// SetDirectConsumeAmount sets the "direct_consume_amount" field.
func (u *AchievementUserUpsert) SetDirectConsumeAmount(v decimal.Decimal) *AchievementUserUpsert {
	u.Set(achievementuser.FieldDirectConsumeAmount, v)
	return u
}

// UpdateDirectConsumeAmount sets the "direct_consume_amount" field to the value that was provided on create.
func (u *AchievementUserUpsert) UpdateDirectConsumeAmount() *AchievementUserUpsert {
	u.SetExcluded(achievementuser.FieldDirectConsumeAmount)
	return u
}

// ClearDirectConsumeAmount clears the value of the "direct_consume_amount" field.
func (u *AchievementUserUpsert) ClearDirectConsumeAmount() *AchievementUserUpsert {
	u.SetNull(achievementuser.FieldDirectConsumeAmount)
	return u
}

// SetInviteeConsumeAmount sets the "invitee_consume_amount" field.
func (u *AchievementUserUpsert) SetInviteeConsumeAmount(v decimal.Decimal) *AchievementUserUpsert {
	u.Set(achievementuser.FieldInviteeConsumeAmount, v)
	return u
}

// UpdateInviteeConsumeAmount sets the "invitee_consume_amount" field to the value that was provided on create.
func (u *AchievementUserUpsert) UpdateInviteeConsumeAmount() *AchievementUserUpsert {
	u.SetExcluded(achievementuser.FieldInviteeConsumeAmount)
	return u
}

// ClearInviteeConsumeAmount clears the value of the "invitee_consume_amount" field.
func (u *AchievementUserUpsert) ClearInviteeConsumeAmount() *AchievementUserUpsert {
	u.SetNull(achievementuser.FieldInviteeConsumeAmount)
	return u
}

// SetDirectInvitees sets the "direct_invitees" field.
func (u *AchievementUserUpsert) SetDirectInvitees(v uint32) *AchievementUserUpsert {
	u.Set(achievementuser.FieldDirectInvitees, v)
	return u
}

// UpdateDirectInvitees sets the "direct_invitees" field to the value that was provided on create.
func (u *AchievementUserUpsert) UpdateDirectInvitees() *AchievementUserUpsert {
	u.SetExcluded(achievementuser.FieldDirectInvitees)
	return u
}

// AddDirectInvitees adds v to the "direct_invitees" field.
func (u *AchievementUserUpsert) AddDirectInvitees(v uint32) *AchievementUserUpsert {
	u.Add(achievementuser.FieldDirectInvitees, v)
	return u
}

// ClearDirectInvitees clears the value of the "direct_invitees" field.
func (u *AchievementUserUpsert) ClearDirectInvitees() *AchievementUserUpsert {
	u.SetNull(achievementuser.FieldDirectInvitees)
	return u
}

// SetIndirectInvitees sets the "indirect_invitees" field.
func (u *AchievementUserUpsert) SetIndirectInvitees(v uint32) *AchievementUserUpsert {
	u.Set(achievementuser.FieldIndirectInvitees, v)
	return u
}

// UpdateIndirectInvitees sets the "indirect_invitees" field to the value that was provided on create.
func (u *AchievementUserUpsert) UpdateIndirectInvitees() *AchievementUserUpsert {
	u.SetExcluded(achievementuser.FieldIndirectInvitees)
	return u
}

// AddIndirectInvitees adds v to the "indirect_invitees" field.
func (u *AchievementUserUpsert) AddIndirectInvitees(v uint32) *AchievementUserUpsert {
	u.Add(achievementuser.FieldIndirectInvitees, v)
	return u
}

// ClearIndirectInvitees clears the value of the "indirect_invitees" field.
func (u *AchievementUserUpsert) ClearIndirectInvitees() *AchievementUserUpsert {
	u.SetNull(achievementuser.FieldIndirectInvitees)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AchievementUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(achievementuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AchievementUserUpsertOne) UpdateNewValues() *AchievementUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(achievementuser.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AchievementUser.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AchievementUserUpsertOne) Ignore() *AchievementUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AchievementUserUpsertOne) DoNothing() *AchievementUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AchievementUserCreate.OnConflict
// documentation for more info.
func (u *AchievementUserUpsertOne) Update(set func(*AchievementUserUpsert)) *AchievementUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AchievementUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AchievementUserUpsertOne) SetCreatedAt(v uint32) *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AchievementUserUpsertOne) AddCreatedAt(v uint32) *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AchievementUserUpsertOne) UpdateCreatedAt() *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AchievementUserUpsertOne) SetUpdatedAt(v uint32) *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AchievementUserUpsertOne) AddUpdatedAt(v uint32) *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AchievementUserUpsertOne) UpdateUpdatedAt() *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AchievementUserUpsertOne) SetDeletedAt(v uint32) *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AchievementUserUpsertOne) AddDeletedAt(v uint32) *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AchievementUserUpsertOne) UpdateDeletedAt() *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *AchievementUserUpsertOne) SetEntID(v uuid.UUID) *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AchievementUserUpsertOne) UpdateEntID() *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AchievementUserUpsertOne) SetAppID(v uuid.UUID) *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AchievementUserUpsertOne) UpdateAppID() *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AchievementUserUpsertOne) ClearAppID() *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *AchievementUserUpsertOne) SetUserID(v uuid.UUID) *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AchievementUserUpsertOne) UpdateUserID() *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *AchievementUserUpsertOne) ClearUserID() *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.ClearUserID()
	})
}

// SetTotalCommission sets the "total_commission" field.
func (u *AchievementUserUpsertOne) SetTotalCommission(v decimal.Decimal) *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.SetTotalCommission(v)
	})
}

// UpdateTotalCommission sets the "total_commission" field to the value that was provided on create.
func (u *AchievementUserUpsertOne) UpdateTotalCommission() *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.UpdateTotalCommission()
	})
}

// ClearTotalCommission clears the value of the "total_commission" field.
func (u *AchievementUserUpsertOne) ClearTotalCommission() *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.ClearTotalCommission()
	})
}

// SetSelfCommission sets the "self_commission" field.
func (u *AchievementUserUpsertOne) SetSelfCommission(v decimal.Decimal) *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.SetSelfCommission(v)
	})
}

// UpdateSelfCommission sets the "self_commission" field to the value that was provided on create.
func (u *AchievementUserUpsertOne) UpdateSelfCommission() *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.UpdateSelfCommission()
	})
}

// ClearSelfCommission clears the value of the "self_commission" field.
func (u *AchievementUserUpsertOne) ClearSelfCommission() *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.ClearSelfCommission()
	})
}

// SetDirectConsumeAmount sets the "direct_consume_amount" field.
func (u *AchievementUserUpsertOne) SetDirectConsumeAmount(v decimal.Decimal) *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.SetDirectConsumeAmount(v)
	})
}

// UpdateDirectConsumeAmount sets the "direct_consume_amount" field to the value that was provided on create.
func (u *AchievementUserUpsertOne) UpdateDirectConsumeAmount() *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.UpdateDirectConsumeAmount()
	})
}

// ClearDirectConsumeAmount clears the value of the "direct_consume_amount" field.
func (u *AchievementUserUpsertOne) ClearDirectConsumeAmount() *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.ClearDirectConsumeAmount()
	})
}

// SetInviteeConsumeAmount sets the "invitee_consume_amount" field.
func (u *AchievementUserUpsertOne) SetInviteeConsumeAmount(v decimal.Decimal) *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.SetInviteeConsumeAmount(v)
	})
}

// UpdateInviteeConsumeAmount sets the "invitee_consume_amount" field to the value that was provided on create.
func (u *AchievementUserUpsertOne) UpdateInviteeConsumeAmount() *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.UpdateInviteeConsumeAmount()
	})
}

// ClearInviteeConsumeAmount clears the value of the "invitee_consume_amount" field.
func (u *AchievementUserUpsertOne) ClearInviteeConsumeAmount() *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.ClearInviteeConsumeAmount()
	})
}

// SetDirectInvitees sets the "direct_invitees" field.
func (u *AchievementUserUpsertOne) SetDirectInvitees(v uint32) *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.SetDirectInvitees(v)
	})
}

// AddDirectInvitees adds v to the "direct_invitees" field.
func (u *AchievementUserUpsertOne) AddDirectInvitees(v uint32) *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.AddDirectInvitees(v)
	})
}

// UpdateDirectInvitees sets the "direct_invitees" field to the value that was provided on create.
func (u *AchievementUserUpsertOne) UpdateDirectInvitees() *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.UpdateDirectInvitees()
	})
}

// ClearDirectInvitees clears the value of the "direct_invitees" field.
func (u *AchievementUserUpsertOne) ClearDirectInvitees() *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.ClearDirectInvitees()
	})
}

// SetIndirectInvitees sets the "indirect_invitees" field.
func (u *AchievementUserUpsertOne) SetIndirectInvitees(v uint32) *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.SetIndirectInvitees(v)
	})
}

// AddIndirectInvitees adds v to the "indirect_invitees" field.
func (u *AchievementUserUpsertOne) AddIndirectInvitees(v uint32) *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.AddIndirectInvitees(v)
	})
}

// UpdateIndirectInvitees sets the "indirect_invitees" field to the value that was provided on create.
func (u *AchievementUserUpsertOne) UpdateIndirectInvitees() *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.UpdateIndirectInvitees()
	})
}

// ClearIndirectInvitees clears the value of the "indirect_invitees" field.
func (u *AchievementUserUpsertOne) ClearIndirectInvitees() *AchievementUserUpsertOne {
	return u.Update(func(s *AchievementUserUpsert) {
		s.ClearIndirectInvitees()
	})
}

// Exec executes the query.
func (u *AchievementUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AchievementUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AchievementUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AchievementUserUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AchievementUserUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AchievementUserCreateBulk is the builder for creating many AchievementUser entities in bulk.
type AchievementUserCreateBulk struct {
	config
	err      error
	builders []*AchievementUserCreate
	conflict []sql.ConflictOption
}

// Save creates the AchievementUser entities in the database.
func (aucb *AchievementUserCreateBulk) Save(ctx context.Context) ([]*AchievementUser, error) {
	if aucb.err != nil {
		return nil, aucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aucb.builders))
	nodes := make([]*AchievementUser, len(aucb.builders))
	mutators := make([]Mutator, len(aucb.builders))
	for i := range aucb.builders {
		func(i int, root context.Context) {
			builder := aucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AchievementUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aucb *AchievementUserCreateBulk) SaveX(ctx context.Context) []*AchievementUser {
	v, err := aucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aucb *AchievementUserCreateBulk) Exec(ctx context.Context) error {
	_, err := aucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aucb *AchievementUserCreateBulk) ExecX(ctx context.Context) {
	if err := aucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AchievementUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AchievementUserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (aucb *AchievementUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *AchievementUserUpsertBulk {
	aucb.conflict = opts
	return &AchievementUserUpsertBulk{
		create: aucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AchievementUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aucb *AchievementUserCreateBulk) OnConflictColumns(columns ...string) *AchievementUserUpsertBulk {
	aucb.conflict = append(aucb.conflict, sql.ConflictColumns(columns...))
	return &AchievementUserUpsertBulk{
		create: aucb,
	}
}

// AchievementUserUpsertBulk is the builder for "upsert"-ing
// a bulk of AchievementUser nodes.
type AchievementUserUpsertBulk struct {
	create *AchievementUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AchievementUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(achievementuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AchievementUserUpsertBulk) UpdateNewValues() *AchievementUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(achievementuser.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AchievementUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AchievementUserUpsertBulk) Ignore() *AchievementUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AchievementUserUpsertBulk) DoNothing() *AchievementUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AchievementUserCreateBulk.OnConflict
// documentation for more info.
func (u *AchievementUserUpsertBulk) Update(set func(*AchievementUserUpsert)) *AchievementUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AchievementUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AchievementUserUpsertBulk) SetCreatedAt(v uint32) *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AchievementUserUpsertBulk) AddCreatedAt(v uint32) *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AchievementUserUpsertBulk) UpdateCreatedAt() *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AchievementUserUpsertBulk) SetUpdatedAt(v uint32) *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AchievementUserUpsertBulk) AddUpdatedAt(v uint32) *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AchievementUserUpsertBulk) UpdateUpdatedAt() *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AchievementUserUpsertBulk) SetDeletedAt(v uint32) *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AchievementUserUpsertBulk) AddDeletedAt(v uint32) *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AchievementUserUpsertBulk) UpdateDeletedAt() *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *AchievementUserUpsertBulk) SetEntID(v uuid.UUID) *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AchievementUserUpsertBulk) UpdateEntID() *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AchievementUserUpsertBulk) SetAppID(v uuid.UUID) *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AchievementUserUpsertBulk) UpdateAppID() *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AchievementUserUpsertBulk) ClearAppID() *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *AchievementUserUpsertBulk) SetUserID(v uuid.UUID) *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AchievementUserUpsertBulk) UpdateUserID() *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *AchievementUserUpsertBulk) ClearUserID() *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.ClearUserID()
	})
}

// SetTotalCommission sets the "total_commission" field.
func (u *AchievementUserUpsertBulk) SetTotalCommission(v decimal.Decimal) *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.SetTotalCommission(v)
	})
}

// UpdateTotalCommission sets the "total_commission" field to the value that was provided on create.
func (u *AchievementUserUpsertBulk) UpdateTotalCommission() *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.UpdateTotalCommission()
	})
}

// ClearTotalCommission clears the value of the "total_commission" field.
func (u *AchievementUserUpsertBulk) ClearTotalCommission() *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.ClearTotalCommission()
	})
}

// SetSelfCommission sets the "self_commission" field.
func (u *AchievementUserUpsertBulk) SetSelfCommission(v decimal.Decimal) *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.SetSelfCommission(v)
	})
}

// UpdateSelfCommission sets the "self_commission" field to the value that was provided on create.
func (u *AchievementUserUpsertBulk) UpdateSelfCommission() *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.UpdateSelfCommission()
	})
}

// ClearSelfCommission clears the value of the "self_commission" field.
func (u *AchievementUserUpsertBulk) ClearSelfCommission() *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.ClearSelfCommission()
	})
}

// SetDirectConsumeAmount sets the "direct_consume_amount" field.
func (u *AchievementUserUpsertBulk) SetDirectConsumeAmount(v decimal.Decimal) *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.SetDirectConsumeAmount(v)
	})
}

// UpdateDirectConsumeAmount sets the "direct_consume_amount" field to the value that was provided on create.
func (u *AchievementUserUpsertBulk) UpdateDirectConsumeAmount() *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.UpdateDirectConsumeAmount()
	})
}

// ClearDirectConsumeAmount clears the value of the "direct_consume_amount" field.
func (u *AchievementUserUpsertBulk) ClearDirectConsumeAmount() *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.ClearDirectConsumeAmount()
	})
}

// SetInviteeConsumeAmount sets the "invitee_consume_amount" field.
func (u *AchievementUserUpsertBulk) SetInviteeConsumeAmount(v decimal.Decimal) *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.SetInviteeConsumeAmount(v)
	})
}

// UpdateInviteeConsumeAmount sets the "invitee_consume_amount" field to the value that was provided on create.
func (u *AchievementUserUpsertBulk) UpdateInviteeConsumeAmount() *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.UpdateInviteeConsumeAmount()
	})
}

// ClearInviteeConsumeAmount clears the value of the "invitee_consume_amount" field.
func (u *AchievementUserUpsertBulk) ClearInviteeConsumeAmount() *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.ClearInviteeConsumeAmount()
	})
}

// SetDirectInvitees sets the "direct_invitees" field.
func (u *AchievementUserUpsertBulk) SetDirectInvitees(v uint32) *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.SetDirectInvitees(v)
	})
}

// AddDirectInvitees adds v to the "direct_invitees" field.
func (u *AchievementUserUpsertBulk) AddDirectInvitees(v uint32) *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.AddDirectInvitees(v)
	})
}

// UpdateDirectInvitees sets the "direct_invitees" field to the value that was provided on create.
func (u *AchievementUserUpsertBulk) UpdateDirectInvitees() *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.UpdateDirectInvitees()
	})
}

// ClearDirectInvitees clears the value of the "direct_invitees" field.
func (u *AchievementUserUpsertBulk) ClearDirectInvitees() *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.ClearDirectInvitees()
	})
}

// SetIndirectInvitees sets the "indirect_invitees" field.
func (u *AchievementUserUpsertBulk) SetIndirectInvitees(v uint32) *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.SetIndirectInvitees(v)
	})
}

// AddIndirectInvitees adds v to the "indirect_invitees" field.
func (u *AchievementUserUpsertBulk) AddIndirectInvitees(v uint32) *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.AddIndirectInvitees(v)
	})
}

// UpdateIndirectInvitees sets the "indirect_invitees" field to the value that was provided on create.
func (u *AchievementUserUpsertBulk) UpdateIndirectInvitees() *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.UpdateIndirectInvitees()
	})
}

// ClearIndirectInvitees clears the value of the "indirect_invitees" field.
func (u *AchievementUserUpsertBulk) ClearIndirectInvitees() *AchievementUserUpsertBulk {
	return u.Update(func(s *AchievementUserUpsert) {
		s.ClearIndirectInvitees()
	})
}

// Exec executes the query.
func (u *AchievementUserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the AchievementUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AchievementUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AchievementUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

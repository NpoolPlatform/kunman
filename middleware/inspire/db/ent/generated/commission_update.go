// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/commission"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// CommissionUpdate is the builder for updating Commission entities.
type CommissionUpdate struct {
	config
	hooks     []Hook
	mutation  *CommissionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CommissionUpdate builder.
func (cu *CommissionUpdate) Where(ps ...predicate.Commission) *CommissionUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CommissionUpdate) SetCreatedAt(u uint32) *CommissionUpdate {
	cu.mutation.ResetCreatedAt()
	cu.mutation.SetCreatedAt(u)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *CommissionUpdate) SetNillableCreatedAt(u *uint32) *CommissionUpdate {
	if u != nil {
		cu.SetCreatedAt(*u)
	}
	return cu
}

// AddCreatedAt adds u to the "created_at" field.
func (cu *CommissionUpdate) AddCreatedAt(u int32) *CommissionUpdate {
	cu.mutation.AddCreatedAt(u)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CommissionUpdate) SetUpdatedAt(u uint32) *CommissionUpdate {
	cu.mutation.ResetUpdatedAt()
	cu.mutation.SetUpdatedAt(u)
	return cu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cu *CommissionUpdate) AddUpdatedAt(u int32) *CommissionUpdate {
	cu.mutation.AddUpdatedAt(u)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CommissionUpdate) SetDeletedAt(u uint32) *CommissionUpdate {
	cu.mutation.ResetDeletedAt()
	cu.mutation.SetDeletedAt(u)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CommissionUpdate) SetNillableDeletedAt(u *uint32) *CommissionUpdate {
	if u != nil {
		cu.SetDeletedAt(*u)
	}
	return cu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cu *CommissionUpdate) AddDeletedAt(u int32) *CommissionUpdate {
	cu.mutation.AddDeletedAt(u)
	return cu
}

// SetEntID sets the "ent_id" field.
func (cu *CommissionUpdate) SetEntID(u uuid.UUID) *CommissionUpdate {
	cu.mutation.SetEntID(u)
	return cu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cu *CommissionUpdate) SetNillableEntID(u *uuid.UUID) *CommissionUpdate {
	if u != nil {
		cu.SetEntID(*u)
	}
	return cu
}

// SetAppID sets the "app_id" field.
func (cu *CommissionUpdate) SetAppID(u uuid.UUID) *CommissionUpdate {
	cu.mutation.SetAppID(u)
	return cu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (cu *CommissionUpdate) SetNillableAppID(u *uuid.UUID) *CommissionUpdate {
	if u != nil {
		cu.SetAppID(*u)
	}
	return cu
}

// ClearAppID clears the value of the "app_id" field.
func (cu *CommissionUpdate) ClearAppID() *CommissionUpdate {
	cu.mutation.ClearAppID()
	return cu
}

// SetUserID sets the "user_id" field.
func (cu *CommissionUpdate) SetUserID(u uuid.UUID) *CommissionUpdate {
	cu.mutation.SetUserID(u)
	return cu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cu *CommissionUpdate) SetNillableUserID(u *uuid.UUID) *CommissionUpdate {
	if u != nil {
		cu.SetUserID(*u)
	}
	return cu
}

// ClearUserID clears the value of the "user_id" field.
func (cu *CommissionUpdate) ClearUserID() *CommissionUpdate {
	cu.mutation.ClearUserID()
	return cu
}

// SetGoodID sets the "good_id" field.
func (cu *CommissionUpdate) SetGoodID(u uuid.UUID) *CommissionUpdate {
	cu.mutation.SetGoodID(u)
	return cu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (cu *CommissionUpdate) SetNillableGoodID(u *uuid.UUID) *CommissionUpdate {
	if u != nil {
		cu.SetGoodID(*u)
	}
	return cu
}

// ClearGoodID clears the value of the "good_id" field.
func (cu *CommissionUpdate) ClearGoodID() *CommissionUpdate {
	cu.mutation.ClearGoodID()
	return cu
}

// SetAppGoodID sets the "app_good_id" field.
func (cu *CommissionUpdate) SetAppGoodID(u uuid.UUID) *CommissionUpdate {
	cu.mutation.SetAppGoodID(u)
	return cu
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (cu *CommissionUpdate) SetNillableAppGoodID(u *uuid.UUID) *CommissionUpdate {
	if u != nil {
		cu.SetAppGoodID(*u)
	}
	return cu
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (cu *CommissionUpdate) ClearAppGoodID() *CommissionUpdate {
	cu.mutation.ClearAppGoodID()
	return cu
}

// SetAmountOrPercent sets the "amount_or_percent" field.
func (cu *CommissionUpdate) SetAmountOrPercent(d decimal.Decimal) *CommissionUpdate {
	cu.mutation.SetAmountOrPercent(d)
	return cu
}

// SetNillableAmountOrPercent sets the "amount_or_percent" field if the given value is not nil.
func (cu *CommissionUpdate) SetNillableAmountOrPercent(d *decimal.Decimal) *CommissionUpdate {
	if d != nil {
		cu.SetAmountOrPercent(*d)
	}
	return cu
}

// ClearAmountOrPercent clears the value of the "amount_or_percent" field.
func (cu *CommissionUpdate) ClearAmountOrPercent() *CommissionUpdate {
	cu.mutation.ClearAmountOrPercent()
	return cu
}

// SetStartAt sets the "start_at" field.
func (cu *CommissionUpdate) SetStartAt(u uint32) *CommissionUpdate {
	cu.mutation.ResetStartAt()
	cu.mutation.SetStartAt(u)
	return cu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (cu *CommissionUpdate) SetNillableStartAt(u *uint32) *CommissionUpdate {
	if u != nil {
		cu.SetStartAt(*u)
	}
	return cu
}

// AddStartAt adds u to the "start_at" field.
func (cu *CommissionUpdate) AddStartAt(u int32) *CommissionUpdate {
	cu.mutation.AddStartAt(u)
	return cu
}

// ClearStartAt clears the value of the "start_at" field.
func (cu *CommissionUpdate) ClearStartAt() *CommissionUpdate {
	cu.mutation.ClearStartAt()
	return cu
}

// SetEndAt sets the "end_at" field.
func (cu *CommissionUpdate) SetEndAt(u uint32) *CommissionUpdate {
	cu.mutation.ResetEndAt()
	cu.mutation.SetEndAt(u)
	return cu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (cu *CommissionUpdate) SetNillableEndAt(u *uint32) *CommissionUpdate {
	if u != nil {
		cu.SetEndAt(*u)
	}
	return cu
}

// AddEndAt adds u to the "end_at" field.
func (cu *CommissionUpdate) AddEndAt(u int32) *CommissionUpdate {
	cu.mutation.AddEndAt(u)
	return cu
}

// ClearEndAt clears the value of the "end_at" field.
func (cu *CommissionUpdate) ClearEndAt() *CommissionUpdate {
	cu.mutation.ClearEndAt()
	return cu
}

// SetSettleType sets the "settle_type" field.
func (cu *CommissionUpdate) SetSettleType(s string) *CommissionUpdate {
	cu.mutation.SetSettleType(s)
	return cu
}

// SetNillableSettleType sets the "settle_type" field if the given value is not nil.
func (cu *CommissionUpdate) SetNillableSettleType(s *string) *CommissionUpdate {
	if s != nil {
		cu.SetSettleType(*s)
	}
	return cu
}

// ClearSettleType clears the value of the "settle_type" field.
func (cu *CommissionUpdate) ClearSettleType() *CommissionUpdate {
	cu.mutation.ClearSettleType()
	return cu
}

// SetSettleMode sets the "settle_mode" field.
func (cu *CommissionUpdate) SetSettleMode(s string) *CommissionUpdate {
	cu.mutation.SetSettleMode(s)
	return cu
}

// SetNillableSettleMode sets the "settle_mode" field if the given value is not nil.
func (cu *CommissionUpdate) SetNillableSettleMode(s *string) *CommissionUpdate {
	if s != nil {
		cu.SetSettleMode(*s)
	}
	return cu
}

// ClearSettleMode clears the value of the "settle_mode" field.
func (cu *CommissionUpdate) ClearSettleMode() *CommissionUpdate {
	cu.mutation.ClearSettleMode()
	return cu
}

// SetSettleInterval sets the "settle_interval" field.
func (cu *CommissionUpdate) SetSettleInterval(s string) *CommissionUpdate {
	cu.mutation.SetSettleInterval(s)
	return cu
}

// SetNillableSettleInterval sets the "settle_interval" field if the given value is not nil.
func (cu *CommissionUpdate) SetNillableSettleInterval(s *string) *CommissionUpdate {
	if s != nil {
		cu.SetSettleInterval(*s)
	}
	return cu
}

// ClearSettleInterval clears the value of the "settle_interval" field.
func (cu *CommissionUpdate) ClearSettleInterval() *CommissionUpdate {
	cu.mutation.ClearSettleInterval()
	return cu
}

// SetSettleAmountType sets the "settle_amount_type" field.
func (cu *CommissionUpdate) SetSettleAmountType(s string) *CommissionUpdate {
	cu.mutation.SetSettleAmountType(s)
	return cu
}

// SetNillableSettleAmountType sets the "settle_amount_type" field if the given value is not nil.
func (cu *CommissionUpdate) SetNillableSettleAmountType(s *string) *CommissionUpdate {
	if s != nil {
		cu.SetSettleAmountType(*s)
	}
	return cu
}

// ClearSettleAmountType clears the value of the "settle_amount_type" field.
func (cu *CommissionUpdate) ClearSettleAmountType() *CommissionUpdate {
	cu.mutation.ClearSettleAmountType()
	return cu
}

// SetThreshold sets the "threshold" field.
func (cu *CommissionUpdate) SetThreshold(d decimal.Decimal) *CommissionUpdate {
	cu.mutation.SetThreshold(d)
	return cu
}

// SetNillableThreshold sets the "threshold" field if the given value is not nil.
func (cu *CommissionUpdate) SetNillableThreshold(d *decimal.Decimal) *CommissionUpdate {
	if d != nil {
		cu.SetThreshold(*d)
	}
	return cu
}

// ClearThreshold clears the value of the "threshold" field.
func (cu *CommissionUpdate) ClearThreshold() *CommissionUpdate {
	cu.mutation.ClearThreshold()
	return cu
}

// SetOrderLimit sets the "order_limit" field.
func (cu *CommissionUpdate) SetOrderLimit(u uint32) *CommissionUpdate {
	cu.mutation.ResetOrderLimit()
	cu.mutation.SetOrderLimit(u)
	return cu
}

// SetNillableOrderLimit sets the "order_limit" field if the given value is not nil.
func (cu *CommissionUpdate) SetNillableOrderLimit(u *uint32) *CommissionUpdate {
	if u != nil {
		cu.SetOrderLimit(*u)
	}
	return cu
}

// AddOrderLimit adds u to the "order_limit" field.
func (cu *CommissionUpdate) AddOrderLimit(u int32) *CommissionUpdate {
	cu.mutation.AddOrderLimit(u)
	return cu
}

// ClearOrderLimit clears the value of the "order_limit" field.
func (cu *CommissionUpdate) ClearOrderLimit() *CommissionUpdate {
	cu.mutation.ClearOrderLimit()
	return cu
}

// Mutation returns the CommissionMutation object of the builder.
func (cu *CommissionUpdate) Mutation() *CommissionMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommissionUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommissionUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommissionUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommissionUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CommissionUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := commission.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CommissionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CommissionUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CommissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(commission.Table, commission.Columns, sqlgraph.NewFieldSpec(commission.FieldID, field.TypeUint32))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(commission.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(commission.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(commission.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(commission.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(commission.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(commission.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.EntID(); ok {
		_spec.SetField(commission.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := cu.mutation.AppID(); ok {
		_spec.SetField(commission.FieldAppID, field.TypeUUID, value)
	}
	if cu.mutation.AppIDCleared() {
		_spec.ClearField(commission.FieldAppID, field.TypeUUID)
	}
	if value, ok := cu.mutation.UserID(); ok {
		_spec.SetField(commission.FieldUserID, field.TypeUUID, value)
	}
	if cu.mutation.UserIDCleared() {
		_spec.ClearField(commission.FieldUserID, field.TypeUUID)
	}
	if value, ok := cu.mutation.GoodID(); ok {
		_spec.SetField(commission.FieldGoodID, field.TypeUUID, value)
	}
	if cu.mutation.GoodIDCleared() {
		_spec.ClearField(commission.FieldGoodID, field.TypeUUID)
	}
	if value, ok := cu.mutation.AppGoodID(); ok {
		_spec.SetField(commission.FieldAppGoodID, field.TypeUUID, value)
	}
	if cu.mutation.AppGoodIDCleared() {
		_spec.ClearField(commission.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := cu.mutation.AmountOrPercent(); ok {
		_spec.SetField(commission.FieldAmountOrPercent, field.TypeOther, value)
	}
	if cu.mutation.AmountOrPercentCleared() {
		_spec.ClearField(commission.FieldAmountOrPercent, field.TypeOther)
	}
	if value, ok := cu.mutation.StartAt(); ok {
		_spec.SetField(commission.FieldStartAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedStartAt(); ok {
		_spec.AddField(commission.FieldStartAt, field.TypeUint32, value)
	}
	if cu.mutation.StartAtCleared() {
		_spec.ClearField(commission.FieldStartAt, field.TypeUint32)
	}
	if value, ok := cu.mutation.EndAt(); ok {
		_spec.SetField(commission.FieldEndAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedEndAt(); ok {
		_spec.AddField(commission.FieldEndAt, field.TypeUint32, value)
	}
	if cu.mutation.EndAtCleared() {
		_spec.ClearField(commission.FieldEndAt, field.TypeUint32)
	}
	if value, ok := cu.mutation.SettleType(); ok {
		_spec.SetField(commission.FieldSettleType, field.TypeString, value)
	}
	if cu.mutation.SettleTypeCleared() {
		_spec.ClearField(commission.FieldSettleType, field.TypeString)
	}
	if value, ok := cu.mutation.SettleMode(); ok {
		_spec.SetField(commission.FieldSettleMode, field.TypeString, value)
	}
	if cu.mutation.SettleModeCleared() {
		_spec.ClearField(commission.FieldSettleMode, field.TypeString)
	}
	if value, ok := cu.mutation.SettleInterval(); ok {
		_spec.SetField(commission.FieldSettleInterval, field.TypeString, value)
	}
	if cu.mutation.SettleIntervalCleared() {
		_spec.ClearField(commission.FieldSettleInterval, field.TypeString)
	}
	if value, ok := cu.mutation.SettleAmountType(); ok {
		_spec.SetField(commission.FieldSettleAmountType, field.TypeString, value)
	}
	if cu.mutation.SettleAmountTypeCleared() {
		_spec.ClearField(commission.FieldSettleAmountType, field.TypeString)
	}
	if value, ok := cu.mutation.Threshold(); ok {
		_spec.SetField(commission.FieldThreshold, field.TypeOther, value)
	}
	if cu.mutation.ThresholdCleared() {
		_spec.ClearField(commission.FieldThreshold, field.TypeOther)
	}
	if value, ok := cu.mutation.OrderLimit(); ok {
		_spec.SetField(commission.FieldOrderLimit, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedOrderLimit(); ok {
		_spec.AddField(commission.FieldOrderLimit, field.TypeUint32, value)
	}
	if cu.mutation.OrderLimitCleared() {
		_spec.ClearField(commission.FieldOrderLimit, field.TypeUint32)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CommissionUpdateOne is the builder for updating a single Commission entity.
type CommissionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CommissionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CommissionUpdateOne) SetCreatedAt(u uint32) *CommissionUpdateOne {
	cuo.mutation.ResetCreatedAt()
	cuo.mutation.SetCreatedAt(u)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *CommissionUpdateOne) SetNillableCreatedAt(u *uint32) *CommissionUpdateOne {
	if u != nil {
		cuo.SetCreatedAt(*u)
	}
	return cuo
}

// AddCreatedAt adds u to the "created_at" field.
func (cuo *CommissionUpdateOne) AddCreatedAt(u int32) *CommissionUpdateOne {
	cuo.mutation.AddCreatedAt(u)
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CommissionUpdateOne) SetUpdatedAt(u uint32) *CommissionUpdateOne {
	cuo.mutation.ResetUpdatedAt()
	cuo.mutation.SetUpdatedAt(u)
	return cuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cuo *CommissionUpdateOne) AddUpdatedAt(u int32) *CommissionUpdateOne {
	cuo.mutation.AddUpdatedAt(u)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CommissionUpdateOne) SetDeletedAt(u uint32) *CommissionUpdateOne {
	cuo.mutation.ResetDeletedAt()
	cuo.mutation.SetDeletedAt(u)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CommissionUpdateOne) SetNillableDeletedAt(u *uint32) *CommissionUpdateOne {
	if u != nil {
		cuo.SetDeletedAt(*u)
	}
	return cuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cuo *CommissionUpdateOne) AddDeletedAt(u int32) *CommissionUpdateOne {
	cuo.mutation.AddDeletedAt(u)
	return cuo
}

// SetEntID sets the "ent_id" field.
func (cuo *CommissionUpdateOne) SetEntID(u uuid.UUID) *CommissionUpdateOne {
	cuo.mutation.SetEntID(u)
	return cuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cuo *CommissionUpdateOne) SetNillableEntID(u *uuid.UUID) *CommissionUpdateOne {
	if u != nil {
		cuo.SetEntID(*u)
	}
	return cuo
}

// SetAppID sets the "app_id" field.
func (cuo *CommissionUpdateOne) SetAppID(u uuid.UUID) *CommissionUpdateOne {
	cuo.mutation.SetAppID(u)
	return cuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (cuo *CommissionUpdateOne) SetNillableAppID(u *uuid.UUID) *CommissionUpdateOne {
	if u != nil {
		cuo.SetAppID(*u)
	}
	return cuo
}

// ClearAppID clears the value of the "app_id" field.
func (cuo *CommissionUpdateOne) ClearAppID() *CommissionUpdateOne {
	cuo.mutation.ClearAppID()
	return cuo
}

// SetUserID sets the "user_id" field.
func (cuo *CommissionUpdateOne) SetUserID(u uuid.UUID) *CommissionUpdateOne {
	cuo.mutation.SetUserID(u)
	return cuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cuo *CommissionUpdateOne) SetNillableUserID(u *uuid.UUID) *CommissionUpdateOne {
	if u != nil {
		cuo.SetUserID(*u)
	}
	return cuo
}

// ClearUserID clears the value of the "user_id" field.
func (cuo *CommissionUpdateOne) ClearUserID() *CommissionUpdateOne {
	cuo.mutation.ClearUserID()
	return cuo
}

// SetGoodID sets the "good_id" field.
func (cuo *CommissionUpdateOne) SetGoodID(u uuid.UUID) *CommissionUpdateOne {
	cuo.mutation.SetGoodID(u)
	return cuo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (cuo *CommissionUpdateOne) SetNillableGoodID(u *uuid.UUID) *CommissionUpdateOne {
	if u != nil {
		cuo.SetGoodID(*u)
	}
	return cuo
}

// ClearGoodID clears the value of the "good_id" field.
func (cuo *CommissionUpdateOne) ClearGoodID() *CommissionUpdateOne {
	cuo.mutation.ClearGoodID()
	return cuo
}

// SetAppGoodID sets the "app_good_id" field.
func (cuo *CommissionUpdateOne) SetAppGoodID(u uuid.UUID) *CommissionUpdateOne {
	cuo.mutation.SetAppGoodID(u)
	return cuo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (cuo *CommissionUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *CommissionUpdateOne {
	if u != nil {
		cuo.SetAppGoodID(*u)
	}
	return cuo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (cuo *CommissionUpdateOne) ClearAppGoodID() *CommissionUpdateOne {
	cuo.mutation.ClearAppGoodID()
	return cuo
}

// SetAmountOrPercent sets the "amount_or_percent" field.
func (cuo *CommissionUpdateOne) SetAmountOrPercent(d decimal.Decimal) *CommissionUpdateOne {
	cuo.mutation.SetAmountOrPercent(d)
	return cuo
}

// SetNillableAmountOrPercent sets the "amount_or_percent" field if the given value is not nil.
func (cuo *CommissionUpdateOne) SetNillableAmountOrPercent(d *decimal.Decimal) *CommissionUpdateOne {
	if d != nil {
		cuo.SetAmountOrPercent(*d)
	}
	return cuo
}

// ClearAmountOrPercent clears the value of the "amount_or_percent" field.
func (cuo *CommissionUpdateOne) ClearAmountOrPercent() *CommissionUpdateOne {
	cuo.mutation.ClearAmountOrPercent()
	return cuo
}

// SetStartAt sets the "start_at" field.
func (cuo *CommissionUpdateOne) SetStartAt(u uint32) *CommissionUpdateOne {
	cuo.mutation.ResetStartAt()
	cuo.mutation.SetStartAt(u)
	return cuo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (cuo *CommissionUpdateOne) SetNillableStartAt(u *uint32) *CommissionUpdateOne {
	if u != nil {
		cuo.SetStartAt(*u)
	}
	return cuo
}

// AddStartAt adds u to the "start_at" field.
func (cuo *CommissionUpdateOne) AddStartAt(u int32) *CommissionUpdateOne {
	cuo.mutation.AddStartAt(u)
	return cuo
}

// ClearStartAt clears the value of the "start_at" field.
func (cuo *CommissionUpdateOne) ClearStartAt() *CommissionUpdateOne {
	cuo.mutation.ClearStartAt()
	return cuo
}

// SetEndAt sets the "end_at" field.
func (cuo *CommissionUpdateOne) SetEndAt(u uint32) *CommissionUpdateOne {
	cuo.mutation.ResetEndAt()
	cuo.mutation.SetEndAt(u)
	return cuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (cuo *CommissionUpdateOne) SetNillableEndAt(u *uint32) *CommissionUpdateOne {
	if u != nil {
		cuo.SetEndAt(*u)
	}
	return cuo
}

// AddEndAt adds u to the "end_at" field.
func (cuo *CommissionUpdateOne) AddEndAt(u int32) *CommissionUpdateOne {
	cuo.mutation.AddEndAt(u)
	return cuo
}

// ClearEndAt clears the value of the "end_at" field.
func (cuo *CommissionUpdateOne) ClearEndAt() *CommissionUpdateOne {
	cuo.mutation.ClearEndAt()
	return cuo
}

// SetSettleType sets the "settle_type" field.
func (cuo *CommissionUpdateOne) SetSettleType(s string) *CommissionUpdateOne {
	cuo.mutation.SetSettleType(s)
	return cuo
}

// SetNillableSettleType sets the "settle_type" field if the given value is not nil.
func (cuo *CommissionUpdateOne) SetNillableSettleType(s *string) *CommissionUpdateOne {
	if s != nil {
		cuo.SetSettleType(*s)
	}
	return cuo
}

// ClearSettleType clears the value of the "settle_type" field.
func (cuo *CommissionUpdateOne) ClearSettleType() *CommissionUpdateOne {
	cuo.mutation.ClearSettleType()
	return cuo
}

// SetSettleMode sets the "settle_mode" field.
func (cuo *CommissionUpdateOne) SetSettleMode(s string) *CommissionUpdateOne {
	cuo.mutation.SetSettleMode(s)
	return cuo
}

// SetNillableSettleMode sets the "settle_mode" field if the given value is not nil.
func (cuo *CommissionUpdateOne) SetNillableSettleMode(s *string) *CommissionUpdateOne {
	if s != nil {
		cuo.SetSettleMode(*s)
	}
	return cuo
}

// ClearSettleMode clears the value of the "settle_mode" field.
func (cuo *CommissionUpdateOne) ClearSettleMode() *CommissionUpdateOne {
	cuo.mutation.ClearSettleMode()
	return cuo
}

// SetSettleInterval sets the "settle_interval" field.
func (cuo *CommissionUpdateOne) SetSettleInterval(s string) *CommissionUpdateOne {
	cuo.mutation.SetSettleInterval(s)
	return cuo
}

// SetNillableSettleInterval sets the "settle_interval" field if the given value is not nil.
func (cuo *CommissionUpdateOne) SetNillableSettleInterval(s *string) *CommissionUpdateOne {
	if s != nil {
		cuo.SetSettleInterval(*s)
	}
	return cuo
}

// ClearSettleInterval clears the value of the "settle_interval" field.
func (cuo *CommissionUpdateOne) ClearSettleInterval() *CommissionUpdateOne {
	cuo.mutation.ClearSettleInterval()
	return cuo
}

// SetSettleAmountType sets the "settle_amount_type" field.
func (cuo *CommissionUpdateOne) SetSettleAmountType(s string) *CommissionUpdateOne {
	cuo.mutation.SetSettleAmountType(s)
	return cuo
}

// SetNillableSettleAmountType sets the "settle_amount_type" field if the given value is not nil.
func (cuo *CommissionUpdateOne) SetNillableSettleAmountType(s *string) *CommissionUpdateOne {
	if s != nil {
		cuo.SetSettleAmountType(*s)
	}
	return cuo
}

// ClearSettleAmountType clears the value of the "settle_amount_type" field.
func (cuo *CommissionUpdateOne) ClearSettleAmountType() *CommissionUpdateOne {
	cuo.mutation.ClearSettleAmountType()
	return cuo
}

// SetThreshold sets the "threshold" field.
func (cuo *CommissionUpdateOne) SetThreshold(d decimal.Decimal) *CommissionUpdateOne {
	cuo.mutation.SetThreshold(d)
	return cuo
}

// SetNillableThreshold sets the "threshold" field if the given value is not nil.
func (cuo *CommissionUpdateOne) SetNillableThreshold(d *decimal.Decimal) *CommissionUpdateOne {
	if d != nil {
		cuo.SetThreshold(*d)
	}
	return cuo
}

// ClearThreshold clears the value of the "threshold" field.
func (cuo *CommissionUpdateOne) ClearThreshold() *CommissionUpdateOne {
	cuo.mutation.ClearThreshold()
	return cuo
}

// SetOrderLimit sets the "order_limit" field.
func (cuo *CommissionUpdateOne) SetOrderLimit(u uint32) *CommissionUpdateOne {
	cuo.mutation.ResetOrderLimit()
	cuo.mutation.SetOrderLimit(u)
	return cuo
}

// SetNillableOrderLimit sets the "order_limit" field if the given value is not nil.
func (cuo *CommissionUpdateOne) SetNillableOrderLimit(u *uint32) *CommissionUpdateOne {
	if u != nil {
		cuo.SetOrderLimit(*u)
	}
	return cuo
}

// AddOrderLimit adds u to the "order_limit" field.
func (cuo *CommissionUpdateOne) AddOrderLimit(u int32) *CommissionUpdateOne {
	cuo.mutation.AddOrderLimit(u)
	return cuo
}

// ClearOrderLimit clears the value of the "order_limit" field.
func (cuo *CommissionUpdateOne) ClearOrderLimit() *CommissionUpdateOne {
	cuo.mutation.ClearOrderLimit()
	return cuo
}

// Mutation returns the CommissionMutation object of the builder.
func (cuo *CommissionUpdateOne) Mutation() *CommissionMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CommissionUpdate builder.
func (cuo *CommissionUpdateOne) Where(ps ...predicate.Commission) *CommissionUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CommissionUpdateOne) Select(field string, fields ...string) *CommissionUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Commission entity.
func (cuo *CommissionUpdateOne) Save(ctx context.Context) (*Commission, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommissionUpdateOne) SaveX(ctx context.Context) *Commission {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommissionUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommissionUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CommissionUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := commission.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CommissionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CommissionUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CommissionUpdateOne) sqlSave(ctx context.Context) (_node *Commission, err error) {
	_spec := sqlgraph.NewUpdateSpec(commission.Table, commission.Columns, sqlgraph.NewFieldSpec(commission.FieldID, field.TypeUint32))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Commission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, commission.FieldID)
		for _, f := range fields {
			if !commission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != commission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(commission.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(commission.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(commission.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(commission.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(commission.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(commission.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.EntID(); ok {
		_spec.SetField(commission.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := cuo.mutation.AppID(); ok {
		_spec.SetField(commission.FieldAppID, field.TypeUUID, value)
	}
	if cuo.mutation.AppIDCleared() {
		_spec.ClearField(commission.FieldAppID, field.TypeUUID)
	}
	if value, ok := cuo.mutation.UserID(); ok {
		_spec.SetField(commission.FieldUserID, field.TypeUUID, value)
	}
	if cuo.mutation.UserIDCleared() {
		_spec.ClearField(commission.FieldUserID, field.TypeUUID)
	}
	if value, ok := cuo.mutation.GoodID(); ok {
		_spec.SetField(commission.FieldGoodID, field.TypeUUID, value)
	}
	if cuo.mutation.GoodIDCleared() {
		_spec.ClearField(commission.FieldGoodID, field.TypeUUID)
	}
	if value, ok := cuo.mutation.AppGoodID(); ok {
		_spec.SetField(commission.FieldAppGoodID, field.TypeUUID, value)
	}
	if cuo.mutation.AppGoodIDCleared() {
		_spec.ClearField(commission.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := cuo.mutation.AmountOrPercent(); ok {
		_spec.SetField(commission.FieldAmountOrPercent, field.TypeOther, value)
	}
	if cuo.mutation.AmountOrPercentCleared() {
		_spec.ClearField(commission.FieldAmountOrPercent, field.TypeOther)
	}
	if value, ok := cuo.mutation.StartAt(); ok {
		_spec.SetField(commission.FieldStartAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedStartAt(); ok {
		_spec.AddField(commission.FieldStartAt, field.TypeUint32, value)
	}
	if cuo.mutation.StartAtCleared() {
		_spec.ClearField(commission.FieldStartAt, field.TypeUint32)
	}
	if value, ok := cuo.mutation.EndAt(); ok {
		_spec.SetField(commission.FieldEndAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedEndAt(); ok {
		_spec.AddField(commission.FieldEndAt, field.TypeUint32, value)
	}
	if cuo.mutation.EndAtCleared() {
		_spec.ClearField(commission.FieldEndAt, field.TypeUint32)
	}
	if value, ok := cuo.mutation.SettleType(); ok {
		_spec.SetField(commission.FieldSettleType, field.TypeString, value)
	}
	if cuo.mutation.SettleTypeCleared() {
		_spec.ClearField(commission.FieldSettleType, field.TypeString)
	}
	if value, ok := cuo.mutation.SettleMode(); ok {
		_spec.SetField(commission.FieldSettleMode, field.TypeString, value)
	}
	if cuo.mutation.SettleModeCleared() {
		_spec.ClearField(commission.FieldSettleMode, field.TypeString)
	}
	if value, ok := cuo.mutation.SettleInterval(); ok {
		_spec.SetField(commission.FieldSettleInterval, field.TypeString, value)
	}
	if cuo.mutation.SettleIntervalCleared() {
		_spec.ClearField(commission.FieldSettleInterval, field.TypeString)
	}
	if value, ok := cuo.mutation.SettleAmountType(); ok {
		_spec.SetField(commission.FieldSettleAmountType, field.TypeString, value)
	}
	if cuo.mutation.SettleAmountTypeCleared() {
		_spec.ClearField(commission.FieldSettleAmountType, field.TypeString)
	}
	if value, ok := cuo.mutation.Threshold(); ok {
		_spec.SetField(commission.FieldThreshold, field.TypeOther, value)
	}
	if cuo.mutation.ThresholdCleared() {
		_spec.ClearField(commission.FieldThreshold, field.TypeOther)
	}
	if value, ok := cuo.mutation.OrderLimit(); ok {
		_spec.SetField(commission.FieldOrderLimit, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedOrderLimit(); ok {
		_spec.AddField(commission.FieldOrderLimit, field.TypeUint32, value)
	}
	if cuo.mutation.OrderLimitCleared() {
		_spec.ClearField(commission.FieldOrderLimit, field.TypeUint32)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Commission{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}

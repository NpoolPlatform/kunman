// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/eventcoin"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// EventCoinCreate is the builder for creating a EventCoin entity.
type EventCoinCreate struct {
	config
	mutation *EventCoinMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ecc *EventCoinCreate) SetCreatedAt(u uint32) *EventCoinCreate {
	ecc.mutation.SetCreatedAt(u)
	return ecc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ecc *EventCoinCreate) SetNillableCreatedAt(u *uint32) *EventCoinCreate {
	if u != nil {
		ecc.SetCreatedAt(*u)
	}
	return ecc
}

// SetUpdatedAt sets the "updated_at" field.
func (ecc *EventCoinCreate) SetUpdatedAt(u uint32) *EventCoinCreate {
	ecc.mutation.SetUpdatedAt(u)
	return ecc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ecc *EventCoinCreate) SetNillableUpdatedAt(u *uint32) *EventCoinCreate {
	if u != nil {
		ecc.SetUpdatedAt(*u)
	}
	return ecc
}

// SetDeletedAt sets the "deleted_at" field.
func (ecc *EventCoinCreate) SetDeletedAt(u uint32) *EventCoinCreate {
	ecc.mutation.SetDeletedAt(u)
	return ecc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ecc *EventCoinCreate) SetNillableDeletedAt(u *uint32) *EventCoinCreate {
	if u != nil {
		ecc.SetDeletedAt(*u)
	}
	return ecc
}

// SetEntID sets the "ent_id" field.
func (ecc *EventCoinCreate) SetEntID(u uuid.UUID) *EventCoinCreate {
	ecc.mutation.SetEntID(u)
	return ecc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ecc *EventCoinCreate) SetNillableEntID(u *uuid.UUID) *EventCoinCreate {
	if u != nil {
		ecc.SetEntID(*u)
	}
	return ecc
}

// SetAppID sets the "app_id" field.
func (ecc *EventCoinCreate) SetAppID(u uuid.UUID) *EventCoinCreate {
	ecc.mutation.SetAppID(u)
	return ecc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ecc *EventCoinCreate) SetNillableAppID(u *uuid.UUID) *EventCoinCreate {
	if u != nil {
		ecc.SetAppID(*u)
	}
	return ecc
}

// SetEventID sets the "event_id" field.
func (ecc *EventCoinCreate) SetEventID(u uuid.UUID) *EventCoinCreate {
	ecc.mutation.SetEventID(u)
	return ecc
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (ecc *EventCoinCreate) SetNillableEventID(u *uuid.UUID) *EventCoinCreate {
	if u != nil {
		ecc.SetEventID(*u)
	}
	return ecc
}

// SetCoinConfigID sets the "coin_config_id" field.
func (ecc *EventCoinCreate) SetCoinConfigID(u uuid.UUID) *EventCoinCreate {
	ecc.mutation.SetCoinConfigID(u)
	return ecc
}

// SetNillableCoinConfigID sets the "coin_config_id" field if the given value is not nil.
func (ecc *EventCoinCreate) SetNillableCoinConfigID(u *uuid.UUID) *EventCoinCreate {
	if u != nil {
		ecc.SetCoinConfigID(*u)
	}
	return ecc
}

// SetCoinValue sets the "coin_value" field.
func (ecc *EventCoinCreate) SetCoinValue(d decimal.Decimal) *EventCoinCreate {
	ecc.mutation.SetCoinValue(d)
	return ecc
}

// SetNillableCoinValue sets the "coin_value" field if the given value is not nil.
func (ecc *EventCoinCreate) SetNillableCoinValue(d *decimal.Decimal) *EventCoinCreate {
	if d != nil {
		ecc.SetCoinValue(*d)
	}
	return ecc
}

// SetCoinPerUsd sets the "coin_per_usd" field.
func (ecc *EventCoinCreate) SetCoinPerUsd(d decimal.Decimal) *EventCoinCreate {
	ecc.mutation.SetCoinPerUsd(d)
	return ecc
}

// SetNillableCoinPerUsd sets the "coin_per_usd" field if the given value is not nil.
func (ecc *EventCoinCreate) SetNillableCoinPerUsd(d *decimal.Decimal) *EventCoinCreate {
	if d != nil {
		ecc.SetCoinPerUsd(*d)
	}
	return ecc
}

// SetID sets the "id" field.
func (ecc *EventCoinCreate) SetID(u uint32) *EventCoinCreate {
	ecc.mutation.SetID(u)
	return ecc
}

// Mutation returns the EventCoinMutation object of the builder.
func (ecc *EventCoinCreate) Mutation() *EventCoinMutation {
	return ecc.mutation
}

// Save creates the EventCoin in the database.
func (ecc *EventCoinCreate) Save(ctx context.Context) (*EventCoin, error) {
	ecc.defaults()
	return withHooks(ctx, ecc.sqlSave, ecc.mutation, ecc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ecc *EventCoinCreate) SaveX(ctx context.Context) *EventCoin {
	v, err := ecc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecc *EventCoinCreate) Exec(ctx context.Context) error {
	_, err := ecc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecc *EventCoinCreate) ExecX(ctx context.Context) {
	if err := ecc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ecc *EventCoinCreate) defaults() {
	if _, ok := ecc.mutation.CreatedAt(); !ok {
		v := eventcoin.DefaultCreatedAt()
		ecc.mutation.SetCreatedAt(v)
	}
	if _, ok := ecc.mutation.UpdatedAt(); !ok {
		v := eventcoin.DefaultUpdatedAt()
		ecc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ecc.mutation.DeletedAt(); !ok {
		v := eventcoin.DefaultDeletedAt()
		ecc.mutation.SetDeletedAt(v)
	}
	if _, ok := ecc.mutation.EntID(); !ok {
		v := eventcoin.DefaultEntID()
		ecc.mutation.SetEntID(v)
	}
	if _, ok := ecc.mutation.AppID(); !ok {
		v := eventcoin.DefaultAppID()
		ecc.mutation.SetAppID(v)
	}
	if _, ok := ecc.mutation.EventID(); !ok {
		v := eventcoin.DefaultEventID()
		ecc.mutation.SetEventID(v)
	}
	if _, ok := ecc.mutation.CoinConfigID(); !ok {
		v := eventcoin.DefaultCoinConfigID()
		ecc.mutation.SetCoinConfigID(v)
	}
	if _, ok := ecc.mutation.CoinValue(); !ok {
		v := eventcoin.DefaultCoinValue
		ecc.mutation.SetCoinValue(v)
	}
	if _, ok := ecc.mutation.CoinPerUsd(); !ok {
		v := eventcoin.DefaultCoinPerUsd
		ecc.mutation.SetCoinPerUsd(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecc *EventCoinCreate) check() error {
	if _, ok := ecc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "EventCoin.created_at"`)}
	}
	if _, ok := ecc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "EventCoin.updated_at"`)}
	}
	if _, ok := ecc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "EventCoin.deleted_at"`)}
	}
	if _, ok := ecc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "EventCoin.ent_id"`)}
	}
	return nil
}

func (ecc *EventCoinCreate) sqlSave(ctx context.Context) (*EventCoin, error) {
	if err := ecc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ecc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ecc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	ecc.mutation.id = &_node.ID
	ecc.mutation.done = true
	return _node, nil
}

func (ecc *EventCoinCreate) createSpec() (*EventCoin, *sqlgraph.CreateSpec) {
	var (
		_node = &EventCoin{config: ecc.config}
		_spec = sqlgraph.NewCreateSpec(eventcoin.Table, sqlgraph.NewFieldSpec(eventcoin.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = ecc.conflict
	if id, ok := ecc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ecc.mutation.CreatedAt(); ok {
		_spec.SetField(eventcoin.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := ecc.mutation.UpdatedAt(); ok {
		_spec.SetField(eventcoin.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := ecc.mutation.DeletedAt(); ok {
		_spec.SetField(eventcoin.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := ecc.mutation.EntID(); ok {
		_spec.SetField(eventcoin.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := ecc.mutation.AppID(); ok {
		_spec.SetField(eventcoin.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := ecc.mutation.EventID(); ok {
		_spec.SetField(eventcoin.FieldEventID, field.TypeUUID, value)
		_node.EventID = value
	}
	if value, ok := ecc.mutation.CoinConfigID(); ok {
		_spec.SetField(eventcoin.FieldCoinConfigID, field.TypeUUID, value)
		_node.CoinConfigID = value
	}
	if value, ok := ecc.mutation.CoinValue(); ok {
		_spec.SetField(eventcoin.FieldCoinValue, field.TypeOther, value)
		_node.CoinValue = value
	}
	if value, ok := ecc.mutation.CoinPerUsd(); ok {
		_spec.SetField(eventcoin.FieldCoinPerUsd, field.TypeOther, value)
		_node.CoinPerUsd = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EventCoin.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventCoinUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ecc *EventCoinCreate) OnConflict(opts ...sql.ConflictOption) *EventCoinUpsertOne {
	ecc.conflict = opts
	return &EventCoinUpsertOne{
		create: ecc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EventCoin.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ecc *EventCoinCreate) OnConflictColumns(columns ...string) *EventCoinUpsertOne {
	ecc.conflict = append(ecc.conflict, sql.ConflictColumns(columns...))
	return &EventCoinUpsertOne{
		create: ecc,
	}
}

type (
	// EventCoinUpsertOne is the builder for "upsert"-ing
	//  one EventCoin node.
	EventCoinUpsertOne struct {
		create *EventCoinCreate
	}

	// EventCoinUpsert is the "OnConflict" setter.
	EventCoinUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *EventCoinUpsert) SetCreatedAt(v uint32) *EventCoinUpsert {
	u.Set(eventcoin.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EventCoinUpsert) UpdateCreatedAt() *EventCoinUpsert {
	u.SetExcluded(eventcoin.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *EventCoinUpsert) AddCreatedAt(v uint32) *EventCoinUpsert {
	u.Add(eventcoin.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EventCoinUpsert) SetUpdatedAt(v uint32) *EventCoinUpsert {
	u.Set(eventcoin.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EventCoinUpsert) UpdateUpdatedAt() *EventCoinUpsert {
	u.SetExcluded(eventcoin.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *EventCoinUpsert) AddUpdatedAt(v uint32) *EventCoinUpsert {
	u.Add(eventcoin.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EventCoinUpsert) SetDeletedAt(v uint32) *EventCoinUpsert {
	u.Set(eventcoin.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EventCoinUpsert) UpdateDeletedAt() *EventCoinUpsert {
	u.SetExcluded(eventcoin.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *EventCoinUpsert) AddDeletedAt(v uint32) *EventCoinUpsert {
	u.Add(eventcoin.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *EventCoinUpsert) SetEntID(v uuid.UUID) *EventCoinUpsert {
	u.Set(eventcoin.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *EventCoinUpsert) UpdateEntID() *EventCoinUpsert {
	u.SetExcluded(eventcoin.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *EventCoinUpsert) SetAppID(v uuid.UUID) *EventCoinUpsert {
	u.Set(eventcoin.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *EventCoinUpsert) UpdateAppID() *EventCoinUpsert {
	u.SetExcluded(eventcoin.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *EventCoinUpsert) ClearAppID() *EventCoinUpsert {
	u.SetNull(eventcoin.FieldAppID)
	return u
}

// SetEventID sets the "event_id" field.
func (u *EventCoinUpsert) SetEventID(v uuid.UUID) *EventCoinUpsert {
	u.Set(eventcoin.FieldEventID, v)
	return u
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *EventCoinUpsert) UpdateEventID() *EventCoinUpsert {
	u.SetExcluded(eventcoin.FieldEventID)
	return u
}

// ClearEventID clears the value of the "event_id" field.
func (u *EventCoinUpsert) ClearEventID() *EventCoinUpsert {
	u.SetNull(eventcoin.FieldEventID)
	return u
}

// SetCoinConfigID sets the "coin_config_id" field.
func (u *EventCoinUpsert) SetCoinConfigID(v uuid.UUID) *EventCoinUpsert {
	u.Set(eventcoin.FieldCoinConfigID, v)
	return u
}

// UpdateCoinConfigID sets the "coin_config_id" field to the value that was provided on create.
func (u *EventCoinUpsert) UpdateCoinConfigID() *EventCoinUpsert {
	u.SetExcluded(eventcoin.FieldCoinConfigID)
	return u
}

// ClearCoinConfigID clears the value of the "coin_config_id" field.
func (u *EventCoinUpsert) ClearCoinConfigID() *EventCoinUpsert {
	u.SetNull(eventcoin.FieldCoinConfigID)
	return u
}

// SetCoinValue sets the "coin_value" field.
func (u *EventCoinUpsert) SetCoinValue(v decimal.Decimal) *EventCoinUpsert {
	u.Set(eventcoin.FieldCoinValue, v)
	return u
}

// UpdateCoinValue sets the "coin_value" field to the value that was provided on create.
func (u *EventCoinUpsert) UpdateCoinValue() *EventCoinUpsert {
	u.SetExcluded(eventcoin.FieldCoinValue)
	return u
}

// ClearCoinValue clears the value of the "coin_value" field.
func (u *EventCoinUpsert) ClearCoinValue() *EventCoinUpsert {
	u.SetNull(eventcoin.FieldCoinValue)
	return u
}

// SetCoinPerUsd sets the "coin_per_usd" field.
func (u *EventCoinUpsert) SetCoinPerUsd(v decimal.Decimal) *EventCoinUpsert {
	u.Set(eventcoin.FieldCoinPerUsd, v)
	return u
}

// UpdateCoinPerUsd sets the "coin_per_usd" field to the value that was provided on create.
func (u *EventCoinUpsert) UpdateCoinPerUsd() *EventCoinUpsert {
	u.SetExcluded(eventcoin.FieldCoinPerUsd)
	return u
}

// ClearCoinPerUsd clears the value of the "coin_per_usd" field.
func (u *EventCoinUpsert) ClearCoinPerUsd() *EventCoinUpsert {
	u.SetNull(eventcoin.FieldCoinPerUsd)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.EventCoin.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(eventcoin.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EventCoinUpsertOne) UpdateNewValues() *EventCoinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(eventcoin.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EventCoin.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EventCoinUpsertOne) Ignore() *EventCoinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventCoinUpsertOne) DoNothing() *EventCoinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventCoinCreate.OnConflict
// documentation for more info.
func (u *EventCoinUpsertOne) Update(set func(*EventCoinUpsert)) *EventCoinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventCoinUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *EventCoinUpsertOne) SetCreatedAt(v uint32) *EventCoinUpsertOne {
	return u.Update(func(s *EventCoinUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *EventCoinUpsertOne) AddCreatedAt(v uint32) *EventCoinUpsertOne {
	return u.Update(func(s *EventCoinUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EventCoinUpsertOne) UpdateCreatedAt() *EventCoinUpsertOne {
	return u.Update(func(s *EventCoinUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EventCoinUpsertOne) SetUpdatedAt(v uint32) *EventCoinUpsertOne {
	return u.Update(func(s *EventCoinUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *EventCoinUpsertOne) AddUpdatedAt(v uint32) *EventCoinUpsertOne {
	return u.Update(func(s *EventCoinUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EventCoinUpsertOne) UpdateUpdatedAt() *EventCoinUpsertOne {
	return u.Update(func(s *EventCoinUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EventCoinUpsertOne) SetDeletedAt(v uint32) *EventCoinUpsertOne {
	return u.Update(func(s *EventCoinUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *EventCoinUpsertOne) AddDeletedAt(v uint32) *EventCoinUpsertOne {
	return u.Update(func(s *EventCoinUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EventCoinUpsertOne) UpdateDeletedAt() *EventCoinUpsertOne {
	return u.Update(func(s *EventCoinUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *EventCoinUpsertOne) SetEntID(v uuid.UUID) *EventCoinUpsertOne {
	return u.Update(func(s *EventCoinUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *EventCoinUpsertOne) UpdateEntID() *EventCoinUpsertOne {
	return u.Update(func(s *EventCoinUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *EventCoinUpsertOne) SetAppID(v uuid.UUID) *EventCoinUpsertOne {
	return u.Update(func(s *EventCoinUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *EventCoinUpsertOne) UpdateAppID() *EventCoinUpsertOne {
	return u.Update(func(s *EventCoinUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *EventCoinUpsertOne) ClearAppID() *EventCoinUpsertOne {
	return u.Update(func(s *EventCoinUpsert) {
		s.ClearAppID()
	})
}

// SetEventID sets the "event_id" field.
func (u *EventCoinUpsertOne) SetEventID(v uuid.UUID) *EventCoinUpsertOne {
	return u.Update(func(s *EventCoinUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *EventCoinUpsertOne) UpdateEventID() *EventCoinUpsertOne {
	return u.Update(func(s *EventCoinUpsert) {
		s.UpdateEventID()
	})
}

// ClearEventID clears the value of the "event_id" field.
func (u *EventCoinUpsertOne) ClearEventID() *EventCoinUpsertOne {
	return u.Update(func(s *EventCoinUpsert) {
		s.ClearEventID()
	})
}

// SetCoinConfigID sets the "coin_config_id" field.
func (u *EventCoinUpsertOne) SetCoinConfigID(v uuid.UUID) *EventCoinUpsertOne {
	return u.Update(func(s *EventCoinUpsert) {
		s.SetCoinConfigID(v)
	})
}

// UpdateCoinConfigID sets the "coin_config_id" field to the value that was provided on create.
func (u *EventCoinUpsertOne) UpdateCoinConfigID() *EventCoinUpsertOne {
	return u.Update(func(s *EventCoinUpsert) {
		s.UpdateCoinConfigID()
	})
}

// ClearCoinConfigID clears the value of the "coin_config_id" field.
func (u *EventCoinUpsertOne) ClearCoinConfigID() *EventCoinUpsertOne {
	return u.Update(func(s *EventCoinUpsert) {
		s.ClearCoinConfigID()
	})
}

// SetCoinValue sets the "coin_value" field.
func (u *EventCoinUpsertOne) SetCoinValue(v decimal.Decimal) *EventCoinUpsertOne {
	return u.Update(func(s *EventCoinUpsert) {
		s.SetCoinValue(v)
	})
}

// UpdateCoinValue sets the "coin_value" field to the value that was provided on create.
func (u *EventCoinUpsertOne) UpdateCoinValue() *EventCoinUpsertOne {
	return u.Update(func(s *EventCoinUpsert) {
		s.UpdateCoinValue()
	})
}

// ClearCoinValue clears the value of the "coin_value" field.
func (u *EventCoinUpsertOne) ClearCoinValue() *EventCoinUpsertOne {
	return u.Update(func(s *EventCoinUpsert) {
		s.ClearCoinValue()
	})
}

// SetCoinPerUsd sets the "coin_per_usd" field.
func (u *EventCoinUpsertOne) SetCoinPerUsd(v decimal.Decimal) *EventCoinUpsertOne {
	return u.Update(func(s *EventCoinUpsert) {
		s.SetCoinPerUsd(v)
	})
}

// UpdateCoinPerUsd sets the "coin_per_usd" field to the value that was provided on create.
func (u *EventCoinUpsertOne) UpdateCoinPerUsd() *EventCoinUpsertOne {
	return u.Update(func(s *EventCoinUpsert) {
		s.UpdateCoinPerUsd()
	})
}

// ClearCoinPerUsd clears the value of the "coin_per_usd" field.
func (u *EventCoinUpsertOne) ClearCoinPerUsd() *EventCoinUpsertOne {
	return u.Update(func(s *EventCoinUpsert) {
		s.ClearCoinPerUsd()
	})
}

// Exec executes the query.
func (u *EventCoinUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for EventCoinCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventCoinUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EventCoinUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EventCoinUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EventCoinCreateBulk is the builder for creating many EventCoin entities in bulk.
type EventCoinCreateBulk struct {
	config
	err      error
	builders []*EventCoinCreate
	conflict []sql.ConflictOption
}

// Save creates the EventCoin entities in the database.
func (eccb *EventCoinCreateBulk) Save(ctx context.Context) ([]*EventCoin, error) {
	if eccb.err != nil {
		return nil, eccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(eccb.builders))
	nodes := make([]*EventCoin, len(eccb.builders))
	mutators := make([]Mutator, len(eccb.builders))
	for i := range eccb.builders {
		func(i int, root context.Context) {
			builder := eccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventCoinMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = eccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eccb *EventCoinCreateBulk) SaveX(ctx context.Context) []*EventCoin {
	v, err := eccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eccb *EventCoinCreateBulk) Exec(ctx context.Context) error {
	_, err := eccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eccb *EventCoinCreateBulk) ExecX(ctx context.Context) {
	if err := eccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EventCoin.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventCoinUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (eccb *EventCoinCreateBulk) OnConflict(opts ...sql.ConflictOption) *EventCoinUpsertBulk {
	eccb.conflict = opts
	return &EventCoinUpsertBulk{
		create: eccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EventCoin.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (eccb *EventCoinCreateBulk) OnConflictColumns(columns ...string) *EventCoinUpsertBulk {
	eccb.conflict = append(eccb.conflict, sql.ConflictColumns(columns...))
	return &EventCoinUpsertBulk{
		create: eccb,
	}
}

// EventCoinUpsertBulk is the builder for "upsert"-ing
// a bulk of EventCoin nodes.
type EventCoinUpsertBulk struct {
	create *EventCoinCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EventCoin.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(eventcoin.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EventCoinUpsertBulk) UpdateNewValues() *EventCoinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(eventcoin.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EventCoin.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EventCoinUpsertBulk) Ignore() *EventCoinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventCoinUpsertBulk) DoNothing() *EventCoinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventCoinCreateBulk.OnConflict
// documentation for more info.
func (u *EventCoinUpsertBulk) Update(set func(*EventCoinUpsert)) *EventCoinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventCoinUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *EventCoinUpsertBulk) SetCreatedAt(v uint32) *EventCoinUpsertBulk {
	return u.Update(func(s *EventCoinUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *EventCoinUpsertBulk) AddCreatedAt(v uint32) *EventCoinUpsertBulk {
	return u.Update(func(s *EventCoinUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EventCoinUpsertBulk) UpdateCreatedAt() *EventCoinUpsertBulk {
	return u.Update(func(s *EventCoinUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EventCoinUpsertBulk) SetUpdatedAt(v uint32) *EventCoinUpsertBulk {
	return u.Update(func(s *EventCoinUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *EventCoinUpsertBulk) AddUpdatedAt(v uint32) *EventCoinUpsertBulk {
	return u.Update(func(s *EventCoinUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EventCoinUpsertBulk) UpdateUpdatedAt() *EventCoinUpsertBulk {
	return u.Update(func(s *EventCoinUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EventCoinUpsertBulk) SetDeletedAt(v uint32) *EventCoinUpsertBulk {
	return u.Update(func(s *EventCoinUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *EventCoinUpsertBulk) AddDeletedAt(v uint32) *EventCoinUpsertBulk {
	return u.Update(func(s *EventCoinUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EventCoinUpsertBulk) UpdateDeletedAt() *EventCoinUpsertBulk {
	return u.Update(func(s *EventCoinUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *EventCoinUpsertBulk) SetEntID(v uuid.UUID) *EventCoinUpsertBulk {
	return u.Update(func(s *EventCoinUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *EventCoinUpsertBulk) UpdateEntID() *EventCoinUpsertBulk {
	return u.Update(func(s *EventCoinUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *EventCoinUpsertBulk) SetAppID(v uuid.UUID) *EventCoinUpsertBulk {
	return u.Update(func(s *EventCoinUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *EventCoinUpsertBulk) UpdateAppID() *EventCoinUpsertBulk {
	return u.Update(func(s *EventCoinUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *EventCoinUpsertBulk) ClearAppID() *EventCoinUpsertBulk {
	return u.Update(func(s *EventCoinUpsert) {
		s.ClearAppID()
	})
}

// SetEventID sets the "event_id" field.
func (u *EventCoinUpsertBulk) SetEventID(v uuid.UUID) *EventCoinUpsertBulk {
	return u.Update(func(s *EventCoinUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *EventCoinUpsertBulk) UpdateEventID() *EventCoinUpsertBulk {
	return u.Update(func(s *EventCoinUpsert) {
		s.UpdateEventID()
	})
}

// ClearEventID clears the value of the "event_id" field.
func (u *EventCoinUpsertBulk) ClearEventID() *EventCoinUpsertBulk {
	return u.Update(func(s *EventCoinUpsert) {
		s.ClearEventID()
	})
}

// SetCoinConfigID sets the "coin_config_id" field.
func (u *EventCoinUpsertBulk) SetCoinConfigID(v uuid.UUID) *EventCoinUpsertBulk {
	return u.Update(func(s *EventCoinUpsert) {
		s.SetCoinConfigID(v)
	})
}

// UpdateCoinConfigID sets the "coin_config_id" field to the value that was provided on create.
func (u *EventCoinUpsertBulk) UpdateCoinConfigID() *EventCoinUpsertBulk {
	return u.Update(func(s *EventCoinUpsert) {
		s.UpdateCoinConfigID()
	})
}

// ClearCoinConfigID clears the value of the "coin_config_id" field.
func (u *EventCoinUpsertBulk) ClearCoinConfigID() *EventCoinUpsertBulk {
	return u.Update(func(s *EventCoinUpsert) {
		s.ClearCoinConfigID()
	})
}

// SetCoinValue sets the "coin_value" field.
func (u *EventCoinUpsertBulk) SetCoinValue(v decimal.Decimal) *EventCoinUpsertBulk {
	return u.Update(func(s *EventCoinUpsert) {
		s.SetCoinValue(v)
	})
}

// UpdateCoinValue sets the "coin_value" field to the value that was provided on create.
func (u *EventCoinUpsertBulk) UpdateCoinValue() *EventCoinUpsertBulk {
	return u.Update(func(s *EventCoinUpsert) {
		s.UpdateCoinValue()
	})
}

// ClearCoinValue clears the value of the "coin_value" field.
func (u *EventCoinUpsertBulk) ClearCoinValue() *EventCoinUpsertBulk {
	return u.Update(func(s *EventCoinUpsert) {
		s.ClearCoinValue()
	})
}

// SetCoinPerUsd sets the "coin_per_usd" field.
func (u *EventCoinUpsertBulk) SetCoinPerUsd(v decimal.Decimal) *EventCoinUpsertBulk {
	return u.Update(func(s *EventCoinUpsert) {
		s.SetCoinPerUsd(v)
	})
}

// UpdateCoinPerUsd sets the "coin_per_usd" field to the value that was provided on create.
func (u *EventCoinUpsertBulk) UpdateCoinPerUsd() *EventCoinUpsertBulk {
	return u.Update(func(s *EventCoinUpsert) {
		s.UpdateCoinPerUsd()
	})
}

// ClearCoinPerUsd clears the value of the "coin_per_usd" field.
func (u *EventCoinUpsertBulk) ClearCoinPerUsd() *EventCoinUpsertBulk {
	return u.Update(func(s *EventCoinUpsert) {
		s.ClearCoinPerUsd()
	})
}

// Exec executes the query.
func (u *EventCoinUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the EventCoinCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for EventCoinCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventCoinUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

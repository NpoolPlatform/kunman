// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/achievementuser"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AchievementUser is the model entity for the AchievementUser schema.
type AchievementUser struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// TotalCommission holds the value of the "total_commission" field.
	TotalCommission decimal.Decimal `json:"total_commission,omitempty"`
	// SelfCommission holds the value of the "self_commission" field.
	SelfCommission decimal.Decimal `json:"self_commission,omitempty"`
	// DirectConsumeAmount holds the value of the "direct_consume_amount" field.
	DirectConsumeAmount decimal.Decimal `json:"direct_consume_amount,omitempty"`
	// InviteeConsumeAmount holds the value of the "invitee_consume_amount" field.
	InviteeConsumeAmount decimal.Decimal `json:"invitee_consume_amount,omitempty"`
	// DirectInvitees holds the value of the "direct_invitees" field.
	DirectInvitees uint32 `json:"direct_invitees,omitempty"`
	// IndirectInvitees holds the value of the "indirect_invitees" field.
	IndirectInvitees uint32 `json:"indirect_invitees,omitempty"`
	selectValues     sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AchievementUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case achievementuser.FieldTotalCommission, achievementuser.FieldSelfCommission, achievementuser.FieldDirectConsumeAmount, achievementuser.FieldInviteeConsumeAmount:
			values[i] = new(decimal.Decimal)
		case achievementuser.FieldID, achievementuser.FieldCreatedAt, achievementuser.FieldUpdatedAt, achievementuser.FieldDeletedAt, achievementuser.FieldDirectInvitees, achievementuser.FieldIndirectInvitees:
			values[i] = new(sql.NullInt64)
		case achievementuser.FieldEntID, achievementuser.FieldAppID, achievementuser.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AchievementUser fields.
func (au *AchievementUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case achievementuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			au.ID = uint32(value.Int64)
		case achievementuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				au.CreatedAt = uint32(value.Int64)
			}
		case achievementuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				au.UpdatedAt = uint32(value.Int64)
			}
		case achievementuser.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				au.DeletedAt = uint32(value.Int64)
			}
		case achievementuser.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				au.EntID = *value
			}
		case achievementuser.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				au.AppID = *value
			}
		case achievementuser.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				au.UserID = *value
			}
		case achievementuser.FieldTotalCommission:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field total_commission", values[i])
			} else if value != nil {
				au.TotalCommission = *value
			}
		case achievementuser.FieldSelfCommission:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field self_commission", values[i])
			} else if value != nil {
				au.SelfCommission = *value
			}
		case achievementuser.FieldDirectConsumeAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field direct_consume_amount", values[i])
			} else if value != nil {
				au.DirectConsumeAmount = *value
			}
		case achievementuser.FieldInviteeConsumeAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field invitee_consume_amount", values[i])
			} else if value != nil {
				au.InviteeConsumeAmount = *value
			}
		case achievementuser.FieldDirectInvitees:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field direct_invitees", values[i])
			} else if value.Valid {
				au.DirectInvitees = uint32(value.Int64)
			}
		case achievementuser.FieldIndirectInvitees:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field indirect_invitees", values[i])
			} else if value.Valid {
				au.IndirectInvitees = uint32(value.Int64)
			}
		default:
			au.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AchievementUser.
// This includes values selected through modifiers, order, etc.
func (au *AchievementUser) Value(name string) (ent.Value, error) {
	return au.selectValues.Get(name)
}

// Update returns a builder for updating this AchievementUser.
// Note that you need to call AchievementUser.Unwrap() before calling this method if this AchievementUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (au *AchievementUser) Update() *AchievementUserUpdateOne {
	return NewAchievementUserClient(au.config).UpdateOne(au)
}

// Unwrap unwraps the AchievementUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (au *AchievementUser) Unwrap() *AchievementUser {
	_tx, ok := au.config.driver.(*txDriver)
	if !ok {
		panic("generated: AchievementUser is not a transactional entity")
	}
	au.config.driver = _tx.drv
	return au
}

// String implements the fmt.Stringer.
func (au *AchievementUser) String() string {
	var builder strings.Builder
	builder.WriteString("AchievementUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", au.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", au.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", au.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", au.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", au.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", au.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", au.UserID))
	builder.WriteString(", ")
	builder.WriteString("total_commission=")
	builder.WriteString(fmt.Sprintf("%v", au.TotalCommission))
	builder.WriteString(", ")
	builder.WriteString("self_commission=")
	builder.WriteString(fmt.Sprintf("%v", au.SelfCommission))
	builder.WriteString(", ")
	builder.WriteString("direct_consume_amount=")
	builder.WriteString(fmt.Sprintf("%v", au.DirectConsumeAmount))
	builder.WriteString(", ")
	builder.WriteString("invitee_consume_amount=")
	builder.WriteString(fmt.Sprintf("%v", au.InviteeConsumeAmount))
	builder.WriteString(", ")
	builder.WriteString("direct_invitees=")
	builder.WriteString(fmt.Sprintf("%v", au.DirectInvitees))
	builder.WriteString(", ")
	builder.WriteString("indirect_invitees=")
	builder.WriteString(fmt.Sprintf("%v", au.IndirectInvitees))
	builder.WriteByte(')')
	return builder.String()
}

// AchievementUsers is a parsable slice of AchievementUser.
type AchievementUsers []*AchievementUser

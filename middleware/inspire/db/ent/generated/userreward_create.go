// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/userreward"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// UserRewardCreate is the builder for creating a UserReward entity.
type UserRewardCreate struct {
	config
	mutation *UserRewardMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (urc *UserRewardCreate) SetCreatedAt(u uint32) *UserRewardCreate {
	urc.mutation.SetCreatedAt(u)
	return urc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (urc *UserRewardCreate) SetNillableCreatedAt(u *uint32) *UserRewardCreate {
	if u != nil {
		urc.SetCreatedAt(*u)
	}
	return urc
}

// SetUpdatedAt sets the "updated_at" field.
func (urc *UserRewardCreate) SetUpdatedAt(u uint32) *UserRewardCreate {
	urc.mutation.SetUpdatedAt(u)
	return urc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (urc *UserRewardCreate) SetNillableUpdatedAt(u *uint32) *UserRewardCreate {
	if u != nil {
		urc.SetUpdatedAt(*u)
	}
	return urc
}

// SetDeletedAt sets the "deleted_at" field.
func (urc *UserRewardCreate) SetDeletedAt(u uint32) *UserRewardCreate {
	urc.mutation.SetDeletedAt(u)
	return urc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (urc *UserRewardCreate) SetNillableDeletedAt(u *uint32) *UserRewardCreate {
	if u != nil {
		urc.SetDeletedAt(*u)
	}
	return urc
}

// SetEntID sets the "ent_id" field.
func (urc *UserRewardCreate) SetEntID(u uuid.UUID) *UserRewardCreate {
	urc.mutation.SetEntID(u)
	return urc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (urc *UserRewardCreate) SetNillableEntID(u *uuid.UUID) *UserRewardCreate {
	if u != nil {
		urc.SetEntID(*u)
	}
	return urc
}

// SetAppID sets the "app_id" field.
func (urc *UserRewardCreate) SetAppID(u uuid.UUID) *UserRewardCreate {
	urc.mutation.SetAppID(u)
	return urc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (urc *UserRewardCreate) SetNillableAppID(u *uuid.UUID) *UserRewardCreate {
	if u != nil {
		urc.SetAppID(*u)
	}
	return urc
}

// SetUserID sets the "user_id" field.
func (urc *UserRewardCreate) SetUserID(u uuid.UUID) *UserRewardCreate {
	urc.mutation.SetUserID(u)
	return urc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (urc *UserRewardCreate) SetNillableUserID(u *uuid.UUID) *UserRewardCreate {
	if u != nil {
		urc.SetUserID(*u)
	}
	return urc
}

// SetActionCredits sets the "action_credits" field.
func (urc *UserRewardCreate) SetActionCredits(d decimal.Decimal) *UserRewardCreate {
	urc.mutation.SetActionCredits(d)
	return urc
}

// SetNillableActionCredits sets the "action_credits" field if the given value is not nil.
func (urc *UserRewardCreate) SetNillableActionCredits(d *decimal.Decimal) *UserRewardCreate {
	if d != nil {
		urc.SetActionCredits(*d)
	}
	return urc
}

// SetCouponAmount sets the "coupon_amount" field.
func (urc *UserRewardCreate) SetCouponAmount(d decimal.Decimal) *UserRewardCreate {
	urc.mutation.SetCouponAmount(d)
	return urc
}

// SetNillableCouponAmount sets the "coupon_amount" field if the given value is not nil.
func (urc *UserRewardCreate) SetNillableCouponAmount(d *decimal.Decimal) *UserRewardCreate {
	if d != nil {
		urc.SetCouponAmount(*d)
	}
	return urc
}

// SetCouponCashableAmount sets the "coupon_cashable_amount" field.
func (urc *UserRewardCreate) SetCouponCashableAmount(d decimal.Decimal) *UserRewardCreate {
	urc.mutation.SetCouponCashableAmount(d)
	return urc
}

// SetNillableCouponCashableAmount sets the "coupon_cashable_amount" field if the given value is not nil.
func (urc *UserRewardCreate) SetNillableCouponCashableAmount(d *decimal.Decimal) *UserRewardCreate {
	if d != nil {
		urc.SetCouponCashableAmount(*d)
	}
	return urc
}

// SetID sets the "id" field.
func (urc *UserRewardCreate) SetID(u uint32) *UserRewardCreate {
	urc.mutation.SetID(u)
	return urc
}

// Mutation returns the UserRewardMutation object of the builder.
func (urc *UserRewardCreate) Mutation() *UserRewardMutation {
	return urc.mutation
}

// Save creates the UserReward in the database.
func (urc *UserRewardCreate) Save(ctx context.Context) (*UserReward, error) {
	urc.defaults()
	return withHooks(ctx, urc.sqlSave, urc.mutation, urc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (urc *UserRewardCreate) SaveX(ctx context.Context) *UserReward {
	v, err := urc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (urc *UserRewardCreate) Exec(ctx context.Context) error {
	_, err := urc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urc *UserRewardCreate) ExecX(ctx context.Context) {
	if err := urc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (urc *UserRewardCreate) defaults() {
	if _, ok := urc.mutation.CreatedAt(); !ok {
		v := userreward.DefaultCreatedAt()
		urc.mutation.SetCreatedAt(v)
	}
	if _, ok := urc.mutation.UpdatedAt(); !ok {
		v := userreward.DefaultUpdatedAt()
		urc.mutation.SetUpdatedAt(v)
	}
	if _, ok := urc.mutation.DeletedAt(); !ok {
		v := userreward.DefaultDeletedAt()
		urc.mutation.SetDeletedAt(v)
	}
	if _, ok := urc.mutation.EntID(); !ok {
		v := userreward.DefaultEntID()
		urc.mutation.SetEntID(v)
	}
	if _, ok := urc.mutation.AppID(); !ok {
		v := userreward.DefaultAppID()
		urc.mutation.SetAppID(v)
	}
	if _, ok := urc.mutation.UserID(); !ok {
		v := userreward.DefaultUserID()
		urc.mutation.SetUserID(v)
	}
	if _, ok := urc.mutation.ActionCredits(); !ok {
		v := userreward.DefaultActionCredits
		urc.mutation.SetActionCredits(v)
	}
	if _, ok := urc.mutation.CouponAmount(); !ok {
		v := userreward.DefaultCouponAmount
		urc.mutation.SetCouponAmount(v)
	}
	if _, ok := urc.mutation.CouponCashableAmount(); !ok {
		v := userreward.DefaultCouponCashableAmount
		urc.mutation.SetCouponCashableAmount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (urc *UserRewardCreate) check() error {
	if _, ok := urc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "UserReward.created_at"`)}
	}
	if _, ok := urc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "UserReward.updated_at"`)}
	}
	if _, ok := urc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "UserReward.deleted_at"`)}
	}
	if _, ok := urc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "UserReward.ent_id"`)}
	}
	return nil
}

func (urc *UserRewardCreate) sqlSave(ctx context.Context) (*UserReward, error) {
	if err := urc.check(); err != nil {
		return nil, err
	}
	_node, _spec := urc.createSpec()
	if err := sqlgraph.CreateNode(ctx, urc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	urc.mutation.id = &_node.ID
	urc.mutation.done = true
	return _node, nil
}

func (urc *UserRewardCreate) createSpec() (*UserReward, *sqlgraph.CreateSpec) {
	var (
		_node = &UserReward{config: urc.config}
		_spec = sqlgraph.NewCreateSpec(userreward.Table, sqlgraph.NewFieldSpec(userreward.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = urc.conflict
	if id, ok := urc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := urc.mutation.CreatedAt(); ok {
		_spec.SetField(userreward.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := urc.mutation.UpdatedAt(); ok {
		_spec.SetField(userreward.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := urc.mutation.DeletedAt(); ok {
		_spec.SetField(userreward.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := urc.mutation.EntID(); ok {
		_spec.SetField(userreward.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := urc.mutation.AppID(); ok {
		_spec.SetField(userreward.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := urc.mutation.UserID(); ok {
		_spec.SetField(userreward.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := urc.mutation.ActionCredits(); ok {
		_spec.SetField(userreward.FieldActionCredits, field.TypeOther, value)
		_node.ActionCredits = value
	}
	if value, ok := urc.mutation.CouponAmount(); ok {
		_spec.SetField(userreward.FieldCouponAmount, field.TypeOther, value)
		_node.CouponAmount = value
	}
	if value, ok := urc.mutation.CouponCashableAmount(); ok {
		_spec.SetField(userreward.FieldCouponCashableAmount, field.TypeOther, value)
		_node.CouponCashableAmount = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserReward.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserRewardUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (urc *UserRewardCreate) OnConflict(opts ...sql.ConflictOption) *UserRewardUpsertOne {
	urc.conflict = opts
	return &UserRewardUpsertOne{
		create: urc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserReward.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (urc *UserRewardCreate) OnConflictColumns(columns ...string) *UserRewardUpsertOne {
	urc.conflict = append(urc.conflict, sql.ConflictColumns(columns...))
	return &UserRewardUpsertOne{
		create: urc,
	}
}

type (
	// UserRewardUpsertOne is the builder for "upsert"-ing
	//  one UserReward node.
	UserRewardUpsertOne struct {
		create *UserRewardCreate
	}

	// UserRewardUpsert is the "OnConflict" setter.
	UserRewardUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *UserRewardUpsert) SetCreatedAt(v uint32) *UserRewardUpsert {
	u.Set(userreward.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserRewardUpsert) UpdateCreatedAt() *UserRewardUpsert {
	u.SetExcluded(userreward.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *UserRewardUpsert) AddCreatedAt(v uint32) *UserRewardUpsert {
	u.Add(userreward.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserRewardUpsert) SetUpdatedAt(v uint32) *UserRewardUpsert {
	u.Set(userreward.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserRewardUpsert) UpdateUpdatedAt() *UserRewardUpsert {
	u.SetExcluded(userreward.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *UserRewardUpsert) AddUpdatedAt(v uint32) *UserRewardUpsert {
	u.Add(userreward.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserRewardUpsert) SetDeletedAt(v uint32) *UserRewardUpsert {
	u.Set(userreward.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserRewardUpsert) UpdateDeletedAt() *UserRewardUpsert {
	u.SetExcluded(userreward.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *UserRewardUpsert) AddDeletedAt(v uint32) *UserRewardUpsert {
	u.Add(userreward.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *UserRewardUpsert) SetEntID(v uuid.UUID) *UserRewardUpsert {
	u.Set(userreward.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *UserRewardUpsert) UpdateEntID() *UserRewardUpsert {
	u.SetExcluded(userreward.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *UserRewardUpsert) SetAppID(v uuid.UUID) *UserRewardUpsert {
	u.Set(userreward.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *UserRewardUpsert) UpdateAppID() *UserRewardUpsert {
	u.SetExcluded(userreward.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *UserRewardUpsert) ClearAppID() *UserRewardUpsert {
	u.SetNull(userreward.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserRewardUpsert) SetUserID(v uuid.UUID) *UserRewardUpsert {
	u.Set(userreward.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserRewardUpsert) UpdateUserID() *UserRewardUpsert {
	u.SetExcluded(userreward.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *UserRewardUpsert) ClearUserID() *UserRewardUpsert {
	u.SetNull(userreward.FieldUserID)
	return u
}

// SetActionCredits sets the "action_credits" field.
func (u *UserRewardUpsert) SetActionCredits(v decimal.Decimal) *UserRewardUpsert {
	u.Set(userreward.FieldActionCredits, v)
	return u
}

// UpdateActionCredits sets the "action_credits" field to the value that was provided on create.
func (u *UserRewardUpsert) UpdateActionCredits() *UserRewardUpsert {
	u.SetExcluded(userreward.FieldActionCredits)
	return u
}

// ClearActionCredits clears the value of the "action_credits" field.
func (u *UserRewardUpsert) ClearActionCredits() *UserRewardUpsert {
	u.SetNull(userreward.FieldActionCredits)
	return u
}

// SetCouponAmount sets the "coupon_amount" field.
func (u *UserRewardUpsert) SetCouponAmount(v decimal.Decimal) *UserRewardUpsert {
	u.Set(userreward.FieldCouponAmount, v)
	return u
}

// UpdateCouponAmount sets the "coupon_amount" field to the value that was provided on create.
func (u *UserRewardUpsert) UpdateCouponAmount() *UserRewardUpsert {
	u.SetExcluded(userreward.FieldCouponAmount)
	return u
}

// ClearCouponAmount clears the value of the "coupon_amount" field.
func (u *UserRewardUpsert) ClearCouponAmount() *UserRewardUpsert {
	u.SetNull(userreward.FieldCouponAmount)
	return u
}

// SetCouponCashableAmount sets the "coupon_cashable_amount" field.
func (u *UserRewardUpsert) SetCouponCashableAmount(v decimal.Decimal) *UserRewardUpsert {
	u.Set(userreward.FieldCouponCashableAmount, v)
	return u
}

// UpdateCouponCashableAmount sets the "coupon_cashable_amount" field to the value that was provided on create.
func (u *UserRewardUpsert) UpdateCouponCashableAmount() *UserRewardUpsert {
	u.SetExcluded(userreward.FieldCouponCashableAmount)
	return u
}

// ClearCouponCashableAmount clears the value of the "coupon_cashable_amount" field.
func (u *UserRewardUpsert) ClearCouponCashableAmount() *UserRewardUpsert {
	u.SetNull(userreward.FieldCouponCashableAmount)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserReward.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userreward.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserRewardUpsertOne) UpdateNewValues() *UserRewardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(userreward.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserReward.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserRewardUpsertOne) Ignore() *UserRewardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserRewardUpsertOne) DoNothing() *UserRewardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserRewardCreate.OnConflict
// documentation for more info.
func (u *UserRewardUpsertOne) Update(set func(*UserRewardUpsert)) *UserRewardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserRewardUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *UserRewardUpsertOne) SetCreatedAt(v uint32) *UserRewardUpsertOne {
	return u.Update(func(s *UserRewardUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *UserRewardUpsertOne) AddCreatedAt(v uint32) *UserRewardUpsertOne {
	return u.Update(func(s *UserRewardUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserRewardUpsertOne) UpdateCreatedAt() *UserRewardUpsertOne {
	return u.Update(func(s *UserRewardUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserRewardUpsertOne) SetUpdatedAt(v uint32) *UserRewardUpsertOne {
	return u.Update(func(s *UserRewardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *UserRewardUpsertOne) AddUpdatedAt(v uint32) *UserRewardUpsertOne {
	return u.Update(func(s *UserRewardUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserRewardUpsertOne) UpdateUpdatedAt() *UserRewardUpsertOne {
	return u.Update(func(s *UserRewardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserRewardUpsertOne) SetDeletedAt(v uint32) *UserRewardUpsertOne {
	return u.Update(func(s *UserRewardUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *UserRewardUpsertOne) AddDeletedAt(v uint32) *UserRewardUpsertOne {
	return u.Update(func(s *UserRewardUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserRewardUpsertOne) UpdateDeletedAt() *UserRewardUpsertOne {
	return u.Update(func(s *UserRewardUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *UserRewardUpsertOne) SetEntID(v uuid.UUID) *UserRewardUpsertOne {
	return u.Update(func(s *UserRewardUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *UserRewardUpsertOne) UpdateEntID() *UserRewardUpsertOne {
	return u.Update(func(s *UserRewardUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *UserRewardUpsertOne) SetAppID(v uuid.UUID) *UserRewardUpsertOne {
	return u.Update(func(s *UserRewardUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *UserRewardUpsertOne) UpdateAppID() *UserRewardUpsertOne {
	return u.Update(func(s *UserRewardUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *UserRewardUpsertOne) ClearAppID() *UserRewardUpsertOne {
	return u.Update(func(s *UserRewardUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserRewardUpsertOne) SetUserID(v uuid.UUID) *UserRewardUpsertOne {
	return u.Update(func(s *UserRewardUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserRewardUpsertOne) UpdateUserID() *UserRewardUpsertOne {
	return u.Update(func(s *UserRewardUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *UserRewardUpsertOne) ClearUserID() *UserRewardUpsertOne {
	return u.Update(func(s *UserRewardUpsert) {
		s.ClearUserID()
	})
}

// SetActionCredits sets the "action_credits" field.
func (u *UserRewardUpsertOne) SetActionCredits(v decimal.Decimal) *UserRewardUpsertOne {
	return u.Update(func(s *UserRewardUpsert) {
		s.SetActionCredits(v)
	})
}

// UpdateActionCredits sets the "action_credits" field to the value that was provided on create.
func (u *UserRewardUpsertOne) UpdateActionCredits() *UserRewardUpsertOne {
	return u.Update(func(s *UserRewardUpsert) {
		s.UpdateActionCredits()
	})
}

// ClearActionCredits clears the value of the "action_credits" field.
func (u *UserRewardUpsertOne) ClearActionCredits() *UserRewardUpsertOne {
	return u.Update(func(s *UserRewardUpsert) {
		s.ClearActionCredits()
	})
}

// SetCouponAmount sets the "coupon_amount" field.
func (u *UserRewardUpsertOne) SetCouponAmount(v decimal.Decimal) *UserRewardUpsertOne {
	return u.Update(func(s *UserRewardUpsert) {
		s.SetCouponAmount(v)
	})
}

// UpdateCouponAmount sets the "coupon_amount" field to the value that was provided on create.
func (u *UserRewardUpsertOne) UpdateCouponAmount() *UserRewardUpsertOne {
	return u.Update(func(s *UserRewardUpsert) {
		s.UpdateCouponAmount()
	})
}

// ClearCouponAmount clears the value of the "coupon_amount" field.
func (u *UserRewardUpsertOne) ClearCouponAmount() *UserRewardUpsertOne {
	return u.Update(func(s *UserRewardUpsert) {
		s.ClearCouponAmount()
	})
}

// SetCouponCashableAmount sets the "coupon_cashable_amount" field.
func (u *UserRewardUpsertOne) SetCouponCashableAmount(v decimal.Decimal) *UserRewardUpsertOne {
	return u.Update(func(s *UserRewardUpsert) {
		s.SetCouponCashableAmount(v)
	})
}

// UpdateCouponCashableAmount sets the "coupon_cashable_amount" field to the value that was provided on create.
func (u *UserRewardUpsertOne) UpdateCouponCashableAmount() *UserRewardUpsertOne {
	return u.Update(func(s *UserRewardUpsert) {
		s.UpdateCouponCashableAmount()
	})
}

// ClearCouponCashableAmount clears the value of the "coupon_cashable_amount" field.
func (u *UserRewardUpsertOne) ClearCouponCashableAmount() *UserRewardUpsertOne {
	return u.Update(func(s *UserRewardUpsert) {
		s.ClearCouponCashableAmount()
	})
}

// Exec executes the query.
func (u *UserRewardUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for UserRewardCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserRewardUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserRewardUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserRewardUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserRewardCreateBulk is the builder for creating many UserReward entities in bulk.
type UserRewardCreateBulk struct {
	config
	err      error
	builders []*UserRewardCreate
	conflict []sql.ConflictOption
}

// Save creates the UserReward entities in the database.
func (urcb *UserRewardCreateBulk) Save(ctx context.Context) ([]*UserReward, error) {
	if urcb.err != nil {
		return nil, urcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(urcb.builders))
	nodes := make([]*UserReward, len(urcb.builders))
	mutators := make([]Mutator, len(urcb.builders))
	for i := range urcb.builders {
		func(i int, root context.Context) {
			builder := urcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserRewardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, urcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = urcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, urcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, urcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (urcb *UserRewardCreateBulk) SaveX(ctx context.Context) []*UserReward {
	v, err := urcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (urcb *UserRewardCreateBulk) Exec(ctx context.Context) error {
	_, err := urcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urcb *UserRewardCreateBulk) ExecX(ctx context.Context) {
	if err := urcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserReward.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserRewardUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (urcb *UserRewardCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserRewardUpsertBulk {
	urcb.conflict = opts
	return &UserRewardUpsertBulk{
		create: urcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserReward.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (urcb *UserRewardCreateBulk) OnConflictColumns(columns ...string) *UserRewardUpsertBulk {
	urcb.conflict = append(urcb.conflict, sql.ConflictColumns(columns...))
	return &UserRewardUpsertBulk{
		create: urcb,
	}
}

// UserRewardUpsertBulk is the builder for "upsert"-ing
// a bulk of UserReward nodes.
type UserRewardUpsertBulk struct {
	create *UserRewardCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserReward.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userreward.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserRewardUpsertBulk) UpdateNewValues() *UserRewardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(userreward.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserReward.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserRewardUpsertBulk) Ignore() *UserRewardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserRewardUpsertBulk) DoNothing() *UserRewardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserRewardCreateBulk.OnConflict
// documentation for more info.
func (u *UserRewardUpsertBulk) Update(set func(*UserRewardUpsert)) *UserRewardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserRewardUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *UserRewardUpsertBulk) SetCreatedAt(v uint32) *UserRewardUpsertBulk {
	return u.Update(func(s *UserRewardUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *UserRewardUpsertBulk) AddCreatedAt(v uint32) *UserRewardUpsertBulk {
	return u.Update(func(s *UserRewardUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserRewardUpsertBulk) UpdateCreatedAt() *UserRewardUpsertBulk {
	return u.Update(func(s *UserRewardUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserRewardUpsertBulk) SetUpdatedAt(v uint32) *UserRewardUpsertBulk {
	return u.Update(func(s *UserRewardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *UserRewardUpsertBulk) AddUpdatedAt(v uint32) *UserRewardUpsertBulk {
	return u.Update(func(s *UserRewardUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserRewardUpsertBulk) UpdateUpdatedAt() *UserRewardUpsertBulk {
	return u.Update(func(s *UserRewardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserRewardUpsertBulk) SetDeletedAt(v uint32) *UserRewardUpsertBulk {
	return u.Update(func(s *UserRewardUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *UserRewardUpsertBulk) AddDeletedAt(v uint32) *UserRewardUpsertBulk {
	return u.Update(func(s *UserRewardUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserRewardUpsertBulk) UpdateDeletedAt() *UserRewardUpsertBulk {
	return u.Update(func(s *UserRewardUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *UserRewardUpsertBulk) SetEntID(v uuid.UUID) *UserRewardUpsertBulk {
	return u.Update(func(s *UserRewardUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *UserRewardUpsertBulk) UpdateEntID() *UserRewardUpsertBulk {
	return u.Update(func(s *UserRewardUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *UserRewardUpsertBulk) SetAppID(v uuid.UUID) *UserRewardUpsertBulk {
	return u.Update(func(s *UserRewardUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *UserRewardUpsertBulk) UpdateAppID() *UserRewardUpsertBulk {
	return u.Update(func(s *UserRewardUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *UserRewardUpsertBulk) ClearAppID() *UserRewardUpsertBulk {
	return u.Update(func(s *UserRewardUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserRewardUpsertBulk) SetUserID(v uuid.UUID) *UserRewardUpsertBulk {
	return u.Update(func(s *UserRewardUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserRewardUpsertBulk) UpdateUserID() *UserRewardUpsertBulk {
	return u.Update(func(s *UserRewardUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *UserRewardUpsertBulk) ClearUserID() *UserRewardUpsertBulk {
	return u.Update(func(s *UserRewardUpsert) {
		s.ClearUserID()
	})
}

// SetActionCredits sets the "action_credits" field.
func (u *UserRewardUpsertBulk) SetActionCredits(v decimal.Decimal) *UserRewardUpsertBulk {
	return u.Update(func(s *UserRewardUpsert) {
		s.SetActionCredits(v)
	})
}

// UpdateActionCredits sets the "action_credits" field to the value that was provided on create.
func (u *UserRewardUpsertBulk) UpdateActionCredits() *UserRewardUpsertBulk {
	return u.Update(func(s *UserRewardUpsert) {
		s.UpdateActionCredits()
	})
}

// ClearActionCredits clears the value of the "action_credits" field.
func (u *UserRewardUpsertBulk) ClearActionCredits() *UserRewardUpsertBulk {
	return u.Update(func(s *UserRewardUpsert) {
		s.ClearActionCredits()
	})
}

// SetCouponAmount sets the "coupon_amount" field.
func (u *UserRewardUpsertBulk) SetCouponAmount(v decimal.Decimal) *UserRewardUpsertBulk {
	return u.Update(func(s *UserRewardUpsert) {
		s.SetCouponAmount(v)
	})
}

// UpdateCouponAmount sets the "coupon_amount" field to the value that was provided on create.
func (u *UserRewardUpsertBulk) UpdateCouponAmount() *UserRewardUpsertBulk {
	return u.Update(func(s *UserRewardUpsert) {
		s.UpdateCouponAmount()
	})
}

// ClearCouponAmount clears the value of the "coupon_amount" field.
func (u *UserRewardUpsertBulk) ClearCouponAmount() *UserRewardUpsertBulk {
	return u.Update(func(s *UserRewardUpsert) {
		s.ClearCouponAmount()
	})
}

// SetCouponCashableAmount sets the "coupon_cashable_amount" field.
func (u *UserRewardUpsertBulk) SetCouponCashableAmount(v decimal.Decimal) *UserRewardUpsertBulk {
	return u.Update(func(s *UserRewardUpsert) {
		s.SetCouponCashableAmount(v)
	})
}

// UpdateCouponCashableAmount sets the "coupon_cashable_amount" field to the value that was provided on create.
func (u *UserRewardUpsertBulk) UpdateCouponCashableAmount() *UserRewardUpsertBulk {
	return u.Update(func(s *UserRewardUpsert) {
		s.UpdateCouponCashableAmount()
	})
}

// ClearCouponCashableAmount clears the value of the "coupon_cashable_amount" field.
func (u *UserRewardUpsertBulk) ClearCouponCashableAmount() *UserRewardUpsertBulk {
	return u.Update(func(s *UserRewardUpsert) {
		s.ClearCouponCashableAmount()
	})
}

// Exec executes the query.
func (u *UserRewardUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the UserRewardCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for UserRewardCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserRewardUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

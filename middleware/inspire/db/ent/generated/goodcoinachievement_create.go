// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/goodcoinachievement"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// GoodCoinAchievementCreate is the builder for creating a GoodCoinAchievement entity.
type GoodCoinAchievementCreate struct {
	config
	mutation *GoodCoinAchievementMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (gcac *GoodCoinAchievementCreate) SetCreatedAt(u uint32) *GoodCoinAchievementCreate {
	gcac.mutation.SetCreatedAt(u)
	return gcac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gcac *GoodCoinAchievementCreate) SetNillableCreatedAt(u *uint32) *GoodCoinAchievementCreate {
	if u != nil {
		gcac.SetCreatedAt(*u)
	}
	return gcac
}

// SetUpdatedAt sets the "updated_at" field.
func (gcac *GoodCoinAchievementCreate) SetUpdatedAt(u uint32) *GoodCoinAchievementCreate {
	gcac.mutation.SetUpdatedAt(u)
	return gcac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gcac *GoodCoinAchievementCreate) SetNillableUpdatedAt(u *uint32) *GoodCoinAchievementCreate {
	if u != nil {
		gcac.SetUpdatedAt(*u)
	}
	return gcac
}

// SetDeletedAt sets the "deleted_at" field.
func (gcac *GoodCoinAchievementCreate) SetDeletedAt(u uint32) *GoodCoinAchievementCreate {
	gcac.mutation.SetDeletedAt(u)
	return gcac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gcac *GoodCoinAchievementCreate) SetNillableDeletedAt(u *uint32) *GoodCoinAchievementCreate {
	if u != nil {
		gcac.SetDeletedAt(*u)
	}
	return gcac
}

// SetEntID sets the "ent_id" field.
func (gcac *GoodCoinAchievementCreate) SetEntID(u uuid.UUID) *GoodCoinAchievementCreate {
	gcac.mutation.SetEntID(u)
	return gcac
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (gcac *GoodCoinAchievementCreate) SetNillableEntID(u *uuid.UUID) *GoodCoinAchievementCreate {
	if u != nil {
		gcac.SetEntID(*u)
	}
	return gcac
}

// SetAppID sets the "app_id" field.
func (gcac *GoodCoinAchievementCreate) SetAppID(u uuid.UUID) *GoodCoinAchievementCreate {
	gcac.mutation.SetAppID(u)
	return gcac
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (gcac *GoodCoinAchievementCreate) SetNillableAppID(u *uuid.UUID) *GoodCoinAchievementCreate {
	if u != nil {
		gcac.SetAppID(*u)
	}
	return gcac
}

// SetUserID sets the "user_id" field.
func (gcac *GoodCoinAchievementCreate) SetUserID(u uuid.UUID) *GoodCoinAchievementCreate {
	gcac.mutation.SetUserID(u)
	return gcac
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (gcac *GoodCoinAchievementCreate) SetNillableUserID(u *uuid.UUID) *GoodCoinAchievementCreate {
	if u != nil {
		gcac.SetUserID(*u)
	}
	return gcac
}

// SetGoodCoinTypeID sets the "good_coin_type_id" field.
func (gcac *GoodCoinAchievementCreate) SetGoodCoinTypeID(u uuid.UUID) *GoodCoinAchievementCreate {
	gcac.mutation.SetGoodCoinTypeID(u)
	return gcac
}

// SetNillableGoodCoinTypeID sets the "good_coin_type_id" field if the given value is not nil.
func (gcac *GoodCoinAchievementCreate) SetNillableGoodCoinTypeID(u *uuid.UUID) *GoodCoinAchievementCreate {
	if u != nil {
		gcac.SetGoodCoinTypeID(*u)
	}
	return gcac
}

// SetTotalUnits sets the "total_units" field.
func (gcac *GoodCoinAchievementCreate) SetTotalUnits(d decimal.Decimal) *GoodCoinAchievementCreate {
	gcac.mutation.SetTotalUnits(d)
	return gcac
}

// SetNillableTotalUnits sets the "total_units" field if the given value is not nil.
func (gcac *GoodCoinAchievementCreate) SetNillableTotalUnits(d *decimal.Decimal) *GoodCoinAchievementCreate {
	if d != nil {
		gcac.SetTotalUnits(*d)
	}
	return gcac
}

// SetSelfUnits sets the "self_units" field.
func (gcac *GoodCoinAchievementCreate) SetSelfUnits(d decimal.Decimal) *GoodCoinAchievementCreate {
	gcac.mutation.SetSelfUnits(d)
	return gcac
}

// SetNillableSelfUnits sets the "self_units" field if the given value is not nil.
func (gcac *GoodCoinAchievementCreate) SetNillableSelfUnits(d *decimal.Decimal) *GoodCoinAchievementCreate {
	if d != nil {
		gcac.SetSelfUnits(*d)
	}
	return gcac
}

// SetTotalAmountUsd sets the "total_amount_usd" field.
func (gcac *GoodCoinAchievementCreate) SetTotalAmountUsd(d decimal.Decimal) *GoodCoinAchievementCreate {
	gcac.mutation.SetTotalAmountUsd(d)
	return gcac
}

// SetNillableTotalAmountUsd sets the "total_amount_usd" field if the given value is not nil.
func (gcac *GoodCoinAchievementCreate) SetNillableTotalAmountUsd(d *decimal.Decimal) *GoodCoinAchievementCreate {
	if d != nil {
		gcac.SetTotalAmountUsd(*d)
	}
	return gcac
}

// SetSelfAmountUsd sets the "self_amount_usd" field.
func (gcac *GoodCoinAchievementCreate) SetSelfAmountUsd(d decimal.Decimal) *GoodCoinAchievementCreate {
	gcac.mutation.SetSelfAmountUsd(d)
	return gcac
}

// SetNillableSelfAmountUsd sets the "self_amount_usd" field if the given value is not nil.
func (gcac *GoodCoinAchievementCreate) SetNillableSelfAmountUsd(d *decimal.Decimal) *GoodCoinAchievementCreate {
	if d != nil {
		gcac.SetSelfAmountUsd(*d)
	}
	return gcac
}

// SetTotalCommissionUsd sets the "total_commission_usd" field.
func (gcac *GoodCoinAchievementCreate) SetTotalCommissionUsd(d decimal.Decimal) *GoodCoinAchievementCreate {
	gcac.mutation.SetTotalCommissionUsd(d)
	return gcac
}

// SetNillableTotalCommissionUsd sets the "total_commission_usd" field if the given value is not nil.
func (gcac *GoodCoinAchievementCreate) SetNillableTotalCommissionUsd(d *decimal.Decimal) *GoodCoinAchievementCreate {
	if d != nil {
		gcac.SetTotalCommissionUsd(*d)
	}
	return gcac
}

// SetSelfCommissionUsd sets the "self_commission_usd" field.
func (gcac *GoodCoinAchievementCreate) SetSelfCommissionUsd(d decimal.Decimal) *GoodCoinAchievementCreate {
	gcac.mutation.SetSelfCommissionUsd(d)
	return gcac
}

// SetNillableSelfCommissionUsd sets the "self_commission_usd" field if the given value is not nil.
func (gcac *GoodCoinAchievementCreate) SetNillableSelfCommissionUsd(d *decimal.Decimal) *GoodCoinAchievementCreate {
	if d != nil {
		gcac.SetSelfCommissionUsd(*d)
	}
	return gcac
}

// SetID sets the "id" field.
func (gcac *GoodCoinAchievementCreate) SetID(u uint32) *GoodCoinAchievementCreate {
	gcac.mutation.SetID(u)
	return gcac
}

// Mutation returns the GoodCoinAchievementMutation object of the builder.
func (gcac *GoodCoinAchievementCreate) Mutation() *GoodCoinAchievementMutation {
	return gcac.mutation
}

// Save creates the GoodCoinAchievement in the database.
func (gcac *GoodCoinAchievementCreate) Save(ctx context.Context) (*GoodCoinAchievement, error) {
	gcac.defaults()
	return withHooks(ctx, gcac.sqlSave, gcac.mutation, gcac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gcac *GoodCoinAchievementCreate) SaveX(ctx context.Context) *GoodCoinAchievement {
	v, err := gcac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcac *GoodCoinAchievementCreate) Exec(ctx context.Context) error {
	_, err := gcac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcac *GoodCoinAchievementCreate) ExecX(ctx context.Context) {
	if err := gcac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gcac *GoodCoinAchievementCreate) defaults() {
	if _, ok := gcac.mutation.CreatedAt(); !ok {
		v := goodcoinachievement.DefaultCreatedAt()
		gcac.mutation.SetCreatedAt(v)
	}
	if _, ok := gcac.mutation.UpdatedAt(); !ok {
		v := goodcoinachievement.DefaultUpdatedAt()
		gcac.mutation.SetUpdatedAt(v)
	}
	if _, ok := gcac.mutation.DeletedAt(); !ok {
		v := goodcoinachievement.DefaultDeletedAt()
		gcac.mutation.SetDeletedAt(v)
	}
	if _, ok := gcac.mutation.EntID(); !ok {
		v := goodcoinachievement.DefaultEntID()
		gcac.mutation.SetEntID(v)
	}
	if _, ok := gcac.mutation.AppID(); !ok {
		v := goodcoinachievement.DefaultAppID()
		gcac.mutation.SetAppID(v)
	}
	if _, ok := gcac.mutation.UserID(); !ok {
		v := goodcoinachievement.DefaultUserID()
		gcac.mutation.SetUserID(v)
	}
	if _, ok := gcac.mutation.GoodCoinTypeID(); !ok {
		v := goodcoinachievement.DefaultGoodCoinTypeID()
		gcac.mutation.SetGoodCoinTypeID(v)
	}
	if _, ok := gcac.mutation.TotalUnits(); !ok {
		v := goodcoinachievement.DefaultTotalUnits
		gcac.mutation.SetTotalUnits(v)
	}
	if _, ok := gcac.mutation.SelfUnits(); !ok {
		v := goodcoinachievement.DefaultSelfUnits
		gcac.mutation.SetSelfUnits(v)
	}
	if _, ok := gcac.mutation.TotalAmountUsd(); !ok {
		v := goodcoinachievement.DefaultTotalAmountUsd
		gcac.mutation.SetTotalAmountUsd(v)
	}
	if _, ok := gcac.mutation.SelfAmountUsd(); !ok {
		v := goodcoinachievement.DefaultSelfAmountUsd
		gcac.mutation.SetSelfAmountUsd(v)
	}
	if _, ok := gcac.mutation.TotalCommissionUsd(); !ok {
		v := goodcoinachievement.DefaultTotalCommissionUsd
		gcac.mutation.SetTotalCommissionUsd(v)
	}
	if _, ok := gcac.mutation.SelfCommissionUsd(); !ok {
		v := goodcoinachievement.DefaultSelfCommissionUsd
		gcac.mutation.SetSelfCommissionUsd(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gcac *GoodCoinAchievementCreate) check() error {
	if _, ok := gcac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "GoodCoinAchievement.created_at"`)}
	}
	if _, ok := gcac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "GoodCoinAchievement.updated_at"`)}
	}
	if _, ok := gcac.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "GoodCoinAchievement.deleted_at"`)}
	}
	if _, ok := gcac.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "GoodCoinAchievement.ent_id"`)}
	}
	return nil
}

func (gcac *GoodCoinAchievementCreate) sqlSave(ctx context.Context) (*GoodCoinAchievement, error) {
	if err := gcac.check(); err != nil {
		return nil, err
	}
	_node, _spec := gcac.createSpec()
	if err := sqlgraph.CreateNode(ctx, gcac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	gcac.mutation.id = &_node.ID
	gcac.mutation.done = true
	return _node, nil
}

func (gcac *GoodCoinAchievementCreate) createSpec() (*GoodCoinAchievement, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodCoinAchievement{config: gcac.config}
		_spec = sqlgraph.NewCreateSpec(goodcoinachievement.Table, sqlgraph.NewFieldSpec(goodcoinachievement.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = gcac.conflict
	if id, ok := gcac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gcac.mutation.CreatedAt(); ok {
		_spec.SetField(goodcoinachievement.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := gcac.mutation.UpdatedAt(); ok {
		_spec.SetField(goodcoinachievement.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := gcac.mutation.DeletedAt(); ok {
		_spec.SetField(goodcoinachievement.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := gcac.mutation.EntID(); ok {
		_spec.SetField(goodcoinachievement.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := gcac.mutation.AppID(); ok {
		_spec.SetField(goodcoinachievement.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := gcac.mutation.UserID(); ok {
		_spec.SetField(goodcoinachievement.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := gcac.mutation.GoodCoinTypeID(); ok {
		_spec.SetField(goodcoinachievement.FieldGoodCoinTypeID, field.TypeUUID, value)
		_node.GoodCoinTypeID = value
	}
	if value, ok := gcac.mutation.TotalUnits(); ok {
		_spec.SetField(goodcoinachievement.FieldTotalUnits, field.TypeOther, value)
		_node.TotalUnits = value
	}
	if value, ok := gcac.mutation.SelfUnits(); ok {
		_spec.SetField(goodcoinachievement.FieldSelfUnits, field.TypeOther, value)
		_node.SelfUnits = value
	}
	if value, ok := gcac.mutation.TotalAmountUsd(); ok {
		_spec.SetField(goodcoinachievement.FieldTotalAmountUsd, field.TypeOther, value)
		_node.TotalAmountUsd = value
	}
	if value, ok := gcac.mutation.SelfAmountUsd(); ok {
		_spec.SetField(goodcoinachievement.FieldSelfAmountUsd, field.TypeOther, value)
		_node.SelfAmountUsd = value
	}
	if value, ok := gcac.mutation.TotalCommissionUsd(); ok {
		_spec.SetField(goodcoinachievement.FieldTotalCommissionUsd, field.TypeOther, value)
		_node.TotalCommissionUsd = value
	}
	if value, ok := gcac.mutation.SelfCommissionUsd(); ok {
		_spec.SetField(goodcoinachievement.FieldSelfCommissionUsd, field.TypeOther, value)
		_node.SelfCommissionUsd = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodCoinAchievement.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodCoinAchievementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (gcac *GoodCoinAchievementCreate) OnConflict(opts ...sql.ConflictOption) *GoodCoinAchievementUpsertOne {
	gcac.conflict = opts
	return &GoodCoinAchievementUpsertOne{
		create: gcac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodCoinAchievement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gcac *GoodCoinAchievementCreate) OnConflictColumns(columns ...string) *GoodCoinAchievementUpsertOne {
	gcac.conflict = append(gcac.conflict, sql.ConflictColumns(columns...))
	return &GoodCoinAchievementUpsertOne{
		create: gcac,
	}
}

type (
	// GoodCoinAchievementUpsertOne is the builder for "upsert"-ing
	//  one GoodCoinAchievement node.
	GoodCoinAchievementUpsertOne struct {
		create *GoodCoinAchievementCreate
	}

	// GoodCoinAchievementUpsert is the "OnConflict" setter.
	GoodCoinAchievementUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *GoodCoinAchievementUpsert) SetCreatedAt(v uint32) *GoodCoinAchievementUpsert {
	u.Set(goodcoinachievement.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsert) UpdateCreatedAt() *GoodCoinAchievementUpsert {
	u.SetExcluded(goodcoinachievement.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodCoinAchievementUpsert) AddCreatedAt(v uint32) *GoodCoinAchievementUpsert {
	u.Add(goodcoinachievement.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodCoinAchievementUpsert) SetUpdatedAt(v uint32) *GoodCoinAchievementUpsert {
	u.Set(goodcoinachievement.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsert) UpdateUpdatedAt() *GoodCoinAchievementUpsert {
	u.SetExcluded(goodcoinachievement.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodCoinAchievementUpsert) AddUpdatedAt(v uint32) *GoodCoinAchievementUpsert {
	u.Add(goodcoinachievement.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodCoinAchievementUpsert) SetDeletedAt(v uint32) *GoodCoinAchievementUpsert {
	u.Set(goodcoinachievement.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsert) UpdateDeletedAt() *GoodCoinAchievementUpsert {
	u.SetExcluded(goodcoinachievement.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodCoinAchievementUpsert) AddDeletedAt(v uint32) *GoodCoinAchievementUpsert {
	u.Add(goodcoinachievement.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *GoodCoinAchievementUpsert) SetEntID(v uuid.UUID) *GoodCoinAchievementUpsert {
	u.Set(goodcoinachievement.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsert) UpdateEntID() *GoodCoinAchievementUpsert {
	u.SetExcluded(goodcoinachievement.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *GoodCoinAchievementUpsert) SetAppID(v uuid.UUID) *GoodCoinAchievementUpsert {
	u.Set(goodcoinachievement.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsert) UpdateAppID() *GoodCoinAchievementUpsert {
	u.SetExcluded(goodcoinachievement.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *GoodCoinAchievementUpsert) ClearAppID() *GoodCoinAchievementUpsert {
	u.SetNull(goodcoinachievement.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *GoodCoinAchievementUpsert) SetUserID(v uuid.UUID) *GoodCoinAchievementUpsert {
	u.Set(goodcoinachievement.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsert) UpdateUserID() *GoodCoinAchievementUpsert {
	u.SetExcluded(goodcoinachievement.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *GoodCoinAchievementUpsert) ClearUserID() *GoodCoinAchievementUpsert {
	u.SetNull(goodcoinachievement.FieldUserID)
	return u
}

// SetGoodCoinTypeID sets the "good_coin_type_id" field.
func (u *GoodCoinAchievementUpsert) SetGoodCoinTypeID(v uuid.UUID) *GoodCoinAchievementUpsert {
	u.Set(goodcoinachievement.FieldGoodCoinTypeID, v)
	return u
}

// UpdateGoodCoinTypeID sets the "good_coin_type_id" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsert) UpdateGoodCoinTypeID() *GoodCoinAchievementUpsert {
	u.SetExcluded(goodcoinachievement.FieldGoodCoinTypeID)
	return u
}

// ClearGoodCoinTypeID clears the value of the "good_coin_type_id" field.
func (u *GoodCoinAchievementUpsert) ClearGoodCoinTypeID() *GoodCoinAchievementUpsert {
	u.SetNull(goodcoinachievement.FieldGoodCoinTypeID)
	return u
}

// SetTotalUnits sets the "total_units" field.
func (u *GoodCoinAchievementUpsert) SetTotalUnits(v decimal.Decimal) *GoodCoinAchievementUpsert {
	u.Set(goodcoinachievement.FieldTotalUnits, v)
	return u
}

// UpdateTotalUnits sets the "total_units" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsert) UpdateTotalUnits() *GoodCoinAchievementUpsert {
	u.SetExcluded(goodcoinachievement.FieldTotalUnits)
	return u
}

// ClearTotalUnits clears the value of the "total_units" field.
func (u *GoodCoinAchievementUpsert) ClearTotalUnits() *GoodCoinAchievementUpsert {
	u.SetNull(goodcoinachievement.FieldTotalUnits)
	return u
}

// SetSelfUnits sets the "self_units" field.
func (u *GoodCoinAchievementUpsert) SetSelfUnits(v decimal.Decimal) *GoodCoinAchievementUpsert {
	u.Set(goodcoinachievement.FieldSelfUnits, v)
	return u
}

// UpdateSelfUnits sets the "self_units" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsert) UpdateSelfUnits() *GoodCoinAchievementUpsert {
	u.SetExcluded(goodcoinachievement.FieldSelfUnits)
	return u
}

// ClearSelfUnits clears the value of the "self_units" field.
func (u *GoodCoinAchievementUpsert) ClearSelfUnits() *GoodCoinAchievementUpsert {
	u.SetNull(goodcoinachievement.FieldSelfUnits)
	return u
}

// SetTotalAmountUsd sets the "total_amount_usd" field.
func (u *GoodCoinAchievementUpsert) SetTotalAmountUsd(v decimal.Decimal) *GoodCoinAchievementUpsert {
	u.Set(goodcoinachievement.FieldTotalAmountUsd, v)
	return u
}

// UpdateTotalAmountUsd sets the "total_amount_usd" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsert) UpdateTotalAmountUsd() *GoodCoinAchievementUpsert {
	u.SetExcluded(goodcoinachievement.FieldTotalAmountUsd)
	return u
}

// ClearTotalAmountUsd clears the value of the "total_amount_usd" field.
func (u *GoodCoinAchievementUpsert) ClearTotalAmountUsd() *GoodCoinAchievementUpsert {
	u.SetNull(goodcoinachievement.FieldTotalAmountUsd)
	return u
}

// SetSelfAmountUsd sets the "self_amount_usd" field.
func (u *GoodCoinAchievementUpsert) SetSelfAmountUsd(v decimal.Decimal) *GoodCoinAchievementUpsert {
	u.Set(goodcoinachievement.FieldSelfAmountUsd, v)
	return u
}

// UpdateSelfAmountUsd sets the "self_amount_usd" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsert) UpdateSelfAmountUsd() *GoodCoinAchievementUpsert {
	u.SetExcluded(goodcoinachievement.FieldSelfAmountUsd)
	return u
}

// ClearSelfAmountUsd clears the value of the "self_amount_usd" field.
func (u *GoodCoinAchievementUpsert) ClearSelfAmountUsd() *GoodCoinAchievementUpsert {
	u.SetNull(goodcoinachievement.FieldSelfAmountUsd)
	return u
}

// SetTotalCommissionUsd sets the "total_commission_usd" field.
func (u *GoodCoinAchievementUpsert) SetTotalCommissionUsd(v decimal.Decimal) *GoodCoinAchievementUpsert {
	u.Set(goodcoinachievement.FieldTotalCommissionUsd, v)
	return u
}

// UpdateTotalCommissionUsd sets the "total_commission_usd" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsert) UpdateTotalCommissionUsd() *GoodCoinAchievementUpsert {
	u.SetExcluded(goodcoinachievement.FieldTotalCommissionUsd)
	return u
}

// ClearTotalCommissionUsd clears the value of the "total_commission_usd" field.
func (u *GoodCoinAchievementUpsert) ClearTotalCommissionUsd() *GoodCoinAchievementUpsert {
	u.SetNull(goodcoinachievement.FieldTotalCommissionUsd)
	return u
}

// SetSelfCommissionUsd sets the "self_commission_usd" field.
func (u *GoodCoinAchievementUpsert) SetSelfCommissionUsd(v decimal.Decimal) *GoodCoinAchievementUpsert {
	u.Set(goodcoinachievement.FieldSelfCommissionUsd, v)
	return u
}

// UpdateSelfCommissionUsd sets the "self_commission_usd" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsert) UpdateSelfCommissionUsd() *GoodCoinAchievementUpsert {
	u.SetExcluded(goodcoinachievement.FieldSelfCommissionUsd)
	return u
}

// ClearSelfCommissionUsd clears the value of the "self_commission_usd" field.
func (u *GoodCoinAchievementUpsert) ClearSelfCommissionUsd() *GoodCoinAchievementUpsert {
	u.SetNull(goodcoinachievement.FieldSelfCommissionUsd)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GoodCoinAchievement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodcoinachievement.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GoodCoinAchievementUpsertOne) UpdateNewValues() *GoodCoinAchievementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(goodcoinachievement.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodCoinAchievement.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GoodCoinAchievementUpsertOne) Ignore() *GoodCoinAchievementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodCoinAchievementUpsertOne) DoNothing() *GoodCoinAchievementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodCoinAchievementCreate.OnConflict
// documentation for more info.
func (u *GoodCoinAchievementUpsertOne) Update(set func(*GoodCoinAchievementUpsert)) *GoodCoinAchievementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodCoinAchievementUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodCoinAchievementUpsertOne) SetCreatedAt(v uint32) *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodCoinAchievementUpsertOne) AddCreatedAt(v uint32) *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsertOne) UpdateCreatedAt() *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodCoinAchievementUpsertOne) SetUpdatedAt(v uint32) *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodCoinAchievementUpsertOne) AddUpdatedAt(v uint32) *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsertOne) UpdateUpdatedAt() *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodCoinAchievementUpsertOne) SetDeletedAt(v uint32) *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodCoinAchievementUpsertOne) AddDeletedAt(v uint32) *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsertOne) UpdateDeletedAt() *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *GoodCoinAchievementUpsertOne) SetEntID(v uuid.UUID) *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsertOne) UpdateEntID() *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *GoodCoinAchievementUpsertOne) SetAppID(v uuid.UUID) *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsertOne) UpdateAppID() *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *GoodCoinAchievementUpsertOne) ClearAppID() *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *GoodCoinAchievementUpsertOne) SetUserID(v uuid.UUID) *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsertOne) UpdateUserID() *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *GoodCoinAchievementUpsertOne) ClearUserID() *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.ClearUserID()
	})
}

// SetGoodCoinTypeID sets the "good_coin_type_id" field.
func (u *GoodCoinAchievementUpsertOne) SetGoodCoinTypeID(v uuid.UUID) *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.SetGoodCoinTypeID(v)
	})
}

// UpdateGoodCoinTypeID sets the "good_coin_type_id" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsertOne) UpdateGoodCoinTypeID() *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.UpdateGoodCoinTypeID()
	})
}

// ClearGoodCoinTypeID clears the value of the "good_coin_type_id" field.
func (u *GoodCoinAchievementUpsertOne) ClearGoodCoinTypeID() *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.ClearGoodCoinTypeID()
	})
}

// SetTotalUnits sets the "total_units" field.
func (u *GoodCoinAchievementUpsertOne) SetTotalUnits(v decimal.Decimal) *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.SetTotalUnits(v)
	})
}

// UpdateTotalUnits sets the "total_units" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsertOne) UpdateTotalUnits() *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.UpdateTotalUnits()
	})
}

// ClearTotalUnits clears the value of the "total_units" field.
func (u *GoodCoinAchievementUpsertOne) ClearTotalUnits() *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.ClearTotalUnits()
	})
}

// SetSelfUnits sets the "self_units" field.
func (u *GoodCoinAchievementUpsertOne) SetSelfUnits(v decimal.Decimal) *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.SetSelfUnits(v)
	})
}

// UpdateSelfUnits sets the "self_units" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsertOne) UpdateSelfUnits() *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.UpdateSelfUnits()
	})
}

// ClearSelfUnits clears the value of the "self_units" field.
func (u *GoodCoinAchievementUpsertOne) ClearSelfUnits() *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.ClearSelfUnits()
	})
}

// SetTotalAmountUsd sets the "total_amount_usd" field.
func (u *GoodCoinAchievementUpsertOne) SetTotalAmountUsd(v decimal.Decimal) *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.SetTotalAmountUsd(v)
	})
}

// UpdateTotalAmountUsd sets the "total_amount_usd" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsertOne) UpdateTotalAmountUsd() *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.UpdateTotalAmountUsd()
	})
}

// ClearTotalAmountUsd clears the value of the "total_amount_usd" field.
func (u *GoodCoinAchievementUpsertOne) ClearTotalAmountUsd() *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.ClearTotalAmountUsd()
	})
}

// SetSelfAmountUsd sets the "self_amount_usd" field.
func (u *GoodCoinAchievementUpsertOne) SetSelfAmountUsd(v decimal.Decimal) *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.SetSelfAmountUsd(v)
	})
}

// UpdateSelfAmountUsd sets the "self_amount_usd" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsertOne) UpdateSelfAmountUsd() *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.UpdateSelfAmountUsd()
	})
}

// ClearSelfAmountUsd clears the value of the "self_amount_usd" field.
func (u *GoodCoinAchievementUpsertOne) ClearSelfAmountUsd() *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.ClearSelfAmountUsd()
	})
}

// SetTotalCommissionUsd sets the "total_commission_usd" field.
func (u *GoodCoinAchievementUpsertOne) SetTotalCommissionUsd(v decimal.Decimal) *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.SetTotalCommissionUsd(v)
	})
}

// UpdateTotalCommissionUsd sets the "total_commission_usd" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsertOne) UpdateTotalCommissionUsd() *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.UpdateTotalCommissionUsd()
	})
}

// ClearTotalCommissionUsd clears the value of the "total_commission_usd" field.
func (u *GoodCoinAchievementUpsertOne) ClearTotalCommissionUsd() *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.ClearTotalCommissionUsd()
	})
}

// SetSelfCommissionUsd sets the "self_commission_usd" field.
func (u *GoodCoinAchievementUpsertOne) SetSelfCommissionUsd(v decimal.Decimal) *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.SetSelfCommissionUsd(v)
	})
}

// UpdateSelfCommissionUsd sets the "self_commission_usd" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsertOne) UpdateSelfCommissionUsd() *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.UpdateSelfCommissionUsd()
	})
}

// ClearSelfCommissionUsd clears the value of the "self_commission_usd" field.
func (u *GoodCoinAchievementUpsertOne) ClearSelfCommissionUsd() *GoodCoinAchievementUpsertOne {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.ClearSelfCommissionUsd()
	})
}

// Exec executes the query.
func (u *GoodCoinAchievementUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for GoodCoinAchievementCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodCoinAchievementUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GoodCoinAchievementUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GoodCoinAchievementUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GoodCoinAchievementCreateBulk is the builder for creating many GoodCoinAchievement entities in bulk.
type GoodCoinAchievementCreateBulk struct {
	config
	err      error
	builders []*GoodCoinAchievementCreate
	conflict []sql.ConflictOption
}

// Save creates the GoodCoinAchievement entities in the database.
func (gcacb *GoodCoinAchievementCreateBulk) Save(ctx context.Context) ([]*GoodCoinAchievement, error) {
	if gcacb.err != nil {
		return nil, gcacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gcacb.builders))
	nodes := make([]*GoodCoinAchievement, len(gcacb.builders))
	mutators := make([]Mutator, len(gcacb.builders))
	for i := range gcacb.builders {
		func(i int, root context.Context) {
			builder := gcacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodCoinAchievementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gcacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcacb *GoodCoinAchievementCreateBulk) SaveX(ctx context.Context) []*GoodCoinAchievement {
	v, err := gcacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcacb *GoodCoinAchievementCreateBulk) Exec(ctx context.Context) error {
	_, err := gcacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcacb *GoodCoinAchievementCreateBulk) ExecX(ctx context.Context) {
	if err := gcacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodCoinAchievement.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodCoinAchievementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (gcacb *GoodCoinAchievementCreateBulk) OnConflict(opts ...sql.ConflictOption) *GoodCoinAchievementUpsertBulk {
	gcacb.conflict = opts
	return &GoodCoinAchievementUpsertBulk{
		create: gcacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodCoinAchievement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gcacb *GoodCoinAchievementCreateBulk) OnConflictColumns(columns ...string) *GoodCoinAchievementUpsertBulk {
	gcacb.conflict = append(gcacb.conflict, sql.ConflictColumns(columns...))
	return &GoodCoinAchievementUpsertBulk{
		create: gcacb,
	}
}

// GoodCoinAchievementUpsertBulk is the builder for "upsert"-ing
// a bulk of GoodCoinAchievement nodes.
type GoodCoinAchievementUpsertBulk struct {
	create *GoodCoinAchievementCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GoodCoinAchievement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodcoinachievement.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GoodCoinAchievementUpsertBulk) UpdateNewValues() *GoodCoinAchievementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(goodcoinachievement.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodCoinAchievement.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GoodCoinAchievementUpsertBulk) Ignore() *GoodCoinAchievementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodCoinAchievementUpsertBulk) DoNothing() *GoodCoinAchievementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodCoinAchievementCreateBulk.OnConflict
// documentation for more info.
func (u *GoodCoinAchievementUpsertBulk) Update(set func(*GoodCoinAchievementUpsert)) *GoodCoinAchievementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodCoinAchievementUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodCoinAchievementUpsertBulk) SetCreatedAt(v uint32) *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodCoinAchievementUpsertBulk) AddCreatedAt(v uint32) *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsertBulk) UpdateCreatedAt() *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodCoinAchievementUpsertBulk) SetUpdatedAt(v uint32) *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodCoinAchievementUpsertBulk) AddUpdatedAt(v uint32) *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsertBulk) UpdateUpdatedAt() *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodCoinAchievementUpsertBulk) SetDeletedAt(v uint32) *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodCoinAchievementUpsertBulk) AddDeletedAt(v uint32) *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsertBulk) UpdateDeletedAt() *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *GoodCoinAchievementUpsertBulk) SetEntID(v uuid.UUID) *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsertBulk) UpdateEntID() *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *GoodCoinAchievementUpsertBulk) SetAppID(v uuid.UUID) *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsertBulk) UpdateAppID() *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *GoodCoinAchievementUpsertBulk) ClearAppID() *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *GoodCoinAchievementUpsertBulk) SetUserID(v uuid.UUID) *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsertBulk) UpdateUserID() *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *GoodCoinAchievementUpsertBulk) ClearUserID() *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.ClearUserID()
	})
}

// SetGoodCoinTypeID sets the "good_coin_type_id" field.
func (u *GoodCoinAchievementUpsertBulk) SetGoodCoinTypeID(v uuid.UUID) *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.SetGoodCoinTypeID(v)
	})
}

// UpdateGoodCoinTypeID sets the "good_coin_type_id" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsertBulk) UpdateGoodCoinTypeID() *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.UpdateGoodCoinTypeID()
	})
}

// ClearGoodCoinTypeID clears the value of the "good_coin_type_id" field.
func (u *GoodCoinAchievementUpsertBulk) ClearGoodCoinTypeID() *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.ClearGoodCoinTypeID()
	})
}

// SetTotalUnits sets the "total_units" field.
func (u *GoodCoinAchievementUpsertBulk) SetTotalUnits(v decimal.Decimal) *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.SetTotalUnits(v)
	})
}

// UpdateTotalUnits sets the "total_units" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsertBulk) UpdateTotalUnits() *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.UpdateTotalUnits()
	})
}

// ClearTotalUnits clears the value of the "total_units" field.
func (u *GoodCoinAchievementUpsertBulk) ClearTotalUnits() *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.ClearTotalUnits()
	})
}

// SetSelfUnits sets the "self_units" field.
func (u *GoodCoinAchievementUpsertBulk) SetSelfUnits(v decimal.Decimal) *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.SetSelfUnits(v)
	})
}

// UpdateSelfUnits sets the "self_units" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsertBulk) UpdateSelfUnits() *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.UpdateSelfUnits()
	})
}

// ClearSelfUnits clears the value of the "self_units" field.
func (u *GoodCoinAchievementUpsertBulk) ClearSelfUnits() *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.ClearSelfUnits()
	})
}

// SetTotalAmountUsd sets the "total_amount_usd" field.
func (u *GoodCoinAchievementUpsertBulk) SetTotalAmountUsd(v decimal.Decimal) *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.SetTotalAmountUsd(v)
	})
}

// UpdateTotalAmountUsd sets the "total_amount_usd" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsertBulk) UpdateTotalAmountUsd() *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.UpdateTotalAmountUsd()
	})
}

// ClearTotalAmountUsd clears the value of the "total_amount_usd" field.
func (u *GoodCoinAchievementUpsertBulk) ClearTotalAmountUsd() *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.ClearTotalAmountUsd()
	})
}

// SetSelfAmountUsd sets the "self_amount_usd" field.
func (u *GoodCoinAchievementUpsertBulk) SetSelfAmountUsd(v decimal.Decimal) *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.SetSelfAmountUsd(v)
	})
}

// UpdateSelfAmountUsd sets the "self_amount_usd" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsertBulk) UpdateSelfAmountUsd() *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.UpdateSelfAmountUsd()
	})
}

// ClearSelfAmountUsd clears the value of the "self_amount_usd" field.
func (u *GoodCoinAchievementUpsertBulk) ClearSelfAmountUsd() *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.ClearSelfAmountUsd()
	})
}

// SetTotalCommissionUsd sets the "total_commission_usd" field.
func (u *GoodCoinAchievementUpsertBulk) SetTotalCommissionUsd(v decimal.Decimal) *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.SetTotalCommissionUsd(v)
	})
}

// UpdateTotalCommissionUsd sets the "total_commission_usd" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsertBulk) UpdateTotalCommissionUsd() *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.UpdateTotalCommissionUsd()
	})
}

// ClearTotalCommissionUsd clears the value of the "total_commission_usd" field.
func (u *GoodCoinAchievementUpsertBulk) ClearTotalCommissionUsd() *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.ClearTotalCommissionUsd()
	})
}

// SetSelfCommissionUsd sets the "self_commission_usd" field.
func (u *GoodCoinAchievementUpsertBulk) SetSelfCommissionUsd(v decimal.Decimal) *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.SetSelfCommissionUsd(v)
	})
}

// UpdateSelfCommissionUsd sets the "self_commission_usd" field to the value that was provided on create.
func (u *GoodCoinAchievementUpsertBulk) UpdateSelfCommissionUsd() *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.UpdateSelfCommissionUsd()
	})
}

// ClearSelfCommissionUsd clears the value of the "self_commission_usd" field.
func (u *GoodCoinAchievementUpsertBulk) ClearSelfCommissionUsd() *GoodCoinAchievementUpsertBulk {
	return u.Update(func(s *GoodCoinAchievementUpsert) {
		s.ClearSelfCommissionUsd()
	})
}

// Exec executes the query.
func (u *GoodCoinAchievementUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the GoodCoinAchievementCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for GoodCoinAchievementCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodCoinAchievementUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

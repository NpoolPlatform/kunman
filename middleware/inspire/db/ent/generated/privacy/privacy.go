// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"

	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated"

	"entgo.io/ent/entql"
	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns a formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return privacy.Allowf(format, a...)
}

// Denyf returns a formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return privacy.Denyf(format, a...)
}

// Skipf returns a formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return privacy.Skipf(format, a...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
	// MutationRuleFunc type is an adapter which allows the use of
	// ordinary functions as mutation rules.
	MutationRuleFunc = privacy.MutationRuleFunc

	// QueryMutationRule is an interface which groups query and mutation rules.
	QueryMutationRule = privacy.QueryMutationRule
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, generated.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	return f(ctx, q)
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return privacy.AlwaysAllowRule()
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return privacy.AlwaysDenyRule()
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return privacy.ContextQueryMutationRule(eval)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op generated.Op) MutationRule {
	return privacy.OnMutationOperation(rule, op)
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op generated.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m generated.Mutation) error {
		return Denyf("generated/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The AchievementQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AchievementQueryRuleFunc func(context.Context, *generated.AchievementQuery) error

// EvalQuery return f(ctx, q).
func (f AchievementQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AchievementQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AchievementQuery", q)
}

// The AchievementMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AchievementMutationRuleFunc func(context.Context, *generated.AchievementMutation) error

// EvalMutation calls f(ctx, m).
func (f AchievementMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AchievementMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AchievementMutation", m)
}

// The AchievementUserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AchievementUserQueryRuleFunc func(context.Context, *generated.AchievementUserQuery) error

// EvalQuery return f(ctx, q).
func (f AchievementUserQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AchievementUserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AchievementUserQuery", q)
}

// The AchievementUserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AchievementUserMutationRuleFunc func(context.Context, *generated.AchievementUserMutation) error

// EvalMutation calls f(ctx, m).
func (f AchievementUserMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AchievementUserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AchievementUserMutation", m)
}

// The AppCommissionConfigQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppCommissionConfigQueryRuleFunc func(context.Context, *generated.AppCommissionConfigQuery) error

// EvalQuery return f(ctx, q).
func (f AppCommissionConfigQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppCommissionConfigQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppCommissionConfigQuery", q)
}

// The AppCommissionConfigMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppCommissionConfigMutationRuleFunc func(context.Context, *generated.AppCommissionConfigMutation) error

// EvalMutation calls f(ctx, m).
func (f AppCommissionConfigMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppCommissionConfigMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppCommissionConfigMutation", m)
}

// The AppConfigQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppConfigQueryRuleFunc func(context.Context, *generated.AppConfigQuery) error

// EvalQuery return f(ctx, q).
func (f AppConfigQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppConfigQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppConfigQuery", q)
}

// The AppConfigMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppConfigMutationRuleFunc func(context.Context, *generated.AppConfigMutation) error

// EvalMutation calls f(ctx, m).
func (f AppConfigMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppConfigMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppConfigMutation", m)
}

// The AppGoodCommissionConfigQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppGoodCommissionConfigQueryRuleFunc func(context.Context, *generated.AppGoodCommissionConfigQuery) error

// EvalQuery return f(ctx, q).
func (f AppGoodCommissionConfigQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppGoodCommissionConfigQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppGoodCommissionConfigQuery", q)
}

// The AppGoodCommissionConfigMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppGoodCommissionConfigMutationRuleFunc func(context.Context, *generated.AppGoodCommissionConfigMutation) error

// EvalMutation calls f(ctx, m).
func (f AppGoodCommissionConfigMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppGoodCommissionConfigMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppGoodCommissionConfigMutation", m)
}

// The AppGoodScopeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppGoodScopeQueryRuleFunc func(context.Context, *generated.AppGoodScopeQuery) error

// EvalQuery return f(ctx, q).
func (f AppGoodScopeQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppGoodScopeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppGoodScopeQuery", q)
}

// The AppGoodScopeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppGoodScopeMutationRuleFunc func(context.Context, *generated.AppGoodScopeMutation) error

// EvalMutation calls f(ctx, m).
func (f AppGoodScopeMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppGoodScopeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppGoodScopeMutation", m)
}

// The CashControlQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CashControlQueryRuleFunc func(context.Context, *generated.CashControlQuery) error

// EvalQuery return f(ctx, q).
func (f CashControlQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.CashControlQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.CashControlQuery", q)
}

// The CashControlMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CashControlMutationRuleFunc func(context.Context, *generated.CashControlMutation) error

// EvalMutation calls f(ctx, m).
func (f CashControlMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.CashControlMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.CashControlMutation", m)
}

// The CoinAllocatedQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CoinAllocatedQueryRuleFunc func(context.Context, *generated.CoinAllocatedQuery) error

// EvalQuery return f(ctx, q).
func (f CoinAllocatedQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.CoinAllocatedQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.CoinAllocatedQuery", q)
}

// The CoinAllocatedMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CoinAllocatedMutationRuleFunc func(context.Context, *generated.CoinAllocatedMutation) error

// EvalMutation calls f(ctx, m).
func (f CoinAllocatedMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.CoinAllocatedMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.CoinAllocatedMutation", m)
}

// The CoinConfigQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CoinConfigQueryRuleFunc func(context.Context, *generated.CoinConfigQuery) error

// EvalQuery return f(ctx, q).
func (f CoinConfigQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.CoinConfigQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.CoinConfigQuery", q)
}

// The CoinConfigMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CoinConfigMutationRuleFunc func(context.Context, *generated.CoinConfigMutation) error

// EvalMutation calls f(ctx, m).
func (f CoinConfigMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.CoinConfigMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.CoinConfigMutation", m)
}

// The CommissionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CommissionQueryRuleFunc func(context.Context, *generated.CommissionQuery) error

// EvalQuery return f(ctx, q).
func (f CommissionQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.CommissionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.CommissionQuery", q)
}

// The CommissionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CommissionMutationRuleFunc func(context.Context, *generated.CommissionMutation) error

// EvalMutation calls f(ctx, m).
func (f CommissionMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.CommissionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.CommissionMutation", m)
}

// The CouponQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CouponQueryRuleFunc func(context.Context, *generated.CouponQuery) error

// EvalQuery return f(ctx, q).
func (f CouponQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.CouponQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.CouponQuery", q)
}

// The CouponMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CouponMutationRuleFunc func(context.Context, *generated.CouponMutation) error

// EvalMutation calls f(ctx, m).
func (f CouponMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.CouponMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.CouponMutation", m)
}

// The CouponAllocatedQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CouponAllocatedQueryRuleFunc func(context.Context, *generated.CouponAllocatedQuery) error

// EvalQuery return f(ctx, q).
func (f CouponAllocatedQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.CouponAllocatedQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.CouponAllocatedQuery", q)
}

// The CouponAllocatedMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CouponAllocatedMutationRuleFunc func(context.Context, *generated.CouponAllocatedMutation) error

// EvalMutation calls f(ctx, m).
func (f CouponAllocatedMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.CouponAllocatedMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.CouponAllocatedMutation", m)
}

// The CouponScopeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CouponScopeQueryRuleFunc func(context.Context, *generated.CouponScopeQuery) error

// EvalQuery return f(ctx, q).
func (f CouponScopeQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.CouponScopeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.CouponScopeQuery", q)
}

// The CouponScopeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CouponScopeMutationRuleFunc func(context.Context, *generated.CouponScopeMutation) error

// EvalMutation calls f(ctx, m).
func (f CouponScopeMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.CouponScopeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.CouponScopeMutation", m)
}

// The CreditAllocatedQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CreditAllocatedQueryRuleFunc func(context.Context, *generated.CreditAllocatedQuery) error

// EvalQuery return f(ctx, q).
func (f CreditAllocatedQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.CreditAllocatedQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.CreditAllocatedQuery", q)
}

// The CreditAllocatedMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CreditAllocatedMutationRuleFunc func(context.Context, *generated.CreditAllocatedMutation) error

// EvalMutation calls f(ctx, m).
func (f CreditAllocatedMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.CreditAllocatedMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.CreditAllocatedMutation", m)
}

// The EventQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EventQueryRuleFunc func(context.Context, *generated.EventQuery) error

// EvalQuery return f(ctx, q).
func (f EventQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EventQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.EventQuery", q)
}

// The EventMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EventMutationRuleFunc func(context.Context, *generated.EventMutation) error

// EvalMutation calls f(ctx, m).
func (f EventMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.EventMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.EventMutation", m)
}

// The EventCoinQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EventCoinQueryRuleFunc func(context.Context, *generated.EventCoinQuery) error

// EvalQuery return f(ctx, q).
func (f EventCoinQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EventCoinQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.EventCoinQuery", q)
}

// The EventCoinMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EventCoinMutationRuleFunc func(context.Context, *generated.EventCoinMutation) error

// EvalMutation calls f(ctx, m).
func (f EventCoinMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.EventCoinMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.EventCoinMutation", m)
}

// The EventCouponQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EventCouponQueryRuleFunc func(context.Context, *generated.EventCouponQuery) error

// EvalQuery return f(ctx, q).
func (f EventCouponQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EventCouponQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.EventCouponQuery", q)
}

// The EventCouponMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EventCouponMutationRuleFunc func(context.Context, *generated.EventCouponMutation) error

// EvalMutation calls f(ctx, m).
func (f EventCouponMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.EventCouponMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.EventCouponMutation", m)
}

// The GoodAchievementQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GoodAchievementQueryRuleFunc func(context.Context, *generated.GoodAchievementQuery) error

// EvalQuery return f(ctx, q).
func (f GoodAchievementQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.GoodAchievementQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.GoodAchievementQuery", q)
}

// The GoodAchievementMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GoodAchievementMutationRuleFunc func(context.Context, *generated.GoodAchievementMutation) error

// EvalMutation calls f(ctx, m).
func (f GoodAchievementMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.GoodAchievementMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.GoodAchievementMutation", m)
}

// The GoodCoinAchievementQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GoodCoinAchievementQueryRuleFunc func(context.Context, *generated.GoodCoinAchievementQuery) error

// EvalQuery return f(ctx, q).
func (f GoodCoinAchievementQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.GoodCoinAchievementQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.GoodCoinAchievementQuery", q)
}

// The GoodCoinAchievementMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GoodCoinAchievementMutationRuleFunc func(context.Context, *generated.GoodCoinAchievementMutation) error

// EvalMutation calls f(ctx, m).
func (f GoodCoinAchievementMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.GoodCoinAchievementMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.GoodCoinAchievementMutation", m)
}

// The InvitationCodeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type InvitationCodeQueryRuleFunc func(context.Context, *generated.InvitationCodeQuery) error

// EvalQuery return f(ctx, q).
func (f InvitationCodeQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.InvitationCodeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.InvitationCodeQuery", q)
}

// The InvitationCodeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type InvitationCodeMutationRuleFunc func(context.Context, *generated.InvitationCodeMutation) error

// EvalMutation calls f(ctx, m).
func (f InvitationCodeMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.InvitationCodeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.InvitationCodeMutation", m)
}

// The OrderPaymentStatementQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrderPaymentStatementQueryRuleFunc func(context.Context, *generated.OrderPaymentStatementQuery) error

// EvalQuery return f(ctx, q).
func (f OrderPaymentStatementQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OrderPaymentStatementQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.OrderPaymentStatementQuery", q)
}

// The OrderPaymentStatementMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrderPaymentStatementMutationRuleFunc func(context.Context, *generated.OrderPaymentStatementMutation) error

// EvalMutation calls f(ctx, m).
func (f OrderPaymentStatementMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.OrderPaymentStatementMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.OrderPaymentStatementMutation", m)
}

// The OrderStatementQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrderStatementQueryRuleFunc func(context.Context, *generated.OrderStatementQuery) error

// EvalQuery return f(ctx, q).
func (f OrderStatementQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OrderStatementQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.OrderStatementQuery", q)
}

// The OrderStatementMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrderStatementMutationRuleFunc func(context.Context, *generated.OrderStatementMutation) error

// EvalMutation calls f(ctx, m).
func (f OrderStatementMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.OrderStatementMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.OrderStatementMutation", m)
}

// The RegistrationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RegistrationQueryRuleFunc func(context.Context, *generated.RegistrationQuery) error

// EvalQuery return f(ctx, q).
func (f RegistrationQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.RegistrationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.RegistrationQuery", q)
}

// The RegistrationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RegistrationMutationRuleFunc func(context.Context, *generated.RegistrationMutation) error

// EvalMutation calls f(ctx, m).
func (f RegistrationMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.RegistrationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.RegistrationMutation", m)
}

// The StatementQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type StatementQueryRuleFunc func(context.Context, *generated.StatementQuery) error

// EvalQuery return f(ctx, q).
func (f StatementQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.StatementQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.StatementQuery", q)
}

// The StatementMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type StatementMutationRuleFunc func(context.Context, *generated.StatementMutation) error

// EvalMutation calls f(ctx, m).
func (f StatementMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.StatementMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.StatementMutation", m)
}

// The TaskConfigQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TaskConfigQueryRuleFunc func(context.Context, *generated.TaskConfigQuery) error

// EvalQuery return f(ctx, q).
func (f TaskConfigQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.TaskConfigQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.TaskConfigQuery", q)
}

// The TaskConfigMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TaskConfigMutationRuleFunc func(context.Context, *generated.TaskConfigMutation) error

// EvalMutation calls f(ctx, m).
func (f TaskConfigMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.TaskConfigMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.TaskConfigMutation", m)
}

// The TaskUserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TaskUserQueryRuleFunc func(context.Context, *generated.TaskUserQuery) error

// EvalQuery return f(ctx, q).
func (f TaskUserQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.TaskUserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.TaskUserQuery", q)
}

// The TaskUserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TaskUserMutationRuleFunc func(context.Context, *generated.TaskUserMutation) error

// EvalMutation calls f(ctx, m).
func (f TaskUserMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.TaskUserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.TaskUserMutation", m)
}

// The UserCoinRewardQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserCoinRewardQueryRuleFunc func(context.Context, *generated.UserCoinRewardQuery) error

// EvalQuery return f(ctx, q).
func (f UserCoinRewardQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.UserCoinRewardQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.UserCoinRewardQuery", q)
}

// The UserCoinRewardMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserCoinRewardMutationRuleFunc func(context.Context, *generated.UserCoinRewardMutation) error

// EvalMutation calls f(ctx, m).
func (f UserCoinRewardMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.UserCoinRewardMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.UserCoinRewardMutation", m)
}

// The UserRewardQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserRewardQueryRuleFunc func(context.Context, *generated.UserRewardQuery) error

// EvalQuery return f(ctx, q).
func (f UserRewardQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.UserRewardQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.UserRewardQuery", q)
}

// The UserRewardMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserRewardMutationRuleFunc func(context.Context, *generated.UserRewardMutation) error

// EvalMutation calls f(ctx, m).
func (f UserRewardMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.UserRewardMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.UserRewardMutation", m)
}

type (
	// Filter is the interface that wraps the Where function
	// for filtering nodes in queries and mutations.
	Filter interface {
		// Where applies a filter on the executed query/mutation.
		Where(entql.P)
	}

	// The FilterFunc type is an adapter that allows the use of ordinary
	// functions as filters for query and mutation types.
	FilterFunc func(context.Context, Filter) error
)

// EvalQuery calls f(ctx, q) if the query implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	fr, err := queryFilter(q)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

// EvalMutation calls f(ctx, q) if the mutation implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	fr, err := mutationFilter(m)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

var _ QueryMutationRule = FilterFunc(nil)

func queryFilter(q generated.Query) (Filter, error) {
	switch q := q.(type) {
	case *generated.AchievementQuery:
		return q.Filter(), nil
	case *generated.AchievementUserQuery:
		return q.Filter(), nil
	case *generated.AppCommissionConfigQuery:
		return q.Filter(), nil
	case *generated.AppConfigQuery:
		return q.Filter(), nil
	case *generated.AppGoodCommissionConfigQuery:
		return q.Filter(), nil
	case *generated.AppGoodScopeQuery:
		return q.Filter(), nil
	case *generated.CashControlQuery:
		return q.Filter(), nil
	case *generated.CoinAllocatedQuery:
		return q.Filter(), nil
	case *generated.CoinConfigQuery:
		return q.Filter(), nil
	case *generated.CommissionQuery:
		return q.Filter(), nil
	case *generated.CouponQuery:
		return q.Filter(), nil
	case *generated.CouponAllocatedQuery:
		return q.Filter(), nil
	case *generated.CouponScopeQuery:
		return q.Filter(), nil
	case *generated.CreditAllocatedQuery:
		return q.Filter(), nil
	case *generated.EventQuery:
		return q.Filter(), nil
	case *generated.EventCoinQuery:
		return q.Filter(), nil
	case *generated.EventCouponQuery:
		return q.Filter(), nil
	case *generated.GoodAchievementQuery:
		return q.Filter(), nil
	case *generated.GoodCoinAchievementQuery:
		return q.Filter(), nil
	case *generated.InvitationCodeQuery:
		return q.Filter(), nil
	case *generated.OrderPaymentStatementQuery:
		return q.Filter(), nil
	case *generated.OrderStatementQuery:
		return q.Filter(), nil
	case *generated.RegistrationQuery:
		return q.Filter(), nil
	case *generated.StatementQuery:
		return q.Filter(), nil
	case *generated.TaskConfigQuery:
		return q.Filter(), nil
	case *generated.TaskUserQuery:
		return q.Filter(), nil
	case *generated.UserCoinRewardQuery:
		return q.Filter(), nil
	case *generated.UserRewardQuery:
		return q.Filter(), nil
	default:
		return nil, Denyf("generated/privacy: unexpected query type %T for query filter", q)
	}
}

func mutationFilter(m generated.Mutation) (Filter, error) {
	switch m := m.(type) {
	case *generated.AchievementMutation:
		return m.Filter(), nil
	case *generated.AchievementUserMutation:
		return m.Filter(), nil
	case *generated.AppCommissionConfigMutation:
		return m.Filter(), nil
	case *generated.AppConfigMutation:
		return m.Filter(), nil
	case *generated.AppGoodCommissionConfigMutation:
		return m.Filter(), nil
	case *generated.AppGoodScopeMutation:
		return m.Filter(), nil
	case *generated.CashControlMutation:
		return m.Filter(), nil
	case *generated.CoinAllocatedMutation:
		return m.Filter(), nil
	case *generated.CoinConfigMutation:
		return m.Filter(), nil
	case *generated.CommissionMutation:
		return m.Filter(), nil
	case *generated.CouponMutation:
		return m.Filter(), nil
	case *generated.CouponAllocatedMutation:
		return m.Filter(), nil
	case *generated.CouponScopeMutation:
		return m.Filter(), nil
	case *generated.CreditAllocatedMutation:
		return m.Filter(), nil
	case *generated.EventMutation:
		return m.Filter(), nil
	case *generated.EventCoinMutation:
		return m.Filter(), nil
	case *generated.EventCouponMutation:
		return m.Filter(), nil
	case *generated.GoodAchievementMutation:
		return m.Filter(), nil
	case *generated.GoodCoinAchievementMutation:
		return m.Filter(), nil
	case *generated.InvitationCodeMutation:
		return m.Filter(), nil
	case *generated.OrderPaymentStatementMutation:
		return m.Filter(), nil
	case *generated.OrderStatementMutation:
		return m.Filter(), nil
	case *generated.RegistrationMutation:
		return m.Filter(), nil
	case *generated.StatementMutation:
		return m.Filter(), nil
	case *generated.TaskConfigMutation:
		return m.Filter(), nil
	case *generated.TaskUserMutation:
		return m.Filter(), nil
	case *generated.UserCoinRewardMutation:
		return m.Filter(), nil
	case *generated.UserRewardMutation:
		return m.Filter(), nil
	default:
		return nil, Denyf("generated/privacy: unexpected mutation type %T for mutation filter", m)
	}
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/achievement"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AchievementCreate is the builder for creating a Achievement entity.
type AchievementCreate struct {
	config
	mutation *AchievementMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ac *AchievementCreate) SetCreatedAt(u uint32) *AchievementCreate {
	ac.mutation.SetCreatedAt(u)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AchievementCreate) SetNillableCreatedAt(u *uint32) *AchievementCreate {
	if u != nil {
		ac.SetCreatedAt(*u)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AchievementCreate) SetUpdatedAt(u uint32) *AchievementCreate {
	ac.mutation.SetUpdatedAt(u)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AchievementCreate) SetNillableUpdatedAt(u *uint32) *AchievementCreate {
	if u != nil {
		ac.SetUpdatedAt(*u)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AchievementCreate) SetDeletedAt(u uint32) *AchievementCreate {
	ac.mutation.SetDeletedAt(u)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AchievementCreate) SetNillableDeletedAt(u *uint32) *AchievementCreate {
	if u != nil {
		ac.SetDeletedAt(*u)
	}
	return ac
}

// SetEntID sets the "ent_id" field.
func (ac *AchievementCreate) SetEntID(u uuid.UUID) *AchievementCreate {
	ac.mutation.SetEntID(u)
	return ac
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ac *AchievementCreate) SetNillableEntID(u *uuid.UUID) *AchievementCreate {
	if u != nil {
		ac.SetEntID(*u)
	}
	return ac
}

// SetAppID sets the "app_id" field.
func (ac *AchievementCreate) SetAppID(u uuid.UUID) *AchievementCreate {
	ac.mutation.SetAppID(u)
	return ac
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ac *AchievementCreate) SetNillableAppID(u *uuid.UUID) *AchievementCreate {
	if u != nil {
		ac.SetAppID(*u)
	}
	return ac
}

// SetUserID sets the "user_id" field.
func (ac *AchievementCreate) SetUserID(u uuid.UUID) *AchievementCreate {
	ac.mutation.SetUserID(u)
	return ac
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ac *AchievementCreate) SetNillableUserID(u *uuid.UUID) *AchievementCreate {
	if u != nil {
		ac.SetUserID(*u)
	}
	return ac
}

// SetGoodID sets the "good_id" field.
func (ac *AchievementCreate) SetGoodID(u uuid.UUID) *AchievementCreate {
	ac.mutation.SetGoodID(u)
	return ac
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (ac *AchievementCreate) SetNillableGoodID(u *uuid.UUID) *AchievementCreate {
	if u != nil {
		ac.SetGoodID(*u)
	}
	return ac
}

// SetAppGoodID sets the "app_good_id" field.
func (ac *AchievementCreate) SetAppGoodID(u uuid.UUID) *AchievementCreate {
	ac.mutation.SetAppGoodID(u)
	return ac
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (ac *AchievementCreate) SetNillableAppGoodID(u *uuid.UUID) *AchievementCreate {
	if u != nil {
		ac.SetAppGoodID(*u)
	}
	return ac
}

// SetCoinTypeID sets the "coin_type_id" field.
func (ac *AchievementCreate) SetCoinTypeID(u uuid.UUID) *AchievementCreate {
	ac.mutation.SetCoinTypeID(u)
	return ac
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (ac *AchievementCreate) SetNillableCoinTypeID(u *uuid.UUID) *AchievementCreate {
	if u != nil {
		ac.SetCoinTypeID(*u)
	}
	return ac
}

// SetTotalUnitsV1 sets the "total_units_v1" field.
func (ac *AchievementCreate) SetTotalUnitsV1(d decimal.Decimal) *AchievementCreate {
	ac.mutation.SetTotalUnitsV1(d)
	return ac
}

// SetNillableTotalUnitsV1 sets the "total_units_v1" field if the given value is not nil.
func (ac *AchievementCreate) SetNillableTotalUnitsV1(d *decimal.Decimal) *AchievementCreate {
	if d != nil {
		ac.SetTotalUnitsV1(*d)
	}
	return ac
}

// SetSelfUnitsV1 sets the "self_units_v1" field.
func (ac *AchievementCreate) SetSelfUnitsV1(d decimal.Decimal) *AchievementCreate {
	ac.mutation.SetSelfUnitsV1(d)
	return ac
}

// SetNillableSelfUnitsV1 sets the "self_units_v1" field if the given value is not nil.
func (ac *AchievementCreate) SetNillableSelfUnitsV1(d *decimal.Decimal) *AchievementCreate {
	if d != nil {
		ac.SetSelfUnitsV1(*d)
	}
	return ac
}

// SetTotalAmount sets the "total_amount" field.
func (ac *AchievementCreate) SetTotalAmount(d decimal.Decimal) *AchievementCreate {
	ac.mutation.SetTotalAmount(d)
	return ac
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (ac *AchievementCreate) SetNillableTotalAmount(d *decimal.Decimal) *AchievementCreate {
	if d != nil {
		ac.SetTotalAmount(*d)
	}
	return ac
}

// SetSelfAmount sets the "self_amount" field.
func (ac *AchievementCreate) SetSelfAmount(d decimal.Decimal) *AchievementCreate {
	ac.mutation.SetSelfAmount(d)
	return ac
}

// SetNillableSelfAmount sets the "self_amount" field if the given value is not nil.
func (ac *AchievementCreate) SetNillableSelfAmount(d *decimal.Decimal) *AchievementCreate {
	if d != nil {
		ac.SetSelfAmount(*d)
	}
	return ac
}

// SetTotalCommission sets the "total_commission" field.
func (ac *AchievementCreate) SetTotalCommission(d decimal.Decimal) *AchievementCreate {
	ac.mutation.SetTotalCommission(d)
	return ac
}

// SetNillableTotalCommission sets the "total_commission" field if the given value is not nil.
func (ac *AchievementCreate) SetNillableTotalCommission(d *decimal.Decimal) *AchievementCreate {
	if d != nil {
		ac.SetTotalCommission(*d)
	}
	return ac
}

// SetSelfCommission sets the "self_commission" field.
func (ac *AchievementCreate) SetSelfCommission(d decimal.Decimal) *AchievementCreate {
	ac.mutation.SetSelfCommission(d)
	return ac
}

// SetNillableSelfCommission sets the "self_commission" field if the given value is not nil.
func (ac *AchievementCreate) SetNillableSelfCommission(d *decimal.Decimal) *AchievementCreate {
	if d != nil {
		ac.SetSelfCommission(*d)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AchievementCreate) SetID(u uint32) *AchievementCreate {
	ac.mutation.SetID(u)
	return ac
}

// Mutation returns the AchievementMutation object of the builder.
func (ac *AchievementCreate) Mutation() *AchievementMutation {
	return ac.mutation
}

// Save creates the Achievement in the database.
func (ac *AchievementCreate) Save(ctx context.Context) (*Achievement, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AchievementCreate) SaveX(ctx context.Context) *Achievement {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AchievementCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AchievementCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AchievementCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := achievement.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := achievement.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.DeletedAt(); !ok {
		v := achievement.DefaultDeletedAt()
		ac.mutation.SetDeletedAt(v)
	}
	if _, ok := ac.mutation.EntID(); !ok {
		v := achievement.DefaultEntID()
		ac.mutation.SetEntID(v)
	}
	if _, ok := ac.mutation.AppID(); !ok {
		v := achievement.DefaultAppID()
		ac.mutation.SetAppID(v)
	}
	if _, ok := ac.mutation.UserID(); !ok {
		v := achievement.DefaultUserID()
		ac.mutation.SetUserID(v)
	}
	if _, ok := ac.mutation.GoodID(); !ok {
		v := achievement.DefaultGoodID()
		ac.mutation.SetGoodID(v)
	}
	if _, ok := ac.mutation.AppGoodID(); !ok {
		v := achievement.DefaultAppGoodID()
		ac.mutation.SetAppGoodID(v)
	}
	if _, ok := ac.mutation.CoinTypeID(); !ok {
		v := achievement.DefaultCoinTypeID()
		ac.mutation.SetCoinTypeID(v)
	}
	if _, ok := ac.mutation.TotalUnitsV1(); !ok {
		v := achievement.DefaultTotalUnitsV1
		ac.mutation.SetTotalUnitsV1(v)
	}
	if _, ok := ac.mutation.SelfUnitsV1(); !ok {
		v := achievement.DefaultSelfUnitsV1
		ac.mutation.SetSelfUnitsV1(v)
	}
	if _, ok := ac.mutation.TotalAmount(); !ok {
		v := achievement.DefaultTotalAmount
		ac.mutation.SetTotalAmount(v)
	}
	if _, ok := ac.mutation.SelfAmount(); !ok {
		v := achievement.DefaultSelfAmount
		ac.mutation.SetSelfAmount(v)
	}
	if _, ok := ac.mutation.TotalCommission(); !ok {
		v := achievement.DefaultTotalCommission
		ac.mutation.SetTotalCommission(v)
	}
	if _, ok := ac.mutation.SelfCommission(); !ok {
		v := achievement.DefaultSelfCommission
		ac.mutation.SetSelfCommission(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AchievementCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Achievement.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Achievement.updated_at"`)}
	}
	if _, ok := ac.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "Achievement.deleted_at"`)}
	}
	if _, ok := ac.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "Achievement.ent_id"`)}
	}
	return nil
}

func (ac *AchievementCreate) sqlSave(ctx context.Context) (*Achievement, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AchievementCreate) createSpec() (*Achievement, *sqlgraph.CreateSpec) {
	var (
		_node = &Achievement{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(achievement.Table, sqlgraph.NewFieldSpec(achievement.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(achievement.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(achievement.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.SetField(achievement.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := ac.mutation.EntID(); ok {
		_spec.SetField(achievement.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := ac.mutation.AppID(); ok {
		_spec.SetField(achievement.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := ac.mutation.UserID(); ok {
		_spec.SetField(achievement.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := ac.mutation.GoodID(); ok {
		_spec.SetField(achievement.FieldGoodID, field.TypeUUID, value)
		_node.GoodID = value
	}
	if value, ok := ac.mutation.AppGoodID(); ok {
		_spec.SetField(achievement.FieldAppGoodID, field.TypeUUID, value)
		_node.AppGoodID = value
	}
	if value, ok := ac.mutation.CoinTypeID(); ok {
		_spec.SetField(achievement.FieldCoinTypeID, field.TypeUUID, value)
		_node.CoinTypeID = value
	}
	if value, ok := ac.mutation.TotalUnitsV1(); ok {
		_spec.SetField(achievement.FieldTotalUnitsV1, field.TypeOther, value)
		_node.TotalUnitsV1 = value
	}
	if value, ok := ac.mutation.SelfUnitsV1(); ok {
		_spec.SetField(achievement.FieldSelfUnitsV1, field.TypeOther, value)
		_node.SelfUnitsV1 = value
	}
	if value, ok := ac.mutation.TotalAmount(); ok {
		_spec.SetField(achievement.FieldTotalAmount, field.TypeOther, value)
		_node.TotalAmount = value
	}
	if value, ok := ac.mutation.SelfAmount(); ok {
		_spec.SetField(achievement.FieldSelfAmount, field.TypeOther, value)
		_node.SelfAmount = value
	}
	if value, ok := ac.mutation.TotalCommission(); ok {
		_spec.SetField(achievement.FieldTotalCommission, field.TypeOther, value)
		_node.TotalCommission = value
	}
	if value, ok := ac.mutation.SelfCommission(); ok {
		_spec.SetField(achievement.FieldSelfCommission, field.TypeOther, value)
		_node.SelfCommission = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Achievement.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AchievementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ac *AchievementCreate) OnConflict(opts ...sql.ConflictOption) *AchievementUpsertOne {
	ac.conflict = opts
	return &AchievementUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Achievement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AchievementCreate) OnConflictColumns(columns ...string) *AchievementUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AchievementUpsertOne{
		create: ac,
	}
}

type (
	// AchievementUpsertOne is the builder for "upsert"-ing
	//  one Achievement node.
	AchievementUpsertOne struct {
		create *AchievementCreate
	}

	// AchievementUpsert is the "OnConflict" setter.
	AchievementUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *AchievementUpsert) SetCreatedAt(v uint32) *AchievementUpsert {
	u.Set(achievement.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AchievementUpsert) UpdateCreatedAt() *AchievementUpsert {
	u.SetExcluded(achievement.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AchievementUpsert) AddCreatedAt(v uint32) *AchievementUpsert {
	u.Add(achievement.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AchievementUpsert) SetUpdatedAt(v uint32) *AchievementUpsert {
	u.Set(achievement.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AchievementUpsert) UpdateUpdatedAt() *AchievementUpsert {
	u.SetExcluded(achievement.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AchievementUpsert) AddUpdatedAt(v uint32) *AchievementUpsert {
	u.Add(achievement.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AchievementUpsert) SetDeletedAt(v uint32) *AchievementUpsert {
	u.Set(achievement.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AchievementUpsert) UpdateDeletedAt() *AchievementUpsert {
	u.SetExcluded(achievement.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AchievementUpsert) AddDeletedAt(v uint32) *AchievementUpsert {
	u.Add(achievement.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AchievementUpsert) SetEntID(v uuid.UUID) *AchievementUpsert {
	u.Set(achievement.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AchievementUpsert) UpdateEntID() *AchievementUpsert {
	u.SetExcluded(achievement.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AchievementUpsert) SetAppID(v uuid.UUID) *AchievementUpsert {
	u.Set(achievement.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AchievementUpsert) UpdateAppID() *AchievementUpsert {
	u.SetExcluded(achievement.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *AchievementUpsert) ClearAppID() *AchievementUpsert {
	u.SetNull(achievement.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *AchievementUpsert) SetUserID(v uuid.UUID) *AchievementUpsert {
	u.Set(achievement.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AchievementUpsert) UpdateUserID() *AchievementUpsert {
	u.SetExcluded(achievement.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *AchievementUpsert) ClearUserID() *AchievementUpsert {
	u.SetNull(achievement.FieldUserID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *AchievementUpsert) SetGoodID(v uuid.UUID) *AchievementUpsert {
	u.Set(achievement.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AchievementUpsert) UpdateGoodID() *AchievementUpsert {
	u.SetExcluded(achievement.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *AchievementUpsert) ClearGoodID() *AchievementUpsert {
	u.SetNull(achievement.FieldGoodID)
	return u
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AchievementUpsert) SetAppGoodID(v uuid.UUID) *AchievementUpsert {
	u.Set(achievement.FieldAppGoodID, v)
	return u
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AchievementUpsert) UpdateAppGoodID() *AchievementUpsert {
	u.SetExcluded(achievement.FieldAppGoodID)
	return u
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AchievementUpsert) ClearAppGoodID() *AchievementUpsert {
	u.SetNull(achievement.FieldAppGoodID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *AchievementUpsert) SetCoinTypeID(v uuid.UUID) *AchievementUpsert {
	u.Set(achievement.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *AchievementUpsert) UpdateCoinTypeID() *AchievementUpsert {
	u.SetExcluded(achievement.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *AchievementUpsert) ClearCoinTypeID() *AchievementUpsert {
	u.SetNull(achievement.FieldCoinTypeID)
	return u
}

// SetTotalUnitsV1 sets the "total_units_v1" field.
func (u *AchievementUpsert) SetTotalUnitsV1(v decimal.Decimal) *AchievementUpsert {
	u.Set(achievement.FieldTotalUnitsV1, v)
	return u
}

// UpdateTotalUnitsV1 sets the "total_units_v1" field to the value that was provided on create.
func (u *AchievementUpsert) UpdateTotalUnitsV1() *AchievementUpsert {
	u.SetExcluded(achievement.FieldTotalUnitsV1)
	return u
}

// ClearTotalUnitsV1 clears the value of the "total_units_v1" field.
func (u *AchievementUpsert) ClearTotalUnitsV1() *AchievementUpsert {
	u.SetNull(achievement.FieldTotalUnitsV1)
	return u
}

// SetSelfUnitsV1 sets the "self_units_v1" field.
func (u *AchievementUpsert) SetSelfUnitsV1(v decimal.Decimal) *AchievementUpsert {
	u.Set(achievement.FieldSelfUnitsV1, v)
	return u
}

// UpdateSelfUnitsV1 sets the "self_units_v1" field to the value that was provided on create.
func (u *AchievementUpsert) UpdateSelfUnitsV1() *AchievementUpsert {
	u.SetExcluded(achievement.FieldSelfUnitsV1)
	return u
}

// ClearSelfUnitsV1 clears the value of the "self_units_v1" field.
func (u *AchievementUpsert) ClearSelfUnitsV1() *AchievementUpsert {
	u.SetNull(achievement.FieldSelfUnitsV1)
	return u
}

// SetTotalAmount sets the "total_amount" field.
func (u *AchievementUpsert) SetTotalAmount(v decimal.Decimal) *AchievementUpsert {
	u.Set(achievement.FieldTotalAmount, v)
	return u
}

// UpdateTotalAmount sets the "total_amount" field to the value that was provided on create.
func (u *AchievementUpsert) UpdateTotalAmount() *AchievementUpsert {
	u.SetExcluded(achievement.FieldTotalAmount)
	return u
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (u *AchievementUpsert) ClearTotalAmount() *AchievementUpsert {
	u.SetNull(achievement.FieldTotalAmount)
	return u
}

// SetSelfAmount sets the "self_amount" field.
func (u *AchievementUpsert) SetSelfAmount(v decimal.Decimal) *AchievementUpsert {
	u.Set(achievement.FieldSelfAmount, v)
	return u
}

// UpdateSelfAmount sets the "self_amount" field to the value that was provided on create.
func (u *AchievementUpsert) UpdateSelfAmount() *AchievementUpsert {
	u.SetExcluded(achievement.FieldSelfAmount)
	return u
}

// ClearSelfAmount clears the value of the "self_amount" field.
func (u *AchievementUpsert) ClearSelfAmount() *AchievementUpsert {
	u.SetNull(achievement.FieldSelfAmount)
	return u
}

// SetTotalCommission sets the "total_commission" field.
func (u *AchievementUpsert) SetTotalCommission(v decimal.Decimal) *AchievementUpsert {
	u.Set(achievement.FieldTotalCommission, v)
	return u
}

// UpdateTotalCommission sets the "total_commission" field to the value that was provided on create.
func (u *AchievementUpsert) UpdateTotalCommission() *AchievementUpsert {
	u.SetExcluded(achievement.FieldTotalCommission)
	return u
}

// ClearTotalCommission clears the value of the "total_commission" field.
func (u *AchievementUpsert) ClearTotalCommission() *AchievementUpsert {
	u.SetNull(achievement.FieldTotalCommission)
	return u
}

// SetSelfCommission sets the "self_commission" field.
func (u *AchievementUpsert) SetSelfCommission(v decimal.Decimal) *AchievementUpsert {
	u.Set(achievement.FieldSelfCommission, v)
	return u
}

// UpdateSelfCommission sets the "self_commission" field to the value that was provided on create.
func (u *AchievementUpsert) UpdateSelfCommission() *AchievementUpsert {
	u.SetExcluded(achievement.FieldSelfCommission)
	return u
}

// ClearSelfCommission clears the value of the "self_commission" field.
func (u *AchievementUpsert) ClearSelfCommission() *AchievementUpsert {
	u.SetNull(achievement.FieldSelfCommission)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Achievement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(achievement.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AchievementUpsertOne) UpdateNewValues() *AchievementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(achievement.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Achievement.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AchievementUpsertOne) Ignore() *AchievementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AchievementUpsertOne) DoNothing() *AchievementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AchievementCreate.OnConflict
// documentation for more info.
func (u *AchievementUpsertOne) Update(set func(*AchievementUpsert)) *AchievementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AchievementUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AchievementUpsertOne) SetCreatedAt(v uint32) *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AchievementUpsertOne) AddCreatedAt(v uint32) *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AchievementUpsertOne) UpdateCreatedAt() *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AchievementUpsertOne) SetUpdatedAt(v uint32) *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AchievementUpsertOne) AddUpdatedAt(v uint32) *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AchievementUpsertOne) UpdateUpdatedAt() *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AchievementUpsertOne) SetDeletedAt(v uint32) *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AchievementUpsertOne) AddDeletedAt(v uint32) *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AchievementUpsertOne) UpdateDeletedAt() *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *AchievementUpsertOne) SetEntID(v uuid.UUID) *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AchievementUpsertOne) UpdateEntID() *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AchievementUpsertOne) SetAppID(v uuid.UUID) *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AchievementUpsertOne) UpdateAppID() *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AchievementUpsertOne) ClearAppID() *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *AchievementUpsertOne) SetUserID(v uuid.UUID) *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AchievementUpsertOne) UpdateUserID() *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *AchievementUpsertOne) ClearUserID() *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.ClearUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *AchievementUpsertOne) SetGoodID(v uuid.UUID) *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AchievementUpsertOne) UpdateGoodID() *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *AchievementUpsertOne) ClearGoodID() *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.ClearGoodID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AchievementUpsertOne) SetAppGoodID(v uuid.UUID) *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AchievementUpsertOne) UpdateAppGoodID() *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AchievementUpsertOne) ClearAppGoodID() *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.ClearAppGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *AchievementUpsertOne) SetCoinTypeID(v uuid.UUID) *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *AchievementUpsertOne) UpdateCoinTypeID() *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *AchievementUpsertOne) ClearCoinTypeID() *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetTotalUnitsV1 sets the "total_units_v1" field.
func (u *AchievementUpsertOne) SetTotalUnitsV1(v decimal.Decimal) *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.SetTotalUnitsV1(v)
	})
}

// UpdateTotalUnitsV1 sets the "total_units_v1" field to the value that was provided on create.
func (u *AchievementUpsertOne) UpdateTotalUnitsV1() *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateTotalUnitsV1()
	})
}

// ClearTotalUnitsV1 clears the value of the "total_units_v1" field.
func (u *AchievementUpsertOne) ClearTotalUnitsV1() *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.ClearTotalUnitsV1()
	})
}

// SetSelfUnitsV1 sets the "self_units_v1" field.
func (u *AchievementUpsertOne) SetSelfUnitsV1(v decimal.Decimal) *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.SetSelfUnitsV1(v)
	})
}

// UpdateSelfUnitsV1 sets the "self_units_v1" field to the value that was provided on create.
func (u *AchievementUpsertOne) UpdateSelfUnitsV1() *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateSelfUnitsV1()
	})
}

// ClearSelfUnitsV1 clears the value of the "self_units_v1" field.
func (u *AchievementUpsertOne) ClearSelfUnitsV1() *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.ClearSelfUnitsV1()
	})
}

// SetTotalAmount sets the "total_amount" field.
func (u *AchievementUpsertOne) SetTotalAmount(v decimal.Decimal) *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.SetTotalAmount(v)
	})
}

// UpdateTotalAmount sets the "total_amount" field to the value that was provided on create.
func (u *AchievementUpsertOne) UpdateTotalAmount() *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateTotalAmount()
	})
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (u *AchievementUpsertOne) ClearTotalAmount() *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.ClearTotalAmount()
	})
}

// SetSelfAmount sets the "self_amount" field.
func (u *AchievementUpsertOne) SetSelfAmount(v decimal.Decimal) *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.SetSelfAmount(v)
	})
}

// UpdateSelfAmount sets the "self_amount" field to the value that was provided on create.
func (u *AchievementUpsertOne) UpdateSelfAmount() *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateSelfAmount()
	})
}

// ClearSelfAmount clears the value of the "self_amount" field.
func (u *AchievementUpsertOne) ClearSelfAmount() *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.ClearSelfAmount()
	})
}

// SetTotalCommission sets the "total_commission" field.
func (u *AchievementUpsertOne) SetTotalCommission(v decimal.Decimal) *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.SetTotalCommission(v)
	})
}

// UpdateTotalCommission sets the "total_commission" field to the value that was provided on create.
func (u *AchievementUpsertOne) UpdateTotalCommission() *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateTotalCommission()
	})
}

// ClearTotalCommission clears the value of the "total_commission" field.
func (u *AchievementUpsertOne) ClearTotalCommission() *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.ClearTotalCommission()
	})
}

// SetSelfCommission sets the "self_commission" field.
func (u *AchievementUpsertOne) SetSelfCommission(v decimal.Decimal) *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.SetSelfCommission(v)
	})
}

// UpdateSelfCommission sets the "self_commission" field to the value that was provided on create.
func (u *AchievementUpsertOne) UpdateSelfCommission() *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateSelfCommission()
	})
}

// ClearSelfCommission clears the value of the "self_commission" field.
func (u *AchievementUpsertOne) ClearSelfCommission() *AchievementUpsertOne {
	return u.Update(func(s *AchievementUpsert) {
		s.ClearSelfCommission()
	})
}

// Exec executes the query.
func (u *AchievementUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AchievementCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AchievementUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AchievementUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AchievementUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AchievementCreateBulk is the builder for creating many Achievement entities in bulk.
type AchievementCreateBulk struct {
	config
	err      error
	builders []*AchievementCreate
	conflict []sql.ConflictOption
}

// Save creates the Achievement entities in the database.
func (acb *AchievementCreateBulk) Save(ctx context.Context) ([]*Achievement, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Achievement, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AchievementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AchievementCreateBulk) SaveX(ctx context.Context) []*Achievement {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AchievementCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AchievementCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Achievement.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AchievementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (acb *AchievementCreateBulk) OnConflict(opts ...sql.ConflictOption) *AchievementUpsertBulk {
	acb.conflict = opts
	return &AchievementUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Achievement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AchievementCreateBulk) OnConflictColumns(columns ...string) *AchievementUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AchievementUpsertBulk{
		create: acb,
	}
}

// AchievementUpsertBulk is the builder for "upsert"-ing
// a bulk of Achievement nodes.
type AchievementUpsertBulk struct {
	create *AchievementCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Achievement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(achievement.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AchievementUpsertBulk) UpdateNewValues() *AchievementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(achievement.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Achievement.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AchievementUpsertBulk) Ignore() *AchievementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AchievementUpsertBulk) DoNothing() *AchievementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AchievementCreateBulk.OnConflict
// documentation for more info.
func (u *AchievementUpsertBulk) Update(set func(*AchievementUpsert)) *AchievementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AchievementUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AchievementUpsertBulk) SetCreatedAt(v uint32) *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AchievementUpsertBulk) AddCreatedAt(v uint32) *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AchievementUpsertBulk) UpdateCreatedAt() *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AchievementUpsertBulk) SetUpdatedAt(v uint32) *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AchievementUpsertBulk) AddUpdatedAt(v uint32) *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AchievementUpsertBulk) UpdateUpdatedAt() *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AchievementUpsertBulk) SetDeletedAt(v uint32) *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AchievementUpsertBulk) AddDeletedAt(v uint32) *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AchievementUpsertBulk) UpdateDeletedAt() *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *AchievementUpsertBulk) SetEntID(v uuid.UUID) *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AchievementUpsertBulk) UpdateEntID() *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AchievementUpsertBulk) SetAppID(v uuid.UUID) *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AchievementUpsertBulk) UpdateAppID() *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AchievementUpsertBulk) ClearAppID() *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *AchievementUpsertBulk) SetUserID(v uuid.UUID) *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AchievementUpsertBulk) UpdateUserID() *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *AchievementUpsertBulk) ClearUserID() *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.ClearUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *AchievementUpsertBulk) SetGoodID(v uuid.UUID) *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AchievementUpsertBulk) UpdateGoodID() *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *AchievementUpsertBulk) ClearGoodID() *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.ClearGoodID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AchievementUpsertBulk) SetAppGoodID(v uuid.UUID) *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AchievementUpsertBulk) UpdateAppGoodID() *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AchievementUpsertBulk) ClearAppGoodID() *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.ClearAppGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *AchievementUpsertBulk) SetCoinTypeID(v uuid.UUID) *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *AchievementUpsertBulk) UpdateCoinTypeID() *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *AchievementUpsertBulk) ClearCoinTypeID() *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetTotalUnitsV1 sets the "total_units_v1" field.
func (u *AchievementUpsertBulk) SetTotalUnitsV1(v decimal.Decimal) *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.SetTotalUnitsV1(v)
	})
}

// UpdateTotalUnitsV1 sets the "total_units_v1" field to the value that was provided on create.
func (u *AchievementUpsertBulk) UpdateTotalUnitsV1() *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateTotalUnitsV1()
	})
}

// ClearTotalUnitsV1 clears the value of the "total_units_v1" field.
func (u *AchievementUpsertBulk) ClearTotalUnitsV1() *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.ClearTotalUnitsV1()
	})
}

// SetSelfUnitsV1 sets the "self_units_v1" field.
func (u *AchievementUpsertBulk) SetSelfUnitsV1(v decimal.Decimal) *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.SetSelfUnitsV1(v)
	})
}

// UpdateSelfUnitsV1 sets the "self_units_v1" field to the value that was provided on create.
func (u *AchievementUpsertBulk) UpdateSelfUnitsV1() *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateSelfUnitsV1()
	})
}

// ClearSelfUnitsV1 clears the value of the "self_units_v1" field.
func (u *AchievementUpsertBulk) ClearSelfUnitsV1() *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.ClearSelfUnitsV1()
	})
}

// SetTotalAmount sets the "total_amount" field.
func (u *AchievementUpsertBulk) SetTotalAmount(v decimal.Decimal) *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.SetTotalAmount(v)
	})
}

// UpdateTotalAmount sets the "total_amount" field to the value that was provided on create.
func (u *AchievementUpsertBulk) UpdateTotalAmount() *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateTotalAmount()
	})
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (u *AchievementUpsertBulk) ClearTotalAmount() *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.ClearTotalAmount()
	})
}

// SetSelfAmount sets the "self_amount" field.
func (u *AchievementUpsertBulk) SetSelfAmount(v decimal.Decimal) *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.SetSelfAmount(v)
	})
}

// UpdateSelfAmount sets the "self_amount" field to the value that was provided on create.
func (u *AchievementUpsertBulk) UpdateSelfAmount() *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateSelfAmount()
	})
}

// ClearSelfAmount clears the value of the "self_amount" field.
func (u *AchievementUpsertBulk) ClearSelfAmount() *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.ClearSelfAmount()
	})
}

// SetTotalCommission sets the "total_commission" field.
func (u *AchievementUpsertBulk) SetTotalCommission(v decimal.Decimal) *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.SetTotalCommission(v)
	})
}

// UpdateTotalCommission sets the "total_commission" field to the value that was provided on create.
func (u *AchievementUpsertBulk) UpdateTotalCommission() *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateTotalCommission()
	})
}

// ClearTotalCommission clears the value of the "total_commission" field.
func (u *AchievementUpsertBulk) ClearTotalCommission() *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.ClearTotalCommission()
	})
}

// SetSelfCommission sets the "self_commission" field.
func (u *AchievementUpsertBulk) SetSelfCommission(v decimal.Decimal) *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.SetSelfCommission(v)
	})
}

// UpdateSelfCommission sets the "self_commission" field to the value that was provided on create.
func (u *AchievementUpsertBulk) UpdateSelfCommission() *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.UpdateSelfCommission()
	})
}

// ClearSelfCommission clears the value of the "self_commission" field.
func (u *AchievementUpsertBulk) ClearSelfCommission() *AchievementUpsertBulk {
	return u.Update(func(s *AchievementUpsert) {
		s.ClearSelfCommission()
	})
}

// Exec executes the query.
func (u *AchievementUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the AchievementCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AchievementCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AchievementUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

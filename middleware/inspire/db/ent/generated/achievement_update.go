// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/achievement"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AchievementUpdate is the builder for updating Achievement entities.
type AchievementUpdate struct {
	config
	hooks     []Hook
	mutation  *AchievementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AchievementUpdate builder.
func (au *AchievementUpdate) Where(ps ...predicate.Achievement) *AchievementUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *AchievementUpdate) SetCreatedAt(u uint32) *AchievementUpdate {
	au.mutation.ResetCreatedAt()
	au.mutation.SetCreatedAt(u)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *AchievementUpdate) SetNillableCreatedAt(u *uint32) *AchievementUpdate {
	if u != nil {
		au.SetCreatedAt(*u)
	}
	return au
}

// AddCreatedAt adds u to the "created_at" field.
func (au *AchievementUpdate) AddCreatedAt(u int32) *AchievementUpdate {
	au.mutation.AddCreatedAt(u)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AchievementUpdate) SetUpdatedAt(u uint32) *AchievementUpdate {
	au.mutation.ResetUpdatedAt()
	au.mutation.SetUpdatedAt(u)
	return au
}

// AddUpdatedAt adds u to the "updated_at" field.
func (au *AchievementUpdate) AddUpdatedAt(u int32) *AchievementUpdate {
	au.mutation.AddUpdatedAt(u)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AchievementUpdate) SetDeletedAt(u uint32) *AchievementUpdate {
	au.mutation.ResetDeletedAt()
	au.mutation.SetDeletedAt(u)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AchievementUpdate) SetNillableDeletedAt(u *uint32) *AchievementUpdate {
	if u != nil {
		au.SetDeletedAt(*u)
	}
	return au
}

// AddDeletedAt adds u to the "deleted_at" field.
func (au *AchievementUpdate) AddDeletedAt(u int32) *AchievementUpdate {
	au.mutation.AddDeletedAt(u)
	return au
}

// SetEntID sets the "ent_id" field.
func (au *AchievementUpdate) SetEntID(u uuid.UUID) *AchievementUpdate {
	au.mutation.SetEntID(u)
	return au
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (au *AchievementUpdate) SetNillableEntID(u *uuid.UUID) *AchievementUpdate {
	if u != nil {
		au.SetEntID(*u)
	}
	return au
}

// SetAppID sets the "app_id" field.
func (au *AchievementUpdate) SetAppID(u uuid.UUID) *AchievementUpdate {
	au.mutation.SetAppID(u)
	return au
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (au *AchievementUpdate) SetNillableAppID(u *uuid.UUID) *AchievementUpdate {
	if u != nil {
		au.SetAppID(*u)
	}
	return au
}

// ClearAppID clears the value of the "app_id" field.
func (au *AchievementUpdate) ClearAppID() *AchievementUpdate {
	au.mutation.ClearAppID()
	return au
}

// SetUserID sets the "user_id" field.
func (au *AchievementUpdate) SetUserID(u uuid.UUID) *AchievementUpdate {
	au.mutation.SetUserID(u)
	return au
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (au *AchievementUpdate) SetNillableUserID(u *uuid.UUID) *AchievementUpdate {
	if u != nil {
		au.SetUserID(*u)
	}
	return au
}

// ClearUserID clears the value of the "user_id" field.
func (au *AchievementUpdate) ClearUserID() *AchievementUpdate {
	au.mutation.ClearUserID()
	return au
}

// SetGoodID sets the "good_id" field.
func (au *AchievementUpdate) SetGoodID(u uuid.UUID) *AchievementUpdate {
	au.mutation.SetGoodID(u)
	return au
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (au *AchievementUpdate) SetNillableGoodID(u *uuid.UUID) *AchievementUpdate {
	if u != nil {
		au.SetGoodID(*u)
	}
	return au
}

// ClearGoodID clears the value of the "good_id" field.
func (au *AchievementUpdate) ClearGoodID() *AchievementUpdate {
	au.mutation.ClearGoodID()
	return au
}

// SetAppGoodID sets the "app_good_id" field.
func (au *AchievementUpdate) SetAppGoodID(u uuid.UUID) *AchievementUpdate {
	au.mutation.SetAppGoodID(u)
	return au
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (au *AchievementUpdate) SetNillableAppGoodID(u *uuid.UUID) *AchievementUpdate {
	if u != nil {
		au.SetAppGoodID(*u)
	}
	return au
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (au *AchievementUpdate) ClearAppGoodID() *AchievementUpdate {
	au.mutation.ClearAppGoodID()
	return au
}

// SetCoinTypeID sets the "coin_type_id" field.
func (au *AchievementUpdate) SetCoinTypeID(u uuid.UUID) *AchievementUpdate {
	au.mutation.SetCoinTypeID(u)
	return au
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (au *AchievementUpdate) SetNillableCoinTypeID(u *uuid.UUID) *AchievementUpdate {
	if u != nil {
		au.SetCoinTypeID(*u)
	}
	return au
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (au *AchievementUpdate) ClearCoinTypeID() *AchievementUpdate {
	au.mutation.ClearCoinTypeID()
	return au
}

// SetTotalUnitsV1 sets the "total_units_v1" field.
func (au *AchievementUpdate) SetTotalUnitsV1(d decimal.Decimal) *AchievementUpdate {
	au.mutation.SetTotalUnitsV1(d)
	return au
}

// SetNillableTotalUnitsV1 sets the "total_units_v1" field if the given value is not nil.
func (au *AchievementUpdate) SetNillableTotalUnitsV1(d *decimal.Decimal) *AchievementUpdate {
	if d != nil {
		au.SetTotalUnitsV1(*d)
	}
	return au
}

// ClearTotalUnitsV1 clears the value of the "total_units_v1" field.
func (au *AchievementUpdate) ClearTotalUnitsV1() *AchievementUpdate {
	au.mutation.ClearTotalUnitsV1()
	return au
}

// SetSelfUnitsV1 sets the "self_units_v1" field.
func (au *AchievementUpdate) SetSelfUnitsV1(d decimal.Decimal) *AchievementUpdate {
	au.mutation.SetSelfUnitsV1(d)
	return au
}

// SetNillableSelfUnitsV1 sets the "self_units_v1" field if the given value is not nil.
func (au *AchievementUpdate) SetNillableSelfUnitsV1(d *decimal.Decimal) *AchievementUpdate {
	if d != nil {
		au.SetSelfUnitsV1(*d)
	}
	return au
}

// ClearSelfUnitsV1 clears the value of the "self_units_v1" field.
func (au *AchievementUpdate) ClearSelfUnitsV1() *AchievementUpdate {
	au.mutation.ClearSelfUnitsV1()
	return au
}

// SetTotalAmount sets the "total_amount" field.
func (au *AchievementUpdate) SetTotalAmount(d decimal.Decimal) *AchievementUpdate {
	au.mutation.SetTotalAmount(d)
	return au
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (au *AchievementUpdate) SetNillableTotalAmount(d *decimal.Decimal) *AchievementUpdate {
	if d != nil {
		au.SetTotalAmount(*d)
	}
	return au
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (au *AchievementUpdate) ClearTotalAmount() *AchievementUpdate {
	au.mutation.ClearTotalAmount()
	return au
}

// SetSelfAmount sets the "self_amount" field.
func (au *AchievementUpdate) SetSelfAmount(d decimal.Decimal) *AchievementUpdate {
	au.mutation.SetSelfAmount(d)
	return au
}

// SetNillableSelfAmount sets the "self_amount" field if the given value is not nil.
func (au *AchievementUpdate) SetNillableSelfAmount(d *decimal.Decimal) *AchievementUpdate {
	if d != nil {
		au.SetSelfAmount(*d)
	}
	return au
}

// ClearSelfAmount clears the value of the "self_amount" field.
func (au *AchievementUpdate) ClearSelfAmount() *AchievementUpdate {
	au.mutation.ClearSelfAmount()
	return au
}

// SetTotalCommission sets the "total_commission" field.
func (au *AchievementUpdate) SetTotalCommission(d decimal.Decimal) *AchievementUpdate {
	au.mutation.SetTotalCommission(d)
	return au
}

// SetNillableTotalCommission sets the "total_commission" field if the given value is not nil.
func (au *AchievementUpdate) SetNillableTotalCommission(d *decimal.Decimal) *AchievementUpdate {
	if d != nil {
		au.SetTotalCommission(*d)
	}
	return au
}

// ClearTotalCommission clears the value of the "total_commission" field.
func (au *AchievementUpdate) ClearTotalCommission() *AchievementUpdate {
	au.mutation.ClearTotalCommission()
	return au
}

// SetSelfCommission sets the "self_commission" field.
func (au *AchievementUpdate) SetSelfCommission(d decimal.Decimal) *AchievementUpdate {
	au.mutation.SetSelfCommission(d)
	return au
}

// SetNillableSelfCommission sets the "self_commission" field if the given value is not nil.
func (au *AchievementUpdate) SetNillableSelfCommission(d *decimal.Decimal) *AchievementUpdate {
	if d != nil {
		au.SetSelfCommission(*d)
	}
	return au
}

// ClearSelfCommission clears the value of the "self_commission" field.
func (au *AchievementUpdate) ClearSelfCommission() *AchievementUpdate {
	au.mutation.ClearSelfCommission()
	return au
}

// Mutation returns the AchievementMutation object of the builder.
func (au *AchievementUpdate) Mutation() *AchievementMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AchievementUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AchievementUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AchievementUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AchievementUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AchievementUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := achievement.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AchievementUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AchievementUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AchievementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(achievement.Table, achievement.Columns, sqlgraph.NewFieldSpec(achievement.FieldID, field.TypeUint32))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.SetField(achievement.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := au.mutation.AddedCreatedAt(); ok {
		_spec.AddField(achievement.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(achievement.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := au.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(achievement.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(achievement.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := au.mutation.AddedDeletedAt(); ok {
		_spec.AddField(achievement.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := au.mutation.EntID(); ok {
		_spec.SetField(achievement.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := au.mutation.AppID(); ok {
		_spec.SetField(achievement.FieldAppID, field.TypeUUID, value)
	}
	if au.mutation.AppIDCleared() {
		_spec.ClearField(achievement.FieldAppID, field.TypeUUID)
	}
	if value, ok := au.mutation.UserID(); ok {
		_spec.SetField(achievement.FieldUserID, field.TypeUUID, value)
	}
	if au.mutation.UserIDCleared() {
		_spec.ClearField(achievement.FieldUserID, field.TypeUUID)
	}
	if value, ok := au.mutation.GoodID(); ok {
		_spec.SetField(achievement.FieldGoodID, field.TypeUUID, value)
	}
	if au.mutation.GoodIDCleared() {
		_spec.ClearField(achievement.FieldGoodID, field.TypeUUID)
	}
	if value, ok := au.mutation.AppGoodID(); ok {
		_spec.SetField(achievement.FieldAppGoodID, field.TypeUUID, value)
	}
	if au.mutation.AppGoodIDCleared() {
		_spec.ClearField(achievement.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := au.mutation.CoinTypeID(); ok {
		_spec.SetField(achievement.FieldCoinTypeID, field.TypeUUID, value)
	}
	if au.mutation.CoinTypeIDCleared() {
		_spec.ClearField(achievement.FieldCoinTypeID, field.TypeUUID)
	}
	if value, ok := au.mutation.TotalUnitsV1(); ok {
		_spec.SetField(achievement.FieldTotalUnitsV1, field.TypeOther, value)
	}
	if au.mutation.TotalUnitsV1Cleared() {
		_spec.ClearField(achievement.FieldTotalUnitsV1, field.TypeOther)
	}
	if value, ok := au.mutation.SelfUnitsV1(); ok {
		_spec.SetField(achievement.FieldSelfUnitsV1, field.TypeOther, value)
	}
	if au.mutation.SelfUnitsV1Cleared() {
		_spec.ClearField(achievement.FieldSelfUnitsV1, field.TypeOther)
	}
	if value, ok := au.mutation.TotalAmount(); ok {
		_spec.SetField(achievement.FieldTotalAmount, field.TypeOther, value)
	}
	if au.mutation.TotalAmountCleared() {
		_spec.ClearField(achievement.FieldTotalAmount, field.TypeOther)
	}
	if value, ok := au.mutation.SelfAmount(); ok {
		_spec.SetField(achievement.FieldSelfAmount, field.TypeOther, value)
	}
	if au.mutation.SelfAmountCleared() {
		_spec.ClearField(achievement.FieldSelfAmount, field.TypeOther)
	}
	if value, ok := au.mutation.TotalCommission(); ok {
		_spec.SetField(achievement.FieldTotalCommission, field.TypeOther, value)
	}
	if au.mutation.TotalCommissionCleared() {
		_spec.ClearField(achievement.FieldTotalCommission, field.TypeOther)
	}
	if value, ok := au.mutation.SelfCommission(); ok {
		_spec.SetField(achievement.FieldSelfCommission, field.TypeOther, value)
	}
	if au.mutation.SelfCommissionCleared() {
		_spec.ClearField(achievement.FieldSelfCommission, field.TypeOther)
	}
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{achievement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AchievementUpdateOne is the builder for updating a single Achievement entity.
type AchievementUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AchievementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (auo *AchievementUpdateOne) SetCreatedAt(u uint32) *AchievementUpdateOne {
	auo.mutation.ResetCreatedAt()
	auo.mutation.SetCreatedAt(u)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *AchievementUpdateOne) SetNillableCreatedAt(u *uint32) *AchievementUpdateOne {
	if u != nil {
		auo.SetCreatedAt(*u)
	}
	return auo
}

// AddCreatedAt adds u to the "created_at" field.
func (auo *AchievementUpdateOne) AddCreatedAt(u int32) *AchievementUpdateOne {
	auo.mutation.AddCreatedAt(u)
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AchievementUpdateOne) SetUpdatedAt(u uint32) *AchievementUpdateOne {
	auo.mutation.ResetUpdatedAt()
	auo.mutation.SetUpdatedAt(u)
	return auo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (auo *AchievementUpdateOne) AddUpdatedAt(u int32) *AchievementUpdateOne {
	auo.mutation.AddUpdatedAt(u)
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AchievementUpdateOne) SetDeletedAt(u uint32) *AchievementUpdateOne {
	auo.mutation.ResetDeletedAt()
	auo.mutation.SetDeletedAt(u)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AchievementUpdateOne) SetNillableDeletedAt(u *uint32) *AchievementUpdateOne {
	if u != nil {
		auo.SetDeletedAt(*u)
	}
	return auo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (auo *AchievementUpdateOne) AddDeletedAt(u int32) *AchievementUpdateOne {
	auo.mutation.AddDeletedAt(u)
	return auo
}

// SetEntID sets the "ent_id" field.
func (auo *AchievementUpdateOne) SetEntID(u uuid.UUID) *AchievementUpdateOne {
	auo.mutation.SetEntID(u)
	return auo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (auo *AchievementUpdateOne) SetNillableEntID(u *uuid.UUID) *AchievementUpdateOne {
	if u != nil {
		auo.SetEntID(*u)
	}
	return auo
}

// SetAppID sets the "app_id" field.
func (auo *AchievementUpdateOne) SetAppID(u uuid.UUID) *AchievementUpdateOne {
	auo.mutation.SetAppID(u)
	return auo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (auo *AchievementUpdateOne) SetNillableAppID(u *uuid.UUID) *AchievementUpdateOne {
	if u != nil {
		auo.SetAppID(*u)
	}
	return auo
}

// ClearAppID clears the value of the "app_id" field.
func (auo *AchievementUpdateOne) ClearAppID() *AchievementUpdateOne {
	auo.mutation.ClearAppID()
	return auo
}

// SetUserID sets the "user_id" field.
func (auo *AchievementUpdateOne) SetUserID(u uuid.UUID) *AchievementUpdateOne {
	auo.mutation.SetUserID(u)
	return auo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (auo *AchievementUpdateOne) SetNillableUserID(u *uuid.UUID) *AchievementUpdateOne {
	if u != nil {
		auo.SetUserID(*u)
	}
	return auo
}

// ClearUserID clears the value of the "user_id" field.
func (auo *AchievementUpdateOne) ClearUserID() *AchievementUpdateOne {
	auo.mutation.ClearUserID()
	return auo
}

// SetGoodID sets the "good_id" field.
func (auo *AchievementUpdateOne) SetGoodID(u uuid.UUID) *AchievementUpdateOne {
	auo.mutation.SetGoodID(u)
	return auo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (auo *AchievementUpdateOne) SetNillableGoodID(u *uuid.UUID) *AchievementUpdateOne {
	if u != nil {
		auo.SetGoodID(*u)
	}
	return auo
}

// ClearGoodID clears the value of the "good_id" field.
func (auo *AchievementUpdateOne) ClearGoodID() *AchievementUpdateOne {
	auo.mutation.ClearGoodID()
	return auo
}

// SetAppGoodID sets the "app_good_id" field.
func (auo *AchievementUpdateOne) SetAppGoodID(u uuid.UUID) *AchievementUpdateOne {
	auo.mutation.SetAppGoodID(u)
	return auo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (auo *AchievementUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *AchievementUpdateOne {
	if u != nil {
		auo.SetAppGoodID(*u)
	}
	return auo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (auo *AchievementUpdateOne) ClearAppGoodID() *AchievementUpdateOne {
	auo.mutation.ClearAppGoodID()
	return auo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (auo *AchievementUpdateOne) SetCoinTypeID(u uuid.UUID) *AchievementUpdateOne {
	auo.mutation.SetCoinTypeID(u)
	return auo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (auo *AchievementUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *AchievementUpdateOne {
	if u != nil {
		auo.SetCoinTypeID(*u)
	}
	return auo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (auo *AchievementUpdateOne) ClearCoinTypeID() *AchievementUpdateOne {
	auo.mutation.ClearCoinTypeID()
	return auo
}

// SetTotalUnitsV1 sets the "total_units_v1" field.
func (auo *AchievementUpdateOne) SetTotalUnitsV1(d decimal.Decimal) *AchievementUpdateOne {
	auo.mutation.SetTotalUnitsV1(d)
	return auo
}

// SetNillableTotalUnitsV1 sets the "total_units_v1" field if the given value is not nil.
func (auo *AchievementUpdateOne) SetNillableTotalUnitsV1(d *decimal.Decimal) *AchievementUpdateOne {
	if d != nil {
		auo.SetTotalUnitsV1(*d)
	}
	return auo
}

// ClearTotalUnitsV1 clears the value of the "total_units_v1" field.
func (auo *AchievementUpdateOne) ClearTotalUnitsV1() *AchievementUpdateOne {
	auo.mutation.ClearTotalUnitsV1()
	return auo
}

// SetSelfUnitsV1 sets the "self_units_v1" field.
func (auo *AchievementUpdateOne) SetSelfUnitsV1(d decimal.Decimal) *AchievementUpdateOne {
	auo.mutation.SetSelfUnitsV1(d)
	return auo
}

// SetNillableSelfUnitsV1 sets the "self_units_v1" field if the given value is not nil.
func (auo *AchievementUpdateOne) SetNillableSelfUnitsV1(d *decimal.Decimal) *AchievementUpdateOne {
	if d != nil {
		auo.SetSelfUnitsV1(*d)
	}
	return auo
}

// ClearSelfUnitsV1 clears the value of the "self_units_v1" field.
func (auo *AchievementUpdateOne) ClearSelfUnitsV1() *AchievementUpdateOne {
	auo.mutation.ClearSelfUnitsV1()
	return auo
}

// SetTotalAmount sets the "total_amount" field.
func (auo *AchievementUpdateOne) SetTotalAmount(d decimal.Decimal) *AchievementUpdateOne {
	auo.mutation.SetTotalAmount(d)
	return auo
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (auo *AchievementUpdateOne) SetNillableTotalAmount(d *decimal.Decimal) *AchievementUpdateOne {
	if d != nil {
		auo.SetTotalAmount(*d)
	}
	return auo
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (auo *AchievementUpdateOne) ClearTotalAmount() *AchievementUpdateOne {
	auo.mutation.ClearTotalAmount()
	return auo
}

// SetSelfAmount sets the "self_amount" field.
func (auo *AchievementUpdateOne) SetSelfAmount(d decimal.Decimal) *AchievementUpdateOne {
	auo.mutation.SetSelfAmount(d)
	return auo
}

// SetNillableSelfAmount sets the "self_amount" field if the given value is not nil.
func (auo *AchievementUpdateOne) SetNillableSelfAmount(d *decimal.Decimal) *AchievementUpdateOne {
	if d != nil {
		auo.SetSelfAmount(*d)
	}
	return auo
}

// ClearSelfAmount clears the value of the "self_amount" field.
func (auo *AchievementUpdateOne) ClearSelfAmount() *AchievementUpdateOne {
	auo.mutation.ClearSelfAmount()
	return auo
}

// SetTotalCommission sets the "total_commission" field.
func (auo *AchievementUpdateOne) SetTotalCommission(d decimal.Decimal) *AchievementUpdateOne {
	auo.mutation.SetTotalCommission(d)
	return auo
}

// SetNillableTotalCommission sets the "total_commission" field if the given value is not nil.
func (auo *AchievementUpdateOne) SetNillableTotalCommission(d *decimal.Decimal) *AchievementUpdateOne {
	if d != nil {
		auo.SetTotalCommission(*d)
	}
	return auo
}

// ClearTotalCommission clears the value of the "total_commission" field.
func (auo *AchievementUpdateOne) ClearTotalCommission() *AchievementUpdateOne {
	auo.mutation.ClearTotalCommission()
	return auo
}

// SetSelfCommission sets the "self_commission" field.
func (auo *AchievementUpdateOne) SetSelfCommission(d decimal.Decimal) *AchievementUpdateOne {
	auo.mutation.SetSelfCommission(d)
	return auo
}

// SetNillableSelfCommission sets the "self_commission" field if the given value is not nil.
func (auo *AchievementUpdateOne) SetNillableSelfCommission(d *decimal.Decimal) *AchievementUpdateOne {
	if d != nil {
		auo.SetSelfCommission(*d)
	}
	return auo
}

// ClearSelfCommission clears the value of the "self_commission" field.
func (auo *AchievementUpdateOne) ClearSelfCommission() *AchievementUpdateOne {
	auo.mutation.ClearSelfCommission()
	return auo
}

// Mutation returns the AchievementMutation object of the builder.
func (auo *AchievementUpdateOne) Mutation() *AchievementMutation {
	return auo.mutation
}

// Where appends a list predicates to the AchievementUpdate builder.
func (auo *AchievementUpdateOne) Where(ps ...predicate.Achievement) *AchievementUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AchievementUpdateOne) Select(field string, fields ...string) *AchievementUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Achievement entity.
func (auo *AchievementUpdateOne) Save(ctx context.Context) (*Achievement, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AchievementUpdateOne) SaveX(ctx context.Context) *Achievement {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AchievementUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AchievementUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AchievementUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := achievement.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AchievementUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AchievementUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AchievementUpdateOne) sqlSave(ctx context.Context) (_node *Achievement, err error) {
	_spec := sqlgraph.NewUpdateSpec(achievement.Table, achievement.Columns, sqlgraph.NewFieldSpec(achievement.FieldID, field.TypeUint32))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Achievement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, achievement.FieldID)
		for _, f := range fields {
			if !achievement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != achievement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.SetField(achievement.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := auo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(achievement.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(achievement.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := auo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(achievement.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(achievement.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := auo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(achievement.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := auo.mutation.EntID(); ok {
		_spec.SetField(achievement.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := auo.mutation.AppID(); ok {
		_spec.SetField(achievement.FieldAppID, field.TypeUUID, value)
	}
	if auo.mutation.AppIDCleared() {
		_spec.ClearField(achievement.FieldAppID, field.TypeUUID)
	}
	if value, ok := auo.mutation.UserID(); ok {
		_spec.SetField(achievement.FieldUserID, field.TypeUUID, value)
	}
	if auo.mutation.UserIDCleared() {
		_spec.ClearField(achievement.FieldUserID, field.TypeUUID)
	}
	if value, ok := auo.mutation.GoodID(); ok {
		_spec.SetField(achievement.FieldGoodID, field.TypeUUID, value)
	}
	if auo.mutation.GoodIDCleared() {
		_spec.ClearField(achievement.FieldGoodID, field.TypeUUID)
	}
	if value, ok := auo.mutation.AppGoodID(); ok {
		_spec.SetField(achievement.FieldAppGoodID, field.TypeUUID, value)
	}
	if auo.mutation.AppGoodIDCleared() {
		_spec.ClearField(achievement.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := auo.mutation.CoinTypeID(); ok {
		_spec.SetField(achievement.FieldCoinTypeID, field.TypeUUID, value)
	}
	if auo.mutation.CoinTypeIDCleared() {
		_spec.ClearField(achievement.FieldCoinTypeID, field.TypeUUID)
	}
	if value, ok := auo.mutation.TotalUnitsV1(); ok {
		_spec.SetField(achievement.FieldTotalUnitsV1, field.TypeOther, value)
	}
	if auo.mutation.TotalUnitsV1Cleared() {
		_spec.ClearField(achievement.FieldTotalUnitsV1, field.TypeOther)
	}
	if value, ok := auo.mutation.SelfUnitsV1(); ok {
		_spec.SetField(achievement.FieldSelfUnitsV1, field.TypeOther, value)
	}
	if auo.mutation.SelfUnitsV1Cleared() {
		_spec.ClearField(achievement.FieldSelfUnitsV1, field.TypeOther)
	}
	if value, ok := auo.mutation.TotalAmount(); ok {
		_spec.SetField(achievement.FieldTotalAmount, field.TypeOther, value)
	}
	if auo.mutation.TotalAmountCleared() {
		_spec.ClearField(achievement.FieldTotalAmount, field.TypeOther)
	}
	if value, ok := auo.mutation.SelfAmount(); ok {
		_spec.SetField(achievement.FieldSelfAmount, field.TypeOther, value)
	}
	if auo.mutation.SelfAmountCleared() {
		_spec.ClearField(achievement.FieldSelfAmount, field.TypeOther)
	}
	if value, ok := auo.mutation.TotalCommission(); ok {
		_spec.SetField(achievement.FieldTotalCommission, field.TypeOther, value)
	}
	if auo.mutation.TotalCommissionCleared() {
		_spec.ClearField(achievement.FieldTotalCommission, field.TypeOther)
	}
	if value, ok := auo.mutation.SelfCommission(); ok {
		_spec.SetField(achievement.FieldSelfCommission, field.TypeOther, value)
	}
	if auo.mutation.SelfCommissionCleared() {
		_spec.ClearField(achievement.FieldSelfCommission, field.TypeOther)
	}
	_spec.AddModifiers(auo.modifiers...)
	_node = &Achievement{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{achievement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}

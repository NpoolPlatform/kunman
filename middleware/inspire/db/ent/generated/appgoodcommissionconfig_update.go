// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/appgoodcommissionconfig"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppGoodCommissionConfigUpdate is the builder for updating AppGoodCommissionConfig entities.
type AppGoodCommissionConfigUpdate struct {
	config
	hooks     []Hook
	mutation  *AppGoodCommissionConfigMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppGoodCommissionConfigUpdate builder.
func (agccu *AppGoodCommissionConfigUpdate) Where(ps ...predicate.AppGoodCommissionConfig) *AppGoodCommissionConfigUpdate {
	agccu.mutation.Where(ps...)
	return agccu
}

// SetCreatedAt sets the "created_at" field.
func (agccu *AppGoodCommissionConfigUpdate) SetCreatedAt(u uint32) *AppGoodCommissionConfigUpdate {
	agccu.mutation.ResetCreatedAt()
	agccu.mutation.SetCreatedAt(u)
	return agccu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (agccu *AppGoodCommissionConfigUpdate) SetNillableCreatedAt(u *uint32) *AppGoodCommissionConfigUpdate {
	if u != nil {
		agccu.SetCreatedAt(*u)
	}
	return agccu
}

// AddCreatedAt adds u to the "created_at" field.
func (agccu *AppGoodCommissionConfigUpdate) AddCreatedAt(u int32) *AppGoodCommissionConfigUpdate {
	agccu.mutation.AddCreatedAt(u)
	return agccu
}

// SetUpdatedAt sets the "updated_at" field.
func (agccu *AppGoodCommissionConfigUpdate) SetUpdatedAt(u uint32) *AppGoodCommissionConfigUpdate {
	agccu.mutation.ResetUpdatedAt()
	agccu.mutation.SetUpdatedAt(u)
	return agccu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (agccu *AppGoodCommissionConfigUpdate) AddUpdatedAt(u int32) *AppGoodCommissionConfigUpdate {
	agccu.mutation.AddUpdatedAt(u)
	return agccu
}

// SetDeletedAt sets the "deleted_at" field.
func (agccu *AppGoodCommissionConfigUpdate) SetDeletedAt(u uint32) *AppGoodCommissionConfigUpdate {
	agccu.mutation.ResetDeletedAt()
	agccu.mutation.SetDeletedAt(u)
	return agccu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (agccu *AppGoodCommissionConfigUpdate) SetNillableDeletedAt(u *uint32) *AppGoodCommissionConfigUpdate {
	if u != nil {
		agccu.SetDeletedAt(*u)
	}
	return agccu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (agccu *AppGoodCommissionConfigUpdate) AddDeletedAt(u int32) *AppGoodCommissionConfigUpdate {
	agccu.mutation.AddDeletedAt(u)
	return agccu
}

// SetEntID sets the "ent_id" field.
func (agccu *AppGoodCommissionConfigUpdate) SetEntID(u uuid.UUID) *AppGoodCommissionConfigUpdate {
	agccu.mutation.SetEntID(u)
	return agccu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (agccu *AppGoodCommissionConfigUpdate) SetNillableEntID(u *uuid.UUID) *AppGoodCommissionConfigUpdate {
	if u != nil {
		agccu.SetEntID(*u)
	}
	return agccu
}

// SetAppID sets the "app_id" field.
func (agccu *AppGoodCommissionConfigUpdate) SetAppID(u uuid.UUID) *AppGoodCommissionConfigUpdate {
	agccu.mutation.SetAppID(u)
	return agccu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (agccu *AppGoodCommissionConfigUpdate) SetNillableAppID(u *uuid.UUID) *AppGoodCommissionConfigUpdate {
	if u != nil {
		agccu.SetAppID(*u)
	}
	return agccu
}

// ClearAppID clears the value of the "app_id" field.
func (agccu *AppGoodCommissionConfigUpdate) ClearAppID() *AppGoodCommissionConfigUpdate {
	agccu.mutation.ClearAppID()
	return agccu
}

// SetGoodID sets the "good_id" field.
func (agccu *AppGoodCommissionConfigUpdate) SetGoodID(u uuid.UUID) *AppGoodCommissionConfigUpdate {
	agccu.mutation.SetGoodID(u)
	return agccu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (agccu *AppGoodCommissionConfigUpdate) SetNillableGoodID(u *uuid.UUID) *AppGoodCommissionConfigUpdate {
	if u != nil {
		agccu.SetGoodID(*u)
	}
	return agccu
}

// ClearGoodID clears the value of the "good_id" field.
func (agccu *AppGoodCommissionConfigUpdate) ClearGoodID() *AppGoodCommissionConfigUpdate {
	agccu.mutation.ClearGoodID()
	return agccu
}

// SetAppGoodID sets the "app_good_id" field.
func (agccu *AppGoodCommissionConfigUpdate) SetAppGoodID(u uuid.UUID) *AppGoodCommissionConfigUpdate {
	agccu.mutation.SetAppGoodID(u)
	return agccu
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (agccu *AppGoodCommissionConfigUpdate) SetNillableAppGoodID(u *uuid.UUID) *AppGoodCommissionConfigUpdate {
	if u != nil {
		agccu.SetAppGoodID(*u)
	}
	return agccu
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (agccu *AppGoodCommissionConfigUpdate) ClearAppGoodID() *AppGoodCommissionConfigUpdate {
	agccu.mutation.ClearAppGoodID()
	return agccu
}

// SetLevel sets the "level" field.
func (agccu *AppGoodCommissionConfigUpdate) SetLevel(u uint32) *AppGoodCommissionConfigUpdate {
	agccu.mutation.ResetLevel()
	agccu.mutation.SetLevel(u)
	return agccu
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (agccu *AppGoodCommissionConfigUpdate) SetNillableLevel(u *uint32) *AppGoodCommissionConfigUpdate {
	if u != nil {
		agccu.SetLevel(*u)
	}
	return agccu
}

// AddLevel adds u to the "level" field.
func (agccu *AppGoodCommissionConfigUpdate) AddLevel(u int32) *AppGoodCommissionConfigUpdate {
	agccu.mutation.AddLevel(u)
	return agccu
}

// ClearLevel clears the value of the "level" field.
func (agccu *AppGoodCommissionConfigUpdate) ClearLevel() *AppGoodCommissionConfigUpdate {
	agccu.mutation.ClearLevel()
	return agccu
}

// SetThresholdAmount sets the "threshold_amount" field.
func (agccu *AppGoodCommissionConfigUpdate) SetThresholdAmount(d decimal.Decimal) *AppGoodCommissionConfigUpdate {
	agccu.mutation.SetThresholdAmount(d)
	return agccu
}

// SetNillableThresholdAmount sets the "threshold_amount" field if the given value is not nil.
func (agccu *AppGoodCommissionConfigUpdate) SetNillableThresholdAmount(d *decimal.Decimal) *AppGoodCommissionConfigUpdate {
	if d != nil {
		agccu.SetThresholdAmount(*d)
	}
	return agccu
}

// ClearThresholdAmount clears the value of the "threshold_amount" field.
func (agccu *AppGoodCommissionConfigUpdate) ClearThresholdAmount() *AppGoodCommissionConfigUpdate {
	agccu.mutation.ClearThresholdAmount()
	return agccu
}

// SetAmountOrPercent sets the "amount_or_percent" field.
func (agccu *AppGoodCommissionConfigUpdate) SetAmountOrPercent(d decimal.Decimal) *AppGoodCommissionConfigUpdate {
	agccu.mutation.SetAmountOrPercent(d)
	return agccu
}

// SetNillableAmountOrPercent sets the "amount_or_percent" field if the given value is not nil.
func (agccu *AppGoodCommissionConfigUpdate) SetNillableAmountOrPercent(d *decimal.Decimal) *AppGoodCommissionConfigUpdate {
	if d != nil {
		agccu.SetAmountOrPercent(*d)
	}
	return agccu
}

// ClearAmountOrPercent clears the value of the "amount_or_percent" field.
func (agccu *AppGoodCommissionConfigUpdate) ClearAmountOrPercent() *AppGoodCommissionConfigUpdate {
	agccu.mutation.ClearAmountOrPercent()
	return agccu
}

// SetStartAt sets the "start_at" field.
func (agccu *AppGoodCommissionConfigUpdate) SetStartAt(u uint32) *AppGoodCommissionConfigUpdate {
	agccu.mutation.ResetStartAt()
	agccu.mutation.SetStartAt(u)
	return agccu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (agccu *AppGoodCommissionConfigUpdate) SetNillableStartAt(u *uint32) *AppGoodCommissionConfigUpdate {
	if u != nil {
		agccu.SetStartAt(*u)
	}
	return agccu
}

// AddStartAt adds u to the "start_at" field.
func (agccu *AppGoodCommissionConfigUpdate) AddStartAt(u int32) *AppGoodCommissionConfigUpdate {
	agccu.mutation.AddStartAt(u)
	return agccu
}

// ClearStartAt clears the value of the "start_at" field.
func (agccu *AppGoodCommissionConfigUpdate) ClearStartAt() *AppGoodCommissionConfigUpdate {
	agccu.mutation.ClearStartAt()
	return agccu
}

// SetEndAt sets the "end_at" field.
func (agccu *AppGoodCommissionConfigUpdate) SetEndAt(u uint32) *AppGoodCommissionConfigUpdate {
	agccu.mutation.ResetEndAt()
	agccu.mutation.SetEndAt(u)
	return agccu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (agccu *AppGoodCommissionConfigUpdate) SetNillableEndAt(u *uint32) *AppGoodCommissionConfigUpdate {
	if u != nil {
		agccu.SetEndAt(*u)
	}
	return agccu
}

// AddEndAt adds u to the "end_at" field.
func (agccu *AppGoodCommissionConfigUpdate) AddEndAt(u int32) *AppGoodCommissionConfigUpdate {
	agccu.mutation.AddEndAt(u)
	return agccu
}

// ClearEndAt clears the value of the "end_at" field.
func (agccu *AppGoodCommissionConfigUpdate) ClearEndAt() *AppGoodCommissionConfigUpdate {
	agccu.mutation.ClearEndAt()
	return agccu
}

// SetInvites sets the "invites" field.
func (agccu *AppGoodCommissionConfigUpdate) SetInvites(u uint32) *AppGoodCommissionConfigUpdate {
	agccu.mutation.ResetInvites()
	agccu.mutation.SetInvites(u)
	return agccu
}

// SetNillableInvites sets the "invites" field if the given value is not nil.
func (agccu *AppGoodCommissionConfigUpdate) SetNillableInvites(u *uint32) *AppGoodCommissionConfigUpdate {
	if u != nil {
		agccu.SetInvites(*u)
	}
	return agccu
}

// AddInvites adds u to the "invites" field.
func (agccu *AppGoodCommissionConfigUpdate) AddInvites(u int32) *AppGoodCommissionConfigUpdate {
	agccu.mutation.AddInvites(u)
	return agccu
}

// ClearInvites clears the value of the "invites" field.
func (agccu *AppGoodCommissionConfigUpdate) ClearInvites() *AppGoodCommissionConfigUpdate {
	agccu.mutation.ClearInvites()
	return agccu
}

// SetSettleType sets the "settle_type" field.
func (agccu *AppGoodCommissionConfigUpdate) SetSettleType(s string) *AppGoodCommissionConfigUpdate {
	agccu.mutation.SetSettleType(s)
	return agccu
}

// SetNillableSettleType sets the "settle_type" field if the given value is not nil.
func (agccu *AppGoodCommissionConfigUpdate) SetNillableSettleType(s *string) *AppGoodCommissionConfigUpdate {
	if s != nil {
		agccu.SetSettleType(*s)
	}
	return agccu
}

// ClearSettleType clears the value of the "settle_type" field.
func (agccu *AppGoodCommissionConfigUpdate) ClearSettleType() *AppGoodCommissionConfigUpdate {
	agccu.mutation.ClearSettleType()
	return agccu
}

// SetDisabled sets the "disabled" field.
func (agccu *AppGoodCommissionConfigUpdate) SetDisabled(b bool) *AppGoodCommissionConfigUpdate {
	agccu.mutation.SetDisabled(b)
	return agccu
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (agccu *AppGoodCommissionConfigUpdate) SetNillableDisabled(b *bool) *AppGoodCommissionConfigUpdate {
	if b != nil {
		agccu.SetDisabled(*b)
	}
	return agccu
}

// ClearDisabled clears the value of the "disabled" field.
func (agccu *AppGoodCommissionConfigUpdate) ClearDisabled() *AppGoodCommissionConfigUpdate {
	agccu.mutation.ClearDisabled()
	return agccu
}

// Mutation returns the AppGoodCommissionConfigMutation object of the builder.
func (agccu *AppGoodCommissionConfigUpdate) Mutation() *AppGoodCommissionConfigMutation {
	return agccu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (agccu *AppGoodCommissionConfigUpdate) Save(ctx context.Context) (int, error) {
	agccu.defaults()
	return withHooks(ctx, agccu.sqlSave, agccu.mutation, agccu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (agccu *AppGoodCommissionConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := agccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (agccu *AppGoodCommissionConfigUpdate) Exec(ctx context.Context) error {
	_, err := agccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agccu *AppGoodCommissionConfigUpdate) ExecX(ctx context.Context) {
	if err := agccu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agccu *AppGoodCommissionConfigUpdate) defaults() {
	if _, ok := agccu.mutation.UpdatedAt(); !ok {
		v := appgoodcommissionconfig.UpdateDefaultUpdatedAt()
		agccu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (agccu *AppGoodCommissionConfigUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppGoodCommissionConfigUpdate {
	agccu.modifiers = append(agccu.modifiers, modifiers...)
	return agccu
}

func (agccu *AppGoodCommissionConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appgoodcommissionconfig.Table, appgoodcommissionconfig.Columns, sqlgraph.NewFieldSpec(appgoodcommissionconfig.FieldID, field.TypeUint32))
	if ps := agccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agccu.mutation.CreatedAt(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := agccu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(appgoodcommissionconfig.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := agccu.mutation.UpdatedAt(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := agccu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(appgoodcommissionconfig.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := agccu.mutation.DeletedAt(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := agccu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(appgoodcommissionconfig.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := agccu.mutation.EntID(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := agccu.mutation.AppID(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldAppID, field.TypeUUID, value)
	}
	if agccu.mutation.AppIDCleared() {
		_spec.ClearField(appgoodcommissionconfig.FieldAppID, field.TypeUUID)
	}
	if value, ok := agccu.mutation.GoodID(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldGoodID, field.TypeUUID, value)
	}
	if agccu.mutation.GoodIDCleared() {
		_spec.ClearField(appgoodcommissionconfig.FieldGoodID, field.TypeUUID)
	}
	if value, ok := agccu.mutation.AppGoodID(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldAppGoodID, field.TypeUUID, value)
	}
	if agccu.mutation.AppGoodIDCleared() {
		_spec.ClearField(appgoodcommissionconfig.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := agccu.mutation.Level(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldLevel, field.TypeUint32, value)
	}
	if value, ok := agccu.mutation.AddedLevel(); ok {
		_spec.AddField(appgoodcommissionconfig.FieldLevel, field.TypeUint32, value)
	}
	if agccu.mutation.LevelCleared() {
		_spec.ClearField(appgoodcommissionconfig.FieldLevel, field.TypeUint32)
	}
	if value, ok := agccu.mutation.ThresholdAmount(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldThresholdAmount, field.TypeOther, value)
	}
	if agccu.mutation.ThresholdAmountCleared() {
		_spec.ClearField(appgoodcommissionconfig.FieldThresholdAmount, field.TypeOther)
	}
	if value, ok := agccu.mutation.AmountOrPercent(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldAmountOrPercent, field.TypeOther, value)
	}
	if agccu.mutation.AmountOrPercentCleared() {
		_spec.ClearField(appgoodcommissionconfig.FieldAmountOrPercent, field.TypeOther)
	}
	if value, ok := agccu.mutation.StartAt(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldStartAt, field.TypeUint32, value)
	}
	if value, ok := agccu.mutation.AddedStartAt(); ok {
		_spec.AddField(appgoodcommissionconfig.FieldStartAt, field.TypeUint32, value)
	}
	if agccu.mutation.StartAtCleared() {
		_spec.ClearField(appgoodcommissionconfig.FieldStartAt, field.TypeUint32)
	}
	if value, ok := agccu.mutation.EndAt(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldEndAt, field.TypeUint32, value)
	}
	if value, ok := agccu.mutation.AddedEndAt(); ok {
		_spec.AddField(appgoodcommissionconfig.FieldEndAt, field.TypeUint32, value)
	}
	if agccu.mutation.EndAtCleared() {
		_spec.ClearField(appgoodcommissionconfig.FieldEndAt, field.TypeUint32)
	}
	if value, ok := agccu.mutation.Invites(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldInvites, field.TypeUint32, value)
	}
	if value, ok := agccu.mutation.AddedInvites(); ok {
		_spec.AddField(appgoodcommissionconfig.FieldInvites, field.TypeUint32, value)
	}
	if agccu.mutation.InvitesCleared() {
		_spec.ClearField(appgoodcommissionconfig.FieldInvites, field.TypeUint32)
	}
	if value, ok := agccu.mutation.SettleType(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldSettleType, field.TypeString, value)
	}
	if agccu.mutation.SettleTypeCleared() {
		_spec.ClearField(appgoodcommissionconfig.FieldSettleType, field.TypeString)
	}
	if value, ok := agccu.mutation.Disabled(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldDisabled, field.TypeBool, value)
	}
	if agccu.mutation.DisabledCleared() {
		_spec.ClearField(appgoodcommissionconfig.FieldDisabled, field.TypeBool)
	}
	_spec.AddModifiers(agccu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, agccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appgoodcommissionconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	agccu.mutation.done = true
	return n, nil
}

// AppGoodCommissionConfigUpdateOne is the builder for updating a single AppGoodCommissionConfig entity.
type AppGoodCommissionConfigUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppGoodCommissionConfigMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetCreatedAt(u uint32) *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.ResetCreatedAt()
	agccuo.mutation.SetCreatedAt(u)
	return agccuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetNillableCreatedAt(u *uint32) *AppGoodCommissionConfigUpdateOne {
	if u != nil {
		agccuo.SetCreatedAt(*u)
	}
	return agccuo
}

// AddCreatedAt adds u to the "created_at" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) AddCreatedAt(u int32) *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.AddCreatedAt(u)
	return agccuo
}

// SetUpdatedAt sets the "updated_at" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetUpdatedAt(u uint32) *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.ResetUpdatedAt()
	agccuo.mutation.SetUpdatedAt(u)
	return agccuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) AddUpdatedAt(u int32) *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.AddUpdatedAt(u)
	return agccuo
}

// SetDeletedAt sets the "deleted_at" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetDeletedAt(u uint32) *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.ResetDeletedAt()
	agccuo.mutation.SetDeletedAt(u)
	return agccuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetNillableDeletedAt(u *uint32) *AppGoodCommissionConfigUpdateOne {
	if u != nil {
		agccuo.SetDeletedAt(*u)
	}
	return agccuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) AddDeletedAt(u int32) *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.AddDeletedAt(u)
	return agccuo
}

// SetEntID sets the "ent_id" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetEntID(u uuid.UUID) *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.SetEntID(u)
	return agccuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetNillableEntID(u *uuid.UUID) *AppGoodCommissionConfigUpdateOne {
	if u != nil {
		agccuo.SetEntID(*u)
	}
	return agccuo
}

// SetAppID sets the "app_id" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetAppID(u uuid.UUID) *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.SetAppID(u)
	return agccuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetNillableAppID(u *uuid.UUID) *AppGoodCommissionConfigUpdateOne {
	if u != nil {
		agccuo.SetAppID(*u)
	}
	return agccuo
}

// ClearAppID clears the value of the "app_id" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) ClearAppID() *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.ClearAppID()
	return agccuo
}

// SetGoodID sets the "good_id" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetGoodID(u uuid.UUID) *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.SetGoodID(u)
	return agccuo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetNillableGoodID(u *uuid.UUID) *AppGoodCommissionConfigUpdateOne {
	if u != nil {
		agccuo.SetGoodID(*u)
	}
	return agccuo
}

// ClearGoodID clears the value of the "good_id" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) ClearGoodID() *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.ClearGoodID()
	return agccuo
}

// SetAppGoodID sets the "app_good_id" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetAppGoodID(u uuid.UUID) *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.SetAppGoodID(u)
	return agccuo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *AppGoodCommissionConfigUpdateOne {
	if u != nil {
		agccuo.SetAppGoodID(*u)
	}
	return agccuo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) ClearAppGoodID() *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.ClearAppGoodID()
	return agccuo
}

// SetLevel sets the "level" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetLevel(u uint32) *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.ResetLevel()
	agccuo.mutation.SetLevel(u)
	return agccuo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetNillableLevel(u *uint32) *AppGoodCommissionConfigUpdateOne {
	if u != nil {
		agccuo.SetLevel(*u)
	}
	return agccuo
}

// AddLevel adds u to the "level" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) AddLevel(u int32) *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.AddLevel(u)
	return agccuo
}

// ClearLevel clears the value of the "level" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) ClearLevel() *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.ClearLevel()
	return agccuo
}

// SetThresholdAmount sets the "threshold_amount" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetThresholdAmount(d decimal.Decimal) *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.SetThresholdAmount(d)
	return agccuo
}

// SetNillableThresholdAmount sets the "threshold_amount" field if the given value is not nil.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetNillableThresholdAmount(d *decimal.Decimal) *AppGoodCommissionConfigUpdateOne {
	if d != nil {
		agccuo.SetThresholdAmount(*d)
	}
	return agccuo
}

// ClearThresholdAmount clears the value of the "threshold_amount" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) ClearThresholdAmount() *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.ClearThresholdAmount()
	return agccuo
}

// SetAmountOrPercent sets the "amount_or_percent" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetAmountOrPercent(d decimal.Decimal) *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.SetAmountOrPercent(d)
	return agccuo
}

// SetNillableAmountOrPercent sets the "amount_or_percent" field if the given value is not nil.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetNillableAmountOrPercent(d *decimal.Decimal) *AppGoodCommissionConfigUpdateOne {
	if d != nil {
		agccuo.SetAmountOrPercent(*d)
	}
	return agccuo
}

// ClearAmountOrPercent clears the value of the "amount_or_percent" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) ClearAmountOrPercent() *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.ClearAmountOrPercent()
	return agccuo
}

// SetStartAt sets the "start_at" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetStartAt(u uint32) *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.ResetStartAt()
	agccuo.mutation.SetStartAt(u)
	return agccuo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetNillableStartAt(u *uint32) *AppGoodCommissionConfigUpdateOne {
	if u != nil {
		agccuo.SetStartAt(*u)
	}
	return agccuo
}

// AddStartAt adds u to the "start_at" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) AddStartAt(u int32) *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.AddStartAt(u)
	return agccuo
}

// ClearStartAt clears the value of the "start_at" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) ClearStartAt() *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.ClearStartAt()
	return agccuo
}

// SetEndAt sets the "end_at" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetEndAt(u uint32) *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.ResetEndAt()
	agccuo.mutation.SetEndAt(u)
	return agccuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetNillableEndAt(u *uint32) *AppGoodCommissionConfigUpdateOne {
	if u != nil {
		agccuo.SetEndAt(*u)
	}
	return agccuo
}

// AddEndAt adds u to the "end_at" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) AddEndAt(u int32) *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.AddEndAt(u)
	return agccuo
}

// ClearEndAt clears the value of the "end_at" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) ClearEndAt() *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.ClearEndAt()
	return agccuo
}

// SetInvites sets the "invites" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetInvites(u uint32) *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.ResetInvites()
	agccuo.mutation.SetInvites(u)
	return agccuo
}

// SetNillableInvites sets the "invites" field if the given value is not nil.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetNillableInvites(u *uint32) *AppGoodCommissionConfigUpdateOne {
	if u != nil {
		agccuo.SetInvites(*u)
	}
	return agccuo
}

// AddInvites adds u to the "invites" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) AddInvites(u int32) *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.AddInvites(u)
	return agccuo
}

// ClearInvites clears the value of the "invites" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) ClearInvites() *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.ClearInvites()
	return agccuo
}

// SetSettleType sets the "settle_type" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetSettleType(s string) *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.SetSettleType(s)
	return agccuo
}

// SetNillableSettleType sets the "settle_type" field if the given value is not nil.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetNillableSettleType(s *string) *AppGoodCommissionConfigUpdateOne {
	if s != nil {
		agccuo.SetSettleType(*s)
	}
	return agccuo
}

// ClearSettleType clears the value of the "settle_type" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) ClearSettleType() *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.ClearSettleType()
	return agccuo
}

// SetDisabled sets the "disabled" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetDisabled(b bool) *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.SetDisabled(b)
	return agccuo
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (agccuo *AppGoodCommissionConfigUpdateOne) SetNillableDisabled(b *bool) *AppGoodCommissionConfigUpdateOne {
	if b != nil {
		agccuo.SetDisabled(*b)
	}
	return agccuo
}

// ClearDisabled clears the value of the "disabled" field.
func (agccuo *AppGoodCommissionConfigUpdateOne) ClearDisabled() *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.ClearDisabled()
	return agccuo
}

// Mutation returns the AppGoodCommissionConfigMutation object of the builder.
func (agccuo *AppGoodCommissionConfigUpdateOne) Mutation() *AppGoodCommissionConfigMutation {
	return agccuo.mutation
}

// Where appends a list predicates to the AppGoodCommissionConfigUpdate builder.
func (agccuo *AppGoodCommissionConfigUpdateOne) Where(ps ...predicate.AppGoodCommissionConfig) *AppGoodCommissionConfigUpdateOne {
	agccuo.mutation.Where(ps...)
	return agccuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (agccuo *AppGoodCommissionConfigUpdateOne) Select(field string, fields ...string) *AppGoodCommissionConfigUpdateOne {
	agccuo.fields = append([]string{field}, fields...)
	return agccuo
}

// Save executes the query and returns the updated AppGoodCommissionConfig entity.
func (agccuo *AppGoodCommissionConfigUpdateOne) Save(ctx context.Context) (*AppGoodCommissionConfig, error) {
	agccuo.defaults()
	return withHooks(ctx, agccuo.sqlSave, agccuo.mutation, agccuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (agccuo *AppGoodCommissionConfigUpdateOne) SaveX(ctx context.Context) *AppGoodCommissionConfig {
	node, err := agccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (agccuo *AppGoodCommissionConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := agccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agccuo *AppGoodCommissionConfigUpdateOne) ExecX(ctx context.Context) {
	if err := agccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agccuo *AppGoodCommissionConfigUpdateOne) defaults() {
	if _, ok := agccuo.mutation.UpdatedAt(); !ok {
		v := appgoodcommissionconfig.UpdateDefaultUpdatedAt()
		agccuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (agccuo *AppGoodCommissionConfigUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppGoodCommissionConfigUpdateOne {
	agccuo.modifiers = append(agccuo.modifiers, modifiers...)
	return agccuo
}

func (agccuo *AppGoodCommissionConfigUpdateOne) sqlSave(ctx context.Context) (_node *AppGoodCommissionConfig, err error) {
	_spec := sqlgraph.NewUpdateSpec(appgoodcommissionconfig.Table, appgoodcommissionconfig.Columns, sqlgraph.NewFieldSpec(appgoodcommissionconfig.FieldID, field.TypeUint32))
	id, ok := agccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AppGoodCommissionConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := agccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appgoodcommissionconfig.FieldID)
		for _, f := range fields {
			if !appgoodcommissionconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != appgoodcommissionconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := agccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agccuo.mutation.CreatedAt(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := agccuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(appgoodcommissionconfig.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := agccuo.mutation.UpdatedAt(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := agccuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(appgoodcommissionconfig.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := agccuo.mutation.DeletedAt(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := agccuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(appgoodcommissionconfig.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := agccuo.mutation.EntID(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := agccuo.mutation.AppID(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldAppID, field.TypeUUID, value)
	}
	if agccuo.mutation.AppIDCleared() {
		_spec.ClearField(appgoodcommissionconfig.FieldAppID, field.TypeUUID)
	}
	if value, ok := agccuo.mutation.GoodID(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldGoodID, field.TypeUUID, value)
	}
	if agccuo.mutation.GoodIDCleared() {
		_spec.ClearField(appgoodcommissionconfig.FieldGoodID, field.TypeUUID)
	}
	if value, ok := agccuo.mutation.AppGoodID(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldAppGoodID, field.TypeUUID, value)
	}
	if agccuo.mutation.AppGoodIDCleared() {
		_spec.ClearField(appgoodcommissionconfig.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := agccuo.mutation.Level(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldLevel, field.TypeUint32, value)
	}
	if value, ok := agccuo.mutation.AddedLevel(); ok {
		_spec.AddField(appgoodcommissionconfig.FieldLevel, field.TypeUint32, value)
	}
	if agccuo.mutation.LevelCleared() {
		_spec.ClearField(appgoodcommissionconfig.FieldLevel, field.TypeUint32)
	}
	if value, ok := agccuo.mutation.ThresholdAmount(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldThresholdAmount, field.TypeOther, value)
	}
	if agccuo.mutation.ThresholdAmountCleared() {
		_spec.ClearField(appgoodcommissionconfig.FieldThresholdAmount, field.TypeOther)
	}
	if value, ok := agccuo.mutation.AmountOrPercent(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldAmountOrPercent, field.TypeOther, value)
	}
	if agccuo.mutation.AmountOrPercentCleared() {
		_spec.ClearField(appgoodcommissionconfig.FieldAmountOrPercent, field.TypeOther)
	}
	if value, ok := agccuo.mutation.StartAt(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldStartAt, field.TypeUint32, value)
	}
	if value, ok := agccuo.mutation.AddedStartAt(); ok {
		_spec.AddField(appgoodcommissionconfig.FieldStartAt, field.TypeUint32, value)
	}
	if agccuo.mutation.StartAtCleared() {
		_spec.ClearField(appgoodcommissionconfig.FieldStartAt, field.TypeUint32)
	}
	if value, ok := agccuo.mutation.EndAt(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldEndAt, field.TypeUint32, value)
	}
	if value, ok := agccuo.mutation.AddedEndAt(); ok {
		_spec.AddField(appgoodcommissionconfig.FieldEndAt, field.TypeUint32, value)
	}
	if agccuo.mutation.EndAtCleared() {
		_spec.ClearField(appgoodcommissionconfig.FieldEndAt, field.TypeUint32)
	}
	if value, ok := agccuo.mutation.Invites(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldInvites, field.TypeUint32, value)
	}
	if value, ok := agccuo.mutation.AddedInvites(); ok {
		_spec.AddField(appgoodcommissionconfig.FieldInvites, field.TypeUint32, value)
	}
	if agccuo.mutation.InvitesCleared() {
		_spec.ClearField(appgoodcommissionconfig.FieldInvites, field.TypeUint32)
	}
	if value, ok := agccuo.mutation.SettleType(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldSettleType, field.TypeString, value)
	}
	if agccuo.mutation.SettleTypeCleared() {
		_spec.ClearField(appgoodcommissionconfig.FieldSettleType, field.TypeString)
	}
	if value, ok := agccuo.mutation.Disabled(); ok {
		_spec.SetField(appgoodcommissionconfig.FieldDisabled, field.TypeBool, value)
	}
	if agccuo.mutation.DisabledCleared() {
		_spec.ClearField(appgoodcommissionconfig.FieldDisabled, field.TypeBool)
	}
	_spec.AddModifiers(agccuo.modifiers...)
	_node = &AppGoodCommissionConfig{config: agccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, agccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appgoodcommissionconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	agccuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/appgoodscope"
	"github.com/google/uuid"
)

// AppGoodScopeCreate is the builder for creating a AppGoodScope entity.
type AppGoodScopeCreate struct {
	config
	mutation *AppGoodScopeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (agsc *AppGoodScopeCreate) SetCreatedAt(u uint32) *AppGoodScopeCreate {
	agsc.mutation.SetCreatedAt(u)
	return agsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (agsc *AppGoodScopeCreate) SetNillableCreatedAt(u *uint32) *AppGoodScopeCreate {
	if u != nil {
		agsc.SetCreatedAt(*u)
	}
	return agsc
}

// SetUpdatedAt sets the "updated_at" field.
func (agsc *AppGoodScopeCreate) SetUpdatedAt(u uint32) *AppGoodScopeCreate {
	agsc.mutation.SetUpdatedAt(u)
	return agsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (agsc *AppGoodScopeCreate) SetNillableUpdatedAt(u *uint32) *AppGoodScopeCreate {
	if u != nil {
		agsc.SetUpdatedAt(*u)
	}
	return agsc
}

// SetDeletedAt sets the "deleted_at" field.
func (agsc *AppGoodScopeCreate) SetDeletedAt(u uint32) *AppGoodScopeCreate {
	agsc.mutation.SetDeletedAt(u)
	return agsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (agsc *AppGoodScopeCreate) SetNillableDeletedAt(u *uint32) *AppGoodScopeCreate {
	if u != nil {
		agsc.SetDeletedAt(*u)
	}
	return agsc
}

// SetEntID sets the "ent_id" field.
func (agsc *AppGoodScopeCreate) SetEntID(u uuid.UUID) *AppGoodScopeCreate {
	agsc.mutation.SetEntID(u)
	return agsc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (agsc *AppGoodScopeCreate) SetNillableEntID(u *uuid.UUID) *AppGoodScopeCreate {
	if u != nil {
		agsc.SetEntID(*u)
	}
	return agsc
}

// SetAppID sets the "app_id" field.
func (agsc *AppGoodScopeCreate) SetAppID(u uuid.UUID) *AppGoodScopeCreate {
	agsc.mutation.SetAppID(u)
	return agsc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (agsc *AppGoodScopeCreate) SetNillableAppID(u *uuid.UUID) *AppGoodScopeCreate {
	if u != nil {
		agsc.SetAppID(*u)
	}
	return agsc
}

// SetAppGoodID sets the "app_good_id" field.
func (agsc *AppGoodScopeCreate) SetAppGoodID(u uuid.UUID) *AppGoodScopeCreate {
	agsc.mutation.SetAppGoodID(u)
	return agsc
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (agsc *AppGoodScopeCreate) SetNillableAppGoodID(u *uuid.UUID) *AppGoodScopeCreate {
	if u != nil {
		agsc.SetAppGoodID(*u)
	}
	return agsc
}

// SetCouponID sets the "coupon_id" field.
func (agsc *AppGoodScopeCreate) SetCouponID(u uuid.UUID) *AppGoodScopeCreate {
	agsc.mutation.SetCouponID(u)
	return agsc
}

// SetNillableCouponID sets the "coupon_id" field if the given value is not nil.
func (agsc *AppGoodScopeCreate) SetNillableCouponID(u *uuid.UUID) *AppGoodScopeCreate {
	if u != nil {
		agsc.SetCouponID(*u)
	}
	return agsc
}

// SetCouponScope sets the "coupon_scope" field.
func (agsc *AppGoodScopeCreate) SetCouponScope(s string) *AppGoodScopeCreate {
	agsc.mutation.SetCouponScope(s)
	return agsc
}

// SetNillableCouponScope sets the "coupon_scope" field if the given value is not nil.
func (agsc *AppGoodScopeCreate) SetNillableCouponScope(s *string) *AppGoodScopeCreate {
	if s != nil {
		agsc.SetCouponScope(*s)
	}
	return agsc
}

// SetID sets the "id" field.
func (agsc *AppGoodScopeCreate) SetID(u uint32) *AppGoodScopeCreate {
	agsc.mutation.SetID(u)
	return agsc
}

// Mutation returns the AppGoodScopeMutation object of the builder.
func (agsc *AppGoodScopeCreate) Mutation() *AppGoodScopeMutation {
	return agsc.mutation
}

// Save creates the AppGoodScope in the database.
func (agsc *AppGoodScopeCreate) Save(ctx context.Context) (*AppGoodScope, error) {
	agsc.defaults()
	return withHooks(ctx, agsc.sqlSave, agsc.mutation, agsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (agsc *AppGoodScopeCreate) SaveX(ctx context.Context) *AppGoodScope {
	v, err := agsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agsc *AppGoodScopeCreate) Exec(ctx context.Context) error {
	_, err := agsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agsc *AppGoodScopeCreate) ExecX(ctx context.Context) {
	if err := agsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agsc *AppGoodScopeCreate) defaults() {
	if _, ok := agsc.mutation.CreatedAt(); !ok {
		v := appgoodscope.DefaultCreatedAt()
		agsc.mutation.SetCreatedAt(v)
	}
	if _, ok := agsc.mutation.UpdatedAt(); !ok {
		v := appgoodscope.DefaultUpdatedAt()
		agsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := agsc.mutation.DeletedAt(); !ok {
		v := appgoodscope.DefaultDeletedAt()
		agsc.mutation.SetDeletedAt(v)
	}
	if _, ok := agsc.mutation.EntID(); !ok {
		v := appgoodscope.DefaultEntID()
		agsc.mutation.SetEntID(v)
	}
	if _, ok := agsc.mutation.AppID(); !ok {
		v := appgoodscope.DefaultAppID()
		agsc.mutation.SetAppID(v)
	}
	if _, ok := agsc.mutation.AppGoodID(); !ok {
		v := appgoodscope.DefaultAppGoodID()
		agsc.mutation.SetAppGoodID(v)
	}
	if _, ok := agsc.mutation.CouponID(); !ok {
		v := appgoodscope.DefaultCouponID()
		agsc.mutation.SetCouponID(v)
	}
	if _, ok := agsc.mutation.CouponScope(); !ok {
		v := appgoodscope.DefaultCouponScope
		agsc.mutation.SetCouponScope(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (agsc *AppGoodScopeCreate) check() error {
	if _, ok := agsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "AppGoodScope.created_at"`)}
	}
	if _, ok := agsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "AppGoodScope.updated_at"`)}
	}
	if _, ok := agsc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "AppGoodScope.deleted_at"`)}
	}
	if _, ok := agsc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "AppGoodScope.ent_id"`)}
	}
	return nil
}

func (agsc *AppGoodScopeCreate) sqlSave(ctx context.Context) (*AppGoodScope, error) {
	if err := agsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := agsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, agsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	agsc.mutation.id = &_node.ID
	agsc.mutation.done = true
	return _node, nil
}

func (agsc *AppGoodScopeCreate) createSpec() (*AppGoodScope, *sqlgraph.CreateSpec) {
	var (
		_node = &AppGoodScope{config: agsc.config}
		_spec = sqlgraph.NewCreateSpec(appgoodscope.Table, sqlgraph.NewFieldSpec(appgoodscope.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = agsc.conflict
	if id, ok := agsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := agsc.mutation.CreatedAt(); ok {
		_spec.SetField(appgoodscope.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := agsc.mutation.UpdatedAt(); ok {
		_spec.SetField(appgoodscope.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := agsc.mutation.DeletedAt(); ok {
		_spec.SetField(appgoodscope.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := agsc.mutation.EntID(); ok {
		_spec.SetField(appgoodscope.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := agsc.mutation.AppID(); ok {
		_spec.SetField(appgoodscope.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := agsc.mutation.AppGoodID(); ok {
		_spec.SetField(appgoodscope.FieldAppGoodID, field.TypeUUID, value)
		_node.AppGoodID = value
	}
	if value, ok := agsc.mutation.CouponID(); ok {
		_spec.SetField(appgoodscope.FieldCouponID, field.TypeUUID, value)
		_node.CouponID = value
	}
	if value, ok := agsc.mutation.CouponScope(); ok {
		_spec.SetField(appgoodscope.FieldCouponScope, field.TypeString, value)
		_node.CouponScope = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppGoodScope.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppGoodScopeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (agsc *AppGoodScopeCreate) OnConflict(opts ...sql.ConflictOption) *AppGoodScopeUpsertOne {
	agsc.conflict = opts
	return &AppGoodScopeUpsertOne{
		create: agsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppGoodScope.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (agsc *AppGoodScopeCreate) OnConflictColumns(columns ...string) *AppGoodScopeUpsertOne {
	agsc.conflict = append(agsc.conflict, sql.ConflictColumns(columns...))
	return &AppGoodScopeUpsertOne{
		create: agsc,
	}
}

type (
	// AppGoodScopeUpsertOne is the builder for "upsert"-ing
	//  one AppGoodScope node.
	AppGoodScopeUpsertOne struct {
		create *AppGoodScopeCreate
	}

	// AppGoodScopeUpsert is the "OnConflict" setter.
	AppGoodScopeUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *AppGoodScopeUpsert) SetCreatedAt(v uint32) *AppGoodScopeUpsert {
	u.Set(appgoodscope.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppGoodScopeUpsert) UpdateCreatedAt() *AppGoodScopeUpsert {
	u.SetExcluded(appgoodscope.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppGoodScopeUpsert) AddCreatedAt(v uint32) *AppGoodScopeUpsert {
	u.Add(appgoodscope.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppGoodScopeUpsert) SetUpdatedAt(v uint32) *AppGoodScopeUpsert {
	u.Set(appgoodscope.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppGoodScopeUpsert) UpdateUpdatedAt() *AppGoodScopeUpsert {
	u.SetExcluded(appgoodscope.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppGoodScopeUpsert) AddUpdatedAt(v uint32) *AppGoodScopeUpsert {
	u.Add(appgoodscope.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppGoodScopeUpsert) SetDeletedAt(v uint32) *AppGoodScopeUpsert {
	u.Set(appgoodscope.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppGoodScopeUpsert) UpdateDeletedAt() *AppGoodScopeUpsert {
	u.SetExcluded(appgoodscope.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppGoodScopeUpsert) AddDeletedAt(v uint32) *AppGoodScopeUpsert {
	u.Add(appgoodscope.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppGoodScopeUpsert) SetEntID(v uuid.UUID) *AppGoodScopeUpsert {
	u.Set(appgoodscope.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppGoodScopeUpsert) UpdateEntID() *AppGoodScopeUpsert {
	u.SetExcluded(appgoodscope.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppGoodScopeUpsert) SetAppID(v uuid.UUID) *AppGoodScopeUpsert {
	u.Set(appgoodscope.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppGoodScopeUpsert) UpdateAppID() *AppGoodScopeUpsert {
	u.SetExcluded(appgoodscope.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppGoodScopeUpsert) ClearAppID() *AppGoodScopeUpsert {
	u.SetNull(appgoodscope.FieldAppID)
	return u
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppGoodScopeUpsert) SetAppGoodID(v uuid.UUID) *AppGoodScopeUpsert {
	u.Set(appgoodscope.FieldAppGoodID, v)
	return u
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppGoodScopeUpsert) UpdateAppGoodID() *AppGoodScopeUpsert {
	u.SetExcluded(appgoodscope.FieldAppGoodID)
	return u
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppGoodScopeUpsert) ClearAppGoodID() *AppGoodScopeUpsert {
	u.SetNull(appgoodscope.FieldAppGoodID)
	return u
}

// SetCouponID sets the "coupon_id" field.
func (u *AppGoodScopeUpsert) SetCouponID(v uuid.UUID) *AppGoodScopeUpsert {
	u.Set(appgoodscope.FieldCouponID, v)
	return u
}

// UpdateCouponID sets the "coupon_id" field to the value that was provided on create.
func (u *AppGoodScopeUpsert) UpdateCouponID() *AppGoodScopeUpsert {
	u.SetExcluded(appgoodscope.FieldCouponID)
	return u
}

// ClearCouponID clears the value of the "coupon_id" field.
func (u *AppGoodScopeUpsert) ClearCouponID() *AppGoodScopeUpsert {
	u.SetNull(appgoodscope.FieldCouponID)
	return u
}

// SetCouponScope sets the "coupon_scope" field.
func (u *AppGoodScopeUpsert) SetCouponScope(v string) *AppGoodScopeUpsert {
	u.Set(appgoodscope.FieldCouponScope, v)
	return u
}

// UpdateCouponScope sets the "coupon_scope" field to the value that was provided on create.
func (u *AppGoodScopeUpsert) UpdateCouponScope() *AppGoodScopeUpsert {
	u.SetExcluded(appgoodscope.FieldCouponScope)
	return u
}

// ClearCouponScope clears the value of the "coupon_scope" field.
func (u *AppGoodScopeUpsert) ClearCouponScope() *AppGoodScopeUpsert {
	u.SetNull(appgoodscope.FieldCouponScope)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppGoodScope.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appgoodscope.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppGoodScopeUpsertOne) UpdateNewValues() *AppGoodScopeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appgoodscope.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppGoodScope.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppGoodScopeUpsertOne) Ignore() *AppGoodScopeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppGoodScopeUpsertOne) DoNothing() *AppGoodScopeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppGoodScopeCreate.OnConflict
// documentation for more info.
func (u *AppGoodScopeUpsertOne) Update(set func(*AppGoodScopeUpsert)) *AppGoodScopeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppGoodScopeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppGoodScopeUpsertOne) SetCreatedAt(v uint32) *AppGoodScopeUpsertOne {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppGoodScopeUpsertOne) AddCreatedAt(v uint32) *AppGoodScopeUpsertOne {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppGoodScopeUpsertOne) UpdateCreatedAt() *AppGoodScopeUpsertOne {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppGoodScopeUpsertOne) SetUpdatedAt(v uint32) *AppGoodScopeUpsertOne {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppGoodScopeUpsertOne) AddUpdatedAt(v uint32) *AppGoodScopeUpsertOne {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppGoodScopeUpsertOne) UpdateUpdatedAt() *AppGoodScopeUpsertOne {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppGoodScopeUpsertOne) SetDeletedAt(v uint32) *AppGoodScopeUpsertOne {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppGoodScopeUpsertOne) AddDeletedAt(v uint32) *AppGoodScopeUpsertOne {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppGoodScopeUpsertOne) UpdateDeletedAt() *AppGoodScopeUpsertOne {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *AppGoodScopeUpsertOne) SetEntID(v uuid.UUID) *AppGoodScopeUpsertOne {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppGoodScopeUpsertOne) UpdateEntID() *AppGoodScopeUpsertOne {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppGoodScopeUpsertOne) SetAppID(v uuid.UUID) *AppGoodScopeUpsertOne {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppGoodScopeUpsertOne) UpdateAppID() *AppGoodScopeUpsertOne {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppGoodScopeUpsertOne) ClearAppID() *AppGoodScopeUpsertOne {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.ClearAppID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppGoodScopeUpsertOne) SetAppGoodID(v uuid.UUID) *AppGoodScopeUpsertOne {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppGoodScopeUpsertOne) UpdateAppGoodID() *AppGoodScopeUpsertOne {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppGoodScopeUpsertOne) ClearAppGoodID() *AppGoodScopeUpsertOne {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.ClearAppGoodID()
	})
}

// SetCouponID sets the "coupon_id" field.
func (u *AppGoodScopeUpsertOne) SetCouponID(v uuid.UUID) *AppGoodScopeUpsertOne {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.SetCouponID(v)
	})
}

// UpdateCouponID sets the "coupon_id" field to the value that was provided on create.
func (u *AppGoodScopeUpsertOne) UpdateCouponID() *AppGoodScopeUpsertOne {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.UpdateCouponID()
	})
}

// ClearCouponID clears the value of the "coupon_id" field.
func (u *AppGoodScopeUpsertOne) ClearCouponID() *AppGoodScopeUpsertOne {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.ClearCouponID()
	})
}

// SetCouponScope sets the "coupon_scope" field.
func (u *AppGoodScopeUpsertOne) SetCouponScope(v string) *AppGoodScopeUpsertOne {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.SetCouponScope(v)
	})
}

// UpdateCouponScope sets the "coupon_scope" field to the value that was provided on create.
func (u *AppGoodScopeUpsertOne) UpdateCouponScope() *AppGoodScopeUpsertOne {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.UpdateCouponScope()
	})
}

// ClearCouponScope clears the value of the "coupon_scope" field.
func (u *AppGoodScopeUpsertOne) ClearCouponScope() *AppGoodScopeUpsertOne {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.ClearCouponScope()
	})
}

// Exec executes the query.
func (u *AppGoodScopeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppGoodScopeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppGoodScopeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppGoodScopeUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppGoodScopeUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppGoodScopeCreateBulk is the builder for creating many AppGoodScope entities in bulk.
type AppGoodScopeCreateBulk struct {
	config
	err      error
	builders []*AppGoodScopeCreate
	conflict []sql.ConflictOption
}

// Save creates the AppGoodScope entities in the database.
func (agscb *AppGoodScopeCreateBulk) Save(ctx context.Context) ([]*AppGoodScope, error) {
	if agscb.err != nil {
		return nil, agscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(agscb.builders))
	nodes := make([]*AppGoodScope, len(agscb.builders))
	mutators := make([]Mutator, len(agscb.builders))
	for i := range agscb.builders {
		func(i int, root context.Context) {
			builder := agscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppGoodScopeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, agscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = agscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, agscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, agscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (agscb *AppGoodScopeCreateBulk) SaveX(ctx context.Context) []*AppGoodScope {
	v, err := agscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agscb *AppGoodScopeCreateBulk) Exec(ctx context.Context) error {
	_, err := agscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agscb *AppGoodScopeCreateBulk) ExecX(ctx context.Context) {
	if err := agscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppGoodScope.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppGoodScopeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (agscb *AppGoodScopeCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppGoodScopeUpsertBulk {
	agscb.conflict = opts
	return &AppGoodScopeUpsertBulk{
		create: agscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppGoodScope.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (agscb *AppGoodScopeCreateBulk) OnConflictColumns(columns ...string) *AppGoodScopeUpsertBulk {
	agscb.conflict = append(agscb.conflict, sql.ConflictColumns(columns...))
	return &AppGoodScopeUpsertBulk{
		create: agscb,
	}
}

// AppGoodScopeUpsertBulk is the builder for "upsert"-ing
// a bulk of AppGoodScope nodes.
type AppGoodScopeUpsertBulk struct {
	create *AppGoodScopeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppGoodScope.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appgoodscope.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppGoodScopeUpsertBulk) UpdateNewValues() *AppGoodScopeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appgoodscope.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppGoodScope.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppGoodScopeUpsertBulk) Ignore() *AppGoodScopeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppGoodScopeUpsertBulk) DoNothing() *AppGoodScopeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppGoodScopeCreateBulk.OnConflict
// documentation for more info.
func (u *AppGoodScopeUpsertBulk) Update(set func(*AppGoodScopeUpsert)) *AppGoodScopeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppGoodScopeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppGoodScopeUpsertBulk) SetCreatedAt(v uint32) *AppGoodScopeUpsertBulk {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppGoodScopeUpsertBulk) AddCreatedAt(v uint32) *AppGoodScopeUpsertBulk {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppGoodScopeUpsertBulk) UpdateCreatedAt() *AppGoodScopeUpsertBulk {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppGoodScopeUpsertBulk) SetUpdatedAt(v uint32) *AppGoodScopeUpsertBulk {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppGoodScopeUpsertBulk) AddUpdatedAt(v uint32) *AppGoodScopeUpsertBulk {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppGoodScopeUpsertBulk) UpdateUpdatedAt() *AppGoodScopeUpsertBulk {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppGoodScopeUpsertBulk) SetDeletedAt(v uint32) *AppGoodScopeUpsertBulk {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppGoodScopeUpsertBulk) AddDeletedAt(v uint32) *AppGoodScopeUpsertBulk {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppGoodScopeUpsertBulk) UpdateDeletedAt() *AppGoodScopeUpsertBulk {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *AppGoodScopeUpsertBulk) SetEntID(v uuid.UUID) *AppGoodScopeUpsertBulk {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppGoodScopeUpsertBulk) UpdateEntID() *AppGoodScopeUpsertBulk {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppGoodScopeUpsertBulk) SetAppID(v uuid.UUID) *AppGoodScopeUpsertBulk {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppGoodScopeUpsertBulk) UpdateAppID() *AppGoodScopeUpsertBulk {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppGoodScopeUpsertBulk) ClearAppID() *AppGoodScopeUpsertBulk {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.ClearAppID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppGoodScopeUpsertBulk) SetAppGoodID(v uuid.UUID) *AppGoodScopeUpsertBulk {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppGoodScopeUpsertBulk) UpdateAppGoodID() *AppGoodScopeUpsertBulk {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppGoodScopeUpsertBulk) ClearAppGoodID() *AppGoodScopeUpsertBulk {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.ClearAppGoodID()
	})
}

// SetCouponID sets the "coupon_id" field.
func (u *AppGoodScopeUpsertBulk) SetCouponID(v uuid.UUID) *AppGoodScopeUpsertBulk {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.SetCouponID(v)
	})
}

// UpdateCouponID sets the "coupon_id" field to the value that was provided on create.
func (u *AppGoodScopeUpsertBulk) UpdateCouponID() *AppGoodScopeUpsertBulk {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.UpdateCouponID()
	})
}

// ClearCouponID clears the value of the "coupon_id" field.
func (u *AppGoodScopeUpsertBulk) ClearCouponID() *AppGoodScopeUpsertBulk {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.ClearCouponID()
	})
}

// SetCouponScope sets the "coupon_scope" field.
func (u *AppGoodScopeUpsertBulk) SetCouponScope(v string) *AppGoodScopeUpsertBulk {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.SetCouponScope(v)
	})
}

// UpdateCouponScope sets the "coupon_scope" field to the value that was provided on create.
func (u *AppGoodScopeUpsertBulk) UpdateCouponScope() *AppGoodScopeUpsertBulk {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.UpdateCouponScope()
	})
}

// ClearCouponScope clears the value of the "coupon_scope" field.
func (u *AppGoodScopeUpsertBulk) ClearCouponScope() *AppGoodScopeUpsertBulk {
	return u.Update(func(s *AppGoodScopeUpsert) {
		s.ClearCouponScope()
	})
}

// Exec executes the query.
func (u *AppGoodScopeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the AppGoodScopeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppGoodScopeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppGoodScopeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/taskuser"
	"github.com/google/uuid"
)

// TaskUserUpdate is the builder for updating TaskUser entities.
type TaskUserUpdate struct {
	config
	hooks     []Hook
	mutation  *TaskUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TaskUserUpdate builder.
func (tuu *TaskUserUpdate) Where(ps ...predicate.TaskUser) *TaskUserUpdate {
	tuu.mutation.Where(ps...)
	return tuu
}

// SetCreatedAt sets the "created_at" field.
func (tuu *TaskUserUpdate) SetCreatedAt(u uint32) *TaskUserUpdate {
	tuu.mutation.ResetCreatedAt()
	tuu.mutation.SetCreatedAt(u)
	return tuu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuu *TaskUserUpdate) SetNillableCreatedAt(u *uint32) *TaskUserUpdate {
	if u != nil {
		tuu.SetCreatedAt(*u)
	}
	return tuu
}

// AddCreatedAt adds u to the "created_at" field.
func (tuu *TaskUserUpdate) AddCreatedAt(u int32) *TaskUserUpdate {
	tuu.mutation.AddCreatedAt(u)
	return tuu
}

// SetUpdatedAt sets the "updated_at" field.
func (tuu *TaskUserUpdate) SetUpdatedAt(u uint32) *TaskUserUpdate {
	tuu.mutation.ResetUpdatedAt()
	tuu.mutation.SetUpdatedAt(u)
	return tuu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tuu *TaskUserUpdate) AddUpdatedAt(u int32) *TaskUserUpdate {
	tuu.mutation.AddUpdatedAt(u)
	return tuu
}

// SetDeletedAt sets the "deleted_at" field.
func (tuu *TaskUserUpdate) SetDeletedAt(u uint32) *TaskUserUpdate {
	tuu.mutation.ResetDeletedAt()
	tuu.mutation.SetDeletedAt(u)
	return tuu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuu *TaskUserUpdate) SetNillableDeletedAt(u *uint32) *TaskUserUpdate {
	if u != nil {
		tuu.SetDeletedAt(*u)
	}
	return tuu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tuu *TaskUserUpdate) AddDeletedAt(u int32) *TaskUserUpdate {
	tuu.mutation.AddDeletedAt(u)
	return tuu
}

// SetEntID sets the "ent_id" field.
func (tuu *TaskUserUpdate) SetEntID(u uuid.UUID) *TaskUserUpdate {
	tuu.mutation.SetEntID(u)
	return tuu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tuu *TaskUserUpdate) SetNillableEntID(u *uuid.UUID) *TaskUserUpdate {
	if u != nil {
		tuu.SetEntID(*u)
	}
	return tuu
}

// SetAppID sets the "app_id" field.
func (tuu *TaskUserUpdate) SetAppID(u uuid.UUID) *TaskUserUpdate {
	tuu.mutation.SetAppID(u)
	return tuu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (tuu *TaskUserUpdate) SetNillableAppID(u *uuid.UUID) *TaskUserUpdate {
	if u != nil {
		tuu.SetAppID(*u)
	}
	return tuu
}

// ClearAppID clears the value of the "app_id" field.
func (tuu *TaskUserUpdate) ClearAppID() *TaskUserUpdate {
	tuu.mutation.ClearAppID()
	return tuu
}

// SetUserID sets the "user_id" field.
func (tuu *TaskUserUpdate) SetUserID(u uuid.UUID) *TaskUserUpdate {
	tuu.mutation.SetUserID(u)
	return tuu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuu *TaskUserUpdate) SetNillableUserID(u *uuid.UUID) *TaskUserUpdate {
	if u != nil {
		tuu.SetUserID(*u)
	}
	return tuu
}

// ClearUserID clears the value of the "user_id" field.
func (tuu *TaskUserUpdate) ClearUserID() *TaskUserUpdate {
	tuu.mutation.ClearUserID()
	return tuu
}

// SetTaskID sets the "task_id" field.
func (tuu *TaskUserUpdate) SetTaskID(u uuid.UUID) *TaskUserUpdate {
	tuu.mutation.SetTaskID(u)
	return tuu
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (tuu *TaskUserUpdate) SetNillableTaskID(u *uuid.UUID) *TaskUserUpdate {
	if u != nil {
		tuu.SetTaskID(*u)
	}
	return tuu
}

// ClearTaskID clears the value of the "task_id" field.
func (tuu *TaskUserUpdate) ClearTaskID() *TaskUserUpdate {
	tuu.mutation.ClearTaskID()
	return tuu
}

// SetEventID sets the "event_id" field.
func (tuu *TaskUserUpdate) SetEventID(u uuid.UUID) *TaskUserUpdate {
	tuu.mutation.SetEventID(u)
	return tuu
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (tuu *TaskUserUpdate) SetNillableEventID(u *uuid.UUID) *TaskUserUpdate {
	if u != nil {
		tuu.SetEventID(*u)
	}
	return tuu
}

// ClearEventID clears the value of the "event_id" field.
func (tuu *TaskUserUpdate) ClearEventID() *TaskUserUpdate {
	tuu.mutation.ClearEventID()
	return tuu
}

// SetTaskState sets the "task_state" field.
func (tuu *TaskUserUpdate) SetTaskState(s string) *TaskUserUpdate {
	tuu.mutation.SetTaskState(s)
	return tuu
}

// SetNillableTaskState sets the "task_state" field if the given value is not nil.
func (tuu *TaskUserUpdate) SetNillableTaskState(s *string) *TaskUserUpdate {
	if s != nil {
		tuu.SetTaskState(*s)
	}
	return tuu
}

// ClearTaskState clears the value of the "task_state" field.
func (tuu *TaskUserUpdate) ClearTaskState() *TaskUserUpdate {
	tuu.mutation.ClearTaskState()
	return tuu
}

// SetRewardState sets the "reward_state" field.
func (tuu *TaskUserUpdate) SetRewardState(s string) *TaskUserUpdate {
	tuu.mutation.SetRewardState(s)
	return tuu
}

// SetNillableRewardState sets the "reward_state" field if the given value is not nil.
func (tuu *TaskUserUpdate) SetNillableRewardState(s *string) *TaskUserUpdate {
	if s != nil {
		tuu.SetRewardState(*s)
	}
	return tuu
}

// ClearRewardState clears the value of the "reward_state" field.
func (tuu *TaskUserUpdate) ClearRewardState() *TaskUserUpdate {
	tuu.mutation.ClearRewardState()
	return tuu
}

// Mutation returns the TaskUserMutation object of the builder.
func (tuu *TaskUserUpdate) Mutation() *TaskUserMutation {
	return tuu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tuu *TaskUserUpdate) Save(ctx context.Context) (int, error) {
	tuu.defaults()
	return withHooks(ctx, tuu.sqlSave, tuu.mutation, tuu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuu *TaskUserUpdate) SaveX(ctx context.Context) int {
	affected, err := tuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tuu *TaskUserUpdate) Exec(ctx context.Context) error {
	_, err := tuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuu *TaskUserUpdate) ExecX(ctx context.Context) {
	if err := tuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuu *TaskUserUpdate) defaults() {
	if _, ok := tuu.mutation.UpdatedAt(); !ok {
		v := taskuser.UpdateDefaultUpdatedAt()
		tuu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuu *TaskUserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TaskUserUpdate {
	tuu.modifiers = append(tuu.modifiers, modifiers...)
	return tuu
}

func (tuu *TaskUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(taskuser.Table, taskuser.Columns, sqlgraph.NewFieldSpec(taskuser.FieldID, field.TypeUint32))
	if ps := tuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuu.mutation.CreatedAt(); ok {
		_spec.SetField(taskuser.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := tuu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(taskuser.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := tuu.mutation.UpdatedAt(); ok {
		_spec.SetField(taskuser.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := tuu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(taskuser.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := tuu.mutation.DeletedAt(); ok {
		_spec.SetField(taskuser.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := tuu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(taskuser.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := tuu.mutation.EntID(); ok {
		_spec.SetField(taskuser.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := tuu.mutation.AppID(); ok {
		_spec.SetField(taskuser.FieldAppID, field.TypeUUID, value)
	}
	if tuu.mutation.AppIDCleared() {
		_spec.ClearField(taskuser.FieldAppID, field.TypeUUID)
	}
	if value, ok := tuu.mutation.UserID(); ok {
		_spec.SetField(taskuser.FieldUserID, field.TypeUUID, value)
	}
	if tuu.mutation.UserIDCleared() {
		_spec.ClearField(taskuser.FieldUserID, field.TypeUUID)
	}
	if value, ok := tuu.mutation.TaskID(); ok {
		_spec.SetField(taskuser.FieldTaskID, field.TypeUUID, value)
	}
	if tuu.mutation.TaskIDCleared() {
		_spec.ClearField(taskuser.FieldTaskID, field.TypeUUID)
	}
	if value, ok := tuu.mutation.EventID(); ok {
		_spec.SetField(taskuser.FieldEventID, field.TypeUUID, value)
	}
	if tuu.mutation.EventIDCleared() {
		_spec.ClearField(taskuser.FieldEventID, field.TypeUUID)
	}
	if value, ok := tuu.mutation.TaskState(); ok {
		_spec.SetField(taskuser.FieldTaskState, field.TypeString, value)
	}
	if tuu.mutation.TaskStateCleared() {
		_spec.ClearField(taskuser.FieldTaskState, field.TypeString)
	}
	if value, ok := tuu.mutation.RewardState(); ok {
		_spec.SetField(taskuser.FieldRewardState, field.TypeString, value)
	}
	if tuu.mutation.RewardStateCleared() {
		_spec.ClearField(taskuser.FieldRewardState, field.TypeString)
	}
	_spec.AddModifiers(tuu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tuu.mutation.done = true
	return n, nil
}

// TaskUserUpdateOne is the builder for updating a single TaskUser entity.
type TaskUserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TaskUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (tuuo *TaskUserUpdateOne) SetCreatedAt(u uint32) *TaskUserUpdateOne {
	tuuo.mutation.ResetCreatedAt()
	tuuo.mutation.SetCreatedAt(u)
	return tuuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuuo *TaskUserUpdateOne) SetNillableCreatedAt(u *uint32) *TaskUserUpdateOne {
	if u != nil {
		tuuo.SetCreatedAt(*u)
	}
	return tuuo
}

// AddCreatedAt adds u to the "created_at" field.
func (tuuo *TaskUserUpdateOne) AddCreatedAt(u int32) *TaskUserUpdateOne {
	tuuo.mutation.AddCreatedAt(u)
	return tuuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuuo *TaskUserUpdateOne) SetUpdatedAt(u uint32) *TaskUserUpdateOne {
	tuuo.mutation.ResetUpdatedAt()
	tuuo.mutation.SetUpdatedAt(u)
	return tuuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tuuo *TaskUserUpdateOne) AddUpdatedAt(u int32) *TaskUserUpdateOne {
	tuuo.mutation.AddUpdatedAt(u)
	return tuuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tuuo *TaskUserUpdateOne) SetDeletedAt(u uint32) *TaskUserUpdateOne {
	tuuo.mutation.ResetDeletedAt()
	tuuo.mutation.SetDeletedAt(u)
	return tuuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuuo *TaskUserUpdateOne) SetNillableDeletedAt(u *uint32) *TaskUserUpdateOne {
	if u != nil {
		tuuo.SetDeletedAt(*u)
	}
	return tuuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tuuo *TaskUserUpdateOne) AddDeletedAt(u int32) *TaskUserUpdateOne {
	tuuo.mutation.AddDeletedAt(u)
	return tuuo
}

// SetEntID sets the "ent_id" field.
func (tuuo *TaskUserUpdateOne) SetEntID(u uuid.UUID) *TaskUserUpdateOne {
	tuuo.mutation.SetEntID(u)
	return tuuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tuuo *TaskUserUpdateOne) SetNillableEntID(u *uuid.UUID) *TaskUserUpdateOne {
	if u != nil {
		tuuo.SetEntID(*u)
	}
	return tuuo
}

// SetAppID sets the "app_id" field.
func (tuuo *TaskUserUpdateOne) SetAppID(u uuid.UUID) *TaskUserUpdateOne {
	tuuo.mutation.SetAppID(u)
	return tuuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (tuuo *TaskUserUpdateOne) SetNillableAppID(u *uuid.UUID) *TaskUserUpdateOne {
	if u != nil {
		tuuo.SetAppID(*u)
	}
	return tuuo
}

// ClearAppID clears the value of the "app_id" field.
func (tuuo *TaskUserUpdateOne) ClearAppID() *TaskUserUpdateOne {
	tuuo.mutation.ClearAppID()
	return tuuo
}

// SetUserID sets the "user_id" field.
func (tuuo *TaskUserUpdateOne) SetUserID(u uuid.UUID) *TaskUserUpdateOne {
	tuuo.mutation.SetUserID(u)
	return tuuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuuo *TaskUserUpdateOne) SetNillableUserID(u *uuid.UUID) *TaskUserUpdateOne {
	if u != nil {
		tuuo.SetUserID(*u)
	}
	return tuuo
}

// ClearUserID clears the value of the "user_id" field.
func (tuuo *TaskUserUpdateOne) ClearUserID() *TaskUserUpdateOne {
	tuuo.mutation.ClearUserID()
	return tuuo
}

// SetTaskID sets the "task_id" field.
func (tuuo *TaskUserUpdateOne) SetTaskID(u uuid.UUID) *TaskUserUpdateOne {
	tuuo.mutation.SetTaskID(u)
	return tuuo
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (tuuo *TaskUserUpdateOne) SetNillableTaskID(u *uuid.UUID) *TaskUserUpdateOne {
	if u != nil {
		tuuo.SetTaskID(*u)
	}
	return tuuo
}

// ClearTaskID clears the value of the "task_id" field.
func (tuuo *TaskUserUpdateOne) ClearTaskID() *TaskUserUpdateOne {
	tuuo.mutation.ClearTaskID()
	return tuuo
}

// SetEventID sets the "event_id" field.
func (tuuo *TaskUserUpdateOne) SetEventID(u uuid.UUID) *TaskUserUpdateOne {
	tuuo.mutation.SetEventID(u)
	return tuuo
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (tuuo *TaskUserUpdateOne) SetNillableEventID(u *uuid.UUID) *TaskUserUpdateOne {
	if u != nil {
		tuuo.SetEventID(*u)
	}
	return tuuo
}

// ClearEventID clears the value of the "event_id" field.
func (tuuo *TaskUserUpdateOne) ClearEventID() *TaskUserUpdateOne {
	tuuo.mutation.ClearEventID()
	return tuuo
}

// SetTaskState sets the "task_state" field.
func (tuuo *TaskUserUpdateOne) SetTaskState(s string) *TaskUserUpdateOne {
	tuuo.mutation.SetTaskState(s)
	return tuuo
}

// SetNillableTaskState sets the "task_state" field if the given value is not nil.
func (tuuo *TaskUserUpdateOne) SetNillableTaskState(s *string) *TaskUserUpdateOne {
	if s != nil {
		tuuo.SetTaskState(*s)
	}
	return tuuo
}

// ClearTaskState clears the value of the "task_state" field.
func (tuuo *TaskUserUpdateOne) ClearTaskState() *TaskUserUpdateOne {
	tuuo.mutation.ClearTaskState()
	return tuuo
}

// SetRewardState sets the "reward_state" field.
func (tuuo *TaskUserUpdateOne) SetRewardState(s string) *TaskUserUpdateOne {
	tuuo.mutation.SetRewardState(s)
	return tuuo
}

// SetNillableRewardState sets the "reward_state" field if the given value is not nil.
func (tuuo *TaskUserUpdateOne) SetNillableRewardState(s *string) *TaskUserUpdateOne {
	if s != nil {
		tuuo.SetRewardState(*s)
	}
	return tuuo
}

// ClearRewardState clears the value of the "reward_state" field.
func (tuuo *TaskUserUpdateOne) ClearRewardState() *TaskUserUpdateOne {
	tuuo.mutation.ClearRewardState()
	return tuuo
}

// Mutation returns the TaskUserMutation object of the builder.
func (tuuo *TaskUserUpdateOne) Mutation() *TaskUserMutation {
	return tuuo.mutation
}

// Where appends a list predicates to the TaskUserUpdate builder.
func (tuuo *TaskUserUpdateOne) Where(ps ...predicate.TaskUser) *TaskUserUpdateOne {
	tuuo.mutation.Where(ps...)
	return tuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuuo *TaskUserUpdateOne) Select(field string, fields ...string) *TaskUserUpdateOne {
	tuuo.fields = append([]string{field}, fields...)
	return tuuo
}

// Save executes the query and returns the updated TaskUser entity.
func (tuuo *TaskUserUpdateOne) Save(ctx context.Context) (*TaskUser, error) {
	tuuo.defaults()
	return withHooks(ctx, tuuo.sqlSave, tuuo.mutation, tuuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuuo *TaskUserUpdateOne) SaveX(ctx context.Context) *TaskUser {
	node, err := tuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuuo *TaskUserUpdateOne) Exec(ctx context.Context) error {
	_, err := tuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuuo *TaskUserUpdateOne) ExecX(ctx context.Context) {
	if err := tuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuuo *TaskUserUpdateOne) defaults() {
	if _, ok := tuuo.mutation.UpdatedAt(); !ok {
		v := taskuser.UpdateDefaultUpdatedAt()
		tuuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuuo *TaskUserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TaskUserUpdateOne {
	tuuo.modifiers = append(tuuo.modifiers, modifiers...)
	return tuuo
}

func (tuuo *TaskUserUpdateOne) sqlSave(ctx context.Context) (_node *TaskUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(taskuser.Table, taskuser.Columns, sqlgraph.NewFieldSpec(taskuser.FieldID, field.TypeUint32))
	id, ok := tuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "TaskUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taskuser.FieldID)
		for _, f := range fields {
			if !taskuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != taskuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuuo.mutation.CreatedAt(); ok {
		_spec.SetField(taskuser.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := tuuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(taskuser.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := tuuo.mutation.UpdatedAt(); ok {
		_spec.SetField(taskuser.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := tuuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(taskuser.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := tuuo.mutation.DeletedAt(); ok {
		_spec.SetField(taskuser.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := tuuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(taskuser.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := tuuo.mutation.EntID(); ok {
		_spec.SetField(taskuser.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := tuuo.mutation.AppID(); ok {
		_spec.SetField(taskuser.FieldAppID, field.TypeUUID, value)
	}
	if tuuo.mutation.AppIDCleared() {
		_spec.ClearField(taskuser.FieldAppID, field.TypeUUID)
	}
	if value, ok := tuuo.mutation.UserID(); ok {
		_spec.SetField(taskuser.FieldUserID, field.TypeUUID, value)
	}
	if tuuo.mutation.UserIDCleared() {
		_spec.ClearField(taskuser.FieldUserID, field.TypeUUID)
	}
	if value, ok := tuuo.mutation.TaskID(); ok {
		_spec.SetField(taskuser.FieldTaskID, field.TypeUUID, value)
	}
	if tuuo.mutation.TaskIDCleared() {
		_spec.ClearField(taskuser.FieldTaskID, field.TypeUUID)
	}
	if value, ok := tuuo.mutation.EventID(); ok {
		_spec.SetField(taskuser.FieldEventID, field.TypeUUID, value)
	}
	if tuuo.mutation.EventIDCleared() {
		_spec.ClearField(taskuser.FieldEventID, field.TypeUUID)
	}
	if value, ok := tuuo.mutation.TaskState(); ok {
		_spec.SetField(taskuser.FieldTaskState, field.TypeString, value)
	}
	if tuuo.mutation.TaskStateCleared() {
		_spec.ClearField(taskuser.FieldTaskState, field.TypeString)
	}
	if value, ok := tuuo.mutation.RewardState(); ok {
		_spec.SetField(taskuser.FieldRewardState, field.TypeString, value)
	}
	if tuuo.mutation.RewardStateCleared() {
		_spec.ClearField(taskuser.FieldRewardState, field.TypeString)
	}
	_spec.AddModifiers(tuuo.modifiers...)
	_node = &TaskUser{config: tuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuuo.mutation.done = true
	return _node, nil
}

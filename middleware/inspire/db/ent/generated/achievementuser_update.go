// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/achievementuser"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AchievementUserUpdate is the builder for updating AchievementUser entities.
type AchievementUserUpdate struct {
	config
	hooks     []Hook
	mutation  *AchievementUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AchievementUserUpdate builder.
func (auu *AchievementUserUpdate) Where(ps ...predicate.AchievementUser) *AchievementUserUpdate {
	auu.mutation.Where(ps...)
	return auu
}

// SetCreatedAt sets the "created_at" field.
func (auu *AchievementUserUpdate) SetCreatedAt(u uint32) *AchievementUserUpdate {
	auu.mutation.ResetCreatedAt()
	auu.mutation.SetCreatedAt(u)
	return auu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auu *AchievementUserUpdate) SetNillableCreatedAt(u *uint32) *AchievementUserUpdate {
	if u != nil {
		auu.SetCreatedAt(*u)
	}
	return auu
}

// AddCreatedAt adds u to the "created_at" field.
func (auu *AchievementUserUpdate) AddCreatedAt(u int32) *AchievementUserUpdate {
	auu.mutation.AddCreatedAt(u)
	return auu
}

// SetUpdatedAt sets the "updated_at" field.
func (auu *AchievementUserUpdate) SetUpdatedAt(u uint32) *AchievementUserUpdate {
	auu.mutation.ResetUpdatedAt()
	auu.mutation.SetUpdatedAt(u)
	return auu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (auu *AchievementUserUpdate) AddUpdatedAt(u int32) *AchievementUserUpdate {
	auu.mutation.AddUpdatedAt(u)
	return auu
}

// SetDeletedAt sets the "deleted_at" field.
func (auu *AchievementUserUpdate) SetDeletedAt(u uint32) *AchievementUserUpdate {
	auu.mutation.ResetDeletedAt()
	auu.mutation.SetDeletedAt(u)
	return auu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auu *AchievementUserUpdate) SetNillableDeletedAt(u *uint32) *AchievementUserUpdate {
	if u != nil {
		auu.SetDeletedAt(*u)
	}
	return auu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (auu *AchievementUserUpdate) AddDeletedAt(u int32) *AchievementUserUpdate {
	auu.mutation.AddDeletedAt(u)
	return auu
}

// SetEntID sets the "ent_id" field.
func (auu *AchievementUserUpdate) SetEntID(u uuid.UUID) *AchievementUserUpdate {
	auu.mutation.SetEntID(u)
	return auu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (auu *AchievementUserUpdate) SetNillableEntID(u *uuid.UUID) *AchievementUserUpdate {
	if u != nil {
		auu.SetEntID(*u)
	}
	return auu
}

// SetAppID sets the "app_id" field.
func (auu *AchievementUserUpdate) SetAppID(u uuid.UUID) *AchievementUserUpdate {
	auu.mutation.SetAppID(u)
	return auu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (auu *AchievementUserUpdate) SetNillableAppID(u *uuid.UUID) *AchievementUserUpdate {
	if u != nil {
		auu.SetAppID(*u)
	}
	return auu
}

// ClearAppID clears the value of the "app_id" field.
func (auu *AchievementUserUpdate) ClearAppID() *AchievementUserUpdate {
	auu.mutation.ClearAppID()
	return auu
}

// SetUserID sets the "user_id" field.
func (auu *AchievementUserUpdate) SetUserID(u uuid.UUID) *AchievementUserUpdate {
	auu.mutation.SetUserID(u)
	return auu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (auu *AchievementUserUpdate) SetNillableUserID(u *uuid.UUID) *AchievementUserUpdate {
	if u != nil {
		auu.SetUserID(*u)
	}
	return auu
}

// ClearUserID clears the value of the "user_id" field.
func (auu *AchievementUserUpdate) ClearUserID() *AchievementUserUpdate {
	auu.mutation.ClearUserID()
	return auu
}

// SetTotalCommission sets the "total_commission" field.
func (auu *AchievementUserUpdate) SetTotalCommission(d decimal.Decimal) *AchievementUserUpdate {
	auu.mutation.SetTotalCommission(d)
	return auu
}

// SetNillableTotalCommission sets the "total_commission" field if the given value is not nil.
func (auu *AchievementUserUpdate) SetNillableTotalCommission(d *decimal.Decimal) *AchievementUserUpdate {
	if d != nil {
		auu.SetTotalCommission(*d)
	}
	return auu
}

// ClearTotalCommission clears the value of the "total_commission" field.
func (auu *AchievementUserUpdate) ClearTotalCommission() *AchievementUserUpdate {
	auu.mutation.ClearTotalCommission()
	return auu
}

// SetSelfCommission sets the "self_commission" field.
func (auu *AchievementUserUpdate) SetSelfCommission(d decimal.Decimal) *AchievementUserUpdate {
	auu.mutation.SetSelfCommission(d)
	return auu
}

// SetNillableSelfCommission sets the "self_commission" field if the given value is not nil.
func (auu *AchievementUserUpdate) SetNillableSelfCommission(d *decimal.Decimal) *AchievementUserUpdate {
	if d != nil {
		auu.SetSelfCommission(*d)
	}
	return auu
}

// ClearSelfCommission clears the value of the "self_commission" field.
func (auu *AchievementUserUpdate) ClearSelfCommission() *AchievementUserUpdate {
	auu.mutation.ClearSelfCommission()
	return auu
}

// SetDirectConsumeAmount sets the "direct_consume_amount" field.
func (auu *AchievementUserUpdate) SetDirectConsumeAmount(d decimal.Decimal) *AchievementUserUpdate {
	auu.mutation.SetDirectConsumeAmount(d)
	return auu
}

// SetNillableDirectConsumeAmount sets the "direct_consume_amount" field if the given value is not nil.
func (auu *AchievementUserUpdate) SetNillableDirectConsumeAmount(d *decimal.Decimal) *AchievementUserUpdate {
	if d != nil {
		auu.SetDirectConsumeAmount(*d)
	}
	return auu
}

// ClearDirectConsumeAmount clears the value of the "direct_consume_amount" field.
func (auu *AchievementUserUpdate) ClearDirectConsumeAmount() *AchievementUserUpdate {
	auu.mutation.ClearDirectConsumeAmount()
	return auu
}

// SetInviteeConsumeAmount sets the "invitee_consume_amount" field.
func (auu *AchievementUserUpdate) SetInviteeConsumeAmount(d decimal.Decimal) *AchievementUserUpdate {
	auu.mutation.SetInviteeConsumeAmount(d)
	return auu
}

// SetNillableInviteeConsumeAmount sets the "invitee_consume_amount" field if the given value is not nil.
func (auu *AchievementUserUpdate) SetNillableInviteeConsumeAmount(d *decimal.Decimal) *AchievementUserUpdate {
	if d != nil {
		auu.SetInviteeConsumeAmount(*d)
	}
	return auu
}

// ClearInviteeConsumeAmount clears the value of the "invitee_consume_amount" field.
func (auu *AchievementUserUpdate) ClearInviteeConsumeAmount() *AchievementUserUpdate {
	auu.mutation.ClearInviteeConsumeAmount()
	return auu
}

// SetDirectInvitees sets the "direct_invitees" field.
func (auu *AchievementUserUpdate) SetDirectInvitees(u uint32) *AchievementUserUpdate {
	auu.mutation.ResetDirectInvitees()
	auu.mutation.SetDirectInvitees(u)
	return auu
}

// SetNillableDirectInvitees sets the "direct_invitees" field if the given value is not nil.
func (auu *AchievementUserUpdate) SetNillableDirectInvitees(u *uint32) *AchievementUserUpdate {
	if u != nil {
		auu.SetDirectInvitees(*u)
	}
	return auu
}

// AddDirectInvitees adds u to the "direct_invitees" field.
func (auu *AchievementUserUpdate) AddDirectInvitees(u int32) *AchievementUserUpdate {
	auu.mutation.AddDirectInvitees(u)
	return auu
}

// ClearDirectInvitees clears the value of the "direct_invitees" field.
func (auu *AchievementUserUpdate) ClearDirectInvitees() *AchievementUserUpdate {
	auu.mutation.ClearDirectInvitees()
	return auu
}

// SetIndirectInvitees sets the "indirect_invitees" field.
func (auu *AchievementUserUpdate) SetIndirectInvitees(u uint32) *AchievementUserUpdate {
	auu.mutation.ResetIndirectInvitees()
	auu.mutation.SetIndirectInvitees(u)
	return auu
}

// SetNillableIndirectInvitees sets the "indirect_invitees" field if the given value is not nil.
func (auu *AchievementUserUpdate) SetNillableIndirectInvitees(u *uint32) *AchievementUserUpdate {
	if u != nil {
		auu.SetIndirectInvitees(*u)
	}
	return auu
}

// AddIndirectInvitees adds u to the "indirect_invitees" field.
func (auu *AchievementUserUpdate) AddIndirectInvitees(u int32) *AchievementUserUpdate {
	auu.mutation.AddIndirectInvitees(u)
	return auu
}

// ClearIndirectInvitees clears the value of the "indirect_invitees" field.
func (auu *AchievementUserUpdate) ClearIndirectInvitees() *AchievementUserUpdate {
	auu.mutation.ClearIndirectInvitees()
	return auu
}

// Mutation returns the AchievementUserMutation object of the builder.
func (auu *AchievementUserUpdate) Mutation() *AchievementUserMutation {
	return auu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (auu *AchievementUserUpdate) Save(ctx context.Context) (int, error) {
	auu.defaults()
	return withHooks(ctx, auu.sqlSave, auu.mutation, auu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auu *AchievementUserUpdate) SaveX(ctx context.Context) int {
	affected, err := auu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (auu *AchievementUserUpdate) Exec(ctx context.Context) error {
	_, err := auu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auu *AchievementUserUpdate) ExecX(ctx context.Context) {
	if err := auu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auu *AchievementUserUpdate) defaults() {
	if _, ok := auu.mutation.UpdatedAt(); !ok {
		v := achievementuser.UpdateDefaultUpdatedAt()
		auu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auu *AchievementUserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AchievementUserUpdate {
	auu.modifiers = append(auu.modifiers, modifiers...)
	return auu
}

func (auu *AchievementUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(achievementuser.Table, achievementuser.Columns, sqlgraph.NewFieldSpec(achievementuser.FieldID, field.TypeUint32))
	if ps := auu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auu.mutation.CreatedAt(); ok {
		_spec.SetField(achievementuser.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := auu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(achievementuser.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := auu.mutation.UpdatedAt(); ok {
		_spec.SetField(achievementuser.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := auu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(achievementuser.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := auu.mutation.DeletedAt(); ok {
		_spec.SetField(achievementuser.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := auu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(achievementuser.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := auu.mutation.EntID(); ok {
		_spec.SetField(achievementuser.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := auu.mutation.AppID(); ok {
		_spec.SetField(achievementuser.FieldAppID, field.TypeUUID, value)
	}
	if auu.mutation.AppIDCleared() {
		_spec.ClearField(achievementuser.FieldAppID, field.TypeUUID)
	}
	if value, ok := auu.mutation.UserID(); ok {
		_spec.SetField(achievementuser.FieldUserID, field.TypeUUID, value)
	}
	if auu.mutation.UserIDCleared() {
		_spec.ClearField(achievementuser.FieldUserID, field.TypeUUID)
	}
	if value, ok := auu.mutation.TotalCommission(); ok {
		_spec.SetField(achievementuser.FieldTotalCommission, field.TypeOther, value)
	}
	if auu.mutation.TotalCommissionCleared() {
		_spec.ClearField(achievementuser.FieldTotalCommission, field.TypeOther)
	}
	if value, ok := auu.mutation.SelfCommission(); ok {
		_spec.SetField(achievementuser.FieldSelfCommission, field.TypeOther, value)
	}
	if auu.mutation.SelfCommissionCleared() {
		_spec.ClearField(achievementuser.FieldSelfCommission, field.TypeOther)
	}
	if value, ok := auu.mutation.DirectConsumeAmount(); ok {
		_spec.SetField(achievementuser.FieldDirectConsumeAmount, field.TypeOther, value)
	}
	if auu.mutation.DirectConsumeAmountCleared() {
		_spec.ClearField(achievementuser.FieldDirectConsumeAmount, field.TypeOther)
	}
	if value, ok := auu.mutation.InviteeConsumeAmount(); ok {
		_spec.SetField(achievementuser.FieldInviteeConsumeAmount, field.TypeOther, value)
	}
	if auu.mutation.InviteeConsumeAmountCleared() {
		_spec.ClearField(achievementuser.FieldInviteeConsumeAmount, field.TypeOther)
	}
	if value, ok := auu.mutation.DirectInvitees(); ok {
		_spec.SetField(achievementuser.FieldDirectInvitees, field.TypeUint32, value)
	}
	if value, ok := auu.mutation.AddedDirectInvitees(); ok {
		_spec.AddField(achievementuser.FieldDirectInvitees, field.TypeUint32, value)
	}
	if auu.mutation.DirectInviteesCleared() {
		_spec.ClearField(achievementuser.FieldDirectInvitees, field.TypeUint32)
	}
	if value, ok := auu.mutation.IndirectInvitees(); ok {
		_spec.SetField(achievementuser.FieldIndirectInvitees, field.TypeUint32, value)
	}
	if value, ok := auu.mutation.AddedIndirectInvitees(); ok {
		_spec.AddField(achievementuser.FieldIndirectInvitees, field.TypeUint32, value)
	}
	if auu.mutation.IndirectInviteesCleared() {
		_spec.ClearField(achievementuser.FieldIndirectInvitees, field.TypeUint32)
	}
	_spec.AddModifiers(auu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, auu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{achievementuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	auu.mutation.done = true
	return n, nil
}

// AchievementUserUpdateOne is the builder for updating a single AchievementUser entity.
type AchievementUserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AchievementUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (auuo *AchievementUserUpdateOne) SetCreatedAt(u uint32) *AchievementUserUpdateOne {
	auuo.mutation.ResetCreatedAt()
	auuo.mutation.SetCreatedAt(u)
	return auuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auuo *AchievementUserUpdateOne) SetNillableCreatedAt(u *uint32) *AchievementUserUpdateOne {
	if u != nil {
		auuo.SetCreatedAt(*u)
	}
	return auuo
}

// AddCreatedAt adds u to the "created_at" field.
func (auuo *AchievementUserUpdateOne) AddCreatedAt(u int32) *AchievementUserUpdateOne {
	auuo.mutation.AddCreatedAt(u)
	return auuo
}

// SetUpdatedAt sets the "updated_at" field.
func (auuo *AchievementUserUpdateOne) SetUpdatedAt(u uint32) *AchievementUserUpdateOne {
	auuo.mutation.ResetUpdatedAt()
	auuo.mutation.SetUpdatedAt(u)
	return auuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (auuo *AchievementUserUpdateOne) AddUpdatedAt(u int32) *AchievementUserUpdateOne {
	auuo.mutation.AddUpdatedAt(u)
	return auuo
}

// SetDeletedAt sets the "deleted_at" field.
func (auuo *AchievementUserUpdateOne) SetDeletedAt(u uint32) *AchievementUserUpdateOne {
	auuo.mutation.ResetDeletedAt()
	auuo.mutation.SetDeletedAt(u)
	return auuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auuo *AchievementUserUpdateOne) SetNillableDeletedAt(u *uint32) *AchievementUserUpdateOne {
	if u != nil {
		auuo.SetDeletedAt(*u)
	}
	return auuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (auuo *AchievementUserUpdateOne) AddDeletedAt(u int32) *AchievementUserUpdateOne {
	auuo.mutation.AddDeletedAt(u)
	return auuo
}

// SetEntID sets the "ent_id" field.
func (auuo *AchievementUserUpdateOne) SetEntID(u uuid.UUID) *AchievementUserUpdateOne {
	auuo.mutation.SetEntID(u)
	return auuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (auuo *AchievementUserUpdateOne) SetNillableEntID(u *uuid.UUID) *AchievementUserUpdateOne {
	if u != nil {
		auuo.SetEntID(*u)
	}
	return auuo
}

// SetAppID sets the "app_id" field.
func (auuo *AchievementUserUpdateOne) SetAppID(u uuid.UUID) *AchievementUserUpdateOne {
	auuo.mutation.SetAppID(u)
	return auuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (auuo *AchievementUserUpdateOne) SetNillableAppID(u *uuid.UUID) *AchievementUserUpdateOne {
	if u != nil {
		auuo.SetAppID(*u)
	}
	return auuo
}

// ClearAppID clears the value of the "app_id" field.
func (auuo *AchievementUserUpdateOne) ClearAppID() *AchievementUserUpdateOne {
	auuo.mutation.ClearAppID()
	return auuo
}

// SetUserID sets the "user_id" field.
func (auuo *AchievementUserUpdateOne) SetUserID(u uuid.UUID) *AchievementUserUpdateOne {
	auuo.mutation.SetUserID(u)
	return auuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (auuo *AchievementUserUpdateOne) SetNillableUserID(u *uuid.UUID) *AchievementUserUpdateOne {
	if u != nil {
		auuo.SetUserID(*u)
	}
	return auuo
}

// ClearUserID clears the value of the "user_id" field.
func (auuo *AchievementUserUpdateOne) ClearUserID() *AchievementUserUpdateOne {
	auuo.mutation.ClearUserID()
	return auuo
}

// SetTotalCommission sets the "total_commission" field.
func (auuo *AchievementUserUpdateOne) SetTotalCommission(d decimal.Decimal) *AchievementUserUpdateOne {
	auuo.mutation.SetTotalCommission(d)
	return auuo
}

// SetNillableTotalCommission sets the "total_commission" field if the given value is not nil.
func (auuo *AchievementUserUpdateOne) SetNillableTotalCommission(d *decimal.Decimal) *AchievementUserUpdateOne {
	if d != nil {
		auuo.SetTotalCommission(*d)
	}
	return auuo
}

// ClearTotalCommission clears the value of the "total_commission" field.
func (auuo *AchievementUserUpdateOne) ClearTotalCommission() *AchievementUserUpdateOne {
	auuo.mutation.ClearTotalCommission()
	return auuo
}

// SetSelfCommission sets the "self_commission" field.
func (auuo *AchievementUserUpdateOne) SetSelfCommission(d decimal.Decimal) *AchievementUserUpdateOne {
	auuo.mutation.SetSelfCommission(d)
	return auuo
}

// SetNillableSelfCommission sets the "self_commission" field if the given value is not nil.
func (auuo *AchievementUserUpdateOne) SetNillableSelfCommission(d *decimal.Decimal) *AchievementUserUpdateOne {
	if d != nil {
		auuo.SetSelfCommission(*d)
	}
	return auuo
}

// ClearSelfCommission clears the value of the "self_commission" field.
func (auuo *AchievementUserUpdateOne) ClearSelfCommission() *AchievementUserUpdateOne {
	auuo.mutation.ClearSelfCommission()
	return auuo
}

// SetDirectConsumeAmount sets the "direct_consume_amount" field.
func (auuo *AchievementUserUpdateOne) SetDirectConsumeAmount(d decimal.Decimal) *AchievementUserUpdateOne {
	auuo.mutation.SetDirectConsumeAmount(d)
	return auuo
}

// SetNillableDirectConsumeAmount sets the "direct_consume_amount" field if the given value is not nil.
func (auuo *AchievementUserUpdateOne) SetNillableDirectConsumeAmount(d *decimal.Decimal) *AchievementUserUpdateOne {
	if d != nil {
		auuo.SetDirectConsumeAmount(*d)
	}
	return auuo
}

// ClearDirectConsumeAmount clears the value of the "direct_consume_amount" field.
func (auuo *AchievementUserUpdateOne) ClearDirectConsumeAmount() *AchievementUserUpdateOne {
	auuo.mutation.ClearDirectConsumeAmount()
	return auuo
}

// SetInviteeConsumeAmount sets the "invitee_consume_amount" field.
func (auuo *AchievementUserUpdateOne) SetInviteeConsumeAmount(d decimal.Decimal) *AchievementUserUpdateOne {
	auuo.mutation.SetInviteeConsumeAmount(d)
	return auuo
}

// SetNillableInviteeConsumeAmount sets the "invitee_consume_amount" field if the given value is not nil.
func (auuo *AchievementUserUpdateOne) SetNillableInviteeConsumeAmount(d *decimal.Decimal) *AchievementUserUpdateOne {
	if d != nil {
		auuo.SetInviteeConsumeAmount(*d)
	}
	return auuo
}

// ClearInviteeConsumeAmount clears the value of the "invitee_consume_amount" field.
func (auuo *AchievementUserUpdateOne) ClearInviteeConsumeAmount() *AchievementUserUpdateOne {
	auuo.mutation.ClearInviteeConsumeAmount()
	return auuo
}

// SetDirectInvitees sets the "direct_invitees" field.
func (auuo *AchievementUserUpdateOne) SetDirectInvitees(u uint32) *AchievementUserUpdateOne {
	auuo.mutation.ResetDirectInvitees()
	auuo.mutation.SetDirectInvitees(u)
	return auuo
}

// SetNillableDirectInvitees sets the "direct_invitees" field if the given value is not nil.
func (auuo *AchievementUserUpdateOne) SetNillableDirectInvitees(u *uint32) *AchievementUserUpdateOne {
	if u != nil {
		auuo.SetDirectInvitees(*u)
	}
	return auuo
}

// AddDirectInvitees adds u to the "direct_invitees" field.
func (auuo *AchievementUserUpdateOne) AddDirectInvitees(u int32) *AchievementUserUpdateOne {
	auuo.mutation.AddDirectInvitees(u)
	return auuo
}

// ClearDirectInvitees clears the value of the "direct_invitees" field.
func (auuo *AchievementUserUpdateOne) ClearDirectInvitees() *AchievementUserUpdateOne {
	auuo.mutation.ClearDirectInvitees()
	return auuo
}

// SetIndirectInvitees sets the "indirect_invitees" field.
func (auuo *AchievementUserUpdateOne) SetIndirectInvitees(u uint32) *AchievementUserUpdateOne {
	auuo.mutation.ResetIndirectInvitees()
	auuo.mutation.SetIndirectInvitees(u)
	return auuo
}

// SetNillableIndirectInvitees sets the "indirect_invitees" field if the given value is not nil.
func (auuo *AchievementUserUpdateOne) SetNillableIndirectInvitees(u *uint32) *AchievementUserUpdateOne {
	if u != nil {
		auuo.SetIndirectInvitees(*u)
	}
	return auuo
}

// AddIndirectInvitees adds u to the "indirect_invitees" field.
func (auuo *AchievementUserUpdateOne) AddIndirectInvitees(u int32) *AchievementUserUpdateOne {
	auuo.mutation.AddIndirectInvitees(u)
	return auuo
}

// ClearIndirectInvitees clears the value of the "indirect_invitees" field.
func (auuo *AchievementUserUpdateOne) ClearIndirectInvitees() *AchievementUserUpdateOne {
	auuo.mutation.ClearIndirectInvitees()
	return auuo
}

// Mutation returns the AchievementUserMutation object of the builder.
func (auuo *AchievementUserUpdateOne) Mutation() *AchievementUserMutation {
	return auuo.mutation
}

// Where appends a list predicates to the AchievementUserUpdate builder.
func (auuo *AchievementUserUpdateOne) Where(ps ...predicate.AchievementUser) *AchievementUserUpdateOne {
	auuo.mutation.Where(ps...)
	return auuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auuo *AchievementUserUpdateOne) Select(field string, fields ...string) *AchievementUserUpdateOne {
	auuo.fields = append([]string{field}, fields...)
	return auuo
}

// Save executes the query and returns the updated AchievementUser entity.
func (auuo *AchievementUserUpdateOne) Save(ctx context.Context) (*AchievementUser, error) {
	auuo.defaults()
	return withHooks(ctx, auuo.sqlSave, auuo.mutation, auuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auuo *AchievementUserUpdateOne) SaveX(ctx context.Context) *AchievementUser {
	node, err := auuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auuo *AchievementUserUpdateOne) Exec(ctx context.Context) error {
	_, err := auuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auuo *AchievementUserUpdateOne) ExecX(ctx context.Context) {
	if err := auuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auuo *AchievementUserUpdateOne) defaults() {
	if _, ok := auuo.mutation.UpdatedAt(); !ok {
		v := achievementuser.UpdateDefaultUpdatedAt()
		auuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auuo *AchievementUserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AchievementUserUpdateOne {
	auuo.modifiers = append(auuo.modifiers, modifiers...)
	return auuo
}

func (auuo *AchievementUserUpdateOne) sqlSave(ctx context.Context) (_node *AchievementUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(achievementuser.Table, achievementuser.Columns, sqlgraph.NewFieldSpec(achievementuser.FieldID, field.TypeUint32))
	id, ok := auuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AchievementUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, achievementuser.FieldID)
		for _, f := range fields {
			if !achievementuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != achievementuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auuo.mutation.CreatedAt(); ok {
		_spec.SetField(achievementuser.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := auuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(achievementuser.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := auuo.mutation.UpdatedAt(); ok {
		_spec.SetField(achievementuser.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := auuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(achievementuser.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := auuo.mutation.DeletedAt(); ok {
		_spec.SetField(achievementuser.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := auuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(achievementuser.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := auuo.mutation.EntID(); ok {
		_spec.SetField(achievementuser.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := auuo.mutation.AppID(); ok {
		_spec.SetField(achievementuser.FieldAppID, field.TypeUUID, value)
	}
	if auuo.mutation.AppIDCleared() {
		_spec.ClearField(achievementuser.FieldAppID, field.TypeUUID)
	}
	if value, ok := auuo.mutation.UserID(); ok {
		_spec.SetField(achievementuser.FieldUserID, field.TypeUUID, value)
	}
	if auuo.mutation.UserIDCleared() {
		_spec.ClearField(achievementuser.FieldUserID, field.TypeUUID)
	}
	if value, ok := auuo.mutation.TotalCommission(); ok {
		_spec.SetField(achievementuser.FieldTotalCommission, field.TypeOther, value)
	}
	if auuo.mutation.TotalCommissionCleared() {
		_spec.ClearField(achievementuser.FieldTotalCommission, field.TypeOther)
	}
	if value, ok := auuo.mutation.SelfCommission(); ok {
		_spec.SetField(achievementuser.FieldSelfCommission, field.TypeOther, value)
	}
	if auuo.mutation.SelfCommissionCleared() {
		_spec.ClearField(achievementuser.FieldSelfCommission, field.TypeOther)
	}
	if value, ok := auuo.mutation.DirectConsumeAmount(); ok {
		_spec.SetField(achievementuser.FieldDirectConsumeAmount, field.TypeOther, value)
	}
	if auuo.mutation.DirectConsumeAmountCleared() {
		_spec.ClearField(achievementuser.FieldDirectConsumeAmount, field.TypeOther)
	}
	if value, ok := auuo.mutation.InviteeConsumeAmount(); ok {
		_spec.SetField(achievementuser.FieldInviteeConsumeAmount, field.TypeOther, value)
	}
	if auuo.mutation.InviteeConsumeAmountCleared() {
		_spec.ClearField(achievementuser.FieldInviteeConsumeAmount, field.TypeOther)
	}
	if value, ok := auuo.mutation.DirectInvitees(); ok {
		_spec.SetField(achievementuser.FieldDirectInvitees, field.TypeUint32, value)
	}
	if value, ok := auuo.mutation.AddedDirectInvitees(); ok {
		_spec.AddField(achievementuser.FieldDirectInvitees, field.TypeUint32, value)
	}
	if auuo.mutation.DirectInviteesCleared() {
		_spec.ClearField(achievementuser.FieldDirectInvitees, field.TypeUint32)
	}
	if value, ok := auuo.mutation.IndirectInvitees(); ok {
		_spec.SetField(achievementuser.FieldIndirectInvitees, field.TypeUint32, value)
	}
	if value, ok := auuo.mutation.AddedIndirectInvitees(); ok {
		_spec.AddField(achievementuser.FieldIndirectInvitees, field.TypeUint32, value)
	}
	if auuo.mutation.IndirectInviteesCleared() {
		_spec.ClearField(achievementuser.FieldIndirectInvitees, field.TypeUint32)
	}
	_spec.AddModifiers(auuo.modifiers...)
	_node = &AchievementUser{config: auuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{achievementuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auuo.mutation.done = true
	return _node, nil
}

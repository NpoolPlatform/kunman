// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/registration"
	"github.com/google/uuid"
)

// RegistrationCreate is the builder for creating a Registration entity.
type RegistrationCreate struct {
	config
	mutation *RegistrationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (rc *RegistrationCreate) SetCreatedAt(u uint32) *RegistrationCreate {
	rc.mutation.SetCreatedAt(u)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RegistrationCreate) SetNillableCreatedAt(u *uint32) *RegistrationCreate {
	if u != nil {
		rc.SetCreatedAt(*u)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RegistrationCreate) SetUpdatedAt(u uint32) *RegistrationCreate {
	rc.mutation.SetUpdatedAt(u)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RegistrationCreate) SetNillableUpdatedAt(u *uint32) *RegistrationCreate {
	if u != nil {
		rc.SetUpdatedAt(*u)
	}
	return rc
}

// SetDeletedAt sets the "deleted_at" field.
func (rc *RegistrationCreate) SetDeletedAt(u uint32) *RegistrationCreate {
	rc.mutation.SetDeletedAt(u)
	return rc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rc *RegistrationCreate) SetNillableDeletedAt(u *uint32) *RegistrationCreate {
	if u != nil {
		rc.SetDeletedAt(*u)
	}
	return rc
}

// SetEntID sets the "ent_id" field.
func (rc *RegistrationCreate) SetEntID(u uuid.UUID) *RegistrationCreate {
	rc.mutation.SetEntID(u)
	return rc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (rc *RegistrationCreate) SetNillableEntID(u *uuid.UUID) *RegistrationCreate {
	if u != nil {
		rc.SetEntID(*u)
	}
	return rc
}

// SetAppID sets the "app_id" field.
func (rc *RegistrationCreate) SetAppID(u uuid.UUID) *RegistrationCreate {
	rc.mutation.SetAppID(u)
	return rc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (rc *RegistrationCreate) SetNillableAppID(u *uuid.UUID) *RegistrationCreate {
	if u != nil {
		rc.SetAppID(*u)
	}
	return rc
}

// SetInviterID sets the "inviter_id" field.
func (rc *RegistrationCreate) SetInviterID(u uuid.UUID) *RegistrationCreate {
	rc.mutation.SetInviterID(u)
	return rc
}

// SetNillableInviterID sets the "inviter_id" field if the given value is not nil.
func (rc *RegistrationCreate) SetNillableInviterID(u *uuid.UUID) *RegistrationCreate {
	if u != nil {
		rc.SetInviterID(*u)
	}
	return rc
}

// SetInviteeID sets the "invitee_id" field.
func (rc *RegistrationCreate) SetInviteeID(u uuid.UUID) *RegistrationCreate {
	rc.mutation.SetInviteeID(u)
	return rc
}

// SetNillableInviteeID sets the "invitee_id" field if the given value is not nil.
func (rc *RegistrationCreate) SetNillableInviteeID(u *uuid.UUID) *RegistrationCreate {
	if u != nil {
		rc.SetInviteeID(*u)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RegistrationCreate) SetID(u uint32) *RegistrationCreate {
	rc.mutation.SetID(u)
	return rc
}

// Mutation returns the RegistrationMutation object of the builder.
func (rc *RegistrationCreate) Mutation() *RegistrationMutation {
	return rc.mutation
}

// Save creates the Registration in the database.
func (rc *RegistrationCreate) Save(ctx context.Context) (*Registration, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RegistrationCreate) SaveX(ctx context.Context) *Registration {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RegistrationCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RegistrationCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RegistrationCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := registration.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := registration.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.DeletedAt(); !ok {
		v := registration.DefaultDeletedAt()
		rc.mutation.SetDeletedAt(v)
	}
	if _, ok := rc.mutation.EntID(); !ok {
		v := registration.DefaultEntID()
		rc.mutation.SetEntID(v)
	}
	if _, ok := rc.mutation.AppID(); !ok {
		v := registration.DefaultAppID()
		rc.mutation.SetAppID(v)
	}
	if _, ok := rc.mutation.InviterID(); !ok {
		v := registration.DefaultInviterID()
		rc.mutation.SetInviterID(v)
	}
	if _, ok := rc.mutation.InviteeID(); !ok {
		v := registration.DefaultInviteeID()
		rc.mutation.SetInviteeID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RegistrationCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Registration.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Registration.updated_at"`)}
	}
	if _, ok := rc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "Registration.deleted_at"`)}
	}
	if _, ok := rc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "Registration.ent_id"`)}
	}
	return nil
}

func (rc *RegistrationCreate) sqlSave(ctx context.Context) (*Registration, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RegistrationCreate) createSpec() (*Registration, *sqlgraph.CreateSpec) {
	var (
		_node = &Registration{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(registration.Table, sqlgraph.NewFieldSpec(registration.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(registration.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(registration.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.DeletedAt(); ok {
		_spec.SetField(registration.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := rc.mutation.EntID(); ok {
		_spec.SetField(registration.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := rc.mutation.AppID(); ok {
		_spec.SetField(registration.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := rc.mutation.InviterID(); ok {
		_spec.SetField(registration.FieldInviterID, field.TypeUUID, value)
		_node.InviterID = value
	}
	if value, ok := rc.mutation.InviteeID(); ok {
		_spec.SetField(registration.FieldInviteeID, field.TypeUUID, value)
		_node.InviteeID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Registration.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RegistrationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rc *RegistrationCreate) OnConflict(opts ...sql.ConflictOption) *RegistrationUpsertOne {
	rc.conflict = opts
	return &RegistrationUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Registration.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *RegistrationCreate) OnConflictColumns(columns ...string) *RegistrationUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RegistrationUpsertOne{
		create: rc,
	}
}

type (
	// RegistrationUpsertOne is the builder for "upsert"-ing
	//  one Registration node.
	RegistrationUpsertOne struct {
		create *RegistrationCreate
	}

	// RegistrationUpsert is the "OnConflict" setter.
	RegistrationUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *RegistrationUpsert) SetCreatedAt(v uint32) *RegistrationUpsert {
	u.Set(registration.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RegistrationUpsert) UpdateCreatedAt() *RegistrationUpsert {
	u.SetExcluded(registration.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *RegistrationUpsert) AddCreatedAt(v uint32) *RegistrationUpsert {
	u.Add(registration.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RegistrationUpsert) SetUpdatedAt(v uint32) *RegistrationUpsert {
	u.Set(registration.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RegistrationUpsert) UpdateUpdatedAt() *RegistrationUpsert {
	u.SetExcluded(registration.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *RegistrationUpsert) AddUpdatedAt(v uint32) *RegistrationUpsert {
	u.Add(registration.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RegistrationUpsert) SetDeletedAt(v uint32) *RegistrationUpsert {
	u.Set(registration.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RegistrationUpsert) UpdateDeletedAt() *RegistrationUpsert {
	u.SetExcluded(registration.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RegistrationUpsert) AddDeletedAt(v uint32) *RegistrationUpsert {
	u.Add(registration.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *RegistrationUpsert) SetEntID(v uuid.UUID) *RegistrationUpsert {
	u.Set(registration.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *RegistrationUpsert) UpdateEntID() *RegistrationUpsert {
	u.SetExcluded(registration.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *RegistrationUpsert) SetAppID(v uuid.UUID) *RegistrationUpsert {
	u.Set(registration.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *RegistrationUpsert) UpdateAppID() *RegistrationUpsert {
	u.SetExcluded(registration.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *RegistrationUpsert) ClearAppID() *RegistrationUpsert {
	u.SetNull(registration.FieldAppID)
	return u
}

// SetInviterID sets the "inviter_id" field.
func (u *RegistrationUpsert) SetInviterID(v uuid.UUID) *RegistrationUpsert {
	u.Set(registration.FieldInviterID, v)
	return u
}

// UpdateInviterID sets the "inviter_id" field to the value that was provided on create.
func (u *RegistrationUpsert) UpdateInviterID() *RegistrationUpsert {
	u.SetExcluded(registration.FieldInviterID)
	return u
}

// ClearInviterID clears the value of the "inviter_id" field.
func (u *RegistrationUpsert) ClearInviterID() *RegistrationUpsert {
	u.SetNull(registration.FieldInviterID)
	return u
}

// SetInviteeID sets the "invitee_id" field.
func (u *RegistrationUpsert) SetInviteeID(v uuid.UUID) *RegistrationUpsert {
	u.Set(registration.FieldInviteeID, v)
	return u
}

// UpdateInviteeID sets the "invitee_id" field to the value that was provided on create.
func (u *RegistrationUpsert) UpdateInviteeID() *RegistrationUpsert {
	u.SetExcluded(registration.FieldInviteeID)
	return u
}

// ClearInviteeID clears the value of the "invitee_id" field.
func (u *RegistrationUpsert) ClearInviteeID() *RegistrationUpsert {
	u.SetNull(registration.FieldInviteeID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Registration.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(registration.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RegistrationUpsertOne) UpdateNewValues() *RegistrationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(registration.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Registration.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RegistrationUpsertOne) Ignore() *RegistrationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RegistrationUpsertOne) DoNothing() *RegistrationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RegistrationCreate.OnConflict
// documentation for more info.
func (u *RegistrationUpsertOne) Update(set func(*RegistrationUpsert)) *RegistrationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RegistrationUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RegistrationUpsertOne) SetCreatedAt(v uint32) *RegistrationUpsertOne {
	return u.Update(func(s *RegistrationUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *RegistrationUpsertOne) AddCreatedAt(v uint32) *RegistrationUpsertOne {
	return u.Update(func(s *RegistrationUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RegistrationUpsertOne) UpdateCreatedAt() *RegistrationUpsertOne {
	return u.Update(func(s *RegistrationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RegistrationUpsertOne) SetUpdatedAt(v uint32) *RegistrationUpsertOne {
	return u.Update(func(s *RegistrationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *RegistrationUpsertOne) AddUpdatedAt(v uint32) *RegistrationUpsertOne {
	return u.Update(func(s *RegistrationUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RegistrationUpsertOne) UpdateUpdatedAt() *RegistrationUpsertOne {
	return u.Update(func(s *RegistrationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RegistrationUpsertOne) SetDeletedAt(v uint32) *RegistrationUpsertOne {
	return u.Update(func(s *RegistrationUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RegistrationUpsertOne) AddDeletedAt(v uint32) *RegistrationUpsertOne {
	return u.Update(func(s *RegistrationUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RegistrationUpsertOne) UpdateDeletedAt() *RegistrationUpsertOne {
	return u.Update(func(s *RegistrationUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *RegistrationUpsertOne) SetEntID(v uuid.UUID) *RegistrationUpsertOne {
	return u.Update(func(s *RegistrationUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *RegistrationUpsertOne) UpdateEntID() *RegistrationUpsertOne {
	return u.Update(func(s *RegistrationUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *RegistrationUpsertOne) SetAppID(v uuid.UUID) *RegistrationUpsertOne {
	return u.Update(func(s *RegistrationUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *RegistrationUpsertOne) UpdateAppID() *RegistrationUpsertOne {
	return u.Update(func(s *RegistrationUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *RegistrationUpsertOne) ClearAppID() *RegistrationUpsertOne {
	return u.Update(func(s *RegistrationUpsert) {
		s.ClearAppID()
	})
}

// SetInviterID sets the "inviter_id" field.
func (u *RegistrationUpsertOne) SetInviterID(v uuid.UUID) *RegistrationUpsertOne {
	return u.Update(func(s *RegistrationUpsert) {
		s.SetInviterID(v)
	})
}

// UpdateInviterID sets the "inviter_id" field to the value that was provided on create.
func (u *RegistrationUpsertOne) UpdateInviterID() *RegistrationUpsertOne {
	return u.Update(func(s *RegistrationUpsert) {
		s.UpdateInviterID()
	})
}

// ClearInviterID clears the value of the "inviter_id" field.
func (u *RegistrationUpsertOne) ClearInviterID() *RegistrationUpsertOne {
	return u.Update(func(s *RegistrationUpsert) {
		s.ClearInviterID()
	})
}

// SetInviteeID sets the "invitee_id" field.
func (u *RegistrationUpsertOne) SetInviteeID(v uuid.UUID) *RegistrationUpsertOne {
	return u.Update(func(s *RegistrationUpsert) {
		s.SetInviteeID(v)
	})
}

// UpdateInviteeID sets the "invitee_id" field to the value that was provided on create.
func (u *RegistrationUpsertOne) UpdateInviteeID() *RegistrationUpsertOne {
	return u.Update(func(s *RegistrationUpsert) {
		s.UpdateInviteeID()
	})
}

// ClearInviteeID clears the value of the "invitee_id" field.
func (u *RegistrationUpsertOne) ClearInviteeID() *RegistrationUpsertOne {
	return u.Update(func(s *RegistrationUpsert) {
		s.ClearInviteeID()
	})
}

// Exec executes the query.
func (u *RegistrationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for RegistrationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RegistrationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RegistrationUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RegistrationUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RegistrationCreateBulk is the builder for creating many Registration entities in bulk.
type RegistrationCreateBulk struct {
	config
	err      error
	builders []*RegistrationCreate
	conflict []sql.ConflictOption
}

// Save creates the Registration entities in the database.
func (rcb *RegistrationCreateBulk) Save(ctx context.Context) ([]*Registration, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Registration, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RegistrationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RegistrationCreateBulk) SaveX(ctx context.Context) []*Registration {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RegistrationCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RegistrationCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Registration.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RegistrationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rcb *RegistrationCreateBulk) OnConflict(opts ...sql.ConflictOption) *RegistrationUpsertBulk {
	rcb.conflict = opts
	return &RegistrationUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Registration.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *RegistrationCreateBulk) OnConflictColumns(columns ...string) *RegistrationUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RegistrationUpsertBulk{
		create: rcb,
	}
}

// RegistrationUpsertBulk is the builder for "upsert"-ing
// a bulk of Registration nodes.
type RegistrationUpsertBulk struct {
	create *RegistrationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Registration.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(registration.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RegistrationUpsertBulk) UpdateNewValues() *RegistrationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(registration.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Registration.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RegistrationUpsertBulk) Ignore() *RegistrationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RegistrationUpsertBulk) DoNothing() *RegistrationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RegistrationCreateBulk.OnConflict
// documentation for more info.
func (u *RegistrationUpsertBulk) Update(set func(*RegistrationUpsert)) *RegistrationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RegistrationUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RegistrationUpsertBulk) SetCreatedAt(v uint32) *RegistrationUpsertBulk {
	return u.Update(func(s *RegistrationUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *RegistrationUpsertBulk) AddCreatedAt(v uint32) *RegistrationUpsertBulk {
	return u.Update(func(s *RegistrationUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RegistrationUpsertBulk) UpdateCreatedAt() *RegistrationUpsertBulk {
	return u.Update(func(s *RegistrationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RegistrationUpsertBulk) SetUpdatedAt(v uint32) *RegistrationUpsertBulk {
	return u.Update(func(s *RegistrationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *RegistrationUpsertBulk) AddUpdatedAt(v uint32) *RegistrationUpsertBulk {
	return u.Update(func(s *RegistrationUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RegistrationUpsertBulk) UpdateUpdatedAt() *RegistrationUpsertBulk {
	return u.Update(func(s *RegistrationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RegistrationUpsertBulk) SetDeletedAt(v uint32) *RegistrationUpsertBulk {
	return u.Update(func(s *RegistrationUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RegistrationUpsertBulk) AddDeletedAt(v uint32) *RegistrationUpsertBulk {
	return u.Update(func(s *RegistrationUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RegistrationUpsertBulk) UpdateDeletedAt() *RegistrationUpsertBulk {
	return u.Update(func(s *RegistrationUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *RegistrationUpsertBulk) SetEntID(v uuid.UUID) *RegistrationUpsertBulk {
	return u.Update(func(s *RegistrationUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *RegistrationUpsertBulk) UpdateEntID() *RegistrationUpsertBulk {
	return u.Update(func(s *RegistrationUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *RegistrationUpsertBulk) SetAppID(v uuid.UUID) *RegistrationUpsertBulk {
	return u.Update(func(s *RegistrationUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *RegistrationUpsertBulk) UpdateAppID() *RegistrationUpsertBulk {
	return u.Update(func(s *RegistrationUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *RegistrationUpsertBulk) ClearAppID() *RegistrationUpsertBulk {
	return u.Update(func(s *RegistrationUpsert) {
		s.ClearAppID()
	})
}

// SetInviterID sets the "inviter_id" field.
func (u *RegistrationUpsertBulk) SetInviterID(v uuid.UUID) *RegistrationUpsertBulk {
	return u.Update(func(s *RegistrationUpsert) {
		s.SetInviterID(v)
	})
}

// UpdateInviterID sets the "inviter_id" field to the value that was provided on create.
func (u *RegistrationUpsertBulk) UpdateInviterID() *RegistrationUpsertBulk {
	return u.Update(func(s *RegistrationUpsert) {
		s.UpdateInviterID()
	})
}

// ClearInviterID clears the value of the "inviter_id" field.
func (u *RegistrationUpsertBulk) ClearInviterID() *RegistrationUpsertBulk {
	return u.Update(func(s *RegistrationUpsert) {
		s.ClearInviterID()
	})
}

// SetInviteeID sets the "invitee_id" field.
func (u *RegistrationUpsertBulk) SetInviteeID(v uuid.UUID) *RegistrationUpsertBulk {
	return u.Update(func(s *RegistrationUpsert) {
		s.SetInviteeID(v)
	})
}

// UpdateInviteeID sets the "invitee_id" field to the value that was provided on create.
func (u *RegistrationUpsertBulk) UpdateInviteeID() *RegistrationUpsertBulk {
	return u.Update(func(s *RegistrationUpsert) {
		s.UpdateInviteeID()
	})
}

// ClearInviteeID clears the value of the "invitee_id" field.
func (u *RegistrationUpsertBulk) ClearInviteeID() *RegistrationUpsertBulk {
	return u.Update(func(s *RegistrationUpsert) {
		s.ClearInviteeID()
	})
}

// Exec executes the query.
func (u *RegistrationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the RegistrationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for RegistrationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RegistrationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

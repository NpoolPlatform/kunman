// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/goodachievement"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// GoodAchievementCreate is the builder for creating a GoodAchievement entity.
type GoodAchievementCreate struct {
	config
	mutation *GoodAchievementMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (gac *GoodAchievementCreate) SetCreatedAt(u uint32) *GoodAchievementCreate {
	gac.mutation.SetCreatedAt(u)
	return gac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gac *GoodAchievementCreate) SetNillableCreatedAt(u *uint32) *GoodAchievementCreate {
	if u != nil {
		gac.SetCreatedAt(*u)
	}
	return gac
}

// SetUpdatedAt sets the "updated_at" field.
func (gac *GoodAchievementCreate) SetUpdatedAt(u uint32) *GoodAchievementCreate {
	gac.mutation.SetUpdatedAt(u)
	return gac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gac *GoodAchievementCreate) SetNillableUpdatedAt(u *uint32) *GoodAchievementCreate {
	if u != nil {
		gac.SetUpdatedAt(*u)
	}
	return gac
}

// SetDeletedAt sets the "deleted_at" field.
func (gac *GoodAchievementCreate) SetDeletedAt(u uint32) *GoodAchievementCreate {
	gac.mutation.SetDeletedAt(u)
	return gac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gac *GoodAchievementCreate) SetNillableDeletedAt(u *uint32) *GoodAchievementCreate {
	if u != nil {
		gac.SetDeletedAt(*u)
	}
	return gac
}

// SetEntID sets the "ent_id" field.
func (gac *GoodAchievementCreate) SetEntID(u uuid.UUID) *GoodAchievementCreate {
	gac.mutation.SetEntID(u)
	return gac
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (gac *GoodAchievementCreate) SetNillableEntID(u *uuid.UUID) *GoodAchievementCreate {
	if u != nil {
		gac.SetEntID(*u)
	}
	return gac
}

// SetAppID sets the "app_id" field.
func (gac *GoodAchievementCreate) SetAppID(u uuid.UUID) *GoodAchievementCreate {
	gac.mutation.SetAppID(u)
	return gac
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (gac *GoodAchievementCreate) SetNillableAppID(u *uuid.UUID) *GoodAchievementCreate {
	if u != nil {
		gac.SetAppID(*u)
	}
	return gac
}

// SetUserID sets the "user_id" field.
func (gac *GoodAchievementCreate) SetUserID(u uuid.UUID) *GoodAchievementCreate {
	gac.mutation.SetUserID(u)
	return gac
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (gac *GoodAchievementCreate) SetNillableUserID(u *uuid.UUID) *GoodAchievementCreate {
	if u != nil {
		gac.SetUserID(*u)
	}
	return gac
}

// SetGoodID sets the "good_id" field.
func (gac *GoodAchievementCreate) SetGoodID(u uuid.UUID) *GoodAchievementCreate {
	gac.mutation.SetGoodID(u)
	return gac
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (gac *GoodAchievementCreate) SetNillableGoodID(u *uuid.UUID) *GoodAchievementCreate {
	if u != nil {
		gac.SetGoodID(*u)
	}
	return gac
}

// SetAppGoodID sets the "app_good_id" field.
func (gac *GoodAchievementCreate) SetAppGoodID(u uuid.UUID) *GoodAchievementCreate {
	gac.mutation.SetAppGoodID(u)
	return gac
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (gac *GoodAchievementCreate) SetNillableAppGoodID(u *uuid.UUID) *GoodAchievementCreate {
	if u != nil {
		gac.SetAppGoodID(*u)
	}
	return gac
}

// SetTotalUnits sets the "total_units" field.
func (gac *GoodAchievementCreate) SetTotalUnits(d decimal.Decimal) *GoodAchievementCreate {
	gac.mutation.SetTotalUnits(d)
	return gac
}

// SetNillableTotalUnits sets the "total_units" field if the given value is not nil.
func (gac *GoodAchievementCreate) SetNillableTotalUnits(d *decimal.Decimal) *GoodAchievementCreate {
	if d != nil {
		gac.SetTotalUnits(*d)
	}
	return gac
}

// SetSelfUnits sets the "self_units" field.
func (gac *GoodAchievementCreate) SetSelfUnits(d decimal.Decimal) *GoodAchievementCreate {
	gac.mutation.SetSelfUnits(d)
	return gac
}

// SetNillableSelfUnits sets the "self_units" field if the given value is not nil.
func (gac *GoodAchievementCreate) SetNillableSelfUnits(d *decimal.Decimal) *GoodAchievementCreate {
	if d != nil {
		gac.SetSelfUnits(*d)
	}
	return gac
}

// SetTotalAmountUsd sets the "total_amount_usd" field.
func (gac *GoodAchievementCreate) SetTotalAmountUsd(d decimal.Decimal) *GoodAchievementCreate {
	gac.mutation.SetTotalAmountUsd(d)
	return gac
}

// SetNillableTotalAmountUsd sets the "total_amount_usd" field if the given value is not nil.
func (gac *GoodAchievementCreate) SetNillableTotalAmountUsd(d *decimal.Decimal) *GoodAchievementCreate {
	if d != nil {
		gac.SetTotalAmountUsd(*d)
	}
	return gac
}

// SetSelfAmountUsd sets the "self_amount_usd" field.
func (gac *GoodAchievementCreate) SetSelfAmountUsd(d decimal.Decimal) *GoodAchievementCreate {
	gac.mutation.SetSelfAmountUsd(d)
	return gac
}

// SetNillableSelfAmountUsd sets the "self_amount_usd" field if the given value is not nil.
func (gac *GoodAchievementCreate) SetNillableSelfAmountUsd(d *decimal.Decimal) *GoodAchievementCreate {
	if d != nil {
		gac.SetSelfAmountUsd(*d)
	}
	return gac
}

// SetTotalCommissionUsd sets the "total_commission_usd" field.
func (gac *GoodAchievementCreate) SetTotalCommissionUsd(d decimal.Decimal) *GoodAchievementCreate {
	gac.mutation.SetTotalCommissionUsd(d)
	return gac
}

// SetNillableTotalCommissionUsd sets the "total_commission_usd" field if the given value is not nil.
func (gac *GoodAchievementCreate) SetNillableTotalCommissionUsd(d *decimal.Decimal) *GoodAchievementCreate {
	if d != nil {
		gac.SetTotalCommissionUsd(*d)
	}
	return gac
}

// SetSelfCommissionUsd sets the "self_commission_usd" field.
func (gac *GoodAchievementCreate) SetSelfCommissionUsd(d decimal.Decimal) *GoodAchievementCreate {
	gac.mutation.SetSelfCommissionUsd(d)
	return gac
}

// SetNillableSelfCommissionUsd sets the "self_commission_usd" field if the given value is not nil.
func (gac *GoodAchievementCreate) SetNillableSelfCommissionUsd(d *decimal.Decimal) *GoodAchievementCreate {
	if d != nil {
		gac.SetSelfCommissionUsd(*d)
	}
	return gac
}

// SetID sets the "id" field.
func (gac *GoodAchievementCreate) SetID(u uint32) *GoodAchievementCreate {
	gac.mutation.SetID(u)
	return gac
}

// Mutation returns the GoodAchievementMutation object of the builder.
func (gac *GoodAchievementCreate) Mutation() *GoodAchievementMutation {
	return gac.mutation
}

// Save creates the GoodAchievement in the database.
func (gac *GoodAchievementCreate) Save(ctx context.Context) (*GoodAchievement, error) {
	gac.defaults()
	return withHooks(ctx, gac.sqlSave, gac.mutation, gac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gac *GoodAchievementCreate) SaveX(ctx context.Context) *GoodAchievement {
	v, err := gac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gac *GoodAchievementCreate) Exec(ctx context.Context) error {
	_, err := gac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gac *GoodAchievementCreate) ExecX(ctx context.Context) {
	if err := gac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gac *GoodAchievementCreate) defaults() {
	if _, ok := gac.mutation.CreatedAt(); !ok {
		v := goodachievement.DefaultCreatedAt()
		gac.mutation.SetCreatedAt(v)
	}
	if _, ok := gac.mutation.UpdatedAt(); !ok {
		v := goodachievement.DefaultUpdatedAt()
		gac.mutation.SetUpdatedAt(v)
	}
	if _, ok := gac.mutation.DeletedAt(); !ok {
		v := goodachievement.DefaultDeletedAt()
		gac.mutation.SetDeletedAt(v)
	}
	if _, ok := gac.mutation.EntID(); !ok {
		v := goodachievement.DefaultEntID()
		gac.mutation.SetEntID(v)
	}
	if _, ok := gac.mutation.AppID(); !ok {
		v := goodachievement.DefaultAppID()
		gac.mutation.SetAppID(v)
	}
	if _, ok := gac.mutation.UserID(); !ok {
		v := goodachievement.DefaultUserID()
		gac.mutation.SetUserID(v)
	}
	if _, ok := gac.mutation.GoodID(); !ok {
		v := goodachievement.DefaultGoodID()
		gac.mutation.SetGoodID(v)
	}
	if _, ok := gac.mutation.AppGoodID(); !ok {
		v := goodachievement.DefaultAppGoodID()
		gac.mutation.SetAppGoodID(v)
	}
	if _, ok := gac.mutation.TotalUnits(); !ok {
		v := goodachievement.DefaultTotalUnits
		gac.mutation.SetTotalUnits(v)
	}
	if _, ok := gac.mutation.SelfUnits(); !ok {
		v := goodachievement.DefaultSelfUnits
		gac.mutation.SetSelfUnits(v)
	}
	if _, ok := gac.mutation.TotalAmountUsd(); !ok {
		v := goodachievement.DefaultTotalAmountUsd
		gac.mutation.SetTotalAmountUsd(v)
	}
	if _, ok := gac.mutation.SelfAmountUsd(); !ok {
		v := goodachievement.DefaultSelfAmountUsd
		gac.mutation.SetSelfAmountUsd(v)
	}
	if _, ok := gac.mutation.TotalCommissionUsd(); !ok {
		v := goodachievement.DefaultTotalCommissionUsd
		gac.mutation.SetTotalCommissionUsd(v)
	}
	if _, ok := gac.mutation.SelfCommissionUsd(); !ok {
		v := goodachievement.DefaultSelfCommissionUsd
		gac.mutation.SetSelfCommissionUsd(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gac *GoodAchievementCreate) check() error {
	if _, ok := gac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "GoodAchievement.created_at"`)}
	}
	if _, ok := gac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "GoodAchievement.updated_at"`)}
	}
	if _, ok := gac.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "GoodAchievement.deleted_at"`)}
	}
	if _, ok := gac.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "GoodAchievement.ent_id"`)}
	}
	return nil
}

func (gac *GoodAchievementCreate) sqlSave(ctx context.Context) (*GoodAchievement, error) {
	if err := gac.check(); err != nil {
		return nil, err
	}
	_node, _spec := gac.createSpec()
	if err := sqlgraph.CreateNode(ctx, gac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	gac.mutation.id = &_node.ID
	gac.mutation.done = true
	return _node, nil
}

func (gac *GoodAchievementCreate) createSpec() (*GoodAchievement, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodAchievement{config: gac.config}
		_spec = sqlgraph.NewCreateSpec(goodachievement.Table, sqlgraph.NewFieldSpec(goodachievement.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = gac.conflict
	if id, ok := gac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gac.mutation.CreatedAt(); ok {
		_spec.SetField(goodachievement.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := gac.mutation.UpdatedAt(); ok {
		_spec.SetField(goodachievement.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := gac.mutation.DeletedAt(); ok {
		_spec.SetField(goodachievement.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := gac.mutation.EntID(); ok {
		_spec.SetField(goodachievement.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := gac.mutation.AppID(); ok {
		_spec.SetField(goodachievement.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := gac.mutation.UserID(); ok {
		_spec.SetField(goodachievement.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := gac.mutation.GoodID(); ok {
		_spec.SetField(goodachievement.FieldGoodID, field.TypeUUID, value)
		_node.GoodID = value
	}
	if value, ok := gac.mutation.AppGoodID(); ok {
		_spec.SetField(goodachievement.FieldAppGoodID, field.TypeUUID, value)
		_node.AppGoodID = value
	}
	if value, ok := gac.mutation.TotalUnits(); ok {
		_spec.SetField(goodachievement.FieldTotalUnits, field.TypeOther, value)
		_node.TotalUnits = value
	}
	if value, ok := gac.mutation.SelfUnits(); ok {
		_spec.SetField(goodachievement.FieldSelfUnits, field.TypeOther, value)
		_node.SelfUnits = value
	}
	if value, ok := gac.mutation.TotalAmountUsd(); ok {
		_spec.SetField(goodachievement.FieldTotalAmountUsd, field.TypeOther, value)
		_node.TotalAmountUsd = value
	}
	if value, ok := gac.mutation.SelfAmountUsd(); ok {
		_spec.SetField(goodachievement.FieldSelfAmountUsd, field.TypeOther, value)
		_node.SelfAmountUsd = value
	}
	if value, ok := gac.mutation.TotalCommissionUsd(); ok {
		_spec.SetField(goodachievement.FieldTotalCommissionUsd, field.TypeOther, value)
		_node.TotalCommissionUsd = value
	}
	if value, ok := gac.mutation.SelfCommissionUsd(); ok {
		_spec.SetField(goodachievement.FieldSelfCommissionUsd, field.TypeOther, value)
		_node.SelfCommissionUsd = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodAchievement.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodAchievementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (gac *GoodAchievementCreate) OnConflict(opts ...sql.ConflictOption) *GoodAchievementUpsertOne {
	gac.conflict = opts
	return &GoodAchievementUpsertOne{
		create: gac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodAchievement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gac *GoodAchievementCreate) OnConflictColumns(columns ...string) *GoodAchievementUpsertOne {
	gac.conflict = append(gac.conflict, sql.ConflictColumns(columns...))
	return &GoodAchievementUpsertOne{
		create: gac,
	}
}

type (
	// GoodAchievementUpsertOne is the builder for "upsert"-ing
	//  one GoodAchievement node.
	GoodAchievementUpsertOne struct {
		create *GoodAchievementCreate
	}

	// GoodAchievementUpsert is the "OnConflict" setter.
	GoodAchievementUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *GoodAchievementUpsert) SetCreatedAt(v uint32) *GoodAchievementUpsert {
	u.Set(goodachievement.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodAchievementUpsert) UpdateCreatedAt() *GoodAchievementUpsert {
	u.SetExcluded(goodachievement.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodAchievementUpsert) AddCreatedAt(v uint32) *GoodAchievementUpsert {
	u.Add(goodachievement.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodAchievementUpsert) SetUpdatedAt(v uint32) *GoodAchievementUpsert {
	u.Set(goodachievement.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodAchievementUpsert) UpdateUpdatedAt() *GoodAchievementUpsert {
	u.SetExcluded(goodachievement.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodAchievementUpsert) AddUpdatedAt(v uint32) *GoodAchievementUpsert {
	u.Add(goodachievement.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodAchievementUpsert) SetDeletedAt(v uint32) *GoodAchievementUpsert {
	u.Set(goodachievement.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodAchievementUpsert) UpdateDeletedAt() *GoodAchievementUpsert {
	u.SetExcluded(goodachievement.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodAchievementUpsert) AddDeletedAt(v uint32) *GoodAchievementUpsert {
	u.Add(goodachievement.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *GoodAchievementUpsert) SetEntID(v uuid.UUID) *GoodAchievementUpsert {
	u.Set(goodachievement.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodAchievementUpsert) UpdateEntID() *GoodAchievementUpsert {
	u.SetExcluded(goodachievement.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *GoodAchievementUpsert) SetAppID(v uuid.UUID) *GoodAchievementUpsert {
	u.Set(goodachievement.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *GoodAchievementUpsert) UpdateAppID() *GoodAchievementUpsert {
	u.SetExcluded(goodachievement.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *GoodAchievementUpsert) ClearAppID() *GoodAchievementUpsert {
	u.SetNull(goodachievement.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *GoodAchievementUpsert) SetUserID(v uuid.UUID) *GoodAchievementUpsert {
	u.Set(goodachievement.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GoodAchievementUpsert) UpdateUserID() *GoodAchievementUpsert {
	u.SetExcluded(goodachievement.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *GoodAchievementUpsert) ClearUserID() *GoodAchievementUpsert {
	u.SetNull(goodachievement.FieldUserID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *GoodAchievementUpsert) SetGoodID(v uuid.UUID) *GoodAchievementUpsert {
	u.Set(goodachievement.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodAchievementUpsert) UpdateGoodID() *GoodAchievementUpsert {
	u.SetExcluded(goodachievement.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodAchievementUpsert) ClearGoodID() *GoodAchievementUpsert {
	u.SetNull(goodachievement.FieldGoodID)
	return u
}

// SetAppGoodID sets the "app_good_id" field.
func (u *GoodAchievementUpsert) SetAppGoodID(v uuid.UUID) *GoodAchievementUpsert {
	u.Set(goodachievement.FieldAppGoodID, v)
	return u
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *GoodAchievementUpsert) UpdateAppGoodID() *GoodAchievementUpsert {
	u.SetExcluded(goodachievement.FieldAppGoodID)
	return u
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *GoodAchievementUpsert) ClearAppGoodID() *GoodAchievementUpsert {
	u.SetNull(goodachievement.FieldAppGoodID)
	return u
}

// SetTotalUnits sets the "total_units" field.
func (u *GoodAchievementUpsert) SetTotalUnits(v decimal.Decimal) *GoodAchievementUpsert {
	u.Set(goodachievement.FieldTotalUnits, v)
	return u
}

// UpdateTotalUnits sets the "total_units" field to the value that was provided on create.
func (u *GoodAchievementUpsert) UpdateTotalUnits() *GoodAchievementUpsert {
	u.SetExcluded(goodachievement.FieldTotalUnits)
	return u
}

// ClearTotalUnits clears the value of the "total_units" field.
func (u *GoodAchievementUpsert) ClearTotalUnits() *GoodAchievementUpsert {
	u.SetNull(goodachievement.FieldTotalUnits)
	return u
}

// SetSelfUnits sets the "self_units" field.
func (u *GoodAchievementUpsert) SetSelfUnits(v decimal.Decimal) *GoodAchievementUpsert {
	u.Set(goodachievement.FieldSelfUnits, v)
	return u
}

// UpdateSelfUnits sets the "self_units" field to the value that was provided on create.
func (u *GoodAchievementUpsert) UpdateSelfUnits() *GoodAchievementUpsert {
	u.SetExcluded(goodachievement.FieldSelfUnits)
	return u
}

// ClearSelfUnits clears the value of the "self_units" field.
func (u *GoodAchievementUpsert) ClearSelfUnits() *GoodAchievementUpsert {
	u.SetNull(goodachievement.FieldSelfUnits)
	return u
}

// SetTotalAmountUsd sets the "total_amount_usd" field.
func (u *GoodAchievementUpsert) SetTotalAmountUsd(v decimal.Decimal) *GoodAchievementUpsert {
	u.Set(goodachievement.FieldTotalAmountUsd, v)
	return u
}

// UpdateTotalAmountUsd sets the "total_amount_usd" field to the value that was provided on create.
func (u *GoodAchievementUpsert) UpdateTotalAmountUsd() *GoodAchievementUpsert {
	u.SetExcluded(goodachievement.FieldTotalAmountUsd)
	return u
}

// ClearTotalAmountUsd clears the value of the "total_amount_usd" field.
func (u *GoodAchievementUpsert) ClearTotalAmountUsd() *GoodAchievementUpsert {
	u.SetNull(goodachievement.FieldTotalAmountUsd)
	return u
}

// SetSelfAmountUsd sets the "self_amount_usd" field.
func (u *GoodAchievementUpsert) SetSelfAmountUsd(v decimal.Decimal) *GoodAchievementUpsert {
	u.Set(goodachievement.FieldSelfAmountUsd, v)
	return u
}

// UpdateSelfAmountUsd sets the "self_amount_usd" field to the value that was provided on create.
func (u *GoodAchievementUpsert) UpdateSelfAmountUsd() *GoodAchievementUpsert {
	u.SetExcluded(goodachievement.FieldSelfAmountUsd)
	return u
}

// ClearSelfAmountUsd clears the value of the "self_amount_usd" field.
func (u *GoodAchievementUpsert) ClearSelfAmountUsd() *GoodAchievementUpsert {
	u.SetNull(goodachievement.FieldSelfAmountUsd)
	return u
}

// SetTotalCommissionUsd sets the "total_commission_usd" field.
func (u *GoodAchievementUpsert) SetTotalCommissionUsd(v decimal.Decimal) *GoodAchievementUpsert {
	u.Set(goodachievement.FieldTotalCommissionUsd, v)
	return u
}

// UpdateTotalCommissionUsd sets the "total_commission_usd" field to the value that was provided on create.
func (u *GoodAchievementUpsert) UpdateTotalCommissionUsd() *GoodAchievementUpsert {
	u.SetExcluded(goodachievement.FieldTotalCommissionUsd)
	return u
}

// ClearTotalCommissionUsd clears the value of the "total_commission_usd" field.
func (u *GoodAchievementUpsert) ClearTotalCommissionUsd() *GoodAchievementUpsert {
	u.SetNull(goodachievement.FieldTotalCommissionUsd)
	return u
}

// SetSelfCommissionUsd sets the "self_commission_usd" field.
func (u *GoodAchievementUpsert) SetSelfCommissionUsd(v decimal.Decimal) *GoodAchievementUpsert {
	u.Set(goodachievement.FieldSelfCommissionUsd, v)
	return u
}

// UpdateSelfCommissionUsd sets the "self_commission_usd" field to the value that was provided on create.
func (u *GoodAchievementUpsert) UpdateSelfCommissionUsd() *GoodAchievementUpsert {
	u.SetExcluded(goodachievement.FieldSelfCommissionUsd)
	return u
}

// ClearSelfCommissionUsd clears the value of the "self_commission_usd" field.
func (u *GoodAchievementUpsert) ClearSelfCommissionUsd() *GoodAchievementUpsert {
	u.SetNull(goodachievement.FieldSelfCommissionUsd)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GoodAchievement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodachievement.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GoodAchievementUpsertOne) UpdateNewValues() *GoodAchievementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(goodachievement.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodAchievement.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GoodAchievementUpsertOne) Ignore() *GoodAchievementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodAchievementUpsertOne) DoNothing() *GoodAchievementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodAchievementCreate.OnConflict
// documentation for more info.
func (u *GoodAchievementUpsertOne) Update(set func(*GoodAchievementUpsert)) *GoodAchievementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodAchievementUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodAchievementUpsertOne) SetCreatedAt(v uint32) *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodAchievementUpsertOne) AddCreatedAt(v uint32) *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodAchievementUpsertOne) UpdateCreatedAt() *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodAchievementUpsertOne) SetUpdatedAt(v uint32) *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodAchievementUpsertOne) AddUpdatedAt(v uint32) *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodAchievementUpsertOne) UpdateUpdatedAt() *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodAchievementUpsertOne) SetDeletedAt(v uint32) *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodAchievementUpsertOne) AddDeletedAt(v uint32) *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodAchievementUpsertOne) UpdateDeletedAt() *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *GoodAchievementUpsertOne) SetEntID(v uuid.UUID) *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodAchievementUpsertOne) UpdateEntID() *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *GoodAchievementUpsertOne) SetAppID(v uuid.UUID) *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *GoodAchievementUpsertOne) UpdateAppID() *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *GoodAchievementUpsertOne) ClearAppID() *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *GoodAchievementUpsertOne) SetUserID(v uuid.UUID) *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GoodAchievementUpsertOne) UpdateUserID() *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *GoodAchievementUpsertOne) ClearUserID() *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.ClearUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *GoodAchievementUpsertOne) SetGoodID(v uuid.UUID) *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodAchievementUpsertOne) UpdateGoodID() *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodAchievementUpsertOne) ClearGoodID() *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.ClearGoodID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *GoodAchievementUpsertOne) SetAppGoodID(v uuid.UUID) *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *GoodAchievementUpsertOne) UpdateAppGoodID() *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *GoodAchievementUpsertOne) ClearAppGoodID() *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.ClearAppGoodID()
	})
}

// SetTotalUnits sets the "total_units" field.
func (u *GoodAchievementUpsertOne) SetTotalUnits(v decimal.Decimal) *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetTotalUnits(v)
	})
}

// UpdateTotalUnits sets the "total_units" field to the value that was provided on create.
func (u *GoodAchievementUpsertOne) UpdateTotalUnits() *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateTotalUnits()
	})
}

// ClearTotalUnits clears the value of the "total_units" field.
func (u *GoodAchievementUpsertOne) ClearTotalUnits() *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.ClearTotalUnits()
	})
}

// SetSelfUnits sets the "self_units" field.
func (u *GoodAchievementUpsertOne) SetSelfUnits(v decimal.Decimal) *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetSelfUnits(v)
	})
}

// UpdateSelfUnits sets the "self_units" field to the value that was provided on create.
func (u *GoodAchievementUpsertOne) UpdateSelfUnits() *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateSelfUnits()
	})
}

// ClearSelfUnits clears the value of the "self_units" field.
func (u *GoodAchievementUpsertOne) ClearSelfUnits() *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.ClearSelfUnits()
	})
}

// SetTotalAmountUsd sets the "total_amount_usd" field.
func (u *GoodAchievementUpsertOne) SetTotalAmountUsd(v decimal.Decimal) *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetTotalAmountUsd(v)
	})
}

// UpdateTotalAmountUsd sets the "total_amount_usd" field to the value that was provided on create.
func (u *GoodAchievementUpsertOne) UpdateTotalAmountUsd() *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateTotalAmountUsd()
	})
}

// ClearTotalAmountUsd clears the value of the "total_amount_usd" field.
func (u *GoodAchievementUpsertOne) ClearTotalAmountUsd() *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.ClearTotalAmountUsd()
	})
}

// SetSelfAmountUsd sets the "self_amount_usd" field.
func (u *GoodAchievementUpsertOne) SetSelfAmountUsd(v decimal.Decimal) *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetSelfAmountUsd(v)
	})
}

// UpdateSelfAmountUsd sets the "self_amount_usd" field to the value that was provided on create.
func (u *GoodAchievementUpsertOne) UpdateSelfAmountUsd() *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateSelfAmountUsd()
	})
}

// ClearSelfAmountUsd clears the value of the "self_amount_usd" field.
func (u *GoodAchievementUpsertOne) ClearSelfAmountUsd() *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.ClearSelfAmountUsd()
	})
}

// SetTotalCommissionUsd sets the "total_commission_usd" field.
func (u *GoodAchievementUpsertOne) SetTotalCommissionUsd(v decimal.Decimal) *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetTotalCommissionUsd(v)
	})
}

// UpdateTotalCommissionUsd sets the "total_commission_usd" field to the value that was provided on create.
func (u *GoodAchievementUpsertOne) UpdateTotalCommissionUsd() *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateTotalCommissionUsd()
	})
}

// ClearTotalCommissionUsd clears the value of the "total_commission_usd" field.
func (u *GoodAchievementUpsertOne) ClearTotalCommissionUsd() *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.ClearTotalCommissionUsd()
	})
}

// SetSelfCommissionUsd sets the "self_commission_usd" field.
func (u *GoodAchievementUpsertOne) SetSelfCommissionUsd(v decimal.Decimal) *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetSelfCommissionUsd(v)
	})
}

// UpdateSelfCommissionUsd sets the "self_commission_usd" field to the value that was provided on create.
func (u *GoodAchievementUpsertOne) UpdateSelfCommissionUsd() *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateSelfCommissionUsd()
	})
}

// ClearSelfCommissionUsd clears the value of the "self_commission_usd" field.
func (u *GoodAchievementUpsertOne) ClearSelfCommissionUsd() *GoodAchievementUpsertOne {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.ClearSelfCommissionUsd()
	})
}

// Exec executes the query.
func (u *GoodAchievementUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for GoodAchievementCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodAchievementUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GoodAchievementUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GoodAchievementUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GoodAchievementCreateBulk is the builder for creating many GoodAchievement entities in bulk.
type GoodAchievementCreateBulk struct {
	config
	err      error
	builders []*GoodAchievementCreate
	conflict []sql.ConflictOption
}

// Save creates the GoodAchievement entities in the database.
func (gacb *GoodAchievementCreateBulk) Save(ctx context.Context) ([]*GoodAchievement, error) {
	if gacb.err != nil {
		return nil, gacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gacb.builders))
	nodes := make([]*GoodAchievement, len(gacb.builders))
	mutators := make([]Mutator, len(gacb.builders))
	for i := range gacb.builders {
		func(i int, root context.Context) {
			builder := gacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodAchievementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gacb *GoodAchievementCreateBulk) SaveX(ctx context.Context) []*GoodAchievement {
	v, err := gacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gacb *GoodAchievementCreateBulk) Exec(ctx context.Context) error {
	_, err := gacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gacb *GoodAchievementCreateBulk) ExecX(ctx context.Context) {
	if err := gacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodAchievement.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodAchievementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (gacb *GoodAchievementCreateBulk) OnConflict(opts ...sql.ConflictOption) *GoodAchievementUpsertBulk {
	gacb.conflict = opts
	return &GoodAchievementUpsertBulk{
		create: gacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodAchievement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gacb *GoodAchievementCreateBulk) OnConflictColumns(columns ...string) *GoodAchievementUpsertBulk {
	gacb.conflict = append(gacb.conflict, sql.ConflictColumns(columns...))
	return &GoodAchievementUpsertBulk{
		create: gacb,
	}
}

// GoodAchievementUpsertBulk is the builder for "upsert"-ing
// a bulk of GoodAchievement nodes.
type GoodAchievementUpsertBulk struct {
	create *GoodAchievementCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GoodAchievement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodachievement.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GoodAchievementUpsertBulk) UpdateNewValues() *GoodAchievementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(goodachievement.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodAchievement.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GoodAchievementUpsertBulk) Ignore() *GoodAchievementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodAchievementUpsertBulk) DoNothing() *GoodAchievementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodAchievementCreateBulk.OnConflict
// documentation for more info.
func (u *GoodAchievementUpsertBulk) Update(set func(*GoodAchievementUpsert)) *GoodAchievementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodAchievementUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodAchievementUpsertBulk) SetCreatedAt(v uint32) *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodAchievementUpsertBulk) AddCreatedAt(v uint32) *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodAchievementUpsertBulk) UpdateCreatedAt() *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodAchievementUpsertBulk) SetUpdatedAt(v uint32) *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodAchievementUpsertBulk) AddUpdatedAt(v uint32) *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodAchievementUpsertBulk) UpdateUpdatedAt() *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodAchievementUpsertBulk) SetDeletedAt(v uint32) *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodAchievementUpsertBulk) AddDeletedAt(v uint32) *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodAchievementUpsertBulk) UpdateDeletedAt() *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *GoodAchievementUpsertBulk) SetEntID(v uuid.UUID) *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodAchievementUpsertBulk) UpdateEntID() *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *GoodAchievementUpsertBulk) SetAppID(v uuid.UUID) *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *GoodAchievementUpsertBulk) UpdateAppID() *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *GoodAchievementUpsertBulk) ClearAppID() *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *GoodAchievementUpsertBulk) SetUserID(v uuid.UUID) *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GoodAchievementUpsertBulk) UpdateUserID() *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *GoodAchievementUpsertBulk) ClearUserID() *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.ClearUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *GoodAchievementUpsertBulk) SetGoodID(v uuid.UUID) *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodAchievementUpsertBulk) UpdateGoodID() *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodAchievementUpsertBulk) ClearGoodID() *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.ClearGoodID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *GoodAchievementUpsertBulk) SetAppGoodID(v uuid.UUID) *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *GoodAchievementUpsertBulk) UpdateAppGoodID() *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *GoodAchievementUpsertBulk) ClearAppGoodID() *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.ClearAppGoodID()
	})
}

// SetTotalUnits sets the "total_units" field.
func (u *GoodAchievementUpsertBulk) SetTotalUnits(v decimal.Decimal) *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetTotalUnits(v)
	})
}

// UpdateTotalUnits sets the "total_units" field to the value that was provided on create.
func (u *GoodAchievementUpsertBulk) UpdateTotalUnits() *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateTotalUnits()
	})
}

// ClearTotalUnits clears the value of the "total_units" field.
func (u *GoodAchievementUpsertBulk) ClearTotalUnits() *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.ClearTotalUnits()
	})
}

// SetSelfUnits sets the "self_units" field.
func (u *GoodAchievementUpsertBulk) SetSelfUnits(v decimal.Decimal) *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetSelfUnits(v)
	})
}

// UpdateSelfUnits sets the "self_units" field to the value that was provided on create.
func (u *GoodAchievementUpsertBulk) UpdateSelfUnits() *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateSelfUnits()
	})
}

// ClearSelfUnits clears the value of the "self_units" field.
func (u *GoodAchievementUpsertBulk) ClearSelfUnits() *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.ClearSelfUnits()
	})
}

// SetTotalAmountUsd sets the "total_amount_usd" field.
func (u *GoodAchievementUpsertBulk) SetTotalAmountUsd(v decimal.Decimal) *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetTotalAmountUsd(v)
	})
}

// UpdateTotalAmountUsd sets the "total_amount_usd" field to the value that was provided on create.
func (u *GoodAchievementUpsertBulk) UpdateTotalAmountUsd() *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateTotalAmountUsd()
	})
}

// ClearTotalAmountUsd clears the value of the "total_amount_usd" field.
func (u *GoodAchievementUpsertBulk) ClearTotalAmountUsd() *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.ClearTotalAmountUsd()
	})
}

// SetSelfAmountUsd sets the "self_amount_usd" field.
func (u *GoodAchievementUpsertBulk) SetSelfAmountUsd(v decimal.Decimal) *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetSelfAmountUsd(v)
	})
}

// UpdateSelfAmountUsd sets the "self_amount_usd" field to the value that was provided on create.
func (u *GoodAchievementUpsertBulk) UpdateSelfAmountUsd() *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateSelfAmountUsd()
	})
}

// ClearSelfAmountUsd clears the value of the "self_amount_usd" field.
func (u *GoodAchievementUpsertBulk) ClearSelfAmountUsd() *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.ClearSelfAmountUsd()
	})
}

// SetTotalCommissionUsd sets the "total_commission_usd" field.
func (u *GoodAchievementUpsertBulk) SetTotalCommissionUsd(v decimal.Decimal) *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetTotalCommissionUsd(v)
	})
}

// UpdateTotalCommissionUsd sets the "total_commission_usd" field to the value that was provided on create.
func (u *GoodAchievementUpsertBulk) UpdateTotalCommissionUsd() *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateTotalCommissionUsd()
	})
}

// ClearTotalCommissionUsd clears the value of the "total_commission_usd" field.
func (u *GoodAchievementUpsertBulk) ClearTotalCommissionUsd() *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.ClearTotalCommissionUsd()
	})
}

// SetSelfCommissionUsd sets the "self_commission_usd" field.
func (u *GoodAchievementUpsertBulk) SetSelfCommissionUsd(v decimal.Decimal) *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.SetSelfCommissionUsd(v)
	})
}

// UpdateSelfCommissionUsd sets the "self_commission_usd" field to the value that was provided on create.
func (u *GoodAchievementUpsertBulk) UpdateSelfCommissionUsd() *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.UpdateSelfCommissionUsd()
	})
}

// ClearSelfCommissionUsd clears the value of the "self_commission_usd" field.
func (u *GoodAchievementUpsertBulk) ClearSelfCommissionUsd() *GoodAchievementUpsertBulk {
	return u.Update(func(s *GoodAchievementUpsert) {
		s.ClearSelfCommissionUsd()
	})
}

// Exec executes the query.
func (u *GoodAchievementUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the GoodAchievementCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for GoodAchievementCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodAchievementUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/statement"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// StatementUpdate is the builder for updating Statement entities.
type StatementUpdate struct {
	config
	hooks     []Hook
	mutation  *StatementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the StatementUpdate builder.
func (su *StatementUpdate) Where(ps ...predicate.Statement) *StatementUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *StatementUpdate) SetCreatedAt(u uint32) *StatementUpdate {
	su.mutation.ResetCreatedAt()
	su.mutation.SetCreatedAt(u)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *StatementUpdate) SetNillableCreatedAt(u *uint32) *StatementUpdate {
	if u != nil {
		su.SetCreatedAt(*u)
	}
	return su
}

// AddCreatedAt adds u to the "created_at" field.
func (su *StatementUpdate) AddCreatedAt(u int32) *StatementUpdate {
	su.mutation.AddCreatedAt(u)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StatementUpdate) SetUpdatedAt(u uint32) *StatementUpdate {
	su.mutation.ResetUpdatedAt()
	su.mutation.SetUpdatedAt(u)
	return su
}

// AddUpdatedAt adds u to the "updated_at" field.
func (su *StatementUpdate) AddUpdatedAt(u int32) *StatementUpdate {
	su.mutation.AddUpdatedAt(u)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *StatementUpdate) SetDeletedAt(u uint32) *StatementUpdate {
	su.mutation.ResetDeletedAt()
	su.mutation.SetDeletedAt(u)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *StatementUpdate) SetNillableDeletedAt(u *uint32) *StatementUpdate {
	if u != nil {
		su.SetDeletedAt(*u)
	}
	return su
}

// AddDeletedAt adds u to the "deleted_at" field.
func (su *StatementUpdate) AddDeletedAt(u int32) *StatementUpdate {
	su.mutation.AddDeletedAt(u)
	return su
}

// SetEntID sets the "ent_id" field.
func (su *StatementUpdate) SetEntID(u uuid.UUID) *StatementUpdate {
	su.mutation.SetEntID(u)
	return su
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (su *StatementUpdate) SetNillableEntID(u *uuid.UUID) *StatementUpdate {
	if u != nil {
		su.SetEntID(*u)
	}
	return su
}

// SetAppID sets the "app_id" field.
func (su *StatementUpdate) SetAppID(u uuid.UUID) *StatementUpdate {
	su.mutation.SetAppID(u)
	return su
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (su *StatementUpdate) SetNillableAppID(u *uuid.UUID) *StatementUpdate {
	if u != nil {
		su.SetAppID(*u)
	}
	return su
}

// ClearAppID clears the value of the "app_id" field.
func (su *StatementUpdate) ClearAppID() *StatementUpdate {
	su.mutation.ClearAppID()
	return su
}

// SetUserID sets the "user_id" field.
func (su *StatementUpdate) SetUserID(u uuid.UUID) *StatementUpdate {
	su.mutation.SetUserID(u)
	return su
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (su *StatementUpdate) SetNillableUserID(u *uuid.UUID) *StatementUpdate {
	if u != nil {
		su.SetUserID(*u)
	}
	return su
}

// ClearUserID clears the value of the "user_id" field.
func (su *StatementUpdate) ClearUserID() *StatementUpdate {
	su.mutation.ClearUserID()
	return su
}

// SetDirectContributorID sets the "direct_contributor_id" field.
func (su *StatementUpdate) SetDirectContributorID(u uuid.UUID) *StatementUpdate {
	su.mutation.SetDirectContributorID(u)
	return su
}

// SetNillableDirectContributorID sets the "direct_contributor_id" field if the given value is not nil.
func (su *StatementUpdate) SetNillableDirectContributorID(u *uuid.UUID) *StatementUpdate {
	if u != nil {
		su.SetDirectContributorID(*u)
	}
	return su
}

// ClearDirectContributorID clears the value of the "direct_contributor_id" field.
func (su *StatementUpdate) ClearDirectContributorID() *StatementUpdate {
	su.mutation.ClearDirectContributorID()
	return su
}

// SetGoodID sets the "good_id" field.
func (su *StatementUpdate) SetGoodID(u uuid.UUID) *StatementUpdate {
	su.mutation.SetGoodID(u)
	return su
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (su *StatementUpdate) SetNillableGoodID(u *uuid.UUID) *StatementUpdate {
	if u != nil {
		su.SetGoodID(*u)
	}
	return su
}

// ClearGoodID clears the value of the "good_id" field.
func (su *StatementUpdate) ClearGoodID() *StatementUpdate {
	su.mutation.ClearGoodID()
	return su
}

// SetAppGoodID sets the "app_good_id" field.
func (su *StatementUpdate) SetAppGoodID(u uuid.UUID) *StatementUpdate {
	su.mutation.SetAppGoodID(u)
	return su
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (su *StatementUpdate) SetNillableAppGoodID(u *uuid.UUID) *StatementUpdate {
	if u != nil {
		su.SetAppGoodID(*u)
	}
	return su
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (su *StatementUpdate) ClearAppGoodID() *StatementUpdate {
	su.mutation.ClearAppGoodID()
	return su
}

// SetOrderID sets the "order_id" field.
func (su *StatementUpdate) SetOrderID(u uuid.UUID) *StatementUpdate {
	su.mutation.SetOrderID(u)
	return su
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (su *StatementUpdate) SetNillableOrderID(u *uuid.UUID) *StatementUpdate {
	if u != nil {
		su.SetOrderID(*u)
	}
	return su
}

// ClearOrderID clears the value of the "order_id" field.
func (su *StatementUpdate) ClearOrderID() *StatementUpdate {
	su.mutation.ClearOrderID()
	return su
}

// SetSelfOrder sets the "self_order" field.
func (su *StatementUpdate) SetSelfOrder(b bool) *StatementUpdate {
	su.mutation.SetSelfOrder(b)
	return su
}

// SetNillableSelfOrder sets the "self_order" field if the given value is not nil.
func (su *StatementUpdate) SetNillableSelfOrder(b *bool) *StatementUpdate {
	if b != nil {
		su.SetSelfOrder(*b)
	}
	return su
}

// ClearSelfOrder clears the value of the "self_order" field.
func (su *StatementUpdate) ClearSelfOrder() *StatementUpdate {
	su.mutation.ClearSelfOrder()
	return su
}

// SetPaymentID sets the "payment_id" field.
func (su *StatementUpdate) SetPaymentID(u uuid.UUID) *StatementUpdate {
	su.mutation.SetPaymentID(u)
	return su
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (su *StatementUpdate) SetNillablePaymentID(u *uuid.UUID) *StatementUpdate {
	if u != nil {
		su.SetPaymentID(*u)
	}
	return su
}

// ClearPaymentID clears the value of the "payment_id" field.
func (su *StatementUpdate) ClearPaymentID() *StatementUpdate {
	su.mutation.ClearPaymentID()
	return su
}

// SetCoinTypeID sets the "coin_type_id" field.
func (su *StatementUpdate) SetCoinTypeID(u uuid.UUID) *StatementUpdate {
	su.mutation.SetCoinTypeID(u)
	return su
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (su *StatementUpdate) SetNillableCoinTypeID(u *uuid.UUID) *StatementUpdate {
	if u != nil {
		su.SetCoinTypeID(*u)
	}
	return su
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (su *StatementUpdate) ClearCoinTypeID() *StatementUpdate {
	su.mutation.ClearCoinTypeID()
	return su
}

// SetPaymentCoinTypeID sets the "payment_coin_type_id" field.
func (su *StatementUpdate) SetPaymentCoinTypeID(u uuid.UUID) *StatementUpdate {
	su.mutation.SetPaymentCoinTypeID(u)
	return su
}

// SetNillablePaymentCoinTypeID sets the "payment_coin_type_id" field if the given value is not nil.
func (su *StatementUpdate) SetNillablePaymentCoinTypeID(u *uuid.UUID) *StatementUpdate {
	if u != nil {
		su.SetPaymentCoinTypeID(*u)
	}
	return su
}

// ClearPaymentCoinTypeID clears the value of the "payment_coin_type_id" field.
func (su *StatementUpdate) ClearPaymentCoinTypeID() *StatementUpdate {
	su.mutation.ClearPaymentCoinTypeID()
	return su
}

// SetPaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field.
func (su *StatementUpdate) SetPaymentCoinUsdCurrency(d decimal.Decimal) *StatementUpdate {
	su.mutation.SetPaymentCoinUsdCurrency(d)
	return su
}

// SetNillablePaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field if the given value is not nil.
func (su *StatementUpdate) SetNillablePaymentCoinUsdCurrency(d *decimal.Decimal) *StatementUpdate {
	if d != nil {
		su.SetPaymentCoinUsdCurrency(*d)
	}
	return su
}

// ClearPaymentCoinUsdCurrency clears the value of the "payment_coin_usd_currency" field.
func (su *StatementUpdate) ClearPaymentCoinUsdCurrency() *StatementUpdate {
	su.mutation.ClearPaymentCoinUsdCurrency()
	return su
}

// SetUnits sets the "units" field.
func (su *StatementUpdate) SetUnits(u uint32) *StatementUpdate {
	su.mutation.ResetUnits()
	su.mutation.SetUnits(u)
	return su
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (su *StatementUpdate) SetNillableUnits(u *uint32) *StatementUpdate {
	if u != nil {
		su.SetUnits(*u)
	}
	return su
}

// AddUnits adds u to the "units" field.
func (su *StatementUpdate) AddUnits(u int32) *StatementUpdate {
	su.mutation.AddUnits(u)
	return su
}

// ClearUnits clears the value of the "units" field.
func (su *StatementUpdate) ClearUnits() *StatementUpdate {
	su.mutation.ClearUnits()
	return su
}

// SetUnitsV1 sets the "units_v1" field.
func (su *StatementUpdate) SetUnitsV1(d decimal.Decimal) *StatementUpdate {
	su.mutation.SetUnitsV1(d)
	return su
}

// SetNillableUnitsV1 sets the "units_v1" field if the given value is not nil.
func (su *StatementUpdate) SetNillableUnitsV1(d *decimal.Decimal) *StatementUpdate {
	if d != nil {
		su.SetUnitsV1(*d)
	}
	return su
}

// ClearUnitsV1 clears the value of the "units_v1" field.
func (su *StatementUpdate) ClearUnitsV1() *StatementUpdate {
	su.mutation.ClearUnitsV1()
	return su
}

// SetAmount sets the "amount" field.
func (su *StatementUpdate) SetAmount(d decimal.Decimal) *StatementUpdate {
	su.mutation.SetAmount(d)
	return su
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (su *StatementUpdate) SetNillableAmount(d *decimal.Decimal) *StatementUpdate {
	if d != nil {
		su.SetAmount(*d)
	}
	return su
}

// ClearAmount clears the value of the "amount" field.
func (su *StatementUpdate) ClearAmount() *StatementUpdate {
	su.mutation.ClearAmount()
	return su
}

// SetUsdAmount sets the "usd_amount" field.
func (su *StatementUpdate) SetUsdAmount(d decimal.Decimal) *StatementUpdate {
	su.mutation.SetUsdAmount(d)
	return su
}

// SetNillableUsdAmount sets the "usd_amount" field if the given value is not nil.
func (su *StatementUpdate) SetNillableUsdAmount(d *decimal.Decimal) *StatementUpdate {
	if d != nil {
		su.SetUsdAmount(*d)
	}
	return su
}

// ClearUsdAmount clears the value of the "usd_amount" field.
func (su *StatementUpdate) ClearUsdAmount() *StatementUpdate {
	su.mutation.ClearUsdAmount()
	return su
}

// SetCommission sets the "commission" field.
func (su *StatementUpdate) SetCommission(d decimal.Decimal) *StatementUpdate {
	su.mutation.SetCommission(d)
	return su
}

// SetNillableCommission sets the "commission" field if the given value is not nil.
func (su *StatementUpdate) SetNillableCommission(d *decimal.Decimal) *StatementUpdate {
	if d != nil {
		su.SetCommission(*d)
	}
	return su
}

// ClearCommission clears the value of the "commission" field.
func (su *StatementUpdate) ClearCommission() *StatementUpdate {
	su.mutation.ClearCommission()
	return su
}

// SetAppConfigID sets the "app_config_id" field.
func (su *StatementUpdate) SetAppConfigID(u uuid.UUID) *StatementUpdate {
	su.mutation.SetAppConfigID(u)
	return su
}

// SetNillableAppConfigID sets the "app_config_id" field if the given value is not nil.
func (su *StatementUpdate) SetNillableAppConfigID(u *uuid.UUID) *StatementUpdate {
	if u != nil {
		su.SetAppConfigID(*u)
	}
	return su
}

// ClearAppConfigID clears the value of the "app_config_id" field.
func (su *StatementUpdate) ClearAppConfigID() *StatementUpdate {
	su.mutation.ClearAppConfigID()
	return su
}

// SetCommissionConfigID sets the "commission_config_id" field.
func (su *StatementUpdate) SetCommissionConfigID(u uuid.UUID) *StatementUpdate {
	su.mutation.SetCommissionConfigID(u)
	return su
}

// SetNillableCommissionConfigID sets the "commission_config_id" field if the given value is not nil.
func (su *StatementUpdate) SetNillableCommissionConfigID(u *uuid.UUID) *StatementUpdate {
	if u != nil {
		su.SetCommissionConfigID(*u)
	}
	return su
}

// ClearCommissionConfigID clears the value of the "commission_config_id" field.
func (su *StatementUpdate) ClearCommissionConfigID() *StatementUpdate {
	su.mutation.ClearCommissionConfigID()
	return su
}

// SetCommissionConfigType sets the "commission_config_type" field.
func (su *StatementUpdate) SetCommissionConfigType(s string) *StatementUpdate {
	su.mutation.SetCommissionConfigType(s)
	return su
}

// SetNillableCommissionConfigType sets the "commission_config_type" field if the given value is not nil.
func (su *StatementUpdate) SetNillableCommissionConfigType(s *string) *StatementUpdate {
	if s != nil {
		su.SetCommissionConfigType(*s)
	}
	return su
}

// ClearCommissionConfigType clears the value of the "commission_config_type" field.
func (su *StatementUpdate) ClearCommissionConfigType() *StatementUpdate {
	su.mutation.ClearCommissionConfigType()
	return su
}

// Mutation returns the StatementMutation object of the builder.
func (su *StatementUpdate) Mutation() *StatementMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StatementUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StatementUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StatementUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StatementUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StatementUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := statement.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *StatementUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StatementUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *StatementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(statement.Table, statement.Columns, sqlgraph.NewFieldSpec(statement.FieldID, field.TypeUint32))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(statement.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedCreatedAt(); ok {
		_spec.AddField(statement.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(statement.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(statement.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(statement.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedDeletedAt(); ok {
		_spec.AddField(statement.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.EntID(); ok {
		_spec.SetField(statement.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := su.mutation.AppID(); ok {
		_spec.SetField(statement.FieldAppID, field.TypeUUID, value)
	}
	if su.mutation.AppIDCleared() {
		_spec.ClearField(statement.FieldAppID, field.TypeUUID)
	}
	if value, ok := su.mutation.UserID(); ok {
		_spec.SetField(statement.FieldUserID, field.TypeUUID, value)
	}
	if su.mutation.UserIDCleared() {
		_spec.ClearField(statement.FieldUserID, field.TypeUUID)
	}
	if value, ok := su.mutation.DirectContributorID(); ok {
		_spec.SetField(statement.FieldDirectContributorID, field.TypeUUID, value)
	}
	if su.mutation.DirectContributorIDCleared() {
		_spec.ClearField(statement.FieldDirectContributorID, field.TypeUUID)
	}
	if value, ok := su.mutation.GoodID(); ok {
		_spec.SetField(statement.FieldGoodID, field.TypeUUID, value)
	}
	if su.mutation.GoodIDCleared() {
		_spec.ClearField(statement.FieldGoodID, field.TypeUUID)
	}
	if value, ok := su.mutation.AppGoodID(); ok {
		_spec.SetField(statement.FieldAppGoodID, field.TypeUUID, value)
	}
	if su.mutation.AppGoodIDCleared() {
		_spec.ClearField(statement.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := su.mutation.OrderID(); ok {
		_spec.SetField(statement.FieldOrderID, field.TypeUUID, value)
	}
	if su.mutation.OrderIDCleared() {
		_spec.ClearField(statement.FieldOrderID, field.TypeUUID)
	}
	if value, ok := su.mutation.SelfOrder(); ok {
		_spec.SetField(statement.FieldSelfOrder, field.TypeBool, value)
	}
	if su.mutation.SelfOrderCleared() {
		_spec.ClearField(statement.FieldSelfOrder, field.TypeBool)
	}
	if value, ok := su.mutation.PaymentID(); ok {
		_spec.SetField(statement.FieldPaymentID, field.TypeUUID, value)
	}
	if su.mutation.PaymentIDCleared() {
		_spec.ClearField(statement.FieldPaymentID, field.TypeUUID)
	}
	if value, ok := su.mutation.CoinTypeID(); ok {
		_spec.SetField(statement.FieldCoinTypeID, field.TypeUUID, value)
	}
	if su.mutation.CoinTypeIDCleared() {
		_spec.ClearField(statement.FieldCoinTypeID, field.TypeUUID)
	}
	if value, ok := su.mutation.PaymentCoinTypeID(); ok {
		_spec.SetField(statement.FieldPaymentCoinTypeID, field.TypeUUID, value)
	}
	if su.mutation.PaymentCoinTypeIDCleared() {
		_spec.ClearField(statement.FieldPaymentCoinTypeID, field.TypeUUID)
	}
	if value, ok := su.mutation.PaymentCoinUsdCurrency(); ok {
		_spec.SetField(statement.FieldPaymentCoinUsdCurrency, field.TypeOther, value)
	}
	if su.mutation.PaymentCoinUsdCurrencyCleared() {
		_spec.ClearField(statement.FieldPaymentCoinUsdCurrency, field.TypeOther)
	}
	if value, ok := su.mutation.Units(); ok {
		_spec.SetField(statement.FieldUnits, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedUnits(); ok {
		_spec.AddField(statement.FieldUnits, field.TypeUint32, value)
	}
	if su.mutation.UnitsCleared() {
		_spec.ClearField(statement.FieldUnits, field.TypeUint32)
	}
	if value, ok := su.mutation.UnitsV1(); ok {
		_spec.SetField(statement.FieldUnitsV1, field.TypeOther, value)
	}
	if su.mutation.UnitsV1Cleared() {
		_spec.ClearField(statement.FieldUnitsV1, field.TypeOther)
	}
	if value, ok := su.mutation.Amount(); ok {
		_spec.SetField(statement.FieldAmount, field.TypeOther, value)
	}
	if su.mutation.AmountCleared() {
		_spec.ClearField(statement.FieldAmount, field.TypeOther)
	}
	if value, ok := su.mutation.UsdAmount(); ok {
		_spec.SetField(statement.FieldUsdAmount, field.TypeOther, value)
	}
	if su.mutation.UsdAmountCleared() {
		_spec.ClearField(statement.FieldUsdAmount, field.TypeOther)
	}
	if value, ok := su.mutation.Commission(); ok {
		_spec.SetField(statement.FieldCommission, field.TypeOther, value)
	}
	if su.mutation.CommissionCleared() {
		_spec.ClearField(statement.FieldCommission, field.TypeOther)
	}
	if value, ok := su.mutation.AppConfigID(); ok {
		_spec.SetField(statement.FieldAppConfigID, field.TypeUUID, value)
	}
	if su.mutation.AppConfigIDCleared() {
		_spec.ClearField(statement.FieldAppConfigID, field.TypeUUID)
	}
	if value, ok := su.mutation.CommissionConfigID(); ok {
		_spec.SetField(statement.FieldCommissionConfigID, field.TypeUUID, value)
	}
	if su.mutation.CommissionConfigIDCleared() {
		_spec.ClearField(statement.FieldCommissionConfigID, field.TypeUUID)
	}
	if value, ok := su.mutation.CommissionConfigType(); ok {
		_spec.SetField(statement.FieldCommissionConfigType, field.TypeString, value)
	}
	if su.mutation.CommissionConfigTypeCleared() {
		_spec.ClearField(statement.FieldCommissionConfigType, field.TypeString)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StatementUpdateOne is the builder for updating a single Statement entity.
type StatementUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *StatementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (suo *StatementUpdateOne) SetCreatedAt(u uint32) *StatementUpdateOne {
	suo.mutation.ResetCreatedAt()
	suo.mutation.SetCreatedAt(u)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableCreatedAt(u *uint32) *StatementUpdateOne {
	if u != nil {
		suo.SetCreatedAt(*u)
	}
	return suo
}

// AddCreatedAt adds u to the "created_at" field.
func (suo *StatementUpdateOne) AddCreatedAt(u int32) *StatementUpdateOne {
	suo.mutation.AddCreatedAt(u)
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StatementUpdateOne) SetUpdatedAt(u uint32) *StatementUpdateOne {
	suo.mutation.ResetUpdatedAt()
	suo.mutation.SetUpdatedAt(u)
	return suo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (suo *StatementUpdateOne) AddUpdatedAt(u int32) *StatementUpdateOne {
	suo.mutation.AddUpdatedAt(u)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *StatementUpdateOne) SetDeletedAt(u uint32) *StatementUpdateOne {
	suo.mutation.ResetDeletedAt()
	suo.mutation.SetDeletedAt(u)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableDeletedAt(u *uint32) *StatementUpdateOne {
	if u != nil {
		suo.SetDeletedAt(*u)
	}
	return suo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (suo *StatementUpdateOne) AddDeletedAt(u int32) *StatementUpdateOne {
	suo.mutation.AddDeletedAt(u)
	return suo
}

// SetEntID sets the "ent_id" field.
func (suo *StatementUpdateOne) SetEntID(u uuid.UUID) *StatementUpdateOne {
	suo.mutation.SetEntID(u)
	return suo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableEntID(u *uuid.UUID) *StatementUpdateOne {
	if u != nil {
		suo.SetEntID(*u)
	}
	return suo
}

// SetAppID sets the "app_id" field.
func (suo *StatementUpdateOne) SetAppID(u uuid.UUID) *StatementUpdateOne {
	suo.mutation.SetAppID(u)
	return suo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableAppID(u *uuid.UUID) *StatementUpdateOne {
	if u != nil {
		suo.SetAppID(*u)
	}
	return suo
}

// ClearAppID clears the value of the "app_id" field.
func (suo *StatementUpdateOne) ClearAppID() *StatementUpdateOne {
	suo.mutation.ClearAppID()
	return suo
}

// SetUserID sets the "user_id" field.
func (suo *StatementUpdateOne) SetUserID(u uuid.UUID) *StatementUpdateOne {
	suo.mutation.SetUserID(u)
	return suo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableUserID(u *uuid.UUID) *StatementUpdateOne {
	if u != nil {
		suo.SetUserID(*u)
	}
	return suo
}

// ClearUserID clears the value of the "user_id" field.
func (suo *StatementUpdateOne) ClearUserID() *StatementUpdateOne {
	suo.mutation.ClearUserID()
	return suo
}

// SetDirectContributorID sets the "direct_contributor_id" field.
func (suo *StatementUpdateOne) SetDirectContributorID(u uuid.UUID) *StatementUpdateOne {
	suo.mutation.SetDirectContributorID(u)
	return suo
}

// SetNillableDirectContributorID sets the "direct_contributor_id" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableDirectContributorID(u *uuid.UUID) *StatementUpdateOne {
	if u != nil {
		suo.SetDirectContributorID(*u)
	}
	return suo
}

// ClearDirectContributorID clears the value of the "direct_contributor_id" field.
func (suo *StatementUpdateOne) ClearDirectContributorID() *StatementUpdateOne {
	suo.mutation.ClearDirectContributorID()
	return suo
}

// SetGoodID sets the "good_id" field.
func (suo *StatementUpdateOne) SetGoodID(u uuid.UUID) *StatementUpdateOne {
	suo.mutation.SetGoodID(u)
	return suo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableGoodID(u *uuid.UUID) *StatementUpdateOne {
	if u != nil {
		suo.SetGoodID(*u)
	}
	return suo
}

// ClearGoodID clears the value of the "good_id" field.
func (suo *StatementUpdateOne) ClearGoodID() *StatementUpdateOne {
	suo.mutation.ClearGoodID()
	return suo
}

// SetAppGoodID sets the "app_good_id" field.
func (suo *StatementUpdateOne) SetAppGoodID(u uuid.UUID) *StatementUpdateOne {
	suo.mutation.SetAppGoodID(u)
	return suo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *StatementUpdateOne {
	if u != nil {
		suo.SetAppGoodID(*u)
	}
	return suo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (suo *StatementUpdateOne) ClearAppGoodID() *StatementUpdateOne {
	suo.mutation.ClearAppGoodID()
	return suo
}

// SetOrderID sets the "order_id" field.
func (suo *StatementUpdateOne) SetOrderID(u uuid.UUID) *StatementUpdateOne {
	suo.mutation.SetOrderID(u)
	return suo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableOrderID(u *uuid.UUID) *StatementUpdateOne {
	if u != nil {
		suo.SetOrderID(*u)
	}
	return suo
}

// ClearOrderID clears the value of the "order_id" field.
func (suo *StatementUpdateOne) ClearOrderID() *StatementUpdateOne {
	suo.mutation.ClearOrderID()
	return suo
}

// SetSelfOrder sets the "self_order" field.
func (suo *StatementUpdateOne) SetSelfOrder(b bool) *StatementUpdateOne {
	suo.mutation.SetSelfOrder(b)
	return suo
}

// SetNillableSelfOrder sets the "self_order" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableSelfOrder(b *bool) *StatementUpdateOne {
	if b != nil {
		suo.SetSelfOrder(*b)
	}
	return suo
}

// ClearSelfOrder clears the value of the "self_order" field.
func (suo *StatementUpdateOne) ClearSelfOrder() *StatementUpdateOne {
	suo.mutation.ClearSelfOrder()
	return suo
}

// SetPaymentID sets the "payment_id" field.
func (suo *StatementUpdateOne) SetPaymentID(u uuid.UUID) *StatementUpdateOne {
	suo.mutation.SetPaymentID(u)
	return suo
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillablePaymentID(u *uuid.UUID) *StatementUpdateOne {
	if u != nil {
		suo.SetPaymentID(*u)
	}
	return suo
}

// ClearPaymentID clears the value of the "payment_id" field.
func (suo *StatementUpdateOne) ClearPaymentID() *StatementUpdateOne {
	suo.mutation.ClearPaymentID()
	return suo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (suo *StatementUpdateOne) SetCoinTypeID(u uuid.UUID) *StatementUpdateOne {
	suo.mutation.SetCoinTypeID(u)
	return suo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *StatementUpdateOne {
	if u != nil {
		suo.SetCoinTypeID(*u)
	}
	return suo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (suo *StatementUpdateOne) ClearCoinTypeID() *StatementUpdateOne {
	suo.mutation.ClearCoinTypeID()
	return suo
}

// SetPaymentCoinTypeID sets the "payment_coin_type_id" field.
func (suo *StatementUpdateOne) SetPaymentCoinTypeID(u uuid.UUID) *StatementUpdateOne {
	suo.mutation.SetPaymentCoinTypeID(u)
	return suo
}

// SetNillablePaymentCoinTypeID sets the "payment_coin_type_id" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillablePaymentCoinTypeID(u *uuid.UUID) *StatementUpdateOne {
	if u != nil {
		suo.SetPaymentCoinTypeID(*u)
	}
	return suo
}

// ClearPaymentCoinTypeID clears the value of the "payment_coin_type_id" field.
func (suo *StatementUpdateOne) ClearPaymentCoinTypeID() *StatementUpdateOne {
	suo.mutation.ClearPaymentCoinTypeID()
	return suo
}

// SetPaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field.
func (suo *StatementUpdateOne) SetPaymentCoinUsdCurrency(d decimal.Decimal) *StatementUpdateOne {
	suo.mutation.SetPaymentCoinUsdCurrency(d)
	return suo
}

// SetNillablePaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillablePaymentCoinUsdCurrency(d *decimal.Decimal) *StatementUpdateOne {
	if d != nil {
		suo.SetPaymentCoinUsdCurrency(*d)
	}
	return suo
}

// ClearPaymentCoinUsdCurrency clears the value of the "payment_coin_usd_currency" field.
func (suo *StatementUpdateOne) ClearPaymentCoinUsdCurrency() *StatementUpdateOne {
	suo.mutation.ClearPaymentCoinUsdCurrency()
	return suo
}

// SetUnits sets the "units" field.
func (suo *StatementUpdateOne) SetUnits(u uint32) *StatementUpdateOne {
	suo.mutation.ResetUnits()
	suo.mutation.SetUnits(u)
	return suo
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableUnits(u *uint32) *StatementUpdateOne {
	if u != nil {
		suo.SetUnits(*u)
	}
	return suo
}

// AddUnits adds u to the "units" field.
func (suo *StatementUpdateOne) AddUnits(u int32) *StatementUpdateOne {
	suo.mutation.AddUnits(u)
	return suo
}

// ClearUnits clears the value of the "units" field.
func (suo *StatementUpdateOne) ClearUnits() *StatementUpdateOne {
	suo.mutation.ClearUnits()
	return suo
}

// SetUnitsV1 sets the "units_v1" field.
func (suo *StatementUpdateOne) SetUnitsV1(d decimal.Decimal) *StatementUpdateOne {
	suo.mutation.SetUnitsV1(d)
	return suo
}

// SetNillableUnitsV1 sets the "units_v1" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableUnitsV1(d *decimal.Decimal) *StatementUpdateOne {
	if d != nil {
		suo.SetUnitsV1(*d)
	}
	return suo
}

// ClearUnitsV1 clears the value of the "units_v1" field.
func (suo *StatementUpdateOne) ClearUnitsV1() *StatementUpdateOne {
	suo.mutation.ClearUnitsV1()
	return suo
}

// SetAmount sets the "amount" field.
func (suo *StatementUpdateOne) SetAmount(d decimal.Decimal) *StatementUpdateOne {
	suo.mutation.SetAmount(d)
	return suo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableAmount(d *decimal.Decimal) *StatementUpdateOne {
	if d != nil {
		suo.SetAmount(*d)
	}
	return suo
}

// ClearAmount clears the value of the "amount" field.
func (suo *StatementUpdateOne) ClearAmount() *StatementUpdateOne {
	suo.mutation.ClearAmount()
	return suo
}

// SetUsdAmount sets the "usd_amount" field.
func (suo *StatementUpdateOne) SetUsdAmount(d decimal.Decimal) *StatementUpdateOne {
	suo.mutation.SetUsdAmount(d)
	return suo
}

// SetNillableUsdAmount sets the "usd_amount" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableUsdAmount(d *decimal.Decimal) *StatementUpdateOne {
	if d != nil {
		suo.SetUsdAmount(*d)
	}
	return suo
}

// ClearUsdAmount clears the value of the "usd_amount" field.
func (suo *StatementUpdateOne) ClearUsdAmount() *StatementUpdateOne {
	suo.mutation.ClearUsdAmount()
	return suo
}

// SetCommission sets the "commission" field.
func (suo *StatementUpdateOne) SetCommission(d decimal.Decimal) *StatementUpdateOne {
	suo.mutation.SetCommission(d)
	return suo
}

// SetNillableCommission sets the "commission" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableCommission(d *decimal.Decimal) *StatementUpdateOne {
	if d != nil {
		suo.SetCommission(*d)
	}
	return suo
}

// ClearCommission clears the value of the "commission" field.
func (suo *StatementUpdateOne) ClearCommission() *StatementUpdateOne {
	suo.mutation.ClearCommission()
	return suo
}

// SetAppConfigID sets the "app_config_id" field.
func (suo *StatementUpdateOne) SetAppConfigID(u uuid.UUID) *StatementUpdateOne {
	suo.mutation.SetAppConfigID(u)
	return suo
}

// SetNillableAppConfigID sets the "app_config_id" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableAppConfigID(u *uuid.UUID) *StatementUpdateOne {
	if u != nil {
		suo.SetAppConfigID(*u)
	}
	return suo
}

// ClearAppConfigID clears the value of the "app_config_id" field.
func (suo *StatementUpdateOne) ClearAppConfigID() *StatementUpdateOne {
	suo.mutation.ClearAppConfigID()
	return suo
}

// SetCommissionConfigID sets the "commission_config_id" field.
func (suo *StatementUpdateOne) SetCommissionConfigID(u uuid.UUID) *StatementUpdateOne {
	suo.mutation.SetCommissionConfigID(u)
	return suo
}

// SetNillableCommissionConfigID sets the "commission_config_id" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableCommissionConfigID(u *uuid.UUID) *StatementUpdateOne {
	if u != nil {
		suo.SetCommissionConfigID(*u)
	}
	return suo
}

// ClearCommissionConfigID clears the value of the "commission_config_id" field.
func (suo *StatementUpdateOne) ClearCommissionConfigID() *StatementUpdateOne {
	suo.mutation.ClearCommissionConfigID()
	return suo
}

// SetCommissionConfigType sets the "commission_config_type" field.
func (suo *StatementUpdateOne) SetCommissionConfigType(s string) *StatementUpdateOne {
	suo.mutation.SetCommissionConfigType(s)
	return suo
}

// SetNillableCommissionConfigType sets the "commission_config_type" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableCommissionConfigType(s *string) *StatementUpdateOne {
	if s != nil {
		suo.SetCommissionConfigType(*s)
	}
	return suo
}

// ClearCommissionConfigType clears the value of the "commission_config_type" field.
func (suo *StatementUpdateOne) ClearCommissionConfigType() *StatementUpdateOne {
	suo.mutation.ClearCommissionConfigType()
	return suo
}

// Mutation returns the StatementMutation object of the builder.
func (suo *StatementUpdateOne) Mutation() *StatementMutation {
	return suo.mutation
}

// Where appends a list predicates to the StatementUpdate builder.
func (suo *StatementUpdateOne) Where(ps ...predicate.Statement) *StatementUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StatementUpdateOne) Select(field string, fields ...string) *StatementUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Statement entity.
func (suo *StatementUpdateOne) Save(ctx context.Context) (*Statement, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StatementUpdateOne) SaveX(ctx context.Context) *Statement {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StatementUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StatementUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StatementUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := statement.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *StatementUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StatementUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *StatementUpdateOne) sqlSave(ctx context.Context) (_node *Statement, err error) {
	_spec := sqlgraph.NewUpdateSpec(statement.Table, statement.Columns, sqlgraph.NewFieldSpec(statement.FieldID, field.TypeUint32))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Statement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, statement.FieldID)
		for _, f := range fields {
			if !statement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != statement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(statement.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(statement.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(statement.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(statement.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(statement.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(statement.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.EntID(); ok {
		_spec.SetField(statement.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := suo.mutation.AppID(); ok {
		_spec.SetField(statement.FieldAppID, field.TypeUUID, value)
	}
	if suo.mutation.AppIDCleared() {
		_spec.ClearField(statement.FieldAppID, field.TypeUUID)
	}
	if value, ok := suo.mutation.UserID(); ok {
		_spec.SetField(statement.FieldUserID, field.TypeUUID, value)
	}
	if suo.mutation.UserIDCleared() {
		_spec.ClearField(statement.FieldUserID, field.TypeUUID)
	}
	if value, ok := suo.mutation.DirectContributorID(); ok {
		_spec.SetField(statement.FieldDirectContributorID, field.TypeUUID, value)
	}
	if suo.mutation.DirectContributorIDCleared() {
		_spec.ClearField(statement.FieldDirectContributorID, field.TypeUUID)
	}
	if value, ok := suo.mutation.GoodID(); ok {
		_spec.SetField(statement.FieldGoodID, field.TypeUUID, value)
	}
	if suo.mutation.GoodIDCleared() {
		_spec.ClearField(statement.FieldGoodID, field.TypeUUID)
	}
	if value, ok := suo.mutation.AppGoodID(); ok {
		_spec.SetField(statement.FieldAppGoodID, field.TypeUUID, value)
	}
	if suo.mutation.AppGoodIDCleared() {
		_spec.ClearField(statement.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := suo.mutation.OrderID(); ok {
		_spec.SetField(statement.FieldOrderID, field.TypeUUID, value)
	}
	if suo.mutation.OrderIDCleared() {
		_spec.ClearField(statement.FieldOrderID, field.TypeUUID)
	}
	if value, ok := suo.mutation.SelfOrder(); ok {
		_spec.SetField(statement.FieldSelfOrder, field.TypeBool, value)
	}
	if suo.mutation.SelfOrderCleared() {
		_spec.ClearField(statement.FieldSelfOrder, field.TypeBool)
	}
	if value, ok := suo.mutation.PaymentID(); ok {
		_spec.SetField(statement.FieldPaymentID, field.TypeUUID, value)
	}
	if suo.mutation.PaymentIDCleared() {
		_spec.ClearField(statement.FieldPaymentID, field.TypeUUID)
	}
	if value, ok := suo.mutation.CoinTypeID(); ok {
		_spec.SetField(statement.FieldCoinTypeID, field.TypeUUID, value)
	}
	if suo.mutation.CoinTypeIDCleared() {
		_spec.ClearField(statement.FieldCoinTypeID, field.TypeUUID)
	}
	if value, ok := suo.mutation.PaymentCoinTypeID(); ok {
		_spec.SetField(statement.FieldPaymentCoinTypeID, field.TypeUUID, value)
	}
	if suo.mutation.PaymentCoinTypeIDCleared() {
		_spec.ClearField(statement.FieldPaymentCoinTypeID, field.TypeUUID)
	}
	if value, ok := suo.mutation.PaymentCoinUsdCurrency(); ok {
		_spec.SetField(statement.FieldPaymentCoinUsdCurrency, field.TypeOther, value)
	}
	if suo.mutation.PaymentCoinUsdCurrencyCleared() {
		_spec.ClearField(statement.FieldPaymentCoinUsdCurrency, field.TypeOther)
	}
	if value, ok := suo.mutation.Units(); ok {
		_spec.SetField(statement.FieldUnits, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedUnits(); ok {
		_spec.AddField(statement.FieldUnits, field.TypeUint32, value)
	}
	if suo.mutation.UnitsCleared() {
		_spec.ClearField(statement.FieldUnits, field.TypeUint32)
	}
	if value, ok := suo.mutation.UnitsV1(); ok {
		_spec.SetField(statement.FieldUnitsV1, field.TypeOther, value)
	}
	if suo.mutation.UnitsV1Cleared() {
		_spec.ClearField(statement.FieldUnitsV1, field.TypeOther)
	}
	if value, ok := suo.mutation.Amount(); ok {
		_spec.SetField(statement.FieldAmount, field.TypeOther, value)
	}
	if suo.mutation.AmountCleared() {
		_spec.ClearField(statement.FieldAmount, field.TypeOther)
	}
	if value, ok := suo.mutation.UsdAmount(); ok {
		_spec.SetField(statement.FieldUsdAmount, field.TypeOther, value)
	}
	if suo.mutation.UsdAmountCleared() {
		_spec.ClearField(statement.FieldUsdAmount, field.TypeOther)
	}
	if value, ok := suo.mutation.Commission(); ok {
		_spec.SetField(statement.FieldCommission, field.TypeOther, value)
	}
	if suo.mutation.CommissionCleared() {
		_spec.ClearField(statement.FieldCommission, field.TypeOther)
	}
	if value, ok := suo.mutation.AppConfigID(); ok {
		_spec.SetField(statement.FieldAppConfigID, field.TypeUUID, value)
	}
	if suo.mutation.AppConfigIDCleared() {
		_spec.ClearField(statement.FieldAppConfigID, field.TypeUUID)
	}
	if value, ok := suo.mutation.CommissionConfigID(); ok {
		_spec.SetField(statement.FieldCommissionConfigID, field.TypeUUID, value)
	}
	if suo.mutation.CommissionConfigIDCleared() {
		_spec.ClearField(statement.FieldCommissionConfigID, field.TypeUUID)
	}
	if value, ok := suo.mutation.CommissionConfigType(); ok {
		_spec.SetField(statement.FieldCommissionConfigType, field.TypeString, value)
	}
	if suo.mutation.CommissionConfigTypeCleared() {
		_spec.ClearField(statement.FieldCommissionConfigType, field.TypeString)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Statement{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}

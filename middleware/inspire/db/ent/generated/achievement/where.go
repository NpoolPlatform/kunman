// Code generated by ent, DO NOT EDIT.

package achievement

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldDeletedAt, v))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldEntID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldAppID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldUserID, v))
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldGoodID, v))
}

// AppGoodID applies equality check predicate on the "app_good_id" field. It's identical to AppGoodIDEQ.
func AppGoodID(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldAppGoodID, v))
}

// CoinTypeID applies equality check predicate on the "coin_type_id" field. It's identical to CoinTypeIDEQ.
func CoinTypeID(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldCoinTypeID, v))
}

// TotalUnitsV1 applies equality check predicate on the "total_units_v1" field. It's identical to TotalUnitsV1EQ.
func TotalUnitsV1(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldTotalUnitsV1, v))
}

// SelfUnitsV1 applies equality check predicate on the "self_units_v1" field. It's identical to SelfUnitsV1EQ.
func SelfUnitsV1(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldSelfUnitsV1, v))
}

// TotalAmount applies equality check predicate on the "total_amount" field. It's identical to TotalAmountEQ.
func TotalAmount(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldTotalAmount, v))
}

// SelfAmount applies equality check predicate on the "self_amount" field. It's identical to SelfAmountEQ.
func SelfAmount(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldSelfAmount, v))
}

// TotalCommission applies equality check predicate on the "total_commission" field. It's identical to TotalCommissionEQ.
func TotalCommission(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldTotalCommission, v))
}

// SelfCommission applies equality check predicate on the "self_commission" field. It's identical to SelfCommissionEQ.
func SelfCommission(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldSelfCommission, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Achievement {
	return predicate.Achievement(sql.FieldLTE(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldLTE(FieldEntID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldLTE(FieldAppID, v))
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.Achievement {
	return predicate.Achievement(sql.FieldIsNull(FieldAppID))
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.Achievement {
	return predicate.Achievement(sql.FieldNotNull(FieldAppID))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldLTE(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Achievement {
	return predicate.Achievement(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Achievement {
	return predicate.Achievement(sql.FieldNotNull(FieldUserID))
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldGoodID, v))
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldNEQ(FieldGoodID, v))
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldIn(FieldGoodID, vs...))
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldNotIn(FieldGoodID, vs...))
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldGT(FieldGoodID, v))
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldGTE(FieldGoodID, v))
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldLT(FieldGoodID, v))
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldLTE(FieldGoodID, v))
}

// GoodIDIsNil applies the IsNil predicate on the "good_id" field.
func GoodIDIsNil() predicate.Achievement {
	return predicate.Achievement(sql.FieldIsNull(FieldGoodID))
}

// GoodIDNotNil applies the NotNil predicate on the "good_id" field.
func GoodIDNotNil() predicate.Achievement {
	return predicate.Achievement(sql.FieldNotNull(FieldGoodID))
}

// AppGoodIDEQ applies the EQ predicate on the "app_good_id" field.
func AppGoodIDEQ(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldAppGoodID, v))
}

// AppGoodIDNEQ applies the NEQ predicate on the "app_good_id" field.
func AppGoodIDNEQ(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldNEQ(FieldAppGoodID, v))
}

// AppGoodIDIn applies the In predicate on the "app_good_id" field.
func AppGoodIDIn(vs ...uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldIn(FieldAppGoodID, vs...))
}

// AppGoodIDNotIn applies the NotIn predicate on the "app_good_id" field.
func AppGoodIDNotIn(vs ...uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldNotIn(FieldAppGoodID, vs...))
}

// AppGoodIDGT applies the GT predicate on the "app_good_id" field.
func AppGoodIDGT(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldGT(FieldAppGoodID, v))
}

// AppGoodIDGTE applies the GTE predicate on the "app_good_id" field.
func AppGoodIDGTE(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldGTE(FieldAppGoodID, v))
}

// AppGoodIDLT applies the LT predicate on the "app_good_id" field.
func AppGoodIDLT(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldLT(FieldAppGoodID, v))
}

// AppGoodIDLTE applies the LTE predicate on the "app_good_id" field.
func AppGoodIDLTE(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldLTE(FieldAppGoodID, v))
}

// AppGoodIDIsNil applies the IsNil predicate on the "app_good_id" field.
func AppGoodIDIsNil() predicate.Achievement {
	return predicate.Achievement(sql.FieldIsNull(FieldAppGoodID))
}

// AppGoodIDNotNil applies the NotNil predicate on the "app_good_id" field.
func AppGoodIDNotNil() predicate.Achievement {
	return predicate.Achievement(sql.FieldNotNull(FieldAppGoodID))
}

// CoinTypeIDEQ applies the EQ predicate on the "coin_type_id" field.
func CoinTypeIDEQ(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldCoinTypeID, v))
}

// CoinTypeIDNEQ applies the NEQ predicate on the "coin_type_id" field.
func CoinTypeIDNEQ(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldNEQ(FieldCoinTypeID, v))
}

// CoinTypeIDIn applies the In predicate on the "coin_type_id" field.
func CoinTypeIDIn(vs ...uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldIn(FieldCoinTypeID, vs...))
}

// CoinTypeIDNotIn applies the NotIn predicate on the "coin_type_id" field.
func CoinTypeIDNotIn(vs ...uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldNotIn(FieldCoinTypeID, vs...))
}

// CoinTypeIDGT applies the GT predicate on the "coin_type_id" field.
func CoinTypeIDGT(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldGT(FieldCoinTypeID, v))
}

// CoinTypeIDGTE applies the GTE predicate on the "coin_type_id" field.
func CoinTypeIDGTE(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldGTE(FieldCoinTypeID, v))
}

// CoinTypeIDLT applies the LT predicate on the "coin_type_id" field.
func CoinTypeIDLT(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldLT(FieldCoinTypeID, v))
}

// CoinTypeIDLTE applies the LTE predicate on the "coin_type_id" field.
func CoinTypeIDLTE(v uuid.UUID) predicate.Achievement {
	return predicate.Achievement(sql.FieldLTE(FieldCoinTypeID, v))
}

// CoinTypeIDIsNil applies the IsNil predicate on the "coin_type_id" field.
func CoinTypeIDIsNil() predicate.Achievement {
	return predicate.Achievement(sql.FieldIsNull(FieldCoinTypeID))
}

// CoinTypeIDNotNil applies the NotNil predicate on the "coin_type_id" field.
func CoinTypeIDNotNil() predicate.Achievement {
	return predicate.Achievement(sql.FieldNotNull(FieldCoinTypeID))
}

// TotalUnitsV1EQ applies the EQ predicate on the "total_units_v1" field.
func TotalUnitsV1EQ(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldTotalUnitsV1, v))
}

// TotalUnitsV1NEQ applies the NEQ predicate on the "total_units_v1" field.
func TotalUnitsV1NEQ(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldNEQ(FieldTotalUnitsV1, v))
}

// TotalUnitsV1In applies the In predicate on the "total_units_v1" field.
func TotalUnitsV1In(vs ...decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldIn(FieldTotalUnitsV1, vs...))
}

// TotalUnitsV1NotIn applies the NotIn predicate on the "total_units_v1" field.
func TotalUnitsV1NotIn(vs ...decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldNotIn(FieldTotalUnitsV1, vs...))
}

// TotalUnitsV1GT applies the GT predicate on the "total_units_v1" field.
func TotalUnitsV1GT(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldGT(FieldTotalUnitsV1, v))
}

// TotalUnitsV1GTE applies the GTE predicate on the "total_units_v1" field.
func TotalUnitsV1GTE(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldGTE(FieldTotalUnitsV1, v))
}

// TotalUnitsV1LT applies the LT predicate on the "total_units_v1" field.
func TotalUnitsV1LT(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldLT(FieldTotalUnitsV1, v))
}

// TotalUnitsV1LTE applies the LTE predicate on the "total_units_v1" field.
func TotalUnitsV1LTE(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldLTE(FieldTotalUnitsV1, v))
}

// TotalUnitsV1IsNil applies the IsNil predicate on the "total_units_v1" field.
func TotalUnitsV1IsNil() predicate.Achievement {
	return predicate.Achievement(sql.FieldIsNull(FieldTotalUnitsV1))
}

// TotalUnitsV1NotNil applies the NotNil predicate on the "total_units_v1" field.
func TotalUnitsV1NotNil() predicate.Achievement {
	return predicate.Achievement(sql.FieldNotNull(FieldTotalUnitsV1))
}

// SelfUnitsV1EQ applies the EQ predicate on the "self_units_v1" field.
func SelfUnitsV1EQ(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldSelfUnitsV1, v))
}

// SelfUnitsV1NEQ applies the NEQ predicate on the "self_units_v1" field.
func SelfUnitsV1NEQ(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldNEQ(FieldSelfUnitsV1, v))
}

// SelfUnitsV1In applies the In predicate on the "self_units_v1" field.
func SelfUnitsV1In(vs ...decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldIn(FieldSelfUnitsV1, vs...))
}

// SelfUnitsV1NotIn applies the NotIn predicate on the "self_units_v1" field.
func SelfUnitsV1NotIn(vs ...decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldNotIn(FieldSelfUnitsV1, vs...))
}

// SelfUnitsV1GT applies the GT predicate on the "self_units_v1" field.
func SelfUnitsV1GT(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldGT(FieldSelfUnitsV1, v))
}

// SelfUnitsV1GTE applies the GTE predicate on the "self_units_v1" field.
func SelfUnitsV1GTE(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldGTE(FieldSelfUnitsV1, v))
}

// SelfUnitsV1LT applies the LT predicate on the "self_units_v1" field.
func SelfUnitsV1LT(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldLT(FieldSelfUnitsV1, v))
}

// SelfUnitsV1LTE applies the LTE predicate on the "self_units_v1" field.
func SelfUnitsV1LTE(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldLTE(FieldSelfUnitsV1, v))
}

// SelfUnitsV1IsNil applies the IsNil predicate on the "self_units_v1" field.
func SelfUnitsV1IsNil() predicate.Achievement {
	return predicate.Achievement(sql.FieldIsNull(FieldSelfUnitsV1))
}

// SelfUnitsV1NotNil applies the NotNil predicate on the "self_units_v1" field.
func SelfUnitsV1NotNil() predicate.Achievement {
	return predicate.Achievement(sql.FieldNotNull(FieldSelfUnitsV1))
}

// TotalAmountEQ applies the EQ predicate on the "total_amount" field.
func TotalAmountEQ(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldTotalAmount, v))
}

// TotalAmountNEQ applies the NEQ predicate on the "total_amount" field.
func TotalAmountNEQ(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldNEQ(FieldTotalAmount, v))
}

// TotalAmountIn applies the In predicate on the "total_amount" field.
func TotalAmountIn(vs ...decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldIn(FieldTotalAmount, vs...))
}

// TotalAmountNotIn applies the NotIn predicate on the "total_amount" field.
func TotalAmountNotIn(vs ...decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldNotIn(FieldTotalAmount, vs...))
}

// TotalAmountGT applies the GT predicate on the "total_amount" field.
func TotalAmountGT(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldGT(FieldTotalAmount, v))
}

// TotalAmountGTE applies the GTE predicate on the "total_amount" field.
func TotalAmountGTE(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldGTE(FieldTotalAmount, v))
}

// TotalAmountLT applies the LT predicate on the "total_amount" field.
func TotalAmountLT(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldLT(FieldTotalAmount, v))
}

// TotalAmountLTE applies the LTE predicate on the "total_amount" field.
func TotalAmountLTE(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldLTE(FieldTotalAmount, v))
}

// TotalAmountIsNil applies the IsNil predicate on the "total_amount" field.
func TotalAmountIsNil() predicate.Achievement {
	return predicate.Achievement(sql.FieldIsNull(FieldTotalAmount))
}

// TotalAmountNotNil applies the NotNil predicate on the "total_amount" field.
func TotalAmountNotNil() predicate.Achievement {
	return predicate.Achievement(sql.FieldNotNull(FieldTotalAmount))
}

// SelfAmountEQ applies the EQ predicate on the "self_amount" field.
func SelfAmountEQ(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldSelfAmount, v))
}

// SelfAmountNEQ applies the NEQ predicate on the "self_amount" field.
func SelfAmountNEQ(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldNEQ(FieldSelfAmount, v))
}

// SelfAmountIn applies the In predicate on the "self_amount" field.
func SelfAmountIn(vs ...decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldIn(FieldSelfAmount, vs...))
}

// SelfAmountNotIn applies the NotIn predicate on the "self_amount" field.
func SelfAmountNotIn(vs ...decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldNotIn(FieldSelfAmount, vs...))
}

// SelfAmountGT applies the GT predicate on the "self_amount" field.
func SelfAmountGT(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldGT(FieldSelfAmount, v))
}

// SelfAmountGTE applies the GTE predicate on the "self_amount" field.
func SelfAmountGTE(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldGTE(FieldSelfAmount, v))
}

// SelfAmountLT applies the LT predicate on the "self_amount" field.
func SelfAmountLT(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldLT(FieldSelfAmount, v))
}

// SelfAmountLTE applies the LTE predicate on the "self_amount" field.
func SelfAmountLTE(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldLTE(FieldSelfAmount, v))
}

// SelfAmountIsNil applies the IsNil predicate on the "self_amount" field.
func SelfAmountIsNil() predicate.Achievement {
	return predicate.Achievement(sql.FieldIsNull(FieldSelfAmount))
}

// SelfAmountNotNil applies the NotNil predicate on the "self_amount" field.
func SelfAmountNotNil() predicate.Achievement {
	return predicate.Achievement(sql.FieldNotNull(FieldSelfAmount))
}

// TotalCommissionEQ applies the EQ predicate on the "total_commission" field.
func TotalCommissionEQ(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldTotalCommission, v))
}

// TotalCommissionNEQ applies the NEQ predicate on the "total_commission" field.
func TotalCommissionNEQ(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldNEQ(FieldTotalCommission, v))
}

// TotalCommissionIn applies the In predicate on the "total_commission" field.
func TotalCommissionIn(vs ...decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldIn(FieldTotalCommission, vs...))
}

// TotalCommissionNotIn applies the NotIn predicate on the "total_commission" field.
func TotalCommissionNotIn(vs ...decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldNotIn(FieldTotalCommission, vs...))
}

// TotalCommissionGT applies the GT predicate on the "total_commission" field.
func TotalCommissionGT(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldGT(FieldTotalCommission, v))
}

// TotalCommissionGTE applies the GTE predicate on the "total_commission" field.
func TotalCommissionGTE(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldGTE(FieldTotalCommission, v))
}

// TotalCommissionLT applies the LT predicate on the "total_commission" field.
func TotalCommissionLT(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldLT(FieldTotalCommission, v))
}

// TotalCommissionLTE applies the LTE predicate on the "total_commission" field.
func TotalCommissionLTE(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldLTE(FieldTotalCommission, v))
}

// TotalCommissionIsNil applies the IsNil predicate on the "total_commission" field.
func TotalCommissionIsNil() predicate.Achievement {
	return predicate.Achievement(sql.FieldIsNull(FieldTotalCommission))
}

// TotalCommissionNotNil applies the NotNil predicate on the "total_commission" field.
func TotalCommissionNotNil() predicate.Achievement {
	return predicate.Achievement(sql.FieldNotNull(FieldTotalCommission))
}

// SelfCommissionEQ applies the EQ predicate on the "self_commission" field.
func SelfCommissionEQ(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldEQ(FieldSelfCommission, v))
}

// SelfCommissionNEQ applies the NEQ predicate on the "self_commission" field.
func SelfCommissionNEQ(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldNEQ(FieldSelfCommission, v))
}

// SelfCommissionIn applies the In predicate on the "self_commission" field.
func SelfCommissionIn(vs ...decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldIn(FieldSelfCommission, vs...))
}

// SelfCommissionNotIn applies the NotIn predicate on the "self_commission" field.
func SelfCommissionNotIn(vs ...decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldNotIn(FieldSelfCommission, vs...))
}

// SelfCommissionGT applies the GT predicate on the "self_commission" field.
func SelfCommissionGT(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldGT(FieldSelfCommission, v))
}

// SelfCommissionGTE applies the GTE predicate on the "self_commission" field.
func SelfCommissionGTE(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldGTE(FieldSelfCommission, v))
}

// SelfCommissionLT applies the LT predicate on the "self_commission" field.
func SelfCommissionLT(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldLT(FieldSelfCommission, v))
}

// SelfCommissionLTE applies the LTE predicate on the "self_commission" field.
func SelfCommissionLTE(v decimal.Decimal) predicate.Achievement {
	return predicate.Achievement(sql.FieldLTE(FieldSelfCommission, v))
}

// SelfCommissionIsNil applies the IsNil predicate on the "self_commission" field.
func SelfCommissionIsNil() predicate.Achievement {
	return predicate.Achievement(sql.FieldIsNull(FieldSelfCommission))
}

// SelfCommissionNotNil applies the NotNil predicate on the "self_commission" field.
func SelfCommissionNotNil() predicate.Achievement {
	return predicate.Achievement(sql.FieldNotNull(FieldSelfCommission))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Achievement) predicate.Achievement {
	return predicate.Achievement(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Achievement) predicate.Achievement {
	return predicate.Achievement(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Achievement) predicate.Achievement {
	return predicate.Achievement(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package achievement

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the achievement type in the database.
	Label = "achievement"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldGoodID holds the string denoting the good_id field in the database.
	FieldGoodID = "good_id"
	// FieldAppGoodID holds the string denoting the app_good_id field in the database.
	FieldAppGoodID = "app_good_id"
	// FieldCoinTypeID holds the string denoting the coin_type_id field in the database.
	FieldCoinTypeID = "coin_type_id"
	// FieldTotalUnitsV1 holds the string denoting the total_units_v1 field in the database.
	FieldTotalUnitsV1 = "total_units_v1"
	// FieldSelfUnitsV1 holds the string denoting the self_units_v1 field in the database.
	FieldSelfUnitsV1 = "self_units_v1"
	// FieldTotalAmount holds the string denoting the total_amount field in the database.
	FieldTotalAmount = "total_amount"
	// FieldSelfAmount holds the string denoting the self_amount field in the database.
	FieldSelfAmount = "self_amount"
	// FieldTotalCommission holds the string denoting the total_commission field in the database.
	FieldTotalCommission = "total_commission"
	// FieldSelfCommission holds the string denoting the self_commission field in the database.
	FieldSelfCommission = "self_commission"
	// Table holds the table name of the achievement in the database.
	Table = "archivement_generals"
)

// Columns holds all SQL columns for achievement fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldEntID,
	FieldAppID,
	FieldUserID,
	FieldGoodID,
	FieldAppGoodID,
	FieldCoinTypeID,
	FieldTotalUnitsV1,
	FieldSelfUnitsV1,
	FieldTotalAmount,
	FieldSelfAmount,
	FieldTotalCommission,
	FieldSelfCommission,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() uint32
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() uint32
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() uint32
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt func() uint32
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultAppID holds the default value on creation for the "app_id" field.
	DefaultAppID func() uuid.UUID
	// DefaultUserID holds the default value on creation for the "user_id" field.
	DefaultUserID func() uuid.UUID
	// DefaultGoodID holds the default value on creation for the "good_id" field.
	DefaultGoodID func() uuid.UUID
	// DefaultAppGoodID holds the default value on creation for the "app_good_id" field.
	DefaultAppGoodID func() uuid.UUID
	// DefaultCoinTypeID holds the default value on creation for the "coin_type_id" field.
	DefaultCoinTypeID func() uuid.UUID
	// DefaultTotalUnitsV1 holds the default value on creation for the "total_units_v1" field.
	DefaultTotalUnitsV1 decimal.Decimal
	// DefaultSelfUnitsV1 holds the default value on creation for the "self_units_v1" field.
	DefaultSelfUnitsV1 decimal.Decimal
	// DefaultTotalAmount holds the default value on creation for the "total_amount" field.
	DefaultTotalAmount decimal.Decimal
	// DefaultSelfAmount holds the default value on creation for the "self_amount" field.
	DefaultSelfAmount decimal.Decimal
	// DefaultTotalCommission holds the default value on creation for the "total_commission" field.
	DefaultTotalCommission decimal.Decimal
	// DefaultSelfCommission holds the default value on creation for the "self_commission" field.
	DefaultSelfCommission decimal.Decimal
)

// OrderOption defines the ordering options for the Achievement queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByAppID orders the results by the app_id field.
func ByAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByGoodID orders the results by the good_id field.
func ByGoodID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodID, opts...).ToFunc()
}

// ByAppGoodID orders the results by the app_good_id field.
func ByAppGoodID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppGoodID, opts...).ToFunc()
}

// ByCoinTypeID orders the results by the coin_type_id field.
func ByCoinTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoinTypeID, opts...).ToFunc()
}

// ByTotalUnitsV1 orders the results by the total_units_v1 field.
func ByTotalUnitsV1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalUnitsV1, opts...).ToFunc()
}

// BySelfUnitsV1 orders the results by the self_units_v1 field.
func BySelfUnitsV1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSelfUnitsV1, opts...).ToFunc()
}

// ByTotalAmount orders the results by the total_amount field.
func ByTotalAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalAmount, opts...).ToFunc()
}

// BySelfAmount orders the results by the self_amount field.
func BySelfAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSelfAmount, opts...).ToFunc()
}

// ByTotalCommission orders the results by the total_commission field.
func ByTotalCommission(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalCommission, opts...).ToFunc()
}

// BySelfCommission orders the results by the self_commission field.
func BySelfCommission(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSelfCommission, opts...).ToFunc()
}

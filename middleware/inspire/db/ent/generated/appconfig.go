// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/appconfig"
	"github.com/google/uuid"
)

// AppConfig is the model entity for the AppConfig schema.
type AppConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// SettleMode holds the value of the "settle_mode" field.
	SettleMode string `json:"settle_mode,omitempty"`
	// SettleAmountType holds the value of the "settle_amount_type" field.
	SettleAmountType string `json:"settle_amount_type,omitempty"`
	// SettleInterval holds the value of the "settle_interval" field.
	SettleInterval string `json:"settle_interval,omitempty"`
	// CommissionType holds the value of the "commission_type" field.
	CommissionType string `json:"commission_type,omitempty"`
	// SettleBenefit holds the value of the "settle_benefit" field.
	SettleBenefit bool `json:"settle_benefit,omitempty"`
	// MaxLevel holds the value of the "max_level" field.
	MaxLevel uint32 `json:"max_level,omitempty"`
	// StartAt holds the value of the "start_at" field.
	StartAt uint32 `json:"start_at,omitempty"`
	// EndAt holds the value of the "end_at" field.
	EndAt        uint32 `json:"end_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appconfig.FieldSettleBenefit:
			values[i] = new(sql.NullBool)
		case appconfig.FieldID, appconfig.FieldCreatedAt, appconfig.FieldUpdatedAt, appconfig.FieldDeletedAt, appconfig.FieldMaxLevel, appconfig.FieldStartAt, appconfig.FieldEndAt:
			values[i] = new(sql.NullInt64)
		case appconfig.FieldSettleMode, appconfig.FieldSettleAmountType, appconfig.FieldSettleInterval, appconfig.FieldCommissionType:
			values[i] = new(sql.NullString)
		case appconfig.FieldEntID, appconfig.FieldAppID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppConfig fields.
func (ac *AppConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ac.ID = uint32(value.Int64)
		case appconfig.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ac.CreatedAt = uint32(value.Int64)
			}
		case appconfig.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ac.UpdatedAt = uint32(value.Int64)
			}
		case appconfig.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ac.DeletedAt = uint32(value.Int64)
			}
		case appconfig.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				ac.EntID = *value
			}
		case appconfig.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				ac.AppID = *value
			}
		case appconfig.FieldSettleMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field settle_mode", values[i])
			} else if value.Valid {
				ac.SettleMode = value.String
			}
		case appconfig.FieldSettleAmountType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field settle_amount_type", values[i])
			} else if value.Valid {
				ac.SettleAmountType = value.String
			}
		case appconfig.FieldSettleInterval:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field settle_interval", values[i])
			} else if value.Valid {
				ac.SettleInterval = value.String
			}
		case appconfig.FieldCommissionType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field commission_type", values[i])
			} else if value.Valid {
				ac.CommissionType = value.String
			}
		case appconfig.FieldSettleBenefit:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field settle_benefit", values[i])
			} else if value.Valid {
				ac.SettleBenefit = value.Bool
			}
		case appconfig.FieldMaxLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_level", values[i])
			} else if value.Valid {
				ac.MaxLevel = uint32(value.Int64)
			}
		case appconfig.FieldStartAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				ac.StartAt = uint32(value.Int64)
			}
		case appconfig.FieldEndAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				ac.EndAt = uint32(value.Int64)
			}
		default:
			ac.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppConfig.
// This includes values selected through modifiers, order, etc.
func (ac *AppConfig) Value(name string) (ent.Value, error) {
	return ac.selectValues.Get(name)
}

// Update returns a builder for updating this AppConfig.
// Note that you need to call AppConfig.Unwrap() before calling this method if this AppConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (ac *AppConfig) Update() *AppConfigUpdateOne {
	return NewAppConfigClient(ac.config).UpdateOne(ac)
}

// Unwrap unwraps the AppConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ac *AppConfig) Unwrap() *AppConfig {
	_tx, ok := ac.config.driver.(*txDriver)
	if !ok {
		panic("generated: AppConfig is not a transactional entity")
	}
	ac.config.driver = _tx.drv
	return ac
}

// String implements the fmt.Stringer.
func (ac *AppConfig) String() string {
	var builder strings.Builder
	builder.WriteString("AppConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ac.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", ac.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ac.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", ac.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", ac.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", ac.AppID))
	builder.WriteString(", ")
	builder.WriteString("settle_mode=")
	builder.WriteString(ac.SettleMode)
	builder.WriteString(", ")
	builder.WriteString("settle_amount_type=")
	builder.WriteString(ac.SettleAmountType)
	builder.WriteString(", ")
	builder.WriteString("settle_interval=")
	builder.WriteString(ac.SettleInterval)
	builder.WriteString(", ")
	builder.WriteString("commission_type=")
	builder.WriteString(ac.CommissionType)
	builder.WriteString(", ")
	builder.WriteString("settle_benefit=")
	builder.WriteString(fmt.Sprintf("%v", ac.SettleBenefit))
	builder.WriteString(", ")
	builder.WriteString("max_level=")
	builder.WriteString(fmt.Sprintf("%v", ac.MaxLevel))
	builder.WriteString(", ")
	builder.WriteString("start_at=")
	builder.WriteString(fmt.Sprintf("%v", ac.StartAt))
	builder.WriteString(", ")
	builder.WriteString("end_at=")
	builder.WriteString(fmt.Sprintf("%v", ac.EndAt))
	builder.WriteByte(')')
	return builder.String()
}

// AppConfigs is a parsable slice of AppConfig.
type AppConfigs []*AppConfig

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/achievementuser"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/predicate"
)

// AchievementUserDelete is the builder for deleting a AchievementUser entity.
type AchievementUserDelete struct {
	config
	hooks    []Hook
	mutation *AchievementUserMutation
}

// Where appends a list predicates to the AchievementUserDelete builder.
func (aud *AchievementUserDelete) Where(ps ...predicate.AchievementUser) *AchievementUserDelete {
	aud.mutation.Where(ps...)
	return aud
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (aud *AchievementUserDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, aud.sqlExec, aud.mutation, aud.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (aud *AchievementUserDelete) ExecX(ctx context.Context) int {
	n, err := aud.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (aud *AchievementUserDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(achievementuser.Table, sqlgraph.NewFieldSpec(achievementuser.FieldID, field.TypeUint32))
	if ps := aud.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, aud.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	aud.mutation.done = true
	return affected, err
}

// AchievementUserDeleteOne is the builder for deleting a single AchievementUser entity.
type AchievementUserDeleteOne struct {
	aud *AchievementUserDelete
}

// Where appends a list predicates to the AchievementUserDelete builder.
func (audo *AchievementUserDeleteOne) Where(ps ...predicate.AchievementUser) *AchievementUserDeleteOne {
	audo.aud.mutation.Where(ps...)
	return audo
}

// Exec executes the deletion query.
func (audo *AchievementUserDeleteOne) Exec(ctx context.Context) error {
	n, err := audo.aud.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{achievementuser.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (audo *AchievementUserDeleteOne) ExecX(ctx context.Context) {
	if err := audo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package event

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldDeletedAt, v))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldEntID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldAppID, v))
}

// EventType applies equality check predicate on the "event_type" field. It's identical to EventTypeEQ.
func EventType(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldEventType, v))
}

// Credits applies equality check predicate on the "credits" field. It's identical to CreditsEQ.
func Credits(v decimal.Decimal) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCredits, v))
}

// CreditsPerUsd applies equality check predicate on the "credits_per_usd" field. It's identical to CreditsPerUsdEQ.
func CreditsPerUsd(v decimal.Decimal) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCreditsPerUsd, v))
}

// MaxConsecutive applies equality check predicate on the "max_consecutive" field. It's identical to MaxConsecutiveEQ.
func MaxConsecutive(v uint32) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldMaxConsecutive, v))
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldGoodID, v))
}

// AppGoodID applies equality check predicate on the "app_good_id" field. It's identical to AppGoodIDEQ.
func AppGoodID(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldAppGoodID, v))
}

// InviterLayers applies equality check predicate on the "inviter_layers" field. It's identical to InviterLayersEQ.
func InviterLayers(v uint32) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldInviterLayers, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldEntID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldAppID, v))
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldAppID))
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldAppID))
}

// EventTypeEQ applies the EQ predicate on the "event_type" field.
func EventTypeEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldEventType, v))
}

// EventTypeNEQ applies the NEQ predicate on the "event_type" field.
func EventTypeNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldEventType, v))
}

// EventTypeIn applies the In predicate on the "event_type" field.
func EventTypeIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldEventType, vs...))
}

// EventTypeNotIn applies the NotIn predicate on the "event_type" field.
func EventTypeNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldEventType, vs...))
}

// EventTypeGT applies the GT predicate on the "event_type" field.
func EventTypeGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldEventType, v))
}

// EventTypeGTE applies the GTE predicate on the "event_type" field.
func EventTypeGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldEventType, v))
}

// EventTypeLT applies the LT predicate on the "event_type" field.
func EventTypeLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldEventType, v))
}

// EventTypeLTE applies the LTE predicate on the "event_type" field.
func EventTypeLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldEventType, v))
}

// EventTypeContains applies the Contains predicate on the "event_type" field.
func EventTypeContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldEventType, v))
}

// EventTypeHasPrefix applies the HasPrefix predicate on the "event_type" field.
func EventTypeHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldEventType, v))
}

// EventTypeHasSuffix applies the HasSuffix predicate on the "event_type" field.
func EventTypeHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldEventType, v))
}

// EventTypeIsNil applies the IsNil predicate on the "event_type" field.
func EventTypeIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldEventType))
}

// EventTypeNotNil applies the NotNil predicate on the "event_type" field.
func EventTypeNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldEventType))
}

// EventTypeEqualFold applies the EqualFold predicate on the "event_type" field.
func EventTypeEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldEventType, v))
}

// EventTypeContainsFold applies the ContainsFold predicate on the "event_type" field.
func EventTypeContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldEventType, v))
}

// CreditsEQ applies the EQ predicate on the "credits" field.
func CreditsEQ(v decimal.Decimal) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCredits, v))
}

// CreditsNEQ applies the NEQ predicate on the "credits" field.
func CreditsNEQ(v decimal.Decimal) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldCredits, v))
}

// CreditsIn applies the In predicate on the "credits" field.
func CreditsIn(vs ...decimal.Decimal) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldCredits, vs...))
}

// CreditsNotIn applies the NotIn predicate on the "credits" field.
func CreditsNotIn(vs ...decimal.Decimal) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldCredits, vs...))
}

// CreditsGT applies the GT predicate on the "credits" field.
func CreditsGT(v decimal.Decimal) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldCredits, v))
}

// CreditsGTE applies the GTE predicate on the "credits" field.
func CreditsGTE(v decimal.Decimal) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldCredits, v))
}

// CreditsLT applies the LT predicate on the "credits" field.
func CreditsLT(v decimal.Decimal) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldCredits, v))
}

// CreditsLTE applies the LTE predicate on the "credits" field.
func CreditsLTE(v decimal.Decimal) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldCredits, v))
}

// CreditsIsNil applies the IsNil predicate on the "credits" field.
func CreditsIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldCredits))
}

// CreditsNotNil applies the NotNil predicate on the "credits" field.
func CreditsNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldCredits))
}

// CreditsPerUsdEQ applies the EQ predicate on the "credits_per_usd" field.
func CreditsPerUsdEQ(v decimal.Decimal) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCreditsPerUsd, v))
}

// CreditsPerUsdNEQ applies the NEQ predicate on the "credits_per_usd" field.
func CreditsPerUsdNEQ(v decimal.Decimal) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldCreditsPerUsd, v))
}

// CreditsPerUsdIn applies the In predicate on the "credits_per_usd" field.
func CreditsPerUsdIn(vs ...decimal.Decimal) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldCreditsPerUsd, vs...))
}

// CreditsPerUsdNotIn applies the NotIn predicate on the "credits_per_usd" field.
func CreditsPerUsdNotIn(vs ...decimal.Decimal) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldCreditsPerUsd, vs...))
}

// CreditsPerUsdGT applies the GT predicate on the "credits_per_usd" field.
func CreditsPerUsdGT(v decimal.Decimal) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldCreditsPerUsd, v))
}

// CreditsPerUsdGTE applies the GTE predicate on the "credits_per_usd" field.
func CreditsPerUsdGTE(v decimal.Decimal) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldCreditsPerUsd, v))
}

// CreditsPerUsdLT applies the LT predicate on the "credits_per_usd" field.
func CreditsPerUsdLT(v decimal.Decimal) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldCreditsPerUsd, v))
}

// CreditsPerUsdLTE applies the LTE predicate on the "credits_per_usd" field.
func CreditsPerUsdLTE(v decimal.Decimal) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldCreditsPerUsd, v))
}

// CreditsPerUsdIsNil applies the IsNil predicate on the "credits_per_usd" field.
func CreditsPerUsdIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldCreditsPerUsd))
}

// CreditsPerUsdNotNil applies the NotNil predicate on the "credits_per_usd" field.
func CreditsPerUsdNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldCreditsPerUsd))
}

// MaxConsecutiveEQ applies the EQ predicate on the "max_consecutive" field.
func MaxConsecutiveEQ(v uint32) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldMaxConsecutive, v))
}

// MaxConsecutiveNEQ applies the NEQ predicate on the "max_consecutive" field.
func MaxConsecutiveNEQ(v uint32) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldMaxConsecutive, v))
}

// MaxConsecutiveIn applies the In predicate on the "max_consecutive" field.
func MaxConsecutiveIn(vs ...uint32) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldMaxConsecutive, vs...))
}

// MaxConsecutiveNotIn applies the NotIn predicate on the "max_consecutive" field.
func MaxConsecutiveNotIn(vs ...uint32) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldMaxConsecutive, vs...))
}

// MaxConsecutiveGT applies the GT predicate on the "max_consecutive" field.
func MaxConsecutiveGT(v uint32) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldMaxConsecutive, v))
}

// MaxConsecutiveGTE applies the GTE predicate on the "max_consecutive" field.
func MaxConsecutiveGTE(v uint32) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldMaxConsecutive, v))
}

// MaxConsecutiveLT applies the LT predicate on the "max_consecutive" field.
func MaxConsecutiveLT(v uint32) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldMaxConsecutive, v))
}

// MaxConsecutiveLTE applies the LTE predicate on the "max_consecutive" field.
func MaxConsecutiveLTE(v uint32) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldMaxConsecutive, v))
}

// MaxConsecutiveIsNil applies the IsNil predicate on the "max_consecutive" field.
func MaxConsecutiveIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldMaxConsecutive))
}

// MaxConsecutiveNotNil applies the NotNil predicate on the "max_consecutive" field.
func MaxConsecutiveNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldMaxConsecutive))
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldGoodID, v))
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldGoodID, v))
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldGoodID, vs...))
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldGoodID, vs...))
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldGoodID, v))
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldGoodID, v))
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldGoodID, v))
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldGoodID, v))
}

// GoodIDIsNil applies the IsNil predicate on the "good_id" field.
func GoodIDIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldGoodID))
}

// GoodIDNotNil applies the NotNil predicate on the "good_id" field.
func GoodIDNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldGoodID))
}

// AppGoodIDEQ applies the EQ predicate on the "app_good_id" field.
func AppGoodIDEQ(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldAppGoodID, v))
}

// AppGoodIDNEQ applies the NEQ predicate on the "app_good_id" field.
func AppGoodIDNEQ(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldAppGoodID, v))
}

// AppGoodIDIn applies the In predicate on the "app_good_id" field.
func AppGoodIDIn(vs ...uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldAppGoodID, vs...))
}

// AppGoodIDNotIn applies the NotIn predicate on the "app_good_id" field.
func AppGoodIDNotIn(vs ...uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldAppGoodID, vs...))
}

// AppGoodIDGT applies the GT predicate on the "app_good_id" field.
func AppGoodIDGT(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldAppGoodID, v))
}

// AppGoodIDGTE applies the GTE predicate on the "app_good_id" field.
func AppGoodIDGTE(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldAppGoodID, v))
}

// AppGoodIDLT applies the LT predicate on the "app_good_id" field.
func AppGoodIDLT(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldAppGoodID, v))
}

// AppGoodIDLTE applies the LTE predicate on the "app_good_id" field.
func AppGoodIDLTE(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldAppGoodID, v))
}

// AppGoodIDIsNil applies the IsNil predicate on the "app_good_id" field.
func AppGoodIDIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldAppGoodID))
}

// AppGoodIDNotNil applies the NotNil predicate on the "app_good_id" field.
func AppGoodIDNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldAppGoodID))
}

// InviterLayersEQ applies the EQ predicate on the "inviter_layers" field.
func InviterLayersEQ(v uint32) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldInviterLayers, v))
}

// InviterLayersNEQ applies the NEQ predicate on the "inviter_layers" field.
func InviterLayersNEQ(v uint32) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldInviterLayers, v))
}

// InviterLayersIn applies the In predicate on the "inviter_layers" field.
func InviterLayersIn(vs ...uint32) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldInviterLayers, vs...))
}

// InviterLayersNotIn applies the NotIn predicate on the "inviter_layers" field.
func InviterLayersNotIn(vs ...uint32) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldInviterLayers, vs...))
}

// InviterLayersGT applies the GT predicate on the "inviter_layers" field.
func InviterLayersGT(v uint32) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldInviterLayers, v))
}

// InviterLayersGTE applies the GTE predicate on the "inviter_layers" field.
func InviterLayersGTE(v uint32) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldInviterLayers, v))
}

// InviterLayersLT applies the LT predicate on the "inviter_layers" field.
func InviterLayersLT(v uint32) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldInviterLayers, v))
}

// InviterLayersLTE applies the LTE predicate on the "inviter_layers" field.
func InviterLayersLTE(v uint32) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldInviterLayers, v))
}

// InviterLayersIsNil applies the IsNil predicate on the "inviter_layers" field.
func InviterLayersIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldInviterLayers))
}

// InviterLayersNotNil applies the NotNil predicate on the "inviter_layers" field.
func InviterLayersNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldInviterLayers))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Event) predicate.Event {
	return predicate.Event(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Event) predicate.Event {
	return predicate.Event(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Event) predicate.Event {
	return predicate.Event(sql.NotPredicates(p))
}

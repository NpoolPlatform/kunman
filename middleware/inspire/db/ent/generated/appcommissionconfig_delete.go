// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/appcommissionconfig"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/predicate"
)

// AppCommissionConfigDelete is the builder for deleting a AppCommissionConfig entity.
type AppCommissionConfigDelete struct {
	config
	hooks    []Hook
	mutation *AppCommissionConfigMutation
}

// Where appends a list predicates to the AppCommissionConfigDelete builder.
func (accd *AppCommissionConfigDelete) Where(ps ...predicate.AppCommissionConfig) *AppCommissionConfigDelete {
	accd.mutation.Where(ps...)
	return accd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (accd *AppCommissionConfigDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, accd.sqlExec, accd.mutation, accd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (accd *AppCommissionConfigDelete) ExecX(ctx context.Context) int {
	n, err := accd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (accd *AppCommissionConfigDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(appcommissionconfig.Table, sqlgraph.NewFieldSpec(appcommissionconfig.FieldID, field.TypeUint32))
	if ps := accd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, accd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	accd.mutation.done = true
	return affected, err
}

// AppCommissionConfigDeleteOne is the builder for deleting a single AppCommissionConfig entity.
type AppCommissionConfigDeleteOne struct {
	accd *AppCommissionConfigDelete
}

// Where appends a list predicates to the AppCommissionConfigDelete builder.
func (accdo *AppCommissionConfigDeleteOne) Where(ps ...predicate.AppCommissionConfig) *AppCommissionConfigDeleteOne {
	accdo.accd.mutation.Where(ps...)
	return accdo
}

// Exec executes the deletion query.
func (accdo *AppCommissionConfigDeleteOne) Exec(ctx context.Context) error {
	n, err := accdo.accd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{appcommissionconfig.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (accdo *AppCommissionConfigDeleteOne) ExecX(ctx context.Context) {
	if err := accdo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/achievement"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/achievementuser"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/appcommissionconfig"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/appconfig"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/appgoodcommissionconfig"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/appgoodscope"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/cashcontrol"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/coinallocated"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/coinconfig"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/commission"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/coupon"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/couponallocated"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/couponscope"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/creditallocated"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/event"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/eventcoin"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/eventcoupon"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/goodachievement"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/goodcoinachievement"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/invitationcode"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/orderpaymentstatement"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/orderstatement"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/registration"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/statement"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/taskconfig"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/taskuser"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/usercoinreward"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/userreward"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 28)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   achievement.Table,
			Columns: achievement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: achievement.FieldID,
			},
		},
		Type: "Achievement",
		Fields: map[string]*sqlgraph.FieldSpec{
			achievement.FieldCreatedAt:       {Type: field.TypeUint32, Column: achievement.FieldCreatedAt},
			achievement.FieldUpdatedAt:       {Type: field.TypeUint32, Column: achievement.FieldUpdatedAt},
			achievement.FieldDeletedAt:       {Type: field.TypeUint32, Column: achievement.FieldDeletedAt},
			achievement.FieldEntID:           {Type: field.TypeUUID, Column: achievement.FieldEntID},
			achievement.FieldAppID:           {Type: field.TypeUUID, Column: achievement.FieldAppID},
			achievement.FieldUserID:          {Type: field.TypeUUID, Column: achievement.FieldUserID},
			achievement.FieldGoodID:          {Type: field.TypeUUID, Column: achievement.FieldGoodID},
			achievement.FieldAppGoodID:       {Type: field.TypeUUID, Column: achievement.FieldAppGoodID},
			achievement.FieldCoinTypeID:      {Type: field.TypeUUID, Column: achievement.FieldCoinTypeID},
			achievement.FieldTotalUnitsV1:    {Type: field.TypeOther, Column: achievement.FieldTotalUnitsV1},
			achievement.FieldSelfUnitsV1:     {Type: field.TypeOther, Column: achievement.FieldSelfUnitsV1},
			achievement.FieldTotalAmount:     {Type: field.TypeOther, Column: achievement.FieldTotalAmount},
			achievement.FieldSelfAmount:      {Type: field.TypeOther, Column: achievement.FieldSelfAmount},
			achievement.FieldTotalCommission: {Type: field.TypeOther, Column: achievement.FieldTotalCommission},
			achievement.FieldSelfCommission:  {Type: field.TypeOther, Column: achievement.FieldSelfCommission},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   achievementuser.Table,
			Columns: achievementuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: achievementuser.FieldID,
			},
		},
		Type: "AchievementUser",
		Fields: map[string]*sqlgraph.FieldSpec{
			achievementuser.FieldCreatedAt:            {Type: field.TypeUint32, Column: achievementuser.FieldCreatedAt},
			achievementuser.FieldUpdatedAt:            {Type: field.TypeUint32, Column: achievementuser.FieldUpdatedAt},
			achievementuser.FieldDeletedAt:            {Type: field.TypeUint32, Column: achievementuser.FieldDeletedAt},
			achievementuser.FieldEntID:                {Type: field.TypeUUID, Column: achievementuser.FieldEntID},
			achievementuser.FieldAppID:                {Type: field.TypeUUID, Column: achievementuser.FieldAppID},
			achievementuser.FieldUserID:               {Type: field.TypeUUID, Column: achievementuser.FieldUserID},
			achievementuser.FieldTotalCommission:      {Type: field.TypeOther, Column: achievementuser.FieldTotalCommission},
			achievementuser.FieldSelfCommission:       {Type: field.TypeOther, Column: achievementuser.FieldSelfCommission},
			achievementuser.FieldDirectConsumeAmount:  {Type: field.TypeOther, Column: achievementuser.FieldDirectConsumeAmount},
			achievementuser.FieldInviteeConsumeAmount: {Type: field.TypeOther, Column: achievementuser.FieldInviteeConsumeAmount},
			achievementuser.FieldDirectInvitees:       {Type: field.TypeUint32, Column: achievementuser.FieldDirectInvitees},
			achievementuser.FieldIndirectInvitees:     {Type: field.TypeUint32, Column: achievementuser.FieldIndirectInvitees},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appcommissionconfig.Table,
			Columns: appcommissionconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appcommissionconfig.FieldID,
			},
		},
		Type: "AppCommissionConfig",
		Fields: map[string]*sqlgraph.FieldSpec{
			appcommissionconfig.FieldCreatedAt:       {Type: field.TypeUint32, Column: appcommissionconfig.FieldCreatedAt},
			appcommissionconfig.FieldUpdatedAt:       {Type: field.TypeUint32, Column: appcommissionconfig.FieldUpdatedAt},
			appcommissionconfig.FieldDeletedAt:       {Type: field.TypeUint32, Column: appcommissionconfig.FieldDeletedAt},
			appcommissionconfig.FieldEntID:           {Type: field.TypeUUID, Column: appcommissionconfig.FieldEntID},
			appcommissionconfig.FieldAppID:           {Type: field.TypeUUID, Column: appcommissionconfig.FieldAppID},
			appcommissionconfig.FieldLevel:           {Type: field.TypeUint32, Column: appcommissionconfig.FieldLevel},
			appcommissionconfig.FieldThresholdAmount: {Type: field.TypeOther, Column: appcommissionconfig.FieldThresholdAmount},
			appcommissionconfig.FieldAmountOrPercent: {Type: field.TypeOther, Column: appcommissionconfig.FieldAmountOrPercent},
			appcommissionconfig.FieldStartAt:         {Type: field.TypeUint32, Column: appcommissionconfig.FieldStartAt},
			appcommissionconfig.FieldEndAt:           {Type: field.TypeUint32, Column: appcommissionconfig.FieldEndAt},
			appcommissionconfig.FieldInvites:         {Type: field.TypeUint32, Column: appcommissionconfig.FieldInvites},
			appcommissionconfig.FieldSettleType:      {Type: field.TypeString, Column: appcommissionconfig.FieldSettleType},
			appcommissionconfig.FieldDisabled:        {Type: field.TypeBool, Column: appcommissionconfig.FieldDisabled},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appconfig.Table,
			Columns: appconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appconfig.FieldID,
			},
		},
		Type: "AppConfig",
		Fields: map[string]*sqlgraph.FieldSpec{
			appconfig.FieldCreatedAt:        {Type: field.TypeUint32, Column: appconfig.FieldCreatedAt},
			appconfig.FieldUpdatedAt:        {Type: field.TypeUint32, Column: appconfig.FieldUpdatedAt},
			appconfig.FieldDeletedAt:        {Type: field.TypeUint32, Column: appconfig.FieldDeletedAt},
			appconfig.FieldEntID:            {Type: field.TypeUUID, Column: appconfig.FieldEntID},
			appconfig.FieldAppID:            {Type: field.TypeUUID, Column: appconfig.FieldAppID},
			appconfig.FieldSettleMode:       {Type: field.TypeString, Column: appconfig.FieldSettleMode},
			appconfig.FieldSettleAmountType: {Type: field.TypeString, Column: appconfig.FieldSettleAmountType},
			appconfig.FieldSettleInterval:   {Type: field.TypeString, Column: appconfig.FieldSettleInterval},
			appconfig.FieldCommissionType:   {Type: field.TypeString, Column: appconfig.FieldCommissionType},
			appconfig.FieldSettleBenefit:    {Type: field.TypeBool, Column: appconfig.FieldSettleBenefit},
			appconfig.FieldMaxLevel:         {Type: field.TypeUint32, Column: appconfig.FieldMaxLevel},
			appconfig.FieldStartAt:          {Type: field.TypeUint32, Column: appconfig.FieldStartAt},
			appconfig.FieldEndAt:            {Type: field.TypeUint32, Column: appconfig.FieldEndAt},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appgoodcommissionconfig.Table,
			Columns: appgoodcommissionconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appgoodcommissionconfig.FieldID,
			},
		},
		Type: "AppGoodCommissionConfig",
		Fields: map[string]*sqlgraph.FieldSpec{
			appgoodcommissionconfig.FieldCreatedAt:       {Type: field.TypeUint32, Column: appgoodcommissionconfig.FieldCreatedAt},
			appgoodcommissionconfig.FieldUpdatedAt:       {Type: field.TypeUint32, Column: appgoodcommissionconfig.FieldUpdatedAt},
			appgoodcommissionconfig.FieldDeletedAt:       {Type: field.TypeUint32, Column: appgoodcommissionconfig.FieldDeletedAt},
			appgoodcommissionconfig.FieldEntID:           {Type: field.TypeUUID, Column: appgoodcommissionconfig.FieldEntID},
			appgoodcommissionconfig.FieldAppID:           {Type: field.TypeUUID, Column: appgoodcommissionconfig.FieldAppID},
			appgoodcommissionconfig.FieldGoodID:          {Type: field.TypeUUID, Column: appgoodcommissionconfig.FieldGoodID},
			appgoodcommissionconfig.FieldAppGoodID:       {Type: field.TypeUUID, Column: appgoodcommissionconfig.FieldAppGoodID},
			appgoodcommissionconfig.FieldLevel:           {Type: field.TypeUint32, Column: appgoodcommissionconfig.FieldLevel},
			appgoodcommissionconfig.FieldThresholdAmount: {Type: field.TypeOther, Column: appgoodcommissionconfig.FieldThresholdAmount},
			appgoodcommissionconfig.FieldAmountOrPercent: {Type: field.TypeOther, Column: appgoodcommissionconfig.FieldAmountOrPercent},
			appgoodcommissionconfig.FieldStartAt:         {Type: field.TypeUint32, Column: appgoodcommissionconfig.FieldStartAt},
			appgoodcommissionconfig.FieldEndAt:           {Type: field.TypeUint32, Column: appgoodcommissionconfig.FieldEndAt},
			appgoodcommissionconfig.FieldInvites:         {Type: field.TypeUint32, Column: appgoodcommissionconfig.FieldInvites},
			appgoodcommissionconfig.FieldSettleType:      {Type: field.TypeString, Column: appgoodcommissionconfig.FieldSettleType},
			appgoodcommissionconfig.FieldDisabled:        {Type: field.TypeBool, Column: appgoodcommissionconfig.FieldDisabled},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appgoodscope.Table,
			Columns: appgoodscope.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appgoodscope.FieldID,
			},
		},
		Type: "AppGoodScope",
		Fields: map[string]*sqlgraph.FieldSpec{
			appgoodscope.FieldCreatedAt:   {Type: field.TypeUint32, Column: appgoodscope.FieldCreatedAt},
			appgoodscope.FieldUpdatedAt:   {Type: field.TypeUint32, Column: appgoodscope.FieldUpdatedAt},
			appgoodscope.FieldDeletedAt:   {Type: field.TypeUint32, Column: appgoodscope.FieldDeletedAt},
			appgoodscope.FieldEntID:       {Type: field.TypeUUID, Column: appgoodscope.FieldEntID},
			appgoodscope.FieldAppID:       {Type: field.TypeUUID, Column: appgoodscope.FieldAppID},
			appgoodscope.FieldAppGoodID:   {Type: field.TypeUUID, Column: appgoodscope.FieldAppGoodID},
			appgoodscope.FieldCouponID:    {Type: field.TypeUUID, Column: appgoodscope.FieldCouponID},
			appgoodscope.FieldCouponScope: {Type: field.TypeString, Column: appgoodscope.FieldCouponScope},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   cashcontrol.Table,
			Columns: cashcontrol.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: cashcontrol.FieldID,
			},
		},
		Type: "CashControl",
		Fields: map[string]*sqlgraph.FieldSpec{
			cashcontrol.FieldCreatedAt:   {Type: field.TypeUint32, Column: cashcontrol.FieldCreatedAt},
			cashcontrol.FieldUpdatedAt:   {Type: field.TypeUint32, Column: cashcontrol.FieldUpdatedAt},
			cashcontrol.FieldDeletedAt:   {Type: field.TypeUint32, Column: cashcontrol.FieldDeletedAt},
			cashcontrol.FieldEntID:       {Type: field.TypeUUID, Column: cashcontrol.FieldEntID},
			cashcontrol.FieldAppID:       {Type: field.TypeUUID, Column: cashcontrol.FieldAppID},
			cashcontrol.FieldCouponID:    {Type: field.TypeUUID, Column: cashcontrol.FieldCouponID},
			cashcontrol.FieldControlType: {Type: field.TypeString, Column: cashcontrol.FieldControlType},
			cashcontrol.FieldValue:       {Type: field.TypeOther, Column: cashcontrol.FieldValue},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   coinallocated.Table,
			Columns: coinallocated.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: coinallocated.FieldID,
			},
		},
		Type: "CoinAllocated",
		Fields: map[string]*sqlgraph.FieldSpec{
			coinallocated.FieldCreatedAt:    {Type: field.TypeUint32, Column: coinallocated.FieldCreatedAt},
			coinallocated.FieldUpdatedAt:    {Type: field.TypeUint32, Column: coinallocated.FieldUpdatedAt},
			coinallocated.FieldDeletedAt:    {Type: field.TypeUint32, Column: coinallocated.FieldDeletedAt},
			coinallocated.FieldEntID:        {Type: field.TypeUUID, Column: coinallocated.FieldEntID},
			coinallocated.FieldAppID:        {Type: field.TypeUUID, Column: coinallocated.FieldAppID},
			coinallocated.FieldCoinConfigID: {Type: field.TypeUUID, Column: coinallocated.FieldCoinConfigID},
			coinallocated.FieldCoinTypeID:   {Type: field.TypeUUID, Column: coinallocated.FieldCoinTypeID},
			coinallocated.FieldUserID:       {Type: field.TypeUUID, Column: coinallocated.FieldUserID},
			coinallocated.FieldValue:        {Type: field.TypeOther, Column: coinallocated.FieldValue},
			coinallocated.FieldExtra:        {Type: field.TypeString, Column: coinallocated.FieldExtra},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   coinconfig.Table,
			Columns: coinconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: coinconfig.FieldID,
			},
		},
		Type: "CoinConfig",
		Fields: map[string]*sqlgraph.FieldSpec{
			coinconfig.FieldCreatedAt:  {Type: field.TypeUint32, Column: coinconfig.FieldCreatedAt},
			coinconfig.FieldUpdatedAt:  {Type: field.TypeUint32, Column: coinconfig.FieldUpdatedAt},
			coinconfig.FieldDeletedAt:  {Type: field.TypeUint32, Column: coinconfig.FieldDeletedAt},
			coinconfig.FieldEntID:      {Type: field.TypeUUID, Column: coinconfig.FieldEntID},
			coinconfig.FieldAppID:      {Type: field.TypeUUID, Column: coinconfig.FieldAppID},
			coinconfig.FieldCoinTypeID: {Type: field.TypeUUID, Column: coinconfig.FieldCoinTypeID},
			coinconfig.FieldMaxValue:   {Type: field.TypeOther, Column: coinconfig.FieldMaxValue},
			coinconfig.FieldAllocated:  {Type: field.TypeOther, Column: coinconfig.FieldAllocated},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   commission.Table,
			Columns: commission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: commission.FieldID,
			},
		},
		Type: "Commission",
		Fields: map[string]*sqlgraph.FieldSpec{
			commission.FieldCreatedAt:        {Type: field.TypeUint32, Column: commission.FieldCreatedAt},
			commission.FieldUpdatedAt:        {Type: field.TypeUint32, Column: commission.FieldUpdatedAt},
			commission.FieldDeletedAt:        {Type: field.TypeUint32, Column: commission.FieldDeletedAt},
			commission.FieldEntID:            {Type: field.TypeUUID, Column: commission.FieldEntID},
			commission.FieldAppID:            {Type: field.TypeUUID, Column: commission.FieldAppID},
			commission.FieldUserID:           {Type: field.TypeUUID, Column: commission.FieldUserID},
			commission.FieldGoodID:           {Type: field.TypeUUID, Column: commission.FieldGoodID},
			commission.FieldAppGoodID:        {Type: field.TypeUUID, Column: commission.FieldAppGoodID},
			commission.FieldAmountOrPercent:  {Type: field.TypeOther, Column: commission.FieldAmountOrPercent},
			commission.FieldStartAt:          {Type: field.TypeUint32, Column: commission.FieldStartAt},
			commission.FieldEndAt:            {Type: field.TypeUint32, Column: commission.FieldEndAt},
			commission.FieldSettleType:       {Type: field.TypeString, Column: commission.FieldSettleType},
			commission.FieldSettleMode:       {Type: field.TypeString, Column: commission.FieldSettleMode},
			commission.FieldSettleInterval:   {Type: field.TypeString, Column: commission.FieldSettleInterval},
			commission.FieldSettleAmountType: {Type: field.TypeString, Column: commission.FieldSettleAmountType},
			commission.FieldThreshold:        {Type: field.TypeOther, Column: commission.FieldThreshold},
			commission.FieldOrderLimit:       {Type: field.TypeUint32, Column: commission.FieldOrderLimit},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   coupon.Table,
			Columns: coupon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: coupon.FieldID,
			},
		},
		Type: "Coupon",
		Fields: map[string]*sqlgraph.FieldSpec{
			coupon.FieldCreatedAt:           {Type: field.TypeUint32, Column: coupon.FieldCreatedAt},
			coupon.FieldUpdatedAt:           {Type: field.TypeUint32, Column: coupon.FieldUpdatedAt},
			coupon.FieldDeletedAt:           {Type: field.TypeUint32, Column: coupon.FieldDeletedAt},
			coupon.FieldEntID:               {Type: field.TypeUUID, Column: coupon.FieldEntID},
			coupon.FieldAppID:               {Type: field.TypeUUID, Column: coupon.FieldAppID},
			coupon.FieldDenomination:        {Type: field.TypeOther, Column: coupon.FieldDenomination},
			coupon.FieldCirculation:         {Type: field.TypeOther, Column: coupon.FieldCirculation},
			coupon.FieldRandom:              {Type: field.TypeBool, Column: coupon.FieldRandom},
			coupon.FieldIssuedBy:            {Type: field.TypeUUID, Column: coupon.FieldIssuedBy},
			coupon.FieldStartAt:             {Type: field.TypeUint32, Column: coupon.FieldStartAt},
			coupon.FieldEndAt:               {Type: field.TypeUint32, Column: coupon.FieldEndAt},
			coupon.FieldDurationDays:        {Type: field.TypeUint32, Column: coupon.FieldDurationDays},
			coupon.FieldMessage:             {Type: field.TypeString, Column: coupon.FieldMessage},
			coupon.FieldName:                {Type: field.TypeString, Column: coupon.FieldName},
			coupon.FieldAllocated:           {Type: field.TypeOther, Column: coupon.FieldAllocated},
			coupon.FieldCouponType:          {Type: field.TypeString, Column: coupon.FieldCouponType},
			coupon.FieldThreshold:           {Type: field.TypeOther, Column: coupon.FieldThreshold},
			coupon.FieldCouponConstraint:    {Type: field.TypeString, Column: coupon.FieldCouponConstraint},
			coupon.FieldCouponScope:         {Type: field.TypeString, Column: coupon.FieldCouponScope},
			coupon.FieldCashableProbability: {Type: field.TypeOther, Column: coupon.FieldCashableProbability},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   couponallocated.Table,
			Columns: couponallocated.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: couponallocated.FieldID,
			},
		},
		Type: "CouponAllocated",
		Fields: map[string]*sqlgraph.FieldSpec{
			couponallocated.FieldCreatedAt:     {Type: field.TypeUint32, Column: couponallocated.FieldCreatedAt},
			couponallocated.FieldUpdatedAt:     {Type: field.TypeUint32, Column: couponallocated.FieldUpdatedAt},
			couponallocated.FieldDeletedAt:     {Type: field.TypeUint32, Column: couponallocated.FieldDeletedAt},
			couponallocated.FieldEntID:         {Type: field.TypeUUID, Column: couponallocated.FieldEntID},
			couponallocated.FieldAppID:         {Type: field.TypeUUID, Column: couponallocated.FieldAppID},
			couponallocated.FieldUserID:        {Type: field.TypeUUID, Column: couponallocated.FieldUserID},
			couponallocated.FieldCouponID:      {Type: field.TypeUUID, Column: couponallocated.FieldCouponID},
			couponallocated.FieldDenomination:  {Type: field.TypeOther, Column: couponallocated.FieldDenomination},
			couponallocated.FieldUsed:          {Type: field.TypeBool, Column: couponallocated.FieldUsed},
			couponallocated.FieldUsedAt:        {Type: field.TypeUint32, Column: couponallocated.FieldUsedAt},
			couponallocated.FieldUsedByOrderID: {Type: field.TypeUUID, Column: couponallocated.FieldUsedByOrderID},
			couponallocated.FieldStartAt:       {Type: field.TypeUint32, Column: couponallocated.FieldStartAt},
			couponallocated.FieldCouponScope:   {Type: field.TypeString, Column: couponallocated.FieldCouponScope},
			couponallocated.FieldCashable:      {Type: field.TypeBool, Column: couponallocated.FieldCashable},
			couponallocated.FieldExtra:         {Type: field.TypeString, Column: couponallocated.FieldExtra},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   couponscope.Table,
			Columns: couponscope.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: couponscope.FieldID,
			},
		},
		Type: "CouponScope",
		Fields: map[string]*sqlgraph.FieldSpec{
			couponscope.FieldCreatedAt:   {Type: field.TypeUint32, Column: couponscope.FieldCreatedAt},
			couponscope.FieldUpdatedAt:   {Type: field.TypeUint32, Column: couponscope.FieldUpdatedAt},
			couponscope.FieldDeletedAt:   {Type: field.TypeUint32, Column: couponscope.FieldDeletedAt},
			couponscope.FieldEntID:       {Type: field.TypeUUID, Column: couponscope.FieldEntID},
			couponscope.FieldCouponID:    {Type: field.TypeUUID, Column: couponscope.FieldCouponID},
			couponscope.FieldGoodID:      {Type: field.TypeUUID, Column: couponscope.FieldGoodID},
			couponscope.FieldCouponScope: {Type: field.TypeString, Column: couponscope.FieldCouponScope},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   creditallocated.Table,
			Columns: creditallocated.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: creditallocated.FieldID,
			},
		},
		Type: "CreditAllocated",
		Fields: map[string]*sqlgraph.FieldSpec{
			creditallocated.FieldCreatedAt: {Type: field.TypeUint32, Column: creditallocated.FieldCreatedAt},
			creditallocated.FieldUpdatedAt: {Type: field.TypeUint32, Column: creditallocated.FieldUpdatedAt},
			creditallocated.FieldDeletedAt: {Type: field.TypeUint32, Column: creditallocated.FieldDeletedAt},
			creditallocated.FieldEntID:     {Type: field.TypeUUID, Column: creditallocated.FieldEntID},
			creditallocated.FieldAppID:     {Type: field.TypeUUID, Column: creditallocated.FieldAppID},
			creditallocated.FieldUserID:    {Type: field.TypeUUID, Column: creditallocated.FieldUserID},
			creditallocated.FieldValue:     {Type: field.TypeOther, Column: creditallocated.FieldValue},
			creditallocated.FieldExtra:     {Type: field.TypeString, Column: creditallocated.FieldExtra},
		},
	}
	graph.Nodes[14] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: event.FieldID,
			},
		},
		Type: "Event",
		Fields: map[string]*sqlgraph.FieldSpec{
			event.FieldCreatedAt:      {Type: field.TypeUint32, Column: event.FieldCreatedAt},
			event.FieldUpdatedAt:      {Type: field.TypeUint32, Column: event.FieldUpdatedAt},
			event.FieldDeletedAt:      {Type: field.TypeUint32, Column: event.FieldDeletedAt},
			event.FieldEntID:          {Type: field.TypeUUID, Column: event.FieldEntID},
			event.FieldAppID:          {Type: field.TypeUUID, Column: event.FieldAppID},
			event.FieldEventType:      {Type: field.TypeString, Column: event.FieldEventType},
			event.FieldCredits:        {Type: field.TypeOther, Column: event.FieldCredits},
			event.FieldCreditsPerUsd:  {Type: field.TypeOther, Column: event.FieldCreditsPerUsd},
			event.FieldMaxConsecutive: {Type: field.TypeUint32, Column: event.FieldMaxConsecutive},
			event.FieldGoodID:         {Type: field.TypeUUID, Column: event.FieldGoodID},
			event.FieldAppGoodID:      {Type: field.TypeUUID, Column: event.FieldAppGoodID},
			event.FieldInviterLayers:  {Type: field.TypeUint32, Column: event.FieldInviterLayers},
		},
	}
	graph.Nodes[15] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   eventcoin.Table,
			Columns: eventcoin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: eventcoin.FieldID,
			},
		},
		Type: "EventCoin",
		Fields: map[string]*sqlgraph.FieldSpec{
			eventcoin.FieldCreatedAt:    {Type: field.TypeUint32, Column: eventcoin.FieldCreatedAt},
			eventcoin.FieldUpdatedAt:    {Type: field.TypeUint32, Column: eventcoin.FieldUpdatedAt},
			eventcoin.FieldDeletedAt:    {Type: field.TypeUint32, Column: eventcoin.FieldDeletedAt},
			eventcoin.FieldEntID:        {Type: field.TypeUUID, Column: eventcoin.FieldEntID},
			eventcoin.FieldAppID:        {Type: field.TypeUUID, Column: eventcoin.FieldAppID},
			eventcoin.FieldEventID:      {Type: field.TypeUUID, Column: eventcoin.FieldEventID},
			eventcoin.FieldCoinConfigID: {Type: field.TypeUUID, Column: eventcoin.FieldCoinConfigID},
			eventcoin.FieldCoinValue:    {Type: field.TypeOther, Column: eventcoin.FieldCoinValue},
			eventcoin.FieldCoinPerUsd:   {Type: field.TypeOther, Column: eventcoin.FieldCoinPerUsd},
		},
	}
	graph.Nodes[16] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   eventcoupon.Table,
			Columns: eventcoupon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: eventcoupon.FieldID,
			},
		},
		Type: "EventCoupon",
		Fields: map[string]*sqlgraph.FieldSpec{
			eventcoupon.FieldCreatedAt: {Type: field.TypeUint32, Column: eventcoupon.FieldCreatedAt},
			eventcoupon.FieldUpdatedAt: {Type: field.TypeUint32, Column: eventcoupon.FieldUpdatedAt},
			eventcoupon.FieldDeletedAt: {Type: field.TypeUint32, Column: eventcoupon.FieldDeletedAt},
			eventcoupon.FieldEntID:     {Type: field.TypeUUID, Column: eventcoupon.FieldEntID},
			eventcoupon.FieldAppID:     {Type: field.TypeUUID, Column: eventcoupon.FieldAppID},
			eventcoupon.FieldEventID:   {Type: field.TypeUUID, Column: eventcoupon.FieldEventID},
			eventcoupon.FieldCouponID:  {Type: field.TypeUUID, Column: eventcoupon.FieldCouponID},
		},
	}
	graph.Nodes[17] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   goodachievement.Table,
			Columns: goodachievement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: goodachievement.FieldID,
			},
		},
		Type: "GoodAchievement",
		Fields: map[string]*sqlgraph.FieldSpec{
			goodachievement.FieldCreatedAt:          {Type: field.TypeUint32, Column: goodachievement.FieldCreatedAt},
			goodachievement.FieldUpdatedAt:          {Type: field.TypeUint32, Column: goodachievement.FieldUpdatedAt},
			goodachievement.FieldDeletedAt:          {Type: field.TypeUint32, Column: goodachievement.FieldDeletedAt},
			goodachievement.FieldEntID:              {Type: field.TypeUUID, Column: goodachievement.FieldEntID},
			goodachievement.FieldAppID:              {Type: field.TypeUUID, Column: goodachievement.FieldAppID},
			goodachievement.FieldUserID:             {Type: field.TypeUUID, Column: goodachievement.FieldUserID},
			goodachievement.FieldGoodID:             {Type: field.TypeUUID, Column: goodachievement.FieldGoodID},
			goodachievement.FieldAppGoodID:          {Type: field.TypeUUID, Column: goodachievement.FieldAppGoodID},
			goodachievement.FieldTotalUnits:         {Type: field.TypeOther, Column: goodachievement.FieldTotalUnits},
			goodachievement.FieldSelfUnits:          {Type: field.TypeOther, Column: goodachievement.FieldSelfUnits},
			goodachievement.FieldTotalAmountUsd:     {Type: field.TypeOther, Column: goodachievement.FieldTotalAmountUsd},
			goodachievement.FieldSelfAmountUsd:      {Type: field.TypeOther, Column: goodachievement.FieldSelfAmountUsd},
			goodachievement.FieldTotalCommissionUsd: {Type: field.TypeOther, Column: goodachievement.FieldTotalCommissionUsd},
			goodachievement.FieldSelfCommissionUsd:  {Type: field.TypeOther, Column: goodachievement.FieldSelfCommissionUsd},
		},
	}
	graph.Nodes[18] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   goodcoinachievement.Table,
			Columns: goodcoinachievement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: goodcoinachievement.FieldID,
			},
		},
		Type: "GoodCoinAchievement",
		Fields: map[string]*sqlgraph.FieldSpec{
			goodcoinachievement.FieldCreatedAt:          {Type: field.TypeUint32, Column: goodcoinachievement.FieldCreatedAt},
			goodcoinachievement.FieldUpdatedAt:          {Type: field.TypeUint32, Column: goodcoinachievement.FieldUpdatedAt},
			goodcoinachievement.FieldDeletedAt:          {Type: field.TypeUint32, Column: goodcoinachievement.FieldDeletedAt},
			goodcoinachievement.FieldEntID:              {Type: field.TypeUUID, Column: goodcoinachievement.FieldEntID},
			goodcoinachievement.FieldAppID:              {Type: field.TypeUUID, Column: goodcoinachievement.FieldAppID},
			goodcoinachievement.FieldUserID:             {Type: field.TypeUUID, Column: goodcoinachievement.FieldUserID},
			goodcoinachievement.FieldGoodCoinTypeID:     {Type: field.TypeUUID, Column: goodcoinachievement.FieldGoodCoinTypeID},
			goodcoinachievement.FieldTotalUnits:         {Type: field.TypeOther, Column: goodcoinachievement.FieldTotalUnits},
			goodcoinachievement.FieldSelfUnits:          {Type: field.TypeOther, Column: goodcoinachievement.FieldSelfUnits},
			goodcoinachievement.FieldTotalAmountUsd:     {Type: field.TypeOther, Column: goodcoinachievement.FieldTotalAmountUsd},
			goodcoinachievement.FieldSelfAmountUsd:      {Type: field.TypeOther, Column: goodcoinachievement.FieldSelfAmountUsd},
			goodcoinachievement.FieldTotalCommissionUsd: {Type: field.TypeOther, Column: goodcoinachievement.FieldTotalCommissionUsd},
			goodcoinachievement.FieldSelfCommissionUsd:  {Type: field.TypeOther, Column: goodcoinachievement.FieldSelfCommissionUsd},
		},
	}
	graph.Nodes[19] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   invitationcode.Table,
			Columns: invitationcode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: invitationcode.FieldID,
			},
		},
		Type: "InvitationCode",
		Fields: map[string]*sqlgraph.FieldSpec{
			invitationcode.FieldCreatedAt:      {Type: field.TypeUint32, Column: invitationcode.FieldCreatedAt},
			invitationcode.FieldUpdatedAt:      {Type: field.TypeUint32, Column: invitationcode.FieldUpdatedAt},
			invitationcode.FieldDeletedAt:      {Type: field.TypeUint32, Column: invitationcode.FieldDeletedAt},
			invitationcode.FieldEntID:          {Type: field.TypeUUID, Column: invitationcode.FieldEntID},
			invitationcode.FieldAppID:          {Type: field.TypeUUID, Column: invitationcode.FieldAppID},
			invitationcode.FieldUserID:         {Type: field.TypeUUID, Column: invitationcode.FieldUserID},
			invitationcode.FieldInvitationCode: {Type: field.TypeString, Column: invitationcode.FieldInvitationCode},
			invitationcode.FieldDisabled:       {Type: field.TypeBool, Column: invitationcode.FieldDisabled},
		},
	}
	graph.Nodes[20] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orderpaymentstatement.Table,
			Columns: orderpaymentstatement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: orderpaymentstatement.FieldID,
			},
		},
		Type: "OrderPaymentStatement",
		Fields: map[string]*sqlgraph.FieldSpec{
			orderpaymentstatement.FieldCreatedAt:         {Type: field.TypeUint32, Column: orderpaymentstatement.FieldCreatedAt},
			orderpaymentstatement.FieldUpdatedAt:         {Type: field.TypeUint32, Column: orderpaymentstatement.FieldUpdatedAt},
			orderpaymentstatement.FieldDeletedAt:         {Type: field.TypeUint32, Column: orderpaymentstatement.FieldDeletedAt},
			orderpaymentstatement.FieldEntID:             {Type: field.TypeUUID, Column: orderpaymentstatement.FieldEntID},
			orderpaymentstatement.FieldStatementID:       {Type: field.TypeUUID, Column: orderpaymentstatement.FieldStatementID},
			orderpaymentstatement.FieldPaymentCoinTypeID: {Type: field.TypeUUID, Column: orderpaymentstatement.FieldPaymentCoinTypeID},
			orderpaymentstatement.FieldAmount:            {Type: field.TypeOther, Column: orderpaymentstatement.FieldAmount},
			orderpaymentstatement.FieldCommissionAmount:  {Type: field.TypeOther, Column: orderpaymentstatement.FieldCommissionAmount},
		},
	}
	graph.Nodes[21] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orderstatement.Table,
			Columns: orderstatement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: orderstatement.FieldID,
			},
		},
		Type: "OrderStatement",
		Fields: map[string]*sqlgraph.FieldSpec{
			orderstatement.FieldCreatedAt:            {Type: field.TypeUint32, Column: orderstatement.FieldCreatedAt},
			orderstatement.FieldUpdatedAt:            {Type: field.TypeUint32, Column: orderstatement.FieldUpdatedAt},
			orderstatement.FieldDeletedAt:            {Type: field.TypeUint32, Column: orderstatement.FieldDeletedAt},
			orderstatement.FieldEntID:                {Type: field.TypeUUID, Column: orderstatement.FieldEntID},
			orderstatement.FieldAppID:                {Type: field.TypeUUID, Column: orderstatement.FieldAppID},
			orderstatement.FieldUserID:               {Type: field.TypeUUID, Column: orderstatement.FieldUserID},
			orderstatement.FieldGoodID:               {Type: field.TypeUUID, Column: orderstatement.FieldGoodID},
			orderstatement.FieldAppGoodID:            {Type: field.TypeUUID, Column: orderstatement.FieldAppGoodID},
			orderstatement.FieldOrderID:              {Type: field.TypeUUID, Column: orderstatement.FieldOrderID},
			orderstatement.FieldDirectContributorID:  {Type: field.TypeUUID, Column: orderstatement.FieldDirectContributorID},
			orderstatement.FieldOrderUserID:          {Type: field.TypeUUID, Column: orderstatement.FieldOrderUserID},
			orderstatement.FieldGoodCoinTypeID:       {Type: field.TypeUUID, Column: orderstatement.FieldGoodCoinTypeID},
			orderstatement.FieldUnits:                {Type: field.TypeOther, Column: orderstatement.FieldUnits},
			orderstatement.FieldGoodValueUsd:         {Type: field.TypeOther, Column: orderstatement.FieldGoodValueUsd},
			orderstatement.FieldPaymentAmountUsd:     {Type: field.TypeOther, Column: orderstatement.FieldPaymentAmountUsd},
			orderstatement.FieldCommissionAmountUsd:  {Type: field.TypeOther, Column: orderstatement.FieldCommissionAmountUsd},
			orderstatement.FieldAppConfigID:          {Type: field.TypeUUID, Column: orderstatement.FieldAppConfigID},
			orderstatement.FieldCommissionConfigID:   {Type: field.TypeUUID, Column: orderstatement.FieldCommissionConfigID},
			orderstatement.FieldCommissionConfigType: {Type: field.TypeString, Column: orderstatement.FieldCommissionConfigType},
		},
	}
	graph.Nodes[22] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   registration.Table,
			Columns: registration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: registration.FieldID,
			},
		},
		Type: "Registration",
		Fields: map[string]*sqlgraph.FieldSpec{
			registration.FieldCreatedAt: {Type: field.TypeUint32, Column: registration.FieldCreatedAt},
			registration.FieldUpdatedAt: {Type: field.TypeUint32, Column: registration.FieldUpdatedAt},
			registration.FieldDeletedAt: {Type: field.TypeUint32, Column: registration.FieldDeletedAt},
			registration.FieldEntID:     {Type: field.TypeUUID, Column: registration.FieldEntID},
			registration.FieldAppID:     {Type: field.TypeUUID, Column: registration.FieldAppID},
			registration.FieldInviterID: {Type: field.TypeUUID, Column: registration.FieldInviterID},
			registration.FieldInviteeID: {Type: field.TypeUUID, Column: registration.FieldInviteeID},
		},
	}
	graph.Nodes[23] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   statement.Table,
			Columns: statement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: statement.FieldID,
			},
		},
		Type: "Statement",
		Fields: map[string]*sqlgraph.FieldSpec{
			statement.FieldCreatedAt:              {Type: field.TypeUint32, Column: statement.FieldCreatedAt},
			statement.FieldUpdatedAt:              {Type: field.TypeUint32, Column: statement.FieldUpdatedAt},
			statement.FieldDeletedAt:              {Type: field.TypeUint32, Column: statement.FieldDeletedAt},
			statement.FieldEntID:                  {Type: field.TypeUUID, Column: statement.FieldEntID},
			statement.FieldAppID:                  {Type: field.TypeUUID, Column: statement.FieldAppID},
			statement.FieldUserID:                 {Type: field.TypeUUID, Column: statement.FieldUserID},
			statement.FieldDirectContributorID:    {Type: field.TypeUUID, Column: statement.FieldDirectContributorID},
			statement.FieldGoodID:                 {Type: field.TypeUUID, Column: statement.FieldGoodID},
			statement.FieldAppGoodID:              {Type: field.TypeUUID, Column: statement.FieldAppGoodID},
			statement.FieldOrderID:                {Type: field.TypeUUID, Column: statement.FieldOrderID},
			statement.FieldSelfOrder:              {Type: field.TypeBool, Column: statement.FieldSelfOrder},
			statement.FieldPaymentID:              {Type: field.TypeUUID, Column: statement.FieldPaymentID},
			statement.FieldCoinTypeID:             {Type: field.TypeUUID, Column: statement.FieldCoinTypeID},
			statement.FieldPaymentCoinTypeID:      {Type: field.TypeUUID, Column: statement.FieldPaymentCoinTypeID},
			statement.FieldPaymentCoinUsdCurrency: {Type: field.TypeOther, Column: statement.FieldPaymentCoinUsdCurrency},
			statement.FieldUnits:                  {Type: field.TypeUint32, Column: statement.FieldUnits},
			statement.FieldUnitsV1:                {Type: field.TypeOther, Column: statement.FieldUnitsV1},
			statement.FieldAmount:                 {Type: field.TypeOther, Column: statement.FieldAmount},
			statement.FieldUsdAmount:              {Type: field.TypeOther, Column: statement.FieldUsdAmount},
			statement.FieldCommission:             {Type: field.TypeOther, Column: statement.FieldCommission},
			statement.FieldAppConfigID:            {Type: field.TypeUUID, Column: statement.FieldAppConfigID},
			statement.FieldCommissionConfigID:     {Type: field.TypeUUID, Column: statement.FieldCommissionConfigID},
			statement.FieldCommissionConfigType:   {Type: field.TypeString, Column: statement.FieldCommissionConfigType},
		},
	}
	graph.Nodes[24] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   taskconfig.Table,
			Columns: taskconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: taskconfig.FieldID,
			},
		},
		Type: "TaskConfig",
		Fields: map[string]*sqlgraph.FieldSpec{
			taskconfig.FieldCreatedAt:              {Type: field.TypeUint32, Column: taskconfig.FieldCreatedAt},
			taskconfig.FieldUpdatedAt:              {Type: field.TypeUint32, Column: taskconfig.FieldUpdatedAt},
			taskconfig.FieldDeletedAt:              {Type: field.TypeUint32, Column: taskconfig.FieldDeletedAt},
			taskconfig.FieldEntID:                  {Type: field.TypeUUID, Column: taskconfig.FieldEntID},
			taskconfig.FieldAppID:                  {Type: field.TypeUUID, Column: taskconfig.FieldAppID},
			taskconfig.FieldEventID:                {Type: field.TypeUUID, Column: taskconfig.FieldEventID},
			taskconfig.FieldTaskType:               {Type: field.TypeString, Column: taskconfig.FieldTaskType},
			taskconfig.FieldName:                   {Type: field.TypeString, Column: taskconfig.FieldName},
			taskconfig.FieldTaskDesc:               {Type: field.TypeString, Column: taskconfig.FieldTaskDesc},
			taskconfig.FieldStepGuide:              {Type: field.TypeString, Column: taskconfig.FieldStepGuide},
			taskconfig.FieldRecommendMessage:       {Type: field.TypeString, Column: taskconfig.FieldRecommendMessage},
			taskconfig.FieldIndex:                  {Type: field.TypeUint32, Column: taskconfig.FieldIndex},
			taskconfig.FieldLastTaskID:             {Type: field.TypeUUID, Column: taskconfig.FieldLastTaskID},
			taskconfig.FieldMaxRewardCount:         {Type: field.TypeUint32, Column: taskconfig.FieldMaxRewardCount},
			taskconfig.FieldCooldownSecond:         {Type: field.TypeUint32, Column: taskconfig.FieldCooldownSecond},
			taskconfig.FieldIntervalReset:          {Type: field.TypeBool, Column: taskconfig.FieldIntervalReset},
			taskconfig.FieldIntervalResetSecond:    {Type: field.TypeUint32, Column: taskconfig.FieldIntervalResetSecond},
			taskconfig.FieldMaxIntervalRewardCount: {Type: field.TypeUint32, Column: taskconfig.FieldMaxIntervalRewardCount},
		},
	}
	graph.Nodes[25] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   taskuser.Table,
			Columns: taskuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: taskuser.FieldID,
			},
		},
		Type: "TaskUser",
		Fields: map[string]*sqlgraph.FieldSpec{
			taskuser.FieldCreatedAt:   {Type: field.TypeUint32, Column: taskuser.FieldCreatedAt},
			taskuser.FieldUpdatedAt:   {Type: field.TypeUint32, Column: taskuser.FieldUpdatedAt},
			taskuser.FieldDeletedAt:   {Type: field.TypeUint32, Column: taskuser.FieldDeletedAt},
			taskuser.FieldEntID:       {Type: field.TypeUUID, Column: taskuser.FieldEntID},
			taskuser.FieldAppID:       {Type: field.TypeUUID, Column: taskuser.FieldAppID},
			taskuser.FieldUserID:      {Type: field.TypeUUID, Column: taskuser.FieldUserID},
			taskuser.FieldTaskID:      {Type: field.TypeUUID, Column: taskuser.FieldTaskID},
			taskuser.FieldEventID:     {Type: field.TypeUUID, Column: taskuser.FieldEventID},
			taskuser.FieldTaskState:   {Type: field.TypeString, Column: taskuser.FieldTaskState},
			taskuser.FieldRewardState: {Type: field.TypeString, Column: taskuser.FieldRewardState},
		},
	}
	graph.Nodes[26] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   usercoinreward.Table,
			Columns: usercoinreward.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: usercoinreward.FieldID,
			},
		},
		Type: "UserCoinReward",
		Fields: map[string]*sqlgraph.FieldSpec{
			usercoinreward.FieldCreatedAt:   {Type: field.TypeUint32, Column: usercoinreward.FieldCreatedAt},
			usercoinreward.FieldUpdatedAt:   {Type: field.TypeUint32, Column: usercoinreward.FieldUpdatedAt},
			usercoinreward.FieldDeletedAt:   {Type: field.TypeUint32, Column: usercoinreward.FieldDeletedAt},
			usercoinreward.FieldEntID:       {Type: field.TypeUUID, Column: usercoinreward.FieldEntID},
			usercoinreward.FieldAppID:       {Type: field.TypeUUID, Column: usercoinreward.FieldAppID},
			usercoinreward.FieldUserID:      {Type: field.TypeUUID, Column: usercoinreward.FieldUserID},
			usercoinreward.FieldCoinTypeID:  {Type: field.TypeUUID, Column: usercoinreward.FieldCoinTypeID},
			usercoinreward.FieldCoinRewards: {Type: field.TypeOther, Column: usercoinreward.FieldCoinRewards},
		},
	}
	graph.Nodes[27] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   userreward.Table,
			Columns: userreward.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: userreward.FieldID,
			},
		},
		Type: "UserReward",
		Fields: map[string]*sqlgraph.FieldSpec{
			userreward.FieldCreatedAt:            {Type: field.TypeUint32, Column: userreward.FieldCreatedAt},
			userreward.FieldUpdatedAt:            {Type: field.TypeUint32, Column: userreward.FieldUpdatedAt},
			userreward.FieldDeletedAt:            {Type: field.TypeUint32, Column: userreward.FieldDeletedAt},
			userreward.FieldEntID:                {Type: field.TypeUUID, Column: userreward.FieldEntID},
			userreward.FieldAppID:                {Type: field.TypeUUID, Column: userreward.FieldAppID},
			userreward.FieldUserID:               {Type: field.TypeUUID, Column: userreward.FieldUserID},
			userreward.FieldActionCredits:        {Type: field.TypeOther, Column: userreward.FieldActionCredits},
			userreward.FieldCouponAmount:         {Type: field.TypeOther, Column: userreward.FieldCouponAmount},
			userreward.FieldCouponCashableAmount: {Type: field.TypeOther, Column: userreward.FieldCouponCashableAmount},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (aq *AchievementQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AchievementQuery builder.
func (aq *AchievementQuery) Filter() *AchievementFilter {
	return &AchievementFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AchievementMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AchievementMutation builder.
func (m *AchievementMutation) Filter() *AchievementFilter {
	return &AchievementFilter{config: m.config, predicateAdder: m}
}

// AchievementFilter provides a generic filtering capability at runtime for AchievementQuery.
type AchievementFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AchievementFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AchievementFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(achievement.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AchievementFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(achievement.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AchievementFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(achievement.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AchievementFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(achievement.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AchievementFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(achievement.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AchievementFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(achievement.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *AchievementFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(achievement.FieldUserID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *AchievementFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(achievement.FieldGoodID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *AchievementFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(achievement.FieldAppGoodID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *AchievementFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(achievement.FieldCoinTypeID))
}

// WhereTotalUnitsV1 applies the entql other predicate on the total_units_v1 field.
func (f *AchievementFilter) WhereTotalUnitsV1(p entql.OtherP) {
	f.Where(p.Field(achievement.FieldTotalUnitsV1))
}

// WhereSelfUnitsV1 applies the entql other predicate on the self_units_v1 field.
func (f *AchievementFilter) WhereSelfUnitsV1(p entql.OtherP) {
	f.Where(p.Field(achievement.FieldSelfUnitsV1))
}

// WhereTotalAmount applies the entql other predicate on the total_amount field.
func (f *AchievementFilter) WhereTotalAmount(p entql.OtherP) {
	f.Where(p.Field(achievement.FieldTotalAmount))
}

// WhereSelfAmount applies the entql other predicate on the self_amount field.
func (f *AchievementFilter) WhereSelfAmount(p entql.OtherP) {
	f.Where(p.Field(achievement.FieldSelfAmount))
}

// WhereTotalCommission applies the entql other predicate on the total_commission field.
func (f *AchievementFilter) WhereTotalCommission(p entql.OtherP) {
	f.Where(p.Field(achievement.FieldTotalCommission))
}

// WhereSelfCommission applies the entql other predicate on the self_commission field.
func (f *AchievementFilter) WhereSelfCommission(p entql.OtherP) {
	f.Where(p.Field(achievement.FieldSelfCommission))
}

// addPredicate implements the predicateAdder interface.
func (auq *AchievementUserQuery) addPredicate(pred func(s *sql.Selector)) {
	auq.predicates = append(auq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AchievementUserQuery builder.
func (auq *AchievementUserQuery) Filter() *AchievementUserFilter {
	return &AchievementUserFilter{config: auq.config, predicateAdder: auq}
}

// addPredicate implements the predicateAdder interface.
func (m *AchievementUserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AchievementUserMutation builder.
func (m *AchievementUserMutation) Filter() *AchievementUserFilter {
	return &AchievementUserFilter{config: m.config, predicateAdder: m}
}

// AchievementUserFilter provides a generic filtering capability at runtime for AchievementUserQuery.
type AchievementUserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AchievementUserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AchievementUserFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(achievementuser.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AchievementUserFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(achievementuser.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AchievementUserFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(achievementuser.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AchievementUserFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(achievementuser.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AchievementUserFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(achievementuser.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AchievementUserFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(achievementuser.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *AchievementUserFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(achievementuser.FieldUserID))
}

// WhereTotalCommission applies the entql other predicate on the total_commission field.
func (f *AchievementUserFilter) WhereTotalCommission(p entql.OtherP) {
	f.Where(p.Field(achievementuser.FieldTotalCommission))
}

// WhereSelfCommission applies the entql other predicate on the self_commission field.
func (f *AchievementUserFilter) WhereSelfCommission(p entql.OtherP) {
	f.Where(p.Field(achievementuser.FieldSelfCommission))
}

// WhereDirectConsumeAmount applies the entql other predicate on the direct_consume_amount field.
func (f *AchievementUserFilter) WhereDirectConsumeAmount(p entql.OtherP) {
	f.Where(p.Field(achievementuser.FieldDirectConsumeAmount))
}

// WhereInviteeConsumeAmount applies the entql other predicate on the invitee_consume_amount field.
func (f *AchievementUserFilter) WhereInviteeConsumeAmount(p entql.OtherP) {
	f.Where(p.Field(achievementuser.FieldInviteeConsumeAmount))
}

// WhereDirectInvitees applies the entql uint32 predicate on the direct_invitees field.
func (f *AchievementUserFilter) WhereDirectInvitees(p entql.Uint32P) {
	f.Where(p.Field(achievementuser.FieldDirectInvitees))
}

// WhereIndirectInvitees applies the entql uint32 predicate on the indirect_invitees field.
func (f *AchievementUserFilter) WhereIndirectInvitees(p entql.Uint32P) {
	f.Where(p.Field(achievementuser.FieldIndirectInvitees))
}

// addPredicate implements the predicateAdder interface.
func (accq *AppCommissionConfigQuery) addPredicate(pred func(s *sql.Selector)) {
	accq.predicates = append(accq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppCommissionConfigQuery builder.
func (accq *AppCommissionConfigQuery) Filter() *AppCommissionConfigFilter {
	return &AppCommissionConfigFilter{config: accq.config, predicateAdder: accq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppCommissionConfigMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppCommissionConfigMutation builder.
func (m *AppCommissionConfigMutation) Filter() *AppCommissionConfigFilter {
	return &AppCommissionConfigFilter{config: m.config, predicateAdder: m}
}

// AppCommissionConfigFilter provides a generic filtering capability at runtime for AppCommissionConfigQuery.
type AppCommissionConfigFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppCommissionConfigFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppCommissionConfigFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appcommissionconfig.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppCommissionConfigFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appcommissionconfig.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppCommissionConfigFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appcommissionconfig.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppCommissionConfigFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appcommissionconfig.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppCommissionConfigFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appcommissionconfig.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppCommissionConfigFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appcommissionconfig.FieldAppID))
}

// WhereLevel applies the entql uint32 predicate on the level field.
func (f *AppCommissionConfigFilter) WhereLevel(p entql.Uint32P) {
	f.Where(p.Field(appcommissionconfig.FieldLevel))
}

// WhereThresholdAmount applies the entql other predicate on the threshold_amount field.
func (f *AppCommissionConfigFilter) WhereThresholdAmount(p entql.OtherP) {
	f.Where(p.Field(appcommissionconfig.FieldThresholdAmount))
}

// WhereAmountOrPercent applies the entql other predicate on the amount_or_percent field.
func (f *AppCommissionConfigFilter) WhereAmountOrPercent(p entql.OtherP) {
	f.Where(p.Field(appcommissionconfig.FieldAmountOrPercent))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *AppCommissionConfigFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(appcommissionconfig.FieldStartAt))
}

// WhereEndAt applies the entql uint32 predicate on the end_at field.
func (f *AppCommissionConfigFilter) WhereEndAt(p entql.Uint32P) {
	f.Where(p.Field(appcommissionconfig.FieldEndAt))
}

// WhereInvites applies the entql uint32 predicate on the invites field.
func (f *AppCommissionConfigFilter) WhereInvites(p entql.Uint32P) {
	f.Where(p.Field(appcommissionconfig.FieldInvites))
}

// WhereSettleType applies the entql string predicate on the settle_type field.
func (f *AppCommissionConfigFilter) WhereSettleType(p entql.StringP) {
	f.Where(p.Field(appcommissionconfig.FieldSettleType))
}

// WhereDisabled applies the entql bool predicate on the disabled field.
func (f *AppCommissionConfigFilter) WhereDisabled(p entql.BoolP) {
	f.Where(p.Field(appcommissionconfig.FieldDisabled))
}

// addPredicate implements the predicateAdder interface.
func (acq *AppConfigQuery) addPredicate(pred func(s *sql.Selector)) {
	acq.predicates = append(acq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppConfigQuery builder.
func (acq *AppConfigQuery) Filter() *AppConfigFilter {
	return &AppConfigFilter{config: acq.config, predicateAdder: acq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppConfigMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppConfigMutation builder.
func (m *AppConfigMutation) Filter() *AppConfigFilter {
	return &AppConfigFilter{config: m.config, predicateAdder: m}
}

// AppConfigFilter provides a generic filtering capability at runtime for AppConfigQuery.
type AppConfigFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppConfigFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppConfigFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appconfig.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppConfigFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appconfig.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppConfigFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appconfig.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppConfigFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appconfig.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppConfigFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appconfig.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppConfigFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appconfig.FieldAppID))
}

// WhereSettleMode applies the entql string predicate on the settle_mode field.
func (f *AppConfigFilter) WhereSettleMode(p entql.StringP) {
	f.Where(p.Field(appconfig.FieldSettleMode))
}

// WhereSettleAmountType applies the entql string predicate on the settle_amount_type field.
func (f *AppConfigFilter) WhereSettleAmountType(p entql.StringP) {
	f.Where(p.Field(appconfig.FieldSettleAmountType))
}

// WhereSettleInterval applies the entql string predicate on the settle_interval field.
func (f *AppConfigFilter) WhereSettleInterval(p entql.StringP) {
	f.Where(p.Field(appconfig.FieldSettleInterval))
}

// WhereCommissionType applies the entql string predicate on the commission_type field.
func (f *AppConfigFilter) WhereCommissionType(p entql.StringP) {
	f.Where(p.Field(appconfig.FieldCommissionType))
}

// WhereSettleBenefit applies the entql bool predicate on the settle_benefit field.
func (f *AppConfigFilter) WhereSettleBenefit(p entql.BoolP) {
	f.Where(p.Field(appconfig.FieldSettleBenefit))
}

// WhereMaxLevel applies the entql uint32 predicate on the max_level field.
func (f *AppConfigFilter) WhereMaxLevel(p entql.Uint32P) {
	f.Where(p.Field(appconfig.FieldMaxLevel))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *AppConfigFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(appconfig.FieldStartAt))
}

// WhereEndAt applies the entql uint32 predicate on the end_at field.
func (f *AppConfigFilter) WhereEndAt(p entql.Uint32P) {
	f.Where(p.Field(appconfig.FieldEndAt))
}

// addPredicate implements the predicateAdder interface.
func (agccq *AppGoodCommissionConfigQuery) addPredicate(pred func(s *sql.Selector)) {
	agccq.predicates = append(agccq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppGoodCommissionConfigQuery builder.
func (agccq *AppGoodCommissionConfigQuery) Filter() *AppGoodCommissionConfigFilter {
	return &AppGoodCommissionConfigFilter{config: agccq.config, predicateAdder: agccq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppGoodCommissionConfigMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppGoodCommissionConfigMutation builder.
func (m *AppGoodCommissionConfigMutation) Filter() *AppGoodCommissionConfigFilter {
	return &AppGoodCommissionConfigFilter{config: m.config, predicateAdder: m}
}

// AppGoodCommissionConfigFilter provides a generic filtering capability at runtime for AppGoodCommissionConfigQuery.
type AppGoodCommissionConfigFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppGoodCommissionConfigFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppGoodCommissionConfigFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appgoodcommissionconfig.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppGoodCommissionConfigFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appgoodcommissionconfig.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppGoodCommissionConfigFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appgoodcommissionconfig.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppGoodCommissionConfigFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appgoodcommissionconfig.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppGoodCommissionConfigFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appgoodcommissionconfig.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppGoodCommissionConfigFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appgoodcommissionconfig.FieldAppID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *AppGoodCommissionConfigFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(appgoodcommissionconfig.FieldGoodID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *AppGoodCommissionConfigFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(appgoodcommissionconfig.FieldAppGoodID))
}

// WhereLevel applies the entql uint32 predicate on the level field.
func (f *AppGoodCommissionConfigFilter) WhereLevel(p entql.Uint32P) {
	f.Where(p.Field(appgoodcommissionconfig.FieldLevel))
}

// WhereThresholdAmount applies the entql other predicate on the threshold_amount field.
func (f *AppGoodCommissionConfigFilter) WhereThresholdAmount(p entql.OtherP) {
	f.Where(p.Field(appgoodcommissionconfig.FieldThresholdAmount))
}

// WhereAmountOrPercent applies the entql other predicate on the amount_or_percent field.
func (f *AppGoodCommissionConfigFilter) WhereAmountOrPercent(p entql.OtherP) {
	f.Where(p.Field(appgoodcommissionconfig.FieldAmountOrPercent))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *AppGoodCommissionConfigFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(appgoodcommissionconfig.FieldStartAt))
}

// WhereEndAt applies the entql uint32 predicate on the end_at field.
func (f *AppGoodCommissionConfigFilter) WhereEndAt(p entql.Uint32P) {
	f.Where(p.Field(appgoodcommissionconfig.FieldEndAt))
}

// WhereInvites applies the entql uint32 predicate on the invites field.
func (f *AppGoodCommissionConfigFilter) WhereInvites(p entql.Uint32P) {
	f.Where(p.Field(appgoodcommissionconfig.FieldInvites))
}

// WhereSettleType applies the entql string predicate on the settle_type field.
func (f *AppGoodCommissionConfigFilter) WhereSettleType(p entql.StringP) {
	f.Where(p.Field(appgoodcommissionconfig.FieldSettleType))
}

// WhereDisabled applies the entql bool predicate on the disabled field.
func (f *AppGoodCommissionConfigFilter) WhereDisabled(p entql.BoolP) {
	f.Where(p.Field(appgoodcommissionconfig.FieldDisabled))
}

// addPredicate implements the predicateAdder interface.
func (agsq *AppGoodScopeQuery) addPredicate(pred func(s *sql.Selector)) {
	agsq.predicates = append(agsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppGoodScopeQuery builder.
func (agsq *AppGoodScopeQuery) Filter() *AppGoodScopeFilter {
	return &AppGoodScopeFilter{config: agsq.config, predicateAdder: agsq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppGoodScopeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppGoodScopeMutation builder.
func (m *AppGoodScopeMutation) Filter() *AppGoodScopeFilter {
	return &AppGoodScopeFilter{config: m.config, predicateAdder: m}
}

// AppGoodScopeFilter provides a generic filtering capability at runtime for AppGoodScopeQuery.
type AppGoodScopeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppGoodScopeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppGoodScopeFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appgoodscope.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppGoodScopeFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appgoodscope.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppGoodScopeFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appgoodscope.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppGoodScopeFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appgoodscope.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppGoodScopeFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appgoodscope.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppGoodScopeFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appgoodscope.FieldAppID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *AppGoodScopeFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(appgoodscope.FieldAppGoodID))
}

// WhereCouponID applies the entql [16]byte predicate on the coupon_id field.
func (f *AppGoodScopeFilter) WhereCouponID(p entql.ValueP) {
	f.Where(p.Field(appgoodscope.FieldCouponID))
}

// WhereCouponScope applies the entql string predicate on the coupon_scope field.
func (f *AppGoodScopeFilter) WhereCouponScope(p entql.StringP) {
	f.Where(p.Field(appgoodscope.FieldCouponScope))
}

// addPredicate implements the predicateAdder interface.
func (ccq *CashControlQuery) addPredicate(pred func(s *sql.Selector)) {
	ccq.predicates = append(ccq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CashControlQuery builder.
func (ccq *CashControlQuery) Filter() *CashControlFilter {
	return &CashControlFilter{config: ccq.config, predicateAdder: ccq}
}

// addPredicate implements the predicateAdder interface.
func (m *CashControlMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CashControlMutation builder.
func (m *CashControlMutation) Filter() *CashControlFilter {
	return &CashControlFilter{config: m.config, predicateAdder: m}
}

// CashControlFilter provides a generic filtering capability at runtime for CashControlQuery.
type CashControlFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CashControlFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *CashControlFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(cashcontrol.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CashControlFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(cashcontrol.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CashControlFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(cashcontrol.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CashControlFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(cashcontrol.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *CashControlFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(cashcontrol.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *CashControlFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(cashcontrol.FieldAppID))
}

// WhereCouponID applies the entql [16]byte predicate on the coupon_id field.
func (f *CashControlFilter) WhereCouponID(p entql.ValueP) {
	f.Where(p.Field(cashcontrol.FieldCouponID))
}

// WhereControlType applies the entql string predicate on the control_type field.
func (f *CashControlFilter) WhereControlType(p entql.StringP) {
	f.Where(p.Field(cashcontrol.FieldControlType))
}

// WhereValue applies the entql other predicate on the value field.
func (f *CashControlFilter) WhereValue(p entql.OtherP) {
	f.Where(p.Field(cashcontrol.FieldValue))
}

// addPredicate implements the predicateAdder interface.
func (caq *CoinAllocatedQuery) addPredicate(pred func(s *sql.Selector)) {
	caq.predicates = append(caq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CoinAllocatedQuery builder.
func (caq *CoinAllocatedQuery) Filter() *CoinAllocatedFilter {
	return &CoinAllocatedFilter{config: caq.config, predicateAdder: caq}
}

// addPredicate implements the predicateAdder interface.
func (m *CoinAllocatedMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CoinAllocatedMutation builder.
func (m *CoinAllocatedMutation) Filter() *CoinAllocatedFilter {
	return &CoinAllocatedFilter{config: m.config, predicateAdder: m}
}

// CoinAllocatedFilter provides a generic filtering capability at runtime for CoinAllocatedQuery.
type CoinAllocatedFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CoinAllocatedFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *CoinAllocatedFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(coinallocated.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CoinAllocatedFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(coinallocated.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CoinAllocatedFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(coinallocated.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CoinAllocatedFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(coinallocated.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *CoinAllocatedFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(coinallocated.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *CoinAllocatedFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(coinallocated.FieldAppID))
}

// WhereCoinConfigID applies the entql [16]byte predicate on the coin_config_id field.
func (f *CoinAllocatedFilter) WhereCoinConfigID(p entql.ValueP) {
	f.Where(p.Field(coinallocated.FieldCoinConfigID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *CoinAllocatedFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(coinallocated.FieldCoinTypeID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *CoinAllocatedFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(coinallocated.FieldUserID))
}

// WhereValue applies the entql other predicate on the value field.
func (f *CoinAllocatedFilter) WhereValue(p entql.OtherP) {
	f.Where(p.Field(coinallocated.FieldValue))
}

// WhereExtra applies the entql string predicate on the extra field.
func (f *CoinAllocatedFilter) WhereExtra(p entql.StringP) {
	f.Where(p.Field(coinallocated.FieldExtra))
}

// addPredicate implements the predicateAdder interface.
func (ccq *CoinConfigQuery) addPredicate(pred func(s *sql.Selector)) {
	ccq.predicates = append(ccq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CoinConfigQuery builder.
func (ccq *CoinConfigQuery) Filter() *CoinConfigFilter {
	return &CoinConfigFilter{config: ccq.config, predicateAdder: ccq}
}

// addPredicate implements the predicateAdder interface.
func (m *CoinConfigMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CoinConfigMutation builder.
func (m *CoinConfigMutation) Filter() *CoinConfigFilter {
	return &CoinConfigFilter{config: m.config, predicateAdder: m}
}

// CoinConfigFilter provides a generic filtering capability at runtime for CoinConfigQuery.
type CoinConfigFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CoinConfigFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *CoinConfigFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(coinconfig.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CoinConfigFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(coinconfig.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CoinConfigFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(coinconfig.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CoinConfigFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(coinconfig.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *CoinConfigFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(coinconfig.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *CoinConfigFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(coinconfig.FieldAppID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *CoinConfigFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(coinconfig.FieldCoinTypeID))
}

// WhereMaxValue applies the entql other predicate on the max_value field.
func (f *CoinConfigFilter) WhereMaxValue(p entql.OtherP) {
	f.Where(p.Field(coinconfig.FieldMaxValue))
}

// WhereAllocated applies the entql other predicate on the allocated field.
func (f *CoinConfigFilter) WhereAllocated(p entql.OtherP) {
	f.Where(p.Field(coinconfig.FieldAllocated))
}

// addPredicate implements the predicateAdder interface.
func (cq *CommissionQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CommissionQuery builder.
func (cq *CommissionQuery) Filter() *CommissionFilter {
	return &CommissionFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CommissionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CommissionMutation builder.
func (m *CommissionMutation) Filter() *CommissionFilter {
	return &CommissionFilter{config: m.config, predicateAdder: m}
}

// CommissionFilter provides a generic filtering capability at runtime for CommissionQuery.
type CommissionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CommissionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *CommissionFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(commission.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CommissionFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(commission.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CommissionFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(commission.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CommissionFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(commission.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *CommissionFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(commission.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *CommissionFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(commission.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *CommissionFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(commission.FieldUserID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *CommissionFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(commission.FieldGoodID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *CommissionFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(commission.FieldAppGoodID))
}

// WhereAmountOrPercent applies the entql other predicate on the amount_or_percent field.
func (f *CommissionFilter) WhereAmountOrPercent(p entql.OtherP) {
	f.Where(p.Field(commission.FieldAmountOrPercent))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *CommissionFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(commission.FieldStartAt))
}

// WhereEndAt applies the entql uint32 predicate on the end_at field.
func (f *CommissionFilter) WhereEndAt(p entql.Uint32P) {
	f.Where(p.Field(commission.FieldEndAt))
}

// WhereSettleType applies the entql string predicate on the settle_type field.
func (f *CommissionFilter) WhereSettleType(p entql.StringP) {
	f.Where(p.Field(commission.FieldSettleType))
}

// WhereSettleMode applies the entql string predicate on the settle_mode field.
func (f *CommissionFilter) WhereSettleMode(p entql.StringP) {
	f.Where(p.Field(commission.FieldSettleMode))
}

// WhereSettleInterval applies the entql string predicate on the settle_interval field.
func (f *CommissionFilter) WhereSettleInterval(p entql.StringP) {
	f.Where(p.Field(commission.FieldSettleInterval))
}

// WhereSettleAmountType applies the entql string predicate on the settle_amount_type field.
func (f *CommissionFilter) WhereSettleAmountType(p entql.StringP) {
	f.Where(p.Field(commission.FieldSettleAmountType))
}

// WhereThreshold applies the entql other predicate on the threshold field.
func (f *CommissionFilter) WhereThreshold(p entql.OtherP) {
	f.Where(p.Field(commission.FieldThreshold))
}

// WhereOrderLimit applies the entql uint32 predicate on the order_limit field.
func (f *CommissionFilter) WhereOrderLimit(p entql.Uint32P) {
	f.Where(p.Field(commission.FieldOrderLimit))
}

// addPredicate implements the predicateAdder interface.
func (cq *CouponQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CouponQuery builder.
func (cq *CouponQuery) Filter() *CouponFilter {
	return &CouponFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CouponMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CouponMutation builder.
func (m *CouponMutation) Filter() *CouponFilter {
	return &CouponFilter{config: m.config, predicateAdder: m}
}

// CouponFilter provides a generic filtering capability at runtime for CouponQuery.
type CouponFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CouponFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *CouponFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(coupon.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CouponFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(coupon.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CouponFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(coupon.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CouponFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(coupon.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *CouponFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(coupon.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *CouponFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(coupon.FieldAppID))
}

// WhereDenomination applies the entql other predicate on the denomination field.
func (f *CouponFilter) WhereDenomination(p entql.OtherP) {
	f.Where(p.Field(coupon.FieldDenomination))
}

// WhereCirculation applies the entql other predicate on the circulation field.
func (f *CouponFilter) WhereCirculation(p entql.OtherP) {
	f.Where(p.Field(coupon.FieldCirculation))
}

// WhereRandom applies the entql bool predicate on the random field.
func (f *CouponFilter) WhereRandom(p entql.BoolP) {
	f.Where(p.Field(coupon.FieldRandom))
}

// WhereIssuedBy applies the entql [16]byte predicate on the issued_by field.
func (f *CouponFilter) WhereIssuedBy(p entql.ValueP) {
	f.Where(p.Field(coupon.FieldIssuedBy))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *CouponFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(coupon.FieldStartAt))
}

// WhereEndAt applies the entql uint32 predicate on the end_at field.
func (f *CouponFilter) WhereEndAt(p entql.Uint32P) {
	f.Where(p.Field(coupon.FieldEndAt))
}

// WhereDurationDays applies the entql uint32 predicate on the duration_days field.
func (f *CouponFilter) WhereDurationDays(p entql.Uint32P) {
	f.Where(p.Field(coupon.FieldDurationDays))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *CouponFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(coupon.FieldMessage))
}

// WhereName applies the entql string predicate on the name field.
func (f *CouponFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(coupon.FieldName))
}

// WhereAllocated applies the entql other predicate on the allocated field.
func (f *CouponFilter) WhereAllocated(p entql.OtherP) {
	f.Where(p.Field(coupon.FieldAllocated))
}

// WhereCouponType applies the entql string predicate on the coupon_type field.
func (f *CouponFilter) WhereCouponType(p entql.StringP) {
	f.Where(p.Field(coupon.FieldCouponType))
}

// WhereThreshold applies the entql other predicate on the threshold field.
func (f *CouponFilter) WhereThreshold(p entql.OtherP) {
	f.Where(p.Field(coupon.FieldThreshold))
}

// WhereCouponConstraint applies the entql string predicate on the coupon_constraint field.
func (f *CouponFilter) WhereCouponConstraint(p entql.StringP) {
	f.Where(p.Field(coupon.FieldCouponConstraint))
}

// WhereCouponScope applies the entql string predicate on the coupon_scope field.
func (f *CouponFilter) WhereCouponScope(p entql.StringP) {
	f.Where(p.Field(coupon.FieldCouponScope))
}

// WhereCashableProbability applies the entql other predicate on the cashable_probability field.
func (f *CouponFilter) WhereCashableProbability(p entql.OtherP) {
	f.Where(p.Field(coupon.FieldCashableProbability))
}

// addPredicate implements the predicateAdder interface.
func (caq *CouponAllocatedQuery) addPredicate(pred func(s *sql.Selector)) {
	caq.predicates = append(caq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CouponAllocatedQuery builder.
func (caq *CouponAllocatedQuery) Filter() *CouponAllocatedFilter {
	return &CouponAllocatedFilter{config: caq.config, predicateAdder: caq}
}

// addPredicate implements the predicateAdder interface.
func (m *CouponAllocatedMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CouponAllocatedMutation builder.
func (m *CouponAllocatedMutation) Filter() *CouponAllocatedFilter {
	return &CouponAllocatedFilter{config: m.config, predicateAdder: m}
}

// CouponAllocatedFilter provides a generic filtering capability at runtime for CouponAllocatedQuery.
type CouponAllocatedFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CouponAllocatedFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *CouponAllocatedFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(couponallocated.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CouponAllocatedFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(couponallocated.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CouponAllocatedFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(couponallocated.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CouponAllocatedFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(couponallocated.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *CouponAllocatedFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(couponallocated.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *CouponAllocatedFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(couponallocated.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *CouponAllocatedFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(couponallocated.FieldUserID))
}

// WhereCouponID applies the entql [16]byte predicate on the coupon_id field.
func (f *CouponAllocatedFilter) WhereCouponID(p entql.ValueP) {
	f.Where(p.Field(couponallocated.FieldCouponID))
}

// WhereDenomination applies the entql other predicate on the denomination field.
func (f *CouponAllocatedFilter) WhereDenomination(p entql.OtherP) {
	f.Where(p.Field(couponallocated.FieldDenomination))
}

// WhereUsed applies the entql bool predicate on the used field.
func (f *CouponAllocatedFilter) WhereUsed(p entql.BoolP) {
	f.Where(p.Field(couponallocated.FieldUsed))
}

// WhereUsedAt applies the entql uint32 predicate on the used_at field.
func (f *CouponAllocatedFilter) WhereUsedAt(p entql.Uint32P) {
	f.Where(p.Field(couponallocated.FieldUsedAt))
}

// WhereUsedByOrderID applies the entql [16]byte predicate on the used_by_order_id field.
func (f *CouponAllocatedFilter) WhereUsedByOrderID(p entql.ValueP) {
	f.Where(p.Field(couponallocated.FieldUsedByOrderID))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *CouponAllocatedFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(couponallocated.FieldStartAt))
}

// WhereCouponScope applies the entql string predicate on the coupon_scope field.
func (f *CouponAllocatedFilter) WhereCouponScope(p entql.StringP) {
	f.Where(p.Field(couponallocated.FieldCouponScope))
}

// WhereCashable applies the entql bool predicate on the cashable field.
func (f *CouponAllocatedFilter) WhereCashable(p entql.BoolP) {
	f.Where(p.Field(couponallocated.FieldCashable))
}

// WhereExtra applies the entql string predicate on the extra field.
func (f *CouponAllocatedFilter) WhereExtra(p entql.StringP) {
	f.Where(p.Field(couponallocated.FieldExtra))
}

// addPredicate implements the predicateAdder interface.
func (csq *CouponScopeQuery) addPredicate(pred func(s *sql.Selector)) {
	csq.predicates = append(csq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CouponScopeQuery builder.
func (csq *CouponScopeQuery) Filter() *CouponScopeFilter {
	return &CouponScopeFilter{config: csq.config, predicateAdder: csq}
}

// addPredicate implements the predicateAdder interface.
func (m *CouponScopeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CouponScopeMutation builder.
func (m *CouponScopeMutation) Filter() *CouponScopeFilter {
	return &CouponScopeFilter{config: m.config, predicateAdder: m}
}

// CouponScopeFilter provides a generic filtering capability at runtime for CouponScopeQuery.
type CouponScopeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CouponScopeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *CouponScopeFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(couponscope.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CouponScopeFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(couponscope.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CouponScopeFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(couponscope.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CouponScopeFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(couponscope.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *CouponScopeFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(couponscope.FieldEntID))
}

// WhereCouponID applies the entql [16]byte predicate on the coupon_id field.
func (f *CouponScopeFilter) WhereCouponID(p entql.ValueP) {
	f.Where(p.Field(couponscope.FieldCouponID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *CouponScopeFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(couponscope.FieldGoodID))
}

// WhereCouponScope applies the entql string predicate on the coupon_scope field.
func (f *CouponScopeFilter) WhereCouponScope(p entql.StringP) {
	f.Where(p.Field(couponscope.FieldCouponScope))
}

// addPredicate implements the predicateAdder interface.
func (caq *CreditAllocatedQuery) addPredicate(pred func(s *sql.Selector)) {
	caq.predicates = append(caq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CreditAllocatedQuery builder.
func (caq *CreditAllocatedQuery) Filter() *CreditAllocatedFilter {
	return &CreditAllocatedFilter{config: caq.config, predicateAdder: caq}
}

// addPredicate implements the predicateAdder interface.
func (m *CreditAllocatedMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CreditAllocatedMutation builder.
func (m *CreditAllocatedMutation) Filter() *CreditAllocatedFilter {
	return &CreditAllocatedFilter{config: m.config, predicateAdder: m}
}

// CreditAllocatedFilter provides a generic filtering capability at runtime for CreditAllocatedQuery.
type CreditAllocatedFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CreditAllocatedFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *CreditAllocatedFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(creditallocated.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CreditAllocatedFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(creditallocated.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CreditAllocatedFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(creditallocated.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CreditAllocatedFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(creditallocated.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *CreditAllocatedFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(creditallocated.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *CreditAllocatedFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(creditallocated.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *CreditAllocatedFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(creditallocated.FieldUserID))
}

// WhereValue applies the entql other predicate on the value field.
func (f *CreditAllocatedFilter) WhereValue(p entql.OtherP) {
	f.Where(p.Field(creditallocated.FieldValue))
}

// WhereExtra applies the entql string predicate on the extra field.
func (f *CreditAllocatedFilter) WhereExtra(p entql.StringP) {
	f.Where(p.Field(creditallocated.FieldExtra))
}

// addPredicate implements the predicateAdder interface.
func (eq *EventQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EventQuery builder.
func (eq *EventQuery) Filter() *EventFilter {
	return &EventFilter{config: eq.config, predicateAdder: eq}
}

// addPredicate implements the predicateAdder interface.
func (m *EventMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EventMutation builder.
func (m *EventMutation) Filter() *EventFilter {
	return &EventFilter{config: m.config, predicateAdder: m}
}

// EventFilter provides a generic filtering capability at runtime for EventQuery.
type EventFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EventFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[14].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *EventFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(event.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *EventFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(event.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *EventFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(event.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *EventFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(event.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *EventFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(event.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *EventFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(event.FieldAppID))
}

// WhereEventType applies the entql string predicate on the event_type field.
func (f *EventFilter) WhereEventType(p entql.StringP) {
	f.Where(p.Field(event.FieldEventType))
}

// WhereCredits applies the entql other predicate on the credits field.
func (f *EventFilter) WhereCredits(p entql.OtherP) {
	f.Where(p.Field(event.FieldCredits))
}

// WhereCreditsPerUsd applies the entql other predicate on the credits_per_usd field.
func (f *EventFilter) WhereCreditsPerUsd(p entql.OtherP) {
	f.Where(p.Field(event.FieldCreditsPerUsd))
}

// WhereMaxConsecutive applies the entql uint32 predicate on the max_consecutive field.
func (f *EventFilter) WhereMaxConsecutive(p entql.Uint32P) {
	f.Where(p.Field(event.FieldMaxConsecutive))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *EventFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(event.FieldGoodID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *EventFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(event.FieldAppGoodID))
}

// WhereInviterLayers applies the entql uint32 predicate on the inviter_layers field.
func (f *EventFilter) WhereInviterLayers(p entql.Uint32P) {
	f.Where(p.Field(event.FieldInviterLayers))
}

// addPredicate implements the predicateAdder interface.
func (ecq *EventCoinQuery) addPredicate(pred func(s *sql.Selector)) {
	ecq.predicates = append(ecq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EventCoinQuery builder.
func (ecq *EventCoinQuery) Filter() *EventCoinFilter {
	return &EventCoinFilter{config: ecq.config, predicateAdder: ecq}
}

// addPredicate implements the predicateAdder interface.
func (m *EventCoinMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EventCoinMutation builder.
func (m *EventCoinMutation) Filter() *EventCoinFilter {
	return &EventCoinFilter{config: m.config, predicateAdder: m}
}

// EventCoinFilter provides a generic filtering capability at runtime for EventCoinQuery.
type EventCoinFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EventCoinFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[15].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *EventCoinFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(eventcoin.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *EventCoinFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(eventcoin.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *EventCoinFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(eventcoin.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *EventCoinFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(eventcoin.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *EventCoinFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(eventcoin.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *EventCoinFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(eventcoin.FieldAppID))
}

// WhereEventID applies the entql [16]byte predicate on the event_id field.
func (f *EventCoinFilter) WhereEventID(p entql.ValueP) {
	f.Where(p.Field(eventcoin.FieldEventID))
}

// WhereCoinConfigID applies the entql [16]byte predicate on the coin_config_id field.
func (f *EventCoinFilter) WhereCoinConfigID(p entql.ValueP) {
	f.Where(p.Field(eventcoin.FieldCoinConfigID))
}

// WhereCoinValue applies the entql other predicate on the coin_value field.
func (f *EventCoinFilter) WhereCoinValue(p entql.OtherP) {
	f.Where(p.Field(eventcoin.FieldCoinValue))
}

// WhereCoinPerUsd applies the entql other predicate on the coin_per_usd field.
func (f *EventCoinFilter) WhereCoinPerUsd(p entql.OtherP) {
	f.Where(p.Field(eventcoin.FieldCoinPerUsd))
}

// addPredicate implements the predicateAdder interface.
func (ecq *EventCouponQuery) addPredicate(pred func(s *sql.Selector)) {
	ecq.predicates = append(ecq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EventCouponQuery builder.
func (ecq *EventCouponQuery) Filter() *EventCouponFilter {
	return &EventCouponFilter{config: ecq.config, predicateAdder: ecq}
}

// addPredicate implements the predicateAdder interface.
func (m *EventCouponMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EventCouponMutation builder.
func (m *EventCouponMutation) Filter() *EventCouponFilter {
	return &EventCouponFilter{config: m.config, predicateAdder: m}
}

// EventCouponFilter provides a generic filtering capability at runtime for EventCouponQuery.
type EventCouponFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EventCouponFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[16].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *EventCouponFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(eventcoupon.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *EventCouponFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(eventcoupon.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *EventCouponFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(eventcoupon.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *EventCouponFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(eventcoupon.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *EventCouponFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(eventcoupon.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *EventCouponFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(eventcoupon.FieldAppID))
}

// WhereEventID applies the entql [16]byte predicate on the event_id field.
func (f *EventCouponFilter) WhereEventID(p entql.ValueP) {
	f.Where(p.Field(eventcoupon.FieldEventID))
}

// WhereCouponID applies the entql [16]byte predicate on the coupon_id field.
func (f *EventCouponFilter) WhereCouponID(p entql.ValueP) {
	f.Where(p.Field(eventcoupon.FieldCouponID))
}

// addPredicate implements the predicateAdder interface.
func (gaq *GoodAchievementQuery) addPredicate(pred func(s *sql.Selector)) {
	gaq.predicates = append(gaq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GoodAchievementQuery builder.
func (gaq *GoodAchievementQuery) Filter() *GoodAchievementFilter {
	return &GoodAchievementFilter{config: gaq.config, predicateAdder: gaq}
}

// addPredicate implements the predicateAdder interface.
func (m *GoodAchievementMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GoodAchievementMutation builder.
func (m *GoodAchievementMutation) Filter() *GoodAchievementFilter {
	return &GoodAchievementFilter{config: m.config, predicateAdder: m}
}

// GoodAchievementFilter provides a generic filtering capability at runtime for GoodAchievementQuery.
type GoodAchievementFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GoodAchievementFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[17].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *GoodAchievementFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(goodachievement.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *GoodAchievementFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(goodachievement.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *GoodAchievementFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(goodachievement.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *GoodAchievementFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(goodachievement.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *GoodAchievementFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(goodachievement.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *GoodAchievementFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(goodachievement.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *GoodAchievementFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(goodachievement.FieldUserID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *GoodAchievementFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(goodachievement.FieldGoodID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *GoodAchievementFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(goodachievement.FieldAppGoodID))
}

// WhereTotalUnits applies the entql other predicate on the total_units field.
func (f *GoodAchievementFilter) WhereTotalUnits(p entql.OtherP) {
	f.Where(p.Field(goodachievement.FieldTotalUnits))
}

// WhereSelfUnits applies the entql other predicate on the self_units field.
func (f *GoodAchievementFilter) WhereSelfUnits(p entql.OtherP) {
	f.Where(p.Field(goodachievement.FieldSelfUnits))
}

// WhereTotalAmountUsd applies the entql other predicate on the total_amount_usd field.
func (f *GoodAchievementFilter) WhereTotalAmountUsd(p entql.OtherP) {
	f.Where(p.Field(goodachievement.FieldTotalAmountUsd))
}

// WhereSelfAmountUsd applies the entql other predicate on the self_amount_usd field.
func (f *GoodAchievementFilter) WhereSelfAmountUsd(p entql.OtherP) {
	f.Where(p.Field(goodachievement.FieldSelfAmountUsd))
}

// WhereTotalCommissionUsd applies the entql other predicate on the total_commission_usd field.
func (f *GoodAchievementFilter) WhereTotalCommissionUsd(p entql.OtherP) {
	f.Where(p.Field(goodachievement.FieldTotalCommissionUsd))
}

// WhereSelfCommissionUsd applies the entql other predicate on the self_commission_usd field.
func (f *GoodAchievementFilter) WhereSelfCommissionUsd(p entql.OtherP) {
	f.Where(p.Field(goodachievement.FieldSelfCommissionUsd))
}

// addPredicate implements the predicateAdder interface.
func (gcaq *GoodCoinAchievementQuery) addPredicate(pred func(s *sql.Selector)) {
	gcaq.predicates = append(gcaq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GoodCoinAchievementQuery builder.
func (gcaq *GoodCoinAchievementQuery) Filter() *GoodCoinAchievementFilter {
	return &GoodCoinAchievementFilter{config: gcaq.config, predicateAdder: gcaq}
}

// addPredicate implements the predicateAdder interface.
func (m *GoodCoinAchievementMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GoodCoinAchievementMutation builder.
func (m *GoodCoinAchievementMutation) Filter() *GoodCoinAchievementFilter {
	return &GoodCoinAchievementFilter{config: m.config, predicateAdder: m}
}

// GoodCoinAchievementFilter provides a generic filtering capability at runtime for GoodCoinAchievementQuery.
type GoodCoinAchievementFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GoodCoinAchievementFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[18].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *GoodCoinAchievementFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(goodcoinachievement.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *GoodCoinAchievementFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(goodcoinachievement.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *GoodCoinAchievementFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(goodcoinachievement.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *GoodCoinAchievementFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(goodcoinachievement.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *GoodCoinAchievementFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(goodcoinachievement.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *GoodCoinAchievementFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(goodcoinachievement.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *GoodCoinAchievementFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(goodcoinachievement.FieldUserID))
}

// WhereGoodCoinTypeID applies the entql [16]byte predicate on the good_coin_type_id field.
func (f *GoodCoinAchievementFilter) WhereGoodCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(goodcoinachievement.FieldGoodCoinTypeID))
}

// WhereTotalUnits applies the entql other predicate on the total_units field.
func (f *GoodCoinAchievementFilter) WhereTotalUnits(p entql.OtherP) {
	f.Where(p.Field(goodcoinachievement.FieldTotalUnits))
}

// WhereSelfUnits applies the entql other predicate on the self_units field.
func (f *GoodCoinAchievementFilter) WhereSelfUnits(p entql.OtherP) {
	f.Where(p.Field(goodcoinachievement.FieldSelfUnits))
}

// WhereTotalAmountUsd applies the entql other predicate on the total_amount_usd field.
func (f *GoodCoinAchievementFilter) WhereTotalAmountUsd(p entql.OtherP) {
	f.Where(p.Field(goodcoinachievement.FieldTotalAmountUsd))
}

// WhereSelfAmountUsd applies the entql other predicate on the self_amount_usd field.
func (f *GoodCoinAchievementFilter) WhereSelfAmountUsd(p entql.OtherP) {
	f.Where(p.Field(goodcoinachievement.FieldSelfAmountUsd))
}

// WhereTotalCommissionUsd applies the entql other predicate on the total_commission_usd field.
func (f *GoodCoinAchievementFilter) WhereTotalCommissionUsd(p entql.OtherP) {
	f.Where(p.Field(goodcoinachievement.FieldTotalCommissionUsd))
}

// WhereSelfCommissionUsd applies the entql other predicate on the self_commission_usd field.
func (f *GoodCoinAchievementFilter) WhereSelfCommissionUsd(p entql.OtherP) {
	f.Where(p.Field(goodcoinachievement.FieldSelfCommissionUsd))
}

// addPredicate implements the predicateAdder interface.
func (icq *InvitationCodeQuery) addPredicate(pred func(s *sql.Selector)) {
	icq.predicates = append(icq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the InvitationCodeQuery builder.
func (icq *InvitationCodeQuery) Filter() *InvitationCodeFilter {
	return &InvitationCodeFilter{config: icq.config, predicateAdder: icq}
}

// addPredicate implements the predicateAdder interface.
func (m *InvitationCodeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the InvitationCodeMutation builder.
func (m *InvitationCodeMutation) Filter() *InvitationCodeFilter {
	return &InvitationCodeFilter{config: m.config, predicateAdder: m}
}

// InvitationCodeFilter provides a generic filtering capability at runtime for InvitationCodeQuery.
type InvitationCodeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *InvitationCodeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[19].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *InvitationCodeFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(invitationcode.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *InvitationCodeFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(invitationcode.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *InvitationCodeFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(invitationcode.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *InvitationCodeFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(invitationcode.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *InvitationCodeFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(invitationcode.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *InvitationCodeFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(invitationcode.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *InvitationCodeFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(invitationcode.FieldUserID))
}

// WhereInvitationCode applies the entql string predicate on the invitation_code field.
func (f *InvitationCodeFilter) WhereInvitationCode(p entql.StringP) {
	f.Where(p.Field(invitationcode.FieldInvitationCode))
}

// WhereDisabled applies the entql bool predicate on the disabled field.
func (f *InvitationCodeFilter) WhereDisabled(p entql.BoolP) {
	f.Where(p.Field(invitationcode.FieldDisabled))
}

// addPredicate implements the predicateAdder interface.
func (opsq *OrderPaymentStatementQuery) addPredicate(pred func(s *sql.Selector)) {
	opsq.predicates = append(opsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderPaymentStatementQuery builder.
func (opsq *OrderPaymentStatementQuery) Filter() *OrderPaymentStatementFilter {
	return &OrderPaymentStatementFilter{config: opsq.config, predicateAdder: opsq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderPaymentStatementMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderPaymentStatementMutation builder.
func (m *OrderPaymentStatementMutation) Filter() *OrderPaymentStatementFilter {
	return &OrderPaymentStatementFilter{config: m.config, predicateAdder: m}
}

// OrderPaymentStatementFilter provides a generic filtering capability at runtime for OrderPaymentStatementQuery.
type OrderPaymentStatementFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrderPaymentStatementFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[20].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *OrderPaymentStatementFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(orderpaymentstatement.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *OrderPaymentStatementFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(orderpaymentstatement.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *OrderPaymentStatementFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(orderpaymentstatement.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *OrderPaymentStatementFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(orderpaymentstatement.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *OrderPaymentStatementFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(orderpaymentstatement.FieldEntID))
}

// WhereStatementID applies the entql [16]byte predicate on the statement_id field.
func (f *OrderPaymentStatementFilter) WhereStatementID(p entql.ValueP) {
	f.Where(p.Field(orderpaymentstatement.FieldStatementID))
}

// WherePaymentCoinTypeID applies the entql [16]byte predicate on the payment_coin_type_id field.
func (f *OrderPaymentStatementFilter) WherePaymentCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(orderpaymentstatement.FieldPaymentCoinTypeID))
}

// WhereAmount applies the entql other predicate on the amount field.
func (f *OrderPaymentStatementFilter) WhereAmount(p entql.OtherP) {
	f.Where(p.Field(orderpaymentstatement.FieldAmount))
}

// WhereCommissionAmount applies the entql other predicate on the commission_amount field.
func (f *OrderPaymentStatementFilter) WhereCommissionAmount(p entql.OtherP) {
	f.Where(p.Field(orderpaymentstatement.FieldCommissionAmount))
}

// addPredicate implements the predicateAdder interface.
func (osq *OrderStatementQuery) addPredicate(pred func(s *sql.Selector)) {
	osq.predicates = append(osq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderStatementQuery builder.
func (osq *OrderStatementQuery) Filter() *OrderStatementFilter {
	return &OrderStatementFilter{config: osq.config, predicateAdder: osq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderStatementMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderStatementMutation builder.
func (m *OrderStatementMutation) Filter() *OrderStatementFilter {
	return &OrderStatementFilter{config: m.config, predicateAdder: m}
}

// OrderStatementFilter provides a generic filtering capability at runtime for OrderStatementQuery.
type OrderStatementFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrderStatementFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[21].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *OrderStatementFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(orderstatement.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *OrderStatementFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(orderstatement.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *OrderStatementFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(orderstatement.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *OrderStatementFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(orderstatement.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *OrderStatementFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(orderstatement.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *OrderStatementFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(orderstatement.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *OrderStatementFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(orderstatement.FieldUserID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *OrderStatementFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(orderstatement.FieldGoodID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *OrderStatementFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(orderstatement.FieldAppGoodID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *OrderStatementFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(orderstatement.FieldOrderID))
}

// WhereDirectContributorID applies the entql [16]byte predicate on the direct_contributor_id field.
func (f *OrderStatementFilter) WhereDirectContributorID(p entql.ValueP) {
	f.Where(p.Field(orderstatement.FieldDirectContributorID))
}

// WhereOrderUserID applies the entql [16]byte predicate on the order_user_id field.
func (f *OrderStatementFilter) WhereOrderUserID(p entql.ValueP) {
	f.Where(p.Field(orderstatement.FieldOrderUserID))
}

// WhereGoodCoinTypeID applies the entql [16]byte predicate on the good_coin_type_id field.
func (f *OrderStatementFilter) WhereGoodCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(orderstatement.FieldGoodCoinTypeID))
}

// WhereUnits applies the entql other predicate on the units field.
func (f *OrderStatementFilter) WhereUnits(p entql.OtherP) {
	f.Where(p.Field(orderstatement.FieldUnits))
}

// WhereGoodValueUsd applies the entql other predicate on the good_value_usd field.
func (f *OrderStatementFilter) WhereGoodValueUsd(p entql.OtherP) {
	f.Where(p.Field(orderstatement.FieldGoodValueUsd))
}

// WherePaymentAmountUsd applies the entql other predicate on the payment_amount_usd field.
func (f *OrderStatementFilter) WherePaymentAmountUsd(p entql.OtherP) {
	f.Where(p.Field(orderstatement.FieldPaymentAmountUsd))
}

// WhereCommissionAmountUsd applies the entql other predicate on the commission_amount_usd field.
func (f *OrderStatementFilter) WhereCommissionAmountUsd(p entql.OtherP) {
	f.Where(p.Field(orderstatement.FieldCommissionAmountUsd))
}

// WhereAppConfigID applies the entql [16]byte predicate on the app_config_id field.
func (f *OrderStatementFilter) WhereAppConfigID(p entql.ValueP) {
	f.Where(p.Field(orderstatement.FieldAppConfigID))
}

// WhereCommissionConfigID applies the entql [16]byte predicate on the commission_config_id field.
func (f *OrderStatementFilter) WhereCommissionConfigID(p entql.ValueP) {
	f.Where(p.Field(orderstatement.FieldCommissionConfigID))
}

// WhereCommissionConfigType applies the entql string predicate on the commission_config_type field.
func (f *OrderStatementFilter) WhereCommissionConfigType(p entql.StringP) {
	f.Where(p.Field(orderstatement.FieldCommissionConfigType))
}

// addPredicate implements the predicateAdder interface.
func (rq *RegistrationQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RegistrationQuery builder.
func (rq *RegistrationQuery) Filter() *RegistrationFilter {
	return &RegistrationFilter{config: rq.config, predicateAdder: rq}
}

// addPredicate implements the predicateAdder interface.
func (m *RegistrationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RegistrationMutation builder.
func (m *RegistrationMutation) Filter() *RegistrationFilter {
	return &RegistrationFilter{config: m.config, predicateAdder: m}
}

// RegistrationFilter provides a generic filtering capability at runtime for RegistrationQuery.
type RegistrationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RegistrationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[22].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *RegistrationFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(registration.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *RegistrationFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(registration.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *RegistrationFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(registration.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *RegistrationFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(registration.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *RegistrationFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(registration.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *RegistrationFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(registration.FieldAppID))
}

// WhereInviterID applies the entql [16]byte predicate on the inviter_id field.
func (f *RegistrationFilter) WhereInviterID(p entql.ValueP) {
	f.Where(p.Field(registration.FieldInviterID))
}

// WhereInviteeID applies the entql [16]byte predicate on the invitee_id field.
func (f *RegistrationFilter) WhereInviteeID(p entql.ValueP) {
	f.Where(p.Field(registration.FieldInviteeID))
}

// addPredicate implements the predicateAdder interface.
func (sq *StatementQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the StatementQuery builder.
func (sq *StatementQuery) Filter() *StatementFilter {
	return &StatementFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *StatementMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the StatementMutation builder.
func (m *StatementMutation) Filter() *StatementFilter {
	return &StatementFilter{config: m.config, predicateAdder: m}
}

// StatementFilter provides a generic filtering capability at runtime for StatementQuery.
type StatementFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *StatementFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[23].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *StatementFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(statement.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *StatementFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(statement.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *StatementFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(statement.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *StatementFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(statement.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *StatementFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *StatementFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *StatementFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldUserID))
}

// WhereDirectContributorID applies the entql [16]byte predicate on the direct_contributor_id field.
func (f *StatementFilter) WhereDirectContributorID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldDirectContributorID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *StatementFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldGoodID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *StatementFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldAppGoodID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *StatementFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldOrderID))
}

// WhereSelfOrder applies the entql bool predicate on the self_order field.
func (f *StatementFilter) WhereSelfOrder(p entql.BoolP) {
	f.Where(p.Field(statement.FieldSelfOrder))
}

// WherePaymentID applies the entql [16]byte predicate on the payment_id field.
func (f *StatementFilter) WherePaymentID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldPaymentID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *StatementFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldCoinTypeID))
}

// WherePaymentCoinTypeID applies the entql [16]byte predicate on the payment_coin_type_id field.
func (f *StatementFilter) WherePaymentCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldPaymentCoinTypeID))
}

// WherePaymentCoinUsdCurrency applies the entql other predicate on the payment_coin_usd_currency field.
func (f *StatementFilter) WherePaymentCoinUsdCurrency(p entql.OtherP) {
	f.Where(p.Field(statement.FieldPaymentCoinUsdCurrency))
}

// WhereUnits applies the entql uint32 predicate on the units field.
func (f *StatementFilter) WhereUnits(p entql.Uint32P) {
	f.Where(p.Field(statement.FieldUnits))
}

// WhereUnitsV1 applies the entql other predicate on the units_v1 field.
func (f *StatementFilter) WhereUnitsV1(p entql.OtherP) {
	f.Where(p.Field(statement.FieldUnitsV1))
}

// WhereAmount applies the entql other predicate on the amount field.
func (f *StatementFilter) WhereAmount(p entql.OtherP) {
	f.Where(p.Field(statement.FieldAmount))
}

// WhereUsdAmount applies the entql other predicate on the usd_amount field.
func (f *StatementFilter) WhereUsdAmount(p entql.OtherP) {
	f.Where(p.Field(statement.FieldUsdAmount))
}

// WhereCommission applies the entql other predicate on the commission field.
func (f *StatementFilter) WhereCommission(p entql.OtherP) {
	f.Where(p.Field(statement.FieldCommission))
}

// WhereAppConfigID applies the entql [16]byte predicate on the app_config_id field.
func (f *StatementFilter) WhereAppConfigID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldAppConfigID))
}

// WhereCommissionConfigID applies the entql [16]byte predicate on the commission_config_id field.
func (f *StatementFilter) WhereCommissionConfigID(p entql.ValueP) {
	f.Where(p.Field(statement.FieldCommissionConfigID))
}

// WhereCommissionConfigType applies the entql string predicate on the commission_config_type field.
func (f *StatementFilter) WhereCommissionConfigType(p entql.StringP) {
	f.Where(p.Field(statement.FieldCommissionConfigType))
}

// addPredicate implements the predicateAdder interface.
func (tcq *TaskConfigQuery) addPredicate(pred func(s *sql.Selector)) {
	tcq.predicates = append(tcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TaskConfigQuery builder.
func (tcq *TaskConfigQuery) Filter() *TaskConfigFilter {
	return &TaskConfigFilter{config: tcq.config, predicateAdder: tcq}
}

// addPredicate implements the predicateAdder interface.
func (m *TaskConfigMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TaskConfigMutation builder.
func (m *TaskConfigMutation) Filter() *TaskConfigFilter {
	return &TaskConfigFilter{config: m.config, predicateAdder: m}
}

// TaskConfigFilter provides a generic filtering capability at runtime for TaskConfigQuery.
type TaskConfigFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TaskConfigFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[24].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *TaskConfigFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(taskconfig.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *TaskConfigFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(taskconfig.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *TaskConfigFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(taskconfig.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *TaskConfigFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(taskconfig.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *TaskConfigFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(taskconfig.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *TaskConfigFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(taskconfig.FieldAppID))
}

// WhereEventID applies the entql [16]byte predicate on the event_id field.
func (f *TaskConfigFilter) WhereEventID(p entql.ValueP) {
	f.Where(p.Field(taskconfig.FieldEventID))
}

// WhereTaskType applies the entql string predicate on the task_type field.
func (f *TaskConfigFilter) WhereTaskType(p entql.StringP) {
	f.Where(p.Field(taskconfig.FieldTaskType))
}

// WhereName applies the entql string predicate on the name field.
func (f *TaskConfigFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(taskconfig.FieldName))
}

// WhereTaskDesc applies the entql string predicate on the task_desc field.
func (f *TaskConfigFilter) WhereTaskDesc(p entql.StringP) {
	f.Where(p.Field(taskconfig.FieldTaskDesc))
}

// WhereStepGuide applies the entql string predicate on the step_guide field.
func (f *TaskConfigFilter) WhereStepGuide(p entql.StringP) {
	f.Where(p.Field(taskconfig.FieldStepGuide))
}

// WhereRecommendMessage applies the entql string predicate on the recommend_message field.
func (f *TaskConfigFilter) WhereRecommendMessage(p entql.StringP) {
	f.Where(p.Field(taskconfig.FieldRecommendMessage))
}

// WhereIndex applies the entql uint32 predicate on the index field.
func (f *TaskConfigFilter) WhereIndex(p entql.Uint32P) {
	f.Where(p.Field(taskconfig.FieldIndex))
}

// WhereLastTaskID applies the entql [16]byte predicate on the last_task_id field.
func (f *TaskConfigFilter) WhereLastTaskID(p entql.ValueP) {
	f.Where(p.Field(taskconfig.FieldLastTaskID))
}

// WhereMaxRewardCount applies the entql uint32 predicate on the max_reward_count field.
func (f *TaskConfigFilter) WhereMaxRewardCount(p entql.Uint32P) {
	f.Where(p.Field(taskconfig.FieldMaxRewardCount))
}

// WhereCooldownSecond applies the entql uint32 predicate on the cooldown_second field.
func (f *TaskConfigFilter) WhereCooldownSecond(p entql.Uint32P) {
	f.Where(p.Field(taskconfig.FieldCooldownSecond))
}

// WhereIntervalReset applies the entql bool predicate on the interval_reset field.
func (f *TaskConfigFilter) WhereIntervalReset(p entql.BoolP) {
	f.Where(p.Field(taskconfig.FieldIntervalReset))
}

// WhereIntervalResetSecond applies the entql uint32 predicate on the interval_reset_second field.
func (f *TaskConfigFilter) WhereIntervalResetSecond(p entql.Uint32P) {
	f.Where(p.Field(taskconfig.FieldIntervalResetSecond))
}

// WhereMaxIntervalRewardCount applies the entql uint32 predicate on the max_interval_reward_count field.
func (f *TaskConfigFilter) WhereMaxIntervalRewardCount(p entql.Uint32P) {
	f.Where(p.Field(taskconfig.FieldMaxIntervalRewardCount))
}

// addPredicate implements the predicateAdder interface.
func (tuq *TaskUserQuery) addPredicate(pred func(s *sql.Selector)) {
	tuq.predicates = append(tuq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TaskUserQuery builder.
func (tuq *TaskUserQuery) Filter() *TaskUserFilter {
	return &TaskUserFilter{config: tuq.config, predicateAdder: tuq}
}

// addPredicate implements the predicateAdder interface.
func (m *TaskUserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TaskUserMutation builder.
func (m *TaskUserMutation) Filter() *TaskUserFilter {
	return &TaskUserFilter{config: m.config, predicateAdder: m}
}

// TaskUserFilter provides a generic filtering capability at runtime for TaskUserQuery.
type TaskUserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TaskUserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[25].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *TaskUserFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(taskuser.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *TaskUserFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(taskuser.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *TaskUserFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(taskuser.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *TaskUserFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(taskuser.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *TaskUserFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(taskuser.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *TaskUserFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(taskuser.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *TaskUserFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(taskuser.FieldUserID))
}

// WhereTaskID applies the entql [16]byte predicate on the task_id field.
func (f *TaskUserFilter) WhereTaskID(p entql.ValueP) {
	f.Where(p.Field(taskuser.FieldTaskID))
}

// WhereEventID applies the entql [16]byte predicate on the event_id field.
func (f *TaskUserFilter) WhereEventID(p entql.ValueP) {
	f.Where(p.Field(taskuser.FieldEventID))
}

// WhereTaskState applies the entql string predicate on the task_state field.
func (f *TaskUserFilter) WhereTaskState(p entql.StringP) {
	f.Where(p.Field(taskuser.FieldTaskState))
}

// WhereRewardState applies the entql string predicate on the reward_state field.
func (f *TaskUserFilter) WhereRewardState(p entql.StringP) {
	f.Where(p.Field(taskuser.FieldRewardState))
}

// addPredicate implements the predicateAdder interface.
func (ucrq *UserCoinRewardQuery) addPredicate(pred func(s *sql.Selector)) {
	ucrq.predicates = append(ucrq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserCoinRewardQuery builder.
func (ucrq *UserCoinRewardQuery) Filter() *UserCoinRewardFilter {
	return &UserCoinRewardFilter{config: ucrq.config, predicateAdder: ucrq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserCoinRewardMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserCoinRewardMutation builder.
func (m *UserCoinRewardMutation) Filter() *UserCoinRewardFilter {
	return &UserCoinRewardFilter{config: m.config, predicateAdder: m}
}

// UserCoinRewardFilter provides a generic filtering capability at runtime for UserCoinRewardQuery.
type UserCoinRewardFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserCoinRewardFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[26].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *UserCoinRewardFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(usercoinreward.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *UserCoinRewardFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(usercoinreward.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *UserCoinRewardFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(usercoinreward.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *UserCoinRewardFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(usercoinreward.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *UserCoinRewardFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(usercoinreward.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *UserCoinRewardFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(usercoinreward.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *UserCoinRewardFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(usercoinreward.FieldUserID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *UserCoinRewardFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(usercoinreward.FieldCoinTypeID))
}

// WhereCoinRewards applies the entql other predicate on the coin_rewards field.
func (f *UserCoinRewardFilter) WhereCoinRewards(p entql.OtherP) {
	f.Where(p.Field(usercoinreward.FieldCoinRewards))
}

// addPredicate implements the predicateAdder interface.
func (urq *UserRewardQuery) addPredicate(pred func(s *sql.Selector)) {
	urq.predicates = append(urq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserRewardQuery builder.
func (urq *UserRewardQuery) Filter() *UserRewardFilter {
	return &UserRewardFilter{config: urq.config, predicateAdder: urq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserRewardMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserRewardMutation builder.
func (m *UserRewardMutation) Filter() *UserRewardFilter {
	return &UserRewardFilter{config: m.config, predicateAdder: m}
}

// UserRewardFilter provides a generic filtering capability at runtime for UserRewardQuery.
type UserRewardFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserRewardFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[27].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *UserRewardFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(userreward.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *UserRewardFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(userreward.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *UserRewardFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(userreward.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *UserRewardFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(userreward.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *UserRewardFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(userreward.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *UserRewardFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(userreward.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *UserRewardFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(userreward.FieldUserID))
}

// WhereActionCredits applies the entql other predicate on the action_credits field.
func (f *UserRewardFilter) WhereActionCredits(p entql.OtherP) {
	f.Where(p.Field(userreward.FieldActionCredits))
}

// WhereCouponAmount applies the entql other predicate on the coupon_amount field.
func (f *UserRewardFilter) WhereCouponAmount(p entql.OtherP) {
	f.Where(p.Field(userreward.FieldCouponAmount))
}

// WhereCouponCashableAmount applies the entql other predicate on the coupon_cashable_amount field.
func (f *UserRewardFilter) WhereCouponCashableAmount(p entql.OtherP) {
	f.Where(p.Field(userreward.FieldCouponCashableAmount))
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/goodcoinachievement"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// GoodCoinAchievement is the model entity for the GoodCoinAchievement schema.
type GoodCoinAchievement struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// GoodCoinTypeID holds the value of the "good_coin_type_id" field.
	GoodCoinTypeID uuid.UUID `json:"good_coin_type_id,omitempty"`
	// TotalUnits holds the value of the "total_units" field.
	TotalUnits decimal.Decimal `json:"total_units,omitempty"`
	// SelfUnits holds the value of the "self_units" field.
	SelfUnits decimal.Decimal `json:"self_units,omitempty"`
	// TotalAmountUsd holds the value of the "total_amount_usd" field.
	TotalAmountUsd decimal.Decimal `json:"total_amount_usd,omitempty"`
	// SelfAmountUsd holds the value of the "self_amount_usd" field.
	SelfAmountUsd decimal.Decimal `json:"self_amount_usd,omitempty"`
	// TotalCommissionUsd holds the value of the "total_commission_usd" field.
	TotalCommissionUsd decimal.Decimal `json:"total_commission_usd,omitempty"`
	// SelfCommissionUsd holds the value of the "self_commission_usd" field.
	SelfCommissionUsd decimal.Decimal `json:"self_commission_usd,omitempty"`
	selectValues      sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoodCoinAchievement) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case goodcoinachievement.FieldTotalUnits, goodcoinachievement.FieldSelfUnits, goodcoinachievement.FieldTotalAmountUsd, goodcoinachievement.FieldSelfAmountUsd, goodcoinachievement.FieldTotalCommissionUsd, goodcoinachievement.FieldSelfCommissionUsd:
			values[i] = new(decimal.Decimal)
		case goodcoinachievement.FieldID, goodcoinachievement.FieldCreatedAt, goodcoinachievement.FieldUpdatedAt, goodcoinachievement.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case goodcoinachievement.FieldEntID, goodcoinachievement.FieldAppID, goodcoinachievement.FieldUserID, goodcoinachievement.FieldGoodCoinTypeID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoodCoinAchievement fields.
func (gca *GoodCoinAchievement) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goodcoinachievement.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gca.ID = uint32(value.Int64)
		case goodcoinachievement.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gca.CreatedAt = uint32(value.Int64)
			}
		case goodcoinachievement.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gca.UpdatedAt = uint32(value.Int64)
			}
		case goodcoinachievement.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				gca.DeletedAt = uint32(value.Int64)
			}
		case goodcoinachievement.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				gca.EntID = *value
			}
		case goodcoinachievement.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				gca.AppID = *value
			}
		case goodcoinachievement.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				gca.UserID = *value
			}
		case goodcoinachievement.FieldGoodCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_coin_type_id", values[i])
			} else if value != nil {
				gca.GoodCoinTypeID = *value
			}
		case goodcoinachievement.FieldTotalUnits:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field total_units", values[i])
			} else if value != nil {
				gca.TotalUnits = *value
			}
		case goodcoinachievement.FieldSelfUnits:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field self_units", values[i])
			} else if value != nil {
				gca.SelfUnits = *value
			}
		case goodcoinachievement.FieldTotalAmountUsd:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field total_amount_usd", values[i])
			} else if value != nil {
				gca.TotalAmountUsd = *value
			}
		case goodcoinachievement.FieldSelfAmountUsd:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field self_amount_usd", values[i])
			} else if value != nil {
				gca.SelfAmountUsd = *value
			}
		case goodcoinachievement.FieldTotalCommissionUsd:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field total_commission_usd", values[i])
			} else if value != nil {
				gca.TotalCommissionUsd = *value
			}
		case goodcoinachievement.FieldSelfCommissionUsd:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field self_commission_usd", values[i])
			} else if value != nil {
				gca.SelfCommissionUsd = *value
			}
		default:
			gca.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GoodCoinAchievement.
// This includes values selected through modifiers, order, etc.
func (gca *GoodCoinAchievement) Value(name string) (ent.Value, error) {
	return gca.selectValues.Get(name)
}

// Update returns a builder for updating this GoodCoinAchievement.
// Note that you need to call GoodCoinAchievement.Unwrap() before calling this method if this GoodCoinAchievement
// was returned from a transaction, and the transaction was committed or rolled back.
func (gca *GoodCoinAchievement) Update() *GoodCoinAchievementUpdateOne {
	return NewGoodCoinAchievementClient(gca.config).UpdateOne(gca)
}

// Unwrap unwraps the GoodCoinAchievement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gca *GoodCoinAchievement) Unwrap() *GoodCoinAchievement {
	_tx, ok := gca.config.driver.(*txDriver)
	if !ok {
		panic("generated: GoodCoinAchievement is not a transactional entity")
	}
	gca.config.driver = _tx.drv
	return gca
}

// String implements the fmt.Stringer.
func (gca *GoodCoinAchievement) String() string {
	var builder strings.Builder
	builder.WriteString("GoodCoinAchievement(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gca.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", gca.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", gca.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", gca.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", gca.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", gca.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", gca.UserID))
	builder.WriteString(", ")
	builder.WriteString("good_coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", gca.GoodCoinTypeID))
	builder.WriteString(", ")
	builder.WriteString("total_units=")
	builder.WriteString(fmt.Sprintf("%v", gca.TotalUnits))
	builder.WriteString(", ")
	builder.WriteString("self_units=")
	builder.WriteString(fmt.Sprintf("%v", gca.SelfUnits))
	builder.WriteString(", ")
	builder.WriteString("total_amount_usd=")
	builder.WriteString(fmt.Sprintf("%v", gca.TotalAmountUsd))
	builder.WriteString(", ")
	builder.WriteString("self_amount_usd=")
	builder.WriteString(fmt.Sprintf("%v", gca.SelfAmountUsd))
	builder.WriteString(", ")
	builder.WriteString("total_commission_usd=")
	builder.WriteString(fmt.Sprintf("%v", gca.TotalCommissionUsd))
	builder.WriteString(", ")
	builder.WriteString("self_commission_usd=")
	builder.WriteString(fmt.Sprintf("%v", gca.SelfCommissionUsd))
	builder.WriteByte(')')
	return builder.String()
}

// GoodCoinAchievements is a parsable slice of GoodCoinAchievement.
type GoodCoinAchievements []*GoodCoinAchievement

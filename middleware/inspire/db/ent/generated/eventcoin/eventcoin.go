// Code generated by ent, DO NOT EDIT.

package eventcoin

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the eventcoin type in the database.
	Label = "event_coin"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldEventID holds the string denoting the event_id field in the database.
	FieldEventID = "event_id"
	// FieldCoinConfigID holds the string denoting the coin_config_id field in the database.
	FieldCoinConfigID = "coin_config_id"
	// FieldCoinValue holds the string denoting the coin_value field in the database.
	FieldCoinValue = "coin_value"
	// FieldCoinPerUsd holds the string denoting the coin_per_usd field in the database.
	FieldCoinPerUsd = "coin_per_usd"
	// Table holds the table name of the eventcoin in the database.
	Table = "event_coins"
)

// Columns holds all SQL columns for eventcoin fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldEntID,
	FieldAppID,
	FieldEventID,
	FieldCoinConfigID,
	FieldCoinValue,
	FieldCoinPerUsd,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() uint32
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() uint32
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() uint32
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt func() uint32
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultAppID holds the default value on creation for the "app_id" field.
	DefaultAppID func() uuid.UUID
	// DefaultEventID holds the default value on creation for the "event_id" field.
	DefaultEventID func() uuid.UUID
	// DefaultCoinConfigID holds the default value on creation for the "coin_config_id" field.
	DefaultCoinConfigID func() uuid.UUID
	// DefaultCoinValue holds the default value on creation for the "coin_value" field.
	DefaultCoinValue decimal.Decimal
	// DefaultCoinPerUsd holds the default value on creation for the "coin_per_usd" field.
	DefaultCoinPerUsd decimal.Decimal
)

// OrderOption defines the ordering options for the EventCoin queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByAppID orders the results by the app_id field.
func ByAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppID, opts...).ToFunc()
}

// ByEventID orders the results by the event_id field.
func ByEventID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventID, opts...).ToFunc()
}

// ByCoinConfigID orders the results by the coin_config_id field.
func ByCoinConfigID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoinConfigID, opts...).ToFunc()
}

// ByCoinValue orders the results by the coin_value field.
func ByCoinValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoinValue, opts...).ToFunc()
}

// ByCoinPerUsd orders the results by the coin_per_usd field.
func ByCoinPerUsd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoinPerUsd, opts...).ToFunc()
}

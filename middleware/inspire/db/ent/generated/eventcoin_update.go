// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/eventcoin"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// EventCoinUpdate is the builder for updating EventCoin entities.
type EventCoinUpdate struct {
	config
	hooks     []Hook
	mutation  *EventCoinMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EventCoinUpdate builder.
func (ecu *EventCoinUpdate) Where(ps ...predicate.EventCoin) *EventCoinUpdate {
	ecu.mutation.Where(ps...)
	return ecu
}

// SetCreatedAt sets the "created_at" field.
func (ecu *EventCoinUpdate) SetCreatedAt(u uint32) *EventCoinUpdate {
	ecu.mutation.ResetCreatedAt()
	ecu.mutation.SetCreatedAt(u)
	return ecu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ecu *EventCoinUpdate) SetNillableCreatedAt(u *uint32) *EventCoinUpdate {
	if u != nil {
		ecu.SetCreatedAt(*u)
	}
	return ecu
}

// AddCreatedAt adds u to the "created_at" field.
func (ecu *EventCoinUpdate) AddCreatedAt(u int32) *EventCoinUpdate {
	ecu.mutation.AddCreatedAt(u)
	return ecu
}

// SetUpdatedAt sets the "updated_at" field.
func (ecu *EventCoinUpdate) SetUpdatedAt(u uint32) *EventCoinUpdate {
	ecu.mutation.ResetUpdatedAt()
	ecu.mutation.SetUpdatedAt(u)
	return ecu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ecu *EventCoinUpdate) AddUpdatedAt(u int32) *EventCoinUpdate {
	ecu.mutation.AddUpdatedAt(u)
	return ecu
}

// SetDeletedAt sets the "deleted_at" field.
func (ecu *EventCoinUpdate) SetDeletedAt(u uint32) *EventCoinUpdate {
	ecu.mutation.ResetDeletedAt()
	ecu.mutation.SetDeletedAt(u)
	return ecu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ecu *EventCoinUpdate) SetNillableDeletedAt(u *uint32) *EventCoinUpdate {
	if u != nil {
		ecu.SetDeletedAt(*u)
	}
	return ecu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ecu *EventCoinUpdate) AddDeletedAt(u int32) *EventCoinUpdate {
	ecu.mutation.AddDeletedAt(u)
	return ecu
}

// SetEntID sets the "ent_id" field.
func (ecu *EventCoinUpdate) SetEntID(u uuid.UUID) *EventCoinUpdate {
	ecu.mutation.SetEntID(u)
	return ecu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ecu *EventCoinUpdate) SetNillableEntID(u *uuid.UUID) *EventCoinUpdate {
	if u != nil {
		ecu.SetEntID(*u)
	}
	return ecu
}

// SetAppID sets the "app_id" field.
func (ecu *EventCoinUpdate) SetAppID(u uuid.UUID) *EventCoinUpdate {
	ecu.mutation.SetAppID(u)
	return ecu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ecu *EventCoinUpdate) SetNillableAppID(u *uuid.UUID) *EventCoinUpdate {
	if u != nil {
		ecu.SetAppID(*u)
	}
	return ecu
}

// ClearAppID clears the value of the "app_id" field.
func (ecu *EventCoinUpdate) ClearAppID() *EventCoinUpdate {
	ecu.mutation.ClearAppID()
	return ecu
}

// SetEventID sets the "event_id" field.
func (ecu *EventCoinUpdate) SetEventID(u uuid.UUID) *EventCoinUpdate {
	ecu.mutation.SetEventID(u)
	return ecu
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (ecu *EventCoinUpdate) SetNillableEventID(u *uuid.UUID) *EventCoinUpdate {
	if u != nil {
		ecu.SetEventID(*u)
	}
	return ecu
}

// ClearEventID clears the value of the "event_id" field.
func (ecu *EventCoinUpdate) ClearEventID() *EventCoinUpdate {
	ecu.mutation.ClearEventID()
	return ecu
}

// SetCoinConfigID sets the "coin_config_id" field.
func (ecu *EventCoinUpdate) SetCoinConfigID(u uuid.UUID) *EventCoinUpdate {
	ecu.mutation.SetCoinConfigID(u)
	return ecu
}

// SetNillableCoinConfigID sets the "coin_config_id" field if the given value is not nil.
func (ecu *EventCoinUpdate) SetNillableCoinConfigID(u *uuid.UUID) *EventCoinUpdate {
	if u != nil {
		ecu.SetCoinConfigID(*u)
	}
	return ecu
}

// ClearCoinConfigID clears the value of the "coin_config_id" field.
func (ecu *EventCoinUpdate) ClearCoinConfigID() *EventCoinUpdate {
	ecu.mutation.ClearCoinConfigID()
	return ecu
}

// SetCoinValue sets the "coin_value" field.
func (ecu *EventCoinUpdate) SetCoinValue(d decimal.Decimal) *EventCoinUpdate {
	ecu.mutation.SetCoinValue(d)
	return ecu
}

// SetNillableCoinValue sets the "coin_value" field if the given value is not nil.
func (ecu *EventCoinUpdate) SetNillableCoinValue(d *decimal.Decimal) *EventCoinUpdate {
	if d != nil {
		ecu.SetCoinValue(*d)
	}
	return ecu
}

// ClearCoinValue clears the value of the "coin_value" field.
func (ecu *EventCoinUpdate) ClearCoinValue() *EventCoinUpdate {
	ecu.mutation.ClearCoinValue()
	return ecu
}

// SetCoinPerUsd sets the "coin_per_usd" field.
func (ecu *EventCoinUpdate) SetCoinPerUsd(d decimal.Decimal) *EventCoinUpdate {
	ecu.mutation.SetCoinPerUsd(d)
	return ecu
}

// SetNillableCoinPerUsd sets the "coin_per_usd" field if the given value is not nil.
func (ecu *EventCoinUpdate) SetNillableCoinPerUsd(d *decimal.Decimal) *EventCoinUpdate {
	if d != nil {
		ecu.SetCoinPerUsd(*d)
	}
	return ecu
}

// ClearCoinPerUsd clears the value of the "coin_per_usd" field.
func (ecu *EventCoinUpdate) ClearCoinPerUsd() *EventCoinUpdate {
	ecu.mutation.ClearCoinPerUsd()
	return ecu
}

// Mutation returns the EventCoinMutation object of the builder.
func (ecu *EventCoinUpdate) Mutation() *EventCoinMutation {
	return ecu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ecu *EventCoinUpdate) Save(ctx context.Context) (int, error) {
	ecu.defaults()
	return withHooks(ctx, ecu.sqlSave, ecu.mutation, ecu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecu *EventCoinUpdate) SaveX(ctx context.Context) int {
	affected, err := ecu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ecu *EventCoinUpdate) Exec(ctx context.Context) error {
	_, err := ecu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecu *EventCoinUpdate) ExecX(ctx context.Context) {
	if err := ecu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ecu *EventCoinUpdate) defaults() {
	if _, ok := ecu.mutation.UpdatedAt(); !ok {
		v := eventcoin.UpdateDefaultUpdatedAt()
		ecu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ecu *EventCoinUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EventCoinUpdate {
	ecu.modifiers = append(ecu.modifiers, modifiers...)
	return ecu
}

func (ecu *EventCoinUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(eventcoin.Table, eventcoin.Columns, sqlgraph.NewFieldSpec(eventcoin.FieldID, field.TypeUint32))
	if ps := ecu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecu.mutation.CreatedAt(); ok {
		_spec.SetField(eventcoin.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ecu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(eventcoin.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ecu.mutation.UpdatedAt(); ok {
		_spec.SetField(eventcoin.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ecu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(eventcoin.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ecu.mutation.DeletedAt(); ok {
		_spec.SetField(eventcoin.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ecu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(eventcoin.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ecu.mutation.EntID(); ok {
		_spec.SetField(eventcoin.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := ecu.mutation.AppID(); ok {
		_spec.SetField(eventcoin.FieldAppID, field.TypeUUID, value)
	}
	if ecu.mutation.AppIDCleared() {
		_spec.ClearField(eventcoin.FieldAppID, field.TypeUUID)
	}
	if value, ok := ecu.mutation.EventID(); ok {
		_spec.SetField(eventcoin.FieldEventID, field.TypeUUID, value)
	}
	if ecu.mutation.EventIDCleared() {
		_spec.ClearField(eventcoin.FieldEventID, field.TypeUUID)
	}
	if value, ok := ecu.mutation.CoinConfigID(); ok {
		_spec.SetField(eventcoin.FieldCoinConfigID, field.TypeUUID, value)
	}
	if ecu.mutation.CoinConfigIDCleared() {
		_spec.ClearField(eventcoin.FieldCoinConfigID, field.TypeUUID)
	}
	if value, ok := ecu.mutation.CoinValue(); ok {
		_spec.SetField(eventcoin.FieldCoinValue, field.TypeOther, value)
	}
	if ecu.mutation.CoinValueCleared() {
		_spec.ClearField(eventcoin.FieldCoinValue, field.TypeOther)
	}
	if value, ok := ecu.mutation.CoinPerUsd(); ok {
		_spec.SetField(eventcoin.FieldCoinPerUsd, field.TypeOther, value)
	}
	if ecu.mutation.CoinPerUsdCleared() {
		_spec.ClearField(eventcoin.FieldCoinPerUsd, field.TypeOther)
	}
	_spec.AddModifiers(ecu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ecu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventcoin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ecu.mutation.done = true
	return n, nil
}

// EventCoinUpdateOne is the builder for updating a single EventCoin entity.
type EventCoinUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EventCoinMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (ecuo *EventCoinUpdateOne) SetCreatedAt(u uint32) *EventCoinUpdateOne {
	ecuo.mutation.ResetCreatedAt()
	ecuo.mutation.SetCreatedAt(u)
	return ecuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ecuo *EventCoinUpdateOne) SetNillableCreatedAt(u *uint32) *EventCoinUpdateOne {
	if u != nil {
		ecuo.SetCreatedAt(*u)
	}
	return ecuo
}

// AddCreatedAt adds u to the "created_at" field.
func (ecuo *EventCoinUpdateOne) AddCreatedAt(u int32) *EventCoinUpdateOne {
	ecuo.mutation.AddCreatedAt(u)
	return ecuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ecuo *EventCoinUpdateOne) SetUpdatedAt(u uint32) *EventCoinUpdateOne {
	ecuo.mutation.ResetUpdatedAt()
	ecuo.mutation.SetUpdatedAt(u)
	return ecuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ecuo *EventCoinUpdateOne) AddUpdatedAt(u int32) *EventCoinUpdateOne {
	ecuo.mutation.AddUpdatedAt(u)
	return ecuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ecuo *EventCoinUpdateOne) SetDeletedAt(u uint32) *EventCoinUpdateOne {
	ecuo.mutation.ResetDeletedAt()
	ecuo.mutation.SetDeletedAt(u)
	return ecuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ecuo *EventCoinUpdateOne) SetNillableDeletedAt(u *uint32) *EventCoinUpdateOne {
	if u != nil {
		ecuo.SetDeletedAt(*u)
	}
	return ecuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ecuo *EventCoinUpdateOne) AddDeletedAt(u int32) *EventCoinUpdateOne {
	ecuo.mutation.AddDeletedAt(u)
	return ecuo
}

// SetEntID sets the "ent_id" field.
func (ecuo *EventCoinUpdateOne) SetEntID(u uuid.UUID) *EventCoinUpdateOne {
	ecuo.mutation.SetEntID(u)
	return ecuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ecuo *EventCoinUpdateOne) SetNillableEntID(u *uuid.UUID) *EventCoinUpdateOne {
	if u != nil {
		ecuo.SetEntID(*u)
	}
	return ecuo
}

// SetAppID sets the "app_id" field.
func (ecuo *EventCoinUpdateOne) SetAppID(u uuid.UUID) *EventCoinUpdateOne {
	ecuo.mutation.SetAppID(u)
	return ecuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ecuo *EventCoinUpdateOne) SetNillableAppID(u *uuid.UUID) *EventCoinUpdateOne {
	if u != nil {
		ecuo.SetAppID(*u)
	}
	return ecuo
}

// ClearAppID clears the value of the "app_id" field.
func (ecuo *EventCoinUpdateOne) ClearAppID() *EventCoinUpdateOne {
	ecuo.mutation.ClearAppID()
	return ecuo
}

// SetEventID sets the "event_id" field.
func (ecuo *EventCoinUpdateOne) SetEventID(u uuid.UUID) *EventCoinUpdateOne {
	ecuo.mutation.SetEventID(u)
	return ecuo
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (ecuo *EventCoinUpdateOne) SetNillableEventID(u *uuid.UUID) *EventCoinUpdateOne {
	if u != nil {
		ecuo.SetEventID(*u)
	}
	return ecuo
}

// ClearEventID clears the value of the "event_id" field.
func (ecuo *EventCoinUpdateOne) ClearEventID() *EventCoinUpdateOne {
	ecuo.mutation.ClearEventID()
	return ecuo
}

// SetCoinConfigID sets the "coin_config_id" field.
func (ecuo *EventCoinUpdateOne) SetCoinConfigID(u uuid.UUID) *EventCoinUpdateOne {
	ecuo.mutation.SetCoinConfigID(u)
	return ecuo
}

// SetNillableCoinConfigID sets the "coin_config_id" field if the given value is not nil.
func (ecuo *EventCoinUpdateOne) SetNillableCoinConfigID(u *uuid.UUID) *EventCoinUpdateOne {
	if u != nil {
		ecuo.SetCoinConfigID(*u)
	}
	return ecuo
}

// ClearCoinConfigID clears the value of the "coin_config_id" field.
func (ecuo *EventCoinUpdateOne) ClearCoinConfigID() *EventCoinUpdateOne {
	ecuo.mutation.ClearCoinConfigID()
	return ecuo
}

// SetCoinValue sets the "coin_value" field.
func (ecuo *EventCoinUpdateOne) SetCoinValue(d decimal.Decimal) *EventCoinUpdateOne {
	ecuo.mutation.SetCoinValue(d)
	return ecuo
}

// SetNillableCoinValue sets the "coin_value" field if the given value is not nil.
func (ecuo *EventCoinUpdateOne) SetNillableCoinValue(d *decimal.Decimal) *EventCoinUpdateOne {
	if d != nil {
		ecuo.SetCoinValue(*d)
	}
	return ecuo
}

// ClearCoinValue clears the value of the "coin_value" field.
func (ecuo *EventCoinUpdateOne) ClearCoinValue() *EventCoinUpdateOne {
	ecuo.mutation.ClearCoinValue()
	return ecuo
}

// SetCoinPerUsd sets the "coin_per_usd" field.
func (ecuo *EventCoinUpdateOne) SetCoinPerUsd(d decimal.Decimal) *EventCoinUpdateOne {
	ecuo.mutation.SetCoinPerUsd(d)
	return ecuo
}

// SetNillableCoinPerUsd sets the "coin_per_usd" field if the given value is not nil.
func (ecuo *EventCoinUpdateOne) SetNillableCoinPerUsd(d *decimal.Decimal) *EventCoinUpdateOne {
	if d != nil {
		ecuo.SetCoinPerUsd(*d)
	}
	return ecuo
}

// ClearCoinPerUsd clears the value of the "coin_per_usd" field.
func (ecuo *EventCoinUpdateOne) ClearCoinPerUsd() *EventCoinUpdateOne {
	ecuo.mutation.ClearCoinPerUsd()
	return ecuo
}

// Mutation returns the EventCoinMutation object of the builder.
func (ecuo *EventCoinUpdateOne) Mutation() *EventCoinMutation {
	return ecuo.mutation
}

// Where appends a list predicates to the EventCoinUpdate builder.
func (ecuo *EventCoinUpdateOne) Where(ps ...predicate.EventCoin) *EventCoinUpdateOne {
	ecuo.mutation.Where(ps...)
	return ecuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ecuo *EventCoinUpdateOne) Select(field string, fields ...string) *EventCoinUpdateOne {
	ecuo.fields = append([]string{field}, fields...)
	return ecuo
}

// Save executes the query and returns the updated EventCoin entity.
func (ecuo *EventCoinUpdateOne) Save(ctx context.Context) (*EventCoin, error) {
	ecuo.defaults()
	return withHooks(ctx, ecuo.sqlSave, ecuo.mutation, ecuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecuo *EventCoinUpdateOne) SaveX(ctx context.Context) *EventCoin {
	node, err := ecuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ecuo *EventCoinUpdateOne) Exec(ctx context.Context) error {
	_, err := ecuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecuo *EventCoinUpdateOne) ExecX(ctx context.Context) {
	if err := ecuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ecuo *EventCoinUpdateOne) defaults() {
	if _, ok := ecuo.mutation.UpdatedAt(); !ok {
		v := eventcoin.UpdateDefaultUpdatedAt()
		ecuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ecuo *EventCoinUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EventCoinUpdateOne {
	ecuo.modifiers = append(ecuo.modifiers, modifiers...)
	return ecuo
}

func (ecuo *EventCoinUpdateOne) sqlSave(ctx context.Context) (_node *EventCoin, err error) {
	_spec := sqlgraph.NewUpdateSpec(eventcoin.Table, eventcoin.Columns, sqlgraph.NewFieldSpec(eventcoin.FieldID, field.TypeUint32))
	id, ok := ecuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "EventCoin.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ecuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventcoin.FieldID)
		for _, f := range fields {
			if !eventcoin.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != eventcoin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ecuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecuo.mutation.CreatedAt(); ok {
		_spec.SetField(eventcoin.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ecuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(eventcoin.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ecuo.mutation.UpdatedAt(); ok {
		_spec.SetField(eventcoin.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ecuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(eventcoin.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ecuo.mutation.DeletedAt(); ok {
		_spec.SetField(eventcoin.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ecuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(eventcoin.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ecuo.mutation.EntID(); ok {
		_spec.SetField(eventcoin.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := ecuo.mutation.AppID(); ok {
		_spec.SetField(eventcoin.FieldAppID, field.TypeUUID, value)
	}
	if ecuo.mutation.AppIDCleared() {
		_spec.ClearField(eventcoin.FieldAppID, field.TypeUUID)
	}
	if value, ok := ecuo.mutation.EventID(); ok {
		_spec.SetField(eventcoin.FieldEventID, field.TypeUUID, value)
	}
	if ecuo.mutation.EventIDCleared() {
		_spec.ClearField(eventcoin.FieldEventID, field.TypeUUID)
	}
	if value, ok := ecuo.mutation.CoinConfigID(); ok {
		_spec.SetField(eventcoin.FieldCoinConfigID, field.TypeUUID, value)
	}
	if ecuo.mutation.CoinConfigIDCleared() {
		_spec.ClearField(eventcoin.FieldCoinConfigID, field.TypeUUID)
	}
	if value, ok := ecuo.mutation.CoinValue(); ok {
		_spec.SetField(eventcoin.FieldCoinValue, field.TypeOther, value)
	}
	if ecuo.mutation.CoinValueCleared() {
		_spec.ClearField(eventcoin.FieldCoinValue, field.TypeOther)
	}
	if value, ok := ecuo.mutation.CoinPerUsd(); ok {
		_spec.SetField(eventcoin.FieldCoinPerUsd, field.TypeOther, value)
	}
	if ecuo.mutation.CoinPerUsdCleared() {
		_spec.ClearField(eventcoin.FieldCoinPerUsd, field.TypeOther)
	}
	_spec.AddModifiers(ecuo.modifiers...)
	_node = &EventCoin{config: ecuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ecuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventcoin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ecuo.mutation.done = true
	return _node, nil
}

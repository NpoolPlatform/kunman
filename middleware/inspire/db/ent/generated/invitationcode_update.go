// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/invitationcode"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// InvitationCodeUpdate is the builder for updating InvitationCode entities.
type InvitationCodeUpdate struct {
	config
	hooks     []Hook
	mutation  *InvitationCodeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the InvitationCodeUpdate builder.
func (icu *InvitationCodeUpdate) Where(ps ...predicate.InvitationCode) *InvitationCodeUpdate {
	icu.mutation.Where(ps...)
	return icu
}

// SetCreatedAt sets the "created_at" field.
func (icu *InvitationCodeUpdate) SetCreatedAt(u uint32) *InvitationCodeUpdate {
	icu.mutation.ResetCreatedAt()
	icu.mutation.SetCreatedAt(u)
	return icu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (icu *InvitationCodeUpdate) SetNillableCreatedAt(u *uint32) *InvitationCodeUpdate {
	if u != nil {
		icu.SetCreatedAt(*u)
	}
	return icu
}

// AddCreatedAt adds u to the "created_at" field.
func (icu *InvitationCodeUpdate) AddCreatedAt(u int32) *InvitationCodeUpdate {
	icu.mutation.AddCreatedAt(u)
	return icu
}

// SetUpdatedAt sets the "updated_at" field.
func (icu *InvitationCodeUpdate) SetUpdatedAt(u uint32) *InvitationCodeUpdate {
	icu.mutation.ResetUpdatedAt()
	icu.mutation.SetUpdatedAt(u)
	return icu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (icu *InvitationCodeUpdate) AddUpdatedAt(u int32) *InvitationCodeUpdate {
	icu.mutation.AddUpdatedAt(u)
	return icu
}

// SetDeletedAt sets the "deleted_at" field.
func (icu *InvitationCodeUpdate) SetDeletedAt(u uint32) *InvitationCodeUpdate {
	icu.mutation.ResetDeletedAt()
	icu.mutation.SetDeletedAt(u)
	return icu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (icu *InvitationCodeUpdate) SetNillableDeletedAt(u *uint32) *InvitationCodeUpdate {
	if u != nil {
		icu.SetDeletedAt(*u)
	}
	return icu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (icu *InvitationCodeUpdate) AddDeletedAt(u int32) *InvitationCodeUpdate {
	icu.mutation.AddDeletedAt(u)
	return icu
}

// SetEntID sets the "ent_id" field.
func (icu *InvitationCodeUpdate) SetEntID(u uuid.UUID) *InvitationCodeUpdate {
	icu.mutation.SetEntID(u)
	return icu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (icu *InvitationCodeUpdate) SetNillableEntID(u *uuid.UUID) *InvitationCodeUpdate {
	if u != nil {
		icu.SetEntID(*u)
	}
	return icu
}

// SetAppID sets the "app_id" field.
func (icu *InvitationCodeUpdate) SetAppID(u uuid.UUID) *InvitationCodeUpdate {
	icu.mutation.SetAppID(u)
	return icu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (icu *InvitationCodeUpdate) SetNillableAppID(u *uuid.UUID) *InvitationCodeUpdate {
	if u != nil {
		icu.SetAppID(*u)
	}
	return icu
}

// ClearAppID clears the value of the "app_id" field.
func (icu *InvitationCodeUpdate) ClearAppID() *InvitationCodeUpdate {
	icu.mutation.ClearAppID()
	return icu
}

// SetUserID sets the "user_id" field.
func (icu *InvitationCodeUpdate) SetUserID(u uuid.UUID) *InvitationCodeUpdate {
	icu.mutation.SetUserID(u)
	return icu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (icu *InvitationCodeUpdate) SetNillableUserID(u *uuid.UUID) *InvitationCodeUpdate {
	if u != nil {
		icu.SetUserID(*u)
	}
	return icu
}

// ClearUserID clears the value of the "user_id" field.
func (icu *InvitationCodeUpdate) ClearUserID() *InvitationCodeUpdate {
	icu.mutation.ClearUserID()
	return icu
}

// SetInvitationCode sets the "invitation_code" field.
func (icu *InvitationCodeUpdate) SetInvitationCode(s string) *InvitationCodeUpdate {
	icu.mutation.SetInvitationCode(s)
	return icu
}

// SetNillableInvitationCode sets the "invitation_code" field if the given value is not nil.
func (icu *InvitationCodeUpdate) SetNillableInvitationCode(s *string) *InvitationCodeUpdate {
	if s != nil {
		icu.SetInvitationCode(*s)
	}
	return icu
}

// ClearInvitationCode clears the value of the "invitation_code" field.
func (icu *InvitationCodeUpdate) ClearInvitationCode() *InvitationCodeUpdate {
	icu.mutation.ClearInvitationCode()
	return icu
}

// SetDisabled sets the "disabled" field.
func (icu *InvitationCodeUpdate) SetDisabled(b bool) *InvitationCodeUpdate {
	icu.mutation.SetDisabled(b)
	return icu
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (icu *InvitationCodeUpdate) SetNillableDisabled(b *bool) *InvitationCodeUpdate {
	if b != nil {
		icu.SetDisabled(*b)
	}
	return icu
}

// ClearDisabled clears the value of the "disabled" field.
func (icu *InvitationCodeUpdate) ClearDisabled() *InvitationCodeUpdate {
	icu.mutation.ClearDisabled()
	return icu
}

// Mutation returns the InvitationCodeMutation object of the builder.
func (icu *InvitationCodeUpdate) Mutation() *InvitationCodeMutation {
	return icu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (icu *InvitationCodeUpdate) Save(ctx context.Context) (int, error) {
	icu.defaults()
	return withHooks(ctx, icu.sqlSave, icu.mutation, icu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (icu *InvitationCodeUpdate) SaveX(ctx context.Context) int {
	affected, err := icu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (icu *InvitationCodeUpdate) Exec(ctx context.Context) error {
	_, err := icu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icu *InvitationCodeUpdate) ExecX(ctx context.Context) {
	if err := icu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (icu *InvitationCodeUpdate) defaults() {
	if _, ok := icu.mutation.UpdatedAt(); !ok {
		v := invitationcode.UpdateDefaultUpdatedAt()
		icu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (icu *InvitationCodeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InvitationCodeUpdate {
	icu.modifiers = append(icu.modifiers, modifiers...)
	return icu
}

func (icu *InvitationCodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(invitationcode.Table, invitationcode.Columns, sqlgraph.NewFieldSpec(invitationcode.FieldID, field.TypeUint32))
	if ps := icu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := icu.mutation.CreatedAt(); ok {
		_spec.SetField(invitationcode.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := icu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(invitationcode.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := icu.mutation.UpdatedAt(); ok {
		_spec.SetField(invitationcode.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := icu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(invitationcode.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := icu.mutation.DeletedAt(); ok {
		_spec.SetField(invitationcode.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := icu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(invitationcode.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := icu.mutation.EntID(); ok {
		_spec.SetField(invitationcode.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := icu.mutation.AppID(); ok {
		_spec.SetField(invitationcode.FieldAppID, field.TypeUUID, value)
	}
	if icu.mutation.AppIDCleared() {
		_spec.ClearField(invitationcode.FieldAppID, field.TypeUUID)
	}
	if value, ok := icu.mutation.UserID(); ok {
		_spec.SetField(invitationcode.FieldUserID, field.TypeUUID, value)
	}
	if icu.mutation.UserIDCleared() {
		_spec.ClearField(invitationcode.FieldUserID, field.TypeUUID)
	}
	if value, ok := icu.mutation.InvitationCode(); ok {
		_spec.SetField(invitationcode.FieldInvitationCode, field.TypeString, value)
	}
	if icu.mutation.InvitationCodeCleared() {
		_spec.ClearField(invitationcode.FieldInvitationCode, field.TypeString)
	}
	if value, ok := icu.mutation.Disabled(); ok {
		_spec.SetField(invitationcode.FieldDisabled, field.TypeBool, value)
	}
	if icu.mutation.DisabledCleared() {
		_spec.ClearField(invitationcode.FieldDisabled, field.TypeBool)
	}
	_spec.AddModifiers(icu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, icu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invitationcode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	icu.mutation.done = true
	return n, nil
}

// InvitationCodeUpdateOne is the builder for updating a single InvitationCode entity.
type InvitationCodeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *InvitationCodeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (icuo *InvitationCodeUpdateOne) SetCreatedAt(u uint32) *InvitationCodeUpdateOne {
	icuo.mutation.ResetCreatedAt()
	icuo.mutation.SetCreatedAt(u)
	return icuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (icuo *InvitationCodeUpdateOne) SetNillableCreatedAt(u *uint32) *InvitationCodeUpdateOne {
	if u != nil {
		icuo.SetCreatedAt(*u)
	}
	return icuo
}

// AddCreatedAt adds u to the "created_at" field.
func (icuo *InvitationCodeUpdateOne) AddCreatedAt(u int32) *InvitationCodeUpdateOne {
	icuo.mutation.AddCreatedAt(u)
	return icuo
}

// SetUpdatedAt sets the "updated_at" field.
func (icuo *InvitationCodeUpdateOne) SetUpdatedAt(u uint32) *InvitationCodeUpdateOne {
	icuo.mutation.ResetUpdatedAt()
	icuo.mutation.SetUpdatedAt(u)
	return icuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (icuo *InvitationCodeUpdateOne) AddUpdatedAt(u int32) *InvitationCodeUpdateOne {
	icuo.mutation.AddUpdatedAt(u)
	return icuo
}

// SetDeletedAt sets the "deleted_at" field.
func (icuo *InvitationCodeUpdateOne) SetDeletedAt(u uint32) *InvitationCodeUpdateOne {
	icuo.mutation.ResetDeletedAt()
	icuo.mutation.SetDeletedAt(u)
	return icuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (icuo *InvitationCodeUpdateOne) SetNillableDeletedAt(u *uint32) *InvitationCodeUpdateOne {
	if u != nil {
		icuo.SetDeletedAt(*u)
	}
	return icuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (icuo *InvitationCodeUpdateOne) AddDeletedAt(u int32) *InvitationCodeUpdateOne {
	icuo.mutation.AddDeletedAt(u)
	return icuo
}

// SetEntID sets the "ent_id" field.
func (icuo *InvitationCodeUpdateOne) SetEntID(u uuid.UUID) *InvitationCodeUpdateOne {
	icuo.mutation.SetEntID(u)
	return icuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (icuo *InvitationCodeUpdateOne) SetNillableEntID(u *uuid.UUID) *InvitationCodeUpdateOne {
	if u != nil {
		icuo.SetEntID(*u)
	}
	return icuo
}

// SetAppID sets the "app_id" field.
func (icuo *InvitationCodeUpdateOne) SetAppID(u uuid.UUID) *InvitationCodeUpdateOne {
	icuo.mutation.SetAppID(u)
	return icuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (icuo *InvitationCodeUpdateOne) SetNillableAppID(u *uuid.UUID) *InvitationCodeUpdateOne {
	if u != nil {
		icuo.SetAppID(*u)
	}
	return icuo
}

// ClearAppID clears the value of the "app_id" field.
func (icuo *InvitationCodeUpdateOne) ClearAppID() *InvitationCodeUpdateOne {
	icuo.mutation.ClearAppID()
	return icuo
}

// SetUserID sets the "user_id" field.
func (icuo *InvitationCodeUpdateOne) SetUserID(u uuid.UUID) *InvitationCodeUpdateOne {
	icuo.mutation.SetUserID(u)
	return icuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (icuo *InvitationCodeUpdateOne) SetNillableUserID(u *uuid.UUID) *InvitationCodeUpdateOne {
	if u != nil {
		icuo.SetUserID(*u)
	}
	return icuo
}

// ClearUserID clears the value of the "user_id" field.
func (icuo *InvitationCodeUpdateOne) ClearUserID() *InvitationCodeUpdateOne {
	icuo.mutation.ClearUserID()
	return icuo
}

// SetInvitationCode sets the "invitation_code" field.
func (icuo *InvitationCodeUpdateOne) SetInvitationCode(s string) *InvitationCodeUpdateOne {
	icuo.mutation.SetInvitationCode(s)
	return icuo
}

// SetNillableInvitationCode sets the "invitation_code" field if the given value is not nil.
func (icuo *InvitationCodeUpdateOne) SetNillableInvitationCode(s *string) *InvitationCodeUpdateOne {
	if s != nil {
		icuo.SetInvitationCode(*s)
	}
	return icuo
}

// ClearInvitationCode clears the value of the "invitation_code" field.
func (icuo *InvitationCodeUpdateOne) ClearInvitationCode() *InvitationCodeUpdateOne {
	icuo.mutation.ClearInvitationCode()
	return icuo
}

// SetDisabled sets the "disabled" field.
func (icuo *InvitationCodeUpdateOne) SetDisabled(b bool) *InvitationCodeUpdateOne {
	icuo.mutation.SetDisabled(b)
	return icuo
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (icuo *InvitationCodeUpdateOne) SetNillableDisabled(b *bool) *InvitationCodeUpdateOne {
	if b != nil {
		icuo.SetDisabled(*b)
	}
	return icuo
}

// ClearDisabled clears the value of the "disabled" field.
func (icuo *InvitationCodeUpdateOne) ClearDisabled() *InvitationCodeUpdateOne {
	icuo.mutation.ClearDisabled()
	return icuo
}

// Mutation returns the InvitationCodeMutation object of the builder.
func (icuo *InvitationCodeUpdateOne) Mutation() *InvitationCodeMutation {
	return icuo.mutation
}

// Where appends a list predicates to the InvitationCodeUpdate builder.
func (icuo *InvitationCodeUpdateOne) Where(ps ...predicate.InvitationCode) *InvitationCodeUpdateOne {
	icuo.mutation.Where(ps...)
	return icuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (icuo *InvitationCodeUpdateOne) Select(field string, fields ...string) *InvitationCodeUpdateOne {
	icuo.fields = append([]string{field}, fields...)
	return icuo
}

// Save executes the query and returns the updated InvitationCode entity.
func (icuo *InvitationCodeUpdateOne) Save(ctx context.Context) (*InvitationCode, error) {
	icuo.defaults()
	return withHooks(ctx, icuo.sqlSave, icuo.mutation, icuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (icuo *InvitationCodeUpdateOne) SaveX(ctx context.Context) *InvitationCode {
	node, err := icuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (icuo *InvitationCodeUpdateOne) Exec(ctx context.Context) error {
	_, err := icuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icuo *InvitationCodeUpdateOne) ExecX(ctx context.Context) {
	if err := icuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (icuo *InvitationCodeUpdateOne) defaults() {
	if _, ok := icuo.mutation.UpdatedAt(); !ok {
		v := invitationcode.UpdateDefaultUpdatedAt()
		icuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (icuo *InvitationCodeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InvitationCodeUpdateOne {
	icuo.modifiers = append(icuo.modifiers, modifiers...)
	return icuo
}

func (icuo *InvitationCodeUpdateOne) sqlSave(ctx context.Context) (_node *InvitationCode, err error) {
	_spec := sqlgraph.NewUpdateSpec(invitationcode.Table, invitationcode.Columns, sqlgraph.NewFieldSpec(invitationcode.FieldID, field.TypeUint32))
	id, ok := icuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "InvitationCode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := icuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invitationcode.FieldID)
		for _, f := range fields {
			if !invitationcode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != invitationcode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := icuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := icuo.mutation.CreatedAt(); ok {
		_spec.SetField(invitationcode.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := icuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(invitationcode.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := icuo.mutation.UpdatedAt(); ok {
		_spec.SetField(invitationcode.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := icuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(invitationcode.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := icuo.mutation.DeletedAt(); ok {
		_spec.SetField(invitationcode.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := icuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(invitationcode.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := icuo.mutation.EntID(); ok {
		_spec.SetField(invitationcode.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := icuo.mutation.AppID(); ok {
		_spec.SetField(invitationcode.FieldAppID, field.TypeUUID, value)
	}
	if icuo.mutation.AppIDCleared() {
		_spec.ClearField(invitationcode.FieldAppID, field.TypeUUID)
	}
	if value, ok := icuo.mutation.UserID(); ok {
		_spec.SetField(invitationcode.FieldUserID, field.TypeUUID, value)
	}
	if icuo.mutation.UserIDCleared() {
		_spec.ClearField(invitationcode.FieldUserID, field.TypeUUID)
	}
	if value, ok := icuo.mutation.InvitationCode(); ok {
		_spec.SetField(invitationcode.FieldInvitationCode, field.TypeString, value)
	}
	if icuo.mutation.InvitationCodeCleared() {
		_spec.ClearField(invitationcode.FieldInvitationCode, field.TypeString)
	}
	if value, ok := icuo.mutation.Disabled(); ok {
		_spec.SetField(invitationcode.FieldDisabled, field.TypeBool, value)
	}
	if icuo.mutation.DisabledCleared() {
		_spec.ClearField(invitationcode.FieldDisabled, field.TypeBool)
	}
	_spec.AddModifiers(icuo.modifiers...)
	_node = &InvitationCode{config: icuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, icuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invitationcode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	icuo.mutation.done = true
	return _node, nil
}

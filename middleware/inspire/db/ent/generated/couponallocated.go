// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/couponallocated"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// CouponAllocated is the model entity for the CouponAllocated schema.
type CouponAllocated struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// CouponID holds the value of the "coupon_id" field.
	CouponID uuid.UUID `json:"coupon_id,omitempty"`
	// Denomination holds the value of the "denomination" field.
	Denomination decimal.Decimal `json:"denomination,omitempty"`
	// Used holds the value of the "used" field.
	Used bool `json:"used,omitempty"`
	// UsedAt holds the value of the "used_at" field.
	UsedAt uint32 `json:"used_at,omitempty"`
	// UsedByOrderID holds the value of the "used_by_order_id" field.
	UsedByOrderID uuid.UUID `json:"used_by_order_id,omitempty"`
	// StartAt holds the value of the "start_at" field.
	StartAt uint32 `json:"start_at,omitempty"`
	// CouponScope holds the value of the "coupon_scope" field.
	CouponScope string `json:"coupon_scope,omitempty"`
	// Cashable holds the value of the "cashable" field.
	Cashable bool `json:"cashable,omitempty"`
	// Extra holds the value of the "extra" field.
	Extra        string `json:"extra,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CouponAllocated) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case couponallocated.FieldDenomination:
			values[i] = new(decimal.Decimal)
		case couponallocated.FieldUsed, couponallocated.FieldCashable:
			values[i] = new(sql.NullBool)
		case couponallocated.FieldID, couponallocated.FieldCreatedAt, couponallocated.FieldUpdatedAt, couponallocated.FieldDeletedAt, couponallocated.FieldUsedAt, couponallocated.FieldStartAt:
			values[i] = new(sql.NullInt64)
		case couponallocated.FieldCouponScope, couponallocated.FieldExtra:
			values[i] = new(sql.NullString)
		case couponallocated.FieldEntID, couponallocated.FieldAppID, couponallocated.FieldUserID, couponallocated.FieldCouponID, couponallocated.FieldUsedByOrderID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CouponAllocated fields.
func (ca *CouponAllocated) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case couponallocated.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ca.ID = uint32(value.Int64)
		case couponallocated.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ca.CreatedAt = uint32(value.Int64)
			}
		case couponallocated.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ca.UpdatedAt = uint32(value.Int64)
			}
		case couponallocated.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ca.DeletedAt = uint32(value.Int64)
			}
		case couponallocated.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				ca.EntID = *value
			}
		case couponallocated.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				ca.AppID = *value
			}
		case couponallocated.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				ca.UserID = *value
			}
		case couponallocated.FieldCouponID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coupon_id", values[i])
			} else if value != nil {
				ca.CouponID = *value
			}
		case couponallocated.FieldDenomination:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field denomination", values[i])
			} else if value != nil {
				ca.Denomination = *value
			}
		case couponallocated.FieldUsed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field used", values[i])
			} else if value.Valid {
				ca.Used = value.Bool
			}
		case couponallocated.FieldUsedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field used_at", values[i])
			} else if value.Valid {
				ca.UsedAt = uint32(value.Int64)
			}
		case couponallocated.FieldUsedByOrderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field used_by_order_id", values[i])
			} else if value != nil {
				ca.UsedByOrderID = *value
			}
		case couponallocated.FieldStartAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				ca.StartAt = uint32(value.Int64)
			}
		case couponallocated.FieldCouponScope:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field coupon_scope", values[i])
			} else if value.Valid {
				ca.CouponScope = value.String
			}
		case couponallocated.FieldCashable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field cashable", values[i])
			} else if value.Valid {
				ca.Cashable = value.Bool
			}
		case couponallocated.FieldExtra:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extra", values[i])
			} else if value.Valid {
				ca.Extra = value.String
			}
		default:
			ca.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CouponAllocated.
// This includes values selected through modifiers, order, etc.
func (ca *CouponAllocated) Value(name string) (ent.Value, error) {
	return ca.selectValues.Get(name)
}

// Update returns a builder for updating this CouponAllocated.
// Note that you need to call CouponAllocated.Unwrap() before calling this method if this CouponAllocated
// was returned from a transaction, and the transaction was committed or rolled back.
func (ca *CouponAllocated) Update() *CouponAllocatedUpdateOne {
	return NewCouponAllocatedClient(ca.config).UpdateOne(ca)
}

// Unwrap unwraps the CouponAllocated entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ca *CouponAllocated) Unwrap() *CouponAllocated {
	_tx, ok := ca.config.driver.(*txDriver)
	if !ok {
		panic("generated: CouponAllocated is not a transactional entity")
	}
	ca.config.driver = _tx.drv
	return ca
}

// String implements the fmt.Stringer.
func (ca *CouponAllocated) String() string {
	var builder strings.Builder
	builder.WriteString("CouponAllocated(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ca.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", ca.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ca.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", ca.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", ca.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", ca.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ca.UserID))
	builder.WriteString(", ")
	builder.WriteString("coupon_id=")
	builder.WriteString(fmt.Sprintf("%v", ca.CouponID))
	builder.WriteString(", ")
	builder.WriteString("denomination=")
	builder.WriteString(fmt.Sprintf("%v", ca.Denomination))
	builder.WriteString(", ")
	builder.WriteString("used=")
	builder.WriteString(fmt.Sprintf("%v", ca.Used))
	builder.WriteString(", ")
	builder.WriteString("used_at=")
	builder.WriteString(fmt.Sprintf("%v", ca.UsedAt))
	builder.WriteString(", ")
	builder.WriteString("used_by_order_id=")
	builder.WriteString(fmt.Sprintf("%v", ca.UsedByOrderID))
	builder.WriteString(", ")
	builder.WriteString("start_at=")
	builder.WriteString(fmt.Sprintf("%v", ca.StartAt))
	builder.WriteString(", ")
	builder.WriteString("coupon_scope=")
	builder.WriteString(ca.CouponScope)
	builder.WriteString(", ")
	builder.WriteString("cashable=")
	builder.WriteString(fmt.Sprintf("%v", ca.Cashable))
	builder.WriteString(", ")
	builder.WriteString("extra=")
	builder.WriteString(ca.Extra)
	builder.WriteByte(')')
	return builder.String()
}

// CouponAllocateds is a parsable slice of CouponAllocated.
type CouponAllocateds []*CouponAllocated

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/couponallocated"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// CouponAllocatedCreate is the builder for creating a CouponAllocated entity.
type CouponAllocatedCreate struct {
	config
	mutation *CouponAllocatedMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cac *CouponAllocatedCreate) SetCreatedAt(u uint32) *CouponAllocatedCreate {
	cac.mutation.SetCreatedAt(u)
	return cac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cac *CouponAllocatedCreate) SetNillableCreatedAt(u *uint32) *CouponAllocatedCreate {
	if u != nil {
		cac.SetCreatedAt(*u)
	}
	return cac
}

// SetUpdatedAt sets the "updated_at" field.
func (cac *CouponAllocatedCreate) SetUpdatedAt(u uint32) *CouponAllocatedCreate {
	cac.mutation.SetUpdatedAt(u)
	return cac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cac *CouponAllocatedCreate) SetNillableUpdatedAt(u *uint32) *CouponAllocatedCreate {
	if u != nil {
		cac.SetUpdatedAt(*u)
	}
	return cac
}

// SetDeletedAt sets the "deleted_at" field.
func (cac *CouponAllocatedCreate) SetDeletedAt(u uint32) *CouponAllocatedCreate {
	cac.mutation.SetDeletedAt(u)
	return cac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cac *CouponAllocatedCreate) SetNillableDeletedAt(u *uint32) *CouponAllocatedCreate {
	if u != nil {
		cac.SetDeletedAt(*u)
	}
	return cac
}

// SetEntID sets the "ent_id" field.
func (cac *CouponAllocatedCreate) SetEntID(u uuid.UUID) *CouponAllocatedCreate {
	cac.mutation.SetEntID(u)
	return cac
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cac *CouponAllocatedCreate) SetNillableEntID(u *uuid.UUID) *CouponAllocatedCreate {
	if u != nil {
		cac.SetEntID(*u)
	}
	return cac
}

// SetAppID sets the "app_id" field.
func (cac *CouponAllocatedCreate) SetAppID(u uuid.UUID) *CouponAllocatedCreate {
	cac.mutation.SetAppID(u)
	return cac
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (cac *CouponAllocatedCreate) SetNillableAppID(u *uuid.UUID) *CouponAllocatedCreate {
	if u != nil {
		cac.SetAppID(*u)
	}
	return cac
}

// SetUserID sets the "user_id" field.
func (cac *CouponAllocatedCreate) SetUserID(u uuid.UUID) *CouponAllocatedCreate {
	cac.mutation.SetUserID(u)
	return cac
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cac *CouponAllocatedCreate) SetNillableUserID(u *uuid.UUID) *CouponAllocatedCreate {
	if u != nil {
		cac.SetUserID(*u)
	}
	return cac
}

// SetCouponID sets the "coupon_id" field.
func (cac *CouponAllocatedCreate) SetCouponID(u uuid.UUID) *CouponAllocatedCreate {
	cac.mutation.SetCouponID(u)
	return cac
}

// SetNillableCouponID sets the "coupon_id" field if the given value is not nil.
func (cac *CouponAllocatedCreate) SetNillableCouponID(u *uuid.UUID) *CouponAllocatedCreate {
	if u != nil {
		cac.SetCouponID(*u)
	}
	return cac
}

// SetDenomination sets the "denomination" field.
func (cac *CouponAllocatedCreate) SetDenomination(d decimal.Decimal) *CouponAllocatedCreate {
	cac.mutation.SetDenomination(d)
	return cac
}

// SetNillableDenomination sets the "denomination" field if the given value is not nil.
func (cac *CouponAllocatedCreate) SetNillableDenomination(d *decimal.Decimal) *CouponAllocatedCreate {
	if d != nil {
		cac.SetDenomination(*d)
	}
	return cac
}

// SetUsed sets the "used" field.
func (cac *CouponAllocatedCreate) SetUsed(b bool) *CouponAllocatedCreate {
	cac.mutation.SetUsed(b)
	return cac
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (cac *CouponAllocatedCreate) SetNillableUsed(b *bool) *CouponAllocatedCreate {
	if b != nil {
		cac.SetUsed(*b)
	}
	return cac
}

// SetUsedAt sets the "used_at" field.
func (cac *CouponAllocatedCreate) SetUsedAt(u uint32) *CouponAllocatedCreate {
	cac.mutation.SetUsedAt(u)
	return cac
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (cac *CouponAllocatedCreate) SetNillableUsedAt(u *uint32) *CouponAllocatedCreate {
	if u != nil {
		cac.SetUsedAt(*u)
	}
	return cac
}

// SetUsedByOrderID sets the "used_by_order_id" field.
func (cac *CouponAllocatedCreate) SetUsedByOrderID(u uuid.UUID) *CouponAllocatedCreate {
	cac.mutation.SetUsedByOrderID(u)
	return cac
}

// SetNillableUsedByOrderID sets the "used_by_order_id" field if the given value is not nil.
func (cac *CouponAllocatedCreate) SetNillableUsedByOrderID(u *uuid.UUID) *CouponAllocatedCreate {
	if u != nil {
		cac.SetUsedByOrderID(*u)
	}
	return cac
}

// SetStartAt sets the "start_at" field.
func (cac *CouponAllocatedCreate) SetStartAt(u uint32) *CouponAllocatedCreate {
	cac.mutation.SetStartAt(u)
	return cac
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (cac *CouponAllocatedCreate) SetNillableStartAt(u *uint32) *CouponAllocatedCreate {
	if u != nil {
		cac.SetStartAt(*u)
	}
	return cac
}

// SetCouponScope sets the "coupon_scope" field.
func (cac *CouponAllocatedCreate) SetCouponScope(s string) *CouponAllocatedCreate {
	cac.mutation.SetCouponScope(s)
	return cac
}

// SetNillableCouponScope sets the "coupon_scope" field if the given value is not nil.
func (cac *CouponAllocatedCreate) SetNillableCouponScope(s *string) *CouponAllocatedCreate {
	if s != nil {
		cac.SetCouponScope(*s)
	}
	return cac
}

// SetCashable sets the "cashable" field.
func (cac *CouponAllocatedCreate) SetCashable(b bool) *CouponAllocatedCreate {
	cac.mutation.SetCashable(b)
	return cac
}

// SetNillableCashable sets the "cashable" field if the given value is not nil.
func (cac *CouponAllocatedCreate) SetNillableCashable(b *bool) *CouponAllocatedCreate {
	if b != nil {
		cac.SetCashable(*b)
	}
	return cac
}

// SetExtra sets the "extra" field.
func (cac *CouponAllocatedCreate) SetExtra(s string) *CouponAllocatedCreate {
	cac.mutation.SetExtra(s)
	return cac
}

// SetNillableExtra sets the "extra" field if the given value is not nil.
func (cac *CouponAllocatedCreate) SetNillableExtra(s *string) *CouponAllocatedCreate {
	if s != nil {
		cac.SetExtra(*s)
	}
	return cac
}

// SetID sets the "id" field.
func (cac *CouponAllocatedCreate) SetID(u uint32) *CouponAllocatedCreate {
	cac.mutation.SetID(u)
	return cac
}

// Mutation returns the CouponAllocatedMutation object of the builder.
func (cac *CouponAllocatedCreate) Mutation() *CouponAllocatedMutation {
	return cac.mutation
}

// Save creates the CouponAllocated in the database.
func (cac *CouponAllocatedCreate) Save(ctx context.Context) (*CouponAllocated, error) {
	cac.defaults()
	return withHooks(ctx, cac.sqlSave, cac.mutation, cac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cac *CouponAllocatedCreate) SaveX(ctx context.Context) *CouponAllocated {
	v, err := cac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cac *CouponAllocatedCreate) Exec(ctx context.Context) error {
	_, err := cac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cac *CouponAllocatedCreate) ExecX(ctx context.Context) {
	if err := cac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cac *CouponAllocatedCreate) defaults() {
	if _, ok := cac.mutation.CreatedAt(); !ok {
		v := couponallocated.DefaultCreatedAt()
		cac.mutation.SetCreatedAt(v)
	}
	if _, ok := cac.mutation.UpdatedAt(); !ok {
		v := couponallocated.DefaultUpdatedAt()
		cac.mutation.SetUpdatedAt(v)
	}
	if _, ok := cac.mutation.DeletedAt(); !ok {
		v := couponallocated.DefaultDeletedAt()
		cac.mutation.SetDeletedAt(v)
	}
	if _, ok := cac.mutation.EntID(); !ok {
		v := couponallocated.DefaultEntID()
		cac.mutation.SetEntID(v)
	}
	if _, ok := cac.mutation.AppID(); !ok {
		v := couponallocated.DefaultAppID()
		cac.mutation.SetAppID(v)
	}
	if _, ok := cac.mutation.UserID(); !ok {
		v := couponallocated.DefaultUserID()
		cac.mutation.SetUserID(v)
	}
	if _, ok := cac.mutation.CouponID(); !ok {
		v := couponallocated.DefaultCouponID()
		cac.mutation.SetCouponID(v)
	}
	if _, ok := cac.mutation.Denomination(); !ok {
		v := couponallocated.DefaultDenomination
		cac.mutation.SetDenomination(v)
	}
	if _, ok := cac.mutation.Used(); !ok {
		v := couponallocated.DefaultUsed
		cac.mutation.SetUsed(v)
	}
	if _, ok := cac.mutation.UsedAt(); !ok {
		v := couponallocated.DefaultUsedAt
		cac.mutation.SetUsedAt(v)
	}
	if _, ok := cac.mutation.UsedByOrderID(); !ok {
		v := couponallocated.DefaultUsedByOrderID()
		cac.mutation.SetUsedByOrderID(v)
	}
	if _, ok := cac.mutation.StartAt(); !ok {
		v := couponallocated.DefaultStartAt
		cac.mutation.SetStartAt(v)
	}
	if _, ok := cac.mutation.CouponScope(); !ok {
		v := couponallocated.DefaultCouponScope
		cac.mutation.SetCouponScope(v)
	}
	if _, ok := cac.mutation.Cashable(); !ok {
		v := couponallocated.DefaultCashable
		cac.mutation.SetCashable(v)
	}
	if _, ok := cac.mutation.Extra(); !ok {
		v := couponallocated.DefaultExtra
		cac.mutation.SetExtra(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cac *CouponAllocatedCreate) check() error {
	if _, ok := cac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "CouponAllocated.created_at"`)}
	}
	if _, ok := cac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "CouponAllocated.updated_at"`)}
	}
	if _, ok := cac.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "CouponAllocated.deleted_at"`)}
	}
	if _, ok := cac.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "CouponAllocated.ent_id"`)}
	}
	if v, ok := cac.mutation.Extra(); ok {
		if err := couponallocated.ExtraValidator(v); err != nil {
			return &ValidationError{Name: "extra", err: fmt.Errorf(`generated: validator failed for field "CouponAllocated.extra": %w`, err)}
		}
	}
	return nil
}

func (cac *CouponAllocatedCreate) sqlSave(ctx context.Context) (*CouponAllocated, error) {
	if err := cac.check(); err != nil {
		return nil, err
	}
	_node, _spec := cac.createSpec()
	if err := sqlgraph.CreateNode(ctx, cac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	cac.mutation.id = &_node.ID
	cac.mutation.done = true
	return _node, nil
}

func (cac *CouponAllocatedCreate) createSpec() (*CouponAllocated, *sqlgraph.CreateSpec) {
	var (
		_node = &CouponAllocated{config: cac.config}
		_spec = sqlgraph.NewCreateSpec(couponallocated.Table, sqlgraph.NewFieldSpec(couponallocated.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = cac.conflict
	if id, ok := cac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cac.mutation.CreatedAt(); ok {
		_spec.SetField(couponallocated.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := cac.mutation.UpdatedAt(); ok {
		_spec.SetField(couponallocated.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := cac.mutation.DeletedAt(); ok {
		_spec.SetField(couponallocated.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := cac.mutation.EntID(); ok {
		_spec.SetField(couponallocated.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := cac.mutation.AppID(); ok {
		_spec.SetField(couponallocated.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := cac.mutation.UserID(); ok {
		_spec.SetField(couponallocated.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := cac.mutation.CouponID(); ok {
		_spec.SetField(couponallocated.FieldCouponID, field.TypeUUID, value)
		_node.CouponID = value
	}
	if value, ok := cac.mutation.Denomination(); ok {
		_spec.SetField(couponallocated.FieldDenomination, field.TypeOther, value)
		_node.Denomination = value
	}
	if value, ok := cac.mutation.Used(); ok {
		_spec.SetField(couponallocated.FieldUsed, field.TypeBool, value)
		_node.Used = value
	}
	if value, ok := cac.mutation.UsedAt(); ok {
		_spec.SetField(couponallocated.FieldUsedAt, field.TypeUint32, value)
		_node.UsedAt = value
	}
	if value, ok := cac.mutation.UsedByOrderID(); ok {
		_spec.SetField(couponallocated.FieldUsedByOrderID, field.TypeUUID, value)
		_node.UsedByOrderID = value
	}
	if value, ok := cac.mutation.StartAt(); ok {
		_spec.SetField(couponallocated.FieldStartAt, field.TypeUint32, value)
		_node.StartAt = value
	}
	if value, ok := cac.mutation.CouponScope(); ok {
		_spec.SetField(couponallocated.FieldCouponScope, field.TypeString, value)
		_node.CouponScope = value
	}
	if value, ok := cac.mutation.Cashable(); ok {
		_spec.SetField(couponallocated.FieldCashable, field.TypeBool, value)
		_node.Cashable = value
	}
	if value, ok := cac.mutation.Extra(); ok {
		_spec.SetField(couponallocated.FieldExtra, field.TypeString, value)
		_node.Extra = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CouponAllocated.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CouponAllocatedUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cac *CouponAllocatedCreate) OnConflict(opts ...sql.ConflictOption) *CouponAllocatedUpsertOne {
	cac.conflict = opts
	return &CouponAllocatedUpsertOne{
		create: cac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CouponAllocated.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cac *CouponAllocatedCreate) OnConflictColumns(columns ...string) *CouponAllocatedUpsertOne {
	cac.conflict = append(cac.conflict, sql.ConflictColumns(columns...))
	return &CouponAllocatedUpsertOne{
		create: cac,
	}
}

type (
	// CouponAllocatedUpsertOne is the builder for "upsert"-ing
	//  one CouponAllocated node.
	CouponAllocatedUpsertOne struct {
		create *CouponAllocatedCreate
	}

	// CouponAllocatedUpsert is the "OnConflict" setter.
	CouponAllocatedUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *CouponAllocatedUpsert) SetCreatedAt(v uint32) *CouponAllocatedUpsert {
	u.Set(couponallocated.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CouponAllocatedUpsert) UpdateCreatedAt() *CouponAllocatedUpsert {
	u.SetExcluded(couponallocated.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CouponAllocatedUpsert) AddCreatedAt(v uint32) *CouponAllocatedUpsert {
	u.Add(couponallocated.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponAllocatedUpsert) SetUpdatedAt(v uint32) *CouponAllocatedUpsert {
	u.Set(couponallocated.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponAllocatedUpsert) UpdateUpdatedAt() *CouponAllocatedUpsert {
	u.SetExcluded(couponallocated.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CouponAllocatedUpsert) AddUpdatedAt(v uint32) *CouponAllocatedUpsert {
	u.Add(couponallocated.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CouponAllocatedUpsert) SetDeletedAt(v uint32) *CouponAllocatedUpsert {
	u.Set(couponallocated.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CouponAllocatedUpsert) UpdateDeletedAt() *CouponAllocatedUpsert {
	u.SetExcluded(couponallocated.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CouponAllocatedUpsert) AddDeletedAt(v uint32) *CouponAllocatedUpsert {
	u.Add(couponallocated.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *CouponAllocatedUpsert) SetEntID(v uuid.UUID) *CouponAllocatedUpsert {
	u.Set(couponallocated.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CouponAllocatedUpsert) UpdateEntID() *CouponAllocatedUpsert {
	u.SetExcluded(couponallocated.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *CouponAllocatedUpsert) SetAppID(v uuid.UUID) *CouponAllocatedUpsert {
	u.Set(couponallocated.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CouponAllocatedUpsert) UpdateAppID() *CouponAllocatedUpsert {
	u.SetExcluded(couponallocated.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *CouponAllocatedUpsert) ClearAppID() *CouponAllocatedUpsert {
	u.SetNull(couponallocated.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *CouponAllocatedUpsert) SetUserID(v uuid.UUID) *CouponAllocatedUpsert {
	u.Set(couponallocated.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CouponAllocatedUpsert) UpdateUserID() *CouponAllocatedUpsert {
	u.SetExcluded(couponallocated.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *CouponAllocatedUpsert) ClearUserID() *CouponAllocatedUpsert {
	u.SetNull(couponallocated.FieldUserID)
	return u
}

// SetCouponID sets the "coupon_id" field.
func (u *CouponAllocatedUpsert) SetCouponID(v uuid.UUID) *CouponAllocatedUpsert {
	u.Set(couponallocated.FieldCouponID, v)
	return u
}

// UpdateCouponID sets the "coupon_id" field to the value that was provided on create.
func (u *CouponAllocatedUpsert) UpdateCouponID() *CouponAllocatedUpsert {
	u.SetExcluded(couponallocated.FieldCouponID)
	return u
}

// ClearCouponID clears the value of the "coupon_id" field.
func (u *CouponAllocatedUpsert) ClearCouponID() *CouponAllocatedUpsert {
	u.SetNull(couponallocated.FieldCouponID)
	return u
}

// SetDenomination sets the "denomination" field.
func (u *CouponAllocatedUpsert) SetDenomination(v decimal.Decimal) *CouponAllocatedUpsert {
	u.Set(couponallocated.FieldDenomination, v)
	return u
}

// UpdateDenomination sets the "denomination" field to the value that was provided on create.
func (u *CouponAllocatedUpsert) UpdateDenomination() *CouponAllocatedUpsert {
	u.SetExcluded(couponallocated.FieldDenomination)
	return u
}

// ClearDenomination clears the value of the "denomination" field.
func (u *CouponAllocatedUpsert) ClearDenomination() *CouponAllocatedUpsert {
	u.SetNull(couponallocated.FieldDenomination)
	return u
}

// SetUsed sets the "used" field.
func (u *CouponAllocatedUpsert) SetUsed(v bool) *CouponAllocatedUpsert {
	u.Set(couponallocated.FieldUsed, v)
	return u
}

// UpdateUsed sets the "used" field to the value that was provided on create.
func (u *CouponAllocatedUpsert) UpdateUsed() *CouponAllocatedUpsert {
	u.SetExcluded(couponallocated.FieldUsed)
	return u
}

// ClearUsed clears the value of the "used" field.
func (u *CouponAllocatedUpsert) ClearUsed() *CouponAllocatedUpsert {
	u.SetNull(couponallocated.FieldUsed)
	return u
}

// SetUsedAt sets the "used_at" field.
func (u *CouponAllocatedUpsert) SetUsedAt(v uint32) *CouponAllocatedUpsert {
	u.Set(couponallocated.FieldUsedAt, v)
	return u
}

// UpdateUsedAt sets the "used_at" field to the value that was provided on create.
func (u *CouponAllocatedUpsert) UpdateUsedAt() *CouponAllocatedUpsert {
	u.SetExcluded(couponallocated.FieldUsedAt)
	return u
}

// AddUsedAt adds v to the "used_at" field.
func (u *CouponAllocatedUpsert) AddUsedAt(v uint32) *CouponAllocatedUpsert {
	u.Add(couponallocated.FieldUsedAt, v)
	return u
}

// ClearUsedAt clears the value of the "used_at" field.
func (u *CouponAllocatedUpsert) ClearUsedAt() *CouponAllocatedUpsert {
	u.SetNull(couponallocated.FieldUsedAt)
	return u
}

// SetUsedByOrderID sets the "used_by_order_id" field.
func (u *CouponAllocatedUpsert) SetUsedByOrderID(v uuid.UUID) *CouponAllocatedUpsert {
	u.Set(couponallocated.FieldUsedByOrderID, v)
	return u
}

// UpdateUsedByOrderID sets the "used_by_order_id" field to the value that was provided on create.
func (u *CouponAllocatedUpsert) UpdateUsedByOrderID() *CouponAllocatedUpsert {
	u.SetExcluded(couponallocated.FieldUsedByOrderID)
	return u
}

// ClearUsedByOrderID clears the value of the "used_by_order_id" field.
func (u *CouponAllocatedUpsert) ClearUsedByOrderID() *CouponAllocatedUpsert {
	u.SetNull(couponallocated.FieldUsedByOrderID)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *CouponAllocatedUpsert) SetStartAt(v uint32) *CouponAllocatedUpsert {
	u.Set(couponallocated.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *CouponAllocatedUpsert) UpdateStartAt() *CouponAllocatedUpsert {
	u.SetExcluded(couponallocated.FieldStartAt)
	return u
}

// AddStartAt adds v to the "start_at" field.
func (u *CouponAllocatedUpsert) AddStartAt(v uint32) *CouponAllocatedUpsert {
	u.Add(couponallocated.FieldStartAt, v)
	return u
}

// ClearStartAt clears the value of the "start_at" field.
func (u *CouponAllocatedUpsert) ClearStartAt() *CouponAllocatedUpsert {
	u.SetNull(couponallocated.FieldStartAt)
	return u
}

// SetCouponScope sets the "coupon_scope" field.
func (u *CouponAllocatedUpsert) SetCouponScope(v string) *CouponAllocatedUpsert {
	u.Set(couponallocated.FieldCouponScope, v)
	return u
}

// UpdateCouponScope sets the "coupon_scope" field to the value that was provided on create.
func (u *CouponAllocatedUpsert) UpdateCouponScope() *CouponAllocatedUpsert {
	u.SetExcluded(couponallocated.FieldCouponScope)
	return u
}

// ClearCouponScope clears the value of the "coupon_scope" field.
func (u *CouponAllocatedUpsert) ClearCouponScope() *CouponAllocatedUpsert {
	u.SetNull(couponallocated.FieldCouponScope)
	return u
}

// SetCashable sets the "cashable" field.
func (u *CouponAllocatedUpsert) SetCashable(v bool) *CouponAllocatedUpsert {
	u.Set(couponallocated.FieldCashable, v)
	return u
}

// UpdateCashable sets the "cashable" field to the value that was provided on create.
func (u *CouponAllocatedUpsert) UpdateCashable() *CouponAllocatedUpsert {
	u.SetExcluded(couponallocated.FieldCashable)
	return u
}

// ClearCashable clears the value of the "cashable" field.
func (u *CouponAllocatedUpsert) ClearCashable() *CouponAllocatedUpsert {
	u.SetNull(couponallocated.FieldCashable)
	return u
}

// SetExtra sets the "extra" field.
func (u *CouponAllocatedUpsert) SetExtra(v string) *CouponAllocatedUpsert {
	u.Set(couponallocated.FieldExtra, v)
	return u
}

// UpdateExtra sets the "extra" field to the value that was provided on create.
func (u *CouponAllocatedUpsert) UpdateExtra() *CouponAllocatedUpsert {
	u.SetExcluded(couponallocated.FieldExtra)
	return u
}

// ClearExtra clears the value of the "extra" field.
func (u *CouponAllocatedUpsert) ClearExtra() *CouponAllocatedUpsert {
	u.SetNull(couponallocated.FieldExtra)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CouponAllocated.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(couponallocated.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CouponAllocatedUpsertOne) UpdateNewValues() *CouponAllocatedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(couponallocated.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CouponAllocated.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CouponAllocatedUpsertOne) Ignore() *CouponAllocatedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CouponAllocatedUpsertOne) DoNothing() *CouponAllocatedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CouponAllocatedCreate.OnConflict
// documentation for more info.
func (u *CouponAllocatedUpsertOne) Update(set func(*CouponAllocatedUpsert)) *CouponAllocatedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CouponAllocatedUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CouponAllocatedUpsertOne) SetCreatedAt(v uint32) *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CouponAllocatedUpsertOne) AddCreatedAt(v uint32) *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CouponAllocatedUpsertOne) UpdateCreatedAt() *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponAllocatedUpsertOne) SetUpdatedAt(v uint32) *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CouponAllocatedUpsertOne) AddUpdatedAt(v uint32) *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponAllocatedUpsertOne) UpdateUpdatedAt() *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CouponAllocatedUpsertOne) SetDeletedAt(v uint32) *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CouponAllocatedUpsertOne) AddDeletedAt(v uint32) *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CouponAllocatedUpsertOne) UpdateDeletedAt() *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *CouponAllocatedUpsertOne) SetEntID(v uuid.UUID) *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CouponAllocatedUpsertOne) UpdateEntID() *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *CouponAllocatedUpsertOne) SetAppID(v uuid.UUID) *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CouponAllocatedUpsertOne) UpdateAppID() *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *CouponAllocatedUpsertOne) ClearAppID() *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *CouponAllocatedUpsertOne) SetUserID(v uuid.UUID) *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CouponAllocatedUpsertOne) UpdateUserID() *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *CouponAllocatedUpsertOne) ClearUserID() *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.ClearUserID()
	})
}

// SetCouponID sets the "coupon_id" field.
func (u *CouponAllocatedUpsertOne) SetCouponID(v uuid.UUID) *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetCouponID(v)
	})
}

// UpdateCouponID sets the "coupon_id" field to the value that was provided on create.
func (u *CouponAllocatedUpsertOne) UpdateCouponID() *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateCouponID()
	})
}

// ClearCouponID clears the value of the "coupon_id" field.
func (u *CouponAllocatedUpsertOne) ClearCouponID() *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.ClearCouponID()
	})
}

// SetDenomination sets the "denomination" field.
func (u *CouponAllocatedUpsertOne) SetDenomination(v decimal.Decimal) *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetDenomination(v)
	})
}

// UpdateDenomination sets the "denomination" field to the value that was provided on create.
func (u *CouponAllocatedUpsertOne) UpdateDenomination() *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateDenomination()
	})
}

// ClearDenomination clears the value of the "denomination" field.
func (u *CouponAllocatedUpsertOne) ClearDenomination() *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.ClearDenomination()
	})
}

// SetUsed sets the "used" field.
func (u *CouponAllocatedUpsertOne) SetUsed(v bool) *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetUsed(v)
	})
}

// UpdateUsed sets the "used" field to the value that was provided on create.
func (u *CouponAllocatedUpsertOne) UpdateUsed() *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateUsed()
	})
}

// ClearUsed clears the value of the "used" field.
func (u *CouponAllocatedUpsertOne) ClearUsed() *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.ClearUsed()
	})
}

// SetUsedAt sets the "used_at" field.
func (u *CouponAllocatedUpsertOne) SetUsedAt(v uint32) *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetUsedAt(v)
	})
}

// AddUsedAt adds v to the "used_at" field.
func (u *CouponAllocatedUpsertOne) AddUsedAt(v uint32) *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.AddUsedAt(v)
	})
}

// UpdateUsedAt sets the "used_at" field to the value that was provided on create.
func (u *CouponAllocatedUpsertOne) UpdateUsedAt() *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateUsedAt()
	})
}

// ClearUsedAt clears the value of the "used_at" field.
func (u *CouponAllocatedUpsertOne) ClearUsedAt() *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.ClearUsedAt()
	})
}

// SetUsedByOrderID sets the "used_by_order_id" field.
func (u *CouponAllocatedUpsertOne) SetUsedByOrderID(v uuid.UUID) *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetUsedByOrderID(v)
	})
}

// UpdateUsedByOrderID sets the "used_by_order_id" field to the value that was provided on create.
func (u *CouponAllocatedUpsertOne) UpdateUsedByOrderID() *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateUsedByOrderID()
	})
}

// ClearUsedByOrderID clears the value of the "used_by_order_id" field.
func (u *CouponAllocatedUpsertOne) ClearUsedByOrderID() *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.ClearUsedByOrderID()
	})
}

// SetStartAt sets the "start_at" field.
func (u *CouponAllocatedUpsertOne) SetStartAt(v uint32) *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *CouponAllocatedUpsertOne) AddStartAt(v uint32) *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *CouponAllocatedUpsertOne) UpdateStartAt() *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *CouponAllocatedUpsertOne) ClearStartAt() *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.ClearStartAt()
	})
}

// SetCouponScope sets the "coupon_scope" field.
func (u *CouponAllocatedUpsertOne) SetCouponScope(v string) *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetCouponScope(v)
	})
}

// UpdateCouponScope sets the "coupon_scope" field to the value that was provided on create.
func (u *CouponAllocatedUpsertOne) UpdateCouponScope() *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateCouponScope()
	})
}

// ClearCouponScope clears the value of the "coupon_scope" field.
func (u *CouponAllocatedUpsertOne) ClearCouponScope() *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.ClearCouponScope()
	})
}

// SetCashable sets the "cashable" field.
func (u *CouponAllocatedUpsertOne) SetCashable(v bool) *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetCashable(v)
	})
}

// UpdateCashable sets the "cashable" field to the value that was provided on create.
func (u *CouponAllocatedUpsertOne) UpdateCashable() *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateCashable()
	})
}

// ClearCashable clears the value of the "cashable" field.
func (u *CouponAllocatedUpsertOne) ClearCashable() *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.ClearCashable()
	})
}

// SetExtra sets the "extra" field.
func (u *CouponAllocatedUpsertOne) SetExtra(v string) *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetExtra(v)
	})
}

// UpdateExtra sets the "extra" field to the value that was provided on create.
func (u *CouponAllocatedUpsertOne) UpdateExtra() *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateExtra()
	})
}

// ClearExtra clears the value of the "extra" field.
func (u *CouponAllocatedUpsertOne) ClearExtra() *CouponAllocatedUpsertOne {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.ClearExtra()
	})
}

// Exec executes the query.
func (u *CouponAllocatedUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CouponAllocatedCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CouponAllocatedUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CouponAllocatedUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CouponAllocatedUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CouponAllocatedCreateBulk is the builder for creating many CouponAllocated entities in bulk.
type CouponAllocatedCreateBulk struct {
	config
	err      error
	builders []*CouponAllocatedCreate
	conflict []sql.ConflictOption
}

// Save creates the CouponAllocated entities in the database.
func (cacb *CouponAllocatedCreateBulk) Save(ctx context.Context) ([]*CouponAllocated, error) {
	if cacb.err != nil {
		return nil, cacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cacb.builders))
	nodes := make([]*CouponAllocated, len(cacb.builders))
	mutators := make([]Mutator, len(cacb.builders))
	for i := range cacb.builders {
		func(i int, root context.Context) {
			builder := cacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CouponAllocatedMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cacb *CouponAllocatedCreateBulk) SaveX(ctx context.Context) []*CouponAllocated {
	v, err := cacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cacb *CouponAllocatedCreateBulk) Exec(ctx context.Context) error {
	_, err := cacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cacb *CouponAllocatedCreateBulk) ExecX(ctx context.Context) {
	if err := cacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CouponAllocated.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CouponAllocatedUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cacb *CouponAllocatedCreateBulk) OnConflict(opts ...sql.ConflictOption) *CouponAllocatedUpsertBulk {
	cacb.conflict = opts
	return &CouponAllocatedUpsertBulk{
		create: cacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CouponAllocated.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cacb *CouponAllocatedCreateBulk) OnConflictColumns(columns ...string) *CouponAllocatedUpsertBulk {
	cacb.conflict = append(cacb.conflict, sql.ConflictColumns(columns...))
	return &CouponAllocatedUpsertBulk{
		create: cacb,
	}
}

// CouponAllocatedUpsertBulk is the builder for "upsert"-ing
// a bulk of CouponAllocated nodes.
type CouponAllocatedUpsertBulk struct {
	create *CouponAllocatedCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CouponAllocated.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(couponallocated.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CouponAllocatedUpsertBulk) UpdateNewValues() *CouponAllocatedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(couponallocated.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CouponAllocated.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CouponAllocatedUpsertBulk) Ignore() *CouponAllocatedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CouponAllocatedUpsertBulk) DoNothing() *CouponAllocatedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CouponAllocatedCreateBulk.OnConflict
// documentation for more info.
func (u *CouponAllocatedUpsertBulk) Update(set func(*CouponAllocatedUpsert)) *CouponAllocatedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CouponAllocatedUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CouponAllocatedUpsertBulk) SetCreatedAt(v uint32) *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CouponAllocatedUpsertBulk) AddCreatedAt(v uint32) *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CouponAllocatedUpsertBulk) UpdateCreatedAt() *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponAllocatedUpsertBulk) SetUpdatedAt(v uint32) *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CouponAllocatedUpsertBulk) AddUpdatedAt(v uint32) *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponAllocatedUpsertBulk) UpdateUpdatedAt() *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CouponAllocatedUpsertBulk) SetDeletedAt(v uint32) *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CouponAllocatedUpsertBulk) AddDeletedAt(v uint32) *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CouponAllocatedUpsertBulk) UpdateDeletedAt() *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *CouponAllocatedUpsertBulk) SetEntID(v uuid.UUID) *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CouponAllocatedUpsertBulk) UpdateEntID() *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *CouponAllocatedUpsertBulk) SetAppID(v uuid.UUID) *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CouponAllocatedUpsertBulk) UpdateAppID() *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *CouponAllocatedUpsertBulk) ClearAppID() *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *CouponAllocatedUpsertBulk) SetUserID(v uuid.UUID) *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CouponAllocatedUpsertBulk) UpdateUserID() *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *CouponAllocatedUpsertBulk) ClearUserID() *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.ClearUserID()
	})
}

// SetCouponID sets the "coupon_id" field.
func (u *CouponAllocatedUpsertBulk) SetCouponID(v uuid.UUID) *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetCouponID(v)
	})
}

// UpdateCouponID sets the "coupon_id" field to the value that was provided on create.
func (u *CouponAllocatedUpsertBulk) UpdateCouponID() *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateCouponID()
	})
}

// ClearCouponID clears the value of the "coupon_id" field.
func (u *CouponAllocatedUpsertBulk) ClearCouponID() *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.ClearCouponID()
	})
}

// SetDenomination sets the "denomination" field.
func (u *CouponAllocatedUpsertBulk) SetDenomination(v decimal.Decimal) *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetDenomination(v)
	})
}

// UpdateDenomination sets the "denomination" field to the value that was provided on create.
func (u *CouponAllocatedUpsertBulk) UpdateDenomination() *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateDenomination()
	})
}

// ClearDenomination clears the value of the "denomination" field.
func (u *CouponAllocatedUpsertBulk) ClearDenomination() *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.ClearDenomination()
	})
}

// SetUsed sets the "used" field.
func (u *CouponAllocatedUpsertBulk) SetUsed(v bool) *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetUsed(v)
	})
}

// UpdateUsed sets the "used" field to the value that was provided on create.
func (u *CouponAllocatedUpsertBulk) UpdateUsed() *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateUsed()
	})
}

// ClearUsed clears the value of the "used" field.
func (u *CouponAllocatedUpsertBulk) ClearUsed() *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.ClearUsed()
	})
}

// SetUsedAt sets the "used_at" field.
func (u *CouponAllocatedUpsertBulk) SetUsedAt(v uint32) *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetUsedAt(v)
	})
}

// AddUsedAt adds v to the "used_at" field.
func (u *CouponAllocatedUpsertBulk) AddUsedAt(v uint32) *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.AddUsedAt(v)
	})
}

// UpdateUsedAt sets the "used_at" field to the value that was provided on create.
func (u *CouponAllocatedUpsertBulk) UpdateUsedAt() *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateUsedAt()
	})
}

// ClearUsedAt clears the value of the "used_at" field.
func (u *CouponAllocatedUpsertBulk) ClearUsedAt() *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.ClearUsedAt()
	})
}

// SetUsedByOrderID sets the "used_by_order_id" field.
func (u *CouponAllocatedUpsertBulk) SetUsedByOrderID(v uuid.UUID) *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetUsedByOrderID(v)
	})
}

// UpdateUsedByOrderID sets the "used_by_order_id" field to the value that was provided on create.
func (u *CouponAllocatedUpsertBulk) UpdateUsedByOrderID() *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateUsedByOrderID()
	})
}

// ClearUsedByOrderID clears the value of the "used_by_order_id" field.
func (u *CouponAllocatedUpsertBulk) ClearUsedByOrderID() *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.ClearUsedByOrderID()
	})
}

// SetStartAt sets the "start_at" field.
func (u *CouponAllocatedUpsertBulk) SetStartAt(v uint32) *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *CouponAllocatedUpsertBulk) AddStartAt(v uint32) *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *CouponAllocatedUpsertBulk) UpdateStartAt() *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *CouponAllocatedUpsertBulk) ClearStartAt() *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.ClearStartAt()
	})
}

// SetCouponScope sets the "coupon_scope" field.
func (u *CouponAllocatedUpsertBulk) SetCouponScope(v string) *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetCouponScope(v)
	})
}

// UpdateCouponScope sets the "coupon_scope" field to the value that was provided on create.
func (u *CouponAllocatedUpsertBulk) UpdateCouponScope() *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateCouponScope()
	})
}

// ClearCouponScope clears the value of the "coupon_scope" field.
func (u *CouponAllocatedUpsertBulk) ClearCouponScope() *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.ClearCouponScope()
	})
}

// SetCashable sets the "cashable" field.
func (u *CouponAllocatedUpsertBulk) SetCashable(v bool) *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetCashable(v)
	})
}

// UpdateCashable sets the "cashable" field to the value that was provided on create.
func (u *CouponAllocatedUpsertBulk) UpdateCashable() *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateCashable()
	})
}

// ClearCashable clears the value of the "cashable" field.
func (u *CouponAllocatedUpsertBulk) ClearCashable() *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.ClearCashable()
	})
}

// SetExtra sets the "extra" field.
func (u *CouponAllocatedUpsertBulk) SetExtra(v string) *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.SetExtra(v)
	})
}

// UpdateExtra sets the "extra" field to the value that was provided on create.
func (u *CouponAllocatedUpsertBulk) UpdateExtra() *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.UpdateExtra()
	})
}

// ClearExtra clears the value of the "extra" field.
func (u *CouponAllocatedUpsertBulk) ClearExtra() *CouponAllocatedUpsertBulk {
	return u.Update(func(s *CouponAllocatedUpsert) {
		s.ClearExtra()
	})
}

// Exec executes the query.
func (u *CouponAllocatedUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the CouponAllocatedCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CouponAllocatedCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CouponAllocatedUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

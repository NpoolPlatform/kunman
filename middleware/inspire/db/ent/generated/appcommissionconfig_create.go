// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/appcommissionconfig"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppCommissionConfigCreate is the builder for creating a AppCommissionConfig entity.
type AppCommissionConfigCreate struct {
	config
	mutation *AppCommissionConfigMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (accc *AppCommissionConfigCreate) SetCreatedAt(u uint32) *AppCommissionConfigCreate {
	accc.mutation.SetCreatedAt(u)
	return accc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (accc *AppCommissionConfigCreate) SetNillableCreatedAt(u *uint32) *AppCommissionConfigCreate {
	if u != nil {
		accc.SetCreatedAt(*u)
	}
	return accc
}

// SetUpdatedAt sets the "updated_at" field.
func (accc *AppCommissionConfigCreate) SetUpdatedAt(u uint32) *AppCommissionConfigCreate {
	accc.mutation.SetUpdatedAt(u)
	return accc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (accc *AppCommissionConfigCreate) SetNillableUpdatedAt(u *uint32) *AppCommissionConfigCreate {
	if u != nil {
		accc.SetUpdatedAt(*u)
	}
	return accc
}

// SetDeletedAt sets the "deleted_at" field.
func (accc *AppCommissionConfigCreate) SetDeletedAt(u uint32) *AppCommissionConfigCreate {
	accc.mutation.SetDeletedAt(u)
	return accc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (accc *AppCommissionConfigCreate) SetNillableDeletedAt(u *uint32) *AppCommissionConfigCreate {
	if u != nil {
		accc.SetDeletedAt(*u)
	}
	return accc
}

// SetEntID sets the "ent_id" field.
func (accc *AppCommissionConfigCreate) SetEntID(u uuid.UUID) *AppCommissionConfigCreate {
	accc.mutation.SetEntID(u)
	return accc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (accc *AppCommissionConfigCreate) SetNillableEntID(u *uuid.UUID) *AppCommissionConfigCreate {
	if u != nil {
		accc.SetEntID(*u)
	}
	return accc
}

// SetAppID sets the "app_id" field.
func (accc *AppCommissionConfigCreate) SetAppID(u uuid.UUID) *AppCommissionConfigCreate {
	accc.mutation.SetAppID(u)
	return accc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (accc *AppCommissionConfigCreate) SetNillableAppID(u *uuid.UUID) *AppCommissionConfigCreate {
	if u != nil {
		accc.SetAppID(*u)
	}
	return accc
}

// SetLevel sets the "level" field.
func (accc *AppCommissionConfigCreate) SetLevel(u uint32) *AppCommissionConfigCreate {
	accc.mutation.SetLevel(u)
	return accc
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (accc *AppCommissionConfigCreate) SetNillableLevel(u *uint32) *AppCommissionConfigCreate {
	if u != nil {
		accc.SetLevel(*u)
	}
	return accc
}

// SetThresholdAmount sets the "threshold_amount" field.
func (accc *AppCommissionConfigCreate) SetThresholdAmount(d decimal.Decimal) *AppCommissionConfigCreate {
	accc.mutation.SetThresholdAmount(d)
	return accc
}

// SetNillableThresholdAmount sets the "threshold_amount" field if the given value is not nil.
func (accc *AppCommissionConfigCreate) SetNillableThresholdAmount(d *decimal.Decimal) *AppCommissionConfigCreate {
	if d != nil {
		accc.SetThresholdAmount(*d)
	}
	return accc
}

// SetAmountOrPercent sets the "amount_or_percent" field.
func (accc *AppCommissionConfigCreate) SetAmountOrPercent(d decimal.Decimal) *AppCommissionConfigCreate {
	accc.mutation.SetAmountOrPercent(d)
	return accc
}

// SetNillableAmountOrPercent sets the "amount_or_percent" field if the given value is not nil.
func (accc *AppCommissionConfigCreate) SetNillableAmountOrPercent(d *decimal.Decimal) *AppCommissionConfigCreate {
	if d != nil {
		accc.SetAmountOrPercent(*d)
	}
	return accc
}

// SetStartAt sets the "start_at" field.
func (accc *AppCommissionConfigCreate) SetStartAt(u uint32) *AppCommissionConfigCreate {
	accc.mutation.SetStartAt(u)
	return accc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (accc *AppCommissionConfigCreate) SetNillableStartAt(u *uint32) *AppCommissionConfigCreate {
	if u != nil {
		accc.SetStartAt(*u)
	}
	return accc
}

// SetEndAt sets the "end_at" field.
func (accc *AppCommissionConfigCreate) SetEndAt(u uint32) *AppCommissionConfigCreate {
	accc.mutation.SetEndAt(u)
	return accc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (accc *AppCommissionConfigCreate) SetNillableEndAt(u *uint32) *AppCommissionConfigCreate {
	if u != nil {
		accc.SetEndAt(*u)
	}
	return accc
}

// SetInvites sets the "invites" field.
func (accc *AppCommissionConfigCreate) SetInvites(u uint32) *AppCommissionConfigCreate {
	accc.mutation.SetInvites(u)
	return accc
}

// SetNillableInvites sets the "invites" field if the given value is not nil.
func (accc *AppCommissionConfigCreate) SetNillableInvites(u *uint32) *AppCommissionConfigCreate {
	if u != nil {
		accc.SetInvites(*u)
	}
	return accc
}

// SetSettleType sets the "settle_type" field.
func (accc *AppCommissionConfigCreate) SetSettleType(s string) *AppCommissionConfigCreate {
	accc.mutation.SetSettleType(s)
	return accc
}

// SetNillableSettleType sets the "settle_type" field if the given value is not nil.
func (accc *AppCommissionConfigCreate) SetNillableSettleType(s *string) *AppCommissionConfigCreate {
	if s != nil {
		accc.SetSettleType(*s)
	}
	return accc
}

// SetDisabled sets the "disabled" field.
func (accc *AppCommissionConfigCreate) SetDisabled(b bool) *AppCommissionConfigCreate {
	accc.mutation.SetDisabled(b)
	return accc
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (accc *AppCommissionConfigCreate) SetNillableDisabled(b *bool) *AppCommissionConfigCreate {
	if b != nil {
		accc.SetDisabled(*b)
	}
	return accc
}

// SetID sets the "id" field.
func (accc *AppCommissionConfigCreate) SetID(u uint32) *AppCommissionConfigCreate {
	accc.mutation.SetID(u)
	return accc
}

// Mutation returns the AppCommissionConfigMutation object of the builder.
func (accc *AppCommissionConfigCreate) Mutation() *AppCommissionConfigMutation {
	return accc.mutation
}

// Save creates the AppCommissionConfig in the database.
func (accc *AppCommissionConfigCreate) Save(ctx context.Context) (*AppCommissionConfig, error) {
	accc.defaults()
	return withHooks(ctx, accc.sqlSave, accc.mutation, accc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (accc *AppCommissionConfigCreate) SaveX(ctx context.Context) *AppCommissionConfig {
	v, err := accc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (accc *AppCommissionConfigCreate) Exec(ctx context.Context) error {
	_, err := accc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accc *AppCommissionConfigCreate) ExecX(ctx context.Context) {
	if err := accc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (accc *AppCommissionConfigCreate) defaults() {
	if _, ok := accc.mutation.CreatedAt(); !ok {
		v := appcommissionconfig.DefaultCreatedAt()
		accc.mutation.SetCreatedAt(v)
	}
	if _, ok := accc.mutation.UpdatedAt(); !ok {
		v := appcommissionconfig.DefaultUpdatedAt()
		accc.mutation.SetUpdatedAt(v)
	}
	if _, ok := accc.mutation.DeletedAt(); !ok {
		v := appcommissionconfig.DefaultDeletedAt()
		accc.mutation.SetDeletedAt(v)
	}
	if _, ok := accc.mutation.EntID(); !ok {
		v := appcommissionconfig.DefaultEntID()
		accc.mutation.SetEntID(v)
	}
	if _, ok := accc.mutation.AppID(); !ok {
		v := appcommissionconfig.DefaultAppID()
		accc.mutation.SetAppID(v)
	}
	if _, ok := accc.mutation.Level(); !ok {
		v := appcommissionconfig.DefaultLevel
		accc.mutation.SetLevel(v)
	}
	if _, ok := accc.mutation.ThresholdAmount(); !ok {
		v := appcommissionconfig.DefaultThresholdAmount
		accc.mutation.SetThresholdAmount(v)
	}
	if _, ok := accc.mutation.AmountOrPercent(); !ok {
		v := appcommissionconfig.DefaultAmountOrPercent
		accc.mutation.SetAmountOrPercent(v)
	}
	if _, ok := accc.mutation.StartAt(); !ok {
		v := appcommissionconfig.DefaultStartAt
		accc.mutation.SetStartAt(v)
	}
	if _, ok := accc.mutation.EndAt(); !ok {
		v := appcommissionconfig.DefaultEndAt
		accc.mutation.SetEndAt(v)
	}
	if _, ok := accc.mutation.Invites(); !ok {
		v := appcommissionconfig.DefaultInvites
		accc.mutation.SetInvites(v)
	}
	if _, ok := accc.mutation.SettleType(); !ok {
		v := appcommissionconfig.DefaultSettleType
		accc.mutation.SetSettleType(v)
	}
	if _, ok := accc.mutation.Disabled(); !ok {
		v := appcommissionconfig.DefaultDisabled
		accc.mutation.SetDisabled(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (accc *AppCommissionConfigCreate) check() error {
	if _, ok := accc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "AppCommissionConfig.created_at"`)}
	}
	if _, ok := accc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "AppCommissionConfig.updated_at"`)}
	}
	if _, ok := accc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "AppCommissionConfig.deleted_at"`)}
	}
	if _, ok := accc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "AppCommissionConfig.ent_id"`)}
	}
	return nil
}

func (accc *AppCommissionConfigCreate) sqlSave(ctx context.Context) (*AppCommissionConfig, error) {
	if err := accc.check(); err != nil {
		return nil, err
	}
	_node, _spec := accc.createSpec()
	if err := sqlgraph.CreateNode(ctx, accc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	accc.mutation.id = &_node.ID
	accc.mutation.done = true
	return _node, nil
}

func (accc *AppCommissionConfigCreate) createSpec() (*AppCommissionConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &AppCommissionConfig{config: accc.config}
		_spec = sqlgraph.NewCreateSpec(appcommissionconfig.Table, sqlgraph.NewFieldSpec(appcommissionconfig.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = accc.conflict
	if id, ok := accc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := accc.mutation.CreatedAt(); ok {
		_spec.SetField(appcommissionconfig.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := accc.mutation.UpdatedAt(); ok {
		_spec.SetField(appcommissionconfig.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := accc.mutation.DeletedAt(); ok {
		_spec.SetField(appcommissionconfig.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := accc.mutation.EntID(); ok {
		_spec.SetField(appcommissionconfig.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := accc.mutation.AppID(); ok {
		_spec.SetField(appcommissionconfig.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := accc.mutation.Level(); ok {
		_spec.SetField(appcommissionconfig.FieldLevel, field.TypeUint32, value)
		_node.Level = value
	}
	if value, ok := accc.mutation.ThresholdAmount(); ok {
		_spec.SetField(appcommissionconfig.FieldThresholdAmount, field.TypeOther, value)
		_node.ThresholdAmount = value
	}
	if value, ok := accc.mutation.AmountOrPercent(); ok {
		_spec.SetField(appcommissionconfig.FieldAmountOrPercent, field.TypeOther, value)
		_node.AmountOrPercent = value
	}
	if value, ok := accc.mutation.StartAt(); ok {
		_spec.SetField(appcommissionconfig.FieldStartAt, field.TypeUint32, value)
		_node.StartAt = value
	}
	if value, ok := accc.mutation.EndAt(); ok {
		_spec.SetField(appcommissionconfig.FieldEndAt, field.TypeUint32, value)
		_node.EndAt = value
	}
	if value, ok := accc.mutation.Invites(); ok {
		_spec.SetField(appcommissionconfig.FieldInvites, field.TypeUint32, value)
		_node.Invites = value
	}
	if value, ok := accc.mutation.SettleType(); ok {
		_spec.SetField(appcommissionconfig.FieldSettleType, field.TypeString, value)
		_node.SettleType = value
	}
	if value, ok := accc.mutation.Disabled(); ok {
		_spec.SetField(appcommissionconfig.FieldDisabled, field.TypeBool, value)
		_node.Disabled = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppCommissionConfig.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppCommissionConfigUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (accc *AppCommissionConfigCreate) OnConflict(opts ...sql.ConflictOption) *AppCommissionConfigUpsertOne {
	accc.conflict = opts
	return &AppCommissionConfigUpsertOne{
		create: accc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppCommissionConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (accc *AppCommissionConfigCreate) OnConflictColumns(columns ...string) *AppCommissionConfigUpsertOne {
	accc.conflict = append(accc.conflict, sql.ConflictColumns(columns...))
	return &AppCommissionConfigUpsertOne{
		create: accc,
	}
}

type (
	// AppCommissionConfigUpsertOne is the builder for "upsert"-ing
	//  one AppCommissionConfig node.
	AppCommissionConfigUpsertOne struct {
		create *AppCommissionConfigCreate
	}

	// AppCommissionConfigUpsert is the "OnConflict" setter.
	AppCommissionConfigUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *AppCommissionConfigUpsert) SetCreatedAt(v uint32) *AppCommissionConfigUpsert {
	u.Set(appcommissionconfig.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppCommissionConfigUpsert) UpdateCreatedAt() *AppCommissionConfigUpsert {
	u.SetExcluded(appcommissionconfig.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppCommissionConfigUpsert) AddCreatedAt(v uint32) *AppCommissionConfigUpsert {
	u.Add(appcommissionconfig.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppCommissionConfigUpsert) SetUpdatedAt(v uint32) *AppCommissionConfigUpsert {
	u.Set(appcommissionconfig.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppCommissionConfigUpsert) UpdateUpdatedAt() *AppCommissionConfigUpsert {
	u.SetExcluded(appcommissionconfig.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppCommissionConfigUpsert) AddUpdatedAt(v uint32) *AppCommissionConfigUpsert {
	u.Add(appcommissionconfig.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppCommissionConfigUpsert) SetDeletedAt(v uint32) *AppCommissionConfigUpsert {
	u.Set(appcommissionconfig.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppCommissionConfigUpsert) UpdateDeletedAt() *AppCommissionConfigUpsert {
	u.SetExcluded(appcommissionconfig.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppCommissionConfigUpsert) AddDeletedAt(v uint32) *AppCommissionConfigUpsert {
	u.Add(appcommissionconfig.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppCommissionConfigUpsert) SetEntID(v uuid.UUID) *AppCommissionConfigUpsert {
	u.Set(appcommissionconfig.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppCommissionConfigUpsert) UpdateEntID() *AppCommissionConfigUpsert {
	u.SetExcluded(appcommissionconfig.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppCommissionConfigUpsert) SetAppID(v uuid.UUID) *AppCommissionConfigUpsert {
	u.Set(appcommissionconfig.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppCommissionConfigUpsert) UpdateAppID() *AppCommissionConfigUpsert {
	u.SetExcluded(appcommissionconfig.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppCommissionConfigUpsert) ClearAppID() *AppCommissionConfigUpsert {
	u.SetNull(appcommissionconfig.FieldAppID)
	return u
}

// SetLevel sets the "level" field.
func (u *AppCommissionConfigUpsert) SetLevel(v uint32) *AppCommissionConfigUpsert {
	u.Set(appcommissionconfig.FieldLevel, v)
	return u
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *AppCommissionConfigUpsert) UpdateLevel() *AppCommissionConfigUpsert {
	u.SetExcluded(appcommissionconfig.FieldLevel)
	return u
}

// AddLevel adds v to the "level" field.
func (u *AppCommissionConfigUpsert) AddLevel(v uint32) *AppCommissionConfigUpsert {
	u.Add(appcommissionconfig.FieldLevel, v)
	return u
}

// ClearLevel clears the value of the "level" field.
func (u *AppCommissionConfigUpsert) ClearLevel() *AppCommissionConfigUpsert {
	u.SetNull(appcommissionconfig.FieldLevel)
	return u
}

// SetThresholdAmount sets the "threshold_amount" field.
func (u *AppCommissionConfigUpsert) SetThresholdAmount(v decimal.Decimal) *AppCommissionConfigUpsert {
	u.Set(appcommissionconfig.FieldThresholdAmount, v)
	return u
}

// UpdateThresholdAmount sets the "threshold_amount" field to the value that was provided on create.
func (u *AppCommissionConfigUpsert) UpdateThresholdAmount() *AppCommissionConfigUpsert {
	u.SetExcluded(appcommissionconfig.FieldThresholdAmount)
	return u
}

// ClearThresholdAmount clears the value of the "threshold_amount" field.
func (u *AppCommissionConfigUpsert) ClearThresholdAmount() *AppCommissionConfigUpsert {
	u.SetNull(appcommissionconfig.FieldThresholdAmount)
	return u
}

// SetAmountOrPercent sets the "amount_or_percent" field.
func (u *AppCommissionConfigUpsert) SetAmountOrPercent(v decimal.Decimal) *AppCommissionConfigUpsert {
	u.Set(appcommissionconfig.FieldAmountOrPercent, v)
	return u
}

// UpdateAmountOrPercent sets the "amount_or_percent" field to the value that was provided on create.
func (u *AppCommissionConfigUpsert) UpdateAmountOrPercent() *AppCommissionConfigUpsert {
	u.SetExcluded(appcommissionconfig.FieldAmountOrPercent)
	return u
}

// ClearAmountOrPercent clears the value of the "amount_or_percent" field.
func (u *AppCommissionConfigUpsert) ClearAmountOrPercent() *AppCommissionConfigUpsert {
	u.SetNull(appcommissionconfig.FieldAmountOrPercent)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *AppCommissionConfigUpsert) SetStartAt(v uint32) *AppCommissionConfigUpsert {
	u.Set(appcommissionconfig.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *AppCommissionConfigUpsert) UpdateStartAt() *AppCommissionConfigUpsert {
	u.SetExcluded(appcommissionconfig.FieldStartAt)
	return u
}

// AddStartAt adds v to the "start_at" field.
func (u *AppCommissionConfigUpsert) AddStartAt(v uint32) *AppCommissionConfigUpsert {
	u.Add(appcommissionconfig.FieldStartAt, v)
	return u
}

// ClearStartAt clears the value of the "start_at" field.
func (u *AppCommissionConfigUpsert) ClearStartAt() *AppCommissionConfigUpsert {
	u.SetNull(appcommissionconfig.FieldStartAt)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *AppCommissionConfigUpsert) SetEndAt(v uint32) *AppCommissionConfigUpsert {
	u.Set(appcommissionconfig.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *AppCommissionConfigUpsert) UpdateEndAt() *AppCommissionConfigUpsert {
	u.SetExcluded(appcommissionconfig.FieldEndAt)
	return u
}

// AddEndAt adds v to the "end_at" field.
func (u *AppCommissionConfigUpsert) AddEndAt(v uint32) *AppCommissionConfigUpsert {
	u.Add(appcommissionconfig.FieldEndAt, v)
	return u
}

// ClearEndAt clears the value of the "end_at" field.
func (u *AppCommissionConfigUpsert) ClearEndAt() *AppCommissionConfigUpsert {
	u.SetNull(appcommissionconfig.FieldEndAt)
	return u
}

// SetInvites sets the "invites" field.
func (u *AppCommissionConfigUpsert) SetInvites(v uint32) *AppCommissionConfigUpsert {
	u.Set(appcommissionconfig.FieldInvites, v)
	return u
}

// UpdateInvites sets the "invites" field to the value that was provided on create.
func (u *AppCommissionConfigUpsert) UpdateInvites() *AppCommissionConfigUpsert {
	u.SetExcluded(appcommissionconfig.FieldInvites)
	return u
}

// AddInvites adds v to the "invites" field.
func (u *AppCommissionConfigUpsert) AddInvites(v uint32) *AppCommissionConfigUpsert {
	u.Add(appcommissionconfig.FieldInvites, v)
	return u
}

// ClearInvites clears the value of the "invites" field.
func (u *AppCommissionConfigUpsert) ClearInvites() *AppCommissionConfigUpsert {
	u.SetNull(appcommissionconfig.FieldInvites)
	return u
}

// SetSettleType sets the "settle_type" field.
func (u *AppCommissionConfigUpsert) SetSettleType(v string) *AppCommissionConfigUpsert {
	u.Set(appcommissionconfig.FieldSettleType, v)
	return u
}

// UpdateSettleType sets the "settle_type" field to the value that was provided on create.
func (u *AppCommissionConfigUpsert) UpdateSettleType() *AppCommissionConfigUpsert {
	u.SetExcluded(appcommissionconfig.FieldSettleType)
	return u
}

// ClearSettleType clears the value of the "settle_type" field.
func (u *AppCommissionConfigUpsert) ClearSettleType() *AppCommissionConfigUpsert {
	u.SetNull(appcommissionconfig.FieldSettleType)
	return u
}

// SetDisabled sets the "disabled" field.
func (u *AppCommissionConfigUpsert) SetDisabled(v bool) *AppCommissionConfigUpsert {
	u.Set(appcommissionconfig.FieldDisabled, v)
	return u
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *AppCommissionConfigUpsert) UpdateDisabled() *AppCommissionConfigUpsert {
	u.SetExcluded(appcommissionconfig.FieldDisabled)
	return u
}

// ClearDisabled clears the value of the "disabled" field.
func (u *AppCommissionConfigUpsert) ClearDisabled() *AppCommissionConfigUpsert {
	u.SetNull(appcommissionconfig.FieldDisabled)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppCommissionConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appcommissionconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppCommissionConfigUpsertOne) UpdateNewValues() *AppCommissionConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appcommissionconfig.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppCommissionConfig.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppCommissionConfigUpsertOne) Ignore() *AppCommissionConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppCommissionConfigUpsertOne) DoNothing() *AppCommissionConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppCommissionConfigCreate.OnConflict
// documentation for more info.
func (u *AppCommissionConfigUpsertOne) Update(set func(*AppCommissionConfigUpsert)) *AppCommissionConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppCommissionConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppCommissionConfigUpsertOne) SetCreatedAt(v uint32) *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppCommissionConfigUpsertOne) AddCreatedAt(v uint32) *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppCommissionConfigUpsertOne) UpdateCreatedAt() *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppCommissionConfigUpsertOne) SetUpdatedAt(v uint32) *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppCommissionConfigUpsertOne) AddUpdatedAt(v uint32) *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppCommissionConfigUpsertOne) UpdateUpdatedAt() *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppCommissionConfigUpsertOne) SetDeletedAt(v uint32) *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppCommissionConfigUpsertOne) AddDeletedAt(v uint32) *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppCommissionConfigUpsertOne) UpdateDeletedAt() *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *AppCommissionConfigUpsertOne) SetEntID(v uuid.UUID) *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppCommissionConfigUpsertOne) UpdateEntID() *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppCommissionConfigUpsertOne) SetAppID(v uuid.UUID) *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppCommissionConfigUpsertOne) UpdateAppID() *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppCommissionConfigUpsertOne) ClearAppID() *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.ClearAppID()
	})
}

// SetLevel sets the "level" field.
func (u *AppCommissionConfigUpsertOne) SetLevel(v uint32) *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.SetLevel(v)
	})
}

// AddLevel adds v to the "level" field.
func (u *AppCommissionConfigUpsertOne) AddLevel(v uint32) *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.AddLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *AppCommissionConfigUpsertOne) UpdateLevel() *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.UpdateLevel()
	})
}

// ClearLevel clears the value of the "level" field.
func (u *AppCommissionConfigUpsertOne) ClearLevel() *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.ClearLevel()
	})
}

// SetThresholdAmount sets the "threshold_amount" field.
func (u *AppCommissionConfigUpsertOne) SetThresholdAmount(v decimal.Decimal) *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.SetThresholdAmount(v)
	})
}

// UpdateThresholdAmount sets the "threshold_amount" field to the value that was provided on create.
func (u *AppCommissionConfigUpsertOne) UpdateThresholdAmount() *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.UpdateThresholdAmount()
	})
}

// ClearThresholdAmount clears the value of the "threshold_amount" field.
func (u *AppCommissionConfigUpsertOne) ClearThresholdAmount() *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.ClearThresholdAmount()
	})
}

// SetAmountOrPercent sets the "amount_or_percent" field.
func (u *AppCommissionConfigUpsertOne) SetAmountOrPercent(v decimal.Decimal) *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.SetAmountOrPercent(v)
	})
}

// UpdateAmountOrPercent sets the "amount_or_percent" field to the value that was provided on create.
func (u *AppCommissionConfigUpsertOne) UpdateAmountOrPercent() *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.UpdateAmountOrPercent()
	})
}

// ClearAmountOrPercent clears the value of the "amount_or_percent" field.
func (u *AppCommissionConfigUpsertOne) ClearAmountOrPercent() *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.ClearAmountOrPercent()
	})
}

// SetStartAt sets the "start_at" field.
func (u *AppCommissionConfigUpsertOne) SetStartAt(v uint32) *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *AppCommissionConfigUpsertOne) AddStartAt(v uint32) *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *AppCommissionConfigUpsertOne) UpdateStartAt() *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *AppCommissionConfigUpsertOne) ClearStartAt() *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *AppCommissionConfigUpsertOne) SetEndAt(v uint32) *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *AppCommissionConfigUpsertOne) AddEndAt(v uint32) *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *AppCommissionConfigUpsertOne) UpdateEndAt() *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *AppCommissionConfigUpsertOne) ClearEndAt() *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.ClearEndAt()
	})
}

// SetInvites sets the "invites" field.
func (u *AppCommissionConfigUpsertOne) SetInvites(v uint32) *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.SetInvites(v)
	})
}

// AddInvites adds v to the "invites" field.
func (u *AppCommissionConfigUpsertOne) AddInvites(v uint32) *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.AddInvites(v)
	})
}

// UpdateInvites sets the "invites" field to the value that was provided on create.
func (u *AppCommissionConfigUpsertOne) UpdateInvites() *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.UpdateInvites()
	})
}

// ClearInvites clears the value of the "invites" field.
func (u *AppCommissionConfigUpsertOne) ClearInvites() *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.ClearInvites()
	})
}

// SetSettleType sets the "settle_type" field.
func (u *AppCommissionConfigUpsertOne) SetSettleType(v string) *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.SetSettleType(v)
	})
}

// UpdateSettleType sets the "settle_type" field to the value that was provided on create.
func (u *AppCommissionConfigUpsertOne) UpdateSettleType() *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.UpdateSettleType()
	})
}

// ClearSettleType clears the value of the "settle_type" field.
func (u *AppCommissionConfigUpsertOne) ClearSettleType() *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.ClearSettleType()
	})
}

// SetDisabled sets the "disabled" field.
func (u *AppCommissionConfigUpsertOne) SetDisabled(v bool) *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.SetDisabled(v)
	})
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *AppCommissionConfigUpsertOne) UpdateDisabled() *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.UpdateDisabled()
	})
}

// ClearDisabled clears the value of the "disabled" field.
func (u *AppCommissionConfigUpsertOne) ClearDisabled() *AppCommissionConfigUpsertOne {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.ClearDisabled()
	})
}

// Exec executes the query.
func (u *AppCommissionConfigUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppCommissionConfigCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppCommissionConfigUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppCommissionConfigUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppCommissionConfigUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppCommissionConfigCreateBulk is the builder for creating many AppCommissionConfig entities in bulk.
type AppCommissionConfigCreateBulk struct {
	config
	err      error
	builders []*AppCommissionConfigCreate
	conflict []sql.ConflictOption
}

// Save creates the AppCommissionConfig entities in the database.
func (acccb *AppCommissionConfigCreateBulk) Save(ctx context.Context) ([]*AppCommissionConfig, error) {
	if acccb.err != nil {
		return nil, acccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acccb.builders))
	nodes := make([]*AppCommissionConfig, len(acccb.builders))
	mutators := make([]Mutator, len(acccb.builders))
	for i := range acccb.builders {
		func(i int, root context.Context) {
			builder := acccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppCommissionConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acccb *AppCommissionConfigCreateBulk) SaveX(ctx context.Context) []*AppCommissionConfig {
	v, err := acccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acccb *AppCommissionConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := acccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acccb *AppCommissionConfigCreateBulk) ExecX(ctx context.Context) {
	if err := acccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppCommissionConfig.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppCommissionConfigUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (acccb *AppCommissionConfigCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppCommissionConfigUpsertBulk {
	acccb.conflict = opts
	return &AppCommissionConfigUpsertBulk{
		create: acccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppCommissionConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acccb *AppCommissionConfigCreateBulk) OnConflictColumns(columns ...string) *AppCommissionConfigUpsertBulk {
	acccb.conflict = append(acccb.conflict, sql.ConflictColumns(columns...))
	return &AppCommissionConfigUpsertBulk{
		create: acccb,
	}
}

// AppCommissionConfigUpsertBulk is the builder for "upsert"-ing
// a bulk of AppCommissionConfig nodes.
type AppCommissionConfigUpsertBulk struct {
	create *AppCommissionConfigCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppCommissionConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appcommissionconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppCommissionConfigUpsertBulk) UpdateNewValues() *AppCommissionConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appcommissionconfig.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppCommissionConfig.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppCommissionConfigUpsertBulk) Ignore() *AppCommissionConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppCommissionConfigUpsertBulk) DoNothing() *AppCommissionConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppCommissionConfigCreateBulk.OnConflict
// documentation for more info.
func (u *AppCommissionConfigUpsertBulk) Update(set func(*AppCommissionConfigUpsert)) *AppCommissionConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppCommissionConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppCommissionConfigUpsertBulk) SetCreatedAt(v uint32) *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppCommissionConfigUpsertBulk) AddCreatedAt(v uint32) *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppCommissionConfigUpsertBulk) UpdateCreatedAt() *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppCommissionConfigUpsertBulk) SetUpdatedAt(v uint32) *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppCommissionConfigUpsertBulk) AddUpdatedAt(v uint32) *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppCommissionConfigUpsertBulk) UpdateUpdatedAt() *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppCommissionConfigUpsertBulk) SetDeletedAt(v uint32) *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppCommissionConfigUpsertBulk) AddDeletedAt(v uint32) *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppCommissionConfigUpsertBulk) UpdateDeletedAt() *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *AppCommissionConfigUpsertBulk) SetEntID(v uuid.UUID) *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppCommissionConfigUpsertBulk) UpdateEntID() *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppCommissionConfigUpsertBulk) SetAppID(v uuid.UUID) *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppCommissionConfigUpsertBulk) UpdateAppID() *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppCommissionConfigUpsertBulk) ClearAppID() *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.ClearAppID()
	})
}

// SetLevel sets the "level" field.
func (u *AppCommissionConfigUpsertBulk) SetLevel(v uint32) *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.SetLevel(v)
	})
}

// AddLevel adds v to the "level" field.
func (u *AppCommissionConfigUpsertBulk) AddLevel(v uint32) *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.AddLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *AppCommissionConfigUpsertBulk) UpdateLevel() *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.UpdateLevel()
	})
}

// ClearLevel clears the value of the "level" field.
func (u *AppCommissionConfigUpsertBulk) ClearLevel() *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.ClearLevel()
	})
}

// SetThresholdAmount sets the "threshold_amount" field.
func (u *AppCommissionConfigUpsertBulk) SetThresholdAmount(v decimal.Decimal) *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.SetThresholdAmount(v)
	})
}

// UpdateThresholdAmount sets the "threshold_amount" field to the value that was provided on create.
func (u *AppCommissionConfigUpsertBulk) UpdateThresholdAmount() *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.UpdateThresholdAmount()
	})
}

// ClearThresholdAmount clears the value of the "threshold_amount" field.
func (u *AppCommissionConfigUpsertBulk) ClearThresholdAmount() *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.ClearThresholdAmount()
	})
}

// SetAmountOrPercent sets the "amount_or_percent" field.
func (u *AppCommissionConfigUpsertBulk) SetAmountOrPercent(v decimal.Decimal) *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.SetAmountOrPercent(v)
	})
}

// UpdateAmountOrPercent sets the "amount_or_percent" field to the value that was provided on create.
func (u *AppCommissionConfigUpsertBulk) UpdateAmountOrPercent() *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.UpdateAmountOrPercent()
	})
}

// ClearAmountOrPercent clears the value of the "amount_or_percent" field.
func (u *AppCommissionConfigUpsertBulk) ClearAmountOrPercent() *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.ClearAmountOrPercent()
	})
}

// SetStartAt sets the "start_at" field.
func (u *AppCommissionConfigUpsertBulk) SetStartAt(v uint32) *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *AppCommissionConfigUpsertBulk) AddStartAt(v uint32) *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *AppCommissionConfigUpsertBulk) UpdateStartAt() *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *AppCommissionConfigUpsertBulk) ClearStartAt() *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *AppCommissionConfigUpsertBulk) SetEndAt(v uint32) *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *AppCommissionConfigUpsertBulk) AddEndAt(v uint32) *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *AppCommissionConfigUpsertBulk) UpdateEndAt() *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *AppCommissionConfigUpsertBulk) ClearEndAt() *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.ClearEndAt()
	})
}

// SetInvites sets the "invites" field.
func (u *AppCommissionConfigUpsertBulk) SetInvites(v uint32) *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.SetInvites(v)
	})
}

// AddInvites adds v to the "invites" field.
func (u *AppCommissionConfigUpsertBulk) AddInvites(v uint32) *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.AddInvites(v)
	})
}

// UpdateInvites sets the "invites" field to the value that was provided on create.
func (u *AppCommissionConfigUpsertBulk) UpdateInvites() *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.UpdateInvites()
	})
}

// ClearInvites clears the value of the "invites" field.
func (u *AppCommissionConfigUpsertBulk) ClearInvites() *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.ClearInvites()
	})
}

// SetSettleType sets the "settle_type" field.
func (u *AppCommissionConfigUpsertBulk) SetSettleType(v string) *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.SetSettleType(v)
	})
}

// UpdateSettleType sets the "settle_type" field to the value that was provided on create.
func (u *AppCommissionConfigUpsertBulk) UpdateSettleType() *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.UpdateSettleType()
	})
}

// ClearSettleType clears the value of the "settle_type" field.
func (u *AppCommissionConfigUpsertBulk) ClearSettleType() *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.ClearSettleType()
	})
}

// SetDisabled sets the "disabled" field.
func (u *AppCommissionConfigUpsertBulk) SetDisabled(v bool) *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.SetDisabled(v)
	})
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *AppCommissionConfigUpsertBulk) UpdateDisabled() *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.UpdateDisabled()
	})
}

// ClearDisabled clears the value of the "disabled" field.
func (u *AppCommissionConfigUpsertBulk) ClearDisabled() *AppCommissionConfigUpsertBulk {
	return u.Update(func(s *AppCommissionConfigUpsert) {
		s.ClearDisabled()
	})
}

// Exec executes the query.
func (u *AppCommissionConfigUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the AppCommissionConfigCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppCommissionConfigCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppCommissionConfigUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/coupon"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// CouponUpdate is the builder for updating Coupon entities.
type CouponUpdate struct {
	config
	hooks     []Hook
	mutation  *CouponMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CouponUpdate builder.
func (cu *CouponUpdate) Where(ps ...predicate.Coupon) *CouponUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CouponUpdate) SetCreatedAt(u uint32) *CouponUpdate {
	cu.mutation.ResetCreatedAt()
	cu.mutation.SetCreatedAt(u)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableCreatedAt(u *uint32) *CouponUpdate {
	if u != nil {
		cu.SetCreatedAt(*u)
	}
	return cu
}

// AddCreatedAt adds u to the "created_at" field.
func (cu *CouponUpdate) AddCreatedAt(u int32) *CouponUpdate {
	cu.mutation.AddCreatedAt(u)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CouponUpdate) SetUpdatedAt(u uint32) *CouponUpdate {
	cu.mutation.ResetUpdatedAt()
	cu.mutation.SetUpdatedAt(u)
	return cu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cu *CouponUpdate) AddUpdatedAt(u int32) *CouponUpdate {
	cu.mutation.AddUpdatedAt(u)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CouponUpdate) SetDeletedAt(u uint32) *CouponUpdate {
	cu.mutation.ResetDeletedAt()
	cu.mutation.SetDeletedAt(u)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableDeletedAt(u *uint32) *CouponUpdate {
	if u != nil {
		cu.SetDeletedAt(*u)
	}
	return cu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cu *CouponUpdate) AddDeletedAt(u int32) *CouponUpdate {
	cu.mutation.AddDeletedAt(u)
	return cu
}

// SetEntID sets the "ent_id" field.
func (cu *CouponUpdate) SetEntID(u uuid.UUID) *CouponUpdate {
	cu.mutation.SetEntID(u)
	return cu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableEntID(u *uuid.UUID) *CouponUpdate {
	if u != nil {
		cu.SetEntID(*u)
	}
	return cu
}

// SetAppID sets the "app_id" field.
func (cu *CouponUpdate) SetAppID(u uuid.UUID) *CouponUpdate {
	cu.mutation.SetAppID(u)
	return cu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableAppID(u *uuid.UUID) *CouponUpdate {
	if u != nil {
		cu.SetAppID(*u)
	}
	return cu
}

// ClearAppID clears the value of the "app_id" field.
func (cu *CouponUpdate) ClearAppID() *CouponUpdate {
	cu.mutation.ClearAppID()
	return cu
}

// SetDenomination sets the "denomination" field.
func (cu *CouponUpdate) SetDenomination(d decimal.Decimal) *CouponUpdate {
	cu.mutation.SetDenomination(d)
	return cu
}

// SetNillableDenomination sets the "denomination" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableDenomination(d *decimal.Decimal) *CouponUpdate {
	if d != nil {
		cu.SetDenomination(*d)
	}
	return cu
}

// ClearDenomination clears the value of the "denomination" field.
func (cu *CouponUpdate) ClearDenomination() *CouponUpdate {
	cu.mutation.ClearDenomination()
	return cu
}

// SetCirculation sets the "circulation" field.
func (cu *CouponUpdate) SetCirculation(d decimal.Decimal) *CouponUpdate {
	cu.mutation.SetCirculation(d)
	return cu
}

// SetNillableCirculation sets the "circulation" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableCirculation(d *decimal.Decimal) *CouponUpdate {
	if d != nil {
		cu.SetCirculation(*d)
	}
	return cu
}

// ClearCirculation clears the value of the "circulation" field.
func (cu *CouponUpdate) ClearCirculation() *CouponUpdate {
	cu.mutation.ClearCirculation()
	return cu
}

// SetRandom sets the "random" field.
func (cu *CouponUpdate) SetRandom(b bool) *CouponUpdate {
	cu.mutation.SetRandom(b)
	return cu
}

// SetNillableRandom sets the "random" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableRandom(b *bool) *CouponUpdate {
	if b != nil {
		cu.SetRandom(*b)
	}
	return cu
}

// ClearRandom clears the value of the "random" field.
func (cu *CouponUpdate) ClearRandom() *CouponUpdate {
	cu.mutation.ClearRandom()
	return cu
}

// SetIssuedBy sets the "issued_by" field.
func (cu *CouponUpdate) SetIssuedBy(u uuid.UUID) *CouponUpdate {
	cu.mutation.SetIssuedBy(u)
	return cu
}

// SetNillableIssuedBy sets the "issued_by" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableIssuedBy(u *uuid.UUID) *CouponUpdate {
	if u != nil {
		cu.SetIssuedBy(*u)
	}
	return cu
}

// ClearIssuedBy clears the value of the "issued_by" field.
func (cu *CouponUpdate) ClearIssuedBy() *CouponUpdate {
	cu.mutation.ClearIssuedBy()
	return cu
}

// SetStartAt sets the "start_at" field.
func (cu *CouponUpdate) SetStartAt(u uint32) *CouponUpdate {
	cu.mutation.ResetStartAt()
	cu.mutation.SetStartAt(u)
	return cu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableStartAt(u *uint32) *CouponUpdate {
	if u != nil {
		cu.SetStartAt(*u)
	}
	return cu
}

// AddStartAt adds u to the "start_at" field.
func (cu *CouponUpdate) AddStartAt(u int32) *CouponUpdate {
	cu.mutation.AddStartAt(u)
	return cu
}

// ClearStartAt clears the value of the "start_at" field.
func (cu *CouponUpdate) ClearStartAt() *CouponUpdate {
	cu.mutation.ClearStartAt()
	return cu
}

// SetEndAt sets the "end_at" field.
func (cu *CouponUpdate) SetEndAt(u uint32) *CouponUpdate {
	cu.mutation.ResetEndAt()
	cu.mutation.SetEndAt(u)
	return cu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableEndAt(u *uint32) *CouponUpdate {
	if u != nil {
		cu.SetEndAt(*u)
	}
	return cu
}

// AddEndAt adds u to the "end_at" field.
func (cu *CouponUpdate) AddEndAt(u int32) *CouponUpdate {
	cu.mutation.AddEndAt(u)
	return cu
}

// ClearEndAt clears the value of the "end_at" field.
func (cu *CouponUpdate) ClearEndAt() *CouponUpdate {
	cu.mutation.ClearEndAt()
	return cu
}

// SetDurationDays sets the "duration_days" field.
func (cu *CouponUpdate) SetDurationDays(u uint32) *CouponUpdate {
	cu.mutation.ResetDurationDays()
	cu.mutation.SetDurationDays(u)
	return cu
}

// SetNillableDurationDays sets the "duration_days" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableDurationDays(u *uint32) *CouponUpdate {
	if u != nil {
		cu.SetDurationDays(*u)
	}
	return cu
}

// AddDurationDays adds u to the "duration_days" field.
func (cu *CouponUpdate) AddDurationDays(u int32) *CouponUpdate {
	cu.mutation.AddDurationDays(u)
	return cu
}

// ClearDurationDays clears the value of the "duration_days" field.
func (cu *CouponUpdate) ClearDurationDays() *CouponUpdate {
	cu.mutation.ClearDurationDays()
	return cu
}

// SetMessage sets the "message" field.
func (cu *CouponUpdate) SetMessage(s string) *CouponUpdate {
	cu.mutation.SetMessage(s)
	return cu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableMessage(s *string) *CouponUpdate {
	if s != nil {
		cu.SetMessage(*s)
	}
	return cu
}

// ClearMessage clears the value of the "message" field.
func (cu *CouponUpdate) ClearMessage() *CouponUpdate {
	cu.mutation.ClearMessage()
	return cu
}

// SetName sets the "name" field.
func (cu *CouponUpdate) SetName(s string) *CouponUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableName(s *string) *CouponUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// ClearName clears the value of the "name" field.
func (cu *CouponUpdate) ClearName() *CouponUpdate {
	cu.mutation.ClearName()
	return cu
}

// SetAllocated sets the "allocated" field.
func (cu *CouponUpdate) SetAllocated(d decimal.Decimal) *CouponUpdate {
	cu.mutation.SetAllocated(d)
	return cu
}

// SetNillableAllocated sets the "allocated" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableAllocated(d *decimal.Decimal) *CouponUpdate {
	if d != nil {
		cu.SetAllocated(*d)
	}
	return cu
}

// ClearAllocated clears the value of the "allocated" field.
func (cu *CouponUpdate) ClearAllocated() *CouponUpdate {
	cu.mutation.ClearAllocated()
	return cu
}

// SetCouponType sets the "coupon_type" field.
func (cu *CouponUpdate) SetCouponType(s string) *CouponUpdate {
	cu.mutation.SetCouponType(s)
	return cu
}

// SetNillableCouponType sets the "coupon_type" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableCouponType(s *string) *CouponUpdate {
	if s != nil {
		cu.SetCouponType(*s)
	}
	return cu
}

// ClearCouponType clears the value of the "coupon_type" field.
func (cu *CouponUpdate) ClearCouponType() *CouponUpdate {
	cu.mutation.ClearCouponType()
	return cu
}

// SetThreshold sets the "threshold" field.
func (cu *CouponUpdate) SetThreshold(d decimal.Decimal) *CouponUpdate {
	cu.mutation.SetThreshold(d)
	return cu
}

// SetNillableThreshold sets the "threshold" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableThreshold(d *decimal.Decimal) *CouponUpdate {
	if d != nil {
		cu.SetThreshold(*d)
	}
	return cu
}

// ClearThreshold clears the value of the "threshold" field.
func (cu *CouponUpdate) ClearThreshold() *CouponUpdate {
	cu.mutation.ClearThreshold()
	return cu
}

// SetCouponConstraint sets the "coupon_constraint" field.
func (cu *CouponUpdate) SetCouponConstraint(s string) *CouponUpdate {
	cu.mutation.SetCouponConstraint(s)
	return cu
}

// SetNillableCouponConstraint sets the "coupon_constraint" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableCouponConstraint(s *string) *CouponUpdate {
	if s != nil {
		cu.SetCouponConstraint(*s)
	}
	return cu
}

// ClearCouponConstraint clears the value of the "coupon_constraint" field.
func (cu *CouponUpdate) ClearCouponConstraint() *CouponUpdate {
	cu.mutation.ClearCouponConstraint()
	return cu
}

// SetCouponScope sets the "coupon_scope" field.
func (cu *CouponUpdate) SetCouponScope(s string) *CouponUpdate {
	cu.mutation.SetCouponScope(s)
	return cu
}

// SetNillableCouponScope sets the "coupon_scope" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableCouponScope(s *string) *CouponUpdate {
	if s != nil {
		cu.SetCouponScope(*s)
	}
	return cu
}

// ClearCouponScope clears the value of the "coupon_scope" field.
func (cu *CouponUpdate) ClearCouponScope() *CouponUpdate {
	cu.mutation.ClearCouponScope()
	return cu
}

// SetCashableProbability sets the "cashable_probability" field.
func (cu *CouponUpdate) SetCashableProbability(d decimal.Decimal) *CouponUpdate {
	cu.mutation.SetCashableProbability(d)
	return cu
}

// SetNillableCashableProbability sets the "cashable_probability" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableCashableProbability(d *decimal.Decimal) *CouponUpdate {
	if d != nil {
		cu.SetCashableProbability(*d)
	}
	return cu
}

// ClearCashableProbability clears the value of the "cashable_probability" field.
func (cu *CouponUpdate) ClearCashableProbability() *CouponUpdate {
	cu.mutation.ClearCashableProbability()
	return cu
}

// Mutation returns the CouponMutation object of the builder.
func (cu *CouponUpdate) Mutation() *CouponMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CouponUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CouponUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CouponUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CouponUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CouponUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := coupon.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CouponUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CouponUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CouponUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(coupon.Table, coupon.Columns, sqlgraph.NewFieldSpec(coupon.FieldID, field.TypeUint32))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(coupon.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(coupon.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(coupon.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(coupon.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(coupon.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(coupon.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.EntID(); ok {
		_spec.SetField(coupon.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := cu.mutation.AppID(); ok {
		_spec.SetField(coupon.FieldAppID, field.TypeUUID, value)
	}
	if cu.mutation.AppIDCleared() {
		_spec.ClearField(coupon.FieldAppID, field.TypeUUID)
	}
	if value, ok := cu.mutation.Denomination(); ok {
		_spec.SetField(coupon.FieldDenomination, field.TypeOther, value)
	}
	if cu.mutation.DenominationCleared() {
		_spec.ClearField(coupon.FieldDenomination, field.TypeOther)
	}
	if value, ok := cu.mutation.Circulation(); ok {
		_spec.SetField(coupon.FieldCirculation, field.TypeOther, value)
	}
	if cu.mutation.CirculationCleared() {
		_spec.ClearField(coupon.FieldCirculation, field.TypeOther)
	}
	if value, ok := cu.mutation.Random(); ok {
		_spec.SetField(coupon.FieldRandom, field.TypeBool, value)
	}
	if cu.mutation.RandomCleared() {
		_spec.ClearField(coupon.FieldRandom, field.TypeBool)
	}
	if value, ok := cu.mutation.IssuedBy(); ok {
		_spec.SetField(coupon.FieldIssuedBy, field.TypeUUID, value)
	}
	if cu.mutation.IssuedByCleared() {
		_spec.ClearField(coupon.FieldIssuedBy, field.TypeUUID)
	}
	if value, ok := cu.mutation.StartAt(); ok {
		_spec.SetField(coupon.FieldStartAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedStartAt(); ok {
		_spec.AddField(coupon.FieldStartAt, field.TypeUint32, value)
	}
	if cu.mutation.StartAtCleared() {
		_spec.ClearField(coupon.FieldStartAt, field.TypeUint32)
	}
	if value, ok := cu.mutation.EndAt(); ok {
		_spec.SetField(coupon.FieldEndAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedEndAt(); ok {
		_spec.AddField(coupon.FieldEndAt, field.TypeUint32, value)
	}
	if cu.mutation.EndAtCleared() {
		_spec.ClearField(coupon.FieldEndAt, field.TypeUint32)
	}
	if value, ok := cu.mutation.DurationDays(); ok {
		_spec.SetField(coupon.FieldDurationDays, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedDurationDays(); ok {
		_spec.AddField(coupon.FieldDurationDays, field.TypeUint32, value)
	}
	if cu.mutation.DurationDaysCleared() {
		_spec.ClearField(coupon.FieldDurationDays, field.TypeUint32)
	}
	if value, ok := cu.mutation.Message(); ok {
		_spec.SetField(coupon.FieldMessage, field.TypeString, value)
	}
	if cu.mutation.MessageCleared() {
		_spec.ClearField(coupon.FieldMessage, field.TypeString)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(coupon.FieldName, field.TypeString, value)
	}
	if cu.mutation.NameCleared() {
		_spec.ClearField(coupon.FieldName, field.TypeString)
	}
	if value, ok := cu.mutation.Allocated(); ok {
		_spec.SetField(coupon.FieldAllocated, field.TypeOther, value)
	}
	if cu.mutation.AllocatedCleared() {
		_spec.ClearField(coupon.FieldAllocated, field.TypeOther)
	}
	if value, ok := cu.mutation.CouponType(); ok {
		_spec.SetField(coupon.FieldCouponType, field.TypeString, value)
	}
	if cu.mutation.CouponTypeCleared() {
		_spec.ClearField(coupon.FieldCouponType, field.TypeString)
	}
	if value, ok := cu.mutation.Threshold(); ok {
		_spec.SetField(coupon.FieldThreshold, field.TypeOther, value)
	}
	if cu.mutation.ThresholdCleared() {
		_spec.ClearField(coupon.FieldThreshold, field.TypeOther)
	}
	if value, ok := cu.mutation.CouponConstraint(); ok {
		_spec.SetField(coupon.FieldCouponConstraint, field.TypeString, value)
	}
	if cu.mutation.CouponConstraintCleared() {
		_spec.ClearField(coupon.FieldCouponConstraint, field.TypeString)
	}
	if value, ok := cu.mutation.CouponScope(); ok {
		_spec.SetField(coupon.FieldCouponScope, field.TypeString, value)
	}
	if cu.mutation.CouponScopeCleared() {
		_spec.ClearField(coupon.FieldCouponScope, field.TypeString)
	}
	if value, ok := cu.mutation.CashableProbability(); ok {
		_spec.SetField(coupon.FieldCashableProbability, field.TypeOther, value)
	}
	if cu.mutation.CashableProbabilityCleared() {
		_spec.ClearField(coupon.FieldCashableProbability, field.TypeOther)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coupon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CouponUpdateOne is the builder for updating a single Coupon entity.
type CouponUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CouponMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CouponUpdateOne) SetCreatedAt(u uint32) *CouponUpdateOne {
	cuo.mutation.ResetCreatedAt()
	cuo.mutation.SetCreatedAt(u)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableCreatedAt(u *uint32) *CouponUpdateOne {
	if u != nil {
		cuo.SetCreatedAt(*u)
	}
	return cuo
}

// AddCreatedAt adds u to the "created_at" field.
func (cuo *CouponUpdateOne) AddCreatedAt(u int32) *CouponUpdateOne {
	cuo.mutation.AddCreatedAt(u)
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CouponUpdateOne) SetUpdatedAt(u uint32) *CouponUpdateOne {
	cuo.mutation.ResetUpdatedAt()
	cuo.mutation.SetUpdatedAt(u)
	return cuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cuo *CouponUpdateOne) AddUpdatedAt(u int32) *CouponUpdateOne {
	cuo.mutation.AddUpdatedAt(u)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CouponUpdateOne) SetDeletedAt(u uint32) *CouponUpdateOne {
	cuo.mutation.ResetDeletedAt()
	cuo.mutation.SetDeletedAt(u)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableDeletedAt(u *uint32) *CouponUpdateOne {
	if u != nil {
		cuo.SetDeletedAt(*u)
	}
	return cuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cuo *CouponUpdateOne) AddDeletedAt(u int32) *CouponUpdateOne {
	cuo.mutation.AddDeletedAt(u)
	return cuo
}

// SetEntID sets the "ent_id" field.
func (cuo *CouponUpdateOne) SetEntID(u uuid.UUID) *CouponUpdateOne {
	cuo.mutation.SetEntID(u)
	return cuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableEntID(u *uuid.UUID) *CouponUpdateOne {
	if u != nil {
		cuo.SetEntID(*u)
	}
	return cuo
}

// SetAppID sets the "app_id" field.
func (cuo *CouponUpdateOne) SetAppID(u uuid.UUID) *CouponUpdateOne {
	cuo.mutation.SetAppID(u)
	return cuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableAppID(u *uuid.UUID) *CouponUpdateOne {
	if u != nil {
		cuo.SetAppID(*u)
	}
	return cuo
}

// ClearAppID clears the value of the "app_id" field.
func (cuo *CouponUpdateOne) ClearAppID() *CouponUpdateOne {
	cuo.mutation.ClearAppID()
	return cuo
}

// SetDenomination sets the "denomination" field.
func (cuo *CouponUpdateOne) SetDenomination(d decimal.Decimal) *CouponUpdateOne {
	cuo.mutation.SetDenomination(d)
	return cuo
}

// SetNillableDenomination sets the "denomination" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableDenomination(d *decimal.Decimal) *CouponUpdateOne {
	if d != nil {
		cuo.SetDenomination(*d)
	}
	return cuo
}

// ClearDenomination clears the value of the "denomination" field.
func (cuo *CouponUpdateOne) ClearDenomination() *CouponUpdateOne {
	cuo.mutation.ClearDenomination()
	return cuo
}

// SetCirculation sets the "circulation" field.
func (cuo *CouponUpdateOne) SetCirculation(d decimal.Decimal) *CouponUpdateOne {
	cuo.mutation.SetCirculation(d)
	return cuo
}

// SetNillableCirculation sets the "circulation" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableCirculation(d *decimal.Decimal) *CouponUpdateOne {
	if d != nil {
		cuo.SetCirculation(*d)
	}
	return cuo
}

// ClearCirculation clears the value of the "circulation" field.
func (cuo *CouponUpdateOne) ClearCirculation() *CouponUpdateOne {
	cuo.mutation.ClearCirculation()
	return cuo
}

// SetRandom sets the "random" field.
func (cuo *CouponUpdateOne) SetRandom(b bool) *CouponUpdateOne {
	cuo.mutation.SetRandom(b)
	return cuo
}

// SetNillableRandom sets the "random" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableRandom(b *bool) *CouponUpdateOne {
	if b != nil {
		cuo.SetRandom(*b)
	}
	return cuo
}

// ClearRandom clears the value of the "random" field.
func (cuo *CouponUpdateOne) ClearRandom() *CouponUpdateOne {
	cuo.mutation.ClearRandom()
	return cuo
}

// SetIssuedBy sets the "issued_by" field.
func (cuo *CouponUpdateOne) SetIssuedBy(u uuid.UUID) *CouponUpdateOne {
	cuo.mutation.SetIssuedBy(u)
	return cuo
}

// SetNillableIssuedBy sets the "issued_by" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableIssuedBy(u *uuid.UUID) *CouponUpdateOne {
	if u != nil {
		cuo.SetIssuedBy(*u)
	}
	return cuo
}

// ClearIssuedBy clears the value of the "issued_by" field.
func (cuo *CouponUpdateOne) ClearIssuedBy() *CouponUpdateOne {
	cuo.mutation.ClearIssuedBy()
	return cuo
}

// SetStartAt sets the "start_at" field.
func (cuo *CouponUpdateOne) SetStartAt(u uint32) *CouponUpdateOne {
	cuo.mutation.ResetStartAt()
	cuo.mutation.SetStartAt(u)
	return cuo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableStartAt(u *uint32) *CouponUpdateOne {
	if u != nil {
		cuo.SetStartAt(*u)
	}
	return cuo
}

// AddStartAt adds u to the "start_at" field.
func (cuo *CouponUpdateOne) AddStartAt(u int32) *CouponUpdateOne {
	cuo.mutation.AddStartAt(u)
	return cuo
}

// ClearStartAt clears the value of the "start_at" field.
func (cuo *CouponUpdateOne) ClearStartAt() *CouponUpdateOne {
	cuo.mutation.ClearStartAt()
	return cuo
}

// SetEndAt sets the "end_at" field.
func (cuo *CouponUpdateOne) SetEndAt(u uint32) *CouponUpdateOne {
	cuo.mutation.ResetEndAt()
	cuo.mutation.SetEndAt(u)
	return cuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableEndAt(u *uint32) *CouponUpdateOne {
	if u != nil {
		cuo.SetEndAt(*u)
	}
	return cuo
}

// AddEndAt adds u to the "end_at" field.
func (cuo *CouponUpdateOne) AddEndAt(u int32) *CouponUpdateOne {
	cuo.mutation.AddEndAt(u)
	return cuo
}

// ClearEndAt clears the value of the "end_at" field.
func (cuo *CouponUpdateOne) ClearEndAt() *CouponUpdateOne {
	cuo.mutation.ClearEndAt()
	return cuo
}

// SetDurationDays sets the "duration_days" field.
func (cuo *CouponUpdateOne) SetDurationDays(u uint32) *CouponUpdateOne {
	cuo.mutation.ResetDurationDays()
	cuo.mutation.SetDurationDays(u)
	return cuo
}

// SetNillableDurationDays sets the "duration_days" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableDurationDays(u *uint32) *CouponUpdateOne {
	if u != nil {
		cuo.SetDurationDays(*u)
	}
	return cuo
}

// AddDurationDays adds u to the "duration_days" field.
func (cuo *CouponUpdateOne) AddDurationDays(u int32) *CouponUpdateOne {
	cuo.mutation.AddDurationDays(u)
	return cuo
}

// ClearDurationDays clears the value of the "duration_days" field.
func (cuo *CouponUpdateOne) ClearDurationDays() *CouponUpdateOne {
	cuo.mutation.ClearDurationDays()
	return cuo
}

// SetMessage sets the "message" field.
func (cuo *CouponUpdateOne) SetMessage(s string) *CouponUpdateOne {
	cuo.mutation.SetMessage(s)
	return cuo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableMessage(s *string) *CouponUpdateOne {
	if s != nil {
		cuo.SetMessage(*s)
	}
	return cuo
}

// ClearMessage clears the value of the "message" field.
func (cuo *CouponUpdateOne) ClearMessage() *CouponUpdateOne {
	cuo.mutation.ClearMessage()
	return cuo
}

// SetName sets the "name" field.
func (cuo *CouponUpdateOne) SetName(s string) *CouponUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableName(s *string) *CouponUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// ClearName clears the value of the "name" field.
func (cuo *CouponUpdateOne) ClearName() *CouponUpdateOne {
	cuo.mutation.ClearName()
	return cuo
}

// SetAllocated sets the "allocated" field.
func (cuo *CouponUpdateOne) SetAllocated(d decimal.Decimal) *CouponUpdateOne {
	cuo.mutation.SetAllocated(d)
	return cuo
}

// SetNillableAllocated sets the "allocated" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableAllocated(d *decimal.Decimal) *CouponUpdateOne {
	if d != nil {
		cuo.SetAllocated(*d)
	}
	return cuo
}

// ClearAllocated clears the value of the "allocated" field.
func (cuo *CouponUpdateOne) ClearAllocated() *CouponUpdateOne {
	cuo.mutation.ClearAllocated()
	return cuo
}

// SetCouponType sets the "coupon_type" field.
func (cuo *CouponUpdateOne) SetCouponType(s string) *CouponUpdateOne {
	cuo.mutation.SetCouponType(s)
	return cuo
}

// SetNillableCouponType sets the "coupon_type" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableCouponType(s *string) *CouponUpdateOne {
	if s != nil {
		cuo.SetCouponType(*s)
	}
	return cuo
}

// ClearCouponType clears the value of the "coupon_type" field.
func (cuo *CouponUpdateOne) ClearCouponType() *CouponUpdateOne {
	cuo.mutation.ClearCouponType()
	return cuo
}

// SetThreshold sets the "threshold" field.
func (cuo *CouponUpdateOne) SetThreshold(d decimal.Decimal) *CouponUpdateOne {
	cuo.mutation.SetThreshold(d)
	return cuo
}

// SetNillableThreshold sets the "threshold" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableThreshold(d *decimal.Decimal) *CouponUpdateOne {
	if d != nil {
		cuo.SetThreshold(*d)
	}
	return cuo
}

// ClearThreshold clears the value of the "threshold" field.
func (cuo *CouponUpdateOne) ClearThreshold() *CouponUpdateOne {
	cuo.mutation.ClearThreshold()
	return cuo
}

// SetCouponConstraint sets the "coupon_constraint" field.
func (cuo *CouponUpdateOne) SetCouponConstraint(s string) *CouponUpdateOne {
	cuo.mutation.SetCouponConstraint(s)
	return cuo
}

// SetNillableCouponConstraint sets the "coupon_constraint" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableCouponConstraint(s *string) *CouponUpdateOne {
	if s != nil {
		cuo.SetCouponConstraint(*s)
	}
	return cuo
}

// ClearCouponConstraint clears the value of the "coupon_constraint" field.
func (cuo *CouponUpdateOne) ClearCouponConstraint() *CouponUpdateOne {
	cuo.mutation.ClearCouponConstraint()
	return cuo
}

// SetCouponScope sets the "coupon_scope" field.
func (cuo *CouponUpdateOne) SetCouponScope(s string) *CouponUpdateOne {
	cuo.mutation.SetCouponScope(s)
	return cuo
}

// SetNillableCouponScope sets the "coupon_scope" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableCouponScope(s *string) *CouponUpdateOne {
	if s != nil {
		cuo.SetCouponScope(*s)
	}
	return cuo
}

// ClearCouponScope clears the value of the "coupon_scope" field.
func (cuo *CouponUpdateOne) ClearCouponScope() *CouponUpdateOne {
	cuo.mutation.ClearCouponScope()
	return cuo
}

// SetCashableProbability sets the "cashable_probability" field.
func (cuo *CouponUpdateOne) SetCashableProbability(d decimal.Decimal) *CouponUpdateOne {
	cuo.mutation.SetCashableProbability(d)
	return cuo
}

// SetNillableCashableProbability sets the "cashable_probability" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableCashableProbability(d *decimal.Decimal) *CouponUpdateOne {
	if d != nil {
		cuo.SetCashableProbability(*d)
	}
	return cuo
}

// ClearCashableProbability clears the value of the "cashable_probability" field.
func (cuo *CouponUpdateOne) ClearCashableProbability() *CouponUpdateOne {
	cuo.mutation.ClearCashableProbability()
	return cuo
}

// Mutation returns the CouponMutation object of the builder.
func (cuo *CouponUpdateOne) Mutation() *CouponMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CouponUpdate builder.
func (cuo *CouponUpdateOne) Where(ps ...predicate.Coupon) *CouponUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CouponUpdateOne) Select(field string, fields ...string) *CouponUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Coupon entity.
func (cuo *CouponUpdateOne) Save(ctx context.Context) (*Coupon, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CouponUpdateOne) SaveX(ctx context.Context) *Coupon {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CouponUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CouponUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CouponUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := coupon.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CouponUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CouponUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CouponUpdateOne) sqlSave(ctx context.Context) (_node *Coupon, err error) {
	_spec := sqlgraph.NewUpdateSpec(coupon.Table, coupon.Columns, sqlgraph.NewFieldSpec(coupon.FieldID, field.TypeUint32))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Coupon.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coupon.FieldID)
		for _, f := range fields {
			if !coupon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != coupon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(coupon.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(coupon.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(coupon.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(coupon.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(coupon.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(coupon.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.EntID(); ok {
		_spec.SetField(coupon.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := cuo.mutation.AppID(); ok {
		_spec.SetField(coupon.FieldAppID, field.TypeUUID, value)
	}
	if cuo.mutation.AppIDCleared() {
		_spec.ClearField(coupon.FieldAppID, field.TypeUUID)
	}
	if value, ok := cuo.mutation.Denomination(); ok {
		_spec.SetField(coupon.FieldDenomination, field.TypeOther, value)
	}
	if cuo.mutation.DenominationCleared() {
		_spec.ClearField(coupon.FieldDenomination, field.TypeOther)
	}
	if value, ok := cuo.mutation.Circulation(); ok {
		_spec.SetField(coupon.FieldCirculation, field.TypeOther, value)
	}
	if cuo.mutation.CirculationCleared() {
		_spec.ClearField(coupon.FieldCirculation, field.TypeOther)
	}
	if value, ok := cuo.mutation.Random(); ok {
		_spec.SetField(coupon.FieldRandom, field.TypeBool, value)
	}
	if cuo.mutation.RandomCleared() {
		_spec.ClearField(coupon.FieldRandom, field.TypeBool)
	}
	if value, ok := cuo.mutation.IssuedBy(); ok {
		_spec.SetField(coupon.FieldIssuedBy, field.TypeUUID, value)
	}
	if cuo.mutation.IssuedByCleared() {
		_spec.ClearField(coupon.FieldIssuedBy, field.TypeUUID)
	}
	if value, ok := cuo.mutation.StartAt(); ok {
		_spec.SetField(coupon.FieldStartAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedStartAt(); ok {
		_spec.AddField(coupon.FieldStartAt, field.TypeUint32, value)
	}
	if cuo.mutation.StartAtCleared() {
		_spec.ClearField(coupon.FieldStartAt, field.TypeUint32)
	}
	if value, ok := cuo.mutation.EndAt(); ok {
		_spec.SetField(coupon.FieldEndAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedEndAt(); ok {
		_spec.AddField(coupon.FieldEndAt, field.TypeUint32, value)
	}
	if cuo.mutation.EndAtCleared() {
		_spec.ClearField(coupon.FieldEndAt, field.TypeUint32)
	}
	if value, ok := cuo.mutation.DurationDays(); ok {
		_spec.SetField(coupon.FieldDurationDays, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedDurationDays(); ok {
		_spec.AddField(coupon.FieldDurationDays, field.TypeUint32, value)
	}
	if cuo.mutation.DurationDaysCleared() {
		_spec.ClearField(coupon.FieldDurationDays, field.TypeUint32)
	}
	if value, ok := cuo.mutation.Message(); ok {
		_spec.SetField(coupon.FieldMessage, field.TypeString, value)
	}
	if cuo.mutation.MessageCleared() {
		_spec.ClearField(coupon.FieldMessage, field.TypeString)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(coupon.FieldName, field.TypeString, value)
	}
	if cuo.mutation.NameCleared() {
		_spec.ClearField(coupon.FieldName, field.TypeString)
	}
	if value, ok := cuo.mutation.Allocated(); ok {
		_spec.SetField(coupon.FieldAllocated, field.TypeOther, value)
	}
	if cuo.mutation.AllocatedCleared() {
		_spec.ClearField(coupon.FieldAllocated, field.TypeOther)
	}
	if value, ok := cuo.mutation.CouponType(); ok {
		_spec.SetField(coupon.FieldCouponType, field.TypeString, value)
	}
	if cuo.mutation.CouponTypeCleared() {
		_spec.ClearField(coupon.FieldCouponType, field.TypeString)
	}
	if value, ok := cuo.mutation.Threshold(); ok {
		_spec.SetField(coupon.FieldThreshold, field.TypeOther, value)
	}
	if cuo.mutation.ThresholdCleared() {
		_spec.ClearField(coupon.FieldThreshold, field.TypeOther)
	}
	if value, ok := cuo.mutation.CouponConstraint(); ok {
		_spec.SetField(coupon.FieldCouponConstraint, field.TypeString, value)
	}
	if cuo.mutation.CouponConstraintCleared() {
		_spec.ClearField(coupon.FieldCouponConstraint, field.TypeString)
	}
	if value, ok := cuo.mutation.CouponScope(); ok {
		_spec.SetField(coupon.FieldCouponScope, field.TypeString, value)
	}
	if cuo.mutation.CouponScopeCleared() {
		_spec.ClearField(coupon.FieldCouponScope, field.TypeString)
	}
	if value, ok := cuo.mutation.CashableProbability(); ok {
		_spec.SetField(coupon.FieldCashableProbability, field.TypeOther, value)
	}
	if cuo.mutation.CashableProbabilityCleared() {
		_spec.ClearField(coupon.FieldCashableProbability, field.TypeOther)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Coupon{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coupon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/statement"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// StatementCreate is the builder for creating a Statement entity.
type StatementCreate struct {
	config
	mutation *StatementMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sc *StatementCreate) SetCreatedAt(u uint32) *StatementCreate {
	sc.mutation.SetCreatedAt(u)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *StatementCreate) SetNillableCreatedAt(u *uint32) *StatementCreate {
	if u != nil {
		sc.SetCreatedAt(*u)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *StatementCreate) SetUpdatedAt(u uint32) *StatementCreate {
	sc.mutation.SetUpdatedAt(u)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *StatementCreate) SetNillableUpdatedAt(u *uint32) *StatementCreate {
	if u != nil {
		sc.SetUpdatedAt(*u)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *StatementCreate) SetDeletedAt(u uint32) *StatementCreate {
	sc.mutation.SetDeletedAt(u)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *StatementCreate) SetNillableDeletedAt(u *uint32) *StatementCreate {
	if u != nil {
		sc.SetDeletedAt(*u)
	}
	return sc
}

// SetEntID sets the "ent_id" field.
func (sc *StatementCreate) SetEntID(u uuid.UUID) *StatementCreate {
	sc.mutation.SetEntID(u)
	return sc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (sc *StatementCreate) SetNillableEntID(u *uuid.UUID) *StatementCreate {
	if u != nil {
		sc.SetEntID(*u)
	}
	return sc
}

// SetAppID sets the "app_id" field.
func (sc *StatementCreate) SetAppID(u uuid.UUID) *StatementCreate {
	sc.mutation.SetAppID(u)
	return sc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (sc *StatementCreate) SetNillableAppID(u *uuid.UUID) *StatementCreate {
	if u != nil {
		sc.SetAppID(*u)
	}
	return sc
}

// SetUserID sets the "user_id" field.
func (sc *StatementCreate) SetUserID(u uuid.UUID) *StatementCreate {
	sc.mutation.SetUserID(u)
	return sc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sc *StatementCreate) SetNillableUserID(u *uuid.UUID) *StatementCreate {
	if u != nil {
		sc.SetUserID(*u)
	}
	return sc
}

// SetDirectContributorID sets the "direct_contributor_id" field.
func (sc *StatementCreate) SetDirectContributorID(u uuid.UUID) *StatementCreate {
	sc.mutation.SetDirectContributorID(u)
	return sc
}

// SetNillableDirectContributorID sets the "direct_contributor_id" field if the given value is not nil.
func (sc *StatementCreate) SetNillableDirectContributorID(u *uuid.UUID) *StatementCreate {
	if u != nil {
		sc.SetDirectContributorID(*u)
	}
	return sc
}

// SetGoodID sets the "good_id" field.
func (sc *StatementCreate) SetGoodID(u uuid.UUID) *StatementCreate {
	sc.mutation.SetGoodID(u)
	return sc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (sc *StatementCreate) SetNillableGoodID(u *uuid.UUID) *StatementCreate {
	if u != nil {
		sc.SetGoodID(*u)
	}
	return sc
}

// SetAppGoodID sets the "app_good_id" field.
func (sc *StatementCreate) SetAppGoodID(u uuid.UUID) *StatementCreate {
	sc.mutation.SetAppGoodID(u)
	return sc
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (sc *StatementCreate) SetNillableAppGoodID(u *uuid.UUID) *StatementCreate {
	if u != nil {
		sc.SetAppGoodID(*u)
	}
	return sc
}

// SetOrderID sets the "order_id" field.
func (sc *StatementCreate) SetOrderID(u uuid.UUID) *StatementCreate {
	sc.mutation.SetOrderID(u)
	return sc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (sc *StatementCreate) SetNillableOrderID(u *uuid.UUID) *StatementCreate {
	if u != nil {
		sc.SetOrderID(*u)
	}
	return sc
}

// SetSelfOrder sets the "self_order" field.
func (sc *StatementCreate) SetSelfOrder(b bool) *StatementCreate {
	sc.mutation.SetSelfOrder(b)
	return sc
}

// SetNillableSelfOrder sets the "self_order" field if the given value is not nil.
func (sc *StatementCreate) SetNillableSelfOrder(b *bool) *StatementCreate {
	if b != nil {
		sc.SetSelfOrder(*b)
	}
	return sc
}

// SetPaymentID sets the "payment_id" field.
func (sc *StatementCreate) SetPaymentID(u uuid.UUID) *StatementCreate {
	sc.mutation.SetPaymentID(u)
	return sc
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (sc *StatementCreate) SetNillablePaymentID(u *uuid.UUID) *StatementCreate {
	if u != nil {
		sc.SetPaymentID(*u)
	}
	return sc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (sc *StatementCreate) SetCoinTypeID(u uuid.UUID) *StatementCreate {
	sc.mutation.SetCoinTypeID(u)
	return sc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (sc *StatementCreate) SetNillableCoinTypeID(u *uuid.UUID) *StatementCreate {
	if u != nil {
		sc.SetCoinTypeID(*u)
	}
	return sc
}

// SetPaymentCoinTypeID sets the "payment_coin_type_id" field.
func (sc *StatementCreate) SetPaymentCoinTypeID(u uuid.UUID) *StatementCreate {
	sc.mutation.SetPaymentCoinTypeID(u)
	return sc
}

// SetNillablePaymentCoinTypeID sets the "payment_coin_type_id" field if the given value is not nil.
func (sc *StatementCreate) SetNillablePaymentCoinTypeID(u *uuid.UUID) *StatementCreate {
	if u != nil {
		sc.SetPaymentCoinTypeID(*u)
	}
	return sc
}

// SetPaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field.
func (sc *StatementCreate) SetPaymentCoinUsdCurrency(d decimal.Decimal) *StatementCreate {
	sc.mutation.SetPaymentCoinUsdCurrency(d)
	return sc
}

// SetNillablePaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field if the given value is not nil.
func (sc *StatementCreate) SetNillablePaymentCoinUsdCurrency(d *decimal.Decimal) *StatementCreate {
	if d != nil {
		sc.SetPaymentCoinUsdCurrency(*d)
	}
	return sc
}

// SetUnits sets the "units" field.
func (sc *StatementCreate) SetUnits(u uint32) *StatementCreate {
	sc.mutation.SetUnits(u)
	return sc
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (sc *StatementCreate) SetNillableUnits(u *uint32) *StatementCreate {
	if u != nil {
		sc.SetUnits(*u)
	}
	return sc
}

// SetUnitsV1 sets the "units_v1" field.
func (sc *StatementCreate) SetUnitsV1(d decimal.Decimal) *StatementCreate {
	sc.mutation.SetUnitsV1(d)
	return sc
}

// SetNillableUnitsV1 sets the "units_v1" field if the given value is not nil.
func (sc *StatementCreate) SetNillableUnitsV1(d *decimal.Decimal) *StatementCreate {
	if d != nil {
		sc.SetUnitsV1(*d)
	}
	return sc
}

// SetAmount sets the "amount" field.
func (sc *StatementCreate) SetAmount(d decimal.Decimal) *StatementCreate {
	sc.mutation.SetAmount(d)
	return sc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (sc *StatementCreate) SetNillableAmount(d *decimal.Decimal) *StatementCreate {
	if d != nil {
		sc.SetAmount(*d)
	}
	return sc
}

// SetUsdAmount sets the "usd_amount" field.
func (sc *StatementCreate) SetUsdAmount(d decimal.Decimal) *StatementCreate {
	sc.mutation.SetUsdAmount(d)
	return sc
}

// SetNillableUsdAmount sets the "usd_amount" field if the given value is not nil.
func (sc *StatementCreate) SetNillableUsdAmount(d *decimal.Decimal) *StatementCreate {
	if d != nil {
		sc.SetUsdAmount(*d)
	}
	return sc
}

// SetCommission sets the "commission" field.
func (sc *StatementCreate) SetCommission(d decimal.Decimal) *StatementCreate {
	sc.mutation.SetCommission(d)
	return sc
}

// SetNillableCommission sets the "commission" field if the given value is not nil.
func (sc *StatementCreate) SetNillableCommission(d *decimal.Decimal) *StatementCreate {
	if d != nil {
		sc.SetCommission(*d)
	}
	return sc
}

// SetAppConfigID sets the "app_config_id" field.
func (sc *StatementCreate) SetAppConfigID(u uuid.UUID) *StatementCreate {
	sc.mutation.SetAppConfigID(u)
	return sc
}

// SetNillableAppConfigID sets the "app_config_id" field if the given value is not nil.
func (sc *StatementCreate) SetNillableAppConfigID(u *uuid.UUID) *StatementCreate {
	if u != nil {
		sc.SetAppConfigID(*u)
	}
	return sc
}

// SetCommissionConfigID sets the "commission_config_id" field.
func (sc *StatementCreate) SetCommissionConfigID(u uuid.UUID) *StatementCreate {
	sc.mutation.SetCommissionConfigID(u)
	return sc
}

// SetNillableCommissionConfigID sets the "commission_config_id" field if the given value is not nil.
func (sc *StatementCreate) SetNillableCommissionConfigID(u *uuid.UUID) *StatementCreate {
	if u != nil {
		sc.SetCommissionConfigID(*u)
	}
	return sc
}

// SetCommissionConfigType sets the "commission_config_type" field.
func (sc *StatementCreate) SetCommissionConfigType(s string) *StatementCreate {
	sc.mutation.SetCommissionConfigType(s)
	return sc
}

// SetNillableCommissionConfigType sets the "commission_config_type" field if the given value is not nil.
func (sc *StatementCreate) SetNillableCommissionConfigType(s *string) *StatementCreate {
	if s != nil {
		sc.SetCommissionConfigType(*s)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *StatementCreate) SetID(u uint32) *StatementCreate {
	sc.mutation.SetID(u)
	return sc
}

// Mutation returns the StatementMutation object of the builder.
func (sc *StatementCreate) Mutation() *StatementMutation {
	return sc.mutation
}

// Save creates the Statement in the database.
func (sc *StatementCreate) Save(ctx context.Context) (*Statement, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StatementCreate) SaveX(ctx context.Context) *Statement {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StatementCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StatementCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StatementCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := statement.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := statement.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.DeletedAt(); !ok {
		v := statement.DefaultDeletedAt()
		sc.mutation.SetDeletedAt(v)
	}
	if _, ok := sc.mutation.EntID(); !ok {
		v := statement.DefaultEntID()
		sc.mutation.SetEntID(v)
	}
	if _, ok := sc.mutation.AppID(); !ok {
		v := statement.DefaultAppID()
		sc.mutation.SetAppID(v)
	}
	if _, ok := sc.mutation.UserID(); !ok {
		v := statement.DefaultUserID()
		sc.mutation.SetUserID(v)
	}
	if _, ok := sc.mutation.DirectContributorID(); !ok {
		v := statement.DefaultDirectContributorID()
		sc.mutation.SetDirectContributorID(v)
	}
	if _, ok := sc.mutation.GoodID(); !ok {
		v := statement.DefaultGoodID()
		sc.mutation.SetGoodID(v)
	}
	if _, ok := sc.mutation.AppGoodID(); !ok {
		v := statement.DefaultAppGoodID()
		sc.mutation.SetAppGoodID(v)
	}
	if _, ok := sc.mutation.OrderID(); !ok {
		v := statement.DefaultOrderID()
		sc.mutation.SetOrderID(v)
	}
	if _, ok := sc.mutation.SelfOrder(); !ok {
		v := statement.DefaultSelfOrder
		sc.mutation.SetSelfOrder(v)
	}
	if _, ok := sc.mutation.PaymentID(); !ok {
		v := statement.DefaultPaymentID()
		sc.mutation.SetPaymentID(v)
	}
	if _, ok := sc.mutation.CoinTypeID(); !ok {
		v := statement.DefaultCoinTypeID()
		sc.mutation.SetCoinTypeID(v)
	}
	if _, ok := sc.mutation.PaymentCoinTypeID(); !ok {
		v := statement.DefaultPaymentCoinTypeID()
		sc.mutation.SetPaymentCoinTypeID(v)
	}
	if _, ok := sc.mutation.PaymentCoinUsdCurrency(); !ok {
		v := statement.DefaultPaymentCoinUsdCurrency
		sc.mutation.SetPaymentCoinUsdCurrency(v)
	}
	if _, ok := sc.mutation.Units(); !ok {
		v := statement.DefaultUnits
		sc.mutation.SetUnits(v)
	}
	if _, ok := sc.mutation.UnitsV1(); !ok {
		v := statement.DefaultUnitsV1
		sc.mutation.SetUnitsV1(v)
	}
	if _, ok := sc.mutation.Amount(); !ok {
		v := statement.DefaultAmount
		sc.mutation.SetAmount(v)
	}
	if _, ok := sc.mutation.UsdAmount(); !ok {
		v := statement.DefaultUsdAmount
		sc.mutation.SetUsdAmount(v)
	}
	if _, ok := sc.mutation.Commission(); !ok {
		v := statement.DefaultCommission
		sc.mutation.SetCommission(v)
	}
	if _, ok := sc.mutation.AppConfigID(); !ok {
		v := statement.DefaultAppConfigID()
		sc.mutation.SetAppConfigID(v)
	}
	if _, ok := sc.mutation.CommissionConfigID(); !ok {
		v := statement.DefaultCommissionConfigID()
		sc.mutation.SetCommissionConfigID(v)
	}
	if _, ok := sc.mutation.CommissionConfigType(); !ok {
		v := statement.DefaultCommissionConfigType
		sc.mutation.SetCommissionConfigType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StatementCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Statement.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Statement.updated_at"`)}
	}
	if _, ok := sc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "Statement.deleted_at"`)}
	}
	if _, ok := sc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "Statement.ent_id"`)}
	}
	return nil
}

func (sc *StatementCreate) sqlSave(ctx context.Context) (*Statement, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *StatementCreate) createSpec() (*Statement, *sqlgraph.CreateSpec) {
	var (
		_node = &Statement{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(statement.Table, sqlgraph.NewFieldSpec(statement.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(statement.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(statement.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.SetField(statement.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := sc.mutation.EntID(); ok {
		_spec.SetField(statement.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := sc.mutation.AppID(); ok {
		_spec.SetField(statement.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := sc.mutation.UserID(); ok {
		_spec.SetField(statement.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := sc.mutation.DirectContributorID(); ok {
		_spec.SetField(statement.FieldDirectContributorID, field.TypeUUID, value)
		_node.DirectContributorID = value
	}
	if value, ok := sc.mutation.GoodID(); ok {
		_spec.SetField(statement.FieldGoodID, field.TypeUUID, value)
		_node.GoodID = value
	}
	if value, ok := sc.mutation.AppGoodID(); ok {
		_spec.SetField(statement.FieldAppGoodID, field.TypeUUID, value)
		_node.AppGoodID = value
	}
	if value, ok := sc.mutation.OrderID(); ok {
		_spec.SetField(statement.FieldOrderID, field.TypeUUID, value)
		_node.OrderID = value
	}
	if value, ok := sc.mutation.SelfOrder(); ok {
		_spec.SetField(statement.FieldSelfOrder, field.TypeBool, value)
		_node.SelfOrder = value
	}
	if value, ok := sc.mutation.PaymentID(); ok {
		_spec.SetField(statement.FieldPaymentID, field.TypeUUID, value)
		_node.PaymentID = value
	}
	if value, ok := sc.mutation.CoinTypeID(); ok {
		_spec.SetField(statement.FieldCoinTypeID, field.TypeUUID, value)
		_node.CoinTypeID = value
	}
	if value, ok := sc.mutation.PaymentCoinTypeID(); ok {
		_spec.SetField(statement.FieldPaymentCoinTypeID, field.TypeUUID, value)
		_node.PaymentCoinTypeID = value
	}
	if value, ok := sc.mutation.PaymentCoinUsdCurrency(); ok {
		_spec.SetField(statement.FieldPaymentCoinUsdCurrency, field.TypeOther, value)
		_node.PaymentCoinUsdCurrency = value
	}
	if value, ok := sc.mutation.Units(); ok {
		_spec.SetField(statement.FieldUnits, field.TypeUint32, value)
		_node.Units = value
	}
	if value, ok := sc.mutation.UnitsV1(); ok {
		_spec.SetField(statement.FieldUnitsV1, field.TypeOther, value)
		_node.UnitsV1 = value
	}
	if value, ok := sc.mutation.Amount(); ok {
		_spec.SetField(statement.FieldAmount, field.TypeOther, value)
		_node.Amount = value
	}
	if value, ok := sc.mutation.UsdAmount(); ok {
		_spec.SetField(statement.FieldUsdAmount, field.TypeOther, value)
		_node.UsdAmount = value
	}
	if value, ok := sc.mutation.Commission(); ok {
		_spec.SetField(statement.FieldCommission, field.TypeOther, value)
		_node.Commission = value
	}
	if value, ok := sc.mutation.AppConfigID(); ok {
		_spec.SetField(statement.FieldAppConfigID, field.TypeUUID, value)
		_node.AppConfigID = value
	}
	if value, ok := sc.mutation.CommissionConfigID(); ok {
		_spec.SetField(statement.FieldCommissionConfigID, field.TypeUUID, value)
		_node.CommissionConfigID = value
	}
	if value, ok := sc.mutation.CommissionConfigType(); ok {
		_spec.SetField(statement.FieldCommissionConfigType, field.TypeString, value)
		_node.CommissionConfigType = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Statement.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StatementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sc *StatementCreate) OnConflict(opts ...sql.ConflictOption) *StatementUpsertOne {
	sc.conflict = opts
	return &StatementUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Statement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *StatementCreate) OnConflictColumns(columns ...string) *StatementUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &StatementUpsertOne{
		create: sc,
	}
}

type (
	// StatementUpsertOne is the builder for "upsert"-ing
	//  one Statement node.
	StatementUpsertOne struct {
		create *StatementCreate
	}

	// StatementUpsert is the "OnConflict" setter.
	StatementUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *StatementUpsert) SetCreatedAt(v uint32) *StatementUpsert {
	u.Set(statement.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StatementUpsert) UpdateCreatedAt() *StatementUpsert {
	u.SetExcluded(statement.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *StatementUpsert) AddCreatedAt(v uint32) *StatementUpsert {
	u.Add(statement.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StatementUpsert) SetUpdatedAt(v uint32) *StatementUpsert {
	u.Set(statement.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StatementUpsert) UpdateUpdatedAt() *StatementUpsert {
	u.SetExcluded(statement.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *StatementUpsert) AddUpdatedAt(v uint32) *StatementUpsert {
	u.Add(statement.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StatementUpsert) SetDeletedAt(v uint32) *StatementUpsert {
	u.Set(statement.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StatementUpsert) UpdateDeletedAt() *StatementUpsert {
	u.SetExcluded(statement.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *StatementUpsert) AddDeletedAt(v uint32) *StatementUpsert {
	u.Add(statement.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *StatementUpsert) SetEntID(v uuid.UUID) *StatementUpsert {
	u.Set(statement.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *StatementUpsert) UpdateEntID() *StatementUpsert {
	u.SetExcluded(statement.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *StatementUpsert) SetAppID(v uuid.UUID) *StatementUpsert {
	u.Set(statement.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *StatementUpsert) UpdateAppID() *StatementUpsert {
	u.SetExcluded(statement.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *StatementUpsert) ClearAppID() *StatementUpsert {
	u.SetNull(statement.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *StatementUpsert) SetUserID(v uuid.UUID) *StatementUpsert {
	u.Set(statement.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *StatementUpsert) UpdateUserID() *StatementUpsert {
	u.SetExcluded(statement.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *StatementUpsert) ClearUserID() *StatementUpsert {
	u.SetNull(statement.FieldUserID)
	return u
}

// SetDirectContributorID sets the "direct_contributor_id" field.
func (u *StatementUpsert) SetDirectContributorID(v uuid.UUID) *StatementUpsert {
	u.Set(statement.FieldDirectContributorID, v)
	return u
}

// UpdateDirectContributorID sets the "direct_contributor_id" field to the value that was provided on create.
func (u *StatementUpsert) UpdateDirectContributorID() *StatementUpsert {
	u.SetExcluded(statement.FieldDirectContributorID)
	return u
}

// ClearDirectContributorID clears the value of the "direct_contributor_id" field.
func (u *StatementUpsert) ClearDirectContributorID() *StatementUpsert {
	u.SetNull(statement.FieldDirectContributorID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *StatementUpsert) SetGoodID(v uuid.UUID) *StatementUpsert {
	u.Set(statement.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *StatementUpsert) UpdateGoodID() *StatementUpsert {
	u.SetExcluded(statement.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *StatementUpsert) ClearGoodID() *StatementUpsert {
	u.SetNull(statement.FieldGoodID)
	return u
}

// SetAppGoodID sets the "app_good_id" field.
func (u *StatementUpsert) SetAppGoodID(v uuid.UUID) *StatementUpsert {
	u.Set(statement.FieldAppGoodID, v)
	return u
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *StatementUpsert) UpdateAppGoodID() *StatementUpsert {
	u.SetExcluded(statement.FieldAppGoodID)
	return u
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *StatementUpsert) ClearAppGoodID() *StatementUpsert {
	u.SetNull(statement.FieldAppGoodID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *StatementUpsert) SetOrderID(v uuid.UUID) *StatementUpsert {
	u.Set(statement.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *StatementUpsert) UpdateOrderID() *StatementUpsert {
	u.SetExcluded(statement.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *StatementUpsert) ClearOrderID() *StatementUpsert {
	u.SetNull(statement.FieldOrderID)
	return u
}

// SetSelfOrder sets the "self_order" field.
func (u *StatementUpsert) SetSelfOrder(v bool) *StatementUpsert {
	u.Set(statement.FieldSelfOrder, v)
	return u
}

// UpdateSelfOrder sets the "self_order" field to the value that was provided on create.
func (u *StatementUpsert) UpdateSelfOrder() *StatementUpsert {
	u.SetExcluded(statement.FieldSelfOrder)
	return u
}

// ClearSelfOrder clears the value of the "self_order" field.
func (u *StatementUpsert) ClearSelfOrder() *StatementUpsert {
	u.SetNull(statement.FieldSelfOrder)
	return u
}

// SetPaymentID sets the "payment_id" field.
func (u *StatementUpsert) SetPaymentID(v uuid.UUID) *StatementUpsert {
	u.Set(statement.FieldPaymentID, v)
	return u
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *StatementUpsert) UpdatePaymentID() *StatementUpsert {
	u.SetExcluded(statement.FieldPaymentID)
	return u
}

// ClearPaymentID clears the value of the "payment_id" field.
func (u *StatementUpsert) ClearPaymentID() *StatementUpsert {
	u.SetNull(statement.FieldPaymentID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *StatementUpsert) SetCoinTypeID(v uuid.UUID) *StatementUpsert {
	u.Set(statement.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *StatementUpsert) UpdateCoinTypeID() *StatementUpsert {
	u.SetExcluded(statement.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *StatementUpsert) ClearCoinTypeID() *StatementUpsert {
	u.SetNull(statement.FieldCoinTypeID)
	return u
}

// SetPaymentCoinTypeID sets the "payment_coin_type_id" field.
func (u *StatementUpsert) SetPaymentCoinTypeID(v uuid.UUID) *StatementUpsert {
	u.Set(statement.FieldPaymentCoinTypeID, v)
	return u
}

// UpdatePaymentCoinTypeID sets the "payment_coin_type_id" field to the value that was provided on create.
func (u *StatementUpsert) UpdatePaymentCoinTypeID() *StatementUpsert {
	u.SetExcluded(statement.FieldPaymentCoinTypeID)
	return u
}

// ClearPaymentCoinTypeID clears the value of the "payment_coin_type_id" field.
func (u *StatementUpsert) ClearPaymentCoinTypeID() *StatementUpsert {
	u.SetNull(statement.FieldPaymentCoinTypeID)
	return u
}

// SetPaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field.
func (u *StatementUpsert) SetPaymentCoinUsdCurrency(v decimal.Decimal) *StatementUpsert {
	u.Set(statement.FieldPaymentCoinUsdCurrency, v)
	return u
}

// UpdatePaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field to the value that was provided on create.
func (u *StatementUpsert) UpdatePaymentCoinUsdCurrency() *StatementUpsert {
	u.SetExcluded(statement.FieldPaymentCoinUsdCurrency)
	return u
}

// ClearPaymentCoinUsdCurrency clears the value of the "payment_coin_usd_currency" field.
func (u *StatementUpsert) ClearPaymentCoinUsdCurrency() *StatementUpsert {
	u.SetNull(statement.FieldPaymentCoinUsdCurrency)
	return u
}

// SetUnits sets the "units" field.
func (u *StatementUpsert) SetUnits(v uint32) *StatementUpsert {
	u.Set(statement.FieldUnits, v)
	return u
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *StatementUpsert) UpdateUnits() *StatementUpsert {
	u.SetExcluded(statement.FieldUnits)
	return u
}

// AddUnits adds v to the "units" field.
func (u *StatementUpsert) AddUnits(v uint32) *StatementUpsert {
	u.Add(statement.FieldUnits, v)
	return u
}

// ClearUnits clears the value of the "units" field.
func (u *StatementUpsert) ClearUnits() *StatementUpsert {
	u.SetNull(statement.FieldUnits)
	return u
}

// SetUnitsV1 sets the "units_v1" field.
func (u *StatementUpsert) SetUnitsV1(v decimal.Decimal) *StatementUpsert {
	u.Set(statement.FieldUnitsV1, v)
	return u
}

// UpdateUnitsV1 sets the "units_v1" field to the value that was provided on create.
func (u *StatementUpsert) UpdateUnitsV1() *StatementUpsert {
	u.SetExcluded(statement.FieldUnitsV1)
	return u
}

// ClearUnitsV1 clears the value of the "units_v1" field.
func (u *StatementUpsert) ClearUnitsV1() *StatementUpsert {
	u.SetNull(statement.FieldUnitsV1)
	return u
}

// SetAmount sets the "amount" field.
func (u *StatementUpsert) SetAmount(v decimal.Decimal) *StatementUpsert {
	u.Set(statement.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *StatementUpsert) UpdateAmount() *StatementUpsert {
	u.SetExcluded(statement.FieldAmount)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *StatementUpsert) ClearAmount() *StatementUpsert {
	u.SetNull(statement.FieldAmount)
	return u
}

// SetUsdAmount sets the "usd_amount" field.
func (u *StatementUpsert) SetUsdAmount(v decimal.Decimal) *StatementUpsert {
	u.Set(statement.FieldUsdAmount, v)
	return u
}

// UpdateUsdAmount sets the "usd_amount" field to the value that was provided on create.
func (u *StatementUpsert) UpdateUsdAmount() *StatementUpsert {
	u.SetExcluded(statement.FieldUsdAmount)
	return u
}

// ClearUsdAmount clears the value of the "usd_amount" field.
func (u *StatementUpsert) ClearUsdAmount() *StatementUpsert {
	u.SetNull(statement.FieldUsdAmount)
	return u
}

// SetCommission sets the "commission" field.
func (u *StatementUpsert) SetCommission(v decimal.Decimal) *StatementUpsert {
	u.Set(statement.FieldCommission, v)
	return u
}

// UpdateCommission sets the "commission" field to the value that was provided on create.
func (u *StatementUpsert) UpdateCommission() *StatementUpsert {
	u.SetExcluded(statement.FieldCommission)
	return u
}

// ClearCommission clears the value of the "commission" field.
func (u *StatementUpsert) ClearCommission() *StatementUpsert {
	u.SetNull(statement.FieldCommission)
	return u
}

// SetAppConfigID sets the "app_config_id" field.
func (u *StatementUpsert) SetAppConfigID(v uuid.UUID) *StatementUpsert {
	u.Set(statement.FieldAppConfigID, v)
	return u
}

// UpdateAppConfigID sets the "app_config_id" field to the value that was provided on create.
func (u *StatementUpsert) UpdateAppConfigID() *StatementUpsert {
	u.SetExcluded(statement.FieldAppConfigID)
	return u
}

// ClearAppConfigID clears the value of the "app_config_id" field.
func (u *StatementUpsert) ClearAppConfigID() *StatementUpsert {
	u.SetNull(statement.FieldAppConfigID)
	return u
}

// SetCommissionConfigID sets the "commission_config_id" field.
func (u *StatementUpsert) SetCommissionConfigID(v uuid.UUID) *StatementUpsert {
	u.Set(statement.FieldCommissionConfigID, v)
	return u
}

// UpdateCommissionConfigID sets the "commission_config_id" field to the value that was provided on create.
func (u *StatementUpsert) UpdateCommissionConfigID() *StatementUpsert {
	u.SetExcluded(statement.FieldCommissionConfigID)
	return u
}

// ClearCommissionConfigID clears the value of the "commission_config_id" field.
func (u *StatementUpsert) ClearCommissionConfigID() *StatementUpsert {
	u.SetNull(statement.FieldCommissionConfigID)
	return u
}

// SetCommissionConfigType sets the "commission_config_type" field.
func (u *StatementUpsert) SetCommissionConfigType(v string) *StatementUpsert {
	u.Set(statement.FieldCommissionConfigType, v)
	return u
}

// UpdateCommissionConfigType sets the "commission_config_type" field to the value that was provided on create.
func (u *StatementUpsert) UpdateCommissionConfigType() *StatementUpsert {
	u.SetExcluded(statement.FieldCommissionConfigType)
	return u
}

// ClearCommissionConfigType clears the value of the "commission_config_type" field.
func (u *StatementUpsert) ClearCommissionConfigType() *StatementUpsert {
	u.SetNull(statement.FieldCommissionConfigType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Statement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(statement.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *StatementUpsertOne) UpdateNewValues() *StatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(statement.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Statement.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *StatementUpsertOne) Ignore() *StatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StatementUpsertOne) DoNothing() *StatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StatementCreate.OnConflict
// documentation for more info.
func (u *StatementUpsertOne) Update(set func(*StatementUpsert)) *StatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StatementUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *StatementUpsertOne) SetCreatedAt(v uint32) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *StatementUpsertOne) AddCreatedAt(v uint32) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateCreatedAt() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StatementUpsertOne) SetUpdatedAt(v uint32) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *StatementUpsertOne) AddUpdatedAt(v uint32) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateUpdatedAt() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StatementUpsertOne) SetDeletedAt(v uint32) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *StatementUpsertOne) AddDeletedAt(v uint32) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateDeletedAt() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *StatementUpsertOne) SetEntID(v uuid.UUID) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateEntID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *StatementUpsertOne) SetAppID(v uuid.UUID) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateAppID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *StatementUpsertOne) ClearAppID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *StatementUpsertOne) SetUserID(v uuid.UUID) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateUserID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *StatementUpsertOne) ClearUserID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearUserID()
	})
}

// SetDirectContributorID sets the "direct_contributor_id" field.
func (u *StatementUpsertOne) SetDirectContributorID(v uuid.UUID) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetDirectContributorID(v)
	})
}

// UpdateDirectContributorID sets the "direct_contributor_id" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateDirectContributorID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateDirectContributorID()
	})
}

// ClearDirectContributorID clears the value of the "direct_contributor_id" field.
func (u *StatementUpsertOne) ClearDirectContributorID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearDirectContributorID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *StatementUpsertOne) SetGoodID(v uuid.UUID) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateGoodID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *StatementUpsertOne) ClearGoodID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearGoodID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *StatementUpsertOne) SetAppGoodID(v uuid.UUID) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateAppGoodID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *StatementUpsertOne) ClearAppGoodID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearAppGoodID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *StatementUpsertOne) SetOrderID(v uuid.UUID) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateOrderID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *StatementUpsertOne) ClearOrderID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearOrderID()
	})
}

// SetSelfOrder sets the "self_order" field.
func (u *StatementUpsertOne) SetSelfOrder(v bool) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetSelfOrder(v)
	})
}

// UpdateSelfOrder sets the "self_order" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateSelfOrder() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateSelfOrder()
	})
}

// ClearSelfOrder clears the value of the "self_order" field.
func (u *StatementUpsertOne) ClearSelfOrder() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearSelfOrder()
	})
}

// SetPaymentID sets the "payment_id" field.
func (u *StatementUpsertOne) SetPaymentID(v uuid.UUID) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetPaymentID(v)
	})
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdatePaymentID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdatePaymentID()
	})
}

// ClearPaymentID clears the value of the "payment_id" field.
func (u *StatementUpsertOne) ClearPaymentID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearPaymentID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *StatementUpsertOne) SetCoinTypeID(v uuid.UUID) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateCoinTypeID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *StatementUpsertOne) ClearCoinTypeID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetPaymentCoinTypeID sets the "payment_coin_type_id" field.
func (u *StatementUpsertOne) SetPaymentCoinTypeID(v uuid.UUID) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetPaymentCoinTypeID(v)
	})
}

// UpdatePaymentCoinTypeID sets the "payment_coin_type_id" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdatePaymentCoinTypeID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdatePaymentCoinTypeID()
	})
}

// ClearPaymentCoinTypeID clears the value of the "payment_coin_type_id" field.
func (u *StatementUpsertOne) ClearPaymentCoinTypeID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearPaymentCoinTypeID()
	})
}

// SetPaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field.
func (u *StatementUpsertOne) SetPaymentCoinUsdCurrency(v decimal.Decimal) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetPaymentCoinUsdCurrency(v)
	})
}

// UpdatePaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdatePaymentCoinUsdCurrency() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdatePaymentCoinUsdCurrency()
	})
}

// ClearPaymentCoinUsdCurrency clears the value of the "payment_coin_usd_currency" field.
func (u *StatementUpsertOne) ClearPaymentCoinUsdCurrency() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearPaymentCoinUsdCurrency()
	})
}

// SetUnits sets the "units" field.
func (u *StatementUpsertOne) SetUnits(v uint32) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetUnits(v)
	})
}

// AddUnits adds v to the "units" field.
func (u *StatementUpsertOne) AddUnits(v uint32) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.AddUnits(v)
	})
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateUnits() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateUnits()
	})
}

// ClearUnits clears the value of the "units" field.
func (u *StatementUpsertOne) ClearUnits() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearUnits()
	})
}

// SetUnitsV1 sets the "units_v1" field.
func (u *StatementUpsertOne) SetUnitsV1(v decimal.Decimal) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetUnitsV1(v)
	})
}

// UpdateUnitsV1 sets the "units_v1" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateUnitsV1() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateUnitsV1()
	})
}

// ClearUnitsV1 clears the value of the "units_v1" field.
func (u *StatementUpsertOne) ClearUnitsV1() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearUnitsV1()
	})
}

// SetAmount sets the "amount" field.
func (u *StatementUpsertOne) SetAmount(v decimal.Decimal) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateAmount() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *StatementUpsertOne) ClearAmount() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearAmount()
	})
}

// SetUsdAmount sets the "usd_amount" field.
func (u *StatementUpsertOne) SetUsdAmount(v decimal.Decimal) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetUsdAmount(v)
	})
}

// UpdateUsdAmount sets the "usd_amount" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateUsdAmount() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateUsdAmount()
	})
}

// ClearUsdAmount clears the value of the "usd_amount" field.
func (u *StatementUpsertOne) ClearUsdAmount() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearUsdAmount()
	})
}

// SetCommission sets the "commission" field.
func (u *StatementUpsertOne) SetCommission(v decimal.Decimal) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetCommission(v)
	})
}

// UpdateCommission sets the "commission" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateCommission() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateCommission()
	})
}

// ClearCommission clears the value of the "commission" field.
func (u *StatementUpsertOne) ClearCommission() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearCommission()
	})
}

// SetAppConfigID sets the "app_config_id" field.
func (u *StatementUpsertOne) SetAppConfigID(v uuid.UUID) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetAppConfigID(v)
	})
}

// UpdateAppConfigID sets the "app_config_id" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateAppConfigID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateAppConfigID()
	})
}

// ClearAppConfigID clears the value of the "app_config_id" field.
func (u *StatementUpsertOne) ClearAppConfigID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearAppConfigID()
	})
}

// SetCommissionConfigID sets the "commission_config_id" field.
func (u *StatementUpsertOne) SetCommissionConfigID(v uuid.UUID) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetCommissionConfigID(v)
	})
}

// UpdateCommissionConfigID sets the "commission_config_id" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateCommissionConfigID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateCommissionConfigID()
	})
}

// ClearCommissionConfigID clears the value of the "commission_config_id" field.
func (u *StatementUpsertOne) ClearCommissionConfigID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearCommissionConfigID()
	})
}

// SetCommissionConfigType sets the "commission_config_type" field.
func (u *StatementUpsertOne) SetCommissionConfigType(v string) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetCommissionConfigType(v)
	})
}

// UpdateCommissionConfigType sets the "commission_config_type" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateCommissionConfigType() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateCommissionConfigType()
	})
}

// ClearCommissionConfigType clears the value of the "commission_config_type" field.
func (u *StatementUpsertOne) ClearCommissionConfigType() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearCommissionConfigType()
	})
}

// Exec executes the query.
func (u *StatementUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for StatementCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StatementUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *StatementUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *StatementUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// StatementCreateBulk is the builder for creating many Statement entities in bulk.
type StatementCreateBulk struct {
	config
	err      error
	builders []*StatementCreate
	conflict []sql.ConflictOption
}

// Save creates the Statement entities in the database.
func (scb *StatementCreateBulk) Save(ctx context.Context) ([]*Statement, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Statement, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StatementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StatementCreateBulk) SaveX(ctx context.Context) []*Statement {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StatementCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StatementCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Statement.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StatementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (scb *StatementCreateBulk) OnConflict(opts ...sql.ConflictOption) *StatementUpsertBulk {
	scb.conflict = opts
	return &StatementUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Statement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *StatementCreateBulk) OnConflictColumns(columns ...string) *StatementUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &StatementUpsertBulk{
		create: scb,
	}
}

// StatementUpsertBulk is the builder for "upsert"-ing
// a bulk of Statement nodes.
type StatementUpsertBulk struct {
	create *StatementCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Statement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(statement.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *StatementUpsertBulk) UpdateNewValues() *StatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(statement.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Statement.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *StatementUpsertBulk) Ignore() *StatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StatementUpsertBulk) DoNothing() *StatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StatementCreateBulk.OnConflict
// documentation for more info.
func (u *StatementUpsertBulk) Update(set func(*StatementUpsert)) *StatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StatementUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *StatementUpsertBulk) SetCreatedAt(v uint32) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *StatementUpsertBulk) AddCreatedAt(v uint32) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateCreatedAt() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StatementUpsertBulk) SetUpdatedAt(v uint32) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *StatementUpsertBulk) AddUpdatedAt(v uint32) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateUpdatedAt() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StatementUpsertBulk) SetDeletedAt(v uint32) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *StatementUpsertBulk) AddDeletedAt(v uint32) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateDeletedAt() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *StatementUpsertBulk) SetEntID(v uuid.UUID) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateEntID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *StatementUpsertBulk) SetAppID(v uuid.UUID) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateAppID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *StatementUpsertBulk) ClearAppID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *StatementUpsertBulk) SetUserID(v uuid.UUID) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateUserID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *StatementUpsertBulk) ClearUserID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearUserID()
	})
}

// SetDirectContributorID sets the "direct_contributor_id" field.
func (u *StatementUpsertBulk) SetDirectContributorID(v uuid.UUID) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetDirectContributorID(v)
	})
}

// UpdateDirectContributorID sets the "direct_contributor_id" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateDirectContributorID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateDirectContributorID()
	})
}

// ClearDirectContributorID clears the value of the "direct_contributor_id" field.
func (u *StatementUpsertBulk) ClearDirectContributorID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearDirectContributorID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *StatementUpsertBulk) SetGoodID(v uuid.UUID) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateGoodID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *StatementUpsertBulk) ClearGoodID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearGoodID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *StatementUpsertBulk) SetAppGoodID(v uuid.UUID) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateAppGoodID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *StatementUpsertBulk) ClearAppGoodID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearAppGoodID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *StatementUpsertBulk) SetOrderID(v uuid.UUID) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateOrderID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *StatementUpsertBulk) ClearOrderID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearOrderID()
	})
}

// SetSelfOrder sets the "self_order" field.
func (u *StatementUpsertBulk) SetSelfOrder(v bool) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetSelfOrder(v)
	})
}

// UpdateSelfOrder sets the "self_order" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateSelfOrder() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateSelfOrder()
	})
}

// ClearSelfOrder clears the value of the "self_order" field.
func (u *StatementUpsertBulk) ClearSelfOrder() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearSelfOrder()
	})
}

// SetPaymentID sets the "payment_id" field.
func (u *StatementUpsertBulk) SetPaymentID(v uuid.UUID) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetPaymentID(v)
	})
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdatePaymentID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdatePaymentID()
	})
}

// ClearPaymentID clears the value of the "payment_id" field.
func (u *StatementUpsertBulk) ClearPaymentID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearPaymentID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *StatementUpsertBulk) SetCoinTypeID(v uuid.UUID) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateCoinTypeID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *StatementUpsertBulk) ClearCoinTypeID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetPaymentCoinTypeID sets the "payment_coin_type_id" field.
func (u *StatementUpsertBulk) SetPaymentCoinTypeID(v uuid.UUID) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetPaymentCoinTypeID(v)
	})
}

// UpdatePaymentCoinTypeID sets the "payment_coin_type_id" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdatePaymentCoinTypeID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdatePaymentCoinTypeID()
	})
}

// ClearPaymentCoinTypeID clears the value of the "payment_coin_type_id" field.
func (u *StatementUpsertBulk) ClearPaymentCoinTypeID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearPaymentCoinTypeID()
	})
}

// SetPaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field.
func (u *StatementUpsertBulk) SetPaymentCoinUsdCurrency(v decimal.Decimal) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetPaymentCoinUsdCurrency(v)
	})
}

// UpdatePaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdatePaymentCoinUsdCurrency() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdatePaymentCoinUsdCurrency()
	})
}

// ClearPaymentCoinUsdCurrency clears the value of the "payment_coin_usd_currency" field.
func (u *StatementUpsertBulk) ClearPaymentCoinUsdCurrency() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearPaymentCoinUsdCurrency()
	})
}

// SetUnits sets the "units" field.
func (u *StatementUpsertBulk) SetUnits(v uint32) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetUnits(v)
	})
}

// AddUnits adds v to the "units" field.
func (u *StatementUpsertBulk) AddUnits(v uint32) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.AddUnits(v)
	})
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateUnits() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateUnits()
	})
}

// ClearUnits clears the value of the "units" field.
func (u *StatementUpsertBulk) ClearUnits() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearUnits()
	})
}

// SetUnitsV1 sets the "units_v1" field.
func (u *StatementUpsertBulk) SetUnitsV1(v decimal.Decimal) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetUnitsV1(v)
	})
}

// UpdateUnitsV1 sets the "units_v1" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateUnitsV1() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateUnitsV1()
	})
}

// ClearUnitsV1 clears the value of the "units_v1" field.
func (u *StatementUpsertBulk) ClearUnitsV1() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearUnitsV1()
	})
}

// SetAmount sets the "amount" field.
func (u *StatementUpsertBulk) SetAmount(v decimal.Decimal) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateAmount() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *StatementUpsertBulk) ClearAmount() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearAmount()
	})
}

// SetUsdAmount sets the "usd_amount" field.
func (u *StatementUpsertBulk) SetUsdAmount(v decimal.Decimal) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetUsdAmount(v)
	})
}

// UpdateUsdAmount sets the "usd_amount" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateUsdAmount() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateUsdAmount()
	})
}

// ClearUsdAmount clears the value of the "usd_amount" field.
func (u *StatementUpsertBulk) ClearUsdAmount() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearUsdAmount()
	})
}

// SetCommission sets the "commission" field.
func (u *StatementUpsertBulk) SetCommission(v decimal.Decimal) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetCommission(v)
	})
}

// UpdateCommission sets the "commission" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateCommission() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateCommission()
	})
}

// ClearCommission clears the value of the "commission" field.
func (u *StatementUpsertBulk) ClearCommission() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearCommission()
	})
}

// SetAppConfigID sets the "app_config_id" field.
func (u *StatementUpsertBulk) SetAppConfigID(v uuid.UUID) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetAppConfigID(v)
	})
}

// UpdateAppConfigID sets the "app_config_id" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateAppConfigID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateAppConfigID()
	})
}

// ClearAppConfigID clears the value of the "app_config_id" field.
func (u *StatementUpsertBulk) ClearAppConfigID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearAppConfigID()
	})
}

// SetCommissionConfigID sets the "commission_config_id" field.
func (u *StatementUpsertBulk) SetCommissionConfigID(v uuid.UUID) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetCommissionConfigID(v)
	})
}

// UpdateCommissionConfigID sets the "commission_config_id" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateCommissionConfigID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateCommissionConfigID()
	})
}

// ClearCommissionConfigID clears the value of the "commission_config_id" field.
func (u *StatementUpsertBulk) ClearCommissionConfigID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearCommissionConfigID()
	})
}

// SetCommissionConfigType sets the "commission_config_type" field.
func (u *StatementUpsertBulk) SetCommissionConfigType(v string) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetCommissionConfigType(v)
	})
}

// UpdateCommissionConfigType sets the "commission_config_type" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateCommissionConfigType() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateCommissionConfigType()
	})
}

// ClearCommissionConfigType clears the value of the "commission_config_type" field.
func (u *StatementUpsertBulk) ClearCommissionConfigType() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearCommissionConfigType()
	})
}

// Exec executes the query.
func (u *StatementUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the StatementCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for StatementCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StatementUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

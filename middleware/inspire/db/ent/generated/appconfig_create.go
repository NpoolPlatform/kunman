// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/appconfig"
	"github.com/google/uuid"
)

// AppConfigCreate is the builder for creating a AppConfig entity.
type AppConfigCreate struct {
	config
	mutation *AppConfigMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (acc *AppConfigCreate) SetCreatedAt(u uint32) *AppConfigCreate {
	acc.mutation.SetCreatedAt(u)
	return acc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableCreatedAt(u *uint32) *AppConfigCreate {
	if u != nil {
		acc.SetCreatedAt(*u)
	}
	return acc
}

// SetUpdatedAt sets the "updated_at" field.
func (acc *AppConfigCreate) SetUpdatedAt(u uint32) *AppConfigCreate {
	acc.mutation.SetUpdatedAt(u)
	return acc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableUpdatedAt(u *uint32) *AppConfigCreate {
	if u != nil {
		acc.SetUpdatedAt(*u)
	}
	return acc
}

// SetDeletedAt sets the "deleted_at" field.
func (acc *AppConfigCreate) SetDeletedAt(u uint32) *AppConfigCreate {
	acc.mutation.SetDeletedAt(u)
	return acc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableDeletedAt(u *uint32) *AppConfigCreate {
	if u != nil {
		acc.SetDeletedAt(*u)
	}
	return acc
}

// SetEntID sets the "ent_id" field.
func (acc *AppConfigCreate) SetEntID(u uuid.UUID) *AppConfigCreate {
	acc.mutation.SetEntID(u)
	return acc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableEntID(u *uuid.UUID) *AppConfigCreate {
	if u != nil {
		acc.SetEntID(*u)
	}
	return acc
}

// SetAppID sets the "app_id" field.
func (acc *AppConfigCreate) SetAppID(u uuid.UUID) *AppConfigCreate {
	acc.mutation.SetAppID(u)
	return acc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableAppID(u *uuid.UUID) *AppConfigCreate {
	if u != nil {
		acc.SetAppID(*u)
	}
	return acc
}

// SetSettleMode sets the "settle_mode" field.
func (acc *AppConfigCreate) SetSettleMode(s string) *AppConfigCreate {
	acc.mutation.SetSettleMode(s)
	return acc
}

// SetNillableSettleMode sets the "settle_mode" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableSettleMode(s *string) *AppConfigCreate {
	if s != nil {
		acc.SetSettleMode(*s)
	}
	return acc
}

// SetSettleAmountType sets the "settle_amount_type" field.
func (acc *AppConfigCreate) SetSettleAmountType(s string) *AppConfigCreate {
	acc.mutation.SetSettleAmountType(s)
	return acc
}

// SetNillableSettleAmountType sets the "settle_amount_type" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableSettleAmountType(s *string) *AppConfigCreate {
	if s != nil {
		acc.SetSettleAmountType(*s)
	}
	return acc
}

// SetSettleInterval sets the "settle_interval" field.
func (acc *AppConfigCreate) SetSettleInterval(s string) *AppConfigCreate {
	acc.mutation.SetSettleInterval(s)
	return acc
}

// SetNillableSettleInterval sets the "settle_interval" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableSettleInterval(s *string) *AppConfigCreate {
	if s != nil {
		acc.SetSettleInterval(*s)
	}
	return acc
}

// SetCommissionType sets the "commission_type" field.
func (acc *AppConfigCreate) SetCommissionType(s string) *AppConfigCreate {
	acc.mutation.SetCommissionType(s)
	return acc
}

// SetNillableCommissionType sets the "commission_type" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableCommissionType(s *string) *AppConfigCreate {
	if s != nil {
		acc.SetCommissionType(*s)
	}
	return acc
}

// SetSettleBenefit sets the "settle_benefit" field.
func (acc *AppConfigCreate) SetSettleBenefit(b bool) *AppConfigCreate {
	acc.mutation.SetSettleBenefit(b)
	return acc
}

// SetNillableSettleBenefit sets the "settle_benefit" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableSettleBenefit(b *bool) *AppConfigCreate {
	if b != nil {
		acc.SetSettleBenefit(*b)
	}
	return acc
}

// SetMaxLevel sets the "max_level" field.
func (acc *AppConfigCreate) SetMaxLevel(u uint32) *AppConfigCreate {
	acc.mutation.SetMaxLevel(u)
	return acc
}

// SetNillableMaxLevel sets the "max_level" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableMaxLevel(u *uint32) *AppConfigCreate {
	if u != nil {
		acc.SetMaxLevel(*u)
	}
	return acc
}

// SetStartAt sets the "start_at" field.
func (acc *AppConfigCreate) SetStartAt(u uint32) *AppConfigCreate {
	acc.mutation.SetStartAt(u)
	return acc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableStartAt(u *uint32) *AppConfigCreate {
	if u != nil {
		acc.SetStartAt(*u)
	}
	return acc
}

// SetEndAt sets the "end_at" field.
func (acc *AppConfigCreate) SetEndAt(u uint32) *AppConfigCreate {
	acc.mutation.SetEndAt(u)
	return acc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableEndAt(u *uint32) *AppConfigCreate {
	if u != nil {
		acc.SetEndAt(*u)
	}
	return acc
}

// SetID sets the "id" field.
func (acc *AppConfigCreate) SetID(u uint32) *AppConfigCreate {
	acc.mutation.SetID(u)
	return acc
}

// Mutation returns the AppConfigMutation object of the builder.
func (acc *AppConfigCreate) Mutation() *AppConfigMutation {
	return acc.mutation
}

// Save creates the AppConfig in the database.
func (acc *AppConfigCreate) Save(ctx context.Context) (*AppConfig, error) {
	acc.defaults()
	return withHooks(ctx, acc.sqlSave, acc.mutation, acc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (acc *AppConfigCreate) SaveX(ctx context.Context) *AppConfig {
	v, err := acc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acc *AppConfigCreate) Exec(ctx context.Context) error {
	_, err := acc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acc *AppConfigCreate) ExecX(ctx context.Context) {
	if err := acc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acc *AppConfigCreate) defaults() {
	if _, ok := acc.mutation.CreatedAt(); !ok {
		v := appconfig.DefaultCreatedAt()
		acc.mutation.SetCreatedAt(v)
	}
	if _, ok := acc.mutation.UpdatedAt(); !ok {
		v := appconfig.DefaultUpdatedAt()
		acc.mutation.SetUpdatedAt(v)
	}
	if _, ok := acc.mutation.DeletedAt(); !ok {
		v := appconfig.DefaultDeletedAt()
		acc.mutation.SetDeletedAt(v)
	}
	if _, ok := acc.mutation.EntID(); !ok {
		v := appconfig.DefaultEntID()
		acc.mutation.SetEntID(v)
	}
	if _, ok := acc.mutation.AppID(); !ok {
		v := appconfig.DefaultAppID()
		acc.mutation.SetAppID(v)
	}
	if _, ok := acc.mutation.SettleMode(); !ok {
		v := appconfig.DefaultSettleMode
		acc.mutation.SetSettleMode(v)
	}
	if _, ok := acc.mutation.SettleAmountType(); !ok {
		v := appconfig.DefaultSettleAmountType
		acc.mutation.SetSettleAmountType(v)
	}
	if _, ok := acc.mutation.SettleInterval(); !ok {
		v := appconfig.DefaultSettleInterval
		acc.mutation.SetSettleInterval(v)
	}
	if _, ok := acc.mutation.CommissionType(); !ok {
		v := appconfig.DefaultCommissionType
		acc.mutation.SetCommissionType(v)
	}
	if _, ok := acc.mutation.SettleBenefit(); !ok {
		v := appconfig.DefaultSettleBenefit
		acc.mutation.SetSettleBenefit(v)
	}
	if _, ok := acc.mutation.MaxLevel(); !ok {
		v := appconfig.DefaultMaxLevel
		acc.mutation.SetMaxLevel(v)
	}
	if _, ok := acc.mutation.StartAt(); !ok {
		v := appconfig.DefaultStartAt
		acc.mutation.SetStartAt(v)
	}
	if _, ok := acc.mutation.EndAt(); !ok {
		v := appconfig.DefaultEndAt
		acc.mutation.SetEndAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acc *AppConfigCreate) check() error {
	if _, ok := acc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "AppConfig.created_at"`)}
	}
	if _, ok := acc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "AppConfig.updated_at"`)}
	}
	if _, ok := acc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "AppConfig.deleted_at"`)}
	}
	if _, ok := acc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "AppConfig.ent_id"`)}
	}
	return nil
}

func (acc *AppConfigCreate) sqlSave(ctx context.Context) (*AppConfig, error) {
	if err := acc.check(); err != nil {
		return nil, err
	}
	_node, _spec := acc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	acc.mutation.id = &_node.ID
	acc.mutation.done = true
	return _node, nil
}

func (acc *AppConfigCreate) createSpec() (*AppConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &AppConfig{config: acc.config}
		_spec = sqlgraph.NewCreateSpec(appconfig.Table, sqlgraph.NewFieldSpec(appconfig.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = acc.conflict
	if id, ok := acc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := acc.mutation.CreatedAt(); ok {
		_spec.SetField(appconfig.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := acc.mutation.UpdatedAt(); ok {
		_spec.SetField(appconfig.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := acc.mutation.DeletedAt(); ok {
		_spec.SetField(appconfig.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := acc.mutation.EntID(); ok {
		_spec.SetField(appconfig.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := acc.mutation.AppID(); ok {
		_spec.SetField(appconfig.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := acc.mutation.SettleMode(); ok {
		_spec.SetField(appconfig.FieldSettleMode, field.TypeString, value)
		_node.SettleMode = value
	}
	if value, ok := acc.mutation.SettleAmountType(); ok {
		_spec.SetField(appconfig.FieldSettleAmountType, field.TypeString, value)
		_node.SettleAmountType = value
	}
	if value, ok := acc.mutation.SettleInterval(); ok {
		_spec.SetField(appconfig.FieldSettleInterval, field.TypeString, value)
		_node.SettleInterval = value
	}
	if value, ok := acc.mutation.CommissionType(); ok {
		_spec.SetField(appconfig.FieldCommissionType, field.TypeString, value)
		_node.CommissionType = value
	}
	if value, ok := acc.mutation.SettleBenefit(); ok {
		_spec.SetField(appconfig.FieldSettleBenefit, field.TypeBool, value)
		_node.SettleBenefit = value
	}
	if value, ok := acc.mutation.MaxLevel(); ok {
		_spec.SetField(appconfig.FieldMaxLevel, field.TypeUint32, value)
		_node.MaxLevel = value
	}
	if value, ok := acc.mutation.StartAt(); ok {
		_spec.SetField(appconfig.FieldStartAt, field.TypeUint32, value)
		_node.StartAt = value
	}
	if value, ok := acc.mutation.EndAt(); ok {
		_spec.SetField(appconfig.FieldEndAt, field.TypeUint32, value)
		_node.EndAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppConfig.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppConfigUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (acc *AppConfigCreate) OnConflict(opts ...sql.ConflictOption) *AppConfigUpsertOne {
	acc.conflict = opts
	return &AppConfigUpsertOne{
		create: acc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acc *AppConfigCreate) OnConflictColumns(columns ...string) *AppConfigUpsertOne {
	acc.conflict = append(acc.conflict, sql.ConflictColumns(columns...))
	return &AppConfigUpsertOne{
		create: acc,
	}
}

type (
	// AppConfigUpsertOne is the builder for "upsert"-ing
	//  one AppConfig node.
	AppConfigUpsertOne struct {
		create *AppConfigCreate
	}

	// AppConfigUpsert is the "OnConflict" setter.
	AppConfigUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *AppConfigUpsert) SetCreatedAt(v uint32) *AppConfigUpsert {
	u.Set(appconfig.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateCreatedAt() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppConfigUpsert) AddCreatedAt(v uint32) *AppConfigUpsert {
	u.Add(appconfig.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppConfigUpsert) SetUpdatedAt(v uint32) *AppConfigUpsert {
	u.Set(appconfig.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateUpdatedAt() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppConfigUpsert) AddUpdatedAt(v uint32) *AppConfigUpsert {
	u.Add(appconfig.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppConfigUpsert) SetDeletedAt(v uint32) *AppConfigUpsert {
	u.Set(appconfig.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateDeletedAt() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppConfigUpsert) AddDeletedAt(v uint32) *AppConfigUpsert {
	u.Add(appconfig.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppConfigUpsert) SetEntID(v uuid.UUID) *AppConfigUpsert {
	u.Set(appconfig.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateEntID() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppConfigUpsert) SetAppID(v uuid.UUID) *AppConfigUpsert {
	u.Set(appconfig.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateAppID() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppConfigUpsert) ClearAppID() *AppConfigUpsert {
	u.SetNull(appconfig.FieldAppID)
	return u
}

// SetSettleMode sets the "settle_mode" field.
func (u *AppConfigUpsert) SetSettleMode(v string) *AppConfigUpsert {
	u.Set(appconfig.FieldSettleMode, v)
	return u
}

// UpdateSettleMode sets the "settle_mode" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateSettleMode() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldSettleMode)
	return u
}

// ClearSettleMode clears the value of the "settle_mode" field.
func (u *AppConfigUpsert) ClearSettleMode() *AppConfigUpsert {
	u.SetNull(appconfig.FieldSettleMode)
	return u
}

// SetSettleAmountType sets the "settle_amount_type" field.
func (u *AppConfigUpsert) SetSettleAmountType(v string) *AppConfigUpsert {
	u.Set(appconfig.FieldSettleAmountType, v)
	return u
}

// UpdateSettleAmountType sets the "settle_amount_type" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateSettleAmountType() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldSettleAmountType)
	return u
}

// ClearSettleAmountType clears the value of the "settle_amount_type" field.
func (u *AppConfigUpsert) ClearSettleAmountType() *AppConfigUpsert {
	u.SetNull(appconfig.FieldSettleAmountType)
	return u
}

// SetSettleInterval sets the "settle_interval" field.
func (u *AppConfigUpsert) SetSettleInterval(v string) *AppConfigUpsert {
	u.Set(appconfig.FieldSettleInterval, v)
	return u
}

// UpdateSettleInterval sets the "settle_interval" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateSettleInterval() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldSettleInterval)
	return u
}

// ClearSettleInterval clears the value of the "settle_interval" field.
func (u *AppConfigUpsert) ClearSettleInterval() *AppConfigUpsert {
	u.SetNull(appconfig.FieldSettleInterval)
	return u
}

// SetCommissionType sets the "commission_type" field.
func (u *AppConfigUpsert) SetCommissionType(v string) *AppConfigUpsert {
	u.Set(appconfig.FieldCommissionType, v)
	return u
}

// UpdateCommissionType sets the "commission_type" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateCommissionType() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldCommissionType)
	return u
}

// ClearCommissionType clears the value of the "commission_type" field.
func (u *AppConfigUpsert) ClearCommissionType() *AppConfigUpsert {
	u.SetNull(appconfig.FieldCommissionType)
	return u
}

// SetSettleBenefit sets the "settle_benefit" field.
func (u *AppConfigUpsert) SetSettleBenefit(v bool) *AppConfigUpsert {
	u.Set(appconfig.FieldSettleBenefit, v)
	return u
}

// UpdateSettleBenefit sets the "settle_benefit" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateSettleBenefit() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldSettleBenefit)
	return u
}

// ClearSettleBenefit clears the value of the "settle_benefit" field.
func (u *AppConfigUpsert) ClearSettleBenefit() *AppConfigUpsert {
	u.SetNull(appconfig.FieldSettleBenefit)
	return u
}

// SetMaxLevel sets the "max_level" field.
func (u *AppConfigUpsert) SetMaxLevel(v uint32) *AppConfigUpsert {
	u.Set(appconfig.FieldMaxLevel, v)
	return u
}

// UpdateMaxLevel sets the "max_level" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateMaxLevel() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldMaxLevel)
	return u
}

// AddMaxLevel adds v to the "max_level" field.
func (u *AppConfigUpsert) AddMaxLevel(v uint32) *AppConfigUpsert {
	u.Add(appconfig.FieldMaxLevel, v)
	return u
}

// ClearMaxLevel clears the value of the "max_level" field.
func (u *AppConfigUpsert) ClearMaxLevel() *AppConfigUpsert {
	u.SetNull(appconfig.FieldMaxLevel)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *AppConfigUpsert) SetStartAt(v uint32) *AppConfigUpsert {
	u.Set(appconfig.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateStartAt() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldStartAt)
	return u
}

// AddStartAt adds v to the "start_at" field.
func (u *AppConfigUpsert) AddStartAt(v uint32) *AppConfigUpsert {
	u.Add(appconfig.FieldStartAt, v)
	return u
}

// ClearStartAt clears the value of the "start_at" field.
func (u *AppConfigUpsert) ClearStartAt() *AppConfigUpsert {
	u.SetNull(appconfig.FieldStartAt)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *AppConfigUpsert) SetEndAt(v uint32) *AppConfigUpsert {
	u.Set(appconfig.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateEndAt() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldEndAt)
	return u
}

// AddEndAt adds v to the "end_at" field.
func (u *AppConfigUpsert) AddEndAt(v uint32) *AppConfigUpsert {
	u.Add(appconfig.FieldEndAt, v)
	return u
}

// ClearEndAt clears the value of the "end_at" field.
func (u *AppConfigUpsert) ClearEndAt() *AppConfigUpsert {
	u.SetNull(appconfig.FieldEndAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppConfigUpsertOne) UpdateNewValues() *AppConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appconfig.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppConfig.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppConfigUpsertOne) Ignore() *AppConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppConfigUpsertOne) DoNothing() *AppConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppConfigCreate.OnConflict
// documentation for more info.
func (u *AppConfigUpsertOne) Update(set func(*AppConfigUpsert)) *AppConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppConfigUpsertOne) SetCreatedAt(v uint32) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppConfigUpsertOne) AddCreatedAt(v uint32) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateCreatedAt() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppConfigUpsertOne) SetUpdatedAt(v uint32) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppConfigUpsertOne) AddUpdatedAt(v uint32) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateUpdatedAt() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppConfigUpsertOne) SetDeletedAt(v uint32) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppConfigUpsertOne) AddDeletedAt(v uint32) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateDeletedAt() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *AppConfigUpsertOne) SetEntID(v uuid.UUID) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateEntID() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppConfigUpsertOne) SetAppID(v uuid.UUID) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateAppID() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppConfigUpsertOne) ClearAppID() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearAppID()
	})
}

// SetSettleMode sets the "settle_mode" field.
func (u *AppConfigUpsertOne) SetSettleMode(v string) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetSettleMode(v)
	})
}

// UpdateSettleMode sets the "settle_mode" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateSettleMode() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateSettleMode()
	})
}

// ClearSettleMode clears the value of the "settle_mode" field.
func (u *AppConfigUpsertOne) ClearSettleMode() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearSettleMode()
	})
}

// SetSettleAmountType sets the "settle_amount_type" field.
func (u *AppConfigUpsertOne) SetSettleAmountType(v string) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetSettleAmountType(v)
	})
}

// UpdateSettleAmountType sets the "settle_amount_type" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateSettleAmountType() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateSettleAmountType()
	})
}

// ClearSettleAmountType clears the value of the "settle_amount_type" field.
func (u *AppConfigUpsertOne) ClearSettleAmountType() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearSettleAmountType()
	})
}

// SetSettleInterval sets the "settle_interval" field.
func (u *AppConfigUpsertOne) SetSettleInterval(v string) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetSettleInterval(v)
	})
}

// UpdateSettleInterval sets the "settle_interval" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateSettleInterval() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateSettleInterval()
	})
}

// ClearSettleInterval clears the value of the "settle_interval" field.
func (u *AppConfigUpsertOne) ClearSettleInterval() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearSettleInterval()
	})
}

// SetCommissionType sets the "commission_type" field.
func (u *AppConfigUpsertOne) SetCommissionType(v string) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetCommissionType(v)
	})
}

// UpdateCommissionType sets the "commission_type" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateCommissionType() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateCommissionType()
	})
}

// ClearCommissionType clears the value of the "commission_type" field.
func (u *AppConfigUpsertOne) ClearCommissionType() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearCommissionType()
	})
}

// SetSettleBenefit sets the "settle_benefit" field.
func (u *AppConfigUpsertOne) SetSettleBenefit(v bool) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetSettleBenefit(v)
	})
}

// UpdateSettleBenefit sets the "settle_benefit" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateSettleBenefit() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateSettleBenefit()
	})
}

// ClearSettleBenefit clears the value of the "settle_benefit" field.
func (u *AppConfigUpsertOne) ClearSettleBenefit() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearSettleBenefit()
	})
}

// SetMaxLevel sets the "max_level" field.
func (u *AppConfigUpsertOne) SetMaxLevel(v uint32) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetMaxLevel(v)
	})
}

// AddMaxLevel adds v to the "max_level" field.
func (u *AppConfigUpsertOne) AddMaxLevel(v uint32) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.AddMaxLevel(v)
	})
}

// UpdateMaxLevel sets the "max_level" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateMaxLevel() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateMaxLevel()
	})
}

// ClearMaxLevel clears the value of the "max_level" field.
func (u *AppConfigUpsertOne) ClearMaxLevel() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearMaxLevel()
	})
}

// SetStartAt sets the "start_at" field.
func (u *AppConfigUpsertOne) SetStartAt(v uint32) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *AppConfigUpsertOne) AddStartAt(v uint32) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateStartAt() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *AppConfigUpsertOne) ClearStartAt() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *AppConfigUpsertOne) SetEndAt(v uint32) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *AppConfigUpsertOne) AddEndAt(v uint32) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateEndAt() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *AppConfigUpsertOne) ClearEndAt() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearEndAt()
	})
}

// Exec executes the query.
func (u *AppConfigUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppConfigCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppConfigUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppConfigUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppConfigUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppConfigCreateBulk is the builder for creating many AppConfig entities in bulk.
type AppConfigCreateBulk struct {
	config
	err      error
	builders []*AppConfigCreate
	conflict []sql.ConflictOption
}

// Save creates the AppConfig entities in the database.
func (accb *AppConfigCreateBulk) Save(ctx context.Context) ([]*AppConfig, error) {
	if accb.err != nil {
		return nil, accb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(accb.builders))
	nodes := make([]*AppConfig, len(accb.builders))
	mutators := make([]Mutator, len(accb.builders))
	for i := range accb.builders {
		func(i int, root context.Context) {
			builder := accb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, accb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = accb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, accb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, accb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (accb *AppConfigCreateBulk) SaveX(ctx context.Context) []*AppConfig {
	v, err := accb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (accb *AppConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := accb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accb *AppConfigCreateBulk) ExecX(ctx context.Context) {
	if err := accb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppConfig.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppConfigUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (accb *AppConfigCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppConfigUpsertBulk {
	accb.conflict = opts
	return &AppConfigUpsertBulk{
		create: accb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (accb *AppConfigCreateBulk) OnConflictColumns(columns ...string) *AppConfigUpsertBulk {
	accb.conflict = append(accb.conflict, sql.ConflictColumns(columns...))
	return &AppConfigUpsertBulk{
		create: accb,
	}
}

// AppConfigUpsertBulk is the builder for "upsert"-ing
// a bulk of AppConfig nodes.
type AppConfigUpsertBulk struct {
	create *AppConfigCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppConfigUpsertBulk) UpdateNewValues() *AppConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appconfig.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppConfig.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppConfigUpsertBulk) Ignore() *AppConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppConfigUpsertBulk) DoNothing() *AppConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppConfigCreateBulk.OnConflict
// documentation for more info.
func (u *AppConfigUpsertBulk) Update(set func(*AppConfigUpsert)) *AppConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppConfigUpsertBulk) SetCreatedAt(v uint32) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppConfigUpsertBulk) AddCreatedAt(v uint32) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateCreatedAt() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppConfigUpsertBulk) SetUpdatedAt(v uint32) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppConfigUpsertBulk) AddUpdatedAt(v uint32) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateUpdatedAt() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppConfigUpsertBulk) SetDeletedAt(v uint32) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppConfigUpsertBulk) AddDeletedAt(v uint32) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateDeletedAt() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *AppConfigUpsertBulk) SetEntID(v uuid.UUID) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateEntID() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppConfigUpsertBulk) SetAppID(v uuid.UUID) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateAppID() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppConfigUpsertBulk) ClearAppID() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearAppID()
	})
}

// SetSettleMode sets the "settle_mode" field.
func (u *AppConfigUpsertBulk) SetSettleMode(v string) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetSettleMode(v)
	})
}

// UpdateSettleMode sets the "settle_mode" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateSettleMode() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateSettleMode()
	})
}

// ClearSettleMode clears the value of the "settle_mode" field.
func (u *AppConfigUpsertBulk) ClearSettleMode() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearSettleMode()
	})
}

// SetSettleAmountType sets the "settle_amount_type" field.
func (u *AppConfigUpsertBulk) SetSettleAmountType(v string) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetSettleAmountType(v)
	})
}

// UpdateSettleAmountType sets the "settle_amount_type" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateSettleAmountType() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateSettleAmountType()
	})
}

// ClearSettleAmountType clears the value of the "settle_amount_type" field.
func (u *AppConfigUpsertBulk) ClearSettleAmountType() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearSettleAmountType()
	})
}

// SetSettleInterval sets the "settle_interval" field.
func (u *AppConfigUpsertBulk) SetSettleInterval(v string) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetSettleInterval(v)
	})
}

// UpdateSettleInterval sets the "settle_interval" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateSettleInterval() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateSettleInterval()
	})
}

// ClearSettleInterval clears the value of the "settle_interval" field.
func (u *AppConfigUpsertBulk) ClearSettleInterval() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearSettleInterval()
	})
}

// SetCommissionType sets the "commission_type" field.
func (u *AppConfigUpsertBulk) SetCommissionType(v string) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetCommissionType(v)
	})
}

// UpdateCommissionType sets the "commission_type" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateCommissionType() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateCommissionType()
	})
}

// ClearCommissionType clears the value of the "commission_type" field.
func (u *AppConfigUpsertBulk) ClearCommissionType() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearCommissionType()
	})
}

// SetSettleBenefit sets the "settle_benefit" field.
func (u *AppConfigUpsertBulk) SetSettleBenefit(v bool) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetSettleBenefit(v)
	})
}

// UpdateSettleBenefit sets the "settle_benefit" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateSettleBenefit() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateSettleBenefit()
	})
}

// ClearSettleBenefit clears the value of the "settle_benefit" field.
func (u *AppConfigUpsertBulk) ClearSettleBenefit() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearSettleBenefit()
	})
}

// SetMaxLevel sets the "max_level" field.
func (u *AppConfigUpsertBulk) SetMaxLevel(v uint32) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetMaxLevel(v)
	})
}

// AddMaxLevel adds v to the "max_level" field.
func (u *AppConfigUpsertBulk) AddMaxLevel(v uint32) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.AddMaxLevel(v)
	})
}

// UpdateMaxLevel sets the "max_level" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateMaxLevel() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateMaxLevel()
	})
}

// ClearMaxLevel clears the value of the "max_level" field.
func (u *AppConfigUpsertBulk) ClearMaxLevel() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearMaxLevel()
	})
}

// SetStartAt sets the "start_at" field.
func (u *AppConfigUpsertBulk) SetStartAt(v uint32) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *AppConfigUpsertBulk) AddStartAt(v uint32) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateStartAt() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *AppConfigUpsertBulk) ClearStartAt() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *AppConfigUpsertBulk) SetEndAt(v uint32) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *AppConfigUpsertBulk) AddEndAt(v uint32) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateEndAt() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *AppConfigUpsertBulk) ClearEndAt() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearEndAt()
	})
}

// Exec executes the query.
func (u *AppConfigUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the AppConfigCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppConfigCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppConfigUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

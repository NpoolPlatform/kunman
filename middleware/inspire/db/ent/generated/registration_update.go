// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/registration"
	"github.com/google/uuid"
)

// RegistrationUpdate is the builder for updating Registration entities.
type RegistrationUpdate struct {
	config
	hooks     []Hook
	mutation  *RegistrationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RegistrationUpdate builder.
func (ru *RegistrationUpdate) Where(ps ...predicate.Registration) *RegistrationUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *RegistrationUpdate) SetCreatedAt(u uint32) *RegistrationUpdate {
	ru.mutation.ResetCreatedAt()
	ru.mutation.SetCreatedAt(u)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *RegistrationUpdate) SetNillableCreatedAt(u *uint32) *RegistrationUpdate {
	if u != nil {
		ru.SetCreatedAt(*u)
	}
	return ru
}

// AddCreatedAt adds u to the "created_at" field.
func (ru *RegistrationUpdate) AddCreatedAt(u int32) *RegistrationUpdate {
	ru.mutation.AddCreatedAt(u)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RegistrationUpdate) SetUpdatedAt(u uint32) *RegistrationUpdate {
	ru.mutation.ResetUpdatedAt()
	ru.mutation.SetUpdatedAt(u)
	return ru
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ru *RegistrationUpdate) AddUpdatedAt(u int32) *RegistrationUpdate {
	ru.mutation.AddUpdatedAt(u)
	return ru
}

// SetDeletedAt sets the "deleted_at" field.
func (ru *RegistrationUpdate) SetDeletedAt(u uint32) *RegistrationUpdate {
	ru.mutation.ResetDeletedAt()
	ru.mutation.SetDeletedAt(u)
	return ru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ru *RegistrationUpdate) SetNillableDeletedAt(u *uint32) *RegistrationUpdate {
	if u != nil {
		ru.SetDeletedAt(*u)
	}
	return ru
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ru *RegistrationUpdate) AddDeletedAt(u int32) *RegistrationUpdate {
	ru.mutation.AddDeletedAt(u)
	return ru
}

// SetEntID sets the "ent_id" field.
func (ru *RegistrationUpdate) SetEntID(u uuid.UUID) *RegistrationUpdate {
	ru.mutation.SetEntID(u)
	return ru
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ru *RegistrationUpdate) SetNillableEntID(u *uuid.UUID) *RegistrationUpdate {
	if u != nil {
		ru.SetEntID(*u)
	}
	return ru
}

// SetAppID sets the "app_id" field.
func (ru *RegistrationUpdate) SetAppID(u uuid.UUID) *RegistrationUpdate {
	ru.mutation.SetAppID(u)
	return ru
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ru *RegistrationUpdate) SetNillableAppID(u *uuid.UUID) *RegistrationUpdate {
	if u != nil {
		ru.SetAppID(*u)
	}
	return ru
}

// ClearAppID clears the value of the "app_id" field.
func (ru *RegistrationUpdate) ClearAppID() *RegistrationUpdate {
	ru.mutation.ClearAppID()
	return ru
}

// SetInviterID sets the "inviter_id" field.
func (ru *RegistrationUpdate) SetInviterID(u uuid.UUID) *RegistrationUpdate {
	ru.mutation.SetInviterID(u)
	return ru
}

// SetNillableInviterID sets the "inviter_id" field if the given value is not nil.
func (ru *RegistrationUpdate) SetNillableInviterID(u *uuid.UUID) *RegistrationUpdate {
	if u != nil {
		ru.SetInviterID(*u)
	}
	return ru
}

// ClearInviterID clears the value of the "inviter_id" field.
func (ru *RegistrationUpdate) ClearInviterID() *RegistrationUpdate {
	ru.mutation.ClearInviterID()
	return ru
}

// SetInviteeID sets the "invitee_id" field.
func (ru *RegistrationUpdate) SetInviteeID(u uuid.UUID) *RegistrationUpdate {
	ru.mutation.SetInviteeID(u)
	return ru
}

// SetNillableInviteeID sets the "invitee_id" field if the given value is not nil.
func (ru *RegistrationUpdate) SetNillableInviteeID(u *uuid.UUID) *RegistrationUpdate {
	if u != nil {
		ru.SetInviteeID(*u)
	}
	return ru
}

// ClearInviteeID clears the value of the "invitee_id" field.
func (ru *RegistrationUpdate) ClearInviteeID() *RegistrationUpdate {
	ru.mutation.ClearInviteeID()
	return ru
}

// Mutation returns the RegistrationMutation object of the builder.
func (ru *RegistrationUpdate) Mutation() *RegistrationMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RegistrationUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RegistrationUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RegistrationUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RegistrationUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RegistrationUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := registration.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ru *RegistrationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RegistrationUpdate {
	ru.modifiers = append(ru.modifiers, modifiers...)
	return ru
}

func (ru *RegistrationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(registration.Table, registration.Columns, sqlgraph.NewFieldSpec(registration.FieldID, field.TypeUint32))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(registration.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ru.mutation.AddedCreatedAt(); ok {
		_spec.AddField(registration.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(registration.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ru.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(registration.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ru.mutation.DeletedAt(); ok {
		_spec.SetField(registration.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ru.mutation.AddedDeletedAt(); ok {
		_spec.AddField(registration.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ru.mutation.EntID(); ok {
		_spec.SetField(registration.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := ru.mutation.AppID(); ok {
		_spec.SetField(registration.FieldAppID, field.TypeUUID, value)
	}
	if ru.mutation.AppIDCleared() {
		_spec.ClearField(registration.FieldAppID, field.TypeUUID)
	}
	if value, ok := ru.mutation.InviterID(); ok {
		_spec.SetField(registration.FieldInviterID, field.TypeUUID, value)
	}
	if ru.mutation.InviterIDCleared() {
		_spec.ClearField(registration.FieldInviterID, field.TypeUUID)
	}
	if value, ok := ru.mutation.InviteeID(); ok {
		_spec.SetField(registration.FieldInviteeID, field.TypeUUID, value)
	}
	if ru.mutation.InviteeIDCleared() {
		_spec.ClearField(registration.FieldInviteeID, field.TypeUUID)
	}
	_spec.AddModifiers(ru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{registration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RegistrationUpdateOne is the builder for updating a single Registration entity.
type RegistrationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RegistrationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (ruo *RegistrationUpdateOne) SetCreatedAt(u uint32) *RegistrationUpdateOne {
	ruo.mutation.ResetCreatedAt()
	ruo.mutation.SetCreatedAt(u)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *RegistrationUpdateOne) SetNillableCreatedAt(u *uint32) *RegistrationUpdateOne {
	if u != nil {
		ruo.SetCreatedAt(*u)
	}
	return ruo
}

// AddCreatedAt adds u to the "created_at" field.
func (ruo *RegistrationUpdateOne) AddCreatedAt(u int32) *RegistrationUpdateOne {
	ruo.mutation.AddCreatedAt(u)
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RegistrationUpdateOne) SetUpdatedAt(u uint32) *RegistrationUpdateOne {
	ruo.mutation.ResetUpdatedAt()
	ruo.mutation.SetUpdatedAt(u)
	return ruo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ruo *RegistrationUpdateOne) AddUpdatedAt(u int32) *RegistrationUpdateOne {
	ruo.mutation.AddUpdatedAt(u)
	return ruo
}

// SetDeletedAt sets the "deleted_at" field.
func (ruo *RegistrationUpdateOne) SetDeletedAt(u uint32) *RegistrationUpdateOne {
	ruo.mutation.ResetDeletedAt()
	ruo.mutation.SetDeletedAt(u)
	return ruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruo *RegistrationUpdateOne) SetNillableDeletedAt(u *uint32) *RegistrationUpdateOne {
	if u != nil {
		ruo.SetDeletedAt(*u)
	}
	return ruo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ruo *RegistrationUpdateOne) AddDeletedAt(u int32) *RegistrationUpdateOne {
	ruo.mutation.AddDeletedAt(u)
	return ruo
}

// SetEntID sets the "ent_id" field.
func (ruo *RegistrationUpdateOne) SetEntID(u uuid.UUID) *RegistrationUpdateOne {
	ruo.mutation.SetEntID(u)
	return ruo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ruo *RegistrationUpdateOne) SetNillableEntID(u *uuid.UUID) *RegistrationUpdateOne {
	if u != nil {
		ruo.SetEntID(*u)
	}
	return ruo
}

// SetAppID sets the "app_id" field.
func (ruo *RegistrationUpdateOne) SetAppID(u uuid.UUID) *RegistrationUpdateOne {
	ruo.mutation.SetAppID(u)
	return ruo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ruo *RegistrationUpdateOne) SetNillableAppID(u *uuid.UUID) *RegistrationUpdateOne {
	if u != nil {
		ruo.SetAppID(*u)
	}
	return ruo
}

// ClearAppID clears the value of the "app_id" field.
func (ruo *RegistrationUpdateOne) ClearAppID() *RegistrationUpdateOne {
	ruo.mutation.ClearAppID()
	return ruo
}

// SetInviterID sets the "inviter_id" field.
func (ruo *RegistrationUpdateOne) SetInviterID(u uuid.UUID) *RegistrationUpdateOne {
	ruo.mutation.SetInviterID(u)
	return ruo
}

// SetNillableInviterID sets the "inviter_id" field if the given value is not nil.
func (ruo *RegistrationUpdateOne) SetNillableInviterID(u *uuid.UUID) *RegistrationUpdateOne {
	if u != nil {
		ruo.SetInviterID(*u)
	}
	return ruo
}

// ClearInviterID clears the value of the "inviter_id" field.
func (ruo *RegistrationUpdateOne) ClearInviterID() *RegistrationUpdateOne {
	ruo.mutation.ClearInviterID()
	return ruo
}

// SetInviteeID sets the "invitee_id" field.
func (ruo *RegistrationUpdateOne) SetInviteeID(u uuid.UUID) *RegistrationUpdateOne {
	ruo.mutation.SetInviteeID(u)
	return ruo
}

// SetNillableInviteeID sets the "invitee_id" field if the given value is not nil.
func (ruo *RegistrationUpdateOne) SetNillableInviteeID(u *uuid.UUID) *RegistrationUpdateOne {
	if u != nil {
		ruo.SetInviteeID(*u)
	}
	return ruo
}

// ClearInviteeID clears the value of the "invitee_id" field.
func (ruo *RegistrationUpdateOne) ClearInviteeID() *RegistrationUpdateOne {
	ruo.mutation.ClearInviteeID()
	return ruo
}

// Mutation returns the RegistrationMutation object of the builder.
func (ruo *RegistrationUpdateOne) Mutation() *RegistrationMutation {
	return ruo.mutation
}

// Where appends a list predicates to the RegistrationUpdate builder.
func (ruo *RegistrationUpdateOne) Where(ps ...predicate.Registration) *RegistrationUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RegistrationUpdateOne) Select(field string, fields ...string) *RegistrationUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Registration entity.
func (ruo *RegistrationUpdateOne) Save(ctx context.Context) (*Registration, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RegistrationUpdateOne) SaveX(ctx context.Context) *Registration {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RegistrationUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RegistrationUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RegistrationUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := registration.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ruo *RegistrationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RegistrationUpdateOne {
	ruo.modifiers = append(ruo.modifiers, modifiers...)
	return ruo
}

func (ruo *RegistrationUpdateOne) sqlSave(ctx context.Context) (_node *Registration, err error) {
	_spec := sqlgraph.NewUpdateSpec(registration.Table, registration.Columns, sqlgraph.NewFieldSpec(registration.FieldID, field.TypeUint32))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Registration.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, registration.FieldID)
		for _, f := range fields {
			if !registration.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != registration.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(registration.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ruo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(registration.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(registration.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ruo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(registration.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ruo.mutation.DeletedAt(); ok {
		_spec.SetField(registration.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ruo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(registration.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ruo.mutation.EntID(); ok {
		_spec.SetField(registration.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := ruo.mutation.AppID(); ok {
		_spec.SetField(registration.FieldAppID, field.TypeUUID, value)
	}
	if ruo.mutation.AppIDCleared() {
		_spec.ClearField(registration.FieldAppID, field.TypeUUID)
	}
	if value, ok := ruo.mutation.InviterID(); ok {
		_spec.SetField(registration.FieldInviterID, field.TypeUUID, value)
	}
	if ruo.mutation.InviterIDCleared() {
		_spec.ClearField(registration.FieldInviterID, field.TypeUUID)
	}
	if value, ok := ruo.mutation.InviteeID(); ok {
		_spec.SetField(registration.FieldInviteeID, field.TypeUUID, value)
	}
	if ruo.mutation.InviteeIDCleared() {
		_spec.ClearField(registration.FieldInviteeID, field.TypeUUID)
	}
	_spec.AddModifiers(ruo.modifiers...)
	_node = &Registration{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{registration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/couponscope"
	"github.com/google/uuid"
)

// CouponScopeCreate is the builder for creating a CouponScope entity.
type CouponScopeCreate struct {
	config
	mutation *CouponScopeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (csc *CouponScopeCreate) SetCreatedAt(u uint32) *CouponScopeCreate {
	csc.mutation.SetCreatedAt(u)
	return csc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csc *CouponScopeCreate) SetNillableCreatedAt(u *uint32) *CouponScopeCreate {
	if u != nil {
		csc.SetCreatedAt(*u)
	}
	return csc
}

// SetUpdatedAt sets the "updated_at" field.
func (csc *CouponScopeCreate) SetUpdatedAt(u uint32) *CouponScopeCreate {
	csc.mutation.SetUpdatedAt(u)
	return csc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (csc *CouponScopeCreate) SetNillableUpdatedAt(u *uint32) *CouponScopeCreate {
	if u != nil {
		csc.SetUpdatedAt(*u)
	}
	return csc
}

// SetDeletedAt sets the "deleted_at" field.
func (csc *CouponScopeCreate) SetDeletedAt(u uint32) *CouponScopeCreate {
	csc.mutation.SetDeletedAt(u)
	return csc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (csc *CouponScopeCreate) SetNillableDeletedAt(u *uint32) *CouponScopeCreate {
	if u != nil {
		csc.SetDeletedAt(*u)
	}
	return csc
}

// SetEntID sets the "ent_id" field.
func (csc *CouponScopeCreate) SetEntID(u uuid.UUID) *CouponScopeCreate {
	csc.mutation.SetEntID(u)
	return csc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (csc *CouponScopeCreate) SetNillableEntID(u *uuid.UUID) *CouponScopeCreate {
	if u != nil {
		csc.SetEntID(*u)
	}
	return csc
}

// SetCouponID sets the "coupon_id" field.
func (csc *CouponScopeCreate) SetCouponID(u uuid.UUID) *CouponScopeCreate {
	csc.mutation.SetCouponID(u)
	return csc
}

// SetNillableCouponID sets the "coupon_id" field if the given value is not nil.
func (csc *CouponScopeCreate) SetNillableCouponID(u *uuid.UUID) *CouponScopeCreate {
	if u != nil {
		csc.SetCouponID(*u)
	}
	return csc
}

// SetGoodID sets the "good_id" field.
func (csc *CouponScopeCreate) SetGoodID(u uuid.UUID) *CouponScopeCreate {
	csc.mutation.SetGoodID(u)
	return csc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (csc *CouponScopeCreate) SetNillableGoodID(u *uuid.UUID) *CouponScopeCreate {
	if u != nil {
		csc.SetGoodID(*u)
	}
	return csc
}

// SetCouponScope sets the "coupon_scope" field.
func (csc *CouponScopeCreate) SetCouponScope(s string) *CouponScopeCreate {
	csc.mutation.SetCouponScope(s)
	return csc
}

// SetNillableCouponScope sets the "coupon_scope" field if the given value is not nil.
func (csc *CouponScopeCreate) SetNillableCouponScope(s *string) *CouponScopeCreate {
	if s != nil {
		csc.SetCouponScope(*s)
	}
	return csc
}

// SetID sets the "id" field.
func (csc *CouponScopeCreate) SetID(u uint32) *CouponScopeCreate {
	csc.mutation.SetID(u)
	return csc
}

// Mutation returns the CouponScopeMutation object of the builder.
func (csc *CouponScopeCreate) Mutation() *CouponScopeMutation {
	return csc.mutation
}

// Save creates the CouponScope in the database.
func (csc *CouponScopeCreate) Save(ctx context.Context) (*CouponScope, error) {
	csc.defaults()
	return withHooks(ctx, csc.sqlSave, csc.mutation, csc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csc *CouponScopeCreate) SaveX(ctx context.Context) *CouponScope {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *CouponScopeCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *CouponScopeCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csc *CouponScopeCreate) defaults() {
	if _, ok := csc.mutation.CreatedAt(); !ok {
		v := couponscope.DefaultCreatedAt()
		csc.mutation.SetCreatedAt(v)
	}
	if _, ok := csc.mutation.UpdatedAt(); !ok {
		v := couponscope.DefaultUpdatedAt()
		csc.mutation.SetUpdatedAt(v)
	}
	if _, ok := csc.mutation.DeletedAt(); !ok {
		v := couponscope.DefaultDeletedAt()
		csc.mutation.SetDeletedAt(v)
	}
	if _, ok := csc.mutation.EntID(); !ok {
		v := couponscope.DefaultEntID()
		csc.mutation.SetEntID(v)
	}
	if _, ok := csc.mutation.CouponID(); !ok {
		v := couponscope.DefaultCouponID()
		csc.mutation.SetCouponID(v)
	}
	if _, ok := csc.mutation.GoodID(); !ok {
		v := couponscope.DefaultGoodID()
		csc.mutation.SetGoodID(v)
	}
	if _, ok := csc.mutation.CouponScope(); !ok {
		v := couponscope.DefaultCouponScope
		csc.mutation.SetCouponScope(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csc *CouponScopeCreate) check() error {
	if _, ok := csc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "CouponScope.created_at"`)}
	}
	if _, ok := csc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "CouponScope.updated_at"`)}
	}
	if _, ok := csc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "CouponScope.deleted_at"`)}
	}
	if _, ok := csc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "CouponScope.ent_id"`)}
	}
	return nil
}

func (csc *CouponScopeCreate) sqlSave(ctx context.Context) (*CouponScope, error) {
	if err := csc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	csc.mutation.id = &_node.ID
	csc.mutation.done = true
	return _node, nil
}

func (csc *CouponScopeCreate) createSpec() (*CouponScope, *sqlgraph.CreateSpec) {
	var (
		_node = &CouponScope{config: csc.config}
		_spec = sqlgraph.NewCreateSpec(couponscope.Table, sqlgraph.NewFieldSpec(couponscope.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = csc.conflict
	if id, ok := csc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := csc.mutation.CreatedAt(); ok {
		_spec.SetField(couponscope.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := csc.mutation.UpdatedAt(); ok {
		_spec.SetField(couponscope.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := csc.mutation.DeletedAt(); ok {
		_spec.SetField(couponscope.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := csc.mutation.EntID(); ok {
		_spec.SetField(couponscope.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := csc.mutation.CouponID(); ok {
		_spec.SetField(couponscope.FieldCouponID, field.TypeUUID, value)
		_node.CouponID = value
	}
	if value, ok := csc.mutation.GoodID(); ok {
		_spec.SetField(couponscope.FieldGoodID, field.TypeUUID, value)
		_node.GoodID = value
	}
	if value, ok := csc.mutation.CouponScope(); ok {
		_spec.SetField(couponscope.FieldCouponScope, field.TypeString, value)
		_node.CouponScope = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CouponScope.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CouponScopeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (csc *CouponScopeCreate) OnConflict(opts ...sql.ConflictOption) *CouponScopeUpsertOne {
	csc.conflict = opts
	return &CouponScopeUpsertOne{
		create: csc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CouponScope.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (csc *CouponScopeCreate) OnConflictColumns(columns ...string) *CouponScopeUpsertOne {
	csc.conflict = append(csc.conflict, sql.ConflictColumns(columns...))
	return &CouponScopeUpsertOne{
		create: csc,
	}
}

type (
	// CouponScopeUpsertOne is the builder for "upsert"-ing
	//  one CouponScope node.
	CouponScopeUpsertOne struct {
		create *CouponScopeCreate
	}

	// CouponScopeUpsert is the "OnConflict" setter.
	CouponScopeUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *CouponScopeUpsert) SetCreatedAt(v uint32) *CouponScopeUpsert {
	u.Set(couponscope.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CouponScopeUpsert) UpdateCreatedAt() *CouponScopeUpsert {
	u.SetExcluded(couponscope.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CouponScopeUpsert) AddCreatedAt(v uint32) *CouponScopeUpsert {
	u.Add(couponscope.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponScopeUpsert) SetUpdatedAt(v uint32) *CouponScopeUpsert {
	u.Set(couponscope.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponScopeUpsert) UpdateUpdatedAt() *CouponScopeUpsert {
	u.SetExcluded(couponscope.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CouponScopeUpsert) AddUpdatedAt(v uint32) *CouponScopeUpsert {
	u.Add(couponscope.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CouponScopeUpsert) SetDeletedAt(v uint32) *CouponScopeUpsert {
	u.Set(couponscope.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CouponScopeUpsert) UpdateDeletedAt() *CouponScopeUpsert {
	u.SetExcluded(couponscope.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CouponScopeUpsert) AddDeletedAt(v uint32) *CouponScopeUpsert {
	u.Add(couponscope.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *CouponScopeUpsert) SetEntID(v uuid.UUID) *CouponScopeUpsert {
	u.Set(couponscope.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CouponScopeUpsert) UpdateEntID() *CouponScopeUpsert {
	u.SetExcluded(couponscope.FieldEntID)
	return u
}

// SetCouponID sets the "coupon_id" field.
func (u *CouponScopeUpsert) SetCouponID(v uuid.UUID) *CouponScopeUpsert {
	u.Set(couponscope.FieldCouponID, v)
	return u
}

// UpdateCouponID sets the "coupon_id" field to the value that was provided on create.
func (u *CouponScopeUpsert) UpdateCouponID() *CouponScopeUpsert {
	u.SetExcluded(couponscope.FieldCouponID)
	return u
}

// ClearCouponID clears the value of the "coupon_id" field.
func (u *CouponScopeUpsert) ClearCouponID() *CouponScopeUpsert {
	u.SetNull(couponscope.FieldCouponID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *CouponScopeUpsert) SetGoodID(v uuid.UUID) *CouponScopeUpsert {
	u.Set(couponscope.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *CouponScopeUpsert) UpdateGoodID() *CouponScopeUpsert {
	u.SetExcluded(couponscope.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *CouponScopeUpsert) ClearGoodID() *CouponScopeUpsert {
	u.SetNull(couponscope.FieldGoodID)
	return u
}

// SetCouponScope sets the "coupon_scope" field.
func (u *CouponScopeUpsert) SetCouponScope(v string) *CouponScopeUpsert {
	u.Set(couponscope.FieldCouponScope, v)
	return u
}

// UpdateCouponScope sets the "coupon_scope" field to the value that was provided on create.
func (u *CouponScopeUpsert) UpdateCouponScope() *CouponScopeUpsert {
	u.SetExcluded(couponscope.FieldCouponScope)
	return u
}

// ClearCouponScope clears the value of the "coupon_scope" field.
func (u *CouponScopeUpsert) ClearCouponScope() *CouponScopeUpsert {
	u.SetNull(couponscope.FieldCouponScope)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CouponScope.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(couponscope.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CouponScopeUpsertOne) UpdateNewValues() *CouponScopeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(couponscope.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CouponScope.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CouponScopeUpsertOne) Ignore() *CouponScopeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CouponScopeUpsertOne) DoNothing() *CouponScopeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CouponScopeCreate.OnConflict
// documentation for more info.
func (u *CouponScopeUpsertOne) Update(set func(*CouponScopeUpsert)) *CouponScopeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CouponScopeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CouponScopeUpsertOne) SetCreatedAt(v uint32) *CouponScopeUpsertOne {
	return u.Update(func(s *CouponScopeUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CouponScopeUpsertOne) AddCreatedAt(v uint32) *CouponScopeUpsertOne {
	return u.Update(func(s *CouponScopeUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CouponScopeUpsertOne) UpdateCreatedAt() *CouponScopeUpsertOne {
	return u.Update(func(s *CouponScopeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponScopeUpsertOne) SetUpdatedAt(v uint32) *CouponScopeUpsertOne {
	return u.Update(func(s *CouponScopeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CouponScopeUpsertOne) AddUpdatedAt(v uint32) *CouponScopeUpsertOne {
	return u.Update(func(s *CouponScopeUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponScopeUpsertOne) UpdateUpdatedAt() *CouponScopeUpsertOne {
	return u.Update(func(s *CouponScopeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CouponScopeUpsertOne) SetDeletedAt(v uint32) *CouponScopeUpsertOne {
	return u.Update(func(s *CouponScopeUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CouponScopeUpsertOne) AddDeletedAt(v uint32) *CouponScopeUpsertOne {
	return u.Update(func(s *CouponScopeUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CouponScopeUpsertOne) UpdateDeletedAt() *CouponScopeUpsertOne {
	return u.Update(func(s *CouponScopeUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *CouponScopeUpsertOne) SetEntID(v uuid.UUID) *CouponScopeUpsertOne {
	return u.Update(func(s *CouponScopeUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CouponScopeUpsertOne) UpdateEntID() *CouponScopeUpsertOne {
	return u.Update(func(s *CouponScopeUpsert) {
		s.UpdateEntID()
	})
}

// SetCouponID sets the "coupon_id" field.
func (u *CouponScopeUpsertOne) SetCouponID(v uuid.UUID) *CouponScopeUpsertOne {
	return u.Update(func(s *CouponScopeUpsert) {
		s.SetCouponID(v)
	})
}

// UpdateCouponID sets the "coupon_id" field to the value that was provided on create.
func (u *CouponScopeUpsertOne) UpdateCouponID() *CouponScopeUpsertOne {
	return u.Update(func(s *CouponScopeUpsert) {
		s.UpdateCouponID()
	})
}

// ClearCouponID clears the value of the "coupon_id" field.
func (u *CouponScopeUpsertOne) ClearCouponID() *CouponScopeUpsertOne {
	return u.Update(func(s *CouponScopeUpsert) {
		s.ClearCouponID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *CouponScopeUpsertOne) SetGoodID(v uuid.UUID) *CouponScopeUpsertOne {
	return u.Update(func(s *CouponScopeUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *CouponScopeUpsertOne) UpdateGoodID() *CouponScopeUpsertOne {
	return u.Update(func(s *CouponScopeUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *CouponScopeUpsertOne) ClearGoodID() *CouponScopeUpsertOne {
	return u.Update(func(s *CouponScopeUpsert) {
		s.ClearGoodID()
	})
}

// SetCouponScope sets the "coupon_scope" field.
func (u *CouponScopeUpsertOne) SetCouponScope(v string) *CouponScopeUpsertOne {
	return u.Update(func(s *CouponScopeUpsert) {
		s.SetCouponScope(v)
	})
}

// UpdateCouponScope sets the "coupon_scope" field to the value that was provided on create.
func (u *CouponScopeUpsertOne) UpdateCouponScope() *CouponScopeUpsertOne {
	return u.Update(func(s *CouponScopeUpsert) {
		s.UpdateCouponScope()
	})
}

// ClearCouponScope clears the value of the "coupon_scope" field.
func (u *CouponScopeUpsertOne) ClearCouponScope() *CouponScopeUpsertOne {
	return u.Update(func(s *CouponScopeUpsert) {
		s.ClearCouponScope()
	})
}

// Exec executes the query.
func (u *CouponScopeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CouponScopeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CouponScopeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CouponScopeUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CouponScopeUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CouponScopeCreateBulk is the builder for creating many CouponScope entities in bulk.
type CouponScopeCreateBulk struct {
	config
	err      error
	builders []*CouponScopeCreate
	conflict []sql.ConflictOption
}

// Save creates the CouponScope entities in the database.
func (cscb *CouponScopeCreateBulk) Save(ctx context.Context) ([]*CouponScope, error) {
	if cscb.err != nil {
		return nil, cscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*CouponScope, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CouponScopeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *CouponScopeCreateBulk) SaveX(ctx context.Context) []*CouponScope {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscb *CouponScopeCreateBulk) Exec(ctx context.Context) error {
	_, err := cscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscb *CouponScopeCreateBulk) ExecX(ctx context.Context) {
	if err := cscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CouponScope.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CouponScopeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cscb *CouponScopeCreateBulk) OnConflict(opts ...sql.ConflictOption) *CouponScopeUpsertBulk {
	cscb.conflict = opts
	return &CouponScopeUpsertBulk{
		create: cscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CouponScope.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cscb *CouponScopeCreateBulk) OnConflictColumns(columns ...string) *CouponScopeUpsertBulk {
	cscb.conflict = append(cscb.conflict, sql.ConflictColumns(columns...))
	return &CouponScopeUpsertBulk{
		create: cscb,
	}
}

// CouponScopeUpsertBulk is the builder for "upsert"-ing
// a bulk of CouponScope nodes.
type CouponScopeUpsertBulk struct {
	create *CouponScopeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CouponScope.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(couponscope.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CouponScopeUpsertBulk) UpdateNewValues() *CouponScopeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(couponscope.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CouponScope.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CouponScopeUpsertBulk) Ignore() *CouponScopeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CouponScopeUpsertBulk) DoNothing() *CouponScopeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CouponScopeCreateBulk.OnConflict
// documentation for more info.
func (u *CouponScopeUpsertBulk) Update(set func(*CouponScopeUpsert)) *CouponScopeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CouponScopeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CouponScopeUpsertBulk) SetCreatedAt(v uint32) *CouponScopeUpsertBulk {
	return u.Update(func(s *CouponScopeUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CouponScopeUpsertBulk) AddCreatedAt(v uint32) *CouponScopeUpsertBulk {
	return u.Update(func(s *CouponScopeUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CouponScopeUpsertBulk) UpdateCreatedAt() *CouponScopeUpsertBulk {
	return u.Update(func(s *CouponScopeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponScopeUpsertBulk) SetUpdatedAt(v uint32) *CouponScopeUpsertBulk {
	return u.Update(func(s *CouponScopeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CouponScopeUpsertBulk) AddUpdatedAt(v uint32) *CouponScopeUpsertBulk {
	return u.Update(func(s *CouponScopeUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponScopeUpsertBulk) UpdateUpdatedAt() *CouponScopeUpsertBulk {
	return u.Update(func(s *CouponScopeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CouponScopeUpsertBulk) SetDeletedAt(v uint32) *CouponScopeUpsertBulk {
	return u.Update(func(s *CouponScopeUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CouponScopeUpsertBulk) AddDeletedAt(v uint32) *CouponScopeUpsertBulk {
	return u.Update(func(s *CouponScopeUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CouponScopeUpsertBulk) UpdateDeletedAt() *CouponScopeUpsertBulk {
	return u.Update(func(s *CouponScopeUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *CouponScopeUpsertBulk) SetEntID(v uuid.UUID) *CouponScopeUpsertBulk {
	return u.Update(func(s *CouponScopeUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CouponScopeUpsertBulk) UpdateEntID() *CouponScopeUpsertBulk {
	return u.Update(func(s *CouponScopeUpsert) {
		s.UpdateEntID()
	})
}

// SetCouponID sets the "coupon_id" field.
func (u *CouponScopeUpsertBulk) SetCouponID(v uuid.UUID) *CouponScopeUpsertBulk {
	return u.Update(func(s *CouponScopeUpsert) {
		s.SetCouponID(v)
	})
}

// UpdateCouponID sets the "coupon_id" field to the value that was provided on create.
func (u *CouponScopeUpsertBulk) UpdateCouponID() *CouponScopeUpsertBulk {
	return u.Update(func(s *CouponScopeUpsert) {
		s.UpdateCouponID()
	})
}

// ClearCouponID clears the value of the "coupon_id" field.
func (u *CouponScopeUpsertBulk) ClearCouponID() *CouponScopeUpsertBulk {
	return u.Update(func(s *CouponScopeUpsert) {
		s.ClearCouponID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *CouponScopeUpsertBulk) SetGoodID(v uuid.UUID) *CouponScopeUpsertBulk {
	return u.Update(func(s *CouponScopeUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *CouponScopeUpsertBulk) UpdateGoodID() *CouponScopeUpsertBulk {
	return u.Update(func(s *CouponScopeUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *CouponScopeUpsertBulk) ClearGoodID() *CouponScopeUpsertBulk {
	return u.Update(func(s *CouponScopeUpsert) {
		s.ClearGoodID()
	})
}

// SetCouponScope sets the "coupon_scope" field.
func (u *CouponScopeUpsertBulk) SetCouponScope(v string) *CouponScopeUpsertBulk {
	return u.Update(func(s *CouponScopeUpsert) {
		s.SetCouponScope(v)
	})
}

// UpdateCouponScope sets the "coupon_scope" field to the value that was provided on create.
func (u *CouponScopeUpsertBulk) UpdateCouponScope() *CouponScopeUpsertBulk {
	return u.Update(func(s *CouponScopeUpsert) {
		s.UpdateCouponScope()
	})
}

// ClearCouponScope clears the value of the "coupon_scope" field.
func (u *CouponScopeUpsertBulk) ClearCouponScope() *CouponScopeUpsertBulk {
	return u.Update(func(s *CouponScopeUpsert) {
		s.ClearCouponScope()
	})
}

// Exec executes the query.
func (u *CouponScopeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the CouponScopeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CouponScopeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CouponScopeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

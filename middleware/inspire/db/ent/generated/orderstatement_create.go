// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/orderstatement"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// OrderStatementCreate is the builder for creating a OrderStatement entity.
type OrderStatementCreate struct {
	config
	mutation *OrderStatementMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (osc *OrderStatementCreate) SetCreatedAt(u uint32) *OrderStatementCreate {
	osc.mutation.SetCreatedAt(u)
	return osc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (osc *OrderStatementCreate) SetNillableCreatedAt(u *uint32) *OrderStatementCreate {
	if u != nil {
		osc.SetCreatedAt(*u)
	}
	return osc
}

// SetUpdatedAt sets the "updated_at" field.
func (osc *OrderStatementCreate) SetUpdatedAt(u uint32) *OrderStatementCreate {
	osc.mutation.SetUpdatedAt(u)
	return osc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (osc *OrderStatementCreate) SetNillableUpdatedAt(u *uint32) *OrderStatementCreate {
	if u != nil {
		osc.SetUpdatedAt(*u)
	}
	return osc
}

// SetDeletedAt sets the "deleted_at" field.
func (osc *OrderStatementCreate) SetDeletedAt(u uint32) *OrderStatementCreate {
	osc.mutation.SetDeletedAt(u)
	return osc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (osc *OrderStatementCreate) SetNillableDeletedAt(u *uint32) *OrderStatementCreate {
	if u != nil {
		osc.SetDeletedAt(*u)
	}
	return osc
}

// SetEntID sets the "ent_id" field.
func (osc *OrderStatementCreate) SetEntID(u uuid.UUID) *OrderStatementCreate {
	osc.mutation.SetEntID(u)
	return osc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (osc *OrderStatementCreate) SetNillableEntID(u *uuid.UUID) *OrderStatementCreate {
	if u != nil {
		osc.SetEntID(*u)
	}
	return osc
}

// SetAppID sets the "app_id" field.
func (osc *OrderStatementCreate) SetAppID(u uuid.UUID) *OrderStatementCreate {
	osc.mutation.SetAppID(u)
	return osc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (osc *OrderStatementCreate) SetNillableAppID(u *uuid.UUID) *OrderStatementCreate {
	if u != nil {
		osc.SetAppID(*u)
	}
	return osc
}

// SetUserID sets the "user_id" field.
func (osc *OrderStatementCreate) SetUserID(u uuid.UUID) *OrderStatementCreate {
	osc.mutation.SetUserID(u)
	return osc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (osc *OrderStatementCreate) SetNillableUserID(u *uuid.UUID) *OrderStatementCreate {
	if u != nil {
		osc.SetUserID(*u)
	}
	return osc
}

// SetGoodID sets the "good_id" field.
func (osc *OrderStatementCreate) SetGoodID(u uuid.UUID) *OrderStatementCreate {
	osc.mutation.SetGoodID(u)
	return osc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (osc *OrderStatementCreate) SetNillableGoodID(u *uuid.UUID) *OrderStatementCreate {
	if u != nil {
		osc.SetGoodID(*u)
	}
	return osc
}

// SetAppGoodID sets the "app_good_id" field.
func (osc *OrderStatementCreate) SetAppGoodID(u uuid.UUID) *OrderStatementCreate {
	osc.mutation.SetAppGoodID(u)
	return osc
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (osc *OrderStatementCreate) SetNillableAppGoodID(u *uuid.UUID) *OrderStatementCreate {
	if u != nil {
		osc.SetAppGoodID(*u)
	}
	return osc
}

// SetOrderID sets the "order_id" field.
func (osc *OrderStatementCreate) SetOrderID(u uuid.UUID) *OrderStatementCreate {
	osc.mutation.SetOrderID(u)
	return osc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (osc *OrderStatementCreate) SetNillableOrderID(u *uuid.UUID) *OrderStatementCreate {
	if u != nil {
		osc.SetOrderID(*u)
	}
	return osc
}

// SetDirectContributorID sets the "direct_contributor_id" field.
func (osc *OrderStatementCreate) SetDirectContributorID(u uuid.UUID) *OrderStatementCreate {
	osc.mutation.SetDirectContributorID(u)
	return osc
}

// SetNillableDirectContributorID sets the "direct_contributor_id" field if the given value is not nil.
func (osc *OrderStatementCreate) SetNillableDirectContributorID(u *uuid.UUID) *OrderStatementCreate {
	if u != nil {
		osc.SetDirectContributorID(*u)
	}
	return osc
}

// SetOrderUserID sets the "order_user_id" field.
func (osc *OrderStatementCreate) SetOrderUserID(u uuid.UUID) *OrderStatementCreate {
	osc.mutation.SetOrderUserID(u)
	return osc
}

// SetNillableOrderUserID sets the "order_user_id" field if the given value is not nil.
func (osc *OrderStatementCreate) SetNillableOrderUserID(u *uuid.UUID) *OrderStatementCreate {
	if u != nil {
		osc.SetOrderUserID(*u)
	}
	return osc
}

// SetGoodCoinTypeID sets the "good_coin_type_id" field.
func (osc *OrderStatementCreate) SetGoodCoinTypeID(u uuid.UUID) *OrderStatementCreate {
	osc.mutation.SetGoodCoinTypeID(u)
	return osc
}

// SetNillableGoodCoinTypeID sets the "good_coin_type_id" field if the given value is not nil.
func (osc *OrderStatementCreate) SetNillableGoodCoinTypeID(u *uuid.UUID) *OrderStatementCreate {
	if u != nil {
		osc.SetGoodCoinTypeID(*u)
	}
	return osc
}

// SetUnits sets the "units" field.
func (osc *OrderStatementCreate) SetUnits(d decimal.Decimal) *OrderStatementCreate {
	osc.mutation.SetUnits(d)
	return osc
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (osc *OrderStatementCreate) SetNillableUnits(d *decimal.Decimal) *OrderStatementCreate {
	if d != nil {
		osc.SetUnits(*d)
	}
	return osc
}

// SetGoodValueUsd sets the "good_value_usd" field.
func (osc *OrderStatementCreate) SetGoodValueUsd(d decimal.Decimal) *OrderStatementCreate {
	osc.mutation.SetGoodValueUsd(d)
	return osc
}

// SetNillableGoodValueUsd sets the "good_value_usd" field if the given value is not nil.
func (osc *OrderStatementCreate) SetNillableGoodValueUsd(d *decimal.Decimal) *OrderStatementCreate {
	if d != nil {
		osc.SetGoodValueUsd(*d)
	}
	return osc
}

// SetPaymentAmountUsd sets the "payment_amount_usd" field.
func (osc *OrderStatementCreate) SetPaymentAmountUsd(d decimal.Decimal) *OrderStatementCreate {
	osc.mutation.SetPaymentAmountUsd(d)
	return osc
}

// SetNillablePaymentAmountUsd sets the "payment_amount_usd" field if the given value is not nil.
func (osc *OrderStatementCreate) SetNillablePaymentAmountUsd(d *decimal.Decimal) *OrderStatementCreate {
	if d != nil {
		osc.SetPaymentAmountUsd(*d)
	}
	return osc
}

// SetCommissionAmountUsd sets the "commission_amount_usd" field.
func (osc *OrderStatementCreate) SetCommissionAmountUsd(d decimal.Decimal) *OrderStatementCreate {
	osc.mutation.SetCommissionAmountUsd(d)
	return osc
}

// SetNillableCommissionAmountUsd sets the "commission_amount_usd" field if the given value is not nil.
func (osc *OrderStatementCreate) SetNillableCommissionAmountUsd(d *decimal.Decimal) *OrderStatementCreate {
	if d != nil {
		osc.SetCommissionAmountUsd(*d)
	}
	return osc
}

// SetAppConfigID sets the "app_config_id" field.
func (osc *OrderStatementCreate) SetAppConfigID(u uuid.UUID) *OrderStatementCreate {
	osc.mutation.SetAppConfigID(u)
	return osc
}

// SetNillableAppConfigID sets the "app_config_id" field if the given value is not nil.
func (osc *OrderStatementCreate) SetNillableAppConfigID(u *uuid.UUID) *OrderStatementCreate {
	if u != nil {
		osc.SetAppConfigID(*u)
	}
	return osc
}

// SetCommissionConfigID sets the "commission_config_id" field.
func (osc *OrderStatementCreate) SetCommissionConfigID(u uuid.UUID) *OrderStatementCreate {
	osc.mutation.SetCommissionConfigID(u)
	return osc
}

// SetNillableCommissionConfigID sets the "commission_config_id" field if the given value is not nil.
func (osc *OrderStatementCreate) SetNillableCommissionConfigID(u *uuid.UUID) *OrderStatementCreate {
	if u != nil {
		osc.SetCommissionConfigID(*u)
	}
	return osc
}

// SetCommissionConfigType sets the "commission_config_type" field.
func (osc *OrderStatementCreate) SetCommissionConfigType(s string) *OrderStatementCreate {
	osc.mutation.SetCommissionConfigType(s)
	return osc
}

// SetNillableCommissionConfigType sets the "commission_config_type" field if the given value is not nil.
func (osc *OrderStatementCreate) SetNillableCommissionConfigType(s *string) *OrderStatementCreate {
	if s != nil {
		osc.SetCommissionConfigType(*s)
	}
	return osc
}

// SetID sets the "id" field.
func (osc *OrderStatementCreate) SetID(u uint32) *OrderStatementCreate {
	osc.mutation.SetID(u)
	return osc
}

// Mutation returns the OrderStatementMutation object of the builder.
func (osc *OrderStatementCreate) Mutation() *OrderStatementMutation {
	return osc.mutation
}

// Save creates the OrderStatement in the database.
func (osc *OrderStatementCreate) Save(ctx context.Context) (*OrderStatement, error) {
	osc.defaults()
	return withHooks(ctx, osc.sqlSave, osc.mutation, osc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (osc *OrderStatementCreate) SaveX(ctx context.Context) *OrderStatement {
	v, err := osc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (osc *OrderStatementCreate) Exec(ctx context.Context) error {
	_, err := osc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osc *OrderStatementCreate) ExecX(ctx context.Context) {
	if err := osc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osc *OrderStatementCreate) defaults() {
	if _, ok := osc.mutation.CreatedAt(); !ok {
		v := orderstatement.DefaultCreatedAt()
		osc.mutation.SetCreatedAt(v)
	}
	if _, ok := osc.mutation.UpdatedAt(); !ok {
		v := orderstatement.DefaultUpdatedAt()
		osc.mutation.SetUpdatedAt(v)
	}
	if _, ok := osc.mutation.DeletedAt(); !ok {
		v := orderstatement.DefaultDeletedAt()
		osc.mutation.SetDeletedAt(v)
	}
	if _, ok := osc.mutation.EntID(); !ok {
		v := orderstatement.DefaultEntID()
		osc.mutation.SetEntID(v)
	}
	if _, ok := osc.mutation.AppID(); !ok {
		v := orderstatement.DefaultAppID()
		osc.mutation.SetAppID(v)
	}
	if _, ok := osc.mutation.UserID(); !ok {
		v := orderstatement.DefaultUserID()
		osc.mutation.SetUserID(v)
	}
	if _, ok := osc.mutation.GoodID(); !ok {
		v := orderstatement.DefaultGoodID()
		osc.mutation.SetGoodID(v)
	}
	if _, ok := osc.mutation.AppGoodID(); !ok {
		v := orderstatement.DefaultAppGoodID()
		osc.mutation.SetAppGoodID(v)
	}
	if _, ok := osc.mutation.OrderID(); !ok {
		v := orderstatement.DefaultOrderID()
		osc.mutation.SetOrderID(v)
	}
	if _, ok := osc.mutation.DirectContributorID(); !ok {
		v := orderstatement.DefaultDirectContributorID()
		osc.mutation.SetDirectContributorID(v)
	}
	if _, ok := osc.mutation.OrderUserID(); !ok {
		v := orderstatement.DefaultOrderUserID()
		osc.mutation.SetOrderUserID(v)
	}
	if _, ok := osc.mutation.GoodCoinTypeID(); !ok {
		v := orderstatement.DefaultGoodCoinTypeID()
		osc.mutation.SetGoodCoinTypeID(v)
	}
	if _, ok := osc.mutation.Units(); !ok {
		v := orderstatement.DefaultUnits
		osc.mutation.SetUnits(v)
	}
	if _, ok := osc.mutation.GoodValueUsd(); !ok {
		v := orderstatement.DefaultGoodValueUsd
		osc.mutation.SetGoodValueUsd(v)
	}
	if _, ok := osc.mutation.PaymentAmountUsd(); !ok {
		v := orderstatement.DefaultPaymentAmountUsd
		osc.mutation.SetPaymentAmountUsd(v)
	}
	if _, ok := osc.mutation.CommissionAmountUsd(); !ok {
		v := orderstatement.DefaultCommissionAmountUsd
		osc.mutation.SetCommissionAmountUsd(v)
	}
	if _, ok := osc.mutation.AppConfigID(); !ok {
		v := orderstatement.DefaultAppConfigID()
		osc.mutation.SetAppConfigID(v)
	}
	if _, ok := osc.mutation.CommissionConfigID(); !ok {
		v := orderstatement.DefaultCommissionConfigID()
		osc.mutation.SetCommissionConfigID(v)
	}
	if _, ok := osc.mutation.CommissionConfigType(); !ok {
		v := orderstatement.DefaultCommissionConfigType
		osc.mutation.SetCommissionConfigType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osc *OrderStatementCreate) check() error {
	if _, ok := osc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "OrderStatement.created_at"`)}
	}
	if _, ok := osc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "OrderStatement.updated_at"`)}
	}
	if _, ok := osc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "OrderStatement.deleted_at"`)}
	}
	if _, ok := osc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "OrderStatement.ent_id"`)}
	}
	return nil
}

func (osc *OrderStatementCreate) sqlSave(ctx context.Context) (*OrderStatement, error) {
	if err := osc.check(); err != nil {
		return nil, err
	}
	_node, _spec := osc.createSpec()
	if err := sqlgraph.CreateNode(ctx, osc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	osc.mutation.id = &_node.ID
	osc.mutation.done = true
	return _node, nil
}

func (osc *OrderStatementCreate) createSpec() (*OrderStatement, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderStatement{config: osc.config}
		_spec = sqlgraph.NewCreateSpec(orderstatement.Table, sqlgraph.NewFieldSpec(orderstatement.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = osc.conflict
	if id, ok := osc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := osc.mutation.CreatedAt(); ok {
		_spec.SetField(orderstatement.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := osc.mutation.UpdatedAt(); ok {
		_spec.SetField(orderstatement.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := osc.mutation.DeletedAt(); ok {
		_spec.SetField(orderstatement.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := osc.mutation.EntID(); ok {
		_spec.SetField(orderstatement.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := osc.mutation.AppID(); ok {
		_spec.SetField(orderstatement.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := osc.mutation.UserID(); ok {
		_spec.SetField(orderstatement.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := osc.mutation.GoodID(); ok {
		_spec.SetField(orderstatement.FieldGoodID, field.TypeUUID, value)
		_node.GoodID = value
	}
	if value, ok := osc.mutation.AppGoodID(); ok {
		_spec.SetField(orderstatement.FieldAppGoodID, field.TypeUUID, value)
		_node.AppGoodID = value
	}
	if value, ok := osc.mutation.OrderID(); ok {
		_spec.SetField(orderstatement.FieldOrderID, field.TypeUUID, value)
		_node.OrderID = value
	}
	if value, ok := osc.mutation.DirectContributorID(); ok {
		_spec.SetField(orderstatement.FieldDirectContributorID, field.TypeUUID, value)
		_node.DirectContributorID = value
	}
	if value, ok := osc.mutation.OrderUserID(); ok {
		_spec.SetField(orderstatement.FieldOrderUserID, field.TypeUUID, value)
		_node.OrderUserID = value
	}
	if value, ok := osc.mutation.GoodCoinTypeID(); ok {
		_spec.SetField(orderstatement.FieldGoodCoinTypeID, field.TypeUUID, value)
		_node.GoodCoinTypeID = value
	}
	if value, ok := osc.mutation.Units(); ok {
		_spec.SetField(orderstatement.FieldUnits, field.TypeOther, value)
		_node.Units = value
	}
	if value, ok := osc.mutation.GoodValueUsd(); ok {
		_spec.SetField(orderstatement.FieldGoodValueUsd, field.TypeOther, value)
		_node.GoodValueUsd = value
	}
	if value, ok := osc.mutation.PaymentAmountUsd(); ok {
		_spec.SetField(orderstatement.FieldPaymentAmountUsd, field.TypeOther, value)
		_node.PaymentAmountUsd = value
	}
	if value, ok := osc.mutation.CommissionAmountUsd(); ok {
		_spec.SetField(orderstatement.FieldCommissionAmountUsd, field.TypeOther, value)
		_node.CommissionAmountUsd = value
	}
	if value, ok := osc.mutation.AppConfigID(); ok {
		_spec.SetField(orderstatement.FieldAppConfigID, field.TypeUUID, value)
		_node.AppConfigID = value
	}
	if value, ok := osc.mutation.CommissionConfigID(); ok {
		_spec.SetField(orderstatement.FieldCommissionConfigID, field.TypeUUID, value)
		_node.CommissionConfigID = value
	}
	if value, ok := osc.mutation.CommissionConfigType(); ok {
		_spec.SetField(orderstatement.FieldCommissionConfigType, field.TypeString, value)
		_node.CommissionConfigType = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderStatement.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderStatementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (osc *OrderStatementCreate) OnConflict(opts ...sql.ConflictOption) *OrderStatementUpsertOne {
	osc.conflict = opts
	return &OrderStatementUpsertOne{
		create: osc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderStatement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (osc *OrderStatementCreate) OnConflictColumns(columns ...string) *OrderStatementUpsertOne {
	osc.conflict = append(osc.conflict, sql.ConflictColumns(columns...))
	return &OrderStatementUpsertOne{
		create: osc,
	}
}

type (
	// OrderStatementUpsertOne is the builder for "upsert"-ing
	//  one OrderStatement node.
	OrderStatementUpsertOne struct {
		create *OrderStatementCreate
	}

	// OrderStatementUpsert is the "OnConflict" setter.
	OrderStatementUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *OrderStatementUpsert) SetCreatedAt(v uint32) *OrderStatementUpsert {
	u.Set(orderstatement.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderStatementUpsert) UpdateCreatedAt() *OrderStatementUpsert {
	u.SetExcluded(orderstatement.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderStatementUpsert) AddCreatedAt(v uint32) *OrderStatementUpsert {
	u.Add(orderstatement.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderStatementUpsert) SetUpdatedAt(v uint32) *OrderStatementUpsert {
	u.Set(orderstatement.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderStatementUpsert) UpdateUpdatedAt() *OrderStatementUpsert {
	u.SetExcluded(orderstatement.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderStatementUpsert) AddUpdatedAt(v uint32) *OrderStatementUpsert {
	u.Add(orderstatement.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderStatementUpsert) SetDeletedAt(v uint32) *OrderStatementUpsert {
	u.Set(orderstatement.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderStatementUpsert) UpdateDeletedAt() *OrderStatementUpsert {
	u.SetExcluded(orderstatement.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderStatementUpsert) AddDeletedAt(v uint32) *OrderStatementUpsert {
	u.Add(orderstatement.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *OrderStatementUpsert) SetEntID(v uuid.UUID) *OrderStatementUpsert {
	u.Set(orderstatement.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderStatementUpsert) UpdateEntID() *OrderStatementUpsert {
	u.SetExcluded(orderstatement.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *OrderStatementUpsert) SetAppID(v uuid.UUID) *OrderStatementUpsert {
	u.Set(orderstatement.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *OrderStatementUpsert) UpdateAppID() *OrderStatementUpsert {
	u.SetExcluded(orderstatement.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *OrderStatementUpsert) ClearAppID() *OrderStatementUpsert {
	u.SetNull(orderstatement.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *OrderStatementUpsert) SetUserID(v uuid.UUID) *OrderStatementUpsert {
	u.Set(orderstatement.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrderStatementUpsert) UpdateUserID() *OrderStatementUpsert {
	u.SetExcluded(orderstatement.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *OrderStatementUpsert) ClearUserID() *OrderStatementUpsert {
	u.SetNull(orderstatement.FieldUserID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *OrderStatementUpsert) SetGoodID(v uuid.UUID) *OrderStatementUpsert {
	u.Set(orderstatement.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *OrderStatementUpsert) UpdateGoodID() *OrderStatementUpsert {
	u.SetExcluded(orderstatement.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *OrderStatementUpsert) ClearGoodID() *OrderStatementUpsert {
	u.SetNull(orderstatement.FieldGoodID)
	return u
}

// SetAppGoodID sets the "app_good_id" field.
func (u *OrderStatementUpsert) SetAppGoodID(v uuid.UUID) *OrderStatementUpsert {
	u.Set(orderstatement.FieldAppGoodID, v)
	return u
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *OrderStatementUpsert) UpdateAppGoodID() *OrderStatementUpsert {
	u.SetExcluded(orderstatement.FieldAppGoodID)
	return u
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *OrderStatementUpsert) ClearAppGoodID() *OrderStatementUpsert {
	u.SetNull(orderstatement.FieldAppGoodID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *OrderStatementUpsert) SetOrderID(v uuid.UUID) *OrderStatementUpsert {
	u.Set(orderstatement.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderStatementUpsert) UpdateOrderID() *OrderStatementUpsert {
	u.SetExcluded(orderstatement.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderStatementUpsert) ClearOrderID() *OrderStatementUpsert {
	u.SetNull(orderstatement.FieldOrderID)
	return u
}

// SetDirectContributorID sets the "direct_contributor_id" field.
func (u *OrderStatementUpsert) SetDirectContributorID(v uuid.UUID) *OrderStatementUpsert {
	u.Set(orderstatement.FieldDirectContributorID, v)
	return u
}

// UpdateDirectContributorID sets the "direct_contributor_id" field to the value that was provided on create.
func (u *OrderStatementUpsert) UpdateDirectContributorID() *OrderStatementUpsert {
	u.SetExcluded(orderstatement.FieldDirectContributorID)
	return u
}

// ClearDirectContributorID clears the value of the "direct_contributor_id" field.
func (u *OrderStatementUpsert) ClearDirectContributorID() *OrderStatementUpsert {
	u.SetNull(orderstatement.FieldDirectContributorID)
	return u
}

// SetOrderUserID sets the "order_user_id" field.
func (u *OrderStatementUpsert) SetOrderUserID(v uuid.UUID) *OrderStatementUpsert {
	u.Set(orderstatement.FieldOrderUserID, v)
	return u
}

// UpdateOrderUserID sets the "order_user_id" field to the value that was provided on create.
func (u *OrderStatementUpsert) UpdateOrderUserID() *OrderStatementUpsert {
	u.SetExcluded(orderstatement.FieldOrderUserID)
	return u
}

// ClearOrderUserID clears the value of the "order_user_id" field.
func (u *OrderStatementUpsert) ClearOrderUserID() *OrderStatementUpsert {
	u.SetNull(orderstatement.FieldOrderUserID)
	return u
}

// SetGoodCoinTypeID sets the "good_coin_type_id" field.
func (u *OrderStatementUpsert) SetGoodCoinTypeID(v uuid.UUID) *OrderStatementUpsert {
	u.Set(orderstatement.FieldGoodCoinTypeID, v)
	return u
}

// UpdateGoodCoinTypeID sets the "good_coin_type_id" field to the value that was provided on create.
func (u *OrderStatementUpsert) UpdateGoodCoinTypeID() *OrderStatementUpsert {
	u.SetExcluded(orderstatement.FieldGoodCoinTypeID)
	return u
}

// ClearGoodCoinTypeID clears the value of the "good_coin_type_id" field.
func (u *OrderStatementUpsert) ClearGoodCoinTypeID() *OrderStatementUpsert {
	u.SetNull(orderstatement.FieldGoodCoinTypeID)
	return u
}

// SetUnits sets the "units" field.
func (u *OrderStatementUpsert) SetUnits(v decimal.Decimal) *OrderStatementUpsert {
	u.Set(orderstatement.FieldUnits, v)
	return u
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *OrderStatementUpsert) UpdateUnits() *OrderStatementUpsert {
	u.SetExcluded(orderstatement.FieldUnits)
	return u
}

// ClearUnits clears the value of the "units" field.
func (u *OrderStatementUpsert) ClearUnits() *OrderStatementUpsert {
	u.SetNull(orderstatement.FieldUnits)
	return u
}

// SetGoodValueUsd sets the "good_value_usd" field.
func (u *OrderStatementUpsert) SetGoodValueUsd(v decimal.Decimal) *OrderStatementUpsert {
	u.Set(orderstatement.FieldGoodValueUsd, v)
	return u
}

// UpdateGoodValueUsd sets the "good_value_usd" field to the value that was provided on create.
func (u *OrderStatementUpsert) UpdateGoodValueUsd() *OrderStatementUpsert {
	u.SetExcluded(orderstatement.FieldGoodValueUsd)
	return u
}

// ClearGoodValueUsd clears the value of the "good_value_usd" field.
func (u *OrderStatementUpsert) ClearGoodValueUsd() *OrderStatementUpsert {
	u.SetNull(orderstatement.FieldGoodValueUsd)
	return u
}

// SetPaymentAmountUsd sets the "payment_amount_usd" field.
func (u *OrderStatementUpsert) SetPaymentAmountUsd(v decimal.Decimal) *OrderStatementUpsert {
	u.Set(orderstatement.FieldPaymentAmountUsd, v)
	return u
}

// UpdatePaymentAmountUsd sets the "payment_amount_usd" field to the value that was provided on create.
func (u *OrderStatementUpsert) UpdatePaymentAmountUsd() *OrderStatementUpsert {
	u.SetExcluded(orderstatement.FieldPaymentAmountUsd)
	return u
}

// ClearPaymentAmountUsd clears the value of the "payment_amount_usd" field.
func (u *OrderStatementUpsert) ClearPaymentAmountUsd() *OrderStatementUpsert {
	u.SetNull(orderstatement.FieldPaymentAmountUsd)
	return u
}

// SetCommissionAmountUsd sets the "commission_amount_usd" field.
func (u *OrderStatementUpsert) SetCommissionAmountUsd(v decimal.Decimal) *OrderStatementUpsert {
	u.Set(orderstatement.FieldCommissionAmountUsd, v)
	return u
}

// UpdateCommissionAmountUsd sets the "commission_amount_usd" field to the value that was provided on create.
func (u *OrderStatementUpsert) UpdateCommissionAmountUsd() *OrderStatementUpsert {
	u.SetExcluded(orderstatement.FieldCommissionAmountUsd)
	return u
}

// ClearCommissionAmountUsd clears the value of the "commission_amount_usd" field.
func (u *OrderStatementUpsert) ClearCommissionAmountUsd() *OrderStatementUpsert {
	u.SetNull(orderstatement.FieldCommissionAmountUsd)
	return u
}

// SetAppConfigID sets the "app_config_id" field.
func (u *OrderStatementUpsert) SetAppConfigID(v uuid.UUID) *OrderStatementUpsert {
	u.Set(orderstatement.FieldAppConfigID, v)
	return u
}

// UpdateAppConfigID sets the "app_config_id" field to the value that was provided on create.
func (u *OrderStatementUpsert) UpdateAppConfigID() *OrderStatementUpsert {
	u.SetExcluded(orderstatement.FieldAppConfigID)
	return u
}

// ClearAppConfigID clears the value of the "app_config_id" field.
func (u *OrderStatementUpsert) ClearAppConfigID() *OrderStatementUpsert {
	u.SetNull(orderstatement.FieldAppConfigID)
	return u
}

// SetCommissionConfigID sets the "commission_config_id" field.
func (u *OrderStatementUpsert) SetCommissionConfigID(v uuid.UUID) *OrderStatementUpsert {
	u.Set(orderstatement.FieldCommissionConfigID, v)
	return u
}

// UpdateCommissionConfigID sets the "commission_config_id" field to the value that was provided on create.
func (u *OrderStatementUpsert) UpdateCommissionConfigID() *OrderStatementUpsert {
	u.SetExcluded(orderstatement.FieldCommissionConfigID)
	return u
}

// ClearCommissionConfigID clears the value of the "commission_config_id" field.
func (u *OrderStatementUpsert) ClearCommissionConfigID() *OrderStatementUpsert {
	u.SetNull(orderstatement.FieldCommissionConfigID)
	return u
}

// SetCommissionConfigType sets the "commission_config_type" field.
func (u *OrderStatementUpsert) SetCommissionConfigType(v string) *OrderStatementUpsert {
	u.Set(orderstatement.FieldCommissionConfigType, v)
	return u
}

// UpdateCommissionConfigType sets the "commission_config_type" field to the value that was provided on create.
func (u *OrderStatementUpsert) UpdateCommissionConfigType() *OrderStatementUpsert {
	u.SetExcluded(orderstatement.FieldCommissionConfigType)
	return u
}

// ClearCommissionConfigType clears the value of the "commission_config_type" field.
func (u *OrderStatementUpsert) ClearCommissionConfigType() *OrderStatementUpsert {
	u.SetNull(orderstatement.FieldCommissionConfigType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrderStatement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderstatement.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderStatementUpsertOne) UpdateNewValues() *OrderStatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(orderstatement.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderStatement.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrderStatementUpsertOne) Ignore() *OrderStatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderStatementUpsertOne) DoNothing() *OrderStatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderStatementCreate.OnConflict
// documentation for more info.
func (u *OrderStatementUpsertOne) Update(set func(*OrderStatementUpsert)) *OrderStatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderStatementUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderStatementUpsertOne) SetCreatedAt(v uint32) *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderStatementUpsertOne) AddCreatedAt(v uint32) *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderStatementUpsertOne) UpdateCreatedAt() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderStatementUpsertOne) SetUpdatedAt(v uint32) *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderStatementUpsertOne) AddUpdatedAt(v uint32) *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderStatementUpsertOne) UpdateUpdatedAt() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderStatementUpsertOne) SetDeletedAt(v uint32) *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderStatementUpsertOne) AddDeletedAt(v uint32) *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderStatementUpsertOne) UpdateDeletedAt() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *OrderStatementUpsertOne) SetEntID(v uuid.UUID) *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderStatementUpsertOne) UpdateEntID() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *OrderStatementUpsertOne) SetAppID(v uuid.UUID) *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *OrderStatementUpsertOne) UpdateAppID() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *OrderStatementUpsertOne) ClearAppID() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *OrderStatementUpsertOne) SetUserID(v uuid.UUID) *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrderStatementUpsertOne) UpdateUserID() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *OrderStatementUpsertOne) ClearUserID() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *OrderStatementUpsertOne) SetGoodID(v uuid.UUID) *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *OrderStatementUpsertOne) UpdateGoodID() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *OrderStatementUpsertOne) ClearGoodID() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearGoodID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *OrderStatementUpsertOne) SetAppGoodID(v uuid.UUID) *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *OrderStatementUpsertOne) UpdateAppGoodID() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *OrderStatementUpsertOne) ClearAppGoodID() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearAppGoodID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderStatementUpsertOne) SetOrderID(v uuid.UUID) *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderStatementUpsertOne) UpdateOrderID() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderStatementUpsertOne) ClearOrderID() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearOrderID()
	})
}

// SetDirectContributorID sets the "direct_contributor_id" field.
func (u *OrderStatementUpsertOne) SetDirectContributorID(v uuid.UUID) *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetDirectContributorID(v)
	})
}

// UpdateDirectContributorID sets the "direct_contributor_id" field to the value that was provided on create.
func (u *OrderStatementUpsertOne) UpdateDirectContributorID() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateDirectContributorID()
	})
}

// ClearDirectContributorID clears the value of the "direct_contributor_id" field.
func (u *OrderStatementUpsertOne) ClearDirectContributorID() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearDirectContributorID()
	})
}

// SetOrderUserID sets the "order_user_id" field.
func (u *OrderStatementUpsertOne) SetOrderUserID(v uuid.UUID) *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetOrderUserID(v)
	})
}

// UpdateOrderUserID sets the "order_user_id" field to the value that was provided on create.
func (u *OrderStatementUpsertOne) UpdateOrderUserID() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateOrderUserID()
	})
}

// ClearOrderUserID clears the value of the "order_user_id" field.
func (u *OrderStatementUpsertOne) ClearOrderUserID() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearOrderUserID()
	})
}

// SetGoodCoinTypeID sets the "good_coin_type_id" field.
func (u *OrderStatementUpsertOne) SetGoodCoinTypeID(v uuid.UUID) *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetGoodCoinTypeID(v)
	})
}

// UpdateGoodCoinTypeID sets the "good_coin_type_id" field to the value that was provided on create.
func (u *OrderStatementUpsertOne) UpdateGoodCoinTypeID() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateGoodCoinTypeID()
	})
}

// ClearGoodCoinTypeID clears the value of the "good_coin_type_id" field.
func (u *OrderStatementUpsertOne) ClearGoodCoinTypeID() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearGoodCoinTypeID()
	})
}

// SetUnits sets the "units" field.
func (u *OrderStatementUpsertOne) SetUnits(v decimal.Decimal) *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetUnits(v)
	})
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *OrderStatementUpsertOne) UpdateUnits() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateUnits()
	})
}

// ClearUnits clears the value of the "units" field.
func (u *OrderStatementUpsertOne) ClearUnits() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearUnits()
	})
}

// SetGoodValueUsd sets the "good_value_usd" field.
func (u *OrderStatementUpsertOne) SetGoodValueUsd(v decimal.Decimal) *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetGoodValueUsd(v)
	})
}

// UpdateGoodValueUsd sets the "good_value_usd" field to the value that was provided on create.
func (u *OrderStatementUpsertOne) UpdateGoodValueUsd() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateGoodValueUsd()
	})
}

// ClearGoodValueUsd clears the value of the "good_value_usd" field.
func (u *OrderStatementUpsertOne) ClearGoodValueUsd() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearGoodValueUsd()
	})
}

// SetPaymentAmountUsd sets the "payment_amount_usd" field.
func (u *OrderStatementUpsertOne) SetPaymentAmountUsd(v decimal.Decimal) *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetPaymentAmountUsd(v)
	})
}

// UpdatePaymentAmountUsd sets the "payment_amount_usd" field to the value that was provided on create.
func (u *OrderStatementUpsertOne) UpdatePaymentAmountUsd() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdatePaymentAmountUsd()
	})
}

// ClearPaymentAmountUsd clears the value of the "payment_amount_usd" field.
func (u *OrderStatementUpsertOne) ClearPaymentAmountUsd() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearPaymentAmountUsd()
	})
}

// SetCommissionAmountUsd sets the "commission_amount_usd" field.
func (u *OrderStatementUpsertOne) SetCommissionAmountUsd(v decimal.Decimal) *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetCommissionAmountUsd(v)
	})
}

// UpdateCommissionAmountUsd sets the "commission_amount_usd" field to the value that was provided on create.
func (u *OrderStatementUpsertOne) UpdateCommissionAmountUsd() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateCommissionAmountUsd()
	})
}

// ClearCommissionAmountUsd clears the value of the "commission_amount_usd" field.
func (u *OrderStatementUpsertOne) ClearCommissionAmountUsd() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearCommissionAmountUsd()
	})
}

// SetAppConfigID sets the "app_config_id" field.
func (u *OrderStatementUpsertOne) SetAppConfigID(v uuid.UUID) *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetAppConfigID(v)
	})
}

// UpdateAppConfigID sets the "app_config_id" field to the value that was provided on create.
func (u *OrderStatementUpsertOne) UpdateAppConfigID() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateAppConfigID()
	})
}

// ClearAppConfigID clears the value of the "app_config_id" field.
func (u *OrderStatementUpsertOne) ClearAppConfigID() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearAppConfigID()
	})
}

// SetCommissionConfigID sets the "commission_config_id" field.
func (u *OrderStatementUpsertOne) SetCommissionConfigID(v uuid.UUID) *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetCommissionConfigID(v)
	})
}

// UpdateCommissionConfigID sets the "commission_config_id" field to the value that was provided on create.
func (u *OrderStatementUpsertOne) UpdateCommissionConfigID() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateCommissionConfigID()
	})
}

// ClearCommissionConfigID clears the value of the "commission_config_id" field.
func (u *OrderStatementUpsertOne) ClearCommissionConfigID() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearCommissionConfigID()
	})
}

// SetCommissionConfigType sets the "commission_config_type" field.
func (u *OrderStatementUpsertOne) SetCommissionConfigType(v string) *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetCommissionConfigType(v)
	})
}

// UpdateCommissionConfigType sets the "commission_config_type" field to the value that was provided on create.
func (u *OrderStatementUpsertOne) UpdateCommissionConfigType() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateCommissionConfigType()
	})
}

// ClearCommissionConfigType clears the value of the "commission_config_type" field.
func (u *OrderStatementUpsertOne) ClearCommissionConfigType() *OrderStatementUpsertOne {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearCommissionConfigType()
	})
}

// Exec executes the query.
func (u *OrderStatementUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for OrderStatementCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderStatementUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderStatementUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderStatementUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderStatementCreateBulk is the builder for creating many OrderStatement entities in bulk.
type OrderStatementCreateBulk struct {
	config
	err      error
	builders []*OrderStatementCreate
	conflict []sql.ConflictOption
}

// Save creates the OrderStatement entities in the database.
func (oscb *OrderStatementCreateBulk) Save(ctx context.Context) ([]*OrderStatement, error) {
	if oscb.err != nil {
		return nil, oscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oscb.builders))
	nodes := make([]*OrderStatement, len(oscb.builders))
	mutators := make([]Mutator, len(oscb.builders))
	for i := range oscb.builders {
		func(i int, root context.Context) {
			builder := oscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderStatementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oscb *OrderStatementCreateBulk) SaveX(ctx context.Context) []*OrderStatement {
	v, err := oscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oscb *OrderStatementCreateBulk) Exec(ctx context.Context) error {
	_, err := oscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oscb *OrderStatementCreateBulk) ExecX(ctx context.Context) {
	if err := oscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderStatement.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderStatementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (oscb *OrderStatementCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderStatementUpsertBulk {
	oscb.conflict = opts
	return &OrderStatementUpsertBulk{
		create: oscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderStatement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oscb *OrderStatementCreateBulk) OnConflictColumns(columns ...string) *OrderStatementUpsertBulk {
	oscb.conflict = append(oscb.conflict, sql.ConflictColumns(columns...))
	return &OrderStatementUpsertBulk{
		create: oscb,
	}
}

// OrderStatementUpsertBulk is the builder for "upsert"-ing
// a bulk of OrderStatement nodes.
type OrderStatementUpsertBulk struct {
	create *OrderStatementCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrderStatement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderstatement.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderStatementUpsertBulk) UpdateNewValues() *OrderStatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(orderstatement.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderStatement.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrderStatementUpsertBulk) Ignore() *OrderStatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderStatementUpsertBulk) DoNothing() *OrderStatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderStatementCreateBulk.OnConflict
// documentation for more info.
func (u *OrderStatementUpsertBulk) Update(set func(*OrderStatementUpsert)) *OrderStatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderStatementUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderStatementUpsertBulk) SetCreatedAt(v uint32) *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderStatementUpsertBulk) AddCreatedAt(v uint32) *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderStatementUpsertBulk) UpdateCreatedAt() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderStatementUpsertBulk) SetUpdatedAt(v uint32) *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderStatementUpsertBulk) AddUpdatedAt(v uint32) *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderStatementUpsertBulk) UpdateUpdatedAt() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderStatementUpsertBulk) SetDeletedAt(v uint32) *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderStatementUpsertBulk) AddDeletedAt(v uint32) *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderStatementUpsertBulk) UpdateDeletedAt() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *OrderStatementUpsertBulk) SetEntID(v uuid.UUID) *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderStatementUpsertBulk) UpdateEntID() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *OrderStatementUpsertBulk) SetAppID(v uuid.UUID) *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *OrderStatementUpsertBulk) UpdateAppID() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *OrderStatementUpsertBulk) ClearAppID() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *OrderStatementUpsertBulk) SetUserID(v uuid.UUID) *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrderStatementUpsertBulk) UpdateUserID() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *OrderStatementUpsertBulk) ClearUserID() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *OrderStatementUpsertBulk) SetGoodID(v uuid.UUID) *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *OrderStatementUpsertBulk) UpdateGoodID() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *OrderStatementUpsertBulk) ClearGoodID() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearGoodID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *OrderStatementUpsertBulk) SetAppGoodID(v uuid.UUID) *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *OrderStatementUpsertBulk) UpdateAppGoodID() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *OrderStatementUpsertBulk) ClearAppGoodID() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearAppGoodID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderStatementUpsertBulk) SetOrderID(v uuid.UUID) *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderStatementUpsertBulk) UpdateOrderID() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderStatementUpsertBulk) ClearOrderID() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearOrderID()
	})
}

// SetDirectContributorID sets the "direct_contributor_id" field.
func (u *OrderStatementUpsertBulk) SetDirectContributorID(v uuid.UUID) *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetDirectContributorID(v)
	})
}

// UpdateDirectContributorID sets the "direct_contributor_id" field to the value that was provided on create.
func (u *OrderStatementUpsertBulk) UpdateDirectContributorID() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateDirectContributorID()
	})
}

// ClearDirectContributorID clears the value of the "direct_contributor_id" field.
func (u *OrderStatementUpsertBulk) ClearDirectContributorID() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearDirectContributorID()
	})
}

// SetOrderUserID sets the "order_user_id" field.
func (u *OrderStatementUpsertBulk) SetOrderUserID(v uuid.UUID) *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetOrderUserID(v)
	})
}

// UpdateOrderUserID sets the "order_user_id" field to the value that was provided on create.
func (u *OrderStatementUpsertBulk) UpdateOrderUserID() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateOrderUserID()
	})
}

// ClearOrderUserID clears the value of the "order_user_id" field.
func (u *OrderStatementUpsertBulk) ClearOrderUserID() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearOrderUserID()
	})
}

// SetGoodCoinTypeID sets the "good_coin_type_id" field.
func (u *OrderStatementUpsertBulk) SetGoodCoinTypeID(v uuid.UUID) *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetGoodCoinTypeID(v)
	})
}

// UpdateGoodCoinTypeID sets the "good_coin_type_id" field to the value that was provided on create.
func (u *OrderStatementUpsertBulk) UpdateGoodCoinTypeID() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateGoodCoinTypeID()
	})
}

// ClearGoodCoinTypeID clears the value of the "good_coin_type_id" field.
func (u *OrderStatementUpsertBulk) ClearGoodCoinTypeID() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearGoodCoinTypeID()
	})
}

// SetUnits sets the "units" field.
func (u *OrderStatementUpsertBulk) SetUnits(v decimal.Decimal) *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetUnits(v)
	})
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *OrderStatementUpsertBulk) UpdateUnits() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateUnits()
	})
}

// ClearUnits clears the value of the "units" field.
func (u *OrderStatementUpsertBulk) ClearUnits() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearUnits()
	})
}

// SetGoodValueUsd sets the "good_value_usd" field.
func (u *OrderStatementUpsertBulk) SetGoodValueUsd(v decimal.Decimal) *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetGoodValueUsd(v)
	})
}

// UpdateGoodValueUsd sets the "good_value_usd" field to the value that was provided on create.
func (u *OrderStatementUpsertBulk) UpdateGoodValueUsd() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateGoodValueUsd()
	})
}

// ClearGoodValueUsd clears the value of the "good_value_usd" field.
func (u *OrderStatementUpsertBulk) ClearGoodValueUsd() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearGoodValueUsd()
	})
}

// SetPaymentAmountUsd sets the "payment_amount_usd" field.
func (u *OrderStatementUpsertBulk) SetPaymentAmountUsd(v decimal.Decimal) *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetPaymentAmountUsd(v)
	})
}

// UpdatePaymentAmountUsd sets the "payment_amount_usd" field to the value that was provided on create.
func (u *OrderStatementUpsertBulk) UpdatePaymentAmountUsd() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdatePaymentAmountUsd()
	})
}

// ClearPaymentAmountUsd clears the value of the "payment_amount_usd" field.
func (u *OrderStatementUpsertBulk) ClearPaymentAmountUsd() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearPaymentAmountUsd()
	})
}

// SetCommissionAmountUsd sets the "commission_amount_usd" field.
func (u *OrderStatementUpsertBulk) SetCommissionAmountUsd(v decimal.Decimal) *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetCommissionAmountUsd(v)
	})
}

// UpdateCommissionAmountUsd sets the "commission_amount_usd" field to the value that was provided on create.
func (u *OrderStatementUpsertBulk) UpdateCommissionAmountUsd() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateCommissionAmountUsd()
	})
}

// ClearCommissionAmountUsd clears the value of the "commission_amount_usd" field.
func (u *OrderStatementUpsertBulk) ClearCommissionAmountUsd() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearCommissionAmountUsd()
	})
}

// SetAppConfigID sets the "app_config_id" field.
func (u *OrderStatementUpsertBulk) SetAppConfigID(v uuid.UUID) *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetAppConfigID(v)
	})
}

// UpdateAppConfigID sets the "app_config_id" field to the value that was provided on create.
func (u *OrderStatementUpsertBulk) UpdateAppConfigID() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateAppConfigID()
	})
}

// ClearAppConfigID clears the value of the "app_config_id" field.
func (u *OrderStatementUpsertBulk) ClearAppConfigID() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearAppConfigID()
	})
}

// SetCommissionConfigID sets the "commission_config_id" field.
func (u *OrderStatementUpsertBulk) SetCommissionConfigID(v uuid.UUID) *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetCommissionConfigID(v)
	})
}

// UpdateCommissionConfigID sets the "commission_config_id" field to the value that was provided on create.
func (u *OrderStatementUpsertBulk) UpdateCommissionConfigID() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateCommissionConfigID()
	})
}

// ClearCommissionConfigID clears the value of the "commission_config_id" field.
func (u *OrderStatementUpsertBulk) ClearCommissionConfigID() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearCommissionConfigID()
	})
}

// SetCommissionConfigType sets the "commission_config_type" field.
func (u *OrderStatementUpsertBulk) SetCommissionConfigType(v string) *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.SetCommissionConfigType(v)
	})
}

// UpdateCommissionConfigType sets the "commission_config_type" field to the value that was provided on create.
func (u *OrderStatementUpsertBulk) UpdateCommissionConfigType() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.UpdateCommissionConfigType()
	})
}

// ClearCommissionConfigType clears the value of the "commission_config_type" field.
func (u *OrderStatementUpsertBulk) ClearCommissionConfigType() *OrderStatementUpsertBulk {
	return u.Update(func(s *OrderStatementUpsert) {
		s.ClearCommissionConfigType()
	})
}

// Exec executes the query.
func (u *OrderStatementUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the OrderStatementCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for OrderStatementCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderStatementUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package coupon

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldDeletedAt, v))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldEntID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldAppID, v))
}

// Denomination applies equality check predicate on the "denomination" field. It's identical to DenominationEQ.
func Denomination(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldDenomination, v))
}

// Circulation applies equality check predicate on the "circulation" field. It's identical to CirculationEQ.
func Circulation(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldCirculation, v))
}

// Random applies equality check predicate on the "random" field. It's identical to RandomEQ.
func Random(v bool) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldRandom, v))
}

// IssuedBy applies equality check predicate on the "issued_by" field. It's identical to IssuedByEQ.
func IssuedBy(v uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldIssuedBy, v))
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldStartAt, v))
}

// EndAt applies equality check predicate on the "end_at" field. It's identical to EndAtEQ.
func EndAt(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldEndAt, v))
}

// DurationDays applies equality check predicate on the "duration_days" field. It's identical to DurationDaysEQ.
func DurationDays(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldDurationDays, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldMessage, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldName, v))
}

// Allocated applies equality check predicate on the "allocated" field. It's identical to AllocatedEQ.
func Allocated(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldAllocated, v))
}

// CouponType applies equality check predicate on the "coupon_type" field. It's identical to CouponTypeEQ.
func CouponType(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldCouponType, v))
}

// Threshold applies equality check predicate on the "threshold" field. It's identical to ThresholdEQ.
func Threshold(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldThreshold, v))
}

// CouponConstraint applies equality check predicate on the "coupon_constraint" field. It's identical to CouponConstraintEQ.
func CouponConstraint(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldCouponConstraint, v))
}

// CouponScope applies equality check predicate on the "coupon_scope" field. It's identical to CouponScopeEQ.
func CouponScope(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldCouponScope, v))
}

// CashableProbability applies equality check predicate on the "cashable_probability" field. It's identical to CashableProbabilityEQ.
func CashableProbability(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldCashableProbability, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldEntID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldAppID, v))
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldIsNull(FieldAppID))
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldNotNull(FieldAppID))
}

// DenominationEQ applies the EQ predicate on the "denomination" field.
func DenominationEQ(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldDenomination, v))
}

// DenominationNEQ applies the NEQ predicate on the "denomination" field.
func DenominationNEQ(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldDenomination, v))
}

// DenominationIn applies the In predicate on the "denomination" field.
func DenominationIn(vs ...decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldDenomination, vs...))
}

// DenominationNotIn applies the NotIn predicate on the "denomination" field.
func DenominationNotIn(vs ...decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldDenomination, vs...))
}

// DenominationGT applies the GT predicate on the "denomination" field.
func DenominationGT(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldDenomination, v))
}

// DenominationGTE applies the GTE predicate on the "denomination" field.
func DenominationGTE(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldDenomination, v))
}

// DenominationLT applies the LT predicate on the "denomination" field.
func DenominationLT(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldDenomination, v))
}

// DenominationLTE applies the LTE predicate on the "denomination" field.
func DenominationLTE(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldDenomination, v))
}

// DenominationIsNil applies the IsNil predicate on the "denomination" field.
func DenominationIsNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldIsNull(FieldDenomination))
}

// DenominationNotNil applies the NotNil predicate on the "denomination" field.
func DenominationNotNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldNotNull(FieldDenomination))
}

// CirculationEQ applies the EQ predicate on the "circulation" field.
func CirculationEQ(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldCirculation, v))
}

// CirculationNEQ applies the NEQ predicate on the "circulation" field.
func CirculationNEQ(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldCirculation, v))
}

// CirculationIn applies the In predicate on the "circulation" field.
func CirculationIn(vs ...decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldCirculation, vs...))
}

// CirculationNotIn applies the NotIn predicate on the "circulation" field.
func CirculationNotIn(vs ...decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldCirculation, vs...))
}

// CirculationGT applies the GT predicate on the "circulation" field.
func CirculationGT(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldCirculation, v))
}

// CirculationGTE applies the GTE predicate on the "circulation" field.
func CirculationGTE(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldCirculation, v))
}

// CirculationLT applies the LT predicate on the "circulation" field.
func CirculationLT(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldCirculation, v))
}

// CirculationLTE applies the LTE predicate on the "circulation" field.
func CirculationLTE(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldCirculation, v))
}

// CirculationIsNil applies the IsNil predicate on the "circulation" field.
func CirculationIsNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldIsNull(FieldCirculation))
}

// CirculationNotNil applies the NotNil predicate on the "circulation" field.
func CirculationNotNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldNotNull(FieldCirculation))
}

// RandomEQ applies the EQ predicate on the "random" field.
func RandomEQ(v bool) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldRandom, v))
}

// RandomNEQ applies the NEQ predicate on the "random" field.
func RandomNEQ(v bool) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldRandom, v))
}

// RandomIsNil applies the IsNil predicate on the "random" field.
func RandomIsNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldIsNull(FieldRandom))
}

// RandomNotNil applies the NotNil predicate on the "random" field.
func RandomNotNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldNotNull(FieldRandom))
}

// IssuedByEQ applies the EQ predicate on the "issued_by" field.
func IssuedByEQ(v uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldIssuedBy, v))
}

// IssuedByNEQ applies the NEQ predicate on the "issued_by" field.
func IssuedByNEQ(v uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldIssuedBy, v))
}

// IssuedByIn applies the In predicate on the "issued_by" field.
func IssuedByIn(vs ...uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldIssuedBy, vs...))
}

// IssuedByNotIn applies the NotIn predicate on the "issued_by" field.
func IssuedByNotIn(vs ...uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldIssuedBy, vs...))
}

// IssuedByGT applies the GT predicate on the "issued_by" field.
func IssuedByGT(v uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldIssuedBy, v))
}

// IssuedByGTE applies the GTE predicate on the "issued_by" field.
func IssuedByGTE(v uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldIssuedBy, v))
}

// IssuedByLT applies the LT predicate on the "issued_by" field.
func IssuedByLT(v uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldIssuedBy, v))
}

// IssuedByLTE applies the LTE predicate on the "issued_by" field.
func IssuedByLTE(v uuid.UUID) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldIssuedBy, v))
}

// IssuedByIsNil applies the IsNil predicate on the "issued_by" field.
func IssuedByIsNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldIsNull(FieldIssuedBy))
}

// IssuedByNotNil applies the NotNil predicate on the "issued_by" field.
func IssuedByNotNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldNotNull(FieldIssuedBy))
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldStartAt, v))
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldStartAt, v))
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldStartAt, vs...))
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldStartAt, vs...))
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldStartAt, v))
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldStartAt, v))
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldStartAt, v))
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldStartAt, v))
}

// StartAtIsNil applies the IsNil predicate on the "start_at" field.
func StartAtIsNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldIsNull(FieldStartAt))
}

// StartAtNotNil applies the NotNil predicate on the "start_at" field.
func StartAtNotNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldNotNull(FieldStartAt))
}

// EndAtEQ applies the EQ predicate on the "end_at" field.
func EndAtEQ(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldEndAt, v))
}

// EndAtNEQ applies the NEQ predicate on the "end_at" field.
func EndAtNEQ(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldEndAt, v))
}

// EndAtIn applies the In predicate on the "end_at" field.
func EndAtIn(vs ...uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldEndAt, vs...))
}

// EndAtNotIn applies the NotIn predicate on the "end_at" field.
func EndAtNotIn(vs ...uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldEndAt, vs...))
}

// EndAtGT applies the GT predicate on the "end_at" field.
func EndAtGT(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldEndAt, v))
}

// EndAtGTE applies the GTE predicate on the "end_at" field.
func EndAtGTE(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldEndAt, v))
}

// EndAtLT applies the LT predicate on the "end_at" field.
func EndAtLT(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldEndAt, v))
}

// EndAtLTE applies the LTE predicate on the "end_at" field.
func EndAtLTE(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldEndAt, v))
}

// EndAtIsNil applies the IsNil predicate on the "end_at" field.
func EndAtIsNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldIsNull(FieldEndAt))
}

// EndAtNotNil applies the NotNil predicate on the "end_at" field.
func EndAtNotNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldNotNull(FieldEndAt))
}

// DurationDaysEQ applies the EQ predicate on the "duration_days" field.
func DurationDaysEQ(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldDurationDays, v))
}

// DurationDaysNEQ applies the NEQ predicate on the "duration_days" field.
func DurationDaysNEQ(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldDurationDays, v))
}

// DurationDaysIn applies the In predicate on the "duration_days" field.
func DurationDaysIn(vs ...uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldDurationDays, vs...))
}

// DurationDaysNotIn applies the NotIn predicate on the "duration_days" field.
func DurationDaysNotIn(vs ...uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldDurationDays, vs...))
}

// DurationDaysGT applies the GT predicate on the "duration_days" field.
func DurationDaysGT(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldDurationDays, v))
}

// DurationDaysGTE applies the GTE predicate on the "duration_days" field.
func DurationDaysGTE(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldDurationDays, v))
}

// DurationDaysLT applies the LT predicate on the "duration_days" field.
func DurationDaysLT(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldDurationDays, v))
}

// DurationDaysLTE applies the LTE predicate on the "duration_days" field.
func DurationDaysLTE(v uint32) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldDurationDays, v))
}

// DurationDaysIsNil applies the IsNil predicate on the "duration_days" field.
func DurationDaysIsNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldIsNull(FieldDurationDays))
}

// DurationDaysNotNil applies the NotNil predicate on the "duration_days" field.
func DurationDaysNotNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldNotNull(FieldDurationDays))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageIsNil applies the IsNil predicate on the "message" field.
func MessageIsNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldIsNull(FieldMessage))
}

// MessageNotNil applies the NotNil predicate on the "message" field.
func MessageNotNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldNotNull(FieldMessage))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldContainsFold(FieldMessage, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldContainsFold(FieldName, v))
}

// AllocatedEQ applies the EQ predicate on the "allocated" field.
func AllocatedEQ(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldAllocated, v))
}

// AllocatedNEQ applies the NEQ predicate on the "allocated" field.
func AllocatedNEQ(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldAllocated, v))
}

// AllocatedIn applies the In predicate on the "allocated" field.
func AllocatedIn(vs ...decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldAllocated, vs...))
}

// AllocatedNotIn applies the NotIn predicate on the "allocated" field.
func AllocatedNotIn(vs ...decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldAllocated, vs...))
}

// AllocatedGT applies the GT predicate on the "allocated" field.
func AllocatedGT(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldAllocated, v))
}

// AllocatedGTE applies the GTE predicate on the "allocated" field.
func AllocatedGTE(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldAllocated, v))
}

// AllocatedLT applies the LT predicate on the "allocated" field.
func AllocatedLT(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldAllocated, v))
}

// AllocatedLTE applies the LTE predicate on the "allocated" field.
func AllocatedLTE(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldAllocated, v))
}

// AllocatedIsNil applies the IsNil predicate on the "allocated" field.
func AllocatedIsNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldIsNull(FieldAllocated))
}

// AllocatedNotNil applies the NotNil predicate on the "allocated" field.
func AllocatedNotNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldNotNull(FieldAllocated))
}

// CouponTypeEQ applies the EQ predicate on the "coupon_type" field.
func CouponTypeEQ(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldCouponType, v))
}

// CouponTypeNEQ applies the NEQ predicate on the "coupon_type" field.
func CouponTypeNEQ(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldCouponType, v))
}

// CouponTypeIn applies the In predicate on the "coupon_type" field.
func CouponTypeIn(vs ...string) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldCouponType, vs...))
}

// CouponTypeNotIn applies the NotIn predicate on the "coupon_type" field.
func CouponTypeNotIn(vs ...string) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldCouponType, vs...))
}

// CouponTypeGT applies the GT predicate on the "coupon_type" field.
func CouponTypeGT(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldCouponType, v))
}

// CouponTypeGTE applies the GTE predicate on the "coupon_type" field.
func CouponTypeGTE(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldCouponType, v))
}

// CouponTypeLT applies the LT predicate on the "coupon_type" field.
func CouponTypeLT(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldCouponType, v))
}

// CouponTypeLTE applies the LTE predicate on the "coupon_type" field.
func CouponTypeLTE(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldCouponType, v))
}

// CouponTypeContains applies the Contains predicate on the "coupon_type" field.
func CouponTypeContains(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldContains(FieldCouponType, v))
}

// CouponTypeHasPrefix applies the HasPrefix predicate on the "coupon_type" field.
func CouponTypeHasPrefix(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldHasPrefix(FieldCouponType, v))
}

// CouponTypeHasSuffix applies the HasSuffix predicate on the "coupon_type" field.
func CouponTypeHasSuffix(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldHasSuffix(FieldCouponType, v))
}

// CouponTypeIsNil applies the IsNil predicate on the "coupon_type" field.
func CouponTypeIsNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldIsNull(FieldCouponType))
}

// CouponTypeNotNil applies the NotNil predicate on the "coupon_type" field.
func CouponTypeNotNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldNotNull(FieldCouponType))
}

// CouponTypeEqualFold applies the EqualFold predicate on the "coupon_type" field.
func CouponTypeEqualFold(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEqualFold(FieldCouponType, v))
}

// CouponTypeContainsFold applies the ContainsFold predicate on the "coupon_type" field.
func CouponTypeContainsFold(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldContainsFold(FieldCouponType, v))
}

// ThresholdEQ applies the EQ predicate on the "threshold" field.
func ThresholdEQ(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldThreshold, v))
}

// ThresholdNEQ applies the NEQ predicate on the "threshold" field.
func ThresholdNEQ(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldThreshold, v))
}

// ThresholdIn applies the In predicate on the "threshold" field.
func ThresholdIn(vs ...decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldThreshold, vs...))
}

// ThresholdNotIn applies the NotIn predicate on the "threshold" field.
func ThresholdNotIn(vs ...decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldThreshold, vs...))
}

// ThresholdGT applies the GT predicate on the "threshold" field.
func ThresholdGT(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldThreshold, v))
}

// ThresholdGTE applies the GTE predicate on the "threshold" field.
func ThresholdGTE(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldThreshold, v))
}

// ThresholdLT applies the LT predicate on the "threshold" field.
func ThresholdLT(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldThreshold, v))
}

// ThresholdLTE applies the LTE predicate on the "threshold" field.
func ThresholdLTE(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldThreshold, v))
}

// ThresholdIsNil applies the IsNil predicate on the "threshold" field.
func ThresholdIsNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldIsNull(FieldThreshold))
}

// ThresholdNotNil applies the NotNil predicate on the "threshold" field.
func ThresholdNotNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldNotNull(FieldThreshold))
}

// CouponConstraintEQ applies the EQ predicate on the "coupon_constraint" field.
func CouponConstraintEQ(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldCouponConstraint, v))
}

// CouponConstraintNEQ applies the NEQ predicate on the "coupon_constraint" field.
func CouponConstraintNEQ(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldCouponConstraint, v))
}

// CouponConstraintIn applies the In predicate on the "coupon_constraint" field.
func CouponConstraintIn(vs ...string) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldCouponConstraint, vs...))
}

// CouponConstraintNotIn applies the NotIn predicate on the "coupon_constraint" field.
func CouponConstraintNotIn(vs ...string) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldCouponConstraint, vs...))
}

// CouponConstraintGT applies the GT predicate on the "coupon_constraint" field.
func CouponConstraintGT(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldCouponConstraint, v))
}

// CouponConstraintGTE applies the GTE predicate on the "coupon_constraint" field.
func CouponConstraintGTE(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldCouponConstraint, v))
}

// CouponConstraintLT applies the LT predicate on the "coupon_constraint" field.
func CouponConstraintLT(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldCouponConstraint, v))
}

// CouponConstraintLTE applies the LTE predicate on the "coupon_constraint" field.
func CouponConstraintLTE(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldCouponConstraint, v))
}

// CouponConstraintContains applies the Contains predicate on the "coupon_constraint" field.
func CouponConstraintContains(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldContains(FieldCouponConstraint, v))
}

// CouponConstraintHasPrefix applies the HasPrefix predicate on the "coupon_constraint" field.
func CouponConstraintHasPrefix(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldHasPrefix(FieldCouponConstraint, v))
}

// CouponConstraintHasSuffix applies the HasSuffix predicate on the "coupon_constraint" field.
func CouponConstraintHasSuffix(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldHasSuffix(FieldCouponConstraint, v))
}

// CouponConstraintIsNil applies the IsNil predicate on the "coupon_constraint" field.
func CouponConstraintIsNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldIsNull(FieldCouponConstraint))
}

// CouponConstraintNotNil applies the NotNil predicate on the "coupon_constraint" field.
func CouponConstraintNotNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldNotNull(FieldCouponConstraint))
}

// CouponConstraintEqualFold applies the EqualFold predicate on the "coupon_constraint" field.
func CouponConstraintEqualFold(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEqualFold(FieldCouponConstraint, v))
}

// CouponConstraintContainsFold applies the ContainsFold predicate on the "coupon_constraint" field.
func CouponConstraintContainsFold(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldContainsFold(FieldCouponConstraint, v))
}

// CouponScopeEQ applies the EQ predicate on the "coupon_scope" field.
func CouponScopeEQ(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldCouponScope, v))
}

// CouponScopeNEQ applies the NEQ predicate on the "coupon_scope" field.
func CouponScopeNEQ(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldCouponScope, v))
}

// CouponScopeIn applies the In predicate on the "coupon_scope" field.
func CouponScopeIn(vs ...string) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldCouponScope, vs...))
}

// CouponScopeNotIn applies the NotIn predicate on the "coupon_scope" field.
func CouponScopeNotIn(vs ...string) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldCouponScope, vs...))
}

// CouponScopeGT applies the GT predicate on the "coupon_scope" field.
func CouponScopeGT(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldCouponScope, v))
}

// CouponScopeGTE applies the GTE predicate on the "coupon_scope" field.
func CouponScopeGTE(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldCouponScope, v))
}

// CouponScopeLT applies the LT predicate on the "coupon_scope" field.
func CouponScopeLT(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldCouponScope, v))
}

// CouponScopeLTE applies the LTE predicate on the "coupon_scope" field.
func CouponScopeLTE(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldCouponScope, v))
}

// CouponScopeContains applies the Contains predicate on the "coupon_scope" field.
func CouponScopeContains(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldContains(FieldCouponScope, v))
}

// CouponScopeHasPrefix applies the HasPrefix predicate on the "coupon_scope" field.
func CouponScopeHasPrefix(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldHasPrefix(FieldCouponScope, v))
}

// CouponScopeHasSuffix applies the HasSuffix predicate on the "coupon_scope" field.
func CouponScopeHasSuffix(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldHasSuffix(FieldCouponScope, v))
}

// CouponScopeIsNil applies the IsNil predicate on the "coupon_scope" field.
func CouponScopeIsNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldIsNull(FieldCouponScope))
}

// CouponScopeNotNil applies the NotNil predicate on the "coupon_scope" field.
func CouponScopeNotNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldNotNull(FieldCouponScope))
}

// CouponScopeEqualFold applies the EqualFold predicate on the "coupon_scope" field.
func CouponScopeEqualFold(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEqualFold(FieldCouponScope, v))
}

// CouponScopeContainsFold applies the ContainsFold predicate on the "coupon_scope" field.
func CouponScopeContainsFold(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldContainsFold(FieldCouponScope, v))
}

// CashableProbabilityEQ applies the EQ predicate on the "cashable_probability" field.
func CashableProbabilityEQ(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldCashableProbability, v))
}

// CashableProbabilityNEQ applies the NEQ predicate on the "cashable_probability" field.
func CashableProbabilityNEQ(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldCashableProbability, v))
}

// CashableProbabilityIn applies the In predicate on the "cashable_probability" field.
func CashableProbabilityIn(vs ...decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldCashableProbability, vs...))
}

// CashableProbabilityNotIn applies the NotIn predicate on the "cashable_probability" field.
func CashableProbabilityNotIn(vs ...decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldCashableProbability, vs...))
}

// CashableProbabilityGT applies the GT predicate on the "cashable_probability" field.
func CashableProbabilityGT(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldCashableProbability, v))
}

// CashableProbabilityGTE applies the GTE predicate on the "cashable_probability" field.
func CashableProbabilityGTE(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldCashableProbability, v))
}

// CashableProbabilityLT applies the LT predicate on the "cashable_probability" field.
func CashableProbabilityLT(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldCashableProbability, v))
}

// CashableProbabilityLTE applies the LTE predicate on the "cashable_probability" field.
func CashableProbabilityLTE(v decimal.Decimal) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldCashableProbability, v))
}

// CashableProbabilityIsNil applies the IsNil predicate on the "cashable_probability" field.
func CashableProbabilityIsNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldIsNull(FieldCashableProbability))
}

// CashableProbabilityNotNil applies the NotNil predicate on the "cashable_probability" field.
func CashableProbabilityNotNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldNotNull(FieldCashableProbability))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Coupon) predicate.Coupon {
	return predicate.Coupon(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Coupon) predicate.Coupon {
	return predicate.Coupon(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Coupon) predicate.Coupon {
	return predicate.Coupon(sql.NotPredicates(p))
}

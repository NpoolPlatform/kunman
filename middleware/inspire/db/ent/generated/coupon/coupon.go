// Code generated by ent, DO NOT EDIT.

package coupon

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the coupon type in the database.
	Label = "coupon"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldDenomination holds the string denoting the denomination field in the database.
	FieldDenomination = "denomination"
	// FieldCirculation holds the string denoting the circulation field in the database.
	FieldCirculation = "circulation"
	// FieldRandom holds the string denoting the random field in the database.
	FieldRandom = "random"
	// FieldIssuedBy holds the string denoting the issued_by field in the database.
	FieldIssuedBy = "issued_by"
	// FieldStartAt holds the string denoting the start_at field in the database.
	FieldStartAt = "start_at"
	// FieldEndAt holds the string denoting the end_at field in the database.
	FieldEndAt = "end_at"
	// FieldDurationDays holds the string denoting the duration_days field in the database.
	FieldDurationDays = "duration_days"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAllocated holds the string denoting the allocated field in the database.
	FieldAllocated = "allocated"
	// FieldCouponType holds the string denoting the coupon_type field in the database.
	FieldCouponType = "coupon_type"
	// FieldThreshold holds the string denoting the threshold field in the database.
	FieldThreshold = "threshold"
	// FieldCouponConstraint holds the string denoting the coupon_constraint field in the database.
	FieldCouponConstraint = "coupon_constraint"
	// FieldCouponScope holds the string denoting the coupon_scope field in the database.
	FieldCouponScope = "coupon_scope"
	// FieldCashableProbability holds the string denoting the cashable_probability field in the database.
	FieldCashableProbability = "cashable_probability"
	// Table holds the table name of the coupon in the database.
	Table = "coupons"
)

// Columns holds all SQL columns for coupon fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldEntID,
	FieldAppID,
	FieldDenomination,
	FieldCirculation,
	FieldRandom,
	FieldIssuedBy,
	FieldStartAt,
	FieldEndAt,
	FieldDurationDays,
	FieldMessage,
	FieldName,
	FieldAllocated,
	FieldCouponType,
	FieldThreshold,
	FieldCouponConstraint,
	FieldCouponScope,
	FieldCashableProbability,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() uint32
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() uint32
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() uint32
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt func() uint32
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultAppID holds the default value on creation for the "app_id" field.
	DefaultAppID func() uuid.UUID
	// DefaultDenomination holds the default value on creation for the "denomination" field.
	DefaultDenomination decimal.Decimal
	// DefaultCirculation holds the default value on creation for the "circulation" field.
	DefaultCirculation decimal.Decimal
	// DefaultRandom holds the default value on creation for the "random" field.
	DefaultRandom bool
	// DefaultIssuedBy holds the default value on creation for the "issued_by" field.
	DefaultIssuedBy func() uuid.UUID
	// DefaultStartAt holds the default value on creation for the "start_at" field.
	DefaultStartAt uint32
	// DefaultEndAt holds the default value on creation for the "end_at" field.
	DefaultEndAt uint32
	// DefaultDurationDays holds the default value on creation for the "duration_days" field.
	DefaultDurationDays uint32
	// DefaultMessage holds the default value on creation for the "message" field.
	DefaultMessage string
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultAllocated holds the default value on creation for the "allocated" field.
	DefaultAllocated decimal.Decimal
	// DefaultCouponType holds the default value on creation for the "coupon_type" field.
	DefaultCouponType string
	// DefaultThreshold holds the default value on creation for the "threshold" field.
	DefaultThreshold decimal.Decimal
	// DefaultCouponConstraint holds the default value on creation for the "coupon_constraint" field.
	DefaultCouponConstraint string
	// DefaultCouponScope holds the default value on creation for the "coupon_scope" field.
	DefaultCouponScope string
	// DefaultCashableProbability holds the default value on creation for the "cashable_probability" field.
	DefaultCashableProbability decimal.Decimal
)

// OrderOption defines the ordering options for the Coupon queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByAppID orders the results by the app_id field.
func ByAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppID, opts...).ToFunc()
}

// ByDenomination orders the results by the denomination field.
func ByDenomination(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDenomination, opts...).ToFunc()
}

// ByCirculation orders the results by the circulation field.
func ByCirculation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCirculation, opts...).ToFunc()
}

// ByRandom orders the results by the random field.
func ByRandom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRandom, opts...).ToFunc()
}

// ByIssuedBy orders the results by the issued_by field.
func ByIssuedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIssuedBy, opts...).ToFunc()
}

// ByStartAt orders the results by the start_at field.
func ByStartAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartAt, opts...).ToFunc()
}

// ByEndAt orders the results by the end_at field.
func ByEndAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndAt, opts...).ToFunc()
}

// ByDurationDays orders the results by the duration_days field.
func ByDurationDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDurationDays, opts...).ToFunc()
}

// ByMessage orders the results by the message field.
func ByMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessage, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAllocated orders the results by the allocated field.
func ByAllocated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllocated, opts...).ToFunc()
}

// ByCouponType orders the results by the coupon_type field.
func ByCouponType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCouponType, opts...).ToFunc()
}

// ByThreshold orders the results by the threshold field.
func ByThreshold(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThreshold, opts...).ToFunc()
}

// ByCouponConstraint orders the results by the coupon_constraint field.
func ByCouponConstraint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCouponConstraint, opts...).ToFunc()
}

// ByCouponScope orders the results by the coupon_scope field.
func ByCouponScope(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCouponScope, opts...).ToFunc()
}

// ByCashableProbability orders the results by the cashable_probability field.
func ByCashableProbability(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCashableProbability, opts...).ToFunc()
}

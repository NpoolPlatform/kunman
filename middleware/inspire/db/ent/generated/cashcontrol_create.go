// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/cashcontrol"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// CashControlCreate is the builder for creating a CashControl entity.
type CashControlCreate struct {
	config
	mutation *CashControlMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ccc *CashControlCreate) SetCreatedAt(u uint32) *CashControlCreate {
	ccc.mutation.SetCreatedAt(u)
	return ccc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ccc *CashControlCreate) SetNillableCreatedAt(u *uint32) *CashControlCreate {
	if u != nil {
		ccc.SetCreatedAt(*u)
	}
	return ccc
}

// SetUpdatedAt sets the "updated_at" field.
func (ccc *CashControlCreate) SetUpdatedAt(u uint32) *CashControlCreate {
	ccc.mutation.SetUpdatedAt(u)
	return ccc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ccc *CashControlCreate) SetNillableUpdatedAt(u *uint32) *CashControlCreate {
	if u != nil {
		ccc.SetUpdatedAt(*u)
	}
	return ccc
}

// SetDeletedAt sets the "deleted_at" field.
func (ccc *CashControlCreate) SetDeletedAt(u uint32) *CashControlCreate {
	ccc.mutation.SetDeletedAt(u)
	return ccc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ccc *CashControlCreate) SetNillableDeletedAt(u *uint32) *CashControlCreate {
	if u != nil {
		ccc.SetDeletedAt(*u)
	}
	return ccc
}

// SetEntID sets the "ent_id" field.
func (ccc *CashControlCreate) SetEntID(u uuid.UUID) *CashControlCreate {
	ccc.mutation.SetEntID(u)
	return ccc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ccc *CashControlCreate) SetNillableEntID(u *uuid.UUID) *CashControlCreate {
	if u != nil {
		ccc.SetEntID(*u)
	}
	return ccc
}

// SetAppID sets the "app_id" field.
func (ccc *CashControlCreate) SetAppID(u uuid.UUID) *CashControlCreate {
	ccc.mutation.SetAppID(u)
	return ccc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ccc *CashControlCreate) SetNillableAppID(u *uuid.UUID) *CashControlCreate {
	if u != nil {
		ccc.SetAppID(*u)
	}
	return ccc
}

// SetCouponID sets the "coupon_id" field.
func (ccc *CashControlCreate) SetCouponID(u uuid.UUID) *CashControlCreate {
	ccc.mutation.SetCouponID(u)
	return ccc
}

// SetNillableCouponID sets the "coupon_id" field if the given value is not nil.
func (ccc *CashControlCreate) SetNillableCouponID(u *uuid.UUID) *CashControlCreate {
	if u != nil {
		ccc.SetCouponID(*u)
	}
	return ccc
}

// SetControlType sets the "control_type" field.
func (ccc *CashControlCreate) SetControlType(s string) *CashControlCreate {
	ccc.mutation.SetControlType(s)
	return ccc
}

// SetNillableControlType sets the "control_type" field if the given value is not nil.
func (ccc *CashControlCreate) SetNillableControlType(s *string) *CashControlCreate {
	if s != nil {
		ccc.SetControlType(*s)
	}
	return ccc
}

// SetValue sets the "value" field.
func (ccc *CashControlCreate) SetValue(d decimal.Decimal) *CashControlCreate {
	ccc.mutation.SetValue(d)
	return ccc
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ccc *CashControlCreate) SetNillableValue(d *decimal.Decimal) *CashControlCreate {
	if d != nil {
		ccc.SetValue(*d)
	}
	return ccc
}

// SetID sets the "id" field.
func (ccc *CashControlCreate) SetID(u uint32) *CashControlCreate {
	ccc.mutation.SetID(u)
	return ccc
}

// Mutation returns the CashControlMutation object of the builder.
func (ccc *CashControlCreate) Mutation() *CashControlMutation {
	return ccc.mutation
}

// Save creates the CashControl in the database.
func (ccc *CashControlCreate) Save(ctx context.Context) (*CashControl, error) {
	ccc.defaults()
	return withHooks(ctx, ccc.sqlSave, ccc.mutation, ccc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ccc *CashControlCreate) SaveX(ctx context.Context) *CashControl {
	v, err := ccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccc *CashControlCreate) Exec(ctx context.Context) error {
	_, err := ccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccc *CashControlCreate) ExecX(ctx context.Context) {
	if err := ccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccc *CashControlCreate) defaults() {
	if _, ok := ccc.mutation.CreatedAt(); !ok {
		v := cashcontrol.DefaultCreatedAt()
		ccc.mutation.SetCreatedAt(v)
	}
	if _, ok := ccc.mutation.UpdatedAt(); !ok {
		v := cashcontrol.DefaultUpdatedAt()
		ccc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ccc.mutation.DeletedAt(); !ok {
		v := cashcontrol.DefaultDeletedAt()
		ccc.mutation.SetDeletedAt(v)
	}
	if _, ok := ccc.mutation.EntID(); !ok {
		v := cashcontrol.DefaultEntID()
		ccc.mutation.SetEntID(v)
	}
	if _, ok := ccc.mutation.AppID(); !ok {
		v := cashcontrol.DefaultAppID()
		ccc.mutation.SetAppID(v)
	}
	if _, ok := ccc.mutation.CouponID(); !ok {
		v := cashcontrol.DefaultCouponID()
		ccc.mutation.SetCouponID(v)
	}
	if _, ok := ccc.mutation.ControlType(); !ok {
		v := cashcontrol.DefaultControlType
		ccc.mutation.SetControlType(v)
	}
	if _, ok := ccc.mutation.Value(); !ok {
		v := cashcontrol.DefaultValue
		ccc.mutation.SetValue(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccc *CashControlCreate) check() error {
	if _, ok := ccc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "CashControl.created_at"`)}
	}
	if _, ok := ccc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "CashControl.updated_at"`)}
	}
	if _, ok := ccc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "CashControl.deleted_at"`)}
	}
	if _, ok := ccc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "CashControl.ent_id"`)}
	}
	return nil
}

func (ccc *CashControlCreate) sqlSave(ctx context.Context) (*CashControl, error) {
	if err := ccc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	ccc.mutation.id = &_node.ID
	ccc.mutation.done = true
	return _node, nil
}

func (ccc *CashControlCreate) createSpec() (*CashControl, *sqlgraph.CreateSpec) {
	var (
		_node = &CashControl{config: ccc.config}
		_spec = sqlgraph.NewCreateSpec(cashcontrol.Table, sqlgraph.NewFieldSpec(cashcontrol.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = ccc.conflict
	if id, ok := ccc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ccc.mutation.CreatedAt(); ok {
		_spec.SetField(cashcontrol.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := ccc.mutation.UpdatedAt(); ok {
		_spec.SetField(cashcontrol.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := ccc.mutation.DeletedAt(); ok {
		_spec.SetField(cashcontrol.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := ccc.mutation.EntID(); ok {
		_spec.SetField(cashcontrol.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := ccc.mutation.AppID(); ok {
		_spec.SetField(cashcontrol.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := ccc.mutation.CouponID(); ok {
		_spec.SetField(cashcontrol.FieldCouponID, field.TypeUUID, value)
		_node.CouponID = value
	}
	if value, ok := ccc.mutation.ControlType(); ok {
		_spec.SetField(cashcontrol.FieldControlType, field.TypeString, value)
		_node.ControlType = value
	}
	if value, ok := ccc.mutation.Value(); ok {
		_spec.SetField(cashcontrol.FieldValue, field.TypeOther, value)
		_node.Value = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CashControl.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CashControlUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccc *CashControlCreate) OnConflict(opts ...sql.ConflictOption) *CashControlUpsertOne {
	ccc.conflict = opts
	return &CashControlUpsertOne{
		create: ccc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CashControl.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccc *CashControlCreate) OnConflictColumns(columns ...string) *CashControlUpsertOne {
	ccc.conflict = append(ccc.conflict, sql.ConflictColumns(columns...))
	return &CashControlUpsertOne{
		create: ccc,
	}
}

type (
	// CashControlUpsertOne is the builder for "upsert"-ing
	//  one CashControl node.
	CashControlUpsertOne struct {
		create *CashControlCreate
	}

	// CashControlUpsert is the "OnConflict" setter.
	CashControlUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *CashControlUpsert) SetCreatedAt(v uint32) *CashControlUpsert {
	u.Set(cashcontrol.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CashControlUpsert) UpdateCreatedAt() *CashControlUpsert {
	u.SetExcluded(cashcontrol.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CashControlUpsert) AddCreatedAt(v uint32) *CashControlUpsert {
	u.Add(cashcontrol.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CashControlUpsert) SetUpdatedAt(v uint32) *CashControlUpsert {
	u.Set(cashcontrol.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CashControlUpsert) UpdateUpdatedAt() *CashControlUpsert {
	u.SetExcluded(cashcontrol.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CashControlUpsert) AddUpdatedAt(v uint32) *CashControlUpsert {
	u.Add(cashcontrol.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CashControlUpsert) SetDeletedAt(v uint32) *CashControlUpsert {
	u.Set(cashcontrol.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CashControlUpsert) UpdateDeletedAt() *CashControlUpsert {
	u.SetExcluded(cashcontrol.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CashControlUpsert) AddDeletedAt(v uint32) *CashControlUpsert {
	u.Add(cashcontrol.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *CashControlUpsert) SetEntID(v uuid.UUID) *CashControlUpsert {
	u.Set(cashcontrol.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CashControlUpsert) UpdateEntID() *CashControlUpsert {
	u.SetExcluded(cashcontrol.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *CashControlUpsert) SetAppID(v uuid.UUID) *CashControlUpsert {
	u.Set(cashcontrol.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CashControlUpsert) UpdateAppID() *CashControlUpsert {
	u.SetExcluded(cashcontrol.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *CashControlUpsert) ClearAppID() *CashControlUpsert {
	u.SetNull(cashcontrol.FieldAppID)
	return u
}

// SetCouponID sets the "coupon_id" field.
func (u *CashControlUpsert) SetCouponID(v uuid.UUID) *CashControlUpsert {
	u.Set(cashcontrol.FieldCouponID, v)
	return u
}

// UpdateCouponID sets the "coupon_id" field to the value that was provided on create.
func (u *CashControlUpsert) UpdateCouponID() *CashControlUpsert {
	u.SetExcluded(cashcontrol.FieldCouponID)
	return u
}

// ClearCouponID clears the value of the "coupon_id" field.
func (u *CashControlUpsert) ClearCouponID() *CashControlUpsert {
	u.SetNull(cashcontrol.FieldCouponID)
	return u
}

// SetControlType sets the "control_type" field.
func (u *CashControlUpsert) SetControlType(v string) *CashControlUpsert {
	u.Set(cashcontrol.FieldControlType, v)
	return u
}

// UpdateControlType sets the "control_type" field to the value that was provided on create.
func (u *CashControlUpsert) UpdateControlType() *CashControlUpsert {
	u.SetExcluded(cashcontrol.FieldControlType)
	return u
}

// ClearControlType clears the value of the "control_type" field.
func (u *CashControlUpsert) ClearControlType() *CashControlUpsert {
	u.SetNull(cashcontrol.FieldControlType)
	return u
}

// SetValue sets the "value" field.
func (u *CashControlUpsert) SetValue(v decimal.Decimal) *CashControlUpsert {
	u.Set(cashcontrol.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *CashControlUpsert) UpdateValue() *CashControlUpsert {
	u.SetExcluded(cashcontrol.FieldValue)
	return u
}

// ClearValue clears the value of the "value" field.
func (u *CashControlUpsert) ClearValue() *CashControlUpsert {
	u.SetNull(cashcontrol.FieldValue)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CashControl.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(cashcontrol.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CashControlUpsertOne) UpdateNewValues() *CashControlUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(cashcontrol.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CashControl.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CashControlUpsertOne) Ignore() *CashControlUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CashControlUpsertOne) DoNothing() *CashControlUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CashControlCreate.OnConflict
// documentation for more info.
func (u *CashControlUpsertOne) Update(set func(*CashControlUpsert)) *CashControlUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CashControlUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CashControlUpsertOne) SetCreatedAt(v uint32) *CashControlUpsertOne {
	return u.Update(func(s *CashControlUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CashControlUpsertOne) AddCreatedAt(v uint32) *CashControlUpsertOne {
	return u.Update(func(s *CashControlUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CashControlUpsertOne) UpdateCreatedAt() *CashControlUpsertOne {
	return u.Update(func(s *CashControlUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CashControlUpsertOne) SetUpdatedAt(v uint32) *CashControlUpsertOne {
	return u.Update(func(s *CashControlUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CashControlUpsertOne) AddUpdatedAt(v uint32) *CashControlUpsertOne {
	return u.Update(func(s *CashControlUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CashControlUpsertOne) UpdateUpdatedAt() *CashControlUpsertOne {
	return u.Update(func(s *CashControlUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CashControlUpsertOne) SetDeletedAt(v uint32) *CashControlUpsertOne {
	return u.Update(func(s *CashControlUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CashControlUpsertOne) AddDeletedAt(v uint32) *CashControlUpsertOne {
	return u.Update(func(s *CashControlUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CashControlUpsertOne) UpdateDeletedAt() *CashControlUpsertOne {
	return u.Update(func(s *CashControlUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *CashControlUpsertOne) SetEntID(v uuid.UUID) *CashControlUpsertOne {
	return u.Update(func(s *CashControlUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CashControlUpsertOne) UpdateEntID() *CashControlUpsertOne {
	return u.Update(func(s *CashControlUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *CashControlUpsertOne) SetAppID(v uuid.UUID) *CashControlUpsertOne {
	return u.Update(func(s *CashControlUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CashControlUpsertOne) UpdateAppID() *CashControlUpsertOne {
	return u.Update(func(s *CashControlUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *CashControlUpsertOne) ClearAppID() *CashControlUpsertOne {
	return u.Update(func(s *CashControlUpsert) {
		s.ClearAppID()
	})
}

// SetCouponID sets the "coupon_id" field.
func (u *CashControlUpsertOne) SetCouponID(v uuid.UUID) *CashControlUpsertOne {
	return u.Update(func(s *CashControlUpsert) {
		s.SetCouponID(v)
	})
}

// UpdateCouponID sets the "coupon_id" field to the value that was provided on create.
func (u *CashControlUpsertOne) UpdateCouponID() *CashControlUpsertOne {
	return u.Update(func(s *CashControlUpsert) {
		s.UpdateCouponID()
	})
}

// ClearCouponID clears the value of the "coupon_id" field.
func (u *CashControlUpsertOne) ClearCouponID() *CashControlUpsertOne {
	return u.Update(func(s *CashControlUpsert) {
		s.ClearCouponID()
	})
}

// SetControlType sets the "control_type" field.
func (u *CashControlUpsertOne) SetControlType(v string) *CashControlUpsertOne {
	return u.Update(func(s *CashControlUpsert) {
		s.SetControlType(v)
	})
}

// UpdateControlType sets the "control_type" field to the value that was provided on create.
func (u *CashControlUpsertOne) UpdateControlType() *CashControlUpsertOne {
	return u.Update(func(s *CashControlUpsert) {
		s.UpdateControlType()
	})
}

// ClearControlType clears the value of the "control_type" field.
func (u *CashControlUpsertOne) ClearControlType() *CashControlUpsertOne {
	return u.Update(func(s *CashControlUpsert) {
		s.ClearControlType()
	})
}

// SetValue sets the "value" field.
func (u *CashControlUpsertOne) SetValue(v decimal.Decimal) *CashControlUpsertOne {
	return u.Update(func(s *CashControlUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *CashControlUpsertOne) UpdateValue() *CashControlUpsertOne {
	return u.Update(func(s *CashControlUpsert) {
		s.UpdateValue()
	})
}

// ClearValue clears the value of the "value" field.
func (u *CashControlUpsertOne) ClearValue() *CashControlUpsertOne {
	return u.Update(func(s *CashControlUpsert) {
		s.ClearValue()
	})
}

// Exec executes the query.
func (u *CashControlUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CashControlCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CashControlUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CashControlUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CashControlUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CashControlCreateBulk is the builder for creating many CashControl entities in bulk.
type CashControlCreateBulk struct {
	config
	err      error
	builders []*CashControlCreate
	conflict []sql.ConflictOption
}

// Save creates the CashControl entities in the database.
func (cccb *CashControlCreateBulk) Save(ctx context.Context) ([]*CashControl, error) {
	if cccb.err != nil {
		return nil, cccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cccb.builders))
	nodes := make([]*CashControl, len(cccb.builders))
	mutators := make([]Mutator, len(cccb.builders))
	for i := range cccb.builders {
		func(i int, root context.Context) {
			builder := cccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CashControlMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cccb *CashControlCreateBulk) SaveX(ctx context.Context) []*CashControl {
	v, err := cccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cccb *CashControlCreateBulk) Exec(ctx context.Context) error {
	_, err := cccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cccb *CashControlCreateBulk) ExecX(ctx context.Context) {
	if err := cccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CashControl.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CashControlUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cccb *CashControlCreateBulk) OnConflict(opts ...sql.ConflictOption) *CashControlUpsertBulk {
	cccb.conflict = opts
	return &CashControlUpsertBulk{
		create: cccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CashControl.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cccb *CashControlCreateBulk) OnConflictColumns(columns ...string) *CashControlUpsertBulk {
	cccb.conflict = append(cccb.conflict, sql.ConflictColumns(columns...))
	return &CashControlUpsertBulk{
		create: cccb,
	}
}

// CashControlUpsertBulk is the builder for "upsert"-ing
// a bulk of CashControl nodes.
type CashControlUpsertBulk struct {
	create *CashControlCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CashControl.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(cashcontrol.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CashControlUpsertBulk) UpdateNewValues() *CashControlUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(cashcontrol.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CashControl.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CashControlUpsertBulk) Ignore() *CashControlUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CashControlUpsertBulk) DoNothing() *CashControlUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CashControlCreateBulk.OnConflict
// documentation for more info.
func (u *CashControlUpsertBulk) Update(set func(*CashControlUpsert)) *CashControlUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CashControlUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CashControlUpsertBulk) SetCreatedAt(v uint32) *CashControlUpsertBulk {
	return u.Update(func(s *CashControlUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CashControlUpsertBulk) AddCreatedAt(v uint32) *CashControlUpsertBulk {
	return u.Update(func(s *CashControlUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CashControlUpsertBulk) UpdateCreatedAt() *CashControlUpsertBulk {
	return u.Update(func(s *CashControlUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CashControlUpsertBulk) SetUpdatedAt(v uint32) *CashControlUpsertBulk {
	return u.Update(func(s *CashControlUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CashControlUpsertBulk) AddUpdatedAt(v uint32) *CashControlUpsertBulk {
	return u.Update(func(s *CashControlUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CashControlUpsertBulk) UpdateUpdatedAt() *CashControlUpsertBulk {
	return u.Update(func(s *CashControlUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CashControlUpsertBulk) SetDeletedAt(v uint32) *CashControlUpsertBulk {
	return u.Update(func(s *CashControlUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CashControlUpsertBulk) AddDeletedAt(v uint32) *CashControlUpsertBulk {
	return u.Update(func(s *CashControlUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CashControlUpsertBulk) UpdateDeletedAt() *CashControlUpsertBulk {
	return u.Update(func(s *CashControlUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *CashControlUpsertBulk) SetEntID(v uuid.UUID) *CashControlUpsertBulk {
	return u.Update(func(s *CashControlUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CashControlUpsertBulk) UpdateEntID() *CashControlUpsertBulk {
	return u.Update(func(s *CashControlUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *CashControlUpsertBulk) SetAppID(v uuid.UUID) *CashControlUpsertBulk {
	return u.Update(func(s *CashControlUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CashControlUpsertBulk) UpdateAppID() *CashControlUpsertBulk {
	return u.Update(func(s *CashControlUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *CashControlUpsertBulk) ClearAppID() *CashControlUpsertBulk {
	return u.Update(func(s *CashControlUpsert) {
		s.ClearAppID()
	})
}

// SetCouponID sets the "coupon_id" field.
func (u *CashControlUpsertBulk) SetCouponID(v uuid.UUID) *CashControlUpsertBulk {
	return u.Update(func(s *CashControlUpsert) {
		s.SetCouponID(v)
	})
}

// UpdateCouponID sets the "coupon_id" field to the value that was provided on create.
func (u *CashControlUpsertBulk) UpdateCouponID() *CashControlUpsertBulk {
	return u.Update(func(s *CashControlUpsert) {
		s.UpdateCouponID()
	})
}

// ClearCouponID clears the value of the "coupon_id" field.
func (u *CashControlUpsertBulk) ClearCouponID() *CashControlUpsertBulk {
	return u.Update(func(s *CashControlUpsert) {
		s.ClearCouponID()
	})
}

// SetControlType sets the "control_type" field.
func (u *CashControlUpsertBulk) SetControlType(v string) *CashControlUpsertBulk {
	return u.Update(func(s *CashControlUpsert) {
		s.SetControlType(v)
	})
}

// UpdateControlType sets the "control_type" field to the value that was provided on create.
func (u *CashControlUpsertBulk) UpdateControlType() *CashControlUpsertBulk {
	return u.Update(func(s *CashControlUpsert) {
		s.UpdateControlType()
	})
}

// ClearControlType clears the value of the "control_type" field.
func (u *CashControlUpsertBulk) ClearControlType() *CashControlUpsertBulk {
	return u.Update(func(s *CashControlUpsert) {
		s.ClearControlType()
	})
}

// SetValue sets the "value" field.
func (u *CashControlUpsertBulk) SetValue(v decimal.Decimal) *CashControlUpsertBulk {
	return u.Update(func(s *CashControlUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *CashControlUpsertBulk) UpdateValue() *CashControlUpsertBulk {
	return u.Update(func(s *CashControlUpsert) {
		s.UpdateValue()
	})
}

// ClearValue clears the value of the "value" field.
func (u *CashControlUpsertBulk) ClearValue() *CashControlUpsertBulk {
	return u.Update(func(s *CashControlUpsert) {
		s.ClearValue()
	})
}

// Exec executes the query.
func (u *CashControlUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the CashControlCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CashControlCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CashControlUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/goodachievement"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// GoodAchievementUpdate is the builder for updating GoodAchievement entities.
type GoodAchievementUpdate struct {
	config
	hooks     []Hook
	mutation  *GoodAchievementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GoodAchievementUpdate builder.
func (gau *GoodAchievementUpdate) Where(ps ...predicate.GoodAchievement) *GoodAchievementUpdate {
	gau.mutation.Where(ps...)
	return gau
}

// SetCreatedAt sets the "created_at" field.
func (gau *GoodAchievementUpdate) SetCreatedAt(u uint32) *GoodAchievementUpdate {
	gau.mutation.ResetCreatedAt()
	gau.mutation.SetCreatedAt(u)
	return gau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gau *GoodAchievementUpdate) SetNillableCreatedAt(u *uint32) *GoodAchievementUpdate {
	if u != nil {
		gau.SetCreatedAt(*u)
	}
	return gau
}

// AddCreatedAt adds u to the "created_at" field.
func (gau *GoodAchievementUpdate) AddCreatedAt(u int32) *GoodAchievementUpdate {
	gau.mutation.AddCreatedAt(u)
	return gau
}

// SetUpdatedAt sets the "updated_at" field.
func (gau *GoodAchievementUpdate) SetUpdatedAt(u uint32) *GoodAchievementUpdate {
	gau.mutation.ResetUpdatedAt()
	gau.mutation.SetUpdatedAt(u)
	return gau
}

// AddUpdatedAt adds u to the "updated_at" field.
func (gau *GoodAchievementUpdate) AddUpdatedAt(u int32) *GoodAchievementUpdate {
	gau.mutation.AddUpdatedAt(u)
	return gau
}

// SetDeletedAt sets the "deleted_at" field.
func (gau *GoodAchievementUpdate) SetDeletedAt(u uint32) *GoodAchievementUpdate {
	gau.mutation.ResetDeletedAt()
	gau.mutation.SetDeletedAt(u)
	return gau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gau *GoodAchievementUpdate) SetNillableDeletedAt(u *uint32) *GoodAchievementUpdate {
	if u != nil {
		gau.SetDeletedAt(*u)
	}
	return gau
}

// AddDeletedAt adds u to the "deleted_at" field.
func (gau *GoodAchievementUpdate) AddDeletedAt(u int32) *GoodAchievementUpdate {
	gau.mutation.AddDeletedAt(u)
	return gau
}

// SetEntID sets the "ent_id" field.
func (gau *GoodAchievementUpdate) SetEntID(u uuid.UUID) *GoodAchievementUpdate {
	gau.mutation.SetEntID(u)
	return gau
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (gau *GoodAchievementUpdate) SetNillableEntID(u *uuid.UUID) *GoodAchievementUpdate {
	if u != nil {
		gau.SetEntID(*u)
	}
	return gau
}

// SetAppID sets the "app_id" field.
func (gau *GoodAchievementUpdate) SetAppID(u uuid.UUID) *GoodAchievementUpdate {
	gau.mutation.SetAppID(u)
	return gau
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (gau *GoodAchievementUpdate) SetNillableAppID(u *uuid.UUID) *GoodAchievementUpdate {
	if u != nil {
		gau.SetAppID(*u)
	}
	return gau
}

// ClearAppID clears the value of the "app_id" field.
func (gau *GoodAchievementUpdate) ClearAppID() *GoodAchievementUpdate {
	gau.mutation.ClearAppID()
	return gau
}

// SetUserID sets the "user_id" field.
func (gau *GoodAchievementUpdate) SetUserID(u uuid.UUID) *GoodAchievementUpdate {
	gau.mutation.SetUserID(u)
	return gau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (gau *GoodAchievementUpdate) SetNillableUserID(u *uuid.UUID) *GoodAchievementUpdate {
	if u != nil {
		gau.SetUserID(*u)
	}
	return gau
}

// ClearUserID clears the value of the "user_id" field.
func (gau *GoodAchievementUpdate) ClearUserID() *GoodAchievementUpdate {
	gau.mutation.ClearUserID()
	return gau
}

// SetGoodID sets the "good_id" field.
func (gau *GoodAchievementUpdate) SetGoodID(u uuid.UUID) *GoodAchievementUpdate {
	gau.mutation.SetGoodID(u)
	return gau
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (gau *GoodAchievementUpdate) SetNillableGoodID(u *uuid.UUID) *GoodAchievementUpdate {
	if u != nil {
		gau.SetGoodID(*u)
	}
	return gau
}

// ClearGoodID clears the value of the "good_id" field.
func (gau *GoodAchievementUpdate) ClearGoodID() *GoodAchievementUpdate {
	gau.mutation.ClearGoodID()
	return gau
}

// SetAppGoodID sets the "app_good_id" field.
func (gau *GoodAchievementUpdate) SetAppGoodID(u uuid.UUID) *GoodAchievementUpdate {
	gau.mutation.SetAppGoodID(u)
	return gau
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (gau *GoodAchievementUpdate) SetNillableAppGoodID(u *uuid.UUID) *GoodAchievementUpdate {
	if u != nil {
		gau.SetAppGoodID(*u)
	}
	return gau
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (gau *GoodAchievementUpdate) ClearAppGoodID() *GoodAchievementUpdate {
	gau.mutation.ClearAppGoodID()
	return gau
}

// SetTotalUnits sets the "total_units" field.
func (gau *GoodAchievementUpdate) SetTotalUnits(d decimal.Decimal) *GoodAchievementUpdate {
	gau.mutation.SetTotalUnits(d)
	return gau
}

// SetNillableTotalUnits sets the "total_units" field if the given value is not nil.
func (gau *GoodAchievementUpdate) SetNillableTotalUnits(d *decimal.Decimal) *GoodAchievementUpdate {
	if d != nil {
		gau.SetTotalUnits(*d)
	}
	return gau
}

// ClearTotalUnits clears the value of the "total_units" field.
func (gau *GoodAchievementUpdate) ClearTotalUnits() *GoodAchievementUpdate {
	gau.mutation.ClearTotalUnits()
	return gau
}

// SetSelfUnits sets the "self_units" field.
func (gau *GoodAchievementUpdate) SetSelfUnits(d decimal.Decimal) *GoodAchievementUpdate {
	gau.mutation.SetSelfUnits(d)
	return gau
}

// SetNillableSelfUnits sets the "self_units" field if the given value is not nil.
func (gau *GoodAchievementUpdate) SetNillableSelfUnits(d *decimal.Decimal) *GoodAchievementUpdate {
	if d != nil {
		gau.SetSelfUnits(*d)
	}
	return gau
}

// ClearSelfUnits clears the value of the "self_units" field.
func (gau *GoodAchievementUpdate) ClearSelfUnits() *GoodAchievementUpdate {
	gau.mutation.ClearSelfUnits()
	return gau
}

// SetTotalAmountUsd sets the "total_amount_usd" field.
func (gau *GoodAchievementUpdate) SetTotalAmountUsd(d decimal.Decimal) *GoodAchievementUpdate {
	gau.mutation.SetTotalAmountUsd(d)
	return gau
}

// SetNillableTotalAmountUsd sets the "total_amount_usd" field if the given value is not nil.
func (gau *GoodAchievementUpdate) SetNillableTotalAmountUsd(d *decimal.Decimal) *GoodAchievementUpdate {
	if d != nil {
		gau.SetTotalAmountUsd(*d)
	}
	return gau
}

// ClearTotalAmountUsd clears the value of the "total_amount_usd" field.
func (gau *GoodAchievementUpdate) ClearTotalAmountUsd() *GoodAchievementUpdate {
	gau.mutation.ClearTotalAmountUsd()
	return gau
}

// SetSelfAmountUsd sets the "self_amount_usd" field.
func (gau *GoodAchievementUpdate) SetSelfAmountUsd(d decimal.Decimal) *GoodAchievementUpdate {
	gau.mutation.SetSelfAmountUsd(d)
	return gau
}

// SetNillableSelfAmountUsd sets the "self_amount_usd" field if the given value is not nil.
func (gau *GoodAchievementUpdate) SetNillableSelfAmountUsd(d *decimal.Decimal) *GoodAchievementUpdate {
	if d != nil {
		gau.SetSelfAmountUsd(*d)
	}
	return gau
}

// ClearSelfAmountUsd clears the value of the "self_amount_usd" field.
func (gau *GoodAchievementUpdate) ClearSelfAmountUsd() *GoodAchievementUpdate {
	gau.mutation.ClearSelfAmountUsd()
	return gau
}

// SetTotalCommissionUsd sets the "total_commission_usd" field.
func (gau *GoodAchievementUpdate) SetTotalCommissionUsd(d decimal.Decimal) *GoodAchievementUpdate {
	gau.mutation.SetTotalCommissionUsd(d)
	return gau
}

// SetNillableTotalCommissionUsd sets the "total_commission_usd" field if the given value is not nil.
func (gau *GoodAchievementUpdate) SetNillableTotalCommissionUsd(d *decimal.Decimal) *GoodAchievementUpdate {
	if d != nil {
		gau.SetTotalCommissionUsd(*d)
	}
	return gau
}

// ClearTotalCommissionUsd clears the value of the "total_commission_usd" field.
func (gau *GoodAchievementUpdate) ClearTotalCommissionUsd() *GoodAchievementUpdate {
	gau.mutation.ClearTotalCommissionUsd()
	return gau
}

// SetSelfCommissionUsd sets the "self_commission_usd" field.
func (gau *GoodAchievementUpdate) SetSelfCommissionUsd(d decimal.Decimal) *GoodAchievementUpdate {
	gau.mutation.SetSelfCommissionUsd(d)
	return gau
}

// SetNillableSelfCommissionUsd sets the "self_commission_usd" field if the given value is not nil.
func (gau *GoodAchievementUpdate) SetNillableSelfCommissionUsd(d *decimal.Decimal) *GoodAchievementUpdate {
	if d != nil {
		gau.SetSelfCommissionUsd(*d)
	}
	return gau
}

// ClearSelfCommissionUsd clears the value of the "self_commission_usd" field.
func (gau *GoodAchievementUpdate) ClearSelfCommissionUsd() *GoodAchievementUpdate {
	gau.mutation.ClearSelfCommissionUsd()
	return gau
}

// Mutation returns the GoodAchievementMutation object of the builder.
func (gau *GoodAchievementUpdate) Mutation() *GoodAchievementMutation {
	return gau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gau *GoodAchievementUpdate) Save(ctx context.Context) (int, error) {
	gau.defaults()
	return withHooks(ctx, gau.sqlSave, gau.mutation, gau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gau *GoodAchievementUpdate) SaveX(ctx context.Context) int {
	affected, err := gau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gau *GoodAchievementUpdate) Exec(ctx context.Context) error {
	_, err := gau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gau *GoodAchievementUpdate) ExecX(ctx context.Context) {
	if err := gau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gau *GoodAchievementUpdate) defaults() {
	if _, ok := gau.mutation.UpdatedAt(); !ok {
		v := goodachievement.UpdateDefaultUpdatedAt()
		gau.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gau *GoodAchievementUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GoodAchievementUpdate {
	gau.modifiers = append(gau.modifiers, modifiers...)
	return gau
}

func (gau *GoodAchievementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(goodachievement.Table, goodachievement.Columns, sqlgraph.NewFieldSpec(goodachievement.FieldID, field.TypeUint32))
	if ps := gau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gau.mutation.CreatedAt(); ok {
		_spec.SetField(goodachievement.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := gau.mutation.AddedCreatedAt(); ok {
		_spec.AddField(goodachievement.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := gau.mutation.UpdatedAt(); ok {
		_spec.SetField(goodachievement.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := gau.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(goodachievement.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := gau.mutation.DeletedAt(); ok {
		_spec.SetField(goodachievement.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := gau.mutation.AddedDeletedAt(); ok {
		_spec.AddField(goodachievement.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := gau.mutation.EntID(); ok {
		_spec.SetField(goodachievement.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := gau.mutation.AppID(); ok {
		_spec.SetField(goodachievement.FieldAppID, field.TypeUUID, value)
	}
	if gau.mutation.AppIDCleared() {
		_spec.ClearField(goodachievement.FieldAppID, field.TypeUUID)
	}
	if value, ok := gau.mutation.UserID(); ok {
		_spec.SetField(goodachievement.FieldUserID, field.TypeUUID, value)
	}
	if gau.mutation.UserIDCleared() {
		_spec.ClearField(goodachievement.FieldUserID, field.TypeUUID)
	}
	if value, ok := gau.mutation.GoodID(); ok {
		_spec.SetField(goodachievement.FieldGoodID, field.TypeUUID, value)
	}
	if gau.mutation.GoodIDCleared() {
		_spec.ClearField(goodachievement.FieldGoodID, field.TypeUUID)
	}
	if value, ok := gau.mutation.AppGoodID(); ok {
		_spec.SetField(goodachievement.FieldAppGoodID, field.TypeUUID, value)
	}
	if gau.mutation.AppGoodIDCleared() {
		_spec.ClearField(goodachievement.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := gau.mutation.TotalUnits(); ok {
		_spec.SetField(goodachievement.FieldTotalUnits, field.TypeOther, value)
	}
	if gau.mutation.TotalUnitsCleared() {
		_spec.ClearField(goodachievement.FieldTotalUnits, field.TypeOther)
	}
	if value, ok := gau.mutation.SelfUnits(); ok {
		_spec.SetField(goodachievement.FieldSelfUnits, field.TypeOther, value)
	}
	if gau.mutation.SelfUnitsCleared() {
		_spec.ClearField(goodachievement.FieldSelfUnits, field.TypeOther)
	}
	if value, ok := gau.mutation.TotalAmountUsd(); ok {
		_spec.SetField(goodachievement.FieldTotalAmountUsd, field.TypeOther, value)
	}
	if gau.mutation.TotalAmountUsdCleared() {
		_spec.ClearField(goodachievement.FieldTotalAmountUsd, field.TypeOther)
	}
	if value, ok := gau.mutation.SelfAmountUsd(); ok {
		_spec.SetField(goodachievement.FieldSelfAmountUsd, field.TypeOther, value)
	}
	if gau.mutation.SelfAmountUsdCleared() {
		_spec.ClearField(goodachievement.FieldSelfAmountUsd, field.TypeOther)
	}
	if value, ok := gau.mutation.TotalCommissionUsd(); ok {
		_spec.SetField(goodachievement.FieldTotalCommissionUsd, field.TypeOther, value)
	}
	if gau.mutation.TotalCommissionUsdCleared() {
		_spec.ClearField(goodachievement.FieldTotalCommissionUsd, field.TypeOther)
	}
	if value, ok := gau.mutation.SelfCommissionUsd(); ok {
		_spec.SetField(goodachievement.FieldSelfCommissionUsd, field.TypeOther, value)
	}
	if gau.mutation.SelfCommissionUsdCleared() {
		_spec.ClearField(goodachievement.FieldSelfCommissionUsd, field.TypeOther)
	}
	_spec.AddModifiers(gau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, gau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodachievement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gau.mutation.done = true
	return n, nil
}

// GoodAchievementUpdateOne is the builder for updating a single GoodAchievement entity.
type GoodAchievementUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GoodAchievementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (gauo *GoodAchievementUpdateOne) SetCreatedAt(u uint32) *GoodAchievementUpdateOne {
	gauo.mutation.ResetCreatedAt()
	gauo.mutation.SetCreatedAt(u)
	return gauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gauo *GoodAchievementUpdateOne) SetNillableCreatedAt(u *uint32) *GoodAchievementUpdateOne {
	if u != nil {
		gauo.SetCreatedAt(*u)
	}
	return gauo
}

// AddCreatedAt adds u to the "created_at" field.
func (gauo *GoodAchievementUpdateOne) AddCreatedAt(u int32) *GoodAchievementUpdateOne {
	gauo.mutation.AddCreatedAt(u)
	return gauo
}

// SetUpdatedAt sets the "updated_at" field.
func (gauo *GoodAchievementUpdateOne) SetUpdatedAt(u uint32) *GoodAchievementUpdateOne {
	gauo.mutation.ResetUpdatedAt()
	gauo.mutation.SetUpdatedAt(u)
	return gauo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (gauo *GoodAchievementUpdateOne) AddUpdatedAt(u int32) *GoodAchievementUpdateOne {
	gauo.mutation.AddUpdatedAt(u)
	return gauo
}

// SetDeletedAt sets the "deleted_at" field.
func (gauo *GoodAchievementUpdateOne) SetDeletedAt(u uint32) *GoodAchievementUpdateOne {
	gauo.mutation.ResetDeletedAt()
	gauo.mutation.SetDeletedAt(u)
	return gauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gauo *GoodAchievementUpdateOne) SetNillableDeletedAt(u *uint32) *GoodAchievementUpdateOne {
	if u != nil {
		gauo.SetDeletedAt(*u)
	}
	return gauo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (gauo *GoodAchievementUpdateOne) AddDeletedAt(u int32) *GoodAchievementUpdateOne {
	gauo.mutation.AddDeletedAt(u)
	return gauo
}

// SetEntID sets the "ent_id" field.
func (gauo *GoodAchievementUpdateOne) SetEntID(u uuid.UUID) *GoodAchievementUpdateOne {
	gauo.mutation.SetEntID(u)
	return gauo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (gauo *GoodAchievementUpdateOne) SetNillableEntID(u *uuid.UUID) *GoodAchievementUpdateOne {
	if u != nil {
		gauo.SetEntID(*u)
	}
	return gauo
}

// SetAppID sets the "app_id" field.
func (gauo *GoodAchievementUpdateOne) SetAppID(u uuid.UUID) *GoodAchievementUpdateOne {
	gauo.mutation.SetAppID(u)
	return gauo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (gauo *GoodAchievementUpdateOne) SetNillableAppID(u *uuid.UUID) *GoodAchievementUpdateOne {
	if u != nil {
		gauo.SetAppID(*u)
	}
	return gauo
}

// ClearAppID clears the value of the "app_id" field.
func (gauo *GoodAchievementUpdateOne) ClearAppID() *GoodAchievementUpdateOne {
	gauo.mutation.ClearAppID()
	return gauo
}

// SetUserID sets the "user_id" field.
func (gauo *GoodAchievementUpdateOne) SetUserID(u uuid.UUID) *GoodAchievementUpdateOne {
	gauo.mutation.SetUserID(u)
	return gauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (gauo *GoodAchievementUpdateOne) SetNillableUserID(u *uuid.UUID) *GoodAchievementUpdateOne {
	if u != nil {
		gauo.SetUserID(*u)
	}
	return gauo
}

// ClearUserID clears the value of the "user_id" field.
func (gauo *GoodAchievementUpdateOne) ClearUserID() *GoodAchievementUpdateOne {
	gauo.mutation.ClearUserID()
	return gauo
}

// SetGoodID sets the "good_id" field.
func (gauo *GoodAchievementUpdateOne) SetGoodID(u uuid.UUID) *GoodAchievementUpdateOne {
	gauo.mutation.SetGoodID(u)
	return gauo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (gauo *GoodAchievementUpdateOne) SetNillableGoodID(u *uuid.UUID) *GoodAchievementUpdateOne {
	if u != nil {
		gauo.SetGoodID(*u)
	}
	return gauo
}

// ClearGoodID clears the value of the "good_id" field.
func (gauo *GoodAchievementUpdateOne) ClearGoodID() *GoodAchievementUpdateOne {
	gauo.mutation.ClearGoodID()
	return gauo
}

// SetAppGoodID sets the "app_good_id" field.
func (gauo *GoodAchievementUpdateOne) SetAppGoodID(u uuid.UUID) *GoodAchievementUpdateOne {
	gauo.mutation.SetAppGoodID(u)
	return gauo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (gauo *GoodAchievementUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *GoodAchievementUpdateOne {
	if u != nil {
		gauo.SetAppGoodID(*u)
	}
	return gauo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (gauo *GoodAchievementUpdateOne) ClearAppGoodID() *GoodAchievementUpdateOne {
	gauo.mutation.ClearAppGoodID()
	return gauo
}

// SetTotalUnits sets the "total_units" field.
func (gauo *GoodAchievementUpdateOne) SetTotalUnits(d decimal.Decimal) *GoodAchievementUpdateOne {
	gauo.mutation.SetTotalUnits(d)
	return gauo
}

// SetNillableTotalUnits sets the "total_units" field if the given value is not nil.
func (gauo *GoodAchievementUpdateOne) SetNillableTotalUnits(d *decimal.Decimal) *GoodAchievementUpdateOne {
	if d != nil {
		gauo.SetTotalUnits(*d)
	}
	return gauo
}

// ClearTotalUnits clears the value of the "total_units" field.
func (gauo *GoodAchievementUpdateOne) ClearTotalUnits() *GoodAchievementUpdateOne {
	gauo.mutation.ClearTotalUnits()
	return gauo
}

// SetSelfUnits sets the "self_units" field.
func (gauo *GoodAchievementUpdateOne) SetSelfUnits(d decimal.Decimal) *GoodAchievementUpdateOne {
	gauo.mutation.SetSelfUnits(d)
	return gauo
}

// SetNillableSelfUnits sets the "self_units" field if the given value is not nil.
func (gauo *GoodAchievementUpdateOne) SetNillableSelfUnits(d *decimal.Decimal) *GoodAchievementUpdateOne {
	if d != nil {
		gauo.SetSelfUnits(*d)
	}
	return gauo
}

// ClearSelfUnits clears the value of the "self_units" field.
func (gauo *GoodAchievementUpdateOne) ClearSelfUnits() *GoodAchievementUpdateOne {
	gauo.mutation.ClearSelfUnits()
	return gauo
}

// SetTotalAmountUsd sets the "total_amount_usd" field.
func (gauo *GoodAchievementUpdateOne) SetTotalAmountUsd(d decimal.Decimal) *GoodAchievementUpdateOne {
	gauo.mutation.SetTotalAmountUsd(d)
	return gauo
}

// SetNillableTotalAmountUsd sets the "total_amount_usd" field if the given value is not nil.
func (gauo *GoodAchievementUpdateOne) SetNillableTotalAmountUsd(d *decimal.Decimal) *GoodAchievementUpdateOne {
	if d != nil {
		gauo.SetTotalAmountUsd(*d)
	}
	return gauo
}

// ClearTotalAmountUsd clears the value of the "total_amount_usd" field.
func (gauo *GoodAchievementUpdateOne) ClearTotalAmountUsd() *GoodAchievementUpdateOne {
	gauo.mutation.ClearTotalAmountUsd()
	return gauo
}

// SetSelfAmountUsd sets the "self_amount_usd" field.
func (gauo *GoodAchievementUpdateOne) SetSelfAmountUsd(d decimal.Decimal) *GoodAchievementUpdateOne {
	gauo.mutation.SetSelfAmountUsd(d)
	return gauo
}

// SetNillableSelfAmountUsd sets the "self_amount_usd" field if the given value is not nil.
func (gauo *GoodAchievementUpdateOne) SetNillableSelfAmountUsd(d *decimal.Decimal) *GoodAchievementUpdateOne {
	if d != nil {
		gauo.SetSelfAmountUsd(*d)
	}
	return gauo
}

// ClearSelfAmountUsd clears the value of the "self_amount_usd" field.
func (gauo *GoodAchievementUpdateOne) ClearSelfAmountUsd() *GoodAchievementUpdateOne {
	gauo.mutation.ClearSelfAmountUsd()
	return gauo
}

// SetTotalCommissionUsd sets the "total_commission_usd" field.
func (gauo *GoodAchievementUpdateOne) SetTotalCommissionUsd(d decimal.Decimal) *GoodAchievementUpdateOne {
	gauo.mutation.SetTotalCommissionUsd(d)
	return gauo
}

// SetNillableTotalCommissionUsd sets the "total_commission_usd" field if the given value is not nil.
func (gauo *GoodAchievementUpdateOne) SetNillableTotalCommissionUsd(d *decimal.Decimal) *GoodAchievementUpdateOne {
	if d != nil {
		gauo.SetTotalCommissionUsd(*d)
	}
	return gauo
}

// ClearTotalCommissionUsd clears the value of the "total_commission_usd" field.
func (gauo *GoodAchievementUpdateOne) ClearTotalCommissionUsd() *GoodAchievementUpdateOne {
	gauo.mutation.ClearTotalCommissionUsd()
	return gauo
}

// SetSelfCommissionUsd sets the "self_commission_usd" field.
func (gauo *GoodAchievementUpdateOne) SetSelfCommissionUsd(d decimal.Decimal) *GoodAchievementUpdateOne {
	gauo.mutation.SetSelfCommissionUsd(d)
	return gauo
}

// SetNillableSelfCommissionUsd sets the "self_commission_usd" field if the given value is not nil.
func (gauo *GoodAchievementUpdateOne) SetNillableSelfCommissionUsd(d *decimal.Decimal) *GoodAchievementUpdateOne {
	if d != nil {
		gauo.SetSelfCommissionUsd(*d)
	}
	return gauo
}

// ClearSelfCommissionUsd clears the value of the "self_commission_usd" field.
func (gauo *GoodAchievementUpdateOne) ClearSelfCommissionUsd() *GoodAchievementUpdateOne {
	gauo.mutation.ClearSelfCommissionUsd()
	return gauo
}

// Mutation returns the GoodAchievementMutation object of the builder.
func (gauo *GoodAchievementUpdateOne) Mutation() *GoodAchievementMutation {
	return gauo.mutation
}

// Where appends a list predicates to the GoodAchievementUpdate builder.
func (gauo *GoodAchievementUpdateOne) Where(ps ...predicate.GoodAchievement) *GoodAchievementUpdateOne {
	gauo.mutation.Where(ps...)
	return gauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gauo *GoodAchievementUpdateOne) Select(field string, fields ...string) *GoodAchievementUpdateOne {
	gauo.fields = append([]string{field}, fields...)
	return gauo
}

// Save executes the query and returns the updated GoodAchievement entity.
func (gauo *GoodAchievementUpdateOne) Save(ctx context.Context) (*GoodAchievement, error) {
	gauo.defaults()
	return withHooks(ctx, gauo.sqlSave, gauo.mutation, gauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gauo *GoodAchievementUpdateOne) SaveX(ctx context.Context) *GoodAchievement {
	node, err := gauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gauo *GoodAchievementUpdateOne) Exec(ctx context.Context) error {
	_, err := gauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gauo *GoodAchievementUpdateOne) ExecX(ctx context.Context) {
	if err := gauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gauo *GoodAchievementUpdateOne) defaults() {
	if _, ok := gauo.mutation.UpdatedAt(); !ok {
		v := goodachievement.UpdateDefaultUpdatedAt()
		gauo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gauo *GoodAchievementUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GoodAchievementUpdateOne {
	gauo.modifiers = append(gauo.modifiers, modifiers...)
	return gauo
}

func (gauo *GoodAchievementUpdateOne) sqlSave(ctx context.Context) (_node *GoodAchievement, err error) {
	_spec := sqlgraph.NewUpdateSpec(goodachievement.Table, goodachievement.Columns, sqlgraph.NewFieldSpec(goodachievement.FieldID, field.TypeUint32))
	id, ok := gauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "GoodAchievement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodachievement.FieldID)
		for _, f := range fields {
			if !goodachievement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != goodachievement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gauo.mutation.CreatedAt(); ok {
		_spec.SetField(goodachievement.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := gauo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(goodachievement.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := gauo.mutation.UpdatedAt(); ok {
		_spec.SetField(goodachievement.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := gauo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(goodachievement.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := gauo.mutation.DeletedAt(); ok {
		_spec.SetField(goodachievement.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := gauo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(goodachievement.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := gauo.mutation.EntID(); ok {
		_spec.SetField(goodachievement.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := gauo.mutation.AppID(); ok {
		_spec.SetField(goodachievement.FieldAppID, field.TypeUUID, value)
	}
	if gauo.mutation.AppIDCleared() {
		_spec.ClearField(goodachievement.FieldAppID, field.TypeUUID)
	}
	if value, ok := gauo.mutation.UserID(); ok {
		_spec.SetField(goodachievement.FieldUserID, field.TypeUUID, value)
	}
	if gauo.mutation.UserIDCleared() {
		_spec.ClearField(goodachievement.FieldUserID, field.TypeUUID)
	}
	if value, ok := gauo.mutation.GoodID(); ok {
		_spec.SetField(goodachievement.FieldGoodID, field.TypeUUID, value)
	}
	if gauo.mutation.GoodIDCleared() {
		_spec.ClearField(goodachievement.FieldGoodID, field.TypeUUID)
	}
	if value, ok := gauo.mutation.AppGoodID(); ok {
		_spec.SetField(goodachievement.FieldAppGoodID, field.TypeUUID, value)
	}
	if gauo.mutation.AppGoodIDCleared() {
		_spec.ClearField(goodachievement.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := gauo.mutation.TotalUnits(); ok {
		_spec.SetField(goodachievement.FieldTotalUnits, field.TypeOther, value)
	}
	if gauo.mutation.TotalUnitsCleared() {
		_spec.ClearField(goodachievement.FieldTotalUnits, field.TypeOther)
	}
	if value, ok := gauo.mutation.SelfUnits(); ok {
		_spec.SetField(goodachievement.FieldSelfUnits, field.TypeOther, value)
	}
	if gauo.mutation.SelfUnitsCleared() {
		_spec.ClearField(goodachievement.FieldSelfUnits, field.TypeOther)
	}
	if value, ok := gauo.mutation.TotalAmountUsd(); ok {
		_spec.SetField(goodachievement.FieldTotalAmountUsd, field.TypeOther, value)
	}
	if gauo.mutation.TotalAmountUsdCleared() {
		_spec.ClearField(goodachievement.FieldTotalAmountUsd, field.TypeOther)
	}
	if value, ok := gauo.mutation.SelfAmountUsd(); ok {
		_spec.SetField(goodachievement.FieldSelfAmountUsd, field.TypeOther, value)
	}
	if gauo.mutation.SelfAmountUsdCleared() {
		_spec.ClearField(goodachievement.FieldSelfAmountUsd, field.TypeOther)
	}
	if value, ok := gauo.mutation.TotalCommissionUsd(); ok {
		_spec.SetField(goodachievement.FieldTotalCommissionUsd, field.TypeOther, value)
	}
	if gauo.mutation.TotalCommissionUsdCleared() {
		_spec.ClearField(goodachievement.FieldTotalCommissionUsd, field.TypeOther)
	}
	if value, ok := gauo.mutation.SelfCommissionUsd(); ok {
		_spec.SetField(goodachievement.FieldSelfCommissionUsd, field.TypeOther, value)
	}
	if gauo.mutation.SelfCommissionUsdCleared() {
		_spec.ClearField(goodachievement.FieldSelfCommissionUsd, field.TypeOther)
	}
	_spec.AddModifiers(gauo.modifiers...)
	_node = &GoodAchievement{config: gauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodachievement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gauo.mutation.done = true
	return _node, nil
}

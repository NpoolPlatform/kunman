// Code generated by ent, DO NOT EDIT.

package coinallocated

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldEQ(FieldDeletedAt, v))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldEQ(FieldEntID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldEQ(FieldAppID, v))
}

// CoinConfigID applies equality check predicate on the "coin_config_id" field. It's identical to CoinConfigIDEQ.
func CoinConfigID(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldEQ(FieldCoinConfigID, v))
}

// CoinTypeID applies equality check predicate on the "coin_type_id" field. It's identical to CoinTypeIDEQ.
func CoinTypeID(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldEQ(FieldCoinTypeID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldEQ(FieldUserID, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v decimal.Decimal) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldEQ(FieldValue, v))
}

// Extra applies equality check predicate on the "extra" field. It's identical to ExtraEQ.
func Extra(v string) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldEQ(FieldExtra, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldLTE(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldLTE(FieldEntID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldLTE(FieldAppID, v))
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldIsNull(FieldAppID))
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNotNull(FieldAppID))
}

// CoinConfigIDEQ applies the EQ predicate on the "coin_config_id" field.
func CoinConfigIDEQ(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldEQ(FieldCoinConfigID, v))
}

// CoinConfigIDNEQ applies the NEQ predicate on the "coin_config_id" field.
func CoinConfigIDNEQ(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNEQ(FieldCoinConfigID, v))
}

// CoinConfigIDIn applies the In predicate on the "coin_config_id" field.
func CoinConfigIDIn(vs ...uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldIn(FieldCoinConfigID, vs...))
}

// CoinConfigIDNotIn applies the NotIn predicate on the "coin_config_id" field.
func CoinConfigIDNotIn(vs ...uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNotIn(FieldCoinConfigID, vs...))
}

// CoinConfigIDGT applies the GT predicate on the "coin_config_id" field.
func CoinConfigIDGT(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldGT(FieldCoinConfigID, v))
}

// CoinConfigIDGTE applies the GTE predicate on the "coin_config_id" field.
func CoinConfigIDGTE(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldGTE(FieldCoinConfigID, v))
}

// CoinConfigIDLT applies the LT predicate on the "coin_config_id" field.
func CoinConfigIDLT(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldLT(FieldCoinConfigID, v))
}

// CoinConfigIDLTE applies the LTE predicate on the "coin_config_id" field.
func CoinConfigIDLTE(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldLTE(FieldCoinConfigID, v))
}

// CoinConfigIDIsNil applies the IsNil predicate on the "coin_config_id" field.
func CoinConfigIDIsNil() predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldIsNull(FieldCoinConfigID))
}

// CoinConfigIDNotNil applies the NotNil predicate on the "coin_config_id" field.
func CoinConfigIDNotNil() predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNotNull(FieldCoinConfigID))
}

// CoinTypeIDEQ applies the EQ predicate on the "coin_type_id" field.
func CoinTypeIDEQ(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldEQ(FieldCoinTypeID, v))
}

// CoinTypeIDNEQ applies the NEQ predicate on the "coin_type_id" field.
func CoinTypeIDNEQ(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNEQ(FieldCoinTypeID, v))
}

// CoinTypeIDIn applies the In predicate on the "coin_type_id" field.
func CoinTypeIDIn(vs ...uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldIn(FieldCoinTypeID, vs...))
}

// CoinTypeIDNotIn applies the NotIn predicate on the "coin_type_id" field.
func CoinTypeIDNotIn(vs ...uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNotIn(FieldCoinTypeID, vs...))
}

// CoinTypeIDGT applies the GT predicate on the "coin_type_id" field.
func CoinTypeIDGT(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldGT(FieldCoinTypeID, v))
}

// CoinTypeIDGTE applies the GTE predicate on the "coin_type_id" field.
func CoinTypeIDGTE(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldGTE(FieldCoinTypeID, v))
}

// CoinTypeIDLT applies the LT predicate on the "coin_type_id" field.
func CoinTypeIDLT(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldLT(FieldCoinTypeID, v))
}

// CoinTypeIDLTE applies the LTE predicate on the "coin_type_id" field.
func CoinTypeIDLTE(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldLTE(FieldCoinTypeID, v))
}

// CoinTypeIDIsNil applies the IsNil predicate on the "coin_type_id" field.
func CoinTypeIDIsNil() predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldIsNull(FieldCoinTypeID))
}

// CoinTypeIDNotNil applies the NotNil predicate on the "coin_type_id" field.
func CoinTypeIDNotNil() predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNotNull(FieldCoinTypeID))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldLTE(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNotNull(FieldUserID))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v decimal.Decimal) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v decimal.Decimal) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...decimal.Decimal) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...decimal.Decimal) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v decimal.Decimal) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v decimal.Decimal) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v decimal.Decimal) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v decimal.Decimal) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldLTE(FieldValue, v))
}

// ValueIsNil applies the IsNil predicate on the "value" field.
func ValueIsNil() predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldIsNull(FieldValue))
}

// ValueNotNil applies the NotNil predicate on the "value" field.
func ValueNotNil() predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNotNull(FieldValue))
}

// ExtraEQ applies the EQ predicate on the "extra" field.
func ExtraEQ(v string) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldEQ(FieldExtra, v))
}

// ExtraNEQ applies the NEQ predicate on the "extra" field.
func ExtraNEQ(v string) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNEQ(FieldExtra, v))
}

// ExtraIn applies the In predicate on the "extra" field.
func ExtraIn(vs ...string) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldIn(FieldExtra, vs...))
}

// ExtraNotIn applies the NotIn predicate on the "extra" field.
func ExtraNotIn(vs ...string) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNotIn(FieldExtra, vs...))
}

// ExtraGT applies the GT predicate on the "extra" field.
func ExtraGT(v string) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldGT(FieldExtra, v))
}

// ExtraGTE applies the GTE predicate on the "extra" field.
func ExtraGTE(v string) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldGTE(FieldExtra, v))
}

// ExtraLT applies the LT predicate on the "extra" field.
func ExtraLT(v string) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldLT(FieldExtra, v))
}

// ExtraLTE applies the LTE predicate on the "extra" field.
func ExtraLTE(v string) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldLTE(FieldExtra, v))
}

// ExtraContains applies the Contains predicate on the "extra" field.
func ExtraContains(v string) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldContains(FieldExtra, v))
}

// ExtraHasPrefix applies the HasPrefix predicate on the "extra" field.
func ExtraHasPrefix(v string) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldHasPrefix(FieldExtra, v))
}

// ExtraHasSuffix applies the HasSuffix predicate on the "extra" field.
func ExtraHasSuffix(v string) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldHasSuffix(FieldExtra, v))
}

// ExtraIsNil applies the IsNil predicate on the "extra" field.
func ExtraIsNil() predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldIsNull(FieldExtra))
}

// ExtraNotNil applies the NotNil predicate on the "extra" field.
func ExtraNotNil() predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldNotNull(FieldExtra))
}

// ExtraEqualFold applies the EqualFold predicate on the "extra" field.
func ExtraEqualFold(v string) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldEqualFold(FieldExtra, v))
}

// ExtraContainsFold applies the ContainsFold predicate on the "extra" field.
func ExtraContainsFold(v string) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.FieldContainsFold(FieldExtra, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CoinAllocated) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CoinAllocated) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CoinAllocated) predicate.CoinAllocated {
	return predicate.CoinAllocated(sql.NotPredicates(p))
}

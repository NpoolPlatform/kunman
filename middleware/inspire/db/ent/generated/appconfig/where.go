// Code generated by ent, DO NOT EDIT.

package appconfig

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldDeletedAt, v))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldEntID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldAppID, v))
}

// SettleMode applies equality check predicate on the "settle_mode" field. It's identical to SettleModeEQ.
func SettleMode(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldSettleMode, v))
}

// SettleAmountType applies equality check predicate on the "settle_amount_type" field. It's identical to SettleAmountTypeEQ.
func SettleAmountType(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldSettleAmountType, v))
}

// SettleInterval applies equality check predicate on the "settle_interval" field. It's identical to SettleIntervalEQ.
func SettleInterval(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldSettleInterval, v))
}

// CommissionType applies equality check predicate on the "commission_type" field. It's identical to CommissionTypeEQ.
func CommissionType(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldCommissionType, v))
}

// SettleBenefit applies equality check predicate on the "settle_benefit" field. It's identical to SettleBenefitEQ.
func SettleBenefit(v bool) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldSettleBenefit, v))
}

// MaxLevel applies equality check predicate on the "max_level" field. It's identical to MaxLevelEQ.
func MaxLevel(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldMaxLevel, v))
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldStartAt, v))
}

// EndAt applies equality check predicate on the "end_at" field. It's identical to EndAtEQ.
func EndAt(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldEndAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldLTE(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldLTE(FieldEntID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldLTE(FieldAppID, v))
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.AppConfig {
	return predicate.AppConfig(sql.FieldIsNull(FieldAppID))
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNotNull(FieldAppID))
}

// SettleModeEQ applies the EQ predicate on the "settle_mode" field.
func SettleModeEQ(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldSettleMode, v))
}

// SettleModeNEQ applies the NEQ predicate on the "settle_mode" field.
func SettleModeNEQ(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNEQ(FieldSettleMode, v))
}

// SettleModeIn applies the In predicate on the "settle_mode" field.
func SettleModeIn(vs ...string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldIn(FieldSettleMode, vs...))
}

// SettleModeNotIn applies the NotIn predicate on the "settle_mode" field.
func SettleModeNotIn(vs ...string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNotIn(FieldSettleMode, vs...))
}

// SettleModeGT applies the GT predicate on the "settle_mode" field.
func SettleModeGT(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldGT(FieldSettleMode, v))
}

// SettleModeGTE applies the GTE predicate on the "settle_mode" field.
func SettleModeGTE(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldGTE(FieldSettleMode, v))
}

// SettleModeLT applies the LT predicate on the "settle_mode" field.
func SettleModeLT(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldLT(FieldSettleMode, v))
}

// SettleModeLTE applies the LTE predicate on the "settle_mode" field.
func SettleModeLTE(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldLTE(FieldSettleMode, v))
}

// SettleModeContains applies the Contains predicate on the "settle_mode" field.
func SettleModeContains(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldContains(FieldSettleMode, v))
}

// SettleModeHasPrefix applies the HasPrefix predicate on the "settle_mode" field.
func SettleModeHasPrefix(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldHasPrefix(FieldSettleMode, v))
}

// SettleModeHasSuffix applies the HasSuffix predicate on the "settle_mode" field.
func SettleModeHasSuffix(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldHasSuffix(FieldSettleMode, v))
}

// SettleModeIsNil applies the IsNil predicate on the "settle_mode" field.
func SettleModeIsNil() predicate.AppConfig {
	return predicate.AppConfig(sql.FieldIsNull(FieldSettleMode))
}

// SettleModeNotNil applies the NotNil predicate on the "settle_mode" field.
func SettleModeNotNil() predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNotNull(FieldSettleMode))
}

// SettleModeEqualFold applies the EqualFold predicate on the "settle_mode" field.
func SettleModeEqualFold(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEqualFold(FieldSettleMode, v))
}

// SettleModeContainsFold applies the ContainsFold predicate on the "settle_mode" field.
func SettleModeContainsFold(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldContainsFold(FieldSettleMode, v))
}

// SettleAmountTypeEQ applies the EQ predicate on the "settle_amount_type" field.
func SettleAmountTypeEQ(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldSettleAmountType, v))
}

// SettleAmountTypeNEQ applies the NEQ predicate on the "settle_amount_type" field.
func SettleAmountTypeNEQ(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNEQ(FieldSettleAmountType, v))
}

// SettleAmountTypeIn applies the In predicate on the "settle_amount_type" field.
func SettleAmountTypeIn(vs ...string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldIn(FieldSettleAmountType, vs...))
}

// SettleAmountTypeNotIn applies the NotIn predicate on the "settle_amount_type" field.
func SettleAmountTypeNotIn(vs ...string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNotIn(FieldSettleAmountType, vs...))
}

// SettleAmountTypeGT applies the GT predicate on the "settle_amount_type" field.
func SettleAmountTypeGT(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldGT(FieldSettleAmountType, v))
}

// SettleAmountTypeGTE applies the GTE predicate on the "settle_amount_type" field.
func SettleAmountTypeGTE(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldGTE(FieldSettleAmountType, v))
}

// SettleAmountTypeLT applies the LT predicate on the "settle_amount_type" field.
func SettleAmountTypeLT(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldLT(FieldSettleAmountType, v))
}

// SettleAmountTypeLTE applies the LTE predicate on the "settle_amount_type" field.
func SettleAmountTypeLTE(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldLTE(FieldSettleAmountType, v))
}

// SettleAmountTypeContains applies the Contains predicate on the "settle_amount_type" field.
func SettleAmountTypeContains(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldContains(FieldSettleAmountType, v))
}

// SettleAmountTypeHasPrefix applies the HasPrefix predicate on the "settle_amount_type" field.
func SettleAmountTypeHasPrefix(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldHasPrefix(FieldSettleAmountType, v))
}

// SettleAmountTypeHasSuffix applies the HasSuffix predicate on the "settle_amount_type" field.
func SettleAmountTypeHasSuffix(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldHasSuffix(FieldSettleAmountType, v))
}

// SettleAmountTypeIsNil applies the IsNil predicate on the "settle_amount_type" field.
func SettleAmountTypeIsNil() predicate.AppConfig {
	return predicate.AppConfig(sql.FieldIsNull(FieldSettleAmountType))
}

// SettleAmountTypeNotNil applies the NotNil predicate on the "settle_amount_type" field.
func SettleAmountTypeNotNil() predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNotNull(FieldSettleAmountType))
}

// SettleAmountTypeEqualFold applies the EqualFold predicate on the "settle_amount_type" field.
func SettleAmountTypeEqualFold(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEqualFold(FieldSettleAmountType, v))
}

// SettleAmountTypeContainsFold applies the ContainsFold predicate on the "settle_amount_type" field.
func SettleAmountTypeContainsFold(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldContainsFold(FieldSettleAmountType, v))
}

// SettleIntervalEQ applies the EQ predicate on the "settle_interval" field.
func SettleIntervalEQ(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldSettleInterval, v))
}

// SettleIntervalNEQ applies the NEQ predicate on the "settle_interval" field.
func SettleIntervalNEQ(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNEQ(FieldSettleInterval, v))
}

// SettleIntervalIn applies the In predicate on the "settle_interval" field.
func SettleIntervalIn(vs ...string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldIn(FieldSettleInterval, vs...))
}

// SettleIntervalNotIn applies the NotIn predicate on the "settle_interval" field.
func SettleIntervalNotIn(vs ...string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNotIn(FieldSettleInterval, vs...))
}

// SettleIntervalGT applies the GT predicate on the "settle_interval" field.
func SettleIntervalGT(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldGT(FieldSettleInterval, v))
}

// SettleIntervalGTE applies the GTE predicate on the "settle_interval" field.
func SettleIntervalGTE(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldGTE(FieldSettleInterval, v))
}

// SettleIntervalLT applies the LT predicate on the "settle_interval" field.
func SettleIntervalLT(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldLT(FieldSettleInterval, v))
}

// SettleIntervalLTE applies the LTE predicate on the "settle_interval" field.
func SettleIntervalLTE(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldLTE(FieldSettleInterval, v))
}

// SettleIntervalContains applies the Contains predicate on the "settle_interval" field.
func SettleIntervalContains(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldContains(FieldSettleInterval, v))
}

// SettleIntervalHasPrefix applies the HasPrefix predicate on the "settle_interval" field.
func SettleIntervalHasPrefix(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldHasPrefix(FieldSettleInterval, v))
}

// SettleIntervalHasSuffix applies the HasSuffix predicate on the "settle_interval" field.
func SettleIntervalHasSuffix(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldHasSuffix(FieldSettleInterval, v))
}

// SettleIntervalIsNil applies the IsNil predicate on the "settle_interval" field.
func SettleIntervalIsNil() predicate.AppConfig {
	return predicate.AppConfig(sql.FieldIsNull(FieldSettleInterval))
}

// SettleIntervalNotNil applies the NotNil predicate on the "settle_interval" field.
func SettleIntervalNotNil() predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNotNull(FieldSettleInterval))
}

// SettleIntervalEqualFold applies the EqualFold predicate on the "settle_interval" field.
func SettleIntervalEqualFold(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEqualFold(FieldSettleInterval, v))
}

// SettleIntervalContainsFold applies the ContainsFold predicate on the "settle_interval" field.
func SettleIntervalContainsFold(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldContainsFold(FieldSettleInterval, v))
}

// CommissionTypeEQ applies the EQ predicate on the "commission_type" field.
func CommissionTypeEQ(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldCommissionType, v))
}

// CommissionTypeNEQ applies the NEQ predicate on the "commission_type" field.
func CommissionTypeNEQ(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNEQ(FieldCommissionType, v))
}

// CommissionTypeIn applies the In predicate on the "commission_type" field.
func CommissionTypeIn(vs ...string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldIn(FieldCommissionType, vs...))
}

// CommissionTypeNotIn applies the NotIn predicate on the "commission_type" field.
func CommissionTypeNotIn(vs ...string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNotIn(FieldCommissionType, vs...))
}

// CommissionTypeGT applies the GT predicate on the "commission_type" field.
func CommissionTypeGT(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldGT(FieldCommissionType, v))
}

// CommissionTypeGTE applies the GTE predicate on the "commission_type" field.
func CommissionTypeGTE(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldGTE(FieldCommissionType, v))
}

// CommissionTypeLT applies the LT predicate on the "commission_type" field.
func CommissionTypeLT(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldLT(FieldCommissionType, v))
}

// CommissionTypeLTE applies the LTE predicate on the "commission_type" field.
func CommissionTypeLTE(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldLTE(FieldCommissionType, v))
}

// CommissionTypeContains applies the Contains predicate on the "commission_type" field.
func CommissionTypeContains(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldContains(FieldCommissionType, v))
}

// CommissionTypeHasPrefix applies the HasPrefix predicate on the "commission_type" field.
func CommissionTypeHasPrefix(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldHasPrefix(FieldCommissionType, v))
}

// CommissionTypeHasSuffix applies the HasSuffix predicate on the "commission_type" field.
func CommissionTypeHasSuffix(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldHasSuffix(FieldCommissionType, v))
}

// CommissionTypeIsNil applies the IsNil predicate on the "commission_type" field.
func CommissionTypeIsNil() predicate.AppConfig {
	return predicate.AppConfig(sql.FieldIsNull(FieldCommissionType))
}

// CommissionTypeNotNil applies the NotNil predicate on the "commission_type" field.
func CommissionTypeNotNil() predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNotNull(FieldCommissionType))
}

// CommissionTypeEqualFold applies the EqualFold predicate on the "commission_type" field.
func CommissionTypeEqualFold(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEqualFold(FieldCommissionType, v))
}

// CommissionTypeContainsFold applies the ContainsFold predicate on the "commission_type" field.
func CommissionTypeContainsFold(v string) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldContainsFold(FieldCommissionType, v))
}

// SettleBenefitEQ applies the EQ predicate on the "settle_benefit" field.
func SettleBenefitEQ(v bool) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldSettleBenefit, v))
}

// SettleBenefitNEQ applies the NEQ predicate on the "settle_benefit" field.
func SettleBenefitNEQ(v bool) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNEQ(FieldSettleBenefit, v))
}

// SettleBenefitIsNil applies the IsNil predicate on the "settle_benefit" field.
func SettleBenefitIsNil() predicate.AppConfig {
	return predicate.AppConfig(sql.FieldIsNull(FieldSettleBenefit))
}

// SettleBenefitNotNil applies the NotNil predicate on the "settle_benefit" field.
func SettleBenefitNotNil() predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNotNull(FieldSettleBenefit))
}

// MaxLevelEQ applies the EQ predicate on the "max_level" field.
func MaxLevelEQ(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldMaxLevel, v))
}

// MaxLevelNEQ applies the NEQ predicate on the "max_level" field.
func MaxLevelNEQ(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNEQ(FieldMaxLevel, v))
}

// MaxLevelIn applies the In predicate on the "max_level" field.
func MaxLevelIn(vs ...uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldIn(FieldMaxLevel, vs...))
}

// MaxLevelNotIn applies the NotIn predicate on the "max_level" field.
func MaxLevelNotIn(vs ...uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNotIn(FieldMaxLevel, vs...))
}

// MaxLevelGT applies the GT predicate on the "max_level" field.
func MaxLevelGT(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldGT(FieldMaxLevel, v))
}

// MaxLevelGTE applies the GTE predicate on the "max_level" field.
func MaxLevelGTE(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldGTE(FieldMaxLevel, v))
}

// MaxLevelLT applies the LT predicate on the "max_level" field.
func MaxLevelLT(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldLT(FieldMaxLevel, v))
}

// MaxLevelLTE applies the LTE predicate on the "max_level" field.
func MaxLevelLTE(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldLTE(FieldMaxLevel, v))
}

// MaxLevelIsNil applies the IsNil predicate on the "max_level" field.
func MaxLevelIsNil() predicate.AppConfig {
	return predicate.AppConfig(sql.FieldIsNull(FieldMaxLevel))
}

// MaxLevelNotNil applies the NotNil predicate on the "max_level" field.
func MaxLevelNotNil() predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNotNull(FieldMaxLevel))
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldStartAt, v))
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNEQ(FieldStartAt, v))
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldIn(FieldStartAt, vs...))
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNotIn(FieldStartAt, vs...))
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldGT(FieldStartAt, v))
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldGTE(FieldStartAt, v))
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldLT(FieldStartAt, v))
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldLTE(FieldStartAt, v))
}

// StartAtIsNil applies the IsNil predicate on the "start_at" field.
func StartAtIsNil() predicate.AppConfig {
	return predicate.AppConfig(sql.FieldIsNull(FieldStartAt))
}

// StartAtNotNil applies the NotNil predicate on the "start_at" field.
func StartAtNotNil() predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNotNull(FieldStartAt))
}

// EndAtEQ applies the EQ predicate on the "end_at" field.
func EndAtEQ(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldEQ(FieldEndAt, v))
}

// EndAtNEQ applies the NEQ predicate on the "end_at" field.
func EndAtNEQ(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNEQ(FieldEndAt, v))
}

// EndAtIn applies the In predicate on the "end_at" field.
func EndAtIn(vs ...uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldIn(FieldEndAt, vs...))
}

// EndAtNotIn applies the NotIn predicate on the "end_at" field.
func EndAtNotIn(vs ...uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNotIn(FieldEndAt, vs...))
}

// EndAtGT applies the GT predicate on the "end_at" field.
func EndAtGT(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldGT(FieldEndAt, v))
}

// EndAtGTE applies the GTE predicate on the "end_at" field.
func EndAtGTE(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldGTE(FieldEndAt, v))
}

// EndAtLT applies the LT predicate on the "end_at" field.
func EndAtLT(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldLT(FieldEndAt, v))
}

// EndAtLTE applies the LTE predicate on the "end_at" field.
func EndAtLTE(v uint32) predicate.AppConfig {
	return predicate.AppConfig(sql.FieldLTE(FieldEndAt, v))
}

// EndAtIsNil applies the IsNil predicate on the "end_at" field.
func EndAtIsNil() predicate.AppConfig {
	return predicate.AppConfig(sql.FieldIsNull(FieldEndAt))
}

// EndAtNotNil applies the NotNil predicate on the "end_at" field.
func EndAtNotNil() predicate.AppConfig {
	return predicate.AppConfig(sql.FieldNotNull(FieldEndAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppConfig) predicate.AppConfig {
	return predicate.AppConfig(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppConfig) predicate.AppConfig {
	return predicate.AppConfig(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppConfig) predicate.AppConfig {
	return predicate.AppConfig(sql.NotPredicates(p))
}

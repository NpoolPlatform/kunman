// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/orderstatement"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// OrderStatement is the model entity for the OrderStatement schema.
type OrderStatement struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// AppGoodID holds the value of the "app_good_id" field.
	AppGoodID uuid.UUID `json:"app_good_id,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID uuid.UUID `json:"order_id,omitempty"`
	// DirectContributorID holds the value of the "direct_contributor_id" field.
	DirectContributorID uuid.UUID `json:"direct_contributor_id,omitempty"`
	// OrderUserID holds the value of the "order_user_id" field.
	OrderUserID uuid.UUID `json:"order_user_id,omitempty"`
	// GoodCoinTypeID holds the value of the "good_coin_type_id" field.
	GoodCoinTypeID uuid.UUID `json:"good_coin_type_id,omitempty"`
	// Units holds the value of the "units" field.
	Units decimal.Decimal `json:"units,omitempty"`
	// GoodValueUsd holds the value of the "good_value_usd" field.
	GoodValueUsd decimal.Decimal `json:"good_value_usd,omitempty"`
	// PaymentAmountUsd holds the value of the "payment_amount_usd" field.
	PaymentAmountUsd decimal.Decimal `json:"payment_amount_usd,omitempty"`
	// CommissionAmountUsd holds the value of the "commission_amount_usd" field.
	CommissionAmountUsd decimal.Decimal `json:"commission_amount_usd,omitempty"`
	// AppConfigID holds the value of the "app_config_id" field.
	AppConfigID uuid.UUID `json:"app_config_id,omitempty"`
	// CommissionConfigID holds the value of the "commission_config_id" field.
	CommissionConfigID uuid.UUID `json:"commission_config_id,omitempty"`
	// CommissionConfigType holds the value of the "commission_config_type" field.
	CommissionConfigType string `json:"commission_config_type,omitempty"`
	selectValues         sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderStatement) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderstatement.FieldUnits, orderstatement.FieldGoodValueUsd, orderstatement.FieldPaymentAmountUsd, orderstatement.FieldCommissionAmountUsd:
			values[i] = new(decimal.Decimal)
		case orderstatement.FieldID, orderstatement.FieldCreatedAt, orderstatement.FieldUpdatedAt, orderstatement.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case orderstatement.FieldCommissionConfigType:
			values[i] = new(sql.NullString)
		case orderstatement.FieldEntID, orderstatement.FieldAppID, orderstatement.FieldUserID, orderstatement.FieldGoodID, orderstatement.FieldAppGoodID, orderstatement.FieldOrderID, orderstatement.FieldDirectContributorID, orderstatement.FieldOrderUserID, orderstatement.FieldGoodCoinTypeID, orderstatement.FieldAppConfigID, orderstatement.FieldCommissionConfigID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderStatement fields.
func (os *OrderStatement) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderstatement.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			os.ID = uint32(value.Int64)
		case orderstatement.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				os.CreatedAt = uint32(value.Int64)
			}
		case orderstatement.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				os.UpdatedAt = uint32(value.Int64)
			}
		case orderstatement.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				os.DeletedAt = uint32(value.Int64)
			}
		case orderstatement.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				os.EntID = *value
			}
		case orderstatement.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				os.AppID = *value
			}
		case orderstatement.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				os.UserID = *value
			}
		case orderstatement.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				os.GoodID = *value
			}
		case orderstatement.FieldAppGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_good_id", values[i])
			} else if value != nil {
				os.AppGoodID = *value
			}
		case orderstatement.FieldOrderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value != nil {
				os.OrderID = *value
			}
		case orderstatement.FieldDirectContributorID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field direct_contributor_id", values[i])
			} else if value != nil {
				os.DirectContributorID = *value
			}
		case orderstatement.FieldOrderUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field order_user_id", values[i])
			} else if value != nil {
				os.OrderUserID = *value
			}
		case orderstatement.FieldGoodCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_coin_type_id", values[i])
			} else if value != nil {
				os.GoodCoinTypeID = *value
			}
		case orderstatement.FieldUnits:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field units", values[i])
			} else if value != nil {
				os.Units = *value
			}
		case orderstatement.FieldGoodValueUsd:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field good_value_usd", values[i])
			} else if value != nil {
				os.GoodValueUsd = *value
			}
		case orderstatement.FieldPaymentAmountUsd:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field payment_amount_usd", values[i])
			} else if value != nil {
				os.PaymentAmountUsd = *value
			}
		case orderstatement.FieldCommissionAmountUsd:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field commission_amount_usd", values[i])
			} else if value != nil {
				os.CommissionAmountUsd = *value
			}
		case orderstatement.FieldAppConfigID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_config_id", values[i])
			} else if value != nil {
				os.AppConfigID = *value
			}
		case orderstatement.FieldCommissionConfigID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field commission_config_id", values[i])
			} else if value != nil {
				os.CommissionConfigID = *value
			}
		case orderstatement.FieldCommissionConfigType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field commission_config_type", values[i])
			} else if value.Valid {
				os.CommissionConfigType = value.String
			}
		default:
			os.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrderStatement.
// This includes values selected through modifiers, order, etc.
func (os *OrderStatement) Value(name string) (ent.Value, error) {
	return os.selectValues.Get(name)
}

// Update returns a builder for updating this OrderStatement.
// Note that you need to call OrderStatement.Unwrap() before calling this method if this OrderStatement
// was returned from a transaction, and the transaction was committed or rolled back.
func (os *OrderStatement) Update() *OrderStatementUpdateOne {
	return NewOrderStatementClient(os.config).UpdateOne(os)
}

// Unwrap unwraps the OrderStatement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (os *OrderStatement) Unwrap() *OrderStatement {
	_tx, ok := os.config.driver.(*txDriver)
	if !ok {
		panic("generated: OrderStatement is not a transactional entity")
	}
	os.config.driver = _tx.drv
	return os
}

// String implements the fmt.Stringer.
func (os *OrderStatement) String() string {
	var builder strings.Builder
	builder.WriteString("OrderStatement(")
	builder.WriteString(fmt.Sprintf("id=%v, ", os.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", os.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", os.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", os.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", os.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", os.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", os.UserID))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", os.GoodID))
	builder.WriteString(", ")
	builder.WriteString("app_good_id=")
	builder.WriteString(fmt.Sprintf("%v", os.AppGoodID))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", os.OrderID))
	builder.WriteString(", ")
	builder.WriteString("direct_contributor_id=")
	builder.WriteString(fmt.Sprintf("%v", os.DirectContributorID))
	builder.WriteString(", ")
	builder.WriteString("order_user_id=")
	builder.WriteString(fmt.Sprintf("%v", os.OrderUserID))
	builder.WriteString(", ")
	builder.WriteString("good_coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", os.GoodCoinTypeID))
	builder.WriteString(", ")
	builder.WriteString("units=")
	builder.WriteString(fmt.Sprintf("%v", os.Units))
	builder.WriteString(", ")
	builder.WriteString("good_value_usd=")
	builder.WriteString(fmt.Sprintf("%v", os.GoodValueUsd))
	builder.WriteString(", ")
	builder.WriteString("payment_amount_usd=")
	builder.WriteString(fmt.Sprintf("%v", os.PaymentAmountUsd))
	builder.WriteString(", ")
	builder.WriteString("commission_amount_usd=")
	builder.WriteString(fmt.Sprintf("%v", os.CommissionAmountUsd))
	builder.WriteString(", ")
	builder.WriteString("app_config_id=")
	builder.WriteString(fmt.Sprintf("%v", os.AppConfigID))
	builder.WriteString(", ")
	builder.WriteString("commission_config_id=")
	builder.WriteString(fmt.Sprintf("%v", os.CommissionConfigID))
	builder.WriteString(", ")
	builder.WriteString("commission_config_type=")
	builder.WriteString(os.CommissionConfigType)
	builder.WriteByte(')')
	return builder.String()
}

// OrderStatements is a parsable slice of OrderStatement.
type OrderStatements []*OrderStatement

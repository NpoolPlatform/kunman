// Code generated by ent, DO NOT EDIT.

package couponallocated

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the couponallocated type in the database.
	Label = "coupon_allocated"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCouponID holds the string denoting the coupon_id field in the database.
	FieldCouponID = "coupon_id"
	// FieldDenomination holds the string denoting the denomination field in the database.
	FieldDenomination = "denomination"
	// FieldUsed holds the string denoting the used field in the database.
	FieldUsed = "used"
	// FieldUsedAt holds the string denoting the used_at field in the database.
	FieldUsedAt = "used_at"
	// FieldUsedByOrderID holds the string denoting the used_by_order_id field in the database.
	FieldUsedByOrderID = "used_by_order_id"
	// FieldStartAt holds the string denoting the start_at field in the database.
	FieldStartAt = "start_at"
	// FieldCouponScope holds the string denoting the coupon_scope field in the database.
	FieldCouponScope = "coupon_scope"
	// FieldCashable holds the string denoting the cashable field in the database.
	FieldCashable = "cashable"
	// FieldExtra holds the string denoting the extra field in the database.
	FieldExtra = "extra"
	// Table holds the table name of the couponallocated in the database.
	Table = "coupon_allocateds"
)

// Columns holds all SQL columns for couponallocated fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldEntID,
	FieldAppID,
	FieldUserID,
	FieldCouponID,
	FieldDenomination,
	FieldUsed,
	FieldUsedAt,
	FieldUsedByOrderID,
	FieldStartAt,
	FieldCouponScope,
	FieldCashable,
	FieldExtra,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() uint32
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() uint32
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() uint32
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt func() uint32
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultAppID holds the default value on creation for the "app_id" field.
	DefaultAppID func() uuid.UUID
	// DefaultUserID holds the default value on creation for the "user_id" field.
	DefaultUserID func() uuid.UUID
	// DefaultCouponID holds the default value on creation for the "coupon_id" field.
	DefaultCouponID func() uuid.UUID
	// DefaultDenomination holds the default value on creation for the "denomination" field.
	DefaultDenomination decimal.Decimal
	// DefaultUsed holds the default value on creation for the "used" field.
	DefaultUsed bool
	// DefaultUsedAt holds the default value on creation for the "used_at" field.
	DefaultUsedAt uint32
	// DefaultUsedByOrderID holds the default value on creation for the "used_by_order_id" field.
	DefaultUsedByOrderID func() uuid.UUID
	// DefaultStartAt holds the default value on creation for the "start_at" field.
	DefaultStartAt uint32
	// DefaultCouponScope holds the default value on creation for the "coupon_scope" field.
	DefaultCouponScope string
	// DefaultCashable holds the default value on creation for the "cashable" field.
	DefaultCashable bool
	// DefaultExtra holds the default value on creation for the "extra" field.
	DefaultExtra string
	// ExtraValidator is a validator for the "extra" field. It is called by the builders before save.
	ExtraValidator func(string) error
)

// OrderOption defines the ordering options for the CouponAllocated queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByAppID orders the results by the app_id field.
func ByAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByCouponID orders the results by the coupon_id field.
func ByCouponID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCouponID, opts...).ToFunc()
}

// ByDenomination orders the results by the denomination field.
func ByDenomination(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDenomination, opts...).ToFunc()
}

// ByUsed orders the results by the used field.
func ByUsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsed, opts...).ToFunc()
}

// ByUsedAt orders the results by the used_at field.
func ByUsedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsedAt, opts...).ToFunc()
}

// ByUsedByOrderID orders the results by the used_by_order_id field.
func ByUsedByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsedByOrderID, opts...).ToFunc()
}

// ByStartAt orders the results by the start_at field.
func ByStartAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartAt, opts...).ToFunc()
}

// ByCouponScope orders the results by the coupon_scope field.
func ByCouponScope(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCouponScope, opts...).ToFunc()
}

// ByCashable orders the results by the cashable field.
func ByCashable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCashable, opts...).ToFunc()
}

// ByExtra orders the results by the extra field.
func ByExtra(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtra, opts...).ToFunc()
}

// Code generated by ent, DO NOT EDIT.

package goodachievement

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldDeletedAt, v))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldEntID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldAppID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldUserID, v))
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldGoodID, v))
}

// AppGoodID applies equality check predicate on the "app_good_id" field. It's identical to AppGoodIDEQ.
func AppGoodID(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldAppGoodID, v))
}

// TotalUnits applies equality check predicate on the "total_units" field. It's identical to TotalUnitsEQ.
func TotalUnits(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldTotalUnits, v))
}

// SelfUnits applies equality check predicate on the "self_units" field. It's identical to SelfUnitsEQ.
func SelfUnits(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldSelfUnits, v))
}

// TotalAmountUsd applies equality check predicate on the "total_amount_usd" field. It's identical to TotalAmountUsdEQ.
func TotalAmountUsd(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldTotalAmountUsd, v))
}

// SelfAmountUsd applies equality check predicate on the "self_amount_usd" field. It's identical to SelfAmountUsdEQ.
func SelfAmountUsd(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldSelfAmountUsd, v))
}

// TotalCommissionUsd applies equality check predicate on the "total_commission_usd" field. It's identical to TotalCommissionUsdEQ.
func TotalCommissionUsd(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldTotalCommissionUsd, v))
}

// SelfCommissionUsd applies equality check predicate on the "self_commission_usd" field. It's identical to SelfCommissionUsdEQ.
func SelfCommissionUsd(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldSelfCommissionUsd, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLTE(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLTE(FieldEntID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLTE(FieldAppID, v))
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldIsNull(FieldAppID))
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNotNull(FieldAppID))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLTE(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNotNull(FieldUserID))
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldGoodID, v))
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNEQ(FieldGoodID, v))
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldIn(FieldGoodID, vs...))
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNotIn(FieldGoodID, vs...))
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGT(FieldGoodID, v))
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGTE(FieldGoodID, v))
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLT(FieldGoodID, v))
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLTE(FieldGoodID, v))
}

// GoodIDIsNil applies the IsNil predicate on the "good_id" field.
func GoodIDIsNil() predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldIsNull(FieldGoodID))
}

// GoodIDNotNil applies the NotNil predicate on the "good_id" field.
func GoodIDNotNil() predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNotNull(FieldGoodID))
}

// AppGoodIDEQ applies the EQ predicate on the "app_good_id" field.
func AppGoodIDEQ(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldAppGoodID, v))
}

// AppGoodIDNEQ applies the NEQ predicate on the "app_good_id" field.
func AppGoodIDNEQ(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNEQ(FieldAppGoodID, v))
}

// AppGoodIDIn applies the In predicate on the "app_good_id" field.
func AppGoodIDIn(vs ...uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldIn(FieldAppGoodID, vs...))
}

// AppGoodIDNotIn applies the NotIn predicate on the "app_good_id" field.
func AppGoodIDNotIn(vs ...uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNotIn(FieldAppGoodID, vs...))
}

// AppGoodIDGT applies the GT predicate on the "app_good_id" field.
func AppGoodIDGT(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGT(FieldAppGoodID, v))
}

// AppGoodIDGTE applies the GTE predicate on the "app_good_id" field.
func AppGoodIDGTE(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGTE(FieldAppGoodID, v))
}

// AppGoodIDLT applies the LT predicate on the "app_good_id" field.
func AppGoodIDLT(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLT(FieldAppGoodID, v))
}

// AppGoodIDLTE applies the LTE predicate on the "app_good_id" field.
func AppGoodIDLTE(v uuid.UUID) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLTE(FieldAppGoodID, v))
}

// AppGoodIDIsNil applies the IsNil predicate on the "app_good_id" field.
func AppGoodIDIsNil() predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldIsNull(FieldAppGoodID))
}

// AppGoodIDNotNil applies the NotNil predicate on the "app_good_id" field.
func AppGoodIDNotNil() predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNotNull(FieldAppGoodID))
}

// TotalUnitsEQ applies the EQ predicate on the "total_units" field.
func TotalUnitsEQ(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldTotalUnits, v))
}

// TotalUnitsNEQ applies the NEQ predicate on the "total_units" field.
func TotalUnitsNEQ(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNEQ(FieldTotalUnits, v))
}

// TotalUnitsIn applies the In predicate on the "total_units" field.
func TotalUnitsIn(vs ...decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldIn(FieldTotalUnits, vs...))
}

// TotalUnitsNotIn applies the NotIn predicate on the "total_units" field.
func TotalUnitsNotIn(vs ...decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNotIn(FieldTotalUnits, vs...))
}

// TotalUnitsGT applies the GT predicate on the "total_units" field.
func TotalUnitsGT(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGT(FieldTotalUnits, v))
}

// TotalUnitsGTE applies the GTE predicate on the "total_units" field.
func TotalUnitsGTE(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGTE(FieldTotalUnits, v))
}

// TotalUnitsLT applies the LT predicate on the "total_units" field.
func TotalUnitsLT(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLT(FieldTotalUnits, v))
}

// TotalUnitsLTE applies the LTE predicate on the "total_units" field.
func TotalUnitsLTE(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLTE(FieldTotalUnits, v))
}

// TotalUnitsIsNil applies the IsNil predicate on the "total_units" field.
func TotalUnitsIsNil() predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldIsNull(FieldTotalUnits))
}

// TotalUnitsNotNil applies the NotNil predicate on the "total_units" field.
func TotalUnitsNotNil() predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNotNull(FieldTotalUnits))
}

// SelfUnitsEQ applies the EQ predicate on the "self_units" field.
func SelfUnitsEQ(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldSelfUnits, v))
}

// SelfUnitsNEQ applies the NEQ predicate on the "self_units" field.
func SelfUnitsNEQ(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNEQ(FieldSelfUnits, v))
}

// SelfUnitsIn applies the In predicate on the "self_units" field.
func SelfUnitsIn(vs ...decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldIn(FieldSelfUnits, vs...))
}

// SelfUnitsNotIn applies the NotIn predicate on the "self_units" field.
func SelfUnitsNotIn(vs ...decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNotIn(FieldSelfUnits, vs...))
}

// SelfUnitsGT applies the GT predicate on the "self_units" field.
func SelfUnitsGT(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGT(FieldSelfUnits, v))
}

// SelfUnitsGTE applies the GTE predicate on the "self_units" field.
func SelfUnitsGTE(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGTE(FieldSelfUnits, v))
}

// SelfUnitsLT applies the LT predicate on the "self_units" field.
func SelfUnitsLT(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLT(FieldSelfUnits, v))
}

// SelfUnitsLTE applies the LTE predicate on the "self_units" field.
func SelfUnitsLTE(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLTE(FieldSelfUnits, v))
}

// SelfUnitsIsNil applies the IsNil predicate on the "self_units" field.
func SelfUnitsIsNil() predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldIsNull(FieldSelfUnits))
}

// SelfUnitsNotNil applies the NotNil predicate on the "self_units" field.
func SelfUnitsNotNil() predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNotNull(FieldSelfUnits))
}

// TotalAmountUsdEQ applies the EQ predicate on the "total_amount_usd" field.
func TotalAmountUsdEQ(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldTotalAmountUsd, v))
}

// TotalAmountUsdNEQ applies the NEQ predicate on the "total_amount_usd" field.
func TotalAmountUsdNEQ(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNEQ(FieldTotalAmountUsd, v))
}

// TotalAmountUsdIn applies the In predicate on the "total_amount_usd" field.
func TotalAmountUsdIn(vs ...decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldIn(FieldTotalAmountUsd, vs...))
}

// TotalAmountUsdNotIn applies the NotIn predicate on the "total_amount_usd" field.
func TotalAmountUsdNotIn(vs ...decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNotIn(FieldTotalAmountUsd, vs...))
}

// TotalAmountUsdGT applies the GT predicate on the "total_amount_usd" field.
func TotalAmountUsdGT(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGT(FieldTotalAmountUsd, v))
}

// TotalAmountUsdGTE applies the GTE predicate on the "total_amount_usd" field.
func TotalAmountUsdGTE(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGTE(FieldTotalAmountUsd, v))
}

// TotalAmountUsdLT applies the LT predicate on the "total_amount_usd" field.
func TotalAmountUsdLT(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLT(FieldTotalAmountUsd, v))
}

// TotalAmountUsdLTE applies the LTE predicate on the "total_amount_usd" field.
func TotalAmountUsdLTE(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLTE(FieldTotalAmountUsd, v))
}

// TotalAmountUsdIsNil applies the IsNil predicate on the "total_amount_usd" field.
func TotalAmountUsdIsNil() predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldIsNull(FieldTotalAmountUsd))
}

// TotalAmountUsdNotNil applies the NotNil predicate on the "total_amount_usd" field.
func TotalAmountUsdNotNil() predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNotNull(FieldTotalAmountUsd))
}

// SelfAmountUsdEQ applies the EQ predicate on the "self_amount_usd" field.
func SelfAmountUsdEQ(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldSelfAmountUsd, v))
}

// SelfAmountUsdNEQ applies the NEQ predicate on the "self_amount_usd" field.
func SelfAmountUsdNEQ(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNEQ(FieldSelfAmountUsd, v))
}

// SelfAmountUsdIn applies the In predicate on the "self_amount_usd" field.
func SelfAmountUsdIn(vs ...decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldIn(FieldSelfAmountUsd, vs...))
}

// SelfAmountUsdNotIn applies the NotIn predicate on the "self_amount_usd" field.
func SelfAmountUsdNotIn(vs ...decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNotIn(FieldSelfAmountUsd, vs...))
}

// SelfAmountUsdGT applies the GT predicate on the "self_amount_usd" field.
func SelfAmountUsdGT(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGT(FieldSelfAmountUsd, v))
}

// SelfAmountUsdGTE applies the GTE predicate on the "self_amount_usd" field.
func SelfAmountUsdGTE(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGTE(FieldSelfAmountUsd, v))
}

// SelfAmountUsdLT applies the LT predicate on the "self_amount_usd" field.
func SelfAmountUsdLT(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLT(FieldSelfAmountUsd, v))
}

// SelfAmountUsdLTE applies the LTE predicate on the "self_amount_usd" field.
func SelfAmountUsdLTE(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLTE(FieldSelfAmountUsd, v))
}

// SelfAmountUsdIsNil applies the IsNil predicate on the "self_amount_usd" field.
func SelfAmountUsdIsNil() predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldIsNull(FieldSelfAmountUsd))
}

// SelfAmountUsdNotNil applies the NotNil predicate on the "self_amount_usd" field.
func SelfAmountUsdNotNil() predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNotNull(FieldSelfAmountUsd))
}

// TotalCommissionUsdEQ applies the EQ predicate on the "total_commission_usd" field.
func TotalCommissionUsdEQ(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldTotalCommissionUsd, v))
}

// TotalCommissionUsdNEQ applies the NEQ predicate on the "total_commission_usd" field.
func TotalCommissionUsdNEQ(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNEQ(FieldTotalCommissionUsd, v))
}

// TotalCommissionUsdIn applies the In predicate on the "total_commission_usd" field.
func TotalCommissionUsdIn(vs ...decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldIn(FieldTotalCommissionUsd, vs...))
}

// TotalCommissionUsdNotIn applies the NotIn predicate on the "total_commission_usd" field.
func TotalCommissionUsdNotIn(vs ...decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNotIn(FieldTotalCommissionUsd, vs...))
}

// TotalCommissionUsdGT applies the GT predicate on the "total_commission_usd" field.
func TotalCommissionUsdGT(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGT(FieldTotalCommissionUsd, v))
}

// TotalCommissionUsdGTE applies the GTE predicate on the "total_commission_usd" field.
func TotalCommissionUsdGTE(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGTE(FieldTotalCommissionUsd, v))
}

// TotalCommissionUsdLT applies the LT predicate on the "total_commission_usd" field.
func TotalCommissionUsdLT(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLT(FieldTotalCommissionUsd, v))
}

// TotalCommissionUsdLTE applies the LTE predicate on the "total_commission_usd" field.
func TotalCommissionUsdLTE(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLTE(FieldTotalCommissionUsd, v))
}

// TotalCommissionUsdIsNil applies the IsNil predicate on the "total_commission_usd" field.
func TotalCommissionUsdIsNil() predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldIsNull(FieldTotalCommissionUsd))
}

// TotalCommissionUsdNotNil applies the NotNil predicate on the "total_commission_usd" field.
func TotalCommissionUsdNotNil() predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNotNull(FieldTotalCommissionUsd))
}

// SelfCommissionUsdEQ applies the EQ predicate on the "self_commission_usd" field.
func SelfCommissionUsdEQ(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldEQ(FieldSelfCommissionUsd, v))
}

// SelfCommissionUsdNEQ applies the NEQ predicate on the "self_commission_usd" field.
func SelfCommissionUsdNEQ(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNEQ(FieldSelfCommissionUsd, v))
}

// SelfCommissionUsdIn applies the In predicate on the "self_commission_usd" field.
func SelfCommissionUsdIn(vs ...decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldIn(FieldSelfCommissionUsd, vs...))
}

// SelfCommissionUsdNotIn applies the NotIn predicate on the "self_commission_usd" field.
func SelfCommissionUsdNotIn(vs ...decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNotIn(FieldSelfCommissionUsd, vs...))
}

// SelfCommissionUsdGT applies the GT predicate on the "self_commission_usd" field.
func SelfCommissionUsdGT(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGT(FieldSelfCommissionUsd, v))
}

// SelfCommissionUsdGTE applies the GTE predicate on the "self_commission_usd" field.
func SelfCommissionUsdGTE(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldGTE(FieldSelfCommissionUsd, v))
}

// SelfCommissionUsdLT applies the LT predicate on the "self_commission_usd" field.
func SelfCommissionUsdLT(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLT(FieldSelfCommissionUsd, v))
}

// SelfCommissionUsdLTE applies the LTE predicate on the "self_commission_usd" field.
func SelfCommissionUsdLTE(v decimal.Decimal) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldLTE(FieldSelfCommissionUsd, v))
}

// SelfCommissionUsdIsNil applies the IsNil predicate on the "self_commission_usd" field.
func SelfCommissionUsdIsNil() predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldIsNull(FieldSelfCommissionUsd))
}

// SelfCommissionUsdNotNil applies the NotNil predicate on the "self_commission_usd" field.
func SelfCommissionUsdNotNil() predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.FieldNotNull(FieldSelfCommissionUsd))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GoodAchievement) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GoodAchievement) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GoodAchievement) predicate.GoodAchievement {
	return predicate.GoodAchievement(sql.NotPredicates(p))
}

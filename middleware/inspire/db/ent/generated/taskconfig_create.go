// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/taskconfig"
	"github.com/google/uuid"
)

// TaskConfigCreate is the builder for creating a TaskConfig entity.
type TaskConfigCreate struct {
	config
	mutation *TaskConfigMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tcc *TaskConfigCreate) SetCreatedAt(u uint32) *TaskConfigCreate {
	tcc.mutation.SetCreatedAt(u)
	return tcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcc *TaskConfigCreate) SetNillableCreatedAt(u *uint32) *TaskConfigCreate {
	if u != nil {
		tcc.SetCreatedAt(*u)
	}
	return tcc
}

// SetUpdatedAt sets the "updated_at" field.
func (tcc *TaskConfigCreate) SetUpdatedAt(u uint32) *TaskConfigCreate {
	tcc.mutation.SetUpdatedAt(u)
	return tcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tcc *TaskConfigCreate) SetNillableUpdatedAt(u *uint32) *TaskConfigCreate {
	if u != nil {
		tcc.SetUpdatedAt(*u)
	}
	return tcc
}

// SetDeletedAt sets the "deleted_at" field.
func (tcc *TaskConfigCreate) SetDeletedAt(u uint32) *TaskConfigCreate {
	tcc.mutation.SetDeletedAt(u)
	return tcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tcc *TaskConfigCreate) SetNillableDeletedAt(u *uint32) *TaskConfigCreate {
	if u != nil {
		tcc.SetDeletedAt(*u)
	}
	return tcc
}

// SetEntID sets the "ent_id" field.
func (tcc *TaskConfigCreate) SetEntID(u uuid.UUID) *TaskConfigCreate {
	tcc.mutation.SetEntID(u)
	return tcc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tcc *TaskConfigCreate) SetNillableEntID(u *uuid.UUID) *TaskConfigCreate {
	if u != nil {
		tcc.SetEntID(*u)
	}
	return tcc
}

// SetAppID sets the "app_id" field.
func (tcc *TaskConfigCreate) SetAppID(u uuid.UUID) *TaskConfigCreate {
	tcc.mutation.SetAppID(u)
	return tcc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (tcc *TaskConfigCreate) SetNillableAppID(u *uuid.UUID) *TaskConfigCreate {
	if u != nil {
		tcc.SetAppID(*u)
	}
	return tcc
}

// SetEventID sets the "event_id" field.
func (tcc *TaskConfigCreate) SetEventID(u uuid.UUID) *TaskConfigCreate {
	tcc.mutation.SetEventID(u)
	return tcc
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (tcc *TaskConfigCreate) SetNillableEventID(u *uuid.UUID) *TaskConfigCreate {
	if u != nil {
		tcc.SetEventID(*u)
	}
	return tcc
}

// SetTaskType sets the "task_type" field.
func (tcc *TaskConfigCreate) SetTaskType(s string) *TaskConfigCreate {
	tcc.mutation.SetTaskType(s)
	return tcc
}

// SetNillableTaskType sets the "task_type" field if the given value is not nil.
func (tcc *TaskConfigCreate) SetNillableTaskType(s *string) *TaskConfigCreate {
	if s != nil {
		tcc.SetTaskType(*s)
	}
	return tcc
}

// SetName sets the "name" field.
func (tcc *TaskConfigCreate) SetName(s string) *TaskConfigCreate {
	tcc.mutation.SetName(s)
	return tcc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tcc *TaskConfigCreate) SetNillableName(s *string) *TaskConfigCreate {
	if s != nil {
		tcc.SetName(*s)
	}
	return tcc
}

// SetTaskDesc sets the "task_desc" field.
func (tcc *TaskConfigCreate) SetTaskDesc(s string) *TaskConfigCreate {
	tcc.mutation.SetTaskDesc(s)
	return tcc
}

// SetNillableTaskDesc sets the "task_desc" field if the given value is not nil.
func (tcc *TaskConfigCreate) SetNillableTaskDesc(s *string) *TaskConfigCreate {
	if s != nil {
		tcc.SetTaskDesc(*s)
	}
	return tcc
}

// SetStepGuide sets the "step_guide" field.
func (tcc *TaskConfigCreate) SetStepGuide(s string) *TaskConfigCreate {
	tcc.mutation.SetStepGuide(s)
	return tcc
}

// SetNillableStepGuide sets the "step_guide" field if the given value is not nil.
func (tcc *TaskConfigCreate) SetNillableStepGuide(s *string) *TaskConfigCreate {
	if s != nil {
		tcc.SetStepGuide(*s)
	}
	return tcc
}

// SetRecommendMessage sets the "recommend_message" field.
func (tcc *TaskConfigCreate) SetRecommendMessage(s string) *TaskConfigCreate {
	tcc.mutation.SetRecommendMessage(s)
	return tcc
}

// SetNillableRecommendMessage sets the "recommend_message" field if the given value is not nil.
func (tcc *TaskConfigCreate) SetNillableRecommendMessage(s *string) *TaskConfigCreate {
	if s != nil {
		tcc.SetRecommendMessage(*s)
	}
	return tcc
}

// SetIndex sets the "index" field.
func (tcc *TaskConfigCreate) SetIndex(u uint32) *TaskConfigCreate {
	tcc.mutation.SetIndex(u)
	return tcc
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (tcc *TaskConfigCreate) SetNillableIndex(u *uint32) *TaskConfigCreate {
	if u != nil {
		tcc.SetIndex(*u)
	}
	return tcc
}

// SetLastTaskID sets the "last_task_id" field.
func (tcc *TaskConfigCreate) SetLastTaskID(u uuid.UUID) *TaskConfigCreate {
	tcc.mutation.SetLastTaskID(u)
	return tcc
}

// SetNillableLastTaskID sets the "last_task_id" field if the given value is not nil.
func (tcc *TaskConfigCreate) SetNillableLastTaskID(u *uuid.UUID) *TaskConfigCreate {
	if u != nil {
		tcc.SetLastTaskID(*u)
	}
	return tcc
}

// SetMaxRewardCount sets the "max_reward_count" field.
func (tcc *TaskConfigCreate) SetMaxRewardCount(u uint32) *TaskConfigCreate {
	tcc.mutation.SetMaxRewardCount(u)
	return tcc
}

// SetNillableMaxRewardCount sets the "max_reward_count" field if the given value is not nil.
func (tcc *TaskConfigCreate) SetNillableMaxRewardCount(u *uint32) *TaskConfigCreate {
	if u != nil {
		tcc.SetMaxRewardCount(*u)
	}
	return tcc
}

// SetCooldownSecond sets the "cooldown_second" field.
func (tcc *TaskConfigCreate) SetCooldownSecond(u uint32) *TaskConfigCreate {
	tcc.mutation.SetCooldownSecond(u)
	return tcc
}

// SetNillableCooldownSecond sets the "cooldown_second" field if the given value is not nil.
func (tcc *TaskConfigCreate) SetNillableCooldownSecond(u *uint32) *TaskConfigCreate {
	if u != nil {
		tcc.SetCooldownSecond(*u)
	}
	return tcc
}

// SetIntervalReset sets the "interval_reset" field.
func (tcc *TaskConfigCreate) SetIntervalReset(b bool) *TaskConfigCreate {
	tcc.mutation.SetIntervalReset(b)
	return tcc
}

// SetNillableIntervalReset sets the "interval_reset" field if the given value is not nil.
func (tcc *TaskConfigCreate) SetNillableIntervalReset(b *bool) *TaskConfigCreate {
	if b != nil {
		tcc.SetIntervalReset(*b)
	}
	return tcc
}

// SetIntervalResetSecond sets the "interval_reset_second" field.
func (tcc *TaskConfigCreate) SetIntervalResetSecond(u uint32) *TaskConfigCreate {
	tcc.mutation.SetIntervalResetSecond(u)
	return tcc
}

// SetNillableIntervalResetSecond sets the "interval_reset_second" field if the given value is not nil.
func (tcc *TaskConfigCreate) SetNillableIntervalResetSecond(u *uint32) *TaskConfigCreate {
	if u != nil {
		tcc.SetIntervalResetSecond(*u)
	}
	return tcc
}

// SetMaxIntervalRewardCount sets the "max_interval_reward_count" field.
func (tcc *TaskConfigCreate) SetMaxIntervalRewardCount(u uint32) *TaskConfigCreate {
	tcc.mutation.SetMaxIntervalRewardCount(u)
	return tcc
}

// SetNillableMaxIntervalRewardCount sets the "max_interval_reward_count" field if the given value is not nil.
func (tcc *TaskConfigCreate) SetNillableMaxIntervalRewardCount(u *uint32) *TaskConfigCreate {
	if u != nil {
		tcc.SetMaxIntervalRewardCount(*u)
	}
	return tcc
}

// SetID sets the "id" field.
func (tcc *TaskConfigCreate) SetID(u uint32) *TaskConfigCreate {
	tcc.mutation.SetID(u)
	return tcc
}

// Mutation returns the TaskConfigMutation object of the builder.
func (tcc *TaskConfigCreate) Mutation() *TaskConfigMutation {
	return tcc.mutation
}

// Save creates the TaskConfig in the database.
func (tcc *TaskConfigCreate) Save(ctx context.Context) (*TaskConfig, error) {
	tcc.defaults()
	return withHooks(ctx, tcc.sqlSave, tcc.mutation, tcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TaskConfigCreate) SaveX(ctx context.Context) *TaskConfig {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcc *TaskConfigCreate) Exec(ctx context.Context) error {
	_, err := tcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcc *TaskConfigCreate) ExecX(ctx context.Context) {
	if err := tcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcc *TaskConfigCreate) defaults() {
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		v := taskconfig.DefaultCreatedAt()
		tcc.mutation.SetCreatedAt(v)
	}
	if _, ok := tcc.mutation.UpdatedAt(); !ok {
		v := taskconfig.DefaultUpdatedAt()
		tcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tcc.mutation.DeletedAt(); !ok {
		v := taskconfig.DefaultDeletedAt()
		tcc.mutation.SetDeletedAt(v)
	}
	if _, ok := tcc.mutation.EntID(); !ok {
		v := taskconfig.DefaultEntID()
		tcc.mutation.SetEntID(v)
	}
	if _, ok := tcc.mutation.AppID(); !ok {
		v := taskconfig.DefaultAppID()
		tcc.mutation.SetAppID(v)
	}
	if _, ok := tcc.mutation.EventID(); !ok {
		v := taskconfig.DefaultEventID()
		tcc.mutation.SetEventID(v)
	}
	if _, ok := tcc.mutation.TaskType(); !ok {
		v := taskconfig.DefaultTaskType
		tcc.mutation.SetTaskType(v)
	}
	if _, ok := tcc.mutation.Name(); !ok {
		v := taskconfig.DefaultName
		tcc.mutation.SetName(v)
	}
	if _, ok := tcc.mutation.TaskDesc(); !ok {
		v := taskconfig.DefaultTaskDesc
		tcc.mutation.SetTaskDesc(v)
	}
	if _, ok := tcc.mutation.StepGuide(); !ok {
		v := taskconfig.DefaultStepGuide
		tcc.mutation.SetStepGuide(v)
	}
	if _, ok := tcc.mutation.RecommendMessage(); !ok {
		v := taskconfig.DefaultRecommendMessage
		tcc.mutation.SetRecommendMessage(v)
	}
	if _, ok := tcc.mutation.Index(); !ok {
		v := taskconfig.DefaultIndex
		tcc.mutation.SetIndex(v)
	}
	if _, ok := tcc.mutation.LastTaskID(); !ok {
		v := taskconfig.DefaultLastTaskID()
		tcc.mutation.SetLastTaskID(v)
	}
	if _, ok := tcc.mutation.MaxRewardCount(); !ok {
		v := taskconfig.DefaultMaxRewardCount
		tcc.mutation.SetMaxRewardCount(v)
	}
	if _, ok := tcc.mutation.CooldownSecond(); !ok {
		v := taskconfig.DefaultCooldownSecond
		tcc.mutation.SetCooldownSecond(v)
	}
	if _, ok := tcc.mutation.IntervalReset(); !ok {
		v := taskconfig.DefaultIntervalReset
		tcc.mutation.SetIntervalReset(v)
	}
	if _, ok := tcc.mutation.IntervalResetSecond(); !ok {
		v := taskconfig.DefaultIntervalResetSecond
		tcc.mutation.SetIntervalResetSecond(v)
	}
	if _, ok := tcc.mutation.MaxIntervalRewardCount(); !ok {
		v := taskconfig.DefaultMaxIntervalRewardCount
		tcc.mutation.SetMaxIntervalRewardCount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcc *TaskConfigCreate) check() error {
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "TaskConfig.created_at"`)}
	}
	if _, ok := tcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "TaskConfig.updated_at"`)}
	}
	if _, ok := tcc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "TaskConfig.deleted_at"`)}
	}
	if _, ok := tcc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "TaskConfig.ent_id"`)}
	}
	return nil
}

func (tcc *TaskConfigCreate) sqlSave(ctx context.Context) (*TaskConfig, error) {
	if err := tcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	tcc.mutation.id = &_node.ID
	tcc.mutation.done = true
	return _node, nil
}

func (tcc *TaskConfigCreate) createSpec() (*TaskConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskConfig{config: tcc.config}
		_spec = sqlgraph.NewCreateSpec(taskconfig.Table, sqlgraph.NewFieldSpec(taskconfig.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = tcc.conflict
	if id, ok := tcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tcc.mutation.CreatedAt(); ok {
		_spec.SetField(taskconfig.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := tcc.mutation.UpdatedAt(); ok {
		_spec.SetField(taskconfig.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := tcc.mutation.DeletedAt(); ok {
		_spec.SetField(taskconfig.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := tcc.mutation.EntID(); ok {
		_spec.SetField(taskconfig.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := tcc.mutation.AppID(); ok {
		_spec.SetField(taskconfig.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := tcc.mutation.EventID(); ok {
		_spec.SetField(taskconfig.FieldEventID, field.TypeUUID, value)
		_node.EventID = value
	}
	if value, ok := tcc.mutation.TaskType(); ok {
		_spec.SetField(taskconfig.FieldTaskType, field.TypeString, value)
		_node.TaskType = value
	}
	if value, ok := tcc.mutation.Name(); ok {
		_spec.SetField(taskconfig.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tcc.mutation.TaskDesc(); ok {
		_spec.SetField(taskconfig.FieldTaskDesc, field.TypeString, value)
		_node.TaskDesc = value
	}
	if value, ok := tcc.mutation.StepGuide(); ok {
		_spec.SetField(taskconfig.FieldStepGuide, field.TypeString, value)
		_node.StepGuide = value
	}
	if value, ok := tcc.mutation.RecommendMessage(); ok {
		_spec.SetField(taskconfig.FieldRecommendMessage, field.TypeString, value)
		_node.RecommendMessage = value
	}
	if value, ok := tcc.mutation.Index(); ok {
		_spec.SetField(taskconfig.FieldIndex, field.TypeUint32, value)
		_node.Index = value
	}
	if value, ok := tcc.mutation.LastTaskID(); ok {
		_spec.SetField(taskconfig.FieldLastTaskID, field.TypeUUID, value)
		_node.LastTaskID = value
	}
	if value, ok := tcc.mutation.MaxRewardCount(); ok {
		_spec.SetField(taskconfig.FieldMaxRewardCount, field.TypeUint32, value)
		_node.MaxRewardCount = value
	}
	if value, ok := tcc.mutation.CooldownSecond(); ok {
		_spec.SetField(taskconfig.FieldCooldownSecond, field.TypeUint32, value)
		_node.CooldownSecond = value
	}
	if value, ok := tcc.mutation.IntervalReset(); ok {
		_spec.SetField(taskconfig.FieldIntervalReset, field.TypeBool, value)
		_node.IntervalReset = value
	}
	if value, ok := tcc.mutation.IntervalResetSecond(); ok {
		_spec.SetField(taskconfig.FieldIntervalResetSecond, field.TypeUint32, value)
		_node.IntervalResetSecond = value
	}
	if value, ok := tcc.mutation.MaxIntervalRewardCount(); ok {
		_spec.SetField(taskconfig.FieldMaxIntervalRewardCount, field.TypeUint32, value)
		_node.MaxIntervalRewardCount = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskConfig.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskConfigUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tcc *TaskConfigCreate) OnConflict(opts ...sql.ConflictOption) *TaskConfigUpsertOne {
	tcc.conflict = opts
	return &TaskConfigUpsertOne{
		create: tcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcc *TaskConfigCreate) OnConflictColumns(columns ...string) *TaskConfigUpsertOne {
	tcc.conflict = append(tcc.conflict, sql.ConflictColumns(columns...))
	return &TaskConfigUpsertOne{
		create: tcc,
	}
}

type (
	// TaskConfigUpsertOne is the builder for "upsert"-ing
	//  one TaskConfig node.
	TaskConfigUpsertOne struct {
		create *TaskConfigCreate
	}

	// TaskConfigUpsert is the "OnConflict" setter.
	TaskConfigUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *TaskConfigUpsert) SetCreatedAt(v uint32) *TaskConfigUpsert {
	u.Set(taskconfig.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TaskConfigUpsert) UpdateCreatedAt() *TaskConfigUpsert {
	u.SetExcluded(taskconfig.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TaskConfigUpsert) AddCreatedAt(v uint32) *TaskConfigUpsert {
	u.Add(taskconfig.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskConfigUpsert) SetUpdatedAt(v uint32) *TaskConfigUpsert {
	u.Set(taskconfig.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskConfigUpsert) UpdateUpdatedAt() *TaskConfigUpsert {
	u.SetExcluded(taskconfig.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TaskConfigUpsert) AddUpdatedAt(v uint32) *TaskConfigUpsert {
	u.Add(taskconfig.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TaskConfigUpsert) SetDeletedAt(v uint32) *TaskConfigUpsert {
	u.Set(taskconfig.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TaskConfigUpsert) UpdateDeletedAt() *TaskConfigUpsert {
	u.SetExcluded(taskconfig.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TaskConfigUpsert) AddDeletedAt(v uint32) *TaskConfigUpsert {
	u.Add(taskconfig.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *TaskConfigUpsert) SetEntID(v uuid.UUID) *TaskConfigUpsert {
	u.Set(taskconfig.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TaskConfigUpsert) UpdateEntID() *TaskConfigUpsert {
	u.SetExcluded(taskconfig.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *TaskConfigUpsert) SetAppID(v uuid.UUID) *TaskConfigUpsert {
	u.Set(taskconfig.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *TaskConfigUpsert) UpdateAppID() *TaskConfigUpsert {
	u.SetExcluded(taskconfig.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *TaskConfigUpsert) ClearAppID() *TaskConfigUpsert {
	u.SetNull(taskconfig.FieldAppID)
	return u
}

// SetEventID sets the "event_id" field.
func (u *TaskConfigUpsert) SetEventID(v uuid.UUID) *TaskConfigUpsert {
	u.Set(taskconfig.FieldEventID, v)
	return u
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *TaskConfigUpsert) UpdateEventID() *TaskConfigUpsert {
	u.SetExcluded(taskconfig.FieldEventID)
	return u
}

// ClearEventID clears the value of the "event_id" field.
func (u *TaskConfigUpsert) ClearEventID() *TaskConfigUpsert {
	u.SetNull(taskconfig.FieldEventID)
	return u
}

// SetTaskType sets the "task_type" field.
func (u *TaskConfigUpsert) SetTaskType(v string) *TaskConfigUpsert {
	u.Set(taskconfig.FieldTaskType, v)
	return u
}

// UpdateTaskType sets the "task_type" field to the value that was provided on create.
func (u *TaskConfigUpsert) UpdateTaskType() *TaskConfigUpsert {
	u.SetExcluded(taskconfig.FieldTaskType)
	return u
}

// ClearTaskType clears the value of the "task_type" field.
func (u *TaskConfigUpsert) ClearTaskType() *TaskConfigUpsert {
	u.SetNull(taskconfig.FieldTaskType)
	return u
}

// SetName sets the "name" field.
func (u *TaskConfigUpsert) SetName(v string) *TaskConfigUpsert {
	u.Set(taskconfig.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TaskConfigUpsert) UpdateName() *TaskConfigUpsert {
	u.SetExcluded(taskconfig.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *TaskConfigUpsert) ClearName() *TaskConfigUpsert {
	u.SetNull(taskconfig.FieldName)
	return u
}

// SetTaskDesc sets the "task_desc" field.
func (u *TaskConfigUpsert) SetTaskDesc(v string) *TaskConfigUpsert {
	u.Set(taskconfig.FieldTaskDesc, v)
	return u
}

// UpdateTaskDesc sets the "task_desc" field to the value that was provided on create.
func (u *TaskConfigUpsert) UpdateTaskDesc() *TaskConfigUpsert {
	u.SetExcluded(taskconfig.FieldTaskDesc)
	return u
}

// ClearTaskDesc clears the value of the "task_desc" field.
func (u *TaskConfigUpsert) ClearTaskDesc() *TaskConfigUpsert {
	u.SetNull(taskconfig.FieldTaskDesc)
	return u
}

// SetStepGuide sets the "step_guide" field.
func (u *TaskConfigUpsert) SetStepGuide(v string) *TaskConfigUpsert {
	u.Set(taskconfig.FieldStepGuide, v)
	return u
}

// UpdateStepGuide sets the "step_guide" field to the value that was provided on create.
func (u *TaskConfigUpsert) UpdateStepGuide() *TaskConfigUpsert {
	u.SetExcluded(taskconfig.FieldStepGuide)
	return u
}

// ClearStepGuide clears the value of the "step_guide" field.
func (u *TaskConfigUpsert) ClearStepGuide() *TaskConfigUpsert {
	u.SetNull(taskconfig.FieldStepGuide)
	return u
}

// SetRecommendMessage sets the "recommend_message" field.
func (u *TaskConfigUpsert) SetRecommendMessage(v string) *TaskConfigUpsert {
	u.Set(taskconfig.FieldRecommendMessage, v)
	return u
}

// UpdateRecommendMessage sets the "recommend_message" field to the value that was provided on create.
func (u *TaskConfigUpsert) UpdateRecommendMessage() *TaskConfigUpsert {
	u.SetExcluded(taskconfig.FieldRecommendMessage)
	return u
}

// ClearRecommendMessage clears the value of the "recommend_message" field.
func (u *TaskConfigUpsert) ClearRecommendMessage() *TaskConfigUpsert {
	u.SetNull(taskconfig.FieldRecommendMessage)
	return u
}

// SetIndex sets the "index" field.
func (u *TaskConfigUpsert) SetIndex(v uint32) *TaskConfigUpsert {
	u.Set(taskconfig.FieldIndex, v)
	return u
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *TaskConfigUpsert) UpdateIndex() *TaskConfigUpsert {
	u.SetExcluded(taskconfig.FieldIndex)
	return u
}

// AddIndex adds v to the "index" field.
func (u *TaskConfigUpsert) AddIndex(v uint32) *TaskConfigUpsert {
	u.Add(taskconfig.FieldIndex, v)
	return u
}

// ClearIndex clears the value of the "index" field.
func (u *TaskConfigUpsert) ClearIndex() *TaskConfigUpsert {
	u.SetNull(taskconfig.FieldIndex)
	return u
}

// SetLastTaskID sets the "last_task_id" field.
func (u *TaskConfigUpsert) SetLastTaskID(v uuid.UUID) *TaskConfigUpsert {
	u.Set(taskconfig.FieldLastTaskID, v)
	return u
}

// UpdateLastTaskID sets the "last_task_id" field to the value that was provided on create.
func (u *TaskConfigUpsert) UpdateLastTaskID() *TaskConfigUpsert {
	u.SetExcluded(taskconfig.FieldLastTaskID)
	return u
}

// ClearLastTaskID clears the value of the "last_task_id" field.
func (u *TaskConfigUpsert) ClearLastTaskID() *TaskConfigUpsert {
	u.SetNull(taskconfig.FieldLastTaskID)
	return u
}

// SetMaxRewardCount sets the "max_reward_count" field.
func (u *TaskConfigUpsert) SetMaxRewardCount(v uint32) *TaskConfigUpsert {
	u.Set(taskconfig.FieldMaxRewardCount, v)
	return u
}

// UpdateMaxRewardCount sets the "max_reward_count" field to the value that was provided on create.
func (u *TaskConfigUpsert) UpdateMaxRewardCount() *TaskConfigUpsert {
	u.SetExcluded(taskconfig.FieldMaxRewardCount)
	return u
}

// AddMaxRewardCount adds v to the "max_reward_count" field.
func (u *TaskConfigUpsert) AddMaxRewardCount(v uint32) *TaskConfigUpsert {
	u.Add(taskconfig.FieldMaxRewardCount, v)
	return u
}

// ClearMaxRewardCount clears the value of the "max_reward_count" field.
func (u *TaskConfigUpsert) ClearMaxRewardCount() *TaskConfigUpsert {
	u.SetNull(taskconfig.FieldMaxRewardCount)
	return u
}

// SetCooldownSecond sets the "cooldown_second" field.
func (u *TaskConfigUpsert) SetCooldownSecond(v uint32) *TaskConfigUpsert {
	u.Set(taskconfig.FieldCooldownSecond, v)
	return u
}

// UpdateCooldownSecond sets the "cooldown_second" field to the value that was provided on create.
func (u *TaskConfigUpsert) UpdateCooldownSecond() *TaskConfigUpsert {
	u.SetExcluded(taskconfig.FieldCooldownSecond)
	return u
}

// AddCooldownSecond adds v to the "cooldown_second" field.
func (u *TaskConfigUpsert) AddCooldownSecond(v uint32) *TaskConfigUpsert {
	u.Add(taskconfig.FieldCooldownSecond, v)
	return u
}

// ClearCooldownSecond clears the value of the "cooldown_second" field.
func (u *TaskConfigUpsert) ClearCooldownSecond() *TaskConfigUpsert {
	u.SetNull(taskconfig.FieldCooldownSecond)
	return u
}

// SetIntervalReset sets the "interval_reset" field.
func (u *TaskConfigUpsert) SetIntervalReset(v bool) *TaskConfigUpsert {
	u.Set(taskconfig.FieldIntervalReset, v)
	return u
}

// UpdateIntervalReset sets the "interval_reset" field to the value that was provided on create.
func (u *TaskConfigUpsert) UpdateIntervalReset() *TaskConfigUpsert {
	u.SetExcluded(taskconfig.FieldIntervalReset)
	return u
}

// ClearIntervalReset clears the value of the "interval_reset" field.
func (u *TaskConfigUpsert) ClearIntervalReset() *TaskConfigUpsert {
	u.SetNull(taskconfig.FieldIntervalReset)
	return u
}

// SetIntervalResetSecond sets the "interval_reset_second" field.
func (u *TaskConfigUpsert) SetIntervalResetSecond(v uint32) *TaskConfigUpsert {
	u.Set(taskconfig.FieldIntervalResetSecond, v)
	return u
}

// UpdateIntervalResetSecond sets the "interval_reset_second" field to the value that was provided on create.
func (u *TaskConfigUpsert) UpdateIntervalResetSecond() *TaskConfigUpsert {
	u.SetExcluded(taskconfig.FieldIntervalResetSecond)
	return u
}

// AddIntervalResetSecond adds v to the "interval_reset_second" field.
func (u *TaskConfigUpsert) AddIntervalResetSecond(v uint32) *TaskConfigUpsert {
	u.Add(taskconfig.FieldIntervalResetSecond, v)
	return u
}

// ClearIntervalResetSecond clears the value of the "interval_reset_second" field.
func (u *TaskConfigUpsert) ClearIntervalResetSecond() *TaskConfigUpsert {
	u.SetNull(taskconfig.FieldIntervalResetSecond)
	return u
}

// SetMaxIntervalRewardCount sets the "max_interval_reward_count" field.
func (u *TaskConfigUpsert) SetMaxIntervalRewardCount(v uint32) *TaskConfigUpsert {
	u.Set(taskconfig.FieldMaxIntervalRewardCount, v)
	return u
}

// UpdateMaxIntervalRewardCount sets the "max_interval_reward_count" field to the value that was provided on create.
func (u *TaskConfigUpsert) UpdateMaxIntervalRewardCount() *TaskConfigUpsert {
	u.SetExcluded(taskconfig.FieldMaxIntervalRewardCount)
	return u
}

// AddMaxIntervalRewardCount adds v to the "max_interval_reward_count" field.
func (u *TaskConfigUpsert) AddMaxIntervalRewardCount(v uint32) *TaskConfigUpsert {
	u.Add(taskconfig.FieldMaxIntervalRewardCount, v)
	return u
}

// ClearMaxIntervalRewardCount clears the value of the "max_interval_reward_count" field.
func (u *TaskConfigUpsert) ClearMaxIntervalRewardCount() *TaskConfigUpsert {
	u.SetNull(taskconfig.FieldMaxIntervalRewardCount)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TaskConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(taskconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TaskConfigUpsertOne) UpdateNewValues() *TaskConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(taskconfig.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TaskConfig.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TaskConfigUpsertOne) Ignore() *TaskConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskConfigUpsertOne) DoNothing() *TaskConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskConfigCreate.OnConflict
// documentation for more info.
func (u *TaskConfigUpsertOne) Update(set func(*TaskConfigUpsert)) *TaskConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TaskConfigUpsertOne) SetCreatedAt(v uint32) *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TaskConfigUpsertOne) AddCreatedAt(v uint32) *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TaskConfigUpsertOne) UpdateCreatedAt() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskConfigUpsertOne) SetUpdatedAt(v uint32) *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TaskConfigUpsertOne) AddUpdatedAt(v uint32) *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskConfigUpsertOne) UpdateUpdatedAt() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TaskConfigUpsertOne) SetDeletedAt(v uint32) *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TaskConfigUpsertOne) AddDeletedAt(v uint32) *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TaskConfigUpsertOne) UpdateDeletedAt() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *TaskConfigUpsertOne) SetEntID(v uuid.UUID) *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TaskConfigUpsertOne) UpdateEntID() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *TaskConfigUpsertOne) SetAppID(v uuid.UUID) *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *TaskConfigUpsertOne) UpdateAppID() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *TaskConfigUpsertOne) ClearAppID() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearAppID()
	})
}

// SetEventID sets the "event_id" field.
func (u *TaskConfigUpsertOne) SetEventID(v uuid.UUID) *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *TaskConfigUpsertOne) UpdateEventID() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateEventID()
	})
}

// ClearEventID clears the value of the "event_id" field.
func (u *TaskConfigUpsertOne) ClearEventID() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearEventID()
	})
}

// SetTaskType sets the "task_type" field.
func (u *TaskConfigUpsertOne) SetTaskType(v string) *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetTaskType(v)
	})
}

// UpdateTaskType sets the "task_type" field to the value that was provided on create.
func (u *TaskConfigUpsertOne) UpdateTaskType() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateTaskType()
	})
}

// ClearTaskType clears the value of the "task_type" field.
func (u *TaskConfigUpsertOne) ClearTaskType() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearTaskType()
	})
}

// SetName sets the "name" field.
func (u *TaskConfigUpsertOne) SetName(v string) *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TaskConfigUpsertOne) UpdateName() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *TaskConfigUpsertOne) ClearName() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearName()
	})
}

// SetTaskDesc sets the "task_desc" field.
func (u *TaskConfigUpsertOne) SetTaskDesc(v string) *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetTaskDesc(v)
	})
}

// UpdateTaskDesc sets the "task_desc" field to the value that was provided on create.
func (u *TaskConfigUpsertOne) UpdateTaskDesc() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateTaskDesc()
	})
}

// ClearTaskDesc clears the value of the "task_desc" field.
func (u *TaskConfigUpsertOne) ClearTaskDesc() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearTaskDesc()
	})
}

// SetStepGuide sets the "step_guide" field.
func (u *TaskConfigUpsertOne) SetStepGuide(v string) *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetStepGuide(v)
	})
}

// UpdateStepGuide sets the "step_guide" field to the value that was provided on create.
func (u *TaskConfigUpsertOne) UpdateStepGuide() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateStepGuide()
	})
}

// ClearStepGuide clears the value of the "step_guide" field.
func (u *TaskConfigUpsertOne) ClearStepGuide() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearStepGuide()
	})
}

// SetRecommendMessage sets the "recommend_message" field.
func (u *TaskConfigUpsertOne) SetRecommendMessage(v string) *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetRecommendMessage(v)
	})
}

// UpdateRecommendMessage sets the "recommend_message" field to the value that was provided on create.
func (u *TaskConfigUpsertOne) UpdateRecommendMessage() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateRecommendMessage()
	})
}

// ClearRecommendMessage clears the value of the "recommend_message" field.
func (u *TaskConfigUpsertOne) ClearRecommendMessage() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearRecommendMessage()
	})
}

// SetIndex sets the "index" field.
func (u *TaskConfigUpsertOne) SetIndex(v uint32) *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *TaskConfigUpsertOne) AddIndex(v uint32) *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *TaskConfigUpsertOne) UpdateIndex() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateIndex()
	})
}

// ClearIndex clears the value of the "index" field.
func (u *TaskConfigUpsertOne) ClearIndex() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearIndex()
	})
}

// SetLastTaskID sets the "last_task_id" field.
func (u *TaskConfigUpsertOne) SetLastTaskID(v uuid.UUID) *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetLastTaskID(v)
	})
}

// UpdateLastTaskID sets the "last_task_id" field to the value that was provided on create.
func (u *TaskConfigUpsertOne) UpdateLastTaskID() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateLastTaskID()
	})
}

// ClearLastTaskID clears the value of the "last_task_id" field.
func (u *TaskConfigUpsertOne) ClearLastTaskID() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearLastTaskID()
	})
}

// SetMaxRewardCount sets the "max_reward_count" field.
func (u *TaskConfigUpsertOne) SetMaxRewardCount(v uint32) *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetMaxRewardCount(v)
	})
}

// AddMaxRewardCount adds v to the "max_reward_count" field.
func (u *TaskConfigUpsertOne) AddMaxRewardCount(v uint32) *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.AddMaxRewardCount(v)
	})
}

// UpdateMaxRewardCount sets the "max_reward_count" field to the value that was provided on create.
func (u *TaskConfigUpsertOne) UpdateMaxRewardCount() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateMaxRewardCount()
	})
}

// ClearMaxRewardCount clears the value of the "max_reward_count" field.
func (u *TaskConfigUpsertOne) ClearMaxRewardCount() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearMaxRewardCount()
	})
}

// SetCooldownSecond sets the "cooldown_second" field.
func (u *TaskConfigUpsertOne) SetCooldownSecond(v uint32) *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetCooldownSecond(v)
	})
}

// AddCooldownSecond adds v to the "cooldown_second" field.
func (u *TaskConfigUpsertOne) AddCooldownSecond(v uint32) *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.AddCooldownSecond(v)
	})
}

// UpdateCooldownSecond sets the "cooldown_second" field to the value that was provided on create.
func (u *TaskConfigUpsertOne) UpdateCooldownSecond() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateCooldownSecond()
	})
}

// ClearCooldownSecond clears the value of the "cooldown_second" field.
func (u *TaskConfigUpsertOne) ClearCooldownSecond() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearCooldownSecond()
	})
}

// SetIntervalReset sets the "interval_reset" field.
func (u *TaskConfigUpsertOne) SetIntervalReset(v bool) *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetIntervalReset(v)
	})
}

// UpdateIntervalReset sets the "interval_reset" field to the value that was provided on create.
func (u *TaskConfigUpsertOne) UpdateIntervalReset() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateIntervalReset()
	})
}

// ClearIntervalReset clears the value of the "interval_reset" field.
func (u *TaskConfigUpsertOne) ClearIntervalReset() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearIntervalReset()
	})
}

// SetIntervalResetSecond sets the "interval_reset_second" field.
func (u *TaskConfigUpsertOne) SetIntervalResetSecond(v uint32) *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetIntervalResetSecond(v)
	})
}

// AddIntervalResetSecond adds v to the "interval_reset_second" field.
func (u *TaskConfigUpsertOne) AddIntervalResetSecond(v uint32) *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.AddIntervalResetSecond(v)
	})
}

// UpdateIntervalResetSecond sets the "interval_reset_second" field to the value that was provided on create.
func (u *TaskConfigUpsertOne) UpdateIntervalResetSecond() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateIntervalResetSecond()
	})
}

// ClearIntervalResetSecond clears the value of the "interval_reset_second" field.
func (u *TaskConfigUpsertOne) ClearIntervalResetSecond() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearIntervalResetSecond()
	})
}

// SetMaxIntervalRewardCount sets the "max_interval_reward_count" field.
func (u *TaskConfigUpsertOne) SetMaxIntervalRewardCount(v uint32) *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetMaxIntervalRewardCount(v)
	})
}

// AddMaxIntervalRewardCount adds v to the "max_interval_reward_count" field.
func (u *TaskConfigUpsertOne) AddMaxIntervalRewardCount(v uint32) *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.AddMaxIntervalRewardCount(v)
	})
}

// UpdateMaxIntervalRewardCount sets the "max_interval_reward_count" field to the value that was provided on create.
func (u *TaskConfigUpsertOne) UpdateMaxIntervalRewardCount() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateMaxIntervalRewardCount()
	})
}

// ClearMaxIntervalRewardCount clears the value of the "max_interval_reward_count" field.
func (u *TaskConfigUpsertOne) ClearMaxIntervalRewardCount() *TaskConfigUpsertOne {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearMaxIntervalRewardCount()
	})
}

// Exec executes the query.
func (u *TaskConfigUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for TaskConfigCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskConfigUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TaskConfigUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TaskConfigUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TaskConfigCreateBulk is the builder for creating many TaskConfig entities in bulk.
type TaskConfigCreateBulk struct {
	config
	err      error
	builders []*TaskConfigCreate
	conflict []sql.ConflictOption
}

// Save creates the TaskConfig entities in the database.
func (tccb *TaskConfigCreateBulk) Save(ctx context.Context) ([]*TaskConfig, error) {
	if tccb.err != nil {
		return nil, tccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tccb.builders))
	nodes := make([]*TaskConfig, len(tccb.builders))
	mutators := make([]Mutator, len(tccb.builders))
	for i := range tccb.builders {
		func(i int, root context.Context) {
			builder := tccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tccb *TaskConfigCreateBulk) SaveX(ctx context.Context) []*TaskConfig {
	v, err := tccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tccb *TaskConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := tccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tccb *TaskConfigCreateBulk) ExecX(ctx context.Context) {
	if err := tccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskConfig.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskConfigUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tccb *TaskConfigCreateBulk) OnConflict(opts ...sql.ConflictOption) *TaskConfigUpsertBulk {
	tccb.conflict = opts
	return &TaskConfigUpsertBulk{
		create: tccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tccb *TaskConfigCreateBulk) OnConflictColumns(columns ...string) *TaskConfigUpsertBulk {
	tccb.conflict = append(tccb.conflict, sql.ConflictColumns(columns...))
	return &TaskConfigUpsertBulk{
		create: tccb,
	}
}

// TaskConfigUpsertBulk is the builder for "upsert"-ing
// a bulk of TaskConfig nodes.
type TaskConfigUpsertBulk struct {
	create *TaskConfigCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TaskConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(taskconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TaskConfigUpsertBulk) UpdateNewValues() *TaskConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(taskconfig.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TaskConfig.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TaskConfigUpsertBulk) Ignore() *TaskConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskConfigUpsertBulk) DoNothing() *TaskConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskConfigCreateBulk.OnConflict
// documentation for more info.
func (u *TaskConfigUpsertBulk) Update(set func(*TaskConfigUpsert)) *TaskConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TaskConfigUpsertBulk) SetCreatedAt(v uint32) *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TaskConfigUpsertBulk) AddCreatedAt(v uint32) *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TaskConfigUpsertBulk) UpdateCreatedAt() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskConfigUpsertBulk) SetUpdatedAt(v uint32) *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TaskConfigUpsertBulk) AddUpdatedAt(v uint32) *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskConfigUpsertBulk) UpdateUpdatedAt() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TaskConfigUpsertBulk) SetDeletedAt(v uint32) *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TaskConfigUpsertBulk) AddDeletedAt(v uint32) *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TaskConfigUpsertBulk) UpdateDeletedAt() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *TaskConfigUpsertBulk) SetEntID(v uuid.UUID) *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TaskConfigUpsertBulk) UpdateEntID() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *TaskConfigUpsertBulk) SetAppID(v uuid.UUID) *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *TaskConfigUpsertBulk) UpdateAppID() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *TaskConfigUpsertBulk) ClearAppID() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearAppID()
	})
}

// SetEventID sets the "event_id" field.
func (u *TaskConfigUpsertBulk) SetEventID(v uuid.UUID) *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *TaskConfigUpsertBulk) UpdateEventID() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateEventID()
	})
}

// ClearEventID clears the value of the "event_id" field.
func (u *TaskConfigUpsertBulk) ClearEventID() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearEventID()
	})
}

// SetTaskType sets the "task_type" field.
func (u *TaskConfigUpsertBulk) SetTaskType(v string) *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetTaskType(v)
	})
}

// UpdateTaskType sets the "task_type" field to the value that was provided on create.
func (u *TaskConfigUpsertBulk) UpdateTaskType() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateTaskType()
	})
}

// ClearTaskType clears the value of the "task_type" field.
func (u *TaskConfigUpsertBulk) ClearTaskType() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearTaskType()
	})
}

// SetName sets the "name" field.
func (u *TaskConfigUpsertBulk) SetName(v string) *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TaskConfigUpsertBulk) UpdateName() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *TaskConfigUpsertBulk) ClearName() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearName()
	})
}

// SetTaskDesc sets the "task_desc" field.
func (u *TaskConfigUpsertBulk) SetTaskDesc(v string) *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetTaskDesc(v)
	})
}

// UpdateTaskDesc sets the "task_desc" field to the value that was provided on create.
func (u *TaskConfigUpsertBulk) UpdateTaskDesc() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateTaskDesc()
	})
}

// ClearTaskDesc clears the value of the "task_desc" field.
func (u *TaskConfigUpsertBulk) ClearTaskDesc() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearTaskDesc()
	})
}

// SetStepGuide sets the "step_guide" field.
func (u *TaskConfigUpsertBulk) SetStepGuide(v string) *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetStepGuide(v)
	})
}

// UpdateStepGuide sets the "step_guide" field to the value that was provided on create.
func (u *TaskConfigUpsertBulk) UpdateStepGuide() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateStepGuide()
	})
}

// ClearStepGuide clears the value of the "step_guide" field.
func (u *TaskConfigUpsertBulk) ClearStepGuide() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearStepGuide()
	})
}

// SetRecommendMessage sets the "recommend_message" field.
func (u *TaskConfigUpsertBulk) SetRecommendMessage(v string) *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetRecommendMessage(v)
	})
}

// UpdateRecommendMessage sets the "recommend_message" field to the value that was provided on create.
func (u *TaskConfigUpsertBulk) UpdateRecommendMessage() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateRecommendMessage()
	})
}

// ClearRecommendMessage clears the value of the "recommend_message" field.
func (u *TaskConfigUpsertBulk) ClearRecommendMessage() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearRecommendMessage()
	})
}

// SetIndex sets the "index" field.
func (u *TaskConfigUpsertBulk) SetIndex(v uint32) *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *TaskConfigUpsertBulk) AddIndex(v uint32) *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *TaskConfigUpsertBulk) UpdateIndex() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateIndex()
	})
}

// ClearIndex clears the value of the "index" field.
func (u *TaskConfigUpsertBulk) ClearIndex() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearIndex()
	})
}

// SetLastTaskID sets the "last_task_id" field.
func (u *TaskConfigUpsertBulk) SetLastTaskID(v uuid.UUID) *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetLastTaskID(v)
	})
}

// UpdateLastTaskID sets the "last_task_id" field to the value that was provided on create.
func (u *TaskConfigUpsertBulk) UpdateLastTaskID() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateLastTaskID()
	})
}

// ClearLastTaskID clears the value of the "last_task_id" field.
func (u *TaskConfigUpsertBulk) ClearLastTaskID() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearLastTaskID()
	})
}

// SetMaxRewardCount sets the "max_reward_count" field.
func (u *TaskConfigUpsertBulk) SetMaxRewardCount(v uint32) *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetMaxRewardCount(v)
	})
}

// AddMaxRewardCount adds v to the "max_reward_count" field.
func (u *TaskConfigUpsertBulk) AddMaxRewardCount(v uint32) *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.AddMaxRewardCount(v)
	})
}

// UpdateMaxRewardCount sets the "max_reward_count" field to the value that was provided on create.
func (u *TaskConfigUpsertBulk) UpdateMaxRewardCount() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateMaxRewardCount()
	})
}

// ClearMaxRewardCount clears the value of the "max_reward_count" field.
func (u *TaskConfigUpsertBulk) ClearMaxRewardCount() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearMaxRewardCount()
	})
}

// SetCooldownSecond sets the "cooldown_second" field.
func (u *TaskConfigUpsertBulk) SetCooldownSecond(v uint32) *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetCooldownSecond(v)
	})
}

// AddCooldownSecond adds v to the "cooldown_second" field.
func (u *TaskConfigUpsertBulk) AddCooldownSecond(v uint32) *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.AddCooldownSecond(v)
	})
}

// UpdateCooldownSecond sets the "cooldown_second" field to the value that was provided on create.
func (u *TaskConfigUpsertBulk) UpdateCooldownSecond() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateCooldownSecond()
	})
}

// ClearCooldownSecond clears the value of the "cooldown_second" field.
func (u *TaskConfigUpsertBulk) ClearCooldownSecond() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearCooldownSecond()
	})
}

// SetIntervalReset sets the "interval_reset" field.
func (u *TaskConfigUpsertBulk) SetIntervalReset(v bool) *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetIntervalReset(v)
	})
}

// UpdateIntervalReset sets the "interval_reset" field to the value that was provided on create.
func (u *TaskConfigUpsertBulk) UpdateIntervalReset() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateIntervalReset()
	})
}

// ClearIntervalReset clears the value of the "interval_reset" field.
func (u *TaskConfigUpsertBulk) ClearIntervalReset() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearIntervalReset()
	})
}

// SetIntervalResetSecond sets the "interval_reset_second" field.
func (u *TaskConfigUpsertBulk) SetIntervalResetSecond(v uint32) *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetIntervalResetSecond(v)
	})
}

// AddIntervalResetSecond adds v to the "interval_reset_second" field.
func (u *TaskConfigUpsertBulk) AddIntervalResetSecond(v uint32) *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.AddIntervalResetSecond(v)
	})
}

// UpdateIntervalResetSecond sets the "interval_reset_second" field to the value that was provided on create.
func (u *TaskConfigUpsertBulk) UpdateIntervalResetSecond() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateIntervalResetSecond()
	})
}

// ClearIntervalResetSecond clears the value of the "interval_reset_second" field.
func (u *TaskConfigUpsertBulk) ClearIntervalResetSecond() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearIntervalResetSecond()
	})
}

// SetMaxIntervalRewardCount sets the "max_interval_reward_count" field.
func (u *TaskConfigUpsertBulk) SetMaxIntervalRewardCount(v uint32) *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.SetMaxIntervalRewardCount(v)
	})
}

// AddMaxIntervalRewardCount adds v to the "max_interval_reward_count" field.
func (u *TaskConfigUpsertBulk) AddMaxIntervalRewardCount(v uint32) *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.AddMaxIntervalRewardCount(v)
	})
}

// UpdateMaxIntervalRewardCount sets the "max_interval_reward_count" field to the value that was provided on create.
func (u *TaskConfigUpsertBulk) UpdateMaxIntervalRewardCount() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.UpdateMaxIntervalRewardCount()
	})
}

// ClearMaxIntervalRewardCount clears the value of the "max_interval_reward_count" field.
func (u *TaskConfigUpsertBulk) ClearMaxIntervalRewardCount() *TaskConfigUpsertBulk {
	return u.Update(func(s *TaskConfigUpsert) {
		s.ClearMaxIntervalRewardCount()
	})
}

// Exec executes the query.
func (u *TaskConfigUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the TaskConfigCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for TaskConfigCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskConfigUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/couponscope"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// CouponScopeUpdate is the builder for updating CouponScope entities.
type CouponScopeUpdate struct {
	config
	hooks     []Hook
	mutation  *CouponScopeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CouponScopeUpdate builder.
func (csu *CouponScopeUpdate) Where(ps ...predicate.CouponScope) *CouponScopeUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetCreatedAt sets the "created_at" field.
func (csu *CouponScopeUpdate) SetCreatedAt(u uint32) *CouponScopeUpdate {
	csu.mutation.ResetCreatedAt()
	csu.mutation.SetCreatedAt(u)
	return csu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csu *CouponScopeUpdate) SetNillableCreatedAt(u *uint32) *CouponScopeUpdate {
	if u != nil {
		csu.SetCreatedAt(*u)
	}
	return csu
}

// AddCreatedAt adds u to the "created_at" field.
func (csu *CouponScopeUpdate) AddCreatedAt(u int32) *CouponScopeUpdate {
	csu.mutation.AddCreatedAt(u)
	return csu
}

// SetUpdatedAt sets the "updated_at" field.
func (csu *CouponScopeUpdate) SetUpdatedAt(u uint32) *CouponScopeUpdate {
	csu.mutation.ResetUpdatedAt()
	csu.mutation.SetUpdatedAt(u)
	return csu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (csu *CouponScopeUpdate) AddUpdatedAt(u int32) *CouponScopeUpdate {
	csu.mutation.AddUpdatedAt(u)
	return csu
}

// SetDeletedAt sets the "deleted_at" field.
func (csu *CouponScopeUpdate) SetDeletedAt(u uint32) *CouponScopeUpdate {
	csu.mutation.ResetDeletedAt()
	csu.mutation.SetDeletedAt(u)
	return csu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (csu *CouponScopeUpdate) SetNillableDeletedAt(u *uint32) *CouponScopeUpdate {
	if u != nil {
		csu.SetDeletedAt(*u)
	}
	return csu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (csu *CouponScopeUpdate) AddDeletedAt(u int32) *CouponScopeUpdate {
	csu.mutation.AddDeletedAt(u)
	return csu
}

// SetEntID sets the "ent_id" field.
func (csu *CouponScopeUpdate) SetEntID(u uuid.UUID) *CouponScopeUpdate {
	csu.mutation.SetEntID(u)
	return csu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (csu *CouponScopeUpdate) SetNillableEntID(u *uuid.UUID) *CouponScopeUpdate {
	if u != nil {
		csu.SetEntID(*u)
	}
	return csu
}

// SetCouponID sets the "coupon_id" field.
func (csu *CouponScopeUpdate) SetCouponID(u uuid.UUID) *CouponScopeUpdate {
	csu.mutation.SetCouponID(u)
	return csu
}

// SetNillableCouponID sets the "coupon_id" field if the given value is not nil.
func (csu *CouponScopeUpdate) SetNillableCouponID(u *uuid.UUID) *CouponScopeUpdate {
	if u != nil {
		csu.SetCouponID(*u)
	}
	return csu
}

// ClearCouponID clears the value of the "coupon_id" field.
func (csu *CouponScopeUpdate) ClearCouponID() *CouponScopeUpdate {
	csu.mutation.ClearCouponID()
	return csu
}

// SetGoodID sets the "good_id" field.
func (csu *CouponScopeUpdate) SetGoodID(u uuid.UUID) *CouponScopeUpdate {
	csu.mutation.SetGoodID(u)
	return csu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (csu *CouponScopeUpdate) SetNillableGoodID(u *uuid.UUID) *CouponScopeUpdate {
	if u != nil {
		csu.SetGoodID(*u)
	}
	return csu
}

// ClearGoodID clears the value of the "good_id" field.
func (csu *CouponScopeUpdate) ClearGoodID() *CouponScopeUpdate {
	csu.mutation.ClearGoodID()
	return csu
}

// SetCouponScope sets the "coupon_scope" field.
func (csu *CouponScopeUpdate) SetCouponScope(s string) *CouponScopeUpdate {
	csu.mutation.SetCouponScope(s)
	return csu
}

// SetNillableCouponScope sets the "coupon_scope" field if the given value is not nil.
func (csu *CouponScopeUpdate) SetNillableCouponScope(s *string) *CouponScopeUpdate {
	if s != nil {
		csu.SetCouponScope(*s)
	}
	return csu
}

// ClearCouponScope clears the value of the "coupon_scope" field.
func (csu *CouponScopeUpdate) ClearCouponScope() *CouponScopeUpdate {
	csu.mutation.ClearCouponScope()
	return csu
}

// Mutation returns the CouponScopeMutation object of the builder.
func (csu *CouponScopeUpdate) Mutation() *CouponScopeMutation {
	return csu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *CouponScopeUpdate) Save(ctx context.Context) (int, error) {
	csu.defaults()
	return withHooks(ctx, csu.sqlSave, csu.mutation, csu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csu *CouponScopeUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *CouponScopeUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *CouponScopeUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csu *CouponScopeUpdate) defaults() {
	if _, ok := csu.mutation.UpdatedAt(); !ok {
		v := couponscope.UpdateDefaultUpdatedAt()
		csu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (csu *CouponScopeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CouponScopeUpdate {
	csu.modifiers = append(csu.modifiers, modifiers...)
	return csu
}

func (csu *CouponScopeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(couponscope.Table, couponscope.Columns, sqlgraph.NewFieldSpec(couponscope.FieldID, field.TypeUint32))
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.CreatedAt(); ok {
		_spec.SetField(couponscope.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := csu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(couponscope.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := csu.mutation.UpdatedAt(); ok {
		_spec.SetField(couponscope.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := csu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(couponscope.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := csu.mutation.DeletedAt(); ok {
		_spec.SetField(couponscope.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := csu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(couponscope.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := csu.mutation.EntID(); ok {
		_spec.SetField(couponscope.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := csu.mutation.CouponID(); ok {
		_spec.SetField(couponscope.FieldCouponID, field.TypeUUID, value)
	}
	if csu.mutation.CouponIDCleared() {
		_spec.ClearField(couponscope.FieldCouponID, field.TypeUUID)
	}
	if value, ok := csu.mutation.GoodID(); ok {
		_spec.SetField(couponscope.FieldGoodID, field.TypeUUID, value)
	}
	if csu.mutation.GoodIDCleared() {
		_spec.ClearField(couponscope.FieldGoodID, field.TypeUUID)
	}
	if value, ok := csu.mutation.CouponScope(); ok {
		_spec.SetField(couponscope.FieldCouponScope, field.TypeString, value)
	}
	if csu.mutation.CouponScopeCleared() {
		_spec.ClearField(couponscope.FieldCouponScope, field.TypeString)
	}
	_spec.AddModifiers(csu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{couponscope.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csu.mutation.done = true
	return n, nil
}

// CouponScopeUpdateOne is the builder for updating a single CouponScope entity.
type CouponScopeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CouponScopeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (csuo *CouponScopeUpdateOne) SetCreatedAt(u uint32) *CouponScopeUpdateOne {
	csuo.mutation.ResetCreatedAt()
	csuo.mutation.SetCreatedAt(u)
	return csuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csuo *CouponScopeUpdateOne) SetNillableCreatedAt(u *uint32) *CouponScopeUpdateOne {
	if u != nil {
		csuo.SetCreatedAt(*u)
	}
	return csuo
}

// AddCreatedAt adds u to the "created_at" field.
func (csuo *CouponScopeUpdateOne) AddCreatedAt(u int32) *CouponScopeUpdateOne {
	csuo.mutation.AddCreatedAt(u)
	return csuo
}

// SetUpdatedAt sets the "updated_at" field.
func (csuo *CouponScopeUpdateOne) SetUpdatedAt(u uint32) *CouponScopeUpdateOne {
	csuo.mutation.ResetUpdatedAt()
	csuo.mutation.SetUpdatedAt(u)
	return csuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (csuo *CouponScopeUpdateOne) AddUpdatedAt(u int32) *CouponScopeUpdateOne {
	csuo.mutation.AddUpdatedAt(u)
	return csuo
}

// SetDeletedAt sets the "deleted_at" field.
func (csuo *CouponScopeUpdateOne) SetDeletedAt(u uint32) *CouponScopeUpdateOne {
	csuo.mutation.ResetDeletedAt()
	csuo.mutation.SetDeletedAt(u)
	return csuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (csuo *CouponScopeUpdateOne) SetNillableDeletedAt(u *uint32) *CouponScopeUpdateOne {
	if u != nil {
		csuo.SetDeletedAt(*u)
	}
	return csuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (csuo *CouponScopeUpdateOne) AddDeletedAt(u int32) *CouponScopeUpdateOne {
	csuo.mutation.AddDeletedAt(u)
	return csuo
}

// SetEntID sets the "ent_id" field.
func (csuo *CouponScopeUpdateOne) SetEntID(u uuid.UUID) *CouponScopeUpdateOne {
	csuo.mutation.SetEntID(u)
	return csuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (csuo *CouponScopeUpdateOne) SetNillableEntID(u *uuid.UUID) *CouponScopeUpdateOne {
	if u != nil {
		csuo.SetEntID(*u)
	}
	return csuo
}

// SetCouponID sets the "coupon_id" field.
func (csuo *CouponScopeUpdateOne) SetCouponID(u uuid.UUID) *CouponScopeUpdateOne {
	csuo.mutation.SetCouponID(u)
	return csuo
}

// SetNillableCouponID sets the "coupon_id" field if the given value is not nil.
func (csuo *CouponScopeUpdateOne) SetNillableCouponID(u *uuid.UUID) *CouponScopeUpdateOne {
	if u != nil {
		csuo.SetCouponID(*u)
	}
	return csuo
}

// ClearCouponID clears the value of the "coupon_id" field.
func (csuo *CouponScopeUpdateOne) ClearCouponID() *CouponScopeUpdateOne {
	csuo.mutation.ClearCouponID()
	return csuo
}

// SetGoodID sets the "good_id" field.
func (csuo *CouponScopeUpdateOne) SetGoodID(u uuid.UUID) *CouponScopeUpdateOne {
	csuo.mutation.SetGoodID(u)
	return csuo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (csuo *CouponScopeUpdateOne) SetNillableGoodID(u *uuid.UUID) *CouponScopeUpdateOne {
	if u != nil {
		csuo.SetGoodID(*u)
	}
	return csuo
}

// ClearGoodID clears the value of the "good_id" field.
func (csuo *CouponScopeUpdateOne) ClearGoodID() *CouponScopeUpdateOne {
	csuo.mutation.ClearGoodID()
	return csuo
}

// SetCouponScope sets the "coupon_scope" field.
func (csuo *CouponScopeUpdateOne) SetCouponScope(s string) *CouponScopeUpdateOne {
	csuo.mutation.SetCouponScope(s)
	return csuo
}

// SetNillableCouponScope sets the "coupon_scope" field if the given value is not nil.
func (csuo *CouponScopeUpdateOne) SetNillableCouponScope(s *string) *CouponScopeUpdateOne {
	if s != nil {
		csuo.SetCouponScope(*s)
	}
	return csuo
}

// ClearCouponScope clears the value of the "coupon_scope" field.
func (csuo *CouponScopeUpdateOne) ClearCouponScope() *CouponScopeUpdateOne {
	csuo.mutation.ClearCouponScope()
	return csuo
}

// Mutation returns the CouponScopeMutation object of the builder.
func (csuo *CouponScopeUpdateOne) Mutation() *CouponScopeMutation {
	return csuo.mutation
}

// Where appends a list predicates to the CouponScopeUpdate builder.
func (csuo *CouponScopeUpdateOne) Where(ps ...predicate.CouponScope) *CouponScopeUpdateOne {
	csuo.mutation.Where(ps...)
	return csuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *CouponScopeUpdateOne) Select(field string, fields ...string) *CouponScopeUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated CouponScope entity.
func (csuo *CouponScopeUpdateOne) Save(ctx context.Context) (*CouponScope, error) {
	csuo.defaults()
	return withHooks(ctx, csuo.sqlSave, csuo.mutation, csuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *CouponScopeUpdateOne) SaveX(ctx context.Context) *CouponScope {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *CouponScopeUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *CouponScopeUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csuo *CouponScopeUpdateOne) defaults() {
	if _, ok := csuo.mutation.UpdatedAt(); !ok {
		v := couponscope.UpdateDefaultUpdatedAt()
		csuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (csuo *CouponScopeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CouponScopeUpdateOne {
	csuo.modifiers = append(csuo.modifiers, modifiers...)
	return csuo
}

func (csuo *CouponScopeUpdateOne) sqlSave(ctx context.Context) (_node *CouponScope, err error) {
	_spec := sqlgraph.NewUpdateSpec(couponscope.Table, couponscope.Columns, sqlgraph.NewFieldSpec(couponscope.FieldID, field.TypeUint32))
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "CouponScope.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, couponscope.FieldID)
		for _, f := range fields {
			if !couponscope.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != couponscope.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.CreatedAt(); ok {
		_spec.SetField(couponscope.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := csuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(couponscope.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := csuo.mutation.UpdatedAt(); ok {
		_spec.SetField(couponscope.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := csuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(couponscope.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := csuo.mutation.DeletedAt(); ok {
		_spec.SetField(couponscope.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := csuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(couponscope.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := csuo.mutation.EntID(); ok {
		_spec.SetField(couponscope.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := csuo.mutation.CouponID(); ok {
		_spec.SetField(couponscope.FieldCouponID, field.TypeUUID, value)
	}
	if csuo.mutation.CouponIDCleared() {
		_spec.ClearField(couponscope.FieldCouponID, field.TypeUUID)
	}
	if value, ok := csuo.mutation.GoodID(); ok {
		_spec.SetField(couponscope.FieldGoodID, field.TypeUUID, value)
	}
	if csuo.mutation.GoodIDCleared() {
		_spec.ClearField(couponscope.FieldGoodID, field.TypeUUID)
	}
	if value, ok := csuo.mutation.CouponScope(); ok {
		_spec.SetField(couponscope.FieldCouponScope, field.TypeString, value)
	}
	if csuo.mutation.CouponScopeCleared() {
		_spec.ClearField(couponscope.FieldCouponScope, field.TypeString)
	}
	_spec.AddModifiers(csuo.modifiers...)
	_node = &CouponScope{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{couponscope.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csuo.mutation.done = true
	return _node, nil
}

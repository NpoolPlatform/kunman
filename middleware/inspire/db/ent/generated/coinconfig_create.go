// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/coinconfig"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// CoinConfigCreate is the builder for creating a CoinConfig entity.
type CoinConfigCreate struct {
	config
	mutation *CoinConfigMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ccc *CoinConfigCreate) SetCreatedAt(u uint32) *CoinConfigCreate {
	ccc.mutation.SetCreatedAt(u)
	return ccc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ccc *CoinConfigCreate) SetNillableCreatedAt(u *uint32) *CoinConfigCreate {
	if u != nil {
		ccc.SetCreatedAt(*u)
	}
	return ccc
}

// SetUpdatedAt sets the "updated_at" field.
func (ccc *CoinConfigCreate) SetUpdatedAt(u uint32) *CoinConfigCreate {
	ccc.mutation.SetUpdatedAt(u)
	return ccc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ccc *CoinConfigCreate) SetNillableUpdatedAt(u *uint32) *CoinConfigCreate {
	if u != nil {
		ccc.SetUpdatedAt(*u)
	}
	return ccc
}

// SetDeletedAt sets the "deleted_at" field.
func (ccc *CoinConfigCreate) SetDeletedAt(u uint32) *CoinConfigCreate {
	ccc.mutation.SetDeletedAt(u)
	return ccc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ccc *CoinConfigCreate) SetNillableDeletedAt(u *uint32) *CoinConfigCreate {
	if u != nil {
		ccc.SetDeletedAt(*u)
	}
	return ccc
}

// SetEntID sets the "ent_id" field.
func (ccc *CoinConfigCreate) SetEntID(u uuid.UUID) *CoinConfigCreate {
	ccc.mutation.SetEntID(u)
	return ccc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ccc *CoinConfigCreate) SetNillableEntID(u *uuid.UUID) *CoinConfigCreate {
	if u != nil {
		ccc.SetEntID(*u)
	}
	return ccc
}

// SetAppID sets the "app_id" field.
func (ccc *CoinConfigCreate) SetAppID(u uuid.UUID) *CoinConfigCreate {
	ccc.mutation.SetAppID(u)
	return ccc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ccc *CoinConfigCreate) SetNillableAppID(u *uuid.UUID) *CoinConfigCreate {
	if u != nil {
		ccc.SetAppID(*u)
	}
	return ccc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (ccc *CoinConfigCreate) SetCoinTypeID(u uuid.UUID) *CoinConfigCreate {
	ccc.mutation.SetCoinTypeID(u)
	return ccc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (ccc *CoinConfigCreate) SetNillableCoinTypeID(u *uuid.UUID) *CoinConfigCreate {
	if u != nil {
		ccc.SetCoinTypeID(*u)
	}
	return ccc
}

// SetMaxValue sets the "max_value" field.
func (ccc *CoinConfigCreate) SetMaxValue(d decimal.Decimal) *CoinConfigCreate {
	ccc.mutation.SetMaxValue(d)
	return ccc
}

// SetNillableMaxValue sets the "max_value" field if the given value is not nil.
func (ccc *CoinConfigCreate) SetNillableMaxValue(d *decimal.Decimal) *CoinConfigCreate {
	if d != nil {
		ccc.SetMaxValue(*d)
	}
	return ccc
}

// SetAllocated sets the "allocated" field.
func (ccc *CoinConfigCreate) SetAllocated(d decimal.Decimal) *CoinConfigCreate {
	ccc.mutation.SetAllocated(d)
	return ccc
}

// SetNillableAllocated sets the "allocated" field if the given value is not nil.
func (ccc *CoinConfigCreate) SetNillableAllocated(d *decimal.Decimal) *CoinConfigCreate {
	if d != nil {
		ccc.SetAllocated(*d)
	}
	return ccc
}

// SetID sets the "id" field.
func (ccc *CoinConfigCreate) SetID(u uint32) *CoinConfigCreate {
	ccc.mutation.SetID(u)
	return ccc
}

// Mutation returns the CoinConfigMutation object of the builder.
func (ccc *CoinConfigCreate) Mutation() *CoinConfigMutation {
	return ccc.mutation
}

// Save creates the CoinConfig in the database.
func (ccc *CoinConfigCreate) Save(ctx context.Context) (*CoinConfig, error) {
	ccc.defaults()
	return withHooks(ctx, ccc.sqlSave, ccc.mutation, ccc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ccc *CoinConfigCreate) SaveX(ctx context.Context) *CoinConfig {
	v, err := ccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccc *CoinConfigCreate) Exec(ctx context.Context) error {
	_, err := ccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccc *CoinConfigCreate) ExecX(ctx context.Context) {
	if err := ccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccc *CoinConfigCreate) defaults() {
	if _, ok := ccc.mutation.CreatedAt(); !ok {
		v := coinconfig.DefaultCreatedAt()
		ccc.mutation.SetCreatedAt(v)
	}
	if _, ok := ccc.mutation.UpdatedAt(); !ok {
		v := coinconfig.DefaultUpdatedAt()
		ccc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ccc.mutation.DeletedAt(); !ok {
		v := coinconfig.DefaultDeletedAt()
		ccc.mutation.SetDeletedAt(v)
	}
	if _, ok := ccc.mutation.EntID(); !ok {
		v := coinconfig.DefaultEntID()
		ccc.mutation.SetEntID(v)
	}
	if _, ok := ccc.mutation.AppID(); !ok {
		v := coinconfig.DefaultAppID()
		ccc.mutation.SetAppID(v)
	}
	if _, ok := ccc.mutation.CoinTypeID(); !ok {
		v := coinconfig.DefaultCoinTypeID()
		ccc.mutation.SetCoinTypeID(v)
	}
	if _, ok := ccc.mutation.MaxValue(); !ok {
		v := coinconfig.DefaultMaxValue
		ccc.mutation.SetMaxValue(v)
	}
	if _, ok := ccc.mutation.Allocated(); !ok {
		v := coinconfig.DefaultAllocated
		ccc.mutation.SetAllocated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccc *CoinConfigCreate) check() error {
	if _, ok := ccc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "CoinConfig.created_at"`)}
	}
	if _, ok := ccc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "CoinConfig.updated_at"`)}
	}
	if _, ok := ccc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "CoinConfig.deleted_at"`)}
	}
	if _, ok := ccc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "CoinConfig.ent_id"`)}
	}
	return nil
}

func (ccc *CoinConfigCreate) sqlSave(ctx context.Context) (*CoinConfig, error) {
	if err := ccc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	ccc.mutation.id = &_node.ID
	ccc.mutation.done = true
	return _node, nil
}

func (ccc *CoinConfigCreate) createSpec() (*CoinConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &CoinConfig{config: ccc.config}
		_spec = sqlgraph.NewCreateSpec(coinconfig.Table, sqlgraph.NewFieldSpec(coinconfig.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = ccc.conflict
	if id, ok := ccc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ccc.mutation.CreatedAt(); ok {
		_spec.SetField(coinconfig.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := ccc.mutation.UpdatedAt(); ok {
		_spec.SetField(coinconfig.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := ccc.mutation.DeletedAt(); ok {
		_spec.SetField(coinconfig.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := ccc.mutation.EntID(); ok {
		_spec.SetField(coinconfig.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := ccc.mutation.AppID(); ok {
		_spec.SetField(coinconfig.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := ccc.mutation.CoinTypeID(); ok {
		_spec.SetField(coinconfig.FieldCoinTypeID, field.TypeUUID, value)
		_node.CoinTypeID = value
	}
	if value, ok := ccc.mutation.MaxValue(); ok {
		_spec.SetField(coinconfig.FieldMaxValue, field.TypeOther, value)
		_node.MaxValue = value
	}
	if value, ok := ccc.mutation.Allocated(); ok {
		_spec.SetField(coinconfig.FieldAllocated, field.TypeOther, value)
		_node.Allocated = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CoinConfig.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CoinConfigUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccc *CoinConfigCreate) OnConflict(opts ...sql.ConflictOption) *CoinConfigUpsertOne {
	ccc.conflict = opts
	return &CoinConfigUpsertOne{
		create: ccc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CoinConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccc *CoinConfigCreate) OnConflictColumns(columns ...string) *CoinConfigUpsertOne {
	ccc.conflict = append(ccc.conflict, sql.ConflictColumns(columns...))
	return &CoinConfigUpsertOne{
		create: ccc,
	}
}

type (
	// CoinConfigUpsertOne is the builder for "upsert"-ing
	//  one CoinConfig node.
	CoinConfigUpsertOne struct {
		create *CoinConfigCreate
	}

	// CoinConfigUpsert is the "OnConflict" setter.
	CoinConfigUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *CoinConfigUpsert) SetCreatedAt(v uint32) *CoinConfigUpsert {
	u.Set(coinconfig.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CoinConfigUpsert) UpdateCreatedAt() *CoinConfigUpsert {
	u.SetExcluded(coinconfig.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CoinConfigUpsert) AddCreatedAt(v uint32) *CoinConfigUpsert {
	u.Add(coinconfig.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CoinConfigUpsert) SetUpdatedAt(v uint32) *CoinConfigUpsert {
	u.Set(coinconfig.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CoinConfigUpsert) UpdateUpdatedAt() *CoinConfigUpsert {
	u.SetExcluded(coinconfig.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CoinConfigUpsert) AddUpdatedAt(v uint32) *CoinConfigUpsert {
	u.Add(coinconfig.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CoinConfigUpsert) SetDeletedAt(v uint32) *CoinConfigUpsert {
	u.Set(coinconfig.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CoinConfigUpsert) UpdateDeletedAt() *CoinConfigUpsert {
	u.SetExcluded(coinconfig.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CoinConfigUpsert) AddDeletedAt(v uint32) *CoinConfigUpsert {
	u.Add(coinconfig.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *CoinConfigUpsert) SetEntID(v uuid.UUID) *CoinConfigUpsert {
	u.Set(coinconfig.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CoinConfigUpsert) UpdateEntID() *CoinConfigUpsert {
	u.SetExcluded(coinconfig.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *CoinConfigUpsert) SetAppID(v uuid.UUID) *CoinConfigUpsert {
	u.Set(coinconfig.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CoinConfigUpsert) UpdateAppID() *CoinConfigUpsert {
	u.SetExcluded(coinconfig.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *CoinConfigUpsert) ClearAppID() *CoinConfigUpsert {
	u.SetNull(coinconfig.FieldAppID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CoinConfigUpsert) SetCoinTypeID(v uuid.UUID) *CoinConfigUpsert {
	u.Set(coinconfig.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CoinConfigUpsert) UpdateCoinTypeID() *CoinConfigUpsert {
	u.SetExcluded(coinconfig.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *CoinConfigUpsert) ClearCoinTypeID() *CoinConfigUpsert {
	u.SetNull(coinconfig.FieldCoinTypeID)
	return u
}

// SetMaxValue sets the "max_value" field.
func (u *CoinConfigUpsert) SetMaxValue(v decimal.Decimal) *CoinConfigUpsert {
	u.Set(coinconfig.FieldMaxValue, v)
	return u
}

// UpdateMaxValue sets the "max_value" field to the value that was provided on create.
func (u *CoinConfigUpsert) UpdateMaxValue() *CoinConfigUpsert {
	u.SetExcluded(coinconfig.FieldMaxValue)
	return u
}

// ClearMaxValue clears the value of the "max_value" field.
func (u *CoinConfigUpsert) ClearMaxValue() *CoinConfigUpsert {
	u.SetNull(coinconfig.FieldMaxValue)
	return u
}

// SetAllocated sets the "allocated" field.
func (u *CoinConfigUpsert) SetAllocated(v decimal.Decimal) *CoinConfigUpsert {
	u.Set(coinconfig.FieldAllocated, v)
	return u
}

// UpdateAllocated sets the "allocated" field to the value that was provided on create.
func (u *CoinConfigUpsert) UpdateAllocated() *CoinConfigUpsert {
	u.SetExcluded(coinconfig.FieldAllocated)
	return u
}

// ClearAllocated clears the value of the "allocated" field.
func (u *CoinConfigUpsert) ClearAllocated() *CoinConfigUpsert {
	u.SetNull(coinconfig.FieldAllocated)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CoinConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(coinconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CoinConfigUpsertOne) UpdateNewValues() *CoinConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(coinconfig.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CoinConfig.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CoinConfigUpsertOne) Ignore() *CoinConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CoinConfigUpsertOne) DoNothing() *CoinConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CoinConfigCreate.OnConflict
// documentation for more info.
func (u *CoinConfigUpsertOne) Update(set func(*CoinConfigUpsert)) *CoinConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CoinConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CoinConfigUpsertOne) SetCreatedAt(v uint32) *CoinConfigUpsertOne {
	return u.Update(func(s *CoinConfigUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CoinConfigUpsertOne) AddCreatedAt(v uint32) *CoinConfigUpsertOne {
	return u.Update(func(s *CoinConfigUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CoinConfigUpsertOne) UpdateCreatedAt() *CoinConfigUpsertOne {
	return u.Update(func(s *CoinConfigUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CoinConfigUpsertOne) SetUpdatedAt(v uint32) *CoinConfigUpsertOne {
	return u.Update(func(s *CoinConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CoinConfigUpsertOne) AddUpdatedAt(v uint32) *CoinConfigUpsertOne {
	return u.Update(func(s *CoinConfigUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CoinConfigUpsertOne) UpdateUpdatedAt() *CoinConfigUpsertOne {
	return u.Update(func(s *CoinConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CoinConfigUpsertOne) SetDeletedAt(v uint32) *CoinConfigUpsertOne {
	return u.Update(func(s *CoinConfigUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CoinConfigUpsertOne) AddDeletedAt(v uint32) *CoinConfigUpsertOne {
	return u.Update(func(s *CoinConfigUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CoinConfigUpsertOne) UpdateDeletedAt() *CoinConfigUpsertOne {
	return u.Update(func(s *CoinConfigUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *CoinConfigUpsertOne) SetEntID(v uuid.UUID) *CoinConfigUpsertOne {
	return u.Update(func(s *CoinConfigUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CoinConfigUpsertOne) UpdateEntID() *CoinConfigUpsertOne {
	return u.Update(func(s *CoinConfigUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *CoinConfigUpsertOne) SetAppID(v uuid.UUID) *CoinConfigUpsertOne {
	return u.Update(func(s *CoinConfigUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CoinConfigUpsertOne) UpdateAppID() *CoinConfigUpsertOne {
	return u.Update(func(s *CoinConfigUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *CoinConfigUpsertOne) ClearAppID() *CoinConfigUpsertOne {
	return u.Update(func(s *CoinConfigUpsert) {
		s.ClearAppID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CoinConfigUpsertOne) SetCoinTypeID(v uuid.UUID) *CoinConfigUpsertOne {
	return u.Update(func(s *CoinConfigUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CoinConfigUpsertOne) UpdateCoinTypeID() *CoinConfigUpsertOne {
	return u.Update(func(s *CoinConfigUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *CoinConfigUpsertOne) ClearCoinTypeID() *CoinConfigUpsertOne {
	return u.Update(func(s *CoinConfigUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetMaxValue sets the "max_value" field.
func (u *CoinConfigUpsertOne) SetMaxValue(v decimal.Decimal) *CoinConfigUpsertOne {
	return u.Update(func(s *CoinConfigUpsert) {
		s.SetMaxValue(v)
	})
}

// UpdateMaxValue sets the "max_value" field to the value that was provided on create.
func (u *CoinConfigUpsertOne) UpdateMaxValue() *CoinConfigUpsertOne {
	return u.Update(func(s *CoinConfigUpsert) {
		s.UpdateMaxValue()
	})
}

// ClearMaxValue clears the value of the "max_value" field.
func (u *CoinConfigUpsertOne) ClearMaxValue() *CoinConfigUpsertOne {
	return u.Update(func(s *CoinConfigUpsert) {
		s.ClearMaxValue()
	})
}

// SetAllocated sets the "allocated" field.
func (u *CoinConfigUpsertOne) SetAllocated(v decimal.Decimal) *CoinConfigUpsertOne {
	return u.Update(func(s *CoinConfigUpsert) {
		s.SetAllocated(v)
	})
}

// UpdateAllocated sets the "allocated" field to the value that was provided on create.
func (u *CoinConfigUpsertOne) UpdateAllocated() *CoinConfigUpsertOne {
	return u.Update(func(s *CoinConfigUpsert) {
		s.UpdateAllocated()
	})
}

// ClearAllocated clears the value of the "allocated" field.
func (u *CoinConfigUpsertOne) ClearAllocated() *CoinConfigUpsertOne {
	return u.Update(func(s *CoinConfigUpsert) {
		s.ClearAllocated()
	})
}

// Exec executes the query.
func (u *CoinConfigUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CoinConfigCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CoinConfigUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CoinConfigUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CoinConfigUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CoinConfigCreateBulk is the builder for creating many CoinConfig entities in bulk.
type CoinConfigCreateBulk struct {
	config
	err      error
	builders []*CoinConfigCreate
	conflict []sql.ConflictOption
}

// Save creates the CoinConfig entities in the database.
func (cccb *CoinConfigCreateBulk) Save(ctx context.Context) ([]*CoinConfig, error) {
	if cccb.err != nil {
		return nil, cccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cccb.builders))
	nodes := make([]*CoinConfig, len(cccb.builders))
	mutators := make([]Mutator, len(cccb.builders))
	for i := range cccb.builders {
		func(i int, root context.Context) {
			builder := cccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CoinConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cccb *CoinConfigCreateBulk) SaveX(ctx context.Context) []*CoinConfig {
	v, err := cccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cccb *CoinConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := cccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cccb *CoinConfigCreateBulk) ExecX(ctx context.Context) {
	if err := cccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CoinConfig.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CoinConfigUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cccb *CoinConfigCreateBulk) OnConflict(opts ...sql.ConflictOption) *CoinConfigUpsertBulk {
	cccb.conflict = opts
	return &CoinConfigUpsertBulk{
		create: cccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CoinConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cccb *CoinConfigCreateBulk) OnConflictColumns(columns ...string) *CoinConfigUpsertBulk {
	cccb.conflict = append(cccb.conflict, sql.ConflictColumns(columns...))
	return &CoinConfigUpsertBulk{
		create: cccb,
	}
}

// CoinConfigUpsertBulk is the builder for "upsert"-ing
// a bulk of CoinConfig nodes.
type CoinConfigUpsertBulk struct {
	create *CoinConfigCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CoinConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(coinconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CoinConfigUpsertBulk) UpdateNewValues() *CoinConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(coinconfig.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CoinConfig.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CoinConfigUpsertBulk) Ignore() *CoinConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CoinConfigUpsertBulk) DoNothing() *CoinConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CoinConfigCreateBulk.OnConflict
// documentation for more info.
func (u *CoinConfigUpsertBulk) Update(set func(*CoinConfigUpsert)) *CoinConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CoinConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CoinConfigUpsertBulk) SetCreatedAt(v uint32) *CoinConfigUpsertBulk {
	return u.Update(func(s *CoinConfigUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CoinConfigUpsertBulk) AddCreatedAt(v uint32) *CoinConfigUpsertBulk {
	return u.Update(func(s *CoinConfigUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CoinConfigUpsertBulk) UpdateCreatedAt() *CoinConfigUpsertBulk {
	return u.Update(func(s *CoinConfigUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CoinConfigUpsertBulk) SetUpdatedAt(v uint32) *CoinConfigUpsertBulk {
	return u.Update(func(s *CoinConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CoinConfigUpsertBulk) AddUpdatedAt(v uint32) *CoinConfigUpsertBulk {
	return u.Update(func(s *CoinConfigUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CoinConfigUpsertBulk) UpdateUpdatedAt() *CoinConfigUpsertBulk {
	return u.Update(func(s *CoinConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CoinConfigUpsertBulk) SetDeletedAt(v uint32) *CoinConfigUpsertBulk {
	return u.Update(func(s *CoinConfigUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CoinConfigUpsertBulk) AddDeletedAt(v uint32) *CoinConfigUpsertBulk {
	return u.Update(func(s *CoinConfigUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CoinConfigUpsertBulk) UpdateDeletedAt() *CoinConfigUpsertBulk {
	return u.Update(func(s *CoinConfigUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *CoinConfigUpsertBulk) SetEntID(v uuid.UUID) *CoinConfigUpsertBulk {
	return u.Update(func(s *CoinConfigUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CoinConfigUpsertBulk) UpdateEntID() *CoinConfigUpsertBulk {
	return u.Update(func(s *CoinConfigUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *CoinConfigUpsertBulk) SetAppID(v uuid.UUID) *CoinConfigUpsertBulk {
	return u.Update(func(s *CoinConfigUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CoinConfigUpsertBulk) UpdateAppID() *CoinConfigUpsertBulk {
	return u.Update(func(s *CoinConfigUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *CoinConfigUpsertBulk) ClearAppID() *CoinConfigUpsertBulk {
	return u.Update(func(s *CoinConfigUpsert) {
		s.ClearAppID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CoinConfigUpsertBulk) SetCoinTypeID(v uuid.UUID) *CoinConfigUpsertBulk {
	return u.Update(func(s *CoinConfigUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CoinConfigUpsertBulk) UpdateCoinTypeID() *CoinConfigUpsertBulk {
	return u.Update(func(s *CoinConfigUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *CoinConfigUpsertBulk) ClearCoinTypeID() *CoinConfigUpsertBulk {
	return u.Update(func(s *CoinConfigUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetMaxValue sets the "max_value" field.
func (u *CoinConfigUpsertBulk) SetMaxValue(v decimal.Decimal) *CoinConfigUpsertBulk {
	return u.Update(func(s *CoinConfigUpsert) {
		s.SetMaxValue(v)
	})
}

// UpdateMaxValue sets the "max_value" field to the value that was provided on create.
func (u *CoinConfigUpsertBulk) UpdateMaxValue() *CoinConfigUpsertBulk {
	return u.Update(func(s *CoinConfigUpsert) {
		s.UpdateMaxValue()
	})
}

// ClearMaxValue clears the value of the "max_value" field.
func (u *CoinConfigUpsertBulk) ClearMaxValue() *CoinConfigUpsertBulk {
	return u.Update(func(s *CoinConfigUpsert) {
		s.ClearMaxValue()
	})
}

// SetAllocated sets the "allocated" field.
func (u *CoinConfigUpsertBulk) SetAllocated(v decimal.Decimal) *CoinConfigUpsertBulk {
	return u.Update(func(s *CoinConfigUpsert) {
		s.SetAllocated(v)
	})
}

// UpdateAllocated sets the "allocated" field to the value that was provided on create.
func (u *CoinConfigUpsertBulk) UpdateAllocated() *CoinConfigUpsertBulk {
	return u.Update(func(s *CoinConfigUpsert) {
		s.UpdateAllocated()
	})
}

// ClearAllocated clears the value of the "allocated" field.
func (u *CoinConfigUpsertBulk) ClearAllocated() *CoinConfigUpsertBulk {
	return u.Update(func(s *CoinConfigUpsert) {
		s.ClearAllocated()
	})
}

// Exec executes the query.
func (u *CoinConfigUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the CoinConfigCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CoinConfigCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CoinConfigUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/coupon"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// CouponCreate is the builder for creating a Coupon entity.
type CouponCreate struct {
	config
	mutation *CouponMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *CouponCreate) SetCreatedAt(u uint32) *CouponCreate {
	cc.mutation.SetCreatedAt(u)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CouponCreate) SetNillableCreatedAt(u *uint32) *CouponCreate {
	if u != nil {
		cc.SetCreatedAt(*u)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CouponCreate) SetUpdatedAt(u uint32) *CouponCreate {
	cc.mutation.SetUpdatedAt(u)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CouponCreate) SetNillableUpdatedAt(u *uint32) *CouponCreate {
	if u != nil {
		cc.SetUpdatedAt(*u)
	}
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *CouponCreate) SetDeletedAt(u uint32) *CouponCreate {
	cc.mutation.SetDeletedAt(u)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *CouponCreate) SetNillableDeletedAt(u *uint32) *CouponCreate {
	if u != nil {
		cc.SetDeletedAt(*u)
	}
	return cc
}

// SetEntID sets the "ent_id" field.
func (cc *CouponCreate) SetEntID(u uuid.UUID) *CouponCreate {
	cc.mutation.SetEntID(u)
	return cc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cc *CouponCreate) SetNillableEntID(u *uuid.UUID) *CouponCreate {
	if u != nil {
		cc.SetEntID(*u)
	}
	return cc
}

// SetAppID sets the "app_id" field.
func (cc *CouponCreate) SetAppID(u uuid.UUID) *CouponCreate {
	cc.mutation.SetAppID(u)
	return cc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (cc *CouponCreate) SetNillableAppID(u *uuid.UUID) *CouponCreate {
	if u != nil {
		cc.SetAppID(*u)
	}
	return cc
}

// SetDenomination sets the "denomination" field.
func (cc *CouponCreate) SetDenomination(d decimal.Decimal) *CouponCreate {
	cc.mutation.SetDenomination(d)
	return cc
}

// SetNillableDenomination sets the "denomination" field if the given value is not nil.
func (cc *CouponCreate) SetNillableDenomination(d *decimal.Decimal) *CouponCreate {
	if d != nil {
		cc.SetDenomination(*d)
	}
	return cc
}

// SetCirculation sets the "circulation" field.
func (cc *CouponCreate) SetCirculation(d decimal.Decimal) *CouponCreate {
	cc.mutation.SetCirculation(d)
	return cc
}

// SetNillableCirculation sets the "circulation" field if the given value is not nil.
func (cc *CouponCreate) SetNillableCirculation(d *decimal.Decimal) *CouponCreate {
	if d != nil {
		cc.SetCirculation(*d)
	}
	return cc
}

// SetRandom sets the "random" field.
func (cc *CouponCreate) SetRandom(b bool) *CouponCreate {
	cc.mutation.SetRandom(b)
	return cc
}

// SetNillableRandom sets the "random" field if the given value is not nil.
func (cc *CouponCreate) SetNillableRandom(b *bool) *CouponCreate {
	if b != nil {
		cc.SetRandom(*b)
	}
	return cc
}

// SetIssuedBy sets the "issued_by" field.
func (cc *CouponCreate) SetIssuedBy(u uuid.UUID) *CouponCreate {
	cc.mutation.SetIssuedBy(u)
	return cc
}

// SetNillableIssuedBy sets the "issued_by" field if the given value is not nil.
func (cc *CouponCreate) SetNillableIssuedBy(u *uuid.UUID) *CouponCreate {
	if u != nil {
		cc.SetIssuedBy(*u)
	}
	return cc
}

// SetStartAt sets the "start_at" field.
func (cc *CouponCreate) SetStartAt(u uint32) *CouponCreate {
	cc.mutation.SetStartAt(u)
	return cc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (cc *CouponCreate) SetNillableStartAt(u *uint32) *CouponCreate {
	if u != nil {
		cc.SetStartAt(*u)
	}
	return cc
}

// SetEndAt sets the "end_at" field.
func (cc *CouponCreate) SetEndAt(u uint32) *CouponCreate {
	cc.mutation.SetEndAt(u)
	return cc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (cc *CouponCreate) SetNillableEndAt(u *uint32) *CouponCreate {
	if u != nil {
		cc.SetEndAt(*u)
	}
	return cc
}

// SetDurationDays sets the "duration_days" field.
func (cc *CouponCreate) SetDurationDays(u uint32) *CouponCreate {
	cc.mutation.SetDurationDays(u)
	return cc
}

// SetNillableDurationDays sets the "duration_days" field if the given value is not nil.
func (cc *CouponCreate) SetNillableDurationDays(u *uint32) *CouponCreate {
	if u != nil {
		cc.SetDurationDays(*u)
	}
	return cc
}

// SetMessage sets the "message" field.
func (cc *CouponCreate) SetMessage(s string) *CouponCreate {
	cc.mutation.SetMessage(s)
	return cc
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (cc *CouponCreate) SetNillableMessage(s *string) *CouponCreate {
	if s != nil {
		cc.SetMessage(*s)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *CouponCreate) SetName(s string) *CouponCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cc *CouponCreate) SetNillableName(s *string) *CouponCreate {
	if s != nil {
		cc.SetName(*s)
	}
	return cc
}

// SetAllocated sets the "allocated" field.
func (cc *CouponCreate) SetAllocated(d decimal.Decimal) *CouponCreate {
	cc.mutation.SetAllocated(d)
	return cc
}

// SetNillableAllocated sets the "allocated" field if the given value is not nil.
func (cc *CouponCreate) SetNillableAllocated(d *decimal.Decimal) *CouponCreate {
	if d != nil {
		cc.SetAllocated(*d)
	}
	return cc
}

// SetCouponType sets the "coupon_type" field.
func (cc *CouponCreate) SetCouponType(s string) *CouponCreate {
	cc.mutation.SetCouponType(s)
	return cc
}

// SetNillableCouponType sets the "coupon_type" field if the given value is not nil.
func (cc *CouponCreate) SetNillableCouponType(s *string) *CouponCreate {
	if s != nil {
		cc.SetCouponType(*s)
	}
	return cc
}

// SetThreshold sets the "threshold" field.
func (cc *CouponCreate) SetThreshold(d decimal.Decimal) *CouponCreate {
	cc.mutation.SetThreshold(d)
	return cc
}

// SetNillableThreshold sets the "threshold" field if the given value is not nil.
func (cc *CouponCreate) SetNillableThreshold(d *decimal.Decimal) *CouponCreate {
	if d != nil {
		cc.SetThreshold(*d)
	}
	return cc
}

// SetCouponConstraint sets the "coupon_constraint" field.
func (cc *CouponCreate) SetCouponConstraint(s string) *CouponCreate {
	cc.mutation.SetCouponConstraint(s)
	return cc
}

// SetNillableCouponConstraint sets the "coupon_constraint" field if the given value is not nil.
func (cc *CouponCreate) SetNillableCouponConstraint(s *string) *CouponCreate {
	if s != nil {
		cc.SetCouponConstraint(*s)
	}
	return cc
}

// SetCouponScope sets the "coupon_scope" field.
func (cc *CouponCreate) SetCouponScope(s string) *CouponCreate {
	cc.mutation.SetCouponScope(s)
	return cc
}

// SetNillableCouponScope sets the "coupon_scope" field if the given value is not nil.
func (cc *CouponCreate) SetNillableCouponScope(s *string) *CouponCreate {
	if s != nil {
		cc.SetCouponScope(*s)
	}
	return cc
}

// SetCashableProbability sets the "cashable_probability" field.
func (cc *CouponCreate) SetCashableProbability(d decimal.Decimal) *CouponCreate {
	cc.mutation.SetCashableProbability(d)
	return cc
}

// SetNillableCashableProbability sets the "cashable_probability" field if the given value is not nil.
func (cc *CouponCreate) SetNillableCashableProbability(d *decimal.Decimal) *CouponCreate {
	if d != nil {
		cc.SetCashableProbability(*d)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CouponCreate) SetID(u uint32) *CouponCreate {
	cc.mutation.SetID(u)
	return cc
}

// Mutation returns the CouponMutation object of the builder.
func (cc *CouponCreate) Mutation() *CouponMutation {
	return cc.mutation
}

// Save creates the Coupon in the database.
func (cc *CouponCreate) Save(ctx context.Context) (*Coupon, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CouponCreate) SaveX(ctx context.Context) *Coupon {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CouponCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CouponCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CouponCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := coupon.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := coupon.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.DeletedAt(); !ok {
		v := coupon.DefaultDeletedAt()
		cc.mutation.SetDeletedAt(v)
	}
	if _, ok := cc.mutation.EntID(); !ok {
		v := coupon.DefaultEntID()
		cc.mutation.SetEntID(v)
	}
	if _, ok := cc.mutation.AppID(); !ok {
		v := coupon.DefaultAppID()
		cc.mutation.SetAppID(v)
	}
	if _, ok := cc.mutation.Denomination(); !ok {
		v := coupon.DefaultDenomination
		cc.mutation.SetDenomination(v)
	}
	if _, ok := cc.mutation.Circulation(); !ok {
		v := coupon.DefaultCirculation
		cc.mutation.SetCirculation(v)
	}
	if _, ok := cc.mutation.Random(); !ok {
		v := coupon.DefaultRandom
		cc.mutation.SetRandom(v)
	}
	if _, ok := cc.mutation.IssuedBy(); !ok {
		v := coupon.DefaultIssuedBy()
		cc.mutation.SetIssuedBy(v)
	}
	if _, ok := cc.mutation.StartAt(); !ok {
		v := coupon.DefaultStartAt
		cc.mutation.SetStartAt(v)
	}
	if _, ok := cc.mutation.EndAt(); !ok {
		v := coupon.DefaultEndAt
		cc.mutation.SetEndAt(v)
	}
	if _, ok := cc.mutation.DurationDays(); !ok {
		v := coupon.DefaultDurationDays
		cc.mutation.SetDurationDays(v)
	}
	if _, ok := cc.mutation.Message(); !ok {
		v := coupon.DefaultMessage
		cc.mutation.SetMessage(v)
	}
	if _, ok := cc.mutation.Name(); !ok {
		v := coupon.DefaultName
		cc.mutation.SetName(v)
	}
	if _, ok := cc.mutation.Allocated(); !ok {
		v := coupon.DefaultAllocated
		cc.mutation.SetAllocated(v)
	}
	if _, ok := cc.mutation.CouponType(); !ok {
		v := coupon.DefaultCouponType
		cc.mutation.SetCouponType(v)
	}
	if _, ok := cc.mutation.Threshold(); !ok {
		v := coupon.DefaultThreshold
		cc.mutation.SetThreshold(v)
	}
	if _, ok := cc.mutation.CouponConstraint(); !ok {
		v := coupon.DefaultCouponConstraint
		cc.mutation.SetCouponConstraint(v)
	}
	if _, ok := cc.mutation.CouponScope(); !ok {
		v := coupon.DefaultCouponScope
		cc.mutation.SetCouponScope(v)
	}
	if _, ok := cc.mutation.CashableProbability(); !ok {
		v := coupon.DefaultCashableProbability
		cc.mutation.SetCashableProbability(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CouponCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Coupon.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Coupon.updated_at"`)}
	}
	if _, ok := cc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "Coupon.deleted_at"`)}
	}
	if _, ok := cc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "Coupon.ent_id"`)}
	}
	return nil
}

func (cc *CouponCreate) sqlSave(ctx context.Context) (*Coupon, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CouponCreate) createSpec() (*Coupon, *sqlgraph.CreateSpec) {
	var (
		_node = &Coupon{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(coupon.Table, sqlgraph.NewFieldSpec(coupon.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(coupon.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(coupon.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.SetField(coupon.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := cc.mutation.EntID(); ok {
		_spec.SetField(coupon.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := cc.mutation.AppID(); ok {
		_spec.SetField(coupon.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := cc.mutation.Denomination(); ok {
		_spec.SetField(coupon.FieldDenomination, field.TypeOther, value)
		_node.Denomination = value
	}
	if value, ok := cc.mutation.Circulation(); ok {
		_spec.SetField(coupon.FieldCirculation, field.TypeOther, value)
		_node.Circulation = value
	}
	if value, ok := cc.mutation.Random(); ok {
		_spec.SetField(coupon.FieldRandom, field.TypeBool, value)
		_node.Random = value
	}
	if value, ok := cc.mutation.IssuedBy(); ok {
		_spec.SetField(coupon.FieldIssuedBy, field.TypeUUID, value)
		_node.IssuedBy = value
	}
	if value, ok := cc.mutation.StartAt(); ok {
		_spec.SetField(coupon.FieldStartAt, field.TypeUint32, value)
		_node.StartAt = value
	}
	if value, ok := cc.mutation.EndAt(); ok {
		_spec.SetField(coupon.FieldEndAt, field.TypeUint32, value)
		_node.EndAt = value
	}
	if value, ok := cc.mutation.DurationDays(); ok {
		_spec.SetField(coupon.FieldDurationDays, field.TypeUint32, value)
		_node.DurationDays = value
	}
	if value, ok := cc.mutation.Message(); ok {
		_spec.SetField(coupon.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(coupon.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Allocated(); ok {
		_spec.SetField(coupon.FieldAllocated, field.TypeOther, value)
		_node.Allocated = value
	}
	if value, ok := cc.mutation.CouponType(); ok {
		_spec.SetField(coupon.FieldCouponType, field.TypeString, value)
		_node.CouponType = value
	}
	if value, ok := cc.mutation.Threshold(); ok {
		_spec.SetField(coupon.FieldThreshold, field.TypeOther, value)
		_node.Threshold = value
	}
	if value, ok := cc.mutation.CouponConstraint(); ok {
		_spec.SetField(coupon.FieldCouponConstraint, field.TypeString, value)
		_node.CouponConstraint = value
	}
	if value, ok := cc.mutation.CouponScope(); ok {
		_spec.SetField(coupon.FieldCouponScope, field.TypeString, value)
		_node.CouponScope = value
	}
	if value, ok := cc.mutation.CashableProbability(); ok {
		_spec.SetField(coupon.FieldCashableProbability, field.TypeOther, value)
		_node.CashableProbability = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Coupon.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CouponUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cc *CouponCreate) OnConflict(opts ...sql.ConflictOption) *CouponUpsertOne {
	cc.conflict = opts
	return &CouponUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Coupon.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CouponCreate) OnConflictColumns(columns ...string) *CouponUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CouponUpsertOne{
		create: cc,
	}
}

type (
	// CouponUpsertOne is the builder for "upsert"-ing
	//  one Coupon node.
	CouponUpsertOne struct {
		create *CouponCreate
	}

	// CouponUpsert is the "OnConflict" setter.
	CouponUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *CouponUpsert) SetCreatedAt(v uint32) *CouponUpsert {
	u.Set(coupon.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CouponUpsert) UpdateCreatedAt() *CouponUpsert {
	u.SetExcluded(coupon.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CouponUpsert) AddCreatedAt(v uint32) *CouponUpsert {
	u.Add(coupon.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponUpsert) SetUpdatedAt(v uint32) *CouponUpsert {
	u.Set(coupon.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponUpsert) UpdateUpdatedAt() *CouponUpsert {
	u.SetExcluded(coupon.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CouponUpsert) AddUpdatedAt(v uint32) *CouponUpsert {
	u.Add(coupon.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CouponUpsert) SetDeletedAt(v uint32) *CouponUpsert {
	u.Set(coupon.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CouponUpsert) UpdateDeletedAt() *CouponUpsert {
	u.SetExcluded(coupon.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CouponUpsert) AddDeletedAt(v uint32) *CouponUpsert {
	u.Add(coupon.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *CouponUpsert) SetEntID(v uuid.UUID) *CouponUpsert {
	u.Set(coupon.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CouponUpsert) UpdateEntID() *CouponUpsert {
	u.SetExcluded(coupon.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *CouponUpsert) SetAppID(v uuid.UUID) *CouponUpsert {
	u.Set(coupon.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CouponUpsert) UpdateAppID() *CouponUpsert {
	u.SetExcluded(coupon.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *CouponUpsert) ClearAppID() *CouponUpsert {
	u.SetNull(coupon.FieldAppID)
	return u
}

// SetDenomination sets the "denomination" field.
func (u *CouponUpsert) SetDenomination(v decimal.Decimal) *CouponUpsert {
	u.Set(coupon.FieldDenomination, v)
	return u
}

// UpdateDenomination sets the "denomination" field to the value that was provided on create.
func (u *CouponUpsert) UpdateDenomination() *CouponUpsert {
	u.SetExcluded(coupon.FieldDenomination)
	return u
}

// ClearDenomination clears the value of the "denomination" field.
func (u *CouponUpsert) ClearDenomination() *CouponUpsert {
	u.SetNull(coupon.FieldDenomination)
	return u
}

// SetCirculation sets the "circulation" field.
func (u *CouponUpsert) SetCirculation(v decimal.Decimal) *CouponUpsert {
	u.Set(coupon.FieldCirculation, v)
	return u
}

// UpdateCirculation sets the "circulation" field to the value that was provided on create.
func (u *CouponUpsert) UpdateCirculation() *CouponUpsert {
	u.SetExcluded(coupon.FieldCirculation)
	return u
}

// ClearCirculation clears the value of the "circulation" field.
func (u *CouponUpsert) ClearCirculation() *CouponUpsert {
	u.SetNull(coupon.FieldCirculation)
	return u
}

// SetRandom sets the "random" field.
func (u *CouponUpsert) SetRandom(v bool) *CouponUpsert {
	u.Set(coupon.FieldRandom, v)
	return u
}

// UpdateRandom sets the "random" field to the value that was provided on create.
func (u *CouponUpsert) UpdateRandom() *CouponUpsert {
	u.SetExcluded(coupon.FieldRandom)
	return u
}

// ClearRandom clears the value of the "random" field.
func (u *CouponUpsert) ClearRandom() *CouponUpsert {
	u.SetNull(coupon.FieldRandom)
	return u
}

// SetIssuedBy sets the "issued_by" field.
func (u *CouponUpsert) SetIssuedBy(v uuid.UUID) *CouponUpsert {
	u.Set(coupon.FieldIssuedBy, v)
	return u
}

// UpdateIssuedBy sets the "issued_by" field to the value that was provided on create.
func (u *CouponUpsert) UpdateIssuedBy() *CouponUpsert {
	u.SetExcluded(coupon.FieldIssuedBy)
	return u
}

// ClearIssuedBy clears the value of the "issued_by" field.
func (u *CouponUpsert) ClearIssuedBy() *CouponUpsert {
	u.SetNull(coupon.FieldIssuedBy)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *CouponUpsert) SetStartAt(v uint32) *CouponUpsert {
	u.Set(coupon.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *CouponUpsert) UpdateStartAt() *CouponUpsert {
	u.SetExcluded(coupon.FieldStartAt)
	return u
}

// AddStartAt adds v to the "start_at" field.
func (u *CouponUpsert) AddStartAt(v uint32) *CouponUpsert {
	u.Add(coupon.FieldStartAt, v)
	return u
}

// ClearStartAt clears the value of the "start_at" field.
func (u *CouponUpsert) ClearStartAt() *CouponUpsert {
	u.SetNull(coupon.FieldStartAt)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *CouponUpsert) SetEndAt(v uint32) *CouponUpsert {
	u.Set(coupon.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *CouponUpsert) UpdateEndAt() *CouponUpsert {
	u.SetExcluded(coupon.FieldEndAt)
	return u
}

// AddEndAt adds v to the "end_at" field.
func (u *CouponUpsert) AddEndAt(v uint32) *CouponUpsert {
	u.Add(coupon.FieldEndAt, v)
	return u
}

// ClearEndAt clears the value of the "end_at" field.
func (u *CouponUpsert) ClearEndAt() *CouponUpsert {
	u.SetNull(coupon.FieldEndAt)
	return u
}

// SetDurationDays sets the "duration_days" field.
func (u *CouponUpsert) SetDurationDays(v uint32) *CouponUpsert {
	u.Set(coupon.FieldDurationDays, v)
	return u
}

// UpdateDurationDays sets the "duration_days" field to the value that was provided on create.
func (u *CouponUpsert) UpdateDurationDays() *CouponUpsert {
	u.SetExcluded(coupon.FieldDurationDays)
	return u
}

// AddDurationDays adds v to the "duration_days" field.
func (u *CouponUpsert) AddDurationDays(v uint32) *CouponUpsert {
	u.Add(coupon.FieldDurationDays, v)
	return u
}

// ClearDurationDays clears the value of the "duration_days" field.
func (u *CouponUpsert) ClearDurationDays() *CouponUpsert {
	u.SetNull(coupon.FieldDurationDays)
	return u
}

// SetMessage sets the "message" field.
func (u *CouponUpsert) SetMessage(v string) *CouponUpsert {
	u.Set(coupon.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *CouponUpsert) UpdateMessage() *CouponUpsert {
	u.SetExcluded(coupon.FieldMessage)
	return u
}

// ClearMessage clears the value of the "message" field.
func (u *CouponUpsert) ClearMessage() *CouponUpsert {
	u.SetNull(coupon.FieldMessage)
	return u
}

// SetName sets the "name" field.
func (u *CouponUpsert) SetName(v string) *CouponUpsert {
	u.Set(coupon.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CouponUpsert) UpdateName() *CouponUpsert {
	u.SetExcluded(coupon.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *CouponUpsert) ClearName() *CouponUpsert {
	u.SetNull(coupon.FieldName)
	return u
}

// SetAllocated sets the "allocated" field.
func (u *CouponUpsert) SetAllocated(v decimal.Decimal) *CouponUpsert {
	u.Set(coupon.FieldAllocated, v)
	return u
}

// UpdateAllocated sets the "allocated" field to the value that was provided on create.
func (u *CouponUpsert) UpdateAllocated() *CouponUpsert {
	u.SetExcluded(coupon.FieldAllocated)
	return u
}

// ClearAllocated clears the value of the "allocated" field.
func (u *CouponUpsert) ClearAllocated() *CouponUpsert {
	u.SetNull(coupon.FieldAllocated)
	return u
}

// SetCouponType sets the "coupon_type" field.
func (u *CouponUpsert) SetCouponType(v string) *CouponUpsert {
	u.Set(coupon.FieldCouponType, v)
	return u
}

// UpdateCouponType sets the "coupon_type" field to the value that was provided on create.
func (u *CouponUpsert) UpdateCouponType() *CouponUpsert {
	u.SetExcluded(coupon.FieldCouponType)
	return u
}

// ClearCouponType clears the value of the "coupon_type" field.
func (u *CouponUpsert) ClearCouponType() *CouponUpsert {
	u.SetNull(coupon.FieldCouponType)
	return u
}

// SetThreshold sets the "threshold" field.
func (u *CouponUpsert) SetThreshold(v decimal.Decimal) *CouponUpsert {
	u.Set(coupon.FieldThreshold, v)
	return u
}

// UpdateThreshold sets the "threshold" field to the value that was provided on create.
func (u *CouponUpsert) UpdateThreshold() *CouponUpsert {
	u.SetExcluded(coupon.FieldThreshold)
	return u
}

// ClearThreshold clears the value of the "threshold" field.
func (u *CouponUpsert) ClearThreshold() *CouponUpsert {
	u.SetNull(coupon.FieldThreshold)
	return u
}

// SetCouponConstraint sets the "coupon_constraint" field.
func (u *CouponUpsert) SetCouponConstraint(v string) *CouponUpsert {
	u.Set(coupon.FieldCouponConstraint, v)
	return u
}

// UpdateCouponConstraint sets the "coupon_constraint" field to the value that was provided on create.
func (u *CouponUpsert) UpdateCouponConstraint() *CouponUpsert {
	u.SetExcluded(coupon.FieldCouponConstraint)
	return u
}

// ClearCouponConstraint clears the value of the "coupon_constraint" field.
func (u *CouponUpsert) ClearCouponConstraint() *CouponUpsert {
	u.SetNull(coupon.FieldCouponConstraint)
	return u
}

// SetCouponScope sets the "coupon_scope" field.
func (u *CouponUpsert) SetCouponScope(v string) *CouponUpsert {
	u.Set(coupon.FieldCouponScope, v)
	return u
}

// UpdateCouponScope sets the "coupon_scope" field to the value that was provided on create.
func (u *CouponUpsert) UpdateCouponScope() *CouponUpsert {
	u.SetExcluded(coupon.FieldCouponScope)
	return u
}

// ClearCouponScope clears the value of the "coupon_scope" field.
func (u *CouponUpsert) ClearCouponScope() *CouponUpsert {
	u.SetNull(coupon.FieldCouponScope)
	return u
}

// SetCashableProbability sets the "cashable_probability" field.
func (u *CouponUpsert) SetCashableProbability(v decimal.Decimal) *CouponUpsert {
	u.Set(coupon.FieldCashableProbability, v)
	return u
}

// UpdateCashableProbability sets the "cashable_probability" field to the value that was provided on create.
func (u *CouponUpsert) UpdateCashableProbability() *CouponUpsert {
	u.SetExcluded(coupon.FieldCashableProbability)
	return u
}

// ClearCashableProbability clears the value of the "cashable_probability" field.
func (u *CouponUpsert) ClearCashableProbability() *CouponUpsert {
	u.SetNull(coupon.FieldCashableProbability)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Coupon.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(coupon.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CouponUpsertOne) UpdateNewValues() *CouponUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(coupon.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Coupon.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CouponUpsertOne) Ignore() *CouponUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CouponUpsertOne) DoNothing() *CouponUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CouponCreate.OnConflict
// documentation for more info.
func (u *CouponUpsertOne) Update(set func(*CouponUpsert)) *CouponUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CouponUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CouponUpsertOne) SetCreatedAt(v uint32) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CouponUpsertOne) AddCreatedAt(v uint32) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateCreatedAt() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponUpsertOne) SetUpdatedAt(v uint32) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CouponUpsertOne) AddUpdatedAt(v uint32) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateUpdatedAt() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CouponUpsertOne) SetDeletedAt(v uint32) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CouponUpsertOne) AddDeletedAt(v uint32) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateDeletedAt() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *CouponUpsertOne) SetEntID(v uuid.UUID) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateEntID() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *CouponUpsertOne) SetAppID(v uuid.UUID) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateAppID() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *CouponUpsertOne) ClearAppID() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearAppID()
	})
}

// SetDenomination sets the "denomination" field.
func (u *CouponUpsertOne) SetDenomination(v decimal.Decimal) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetDenomination(v)
	})
}

// UpdateDenomination sets the "denomination" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateDenomination() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateDenomination()
	})
}

// ClearDenomination clears the value of the "denomination" field.
func (u *CouponUpsertOne) ClearDenomination() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearDenomination()
	})
}

// SetCirculation sets the "circulation" field.
func (u *CouponUpsertOne) SetCirculation(v decimal.Decimal) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetCirculation(v)
	})
}

// UpdateCirculation sets the "circulation" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateCirculation() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateCirculation()
	})
}

// ClearCirculation clears the value of the "circulation" field.
func (u *CouponUpsertOne) ClearCirculation() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearCirculation()
	})
}

// SetRandom sets the "random" field.
func (u *CouponUpsertOne) SetRandom(v bool) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetRandom(v)
	})
}

// UpdateRandom sets the "random" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateRandom() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateRandom()
	})
}

// ClearRandom clears the value of the "random" field.
func (u *CouponUpsertOne) ClearRandom() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearRandom()
	})
}

// SetIssuedBy sets the "issued_by" field.
func (u *CouponUpsertOne) SetIssuedBy(v uuid.UUID) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetIssuedBy(v)
	})
}

// UpdateIssuedBy sets the "issued_by" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateIssuedBy() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateIssuedBy()
	})
}

// ClearIssuedBy clears the value of the "issued_by" field.
func (u *CouponUpsertOne) ClearIssuedBy() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearIssuedBy()
	})
}

// SetStartAt sets the "start_at" field.
func (u *CouponUpsertOne) SetStartAt(v uint32) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *CouponUpsertOne) AddStartAt(v uint32) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateStartAt() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *CouponUpsertOne) ClearStartAt() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *CouponUpsertOne) SetEndAt(v uint32) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *CouponUpsertOne) AddEndAt(v uint32) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateEndAt() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *CouponUpsertOne) ClearEndAt() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearEndAt()
	})
}

// SetDurationDays sets the "duration_days" field.
func (u *CouponUpsertOne) SetDurationDays(v uint32) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetDurationDays(v)
	})
}

// AddDurationDays adds v to the "duration_days" field.
func (u *CouponUpsertOne) AddDurationDays(v uint32) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.AddDurationDays(v)
	})
}

// UpdateDurationDays sets the "duration_days" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateDurationDays() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateDurationDays()
	})
}

// ClearDurationDays clears the value of the "duration_days" field.
func (u *CouponUpsertOne) ClearDurationDays() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearDurationDays()
	})
}

// SetMessage sets the "message" field.
func (u *CouponUpsertOne) SetMessage(v string) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateMessage() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *CouponUpsertOne) ClearMessage() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearMessage()
	})
}

// SetName sets the "name" field.
func (u *CouponUpsertOne) SetName(v string) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateName() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *CouponUpsertOne) ClearName() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearName()
	})
}

// SetAllocated sets the "allocated" field.
func (u *CouponUpsertOne) SetAllocated(v decimal.Decimal) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetAllocated(v)
	})
}

// UpdateAllocated sets the "allocated" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateAllocated() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateAllocated()
	})
}

// ClearAllocated clears the value of the "allocated" field.
func (u *CouponUpsertOne) ClearAllocated() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearAllocated()
	})
}

// SetCouponType sets the "coupon_type" field.
func (u *CouponUpsertOne) SetCouponType(v string) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetCouponType(v)
	})
}

// UpdateCouponType sets the "coupon_type" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateCouponType() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateCouponType()
	})
}

// ClearCouponType clears the value of the "coupon_type" field.
func (u *CouponUpsertOne) ClearCouponType() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearCouponType()
	})
}

// SetThreshold sets the "threshold" field.
func (u *CouponUpsertOne) SetThreshold(v decimal.Decimal) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetThreshold(v)
	})
}

// UpdateThreshold sets the "threshold" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateThreshold() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateThreshold()
	})
}

// ClearThreshold clears the value of the "threshold" field.
func (u *CouponUpsertOne) ClearThreshold() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearThreshold()
	})
}

// SetCouponConstraint sets the "coupon_constraint" field.
func (u *CouponUpsertOne) SetCouponConstraint(v string) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetCouponConstraint(v)
	})
}

// UpdateCouponConstraint sets the "coupon_constraint" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateCouponConstraint() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateCouponConstraint()
	})
}

// ClearCouponConstraint clears the value of the "coupon_constraint" field.
func (u *CouponUpsertOne) ClearCouponConstraint() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearCouponConstraint()
	})
}

// SetCouponScope sets the "coupon_scope" field.
func (u *CouponUpsertOne) SetCouponScope(v string) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetCouponScope(v)
	})
}

// UpdateCouponScope sets the "coupon_scope" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateCouponScope() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateCouponScope()
	})
}

// ClearCouponScope clears the value of the "coupon_scope" field.
func (u *CouponUpsertOne) ClearCouponScope() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearCouponScope()
	})
}

// SetCashableProbability sets the "cashable_probability" field.
func (u *CouponUpsertOne) SetCashableProbability(v decimal.Decimal) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetCashableProbability(v)
	})
}

// UpdateCashableProbability sets the "cashable_probability" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateCashableProbability() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateCashableProbability()
	})
}

// ClearCashableProbability clears the value of the "cashable_probability" field.
func (u *CouponUpsertOne) ClearCashableProbability() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearCashableProbability()
	})
}

// Exec executes the query.
func (u *CouponUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CouponCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CouponUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CouponUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CouponUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CouponCreateBulk is the builder for creating many Coupon entities in bulk.
type CouponCreateBulk struct {
	config
	err      error
	builders []*CouponCreate
	conflict []sql.ConflictOption
}

// Save creates the Coupon entities in the database.
func (ccb *CouponCreateBulk) Save(ctx context.Context) ([]*Coupon, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Coupon, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CouponMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CouponCreateBulk) SaveX(ctx context.Context) []*Coupon {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CouponCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CouponCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Coupon.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CouponUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccb *CouponCreateBulk) OnConflict(opts ...sql.ConflictOption) *CouponUpsertBulk {
	ccb.conflict = opts
	return &CouponUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Coupon.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CouponCreateBulk) OnConflictColumns(columns ...string) *CouponUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CouponUpsertBulk{
		create: ccb,
	}
}

// CouponUpsertBulk is the builder for "upsert"-ing
// a bulk of Coupon nodes.
type CouponUpsertBulk struct {
	create *CouponCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Coupon.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(coupon.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CouponUpsertBulk) UpdateNewValues() *CouponUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(coupon.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Coupon.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CouponUpsertBulk) Ignore() *CouponUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CouponUpsertBulk) DoNothing() *CouponUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CouponCreateBulk.OnConflict
// documentation for more info.
func (u *CouponUpsertBulk) Update(set func(*CouponUpsert)) *CouponUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CouponUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CouponUpsertBulk) SetCreatedAt(v uint32) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CouponUpsertBulk) AddCreatedAt(v uint32) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateCreatedAt() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponUpsertBulk) SetUpdatedAt(v uint32) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CouponUpsertBulk) AddUpdatedAt(v uint32) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateUpdatedAt() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CouponUpsertBulk) SetDeletedAt(v uint32) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CouponUpsertBulk) AddDeletedAt(v uint32) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateDeletedAt() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *CouponUpsertBulk) SetEntID(v uuid.UUID) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateEntID() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *CouponUpsertBulk) SetAppID(v uuid.UUID) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateAppID() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *CouponUpsertBulk) ClearAppID() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearAppID()
	})
}

// SetDenomination sets the "denomination" field.
func (u *CouponUpsertBulk) SetDenomination(v decimal.Decimal) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetDenomination(v)
	})
}

// UpdateDenomination sets the "denomination" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateDenomination() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateDenomination()
	})
}

// ClearDenomination clears the value of the "denomination" field.
func (u *CouponUpsertBulk) ClearDenomination() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearDenomination()
	})
}

// SetCirculation sets the "circulation" field.
func (u *CouponUpsertBulk) SetCirculation(v decimal.Decimal) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetCirculation(v)
	})
}

// UpdateCirculation sets the "circulation" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateCirculation() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateCirculation()
	})
}

// ClearCirculation clears the value of the "circulation" field.
func (u *CouponUpsertBulk) ClearCirculation() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearCirculation()
	})
}

// SetRandom sets the "random" field.
func (u *CouponUpsertBulk) SetRandom(v bool) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetRandom(v)
	})
}

// UpdateRandom sets the "random" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateRandom() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateRandom()
	})
}

// ClearRandom clears the value of the "random" field.
func (u *CouponUpsertBulk) ClearRandom() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearRandom()
	})
}

// SetIssuedBy sets the "issued_by" field.
func (u *CouponUpsertBulk) SetIssuedBy(v uuid.UUID) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetIssuedBy(v)
	})
}

// UpdateIssuedBy sets the "issued_by" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateIssuedBy() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateIssuedBy()
	})
}

// ClearIssuedBy clears the value of the "issued_by" field.
func (u *CouponUpsertBulk) ClearIssuedBy() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearIssuedBy()
	})
}

// SetStartAt sets the "start_at" field.
func (u *CouponUpsertBulk) SetStartAt(v uint32) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *CouponUpsertBulk) AddStartAt(v uint32) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateStartAt() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *CouponUpsertBulk) ClearStartAt() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *CouponUpsertBulk) SetEndAt(v uint32) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *CouponUpsertBulk) AddEndAt(v uint32) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateEndAt() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *CouponUpsertBulk) ClearEndAt() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearEndAt()
	})
}

// SetDurationDays sets the "duration_days" field.
func (u *CouponUpsertBulk) SetDurationDays(v uint32) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetDurationDays(v)
	})
}

// AddDurationDays adds v to the "duration_days" field.
func (u *CouponUpsertBulk) AddDurationDays(v uint32) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.AddDurationDays(v)
	})
}

// UpdateDurationDays sets the "duration_days" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateDurationDays() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateDurationDays()
	})
}

// ClearDurationDays clears the value of the "duration_days" field.
func (u *CouponUpsertBulk) ClearDurationDays() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearDurationDays()
	})
}

// SetMessage sets the "message" field.
func (u *CouponUpsertBulk) SetMessage(v string) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateMessage() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *CouponUpsertBulk) ClearMessage() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearMessage()
	})
}

// SetName sets the "name" field.
func (u *CouponUpsertBulk) SetName(v string) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateName() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *CouponUpsertBulk) ClearName() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearName()
	})
}

// SetAllocated sets the "allocated" field.
func (u *CouponUpsertBulk) SetAllocated(v decimal.Decimal) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetAllocated(v)
	})
}

// UpdateAllocated sets the "allocated" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateAllocated() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateAllocated()
	})
}

// ClearAllocated clears the value of the "allocated" field.
func (u *CouponUpsertBulk) ClearAllocated() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearAllocated()
	})
}

// SetCouponType sets the "coupon_type" field.
func (u *CouponUpsertBulk) SetCouponType(v string) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetCouponType(v)
	})
}

// UpdateCouponType sets the "coupon_type" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateCouponType() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateCouponType()
	})
}

// ClearCouponType clears the value of the "coupon_type" field.
func (u *CouponUpsertBulk) ClearCouponType() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearCouponType()
	})
}

// SetThreshold sets the "threshold" field.
func (u *CouponUpsertBulk) SetThreshold(v decimal.Decimal) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetThreshold(v)
	})
}

// UpdateThreshold sets the "threshold" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateThreshold() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateThreshold()
	})
}

// ClearThreshold clears the value of the "threshold" field.
func (u *CouponUpsertBulk) ClearThreshold() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearThreshold()
	})
}

// SetCouponConstraint sets the "coupon_constraint" field.
func (u *CouponUpsertBulk) SetCouponConstraint(v string) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetCouponConstraint(v)
	})
}

// UpdateCouponConstraint sets the "coupon_constraint" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateCouponConstraint() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateCouponConstraint()
	})
}

// ClearCouponConstraint clears the value of the "coupon_constraint" field.
func (u *CouponUpsertBulk) ClearCouponConstraint() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearCouponConstraint()
	})
}

// SetCouponScope sets the "coupon_scope" field.
func (u *CouponUpsertBulk) SetCouponScope(v string) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetCouponScope(v)
	})
}

// UpdateCouponScope sets the "coupon_scope" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateCouponScope() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateCouponScope()
	})
}

// ClearCouponScope clears the value of the "coupon_scope" field.
func (u *CouponUpsertBulk) ClearCouponScope() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearCouponScope()
	})
}

// SetCashableProbability sets the "cashable_probability" field.
func (u *CouponUpsertBulk) SetCashableProbability(v decimal.Decimal) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetCashableProbability(v)
	})
}

// UpdateCashableProbability sets the "cashable_probability" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateCashableProbability() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateCashableProbability()
	})
}

// ClearCashableProbability clears the value of the "cashable_probability" field.
func (u *CouponUpsertBulk) ClearCashableProbability() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearCashableProbability()
	})
}

// Exec executes the query.
func (u *CouponUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the CouponCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CouponCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CouponUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

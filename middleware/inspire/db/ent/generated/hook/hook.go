// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated"
)

// The AchievementFunc type is an adapter to allow the use of ordinary
// function as Achievement mutator.
type AchievementFunc func(context.Context, *generated.AchievementMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f AchievementFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.AchievementMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.AchievementMutation", m)
}

// The AchievementUserFunc type is an adapter to allow the use of ordinary
// function as AchievementUser mutator.
type AchievementUserFunc func(context.Context, *generated.AchievementUserMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f AchievementUserFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.AchievementUserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.AchievementUserMutation", m)
}

// The AppCommissionConfigFunc type is an adapter to allow the use of ordinary
// function as AppCommissionConfig mutator.
type AppCommissionConfigFunc func(context.Context, *generated.AppCommissionConfigMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f AppCommissionConfigFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.AppCommissionConfigMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.AppCommissionConfigMutation", m)
}

// The AppConfigFunc type is an adapter to allow the use of ordinary
// function as AppConfig mutator.
type AppConfigFunc func(context.Context, *generated.AppConfigMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f AppConfigFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.AppConfigMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.AppConfigMutation", m)
}

// The AppGoodCommissionConfigFunc type is an adapter to allow the use of ordinary
// function as AppGoodCommissionConfig mutator.
type AppGoodCommissionConfigFunc func(context.Context, *generated.AppGoodCommissionConfigMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f AppGoodCommissionConfigFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.AppGoodCommissionConfigMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.AppGoodCommissionConfigMutation", m)
}

// The AppGoodScopeFunc type is an adapter to allow the use of ordinary
// function as AppGoodScope mutator.
type AppGoodScopeFunc func(context.Context, *generated.AppGoodScopeMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f AppGoodScopeFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.AppGoodScopeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.AppGoodScopeMutation", m)
}

// The CashControlFunc type is an adapter to allow the use of ordinary
// function as CashControl mutator.
type CashControlFunc func(context.Context, *generated.CashControlMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f CashControlFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.CashControlMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.CashControlMutation", m)
}

// The CoinAllocatedFunc type is an adapter to allow the use of ordinary
// function as CoinAllocated mutator.
type CoinAllocatedFunc func(context.Context, *generated.CoinAllocatedMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f CoinAllocatedFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.CoinAllocatedMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.CoinAllocatedMutation", m)
}

// The CoinConfigFunc type is an adapter to allow the use of ordinary
// function as CoinConfig mutator.
type CoinConfigFunc func(context.Context, *generated.CoinConfigMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f CoinConfigFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.CoinConfigMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.CoinConfigMutation", m)
}

// The CommissionFunc type is an adapter to allow the use of ordinary
// function as Commission mutator.
type CommissionFunc func(context.Context, *generated.CommissionMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f CommissionFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.CommissionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.CommissionMutation", m)
}

// The CouponFunc type is an adapter to allow the use of ordinary
// function as Coupon mutator.
type CouponFunc func(context.Context, *generated.CouponMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f CouponFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.CouponMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.CouponMutation", m)
}

// The CouponAllocatedFunc type is an adapter to allow the use of ordinary
// function as CouponAllocated mutator.
type CouponAllocatedFunc func(context.Context, *generated.CouponAllocatedMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f CouponAllocatedFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.CouponAllocatedMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.CouponAllocatedMutation", m)
}

// The CouponScopeFunc type is an adapter to allow the use of ordinary
// function as CouponScope mutator.
type CouponScopeFunc func(context.Context, *generated.CouponScopeMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f CouponScopeFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.CouponScopeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.CouponScopeMutation", m)
}

// The CreditAllocatedFunc type is an adapter to allow the use of ordinary
// function as CreditAllocated mutator.
type CreditAllocatedFunc func(context.Context, *generated.CreditAllocatedMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f CreditAllocatedFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.CreditAllocatedMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.CreditAllocatedMutation", m)
}

// The EventFunc type is an adapter to allow the use of ordinary
// function as Event mutator.
type EventFunc func(context.Context, *generated.EventMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f EventFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.EventMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.EventMutation", m)
}

// The EventCoinFunc type is an adapter to allow the use of ordinary
// function as EventCoin mutator.
type EventCoinFunc func(context.Context, *generated.EventCoinMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f EventCoinFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.EventCoinMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.EventCoinMutation", m)
}

// The EventCouponFunc type is an adapter to allow the use of ordinary
// function as EventCoupon mutator.
type EventCouponFunc func(context.Context, *generated.EventCouponMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f EventCouponFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.EventCouponMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.EventCouponMutation", m)
}

// The GoodAchievementFunc type is an adapter to allow the use of ordinary
// function as GoodAchievement mutator.
type GoodAchievementFunc func(context.Context, *generated.GoodAchievementMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f GoodAchievementFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.GoodAchievementMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.GoodAchievementMutation", m)
}

// The GoodCoinAchievementFunc type is an adapter to allow the use of ordinary
// function as GoodCoinAchievement mutator.
type GoodCoinAchievementFunc func(context.Context, *generated.GoodCoinAchievementMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f GoodCoinAchievementFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.GoodCoinAchievementMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.GoodCoinAchievementMutation", m)
}

// The InvitationCodeFunc type is an adapter to allow the use of ordinary
// function as InvitationCode mutator.
type InvitationCodeFunc func(context.Context, *generated.InvitationCodeMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f InvitationCodeFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.InvitationCodeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.InvitationCodeMutation", m)
}

// The OrderPaymentStatementFunc type is an adapter to allow the use of ordinary
// function as OrderPaymentStatement mutator.
type OrderPaymentStatementFunc func(context.Context, *generated.OrderPaymentStatementMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f OrderPaymentStatementFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.OrderPaymentStatementMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.OrderPaymentStatementMutation", m)
}

// The OrderStatementFunc type is an adapter to allow the use of ordinary
// function as OrderStatement mutator.
type OrderStatementFunc func(context.Context, *generated.OrderStatementMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f OrderStatementFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.OrderStatementMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.OrderStatementMutation", m)
}

// The RegistrationFunc type is an adapter to allow the use of ordinary
// function as Registration mutator.
type RegistrationFunc func(context.Context, *generated.RegistrationMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f RegistrationFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.RegistrationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.RegistrationMutation", m)
}

// The StatementFunc type is an adapter to allow the use of ordinary
// function as Statement mutator.
type StatementFunc func(context.Context, *generated.StatementMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f StatementFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.StatementMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.StatementMutation", m)
}

// The TaskConfigFunc type is an adapter to allow the use of ordinary
// function as TaskConfig mutator.
type TaskConfigFunc func(context.Context, *generated.TaskConfigMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f TaskConfigFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.TaskConfigMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.TaskConfigMutation", m)
}

// The TaskUserFunc type is an adapter to allow the use of ordinary
// function as TaskUser mutator.
type TaskUserFunc func(context.Context, *generated.TaskUserMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f TaskUserFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.TaskUserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.TaskUserMutation", m)
}

// The UserCoinRewardFunc type is an adapter to allow the use of ordinary
// function as UserCoinReward mutator.
type UserCoinRewardFunc func(context.Context, *generated.UserCoinRewardMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f UserCoinRewardFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.UserCoinRewardMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.UserCoinRewardMutation", m)
}

// The UserRewardFunc type is an adapter to allow the use of ordinary
// function as UserReward mutator.
type UserRewardFunc func(context.Context, *generated.UserRewardMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f UserRewardFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.UserRewardMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.UserRewardMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, generated.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m generated.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m generated.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m generated.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op generated.Op) Condition {
	return func(_ context.Context, m generated.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m generated.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m generated.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m generated.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk generated.Hook, cond Condition) generated.Hook {
	return func(next generated.Mutator) generated.Mutator {
		return generated.MutateFunc(func(ctx context.Context, m generated.Mutation) (generated.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, generated.Delete|generated.Create)
func On(hk generated.Hook, op generated.Op) generated.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, generated.Update|generated.UpdateOne)
func Unless(hk generated.Hook, op generated.Op) generated.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) generated.Hook {
	return func(generated.Mutator) generated.Mutator {
		return generated.MutateFunc(func(context.Context, generated.Mutation) (generated.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []generated.Hook {
//		return []generated.Hook{
//			Reject(generated.Delete|generated.Update),
//		}
//	}
func Reject(op generated.Op) generated.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []generated.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...generated.Hook) Chain {
	return Chain{append([]generated.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() generated.Hook {
	return func(mutator generated.Mutator) generated.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...generated.Hook) Chain {
	newHooks := make([]generated.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}

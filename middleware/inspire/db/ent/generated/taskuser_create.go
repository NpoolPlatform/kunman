// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/inspire/db/ent/generated/taskuser"
	"github.com/google/uuid"
)

// TaskUserCreate is the builder for creating a TaskUser entity.
type TaskUserCreate struct {
	config
	mutation *TaskUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tuc *TaskUserCreate) SetCreatedAt(u uint32) *TaskUserCreate {
	tuc.mutation.SetCreatedAt(u)
	return tuc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuc *TaskUserCreate) SetNillableCreatedAt(u *uint32) *TaskUserCreate {
	if u != nil {
		tuc.SetCreatedAt(*u)
	}
	return tuc
}

// SetUpdatedAt sets the "updated_at" field.
func (tuc *TaskUserCreate) SetUpdatedAt(u uint32) *TaskUserCreate {
	tuc.mutation.SetUpdatedAt(u)
	return tuc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tuc *TaskUserCreate) SetNillableUpdatedAt(u *uint32) *TaskUserCreate {
	if u != nil {
		tuc.SetUpdatedAt(*u)
	}
	return tuc
}

// SetDeletedAt sets the "deleted_at" field.
func (tuc *TaskUserCreate) SetDeletedAt(u uint32) *TaskUserCreate {
	tuc.mutation.SetDeletedAt(u)
	return tuc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuc *TaskUserCreate) SetNillableDeletedAt(u *uint32) *TaskUserCreate {
	if u != nil {
		tuc.SetDeletedAt(*u)
	}
	return tuc
}

// SetEntID sets the "ent_id" field.
func (tuc *TaskUserCreate) SetEntID(u uuid.UUID) *TaskUserCreate {
	tuc.mutation.SetEntID(u)
	return tuc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tuc *TaskUserCreate) SetNillableEntID(u *uuid.UUID) *TaskUserCreate {
	if u != nil {
		tuc.SetEntID(*u)
	}
	return tuc
}

// SetAppID sets the "app_id" field.
func (tuc *TaskUserCreate) SetAppID(u uuid.UUID) *TaskUserCreate {
	tuc.mutation.SetAppID(u)
	return tuc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (tuc *TaskUserCreate) SetNillableAppID(u *uuid.UUID) *TaskUserCreate {
	if u != nil {
		tuc.SetAppID(*u)
	}
	return tuc
}

// SetUserID sets the "user_id" field.
func (tuc *TaskUserCreate) SetUserID(u uuid.UUID) *TaskUserCreate {
	tuc.mutation.SetUserID(u)
	return tuc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuc *TaskUserCreate) SetNillableUserID(u *uuid.UUID) *TaskUserCreate {
	if u != nil {
		tuc.SetUserID(*u)
	}
	return tuc
}

// SetTaskID sets the "task_id" field.
func (tuc *TaskUserCreate) SetTaskID(u uuid.UUID) *TaskUserCreate {
	tuc.mutation.SetTaskID(u)
	return tuc
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (tuc *TaskUserCreate) SetNillableTaskID(u *uuid.UUID) *TaskUserCreate {
	if u != nil {
		tuc.SetTaskID(*u)
	}
	return tuc
}

// SetEventID sets the "event_id" field.
func (tuc *TaskUserCreate) SetEventID(u uuid.UUID) *TaskUserCreate {
	tuc.mutation.SetEventID(u)
	return tuc
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (tuc *TaskUserCreate) SetNillableEventID(u *uuid.UUID) *TaskUserCreate {
	if u != nil {
		tuc.SetEventID(*u)
	}
	return tuc
}

// SetTaskState sets the "task_state" field.
func (tuc *TaskUserCreate) SetTaskState(s string) *TaskUserCreate {
	tuc.mutation.SetTaskState(s)
	return tuc
}

// SetNillableTaskState sets the "task_state" field if the given value is not nil.
func (tuc *TaskUserCreate) SetNillableTaskState(s *string) *TaskUserCreate {
	if s != nil {
		tuc.SetTaskState(*s)
	}
	return tuc
}

// SetRewardState sets the "reward_state" field.
func (tuc *TaskUserCreate) SetRewardState(s string) *TaskUserCreate {
	tuc.mutation.SetRewardState(s)
	return tuc
}

// SetNillableRewardState sets the "reward_state" field if the given value is not nil.
func (tuc *TaskUserCreate) SetNillableRewardState(s *string) *TaskUserCreate {
	if s != nil {
		tuc.SetRewardState(*s)
	}
	return tuc
}

// SetID sets the "id" field.
func (tuc *TaskUserCreate) SetID(u uint32) *TaskUserCreate {
	tuc.mutation.SetID(u)
	return tuc
}

// Mutation returns the TaskUserMutation object of the builder.
func (tuc *TaskUserCreate) Mutation() *TaskUserMutation {
	return tuc.mutation
}

// Save creates the TaskUser in the database.
func (tuc *TaskUserCreate) Save(ctx context.Context) (*TaskUser, error) {
	tuc.defaults()
	return withHooks(ctx, tuc.sqlSave, tuc.mutation, tuc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tuc *TaskUserCreate) SaveX(ctx context.Context) *TaskUser {
	v, err := tuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tuc *TaskUserCreate) Exec(ctx context.Context) error {
	_, err := tuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuc *TaskUserCreate) ExecX(ctx context.Context) {
	if err := tuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuc *TaskUserCreate) defaults() {
	if _, ok := tuc.mutation.CreatedAt(); !ok {
		v := taskuser.DefaultCreatedAt()
		tuc.mutation.SetCreatedAt(v)
	}
	if _, ok := tuc.mutation.UpdatedAt(); !ok {
		v := taskuser.DefaultUpdatedAt()
		tuc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tuc.mutation.DeletedAt(); !ok {
		v := taskuser.DefaultDeletedAt()
		tuc.mutation.SetDeletedAt(v)
	}
	if _, ok := tuc.mutation.EntID(); !ok {
		v := taskuser.DefaultEntID()
		tuc.mutation.SetEntID(v)
	}
	if _, ok := tuc.mutation.AppID(); !ok {
		v := taskuser.DefaultAppID()
		tuc.mutation.SetAppID(v)
	}
	if _, ok := tuc.mutation.UserID(); !ok {
		v := taskuser.DefaultUserID()
		tuc.mutation.SetUserID(v)
	}
	if _, ok := tuc.mutation.TaskID(); !ok {
		v := taskuser.DefaultTaskID()
		tuc.mutation.SetTaskID(v)
	}
	if _, ok := tuc.mutation.EventID(); !ok {
		v := taskuser.DefaultEventID()
		tuc.mutation.SetEventID(v)
	}
	if _, ok := tuc.mutation.TaskState(); !ok {
		v := taskuser.DefaultTaskState
		tuc.mutation.SetTaskState(v)
	}
	if _, ok := tuc.mutation.RewardState(); !ok {
		v := taskuser.DefaultRewardState
		tuc.mutation.SetRewardState(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuc *TaskUserCreate) check() error {
	if _, ok := tuc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "TaskUser.created_at"`)}
	}
	if _, ok := tuc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "TaskUser.updated_at"`)}
	}
	if _, ok := tuc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "TaskUser.deleted_at"`)}
	}
	if _, ok := tuc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "TaskUser.ent_id"`)}
	}
	return nil
}

func (tuc *TaskUserCreate) sqlSave(ctx context.Context) (*TaskUser, error) {
	if err := tuc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	tuc.mutation.id = &_node.ID
	tuc.mutation.done = true
	return _node, nil
}

func (tuc *TaskUserCreate) createSpec() (*TaskUser, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskUser{config: tuc.config}
		_spec = sqlgraph.NewCreateSpec(taskuser.Table, sqlgraph.NewFieldSpec(taskuser.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = tuc.conflict
	if id, ok := tuc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tuc.mutation.CreatedAt(); ok {
		_spec.SetField(taskuser.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := tuc.mutation.UpdatedAt(); ok {
		_spec.SetField(taskuser.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := tuc.mutation.DeletedAt(); ok {
		_spec.SetField(taskuser.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := tuc.mutation.EntID(); ok {
		_spec.SetField(taskuser.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := tuc.mutation.AppID(); ok {
		_spec.SetField(taskuser.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := tuc.mutation.UserID(); ok {
		_spec.SetField(taskuser.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := tuc.mutation.TaskID(); ok {
		_spec.SetField(taskuser.FieldTaskID, field.TypeUUID, value)
		_node.TaskID = value
	}
	if value, ok := tuc.mutation.EventID(); ok {
		_spec.SetField(taskuser.FieldEventID, field.TypeUUID, value)
		_node.EventID = value
	}
	if value, ok := tuc.mutation.TaskState(); ok {
		_spec.SetField(taskuser.FieldTaskState, field.TypeString, value)
		_node.TaskState = value
	}
	if value, ok := tuc.mutation.RewardState(); ok {
		_spec.SetField(taskuser.FieldRewardState, field.TypeString, value)
		_node.RewardState = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskUser.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskUserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tuc *TaskUserCreate) OnConflict(opts ...sql.ConflictOption) *TaskUserUpsertOne {
	tuc.conflict = opts
	return &TaskUserUpsertOne{
		create: tuc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tuc *TaskUserCreate) OnConflictColumns(columns ...string) *TaskUserUpsertOne {
	tuc.conflict = append(tuc.conflict, sql.ConflictColumns(columns...))
	return &TaskUserUpsertOne{
		create: tuc,
	}
}

type (
	// TaskUserUpsertOne is the builder for "upsert"-ing
	//  one TaskUser node.
	TaskUserUpsertOne struct {
		create *TaskUserCreate
	}

	// TaskUserUpsert is the "OnConflict" setter.
	TaskUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *TaskUserUpsert) SetCreatedAt(v uint32) *TaskUserUpsert {
	u.Set(taskuser.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TaskUserUpsert) UpdateCreatedAt() *TaskUserUpsert {
	u.SetExcluded(taskuser.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TaskUserUpsert) AddCreatedAt(v uint32) *TaskUserUpsert {
	u.Add(taskuser.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskUserUpsert) SetUpdatedAt(v uint32) *TaskUserUpsert {
	u.Set(taskuser.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskUserUpsert) UpdateUpdatedAt() *TaskUserUpsert {
	u.SetExcluded(taskuser.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TaskUserUpsert) AddUpdatedAt(v uint32) *TaskUserUpsert {
	u.Add(taskuser.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TaskUserUpsert) SetDeletedAt(v uint32) *TaskUserUpsert {
	u.Set(taskuser.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TaskUserUpsert) UpdateDeletedAt() *TaskUserUpsert {
	u.SetExcluded(taskuser.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TaskUserUpsert) AddDeletedAt(v uint32) *TaskUserUpsert {
	u.Add(taskuser.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *TaskUserUpsert) SetEntID(v uuid.UUID) *TaskUserUpsert {
	u.Set(taskuser.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TaskUserUpsert) UpdateEntID() *TaskUserUpsert {
	u.SetExcluded(taskuser.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *TaskUserUpsert) SetAppID(v uuid.UUID) *TaskUserUpsert {
	u.Set(taskuser.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *TaskUserUpsert) UpdateAppID() *TaskUserUpsert {
	u.SetExcluded(taskuser.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *TaskUserUpsert) ClearAppID() *TaskUserUpsert {
	u.SetNull(taskuser.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *TaskUserUpsert) SetUserID(v uuid.UUID) *TaskUserUpsert {
	u.Set(taskuser.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TaskUserUpsert) UpdateUserID() *TaskUserUpsert {
	u.SetExcluded(taskuser.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *TaskUserUpsert) ClearUserID() *TaskUserUpsert {
	u.SetNull(taskuser.FieldUserID)
	return u
}

// SetTaskID sets the "task_id" field.
func (u *TaskUserUpsert) SetTaskID(v uuid.UUID) *TaskUserUpsert {
	u.Set(taskuser.FieldTaskID, v)
	return u
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *TaskUserUpsert) UpdateTaskID() *TaskUserUpsert {
	u.SetExcluded(taskuser.FieldTaskID)
	return u
}

// ClearTaskID clears the value of the "task_id" field.
func (u *TaskUserUpsert) ClearTaskID() *TaskUserUpsert {
	u.SetNull(taskuser.FieldTaskID)
	return u
}

// SetEventID sets the "event_id" field.
func (u *TaskUserUpsert) SetEventID(v uuid.UUID) *TaskUserUpsert {
	u.Set(taskuser.FieldEventID, v)
	return u
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *TaskUserUpsert) UpdateEventID() *TaskUserUpsert {
	u.SetExcluded(taskuser.FieldEventID)
	return u
}

// ClearEventID clears the value of the "event_id" field.
func (u *TaskUserUpsert) ClearEventID() *TaskUserUpsert {
	u.SetNull(taskuser.FieldEventID)
	return u
}

// SetTaskState sets the "task_state" field.
func (u *TaskUserUpsert) SetTaskState(v string) *TaskUserUpsert {
	u.Set(taskuser.FieldTaskState, v)
	return u
}

// UpdateTaskState sets the "task_state" field to the value that was provided on create.
func (u *TaskUserUpsert) UpdateTaskState() *TaskUserUpsert {
	u.SetExcluded(taskuser.FieldTaskState)
	return u
}

// ClearTaskState clears the value of the "task_state" field.
func (u *TaskUserUpsert) ClearTaskState() *TaskUserUpsert {
	u.SetNull(taskuser.FieldTaskState)
	return u
}

// SetRewardState sets the "reward_state" field.
func (u *TaskUserUpsert) SetRewardState(v string) *TaskUserUpsert {
	u.Set(taskuser.FieldRewardState, v)
	return u
}

// UpdateRewardState sets the "reward_state" field to the value that was provided on create.
func (u *TaskUserUpsert) UpdateRewardState() *TaskUserUpsert {
	u.SetExcluded(taskuser.FieldRewardState)
	return u
}

// ClearRewardState clears the value of the "reward_state" field.
func (u *TaskUserUpsert) ClearRewardState() *TaskUserUpsert {
	u.SetNull(taskuser.FieldRewardState)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TaskUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(taskuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TaskUserUpsertOne) UpdateNewValues() *TaskUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(taskuser.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TaskUser.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TaskUserUpsertOne) Ignore() *TaskUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskUserUpsertOne) DoNothing() *TaskUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskUserCreate.OnConflict
// documentation for more info.
func (u *TaskUserUpsertOne) Update(set func(*TaskUserUpsert)) *TaskUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TaskUserUpsertOne) SetCreatedAt(v uint32) *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TaskUserUpsertOne) AddCreatedAt(v uint32) *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TaskUserUpsertOne) UpdateCreatedAt() *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskUserUpsertOne) SetUpdatedAt(v uint32) *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TaskUserUpsertOne) AddUpdatedAt(v uint32) *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskUserUpsertOne) UpdateUpdatedAt() *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TaskUserUpsertOne) SetDeletedAt(v uint32) *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TaskUserUpsertOne) AddDeletedAt(v uint32) *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TaskUserUpsertOne) UpdateDeletedAt() *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *TaskUserUpsertOne) SetEntID(v uuid.UUID) *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TaskUserUpsertOne) UpdateEntID() *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *TaskUserUpsertOne) SetAppID(v uuid.UUID) *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *TaskUserUpsertOne) UpdateAppID() *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *TaskUserUpsertOne) ClearAppID() *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *TaskUserUpsertOne) SetUserID(v uuid.UUID) *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TaskUserUpsertOne) UpdateUserID() *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *TaskUserUpsertOne) ClearUserID() *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.ClearUserID()
	})
}

// SetTaskID sets the "task_id" field.
func (u *TaskUserUpsertOne) SetTaskID(v uuid.UUID) *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *TaskUserUpsertOne) UpdateTaskID() *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.UpdateTaskID()
	})
}

// ClearTaskID clears the value of the "task_id" field.
func (u *TaskUserUpsertOne) ClearTaskID() *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.ClearTaskID()
	})
}

// SetEventID sets the "event_id" field.
func (u *TaskUserUpsertOne) SetEventID(v uuid.UUID) *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *TaskUserUpsertOne) UpdateEventID() *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.UpdateEventID()
	})
}

// ClearEventID clears the value of the "event_id" field.
func (u *TaskUserUpsertOne) ClearEventID() *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.ClearEventID()
	})
}

// SetTaskState sets the "task_state" field.
func (u *TaskUserUpsertOne) SetTaskState(v string) *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.SetTaskState(v)
	})
}

// UpdateTaskState sets the "task_state" field to the value that was provided on create.
func (u *TaskUserUpsertOne) UpdateTaskState() *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.UpdateTaskState()
	})
}

// ClearTaskState clears the value of the "task_state" field.
func (u *TaskUserUpsertOne) ClearTaskState() *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.ClearTaskState()
	})
}

// SetRewardState sets the "reward_state" field.
func (u *TaskUserUpsertOne) SetRewardState(v string) *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.SetRewardState(v)
	})
}

// UpdateRewardState sets the "reward_state" field to the value that was provided on create.
func (u *TaskUserUpsertOne) UpdateRewardState() *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.UpdateRewardState()
	})
}

// ClearRewardState clears the value of the "reward_state" field.
func (u *TaskUserUpsertOne) ClearRewardState() *TaskUserUpsertOne {
	return u.Update(func(s *TaskUserUpsert) {
		s.ClearRewardState()
	})
}

// Exec executes the query.
func (u *TaskUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for TaskUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TaskUserUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TaskUserUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TaskUserCreateBulk is the builder for creating many TaskUser entities in bulk.
type TaskUserCreateBulk struct {
	config
	err      error
	builders []*TaskUserCreate
	conflict []sql.ConflictOption
}

// Save creates the TaskUser entities in the database.
func (tucb *TaskUserCreateBulk) Save(ctx context.Context) ([]*TaskUser, error) {
	if tucb.err != nil {
		return nil, tucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tucb.builders))
	nodes := make([]*TaskUser, len(tucb.builders))
	mutators := make([]Mutator, len(tucb.builders))
	for i := range tucb.builders {
		func(i int, root context.Context) {
			builder := tucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tucb *TaskUserCreateBulk) SaveX(ctx context.Context) []*TaskUser {
	v, err := tucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tucb *TaskUserCreateBulk) Exec(ctx context.Context) error {
	_, err := tucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tucb *TaskUserCreateBulk) ExecX(ctx context.Context) {
	if err := tucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskUserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tucb *TaskUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *TaskUserUpsertBulk {
	tucb.conflict = opts
	return &TaskUserUpsertBulk{
		create: tucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tucb *TaskUserCreateBulk) OnConflictColumns(columns ...string) *TaskUserUpsertBulk {
	tucb.conflict = append(tucb.conflict, sql.ConflictColumns(columns...))
	return &TaskUserUpsertBulk{
		create: tucb,
	}
}

// TaskUserUpsertBulk is the builder for "upsert"-ing
// a bulk of TaskUser nodes.
type TaskUserUpsertBulk struct {
	create *TaskUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TaskUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(taskuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TaskUserUpsertBulk) UpdateNewValues() *TaskUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(taskuser.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TaskUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TaskUserUpsertBulk) Ignore() *TaskUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskUserUpsertBulk) DoNothing() *TaskUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskUserCreateBulk.OnConflict
// documentation for more info.
func (u *TaskUserUpsertBulk) Update(set func(*TaskUserUpsert)) *TaskUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TaskUserUpsertBulk) SetCreatedAt(v uint32) *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TaskUserUpsertBulk) AddCreatedAt(v uint32) *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TaskUserUpsertBulk) UpdateCreatedAt() *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskUserUpsertBulk) SetUpdatedAt(v uint32) *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TaskUserUpsertBulk) AddUpdatedAt(v uint32) *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskUserUpsertBulk) UpdateUpdatedAt() *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TaskUserUpsertBulk) SetDeletedAt(v uint32) *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TaskUserUpsertBulk) AddDeletedAt(v uint32) *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TaskUserUpsertBulk) UpdateDeletedAt() *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *TaskUserUpsertBulk) SetEntID(v uuid.UUID) *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TaskUserUpsertBulk) UpdateEntID() *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *TaskUserUpsertBulk) SetAppID(v uuid.UUID) *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *TaskUserUpsertBulk) UpdateAppID() *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *TaskUserUpsertBulk) ClearAppID() *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *TaskUserUpsertBulk) SetUserID(v uuid.UUID) *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TaskUserUpsertBulk) UpdateUserID() *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *TaskUserUpsertBulk) ClearUserID() *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.ClearUserID()
	})
}

// SetTaskID sets the "task_id" field.
func (u *TaskUserUpsertBulk) SetTaskID(v uuid.UUID) *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *TaskUserUpsertBulk) UpdateTaskID() *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.UpdateTaskID()
	})
}

// ClearTaskID clears the value of the "task_id" field.
func (u *TaskUserUpsertBulk) ClearTaskID() *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.ClearTaskID()
	})
}

// SetEventID sets the "event_id" field.
func (u *TaskUserUpsertBulk) SetEventID(v uuid.UUID) *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *TaskUserUpsertBulk) UpdateEventID() *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.UpdateEventID()
	})
}

// ClearEventID clears the value of the "event_id" field.
func (u *TaskUserUpsertBulk) ClearEventID() *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.ClearEventID()
	})
}

// SetTaskState sets the "task_state" field.
func (u *TaskUserUpsertBulk) SetTaskState(v string) *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.SetTaskState(v)
	})
}

// UpdateTaskState sets the "task_state" field to the value that was provided on create.
func (u *TaskUserUpsertBulk) UpdateTaskState() *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.UpdateTaskState()
	})
}

// ClearTaskState clears the value of the "task_state" field.
func (u *TaskUserUpsertBulk) ClearTaskState() *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.ClearTaskState()
	})
}

// SetRewardState sets the "reward_state" field.
func (u *TaskUserUpsertBulk) SetRewardState(v string) *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.SetRewardState(v)
	})
}

// UpdateRewardState sets the "reward_state" field to the value that was provided on create.
func (u *TaskUserUpsertBulk) UpdateRewardState() *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.UpdateRewardState()
	})
}

// ClearRewardState clears the value of the "reward_state" field.
func (u *TaskUserUpsertBulk) ClearRewardState() *TaskUserUpsertBulk {
	return u.Update(func(s *TaskUserUpsert) {
		s.ClearRewardState()
	})
}

// Exec executes the query.
func (u *TaskUserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the TaskUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for TaskUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/usersubscription"
	"github.com/google/uuid"
)

// UserSubscriptionCreate is the builder for creating a UserSubscription entity.
type UserSubscriptionCreate struct {
	config
	mutation *UserSubscriptionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (usc *UserSubscriptionCreate) SetEntID(u uuid.UUID) *UserSubscriptionCreate {
	usc.mutation.SetEntID(u)
	return usc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (usc *UserSubscriptionCreate) SetNillableEntID(u *uuid.UUID) *UserSubscriptionCreate {
	if u != nil {
		usc.SetEntID(*u)
	}
	return usc
}

// SetAppID sets the "app_id" field.
func (usc *UserSubscriptionCreate) SetAppID(u uuid.UUID) *UserSubscriptionCreate {
	usc.mutation.SetAppID(u)
	return usc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (usc *UserSubscriptionCreate) SetNillableAppID(u *uuid.UUID) *UserSubscriptionCreate {
	if u != nil {
		usc.SetAppID(*u)
	}
	return usc
}

// SetUserID sets the "user_id" field.
func (usc *UserSubscriptionCreate) SetUserID(u uuid.UUID) *UserSubscriptionCreate {
	usc.mutation.SetUserID(u)
	return usc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (usc *UserSubscriptionCreate) SetNillableUserID(u *uuid.UUID) *UserSubscriptionCreate {
	if u != nil {
		usc.SetUserID(*u)
	}
	return usc
}

// SetPackageID sets the "package_id" field.
func (usc *UserSubscriptionCreate) SetPackageID(u uuid.UUID) *UserSubscriptionCreate {
	usc.mutation.SetPackageID(u)
	return usc
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (usc *UserSubscriptionCreate) SetNillablePackageID(u *uuid.UUID) *UserSubscriptionCreate {
	if u != nil {
		usc.SetPackageID(*u)
	}
	return usc
}

// SetStartAt sets the "start_at" field.
func (usc *UserSubscriptionCreate) SetStartAt(u uint32) *UserSubscriptionCreate {
	usc.mutation.SetStartAt(u)
	return usc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (usc *UserSubscriptionCreate) SetNillableStartAt(u *uint32) *UserSubscriptionCreate {
	if u != nil {
		usc.SetStartAt(*u)
	}
	return usc
}

// SetEndAt sets the "end_at" field.
func (usc *UserSubscriptionCreate) SetEndAt(u uint32) *UserSubscriptionCreate {
	usc.mutation.SetEndAt(u)
	return usc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (usc *UserSubscriptionCreate) SetNillableEndAt(u *uint32) *UserSubscriptionCreate {
	if u != nil {
		usc.SetEndAt(*u)
	}
	return usc
}

// SetUsageState sets the "usage_state" field.
func (usc *UserSubscriptionCreate) SetUsageState(s string) *UserSubscriptionCreate {
	usc.mutation.SetUsageState(s)
	return usc
}

// SetNillableUsageState sets the "usage_state" field if the given value is not nil.
func (usc *UserSubscriptionCreate) SetNillableUsageState(s *string) *UserSubscriptionCreate {
	if s != nil {
		usc.SetUsageState(*s)
	}
	return usc
}

// SetSubscriptionCredit sets the "subscription_credit" field.
func (usc *UserSubscriptionCreate) SetSubscriptionCredit(u uint32) *UserSubscriptionCreate {
	usc.mutation.SetSubscriptionCredit(u)
	return usc
}

// SetNillableSubscriptionCredit sets the "subscription_credit" field if the given value is not nil.
func (usc *UserSubscriptionCreate) SetNillableSubscriptionCredit(u *uint32) *UserSubscriptionCreate {
	if u != nil {
		usc.SetSubscriptionCredit(*u)
	}
	return usc
}

// SetAddonCredit sets the "addon_credit" field.
func (usc *UserSubscriptionCreate) SetAddonCredit(u uint32) *UserSubscriptionCreate {
	usc.mutation.SetAddonCredit(u)
	return usc
}

// SetNillableAddonCredit sets the "addon_credit" field if the given value is not nil.
func (usc *UserSubscriptionCreate) SetNillableAddonCredit(u *uint32) *UserSubscriptionCreate {
	if u != nil {
		usc.SetAddonCredit(*u)
	}
	return usc
}

// SetID sets the "id" field.
func (usc *UserSubscriptionCreate) SetID(u uint32) *UserSubscriptionCreate {
	usc.mutation.SetID(u)
	return usc
}

// Mutation returns the UserSubscriptionMutation object of the builder.
func (usc *UserSubscriptionCreate) Mutation() *UserSubscriptionMutation {
	return usc.mutation
}

// Save creates the UserSubscription in the database.
func (usc *UserSubscriptionCreate) Save(ctx context.Context) (*UserSubscription, error) {
	usc.defaults()
	return withHooks(ctx, usc.sqlSave, usc.mutation, usc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (usc *UserSubscriptionCreate) SaveX(ctx context.Context) *UserSubscription {
	v, err := usc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (usc *UserSubscriptionCreate) Exec(ctx context.Context) error {
	_, err := usc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usc *UserSubscriptionCreate) ExecX(ctx context.Context) {
	if err := usc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usc *UserSubscriptionCreate) defaults() {
	if _, ok := usc.mutation.EntID(); !ok {
		v := usersubscription.DefaultEntID()
		usc.mutation.SetEntID(v)
	}
	if _, ok := usc.mutation.AppID(); !ok {
		v := usersubscription.DefaultAppID()
		usc.mutation.SetAppID(v)
	}
	if _, ok := usc.mutation.UserID(); !ok {
		v := usersubscription.DefaultUserID()
		usc.mutation.SetUserID(v)
	}
	if _, ok := usc.mutation.PackageID(); !ok {
		v := usersubscription.DefaultPackageID()
		usc.mutation.SetPackageID(v)
	}
	if _, ok := usc.mutation.StartAt(); !ok {
		v := usersubscription.DefaultStartAt
		usc.mutation.SetStartAt(v)
	}
	if _, ok := usc.mutation.EndAt(); !ok {
		v := usersubscription.DefaultEndAt
		usc.mutation.SetEndAt(v)
	}
	if _, ok := usc.mutation.UsageState(); !ok {
		v := usersubscription.DefaultUsageState
		usc.mutation.SetUsageState(v)
	}
	if _, ok := usc.mutation.SubscriptionCredit(); !ok {
		v := usersubscription.DefaultSubscriptionCredit
		usc.mutation.SetSubscriptionCredit(v)
	}
	if _, ok := usc.mutation.AddonCredit(); !ok {
		v := usersubscription.DefaultAddonCredit
		usc.mutation.SetAddonCredit(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usc *UserSubscriptionCreate) check() error {
	if _, ok := usc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "UserSubscription.ent_id"`)}
	}
	return nil
}

func (usc *UserSubscriptionCreate) sqlSave(ctx context.Context) (*UserSubscription, error) {
	if err := usc.check(); err != nil {
		return nil, err
	}
	_node, _spec := usc.createSpec()
	if err := sqlgraph.CreateNode(ctx, usc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	usc.mutation.id = &_node.ID
	usc.mutation.done = true
	return _node, nil
}

func (usc *UserSubscriptionCreate) createSpec() (*UserSubscription, *sqlgraph.CreateSpec) {
	var (
		_node = &UserSubscription{config: usc.config}
		_spec = sqlgraph.NewCreateSpec(usersubscription.Table, sqlgraph.NewFieldSpec(usersubscription.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = usc.conflict
	if id, ok := usc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := usc.mutation.EntID(); ok {
		_spec.SetField(usersubscription.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := usc.mutation.AppID(); ok {
		_spec.SetField(usersubscription.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := usc.mutation.UserID(); ok {
		_spec.SetField(usersubscription.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := usc.mutation.PackageID(); ok {
		_spec.SetField(usersubscription.FieldPackageID, field.TypeUUID, value)
		_node.PackageID = value
	}
	if value, ok := usc.mutation.StartAt(); ok {
		_spec.SetField(usersubscription.FieldStartAt, field.TypeUint32, value)
		_node.StartAt = value
	}
	if value, ok := usc.mutation.EndAt(); ok {
		_spec.SetField(usersubscription.FieldEndAt, field.TypeUint32, value)
		_node.EndAt = value
	}
	if value, ok := usc.mutation.UsageState(); ok {
		_spec.SetField(usersubscription.FieldUsageState, field.TypeString, value)
		_node.UsageState = value
	}
	if value, ok := usc.mutation.SubscriptionCredit(); ok {
		_spec.SetField(usersubscription.FieldSubscriptionCredit, field.TypeUint32, value)
		_node.SubscriptionCredit = value
	}
	if value, ok := usc.mutation.AddonCredit(); ok {
		_spec.SetField(usersubscription.FieldAddonCredit, field.TypeUint32, value)
		_node.AddonCredit = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserSubscription.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserSubscriptionUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (usc *UserSubscriptionCreate) OnConflict(opts ...sql.ConflictOption) *UserSubscriptionUpsertOne {
	usc.conflict = opts
	return &UserSubscriptionUpsertOne{
		create: usc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserSubscription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (usc *UserSubscriptionCreate) OnConflictColumns(columns ...string) *UserSubscriptionUpsertOne {
	usc.conflict = append(usc.conflict, sql.ConflictColumns(columns...))
	return &UserSubscriptionUpsertOne{
		create: usc,
	}
}

type (
	// UserSubscriptionUpsertOne is the builder for "upsert"-ing
	//  one UserSubscription node.
	UserSubscriptionUpsertOne struct {
		create *UserSubscriptionCreate
	}

	// UserSubscriptionUpsert is the "OnConflict" setter.
	UserSubscriptionUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *UserSubscriptionUpsert) SetEntID(v uuid.UUID) *UserSubscriptionUpsert {
	u.Set(usersubscription.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *UserSubscriptionUpsert) UpdateEntID() *UserSubscriptionUpsert {
	u.SetExcluded(usersubscription.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *UserSubscriptionUpsert) SetAppID(v uuid.UUID) *UserSubscriptionUpsert {
	u.Set(usersubscription.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *UserSubscriptionUpsert) UpdateAppID() *UserSubscriptionUpsert {
	u.SetExcluded(usersubscription.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *UserSubscriptionUpsert) ClearAppID() *UserSubscriptionUpsert {
	u.SetNull(usersubscription.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserSubscriptionUpsert) SetUserID(v uuid.UUID) *UserSubscriptionUpsert {
	u.Set(usersubscription.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserSubscriptionUpsert) UpdateUserID() *UserSubscriptionUpsert {
	u.SetExcluded(usersubscription.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *UserSubscriptionUpsert) ClearUserID() *UserSubscriptionUpsert {
	u.SetNull(usersubscription.FieldUserID)
	return u
}

// SetPackageID sets the "package_id" field.
func (u *UserSubscriptionUpsert) SetPackageID(v uuid.UUID) *UserSubscriptionUpsert {
	u.Set(usersubscription.FieldPackageID, v)
	return u
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *UserSubscriptionUpsert) UpdatePackageID() *UserSubscriptionUpsert {
	u.SetExcluded(usersubscription.FieldPackageID)
	return u
}

// ClearPackageID clears the value of the "package_id" field.
func (u *UserSubscriptionUpsert) ClearPackageID() *UserSubscriptionUpsert {
	u.SetNull(usersubscription.FieldPackageID)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *UserSubscriptionUpsert) SetStartAt(v uint32) *UserSubscriptionUpsert {
	u.Set(usersubscription.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *UserSubscriptionUpsert) UpdateStartAt() *UserSubscriptionUpsert {
	u.SetExcluded(usersubscription.FieldStartAt)
	return u
}

// AddStartAt adds v to the "start_at" field.
func (u *UserSubscriptionUpsert) AddStartAt(v uint32) *UserSubscriptionUpsert {
	u.Add(usersubscription.FieldStartAt, v)
	return u
}

// ClearStartAt clears the value of the "start_at" field.
func (u *UserSubscriptionUpsert) ClearStartAt() *UserSubscriptionUpsert {
	u.SetNull(usersubscription.FieldStartAt)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *UserSubscriptionUpsert) SetEndAt(v uint32) *UserSubscriptionUpsert {
	u.Set(usersubscription.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *UserSubscriptionUpsert) UpdateEndAt() *UserSubscriptionUpsert {
	u.SetExcluded(usersubscription.FieldEndAt)
	return u
}

// AddEndAt adds v to the "end_at" field.
func (u *UserSubscriptionUpsert) AddEndAt(v uint32) *UserSubscriptionUpsert {
	u.Add(usersubscription.FieldEndAt, v)
	return u
}

// ClearEndAt clears the value of the "end_at" field.
func (u *UserSubscriptionUpsert) ClearEndAt() *UserSubscriptionUpsert {
	u.SetNull(usersubscription.FieldEndAt)
	return u
}

// SetUsageState sets the "usage_state" field.
func (u *UserSubscriptionUpsert) SetUsageState(v string) *UserSubscriptionUpsert {
	u.Set(usersubscription.FieldUsageState, v)
	return u
}

// UpdateUsageState sets the "usage_state" field to the value that was provided on create.
func (u *UserSubscriptionUpsert) UpdateUsageState() *UserSubscriptionUpsert {
	u.SetExcluded(usersubscription.FieldUsageState)
	return u
}

// ClearUsageState clears the value of the "usage_state" field.
func (u *UserSubscriptionUpsert) ClearUsageState() *UserSubscriptionUpsert {
	u.SetNull(usersubscription.FieldUsageState)
	return u
}

// SetSubscriptionCredit sets the "subscription_credit" field.
func (u *UserSubscriptionUpsert) SetSubscriptionCredit(v uint32) *UserSubscriptionUpsert {
	u.Set(usersubscription.FieldSubscriptionCredit, v)
	return u
}

// UpdateSubscriptionCredit sets the "subscription_credit" field to the value that was provided on create.
func (u *UserSubscriptionUpsert) UpdateSubscriptionCredit() *UserSubscriptionUpsert {
	u.SetExcluded(usersubscription.FieldSubscriptionCredit)
	return u
}

// AddSubscriptionCredit adds v to the "subscription_credit" field.
func (u *UserSubscriptionUpsert) AddSubscriptionCredit(v uint32) *UserSubscriptionUpsert {
	u.Add(usersubscription.FieldSubscriptionCredit, v)
	return u
}

// ClearSubscriptionCredit clears the value of the "subscription_credit" field.
func (u *UserSubscriptionUpsert) ClearSubscriptionCredit() *UserSubscriptionUpsert {
	u.SetNull(usersubscription.FieldSubscriptionCredit)
	return u
}

// SetAddonCredit sets the "addon_credit" field.
func (u *UserSubscriptionUpsert) SetAddonCredit(v uint32) *UserSubscriptionUpsert {
	u.Set(usersubscription.FieldAddonCredit, v)
	return u
}

// UpdateAddonCredit sets the "addon_credit" field to the value that was provided on create.
func (u *UserSubscriptionUpsert) UpdateAddonCredit() *UserSubscriptionUpsert {
	u.SetExcluded(usersubscription.FieldAddonCredit)
	return u
}

// AddAddonCredit adds v to the "addon_credit" field.
func (u *UserSubscriptionUpsert) AddAddonCredit(v uint32) *UserSubscriptionUpsert {
	u.Add(usersubscription.FieldAddonCredit, v)
	return u
}

// ClearAddonCredit clears the value of the "addon_credit" field.
func (u *UserSubscriptionUpsert) ClearAddonCredit() *UserSubscriptionUpsert {
	u.SetNull(usersubscription.FieldAddonCredit)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserSubscription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(usersubscription.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserSubscriptionUpsertOne) UpdateNewValues() *UserSubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(usersubscription.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserSubscription.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserSubscriptionUpsertOne) Ignore() *UserSubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserSubscriptionUpsertOne) DoNothing() *UserSubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserSubscriptionCreate.OnConflict
// documentation for more info.
func (u *UserSubscriptionUpsertOne) Update(set func(*UserSubscriptionUpsert)) *UserSubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserSubscriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *UserSubscriptionUpsertOne) SetEntID(v uuid.UUID) *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *UserSubscriptionUpsertOne) UpdateEntID() *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *UserSubscriptionUpsertOne) SetAppID(v uuid.UUID) *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *UserSubscriptionUpsertOne) UpdateAppID() *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *UserSubscriptionUpsertOne) ClearAppID() *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserSubscriptionUpsertOne) SetUserID(v uuid.UUID) *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserSubscriptionUpsertOne) UpdateUserID() *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *UserSubscriptionUpsertOne) ClearUserID() *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.ClearUserID()
	})
}

// SetPackageID sets the "package_id" field.
func (u *UserSubscriptionUpsertOne) SetPackageID(v uuid.UUID) *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.SetPackageID(v)
	})
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *UserSubscriptionUpsertOne) UpdatePackageID() *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.UpdatePackageID()
	})
}

// ClearPackageID clears the value of the "package_id" field.
func (u *UserSubscriptionUpsertOne) ClearPackageID() *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.ClearPackageID()
	})
}

// SetStartAt sets the "start_at" field.
func (u *UserSubscriptionUpsertOne) SetStartAt(v uint32) *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *UserSubscriptionUpsertOne) AddStartAt(v uint32) *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *UserSubscriptionUpsertOne) UpdateStartAt() *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *UserSubscriptionUpsertOne) ClearStartAt() *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *UserSubscriptionUpsertOne) SetEndAt(v uint32) *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *UserSubscriptionUpsertOne) AddEndAt(v uint32) *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *UserSubscriptionUpsertOne) UpdateEndAt() *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *UserSubscriptionUpsertOne) ClearEndAt() *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.ClearEndAt()
	})
}

// SetUsageState sets the "usage_state" field.
func (u *UserSubscriptionUpsertOne) SetUsageState(v string) *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.SetUsageState(v)
	})
}

// UpdateUsageState sets the "usage_state" field to the value that was provided on create.
func (u *UserSubscriptionUpsertOne) UpdateUsageState() *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.UpdateUsageState()
	})
}

// ClearUsageState clears the value of the "usage_state" field.
func (u *UserSubscriptionUpsertOne) ClearUsageState() *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.ClearUsageState()
	})
}

// SetSubscriptionCredit sets the "subscription_credit" field.
func (u *UserSubscriptionUpsertOne) SetSubscriptionCredit(v uint32) *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.SetSubscriptionCredit(v)
	})
}

// AddSubscriptionCredit adds v to the "subscription_credit" field.
func (u *UserSubscriptionUpsertOne) AddSubscriptionCredit(v uint32) *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.AddSubscriptionCredit(v)
	})
}

// UpdateSubscriptionCredit sets the "subscription_credit" field to the value that was provided on create.
func (u *UserSubscriptionUpsertOne) UpdateSubscriptionCredit() *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.UpdateSubscriptionCredit()
	})
}

// ClearSubscriptionCredit clears the value of the "subscription_credit" field.
func (u *UserSubscriptionUpsertOne) ClearSubscriptionCredit() *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.ClearSubscriptionCredit()
	})
}

// SetAddonCredit sets the "addon_credit" field.
func (u *UserSubscriptionUpsertOne) SetAddonCredit(v uint32) *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.SetAddonCredit(v)
	})
}

// AddAddonCredit adds v to the "addon_credit" field.
func (u *UserSubscriptionUpsertOne) AddAddonCredit(v uint32) *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.AddAddonCredit(v)
	})
}

// UpdateAddonCredit sets the "addon_credit" field to the value that was provided on create.
func (u *UserSubscriptionUpsertOne) UpdateAddonCredit() *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.UpdateAddonCredit()
	})
}

// ClearAddonCredit clears the value of the "addon_credit" field.
func (u *UserSubscriptionUpsertOne) ClearAddonCredit() *UserSubscriptionUpsertOne {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.ClearAddonCredit()
	})
}

// Exec executes the query.
func (u *UserSubscriptionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for UserSubscriptionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserSubscriptionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserSubscriptionUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserSubscriptionUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserSubscriptionCreateBulk is the builder for creating many UserSubscription entities in bulk.
type UserSubscriptionCreateBulk struct {
	config
	err      error
	builders []*UserSubscriptionCreate
	conflict []sql.ConflictOption
}

// Save creates the UserSubscription entities in the database.
func (uscb *UserSubscriptionCreateBulk) Save(ctx context.Context) ([]*UserSubscription, error) {
	if uscb.err != nil {
		return nil, uscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uscb.builders))
	nodes := make([]*UserSubscription, len(uscb.builders))
	mutators := make([]Mutator, len(uscb.builders))
	for i := range uscb.builders {
		func(i int, root context.Context) {
			builder := uscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserSubscriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = uscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uscb *UserSubscriptionCreateBulk) SaveX(ctx context.Context) []*UserSubscription {
	v, err := uscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uscb *UserSubscriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := uscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uscb *UserSubscriptionCreateBulk) ExecX(ctx context.Context) {
	if err := uscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserSubscription.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserSubscriptionUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (uscb *UserSubscriptionCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserSubscriptionUpsertBulk {
	uscb.conflict = opts
	return &UserSubscriptionUpsertBulk{
		create: uscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserSubscription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uscb *UserSubscriptionCreateBulk) OnConflictColumns(columns ...string) *UserSubscriptionUpsertBulk {
	uscb.conflict = append(uscb.conflict, sql.ConflictColumns(columns...))
	return &UserSubscriptionUpsertBulk{
		create: uscb,
	}
}

// UserSubscriptionUpsertBulk is the builder for "upsert"-ing
// a bulk of UserSubscription nodes.
type UserSubscriptionUpsertBulk struct {
	create *UserSubscriptionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserSubscription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(usersubscription.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserSubscriptionUpsertBulk) UpdateNewValues() *UserSubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(usersubscription.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserSubscription.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserSubscriptionUpsertBulk) Ignore() *UserSubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserSubscriptionUpsertBulk) DoNothing() *UserSubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserSubscriptionCreateBulk.OnConflict
// documentation for more info.
func (u *UserSubscriptionUpsertBulk) Update(set func(*UserSubscriptionUpsert)) *UserSubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserSubscriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *UserSubscriptionUpsertBulk) SetEntID(v uuid.UUID) *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *UserSubscriptionUpsertBulk) UpdateEntID() *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *UserSubscriptionUpsertBulk) SetAppID(v uuid.UUID) *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *UserSubscriptionUpsertBulk) UpdateAppID() *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *UserSubscriptionUpsertBulk) ClearAppID() *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserSubscriptionUpsertBulk) SetUserID(v uuid.UUID) *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserSubscriptionUpsertBulk) UpdateUserID() *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *UserSubscriptionUpsertBulk) ClearUserID() *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.ClearUserID()
	})
}

// SetPackageID sets the "package_id" field.
func (u *UserSubscriptionUpsertBulk) SetPackageID(v uuid.UUID) *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.SetPackageID(v)
	})
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *UserSubscriptionUpsertBulk) UpdatePackageID() *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.UpdatePackageID()
	})
}

// ClearPackageID clears the value of the "package_id" field.
func (u *UserSubscriptionUpsertBulk) ClearPackageID() *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.ClearPackageID()
	})
}

// SetStartAt sets the "start_at" field.
func (u *UserSubscriptionUpsertBulk) SetStartAt(v uint32) *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *UserSubscriptionUpsertBulk) AddStartAt(v uint32) *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *UserSubscriptionUpsertBulk) UpdateStartAt() *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *UserSubscriptionUpsertBulk) ClearStartAt() *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *UserSubscriptionUpsertBulk) SetEndAt(v uint32) *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *UserSubscriptionUpsertBulk) AddEndAt(v uint32) *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *UserSubscriptionUpsertBulk) UpdateEndAt() *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *UserSubscriptionUpsertBulk) ClearEndAt() *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.ClearEndAt()
	})
}

// SetUsageState sets the "usage_state" field.
func (u *UserSubscriptionUpsertBulk) SetUsageState(v string) *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.SetUsageState(v)
	})
}

// UpdateUsageState sets the "usage_state" field to the value that was provided on create.
func (u *UserSubscriptionUpsertBulk) UpdateUsageState() *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.UpdateUsageState()
	})
}

// ClearUsageState clears the value of the "usage_state" field.
func (u *UserSubscriptionUpsertBulk) ClearUsageState() *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.ClearUsageState()
	})
}

// SetSubscriptionCredit sets the "subscription_credit" field.
func (u *UserSubscriptionUpsertBulk) SetSubscriptionCredit(v uint32) *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.SetSubscriptionCredit(v)
	})
}

// AddSubscriptionCredit adds v to the "subscription_credit" field.
func (u *UserSubscriptionUpsertBulk) AddSubscriptionCredit(v uint32) *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.AddSubscriptionCredit(v)
	})
}

// UpdateSubscriptionCredit sets the "subscription_credit" field to the value that was provided on create.
func (u *UserSubscriptionUpsertBulk) UpdateSubscriptionCredit() *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.UpdateSubscriptionCredit()
	})
}

// ClearSubscriptionCredit clears the value of the "subscription_credit" field.
func (u *UserSubscriptionUpsertBulk) ClearSubscriptionCredit() *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.ClearSubscriptionCredit()
	})
}

// SetAddonCredit sets the "addon_credit" field.
func (u *UserSubscriptionUpsertBulk) SetAddonCredit(v uint32) *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.SetAddonCredit(v)
	})
}

// AddAddonCredit adds v to the "addon_credit" field.
func (u *UserSubscriptionUpsertBulk) AddAddonCredit(v uint32) *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.AddAddonCredit(v)
	})
}

// UpdateAddonCredit sets the "addon_credit" field to the value that was provided on create.
func (u *UserSubscriptionUpsertBulk) UpdateAddonCredit() *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.UpdateAddonCredit()
	})
}

// ClearAddonCredit clears the value of the "addon_credit" field.
func (u *UserSubscriptionUpsertBulk) ClearAddonCredit() *UserSubscriptionUpsertBulk {
	return u.Update(func(s *UserSubscriptionUpsert) {
		s.ClearAddonCredit()
	})
}

// Exec executes the query.
func (u *UserSubscriptionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the UserSubscriptionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for UserSubscriptionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserSubscriptionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

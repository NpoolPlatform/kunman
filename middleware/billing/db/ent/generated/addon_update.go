// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/addon"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AddonUpdate is the builder for updating Addon entities.
type AddonUpdate struct {
	config
	hooks    []Hook
	mutation *AddonMutation
}

// Where appends a list predicates to the AddonUpdate builder.
func (au *AddonUpdate) Where(ps ...predicate.Addon) *AddonUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetEntID sets the "ent_id" field.
func (au *AddonUpdate) SetEntID(u uuid.UUID) *AddonUpdate {
	au.mutation.SetEntID(u)
	return au
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (au *AddonUpdate) SetNillableEntID(u *uuid.UUID) *AddonUpdate {
	if u != nil {
		au.SetEntID(*u)
	}
	return au
}

// SetAppID sets the "app_id" field.
func (au *AddonUpdate) SetAppID(u uuid.UUID) *AddonUpdate {
	au.mutation.SetAppID(u)
	return au
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (au *AddonUpdate) SetNillableAppID(u *uuid.UUID) *AddonUpdate {
	if u != nil {
		au.SetAppID(*u)
	}
	return au
}

// ClearAppID clears the value of the "app_id" field.
func (au *AddonUpdate) ClearAppID() *AddonUpdate {
	au.mutation.ClearAppID()
	return au
}

// SetUsdPrice sets the "usd_price" field.
func (au *AddonUpdate) SetUsdPrice(d decimal.Decimal) *AddonUpdate {
	au.mutation.SetUsdPrice(d)
	return au
}

// SetNillableUsdPrice sets the "usd_price" field if the given value is not nil.
func (au *AddonUpdate) SetNillableUsdPrice(d *decimal.Decimal) *AddonUpdate {
	if d != nil {
		au.SetUsdPrice(*d)
	}
	return au
}

// ClearUsdPrice clears the value of the "usd_price" field.
func (au *AddonUpdate) ClearUsdPrice() *AddonUpdate {
	au.mutation.ClearUsdPrice()
	return au
}

// SetCredit sets the "credit" field.
func (au *AddonUpdate) SetCredit(u uint32) *AddonUpdate {
	au.mutation.ResetCredit()
	au.mutation.SetCredit(u)
	return au
}

// SetNillableCredit sets the "credit" field if the given value is not nil.
func (au *AddonUpdate) SetNillableCredit(u *uint32) *AddonUpdate {
	if u != nil {
		au.SetCredit(*u)
	}
	return au
}

// AddCredit adds u to the "credit" field.
func (au *AddonUpdate) AddCredit(u int32) *AddonUpdate {
	au.mutation.AddCredit(u)
	return au
}

// ClearCredit clears the value of the "credit" field.
func (au *AddonUpdate) ClearCredit() *AddonUpdate {
	au.mutation.ClearCredit()
	return au
}

// SetSortOrder sets the "sort_order" field.
func (au *AddonUpdate) SetSortOrder(u uint32) *AddonUpdate {
	au.mutation.ResetSortOrder()
	au.mutation.SetSortOrder(u)
	return au
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (au *AddonUpdate) SetNillableSortOrder(u *uint32) *AddonUpdate {
	if u != nil {
		au.SetSortOrder(*u)
	}
	return au
}

// AddSortOrder adds u to the "sort_order" field.
func (au *AddonUpdate) AddSortOrder(u int32) *AddonUpdate {
	au.mutation.AddSortOrder(u)
	return au
}

// ClearSortOrder clears the value of the "sort_order" field.
func (au *AddonUpdate) ClearSortOrder() *AddonUpdate {
	au.mutation.ClearSortOrder()
	return au
}

// SetEnabled sets the "enabled" field.
func (au *AddonUpdate) SetEnabled(b bool) *AddonUpdate {
	au.mutation.SetEnabled(b)
	return au
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (au *AddonUpdate) SetNillableEnabled(b *bool) *AddonUpdate {
	if b != nil {
		au.SetEnabled(*b)
	}
	return au
}

// ClearEnabled clears the value of the "enabled" field.
func (au *AddonUpdate) ClearEnabled() *AddonUpdate {
	au.mutation.ClearEnabled()
	return au
}

// SetDescription sets the "description" field.
func (au *AddonUpdate) SetDescription(s string) *AddonUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *AddonUpdate) SetNillableDescription(s *string) *AddonUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// ClearDescription clears the value of the "description" field.
func (au *AddonUpdate) ClearDescription() *AddonUpdate {
	au.mutation.ClearDescription()
	return au
}

// Mutation returns the AddonMutation object of the builder.
func (au *AddonUpdate) Mutation() *AddonMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AddonUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AddonUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AddonUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AddonUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AddonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(addon.Table, addon.Columns, sqlgraph.NewFieldSpec(addon.FieldID, field.TypeUint32))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.EntID(); ok {
		_spec.SetField(addon.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := au.mutation.AppID(); ok {
		_spec.SetField(addon.FieldAppID, field.TypeUUID, value)
	}
	if au.mutation.AppIDCleared() {
		_spec.ClearField(addon.FieldAppID, field.TypeUUID)
	}
	if value, ok := au.mutation.UsdPrice(); ok {
		_spec.SetField(addon.FieldUsdPrice, field.TypeOther, value)
	}
	if au.mutation.UsdPriceCleared() {
		_spec.ClearField(addon.FieldUsdPrice, field.TypeOther)
	}
	if value, ok := au.mutation.Credit(); ok {
		_spec.SetField(addon.FieldCredit, field.TypeUint32, value)
	}
	if value, ok := au.mutation.AddedCredit(); ok {
		_spec.AddField(addon.FieldCredit, field.TypeUint32, value)
	}
	if au.mutation.CreditCleared() {
		_spec.ClearField(addon.FieldCredit, field.TypeUint32)
	}
	if value, ok := au.mutation.SortOrder(); ok {
		_spec.SetField(addon.FieldSortOrder, field.TypeUint32, value)
	}
	if value, ok := au.mutation.AddedSortOrder(); ok {
		_spec.AddField(addon.FieldSortOrder, field.TypeUint32, value)
	}
	if au.mutation.SortOrderCleared() {
		_spec.ClearField(addon.FieldSortOrder, field.TypeUint32)
	}
	if value, ok := au.mutation.Enabled(); ok {
		_spec.SetField(addon.FieldEnabled, field.TypeBool, value)
	}
	if au.mutation.EnabledCleared() {
		_spec.ClearField(addon.FieldEnabled, field.TypeBool)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(addon.FieldDescription, field.TypeString, value)
	}
	if au.mutation.DescriptionCleared() {
		_spec.ClearField(addon.FieldDescription, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{addon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AddonUpdateOne is the builder for updating a single Addon entity.
type AddonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AddonMutation
}

// SetEntID sets the "ent_id" field.
func (auo *AddonUpdateOne) SetEntID(u uuid.UUID) *AddonUpdateOne {
	auo.mutation.SetEntID(u)
	return auo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (auo *AddonUpdateOne) SetNillableEntID(u *uuid.UUID) *AddonUpdateOne {
	if u != nil {
		auo.SetEntID(*u)
	}
	return auo
}

// SetAppID sets the "app_id" field.
func (auo *AddonUpdateOne) SetAppID(u uuid.UUID) *AddonUpdateOne {
	auo.mutation.SetAppID(u)
	return auo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (auo *AddonUpdateOne) SetNillableAppID(u *uuid.UUID) *AddonUpdateOne {
	if u != nil {
		auo.SetAppID(*u)
	}
	return auo
}

// ClearAppID clears the value of the "app_id" field.
func (auo *AddonUpdateOne) ClearAppID() *AddonUpdateOne {
	auo.mutation.ClearAppID()
	return auo
}

// SetUsdPrice sets the "usd_price" field.
func (auo *AddonUpdateOne) SetUsdPrice(d decimal.Decimal) *AddonUpdateOne {
	auo.mutation.SetUsdPrice(d)
	return auo
}

// SetNillableUsdPrice sets the "usd_price" field if the given value is not nil.
func (auo *AddonUpdateOne) SetNillableUsdPrice(d *decimal.Decimal) *AddonUpdateOne {
	if d != nil {
		auo.SetUsdPrice(*d)
	}
	return auo
}

// ClearUsdPrice clears the value of the "usd_price" field.
func (auo *AddonUpdateOne) ClearUsdPrice() *AddonUpdateOne {
	auo.mutation.ClearUsdPrice()
	return auo
}

// SetCredit sets the "credit" field.
func (auo *AddonUpdateOne) SetCredit(u uint32) *AddonUpdateOne {
	auo.mutation.ResetCredit()
	auo.mutation.SetCredit(u)
	return auo
}

// SetNillableCredit sets the "credit" field if the given value is not nil.
func (auo *AddonUpdateOne) SetNillableCredit(u *uint32) *AddonUpdateOne {
	if u != nil {
		auo.SetCredit(*u)
	}
	return auo
}

// AddCredit adds u to the "credit" field.
func (auo *AddonUpdateOne) AddCredit(u int32) *AddonUpdateOne {
	auo.mutation.AddCredit(u)
	return auo
}

// ClearCredit clears the value of the "credit" field.
func (auo *AddonUpdateOne) ClearCredit() *AddonUpdateOne {
	auo.mutation.ClearCredit()
	return auo
}

// SetSortOrder sets the "sort_order" field.
func (auo *AddonUpdateOne) SetSortOrder(u uint32) *AddonUpdateOne {
	auo.mutation.ResetSortOrder()
	auo.mutation.SetSortOrder(u)
	return auo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (auo *AddonUpdateOne) SetNillableSortOrder(u *uint32) *AddonUpdateOne {
	if u != nil {
		auo.SetSortOrder(*u)
	}
	return auo
}

// AddSortOrder adds u to the "sort_order" field.
func (auo *AddonUpdateOne) AddSortOrder(u int32) *AddonUpdateOne {
	auo.mutation.AddSortOrder(u)
	return auo
}

// ClearSortOrder clears the value of the "sort_order" field.
func (auo *AddonUpdateOne) ClearSortOrder() *AddonUpdateOne {
	auo.mutation.ClearSortOrder()
	return auo
}

// SetEnabled sets the "enabled" field.
func (auo *AddonUpdateOne) SetEnabled(b bool) *AddonUpdateOne {
	auo.mutation.SetEnabled(b)
	return auo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (auo *AddonUpdateOne) SetNillableEnabled(b *bool) *AddonUpdateOne {
	if b != nil {
		auo.SetEnabled(*b)
	}
	return auo
}

// ClearEnabled clears the value of the "enabled" field.
func (auo *AddonUpdateOne) ClearEnabled() *AddonUpdateOne {
	auo.mutation.ClearEnabled()
	return auo
}

// SetDescription sets the "description" field.
func (auo *AddonUpdateOne) SetDescription(s string) *AddonUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *AddonUpdateOne) SetNillableDescription(s *string) *AddonUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// ClearDescription clears the value of the "description" field.
func (auo *AddonUpdateOne) ClearDescription() *AddonUpdateOne {
	auo.mutation.ClearDescription()
	return auo
}

// Mutation returns the AddonMutation object of the builder.
func (auo *AddonUpdateOne) Mutation() *AddonMutation {
	return auo.mutation
}

// Where appends a list predicates to the AddonUpdate builder.
func (auo *AddonUpdateOne) Where(ps ...predicate.Addon) *AddonUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AddonUpdateOne) Select(field string, fields ...string) *AddonUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Addon entity.
func (auo *AddonUpdateOne) Save(ctx context.Context) (*Addon, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AddonUpdateOne) SaveX(ctx context.Context) *Addon {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AddonUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AddonUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AddonUpdateOne) sqlSave(ctx context.Context) (_node *Addon, err error) {
	_spec := sqlgraph.NewUpdateSpec(addon.Table, addon.Columns, sqlgraph.NewFieldSpec(addon.FieldID, field.TypeUint32))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Addon.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, addon.FieldID)
		for _, f := range fields {
			if !addon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != addon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.EntID(); ok {
		_spec.SetField(addon.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := auo.mutation.AppID(); ok {
		_spec.SetField(addon.FieldAppID, field.TypeUUID, value)
	}
	if auo.mutation.AppIDCleared() {
		_spec.ClearField(addon.FieldAppID, field.TypeUUID)
	}
	if value, ok := auo.mutation.UsdPrice(); ok {
		_spec.SetField(addon.FieldUsdPrice, field.TypeOther, value)
	}
	if auo.mutation.UsdPriceCleared() {
		_spec.ClearField(addon.FieldUsdPrice, field.TypeOther)
	}
	if value, ok := auo.mutation.Credit(); ok {
		_spec.SetField(addon.FieldCredit, field.TypeUint32, value)
	}
	if value, ok := auo.mutation.AddedCredit(); ok {
		_spec.AddField(addon.FieldCredit, field.TypeUint32, value)
	}
	if auo.mutation.CreditCleared() {
		_spec.ClearField(addon.FieldCredit, field.TypeUint32)
	}
	if value, ok := auo.mutation.SortOrder(); ok {
		_spec.SetField(addon.FieldSortOrder, field.TypeUint32, value)
	}
	if value, ok := auo.mutation.AddedSortOrder(); ok {
		_spec.AddField(addon.FieldSortOrder, field.TypeUint32, value)
	}
	if auo.mutation.SortOrderCleared() {
		_spec.ClearField(addon.FieldSortOrder, field.TypeUint32)
	}
	if value, ok := auo.mutation.Enabled(); ok {
		_spec.SetField(addon.FieldEnabled, field.TypeBool, value)
	}
	if auo.mutation.EnabledCleared() {
		_spec.ClearField(addon.FieldEnabled, field.TypeBool)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(addon.FieldDescription, field.TypeString, value)
	}
	if auo.mutation.DescriptionCleared() {
		_spec.ClearField(addon.FieldDescription, field.TypeString)
	}
	_node = &Addon{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{addon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}

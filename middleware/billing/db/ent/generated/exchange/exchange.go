// Code generated by ent, DO NOT EDIT.

package exchange

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the exchange type in the database.
	Label = "exchange"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldUsageType holds the string denoting the usage_type field in the database.
	FieldUsageType = "usage_type"
	// FieldCredit holds the string denoting the credit field in the database.
	FieldCredit = "credit"
	// FieldExchangeThreshold holds the string denoting the exchange_threshold field in the database.
	FieldExchangeThreshold = "exchange_threshold"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// Table holds the table name of the exchange in the database.
	Table = "exchanges"
)

// Columns holds all SQL columns for exchange fields.
var Columns = []string{
	FieldID,
	FieldEntID,
	FieldAppID,
	FieldUsageType,
	FieldCredit,
	FieldExchangeThreshold,
	FieldPath,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultAppID holds the default value on creation for the "app_id" field.
	DefaultAppID func() uuid.UUID
	// DefaultUsageType holds the default value on creation for the "usage_type" field.
	DefaultUsageType string
	// DefaultCredit holds the default value on creation for the "credit" field.
	DefaultCredit uint32
	// DefaultExchangeThreshold holds the default value on creation for the "exchange_threshold" field.
	DefaultExchangeThreshold uint32
	// DefaultPath holds the default value on creation for the "path" field.
	DefaultPath string
)

// OrderOption defines the ordering options for the Exchange queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByAppID orders the results by the app_id field.
func ByAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppID, opts...).ToFunc()
}

// ByUsageType orders the results by the usage_type field.
func ByUsageType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsageType, opts...).ToFunc()
}

// ByCredit orders the results by the credit field.
func ByCredit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCredit, opts...).ToFunc()
}

// ByExchangeThreshold orders the results by the exchange_threshold field.
func ByExchangeThreshold(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExchangeThreshold, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

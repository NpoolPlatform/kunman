// Code generated by ent, DO NOT EDIT.

package exchange

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(sql.FieldEQ(FieldEntID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(sql.FieldEQ(FieldAppID, v))
}

// UsageType applies equality check predicate on the "usage_type" field. It's identical to UsageTypeEQ.
func UsageType(v string) predicate.Exchange {
	return predicate.Exchange(sql.FieldEQ(FieldUsageType, v))
}

// Credit applies equality check predicate on the "credit" field. It's identical to CreditEQ.
func Credit(v uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldEQ(FieldCredit, v))
}

// ExchangeThreshold applies equality check predicate on the "exchange_threshold" field. It's identical to ExchangeThresholdEQ.
func ExchangeThreshold(v uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldEQ(FieldExchangeThreshold, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.Exchange {
	return predicate.Exchange(sql.FieldEQ(FieldPath, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.Exchange {
	return predicate.Exchange(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.Exchange {
	return predicate.Exchange(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(sql.FieldLTE(FieldEntID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.Exchange {
	return predicate.Exchange(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.Exchange {
	return predicate.Exchange(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(sql.FieldLTE(FieldAppID, v))
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.Exchange {
	return predicate.Exchange(sql.FieldIsNull(FieldAppID))
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.Exchange {
	return predicate.Exchange(sql.FieldNotNull(FieldAppID))
}

// UsageTypeEQ applies the EQ predicate on the "usage_type" field.
func UsageTypeEQ(v string) predicate.Exchange {
	return predicate.Exchange(sql.FieldEQ(FieldUsageType, v))
}

// UsageTypeNEQ applies the NEQ predicate on the "usage_type" field.
func UsageTypeNEQ(v string) predicate.Exchange {
	return predicate.Exchange(sql.FieldNEQ(FieldUsageType, v))
}

// UsageTypeIn applies the In predicate on the "usage_type" field.
func UsageTypeIn(vs ...string) predicate.Exchange {
	return predicate.Exchange(sql.FieldIn(FieldUsageType, vs...))
}

// UsageTypeNotIn applies the NotIn predicate on the "usage_type" field.
func UsageTypeNotIn(vs ...string) predicate.Exchange {
	return predicate.Exchange(sql.FieldNotIn(FieldUsageType, vs...))
}

// UsageTypeGT applies the GT predicate on the "usage_type" field.
func UsageTypeGT(v string) predicate.Exchange {
	return predicate.Exchange(sql.FieldGT(FieldUsageType, v))
}

// UsageTypeGTE applies the GTE predicate on the "usage_type" field.
func UsageTypeGTE(v string) predicate.Exchange {
	return predicate.Exchange(sql.FieldGTE(FieldUsageType, v))
}

// UsageTypeLT applies the LT predicate on the "usage_type" field.
func UsageTypeLT(v string) predicate.Exchange {
	return predicate.Exchange(sql.FieldLT(FieldUsageType, v))
}

// UsageTypeLTE applies the LTE predicate on the "usage_type" field.
func UsageTypeLTE(v string) predicate.Exchange {
	return predicate.Exchange(sql.FieldLTE(FieldUsageType, v))
}

// UsageTypeContains applies the Contains predicate on the "usage_type" field.
func UsageTypeContains(v string) predicate.Exchange {
	return predicate.Exchange(sql.FieldContains(FieldUsageType, v))
}

// UsageTypeHasPrefix applies the HasPrefix predicate on the "usage_type" field.
func UsageTypeHasPrefix(v string) predicate.Exchange {
	return predicate.Exchange(sql.FieldHasPrefix(FieldUsageType, v))
}

// UsageTypeHasSuffix applies the HasSuffix predicate on the "usage_type" field.
func UsageTypeHasSuffix(v string) predicate.Exchange {
	return predicate.Exchange(sql.FieldHasSuffix(FieldUsageType, v))
}

// UsageTypeIsNil applies the IsNil predicate on the "usage_type" field.
func UsageTypeIsNil() predicate.Exchange {
	return predicate.Exchange(sql.FieldIsNull(FieldUsageType))
}

// UsageTypeNotNil applies the NotNil predicate on the "usage_type" field.
func UsageTypeNotNil() predicate.Exchange {
	return predicate.Exchange(sql.FieldNotNull(FieldUsageType))
}

// UsageTypeEqualFold applies the EqualFold predicate on the "usage_type" field.
func UsageTypeEqualFold(v string) predicate.Exchange {
	return predicate.Exchange(sql.FieldEqualFold(FieldUsageType, v))
}

// UsageTypeContainsFold applies the ContainsFold predicate on the "usage_type" field.
func UsageTypeContainsFold(v string) predicate.Exchange {
	return predicate.Exchange(sql.FieldContainsFold(FieldUsageType, v))
}

// CreditEQ applies the EQ predicate on the "credit" field.
func CreditEQ(v uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldEQ(FieldCredit, v))
}

// CreditNEQ applies the NEQ predicate on the "credit" field.
func CreditNEQ(v uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldNEQ(FieldCredit, v))
}

// CreditIn applies the In predicate on the "credit" field.
func CreditIn(vs ...uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldIn(FieldCredit, vs...))
}

// CreditNotIn applies the NotIn predicate on the "credit" field.
func CreditNotIn(vs ...uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldNotIn(FieldCredit, vs...))
}

// CreditGT applies the GT predicate on the "credit" field.
func CreditGT(v uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldGT(FieldCredit, v))
}

// CreditGTE applies the GTE predicate on the "credit" field.
func CreditGTE(v uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldGTE(FieldCredit, v))
}

// CreditLT applies the LT predicate on the "credit" field.
func CreditLT(v uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldLT(FieldCredit, v))
}

// CreditLTE applies the LTE predicate on the "credit" field.
func CreditLTE(v uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldLTE(FieldCredit, v))
}

// CreditIsNil applies the IsNil predicate on the "credit" field.
func CreditIsNil() predicate.Exchange {
	return predicate.Exchange(sql.FieldIsNull(FieldCredit))
}

// CreditNotNil applies the NotNil predicate on the "credit" field.
func CreditNotNil() predicate.Exchange {
	return predicate.Exchange(sql.FieldNotNull(FieldCredit))
}

// ExchangeThresholdEQ applies the EQ predicate on the "exchange_threshold" field.
func ExchangeThresholdEQ(v uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldEQ(FieldExchangeThreshold, v))
}

// ExchangeThresholdNEQ applies the NEQ predicate on the "exchange_threshold" field.
func ExchangeThresholdNEQ(v uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldNEQ(FieldExchangeThreshold, v))
}

// ExchangeThresholdIn applies the In predicate on the "exchange_threshold" field.
func ExchangeThresholdIn(vs ...uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldIn(FieldExchangeThreshold, vs...))
}

// ExchangeThresholdNotIn applies the NotIn predicate on the "exchange_threshold" field.
func ExchangeThresholdNotIn(vs ...uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldNotIn(FieldExchangeThreshold, vs...))
}

// ExchangeThresholdGT applies the GT predicate on the "exchange_threshold" field.
func ExchangeThresholdGT(v uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldGT(FieldExchangeThreshold, v))
}

// ExchangeThresholdGTE applies the GTE predicate on the "exchange_threshold" field.
func ExchangeThresholdGTE(v uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldGTE(FieldExchangeThreshold, v))
}

// ExchangeThresholdLT applies the LT predicate on the "exchange_threshold" field.
func ExchangeThresholdLT(v uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldLT(FieldExchangeThreshold, v))
}

// ExchangeThresholdLTE applies the LTE predicate on the "exchange_threshold" field.
func ExchangeThresholdLTE(v uint32) predicate.Exchange {
	return predicate.Exchange(sql.FieldLTE(FieldExchangeThreshold, v))
}

// ExchangeThresholdIsNil applies the IsNil predicate on the "exchange_threshold" field.
func ExchangeThresholdIsNil() predicate.Exchange {
	return predicate.Exchange(sql.FieldIsNull(FieldExchangeThreshold))
}

// ExchangeThresholdNotNil applies the NotNil predicate on the "exchange_threshold" field.
func ExchangeThresholdNotNil() predicate.Exchange {
	return predicate.Exchange(sql.FieldNotNull(FieldExchangeThreshold))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.Exchange {
	return predicate.Exchange(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.Exchange {
	return predicate.Exchange(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.Exchange {
	return predicate.Exchange(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.Exchange {
	return predicate.Exchange(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.Exchange {
	return predicate.Exchange(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.Exchange {
	return predicate.Exchange(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.Exchange {
	return predicate.Exchange(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.Exchange {
	return predicate.Exchange(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.Exchange {
	return predicate.Exchange(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.Exchange {
	return predicate.Exchange(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.Exchange {
	return predicate.Exchange(sql.FieldHasSuffix(FieldPath, v))
}

// PathIsNil applies the IsNil predicate on the "path" field.
func PathIsNil() predicate.Exchange {
	return predicate.Exchange(sql.FieldIsNull(FieldPath))
}

// PathNotNil applies the NotNil predicate on the "path" field.
func PathNotNil() predicate.Exchange {
	return predicate.Exchange(sql.FieldNotNull(FieldPath))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.Exchange {
	return predicate.Exchange(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.Exchange {
	return predicate.Exchange(sql.FieldContainsFold(FieldPath, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Exchange) predicate.Exchange {
	return predicate.Exchange(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Exchange) predicate.Exchange {
	return predicate.Exchange(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Exchange) predicate.Exchange {
	return predicate.Exchange(sql.NotPredicates(p))
}

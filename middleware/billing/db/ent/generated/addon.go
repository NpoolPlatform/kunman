// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/addon"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// Addon is the model entity for the Addon schema.
type Addon struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UsdPrice holds the value of the "usd_price" field.
	UsdPrice decimal.Decimal `json:"usd_price,omitempty"`
	// Credit holds the value of the "credit" field.
	Credit uint32 `json:"credit,omitempty"`
	// SortOrder holds the value of the "sort_order" field.
	SortOrder uint32 `json:"sort_order,omitempty"`
	// Enabled holds the value of the "enabled" field.
	Enabled bool `json:"enabled,omitempty"`
	// Description holds the value of the "description" field.
	Description  string `json:"description,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Addon) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case addon.FieldUsdPrice:
			values[i] = new(decimal.Decimal)
		case addon.FieldEnabled:
			values[i] = new(sql.NullBool)
		case addon.FieldID, addon.FieldCredit, addon.FieldSortOrder:
			values[i] = new(sql.NullInt64)
		case addon.FieldDescription:
			values[i] = new(sql.NullString)
		case addon.FieldEntID, addon.FieldAppID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Addon fields.
func (a *Addon) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case addon.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = uint32(value.Int64)
		case addon.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				a.EntID = *value
			}
		case addon.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				a.AppID = *value
			}
		case addon.FieldUsdPrice:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field usd_price", values[i])
			} else if value != nil {
				a.UsdPrice = *value
			}
		case addon.FieldCredit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field credit", values[i])
			} else if value.Valid {
				a.Credit = uint32(value.Int64)
			}
		case addon.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				a.SortOrder = uint32(value.Int64)
			}
		case addon.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				a.Enabled = value.Bool
			}
		case addon.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				a.Description = value.String
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Addon.
// This includes values selected through modifiers, order, etc.
func (a *Addon) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// Update returns a builder for updating this Addon.
// Note that you need to call Addon.Unwrap() before calling this method if this Addon
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Addon) Update() *AddonUpdateOne {
	return NewAddonClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Addon entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Addon) Unwrap() *Addon {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("generated: Addon is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Addon) String() string {
	var builder strings.Builder
	builder.WriteString("Addon(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", a.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", a.AppID))
	builder.WriteString(", ")
	builder.WriteString("usd_price=")
	builder.WriteString(fmt.Sprintf("%v", a.UsdPrice))
	builder.WriteString(", ")
	builder.WriteString("credit=")
	builder.WriteString(fmt.Sprintf("%v", a.Credit))
	builder.WriteString(", ")
	builder.WriteString("sort_order=")
	builder.WriteString(fmt.Sprintf("%v", a.SortOrder))
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", a.Enabled))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(a.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Addons is a parsable slice of Addon.
type Addons []*Addon

// Code generated by ent, DO NOT EDIT.

package usersubscriptionchange

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldEQ(FieldEntID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldEQ(FieldAppID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldEQ(FieldUserID, v))
}

// UserSubscriptionID applies equality check predicate on the "user_subscription_id" field. It's identical to UserSubscriptionIDEQ.
func UserSubscriptionID(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldEQ(FieldUserSubscriptionID, v))
}

// OldPackageID applies equality check predicate on the "old_package_id" field. It's identical to OldPackageIDEQ.
func OldPackageID(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldEQ(FieldOldPackageID, v))
}

// NewPackageID applies equality check predicate on the "new_package_id" field. It's identical to NewPackageIDEQ.
func NewPackageID(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldEQ(FieldNewPackageID, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldLTE(FieldEntID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldLTE(FieldAppID, v))
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldIsNull(FieldAppID))
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldNotNull(FieldAppID))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldLTE(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldNotNull(FieldUserID))
}

// UserSubscriptionIDEQ applies the EQ predicate on the "user_subscription_id" field.
func UserSubscriptionIDEQ(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldEQ(FieldUserSubscriptionID, v))
}

// UserSubscriptionIDNEQ applies the NEQ predicate on the "user_subscription_id" field.
func UserSubscriptionIDNEQ(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldNEQ(FieldUserSubscriptionID, v))
}

// UserSubscriptionIDIn applies the In predicate on the "user_subscription_id" field.
func UserSubscriptionIDIn(vs ...uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldIn(FieldUserSubscriptionID, vs...))
}

// UserSubscriptionIDNotIn applies the NotIn predicate on the "user_subscription_id" field.
func UserSubscriptionIDNotIn(vs ...uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldNotIn(FieldUserSubscriptionID, vs...))
}

// UserSubscriptionIDGT applies the GT predicate on the "user_subscription_id" field.
func UserSubscriptionIDGT(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldGT(FieldUserSubscriptionID, v))
}

// UserSubscriptionIDGTE applies the GTE predicate on the "user_subscription_id" field.
func UserSubscriptionIDGTE(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldGTE(FieldUserSubscriptionID, v))
}

// UserSubscriptionIDLT applies the LT predicate on the "user_subscription_id" field.
func UserSubscriptionIDLT(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldLT(FieldUserSubscriptionID, v))
}

// UserSubscriptionIDLTE applies the LTE predicate on the "user_subscription_id" field.
func UserSubscriptionIDLTE(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldLTE(FieldUserSubscriptionID, v))
}

// UserSubscriptionIDIsNil applies the IsNil predicate on the "user_subscription_id" field.
func UserSubscriptionIDIsNil() predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldIsNull(FieldUserSubscriptionID))
}

// UserSubscriptionIDNotNil applies the NotNil predicate on the "user_subscription_id" field.
func UserSubscriptionIDNotNil() predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldNotNull(FieldUserSubscriptionID))
}

// OldPackageIDEQ applies the EQ predicate on the "old_package_id" field.
func OldPackageIDEQ(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldEQ(FieldOldPackageID, v))
}

// OldPackageIDNEQ applies the NEQ predicate on the "old_package_id" field.
func OldPackageIDNEQ(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldNEQ(FieldOldPackageID, v))
}

// OldPackageIDIn applies the In predicate on the "old_package_id" field.
func OldPackageIDIn(vs ...uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldIn(FieldOldPackageID, vs...))
}

// OldPackageIDNotIn applies the NotIn predicate on the "old_package_id" field.
func OldPackageIDNotIn(vs ...uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldNotIn(FieldOldPackageID, vs...))
}

// OldPackageIDGT applies the GT predicate on the "old_package_id" field.
func OldPackageIDGT(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldGT(FieldOldPackageID, v))
}

// OldPackageIDGTE applies the GTE predicate on the "old_package_id" field.
func OldPackageIDGTE(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldGTE(FieldOldPackageID, v))
}

// OldPackageIDLT applies the LT predicate on the "old_package_id" field.
func OldPackageIDLT(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldLT(FieldOldPackageID, v))
}

// OldPackageIDLTE applies the LTE predicate on the "old_package_id" field.
func OldPackageIDLTE(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldLTE(FieldOldPackageID, v))
}

// OldPackageIDIsNil applies the IsNil predicate on the "old_package_id" field.
func OldPackageIDIsNil() predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldIsNull(FieldOldPackageID))
}

// OldPackageIDNotNil applies the NotNil predicate on the "old_package_id" field.
func OldPackageIDNotNil() predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldNotNull(FieldOldPackageID))
}

// NewPackageIDEQ applies the EQ predicate on the "new_package_id" field.
func NewPackageIDEQ(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldEQ(FieldNewPackageID, v))
}

// NewPackageIDNEQ applies the NEQ predicate on the "new_package_id" field.
func NewPackageIDNEQ(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldNEQ(FieldNewPackageID, v))
}

// NewPackageIDIn applies the In predicate on the "new_package_id" field.
func NewPackageIDIn(vs ...uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldIn(FieldNewPackageID, vs...))
}

// NewPackageIDNotIn applies the NotIn predicate on the "new_package_id" field.
func NewPackageIDNotIn(vs ...uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldNotIn(FieldNewPackageID, vs...))
}

// NewPackageIDGT applies the GT predicate on the "new_package_id" field.
func NewPackageIDGT(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldGT(FieldNewPackageID, v))
}

// NewPackageIDGTE applies the GTE predicate on the "new_package_id" field.
func NewPackageIDGTE(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldGTE(FieldNewPackageID, v))
}

// NewPackageIDLT applies the LT predicate on the "new_package_id" field.
func NewPackageIDLT(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldLT(FieldNewPackageID, v))
}

// NewPackageIDLTE applies the LTE predicate on the "new_package_id" field.
func NewPackageIDLTE(v uuid.UUID) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldLTE(FieldNewPackageID, v))
}

// NewPackageIDIsNil applies the IsNil predicate on the "new_package_id" field.
func NewPackageIDIsNil() predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldIsNull(FieldNewPackageID))
}

// NewPackageIDNotNil applies the NotNil predicate on the "new_package_id" field.
func NewPackageIDNotNil() predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.FieldNotNull(FieldNewPackageID))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserSubscriptionChange) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserSubscriptionChange) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserSubscriptionChange) predicate.UserSubscriptionChange {
	return predicate.UserSubscriptionChange(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package usersubscriptionchange

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the usersubscriptionchange type in the database.
	Label = "user_subscription_change"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldUserSubscriptionID holds the string denoting the user_subscription_id field in the database.
	FieldUserSubscriptionID = "user_subscription_id"
	// FieldOldPackageID holds the string denoting the old_package_id field in the database.
	FieldOldPackageID = "old_package_id"
	// FieldNewPackageID holds the string denoting the new_package_id field in the database.
	FieldNewPackageID = "new_package_id"
	// Table holds the table name of the usersubscriptionchange in the database.
	Table = "user_subscription_changes"
)

// Columns holds all SQL columns for usersubscriptionchange fields.
var Columns = []string{
	FieldID,
	FieldEntID,
	FieldAppID,
	FieldUserID,
	FieldUserSubscriptionID,
	FieldOldPackageID,
	FieldNewPackageID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultAppID holds the default value on creation for the "app_id" field.
	DefaultAppID func() uuid.UUID
	// DefaultUserID holds the default value on creation for the "user_id" field.
	DefaultUserID func() uuid.UUID
	// DefaultUserSubscriptionID holds the default value on creation for the "user_subscription_id" field.
	DefaultUserSubscriptionID func() uuid.UUID
	// DefaultOldPackageID holds the default value on creation for the "old_package_id" field.
	DefaultOldPackageID func() uuid.UUID
	// DefaultNewPackageID holds the default value on creation for the "new_package_id" field.
	DefaultNewPackageID func() uuid.UUID
)

// OrderOption defines the ordering options for the UserSubscriptionChange queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByAppID orders the results by the app_id field.
func ByAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByUserSubscriptionID orders the results by the user_subscription_id field.
func ByUserSubscriptionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserSubscriptionID, opts...).ToFunc()
}

// ByOldPackageID orders the results by the old_package_id field.
func ByOldPackageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOldPackageID, opts...).ToFunc()
}

// ByNewPackageID orders the results by the new_package_id field.
func ByNewPackageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNewPackageID, opts...).ToFunc()
}

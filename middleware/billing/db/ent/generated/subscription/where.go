// Code generated by ent, DO NOT EDIT.

package subscription

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldEntID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldAppID, v))
}

// PackageName applies equality check predicate on the "package_name" field. It's identical to PackageNameEQ.
func PackageName(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldPackageName, v))
}

// UsdPrice applies equality check predicate on the "usd_price" field. It's identical to UsdPriceEQ.
func UsdPrice(v decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldUsdPrice, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldDescription, v))
}

// SortOrder applies equality check predicate on the "sort_order" field. It's identical to SortOrderEQ.
func SortOrder(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldSortOrder, v))
}

// PackageType applies equality check predicate on the "package_type" field. It's identical to PackageTypeEQ.
func PackageType(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldPackageType, v))
}

// Credit applies equality check predicate on the "credit" field. It's identical to CreditEQ.
func Credit(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCredit, v))
}

// ResetType applies equality check predicate on the "reset_type" field. It's identical to ResetTypeEQ.
func ResetType(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldResetType, v))
}

// QPSLimit applies equality check predicate on the "qps_limit" field. It's identical to QPSLimitEQ.
func QPSLimit(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldQPSLimit, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldEntID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldAppID, v))
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldAppID))
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldAppID))
}

// PackageNameEQ applies the EQ predicate on the "package_name" field.
func PackageNameEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldPackageName, v))
}

// PackageNameNEQ applies the NEQ predicate on the "package_name" field.
func PackageNameNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldPackageName, v))
}

// PackageNameIn applies the In predicate on the "package_name" field.
func PackageNameIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldPackageName, vs...))
}

// PackageNameNotIn applies the NotIn predicate on the "package_name" field.
func PackageNameNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldPackageName, vs...))
}

// PackageNameGT applies the GT predicate on the "package_name" field.
func PackageNameGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldPackageName, v))
}

// PackageNameGTE applies the GTE predicate on the "package_name" field.
func PackageNameGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldPackageName, v))
}

// PackageNameLT applies the LT predicate on the "package_name" field.
func PackageNameLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldPackageName, v))
}

// PackageNameLTE applies the LTE predicate on the "package_name" field.
func PackageNameLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldPackageName, v))
}

// PackageNameContains applies the Contains predicate on the "package_name" field.
func PackageNameContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldPackageName, v))
}

// PackageNameHasPrefix applies the HasPrefix predicate on the "package_name" field.
func PackageNameHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldPackageName, v))
}

// PackageNameHasSuffix applies the HasSuffix predicate on the "package_name" field.
func PackageNameHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldPackageName, v))
}

// PackageNameIsNil applies the IsNil predicate on the "package_name" field.
func PackageNameIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldPackageName))
}

// PackageNameNotNil applies the NotNil predicate on the "package_name" field.
func PackageNameNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldPackageName))
}

// PackageNameEqualFold applies the EqualFold predicate on the "package_name" field.
func PackageNameEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldPackageName, v))
}

// PackageNameContainsFold applies the ContainsFold predicate on the "package_name" field.
func PackageNameContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldPackageName, v))
}

// UsdPriceEQ applies the EQ predicate on the "usd_price" field.
func UsdPriceEQ(v decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldUsdPrice, v))
}

// UsdPriceNEQ applies the NEQ predicate on the "usd_price" field.
func UsdPriceNEQ(v decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldUsdPrice, v))
}

// UsdPriceIn applies the In predicate on the "usd_price" field.
func UsdPriceIn(vs ...decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldUsdPrice, vs...))
}

// UsdPriceNotIn applies the NotIn predicate on the "usd_price" field.
func UsdPriceNotIn(vs ...decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldUsdPrice, vs...))
}

// UsdPriceGT applies the GT predicate on the "usd_price" field.
func UsdPriceGT(v decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldUsdPrice, v))
}

// UsdPriceGTE applies the GTE predicate on the "usd_price" field.
func UsdPriceGTE(v decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldUsdPrice, v))
}

// UsdPriceLT applies the LT predicate on the "usd_price" field.
func UsdPriceLT(v decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldUsdPrice, v))
}

// UsdPriceLTE applies the LTE predicate on the "usd_price" field.
func UsdPriceLTE(v decimal.Decimal) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldUsdPrice, v))
}

// UsdPriceIsNil applies the IsNil predicate on the "usd_price" field.
func UsdPriceIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldUsdPrice))
}

// UsdPriceNotNil applies the NotNil predicate on the "usd_price" field.
func UsdPriceNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldUsdPrice))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldDescription, v))
}

// SortOrderEQ applies the EQ predicate on the "sort_order" field.
func SortOrderEQ(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldSortOrder, v))
}

// SortOrderNEQ applies the NEQ predicate on the "sort_order" field.
func SortOrderNEQ(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldSortOrder, v))
}

// SortOrderIn applies the In predicate on the "sort_order" field.
func SortOrderIn(vs ...uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldSortOrder, vs...))
}

// SortOrderNotIn applies the NotIn predicate on the "sort_order" field.
func SortOrderNotIn(vs ...uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldSortOrder, vs...))
}

// SortOrderGT applies the GT predicate on the "sort_order" field.
func SortOrderGT(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldSortOrder, v))
}

// SortOrderGTE applies the GTE predicate on the "sort_order" field.
func SortOrderGTE(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldSortOrder, v))
}

// SortOrderLT applies the LT predicate on the "sort_order" field.
func SortOrderLT(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldSortOrder, v))
}

// SortOrderLTE applies the LTE predicate on the "sort_order" field.
func SortOrderLTE(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldSortOrder, v))
}

// SortOrderIsNil applies the IsNil predicate on the "sort_order" field.
func SortOrderIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldSortOrder))
}

// SortOrderNotNil applies the NotNil predicate on the "sort_order" field.
func SortOrderNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldSortOrder))
}

// PackageTypeEQ applies the EQ predicate on the "package_type" field.
func PackageTypeEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldPackageType, v))
}

// PackageTypeNEQ applies the NEQ predicate on the "package_type" field.
func PackageTypeNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldPackageType, v))
}

// PackageTypeIn applies the In predicate on the "package_type" field.
func PackageTypeIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldPackageType, vs...))
}

// PackageTypeNotIn applies the NotIn predicate on the "package_type" field.
func PackageTypeNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldPackageType, vs...))
}

// PackageTypeGT applies the GT predicate on the "package_type" field.
func PackageTypeGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldPackageType, v))
}

// PackageTypeGTE applies the GTE predicate on the "package_type" field.
func PackageTypeGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldPackageType, v))
}

// PackageTypeLT applies the LT predicate on the "package_type" field.
func PackageTypeLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldPackageType, v))
}

// PackageTypeLTE applies the LTE predicate on the "package_type" field.
func PackageTypeLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldPackageType, v))
}

// PackageTypeContains applies the Contains predicate on the "package_type" field.
func PackageTypeContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldPackageType, v))
}

// PackageTypeHasPrefix applies the HasPrefix predicate on the "package_type" field.
func PackageTypeHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldPackageType, v))
}

// PackageTypeHasSuffix applies the HasSuffix predicate on the "package_type" field.
func PackageTypeHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldPackageType, v))
}

// PackageTypeIsNil applies the IsNil predicate on the "package_type" field.
func PackageTypeIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldPackageType))
}

// PackageTypeNotNil applies the NotNil predicate on the "package_type" field.
func PackageTypeNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldPackageType))
}

// PackageTypeEqualFold applies the EqualFold predicate on the "package_type" field.
func PackageTypeEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldPackageType, v))
}

// PackageTypeContainsFold applies the ContainsFold predicate on the "package_type" field.
func PackageTypeContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldPackageType, v))
}

// CreditEQ applies the EQ predicate on the "credit" field.
func CreditEQ(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCredit, v))
}

// CreditNEQ applies the NEQ predicate on the "credit" field.
func CreditNEQ(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldCredit, v))
}

// CreditIn applies the In predicate on the "credit" field.
func CreditIn(vs ...uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldCredit, vs...))
}

// CreditNotIn applies the NotIn predicate on the "credit" field.
func CreditNotIn(vs ...uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldCredit, vs...))
}

// CreditGT applies the GT predicate on the "credit" field.
func CreditGT(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldCredit, v))
}

// CreditGTE applies the GTE predicate on the "credit" field.
func CreditGTE(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldCredit, v))
}

// CreditLT applies the LT predicate on the "credit" field.
func CreditLT(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldCredit, v))
}

// CreditLTE applies the LTE predicate on the "credit" field.
func CreditLTE(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldCredit, v))
}

// CreditIsNil applies the IsNil predicate on the "credit" field.
func CreditIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldCredit))
}

// CreditNotNil applies the NotNil predicate on the "credit" field.
func CreditNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldCredit))
}

// ResetTypeEQ applies the EQ predicate on the "reset_type" field.
func ResetTypeEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldResetType, v))
}

// ResetTypeNEQ applies the NEQ predicate on the "reset_type" field.
func ResetTypeNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldResetType, v))
}

// ResetTypeIn applies the In predicate on the "reset_type" field.
func ResetTypeIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldResetType, vs...))
}

// ResetTypeNotIn applies the NotIn predicate on the "reset_type" field.
func ResetTypeNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldResetType, vs...))
}

// ResetTypeGT applies the GT predicate on the "reset_type" field.
func ResetTypeGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldResetType, v))
}

// ResetTypeGTE applies the GTE predicate on the "reset_type" field.
func ResetTypeGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldResetType, v))
}

// ResetTypeLT applies the LT predicate on the "reset_type" field.
func ResetTypeLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldResetType, v))
}

// ResetTypeLTE applies the LTE predicate on the "reset_type" field.
func ResetTypeLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldResetType, v))
}

// ResetTypeContains applies the Contains predicate on the "reset_type" field.
func ResetTypeContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldResetType, v))
}

// ResetTypeHasPrefix applies the HasPrefix predicate on the "reset_type" field.
func ResetTypeHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldResetType, v))
}

// ResetTypeHasSuffix applies the HasSuffix predicate on the "reset_type" field.
func ResetTypeHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldResetType, v))
}

// ResetTypeIsNil applies the IsNil predicate on the "reset_type" field.
func ResetTypeIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldResetType))
}

// ResetTypeNotNil applies the NotNil predicate on the "reset_type" field.
func ResetTypeNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldResetType))
}

// ResetTypeEqualFold applies the EqualFold predicate on the "reset_type" field.
func ResetTypeEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldResetType, v))
}

// ResetTypeContainsFold applies the ContainsFold predicate on the "reset_type" field.
func ResetTypeContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldResetType, v))
}

// QPSLimitEQ applies the EQ predicate on the "qps_limit" field.
func QPSLimitEQ(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldQPSLimit, v))
}

// QPSLimitNEQ applies the NEQ predicate on the "qps_limit" field.
func QPSLimitNEQ(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldQPSLimit, v))
}

// QPSLimitIn applies the In predicate on the "qps_limit" field.
func QPSLimitIn(vs ...uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldQPSLimit, vs...))
}

// QPSLimitNotIn applies the NotIn predicate on the "qps_limit" field.
func QPSLimitNotIn(vs ...uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldQPSLimit, vs...))
}

// QPSLimitGT applies the GT predicate on the "qps_limit" field.
func QPSLimitGT(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldQPSLimit, v))
}

// QPSLimitGTE applies the GTE predicate on the "qps_limit" field.
func QPSLimitGTE(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldQPSLimit, v))
}

// QPSLimitLT applies the LT predicate on the "qps_limit" field.
func QPSLimitLT(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldQPSLimit, v))
}

// QPSLimitLTE applies the LTE predicate on the "qps_limit" field.
func QPSLimitLTE(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldQPSLimit, v))
}

// QPSLimitIsNil applies the IsNil predicate on the "qps_limit" field.
func QPSLimitIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldQPSLimit))
}

// QPSLimitNotNil applies the NotNil predicate on the "qps_limit" field.
func QPSLimitNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldQPSLimit))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(sql.NotPredicates(p))
}

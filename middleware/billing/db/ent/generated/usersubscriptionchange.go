// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/usersubscriptionchange"
	"github.com/google/uuid"
)

// UserSubscriptionChange is the model entity for the UserSubscriptionChange schema.
type UserSubscriptionChange struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// UserSubscriptionID holds the value of the "user_subscription_id" field.
	UserSubscriptionID uuid.UUID `json:"user_subscription_id,omitempty"`
	// OldPackageID holds the value of the "old_package_id" field.
	OldPackageID uuid.UUID `json:"old_package_id,omitempty"`
	// NewPackageID holds the value of the "new_package_id" field.
	NewPackageID uuid.UUID `json:"new_package_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserSubscriptionChange) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usersubscriptionchange.FieldID:
			values[i] = new(sql.NullInt64)
		case usersubscriptionchange.FieldEntID, usersubscriptionchange.FieldAppID, usersubscriptionchange.FieldUserID, usersubscriptionchange.FieldUserSubscriptionID, usersubscriptionchange.FieldOldPackageID, usersubscriptionchange.FieldNewPackageID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserSubscriptionChange fields.
func (usc *UserSubscriptionChange) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usersubscriptionchange.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			usc.ID = uint32(value.Int64)
		case usersubscriptionchange.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				usc.EntID = *value
			}
		case usersubscriptionchange.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				usc.AppID = *value
			}
		case usersubscriptionchange.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				usc.UserID = *value
			}
		case usersubscriptionchange.FieldUserSubscriptionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_subscription_id", values[i])
			} else if value != nil {
				usc.UserSubscriptionID = *value
			}
		case usersubscriptionchange.FieldOldPackageID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field old_package_id", values[i])
			} else if value != nil {
				usc.OldPackageID = *value
			}
		case usersubscriptionchange.FieldNewPackageID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field new_package_id", values[i])
			} else if value != nil {
				usc.NewPackageID = *value
			}
		default:
			usc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserSubscriptionChange.
// This includes values selected through modifiers, order, etc.
func (usc *UserSubscriptionChange) Value(name string) (ent.Value, error) {
	return usc.selectValues.Get(name)
}

// Update returns a builder for updating this UserSubscriptionChange.
// Note that you need to call UserSubscriptionChange.Unwrap() before calling this method if this UserSubscriptionChange
// was returned from a transaction, and the transaction was committed or rolled back.
func (usc *UserSubscriptionChange) Update() *UserSubscriptionChangeUpdateOne {
	return NewUserSubscriptionChangeClient(usc.config).UpdateOne(usc)
}

// Unwrap unwraps the UserSubscriptionChange entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (usc *UserSubscriptionChange) Unwrap() *UserSubscriptionChange {
	_tx, ok := usc.config.driver.(*txDriver)
	if !ok {
		panic("generated: UserSubscriptionChange is not a transactional entity")
	}
	usc.config.driver = _tx.drv
	return usc
}

// String implements the fmt.Stringer.
func (usc *UserSubscriptionChange) String() string {
	var builder strings.Builder
	builder.WriteString("UserSubscriptionChange(")
	builder.WriteString(fmt.Sprintf("id=%v, ", usc.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", usc.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", usc.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", usc.UserID))
	builder.WriteString(", ")
	builder.WriteString("user_subscription_id=")
	builder.WriteString(fmt.Sprintf("%v", usc.UserSubscriptionID))
	builder.WriteString(", ")
	builder.WriteString("old_package_id=")
	builder.WriteString(fmt.Sprintf("%v", usc.OldPackageID))
	builder.WriteString(", ")
	builder.WriteString("new_package_id=")
	builder.WriteString(fmt.Sprintf("%v", usc.NewPackageID))
	builder.WriteByte(')')
	return builder.String()
}

// UserSubscriptionChanges is a parsable slice of UserSubscriptionChange.
type UserSubscriptionChanges []*UserSubscriptionChange

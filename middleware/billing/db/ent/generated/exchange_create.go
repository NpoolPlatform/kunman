// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/exchange"
	"github.com/google/uuid"
)

// ExchangeCreate is the builder for creating a Exchange entity.
type ExchangeCreate struct {
	config
	mutation *ExchangeMutation
	hooks    []Hook
}

// SetEntID sets the "ent_id" field.
func (ec *ExchangeCreate) SetEntID(u uuid.UUID) *ExchangeCreate {
	ec.mutation.SetEntID(u)
	return ec
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableEntID(u *uuid.UUID) *ExchangeCreate {
	if u != nil {
		ec.SetEntID(*u)
	}
	return ec
}

// SetAppID sets the "app_id" field.
func (ec *ExchangeCreate) SetAppID(u uuid.UUID) *ExchangeCreate {
	ec.mutation.SetAppID(u)
	return ec
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableAppID(u *uuid.UUID) *ExchangeCreate {
	if u != nil {
		ec.SetAppID(*u)
	}
	return ec
}

// SetUsageType sets the "usage_type" field.
func (ec *ExchangeCreate) SetUsageType(s string) *ExchangeCreate {
	ec.mutation.SetUsageType(s)
	return ec
}

// SetNillableUsageType sets the "usage_type" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableUsageType(s *string) *ExchangeCreate {
	if s != nil {
		ec.SetUsageType(*s)
	}
	return ec
}

// SetCredit sets the "credit" field.
func (ec *ExchangeCreate) SetCredit(u uint32) *ExchangeCreate {
	ec.mutation.SetCredit(u)
	return ec
}

// SetNillableCredit sets the "credit" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableCredit(u *uint32) *ExchangeCreate {
	if u != nil {
		ec.SetCredit(*u)
	}
	return ec
}

// SetExchangeThreshold sets the "exchange_threshold" field.
func (ec *ExchangeCreate) SetExchangeThreshold(u uint32) *ExchangeCreate {
	ec.mutation.SetExchangeThreshold(u)
	return ec
}

// SetNillableExchangeThreshold sets the "exchange_threshold" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableExchangeThreshold(u *uint32) *ExchangeCreate {
	if u != nil {
		ec.SetExchangeThreshold(*u)
	}
	return ec
}

// SetPath sets the "path" field.
func (ec *ExchangeCreate) SetPath(s string) *ExchangeCreate {
	ec.mutation.SetPath(s)
	return ec
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillablePath(s *string) *ExchangeCreate {
	if s != nil {
		ec.SetPath(*s)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *ExchangeCreate) SetID(u uint32) *ExchangeCreate {
	ec.mutation.SetID(u)
	return ec
}

// Mutation returns the ExchangeMutation object of the builder.
func (ec *ExchangeCreate) Mutation() *ExchangeMutation {
	return ec.mutation
}

// Save creates the Exchange in the database.
func (ec *ExchangeCreate) Save(ctx context.Context) (*Exchange, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ExchangeCreate) SaveX(ctx context.Context) *Exchange {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *ExchangeCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *ExchangeCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *ExchangeCreate) defaults() {
	if _, ok := ec.mutation.EntID(); !ok {
		v := exchange.DefaultEntID()
		ec.mutation.SetEntID(v)
	}
	if _, ok := ec.mutation.AppID(); !ok {
		v := exchange.DefaultAppID()
		ec.mutation.SetAppID(v)
	}
	if _, ok := ec.mutation.UsageType(); !ok {
		v := exchange.DefaultUsageType
		ec.mutation.SetUsageType(v)
	}
	if _, ok := ec.mutation.Credit(); !ok {
		v := exchange.DefaultCredit
		ec.mutation.SetCredit(v)
	}
	if _, ok := ec.mutation.ExchangeThreshold(); !ok {
		v := exchange.DefaultExchangeThreshold
		ec.mutation.SetExchangeThreshold(v)
	}
	if _, ok := ec.mutation.Path(); !ok {
		v := exchange.DefaultPath
		ec.mutation.SetPath(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *ExchangeCreate) check() error {
	if _, ok := ec.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "Exchange.ent_id"`)}
	}
	return nil
}

func (ec *ExchangeCreate) sqlSave(ctx context.Context) (*Exchange, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *ExchangeCreate) createSpec() (*Exchange, *sqlgraph.CreateSpec) {
	var (
		_node = &Exchange{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(exchange.Table, sqlgraph.NewFieldSpec(exchange.FieldID, field.TypeUint32))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.EntID(); ok {
		_spec.SetField(exchange.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := ec.mutation.AppID(); ok {
		_spec.SetField(exchange.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := ec.mutation.UsageType(); ok {
		_spec.SetField(exchange.FieldUsageType, field.TypeString, value)
		_node.UsageType = value
	}
	if value, ok := ec.mutation.Credit(); ok {
		_spec.SetField(exchange.FieldCredit, field.TypeUint32, value)
		_node.Credit = value
	}
	if value, ok := ec.mutation.ExchangeThreshold(); ok {
		_spec.SetField(exchange.FieldExchangeThreshold, field.TypeUint32, value)
		_node.ExchangeThreshold = value
	}
	if value, ok := ec.mutation.Path(); ok {
		_spec.SetField(exchange.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	return _node, _spec
}

// ExchangeCreateBulk is the builder for creating many Exchange entities in bulk.
type ExchangeCreateBulk struct {
	config
	err      error
	builders []*ExchangeCreate
}

// Save creates the Exchange entities in the database.
func (ecb *ExchangeCreateBulk) Save(ctx context.Context) ([]*Exchange, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Exchange, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExchangeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *ExchangeCreateBulk) SaveX(ctx context.Context) []*Exchange {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *ExchangeCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *ExchangeCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

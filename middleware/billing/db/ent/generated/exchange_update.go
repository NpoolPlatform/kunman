// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/exchange"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ExchangeUpdate is the builder for updating Exchange entities.
type ExchangeUpdate struct {
	config
	hooks    []Hook
	mutation *ExchangeMutation
}

// Where appends a list predicates to the ExchangeUpdate builder.
func (eu *ExchangeUpdate) Where(ps ...predicate.Exchange) *ExchangeUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetEntID sets the "ent_id" field.
func (eu *ExchangeUpdate) SetEntID(u uuid.UUID) *ExchangeUpdate {
	eu.mutation.SetEntID(u)
	return eu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableEntID(u *uuid.UUID) *ExchangeUpdate {
	if u != nil {
		eu.SetEntID(*u)
	}
	return eu
}

// SetAppID sets the "app_id" field.
func (eu *ExchangeUpdate) SetAppID(u uuid.UUID) *ExchangeUpdate {
	eu.mutation.SetAppID(u)
	return eu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableAppID(u *uuid.UUID) *ExchangeUpdate {
	if u != nil {
		eu.SetAppID(*u)
	}
	return eu
}

// ClearAppID clears the value of the "app_id" field.
func (eu *ExchangeUpdate) ClearAppID() *ExchangeUpdate {
	eu.mutation.ClearAppID()
	return eu
}

// SetUsageType sets the "usage_type" field.
func (eu *ExchangeUpdate) SetUsageType(s string) *ExchangeUpdate {
	eu.mutation.SetUsageType(s)
	return eu
}

// SetNillableUsageType sets the "usage_type" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableUsageType(s *string) *ExchangeUpdate {
	if s != nil {
		eu.SetUsageType(*s)
	}
	return eu
}

// ClearUsageType clears the value of the "usage_type" field.
func (eu *ExchangeUpdate) ClearUsageType() *ExchangeUpdate {
	eu.mutation.ClearUsageType()
	return eu
}

// SetCredit sets the "credit" field.
func (eu *ExchangeUpdate) SetCredit(u uint32) *ExchangeUpdate {
	eu.mutation.ResetCredit()
	eu.mutation.SetCredit(u)
	return eu
}

// SetNillableCredit sets the "credit" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableCredit(u *uint32) *ExchangeUpdate {
	if u != nil {
		eu.SetCredit(*u)
	}
	return eu
}

// AddCredit adds u to the "credit" field.
func (eu *ExchangeUpdate) AddCredit(u int32) *ExchangeUpdate {
	eu.mutation.AddCredit(u)
	return eu
}

// ClearCredit clears the value of the "credit" field.
func (eu *ExchangeUpdate) ClearCredit() *ExchangeUpdate {
	eu.mutation.ClearCredit()
	return eu
}

// SetExchangeThreshold sets the "exchange_threshold" field.
func (eu *ExchangeUpdate) SetExchangeThreshold(u uint32) *ExchangeUpdate {
	eu.mutation.ResetExchangeThreshold()
	eu.mutation.SetExchangeThreshold(u)
	return eu
}

// SetNillableExchangeThreshold sets the "exchange_threshold" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableExchangeThreshold(u *uint32) *ExchangeUpdate {
	if u != nil {
		eu.SetExchangeThreshold(*u)
	}
	return eu
}

// AddExchangeThreshold adds u to the "exchange_threshold" field.
func (eu *ExchangeUpdate) AddExchangeThreshold(u int32) *ExchangeUpdate {
	eu.mutation.AddExchangeThreshold(u)
	return eu
}

// ClearExchangeThreshold clears the value of the "exchange_threshold" field.
func (eu *ExchangeUpdate) ClearExchangeThreshold() *ExchangeUpdate {
	eu.mutation.ClearExchangeThreshold()
	return eu
}

// SetPath sets the "path" field.
func (eu *ExchangeUpdate) SetPath(s string) *ExchangeUpdate {
	eu.mutation.SetPath(s)
	return eu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillablePath(s *string) *ExchangeUpdate {
	if s != nil {
		eu.SetPath(*s)
	}
	return eu
}

// ClearPath clears the value of the "path" field.
func (eu *ExchangeUpdate) ClearPath() *ExchangeUpdate {
	eu.mutation.ClearPath()
	return eu
}

// Mutation returns the ExchangeMutation object of the builder.
func (eu *ExchangeUpdate) Mutation() *ExchangeMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExchangeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExchangeUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExchangeUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExchangeUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *ExchangeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(exchange.Table, exchange.Columns, sqlgraph.NewFieldSpec(exchange.FieldID, field.TypeUint32))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.EntID(); ok {
		_spec.SetField(exchange.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := eu.mutation.AppID(); ok {
		_spec.SetField(exchange.FieldAppID, field.TypeUUID, value)
	}
	if eu.mutation.AppIDCleared() {
		_spec.ClearField(exchange.FieldAppID, field.TypeUUID)
	}
	if value, ok := eu.mutation.UsageType(); ok {
		_spec.SetField(exchange.FieldUsageType, field.TypeString, value)
	}
	if eu.mutation.UsageTypeCleared() {
		_spec.ClearField(exchange.FieldUsageType, field.TypeString)
	}
	if value, ok := eu.mutation.Credit(); ok {
		_spec.SetField(exchange.FieldCredit, field.TypeUint32, value)
	}
	if value, ok := eu.mutation.AddedCredit(); ok {
		_spec.AddField(exchange.FieldCredit, field.TypeUint32, value)
	}
	if eu.mutation.CreditCleared() {
		_spec.ClearField(exchange.FieldCredit, field.TypeUint32)
	}
	if value, ok := eu.mutation.ExchangeThreshold(); ok {
		_spec.SetField(exchange.FieldExchangeThreshold, field.TypeUint32, value)
	}
	if value, ok := eu.mutation.AddedExchangeThreshold(); ok {
		_spec.AddField(exchange.FieldExchangeThreshold, field.TypeUint32, value)
	}
	if eu.mutation.ExchangeThresholdCleared() {
		_spec.ClearField(exchange.FieldExchangeThreshold, field.TypeUint32)
	}
	if value, ok := eu.mutation.Path(); ok {
		_spec.SetField(exchange.FieldPath, field.TypeString, value)
	}
	if eu.mutation.PathCleared() {
		_spec.ClearField(exchange.FieldPath, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exchange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// ExchangeUpdateOne is the builder for updating a single Exchange entity.
type ExchangeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExchangeMutation
}

// SetEntID sets the "ent_id" field.
func (euo *ExchangeUpdateOne) SetEntID(u uuid.UUID) *ExchangeUpdateOne {
	euo.mutation.SetEntID(u)
	return euo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableEntID(u *uuid.UUID) *ExchangeUpdateOne {
	if u != nil {
		euo.SetEntID(*u)
	}
	return euo
}

// SetAppID sets the "app_id" field.
func (euo *ExchangeUpdateOne) SetAppID(u uuid.UUID) *ExchangeUpdateOne {
	euo.mutation.SetAppID(u)
	return euo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableAppID(u *uuid.UUID) *ExchangeUpdateOne {
	if u != nil {
		euo.SetAppID(*u)
	}
	return euo
}

// ClearAppID clears the value of the "app_id" field.
func (euo *ExchangeUpdateOne) ClearAppID() *ExchangeUpdateOne {
	euo.mutation.ClearAppID()
	return euo
}

// SetUsageType sets the "usage_type" field.
func (euo *ExchangeUpdateOne) SetUsageType(s string) *ExchangeUpdateOne {
	euo.mutation.SetUsageType(s)
	return euo
}

// SetNillableUsageType sets the "usage_type" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableUsageType(s *string) *ExchangeUpdateOne {
	if s != nil {
		euo.SetUsageType(*s)
	}
	return euo
}

// ClearUsageType clears the value of the "usage_type" field.
func (euo *ExchangeUpdateOne) ClearUsageType() *ExchangeUpdateOne {
	euo.mutation.ClearUsageType()
	return euo
}

// SetCredit sets the "credit" field.
func (euo *ExchangeUpdateOne) SetCredit(u uint32) *ExchangeUpdateOne {
	euo.mutation.ResetCredit()
	euo.mutation.SetCredit(u)
	return euo
}

// SetNillableCredit sets the "credit" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableCredit(u *uint32) *ExchangeUpdateOne {
	if u != nil {
		euo.SetCredit(*u)
	}
	return euo
}

// AddCredit adds u to the "credit" field.
func (euo *ExchangeUpdateOne) AddCredit(u int32) *ExchangeUpdateOne {
	euo.mutation.AddCredit(u)
	return euo
}

// ClearCredit clears the value of the "credit" field.
func (euo *ExchangeUpdateOne) ClearCredit() *ExchangeUpdateOne {
	euo.mutation.ClearCredit()
	return euo
}

// SetExchangeThreshold sets the "exchange_threshold" field.
func (euo *ExchangeUpdateOne) SetExchangeThreshold(u uint32) *ExchangeUpdateOne {
	euo.mutation.ResetExchangeThreshold()
	euo.mutation.SetExchangeThreshold(u)
	return euo
}

// SetNillableExchangeThreshold sets the "exchange_threshold" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableExchangeThreshold(u *uint32) *ExchangeUpdateOne {
	if u != nil {
		euo.SetExchangeThreshold(*u)
	}
	return euo
}

// AddExchangeThreshold adds u to the "exchange_threshold" field.
func (euo *ExchangeUpdateOne) AddExchangeThreshold(u int32) *ExchangeUpdateOne {
	euo.mutation.AddExchangeThreshold(u)
	return euo
}

// ClearExchangeThreshold clears the value of the "exchange_threshold" field.
func (euo *ExchangeUpdateOne) ClearExchangeThreshold() *ExchangeUpdateOne {
	euo.mutation.ClearExchangeThreshold()
	return euo
}

// SetPath sets the "path" field.
func (euo *ExchangeUpdateOne) SetPath(s string) *ExchangeUpdateOne {
	euo.mutation.SetPath(s)
	return euo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillablePath(s *string) *ExchangeUpdateOne {
	if s != nil {
		euo.SetPath(*s)
	}
	return euo
}

// ClearPath clears the value of the "path" field.
func (euo *ExchangeUpdateOne) ClearPath() *ExchangeUpdateOne {
	euo.mutation.ClearPath()
	return euo
}

// Mutation returns the ExchangeMutation object of the builder.
func (euo *ExchangeUpdateOne) Mutation() *ExchangeMutation {
	return euo.mutation
}

// Where appends a list predicates to the ExchangeUpdate builder.
func (euo *ExchangeUpdateOne) Where(ps ...predicate.Exchange) *ExchangeUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExchangeUpdateOne) Select(field string, fields ...string) *ExchangeUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Exchange entity.
func (euo *ExchangeUpdateOne) Save(ctx context.Context) (*Exchange, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExchangeUpdateOne) SaveX(ctx context.Context) *Exchange {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExchangeUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExchangeUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *ExchangeUpdateOne) sqlSave(ctx context.Context) (_node *Exchange, err error) {
	_spec := sqlgraph.NewUpdateSpec(exchange.Table, exchange.Columns, sqlgraph.NewFieldSpec(exchange.FieldID, field.TypeUint32))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Exchange.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exchange.FieldID)
		for _, f := range fields {
			if !exchange.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != exchange.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.EntID(); ok {
		_spec.SetField(exchange.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := euo.mutation.AppID(); ok {
		_spec.SetField(exchange.FieldAppID, field.TypeUUID, value)
	}
	if euo.mutation.AppIDCleared() {
		_spec.ClearField(exchange.FieldAppID, field.TypeUUID)
	}
	if value, ok := euo.mutation.UsageType(); ok {
		_spec.SetField(exchange.FieldUsageType, field.TypeString, value)
	}
	if euo.mutation.UsageTypeCleared() {
		_spec.ClearField(exchange.FieldUsageType, field.TypeString)
	}
	if value, ok := euo.mutation.Credit(); ok {
		_spec.SetField(exchange.FieldCredit, field.TypeUint32, value)
	}
	if value, ok := euo.mutation.AddedCredit(); ok {
		_spec.AddField(exchange.FieldCredit, field.TypeUint32, value)
	}
	if euo.mutation.CreditCleared() {
		_spec.ClearField(exchange.FieldCredit, field.TypeUint32)
	}
	if value, ok := euo.mutation.ExchangeThreshold(); ok {
		_spec.SetField(exchange.FieldExchangeThreshold, field.TypeUint32, value)
	}
	if value, ok := euo.mutation.AddedExchangeThreshold(); ok {
		_spec.AddField(exchange.FieldExchangeThreshold, field.TypeUint32, value)
	}
	if euo.mutation.ExchangeThresholdCleared() {
		_spec.ClearField(exchange.FieldExchangeThreshold, field.TypeUint32)
	}
	if value, ok := euo.mutation.Path(); ok {
		_spec.SetField(exchange.FieldPath, field.TypeString, value)
	}
	if euo.mutation.PathCleared() {
		_spec.ClearField(exchange.FieldPath, field.TypeString)
	}
	_node = &Exchange{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exchange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}

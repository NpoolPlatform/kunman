// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/usersubscriptionchange"
)

// UserSubscriptionChangeDelete is the builder for deleting a UserSubscriptionChange entity.
type UserSubscriptionChangeDelete struct {
	config
	hooks    []Hook
	mutation *UserSubscriptionChangeMutation
}

// Where appends a list predicates to the UserSubscriptionChangeDelete builder.
func (uscd *UserSubscriptionChangeDelete) Where(ps ...predicate.UserSubscriptionChange) *UserSubscriptionChangeDelete {
	uscd.mutation.Where(ps...)
	return uscd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (uscd *UserSubscriptionChangeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, uscd.sqlExec, uscd.mutation, uscd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (uscd *UserSubscriptionChangeDelete) ExecX(ctx context.Context) int {
	n, err := uscd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (uscd *UserSubscriptionChangeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(usersubscriptionchange.Table, sqlgraph.NewFieldSpec(usersubscriptionchange.FieldID, field.TypeUint32))
	if ps := uscd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, uscd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	uscd.mutation.done = true
	return affected, err
}

// UserSubscriptionChangeDeleteOne is the builder for deleting a single UserSubscriptionChange entity.
type UserSubscriptionChangeDeleteOne struct {
	uscd *UserSubscriptionChangeDelete
}

// Where appends a list predicates to the UserSubscriptionChangeDelete builder.
func (uscdo *UserSubscriptionChangeDeleteOne) Where(ps ...predicate.UserSubscriptionChange) *UserSubscriptionChangeDeleteOne {
	uscdo.uscd.mutation.Where(ps...)
	return uscdo
}

// Exec executes the deletion query.
func (uscdo *UserSubscriptionChangeDeleteOne) Exec(ctx context.Context) error {
	n, err := uscdo.uscd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{usersubscriptionchange.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (uscdo *UserSubscriptionChangeDeleteOne) ExecX(ctx context.Context) {
	if err := uscdo.Exec(ctx); err != nil {
		panic(err)
	}
}

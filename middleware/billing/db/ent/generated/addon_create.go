// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/addon"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AddonCreate is the builder for creating a Addon entity.
type AddonCreate struct {
	config
	mutation *AddonMutation
	hooks    []Hook
}

// SetEntID sets the "ent_id" field.
func (ac *AddonCreate) SetEntID(u uuid.UUID) *AddonCreate {
	ac.mutation.SetEntID(u)
	return ac
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ac *AddonCreate) SetNillableEntID(u *uuid.UUID) *AddonCreate {
	if u != nil {
		ac.SetEntID(*u)
	}
	return ac
}

// SetAppID sets the "app_id" field.
func (ac *AddonCreate) SetAppID(u uuid.UUID) *AddonCreate {
	ac.mutation.SetAppID(u)
	return ac
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ac *AddonCreate) SetNillableAppID(u *uuid.UUID) *AddonCreate {
	if u != nil {
		ac.SetAppID(*u)
	}
	return ac
}

// SetUsdPrice sets the "usd_price" field.
func (ac *AddonCreate) SetUsdPrice(d decimal.Decimal) *AddonCreate {
	ac.mutation.SetUsdPrice(d)
	return ac
}

// SetNillableUsdPrice sets the "usd_price" field if the given value is not nil.
func (ac *AddonCreate) SetNillableUsdPrice(d *decimal.Decimal) *AddonCreate {
	if d != nil {
		ac.SetUsdPrice(*d)
	}
	return ac
}

// SetCredit sets the "credit" field.
func (ac *AddonCreate) SetCredit(u uint32) *AddonCreate {
	ac.mutation.SetCredit(u)
	return ac
}

// SetNillableCredit sets the "credit" field if the given value is not nil.
func (ac *AddonCreate) SetNillableCredit(u *uint32) *AddonCreate {
	if u != nil {
		ac.SetCredit(*u)
	}
	return ac
}

// SetSortOrder sets the "sort_order" field.
func (ac *AddonCreate) SetSortOrder(u uint32) *AddonCreate {
	ac.mutation.SetSortOrder(u)
	return ac
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (ac *AddonCreate) SetNillableSortOrder(u *uint32) *AddonCreate {
	if u != nil {
		ac.SetSortOrder(*u)
	}
	return ac
}

// SetEnabled sets the "enabled" field.
func (ac *AddonCreate) SetEnabled(b bool) *AddonCreate {
	ac.mutation.SetEnabled(b)
	return ac
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (ac *AddonCreate) SetNillableEnabled(b *bool) *AddonCreate {
	if b != nil {
		ac.SetEnabled(*b)
	}
	return ac
}

// SetDescription sets the "description" field.
func (ac *AddonCreate) SetDescription(s string) *AddonCreate {
	ac.mutation.SetDescription(s)
	return ac
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ac *AddonCreate) SetNillableDescription(s *string) *AddonCreate {
	if s != nil {
		ac.SetDescription(*s)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AddonCreate) SetID(u uint32) *AddonCreate {
	ac.mutation.SetID(u)
	return ac
}

// Mutation returns the AddonMutation object of the builder.
func (ac *AddonCreate) Mutation() *AddonMutation {
	return ac.mutation
}

// Save creates the Addon in the database.
func (ac *AddonCreate) Save(ctx context.Context) (*Addon, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AddonCreate) SaveX(ctx context.Context) *Addon {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AddonCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AddonCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AddonCreate) defaults() {
	if _, ok := ac.mutation.EntID(); !ok {
		v := addon.DefaultEntID()
		ac.mutation.SetEntID(v)
	}
	if _, ok := ac.mutation.AppID(); !ok {
		v := addon.DefaultAppID()
		ac.mutation.SetAppID(v)
	}
	if _, ok := ac.mutation.UsdPrice(); !ok {
		v := addon.DefaultUsdPrice
		ac.mutation.SetUsdPrice(v)
	}
	if _, ok := ac.mutation.Credit(); !ok {
		v := addon.DefaultCredit
		ac.mutation.SetCredit(v)
	}
	if _, ok := ac.mutation.SortOrder(); !ok {
		v := addon.DefaultSortOrder
		ac.mutation.SetSortOrder(v)
	}
	if _, ok := ac.mutation.Enabled(); !ok {
		v := addon.DefaultEnabled
		ac.mutation.SetEnabled(v)
	}
	if _, ok := ac.mutation.Description(); !ok {
		v := addon.DefaultDescription
		ac.mutation.SetDescription(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AddonCreate) check() error {
	if _, ok := ac.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "Addon.ent_id"`)}
	}
	return nil
}

func (ac *AddonCreate) sqlSave(ctx context.Context) (*Addon, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AddonCreate) createSpec() (*Addon, *sqlgraph.CreateSpec) {
	var (
		_node = &Addon{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(addon.Table, sqlgraph.NewFieldSpec(addon.FieldID, field.TypeUint32))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.EntID(); ok {
		_spec.SetField(addon.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := ac.mutation.AppID(); ok {
		_spec.SetField(addon.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := ac.mutation.UsdPrice(); ok {
		_spec.SetField(addon.FieldUsdPrice, field.TypeOther, value)
		_node.UsdPrice = value
	}
	if value, ok := ac.mutation.Credit(); ok {
		_spec.SetField(addon.FieldCredit, field.TypeUint32, value)
		_node.Credit = value
	}
	if value, ok := ac.mutation.SortOrder(); ok {
		_spec.SetField(addon.FieldSortOrder, field.TypeUint32, value)
		_node.SortOrder = value
	}
	if value, ok := ac.mutation.Enabled(); ok {
		_spec.SetField(addon.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if value, ok := ac.mutation.Description(); ok {
		_spec.SetField(addon.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	return _node, _spec
}

// AddonCreateBulk is the builder for creating many Addon entities in bulk.
type AddonCreateBulk struct {
	config
	err      error
	builders []*AddonCreate
}

// Save creates the Addon entities in the database.
func (acb *AddonCreateBulk) Save(ctx context.Context) ([]*Addon, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Addon, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AddonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AddonCreateBulk) SaveX(ctx context.Context) []*Addon {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AddonCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AddonCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

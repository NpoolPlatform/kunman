// Code generated by ent, DO NOT EDIT.

package usersubscription

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the usersubscription type in the database.
	Label = "user_subscription"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldPackageID holds the string denoting the package_id field in the database.
	FieldPackageID = "package_id"
	// FieldStartAt holds the string denoting the start_at field in the database.
	FieldStartAt = "start_at"
	// FieldEndAt holds the string denoting the end_at field in the database.
	FieldEndAt = "end_at"
	// FieldUsageState holds the string denoting the usage_state field in the database.
	FieldUsageState = "usage_state"
	// FieldSubscriptionCredit holds the string denoting the subscription_credit field in the database.
	FieldSubscriptionCredit = "subscription_credit"
	// FieldAddonCredit holds the string denoting the addon_credit field in the database.
	FieldAddonCredit = "addon_credit"
	// Table holds the table name of the usersubscription in the database.
	Table = "user_subscriptions"
)

// Columns holds all SQL columns for usersubscription fields.
var Columns = []string{
	FieldID,
	FieldEntID,
	FieldAppID,
	FieldUserID,
	FieldPackageID,
	FieldStartAt,
	FieldEndAt,
	FieldUsageState,
	FieldSubscriptionCredit,
	FieldAddonCredit,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultAppID holds the default value on creation for the "app_id" field.
	DefaultAppID func() uuid.UUID
	// DefaultUserID holds the default value on creation for the "user_id" field.
	DefaultUserID func() uuid.UUID
	// DefaultPackageID holds the default value on creation for the "package_id" field.
	DefaultPackageID func() uuid.UUID
	// DefaultStartAt holds the default value on creation for the "start_at" field.
	DefaultStartAt uint32
	// DefaultEndAt holds the default value on creation for the "end_at" field.
	DefaultEndAt uint32
	// DefaultUsageState holds the default value on creation for the "usage_state" field.
	DefaultUsageState string
	// DefaultSubscriptionCredit holds the default value on creation for the "subscription_credit" field.
	DefaultSubscriptionCredit uint32
	// DefaultAddonCredit holds the default value on creation for the "addon_credit" field.
	DefaultAddonCredit uint32
)

// OrderOption defines the ordering options for the UserSubscription queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByAppID orders the results by the app_id field.
func ByAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByPackageID orders the results by the package_id field.
func ByPackageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPackageID, opts...).ToFunc()
}

// ByStartAt orders the results by the start_at field.
func ByStartAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartAt, opts...).ToFunc()
}

// ByEndAt orders the results by the end_at field.
func ByEndAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndAt, opts...).ToFunc()
}

// ByUsageState orders the results by the usage_state field.
func ByUsageState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsageState, opts...).ToFunc()
}

// BySubscriptionCredit orders the results by the subscription_credit field.
func BySubscriptionCredit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscriptionCredit, opts...).ToFunc()
}

// ByAddonCredit orders the results by the addon_credit field.
func ByAddonCredit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddonCredit, opts...).ToFunc()
}

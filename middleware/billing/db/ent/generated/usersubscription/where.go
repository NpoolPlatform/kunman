// Code generated by ent, DO NOT EDIT.

package usersubscription

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldEntID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldAppID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldUserID, v))
}

// PackageID applies equality check predicate on the "package_id" field. It's identical to PackageIDEQ.
func PackageID(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldPackageID, v))
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldStartAt, v))
}

// EndAt applies equality check predicate on the "end_at" field. It's identical to EndAtEQ.
func EndAt(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldEndAt, v))
}

// UsageState applies equality check predicate on the "usage_state" field. It's identical to UsageStateEQ.
func UsageState(v string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldUsageState, v))
}

// SubscriptionCredit applies equality check predicate on the "subscription_credit" field. It's identical to SubscriptionCreditEQ.
func SubscriptionCredit(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldSubscriptionCredit, v))
}

// AddonCredit applies equality check predicate on the "addon_credit" field. It's identical to AddonCreditEQ.
func AddonCredit(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldAddonCredit, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLTE(FieldEntID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLTE(FieldAppID, v))
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldIsNull(FieldAppID))
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNotNull(FieldAppID))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLTE(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNotNull(FieldUserID))
}

// PackageIDEQ applies the EQ predicate on the "package_id" field.
func PackageIDEQ(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldPackageID, v))
}

// PackageIDNEQ applies the NEQ predicate on the "package_id" field.
func PackageIDNEQ(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNEQ(FieldPackageID, v))
}

// PackageIDIn applies the In predicate on the "package_id" field.
func PackageIDIn(vs ...uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldIn(FieldPackageID, vs...))
}

// PackageIDNotIn applies the NotIn predicate on the "package_id" field.
func PackageIDNotIn(vs ...uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNotIn(FieldPackageID, vs...))
}

// PackageIDGT applies the GT predicate on the "package_id" field.
func PackageIDGT(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGT(FieldPackageID, v))
}

// PackageIDGTE applies the GTE predicate on the "package_id" field.
func PackageIDGTE(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGTE(FieldPackageID, v))
}

// PackageIDLT applies the LT predicate on the "package_id" field.
func PackageIDLT(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLT(FieldPackageID, v))
}

// PackageIDLTE applies the LTE predicate on the "package_id" field.
func PackageIDLTE(v uuid.UUID) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLTE(FieldPackageID, v))
}

// PackageIDIsNil applies the IsNil predicate on the "package_id" field.
func PackageIDIsNil() predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldIsNull(FieldPackageID))
}

// PackageIDNotNil applies the NotNil predicate on the "package_id" field.
func PackageIDNotNil() predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNotNull(FieldPackageID))
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldStartAt, v))
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNEQ(FieldStartAt, v))
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldIn(FieldStartAt, vs...))
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNotIn(FieldStartAt, vs...))
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGT(FieldStartAt, v))
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGTE(FieldStartAt, v))
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLT(FieldStartAt, v))
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLTE(FieldStartAt, v))
}

// StartAtIsNil applies the IsNil predicate on the "start_at" field.
func StartAtIsNil() predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldIsNull(FieldStartAt))
}

// StartAtNotNil applies the NotNil predicate on the "start_at" field.
func StartAtNotNil() predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNotNull(FieldStartAt))
}

// EndAtEQ applies the EQ predicate on the "end_at" field.
func EndAtEQ(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldEndAt, v))
}

// EndAtNEQ applies the NEQ predicate on the "end_at" field.
func EndAtNEQ(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNEQ(FieldEndAt, v))
}

// EndAtIn applies the In predicate on the "end_at" field.
func EndAtIn(vs ...uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldIn(FieldEndAt, vs...))
}

// EndAtNotIn applies the NotIn predicate on the "end_at" field.
func EndAtNotIn(vs ...uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNotIn(FieldEndAt, vs...))
}

// EndAtGT applies the GT predicate on the "end_at" field.
func EndAtGT(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGT(FieldEndAt, v))
}

// EndAtGTE applies the GTE predicate on the "end_at" field.
func EndAtGTE(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGTE(FieldEndAt, v))
}

// EndAtLT applies the LT predicate on the "end_at" field.
func EndAtLT(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLT(FieldEndAt, v))
}

// EndAtLTE applies the LTE predicate on the "end_at" field.
func EndAtLTE(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLTE(FieldEndAt, v))
}

// EndAtIsNil applies the IsNil predicate on the "end_at" field.
func EndAtIsNil() predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldIsNull(FieldEndAt))
}

// EndAtNotNil applies the NotNil predicate on the "end_at" field.
func EndAtNotNil() predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNotNull(FieldEndAt))
}

// UsageStateEQ applies the EQ predicate on the "usage_state" field.
func UsageStateEQ(v string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldUsageState, v))
}

// UsageStateNEQ applies the NEQ predicate on the "usage_state" field.
func UsageStateNEQ(v string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNEQ(FieldUsageState, v))
}

// UsageStateIn applies the In predicate on the "usage_state" field.
func UsageStateIn(vs ...string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldIn(FieldUsageState, vs...))
}

// UsageStateNotIn applies the NotIn predicate on the "usage_state" field.
func UsageStateNotIn(vs ...string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNotIn(FieldUsageState, vs...))
}

// UsageStateGT applies the GT predicate on the "usage_state" field.
func UsageStateGT(v string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGT(FieldUsageState, v))
}

// UsageStateGTE applies the GTE predicate on the "usage_state" field.
func UsageStateGTE(v string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGTE(FieldUsageState, v))
}

// UsageStateLT applies the LT predicate on the "usage_state" field.
func UsageStateLT(v string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLT(FieldUsageState, v))
}

// UsageStateLTE applies the LTE predicate on the "usage_state" field.
func UsageStateLTE(v string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLTE(FieldUsageState, v))
}

// UsageStateContains applies the Contains predicate on the "usage_state" field.
func UsageStateContains(v string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldContains(FieldUsageState, v))
}

// UsageStateHasPrefix applies the HasPrefix predicate on the "usage_state" field.
func UsageStateHasPrefix(v string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldHasPrefix(FieldUsageState, v))
}

// UsageStateHasSuffix applies the HasSuffix predicate on the "usage_state" field.
func UsageStateHasSuffix(v string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldHasSuffix(FieldUsageState, v))
}

// UsageStateIsNil applies the IsNil predicate on the "usage_state" field.
func UsageStateIsNil() predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldIsNull(FieldUsageState))
}

// UsageStateNotNil applies the NotNil predicate on the "usage_state" field.
func UsageStateNotNil() predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNotNull(FieldUsageState))
}

// UsageStateEqualFold applies the EqualFold predicate on the "usage_state" field.
func UsageStateEqualFold(v string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEqualFold(FieldUsageState, v))
}

// UsageStateContainsFold applies the ContainsFold predicate on the "usage_state" field.
func UsageStateContainsFold(v string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldContainsFold(FieldUsageState, v))
}

// SubscriptionCreditEQ applies the EQ predicate on the "subscription_credit" field.
func SubscriptionCreditEQ(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldSubscriptionCredit, v))
}

// SubscriptionCreditNEQ applies the NEQ predicate on the "subscription_credit" field.
func SubscriptionCreditNEQ(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNEQ(FieldSubscriptionCredit, v))
}

// SubscriptionCreditIn applies the In predicate on the "subscription_credit" field.
func SubscriptionCreditIn(vs ...uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldIn(FieldSubscriptionCredit, vs...))
}

// SubscriptionCreditNotIn applies the NotIn predicate on the "subscription_credit" field.
func SubscriptionCreditNotIn(vs ...uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNotIn(FieldSubscriptionCredit, vs...))
}

// SubscriptionCreditGT applies the GT predicate on the "subscription_credit" field.
func SubscriptionCreditGT(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGT(FieldSubscriptionCredit, v))
}

// SubscriptionCreditGTE applies the GTE predicate on the "subscription_credit" field.
func SubscriptionCreditGTE(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGTE(FieldSubscriptionCredit, v))
}

// SubscriptionCreditLT applies the LT predicate on the "subscription_credit" field.
func SubscriptionCreditLT(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLT(FieldSubscriptionCredit, v))
}

// SubscriptionCreditLTE applies the LTE predicate on the "subscription_credit" field.
func SubscriptionCreditLTE(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLTE(FieldSubscriptionCredit, v))
}

// SubscriptionCreditIsNil applies the IsNil predicate on the "subscription_credit" field.
func SubscriptionCreditIsNil() predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldIsNull(FieldSubscriptionCredit))
}

// SubscriptionCreditNotNil applies the NotNil predicate on the "subscription_credit" field.
func SubscriptionCreditNotNil() predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNotNull(FieldSubscriptionCredit))
}

// AddonCreditEQ applies the EQ predicate on the "addon_credit" field.
func AddonCreditEQ(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldAddonCredit, v))
}

// AddonCreditNEQ applies the NEQ predicate on the "addon_credit" field.
func AddonCreditNEQ(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNEQ(FieldAddonCredit, v))
}

// AddonCreditIn applies the In predicate on the "addon_credit" field.
func AddonCreditIn(vs ...uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldIn(FieldAddonCredit, vs...))
}

// AddonCreditNotIn applies the NotIn predicate on the "addon_credit" field.
func AddonCreditNotIn(vs ...uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNotIn(FieldAddonCredit, vs...))
}

// AddonCreditGT applies the GT predicate on the "addon_credit" field.
func AddonCreditGT(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGT(FieldAddonCredit, v))
}

// AddonCreditGTE applies the GTE predicate on the "addon_credit" field.
func AddonCreditGTE(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGTE(FieldAddonCredit, v))
}

// AddonCreditLT applies the LT predicate on the "addon_credit" field.
func AddonCreditLT(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLT(FieldAddonCredit, v))
}

// AddonCreditLTE applies the LTE predicate on the "addon_credit" field.
func AddonCreditLTE(v uint32) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLTE(FieldAddonCredit, v))
}

// AddonCreditIsNil applies the IsNil predicate on the "addon_credit" field.
func AddonCreditIsNil() predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldIsNull(FieldAddonCredit))
}

// AddonCreditNotNil applies the NotNil predicate on the "addon_credit" field.
func AddonCreditNotNil() predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNotNull(FieldAddonCredit))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserSubscription) predicate.UserSubscription {
	return predicate.UserSubscription(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserSubscription) predicate.UserSubscription {
	return predicate.UserSubscription(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserSubscription) predicate.UserSubscription {
	return predicate.UserSubscription(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package usercreditrecord

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldEQ(FieldEntID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldEQ(FieldAppID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldEQ(FieldUserID, v))
}

// OperationType applies equality check predicate on the "operation_type" field. It's identical to OperationTypeEQ.
func OperationType(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldEQ(FieldOperationType, v))
}

// CreditsChange applies equality check predicate on the "credits_change" field. It's identical to CreditsChangeEQ.
func CreditsChange(v int32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldEQ(FieldCreditsChange, v))
}

// Extra applies equality check predicate on the "extra" field. It's identical to ExtraEQ.
func Extra(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldEQ(FieldExtra, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldLTE(FieldEntID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldLTE(FieldAppID, v))
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldIsNull(FieldAppID))
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldNotNull(FieldAppID))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldLTE(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldNotNull(FieldUserID))
}

// OperationTypeEQ applies the EQ predicate on the "operation_type" field.
func OperationTypeEQ(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldEQ(FieldOperationType, v))
}

// OperationTypeNEQ applies the NEQ predicate on the "operation_type" field.
func OperationTypeNEQ(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldNEQ(FieldOperationType, v))
}

// OperationTypeIn applies the In predicate on the "operation_type" field.
func OperationTypeIn(vs ...string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldIn(FieldOperationType, vs...))
}

// OperationTypeNotIn applies the NotIn predicate on the "operation_type" field.
func OperationTypeNotIn(vs ...string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldNotIn(FieldOperationType, vs...))
}

// OperationTypeGT applies the GT predicate on the "operation_type" field.
func OperationTypeGT(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldGT(FieldOperationType, v))
}

// OperationTypeGTE applies the GTE predicate on the "operation_type" field.
func OperationTypeGTE(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldGTE(FieldOperationType, v))
}

// OperationTypeLT applies the LT predicate on the "operation_type" field.
func OperationTypeLT(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldLT(FieldOperationType, v))
}

// OperationTypeLTE applies the LTE predicate on the "operation_type" field.
func OperationTypeLTE(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldLTE(FieldOperationType, v))
}

// OperationTypeContains applies the Contains predicate on the "operation_type" field.
func OperationTypeContains(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldContains(FieldOperationType, v))
}

// OperationTypeHasPrefix applies the HasPrefix predicate on the "operation_type" field.
func OperationTypeHasPrefix(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldHasPrefix(FieldOperationType, v))
}

// OperationTypeHasSuffix applies the HasSuffix predicate on the "operation_type" field.
func OperationTypeHasSuffix(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldHasSuffix(FieldOperationType, v))
}

// OperationTypeIsNil applies the IsNil predicate on the "operation_type" field.
func OperationTypeIsNil() predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldIsNull(FieldOperationType))
}

// OperationTypeNotNil applies the NotNil predicate on the "operation_type" field.
func OperationTypeNotNil() predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldNotNull(FieldOperationType))
}

// OperationTypeEqualFold applies the EqualFold predicate on the "operation_type" field.
func OperationTypeEqualFold(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldEqualFold(FieldOperationType, v))
}

// OperationTypeContainsFold applies the ContainsFold predicate on the "operation_type" field.
func OperationTypeContainsFold(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldContainsFold(FieldOperationType, v))
}

// CreditsChangeEQ applies the EQ predicate on the "credits_change" field.
func CreditsChangeEQ(v int32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldEQ(FieldCreditsChange, v))
}

// CreditsChangeNEQ applies the NEQ predicate on the "credits_change" field.
func CreditsChangeNEQ(v int32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldNEQ(FieldCreditsChange, v))
}

// CreditsChangeIn applies the In predicate on the "credits_change" field.
func CreditsChangeIn(vs ...int32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldIn(FieldCreditsChange, vs...))
}

// CreditsChangeNotIn applies the NotIn predicate on the "credits_change" field.
func CreditsChangeNotIn(vs ...int32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldNotIn(FieldCreditsChange, vs...))
}

// CreditsChangeGT applies the GT predicate on the "credits_change" field.
func CreditsChangeGT(v int32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldGT(FieldCreditsChange, v))
}

// CreditsChangeGTE applies the GTE predicate on the "credits_change" field.
func CreditsChangeGTE(v int32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldGTE(FieldCreditsChange, v))
}

// CreditsChangeLT applies the LT predicate on the "credits_change" field.
func CreditsChangeLT(v int32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldLT(FieldCreditsChange, v))
}

// CreditsChangeLTE applies the LTE predicate on the "credits_change" field.
func CreditsChangeLTE(v int32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldLTE(FieldCreditsChange, v))
}

// CreditsChangeIsNil applies the IsNil predicate on the "credits_change" field.
func CreditsChangeIsNil() predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldIsNull(FieldCreditsChange))
}

// CreditsChangeNotNil applies the NotNil predicate on the "credits_change" field.
func CreditsChangeNotNil() predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldNotNull(FieldCreditsChange))
}

// ExtraEQ applies the EQ predicate on the "extra" field.
func ExtraEQ(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldEQ(FieldExtra, v))
}

// ExtraNEQ applies the NEQ predicate on the "extra" field.
func ExtraNEQ(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldNEQ(FieldExtra, v))
}

// ExtraIn applies the In predicate on the "extra" field.
func ExtraIn(vs ...string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldIn(FieldExtra, vs...))
}

// ExtraNotIn applies the NotIn predicate on the "extra" field.
func ExtraNotIn(vs ...string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldNotIn(FieldExtra, vs...))
}

// ExtraGT applies the GT predicate on the "extra" field.
func ExtraGT(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldGT(FieldExtra, v))
}

// ExtraGTE applies the GTE predicate on the "extra" field.
func ExtraGTE(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldGTE(FieldExtra, v))
}

// ExtraLT applies the LT predicate on the "extra" field.
func ExtraLT(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldLT(FieldExtra, v))
}

// ExtraLTE applies the LTE predicate on the "extra" field.
func ExtraLTE(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldLTE(FieldExtra, v))
}

// ExtraContains applies the Contains predicate on the "extra" field.
func ExtraContains(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldContains(FieldExtra, v))
}

// ExtraHasPrefix applies the HasPrefix predicate on the "extra" field.
func ExtraHasPrefix(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldHasPrefix(FieldExtra, v))
}

// ExtraHasSuffix applies the HasSuffix predicate on the "extra" field.
func ExtraHasSuffix(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldHasSuffix(FieldExtra, v))
}

// ExtraIsNil applies the IsNil predicate on the "extra" field.
func ExtraIsNil() predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldIsNull(FieldExtra))
}

// ExtraNotNil applies the NotNil predicate on the "extra" field.
func ExtraNotNil() predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldNotNull(FieldExtra))
}

// ExtraEqualFold applies the EqualFold predicate on the "extra" field.
func ExtraEqualFold(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldEqualFold(FieldExtra, v))
}

// ExtraContainsFold applies the ContainsFold predicate on the "extra" field.
func ExtraContainsFold(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.FieldContainsFold(FieldExtra, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserCreditRecord) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserCreditRecord) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserCreditRecord) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(sql.NotPredicates(p))
}

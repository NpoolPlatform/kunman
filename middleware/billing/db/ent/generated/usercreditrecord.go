// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/usercreditrecord"
	"github.com/google/uuid"
)

// UserCreditRecord is the model entity for the UserCreditRecord schema.
type UserCreditRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// OperationType holds the value of the "operation_type" field.
	OperationType string `json:"operation_type,omitempty"`
	// CreditsChange holds the value of the "credits_change" field.
	CreditsChange int32 `json:"credits_change,omitempty"`
	// Extra holds the value of the "extra" field.
	Extra        string `json:"extra,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserCreditRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usercreditrecord.FieldID, usercreditrecord.FieldCreditsChange:
			values[i] = new(sql.NullInt64)
		case usercreditrecord.FieldOperationType, usercreditrecord.FieldExtra:
			values[i] = new(sql.NullString)
		case usercreditrecord.FieldEntID, usercreditrecord.FieldAppID, usercreditrecord.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserCreditRecord fields.
func (ucr *UserCreditRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usercreditrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ucr.ID = uint32(value.Int64)
		case usercreditrecord.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				ucr.EntID = *value
			}
		case usercreditrecord.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				ucr.AppID = *value
			}
		case usercreditrecord.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				ucr.UserID = *value
			}
		case usercreditrecord.FieldOperationType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operation_type", values[i])
			} else if value.Valid {
				ucr.OperationType = value.String
			}
		case usercreditrecord.FieldCreditsChange:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field credits_change", values[i])
			} else if value.Valid {
				ucr.CreditsChange = int32(value.Int64)
			}
		case usercreditrecord.FieldExtra:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extra", values[i])
			} else if value.Valid {
				ucr.Extra = value.String
			}
		default:
			ucr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserCreditRecord.
// This includes values selected through modifiers, order, etc.
func (ucr *UserCreditRecord) Value(name string) (ent.Value, error) {
	return ucr.selectValues.Get(name)
}

// Update returns a builder for updating this UserCreditRecord.
// Note that you need to call UserCreditRecord.Unwrap() before calling this method if this UserCreditRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (ucr *UserCreditRecord) Update() *UserCreditRecordUpdateOne {
	return NewUserCreditRecordClient(ucr.config).UpdateOne(ucr)
}

// Unwrap unwraps the UserCreditRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ucr *UserCreditRecord) Unwrap() *UserCreditRecord {
	_tx, ok := ucr.config.driver.(*txDriver)
	if !ok {
		panic("generated: UserCreditRecord is not a transactional entity")
	}
	ucr.config.driver = _tx.drv
	return ucr
}

// String implements the fmt.Stringer.
func (ucr *UserCreditRecord) String() string {
	var builder strings.Builder
	builder.WriteString("UserCreditRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ucr.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", ucr.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", ucr.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ucr.UserID))
	builder.WriteString(", ")
	builder.WriteString("operation_type=")
	builder.WriteString(ucr.OperationType)
	builder.WriteString(", ")
	builder.WriteString("credits_change=")
	builder.WriteString(fmt.Sprintf("%v", ucr.CreditsChange))
	builder.WriteString(", ")
	builder.WriteString("extra=")
	builder.WriteString(ucr.Extra)
	builder.WriteByte(')')
	return builder.String()
}

// UserCreditRecords is a parsable slice of UserCreditRecord.
type UserCreditRecords []*UserCreditRecord

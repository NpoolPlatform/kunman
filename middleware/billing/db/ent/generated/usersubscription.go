// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/usersubscription"
	"github.com/google/uuid"
)

// UserSubscription is the model entity for the UserSubscription schema.
type UserSubscription struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// PackageID holds the value of the "package_id" field.
	PackageID uuid.UUID `json:"package_id,omitempty"`
	// StartAt holds the value of the "start_at" field.
	StartAt uint32 `json:"start_at,omitempty"`
	// EndAt holds the value of the "end_at" field.
	EndAt uint32 `json:"end_at,omitempty"`
	// UsageState holds the value of the "usage_state" field.
	UsageState string `json:"usage_state,omitempty"`
	// SubscriptionCredit holds the value of the "subscription_credit" field.
	SubscriptionCredit uint32 `json:"subscription_credit,omitempty"`
	// AddonCredit holds the value of the "addon_credit" field.
	AddonCredit  uint32 `json:"addon_credit,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserSubscription) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usersubscription.FieldID, usersubscription.FieldStartAt, usersubscription.FieldEndAt, usersubscription.FieldSubscriptionCredit, usersubscription.FieldAddonCredit:
			values[i] = new(sql.NullInt64)
		case usersubscription.FieldUsageState:
			values[i] = new(sql.NullString)
		case usersubscription.FieldEntID, usersubscription.FieldAppID, usersubscription.FieldUserID, usersubscription.FieldPackageID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserSubscription fields.
func (us *UserSubscription) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usersubscription.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			us.ID = uint32(value.Int64)
		case usersubscription.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				us.EntID = *value
			}
		case usersubscription.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				us.AppID = *value
			}
		case usersubscription.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				us.UserID = *value
			}
		case usersubscription.FieldPackageID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field package_id", values[i])
			} else if value != nil {
				us.PackageID = *value
			}
		case usersubscription.FieldStartAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				us.StartAt = uint32(value.Int64)
			}
		case usersubscription.FieldEndAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				us.EndAt = uint32(value.Int64)
			}
		case usersubscription.FieldUsageState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field usage_state", values[i])
			} else if value.Valid {
				us.UsageState = value.String
			}
		case usersubscription.FieldSubscriptionCredit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_credit", values[i])
			} else if value.Valid {
				us.SubscriptionCredit = uint32(value.Int64)
			}
		case usersubscription.FieldAddonCredit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field addon_credit", values[i])
			} else if value.Valid {
				us.AddonCredit = uint32(value.Int64)
			}
		default:
			us.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserSubscription.
// This includes values selected through modifiers, order, etc.
func (us *UserSubscription) Value(name string) (ent.Value, error) {
	return us.selectValues.Get(name)
}

// Update returns a builder for updating this UserSubscription.
// Note that you need to call UserSubscription.Unwrap() before calling this method if this UserSubscription
// was returned from a transaction, and the transaction was committed or rolled back.
func (us *UserSubscription) Update() *UserSubscriptionUpdateOne {
	return NewUserSubscriptionClient(us.config).UpdateOne(us)
}

// Unwrap unwraps the UserSubscription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (us *UserSubscription) Unwrap() *UserSubscription {
	_tx, ok := us.config.driver.(*txDriver)
	if !ok {
		panic("generated: UserSubscription is not a transactional entity")
	}
	us.config.driver = _tx.drv
	return us
}

// String implements the fmt.Stringer.
func (us *UserSubscription) String() string {
	var builder strings.Builder
	builder.WriteString("UserSubscription(")
	builder.WriteString(fmt.Sprintf("id=%v, ", us.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", us.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", us.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", us.UserID))
	builder.WriteString(", ")
	builder.WriteString("package_id=")
	builder.WriteString(fmt.Sprintf("%v", us.PackageID))
	builder.WriteString(", ")
	builder.WriteString("start_at=")
	builder.WriteString(fmt.Sprintf("%v", us.StartAt))
	builder.WriteString(", ")
	builder.WriteString("end_at=")
	builder.WriteString(fmt.Sprintf("%v", us.EndAt))
	builder.WriteString(", ")
	builder.WriteString("usage_state=")
	builder.WriteString(us.UsageState)
	builder.WriteString(", ")
	builder.WriteString("subscription_credit=")
	builder.WriteString(fmt.Sprintf("%v", us.SubscriptionCredit))
	builder.WriteString(", ")
	builder.WriteString("addon_credit=")
	builder.WriteString(fmt.Sprintf("%v", us.AddonCredit))
	builder.WriteByte(')')
	return builder.String()
}

// UserSubscriptions is a parsable slice of UserSubscription.
type UserSubscriptions []*UserSubscription

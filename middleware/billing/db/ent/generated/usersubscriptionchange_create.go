// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/usersubscriptionchange"
	"github.com/google/uuid"
)

// UserSubscriptionChangeCreate is the builder for creating a UserSubscriptionChange entity.
type UserSubscriptionChangeCreate struct {
	config
	mutation *UserSubscriptionChangeMutation
	hooks    []Hook
}

// SetEntID sets the "ent_id" field.
func (uscc *UserSubscriptionChangeCreate) SetEntID(u uuid.UUID) *UserSubscriptionChangeCreate {
	uscc.mutation.SetEntID(u)
	return uscc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (uscc *UserSubscriptionChangeCreate) SetNillableEntID(u *uuid.UUID) *UserSubscriptionChangeCreate {
	if u != nil {
		uscc.SetEntID(*u)
	}
	return uscc
}

// SetAppID sets the "app_id" field.
func (uscc *UserSubscriptionChangeCreate) SetAppID(u uuid.UUID) *UserSubscriptionChangeCreate {
	uscc.mutation.SetAppID(u)
	return uscc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (uscc *UserSubscriptionChangeCreate) SetNillableAppID(u *uuid.UUID) *UserSubscriptionChangeCreate {
	if u != nil {
		uscc.SetAppID(*u)
	}
	return uscc
}

// SetUserID sets the "user_id" field.
func (uscc *UserSubscriptionChangeCreate) SetUserID(u uuid.UUID) *UserSubscriptionChangeCreate {
	uscc.mutation.SetUserID(u)
	return uscc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uscc *UserSubscriptionChangeCreate) SetNillableUserID(u *uuid.UUID) *UserSubscriptionChangeCreate {
	if u != nil {
		uscc.SetUserID(*u)
	}
	return uscc
}

// SetUserSubscriptionID sets the "user_subscription_id" field.
func (uscc *UserSubscriptionChangeCreate) SetUserSubscriptionID(u uuid.UUID) *UserSubscriptionChangeCreate {
	uscc.mutation.SetUserSubscriptionID(u)
	return uscc
}

// SetNillableUserSubscriptionID sets the "user_subscription_id" field if the given value is not nil.
func (uscc *UserSubscriptionChangeCreate) SetNillableUserSubscriptionID(u *uuid.UUID) *UserSubscriptionChangeCreate {
	if u != nil {
		uscc.SetUserSubscriptionID(*u)
	}
	return uscc
}

// SetOldPackageID sets the "old_package_id" field.
func (uscc *UserSubscriptionChangeCreate) SetOldPackageID(u uuid.UUID) *UserSubscriptionChangeCreate {
	uscc.mutation.SetOldPackageID(u)
	return uscc
}

// SetNillableOldPackageID sets the "old_package_id" field if the given value is not nil.
func (uscc *UserSubscriptionChangeCreate) SetNillableOldPackageID(u *uuid.UUID) *UserSubscriptionChangeCreate {
	if u != nil {
		uscc.SetOldPackageID(*u)
	}
	return uscc
}

// SetNewPackageID sets the "new_package_id" field.
func (uscc *UserSubscriptionChangeCreate) SetNewPackageID(u uuid.UUID) *UserSubscriptionChangeCreate {
	uscc.mutation.SetNewPackageID(u)
	return uscc
}

// SetNillableNewPackageID sets the "new_package_id" field if the given value is not nil.
func (uscc *UserSubscriptionChangeCreate) SetNillableNewPackageID(u *uuid.UUID) *UserSubscriptionChangeCreate {
	if u != nil {
		uscc.SetNewPackageID(*u)
	}
	return uscc
}

// SetID sets the "id" field.
func (uscc *UserSubscriptionChangeCreate) SetID(u uint32) *UserSubscriptionChangeCreate {
	uscc.mutation.SetID(u)
	return uscc
}

// Mutation returns the UserSubscriptionChangeMutation object of the builder.
func (uscc *UserSubscriptionChangeCreate) Mutation() *UserSubscriptionChangeMutation {
	return uscc.mutation
}

// Save creates the UserSubscriptionChange in the database.
func (uscc *UserSubscriptionChangeCreate) Save(ctx context.Context) (*UserSubscriptionChange, error) {
	uscc.defaults()
	return withHooks(ctx, uscc.sqlSave, uscc.mutation, uscc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uscc *UserSubscriptionChangeCreate) SaveX(ctx context.Context) *UserSubscriptionChange {
	v, err := uscc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uscc *UserSubscriptionChangeCreate) Exec(ctx context.Context) error {
	_, err := uscc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uscc *UserSubscriptionChangeCreate) ExecX(ctx context.Context) {
	if err := uscc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uscc *UserSubscriptionChangeCreate) defaults() {
	if _, ok := uscc.mutation.EntID(); !ok {
		v := usersubscriptionchange.DefaultEntID()
		uscc.mutation.SetEntID(v)
	}
	if _, ok := uscc.mutation.AppID(); !ok {
		v := usersubscriptionchange.DefaultAppID()
		uscc.mutation.SetAppID(v)
	}
	if _, ok := uscc.mutation.UserID(); !ok {
		v := usersubscriptionchange.DefaultUserID()
		uscc.mutation.SetUserID(v)
	}
	if _, ok := uscc.mutation.UserSubscriptionID(); !ok {
		v := usersubscriptionchange.DefaultUserSubscriptionID()
		uscc.mutation.SetUserSubscriptionID(v)
	}
	if _, ok := uscc.mutation.OldPackageID(); !ok {
		v := usersubscriptionchange.DefaultOldPackageID()
		uscc.mutation.SetOldPackageID(v)
	}
	if _, ok := uscc.mutation.NewPackageID(); !ok {
		v := usersubscriptionchange.DefaultNewPackageID()
		uscc.mutation.SetNewPackageID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uscc *UserSubscriptionChangeCreate) check() error {
	if _, ok := uscc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "UserSubscriptionChange.ent_id"`)}
	}
	return nil
}

func (uscc *UserSubscriptionChangeCreate) sqlSave(ctx context.Context) (*UserSubscriptionChange, error) {
	if err := uscc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uscc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uscc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	uscc.mutation.id = &_node.ID
	uscc.mutation.done = true
	return _node, nil
}

func (uscc *UserSubscriptionChangeCreate) createSpec() (*UserSubscriptionChange, *sqlgraph.CreateSpec) {
	var (
		_node = &UserSubscriptionChange{config: uscc.config}
		_spec = sqlgraph.NewCreateSpec(usersubscriptionchange.Table, sqlgraph.NewFieldSpec(usersubscriptionchange.FieldID, field.TypeUint32))
	)
	if id, ok := uscc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uscc.mutation.EntID(); ok {
		_spec.SetField(usersubscriptionchange.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := uscc.mutation.AppID(); ok {
		_spec.SetField(usersubscriptionchange.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := uscc.mutation.UserID(); ok {
		_spec.SetField(usersubscriptionchange.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := uscc.mutation.UserSubscriptionID(); ok {
		_spec.SetField(usersubscriptionchange.FieldUserSubscriptionID, field.TypeUUID, value)
		_node.UserSubscriptionID = value
	}
	if value, ok := uscc.mutation.OldPackageID(); ok {
		_spec.SetField(usersubscriptionchange.FieldOldPackageID, field.TypeUUID, value)
		_node.OldPackageID = value
	}
	if value, ok := uscc.mutation.NewPackageID(); ok {
		_spec.SetField(usersubscriptionchange.FieldNewPackageID, field.TypeUUID, value)
		_node.NewPackageID = value
	}
	return _node, _spec
}

// UserSubscriptionChangeCreateBulk is the builder for creating many UserSubscriptionChange entities in bulk.
type UserSubscriptionChangeCreateBulk struct {
	config
	err      error
	builders []*UserSubscriptionChangeCreate
}

// Save creates the UserSubscriptionChange entities in the database.
func (usccb *UserSubscriptionChangeCreateBulk) Save(ctx context.Context) ([]*UserSubscriptionChange, error) {
	if usccb.err != nil {
		return nil, usccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(usccb.builders))
	nodes := make([]*UserSubscriptionChange, len(usccb.builders))
	mutators := make([]Mutator, len(usccb.builders))
	for i := range usccb.builders {
		func(i int, root context.Context) {
			builder := usccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserSubscriptionChangeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, usccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, usccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, usccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (usccb *UserSubscriptionChangeCreateBulk) SaveX(ctx context.Context) []*UserSubscriptionChange {
	v, err := usccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (usccb *UserSubscriptionChangeCreateBulk) Exec(ctx context.Context) error {
	_, err := usccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usccb *UserSubscriptionChangeCreateBulk) ExecX(ctx context.Context) {
	if err := usccb.Exec(ctx); err != nil {
		panic(err)
	}
}

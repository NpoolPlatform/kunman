// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/usersubscriptionchange"
	"github.com/google/uuid"
)

// UserSubscriptionChangeCreate is the builder for creating a UserSubscriptionChange entity.
type UserSubscriptionChangeCreate struct {
	config
	mutation *UserSubscriptionChangeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (uscc *UserSubscriptionChangeCreate) SetEntID(u uuid.UUID) *UserSubscriptionChangeCreate {
	uscc.mutation.SetEntID(u)
	return uscc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (uscc *UserSubscriptionChangeCreate) SetNillableEntID(u *uuid.UUID) *UserSubscriptionChangeCreate {
	if u != nil {
		uscc.SetEntID(*u)
	}
	return uscc
}

// SetAppID sets the "app_id" field.
func (uscc *UserSubscriptionChangeCreate) SetAppID(u uuid.UUID) *UserSubscriptionChangeCreate {
	uscc.mutation.SetAppID(u)
	return uscc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (uscc *UserSubscriptionChangeCreate) SetNillableAppID(u *uuid.UUID) *UserSubscriptionChangeCreate {
	if u != nil {
		uscc.SetAppID(*u)
	}
	return uscc
}

// SetUserID sets the "user_id" field.
func (uscc *UserSubscriptionChangeCreate) SetUserID(u uuid.UUID) *UserSubscriptionChangeCreate {
	uscc.mutation.SetUserID(u)
	return uscc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uscc *UserSubscriptionChangeCreate) SetNillableUserID(u *uuid.UUID) *UserSubscriptionChangeCreate {
	if u != nil {
		uscc.SetUserID(*u)
	}
	return uscc
}

// SetUserSubscriptionID sets the "user_subscription_id" field.
func (uscc *UserSubscriptionChangeCreate) SetUserSubscriptionID(u uuid.UUID) *UserSubscriptionChangeCreate {
	uscc.mutation.SetUserSubscriptionID(u)
	return uscc
}

// SetNillableUserSubscriptionID sets the "user_subscription_id" field if the given value is not nil.
func (uscc *UserSubscriptionChangeCreate) SetNillableUserSubscriptionID(u *uuid.UUID) *UserSubscriptionChangeCreate {
	if u != nil {
		uscc.SetUserSubscriptionID(*u)
	}
	return uscc
}

// SetOldPackageID sets the "old_package_id" field.
func (uscc *UserSubscriptionChangeCreate) SetOldPackageID(u uuid.UUID) *UserSubscriptionChangeCreate {
	uscc.mutation.SetOldPackageID(u)
	return uscc
}

// SetNillableOldPackageID sets the "old_package_id" field if the given value is not nil.
func (uscc *UserSubscriptionChangeCreate) SetNillableOldPackageID(u *uuid.UUID) *UserSubscriptionChangeCreate {
	if u != nil {
		uscc.SetOldPackageID(*u)
	}
	return uscc
}

// SetNewPackageID sets the "new_package_id" field.
func (uscc *UserSubscriptionChangeCreate) SetNewPackageID(u uuid.UUID) *UserSubscriptionChangeCreate {
	uscc.mutation.SetNewPackageID(u)
	return uscc
}

// SetNillableNewPackageID sets the "new_package_id" field if the given value is not nil.
func (uscc *UserSubscriptionChangeCreate) SetNillableNewPackageID(u *uuid.UUID) *UserSubscriptionChangeCreate {
	if u != nil {
		uscc.SetNewPackageID(*u)
	}
	return uscc
}

// SetID sets the "id" field.
func (uscc *UserSubscriptionChangeCreate) SetID(u uint32) *UserSubscriptionChangeCreate {
	uscc.mutation.SetID(u)
	return uscc
}

// Mutation returns the UserSubscriptionChangeMutation object of the builder.
func (uscc *UserSubscriptionChangeCreate) Mutation() *UserSubscriptionChangeMutation {
	return uscc.mutation
}

// Save creates the UserSubscriptionChange in the database.
func (uscc *UserSubscriptionChangeCreate) Save(ctx context.Context) (*UserSubscriptionChange, error) {
	uscc.defaults()
	return withHooks(ctx, uscc.sqlSave, uscc.mutation, uscc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uscc *UserSubscriptionChangeCreate) SaveX(ctx context.Context) *UserSubscriptionChange {
	v, err := uscc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uscc *UserSubscriptionChangeCreate) Exec(ctx context.Context) error {
	_, err := uscc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uscc *UserSubscriptionChangeCreate) ExecX(ctx context.Context) {
	if err := uscc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uscc *UserSubscriptionChangeCreate) defaults() {
	if _, ok := uscc.mutation.EntID(); !ok {
		v := usersubscriptionchange.DefaultEntID()
		uscc.mutation.SetEntID(v)
	}
	if _, ok := uscc.mutation.AppID(); !ok {
		v := usersubscriptionchange.DefaultAppID()
		uscc.mutation.SetAppID(v)
	}
	if _, ok := uscc.mutation.UserID(); !ok {
		v := usersubscriptionchange.DefaultUserID()
		uscc.mutation.SetUserID(v)
	}
	if _, ok := uscc.mutation.UserSubscriptionID(); !ok {
		v := usersubscriptionchange.DefaultUserSubscriptionID()
		uscc.mutation.SetUserSubscriptionID(v)
	}
	if _, ok := uscc.mutation.OldPackageID(); !ok {
		v := usersubscriptionchange.DefaultOldPackageID()
		uscc.mutation.SetOldPackageID(v)
	}
	if _, ok := uscc.mutation.NewPackageID(); !ok {
		v := usersubscriptionchange.DefaultNewPackageID()
		uscc.mutation.SetNewPackageID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uscc *UserSubscriptionChangeCreate) check() error {
	if _, ok := uscc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "UserSubscriptionChange.ent_id"`)}
	}
	return nil
}

func (uscc *UserSubscriptionChangeCreate) sqlSave(ctx context.Context) (*UserSubscriptionChange, error) {
	if err := uscc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uscc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uscc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	uscc.mutation.id = &_node.ID
	uscc.mutation.done = true
	return _node, nil
}

func (uscc *UserSubscriptionChangeCreate) createSpec() (*UserSubscriptionChange, *sqlgraph.CreateSpec) {
	var (
		_node = &UserSubscriptionChange{config: uscc.config}
		_spec = sqlgraph.NewCreateSpec(usersubscriptionchange.Table, sqlgraph.NewFieldSpec(usersubscriptionchange.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = uscc.conflict
	if id, ok := uscc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uscc.mutation.EntID(); ok {
		_spec.SetField(usersubscriptionchange.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := uscc.mutation.AppID(); ok {
		_spec.SetField(usersubscriptionchange.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := uscc.mutation.UserID(); ok {
		_spec.SetField(usersubscriptionchange.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := uscc.mutation.UserSubscriptionID(); ok {
		_spec.SetField(usersubscriptionchange.FieldUserSubscriptionID, field.TypeUUID, value)
		_node.UserSubscriptionID = value
	}
	if value, ok := uscc.mutation.OldPackageID(); ok {
		_spec.SetField(usersubscriptionchange.FieldOldPackageID, field.TypeUUID, value)
		_node.OldPackageID = value
	}
	if value, ok := uscc.mutation.NewPackageID(); ok {
		_spec.SetField(usersubscriptionchange.FieldNewPackageID, field.TypeUUID, value)
		_node.NewPackageID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserSubscriptionChange.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserSubscriptionChangeUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (uscc *UserSubscriptionChangeCreate) OnConflict(opts ...sql.ConflictOption) *UserSubscriptionChangeUpsertOne {
	uscc.conflict = opts
	return &UserSubscriptionChangeUpsertOne{
		create: uscc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserSubscriptionChange.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uscc *UserSubscriptionChangeCreate) OnConflictColumns(columns ...string) *UserSubscriptionChangeUpsertOne {
	uscc.conflict = append(uscc.conflict, sql.ConflictColumns(columns...))
	return &UserSubscriptionChangeUpsertOne{
		create: uscc,
	}
}

type (
	// UserSubscriptionChangeUpsertOne is the builder for "upsert"-ing
	//  one UserSubscriptionChange node.
	UserSubscriptionChangeUpsertOne struct {
		create *UserSubscriptionChangeCreate
	}

	// UserSubscriptionChangeUpsert is the "OnConflict" setter.
	UserSubscriptionChangeUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *UserSubscriptionChangeUpsert) SetEntID(v uuid.UUID) *UserSubscriptionChangeUpsert {
	u.Set(usersubscriptionchange.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *UserSubscriptionChangeUpsert) UpdateEntID() *UserSubscriptionChangeUpsert {
	u.SetExcluded(usersubscriptionchange.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *UserSubscriptionChangeUpsert) SetAppID(v uuid.UUID) *UserSubscriptionChangeUpsert {
	u.Set(usersubscriptionchange.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *UserSubscriptionChangeUpsert) UpdateAppID() *UserSubscriptionChangeUpsert {
	u.SetExcluded(usersubscriptionchange.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *UserSubscriptionChangeUpsert) ClearAppID() *UserSubscriptionChangeUpsert {
	u.SetNull(usersubscriptionchange.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserSubscriptionChangeUpsert) SetUserID(v uuid.UUID) *UserSubscriptionChangeUpsert {
	u.Set(usersubscriptionchange.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserSubscriptionChangeUpsert) UpdateUserID() *UserSubscriptionChangeUpsert {
	u.SetExcluded(usersubscriptionchange.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *UserSubscriptionChangeUpsert) ClearUserID() *UserSubscriptionChangeUpsert {
	u.SetNull(usersubscriptionchange.FieldUserID)
	return u
}

// SetUserSubscriptionID sets the "user_subscription_id" field.
func (u *UserSubscriptionChangeUpsert) SetUserSubscriptionID(v uuid.UUID) *UserSubscriptionChangeUpsert {
	u.Set(usersubscriptionchange.FieldUserSubscriptionID, v)
	return u
}

// UpdateUserSubscriptionID sets the "user_subscription_id" field to the value that was provided on create.
func (u *UserSubscriptionChangeUpsert) UpdateUserSubscriptionID() *UserSubscriptionChangeUpsert {
	u.SetExcluded(usersubscriptionchange.FieldUserSubscriptionID)
	return u
}

// ClearUserSubscriptionID clears the value of the "user_subscription_id" field.
func (u *UserSubscriptionChangeUpsert) ClearUserSubscriptionID() *UserSubscriptionChangeUpsert {
	u.SetNull(usersubscriptionchange.FieldUserSubscriptionID)
	return u
}

// SetOldPackageID sets the "old_package_id" field.
func (u *UserSubscriptionChangeUpsert) SetOldPackageID(v uuid.UUID) *UserSubscriptionChangeUpsert {
	u.Set(usersubscriptionchange.FieldOldPackageID, v)
	return u
}

// UpdateOldPackageID sets the "old_package_id" field to the value that was provided on create.
func (u *UserSubscriptionChangeUpsert) UpdateOldPackageID() *UserSubscriptionChangeUpsert {
	u.SetExcluded(usersubscriptionchange.FieldOldPackageID)
	return u
}

// ClearOldPackageID clears the value of the "old_package_id" field.
func (u *UserSubscriptionChangeUpsert) ClearOldPackageID() *UserSubscriptionChangeUpsert {
	u.SetNull(usersubscriptionchange.FieldOldPackageID)
	return u
}

// SetNewPackageID sets the "new_package_id" field.
func (u *UserSubscriptionChangeUpsert) SetNewPackageID(v uuid.UUID) *UserSubscriptionChangeUpsert {
	u.Set(usersubscriptionchange.FieldNewPackageID, v)
	return u
}

// UpdateNewPackageID sets the "new_package_id" field to the value that was provided on create.
func (u *UserSubscriptionChangeUpsert) UpdateNewPackageID() *UserSubscriptionChangeUpsert {
	u.SetExcluded(usersubscriptionchange.FieldNewPackageID)
	return u
}

// ClearNewPackageID clears the value of the "new_package_id" field.
func (u *UserSubscriptionChangeUpsert) ClearNewPackageID() *UserSubscriptionChangeUpsert {
	u.SetNull(usersubscriptionchange.FieldNewPackageID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserSubscriptionChange.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(usersubscriptionchange.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserSubscriptionChangeUpsertOne) UpdateNewValues() *UserSubscriptionChangeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(usersubscriptionchange.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserSubscriptionChange.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserSubscriptionChangeUpsertOne) Ignore() *UserSubscriptionChangeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserSubscriptionChangeUpsertOne) DoNothing() *UserSubscriptionChangeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserSubscriptionChangeCreate.OnConflict
// documentation for more info.
func (u *UserSubscriptionChangeUpsertOne) Update(set func(*UserSubscriptionChangeUpsert)) *UserSubscriptionChangeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserSubscriptionChangeUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *UserSubscriptionChangeUpsertOne) SetEntID(v uuid.UUID) *UserSubscriptionChangeUpsertOne {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *UserSubscriptionChangeUpsertOne) UpdateEntID() *UserSubscriptionChangeUpsertOne {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *UserSubscriptionChangeUpsertOne) SetAppID(v uuid.UUID) *UserSubscriptionChangeUpsertOne {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *UserSubscriptionChangeUpsertOne) UpdateAppID() *UserSubscriptionChangeUpsertOne {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *UserSubscriptionChangeUpsertOne) ClearAppID() *UserSubscriptionChangeUpsertOne {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserSubscriptionChangeUpsertOne) SetUserID(v uuid.UUID) *UserSubscriptionChangeUpsertOne {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserSubscriptionChangeUpsertOne) UpdateUserID() *UserSubscriptionChangeUpsertOne {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *UserSubscriptionChangeUpsertOne) ClearUserID() *UserSubscriptionChangeUpsertOne {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.ClearUserID()
	})
}

// SetUserSubscriptionID sets the "user_subscription_id" field.
func (u *UserSubscriptionChangeUpsertOne) SetUserSubscriptionID(v uuid.UUID) *UserSubscriptionChangeUpsertOne {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.SetUserSubscriptionID(v)
	})
}

// UpdateUserSubscriptionID sets the "user_subscription_id" field to the value that was provided on create.
func (u *UserSubscriptionChangeUpsertOne) UpdateUserSubscriptionID() *UserSubscriptionChangeUpsertOne {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.UpdateUserSubscriptionID()
	})
}

// ClearUserSubscriptionID clears the value of the "user_subscription_id" field.
func (u *UserSubscriptionChangeUpsertOne) ClearUserSubscriptionID() *UserSubscriptionChangeUpsertOne {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.ClearUserSubscriptionID()
	})
}

// SetOldPackageID sets the "old_package_id" field.
func (u *UserSubscriptionChangeUpsertOne) SetOldPackageID(v uuid.UUID) *UserSubscriptionChangeUpsertOne {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.SetOldPackageID(v)
	})
}

// UpdateOldPackageID sets the "old_package_id" field to the value that was provided on create.
func (u *UserSubscriptionChangeUpsertOne) UpdateOldPackageID() *UserSubscriptionChangeUpsertOne {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.UpdateOldPackageID()
	})
}

// ClearOldPackageID clears the value of the "old_package_id" field.
func (u *UserSubscriptionChangeUpsertOne) ClearOldPackageID() *UserSubscriptionChangeUpsertOne {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.ClearOldPackageID()
	})
}

// SetNewPackageID sets the "new_package_id" field.
func (u *UserSubscriptionChangeUpsertOne) SetNewPackageID(v uuid.UUID) *UserSubscriptionChangeUpsertOne {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.SetNewPackageID(v)
	})
}

// UpdateNewPackageID sets the "new_package_id" field to the value that was provided on create.
func (u *UserSubscriptionChangeUpsertOne) UpdateNewPackageID() *UserSubscriptionChangeUpsertOne {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.UpdateNewPackageID()
	})
}

// ClearNewPackageID clears the value of the "new_package_id" field.
func (u *UserSubscriptionChangeUpsertOne) ClearNewPackageID() *UserSubscriptionChangeUpsertOne {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.ClearNewPackageID()
	})
}

// Exec executes the query.
func (u *UserSubscriptionChangeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for UserSubscriptionChangeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserSubscriptionChangeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserSubscriptionChangeUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserSubscriptionChangeUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserSubscriptionChangeCreateBulk is the builder for creating many UserSubscriptionChange entities in bulk.
type UserSubscriptionChangeCreateBulk struct {
	config
	err      error
	builders []*UserSubscriptionChangeCreate
	conflict []sql.ConflictOption
}

// Save creates the UserSubscriptionChange entities in the database.
func (usccb *UserSubscriptionChangeCreateBulk) Save(ctx context.Context) ([]*UserSubscriptionChange, error) {
	if usccb.err != nil {
		return nil, usccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(usccb.builders))
	nodes := make([]*UserSubscriptionChange, len(usccb.builders))
	mutators := make([]Mutator, len(usccb.builders))
	for i := range usccb.builders {
		func(i int, root context.Context) {
			builder := usccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserSubscriptionChangeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, usccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = usccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, usccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, usccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (usccb *UserSubscriptionChangeCreateBulk) SaveX(ctx context.Context) []*UserSubscriptionChange {
	v, err := usccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (usccb *UserSubscriptionChangeCreateBulk) Exec(ctx context.Context) error {
	_, err := usccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usccb *UserSubscriptionChangeCreateBulk) ExecX(ctx context.Context) {
	if err := usccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserSubscriptionChange.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserSubscriptionChangeUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (usccb *UserSubscriptionChangeCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserSubscriptionChangeUpsertBulk {
	usccb.conflict = opts
	return &UserSubscriptionChangeUpsertBulk{
		create: usccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserSubscriptionChange.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (usccb *UserSubscriptionChangeCreateBulk) OnConflictColumns(columns ...string) *UserSubscriptionChangeUpsertBulk {
	usccb.conflict = append(usccb.conflict, sql.ConflictColumns(columns...))
	return &UserSubscriptionChangeUpsertBulk{
		create: usccb,
	}
}

// UserSubscriptionChangeUpsertBulk is the builder for "upsert"-ing
// a bulk of UserSubscriptionChange nodes.
type UserSubscriptionChangeUpsertBulk struct {
	create *UserSubscriptionChangeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserSubscriptionChange.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(usersubscriptionchange.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserSubscriptionChangeUpsertBulk) UpdateNewValues() *UserSubscriptionChangeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(usersubscriptionchange.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserSubscriptionChange.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserSubscriptionChangeUpsertBulk) Ignore() *UserSubscriptionChangeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserSubscriptionChangeUpsertBulk) DoNothing() *UserSubscriptionChangeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserSubscriptionChangeCreateBulk.OnConflict
// documentation for more info.
func (u *UserSubscriptionChangeUpsertBulk) Update(set func(*UserSubscriptionChangeUpsert)) *UserSubscriptionChangeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserSubscriptionChangeUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *UserSubscriptionChangeUpsertBulk) SetEntID(v uuid.UUID) *UserSubscriptionChangeUpsertBulk {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *UserSubscriptionChangeUpsertBulk) UpdateEntID() *UserSubscriptionChangeUpsertBulk {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *UserSubscriptionChangeUpsertBulk) SetAppID(v uuid.UUID) *UserSubscriptionChangeUpsertBulk {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *UserSubscriptionChangeUpsertBulk) UpdateAppID() *UserSubscriptionChangeUpsertBulk {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *UserSubscriptionChangeUpsertBulk) ClearAppID() *UserSubscriptionChangeUpsertBulk {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserSubscriptionChangeUpsertBulk) SetUserID(v uuid.UUID) *UserSubscriptionChangeUpsertBulk {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserSubscriptionChangeUpsertBulk) UpdateUserID() *UserSubscriptionChangeUpsertBulk {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *UserSubscriptionChangeUpsertBulk) ClearUserID() *UserSubscriptionChangeUpsertBulk {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.ClearUserID()
	})
}

// SetUserSubscriptionID sets the "user_subscription_id" field.
func (u *UserSubscriptionChangeUpsertBulk) SetUserSubscriptionID(v uuid.UUID) *UserSubscriptionChangeUpsertBulk {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.SetUserSubscriptionID(v)
	})
}

// UpdateUserSubscriptionID sets the "user_subscription_id" field to the value that was provided on create.
func (u *UserSubscriptionChangeUpsertBulk) UpdateUserSubscriptionID() *UserSubscriptionChangeUpsertBulk {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.UpdateUserSubscriptionID()
	})
}

// ClearUserSubscriptionID clears the value of the "user_subscription_id" field.
func (u *UserSubscriptionChangeUpsertBulk) ClearUserSubscriptionID() *UserSubscriptionChangeUpsertBulk {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.ClearUserSubscriptionID()
	})
}

// SetOldPackageID sets the "old_package_id" field.
func (u *UserSubscriptionChangeUpsertBulk) SetOldPackageID(v uuid.UUID) *UserSubscriptionChangeUpsertBulk {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.SetOldPackageID(v)
	})
}

// UpdateOldPackageID sets the "old_package_id" field to the value that was provided on create.
func (u *UserSubscriptionChangeUpsertBulk) UpdateOldPackageID() *UserSubscriptionChangeUpsertBulk {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.UpdateOldPackageID()
	})
}

// ClearOldPackageID clears the value of the "old_package_id" field.
func (u *UserSubscriptionChangeUpsertBulk) ClearOldPackageID() *UserSubscriptionChangeUpsertBulk {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.ClearOldPackageID()
	})
}

// SetNewPackageID sets the "new_package_id" field.
func (u *UserSubscriptionChangeUpsertBulk) SetNewPackageID(v uuid.UUID) *UserSubscriptionChangeUpsertBulk {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.SetNewPackageID(v)
	})
}

// UpdateNewPackageID sets the "new_package_id" field to the value that was provided on create.
func (u *UserSubscriptionChangeUpsertBulk) UpdateNewPackageID() *UserSubscriptionChangeUpsertBulk {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.UpdateNewPackageID()
	})
}

// ClearNewPackageID clears the value of the "new_package_id" field.
func (u *UserSubscriptionChangeUpsertBulk) ClearNewPackageID() *UserSubscriptionChangeUpsertBulk {
	return u.Update(func(s *UserSubscriptionChangeUpsert) {
		s.ClearNewPackageID()
	})
}

// Exec executes the query.
func (u *UserSubscriptionChangeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the UserSubscriptionChangeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for UserSubscriptionChangeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserSubscriptionChangeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

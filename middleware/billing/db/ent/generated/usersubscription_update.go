// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/usersubscription"
	"github.com/google/uuid"
)

// UserSubscriptionUpdate is the builder for updating UserSubscription entities.
type UserSubscriptionUpdate struct {
	config
	hooks    []Hook
	mutation *UserSubscriptionMutation
}

// Where appends a list predicates to the UserSubscriptionUpdate builder.
func (usu *UserSubscriptionUpdate) Where(ps ...predicate.UserSubscription) *UserSubscriptionUpdate {
	usu.mutation.Where(ps...)
	return usu
}

// SetEntID sets the "ent_id" field.
func (usu *UserSubscriptionUpdate) SetEntID(u uuid.UUID) *UserSubscriptionUpdate {
	usu.mutation.SetEntID(u)
	return usu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (usu *UserSubscriptionUpdate) SetNillableEntID(u *uuid.UUID) *UserSubscriptionUpdate {
	if u != nil {
		usu.SetEntID(*u)
	}
	return usu
}

// SetAppID sets the "app_id" field.
func (usu *UserSubscriptionUpdate) SetAppID(u uuid.UUID) *UserSubscriptionUpdate {
	usu.mutation.SetAppID(u)
	return usu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (usu *UserSubscriptionUpdate) SetNillableAppID(u *uuid.UUID) *UserSubscriptionUpdate {
	if u != nil {
		usu.SetAppID(*u)
	}
	return usu
}

// ClearAppID clears the value of the "app_id" field.
func (usu *UserSubscriptionUpdate) ClearAppID() *UserSubscriptionUpdate {
	usu.mutation.ClearAppID()
	return usu
}

// SetUserID sets the "user_id" field.
func (usu *UserSubscriptionUpdate) SetUserID(u uuid.UUID) *UserSubscriptionUpdate {
	usu.mutation.SetUserID(u)
	return usu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (usu *UserSubscriptionUpdate) SetNillableUserID(u *uuid.UUID) *UserSubscriptionUpdate {
	if u != nil {
		usu.SetUserID(*u)
	}
	return usu
}

// ClearUserID clears the value of the "user_id" field.
func (usu *UserSubscriptionUpdate) ClearUserID() *UserSubscriptionUpdate {
	usu.mutation.ClearUserID()
	return usu
}

// SetPackageID sets the "package_id" field.
func (usu *UserSubscriptionUpdate) SetPackageID(u uuid.UUID) *UserSubscriptionUpdate {
	usu.mutation.SetPackageID(u)
	return usu
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (usu *UserSubscriptionUpdate) SetNillablePackageID(u *uuid.UUID) *UserSubscriptionUpdate {
	if u != nil {
		usu.SetPackageID(*u)
	}
	return usu
}

// ClearPackageID clears the value of the "package_id" field.
func (usu *UserSubscriptionUpdate) ClearPackageID() *UserSubscriptionUpdate {
	usu.mutation.ClearPackageID()
	return usu
}

// SetStartAt sets the "start_at" field.
func (usu *UserSubscriptionUpdate) SetStartAt(u uint32) *UserSubscriptionUpdate {
	usu.mutation.ResetStartAt()
	usu.mutation.SetStartAt(u)
	return usu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (usu *UserSubscriptionUpdate) SetNillableStartAt(u *uint32) *UserSubscriptionUpdate {
	if u != nil {
		usu.SetStartAt(*u)
	}
	return usu
}

// AddStartAt adds u to the "start_at" field.
func (usu *UserSubscriptionUpdate) AddStartAt(u int32) *UserSubscriptionUpdate {
	usu.mutation.AddStartAt(u)
	return usu
}

// ClearStartAt clears the value of the "start_at" field.
func (usu *UserSubscriptionUpdate) ClearStartAt() *UserSubscriptionUpdate {
	usu.mutation.ClearStartAt()
	return usu
}

// SetEndAt sets the "end_at" field.
func (usu *UserSubscriptionUpdate) SetEndAt(u uint32) *UserSubscriptionUpdate {
	usu.mutation.ResetEndAt()
	usu.mutation.SetEndAt(u)
	return usu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (usu *UserSubscriptionUpdate) SetNillableEndAt(u *uint32) *UserSubscriptionUpdate {
	if u != nil {
		usu.SetEndAt(*u)
	}
	return usu
}

// AddEndAt adds u to the "end_at" field.
func (usu *UserSubscriptionUpdate) AddEndAt(u int32) *UserSubscriptionUpdate {
	usu.mutation.AddEndAt(u)
	return usu
}

// ClearEndAt clears the value of the "end_at" field.
func (usu *UserSubscriptionUpdate) ClearEndAt() *UserSubscriptionUpdate {
	usu.mutation.ClearEndAt()
	return usu
}

// SetUsageState sets the "usage_state" field.
func (usu *UserSubscriptionUpdate) SetUsageState(s string) *UserSubscriptionUpdate {
	usu.mutation.SetUsageState(s)
	return usu
}

// SetNillableUsageState sets the "usage_state" field if the given value is not nil.
func (usu *UserSubscriptionUpdate) SetNillableUsageState(s *string) *UserSubscriptionUpdate {
	if s != nil {
		usu.SetUsageState(*s)
	}
	return usu
}

// ClearUsageState clears the value of the "usage_state" field.
func (usu *UserSubscriptionUpdate) ClearUsageState() *UserSubscriptionUpdate {
	usu.mutation.ClearUsageState()
	return usu
}

// SetSubscriptionCredit sets the "subscription_credit" field.
func (usu *UserSubscriptionUpdate) SetSubscriptionCredit(u uint32) *UserSubscriptionUpdate {
	usu.mutation.ResetSubscriptionCredit()
	usu.mutation.SetSubscriptionCredit(u)
	return usu
}

// SetNillableSubscriptionCredit sets the "subscription_credit" field if the given value is not nil.
func (usu *UserSubscriptionUpdate) SetNillableSubscriptionCredit(u *uint32) *UserSubscriptionUpdate {
	if u != nil {
		usu.SetSubscriptionCredit(*u)
	}
	return usu
}

// AddSubscriptionCredit adds u to the "subscription_credit" field.
func (usu *UserSubscriptionUpdate) AddSubscriptionCredit(u int32) *UserSubscriptionUpdate {
	usu.mutation.AddSubscriptionCredit(u)
	return usu
}

// ClearSubscriptionCredit clears the value of the "subscription_credit" field.
func (usu *UserSubscriptionUpdate) ClearSubscriptionCredit() *UserSubscriptionUpdate {
	usu.mutation.ClearSubscriptionCredit()
	return usu
}

// SetAddonCredit sets the "addon_credit" field.
func (usu *UserSubscriptionUpdate) SetAddonCredit(u uint32) *UserSubscriptionUpdate {
	usu.mutation.ResetAddonCredit()
	usu.mutation.SetAddonCredit(u)
	return usu
}

// SetNillableAddonCredit sets the "addon_credit" field if the given value is not nil.
func (usu *UserSubscriptionUpdate) SetNillableAddonCredit(u *uint32) *UserSubscriptionUpdate {
	if u != nil {
		usu.SetAddonCredit(*u)
	}
	return usu
}

// AddAddonCredit adds u to the "addon_credit" field.
func (usu *UserSubscriptionUpdate) AddAddonCredit(u int32) *UserSubscriptionUpdate {
	usu.mutation.AddAddonCredit(u)
	return usu
}

// ClearAddonCredit clears the value of the "addon_credit" field.
func (usu *UserSubscriptionUpdate) ClearAddonCredit() *UserSubscriptionUpdate {
	usu.mutation.ClearAddonCredit()
	return usu
}

// Mutation returns the UserSubscriptionMutation object of the builder.
func (usu *UserSubscriptionUpdate) Mutation() *UserSubscriptionMutation {
	return usu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (usu *UserSubscriptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, usu.sqlSave, usu.mutation, usu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usu *UserSubscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := usu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (usu *UserSubscriptionUpdate) Exec(ctx context.Context) error {
	_, err := usu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usu *UserSubscriptionUpdate) ExecX(ctx context.Context) {
	if err := usu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (usu *UserSubscriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(usersubscription.Table, usersubscription.Columns, sqlgraph.NewFieldSpec(usersubscription.FieldID, field.TypeUint32))
	if ps := usu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usu.mutation.EntID(); ok {
		_spec.SetField(usersubscription.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := usu.mutation.AppID(); ok {
		_spec.SetField(usersubscription.FieldAppID, field.TypeUUID, value)
	}
	if usu.mutation.AppIDCleared() {
		_spec.ClearField(usersubscription.FieldAppID, field.TypeUUID)
	}
	if value, ok := usu.mutation.UserID(); ok {
		_spec.SetField(usersubscription.FieldUserID, field.TypeUUID, value)
	}
	if usu.mutation.UserIDCleared() {
		_spec.ClearField(usersubscription.FieldUserID, field.TypeUUID)
	}
	if value, ok := usu.mutation.PackageID(); ok {
		_spec.SetField(usersubscription.FieldPackageID, field.TypeUUID, value)
	}
	if usu.mutation.PackageIDCleared() {
		_spec.ClearField(usersubscription.FieldPackageID, field.TypeUUID)
	}
	if value, ok := usu.mutation.StartAt(); ok {
		_spec.SetField(usersubscription.FieldStartAt, field.TypeUint32, value)
	}
	if value, ok := usu.mutation.AddedStartAt(); ok {
		_spec.AddField(usersubscription.FieldStartAt, field.TypeUint32, value)
	}
	if usu.mutation.StartAtCleared() {
		_spec.ClearField(usersubscription.FieldStartAt, field.TypeUint32)
	}
	if value, ok := usu.mutation.EndAt(); ok {
		_spec.SetField(usersubscription.FieldEndAt, field.TypeUint32, value)
	}
	if value, ok := usu.mutation.AddedEndAt(); ok {
		_spec.AddField(usersubscription.FieldEndAt, field.TypeUint32, value)
	}
	if usu.mutation.EndAtCleared() {
		_spec.ClearField(usersubscription.FieldEndAt, field.TypeUint32)
	}
	if value, ok := usu.mutation.UsageState(); ok {
		_spec.SetField(usersubscription.FieldUsageState, field.TypeString, value)
	}
	if usu.mutation.UsageStateCleared() {
		_spec.ClearField(usersubscription.FieldUsageState, field.TypeString)
	}
	if value, ok := usu.mutation.SubscriptionCredit(); ok {
		_spec.SetField(usersubscription.FieldSubscriptionCredit, field.TypeUint32, value)
	}
	if value, ok := usu.mutation.AddedSubscriptionCredit(); ok {
		_spec.AddField(usersubscription.FieldSubscriptionCredit, field.TypeUint32, value)
	}
	if usu.mutation.SubscriptionCreditCleared() {
		_spec.ClearField(usersubscription.FieldSubscriptionCredit, field.TypeUint32)
	}
	if value, ok := usu.mutation.AddonCredit(); ok {
		_spec.SetField(usersubscription.FieldAddonCredit, field.TypeUint32, value)
	}
	if value, ok := usu.mutation.AddedAddonCredit(); ok {
		_spec.AddField(usersubscription.FieldAddonCredit, field.TypeUint32, value)
	}
	if usu.mutation.AddonCreditCleared() {
		_spec.ClearField(usersubscription.FieldAddonCredit, field.TypeUint32)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, usu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersubscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	usu.mutation.done = true
	return n, nil
}

// UserSubscriptionUpdateOne is the builder for updating a single UserSubscription entity.
type UserSubscriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserSubscriptionMutation
}

// SetEntID sets the "ent_id" field.
func (usuo *UserSubscriptionUpdateOne) SetEntID(u uuid.UUID) *UserSubscriptionUpdateOne {
	usuo.mutation.SetEntID(u)
	return usuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (usuo *UserSubscriptionUpdateOne) SetNillableEntID(u *uuid.UUID) *UserSubscriptionUpdateOne {
	if u != nil {
		usuo.SetEntID(*u)
	}
	return usuo
}

// SetAppID sets the "app_id" field.
func (usuo *UserSubscriptionUpdateOne) SetAppID(u uuid.UUID) *UserSubscriptionUpdateOne {
	usuo.mutation.SetAppID(u)
	return usuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (usuo *UserSubscriptionUpdateOne) SetNillableAppID(u *uuid.UUID) *UserSubscriptionUpdateOne {
	if u != nil {
		usuo.SetAppID(*u)
	}
	return usuo
}

// ClearAppID clears the value of the "app_id" field.
func (usuo *UserSubscriptionUpdateOne) ClearAppID() *UserSubscriptionUpdateOne {
	usuo.mutation.ClearAppID()
	return usuo
}

// SetUserID sets the "user_id" field.
func (usuo *UserSubscriptionUpdateOne) SetUserID(u uuid.UUID) *UserSubscriptionUpdateOne {
	usuo.mutation.SetUserID(u)
	return usuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (usuo *UserSubscriptionUpdateOne) SetNillableUserID(u *uuid.UUID) *UserSubscriptionUpdateOne {
	if u != nil {
		usuo.SetUserID(*u)
	}
	return usuo
}

// ClearUserID clears the value of the "user_id" field.
func (usuo *UserSubscriptionUpdateOne) ClearUserID() *UserSubscriptionUpdateOne {
	usuo.mutation.ClearUserID()
	return usuo
}

// SetPackageID sets the "package_id" field.
func (usuo *UserSubscriptionUpdateOne) SetPackageID(u uuid.UUID) *UserSubscriptionUpdateOne {
	usuo.mutation.SetPackageID(u)
	return usuo
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (usuo *UserSubscriptionUpdateOne) SetNillablePackageID(u *uuid.UUID) *UserSubscriptionUpdateOne {
	if u != nil {
		usuo.SetPackageID(*u)
	}
	return usuo
}

// ClearPackageID clears the value of the "package_id" field.
func (usuo *UserSubscriptionUpdateOne) ClearPackageID() *UserSubscriptionUpdateOne {
	usuo.mutation.ClearPackageID()
	return usuo
}

// SetStartAt sets the "start_at" field.
func (usuo *UserSubscriptionUpdateOne) SetStartAt(u uint32) *UserSubscriptionUpdateOne {
	usuo.mutation.ResetStartAt()
	usuo.mutation.SetStartAt(u)
	return usuo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (usuo *UserSubscriptionUpdateOne) SetNillableStartAt(u *uint32) *UserSubscriptionUpdateOne {
	if u != nil {
		usuo.SetStartAt(*u)
	}
	return usuo
}

// AddStartAt adds u to the "start_at" field.
func (usuo *UserSubscriptionUpdateOne) AddStartAt(u int32) *UserSubscriptionUpdateOne {
	usuo.mutation.AddStartAt(u)
	return usuo
}

// ClearStartAt clears the value of the "start_at" field.
func (usuo *UserSubscriptionUpdateOne) ClearStartAt() *UserSubscriptionUpdateOne {
	usuo.mutation.ClearStartAt()
	return usuo
}

// SetEndAt sets the "end_at" field.
func (usuo *UserSubscriptionUpdateOne) SetEndAt(u uint32) *UserSubscriptionUpdateOne {
	usuo.mutation.ResetEndAt()
	usuo.mutation.SetEndAt(u)
	return usuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (usuo *UserSubscriptionUpdateOne) SetNillableEndAt(u *uint32) *UserSubscriptionUpdateOne {
	if u != nil {
		usuo.SetEndAt(*u)
	}
	return usuo
}

// AddEndAt adds u to the "end_at" field.
func (usuo *UserSubscriptionUpdateOne) AddEndAt(u int32) *UserSubscriptionUpdateOne {
	usuo.mutation.AddEndAt(u)
	return usuo
}

// ClearEndAt clears the value of the "end_at" field.
func (usuo *UserSubscriptionUpdateOne) ClearEndAt() *UserSubscriptionUpdateOne {
	usuo.mutation.ClearEndAt()
	return usuo
}

// SetUsageState sets the "usage_state" field.
func (usuo *UserSubscriptionUpdateOne) SetUsageState(s string) *UserSubscriptionUpdateOne {
	usuo.mutation.SetUsageState(s)
	return usuo
}

// SetNillableUsageState sets the "usage_state" field if the given value is not nil.
func (usuo *UserSubscriptionUpdateOne) SetNillableUsageState(s *string) *UserSubscriptionUpdateOne {
	if s != nil {
		usuo.SetUsageState(*s)
	}
	return usuo
}

// ClearUsageState clears the value of the "usage_state" field.
func (usuo *UserSubscriptionUpdateOne) ClearUsageState() *UserSubscriptionUpdateOne {
	usuo.mutation.ClearUsageState()
	return usuo
}

// SetSubscriptionCredit sets the "subscription_credit" field.
func (usuo *UserSubscriptionUpdateOne) SetSubscriptionCredit(u uint32) *UserSubscriptionUpdateOne {
	usuo.mutation.ResetSubscriptionCredit()
	usuo.mutation.SetSubscriptionCredit(u)
	return usuo
}

// SetNillableSubscriptionCredit sets the "subscription_credit" field if the given value is not nil.
func (usuo *UserSubscriptionUpdateOne) SetNillableSubscriptionCredit(u *uint32) *UserSubscriptionUpdateOne {
	if u != nil {
		usuo.SetSubscriptionCredit(*u)
	}
	return usuo
}

// AddSubscriptionCredit adds u to the "subscription_credit" field.
func (usuo *UserSubscriptionUpdateOne) AddSubscriptionCredit(u int32) *UserSubscriptionUpdateOne {
	usuo.mutation.AddSubscriptionCredit(u)
	return usuo
}

// ClearSubscriptionCredit clears the value of the "subscription_credit" field.
func (usuo *UserSubscriptionUpdateOne) ClearSubscriptionCredit() *UserSubscriptionUpdateOne {
	usuo.mutation.ClearSubscriptionCredit()
	return usuo
}

// SetAddonCredit sets the "addon_credit" field.
func (usuo *UserSubscriptionUpdateOne) SetAddonCredit(u uint32) *UserSubscriptionUpdateOne {
	usuo.mutation.ResetAddonCredit()
	usuo.mutation.SetAddonCredit(u)
	return usuo
}

// SetNillableAddonCredit sets the "addon_credit" field if the given value is not nil.
func (usuo *UserSubscriptionUpdateOne) SetNillableAddonCredit(u *uint32) *UserSubscriptionUpdateOne {
	if u != nil {
		usuo.SetAddonCredit(*u)
	}
	return usuo
}

// AddAddonCredit adds u to the "addon_credit" field.
func (usuo *UserSubscriptionUpdateOne) AddAddonCredit(u int32) *UserSubscriptionUpdateOne {
	usuo.mutation.AddAddonCredit(u)
	return usuo
}

// ClearAddonCredit clears the value of the "addon_credit" field.
func (usuo *UserSubscriptionUpdateOne) ClearAddonCredit() *UserSubscriptionUpdateOne {
	usuo.mutation.ClearAddonCredit()
	return usuo
}

// Mutation returns the UserSubscriptionMutation object of the builder.
func (usuo *UserSubscriptionUpdateOne) Mutation() *UserSubscriptionMutation {
	return usuo.mutation
}

// Where appends a list predicates to the UserSubscriptionUpdate builder.
func (usuo *UserSubscriptionUpdateOne) Where(ps ...predicate.UserSubscription) *UserSubscriptionUpdateOne {
	usuo.mutation.Where(ps...)
	return usuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (usuo *UserSubscriptionUpdateOne) Select(field string, fields ...string) *UserSubscriptionUpdateOne {
	usuo.fields = append([]string{field}, fields...)
	return usuo
}

// Save executes the query and returns the updated UserSubscription entity.
func (usuo *UserSubscriptionUpdateOne) Save(ctx context.Context) (*UserSubscription, error) {
	return withHooks(ctx, usuo.sqlSave, usuo.mutation, usuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usuo *UserSubscriptionUpdateOne) SaveX(ctx context.Context) *UserSubscription {
	node, err := usuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (usuo *UserSubscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := usuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usuo *UserSubscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := usuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (usuo *UserSubscriptionUpdateOne) sqlSave(ctx context.Context) (_node *UserSubscription, err error) {
	_spec := sqlgraph.NewUpdateSpec(usersubscription.Table, usersubscription.Columns, sqlgraph.NewFieldSpec(usersubscription.FieldID, field.TypeUint32))
	id, ok := usuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "UserSubscription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := usuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usersubscription.FieldID)
		for _, f := range fields {
			if !usersubscription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != usersubscription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := usuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usuo.mutation.EntID(); ok {
		_spec.SetField(usersubscription.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := usuo.mutation.AppID(); ok {
		_spec.SetField(usersubscription.FieldAppID, field.TypeUUID, value)
	}
	if usuo.mutation.AppIDCleared() {
		_spec.ClearField(usersubscription.FieldAppID, field.TypeUUID)
	}
	if value, ok := usuo.mutation.UserID(); ok {
		_spec.SetField(usersubscription.FieldUserID, field.TypeUUID, value)
	}
	if usuo.mutation.UserIDCleared() {
		_spec.ClearField(usersubscription.FieldUserID, field.TypeUUID)
	}
	if value, ok := usuo.mutation.PackageID(); ok {
		_spec.SetField(usersubscription.FieldPackageID, field.TypeUUID, value)
	}
	if usuo.mutation.PackageIDCleared() {
		_spec.ClearField(usersubscription.FieldPackageID, field.TypeUUID)
	}
	if value, ok := usuo.mutation.StartAt(); ok {
		_spec.SetField(usersubscription.FieldStartAt, field.TypeUint32, value)
	}
	if value, ok := usuo.mutation.AddedStartAt(); ok {
		_spec.AddField(usersubscription.FieldStartAt, field.TypeUint32, value)
	}
	if usuo.mutation.StartAtCleared() {
		_spec.ClearField(usersubscription.FieldStartAt, field.TypeUint32)
	}
	if value, ok := usuo.mutation.EndAt(); ok {
		_spec.SetField(usersubscription.FieldEndAt, field.TypeUint32, value)
	}
	if value, ok := usuo.mutation.AddedEndAt(); ok {
		_spec.AddField(usersubscription.FieldEndAt, field.TypeUint32, value)
	}
	if usuo.mutation.EndAtCleared() {
		_spec.ClearField(usersubscription.FieldEndAt, field.TypeUint32)
	}
	if value, ok := usuo.mutation.UsageState(); ok {
		_spec.SetField(usersubscription.FieldUsageState, field.TypeString, value)
	}
	if usuo.mutation.UsageStateCleared() {
		_spec.ClearField(usersubscription.FieldUsageState, field.TypeString)
	}
	if value, ok := usuo.mutation.SubscriptionCredit(); ok {
		_spec.SetField(usersubscription.FieldSubscriptionCredit, field.TypeUint32, value)
	}
	if value, ok := usuo.mutation.AddedSubscriptionCredit(); ok {
		_spec.AddField(usersubscription.FieldSubscriptionCredit, field.TypeUint32, value)
	}
	if usuo.mutation.SubscriptionCreditCleared() {
		_spec.ClearField(usersubscription.FieldSubscriptionCredit, field.TypeUint32)
	}
	if value, ok := usuo.mutation.AddonCredit(); ok {
		_spec.SetField(usersubscription.FieldAddonCredit, field.TypeUint32, value)
	}
	if value, ok := usuo.mutation.AddedAddonCredit(); ok {
		_spec.AddField(usersubscription.FieldAddonCredit, field.TypeUint32, value)
	}
	if usuo.mutation.AddonCreditCleared() {
		_spec.ClearField(usersubscription.FieldAddonCredit, field.TypeUint32)
	}
	_node = &UserSubscription{config: usuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, usuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersubscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	usuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package addon

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the addon type in the database.
	Label = "addon"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldUsdPrice holds the string denoting the usd_price field in the database.
	FieldUsdPrice = "usd_price"
	// FieldCredit holds the string denoting the credit field in the database.
	FieldCredit = "credit"
	// FieldSortOrder holds the string denoting the sort_order field in the database.
	FieldSortOrder = "sort_order"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// Table holds the table name of the addon in the database.
	Table = "addons"
)

// Columns holds all SQL columns for addon fields.
var Columns = []string{
	FieldID,
	FieldEntID,
	FieldAppID,
	FieldUsdPrice,
	FieldCredit,
	FieldSortOrder,
	FieldEnabled,
	FieldDescription,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultAppID holds the default value on creation for the "app_id" field.
	DefaultAppID func() uuid.UUID
	// DefaultUsdPrice holds the default value on creation for the "usd_price" field.
	DefaultUsdPrice decimal.Decimal
	// DefaultCredit holds the default value on creation for the "credit" field.
	DefaultCredit uint32
	// DefaultSortOrder holds the default value on creation for the "sort_order" field.
	DefaultSortOrder uint32
	// DefaultEnabled holds the default value on creation for the "enabled" field.
	DefaultEnabled bool
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
)

// OrderOption defines the ordering options for the Addon queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByAppID orders the results by the app_id field.
func ByAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppID, opts...).ToFunc()
}

// ByUsdPrice orders the results by the usd_price field.
func ByUsdPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsdPrice, opts...).ToFunc()
}

// ByCredit orders the results by the credit field.
func ByCredit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCredit, opts...).ToFunc()
}

// BySortOrder orders the results by the sort_order field.
func BySortOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSortOrder, opts...).ToFunc()
}

// ByEnabled orders the results by the enabled field.
func ByEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnabled, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

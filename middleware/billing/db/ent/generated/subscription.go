// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/subscription"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// Subscription is the model entity for the Subscription schema.
type Subscription struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// PackageName holds the value of the "package_name" field.
	PackageName string `json:"package_name,omitempty"`
	// UsdPrice holds the value of the "usd_price" field.
	UsdPrice decimal.Decimal `json:"usd_price,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// SortOrder holds the value of the "sort_order" field.
	SortOrder uint32 `json:"sort_order,omitempty"`
	// PackageType holds the value of the "package_type" field.
	PackageType string `json:"package_type,omitempty"`
	// Credit holds the value of the "credit" field.
	Credit uint32 `json:"credit,omitempty"`
	// ResetType holds the value of the "reset_type" field.
	ResetType string `json:"reset_type,omitempty"`
	// QPSLimit holds the value of the "qps_limit" field.
	QPSLimit     uint32 `json:"qps_limit,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Subscription) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscription.FieldUsdPrice:
			values[i] = new(decimal.Decimal)
		case subscription.FieldID, subscription.FieldSortOrder, subscription.FieldCredit, subscription.FieldQPSLimit:
			values[i] = new(sql.NullInt64)
		case subscription.FieldPackageName, subscription.FieldDescription, subscription.FieldPackageType, subscription.FieldResetType:
			values[i] = new(sql.NullString)
		case subscription.FieldEntID, subscription.FieldAppID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Subscription fields.
func (s *Subscription) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscription.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = uint32(value.Int64)
		case subscription.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				s.EntID = *value
			}
		case subscription.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				s.AppID = *value
			}
		case subscription.FieldPackageName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field package_name", values[i])
			} else if value.Valid {
				s.PackageName = value.String
			}
		case subscription.FieldUsdPrice:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field usd_price", values[i])
			} else if value != nil {
				s.UsdPrice = *value
			}
		case subscription.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		case subscription.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				s.SortOrder = uint32(value.Int64)
			}
		case subscription.FieldPackageType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field package_type", values[i])
			} else if value.Valid {
				s.PackageType = value.String
			}
		case subscription.FieldCredit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field credit", values[i])
			} else if value.Valid {
				s.Credit = uint32(value.Int64)
			}
		case subscription.FieldResetType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reset_type", values[i])
			} else if value.Valid {
				s.ResetType = value.String
			}
		case subscription.FieldQPSLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field qps_limit", values[i])
			} else if value.Valid {
				s.QPSLimit = uint32(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Subscription.
// This includes values selected through modifiers, order, etc.
func (s *Subscription) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Subscription.
// Note that you need to call Subscription.Unwrap() before calling this method if this Subscription
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Subscription) Update() *SubscriptionUpdateOne {
	return NewSubscriptionClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Subscription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Subscription) Unwrap() *Subscription {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("generated: Subscription is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Subscription) String() string {
	var builder strings.Builder
	builder.WriteString("Subscription(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", s.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", s.AppID))
	builder.WriteString(", ")
	builder.WriteString("package_name=")
	builder.WriteString(s.PackageName)
	builder.WriteString(", ")
	builder.WriteString("usd_price=")
	builder.WriteString(fmt.Sprintf("%v", s.UsdPrice))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(s.Description)
	builder.WriteString(", ")
	builder.WriteString("sort_order=")
	builder.WriteString(fmt.Sprintf("%v", s.SortOrder))
	builder.WriteString(", ")
	builder.WriteString("package_type=")
	builder.WriteString(s.PackageType)
	builder.WriteString(", ")
	builder.WriteString("credit=")
	builder.WriteString(fmt.Sprintf("%v", s.Credit))
	builder.WriteString(", ")
	builder.WriteString("reset_type=")
	builder.WriteString(s.ResetType)
	builder.WriteString(", ")
	builder.WriteString("qps_limit=")
	builder.WriteString(fmt.Sprintf("%v", s.QPSLimit))
	builder.WriteByte(')')
	return builder.String()
}

// Subscriptions is a parsable slice of Subscription.
type Subscriptions []*Subscription

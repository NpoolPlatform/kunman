// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/exchange"
	"github.com/google/uuid"
)

// Exchange is the model entity for the Exchange schema.
type Exchange struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UsageType holds the value of the "usage_type" field.
	UsageType string `json:"usage_type,omitempty"`
	// Credit holds the value of the "credit" field.
	Credit uint32 `json:"credit,omitempty"`
	// ExchangeThreshold holds the value of the "exchange_threshold" field.
	ExchangeThreshold uint32 `json:"exchange_threshold,omitempty"`
	// Path holds the value of the "path" field.
	Path         string `json:"path,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Exchange) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case exchange.FieldID, exchange.FieldCredit, exchange.FieldExchangeThreshold:
			values[i] = new(sql.NullInt64)
		case exchange.FieldUsageType, exchange.FieldPath:
			values[i] = new(sql.NullString)
		case exchange.FieldEntID, exchange.FieldAppID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Exchange fields.
func (e *Exchange) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case exchange.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = uint32(value.Int64)
		case exchange.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				e.EntID = *value
			}
		case exchange.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				e.AppID = *value
			}
		case exchange.FieldUsageType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field usage_type", values[i])
			} else if value.Valid {
				e.UsageType = value.String
			}
		case exchange.FieldCredit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field credit", values[i])
			} else if value.Valid {
				e.Credit = uint32(value.Int64)
			}
		case exchange.FieldExchangeThreshold:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exchange_threshold", values[i])
			} else if value.Valid {
				e.ExchangeThreshold = uint32(value.Int64)
			}
		case exchange.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				e.Path = value.String
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Exchange.
// This includes values selected through modifiers, order, etc.
func (e *Exchange) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// Update returns a builder for updating this Exchange.
// Note that you need to call Exchange.Unwrap() before calling this method if this Exchange
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Exchange) Update() *ExchangeUpdateOne {
	return NewExchangeClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Exchange entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Exchange) Unwrap() *Exchange {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("generated: Exchange is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Exchange) String() string {
	var builder strings.Builder
	builder.WriteString("Exchange(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", e.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", e.AppID))
	builder.WriteString(", ")
	builder.WriteString("usage_type=")
	builder.WriteString(e.UsageType)
	builder.WriteString(", ")
	builder.WriteString("credit=")
	builder.WriteString(fmt.Sprintf("%v", e.Credit))
	builder.WriteString(", ")
	builder.WriteString("exchange_threshold=")
	builder.WriteString(fmt.Sprintf("%v", e.ExchangeThreshold))
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(e.Path)
	builder.WriteByte(')')
	return builder.String()
}

// Exchanges is a parsable slice of Exchange.
type Exchanges []*Exchange

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/usercreditrecord"
	"github.com/google/uuid"
)

// UserCreditRecordUpdate is the builder for updating UserCreditRecord entities.
type UserCreditRecordUpdate struct {
	config
	hooks    []Hook
	mutation *UserCreditRecordMutation
}

// Where appends a list predicates to the UserCreditRecordUpdate builder.
func (ucru *UserCreditRecordUpdate) Where(ps ...predicate.UserCreditRecord) *UserCreditRecordUpdate {
	ucru.mutation.Where(ps...)
	return ucru
}

// SetEntID sets the "ent_id" field.
func (ucru *UserCreditRecordUpdate) SetEntID(u uuid.UUID) *UserCreditRecordUpdate {
	ucru.mutation.SetEntID(u)
	return ucru
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ucru *UserCreditRecordUpdate) SetNillableEntID(u *uuid.UUID) *UserCreditRecordUpdate {
	if u != nil {
		ucru.SetEntID(*u)
	}
	return ucru
}

// SetAppID sets the "app_id" field.
func (ucru *UserCreditRecordUpdate) SetAppID(u uuid.UUID) *UserCreditRecordUpdate {
	ucru.mutation.SetAppID(u)
	return ucru
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ucru *UserCreditRecordUpdate) SetNillableAppID(u *uuid.UUID) *UserCreditRecordUpdate {
	if u != nil {
		ucru.SetAppID(*u)
	}
	return ucru
}

// ClearAppID clears the value of the "app_id" field.
func (ucru *UserCreditRecordUpdate) ClearAppID() *UserCreditRecordUpdate {
	ucru.mutation.ClearAppID()
	return ucru
}

// SetUserID sets the "user_id" field.
func (ucru *UserCreditRecordUpdate) SetUserID(u uuid.UUID) *UserCreditRecordUpdate {
	ucru.mutation.SetUserID(u)
	return ucru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ucru *UserCreditRecordUpdate) SetNillableUserID(u *uuid.UUID) *UserCreditRecordUpdate {
	if u != nil {
		ucru.SetUserID(*u)
	}
	return ucru
}

// ClearUserID clears the value of the "user_id" field.
func (ucru *UserCreditRecordUpdate) ClearUserID() *UserCreditRecordUpdate {
	ucru.mutation.ClearUserID()
	return ucru
}

// SetOperationType sets the "operation_type" field.
func (ucru *UserCreditRecordUpdate) SetOperationType(s string) *UserCreditRecordUpdate {
	ucru.mutation.SetOperationType(s)
	return ucru
}

// SetNillableOperationType sets the "operation_type" field if the given value is not nil.
func (ucru *UserCreditRecordUpdate) SetNillableOperationType(s *string) *UserCreditRecordUpdate {
	if s != nil {
		ucru.SetOperationType(*s)
	}
	return ucru
}

// ClearOperationType clears the value of the "operation_type" field.
func (ucru *UserCreditRecordUpdate) ClearOperationType() *UserCreditRecordUpdate {
	ucru.mutation.ClearOperationType()
	return ucru
}

// SetCreditsChange sets the "credits_change" field.
func (ucru *UserCreditRecordUpdate) SetCreditsChange(i int32) *UserCreditRecordUpdate {
	ucru.mutation.ResetCreditsChange()
	ucru.mutation.SetCreditsChange(i)
	return ucru
}

// SetNillableCreditsChange sets the "credits_change" field if the given value is not nil.
func (ucru *UserCreditRecordUpdate) SetNillableCreditsChange(i *int32) *UserCreditRecordUpdate {
	if i != nil {
		ucru.SetCreditsChange(*i)
	}
	return ucru
}

// AddCreditsChange adds i to the "credits_change" field.
func (ucru *UserCreditRecordUpdate) AddCreditsChange(i int32) *UserCreditRecordUpdate {
	ucru.mutation.AddCreditsChange(i)
	return ucru
}

// ClearCreditsChange clears the value of the "credits_change" field.
func (ucru *UserCreditRecordUpdate) ClearCreditsChange() *UserCreditRecordUpdate {
	ucru.mutation.ClearCreditsChange()
	return ucru
}

// SetExtra sets the "extra" field.
func (ucru *UserCreditRecordUpdate) SetExtra(s string) *UserCreditRecordUpdate {
	ucru.mutation.SetExtra(s)
	return ucru
}

// SetNillableExtra sets the "extra" field if the given value is not nil.
func (ucru *UserCreditRecordUpdate) SetNillableExtra(s *string) *UserCreditRecordUpdate {
	if s != nil {
		ucru.SetExtra(*s)
	}
	return ucru
}

// ClearExtra clears the value of the "extra" field.
func (ucru *UserCreditRecordUpdate) ClearExtra() *UserCreditRecordUpdate {
	ucru.mutation.ClearExtra()
	return ucru
}

// Mutation returns the UserCreditRecordMutation object of the builder.
func (ucru *UserCreditRecordUpdate) Mutation() *UserCreditRecordMutation {
	return ucru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ucru *UserCreditRecordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ucru.sqlSave, ucru.mutation, ucru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucru *UserCreditRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := ucru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ucru *UserCreditRecordUpdate) Exec(ctx context.Context) error {
	_, err := ucru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucru *UserCreditRecordUpdate) ExecX(ctx context.Context) {
	if err := ucru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ucru *UserCreditRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(usercreditrecord.Table, usercreditrecord.Columns, sqlgraph.NewFieldSpec(usercreditrecord.FieldID, field.TypeUint32))
	if ps := ucru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucru.mutation.EntID(); ok {
		_spec.SetField(usercreditrecord.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := ucru.mutation.AppID(); ok {
		_spec.SetField(usercreditrecord.FieldAppID, field.TypeUUID, value)
	}
	if ucru.mutation.AppIDCleared() {
		_spec.ClearField(usercreditrecord.FieldAppID, field.TypeUUID)
	}
	if value, ok := ucru.mutation.UserID(); ok {
		_spec.SetField(usercreditrecord.FieldUserID, field.TypeUUID, value)
	}
	if ucru.mutation.UserIDCleared() {
		_spec.ClearField(usercreditrecord.FieldUserID, field.TypeUUID)
	}
	if value, ok := ucru.mutation.OperationType(); ok {
		_spec.SetField(usercreditrecord.FieldOperationType, field.TypeString, value)
	}
	if ucru.mutation.OperationTypeCleared() {
		_spec.ClearField(usercreditrecord.FieldOperationType, field.TypeString)
	}
	if value, ok := ucru.mutation.CreditsChange(); ok {
		_spec.SetField(usercreditrecord.FieldCreditsChange, field.TypeInt32, value)
	}
	if value, ok := ucru.mutation.AddedCreditsChange(); ok {
		_spec.AddField(usercreditrecord.FieldCreditsChange, field.TypeInt32, value)
	}
	if ucru.mutation.CreditsChangeCleared() {
		_spec.ClearField(usercreditrecord.FieldCreditsChange, field.TypeInt32)
	}
	if value, ok := ucru.mutation.Extra(); ok {
		_spec.SetField(usercreditrecord.FieldExtra, field.TypeString, value)
	}
	if ucru.mutation.ExtraCleared() {
		_spec.ClearField(usercreditrecord.FieldExtra, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ucru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercreditrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ucru.mutation.done = true
	return n, nil
}

// UserCreditRecordUpdateOne is the builder for updating a single UserCreditRecord entity.
type UserCreditRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserCreditRecordMutation
}

// SetEntID sets the "ent_id" field.
func (ucruo *UserCreditRecordUpdateOne) SetEntID(u uuid.UUID) *UserCreditRecordUpdateOne {
	ucruo.mutation.SetEntID(u)
	return ucruo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ucruo *UserCreditRecordUpdateOne) SetNillableEntID(u *uuid.UUID) *UserCreditRecordUpdateOne {
	if u != nil {
		ucruo.SetEntID(*u)
	}
	return ucruo
}

// SetAppID sets the "app_id" field.
func (ucruo *UserCreditRecordUpdateOne) SetAppID(u uuid.UUID) *UserCreditRecordUpdateOne {
	ucruo.mutation.SetAppID(u)
	return ucruo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ucruo *UserCreditRecordUpdateOne) SetNillableAppID(u *uuid.UUID) *UserCreditRecordUpdateOne {
	if u != nil {
		ucruo.SetAppID(*u)
	}
	return ucruo
}

// ClearAppID clears the value of the "app_id" field.
func (ucruo *UserCreditRecordUpdateOne) ClearAppID() *UserCreditRecordUpdateOne {
	ucruo.mutation.ClearAppID()
	return ucruo
}

// SetUserID sets the "user_id" field.
func (ucruo *UserCreditRecordUpdateOne) SetUserID(u uuid.UUID) *UserCreditRecordUpdateOne {
	ucruo.mutation.SetUserID(u)
	return ucruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ucruo *UserCreditRecordUpdateOne) SetNillableUserID(u *uuid.UUID) *UserCreditRecordUpdateOne {
	if u != nil {
		ucruo.SetUserID(*u)
	}
	return ucruo
}

// ClearUserID clears the value of the "user_id" field.
func (ucruo *UserCreditRecordUpdateOne) ClearUserID() *UserCreditRecordUpdateOne {
	ucruo.mutation.ClearUserID()
	return ucruo
}

// SetOperationType sets the "operation_type" field.
func (ucruo *UserCreditRecordUpdateOne) SetOperationType(s string) *UserCreditRecordUpdateOne {
	ucruo.mutation.SetOperationType(s)
	return ucruo
}

// SetNillableOperationType sets the "operation_type" field if the given value is not nil.
func (ucruo *UserCreditRecordUpdateOne) SetNillableOperationType(s *string) *UserCreditRecordUpdateOne {
	if s != nil {
		ucruo.SetOperationType(*s)
	}
	return ucruo
}

// ClearOperationType clears the value of the "operation_type" field.
func (ucruo *UserCreditRecordUpdateOne) ClearOperationType() *UserCreditRecordUpdateOne {
	ucruo.mutation.ClearOperationType()
	return ucruo
}

// SetCreditsChange sets the "credits_change" field.
func (ucruo *UserCreditRecordUpdateOne) SetCreditsChange(i int32) *UserCreditRecordUpdateOne {
	ucruo.mutation.ResetCreditsChange()
	ucruo.mutation.SetCreditsChange(i)
	return ucruo
}

// SetNillableCreditsChange sets the "credits_change" field if the given value is not nil.
func (ucruo *UserCreditRecordUpdateOne) SetNillableCreditsChange(i *int32) *UserCreditRecordUpdateOne {
	if i != nil {
		ucruo.SetCreditsChange(*i)
	}
	return ucruo
}

// AddCreditsChange adds i to the "credits_change" field.
func (ucruo *UserCreditRecordUpdateOne) AddCreditsChange(i int32) *UserCreditRecordUpdateOne {
	ucruo.mutation.AddCreditsChange(i)
	return ucruo
}

// ClearCreditsChange clears the value of the "credits_change" field.
func (ucruo *UserCreditRecordUpdateOne) ClearCreditsChange() *UserCreditRecordUpdateOne {
	ucruo.mutation.ClearCreditsChange()
	return ucruo
}

// SetExtra sets the "extra" field.
func (ucruo *UserCreditRecordUpdateOne) SetExtra(s string) *UserCreditRecordUpdateOne {
	ucruo.mutation.SetExtra(s)
	return ucruo
}

// SetNillableExtra sets the "extra" field if the given value is not nil.
func (ucruo *UserCreditRecordUpdateOne) SetNillableExtra(s *string) *UserCreditRecordUpdateOne {
	if s != nil {
		ucruo.SetExtra(*s)
	}
	return ucruo
}

// ClearExtra clears the value of the "extra" field.
func (ucruo *UserCreditRecordUpdateOne) ClearExtra() *UserCreditRecordUpdateOne {
	ucruo.mutation.ClearExtra()
	return ucruo
}

// Mutation returns the UserCreditRecordMutation object of the builder.
func (ucruo *UserCreditRecordUpdateOne) Mutation() *UserCreditRecordMutation {
	return ucruo.mutation
}

// Where appends a list predicates to the UserCreditRecordUpdate builder.
func (ucruo *UserCreditRecordUpdateOne) Where(ps ...predicate.UserCreditRecord) *UserCreditRecordUpdateOne {
	ucruo.mutation.Where(ps...)
	return ucruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ucruo *UserCreditRecordUpdateOne) Select(field string, fields ...string) *UserCreditRecordUpdateOne {
	ucruo.fields = append([]string{field}, fields...)
	return ucruo
}

// Save executes the query and returns the updated UserCreditRecord entity.
func (ucruo *UserCreditRecordUpdateOne) Save(ctx context.Context) (*UserCreditRecord, error) {
	return withHooks(ctx, ucruo.sqlSave, ucruo.mutation, ucruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucruo *UserCreditRecordUpdateOne) SaveX(ctx context.Context) *UserCreditRecord {
	node, err := ucruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ucruo *UserCreditRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := ucruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucruo *UserCreditRecordUpdateOne) ExecX(ctx context.Context) {
	if err := ucruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ucruo *UserCreditRecordUpdateOne) sqlSave(ctx context.Context) (_node *UserCreditRecord, err error) {
	_spec := sqlgraph.NewUpdateSpec(usercreditrecord.Table, usercreditrecord.Columns, sqlgraph.NewFieldSpec(usercreditrecord.FieldID, field.TypeUint32))
	id, ok := ucruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "UserCreditRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ucruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usercreditrecord.FieldID)
		for _, f := range fields {
			if !usercreditrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != usercreditrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ucruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucruo.mutation.EntID(); ok {
		_spec.SetField(usercreditrecord.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := ucruo.mutation.AppID(); ok {
		_spec.SetField(usercreditrecord.FieldAppID, field.TypeUUID, value)
	}
	if ucruo.mutation.AppIDCleared() {
		_spec.ClearField(usercreditrecord.FieldAppID, field.TypeUUID)
	}
	if value, ok := ucruo.mutation.UserID(); ok {
		_spec.SetField(usercreditrecord.FieldUserID, field.TypeUUID, value)
	}
	if ucruo.mutation.UserIDCleared() {
		_spec.ClearField(usercreditrecord.FieldUserID, field.TypeUUID)
	}
	if value, ok := ucruo.mutation.OperationType(); ok {
		_spec.SetField(usercreditrecord.FieldOperationType, field.TypeString, value)
	}
	if ucruo.mutation.OperationTypeCleared() {
		_spec.ClearField(usercreditrecord.FieldOperationType, field.TypeString)
	}
	if value, ok := ucruo.mutation.CreditsChange(); ok {
		_spec.SetField(usercreditrecord.FieldCreditsChange, field.TypeInt32, value)
	}
	if value, ok := ucruo.mutation.AddedCreditsChange(); ok {
		_spec.AddField(usercreditrecord.FieldCreditsChange, field.TypeInt32, value)
	}
	if ucruo.mutation.CreditsChangeCleared() {
		_spec.ClearField(usercreditrecord.FieldCreditsChange, field.TypeInt32)
	}
	if value, ok := ucruo.mutation.Extra(); ok {
		_spec.SetField(usercreditrecord.FieldExtra, field.TypeString, value)
	}
	if ucruo.mutation.ExtraCleared() {
		_spec.ClearField(usercreditrecord.FieldExtra, field.TypeString)
	}
	_node = &UserCreditRecord{config: ucruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ucruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercreditrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ucruo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/billing/db/ent/generated/subscription"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// SubscriptionCreate is the builder for creating a Subscription entity.
type SubscriptionCreate struct {
	config
	mutation *SubscriptionMutation
	hooks    []Hook
}

// SetEntID sets the "ent_id" field.
func (sc *SubscriptionCreate) SetEntID(u uuid.UUID) *SubscriptionCreate {
	sc.mutation.SetEntID(u)
	return sc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableEntID(u *uuid.UUID) *SubscriptionCreate {
	if u != nil {
		sc.SetEntID(*u)
	}
	return sc
}

// SetAppID sets the "app_id" field.
func (sc *SubscriptionCreate) SetAppID(u uuid.UUID) *SubscriptionCreate {
	sc.mutation.SetAppID(u)
	return sc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableAppID(u *uuid.UUID) *SubscriptionCreate {
	if u != nil {
		sc.SetAppID(*u)
	}
	return sc
}

// SetPackageName sets the "package_name" field.
func (sc *SubscriptionCreate) SetPackageName(s string) *SubscriptionCreate {
	sc.mutation.SetPackageName(s)
	return sc
}

// SetNillablePackageName sets the "package_name" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillablePackageName(s *string) *SubscriptionCreate {
	if s != nil {
		sc.SetPackageName(*s)
	}
	return sc
}

// SetUsdPrice sets the "usd_price" field.
func (sc *SubscriptionCreate) SetUsdPrice(d decimal.Decimal) *SubscriptionCreate {
	sc.mutation.SetUsdPrice(d)
	return sc
}

// SetNillableUsdPrice sets the "usd_price" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableUsdPrice(d *decimal.Decimal) *SubscriptionCreate {
	if d != nil {
		sc.SetUsdPrice(*d)
	}
	return sc
}

// SetDescription sets the "description" field.
func (sc *SubscriptionCreate) SetDescription(s string) *SubscriptionCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableDescription(s *string) *SubscriptionCreate {
	if s != nil {
		sc.SetDescription(*s)
	}
	return sc
}

// SetSortOrder sets the "sort_order" field.
func (sc *SubscriptionCreate) SetSortOrder(u uint32) *SubscriptionCreate {
	sc.mutation.SetSortOrder(u)
	return sc
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableSortOrder(u *uint32) *SubscriptionCreate {
	if u != nil {
		sc.SetSortOrder(*u)
	}
	return sc
}

// SetPackageType sets the "package_type" field.
func (sc *SubscriptionCreate) SetPackageType(s string) *SubscriptionCreate {
	sc.mutation.SetPackageType(s)
	return sc
}

// SetNillablePackageType sets the "package_type" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillablePackageType(s *string) *SubscriptionCreate {
	if s != nil {
		sc.SetPackageType(*s)
	}
	return sc
}

// SetCredit sets the "credit" field.
func (sc *SubscriptionCreate) SetCredit(u uint32) *SubscriptionCreate {
	sc.mutation.SetCredit(u)
	return sc
}

// SetNillableCredit sets the "credit" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableCredit(u *uint32) *SubscriptionCreate {
	if u != nil {
		sc.SetCredit(*u)
	}
	return sc
}

// SetResetType sets the "reset_type" field.
func (sc *SubscriptionCreate) SetResetType(s string) *SubscriptionCreate {
	sc.mutation.SetResetType(s)
	return sc
}

// SetNillableResetType sets the "reset_type" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableResetType(s *string) *SubscriptionCreate {
	if s != nil {
		sc.SetResetType(*s)
	}
	return sc
}

// SetQPSLimit sets the "qps_limit" field.
func (sc *SubscriptionCreate) SetQPSLimit(u uint32) *SubscriptionCreate {
	sc.mutation.SetQPSLimit(u)
	return sc
}

// SetNillableQPSLimit sets the "qps_limit" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableQPSLimit(u *uint32) *SubscriptionCreate {
	if u != nil {
		sc.SetQPSLimit(*u)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SubscriptionCreate) SetID(u uint32) *SubscriptionCreate {
	sc.mutation.SetID(u)
	return sc
}

// Mutation returns the SubscriptionMutation object of the builder.
func (sc *SubscriptionCreate) Mutation() *SubscriptionMutation {
	return sc.mutation
}

// Save creates the Subscription in the database.
func (sc *SubscriptionCreate) Save(ctx context.Context) (*Subscription, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SubscriptionCreate) SaveX(ctx context.Context) *Subscription {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SubscriptionCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SubscriptionCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SubscriptionCreate) defaults() {
	if _, ok := sc.mutation.EntID(); !ok {
		v := subscription.DefaultEntID()
		sc.mutation.SetEntID(v)
	}
	if _, ok := sc.mutation.AppID(); !ok {
		v := subscription.DefaultAppID()
		sc.mutation.SetAppID(v)
	}
	if _, ok := sc.mutation.PackageName(); !ok {
		v := subscription.DefaultPackageName
		sc.mutation.SetPackageName(v)
	}
	if _, ok := sc.mutation.UsdPrice(); !ok {
		v := subscription.DefaultUsdPrice
		sc.mutation.SetUsdPrice(v)
	}
	if _, ok := sc.mutation.Description(); !ok {
		v := subscription.DefaultDescription
		sc.mutation.SetDescription(v)
	}
	if _, ok := sc.mutation.SortOrder(); !ok {
		v := subscription.DefaultSortOrder()
		sc.mutation.SetSortOrder(v)
	}
	if _, ok := sc.mutation.PackageType(); !ok {
		v := subscription.DefaultPackageType
		sc.mutation.SetPackageType(v)
	}
	if _, ok := sc.mutation.Credit(); !ok {
		v := subscription.DefaultCredit()
		sc.mutation.SetCredit(v)
	}
	if _, ok := sc.mutation.ResetType(); !ok {
		v := subscription.DefaultResetType
		sc.mutation.SetResetType(v)
	}
	if _, ok := sc.mutation.QPSLimit(); !ok {
		v := subscription.DefaultQPSLimit()
		sc.mutation.SetQPSLimit(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SubscriptionCreate) check() error {
	if _, ok := sc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "Subscription.ent_id"`)}
	}
	return nil
}

func (sc *SubscriptionCreate) sqlSave(ctx context.Context) (*Subscription, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SubscriptionCreate) createSpec() (*Subscription, *sqlgraph.CreateSpec) {
	var (
		_node = &Subscription{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(subscription.Table, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUint32))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.EntID(); ok {
		_spec.SetField(subscription.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := sc.mutation.AppID(); ok {
		_spec.SetField(subscription.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := sc.mutation.PackageName(); ok {
		_spec.SetField(subscription.FieldPackageName, field.TypeString, value)
		_node.PackageName = value
	}
	if value, ok := sc.mutation.UsdPrice(); ok {
		_spec.SetField(subscription.FieldUsdPrice, field.TypeOther, value)
		_node.UsdPrice = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.SetField(subscription.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sc.mutation.SortOrder(); ok {
		_spec.SetField(subscription.FieldSortOrder, field.TypeUint32, value)
		_node.SortOrder = value
	}
	if value, ok := sc.mutation.PackageType(); ok {
		_spec.SetField(subscription.FieldPackageType, field.TypeString, value)
		_node.PackageType = value
	}
	if value, ok := sc.mutation.Credit(); ok {
		_spec.SetField(subscription.FieldCredit, field.TypeUint32, value)
		_node.Credit = value
	}
	if value, ok := sc.mutation.ResetType(); ok {
		_spec.SetField(subscription.FieldResetType, field.TypeString, value)
		_node.ResetType = value
	}
	if value, ok := sc.mutation.QPSLimit(); ok {
		_spec.SetField(subscription.FieldQPSLimit, field.TypeUint32, value)
		_node.QPSLimit = value
	}
	return _node, _spec
}

// SubscriptionCreateBulk is the builder for creating many Subscription entities in bulk.
type SubscriptionCreateBulk struct {
	config
	err      error
	builders []*SubscriptionCreate
}

// Save creates the Subscription entities in the database.
func (scb *SubscriptionCreateBulk) Save(ctx context.Context) ([]*Subscription, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Subscription, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SubscriptionCreateBulk) SaveX(ctx context.Context) []*Subscription {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SubscriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SubscriptionCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

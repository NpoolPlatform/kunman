// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/ledger/db/ent/generated/ledgerlock"
	"github.com/NpoolPlatform/kunman/middleware/ledger/db/ent/generated/predicate"
)

// LedgerLockDelete is the builder for deleting a LedgerLock entity.
type LedgerLockDelete struct {
	config
	hooks    []Hook
	mutation *LedgerLockMutation
}

// Where appends a list predicates to the LedgerLockDelete builder.
func (lld *LedgerLockDelete) Where(ps ...predicate.LedgerLock) *LedgerLockDelete {
	lld.mutation.Where(ps...)
	return lld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (lld *LedgerLockDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, lld.sqlExec, lld.mutation, lld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (lld *LedgerLockDelete) ExecX(ctx context.Context) int {
	n, err := lld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (lld *LedgerLockDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(ledgerlock.Table, sqlgraph.NewFieldSpec(ledgerlock.FieldID, field.TypeUint32))
	if ps := lld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, lld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	lld.mutation.done = true
	return affected, err
}

// LedgerLockDeleteOne is the builder for deleting a single LedgerLock entity.
type LedgerLockDeleteOne struct {
	lld *LedgerLockDelete
}

// Where appends a list predicates to the LedgerLockDelete builder.
func (lldo *LedgerLockDeleteOne) Where(ps ...predicate.LedgerLock) *LedgerLockDeleteOne {
	lldo.lld.mutation.Where(ps...)
	return lldo
}

// Exec executes the deletion query.
func (lldo *LedgerLockDeleteOne) Exec(ctx context.Context) error {
	n, err := lldo.lld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{ledgerlock.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (lldo *LedgerLockDeleteOne) ExecX(ctx context.Context) {
	if err := lldo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ledgerlock

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/ledger/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldEQ(FieldDeletedAt, v))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldEQ(FieldEntID, v))
}

// LedgerID applies equality check predicate on the "ledger_id" field. It's identical to LedgerIDEQ.
func LedgerID(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldEQ(FieldLedgerID, v))
}

// StatementID applies equality check predicate on the "statement_id" field. It's identical to StatementIDEQ.
func StatementID(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldEQ(FieldStatementID, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v decimal.Decimal) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldEQ(FieldAmount, v))
}

// LockState applies equality check predicate on the "lock_state" field. It's identical to LockStateEQ.
func LockState(v string) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldEQ(FieldLockState, v))
}

// ExLockID applies equality check predicate on the "ex_lock_id" field. It's identical to ExLockIDEQ.
func ExLockID(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldEQ(FieldExLockID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldLTE(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldLTE(FieldEntID, v))
}

// LedgerIDEQ applies the EQ predicate on the "ledger_id" field.
func LedgerIDEQ(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldEQ(FieldLedgerID, v))
}

// LedgerIDNEQ applies the NEQ predicate on the "ledger_id" field.
func LedgerIDNEQ(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldNEQ(FieldLedgerID, v))
}

// LedgerIDIn applies the In predicate on the "ledger_id" field.
func LedgerIDIn(vs ...uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldIn(FieldLedgerID, vs...))
}

// LedgerIDNotIn applies the NotIn predicate on the "ledger_id" field.
func LedgerIDNotIn(vs ...uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldNotIn(FieldLedgerID, vs...))
}

// LedgerIDGT applies the GT predicate on the "ledger_id" field.
func LedgerIDGT(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldGT(FieldLedgerID, v))
}

// LedgerIDGTE applies the GTE predicate on the "ledger_id" field.
func LedgerIDGTE(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldGTE(FieldLedgerID, v))
}

// LedgerIDLT applies the LT predicate on the "ledger_id" field.
func LedgerIDLT(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldLT(FieldLedgerID, v))
}

// LedgerIDLTE applies the LTE predicate on the "ledger_id" field.
func LedgerIDLTE(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldLTE(FieldLedgerID, v))
}

// LedgerIDIsNil applies the IsNil predicate on the "ledger_id" field.
func LedgerIDIsNil() predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldIsNull(FieldLedgerID))
}

// LedgerIDNotNil applies the NotNil predicate on the "ledger_id" field.
func LedgerIDNotNil() predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldNotNull(FieldLedgerID))
}

// StatementIDEQ applies the EQ predicate on the "statement_id" field.
func StatementIDEQ(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldEQ(FieldStatementID, v))
}

// StatementIDNEQ applies the NEQ predicate on the "statement_id" field.
func StatementIDNEQ(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldNEQ(FieldStatementID, v))
}

// StatementIDIn applies the In predicate on the "statement_id" field.
func StatementIDIn(vs ...uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldIn(FieldStatementID, vs...))
}

// StatementIDNotIn applies the NotIn predicate on the "statement_id" field.
func StatementIDNotIn(vs ...uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldNotIn(FieldStatementID, vs...))
}

// StatementIDGT applies the GT predicate on the "statement_id" field.
func StatementIDGT(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldGT(FieldStatementID, v))
}

// StatementIDGTE applies the GTE predicate on the "statement_id" field.
func StatementIDGTE(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldGTE(FieldStatementID, v))
}

// StatementIDLT applies the LT predicate on the "statement_id" field.
func StatementIDLT(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldLT(FieldStatementID, v))
}

// StatementIDLTE applies the LTE predicate on the "statement_id" field.
func StatementIDLTE(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldLTE(FieldStatementID, v))
}

// StatementIDIsNil applies the IsNil predicate on the "statement_id" field.
func StatementIDIsNil() predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldIsNull(FieldStatementID))
}

// StatementIDNotNil applies the NotNil predicate on the "statement_id" field.
func StatementIDNotNil() predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldNotNull(FieldStatementID))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v decimal.Decimal) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v decimal.Decimal) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...decimal.Decimal) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...decimal.Decimal) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v decimal.Decimal) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v decimal.Decimal) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v decimal.Decimal) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v decimal.Decimal) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldLTE(FieldAmount, v))
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldIsNull(FieldAmount))
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldNotNull(FieldAmount))
}

// LockStateEQ applies the EQ predicate on the "lock_state" field.
func LockStateEQ(v string) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldEQ(FieldLockState, v))
}

// LockStateNEQ applies the NEQ predicate on the "lock_state" field.
func LockStateNEQ(v string) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldNEQ(FieldLockState, v))
}

// LockStateIn applies the In predicate on the "lock_state" field.
func LockStateIn(vs ...string) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldIn(FieldLockState, vs...))
}

// LockStateNotIn applies the NotIn predicate on the "lock_state" field.
func LockStateNotIn(vs ...string) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldNotIn(FieldLockState, vs...))
}

// LockStateGT applies the GT predicate on the "lock_state" field.
func LockStateGT(v string) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldGT(FieldLockState, v))
}

// LockStateGTE applies the GTE predicate on the "lock_state" field.
func LockStateGTE(v string) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldGTE(FieldLockState, v))
}

// LockStateLT applies the LT predicate on the "lock_state" field.
func LockStateLT(v string) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldLT(FieldLockState, v))
}

// LockStateLTE applies the LTE predicate on the "lock_state" field.
func LockStateLTE(v string) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldLTE(FieldLockState, v))
}

// LockStateContains applies the Contains predicate on the "lock_state" field.
func LockStateContains(v string) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldContains(FieldLockState, v))
}

// LockStateHasPrefix applies the HasPrefix predicate on the "lock_state" field.
func LockStateHasPrefix(v string) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldHasPrefix(FieldLockState, v))
}

// LockStateHasSuffix applies the HasSuffix predicate on the "lock_state" field.
func LockStateHasSuffix(v string) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldHasSuffix(FieldLockState, v))
}

// LockStateIsNil applies the IsNil predicate on the "lock_state" field.
func LockStateIsNil() predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldIsNull(FieldLockState))
}

// LockStateNotNil applies the NotNil predicate on the "lock_state" field.
func LockStateNotNil() predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldNotNull(FieldLockState))
}

// LockStateEqualFold applies the EqualFold predicate on the "lock_state" field.
func LockStateEqualFold(v string) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldEqualFold(FieldLockState, v))
}

// LockStateContainsFold applies the ContainsFold predicate on the "lock_state" field.
func LockStateContainsFold(v string) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldContainsFold(FieldLockState, v))
}

// ExLockIDEQ applies the EQ predicate on the "ex_lock_id" field.
func ExLockIDEQ(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldEQ(FieldExLockID, v))
}

// ExLockIDNEQ applies the NEQ predicate on the "ex_lock_id" field.
func ExLockIDNEQ(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldNEQ(FieldExLockID, v))
}

// ExLockIDIn applies the In predicate on the "ex_lock_id" field.
func ExLockIDIn(vs ...uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldIn(FieldExLockID, vs...))
}

// ExLockIDNotIn applies the NotIn predicate on the "ex_lock_id" field.
func ExLockIDNotIn(vs ...uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldNotIn(FieldExLockID, vs...))
}

// ExLockIDGT applies the GT predicate on the "ex_lock_id" field.
func ExLockIDGT(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldGT(FieldExLockID, v))
}

// ExLockIDGTE applies the GTE predicate on the "ex_lock_id" field.
func ExLockIDGTE(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldGTE(FieldExLockID, v))
}

// ExLockIDLT applies the LT predicate on the "ex_lock_id" field.
func ExLockIDLT(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldLT(FieldExLockID, v))
}

// ExLockIDLTE applies the LTE predicate on the "ex_lock_id" field.
func ExLockIDLTE(v uuid.UUID) predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldLTE(FieldExLockID, v))
}

// ExLockIDIsNil applies the IsNil predicate on the "ex_lock_id" field.
func ExLockIDIsNil() predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldIsNull(FieldExLockID))
}

// ExLockIDNotNil applies the NotNil predicate on the "ex_lock_id" field.
func ExLockIDNotNil() predicate.LedgerLock {
	return predicate.LedgerLock(sql.FieldNotNull(FieldExLockID))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LedgerLock) predicate.LedgerLock {
	return predicate.LedgerLock(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LedgerLock) predicate.LedgerLock {
	return predicate.LedgerLock(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LedgerLock) predicate.LedgerLock {
	return predicate.LedgerLock(sql.NotPredicates(p))
}

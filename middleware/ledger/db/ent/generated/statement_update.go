// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/ledger/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/ledger/db/ent/generated/statement"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// StatementUpdate is the builder for updating Statement entities.
type StatementUpdate struct {
	config
	hooks     []Hook
	mutation  *StatementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the StatementUpdate builder.
func (su *StatementUpdate) Where(ps ...predicate.Statement) *StatementUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *StatementUpdate) SetCreatedAt(u uint32) *StatementUpdate {
	su.mutation.ResetCreatedAt()
	su.mutation.SetCreatedAt(u)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *StatementUpdate) SetNillableCreatedAt(u *uint32) *StatementUpdate {
	if u != nil {
		su.SetCreatedAt(*u)
	}
	return su
}

// AddCreatedAt adds u to the "created_at" field.
func (su *StatementUpdate) AddCreatedAt(u int32) *StatementUpdate {
	su.mutation.AddCreatedAt(u)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StatementUpdate) SetUpdatedAt(u uint32) *StatementUpdate {
	su.mutation.ResetUpdatedAt()
	su.mutation.SetUpdatedAt(u)
	return su
}

// AddUpdatedAt adds u to the "updated_at" field.
func (su *StatementUpdate) AddUpdatedAt(u int32) *StatementUpdate {
	su.mutation.AddUpdatedAt(u)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *StatementUpdate) SetDeletedAt(u uint32) *StatementUpdate {
	su.mutation.ResetDeletedAt()
	su.mutation.SetDeletedAt(u)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *StatementUpdate) SetNillableDeletedAt(u *uint32) *StatementUpdate {
	if u != nil {
		su.SetDeletedAt(*u)
	}
	return su
}

// AddDeletedAt adds u to the "deleted_at" field.
func (su *StatementUpdate) AddDeletedAt(u int32) *StatementUpdate {
	su.mutation.AddDeletedAt(u)
	return su
}

// SetEntID sets the "ent_id" field.
func (su *StatementUpdate) SetEntID(u uuid.UUID) *StatementUpdate {
	su.mutation.SetEntID(u)
	return su
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (su *StatementUpdate) SetNillableEntID(u *uuid.UUID) *StatementUpdate {
	if u != nil {
		su.SetEntID(*u)
	}
	return su
}

// SetAppID sets the "app_id" field.
func (su *StatementUpdate) SetAppID(u uuid.UUID) *StatementUpdate {
	su.mutation.SetAppID(u)
	return su
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (su *StatementUpdate) SetNillableAppID(u *uuid.UUID) *StatementUpdate {
	if u != nil {
		su.SetAppID(*u)
	}
	return su
}

// ClearAppID clears the value of the "app_id" field.
func (su *StatementUpdate) ClearAppID() *StatementUpdate {
	su.mutation.ClearAppID()
	return su
}

// SetUserID sets the "user_id" field.
func (su *StatementUpdate) SetUserID(u uuid.UUID) *StatementUpdate {
	su.mutation.SetUserID(u)
	return su
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (su *StatementUpdate) SetNillableUserID(u *uuid.UUID) *StatementUpdate {
	if u != nil {
		su.SetUserID(*u)
	}
	return su
}

// ClearUserID clears the value of the "user_id" field.
func (su *StatementUpdate) ClearUserID() *StatementUpdate {
	su.mutation.ClearUserID()
	return su
}

// SetCurrencyID sets the "currency_id" field.
func (su *StatementUpdate) SetCurrencyID(u uuid.UUID) *StatementUpdate {
	su.mutation.SetCurrencyID(u)
	return su
}

// SetNillableCurrencyID sets the "currency_id" field if the given value is not nil.
func (su *StatementUpdate) SetNillableCurrencyID(u *uuid.UUID) *StatementUpdate {
	if u != nil {
		su.SetCurrencyID(*u)
	}
	return su
}

// ClearCurrencyID clears the value of the "currency_id" field.
func (su *StatementUpdate) ClearCurrencyID() *StatementUpdate {
	su.mutation.ClearCurrencyID()
	return su
}

// SetCurrencyType sets the "currency_type" field.
func (su *StatementUpdate) SetCurrencyType(s string) *StatementUpdate {
	su.mutation.SetCurrencyType(s)
	return su
}

// SetNillableCurrencyType sets the "currency_type" field if the given value is not nil.
func (su *StatementUpdate) SetNillableCurrencyType(s *string) *StatementUpdate {
	if s != nil {
		su.SetCurrencyType(*s)
	}
	return su
}

// ClearCurrencyType clears the value of the "currency_type" field.
func (su *StatementUpdate) ClearCurrencyType() *StatementUpdate {
	su.mutation.ClearCurrencyType()
	return su
}

// SetIoType sets the "io_type" field.
func (su *StatementUpdate) SetIoType(s string) *StatementUpdate {
	su.mutation.SetIoType(s)
	return su
}

// SetNillableIoType sets the "io_type" field if the given value is not nil.
func (su *StatementUpdate) SetNillableIoType(s *string) *StatementUpdate {
	if s != nil {
		su.SetIoType(*s)
	}
	return su
}

// ClearIoType clears the value of the "io_type" field.
func (su *StatementUpdate) ClearIoType() *StatementUpdate {
	su.mutation.ClearIoType()
	return su
}

// SetIoSubType sets the "io_sub_type" field.
func (su *StatementUpdate) SetIoSubType(s string) *StatementUpdate {
	su.mutation.SetIoSubType(s)
	return su
}

// SetNillableIoSubType sets the "io_sub_type" field if the given value is not nil.
func (su *StatementUpdate) SetNillableIoSubType(s *string) *StatementUpdate {
	if s != nil {
		su.SetIoSubType(*s)
	}
	return su
}

// ClearIoSubType clears the value of the "io_sub_type" field.
func (su *StatementUpdate) ClearIoSubType() *StatementUpdate {
	su.mutation.ClearIoSubType()
	return su
}

// SetAmount sets the "amount" field.
func (su *StatementUpdate) SetAmount(d decimal.Decimal) *StatementUpdate {
	su.mutation.ResetAmount()
	su.mutation.SetAmount(d)
	return su
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (su *StatementUpdate) SetNillableAmount(d *decimal.Decimal) *StatementUpdate {
	if d != nil {
		su.SetAmount(*d)
	}
	return su
}

// AddAmount adds d to the "amount" field.
func (su *StatementUpdate) AddAmount(d decimal.Decimal) *StatementUpdate {
	su.mutation.AddAmount(d)
	return su
}

// ClearAmount clears the value of the "amount" field.
func (su *StatementUpdate) ClearAmount() *StatementUpdate {
	su.mutation.ClearAmount()
	return su
}

// SetIoExtra sets the "io_extra" field.
func (su *StatementUpdate) SetIoExtra(s string) *StatementUpdate {
	su.mutation.SetIoExtra(s)
	return su
}

// SetNillableIoExtra sets the "io_extra" field if the given value is not nil.
func (su *StatementUpdate) SetNillableIoExtra(s *string) *StatementUpdate {
	if s != nil {
		su.SetIoExtra(*s)
	}
	return su
}

// ClearIoExtra clears the value of the "io_extra" field.
func (su *StatementUpdate) ClearIoExtra() *StatementUpdate {
	su.mutation.ClearIoExtra()
	return su
}

// SetIoExtraV1 sets the "io_extra_v1" field.
func (su *StatementUpdate) SetIoExtraV1(s string) *StatementUpdate {
	su.mutation.SetIoExtraV1(s)
	return su
}

// SetNillableIoExtraV1 sets the "io_extra_v1" field if the given value is not nil.
func (su *StatementUpdate) SetNillableIoExtraV1(s *string) *StatementUpdate {
	if s != nil {
		su.SetIoExtraV1(*s)
	}
	return su
}

// ClearIoExtraV1 clears the value of the "io_extra_v1" field.
func (su *StatementUpdate) ClearIoExtraV1() *StatementUpdate {
	su.mutation.ClearIoExtraV1()
	return su
}

// Mutation returns the StatementMutation object of the builder.
func (su *StatementUpdate) Mutation() *StatementMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StatementUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StatementUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StatementUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StatementUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StatementUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := statement.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StatementUpdate) check() error {
	if v, ok := su.mutation.IoExtra(); ok {
		if err := statement.IoExtraValidator(v); err != nil {
			return &ValidationError{Name: "io_extra", err: fmt.Errorf(`generated: validator failed for field "Statement.io_extra": %w`, err)}
		}
	}
	if v, ok := su.mutation.IoExtraV1(); ok {
		if err := statement.IoExtraV1Validator(v); err != nil {
			return &ValidationError{Name: "io_extra_v1", err: fmt.Errorf(`generated: validator failed for field "Statement.io_extra_v1": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *StatementUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StatementUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *StatementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(statement.Table, statement.Columns, sqlgraph.NewFieldSpec(statement.FieldID, field.TypeUint32))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(statement.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedCreatedAt(); ok {
		_spec.AddField(statement.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(statement.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(statement.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(statement.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedDeletedAt(); ok {
		_spec.AddField(statement.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.EntID(); ok {
		_spec.SetField(statement.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := su.mutation.AppID(); ok {
		_spec.SetField(statement.FieldAppID, field.TypeUUID, value)
	}
	if su.mutation.AppIDCleared() {
		_spec.ClearField(statement.FieldAppID, field.TypeUUID)
	}
	if value, ok := su.mutation.UserID(); ok {
		_spec.SetField(statement.FieldUserID, field.TypeUUID, value)
	}
	if su.mutation.UserIDCleared() {
		_spec.ClearField(statement.FieldUserID, field.TypeUUID)
	}
	if value, ok := su.mutation.CurrencyID(); ok {
		_spec.SetField(statement.FieldCurrencyID, field.TypeUUID, value)
	}
	if su.mutation.CurrencyIDCleared() {
		_spec.ClearField(statement.FieldCurrencyID, field.TypeUUID)
	}
	if value, ok := su.mutation.CurrencyType(); ok {
		_spec.SetField(statement.FieldCurrencyType, field.TypeString, value)
	}
	if su.mutation.CurrencyTypeCleared() {
		_spec.ClearField(statement.FieldCurrencyType, field.TypeString)
	}
	if value, ok := su.mutation.IoType(); ok {
		_spec.SetField(statement.FieldIoType, field.TypeString, value)
	}
	if su.mutation.IoTypeCleared() {
		_spec.ClearField(statement.FieldIoType, field.TypeString)
	}
	if value, ok := su.mutation.IoSubType(); ok {
		_spec.SetField(statement.FieldIoSubType, field.TypeString, value)
	}
	if su.mutation.IoSubTypeCleared() {
		_spec.ClearField(statement.FieldIoSubType, field.TypeString)
	}
	if value, ok := su.mutation.Amount(); ok {
		_spec.SetField(statement.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedAmount(); ok {
		_spec.AddField(statement.FieldAmount, field.TypeFloat64, value)
	}
	if su.mutation.AmountCleared() {
		_spec.ClearField(statement.FieldAmount, field.TypeFloat64)
	}
	if value, ok := su.mutation.IoExtra(); ok {
		_spec.SetField(statement.FieldIoExtra, field.TypeString, value)
	}
	if su.mutation.IoExtraCleared() {
		_spec.ClearField(statement.FieldIoExtra, field.TypeString)
	}
	if value, ok := su.mutation.IoExtraV1(); ok {
		_spec.SetField(statement.FieldIoExtraV1, field.TypeString, value)
	}
	if su.mutation.IoExtraV1Cleared() {
		_spec.ClearField(statement.FieldIoExtraV1, field.TypeString)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StatementUpdateOne is the builder for updating a single Statement entity.
type StatementUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *StatementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (suo *StatementUpdateOne) SetCreatedAt(u uint32) *StatementUpdateOne {
	suo.mutation.ResetCreatedAt()
	suo.mutation.SetCreatedAt(u)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableCreatedAt(u *uint32) *StatementUpdateOne {
	if u != nil {
		suo.SetCreatedAt(*u)
	}
	return suo
}

// AddCreatedAt adds u to the "created_at" field.
func (suo *StatementUpdateOne) AddCreatedAt(u int32) *StatementUpdateOne {
	suo.mutation.AddCreatedAt(u)
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StatementUpdateOne) SetUpdatedAt(u uint32) *StatementUpdateOne {
	suo.mutation.ResetUpdatedAt()
	suo.mutation.SetUpdatedAt(u)
	return suo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (suo *StatementUpdateOne) AddUpdatedAt(u int32) *StatementUpdateOne {
	suo.mutation.AddUpdatedAt(u)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *StatementUpdateOne) SetDeletedAt(u uint32) *StatementUpdateOne {
	suo.mutation.ResetDeletedAt()
	suo.mutation.SetDeletedAt(u)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableDeletedAt(u *uint32) *StatementUpdateOne {
	if u != nil {
		suo.SetDeletedAt(*u)
	}
	return suo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (suo *StatementUpdateOne) AddDeletedAt(u int32) *StatementUpdateOne {
	suo.mutation.AddDeletedAt(u)
	return suo
}

// SetEntID sets the "ent_id" field.
func (suo *StatementUpdateOne) SetEntID(u uuid.UUID) *StatementUpdateOne {
	suo.mutation.SetEntID(u)
	return suo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableEntID(u *uuid.UUID) *StatementUpdateOne {
	if u != nil {
		suo.SetEntID(*u)
	}
	return suo
}

// SetAppID sets the "app_id" field.
func (suo *StatementUpdateOne) SetAppID(u uuid.UUID) *StatementUpdateOne {
	suo.mutation.SetAppID(u)
	return suo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableAppID(u *uuid.UUID) *StatementUpdateOne {
	if u != nil {
		suo.SetAppID(*u)
	}
	return suo
}

// ClearAppID clears the value of the "app_id" field.
func (suo *StatementUpdateOne) ClearAppID() *StatementUpdateOne {
	suo.mutation.ClearAppID()
	return suo
}

// SetUserID sets the "user_id" field.
func (suo *StatementUpdateOne) SetUserID(u uuid.UUID) *StatementUpdateOne {
	suo.mutation.SetUserID(u)
	return suo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableUserID(u *uuid.UUID) *StatementUpdateOne {
	if u != nil {
		suo.SetUserID(*u)
	}
	return suo
}

// ClearUserID clears the value of the "user_id" field.
func (suo *StatementUpdateOne) ClearUserID() *StatementUpdateOne {
	suo.mutation.ClearUserID()
	return suo
}

// SetCurrencyID sets the "currency_id" field.
func (suo *StatementUpdateOne) SetCurrencyID(u uuid.UUID) *StatementUpdateOne {
	suo.mutation.SetCurrencyID(u)
	return suo
}

// SetNillableCurrencyID sets the "currency_id" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableCurrencyID(u *uuid.UUID) *StatementUpdateOne {
	if u != nil {
		suo.SetCurrencyID(*u)
	}
	return suo
}

// ClearCurrencyID clears the value of the "currency_id" field.
func (suo *StatementUpdateOne) ClearCurrencyID() *StatementUpdateOne {
	suo.mutation.ClearCurrencyID()
	return suo
}

// SetCurrencyType sets the "currency_type" field.
func (suo *StatementUpdateOne) SetCurrencyType(s string) *StatementUpdateOne {
	suo.mutation.SetCurrencyType(s)
	return suo
}

// SetNillableCurrencyType sets the "currency_type" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableCurrencyType(s *string) *StatementUpdateOne {
	if s != nil {
		suo.SetCurrencyType(*s)
	}
	return suo
}

// ClearCurrencyType clears the value of the "currency_type" field.
func (suo *StatementUpdateOne) ClearCurrencyType() *StatementUpdateOne {
	suo.mutation.ClearCurrencyType()
	return suo
}

// SetIoType sets the "io_type" field.
func (suo *StatementUpdateOne) SetIoType(s string) *StatementUpdateOne {
	suo.mutation.SetIoType(s)
	return suo
}

// SetNillableIoType sets the "io_type" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableIoType(s *string) *StatementUpdateOne {
	if s != nil {
		suo.SetIoType(*s)
	}
	return suo
}

// ClearIoType clears the value of the "io_type" field.
func (suo *StatementUpdateOne) ClearIoType() *StatementUpdateOne {
	suo.mutation.ClearIoType()
	return suo
}

// SetIoSubType sets the "io_sub_type" field.
func (suo *StatementUpdateOne) SetIoSubType(s string) *StatementUpdateOne {
	suo.mutation.SetIoSubType(s)
	return suo
}

// SetNillableIoSubType sets the "io_sub_type" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableIoSubType(s *string) *StatementUpdateOne {
	if s != nil {
		suo.SetIoSubType(*s)
	}
	return suo
}

// ClearIoSubType clears the value of the "io_sub_type" field.
func (suo *StatementUpdateOne) ClearIoSubType() *StatementUpdateOne {
	suo.mutation.ClearIoSubType()
	return suo
}

// SetAmount sets the "amount" field.
func (suo *StatementUpdateOne) SetAmount(d decimal.Decimal) *StatementUpdateOne {
	suo.mutation.ResetAmount()
	suo.mutation.SetAmount(d)
	return suo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableAmount(d *decimal.Decimal) *StatementUpdateOne {
	if d != nil {
		suo.SetAmount(*d)
	}
	return suo
}

// AddAmount adds d to the "amount" field.
func (suo *StatementUpdateOne) AddAmount(d decimal.Decimal) *StatementUpdateOne {
	suo.mutation.AddAmount(d)
	return suo
}

// ClearAmount clears the value of the "amount" field.
func (suo *StatementUpdateOne) ClearAmount() *StatementUpdateOne {
	suo.mutation.ClearAmount()
	return suo
}

// SetIoExtra sets the "io_extra" field.
func (suo *StatementUpdateOne) SetIoExtra(s string) *StatementUpdateOne {
	suo.mutation.SetIoExtra(s)
	return suo
}

// SetNillableIoExtra sets the "io_extra" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableIoExtra(s *string) *StatementUpdateOne {
	if s != nil {
		suo.SetIoExtra(*s)
	}
	return suo
}

// ClearIoExtra clears the value of the "io_extra" field.
func (suo *StatementUpdateOne) ClearIoExtra() *StatementUpdateOne {
	suo.mutation.ClearIoExtra()
	return suo
}

// SetIoExtraV1 sets the "io_extra_v1" field.
func (suo *StatementUpdateOne) SetIoExtraV1(s string) *StatementUpdateOne {
	suo.mutation.SetIoExtraV1(s)
	return suo
}

// SetNillableIoExtraV1 sets the "io_extra_v1" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableIoExtraV1(s *string) *StatementUpdateOne {
	if s != nil {
		suo.SetIoExtraV1(*s)
	}
	return suo
}

// ClearIoExtraV1 clears the value of the "io_extra_v1" field.
func (suo *StatementUpdateOne) ClearIoExtraV1() *StatementUpdateOne {
	suo.mutation.ClearIoExtraV1()
	return suo
}

// Mutation returns the StatementMutation object of the builder.
func (suo *StatementUpdateOne) Mutation() *StatementMutation {
	return suo.mutation
}

// Where appends a list predicates to the StatementUpdate builder.
func (suo *StatementUpdateOne) Where(ps ...predicate.Statement) *StatementUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StatementUpdateOne) Select(field string, fields ...string) *StatementUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Statement entity.
func (suo *StatementUpdateOne) Save(ctx context.Context) (*Statement, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StatementUpdateOne) SaveX(ctx context.Context) *Statement {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StatementUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StatementUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StatementUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := statement.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StatementUpdateOne) check() error {
	if v, ok := suo.mutation.IoExtra(); ok {
		if err := statement.IoExtraValidator(v); err != nil {
			return &ValidationError{Name: "io_extra", err: fmt.Errorf(`generated: validator failed for field "Statement.io_extra": %w`, err)}
		}
	}
	if v, ok := suo.mutation.IoExtraV1(); ok {
		if err := statement.IoExtraV1Validator(v); err != nil {
			return &ValidationError{Name: "io_extra_v1", err: fmt.Errorf(`generated: validator failed for field "Statement.io_extra_v1": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *StatementUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StatementUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *StatementUpdateOne) sqlSave(ctx context.Context) (_node *Statement, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(statement.Table, statement.Columns, sqlgraph.NewFieldSpec(statement.FieldID, field.TypeUint32))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Statement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, statement.FieldID)
		for _, f := range fields {
			if !statement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != statement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(statement.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(statement.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(statement.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(statement.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(statement.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(statement.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.EntID(); ok {
		_spec.SetField(statement.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := suo.mutation.AppID(); ok {
		_spec.SetField(statement.FieldAppID, field.TypeUUID, value)
	}
	if suo.mutation.AppIDCleared() {
		_spec.ClearField(statement.FieldAppID, field.TypeUUID)
	}
	if value, ok := suo.mutation.UserID(); ok {
		_spec.SetField(statement.FieldUserID, field.TypeUUID, value)
	}
	if suo.mutation.UserIDCleared() {
		_spec.ClearField(statement.FieldUserID, field.TypeUUID)
	}
	if value, ok := suo.mutation.CurrencyID(); ok {
		_spec.SetField(statement.FieldCurrencyID, field.TypeUUID, value)
	}
	if suo.mutation.CurrencyIDCleared() {
		_spec.ClearField(statement.FieldCurrencyID, field.TypeUUID)
	}
	if value, ok := suo.mutation.CurrencyType(); ok {
		_spec.SetField(statement.FieldCurrencyType, field.TypeString, value)
	}
	if suo.mutation.CurrencyTypeCleared() {
		_spec.ClearField(statement.FieldCurrencyType, field.TypeString)
	}
	if value, ok := suo.mutation.IoType(); ok {
		_spec.SetField(statement.FieldIoType, field.TypeString, value)
	}
	if suo.mutation.IoTypeCleared() {
		_spec.ClearField(statement.FieldIoType, field.TypeString)
	}
	if value, ok := suo.mutation.IoSubType(); ok {
		_spec.SetField(statement.FieldIoSubType, field.TypeString, value)
	}
	if suo.mutation.IoSubTypeCleared() {
		_spec.ClearField(statement.FieldIoSubType, field.TypeString)
	}
	if value, ok := suo.mutation.Amount(); ok {
		_spec.SetField(statement.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedAmount(); ok {
		_spec.AddField(statement.FieldAmount, field.TypeFloat64, value)
	}
	if suo.mutation.AmountCleared() {
		_spec.ClearField(statement.FieldAmount, field.TypeFloat64)
	}
	if value, ok := suo.mutation.IoExtra(); ok {
		_spec.SetField(statement.FieldIoExtra, field.TypeString, value)
	}
	if suo.mutation.IoExtraCleared() {
		_spec.ClearField(statement.FieldIoExtra, field.TypeString)
	}
	if value, ok := suo.mutation.IoExtraV1(); ok {
		_spec.SetField(statement.FieldIoExtraV1, field.TypeString, value)
	}
	if suo.mutation.IoExtraV1Cleared() {
		_spec.ClearField(statement.FieldIoExtraV1, field.TypeString)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Statement{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}

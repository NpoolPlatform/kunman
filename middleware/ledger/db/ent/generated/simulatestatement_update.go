// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/ledger/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/ledger/db/ent/generated/simulatestatement"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// SimulateStatementUpdate is the builder for updating SimulateStatement entities.
type SimulateStatementUpdate struct {
	config
	hooks     []Hook
	mutation  *SimulateStatementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SimulateStatementUpdate builder.
func (ssu *SimulateStatementUpdate) Where(ps ...predicate.SimulateStatement) *SimulateStatementUpdate {
	ssu.mutation.Where(ps...)
	return ssu
}

// SetCreatedAt sets the "created_at" field.
func (ssu *SimulateStatementUpdate) SetCreatedAt(u uint32) *SimulateStatementUpdate {
	ssu.mutation.ResetCreatedAt()
	ssu.mutation.SetCreatedAt(u)
	return ssu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ssu *SimulateStatementUpdate) SetNillableCreatedAt(u *uint32) *SimulateStatementUpdate {
	if u != nil {
		ssu.SetCreatedAt(*u)
	}
	return ssu
}

// AddCreatedAt adds u to the "created_at" field.
func (ssu *SimulateStatementUpdate) AddCreatedAt(u int32) *SimulateStatementUpdate {
	ssu.mutation.AddCreatedAt(u)
	return ssu
}

// SetUpdatedAt sets the "updated_at" field.
func (ssu *SimulateStatementUpdate) SetUpdatedAt(u uint32) *SimulateStatementUpdate {
	ssu.mutation.ResetUpdatedAt()
	ssu.mutation.SetUpdatedAt(u)
	return ssu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ssu *SimulateStatementUpdate) AddUpdatedAt(u int32) *SimulateStatementUpdate {
	ssu.mutation.AddUpdatedAt(u)
	return ssu
}

// SetDeletedAt sets the "deleted_at" field.
func (ssu *SimulateStatementUpdate) SetDeletedAt(u uint32) *SimulateStatementUpdate {
	ssu.mutation.ResetDeletedAt()
	ssu.mutation.SetDeletedAt(u)
	return ssu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ssu *SimulateStatementUpdate) SetNillableDeletedAt(u *uint32) *SimulateStatementUpdate {
	if u != nil {
		ssu.SetDeletedAt(*u)
	}
	return ssu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ssu *SimulateStatementUpdate) AddDeletedAt(u int32) *SimulateStatementUpdate {
	ssu.mutation.AddDeletedAt(u)
	return ssu
}

// SetEntID sets the "ent_id" field.
func (ssu *SimulateStatementUpdate) SetEntID(u uuid.UUID) *SimulateStatementUpdate {
	ssu.mutation.SetEntID(u)
	return ssu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ssu *SimulateStatementUpdate) SetNillableEntID(u *uuid.UUID) *SimulateStatementUpdate {
	if u != nil {
		ssu.SetEntID(*u)
	}
	return ssu
}

// SetAppID sets the "app_id" field.
func (ssu *SimulateStatementUpdate) SetAppID(u uuid.UUID) *SimulateStatementUpdate {
	ssu.mutation.SetAppID(u)
	return ssu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ssu *SimulateStatementUpdate) SetNillableAppID(u *uuid.UUID) *SimulateStatementUpdate {
	if u != nil {
		ssu.SetAppID(*u)
	}
	return ssu
}

// ClearAppID clears the value of the "app_id" field.
func (ssu *SimulateStatementUpdate) ClearAppID() *SimulateStatementUpdate {
	ssu.mutation.ClearAppID()
	return ssu
}

// SetUserID sets the "user_id" field.
func (ssu *SimulateStatementUpdate) SetUserID(u uuid.UUID) *SimulateStatementUpdate {
	ssu.mutation.SetUserID(u)
	return ssu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ssu *SimulateStatementUpdate) SetNillableUserID(u *uuid.UUID) *SimulateStatementUpdate {
	if u != nil {
		ssu.SetUserID(*u)
	}
	return ssu
}

// ClearUserID clears the value of the "user_id" field.
func (ssu *SimulateStatementUpdate) ClearUserID() *SimulateStatementUpdate {
	ssu.mutation.ClearUserID()
	return ssu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (ssu *SimulateStatementUpdate) SetCoinTypeID(u uuid.UUID) *SimulateStatementUpdate {
	ssu.mutation.SetCoinTypeID(u)
	return ssu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (ssu *SimulateStatementUpdate) SetNillableCoinTypeID(u *uuid.UUID) *SimulateStatementUpdate {
	if u != nil {
		ssu.SetCoinTypeID(*u)
	}
	return ssu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (ssu *SimulateStatementUpdate) ClearCoinTypeID() *SimulateStatementUpdate {
	ssu.mutation.ClearCoinTypeID()
	return ssu
}

// SetIoType sets the "io_type" field.
func (ssu *SimulateStatementUpdate) SetIoType(s string) *SimulateStatementUpdate {
	ssu.mutation.SetIoType(s)
	return ssu
}

// SetNillableIoType sets the "io_type" field if the given value is not nil.
func (ssu *SimulateStatementUpdate) SetNillableIoType(s *string) *SimulateStatementUpdate {
	if s != nil {
		ssu.SetIoType(*s)
	}
	return ssu
}

// ClearIoType clears the value of the "io_type" field.
func (ssu *SimulateStatementUpdate) ClearIoType() *SimulateStatementUpdate {
	ssu.mutation.ClearIoType()
	return ssu
}

// SetIoSubType sets the "io_sub_type" field.
func (ssu *SimulateStatementUpdate) SetIoSubType(s string) *SimulateStatementUpdate {
	ssu.mutation.SetIoSubType(s)
	return ssu
}

// SetNillableIoSubType sets the "io_sub_type" field if the given value is not nil.
func (ssu *SimulateStatementUpdate) SetNillableIoSubType(s *string) *SimulateStatementUpdate {
	if s != nil {
		ssu.SetIoSubType(*s)
	}
	return ssu
}

// ClearIoSubType clears the value of the "io_sub_type" field.
func (ssu *SimulateStatementUpdate) ClearIoSubType() *SimulateStatementUpdate {
	ssu.mutation.ClearIoSubType()
	return ssu
}

// SetAmount sets the "amount" field.
func (ssu *SimulateStatementUpdate) SetAmount(d decimal.Decimal) *SimulateStatementUpdate {
	ssu.mutation.ResetAmount()
	ssu.mutation.SetAmount(d)
	return ssu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ssu *SimulateStatementUpdate) SetNillableAmount(d *decimal.Decimal) *SimulateStatementUpdate {
	if d != nil {
		ssu.SetAmount(*d)
	}
	return ssu
}

// AddAmount adds d to the "amount" field.
func (ssu *SimulateStatementUpdate) AddAmount(d decimal.Decimal) *SimulateStatementUpdate {
	ssu.mutation.AddAmount(d)
	return ssu
}

// ClearAmount clears the value of the "amount" field.
func (ssu *SimulateStatementUpdate) ClearAmount() *SimulateStatementUpdate {
	ssu.mutation.ClearAmount()
	return ssu
}

// SetIoExtra sets the "io_extra" field.
func (ssu *SimulateStatementUpdate) SetIoExtra(s string) *SimulateStatementUpdate {
	ssu.mutation.SetIoExtra(s)
	return ssu
}

// SetNillableIoExtra sets the "io_extra" field if the given value is not nil.
func (ssu *SimulateStatementUpdate) SetNillableIoExtra(s *string) *SimulateStatementUpdate {
	if s != nil {
		ssu.SetIoExtra(*s)
	}
	return ssu
}

// ClearIoExtra clears the value of the "io_extra" field.
func (ssu *SimulateStatementUpdate) ClearIoExtra() *SimulateStatementUpdate {
	ssu.mutation.ClearIoExtra()
	return ssu
}

// SetSendCoupon sets the "send_coupon" field.
func (ssu *SimulateStatementUpdate) SetSendCoupon(b bool) *SimulateStatementUpdate {
	ssu.mutation.SetSendCoupon(b)
	return ssu
}

// SetNillableSendCoupon sets the "send_coupon" field if the given value is not nil.
func (ssu *SimulateStatementUpdate) SetNillableSendCoupon(b *bool) *SimulateStatementUpdate {
	if b != nil {
		ssu.SetSendCoupon(*b)
	}
	return ssu
}

// ClearSendCoupon clears the value of the "send_coupon" field.
func (ssu *SimulateStatementUpdate) ClearSendCoupon() *SimulateStatementUpdate {
	ssu.mutation.ClearSendCoupon()
	return ssu
}

// SetCashable sets the "cashable" field.
func (ssu *SimulateStatementUpdate) SetCashable(b bool) *SimulateStatementUpdate {
	ssu.mutation.SetCashable(b)
	return ssu
}

// SetNillableCashable sets the "cashable" field if the given value is not nil.
func (ssu *SimulateStatementUpdate) SetNillableCashable(b *bool) *SimulateStatementUpdate {
	if b != nil {
		ssu.SetCashable(*b)
	}
	return ssu
}

// ClearCashable clears the value of the "cashable" field.
func (ssu *SimulateStatementUpdate) ClearCashable() *SimulateStatementUpdate {
	ssu.mutation.ClearCashable()
	return ssu
}

// Mutation returns the SimulateStatementMutation object of the builder.
func (ssu *SimulateStatementUpdate) Mutation() *SimulateStatementMutation {
	return ssu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ssu *SimulateStatementUpdate) Save(ctx context.Context) (int, error) {
	ssu.defaults()
	return withHooks(ctx, ssu.sqlSave, ssu.mutation, ssu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssu *SimulateStatementUpdate) SaveX(ctx context.Context) int {
	affected, err := ssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ssu *SimulateStatementUpdate) Exec(ctx context.Context) error {
	_, err := ssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssu *SimulateStatementUpdate) ExecX(ctx context.Context) {
	if err := ssu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssu *SimulateStatementUpdate) defaults() {
	if _, ok := ssu.mutation.UpdatedAt(); !ok {
		v := simulatestatement.UpdateDefaultUpdatedAt()
		ssu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssu *SimulateStatementUpdate) check() error {
	if v, ok := ssu.mutation.IoExtra(); ok {
		if err := simulatestatement.IoExtraValidator(v); err != nil {
			return &ValidationError{Name: "io_extra", err: fmt.Errorf(`generated: validator failed for field "SimulateStatement.io_extra": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ssu *SimulateStatementUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SimulateStatementUpdate {
	ssu.modifiers = append(ssu.modifiers, modifiers...)
	return ssu
}

func (ssu *SimulateStatementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ssu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(simulatestatement.Table, simulatestatement.Columns, sqlgraph.NewFieldSpec(simulatestatement.FieldID, field.TypeUint32))
	if ps := ssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssu.mutation.CreatedAt(); ok {
		_spec.SetField(simulatestatement.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ssu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(simulatestatement.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ssu.mutation.UpdatedAt(); ok {
		_spec.SetField(simulatestatement.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ssu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(simulatestatement.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ssu.mutation.DeletedAt(); ok {
		_spec.SetField(simulatestatement.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ssu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(simulatestatement.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ssu.mutation.EntID(); ok {
		_spec.SetField(simulatestatement.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := ssu.mutation.AppID(); ok {
		_spec.SetField(simulatestatement.FieldAppID, field.TypeUUID, value)
	}
	if ssu.mutation.AppIDCleared() {
		_spec.ClearField(simulatestatement.FieldAppID, field.TypeUUID)
	}
	if value, ok := ssu.mutation.UserID(); ok {
		_spec.SetField(simulatestatement.FieldUserID, field.TypeUUID, value)
	}
	if ssu.mutation.UserIDCleared() {
		_spec.ClearField(simulatestatement.FieldUserID, field.TypeUUID)
	}
	if value, ok := ssu.mutation.CoinTypeID(); ok {
		_spec.SetField(simulatestatement.FieldCoinTypeID, field.TypeUUID, value)
	}
	if ssu.mutation.CoinTypeIDCleared() {
		_spec.ClearField(simulatestatement.FieldCoinTypeID, field.TypeUUID)
	}
	if value, ok := ssu.mutation.IoType(); ok {
		_spec.SetField(simulatestatement.FieldIoType, field.TypeString, value)
	}
	if ssu.mutation.IoTypeCleared() {
		_spec.ClearField(simulatestatement.FieldIoType, field.TypeString)
	}
	if value, ok := ssu.mutation.IoSubType(); ok {
		_spec.SetField(simulatestatement.FieldIoSubType, field.TypeString, value)
	}
	if ssu.mutation.IoSubTypeCleared() {
		_spec.ClearField(simulatestatement.FieldIoSubType, field.TypeString)
	}
	if value, ok := ssu.mutation.Amount(); ok {
		_spec.SetField(simulatestatement.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := ssu.mutation.AddedAmount(); ok {
		_spec.AddField(simulatestatement.FieldAmount, field.TypeFloat64, value)
	}
	if ssu.mutation.AmountCleared() {
		_spec.ClearField(simulatestatement.FieldAmount, field.TypeFloat64)
	}
	if value, ok := ssu.mutation.IoExtra(); ok {
		_spec.SetField(simulatestatement.FieldIoExtra, field.TypeString, value)
	}
	if ssu.mutation.IoExtraCleared() {
		_spec.ClearField(simulatestatement.FieldIoExtra, field.TypeString)
	}
	if value, ok := ssu.mutation.SendCoupon(); ok {
		_spec.SetField(simulatestatement.FieldSendCoupon, field.TypeBool, value)
	}
	if ssu.mutation.SendCouponCleared() {
		_spec.ClearField(simulatestatement.FieldSendCoupon, field.TypeBool)
	}
	if value, ok := ssu.mutation.Cashable(); ok {
		_spec.SetField(simulatestatement.FieldCashable, field.TypeBool, value)
	}
	if ssu.mutation.CashableCleared() {
		_spec.ClearField(simulatestatement.FieldCashable, field.TypeBool)
	}
	_spec.AddModifiers(ssu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{simulatestatement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ssu.mutation.done = true
	return n, nil
}

// SimulateStatementUpdateOne is the builder for updating a single SimulateStatement entity.
type SimulateStatementUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SimulateStatementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (ssuo *SimulateStatementUpdateOne) SetCreatedAt(u uint32) *SimulateStatementUpdateOne {
	ssuo.mutation.ResetCreatedAt()
	ssuo.mutation.SetCreatedAt(u)
	return ssuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ssuo *SimulateStatementUpdateOne) SetNillableCreatedAt(u *uint32) *SimulateStatementUpdateOne {
	if u != nil {
		ssuo.SetCreatedAt(*u)
	}
	return ssuo
}

// AddCreatedAt adds u to the "created_at" field.
func (ssuo *SimulateStatementUpdateOne) AddCreatedAt(u int32) *SimulateStatementUpdateOne {
	ssuo.mutation.AddCreatedAt(u)
	return ssuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ssuo *SimulateStatementUpdateOne) SetUpdatedAt(u uint32) *SimulateStatementUpdateOne {
	ssuo.mutation.ResetUpdatedAt()
	ssuo.mutation.SetUpdatedAt(u)
	return ssuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ssuo *SimulateStatementUpdateOne) AddUpdatedAt(u int32) *SimulateStatementUpdateOne {
	ssuo.mutation.AddUpdatedAt(u)
	return ssuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ssuo *SimulateStatementUpdateOne) SetDeletedAt(u uint32) *SimulateStatementUpdateOne {
	ssuo.mutation.ResetDeletedAt()
	ssuo.mutation.SetDeletedAt(u)
	return ssuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ssuo *SimulateStatementUpdateOne) SetNillableDeletedAt(u *uint32) *SimulateStatementUpdateOne {
	if u != nil {
		ssuo.SetDeletedAt(*u)
	}
	return ssuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ssuo *SimulateStatementUpdateOne) AddDeletedAt(u int32) *SimulateStatementUpdateOne {
	ssuo.mutation.AddDeletedAt(u)
	return ssuo
}

// SetEntID sets the "ent_id" field.
func (ssuo *SimulateStatementUpdateOne) SetEntID(u uuid.UUID) *SimulateStatementUpdateOne {
	ssuo.mutation.SetEntID(u)
	return ssuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ssuo *SimulateStatementUpdateOne) SetNillableEntID(u *uuid.UUID) *SimulateStatementUpdateOne {
	if u != nil {
		ssuo.SetEntID(*u)
	}
	return ssuo
}

// SetAppID sets the "app_id" field.
func (ssuo *SimulateStatementUpdateOne) SetAppID(u uuid.UUID) *SimulateStatementUpdateOne {
	ssuo.mutation.SetAppID(u)
	return ssuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ssuo *SimulateStatementUpdateOne) SetNillableAppID(u *uuid.UUID) *SimulateStatementUpdateOne {
	if u != nil {
		ssuo.SetAppID(*u)
	}
	return ssuo
}

// ClearAppID clears the value of the "app_id" field.
func (ssuo *SimulateStatementUpdateOne) ClearAppID() *SimulateStatementUpdateOne {
	ssuo.mutation.ClearAppID()
	return ssuo
}

// SetUserID sets the "user_id" field.
func (ssuo *SimulateStatementUpdateOne) SetUserID(u uuid.UUID) *SimulateStatementUpdateOne {
	ssuo.mutation.SetUserID(u)
	return ssuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ssuo *SimulateStatementUpdateOne) SetNillableUserID(u *uuid.UUID) *SimulateStatementUpdateOne {
	if u != nil {
		ssuo.SetUserID(*u)
	}
	return ssuo
}

// ClearUserID clears the value of the "user_id" field.
func (ssuo *SimulateStatementUpdateOne) ClearUserID() *SimulateStatementUpdateOne {
	ssuo.mutation.ClearUserID()
	return ssuo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (ssuo *SimulateStatementUpdateOne) SetCoinTypeID(u uuid.UUID) *SimulateStatementUpdateOne {
	ssuo.mutation.SetCoinTypeID(u)
	return ssuo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (ssuo *SimulateStatementUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *SimulateStatementUpdateOne {
	if u != nil {
		ssuo.SetCoinTypeID(*u)
	}
	return ssuo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (ssuo *SimulateStatementUpdateOne) ClearCoinTypeID() *SimulateStatementUpdateOne {
	ssuo.mutation.ClearCoinTypeID()
	return ssuo
}

// SetIoType sets the "io_type" field.
func (ssuo *SimulateStatementUpdateOne) SetIoType(s string) *SimulateStatementUpdateOne {
	ssuo.mutation.SetIoType(s)
	return ssuo
}

// SetNillableIoType sets the "io_type" field if the given value is not nil.
func (ssuo *SimulateStatementUpdateOne) SetNillableIoType(s *string) *SimulateStatementUpdateOne {
	if s != nil {
		ssuo.SetIoType(*s)
	}
	return ssuo
}

// ClearIoType clears the value of the "io_type" field.
func (ssuo *SimulateStatementUpdateOne) ClearIoType() *SimulateStatementUpdateOne {
	ssuo.mutation.ClearIoType()
	return ssuo
}

// SetIoSubType sets the "io_sub_type" field.
func (ssuo *SimulateStatementUpdateOne) SetIoSubType(s string) *SimulateStatementUpdateOne {
	ssuo.mutation.SetIoSubType(s)
	return ssuo
}

// SetNillableIoSubType sets the "io_sub_type" field if the given value is not nil.
func (ssuo *SimulateStatementUpdateOne) SetNillableIoSubType(s *string) *SimulateStatementUpdateOne {
	if s != nil {
		ssuo.SetIoSubType(*s)
	}
	return ssuo
}

// ClearIoSubType clears the value of the "io_sub_type" field.
func (ssuo *SimulateStatementUpdateOne) ClearIoSubType() *SimulateStatementUpdateOne {
	ssuo.mutation.ClearIoSubType()
	return ssuo
}

// SetAmount sets the "amount" field.
func (ssuo *SimulateStatementUpdateOne) SetAmount(d decimal.Decimal) *SimulateStatementUpdateOne {
	ssuo.mutation.ResetAmount()
	ssuo.mutation.SetAmount(d)
	return ssuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ssuo *SimulateStatementUpdateOne) SetNillableAmount(d *decimal.Decimal) *SimulateStatementUpdateOne {
	if d != nil {
		ssuo.SetAmount(*d)
	}
	return ssuo
}

// AddAmount adds d to the "amount" field.
func (ssuo *SimulateStatementUpdateOne) AddAmount(d decimal.Decimal) *SimulateStatementUpdateOne {
	ssuo.mutation.AddAmount(d)
	return ssuo
}

// ClearAmount clears the value of the "amount" field.
func (ssuo *SimulateStatementUpdateOne) ClearAmount() *SimulateStatementUpdateOne {
	ssuo.mutation.ClearAmount()
	return ssuo
}

// SetIoExtra sets the "io_extra" field.
func (ssuo *SimulateStatementUpdateOne) SetIoExtra(s string) *SimulateStatementUpdateOne {
	ssuo.mutation.SetIoExtra(s)
	return ssuo
}

// SetNillableIoExtra sets the "io_extra" field if the given value is not nil.
func (ssuo *SimulateStatementUpdateOne) SetNillableIoExtra(s *string) *SimulateStatementUpdateOne {
	if s != nil {
		ssuo.SetIoExtra(*s)
	}
	return ssuo
}

// ClearIoExtra clears the value of the "io_extra" field.
func (ssuo *SimulateStatementUpdateOne) ClearIoExtra() *SimulateStatementUpdateOne {
	ssuo.mutation.ClearIoExtra()
	return ssuo
}

// SetSendCoupon sets the "send_coupon" field.
func (ssuo *SimulateStatementUpdateOne) SetSendCoupon(b bool) *SimulateStatementUpdateOne {
	ssuo.mutation.SetSendCoupon(b)
	return ssuo
}

// SetNillableSendCoupon sets the "send_coupon" field if the given value is not nil.
func (ssuo *SimulateStatementUpdateOne) SetNillableSendCoupon(b *bool) *SimulateStatementUpdateOne {
	if b != nil {
		ssuo.SetSendCoupon(*b)
	}
	return ssuo
}

// ClearSendCoupon clears the value of the "send_coupon" field.
func (ssuo *SimulateStatementUpdateOne) ClearSendCoupon() *SimulateStatementUpdateOne {
	ssuo.mutation.ClearSendCoupon()
	return ssuo
}

// SetCashable sets the "cashable" field.
func (ssuo *SimulateStatementUpdateOne) SetCashable(b bool) *SimulateStatementUpdateOne {
	ssuo.mutation.SetCashable(b)
	return ssuo
}

// SetNillableCashable sets the "cashable" field if the given value is not nil.
func (ssuo *SimulateStatementUpdateOne) SetNillableCashable(b *bool) *SimulateStatementUpdateOne {
	if b != nil {
		ssuo.SetCashable(*b)
	}
	return ssuo
}

// ClearCashable clears the value of the "cashable" field.
func (ssuo *SimulateStatementUpdateOne) ClearCashable() *SimulateStatementUpdateOne {
	ssuo.mutation.ClearCashable()
	return ssuo
}

// Mutation returns the SimulateStatementMutation object of the builder.
func (ssuo *SimulateStatementUpdateOne) Mutation() *SimulateStatementMutation {
	return ssuo.mutation
}

// Where appends a list predicates to the SimulateStatementUpdate builder.
func (ssuo *SimulateStatementUpdateOne) Where(ps ...predicate.SimulateStatement) *SimulateStatementUpdateOne {
	ssuo.mutation.Where(ps...)
	return ssuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ssuo *SimulateStatementUpdateOne) Select(field string, fields ...string) *SimulateStatementUpdateOne {
	ssuo.fields = append([]string{field}, fields...)
	return ssuo
}

// Save executes the query and returns the updated SimulateStatement entity.
func (ssuo *SimulateStatementUpdateOne) Save(ctx context.Context) (*SimulateStatement, error) {
	ssuo.defaults()
	return withHooks(ctx, ssuo.sqlSave, ssuo.mutation, ssuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssuo *SimulateStatementUpdateOne) SaveX(ctx context.Context) *SimulateStatement {
	node, err := ssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ssuo *SimulateStatementUpdateOne) Exec(ctx context.Context) error {
	_, err := ssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssuo *SimulateStatementUpdateOne) ExecX(ctx context.Context) {
	if err := ssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssuo *SimulateStatementUpdateOne) defaults() {
	if _, ok := ssuo.mutation.UpdatedAt(); !ok {
		v := simulatestatement.UpdateDefaultUpdatedAt()
		ssuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssuo *SimulateStatementUpdateOne) check() error {
	if v, ok := ssuo.mutation.IoExtra(); ok {
		if err := simulatestatement.IoExtraValidator(v); err != nil {
			return &ValidationError{Name: "io_extra", err: fmt.Errorf(`generated: validator failed for field "SimulateStatement.io_extra": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ssuo *SimulateStatementUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SimulateStatementUpdateOne {
	ssuo.modifiers = append(ssuo.modifiers, modifiers...)
	return ssuo
}

func (ssuo *SimulateStatementUpdateOne) sqlSave(ctx context.Context) (_node *SimulateStatement, err error) {
	if err := ssuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(simulatestatement.Table, simulatestatement.Columns, sqlgraph.NewFieldSpec(simulatestatement.FieldID, field.TypeUint32))
	id, ok := ssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "SimulateStatement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ssuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, simulatestatement.FieldID)
		for _, f := range fields {
			if !simulatestatement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != simulatestatement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssuo.mutation.CreatedAt(); ok {
		_spec.SetField(simulatestatement.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ssuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(simulatestatement.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ssuo.mutation.UpdatedAt(); ok {
		_spec.SetField(simulatestatement.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ssuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(simulatestatement.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ssuo.mutation.DeletedAt(); ok {
		_spec.SetField(simulatestatement.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ssuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(simulatestatement.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ssuo.mutation.EntID(); ok {
		_spec.SetField(simulatestatement.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := ssuo.mutation.AppID(); ok {
		_spec.SetField(simulatestatement.FieldAppID, field.TypeUUID, value)
	}
	if ssuo.mutation.AppIDCleared() {
		_spec.ClearField(simulatestatement.FieldAppID, field.TypeUUID)
	}
	if value, ok := ssuo.mutation.UserID(); ok {
		_spec.SetField(simulatestatement.FieldUserID, field.TypeUUID, value)
	}
	if ssuo.mutation.UserIDCleared() {
		_spec.ClearField(simulatestatement.FieldUserID, field.TypeUUID)
	}
	if value, ok := ssuo.mutation.CoinTypeID(); ok {
		_spec.SetField(simulatestatement.FieldCoinTypeID, field.TypeUUID, value)
	}
	if ssuo.mutation.CoinTypeIDCleared() {
		_spec.ClearField(simulatestatement.FieldCoinTypeID, field.TypeUUID)
	}
	if value, ok := ssuo.mutation.IoType(); ok {
		_spec.SetField(simulatestatement.FieldIoType, field.TypeString, value)
	}
	if ssuo.mutation.IoTypeCleared() {
		_spec.ClearField(simulatestatement.FieldIoType, field.TypeString)
	}
	if value, ok := ssuo.mutation.IoSubType(); ok {
		_spec.SetField(simulatestatement.FieldIoSubType, field.TypeString, value)
	}
	if ssuo.mutation.IoSubTypeCleared() {
		_spec.ClearField(simulatestatement.FieldIoSubType, field.TypeString)
	}
	if value, ok := ssuo.mutation.Amount(); ok {
		_spec.SetField(simulatestatement.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := ssuo.mutation.AddedAmount(); ok {
		_spec.AddField(simulatestatement.FieldAmount, field.TypeFloat64, value)
	}
	if ssuo.mutation.AmountCleared() {
		_spec.ClearField(simulatestatement.FieldAmount, field.TypeFloat64)
	}
	if value, ok := ssuo.mutation.IoExtra(); ok {
		_spec.SetField(simulatestatement.FieldIoExtra, field.TypeString, value)
	}
	if ssuo.mutation.IoExtraCleared() {
		_spec.ClearField(simulatestatement.FieldIoExtra, field.TypeString)
	}
	if value, ok := ssuo.mutation.SendCoupon(); ok {
		_spec.SetField(simulatestatement.FieldSendCoupon, field.TypeBool, value)
	}
	if ssuo.mutation.SendCouponCleared() {
		_spec.ClearField(simulatestatement.FieldSendCoupon, field.TypeBool)
	}
	if value, ok := ssuo.mutation.Cashable(); ok {
		_spec.SetField(simulatestatement.FieldCashable, field.TypeBool, value)
	}
	if ssuo.mutation.CashableCleared() {
		_spec.ClearField(simulatestatement.FieldCashable, field.TypeBool)
	}
	_spec.AddModifiers(ssuo.modifiers...)
	_node = &SimulateStatement{config: ssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{simulatestatement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ssuo.mutation.done = true
	return _node, nil
}

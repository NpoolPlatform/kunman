// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"

	"github.com/NpoolPlatform/kunman/middleware/ledger/db/ent/generated"

	"entgo.io/ent/entql"
	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns a formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return privacy.Allowf(format, a...)
}

// Denyf returns a formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return privacy.Denyf(format, a...)
}

// Skipf returns a formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return privacy.Skipf(format, a...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
	// MutationRuleFunc type is an adapter which allows the use of
	// ordinary functions as mutation rules.
	MutationRuleFunc = privacy.MutationRuleFunc

	// QueryMutationRule is an interface which groups query and mutation rules.
	QueryMutationRule = privacy.QueryMutationRule
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, generated.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	return f(ctx, q)
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return privacy.AlwaysAllowRule()
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return privacy.AlwaysDenyRule()
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return privacy.ContextQueryMutationRule(eval)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op generated.Op) MutationRule {
	return privacy.OnMutationOperation(rule, op)
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op generated.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m generated.Mutation) error {
		return Denyf("generated/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The CouponWithdrawQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CouponWithdrawQueryRuleFunc func(context.Context, *generated.CouponWithdrawQuery) error

// EvalQuery return f(ctx, q).
func (f CouponWithdrawQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.CouponWithdrawQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.CouponWithdrawQuery", q)
}

// The CouponWithdrawMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CouponWithdrawMutationRuleFunc func(context.Context, *generated.CouponWithdrawMutation) error

// EvalMutation calls f(ctx, m).
func (f CouponWithdrawMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.CouponWithdrawMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.CouponWithdrawMutation", m)
}

// The GoodLedgerQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GoodLedgerQueryRuleFunc func(context.Context, *generated.GoodLedgerQuery) error

// EvalQuery return f(ctx, q).
func (f GoodLedgerQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.GoodLedgerQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.GoodLedgerQuery", q)
}

// The GoodLedgerMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GoodLedgerMutationRuleFunc func(context.Context, *generated.GoodLedgerMutation) error

// EvalMutation calls f(ctx, m).
func (f GoodLedgerMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.GoodLedgerMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.GoodLedgerMutation", m)
}

// The GoodStatementQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GoodStatementQueryRuleFunc func(context.Context, *generated.GoodStatementQuery) error

// EvalQuery return f(ctx, q).
func (f GoodStatementQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.GoodStatementQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.GoodStatementQuery", q)
}

// The GoodStatementMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GoodStatementMutationRuleFunc func(context.Context, *generated.GoodStatementMutation) error

// EvalMutation calls f(ctx, m).
func (f GoodStatementMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.GoodStatementMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.GoodStatementMutation", m)
}

// The LedgerQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type LedgerQueryRuleFunc func(context.Context, *generated.LedgerQuery) error

// EvalQuery return f(ctx, q).
func (f LedgerQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.LedgerQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.LedgerQuery", q)
}

// The LedgerMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type LedgerMutationRuleFunc func(context.Context, *generated.LedgerMutation) error

// EvalMutation calls f(ctx, m).
func (f LedgerMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.LedgerMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.LedgerMutation", m)
}

// The LedgerLockQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type LedgerLockQueryRuleFunc func(context.Context, *generated.LedgerLockQuery) error

// EvalQuery return f(ctx, q).
func (f LedgerLockQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.LedgerLockQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.LedgerLockQuery", q)
}

// The LedgerLockMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type LedgerLockMutationRuleFunc func(context.Context, *generated.LedgerLockMutation) error

// EvalMutation calls f(ctx, m).
func (f LedgerLockMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.LedgerLockMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.LedgerLockMutation", m)
}

// The ProfitQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProfitQueryRuleFunc func(context.Context, *generated.ProfitQuery) error

// EvalQuery return f(ctx, q).
func (f ProfitQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ProfitQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.ProfitQuery", q)
}

// The ProfitMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProfitMutationRuleFunc func(context.Context, *generated.ProfitMutation) error

// EvalMutation calls f(ctx, m).
func (f ProfitMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.ProfitMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.ProfitMutation", m)
}

// The SimulateLedgerQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SimulateLedgerQueryRuleFunc func(context.Context, *generated.SimulateLedgerQuery) error

// EvalQuery return f(ctx, q).
func (f SimulateLedgerQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.SimulateLedgerQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.SimulateLedgerQuery", q)
}

// The SimulateLedgerMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SimulateLedgerMutationRuleFunc func(context.Context, *generated.SimulateLedgerMutation) error

// EvalMutation calls f(ctx, m).
func (f SimulateLedgerMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.SimulateLedgerMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.SimulateLedgerMutation", m)
}

// The SimulateProfitQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SimulateProfitQueryRuleFunc func(context.Context, *generated.SimulateProfitQuery) error

// EvalQuery return f(ctx, q).
func (f SimulateProfitQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.SimulateProfitQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.SimulateProfitQuery", q)
}

// The SimulateProfitMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SimulateProfitMutationRuleFunc func(context.Context, *generated.SimulateProfitMutation) error

// EvalMutation calls f(ctx, m).
func (f SimulateProfitMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.SimulateProfitMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.SimulateProfitMutation", m)
}

// The SimulateStatementQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SimulateStatementQueryRuleFunc func(context.Context, *generated.SimulateStatementQuery) error

// EvalQuery return f(ctx, q).
func (f SimulateStatementQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.SimulateStatementQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.SimulateStatementQuery", q)
}

// The SimulateStatementMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SimulateStatementMutationRuleFunc func(context.Context, *generated.SimulateStatementMutation) error

// EvalMutation calls f(ctx, m).
func (f SimulateStatementMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.SimulateStatementMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.SimulateStatementMutation", m)
}

// The StatementQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type StatementQueryRuleFunc func(context.Context, *generated.StatementQuery) error

// EvalQuery return f(ctx, q).
func (f StatementQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.StatementQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.StatementQuery", q)
}

// The StatementMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type StatementMutationRuleFunc func(context.Context, *generated.StatementMutation) error

// EvalMutation calls f(ctx, m).
func (f StatementMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.StatementMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.StatementMutation", m)
}

// The UnsoldStatementQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UnsoldStatementQueryRuleFunc func(context.Context, *generated.UnsoldStatementQuery) error

// EvalQuery return f(ctx, q).
func (f UnsoldStatementQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.UnsoldStatementQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.UnsoldStatementQuery", q)
}

// The UnsoldStatementMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UnsoldStatementMutationRuleFunc func(context.Context, *generated.UnsoldStatementMutation) error

// EvalMutation calls f(ctx, m).
func (f UnsoldStatementMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.UnsoldStatementMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.UnsoldStatementMutation", m)
}

// The WithdrawQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type WithdrawQueryRuleFunc func(context.Context, *generated.WithdrawQuery) error

// EvalQuery return f(ctx, q).
func (f WithdrawQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.WithdrawQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.WithdrawQuery", q)
}

// The WithdrawMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type WithdrawMutationRuleFunc func(context.Context, *generated.WithdrawMutation) error

// EvalMutation calls f(ctx, m).
func (f WithdrawMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.WithdrawMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.WithdrawMutation", m)
}

type (
	// Filter is the interface that wraps the Where function
	// for filtering nodes in queries and mutations.
	Filter interface {
		// Where applies a filter on the executed query/mutation.
		Where(entql.P)
	}

	// The FilterFunc type is an adapter that allows the use of ordinary
	// functions as filters for query and mutation types.
	FilterFunc func(context.Context, Filter) error
)

// EvalQuery calls f(ctx, q) if the query implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	fr, err := queryFilter(q)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

// EvalMutation calls f(ctx, q) if the mutation implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	fr, err := mutationFilter(m)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

var _ QueryMutationRule = FilterFunc(nil)

func queryFilter(q generated.Query) (Filter, error) {
	switch q := q.(type) {
	case *generated.CouponWithdrawQuery:
		return q.Filter(), nil
	case *generated.GoodLedgerQuery:
		return q.Filter(), nil
	case *generated.GoodStatementQuery:
		return q.Filter(), nil
	case *generated.LedgerQuery:
		return q.Filter(), nil
	case *generated.LedgerLockQuery:
		return q.Filter(), nil
	case *generated.ProfitQuery:
		return q.Filter(), nil
	case *generated.SimulateLedgerQuery:
		return q.Filter(), nil
	case *generated.SimulateProfitQuery:
		return q.Filter(), nil
	case *generated.SimulateStatementQuery:
		return q.Filter(), nil
	case *generated.StatementQuery:
		return q.Filter(), nil
	case *generated.UnsoldStatementQuery:
		return q.Filter(), nil
	case *generated.WithdrawQuery:
		return q.Filter(), nil
	default:
		return nil, Denyf("generated/privacy: unexpected query type %T for query filter", q)
	}
}

func mutationFilter(m generated.Mutation) (Filter, error) {
	switch m := m.(type) {
	case *generated.CouponWithdrawMutation:
		return m.Filter(), nil
	case *generated.GoodLedgerMutation:
		return m.Filter(), nil
	case *generated.GoodStatementMutation:
		return m.Filter(), nil
	case *generated.LedgerMutation:
		return m.Filter(), nil
	case *generated.LedgerLockMutation:
		return m.Filter(), nil
	case *generated.ProfitMutation:
		return m.Filter(), nil
	case *generated.SimulateLedgerMutation:
		return m.Filter(), nil
	case *generated.SimulateProfitMutation:
		return m.Filter(), nil
	case *generated.SimulateStatementMutation:
		return m.Filter(), nil
	case *generated.StatementMutation:
		return m.Filter(), nil
	case *generated.UnsoldStatementMutation:
		return m.Filter(), nil
	case *generated.WithdrawMutation:
		return m.Filter(), nil
	default:
		return nil, Denyf("generated/privacy: unexpected mutation type %T for mutation filter", m)
	}
}

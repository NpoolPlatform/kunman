// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/ledger/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/ledger/db/ent/generated/simulatestatement"
)

// SimulateStatementDelete is the builder for deleting a SimulateStatement entity.
type SimulateStatementDelete struct {
	config
	hooks    []Hook
	mutation *SimulateStatementMutation
}

// Where appends a list predicates to the SimulateStatementDelete builder.
func (ssd *SimulateStatementDelete) Where(ps ...predicate.SimulateStatement) *SimulateStatementDelete {
	ssd.mutation.Where(ps...)
	return ssd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ssd *SimulateStatementDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ssd.sqlExec, ssd.mutation, ssd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ssd *SimulateStatementDelete) ExecX(ctx context.Context) int {
	n, err := ssd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ssd *SimulateStatementDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(simulatestatement.Table, sqlgraph.NewFieldSpec(simulatestatement.FieldID, field.TypeUint32))
	if ps := ssd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ssd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ssd.mutation.done = true
	return affected, err
}

// SimulateStatementDeleteOne is the builder for deleting a single SimulateStatement entity.
type SimulateStatementDeleteOne struct {
	ssd *SimulateStatementDelete
}

// Where appends a list predicates to the SimulateStatementDelete builder.
func (ssdo *SimulateStatementDeleteOne) Where(ps ...predicate.SimulateStatement) *SimulateStatementDeleteOne {
	ssdo.ssd.mutation.Where(ps...)
	return ssdo
}

// Exec executes the deletion query.
func (ssdo *SimulateStatementDeleteOne) Exec(ctx context.Context) error {
	n, err := ssdo.ssd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{simulatestatement.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ssdo *SimulateStatementDeleteOne) ExecX(ctx context.Context) {
	if err := ssdo.Exec(ctx); err != nil {
		panic(err)
	}
}

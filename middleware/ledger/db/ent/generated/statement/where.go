// Code generated by ent, DO NOT EDIT.

package statement

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/ledger/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Statement {
	return predicate.Statement(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Statement {
	return predicate.Statement(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Statement {
	return predicate.Statement(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Statement {
	return predicate.Statement(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Statement {
	return predicate.Statement(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Statement {
	return predicate.Statement(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Statement {
	return predicate.Statement(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldDeletedAt, v))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldEntID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldAppID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldUserID, v))
}

// CoinTypeID applies equality check predicate on the "coin_type_id" field. It's identical to CoinTypeIDEQ.
func CoinTypeID(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldCoinTypeID, v))
}

// IoType applies equality check predicate on the "io_type" field. It's identical to IoTypeEQ.
func IoType(v string) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldIoType, v))
}

// IoSubType applies equality check predicate on the "io_sub_type" field. It's identical to IoSubTypeEQ.
func IoSubType(v string) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldIoSubType, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v decimal.Decimal) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldAmount, v))
}

// IoExtra applies equality check predicate on the "io_extra" field. It's identical to IoExtraEQ.
func IoExtra(v string) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldIoExtra, v))
}

// IoExtraV1 applies equality check predicate on the "io_extra_v1" field. It's identical to IoExtraV1EQ.
func IoExtraV1(v string) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldIoExtraV1, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Statement {
	return predicate.Statement(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Statement {
	return predicate.Statement(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Statement {
	return predicate.Statement(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Statement {
	return predicate.Statement(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Statement {
	return predicate.Statement(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Statement {
	return predicate.Statement(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Statement {
	return predicate.Statement(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Statement {
	return predicate.Statement(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Statement {
	return predicate.Statement(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Statement {
	return predicate.Statement(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Statement {
	return predicate.Statement(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Statement {
	return predicate.Statement(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Statement {
	return predicate.Statement(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Statement {
	return predicate.Statement(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Statement {
	return predicate.Statement(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Statement {
	return predicate.Statement(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Statement {
	return predicate.Statement(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Statement {
	return predicate.Statement(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Statement {
	return predicate.Statement(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Statement {
	return predicate.Statement(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Statement {
	return predicate.Statement(sql.FieldLTE(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldLTE(FieldEntID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldLTE(FieldAppID, v))
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.Statement {
	return predicate.Statement(sql.FieldIsNull(FieldAppID))
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.Statement {
	return predicate.Statement(sql.FieldNotNull(FieldAppID))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldLTE(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Statement {
	return predicate.Statement(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Statement {
	return predicate.Statement(sql.FieldNotNull(FieldUserID))
}

// CoinTypeIDEQ applies the EQ predicate on the "coin_type_id" field.
func CoinTypeIDEQ(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldCoinTypeID, v))
}

// CoinTypeIDNEQ applies the NEQ predicate on the "coin_type_id" field.
func CoinTypeIDNEQ(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldNEQ(FieldCoinTypeID, v))
}

// CoinTypeIDIn applies the In predicate on the "coin_type_id" field.
func CoinTypeIDIn(vs ...uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldIn(FieldCoinTypeID, vs...))
}

// CoinTypeIDNotIn applies the NotIn predicate on the "coin_type_id" field.
func CoinTypeIDNotIn(vs ...uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldNotIn(FieldCoinTypeID, vs...))
}

// CoinTypeIDGT applies the GT predicate on the "coin_type_id" field.
func CoinTypeIDGT(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldGT(FieldCoinTypeID, v))
}

// CoinTypeIDGTE applies the GTE predicate on the "coin_type_id" field.
func CoinTypeIDGTE(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldGTE(FieldCoinTypeID, v))
}

// CoinTypeIDLT applies the LT predicate on the "coin_type_id" field.
func CoinTypeIDLT(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldLT(FieldCoinTypeID, v))
}

// CoinTypeIDLTE applies the LTE predicate on the "coin_type_id" field.
func CoinTypeIDLTE(v uuid.UUID) predicate.Statement {
	return predicate.Statement(sql.FieldLTE(FieldCoinTypeID, v))
}

// CoinTypeIDIsNil applies the IsNil predicate on the "coin_type_id" field.
func CoinTypeIDIsNil() predicate.Statement {
	return predicate.Statement(sql.FieldIsNull(FieldCoinTypeID))
}

// CoinTypeIDNotNil applies the NotNil predicate on the "coin_type_id" field.
func CoinTypeIDNotNil() predicate.Statement {
	return predicate.Statement(sql.FieldNotNull(FieldCoinTypeID))
}

// IoTypeEQ applies the EQ predicate on the "io_type" field.
func IoTypeEQ(v string) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldIoType, v))
}

// IoTypeNEQ applies the NEQ predicate on the "io_type" field.
func IoTypeNEQ(v string) predicate.Statement {
	return predicate.Statement(sql.FieldNEQ(FieldIoType, v))
}

// IoTypeIn applies the In predicate on the "io_type" field.
func IoTypeIn(vs ...string) predicate.Statement {
	return predicate.Statement(sql.FieldIn(FieldIoType, vs...))
}

// IoTypeNotIn applies the NotIn predicate on the "io_type" field.
func IoTypeNotIn(vs ...string) predicate.Statement {
	return predicate.Statement(sql.FieldNotIn(FieldIoType, vs...))
}

// IoTypeGT applies the GT predicate on the "io_type" field.
func IoTypeGT(v string) predicate.Statement {
	return predicate.Statement(sql.FieldGT(FieldIoType, v))
}

// IoTypeGTE applies the GTE predicate on the "io_type" field.
func IoTypeGTE(v string) predicate.Statement {
	return predicate.Statement(sql.FieldGTE(FieldIoType, v))
}

// IoTypeLT applies the LT predicate on the "io_type" field.
func IoTypeLT(v string) predicate.Statement {
	return predicate.Statement(sql.FieldLT(FieldIoType, v))
}

// IoTypeLTE applies the LTE predicate on the "io_type" field.
func IoTypeLTE(v string) predicate.Statement {
	return predicate.Statement(sql.FieldLTE(FieldIoType, v))
}

// IoTypeContains applies the Contains predicate on the "io_type" field.
func IoTypeContains(v string) predicate.Statement {
	return predicate.Statement(sql.FieldContains(FieldIoType, v))
}

// IoTypeHasPrefix applies the HasPrefix predicate on the "io_type" field.
func IoTypeHasPrefix(v string) predicate.Statement {
	return predicate.Statement(sql.FieldHasPrefix(FieldIoType, v))
}

// IoTypeHasSuffix applies the HasSuffix predicate on the "io_type" field.
func IoTypeHasSuffix(v string) predicate.Statement {
	return predicate.Statement(sql.FieldHasSuffix(FieldIoType, v))
}

// IoTypeIsNil applies the IsNil predicate on the "io_type" field.
func IoTypeIsNil() predicate.Statement {
	return predicate.Statement(sql.FieldIsNull(FieldIoType))
}

// IoTypeNotNil applies the NotNil predicate on the "io_type" field.
func IoTypeNotNil() predicate.Statement {
	return predicate.Statement(sql.FieldNotNull(FieldIoType))
}

// IoTypeEqualFold applies the EqualFold predicate on the "io_type" field.
func IoTypeEqualFold(v string) predicate.Statement {
	return predicate.Statement(sql.FieldEqualFold(FieldIoType, v))
}

// IoTypeContainsFold applies the ContainsFold predicate on the "io_type" field.
func IoTypeContainsFold(v string) predicate.Statement {
	return predicate.Statement(sql.FieldContainsFold(FieldIoType, v))
}

// IoSubTypeEQ applies the EQ predicate on the "io_sub_type" field.
func IoSubTypeEQ(v string) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldIoSubType, v))
}

// IoSubTypeNEQ applies the NEQ predicate on the "io_sub_type" field.
func IoSubTypeNEQ(v string) predicate.Statement {
	return predicate.Statement(sql.FieldNEQ(FieldIoSubType, v))
}

// IoSubTypeIn applies the In predicate on the "io_sub_type" field.
func IoSubTypeIn(vs ...string) predicate.Statement {
	return predicate.Statement(sql.FieldIn(FieldIoSubType, vs...))
}

// IoSubTypeNotIn applies the NotIn predicate on the "io_sub_type" field.
func IoSubTypeNotIn(vs ...string) predicate.Statement {
	return predicate.Statement(sql.FieldNotIn(FieldIoSubType, vs...))
}

// IoSubTypeGT applies the GT predicate on the "io_sub_type" field.
func IoSubTypeGT(v string) predicate.Statement {
	return predicate.Statement(sql.FieldGT(FieldIoSubType, v))
}

// IoSubTypeGTE applies the GTE predicate on the "io_sub_type" field.
func IoSubTypeGTE(v string) predicate.Statement {
	return predicate.Statement(sql.FieldGTE(FieldIoSubType, v))
}

// IoSubTypeLT applies the LT predicate on the "io_sub_type" field.
func IoSubTypeLT(v string) predicate.Statement {
	return predicate.Statement(sql.FieldLT(FieldIoSubType, v))
}

// IoSubTypeLTE applies the LTE predicate on the "io_sub_type" field.
func IoSubTypeLTE(v string) predicate.Statement {
	return predicate.Statement(sql.FieldLTE(FieldIoSubType, v))
}

// IoSubTypeContains applies the Contains predicate on the "io_sub_type" field.
func IoSubTypeContains(v string) predicate.Statement {
	return predicate.Statement(sql.FieldContains(FieldIoSubType, v))
}

// IoSubTypeHasPrefix applies the HasPrefix predicate on the "io_sub_type" field.
func IoSubTypeHasPrefix(v string) predicate.Statement {
	return predicate.Statement(sql.FieldHasPrefix(FieldIoSubType, v))
}

// IoSubTypeHasSuffix applies the HasSuffix predicate on the "io_sub_type" field.
func IoSubTypeHasSuffix(v string) predicate.Statement {
	return predicate.Statement(sql.FieldHasSuffix(FieldIoSubType, v))
}

// IoSubTypeIsNil applies the IsNil predicate on the "io_sub_type" field.
func IoSubTypeIsNil() predicate.Statement {
	return predicate.Statement(sql.FieldIsNull(FieldIoSubType))
}

// IoSubTypeNotNil applies the NotNil predicate on the "io_sub_type" field.
func IoSubTypeNotNil() predicate.Statement {
	return predicate.Statement(sql.FieldNotNull(FieldIoSubType))
}

// IoSubTypeEqualFold applies the EqualFold predicate on the "io_sub_type" field.
func IoSubTypeEqualFold(v string) predicate.Statement {
	return predicate.Statement(sql.FieldEqualFold(FieldIoSubType, v))
}

// IoSubTypeContainsFold applies the ContainsFold predicate on the "io_sub_type" field.
func IoSubTypeContainsFold(v string) predicate.Statement {
	return predicate.Statement(sql.FieldContainsFold(FieldIoSubType, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v decimal.Decimal) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v decimal.Decimal) predicate.Statement {
	return predicate.Statement(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...decimal.Decimal) predicate.Statement {
	return predicate.Statement(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...decimal.Decimal) predicate.Statement {
	return predicate.Statement(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v decimal.Decimal) predicate.Statement {
	return predicate.Statement(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v decimal.Decimal) predicate.Statement {
	return predicate.Statement(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v decimal.Decimal) predicate.Statement {
	return predicate.Statement(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v decimal.Decimal) predicate.Statement {
	return predicate.Statement(sql.FieldLTE(FieldAmount, v))
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.Statement {
	return predicate.Statement(sql.FieldIsNull(FieldAmount))
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.Statement {
	return predicate.Statement(sql.FieldNotNull(FieldAmount))
}

// IoExtraEQ applies the EQ predicate on the "io_extra" field.
func IoExtraEQ(v string) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldIoExtra, v))
}

// IoExtraNEQ applies the NEQ predicate on the "io_extra" field.
func IoExtraNEQ(v string) predicate.Statement {
	return predicate.Statement(sql.FieldNEQ(FieldIoExtra, v))
}

// IoExtraIn applies the In predicate on the "io_extra" field.
func IoExtraIn(vs ...string) predicate.Statement {
	return predicate.Statement(sql.FieldIn(FieldIoExtra, vs...))
}

// IoExtraNotIn applies the NotIn predicate on the "io_extra" field.
func IoExtraNotIn(vs ...string) predicate.Statement {
	return predicate.Statement(sql.FieldNotIn(FieldIoExtra, vs...))
}

// IoExtraGT applies the GT predicate on the "io_extra" field.
func IoExtraGT(v string) predicate.Statement {
	return predicate.Statement(sql.FieldGT(FieldIoExtra, v))
}

// IoExtraGTE applies the GTE predicate on the "io_extra" field.
func IoExtraGTE(v string) predicate.Statement {
	return predicate.Statement(sql.FieldGTE(FieldIoExtra, v))
}

// IoExtraLT applies the LT predicate on the "io_extra" field.
func IoExtraLT(v string) predicate.Statement {
	return predicate.Statement(sql.FieldLT(FieldIoExtra, v))
}

// IoExtraLTE applies the LTE predicate on the "io_extra" field.
func IoExtraLTE(v string) predicate.Statement {
	return predicate.Statement(sql.FieldLTE(FieldIoExtra, v))
}

// IoExtraContains applies the Contains predicate on the "io_extra" field.
func IoExtraContains(v string) predicate.Statement {
	return predicate.Statement(sql.FieldContains(FieldIoExtra, v))
}

// IoExtraHasPrefix applies the HasPrefix predicate on the "io_extra" field.
func IoExtraHasPrefix(v string) predicate.Statement {
	return predicate.Statement(sql.FieldHasPrefix(FieldIoExtra, v))
}

// IoExtraHasSuffix applies the HasSuffix predicate on the "io_extra" field.
func IoExtraHasSuffix(v string) predicate.Statement {
	return predicate.Statement(sql.FieldHasSuffix(FieldIoExtra, v))
}

// IoExtraIsNil applies the IsNil predicate on the "io_extra" field.
func IoExtraIsNil() predicate.Statement {
	return predicate.Statement(sql.FieldIsNull(FieldIoExtra))
}

// IoExtraNotNil applies the NotNil predicate on the "io_extra" field.
func IoExtraNotNil() predicate.Statement {
	return predicate.Statement(sql.FieldNotNull(FieldIoExtra))
}

// IoExtraEqualFold applies the EqualFold predicate on the "io_extra" field.
func IoExtraEqualFold(v string) predicate.Statement {
	return predicate.Statement(sql.FieldEqualFold(FieldIoExtra, v))
}

// IoExtraContainsFold applies the ContainsFold predicate on the "io_extra" field.
func IoExtraContainsFold(v string) predicate.Statement {
	return predicate.Statement(sql.FieldContainsFold(FieldIoExtra, v))
}

// IoExtraV1EQ applies the EQ predicate on the "io_extra_v1" field.
func IoExtraV1EQ(v string) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldIoExtraV1, v))
}

// IoExtraV1NEQ applies the NEQ predicate on the "io_extra_v1" field.
func IoExtraV1NEQ(v string) predicate.Statement {
	return predicate.Statement(sql.FieldNEQ(FieldIoExtraV1, v))
}

// IoExtraV1In applies the In predicate on the "io_extra_v1" field.
func IoExtraV1In(vs ...string) predicate.Statement {
	return predicate.Statement(sql.FieldIn(FieldIoExtraV1, vs...))
}

// IoExtraV1NotIn applies the NotIn predicate on the "io_extra_v1" field.
func IoExtraV1NotIn(vs ...string) predicate.Statement {
	return predicate.Statement(sql.FieldNotIn(FieldIoExtraV1, vs...))
}

// IoExtraV1GT applies the GT predicate on the "io_extra_v1" field.
func IoExtraV1GT(v string) predicate.Statement {
	return predicate.Statement(sql.FieldGT(FieldIoExtraV1, v))
}

// IoExtraV1GTE applies the GTE predicate on the "io_extra_v1" field.
func IoExtraV1GTE(v string) predicate.Statement {
	return predicate.Statement(sql.FieldGTE(FieldIoExtraV1, v))
}

// IoExtraV1LT applies the LT predicate on the "io_extra_v1" field.
func IoExtraV1LT(v string) predicate.Statement {
	return predicate.Statement(sql.FieldLT(FieldIoExtraV1, v))
}

// IoExtraV1LTE applies the LTE predicate on the "io_extra_v1" field.
func IoExtraV1LTE(v string) predicate.Statement {
	return predicate.Statement(sql.FieldLTE(FieldIoExtraV1, v))
}

// IoExtraV1Contains applies the Contains predicate on the "io_extra_v1" field.
func IoExtraV1Contains(v string) predicate.Statement {
	return predicate.Statement(sql.FieldContains(FieldIoExtraV1, v))
}

// IoExtraV1HasPrefix applies the HasPrefix predicate on the "io_extra_v1" field.
func IoExtraV1HasPrefix(v string) predicate.Statement {
	return predicate.Statement(sql.FieldHasPrefix(FieldIoExtraV1, v))
}

// IoExtraV1HasSuffix applies the HasSuffix predicate on the "io_extra_v1" field.
func IoExtraV1HasSuffix(v string) predicate.Statement {
	return predicate.Statement(sql.FieldHasSuffix(FieldIoExtraV1, v))
}

// IoExtraV1IsNil applies the IsNil predicate on the "io_extra_v1" field.
func IoExtraV1IsNil() predicate.Statement {
	return predicate.Statement(sql.FieldIsNull(FieldIoExtraV1))
}

// IoExtraV1NotNil applies the NotNil predicate on the "io_extra_v1" field.
func IoExtraV1NotNil() predicate.Statement {
	return predicate.Statement(sql.FieldNotNull(FieldIoExtraV1))
}

// IoExtraV1EqualFold applies the EqualFold predicate on the "io_extra_v1" field.
func IoExtraV1EqualFold(v string) predicate.Statement {
	return predicate.Statement(sql.FieldEqualFold(FieldIoExtraV1, v))
}

// IoExtraV1ContainsFold applies the ContainsFold predicate on the "io_extra_v1" field.
func IoExtraV1ContainsFold(v string) predicate.Statement {
	return predicate.Statement(sql.FieldContainsFold(FieldIoExtraV1, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Statement) predicate.Statement {
	return predicate.Statement(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Statement) predicate.Statement {
	return predicate.Statement(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Statement) predicate.Statement {
	return predicate.Statement(sql.NotPredicates(p))
}

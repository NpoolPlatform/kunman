// Code generated by ent, DO NOT EDIT.

package goodstatement

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the goodstatement type in the database.
	Label = "good_statement"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldGoodID holds the string denoting the good_id field in the database.
	FieldGoodID = "good_id"
	// FieldCoinTypeID holds the string denoting the coin_type_id field in the database.
	FieldCoinTypeID = "coin_type_id"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldToPlatform holds the string denoting the to_platform field in the database.
	FieldToPlatform = "to_platform"
	// FieldToUser holds the string denoting the to_user field in the database.
	FieldToUser = "to_user"
	// FieldTechniqueServiceFeeAmount holds the string denoting the technique_service_fee_amount field in the database.
	FieldTechniqueServiceFeeAmount = "technique_service_fee_amount"
	// FieldBenefitDate holds the string denoting the benefit_date field in the database.
	FieldBenefitDate = "benefit_date"
	// Table holds the table name of the goodstatement in the database.
	Table = "mining_details"
)

// Columns holds all SQL columns for goodstatement fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldEntID,
	FieldGoodID,
	FieldCoinTypeID,
	FieldAmount,
	FieldToPlatform,
	FieldToUser,
	FieldTechniqueServiceFeeAmount,
	FieldBenefitDate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() uint32
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() uint32
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() uint32
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt func() uint32
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultGoodID holds the default value on creation for the "good_id" field.
	DefaultGoodID func() uuid.UUID
	// DefaultCoinTypeID holds the default value on creation for the "coin_type_id" field.
	DefaultCoinTypeID func() uuid.UUID
	// DefaultBenefitDate holds the default value on creation for the "benefit_date" field.
	DefaultBenefitDate uint32
)

// OrderOption defines the ordering options for the GoodStatement queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByGoodID orders the results by the good_id field.
func ByGoodID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodID, opts...).ToFunc()
}

// ByCoinTypeID orders the results by the coin_type_id field.
func ByCoinTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoinTypeID, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByToPlatform orders the results by the to_platform field.
func ByToPlatform(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToPlatform, opts...).ToFunc()
}

// ByToUser orders the results by the to_user field.
func ByToUser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToUser, opts...).ToFunc()
}

// ByTechniqueServiceFeeAmount orders the results by the technique_service_fee_amount field.
func ByTechniqueServiceFeeAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTechniqueServiceFeeAmount, opts...).ToFunc()
}

// ByBenefitDate orders the results by the benefit_date field.
func ByBenefitDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBenefitDate, opts...).ToFunc()
}

// Code generated by ent, DO NOT EDIT.

package goodstatement

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/ledger/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldEQ(FieldDeletedAt, v))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldEQ(FieldEntID, v))
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldEQ(FieldGoodID, v))
}

// CoinTypeID applies equality check predicate on the "coin_type_id" field. It's identical to CoinTypeIDEQ.
func CoinTypeID(v uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldEQ(FieldCoinTypeID, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldEQ(FieldAmount, v))
}

// ToPlatform applies equality check predicate on the "to_platform" field. It's identical to ToPlatformEQ.
func ToPlatform(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldEQ(FieldToPlatform, v))
}

// ToUser applies equality check predicate on the "to_user" field. It's identical to ToUserEQ.
func ToUser(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldEQ(FieldToUser, v))
}

// TechniqueServiceFeeAmount applies equality check predicate on the "technique_service_fee_amount" field. It's identical to TechniqueServiceFeeAmountEQ.
func TechniqueServiceFeeAmount(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldEQ(FieldTechniqueServiceFeeAmount, v))
}

// BenefitDate applies equality check predicate on the "benefit_date" field. It's identical to BenefitDateEQ.
func BenefitDate(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldEQ(FieldBenefitDate, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldLTE(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldLTE(FieldEntID, v))
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldEQ(FieldGoodID, v))
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNEQ(FieldGoodID, v))
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldIn(FieldGoodID, vs...))
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNotIn(FieldGoodID, vs...))
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldGT(FieldGoodID, v))
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldGTE(FieldGoodID, v))
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldLT(FieldGoodID, v))
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldLTE(FieldGoodID, v))
}

// GoodIDIsNil applies the IsNil predicate on the "good_id" field.
func GoodIDIsNil() predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldIsNull(FieldGoodID))
}

// GoodIDNotNil applies the NotNil predicate on the "good_id" field.
func GoodIDNotNil() predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNotNull(FieldGoodID))
}

// CoinTypeIDEQ applies the EQ predicate on the "coin_type_id" field.
func CoinTypeIDEQ(v uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldEQ(FieldCoinTypeID, v))
}

// CoinTypeIDNEQ applies the NEQ predicate on the "coin_type_id" field.
func CoinTypeIDNEQ(v uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNEQ(FieldCoinTypeID, v))
}

// CoinTypeIDIn applies the In predicate on the "coin_type_id" field.
func CoinTypeIDIn(vs ...uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldIn(FieldCoinTypeID, vs...))
}

// CoinTypeIDNotIn applies the NotIn predicate on the "coin_type_id" field.
func CoinTypeIDNotIn(vs ...uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNotIn(FieldCoinTypeID, vs...))
}

// CoinTypeIDGT applies the GT predicate on the "coin_type_id" field.
func CoinTypeIDGT(v uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldGT(FieldCoinTypeID, v))
}

// CoinTypeIDGTE applies the GTE predicate on the "coin_type_id" field.
func CoinTypeIDGTE(v uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldGTE(FieldCoinTypeID, v))
}

// CoinTypeIDLT applies the LT predicate on the "coin_type_id" field.
func CoinTypeIDLT(v uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldLT(FieldCoinTypeID, v))
}

// CoinTypeIDLTE applies the LTE predicate on the "coin_type_id" field.
func CoinTypeIDLTE(v uuid.UUID) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldLTE(FieldCoinTypeID, v))
}

// CoinTypeIDIsNil applies the IsNil predicate on the "coin_type_id" field.
func CoinTypeIDIsNil() predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldIsNull(FieldCoinTypeID))
}

// CoinTypeIDNotNil applies the NotNil predicate on the "coin_type_id" field.
func CoinTypeIDNotNil() predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNotNull(FieldCoinTypeID))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldLTE(FieldAmount, v))
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldIsNull(FieldAmount))
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNotNull(FieldAmount))
}

// ToPlatformEQ applies the EQ predicate on the "to_platform" field.
func ToPlatformEQ(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldEQ(FieldToPlatform, v))
}

// ToPlatformNEQ applies the NEQ predicate on the "to_platform" field.
func ToPlatformNEQ(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNEQ(FieldToPlatform, v))
}

// ToPlatformIn applies the In predicate on the "to_platform" field.
func ToPlatformIn(vs ...decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldIn(FieldToPlatform, vs...))
}

// ToPlatformNotIn applies the NotIn predicate on the "to_platform" field.
func ToPlatformNotIn(vs ...decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNotIn(FieldToPlatform, vs...))
}

// ToPlatformGT applies the GT predicate on the "to_platform" field.
func ToPlatformGT(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldGT(FieldToPlatform, v))
}

// ToPlatformGTE applies the GTE predicate on the "to_platform" field.
func ToPlatformGTE(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldGTE(FieldToPlatform, v))
}

// ToPlatformLT applies the LT predicate on the "to_platform" field.
func ToPlatformLT(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldLT(FieldToPlatform, v))
}

// ToPlatformLTE applies the LTE predicate on the "to_platform" field.
func ToPlatformLTE(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldLTE(FieldToPlatform, v))
}

// ToPlatformIsNil applies the IsNil predicate on the "to_platform" field.
func ToPlatformIsNil() predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldIsNull(FieldToPlatform))
}

// ToPlatformNotNil applies the NotNil predicate on the "to_platform" field.
func ToPlatformNotNil() predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNotNull(FieldToPlatform))
}

// ToUserEQ applies the EQ predicate on the "to_user" field.
func ToUserEQ(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldEQ(FieldToUser, v))
}

// ToUserNEQ applies the NEQ predicate on the "to_user" field.
func ToUserNEQ(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNEQ(FieldToUser, v))
}

// ToUserIn applies the In predicate on the "to_user" field.
func ToUserIn(vs ...decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldIn(FieldToUser, vs...))
}

// ToUserNotIn applies the NotIn predicate on the "to_user" field.
func ToUserNotIn(vs ...decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNotIn(FieldToUser, vs...))
}

// ToUserGT applies the GT predicate on the "to_user" field.
func ToUserGT(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldGT(FieldToUser, v))
}

// ToUserGTE applies the GTE predicate on the "to_user" field.
func ToUserGTE(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldGTE(FieldToUser, v))
}

// ToUserLT applies the LT predicate on the "to_user" field.
func ToUserLT(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldLT(FieldToUser, v))
}

// ToUserLTE applies the LTE predicate on the "to_user" field.
func ToUserLTE(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldLTE(FieldToUser, v))
}

// ToUserIsNil applies the IsNil predicate on the "to_user" field.
func ToUserIsNil() predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldIsNull(FieldToUser))
}

// ToUserNotNil applies the NotNil predicate on the "to_user" field.
func ToUserNotNil() predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNotNull(FieldToUser))
}

// TechniqueServiceFeeAmountEQ applies the EQ predicate on the "technique_service_fee_amount" field.
func TechniqueServiceFeeAmountEQ(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldEQ(FieldTechniqueServiceFeeAmount, v))
}

// TechniqueServiceFeeAmountNEQ applies the NEQ predicate on the "technique_service_fee_amount" field.
func TechniqueServiceFeeAmountNEQ(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNEQ(FieldTechniqueServiceFeeAmount, v))
}

// TechniqueServiceFeeAmountIn applies the In predicate on the "technique_service_fee_amount" field.
func TechniqueServiceFeeAmountIn(vs ...decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldIn(FieldTechniqueServiceFeeAmount, vs...))
}

// TechniqueServiceFeeAmountNotIn applies the NotIn predicate on the "technique_service_fee_amount" field.
func TechniqueServiceFeeAmountNotIn(vs ...decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNotIn(FieldTechniqueServiceFeeAmount, vs...))
}

// TechniqueServiceFeeAmountGT applies the GT predicate on the "technique_service_fee_amount" field.
func TechniqueServiceFeeAmountGT(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldGT(FieldTechniqueServiceFeeAmount, v))
}

// TechniqueServiceFeeAmountGTE applies the GTE predicate on the "technique_service_fee_amount" field.
func TechniqueServiceFeeAmountGTE(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldGTE(FieldTechniqueServiceFeeAmount, v))
}

// TechniqueServiceFeeAmountLT applies the LT predicate on the "technique_service_fee_amount" field.
func TechniqueServiceFeeAmountLT(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldLT(FieldTechniqueServiceFeeAmount, v))
}

// TechniqueServiceFeeAmountLTE applies the LTE predicate on the "technique_service_fee_amount" field.
func TechniqueServiceFeeAmountLTE(v decimal.Decimal) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldLTE(FieldTechniqueServiceFeeAmount, v))
}

// TechniqueServiceFeeAmountIsNil applies the IsNil predicate on the "technique_service_fee_amount" field.
func TechniqueServiceFeeAmountIsNil() predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldIsNull(FieldTechniqueServiceFeeAmount))
}

// TechniqueServiceFeeAmountNotNil applies the NotNil predicate on the "technique_service_fee_amount" field.
func TechniqueServiceFeeAmountNotNil() predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNotNull(FieldTechniqueServiceFeeAmount))
}

// BenefitDateEQ applies the EQ predicate on the "benefit_date" field.
func BenefitDateEQ(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldEQ(FieldBenefitDate, v))
}

// BenefitDateNEQ applies the NEQ predicate on the "benefit_date" field.
func BenefitDateNEQ(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNEQ(FieldBenefitDate, v))
}

// BenefitDateIn applies the In predicate on the "benefit_date" field.
func BenefitDateIn(vs ...uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldIn(FieldBenefitDate, vs...))
}

// BenefitDateNotIn applies the NotIn predicate on the "benefit_date" field.
func BenefitDateNotIn(vs ...uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNotIn(FieldBenefitDate, vs...))
}

// BenefitDateGT applies the GT predicate on the "benefit_date" field.
func BenefitDateGT(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldGT(FieldBenefitDate, v))
}

// BenefitDateGTE applies the GTE predicate on the "benefit_date" field.
func BenefitDateGTE(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldGTE(FieldBenefitDate, v))
}

// BenefitDateLT applies the LT predicate on the "benefit_date" field.
func BenefitDateLT(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldLT(FieldBenefitDate, v))
}

// BenefitDateLTE applies the LTE predicate on the "benefit_date" field.
func BenefitDateLTE(v uint32) predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldLTE(FieldBenefitDate, v))
}

// BenefitDateIsNil applies the IsNil predicate on the "benefit_date" field.
func BenefitDateIsNil() predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldIsNull(FieldBenefitDate))
}

// BenefitDateNotNil applies the NotNil predicate on the "benefit_date" field.
func BenefitDateNotNil() predicate.GoodStatement {
	return predicate.GoodStatement(sql.FieldNotNull(FieldBenefitDate))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GoodStatement) predicate.GoodStatement {
	return predicate.GoodStatement(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GoodStatement) predicate.GoodStatement {
	return predicate.GoodStatement(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GoodStatement) predicate.GoodStatement {
	return predicate.GoodStatement(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package ledger

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/ledger/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldDeletedAt, v))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldEntID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldAppID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldUserID, v))
}

// CurrencyID applies equality check predicate on the "currency_id" field. It's identical to CurrencyIDEQ.
func CurrencyID(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldCurrencyID, v))
}

// CurrencyType applies equality check predicate on the "currency_type" field. It's identical to CurrencyTypeEQ.
func CurrencyType(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldCurrencyType, v))
}

// Incoming applies equality check predicate on the "incoming" field. It's identical to IncomingEQ.
func Incoming(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldIncoming, v))
}

// Locked applies equality check predicate on the "locked" field. It's identical to LockedEQ.
func Locked(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldLocked, v))
}

// Outcoming applies equality check predicate on the "outcoming" field. It's identical to OutcomingEQ.
func Outcoming(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldOutcoming, v))
}

// Spendable applies equality check predicate on the "spendable" field. It's identical to SpendableEQ.
func Spendable(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldSpendable, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Ledger {
	return predicate.Ledger(sql.FieldLTE(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldLTE(FieldEntID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldLTE(FieldAppID, v))
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.Ledger {
	return predicate.Ledger(sql.FieldIsNull(FieldAppID))
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.Ledger {
	return predicate.Ledger(sql.FieldNotNull(FieldAppID))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldLTE(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Ledger {
	return predicate.Ledger(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Ledger {
	return predicate.Ledger(sql.FieldNotNull(FieldUserID))
}

// CurrencyIDEQ applies the EQ predicate on the "currency_id" field.
func CurrencyIDEQ(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldCurrencyID, v))
}

// CurrencyIDNEQ applies the NEQ predicate on the "currency_id" field.
func CurrencyIDNEQ(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldCurrencyID, v))
}

// CurrencyIDIn applies the In predicate on the "currency_id" field.
func CurrencyIDIn(vs ...uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldCurrencyID, vs...))
}

// CurrencyIDNotIn applies the NotIn predicate on the "currency_id" field.
func CurrencyIDNotIn(vs ...uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldCurrencyID, vs...))
}

// CurrencyIDGT applies the GT predicate on the "currency_id" field.
func CurrencyIDGT(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldGT(FieldCurrencyID, v))
}

// CurrencyIDGTE applies the GTE predicate on the "currency_id" field.
func CurrencyIDGTE(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldGTE(FieldCurrencyID, v))
}

// CurrencyIDLT applies the LT predicate on the "currency_id" field.
func CurrencyIDLT(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldLT(FieldCurrencyID, v))
}

// CurrencyIDLTE applies the LTE predicate on the "currency_id" field.
func CurrencyIDLTE(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldLTE(FieldCurrencyID, v))
}

// CurrencyIDIsNil applies the IsNil predicate on the "currency_id" field.
func CurrencyIDIsNil() predicate.Ledger {
	return predicate.Ledger(sql.FieldIsNull(FieldCurrencyID))
}

// CurrencyIDNotNil applies the NotNil predicate on the "currency_id" field.
func CurrencyIDNotNil() predicate.Ledger {
	return predicate.Ledger(sql.FieldNotNull(FieldCurrencyID))
}

// CurrencyTypeEQ applies the EQ predicate on the "currency_type" field.
func CurrencyTypeEQ(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldCurrencyType, v))
}

// CurrencyTypeNEQ applies the NEQ predicate on the "currency_type" field.
func CurrencyTypeNEQ(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldCurrencyType, v))
}

// CurrencyTypeIn applies the In predicate on the "currency_type" field.
func CurrencyTypeIn(vs ...string) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldCurrencyType, vs...))
}

// CurrencyTypeNotIn applies the NotIn predicate on the "currency_type" field.
func CurrencyTypeNotIn(vs ...string) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldCurrencyType, vs...))
}

// CurrencyTypeGT applies the GT predicate on the "currency_type" field.
func CurrencyTypeGT(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldGT(FieldCurrencyType, v))
}

// CurrencyTypeGTE applies the GTE predicate on the "currency_type" field.
func CurrencyTypeGTE(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldGTE(FieldCurrencyType, v))
}

// CurrencyTypeLT applies the LT predicate on the "currency_type" field.
func CurrencyTypeLT(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldLT(FieldCurrencyType, v))
}

// CurrencyTypeLTE applies the LTE predicate on the "currency_type" field.
func CurrencyTypeLTE(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldLTE(FieldCurrencyType, v))
}

// CurrencyTypeContains applies the Contains predicate on the "currency_type" field.
func CurrencyTypeContains(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldContains(FieldCurrencyType, v))
}

// CurrencyTypeHasPrefix applies the HasPrefix predicate on the "currency_type" field.
func CurrencyTypeHasPrefix(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldHasPrefix(FieldCurrencyType, v))
}

// CurrencyTypeHasSuffix applies the HasSuffix predicate on the "currency_type" field.
func CurrencyTypeHasSuffix(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldHasSuffix(FieldCurrencyType, v))
}

// CurrencyTypeIsNil applies the IsNil predicate on the "currency_type" field.
func CurrencyTypeIsNil() predicate.Ledger {
	return predicate.Ledger(sql.FieldIsNull(FieldCurrencyType))
}

// CurrencyTypeNotNil applies the NotNil predicate on the "currency_type" field.
func CurrencyTypeNotNil() predicate.Ledger {
	return predicate.Ledger(sql.FieldNotNull(FieldCurrencyType))
}

// CurrencyTypeEqualFold applies the EqualFold predicate on the "currency_type" field.
func CurrencyTypeEqualFold(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldEqualFold(FieldCurrencyType, v))
}

// CurrencyTypeContainsFold applies the ContainsFold predicate on the "currency_type" field.
func CurrencyTypeContainsFold(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldContainsFold(FieldCurrencyType, v))
}

// IncomingEQ applies the EQ predicate on the "incoming" field.
func IncomingEQ(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldIncoming, v))
}

// IncomingNEQ applies the NEQ predicate on the "incoming" field.
func IncomingNEQ(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldIncoming, v))
}

// IncomingIn applies the In predicate on the "incoming" field.
func IncomingIn(vs ...decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldIncoming, vs...))
}

// IncomingNotIn applies the NotIn predicate on the "incoming" field.
func IncomingNotIn(vs ...decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldIncoming, vs...))
}

// IncomingGT applies the GT predicate on the "incoming" field.
func IncomingGT(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldGT(FieldIncoming, v))
}

// IncomingGTE applies the GTE predicate on the "incoming" field.
func IncomingGTE(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldGTE(FieldIncoming, v))
}

// IncomingLT applies the LT predicate on the "incoming" field.
func IncomingLT(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldLT(FieldIncoming, v))
}

// IncomingLTE applies the LTE predicate on the "incoming" field.
func IncomingLTE(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldLTE(FieldIncoming, v))
}

// IncomingIsNil applies the IsNil predicate on the "incoming" field.
func IncomingIsNil() predicate.Ledger {
	return predicate.Ledger(sql.FieldIsNull(FieldIncoming))
}

// IncomingNotNil applies the NotNil predicate on the "incoming" field.
func IncomingNotNil() predicate.Ledger {
	return predicate.Ledger(sql.FieldNotNull(FieldIncoming))
}

// LockedEQ applies the EQ predicate on the "locked" field.
func LockedEQ(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldLocked, v))
}

// LockedNEQ applies the NEQ predicate on the "locked" field.
func LockedNEQ(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldLocked, v))
}

// LockedIn applies the In predicate on the "locked" field.
func LockedIn(vs ...decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldLocked, vs...))
}

// LockedNotIn applies the NotIn predicate on the "locked" field.
func LockedNotIn(vs ...decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldLocked, vs...))
}

// LockedGT applies the GT predicate on the "locked" field.
func LockedGT(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldGT(FieldLocked, v))
}

// LockedGTE applies the GTE predicate on the "locked" field.
func LockedGTE(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldGTE(FieldLocked, v))
}

// LockedLT applies the LT predicate on the "locked" field.
func LockedLT(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldLT(FieldLocked, v))
}

// LockedLTE applies the LTE predicate on the "locked" field.
func LockedLTE(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldLTE(FieldLocked, v))
}

// LockedIsNil applies the IsNil predicate on the "locked" field.
func LockedIsNil() predicate.Ledger {
	return predicate.Ledger(sql.FieldIsNull(FieldLocked))
}

// LockedNotNil applies the NotNil predicate on the "locked" field.
func LockedNotNil() predicate.Ledger {
	return predicate.Ledger(sql.FieldNotNull(FieldLocked))
}

// OutcomingEQ applies the EQ predicate on the "outcoming" field.
func OutcomingEQ(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldOutcoming, v))
}

// OutcomingNEQ applies the NEQ predicate on the "outcoming" field.
func OutcomingNEQ(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldOutcoming, v))
}

// OutcomingIn applies the In predicate on the "outcoming" field.
func OutcomingIn(vs ...decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldOutcoming, vs...))
}

// OutcomingNotIn applies the NotIn predicate on the "outcoming" field.
func OutcomingNotIn(vs ...decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldOutcoming, vs...))
}

// OutcomingGT applies the GT predicate on the "outcoming" field.
func OutcomingGT(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldGT(FieldOutcoming, v))
}

// OutcomingGTE applies the GTE predicate on the "outcoming" field.
func OutcomingGTE(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldGTE(FieldOutcoming, v))
}

// OutcomingLT applies the LT predicate on the "outcoming" field.
func OutcomingLT(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldLT(FieldOutcoming, v))
}

// OutcomingLTE applies the LTE predicate on the "outcoming" field.
func OutcomingLTE(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldLTE(FieldOutcoming, v))
}

// OutcomingIsNil applies the IsNil predicate on the "outcoming" field.
func OutcomingIsNil() predicate.Ledger {
	return predicate.Ledger(sql.FieldIsNull(FieldOutcoming))
}

// OutcomingNotNil applies the NotNil predicate on the "outcoming" field.
func OutcomingNotNil() predicate.Ledger {
	return predicate.Ledger(sql.FieldNotNull(FieldOutcoming))
}

// SpendableEQ applies the EQ predicate on the "spendable" field.
func SpendableEQ(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldSpendable, v))
}

// SpendableNEQ applies the NEQ predicate on the "spendable" field.
func SpendableNEQ(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldSpendable, v))
}

// SpendableIn applies the In predicate on the "spendable" field.
func SpendableIn(vs ...decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldSpendable, vs...))
}

// SpendableNotIn applies the NotIn predicate on the "spendable" field.
func SpendableNotIn(vs ...decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldSpendable, vs...))
}

// SpendableGT applies the GT predicate on the "spendable" field.
func SpendableGT(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldGT(FieldSpendable, v))
}

// SpendableGTE applies the GTE predicate on the "spendable" field.
func SpendableGTE(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldGTE(FieldSpendable, v))
}

// SpendableLT applies the LT predicate on the "spendable" field.
func SpendableLT(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldLT(FieldSpendable, v))
}

// SpendableLTE applies the LTE predicate on the "spendable" field.
func SpendableLTE(v decimal.Decimal) predicate.Ledger {
	return predicate.Ledger(sql.FieldLTE(FieldSpendable, v))
}

// SpendableIsNil applies the IsNil predicate on the "spendable" field.
func SpendableIsNil() predicate.Ledger {
	return predicate.Ledger(sql.FieldIsNull(FieldSpendable))
}

// SpendableNotNil applies the NotNil predicate on the "spendable" field.
func SpendableNotNil() predicate.Ledger {
	return predicate.Ledger(sql.FieldNotNull(FieldSpendable))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ledger) predicate.Ledger {
	return predicate.Ledger(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ledger) predicate.Ledger {
	return predicate.Ledger(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ledger) predicate.Ledger {
	return predicate.Ledger(sql.NotPredicates(p))
}

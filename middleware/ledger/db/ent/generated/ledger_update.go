// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/ledger/db/ent/generated/ledger"
	"github.com/NpoolPlatform/kunman/middleware/ledger/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// LedgerUpdate is the builder for updating Ledger entities.
type LedgerUpdate struct {
	config
	hooks     []Hook
	mutation  *LedgerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the LedgerUpdate builder.
func (lu *LedgerUpdate) Where(ps ...predicate.Ledger) *LedgerUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetCreatedAt sets the "created_at" field.
func (lu *LedgerUpdate) SetCreatedAt(u uint32) *LedgerUpdate {
	lu.mutation.ResetCreatedAt()
	lu.mutation.SetCreatedAt(u)
	return lu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lu *LedgerUpdate) SetNillableCreatedAt(u *uint32) *LedgerUpdate {
	if u != nil {
		lu.SetCreatedAt(*u)
	}
	return lu
}

// AddCreatedAt adds u to the "created_at" field.
func (lu *LedgerUpdate) AddCreatedAt(u int32) *LedgerUpdate {
	lu.mutation.AddCreatedAt(u)
	return lu
}

// SetUpdatedAt sets the "updated_at" field.
func (lu *LedgerUpdate) SetUpdatedAt(u uint32) *LedgerUpdate {
	lu.mutation.ResetUpdatedAt()
	lu.mutation.SetUpdatedAt(u)
	return lu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (lu *LedgerUpdate) AddUpdatedAt(u int32) *LedgerUpdate {
	lu.mutation.AddUpdatedAt(u)
	return lu
}

// SetDeletedAt sets the "deleted_at" field.
func (lu *LedgerUpdate) SetDeletedAt(u uint32) *LedgerUpdate {
	lu.mutation.ResetDeletedAt()
	lu.mutation.SetDeletedAt(u)
	return lu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lu *LedgerUpdate) SetNillableDeletedAt(u *uint32) *LedgerUpdate {
	if u != nil {
		lu.SetDeletedAt(*u)
	}
	return lu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (lu *LedgerUpdate) AddDeletedAt(u int32) *LedgerUpdate {
	lu.mutation.AddDeletedAt(u)
	return lu
}

// SetEntID sets the "ent_id" field.
func (lu *LedgerUpdate) SetEntID(u uuid.UUID) *LedgerUpdate {
	lu.mutation.SetEntID(u)
	return lu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (lu *LedgerUpdate) SetNillableEntID(u *uuid.UUID) *LedgerUpdate {
	if u != nil {
		lu.SetEntID(*u)
	}
	return lu
}

// SetAppID sets the "app_id" field.
func (lu *LedgerUpdate) SetAppID(u uuid.UUID) *LedgerUpdate {
	lu.mutation.SetAppID(u)
	return lu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (lu *LedgerUpdate) SetNillableAppID(u *uuid.UUID) *LedgerUpdate {
	if u != nil {
		lu.SetAppID(*u)
	}
	return lu
}

// ClearAppID clears the value of the "app_id" field.
func (lu *LedgerUpdate) ClearAppID() *LedgerUpdate {
	lu.mutation.ClearAppID()
	return lu
}

// SetUserID sets the "user_id" field.
func (lu *LedgerUpdate) SetUserID(u uuid.UUID) *LedgerUpdate {
	lu.mutation.SetUserID(u)
	return lu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lu *LedgerUpdate) SetNillableUserID(u *uuid.UUID) *LedgerUpdate {
	if u != nil {
		lu.SetUserID(*u)
	}
	return lu
}

// ClearUserID clears the value of the "user_id" field.
func (lu *LedgerUpdate) ClearUserID() *LedgerUpdate {
	lu.mutation.ClearUserID()
	return lu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (lu *LedgerUpdate) SetCoinTypeID(u uuid.UUID) *LedgerUpdate {
	lu.mutation.SetCoinTypeID(u)
	return lu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (lu *LedgerUpdate) SetNillableCoinTypeID(u *uuid.UUID) *LedgerUpdate {
	if u != nil {
		lu.SetCoinTypeID(*u)
	}
	return lu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (lu *LedgerUpdate) ClearCoinTypeID() *LedgerUpdate {
	lu.mutation.ClearCoinTypeID()
	return lu
}

// SetIncoming sets the "incoming" field.
func (lu *LedgerUpdate) SetIncoming(d decimal.Decimal) *LedgerUpdate {
	lu.mutation.ResetIncoming()
	lu.mutation.SetIncoming(d)
	return lu
}

// SetNillableIncoming sets the "incoming" field if the given value is not nil.
func (lu *LedgerUpdate) SetNillableIncoming(d *decimal.Decimal) *LedgerUpdate {
	if d != nil {
		lu.SetIncoming(*d)
	}
	return lu
}

// AddIncoming adds d to the "incoming" field.
func (lu *LedgerUpdate) AddIncoming(d decimal.Decimal) *LedgerUpdate {
	lu.mutation.AddIncoming(d)
	return lu
}

// ClearIncoming clears the value of the "incoming" field.
func (lu *LedgerUpdate) ClearIncoming() *LedgerUpdate {
	lu.mutation.ClearIncoming()
	return lu
}

// SetLocked sets the "locked" field.
func (lu *LedgerUpdate) SetLocked(d decimal.Decimal) *LedgerUpdate {
	lu.mutation.ResetLocked()
	lu.mutation.SetLocked(d)
	return lu
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (lu *LedgerUpdate) SetNillableLocked(d *decimal.Decimal) *LedgerUpdate {
	if d != nil {
		lu.SetLocked(*d)
	}
	return lu
}

// AddLocked adds d to the "locked" field.
func (lu *LedgerUpdate) AddLocked(d decimal.Decimal) *LedgerUpdate {
	lu.mutation.AddLocked(d)
	return lu
}

// ClearLocked clears the value of the "locked" field.
func (lu *LedgerUpdate) ClearLocked() *LedgerUpdate {
	lu.mutation.ClearLocked()
	return lu
}

// SetOutcoming sets the "outcoming" field.
func (lu *LedgerUpdate) SetOutcoming(d decimal.Decimal) *LedgerUpdate {
	lu.mutation.ResetOutcoming()
	lu.mutation.SetOutcoming(d)
	return lu
}

// SetNillableOutcoming sets the "outcoming" field if the given value is not nil.
func (lu *LedgerUpdate) SetNillableOutcoming(d *decimal.Decimal) *LedgerUpdate {
	if d != nil {
		lu.SetOutcoming(*d)
	}
	return lu
}

// AddOutcoming adds d to the "outcoming" field.
func (lu *LedgerUpdate) AddOutcoming(d decimal.Decimal) *LedgerUpdate {
	lu.mutation.AddOutcoming(d)
	return lu
}

// ClearOutcoming clears the value of the "outcoming" field.
func (lu *LedgerUpdate) ClearOutcoming() *LedgerUpdate {
	lu.mutation.ClearOutcoming()
	return lu
}

// SetSpendable sets the "spendable" field.
func (lu *LedgerUpdate) SetSpendable(d decimal.Decimal) *LedgerUpdate {
	lu.mutation.ResetSpendable()
	lu.mutation.SetSpendable(d)
	return lu
}

// SetNillableSpendable sets the "spendable" field if the given value is not nil.
func (lu *LedgerUpdate) SetNillableSpendable(d *decimal.Decimal) *LedgerUpdate {
	if d != nil {
		lu.SetSpendable(*d)
	}
	return lu
}

// AddSpendable adds d to the "spendable" field.
func (lu *LedgerUpdate) AddSpendable(d decimal.Decimal) *LedgerUpdate {
	lu.mutation.AddSpendable(d)
	return lu
}

// ClearSpendable clears the value of the "spendable" field.
func (lu *LedgerUpdate) ClearSpendable() *LedgerUpdate {
	lu.mutation.ClearSpendable()
	return lu
}

// Mutation returns the LedgerMutation object of the builder.
func (lu *LedgerUpdate) Mutation() *LedgerMutation {
	return lu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LedgerUpdate) Save(ctx context.Context) (int, error) {
	lu.defaults()
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LedgerUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LedgerUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LedgerUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lu *LedgerUpdate) defaults() {
	if _, ok := lu.mutation.UpdatedAt(); !ok {
		v := ledger.UpdateDefaultUpdatedAt()
		lu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lu *LedgerUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LedgerUpdate {
	lu.modifiers = append(lu.modifiers, modifiers...)
	return lu
}

func (lu *LedgerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ledger.Table, ledger.Columns, sqlgraph.NewFieldSpec(ledger.FieldID, field.TypeUint32))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.CreatedAt(); ok {
		_spec.SetField(ledger.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := lu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(ledger.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := lu.mutation.UpdatedAt(); ok {
		_spec.SetField(ledger.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := lu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(ledger.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := lu.mutation.DeletedAt(); ok {
		_spec.SetField(ledger.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := lu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(ledger.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := lu.mutation.EntID(); ok {
		_spec.SetField(ledger.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := lu.mutation.AppID(); ok {
		_spec.SetField(ledger.FieldAppID, field.TypeUUID, value)
	}
	if lu.mutation.AppIDCleared() {
		_spec.ClearField(ledger.FieldAppID, field.TypeUUID)
	}
	if value, ok := lu.mutation.UserID(); ok {
		_spec.SetField(ledger.FieldUserID, field.TypeUUID, value)
	}
	if lu.mutation.UserIDCleared() {
		_spec.ClearField(ledger.FieldUserID, field.TypeUUID)
	}
	if value, ok := lu.mutation.CoinTypeID(); ok {
		_spec.SetField(ledger.FieldCoinTypeID, field.TypeUUID, value)
	}
	if lu.mutation.CoinTypeIDCleared() {
		_spec.ClearField(ledger.FieldCoinTypeID, field.TypeUUID)
	}
	if value, ok := lu.mutation.Incoming(); ok {
		_spec.SetField(ledger.FieldIncoming, field.TypeFloat64, value)
	}
	if value, ok := lu.mutation.AddedIncoming(); ok {
		_spec.AddField(ledger.FieldIncoming, field.TypeFloat64, value)
	}
	if lu.mutation.IncomingCleared() {
		_spec.ClearField(ledger.FieldIncoming, field.TypeFloat64)
	}
	if value, ok := lu.mutation.Locked(); ok {
		_spec.SetField(ledger.FieldLocked, field.TypeFloat64, value)
	}
	if value, ok := lu.mutation.AddedLocked(); ok {
		_spec.AddField(ledger.FieldLocked, field.TypeFloat64, value)
	}
	if lu.mutation.LockedCleared() {
		_spec.ClearField(ledger.FieldLocked, field.TypeFloat64)
	}
	if value, ok := lu.mutation.Outcoming(); ok {
		_spec.SetField(ledger.FieldOutcoming, field.TypeFloat64, value)
	}
	if value, ok := lu.mutation.AddedOutcoming(); ok {
		_spec.AddField(ledger.FieldOutcoming, field.TypeFloat64, value)
	}
	if lu.mutation.OutcomingCleared() {
		_spec.ClearField(ledger.FieldOutcoming, field.TypeFloat64)
	}
	if value, ok := lu.mutation.Spendable(); ok {
		_spec.SetField(ledger.FieldSpendable, field.TypeFloat64, value)
	}
	if value, ok := lu.mutation.AddedSpendable(); ok {
		_spec.AddField(ledger.FieldSpendable, field.TypeFloat64, value)
	}
	if lu.mutation.SpendableCleared() {
		_spec.ClearField(ledger.FieldSpendable, field.TypeFloat64)
	}
	_spec.AddModifiers(lu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ledger.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LedgerUpdateOne is the builder for updating a single Ledger entity.
type LedgerUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *LedgerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (luo *LedgerUpdateOne) SetCreatedAt(u uint32) *LedgerUpdateOne {
	luo.mutation.ResetCreatedAt()
	luo.mutation.SetCreatedAt(u)
	return luo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (luo *LedgerUpdateOne) SetNillableCreatedAt(u *uint32) *LedgerUpdateOne {
	if u != nil {
		luo.SetCreatedAt(*u)
	}
	return luo
}

// AddCreatedAt adds u to the "created_at" field.
func (luo *LedgerUpdateOne) AddCreatedAt(u int32) *LedgerUpdateOne {
	luo.mutation.AddCreatedAt(u)
	return luo
}

// SetUpdatedAt sets the "updated_at" field.
func (luo *LedgerUpdateOne) SetUpdatedAt(u uint32) *LedgerUpdateOne {
	luo.mutation.ResetUpdatedAt()
	luo.mutation.SetUpdatedAt(u)
	return luo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (luo *LedgerUpdateOne) AddUpdatedAt(u int32) *LedgerUpdateOne {
	luo.mutation.AddUpdatedAt(u)
	return luo
}

// SetDeletedAt sets the "deleted_at" field.
func (luo *LedgerUpdateOne) SetDeletedAt(u uint32) *LedgerUpdateOne {
	luo.mutation.ResetDeletedAt()
	luo.mutation.SetDeletedAt(u)
	return luo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (luo *LedgerUpdateOne) SetNillableDeletedAt(u *uint32) *LedgerUpdateOne {
	if u != nil {
		luo.SetDeletedAt(*u)
	}
	return luo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (luo *LedgerUpdateOne) AddDeletedAt(u int32) *LedgerUpdateOne {
	luo.mutation.AddDeletedAt(u)
	return luo
}

// SetEntID sets the "ent_id" field.
func (luo *LedgerUpdateOne) SetEntID(u uuid.UUID) *LedgerUpdateOne {
	luo.mutation.SetEntID(u)
	return luo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (luo *LedgerUpdateOne) SetNillableEntID(u *uuid.UUID) *LedgerUpdateOne {
	if u != nil {
		luo.SetEntID(*u)
	}
	return luo
}

// SetAppID sets the "app_id" field.
func (luo *LedgerUpdateOne) SetAppID(u uuid.UUID) *LedgerUpdateOne {
	luo.mutation.SetAppID(u)
	return luo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (luo *LedgerUpdateOne) SetNillableAppID(u *uuid.UUID) *LedgerUpdateOne {
	if u != nil {
		luo.SetAppID(*u)
	}
	return luo
}

// ClearAppID clears the value of the "app_id" field.
func (luo *LedgerUpdateOne) ClearAppID() *LedgerUpdateOne {
	luo.mutation.ClearAppID()
	return luo
}

// SetUserID sets the "user_id" field.
func (luo *LedgerUpdateOne) SetUserID(u uuid.UUID) *LedgerUpdateOne {
	luo.mutation.SetUserID(u)
	return luo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (luo *LedgerUpdateOne) SetNillableUserID(u *uuid.UUID) *LedgerUpdateOne {
	if u != nil {
		luo.SetUserID(*u)
	}
	return luo
}

// ClearUserID clears the value of the "user_id" field.
func (luo *LedgerUpdateOne) ClearUserID() *LedgerUpdateOne {
	luo.mutation.ClearUserID()
	return luo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (luo *LedgerUpdateOne) SetCoinTypeID(u uuid.UUID) *LedgerUpdateOne {
	luo.mutation.SetCoinTypeID(u)
	return luo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (luo *LedgerUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *LedgerUpdateOne {
	if u != nil {
		luo.SetCoinTypeID(*u)
	}
	return luo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (luo *LedgerUpdateOne) ClearCoinTypeID() *LedgerUpdateOne {
	luo.mutation.ClearCoinTypeID()
	return luo
}

// SetIncoming sets the "incoming" field.
func (luo *LedgerUpdateOne) SetIncoming(d decimal.Decimal) *LedgerUpdateOne {
	luo.mutation.ResetIncoming()
	luo.mutation.SetIncoming(d)
	return luo
}

// SetNillableIncoming sets the "incoming" field if the given value is not nil.
func (luo *LedgerUpdateOne) SetNillableIncoming(d *decimal.Decimal) *LedgerUpdateOne {
	if d != nil {
		luo.SetIncoming(*d)
	}
	return luo
}

// AddIncoming adds d to the "incoming" field.
func (luo *LedgerUpdateOne) AddIncoming(d decimal.Decimal) *LedgerUpdateOne {
	luo.mutation.AddIncoming(d)
	return luo
}

// ClearIncoming clears the value of the "incoming" field.
func (luo *LedgerUpdateOne) ClearIncoming() *LedgerUpdateOne {
	luo.mutation.ClearIncoming()
	return luo
}

// SetLocked sets the "locked" field.
func (luo *LedgerUpdateOne) SetLocked(d decimal.Decimal) *LedgerUpdateOne {
	luo.mutation.ResetLocked()
	luo.mutation.SetLocked(d)
	return luo
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (luo *LedgerUpdateOne) SetNillableLocked(d *decimal.Decimal) *LedgerUpdateOne {
	if d != nil {
		luo.SetLocked(*d)
	}
	return luo
}

// AddLocked adds d to the "locked" field.
func (luo *LedgerUpdateOne) AddLocked(d decimal.Decimal) *LedgerUpdateOne {
	luo.mutation.AddLocked(d)
	return luo
}

// ClearLocked clears the value of the "locked" field.
func (luo *LedgerUpdateOne) ClearLocked() *LedgerUpdateOne {
	luo.mutation.ClearLocked()
	return luo
}

// SetOutcoming sets the "outcoming" field.
func (luo *LedgerUpdateOne) SetOutcoming(d decimal.Decimal) *LedgerUpdateOne {
	luo.mutation.ResetOutcoming()
	luo.mutation.SetOutcoming(d)
	return luo
}

// SetNillableOutcoming sets the "outcoming" field if the given value is not nil.
func (luo *LedgerUpdateOne) SetNillableOutcoming(d *decimal.Decimal) *LedgerUpdateOne {
	if d != nil {
		luo.SetOutcoming(*d)
	}
	return luo
}

// AddOutcoming adds d to the "outcoming" field.
func (luo *LedgerUpdateOne) AddOutcoming(d decimal.Decimal) *LedgerUpdateOne {
	luo.mutation.AddOutcoming(d)
	return luo
}

// ClearOutcoming clears the value of the "outcoming" field.
func (luo *LedgerUpdateOne) ClearOutcoming() *LedgerUpdateOne {
	luo.mutation.ClearOutcoming()
	return luo
}

// SetSpendable sets the "spendable" field.
func (luo *LedgerUpdateOne) SetSpendable(d decimal.Decimal) *LedgerUpdateOne {
	luo.mutation.ResetSpendable()
	luo.mutation.SetSpendable(d)
	return luo
}

// SetNillableSpendable sets the "spendable" field if the given value is not nil.
func (luo *LedgerUpdateOne) SetNillableSpendable(d *decimal.Decimal) *LedgerUpdateOne {
	if d != nil {
		luo.SetSpendable(*d)
	}
	return luo
}

// AddSpendable adds d to the "spendable" field.
func (luo *LedgerUpdateOne) AddSpendable(d decimal.Decimal) *LedgerUpdateOne {
	luo.mutation.AddSpendable(d)
	return luo
}

// ClearSpendable clears the value of the "spendable" field.
func (luo *LedgerUpdateOne) ClearSpendable() *LedgerUpdateOne {
	luo.mutation.ClearSpendable()
	return luo
}

// Mutation returns the LedgerMutation object of the builder.
func (luo *LedgerUpdateOne) Mutation() *LedgerMutation {
	return luo.mutation
}

// Where appends a list predicates to the LedgerUpdate builder.
func (luo *LedgerUpdateOne) Where(ps ...predicate.Ledger) *LedgerUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LedgerUpdateOne) Select(field string, fields ...string) *LedgerUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Ledger entity.
func (luo *LedgerUpdateOne) Save(ctx context.Context) (*Ledger, error) {
	luo.defaults()
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LedgerUpdateOne) SaveX(ctx context.Context) *Ledger {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LedgerUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LedgerUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luo *LedgerUpdateOne) defaults() {
	if _, ok := luo.mutation.UpdatedAt(); !ok {
		v := ledger.UpdateDefaultUpdatedAt()
		luo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (luo *LedgerUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LedgerUpdateOne {
	luo.modifiers = append(luo.modifiers, modifiers...)
	return luo
}

func (luo *LedgerUpdateOne) sqlSave(ctx context.Context) (_node *Ledger, err error) {
	_spec := sqlgraph.NewUpdateSpec(ledger.Table, ledger.Columns, sqlgraph.NewFieldSpec(ledger.FieldID, field.TypeUint32))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Ledger.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ledger.FieldID)
		for _, f := range fields {
			if !ledger.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != ledger.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.CreatedAt(); ok {
		_spec.SetField(ledger.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := luo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(ledger.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := luo.mutation.UpdatedAt(); ok {
		_spec.SetField(ledger.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := luo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(ledger.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := luo.mutation.DeletedAt(); ok {
		_spec.SetField(ledger.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := luo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(ledger.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := luo.mutation.EntID(); ok {
		_spec.SetField(ledger.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := luo.mutation.AppID(); ok {
		_spec.SetField(ledger.FieldAppID, field.TypeUUID, value)
	}
	if luo.mutation.AppIDCleared() {
		_spec.ClearField(ledger.FieldAppID, field.TypeUUID)
	}
	if value, ok := luo.mutation.UserID(); ok {
		_spec.SetField(ledger.FieldUserID, field.TypeUUID, value)
	}
	if luo.mutation.UserIDCleared() {
		_spec.ClearField(ledger.FieldUserID, field.TypeUUID)
	}
	if value, ok := luo.mutation.CoinTypeID(); ok {
		_spec.SetField(ledger.FieldCoinTypeID, field.TypeUUID, value)
	}
	if luo.mutation.CoinTypeIDCleared() {
		_spec.ClearField(ledger.FieldCoinTypeID, field.TypeUUID)
	}
	if value, ok := luo.mutation.Incoming(); ok {
		_spec.SetField(ledger.FieldIncoming, field.TypeFloat64, value)
	}
	if value, ok := luo.mutation.AddedIncoming(); ok {
		_spec.AddField(ledger.FieldIncoming, field.TypeFloat64, value)
	}
	if luo.mutation.IncomingCleared() {
		_spec.ClearField(ledger.FieldIncoming, field.TypeFloat64)
	}
	if value, ok := luo.mutation.Locked(); ok {
		_spec.SetField(ledger.FieldLocked, field.TypeFloat64, value)
	}
	if value, ok := luo.mutation.AddedLocked(); ok {
		_spec.AddField(ledger.FieldLocked, field.TypeFloat64, value)
	}
	if luo.mutation.LockedCleared() {
		_spec.ClearField(ledger.FieldLocked, field.TypeFloat64)
	}
	if value, ok := luo.mutation.Outcoming(); ok {
		_spec.SetField(ledger.FieldOutcoming, field.TypeFloat64, value)
	}
	if value, ok := luo.mutation.AddedOutcoming(); ok {
		_spec.AddField(ledger.FieldOutcoming, field.TypeFloat64, value)
	}
	if luo.mutation.OutcomingCleared() {
		_spec.ClearField(ledger.FieldOutcoming, field.TypeFloat64)
	}
	if value, ok := luo.mutation.Spendable(); ok {
		_spec.SetField(ledger.FieldSpendable, field.TypeFloat64, value)
	}
	if value, ok := luo.mutation.AddedSpendable(); ok {
		_spec.AddField(ledger.FieldSpendable, field.TypeFloat64, value)
	}
	if luo.mutation.SpendableCleared() {
		_spec.ClearField(ledger.FieldSpendable, field.TypeFloat64)
	}
	_spec.AddModifiers(luo.modifiers...)
	_node = &Ledger{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ledger.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package goodbase

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEQ(FieldEntID, v))
}

// GoodType applies equality check predicate on the "good_type" field. It's identical to GoodTypeEQ.
func GoodType(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEQ(FieldGoodType, v))
}

// BenefitType applies equality check predicate on the "benefit_type" field. It's identical to BenefitTypeEQ.
func BenefitType(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEQ(FieldBenefitType, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEQ(FieldName, v))
}

// ServiceStartAt applies equality check predicate on the "service_start_at" field. It's identical to ServiceStartAtEQ.
func ServiceStartAt(v uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEQ(FieldServiceStartAt, v))
}

// StartMode applies equality check predicate on the "start_mode" field. It's identical to StartModeEQ.
func StartMode(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEQ(FieldStartMode, v))
}

// TestOnly applies equality check predicate on the "test_only" field. It's identical to TestOnlyEQ.
func TestOnly(v bool) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEQ(FieldTestOnly, v))
}

// BenefitIntervalHours applies equality check predicate on the "benefit_interval_hours" field. It's identical to BenefitIntervalHoursEQ.
func BenefitIntervalHours(v uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEQ(FieldBenefitIntervalHours, v))
}

// Purchasable applies equality check predicate on the "purchasable" field. It's identical to PurchasableEQ.
func Purchasable(v bool) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEQ(FieldPurchasable, v))
}

// Online applies equality check predicate on the "online" field. It's identical to OnlineEQ.
func Online(v bool) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEQ(FieldOnline, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEQ(FieldState, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldLTE(FieldEntID, v))
}

// GoodTypeEQ applies the EQ predicate on the "good_type" field.
func GoodTypeEQ(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEQ(FieldGoodType, v))
}

// GoodTypeNEQ applies the NEQ predicate on the "good_type" field.
func GoodTypeNEQ(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNEQ(FieldGoodType, v))
}

// GoodTypeIn applies the In predicate on the "good_type" field.
func GoodTypeIn(vs ...string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldIn(FieldGoodType, vs...))
}

// GoodTypeNotIn applies the NotIn predicate on the "good_type" field.
func GoodTypeNotIn(vs ...string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNotIn(FieldGoodType, vs...))
}

// GoodTypeGT applies the GT predicate on the "good_type" field.
func GoodTypeGT(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldGT(FieldGoodType, v))
}

// GoodTypeGTE applies the GTE predicate on the "good_type" field.
func GoodTypeGTE(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldGTE(FieldGoodType, v))
}

// GoodTypeLT applies the LT predicate on the "good_type" field.
func GoodTypeLT(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldLT(FieldGoodType, v))
}

// GoodTypeLTE applies the LTE predicate on the "good_type" field.
func GoodTypeLTE(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldLTE(FieldGoodType, v))
}

// GoodTypeContains applies the Contains predicate on the "good_type" field.
func GoodTypeContains(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldContains(FieldGoodType, v))
}

// GoodTypeHasPrefix applies the HasPrefix predicate on the "good_type" field.
func GoodTypeHasPrefix(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldHasPrefix(FieldGoodType, v))
}

// GoodTypeHasSuffix applies the HasSuffix predicate on the "good_type" field.
func GoodTypeHasSuffix(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldHasSuffix(FieldGoodType, v))
}

// GoodTypeIsNil applies the IsNil predicate on the "good_type" field.
func GoodTypeIsNil() predicate.GoodBase {
	return predicate.GoodBase(sql.FieldIsNull(FieldGoodType))
}

// GoodTypeNotNil applies the NotNil predicate on the "good_type" field.
func GoodTypeNotNil() predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNotNull(FieldGoodType))
}

// GoodTypeEqualFold applies the EqualFold predicate on the "good_type" field.
func GoodTypeEqualFold(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEqualFold(FieldGoodType, v))
}

// GoodTypeContainsFold applies the ContainsFold predicate on the "good_type" field.
func GoodTypeContainsFold(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldContainsFold(FieldGoodType, v))
}

// BenefitTypeEQ applies the EQ predicate on the "benefit_type" field.
func BenefitTypeEQ(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEQ(FieldBenefitType, v))
}

// BenefitTypeNEQ applies the NEQ predicate on the "benefit_type" field.
func BenefitTypeNEQ(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNEQ(FieldBenefitType, v))
}

// BenefitTypeIn applies the In predicate on the "benefit_type" field.
func BenefitTypeIn(vs ...string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldIn(FieldBenefitType, vs...))
}

// BenefitTypeNotIn applies the NotIn predicate on the "benefit_type" field.
func BenefitTypeNotIn(vs ...string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNotIn(FieldBenefitType, vs...))
}

// BenefitTypeGT applies the GT predicate on the "benefit_type" field.
func BenefitTypeGT(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldGT(FieldBenefitType, v))
}

// BenefitTypeGTE applies the GTE predicate on the "benefit_type" field.
func BenefitTypeGTE(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldGTE(FieldBenefitType, v))
}

// BenefitTypeLT applies the LT predicate on the "benefit_type" field.
func BenefitTypeLT(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldLT(FieldBenefitType, v))
}

// BenefitTypeLTE applies the LTE predicate on the "benefit_type" field.
func BenefitTypeLTE(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldLTE(FieldBenefitType, v))
}

// BenefitTypeContains applies the Contains predicate on the "benefit_type" field.
func BenefitTypeContains(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldContains(FieldBenefitType, v))
}

// BenefitTypeHasPrefix applies the HasPrefix predicate on the "benefit_type" field.
func BenefitTypeHasPrefix(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldHasPrefix(FieldBenefitType, v))
}

// BenefitTypeHasSuffix applies the HasSuffix predicate on the "benefit_type" field.
func BenefitTypeHasSuffix(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldHasSuffix(FieldBenefitType, v))
}

// BenefitTypeIsNil applies the IsNil predicate on the "benefit_type" field.
func BenefitTypeIsNil() predicate.GoodBase {
	return predicate.GoodBase(sql.FieldIsNull(FieldBenefitType))
}

// BenefitTypeNotNil applies the NotNil predicate on the "benefit_type" field.
func BenefitTypeNotNil() predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNotNull(FieldBenefitType))
}

// BenefitTypeEqualFold applies the EqualFold predicate on the "benefit_type" field.
func BenefitTypeEqualFold(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEqualFold(FieldBenefitType, v))
}

// BenefitTypeContainsFold applies the ContainsFold predicate on the "benefit_type" field.
func BenefitTypeContainsFold(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldContainsFold(FieldBenefitType, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.GoodBase {
	return predicate.GoodBase(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldContainsFold(FieldName, v))
}

// ServiceStartAtEQ applies the EQ predicate on the "service_start_at" field.
func ServiceStartAtEQ(v uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEQ(FieldServiceStartAt, v))
}

// ServiceStartAtNEQ applies the NEQ predicate on the "service_start_at" field.
func ServiceStartAtNEQ(v uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNEQ(FieldServiceStartAt, v))
}

// ServiceStartAtIn applies the In predicate on the "service_start_at" field.
func ServiceStartAtIn(vs ...uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldIn(FieldServiceStartAt, vs...))
}

// ServiceStartAtNotIn applies the NotIn predicate on the "service_start_at" field.
func ServiceStartAtNotIn(vs ...uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNotIn(FieldServiceStartAt, vs...))
}

// ServiceStartAtGT applies the GT predicate on the "service_start_at" field.
func ServiceStartAtGT(v uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldGT(FieldServiceStartAt, v))
}

// ServiceStartAtGTE applies the GTE predicate on the "service_start_at" field.
func ServiceStartAtGTE(v uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldGTE(FieldServiceStartAt, v))
}

// ServiceStartAtLT applies the LT predicate on the "service_start_at" field.
func ServiceStartAtLT(v uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldLT(FieldServiceStartAt, v))
}

// ServiceStartAtLTE applies the LTE predicate on the "service_start_at" field.
func ServiceStartAtLTE(v uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldLTE(FieldServiceStartAt, v))
}

// ServiceStartAtIsNil applies the IsNil predicate on the "service_start_at" field.
func ServiceStartAtIsNil() predicate.GoodBase {
	return predicate.GoodBase(sql.FieldIsNull(FieldServiceStartAt))
}

// ServiceStartAtNotNil applies the NotNil predicate on the "service_start_at" field.
func ServiceStartAtNotNil() predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNotNull(FieldServiceStartAt))
}

// StartModeEQ applies the EQ predicate on the "start_mode" field.
func StartModeEQ(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEQ(FieldStartMode, v))
}

// StartModeNEQ applies the NEQ predicate on the "start_mode" field.
func StartModeNEQ(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNEQ(FieldStartMode, v))
}

// StartModeIn applies the In predicate on the "start_mode" field.
func StartModeIn(vs ...string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldIn(FieldStartMode, vs...))
}

// StartModeNotIn applies the NotIn predicate on the "start_mode" field.
func StartModeNotIn(vs ...string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNotIn(FieldStartMode, vs...))
}

// StartModeGT applies the GT predicate on the "start_mode" field.
func StartModeGT(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldGT(FieldStartMode, v))
}

// StartModeGTE applies the GTE predicate on the "start_mode" field.
func StartModeGTE(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldGTE(FieldStartMode, v))
}

// StartModeLT applies the LT predicate on the "start_mode" field.
func StartModeLT(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldLT(FieldStartMode, v))
}

// StartModeLTE applies the LTE predicate on the "start_mode" field.
func StartModeLTE(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldLTE(FieldStartMode, v))
}

// StartModeContains applies the Contains predicate on the "start_mode" field.
func StartModeContains(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldContains(FieldStartMode, v))
}

// StartModeHasPrefix applies the HasPrefix predicate on the "start_mode" field.
func StartModeHasPrefix(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldHasPrefix(FieldStartMode, v))
}

// StartModeHasSuffix applies the HasSuffix predicate on the "start_mode" field.
func StartModeHasSuffix(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldHasSuffix(FieldStartMode, v))
}

// StartModeIsNil applies the IsNil predicate on the "start_mode" field.
func StartModeIsNil() predicate.GoodBase {
	return predicate.GoodBase(sql.FieldIsNull(FieldStartMode))
}

// StartModeNotNil applies the NotNil predicate on the "start_mode" field.
func StartModeNotNil() predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNotNull(FieldStartMode))
}

// StartModeEqualFold applies the EqualFold predicate on the "start_mode" field.
func StartModeEqualFold(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEqualFold(FieldStartMode, v))
}

// StartModeContainsFold applies the ContainsFold predicate on the "start_mode" field.
func StartModeContainsFold(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldContainsFold(FieldStartMode, v))
}

// TestOnlyEQ applies the EQ predicate on the "test_only" field.
func TestOnlyEQ(v bool) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEQ(FieldTestOnly, v))
}

// TestOnlyNEQ applies the NEQ predicate on the "test_only" field.
func TestOnlyNEQ(v bool) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNEQ(FieldTestOnly, v))
}

// TestOnlyIsNil applies the IsNil predicate on the "test_only" field.
func TestOnlyIsNil() predicate.GoodBase {
	return predicate.GoodBase(sql.FieldIsNull(FieldTestOnly))
}

// TestOnlyNotNil applies the NotNil predicate on the "test_only" field.
func TestOnlyNotNil() predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNotNull(FieldTestOnly))
}

// BenefitIntervalHoursEQ applies the EQ predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursEQ(v uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEQ(FieldBenefitIntervalHours, v))
}

// BenefitIntervalHoursNEQ applies the NEQ predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursNEQ(v uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNEQ(FieldBenefitIntervalHours, v))
}

// BenefitIntervalHoursIn applies the In predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursIn(vs ...uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldIn(FieldBenefitIntervalHours, vs...))
}

// BenefitIntervalHoursNotIn applies the NotIn predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursNotIn(vs ...uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNotIn(FieldBenefitIntervalHours, vs...))
}

// BenefitIntervalHoursGT applies the GT predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursGT(v uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldGT(FieldBenefitIntervalHours, v))
}

// BenefitIntervalHoursGTE applies the GTE predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursGTE(v uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldGTE(FieldBenefitIntervalHours, v))
}

// BenefitIntervalHoursLT applies the LT predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursLT(v uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldLT(FieldBenefitIntervalHours, v))
}

// BenefitIntervalHoursLTE applies the LTE predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursLTE(v uint32) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldLTE(FieldBenefitIntervalHours, v))
}

// BenefitIntervalHoursIsNil applies the IsNil predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursIsNil() predicate.GoodBase {
	return predicate.GoodBase(sql.FieldIsNull(FieldBenefitIntervalHours))
}

// BenefitIntervalHoursNotNil applies the NotNil predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursNotNil() predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNotNull(FieldBenefitIntervalHours))
}

// PurchasableEQ applies the EQ predicate on the "purchasable" field.
func PurchasableEQ(v bool) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEQ(FieldPurchasable, v))
}

// PurchasableNEQ applies the NEQ predicate on the "purchasable" field.
func PurchasableNEQ(v bool) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNEQ(FieldPurchasable, v))
}

// PurchasableIsNil applies the IsNil predicate on the "purchasable" field.
func PurchasableIsNil() predicate.GoodBase {
	return predicate.GoodBase(sql.FieldIsNull(FieldPurchasable))
}

// PurchasableNotNil applies the NotNil predicate on the "purchasable" field.
func PurchasableNotNil() predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNotNull(FieldPurchasable))
}

// OnlineEQ applies the EQ predicate on the "online" field.
func OnlineEQ(v bool) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEQ(FieldOnline, v))
}

// OnlineNEQ applies the NEQ predicate on the "online" field.
func OnlineNEQ(v bool) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNEQ(FieldOnline, v))
}

// OnlineIsNil applies the IsNil predicate on the "online" field.
func OnlineIsNil() predicate.GoodBase {
	return predicate.GoodBase(sql.FieldIsNull(FieldOnline))
}

// OnlineNotNil applies the NotNil predicate on the "online" field.
func OnlineNotNil() predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNotNull(FieldOnline))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldHasSuffix(FieldState, v))
}

// StateIsNil applies the IsNil predicate on the "state" field.
func StateIsNil() predicate.GoodBase {
	return predicate.GoodBase(sql.FieldIsNull(FieldState))
}

// StateNotNil applies the NotNil predicate on the "state" field.
func StateNotNil() predicate.GoodBase {
	return predicate.GoodBase(sql.FieldNotNull(FieldState))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.GoodBase {
	return predicate.GoodBase(sql.FieldContainsFold(FieldState, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GoodBase) predicate.GoodBase {
	return predicate.GoodBase(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GoodBase) predicate.GoodBase {
	return predicate.GoodBase(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GoodBase) predicate.GoodBase {
	return predicate.GoodBase(sql.NotPredicates(p))
}

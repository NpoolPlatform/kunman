// Code generated by ent, DO NOT EDIT.

package appgoodbase

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEQ(FieldEntID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEQ(FieldAppID, v))
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEQ(FieldGoodID, v))
}

// Purchasable applies equality check predicate on the "purchasable" field. It's identical to PurchasableEQ.
func Purchasable(v bool) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEQ(FieldPurchasable, v))
}

// EnableProductPage applies equality check predicate on the "enable_product_page" field. It's identical to EnableProductPageEQ.
func EnableProductPage(v bool) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEQ(FieldEnableProductPage, v))
}

// ProductPage applies equality check predicate on the "product_page" field. It's identical to ProductPageEQ.
func ProductPage(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEQ(FieldProductPage, v))
}

// Online applies equality check predicate on the "online" field. It's identical to OnlineEQ.
func Online(v bool) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEQ(FieldOnline, v))
}

// Visible applies equality check predicate on the "visible" field. It's identical to VisibleEQ.
func Visible(v bool) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEQ(FieldVisible, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEQ(FieldName, v))
}

// DisplayIndex applies equality check predicate on the "display_index" field. It's identical to DisplayIndexEQ.
func DisplayIndex(v int32) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEQ(FieldDisplayIndex, v))
}

// Banner applies equality check predicate on the "banner" field. It's identical to BannerEQ.
func Banner(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEQ(FieldBanner, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldLTE(FieldEntID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldLTE(FieldAppID, v))
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldIsNull(FieldAppID))
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNotNull(FieldAppID))
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEQ(FieldGoodID, v))
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNEQ(FieldGoodID, v))
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldIn(FieldGoodID, vs...))
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNotIn(FieldGoodID, vs...))
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldGT(FieldGoodID, v))
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldGTE(FieldGoodID, v))
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldLT(FieldGoodID, v))
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldLTE(FieldGoodID, v))
}

// GoodIDIsNil applies the IsNil predicate on the "good_id" field.
func GoodIDIsNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldIsNull(FieldGoodID))
}

// GoodIDNotNil applies the NotNil predicate on the "good_id" field.
func GoodIDNotNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNotNull(FieldGoodID))
}

// PurchasableEQ applies the EQ predicate on the "purchasable" field.
func PurchasableEQ(v bool) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEQ(FieldPurchasable, v))
}

// PurchasableNEQ applies the NEQ predicate on the "purchasable" field.
func PurchasableNEQ(v bool) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNEQ(FieldPurchasable, v))
}

// PurchasableIsNil applies the IsNil predicate on the "purchasable" field.
func PurchasableIsNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldIsNull(FieldPurchasable))
}

// PurchasableNotNil applies the NotNil predicate on the "purchasable" field.
func PurchasableNotNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNotNull(FieldPurchasable))
}

// EnableProductPageEQ applies the EQ predicate on the "enable_product_page" field.
func EnableProductPageEQ(v bool) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEQ(FieldEnableProductPage, v))
}

// EnableProductPageNEQ applies the NEQ predicate on the "enable_product_page" field.
func EnableProductPageNEQ(v bool) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNEQ(FieldEnableProductPage, v))
}

// EnableProductPageIsNil applies the IsNil predicate on the "enable_product_page" field.
func EnableProductPageIsNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldIsNull(FieldEnableProductPage))
}

// EnableProductPageNotNil applies the NotNil predicate on the "enable_product_page" field.
func EnableProductPageNotNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNotNull(FieldEnableProductPage))
}

// ProductPageEQ applies the EQ predicate on the "product_page" field.
func ProductPageEQ(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEQ(FieldProductPage, v))
}

// ProductPageNEQ applies the NEQ predicate on the "product_page" field.
func ProductPageNEQ(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNEQ(FieldProductPage, v))
}

// ProductPageIn applies the In predicate on the "product_page" field.
func ProductPageIn(vs ...string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldIn(FieldProductPage, vs...))
}

// ProductPageNotIn applies the NotIn predicate on the "product_page" field.
func ProductPageNotIn(vs ...string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNotIn(FieldProductPage, vs...))
}

// ProductPageGT applies the GT predicate on the "product_page" field.
func ProductPageGT(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldGT(FieldProductPage, v))
}

// ProductPageGTE applies the GTE predicate on the "product_page" field.
func ProductPageGTE(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldGTE(FieldProductPage, v))
}

// ProductPageLT applies the LT predicate on the "product_page" field.
func ProductPageLT(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldLT(FieldProductPage, v))
}

// ProductPageLTE applies the LTE predicate on the "product_page" field.
func ProductPageLTE(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldLTE(FieldProductPage, v))
}

// ProductPageContains applies the Contains predicate on the "product_page" field.
func ProductPageContains(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldContains(FieldProductPage, v))
}

// ProductPageHasPrefix applies the HasPrefix predicate on the "product_page" field.
func ProductPageHasPrefix(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldHasPrefix(FieldProductPage, v))
}

// ProductPageHasSuffix applies the HasSuffix predicate on the "product_page" field.
func ProductPageHasSuffix(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldHasSuffix(FieldProductPage, v))
}

// ProductPageIsNil applies the IsNil predicate on the "product_page" field.
func ProductPageIsNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldIsNull(FieldProductPage))
}

// ProductPageNotNil applies the NotNil predicate on the "product_page" field.
func ProductPageNotNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNotNull(FieldProductPage))
}

// ProductPageEqualFold applies the EqualFold predicate on the "product_page" field.
func ProductPageEqualFold(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEqualFold(FieldProductPage, v))
}

// ProductPageContainsFold applies the ContainsFold predicate on the "product_page" field.
func ProductPageContainsFold(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldContainsFold(FieldProductPage, v))
}

// OnlineEQ applies the EQ predicate on the "online" field.
func OnlineEQ(v bool) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEQ(FieldOnline, v))
}

// OnlineNEQ applies the NEQ predicate on the "online" field.
func OnlineNEQ(v bool) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNEQ(FieldOnline, v))
}

// OnlineIsNil applies the IsNil predicate on the "online" field.
func OnlineIsNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldIsNull(FieldOnline))
}

// OnlineNotNil applies the NotNil predicate on the "online" field.
func OnlineNotNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNotNull(FieldOnline))
}

// VisibleEQ applies the EQ predicate on the "visible" field.
func VisibleEQ(v bool) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEQ(FieldVisible, v))
}

// VisibleNEQ applies the NEQ predicate on the "visible" field.
func VisibleNEQ(v bool) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNEQ(FieldVisible, v))
}

// VisibleIsNil applies the IsNil predicate on the "visible" field.
func VisibleIsNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldIsNull(FieldVisible))
}

// VisibleNotNil applies the NotNil predicate on the "visible" field.
func VisibleNotNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNotNull(FieldVisible))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldContainsFold(FieldName, v))
}

// DisplayIndexEQ applies the EQ predicate on the "display_index" field.
func DisplayIndexEQ(v int32) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEQ(FieldDisplayIndex, v))
}

// DisplayIndexNEQ applies the NEQ predicate on the "display_index" field.
func DisplayIndexNEQ(v int32) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNEQ(FieldDisplayIndex, v))
}

// DisplayIndexIn applies the In predicate on the "display_index" field.
func DisplayIndexIn(vs ...int32) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldIn(FieldDisplayIndex, vs...))
}

// DisplayIndexNotIn applies the NotIn predicate on the "display_index" field.
func DisplayIndexNotIn(vs ...int32) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNotIn(FieldDisplayIndex, vs...))
}

// DisplayIndexGT applies the GT predicate on the "display_index" field.
func DisplayIndexGT(v int32) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldGT(FieldDisplayIndex, v))
}

// DisplayIndexGTE applies the GTE predicate on the "display_index" field.
func DisplayIndexGTE(v int32) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldGTE(FieldDisplayIndex, v))
}

// DisplayIndexLT applies the LT predicate on the "display_index" field.
func DisplayIndexLT(v int32) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldLT(FieldDisplayIndex, v))
}

// DisplayIndexLTE applies the LTE predicate on the "display_index" field.
func DisplayIndexLTE(v int32) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldLTE(FieldDisplayIndex, v))
}

// DisplayIndexIsNil applies the IsNil predicate on the "display_index" field.
func DisplayIndexIsNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldIsNull(FieldDisplayIndex))
}

// DisplayIndexNotNil applies the NotNil predicate on the "display_index" field.
func DisplayIndexNotNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNotNull(FieldDisplayIndex))
}

// BannerEQ applies the EQ predicate on the "banner" field.
func BannerEQ(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEQ(FieldBanner, v))
}

// BannerNEQ applies the NEQ predicate on the "banner" field.
func BannerNEQ(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNEQ(FieldBanner, v))
}

// BannerIn applies the In predicate on the "banner" field.
func BannerIn(vs ...string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldIn(FieldBanner, vs...))
}

// BannerNotIn applies the NotIn predicate on the "banner" field.
func BannerNotIn(vs ...string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNotIn(FieldBanner, vs...))
}

// BannerGT applies the GT predicate on the "banner" field.
func BannerGT(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldGT(FieldBanner, v))
}

// BannerGTE applies the GTE predicate on the "banner" field.
func BannerGTE(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldGTE(FieldBanner, v))
}

// BannerLT applies the LT predicate on the "banner" field.
func BannerLT(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldLT(FieldBanner, v))
}

// BannerLTE applies the LTE predicate on the "banner" field.
func BannerLTE(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldLTE(FieldBanner, v))
}

// BannerContains applies the Contains predicate on the "banner" field.
func BannerContains(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldContains(FieldBanner, v))
}

// BannerHasPrefix applies the HasPrefix predicate on the "banner" field.
func BannerHasPrefix(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldHasPrefix(FieldBanner, v))
}

// BannerHasSuffix applies the HasSuffix predicate on the "banner" field.
func BannerHasSuffix(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldHasSuffix(FieldBanner, v))
}

// BannerIsNil applies the IsNil predicate on the "banner" field.
func BannerIsNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldIsNull(FieldBanner))
}

// BannerNotNil applies the NotNil predicate on the "banner" field.
func BannerNotNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldNotNull(FieldBanner))
}

// BannerEqualFold applies the EqualFold predicate on the "banner" field.
func BannerEqualFold(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldEqualFold(FieldBanner, v))
}

// BannerContainsFold applies the ContainsFold predicate on the "banner" field.
func BannerContainsFold(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.FieldContainsFold(FieldBanner, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppGoodBase) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppGoodBase) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppGoodBase) predicate.AppGoodBase {
	return predicate.AppGoodBase(sql.NotPredicates(p))
}

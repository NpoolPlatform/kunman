// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/applegacypowerrental"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
)

// AppLegacyPowerRentalDelete is the builder for deleting a AppLegacyPowerRental entity.
type AppLegacyPowerRentalDelete struct {
	config
	hooks    []Hook
	mutation *AppLegacyPowerRentalMutation
}

// Where appends a list predicates to the AppLegacyPowerRentalDelete builder.
func (alprd *AppLegacyPowerRentalDelete) Where(ps ...predicate.AppLegacyPowerRental) *AppLegacyPowerRentalDelete {
	alprd.mutation.Where(ps...)
	return alprd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (alprd *AppLegacyPowerRentalDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, alprd.sqlExec, alprd.mutation, alprd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (alprd *AppLegacyPowerRentalDelete) ExecX(ctx context.Context) int {
	n, err := alprd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (alprd *AppLegacyPowerRentalDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(applegacypowerrental.Table, sqlgraph.NewFieldSpec(applegacypowerrental.FieldID, field.TypeUint32))
	if ps := alprd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, alprd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	alprd.mutation.done = true
	return affected, err
}

// AppLegacyPowerRentalDeleteOne is the builder for deleting a single AppLegacyPowerRental entity.
type AppLegacyPowerRentalDeleteOne struct {
	alprd *AppLegacyPowerRentalDelete
}

// Where appends a list predicates to the AppLegacyPowerRentalDelete builder.
func (alprdo *AppLegacyPowerRentalDeleteOne) Where(ps ...predicate.AppLegacyPowerRental) *AppLegacyPowerRentalDeleteOne {
	alprdo.alprd.mutation.Where(ps...)
	return alprdo
}

// Exec executes the deletion query.
func (alprdo *AppLegacyPowerRentalDeleteOne) Exec(ctx context.Context) error {
	n, err := alprdo.alprd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{applegacypowerrental.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (alprdo *AppLegacyPowerRentalDeleteOne) ExecX(ctx context.Context) {
	if err := alprdo.Exec(ctx); err != nil {
		panic(err)
	}
}

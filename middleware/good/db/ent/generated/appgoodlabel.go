// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appgoodlabel"
	"github.com/google/uuid"
)

// AppGoodLabel is the model entity for the AppGoodLabel schema.
type AppGoodLabel struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppGoodID holds the value of the "app_good_id" field.
	AppGoodID uuid.UUID `json:"app_good_id,omitempty"`
	// Icon holds the value of the "icon" field.
	Icon string `json:"icon,omitempty"`
	// IconBgColor holds the value of the "icon_bg_color" field.
	IconBgColor string `json:"icon_bg_color,omitempty"`
	// Label holds the value of the "label" field.
	Label string `json:"label,omitempty"`
	// LabelBgColor holds the value of the "label_bg_color" field.
	LabelBgColor string `json:"label_bg_color,omitempty"`
	// Index holds the value of the "index" field.
	Index        uint8 `json:"index,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppGoodLabel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appgoodlabel.FieldID, appgoodlabel.FieldCreatedAt, appgoodlabel.FieldUpdatedAt, appgoodlabel.FieldDeletedAt, appgoodlabel.FieldIndex:
			values[i] = new(sql.NullInt64)
		case appgoodlabel.FieldIcon, appgoodlabel.FieldIconBgColor, appgoodlabel.FieldLabel, appgoodlabel.FieldLabelBgColor:
			values[i] = new(sql.NullString)
		case appgoodlabel.FieldEntID, appgoodlabel.FieldAppGoodID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppGoodLabel fields.
func (agl *AppGoodLabel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appgoodlabel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			agl.ID = uint32(value.Int64)
		case appgoodlabel.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				agl.EntID = *value
			}
		case appgoodlabel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				agl.CreatedAt = uint32(value.Int64)
			}
		case appgoodlabel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				agl.UpdatedAt = uint32(value.Int64)
			}
		case appgoodlabel.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				agl.DeletedAt = uint32(value.Int64)
			}
		case appgoodlabel.FieldAppGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_good_id", values[i])
			} else if value != nil {
				agl.AppGoodID = *value
			}
		case appgoodlabel.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				agl.Icon = value.String
			}
		case appgoodlabel.FieldIconBgColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon_bg_color", values[i])
			} else if value.Valid {
				agl.IconBgColor = value.String
			}
		case appgoodlabel.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				agl.Label = value.String
			}
		case appgoodlabel.FieldLabelBgColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label_bg_color", values[i])
			} else if value.Valid {
				agl.LabelBgColor = value.String
			}
		case appgoodlabel.FieldIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field index", values[i])
			} else if value.Valid {
				agl.Index = uint8(value.Int64)
			}
		default:
			agl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppGoodLabel.
// This includes values selected through modifiers, order, etc.
func (agl *AppGoodLabel) Value(name string) (ent.Value, error) {
	return agl.selectValues.Get(name)
}

// Update returns a builder for updating this AppGoodLabel.
// Note that you need to call AppGoodLabel.Unwrap() before calling this method if this AppGoodLabel
// was returned from a transaction, and the transaction was committed or rolled back.
func (agl *AppGoodLabel) Update() *AppGoodLabelUpdateOne {
	return NewAppGoodLabelClient(agl.config).UpdateOne(agl)
}

// Unwrap unwraps the AppGoodLabel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (agl *AppGoodLabel) Unwrap() *AppGoodLabel {
	_tx, ok := agl.config.driver.(*txDriver)
	if !ok {
		panic("generated: AppGoodLabel is not a transactional entity")
	}
	agl.config.driver = _tx.drv
	return agl
}

// String implements the fmt.Stringer.
func (agl *AppGoodLabel) String() string {
	var builder strings.Builder
	builder.WriteString("AppGoodLabel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", agl.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", agl.EntID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", agl.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", agl.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", agl.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("app_good_id=")
	builder.WriteString(fmt.Sprintf("%v", agl.AppGoodID))
	builder.WriteString(", ")
	builder.WriteString("icon=")
	builder.WriteString(agl.Icon)
	builder.WriteString(", ")
	builder.WriteString("icon_bg_color=")
	builder.WriteString(agl.IconBgColor)
	builder.WriteString(", ")
	builder.WriteString("label=")
	builder.WriteString(agl.Label)
	builder.WriteString(", ")
	builder.WriteString("label_bg_color=")
	builder.WriteString(agl.LabelBgColor)
	builder.WriteString(", ")
	builder.WriteString("index=")
	builder.WriteString(fmt.Sprintf("%v", agl.Index))
	builder.WriteByte(')')
	return builder.String()
}

// AppGoodLabels is a parsable slice of AppGoodLabel.
type AppGoodLabels []*AppGoodLabel

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/goodreward"
	"github.com/google/uuid"
)

// GoodReward is the model entity for the GoodReward schema.
type GoodReward struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// RewardState holds the value of the "reward_state" field.
	RewardState string `json:"reward_state,omitempty"`
	// LastRewardAt holds the value of the "last_reward_at" field.
	LastRewardAt uint32 `json:"last_reward_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoodReward) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case goodreward.FieldID, goodreward.FieldLastRewardAt:
			values[i] = new(sql.NullInt64)
		case goodreward.FieldRewardState:
			values[i] = new(sql.NullString)
		case goodreward.FieldEntID, goodreward.FieldGoodID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoodReward fields.
func (gr *GoodReward) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goodreward.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gr.ID = uint32(value.Int64)
		case goodreward.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				gr.EntID = *value
			}
		case goodreward.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				gr.GoodID = *value
			}
		case goodreward.FieldRewardState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reward_state", values[i])
			} else if value.Valid {
				gr.RewardState = value.String
			}
		case goodreward.FieldLastRewardAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_reward_at", values[i])
			} else if value.Valid {
				gr.LastRewardAt = uint32(value.Int64)
			}
		default:
			gr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GoodReward.
// This includes values selected through modifiers, order, etc.
func (gr *GoodReward) Value(name string) (ent.Value, error) {
	return gr.selectValues.Get(name)
}

// Update returns a builder for updating this GoodReward.
// Note that you need to call GoodReward.Unwrap() before calling this method if this GoodReward
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *GoodReward) Update() *GoodRewardUpdateOne {
	return NewGoodRewardClient(gr.config).UpdateOne(gr)
}

// Unwrap unwraps the GoodReward entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gr *GoodReward) Unwrap() *GoodReward {
	_tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("generated: GoodReward is not a transactional entity")
	}
	gr.config.driver = _tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *GoodReward) String() string {
	var builder strings.Builder
	builder.WriteString("GoodReward(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gr.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", gr.EntID))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", gr.GoodID))
	builder.WriteString(", ")
	builder.WriteString("reward_state=")
	builder.WriteString(gr.RewardState)
	builder.WriteString(", ")
	builder.WriteString("last_reward_at=")
	builder.WriteString(fmt.Sprintf("%v", gr.LastRewardAt))
	builder.WriteByte(')')
	return builder.String()
}

// GoodRewards is a parsable slice of GoodReward.
type GoodRewards []*GoodReward

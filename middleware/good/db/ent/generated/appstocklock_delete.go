// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appstocklock"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
)

// AppStockLockDelete is the builder for deleting a AppStockLock entity.
type AppStockLockDelete struct {
	config
	hooks    []Hook
	mutation *AppStockLockMutation
}

// Where appends a list predicates to the AppStockLockDelete builder.
func (asld *AppStockLockDelete) Where(ps ...predicate.AppStockLock) *AppStockLockDelete {
	asld.mutation.Where(ps...)
	return asld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (asld *AppStockLockDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, asld.sqlExec, asld.mutation, asld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (asld *AppStockLockDelete) ExecX(ctx context.Context) int {
	n, err := asld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (asld *AppStockLockDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(appstocklock.Table, sqlgraph.NewFieldSpec(appstocklock.FieldID, field.TypeUint32))
	if ps := asld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, asld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	asld.mutation.done = true
	return affected, err
}

// AppStockLockDeleteOne is the builder for deleting a single AppStockLock entity.
type AppStockLockDeleteOne struct {
	asld *AppStockLockDelete
}

// Where appends a list predicates to the AppStockLockDelete builder.
func (asldo *AppStockLockDeleteOne) Where(ps ...predicate.AppStockLock) *AppStockLockDeleteOne {
	asldo.asld.mutation.Where(ps...)
	return asldo
}

// Exec executes the deletion query.
func (asldo *AppStockLockDeleteOne) Exec(ctx context.Context) error {
	n, err := asldo.asld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{appstocklock.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (asldo *AppStockLockDeleteOne) ExecX(ctx context.Context) {
	if err := asldo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/powerrental"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// PowerRental is the model entity for the PowerRental schema.
type PowerRental struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// DeviceTypeID holds the value of the "device_type_id" field.
	DeviceTypeID uuid.UUID `json:"device_type_id,omitempty"`
	// VendorLocationID holds the value of the "vendor_location_id" field.
	VendorLocationID uuid.UUID `json:"vendor_location_id,omitempty"`
	// UnitPrice holds the value of the "unit_price" field.
	UnitPrice decimal.Decimal `json:"unit_price,omitempty"`
	// QuantityUnit holds the value of the "quantity_unit" field.
	QuantityUnit string `json:"quantity_unit,omitempty"`
	// QuantityUnitAmount holds the value of the "quantity_unit_amount" field.
	QuantityUnitAmount decimal.Decimal `json:"quantity_unit_amount,omitempty"`
	// DeliveryAt holds the value of the "delivery_at" field.
	DeliveryAt uint32 `json:"delivery_at,omitempty"`
	// UnitLockDeposit holds the value of the "unit_lock_deposit" field.
	UnitLockDeposit decimal.Decimal `json:"unit_lock_deposit,omitempty"`
	// DurationDisplayType holds the value of the "duration_display_type" field.
	DurationDisplayType string `json:"duration_display_type,omitempty"`
	// StockMode holds the value of the "stock_mode" field.
	StockMode    string `json:"stock_mode,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PowerRental) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case powerrental.FieldUnitPrice, powerrental.FieldQuantityUnitAmount, powerrental.FieldUnitLockDeposit:
			values[i] = new(decimal.Decimal)
		case powerrental.FieldID, powerrental.FieldCreatedAt, powerrental.FieldUpdatedAt, powerrental.FieldDeletedAt, powerrental.FieldDeliveryAt:
			values[i] = new(sql.NullInt64)
		case powerrental.FieldQuantityUnit, powerrental.FieldDurationDisplayType, powerrental.FieldStockMode:
			values[i] = new(sql.NullString)
		case powerrental.FieldEntID, powerrental.FieldGoodID, powerrental.FieldDeviceTypeID, powerrental.FieldVendorLocationID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PowerRental fields.
func (pr *PowerRental) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case powerrental.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = uint32(value.Int64)
		case powerrental.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				pr.EntID = *value
			}
		case powerrental.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = uint32(value.Int64)
			}
		case powerrental.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = uint32(value.Int64)
			}
		case powerrental.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pr.DeletedAt = uint32(value.Int64)
			}
		case powerrental.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				pr.GoodID = *value
			}
		case powerrental.FieldDeviceTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field device_type_id", values[i])
			} else if value != nil {
				pr.DeviceTypeID = *value
			}
		case powerrental.FieldVendorLocationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field vendor_location_id", values[i])
			} else if value != nil {
				pr.VendorLocationID = *value
			}
		case powerrental.FieldUnitPrice:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field unit_price", values[i])
			} else if value != nil {
				pr.UnitPrice = *value
			}
		case powerrental.FieldQuantityUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field quantity_unit", values[i])
			} else if value.Valid {
				pr.QuantityUnit = value.String
			}
		case powerrental.FieldQuantityUnitAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field quantity_unit_amount", values[i])
			} else if value != nil {
				pr.QuantityUnitAmount = *value
			}
		case powerrental.FieldDeliveryAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_at", values[i])
			} else if value.Valid {
				pr.DeliveryAt = uint32(value.Int64)
			}
		case powerrental.FieldUnitLockDeposit:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field unit_lock_deposit", values[i])
			} else if value != nil {
				pr.UnitLockDeposit = *value
			}
		case powerrental.FieldDurationDisplayType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field duration_display_type", values[i])
			} else if value.Valid {
				pr.DurationDisplayType = value.String
			}
		case powerrental.FieldStockMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stock_mode", values[i])
			} else if value.Valid {
				pr.StockMode = value.String
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PowerRental.
// This includes values selected through modifiers, order, etc.
func (pr *PowerRental) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// Update returns a builder for updating this PowerRental.
// Note that you need to call PowerRental.Unwrap() before calling this method if this PowerRental
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *PowerRental) Update() *PowerRentalUpdateOne {
	return NewPowerRentalClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the PowerRental entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *PowerRental) Unwrap() *PowerRental {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("generated: PowerRental is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *PowerRental) String() string {
	var builder strings.Builder
	builder.WriteString("PowerRental(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.EntID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", pr.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", pr.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", pr.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.GoodID))
	builder.WriteString(", ")
	builder.WriteString("device_type_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.DeviceTypeID))
	builder.WriteString(", ")
	builder.WriteString("vendor_location_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.VendorLocationID))
	builder.WriteString(", ")
	builder.WriteString("unit_price=")
	builder.WriteString(fmt.Sprintf("%v", pr.UnitPrice))
	builder.WriteString(", ")
	builder.WriteString("quantity_unit=")
	builder.WriteString(pr.QuantityUnit)
	builder.WriteString(", ")
	builder.WriteString("quantity_unit_amount=")
	builder.WriteString(fmt.Sprintf("%v", pr.QuantityUnitAmount))
	builder.WriteString(", ")
	builder.WriteString("delivery_at=")
	builder.WriteString(fmt.Sprintf("%v", pr.DeliveryAt))
	builder.WriteString(", ")
	builder.WriteString("unit_lock_deposit=")
	builder.WriteString(fmt.Sprintf("%v", pr.UnitLockDeposit))
	builder.WriteString(", ")
	builder.WriteString("duration_display_type=")
	builder.WriteString(pr.DurationDisplayType)
	builder.WriteString(", ")
	builder.WriteString("stock_mode=")
	builder.WriteString(pr.StockMode)
	builder.WriteByte(')')
	return builder.String()
}

// PowerRentals is a parsable slice of PowerRental.
type PowerRentals []*PowerRental

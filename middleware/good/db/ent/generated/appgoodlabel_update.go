// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appgoodlabel"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// AppGoodLabelUpdate is the builder for updating AppGoodLabel entities.
type AppGoodLabelUpdate struct {
	config
	hooks     []Hook
	mutation  *AppGoodLabelMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppGoodLabelUpdate builder.
func (aglu *AppGoodLabelUpdate) Where(ps ...predicate.AppGoodLabel) *AppGoodLabelUpdate {
	aglu.mutation.Where(ps...)
	return aglu
}

// SetEntID sets the "ent_id" field.
func (aglu *AppGoodLabelUpdate) SetEntID(u uuid.UUID) *AppGoodLabelUpdate {
	aglu.mutation.SetEntID(u)
	return aglu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (aglu *AppGoodLabelUpdate) SetNillableEntID(u *uuid.UUID) *AppGoodLabelUpdate {
	if u != nil {
		aglu.SetEntID(*u)
	}
	return aglu
}

// SetCreatedAt sets the "created_at" field.
func (aglu *AppGoodLabelUpdate) SetCreatedAt(u uint32) *AppGoodLabelUpdate {
	aglu.mutation.ResetCreatedAt()
	aglu.mutation.SetCreatedAt(u)
	return aglu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aglu *AppGoodLabelUpdate) SetNillableCreatedAt(u *uint32) *AppGoodLabelUpdate {
	if u != nil {
		aglu.SetCreatedAt(*u)
	}
	return aglu
}

// AddCreatedAt adds u to the "created_at" field.
func (aglu *AppGoodLabelUpdate) AddCreatedAt(u int32) *AppGoodLabelUpdate {
	aglu.mutation.AddCreatedAt(u)
	return aglu
}

// SetUpdatedAt sets the "updated_at" field.
func (aglu *AppGoodLabelUpdate) SetUpdatedAt(u uint32) *AppGoodLabelUpdate {
	aglu.mutation.ResetUpdatedAt()
	aglu.mutation.SetUpdatedAt(u)
	return aglu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (aglu *AppGoodLabelUpdate) AddUpdatedAt(u int32) *AppGoodLabelUpdate {
	aglu.mutation.AddUpdatedAt(u)
	return aglu
}

// SetDeletedAt sets the "deleted_at" field.
func (aglu *AppGoodLabelUpdate) SetDeletedAt(u uint32) *AppGoodLabelUpdate {
	aglu.mutation.ResetDeletedAt()
	aglu.mutation.SetDeletedAt(u)
	return aglu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aglu *AppGoodLabelUpdate) SetNillableDeletedAt(u *uint32) *AppGoodLabelUpdate {
	if u != nil {
		aglu.SetDeletedAt(*u)
	}
	return aglu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (aglu *AppGoodLabelUpdate) AddDeletedAt(u int32) *AppGoodLabelUpdate {
	aglu.mutation.AddDeletedAt(u)
	return aglu
}

// SetAppGoodID sets the "app_good_id" field.
func (aglu *AppGoodLabelUpdate) SetAppGoodID(u uuid.UUID) *AppGoodLabelUpdate {
	aglu.mutation.SetAppGoodID(u)
	return aglu
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (aglu *AppGoodLabelUpdate) SetNillableAppGoodID(u *uuid.UUID) *AppGoodLabelUpdate {
	if u != nil {
		aglu.SetAppGoodID(*u)
	}
	return aglu
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (aglu *AppGoodLabelUpdate) ClearAppGoodID() *AppGoodLabelUpdate {
	aglu.mutation.ClearAppGoodID()
	return aglu
}

// SetIcon sets the "icon" field.
func (aglu *AppGoodLabelUpdate) SetIcon(s string) *AppGoodLabelUpdate {
	aglu.mutation.SetIcon(s)
	return aglu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (aglu *AppGoodLabelUpdate) SetNillableIcon(s *string) *AppGoodLabelUpdate {
	if s != nil {
		aglu.SetIcon(*s)
	}
	return aglu
}

// ClearIcon clears the value of the "icon" field.
func (aglu *AppGoodLabelUpdate) ClearIcon() *AppGoodLabelUpdate {
	aglu.mutation.ClearIcon()
	return aglu
}

// SetIconBgColor sets the "icon_bg_color" field.
func (aglu *AppGoodLabelUpdate) SetIconBgColor(s string) *AppGoodLabelUpdate {
	aglu.mutation.SetIconBgColor(s)
	return aglu
}

// SetNillableIconBgColor sets the "icon_bg_color" field if the given value is not nil.
func (aglu *AppGoodLabelUpdate) SetNillableIconBgColor(s *string) *AppGoodLabelUpdate {
	if s != nil {
		aglu.SetIconBgColor(*s)
	}
	return aglu
}

// ClearIconBgColor clears the value of the "icon_bg_color" field.
func (aglu *AppGoodLabelUpdate) ClearIconBgColor() *AppGoodLabelUpdate {
	aglu.mutation.ClearIconBgColor()
	return aglu
}

// SetLabel sets the "label" field.
func (aglu *AppGoodLabelUpdate) SetLabel(s string) *AppGoodLabelUpdate {
	aglu.mutation.SetLabel(s)
	return aglu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (aglu *AppGoodLabelUpdate) SetNillableLabel(s *string) *AppGoodLabelUpdate {
	if s != nil {
		aglu.SetLabel(*s)
	}
	return aglu
}

// ClearLabel clears the value of the "label" field.
func (aglu *AppGoodLabelUpdate) ClearLabel() *AppGoodLabelUpdate {
	aglu.mutation.ClearLabel()
	return aglu
}

// SetLabelBgColor sets the "label_bg_color" field.
func (aglu *AppGoodLabelUpdate) SetLabelBgColor(s string) *AppGoodLabelUpdate {
	aglu.mutation.SetLabelBgColor(s)
	return aglu
}

// SetNillableLabelBgColor sets the "label_bg_color" field if the given value is not nil.
func (aglu *AppGoodLabelUpdate) SetNillableLabelBgColor(s *string) *AppGoodLabelUpdate {
	if s != nil {
		aglu.SetLabelBgColor(*s)
	}
	return aglu
}

// ClearLabelBgColor clears the value of the "label_bg_color" field.
func (aglu *AppGoodLabelUpdate) ClearLabelBgColor() *AppGoodLabelUpdate {
	aglu.mutation.ClearLabelBgColor()
	return aglu
}

// SetIndex sets the "index" field.
func (aglu *AppGoodLabelUpdate) SetIndex(u uint8) *AppGoodLabelUpdate {
	aglu.mutation.ResetIndex()
	aglu.mutation.SetIndex(u)
	return aglu
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (aglu *AppGoodLabelUpdate) SetNillableIndex(u *uint8) *AppGoodLabelUpdate {
	if u != nil {
		aglu.SetIndex(*u)
	}
	return aglu
}

// AddIndex adds u to the "index" field.
func (aglu *AppGoodLabelUpdate) AddIndex(u int8) *AppGoodLabelUpdate {
	aglu.mutation.AddIndex(u)
	return aglu
}

// ClearIndex clears the value of the "index" field.
func (aglu *AppGoodLabelUpdate) ClearIndex() *AppGoodLabelUpdate {
	aglu.mutation.ClearIndex()
	return aglu
}

// Mutation returns the AppGoodLabelMutation object of the builder.
func (aglu *AppGoodLabelUpdate) Mutation() *AppGoodLabelMutation {
	return aglu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aglu *AppGoodLabelUpdate) Save(ctx context.Context) (int, error) {
	aglu.defaults()
	return withHooks(ctx, aglu.sqlSave, aglu.mutation, aglu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aglu *AppGoodLabelUpdate) SaveX(ctx context.Context) int {
	affected, err := aglu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aglu *AppGoodLabelUpdate) Exec(ctx context.Context) error {
	_, err := aglu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aglu *AppGoodLabelUpdate) ExecX(ctx context.Context) {
	if err := aglu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aglu *AppGoodLabelUpdate) defaults() {
	if _, ok := aglu.mutation.UpdatedAt(); !ok {
		v := appgoodlabel.UpdateDefaultUpdatedAt()
		aglu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aglu *AppGoodLabelUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppGoodLabelUpdate {
	aglu.modifiers = append(aglu.modifiers, modifiers...)
	return aglu
}

func (aglu *AppGoodLabelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appgoodlabel.Table, appgoodlabel.Columns, sqlgraph.NewFieldSpec(appgoodlabel.FieldID, field.TypeUint32))
	if ps := aglu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aglu.mutation.EntID(); ok {
		_spec.SetField(appgoodlabel.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := aglu.mutation.CreatedAt(); ok {
		_spec.SetField(appgoodlabel.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := aglu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(appgoodlabel.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := aglu.mutation.UpdatedAt(); ok {
		_spec.SetField(appgoodlabel.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := aglu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(appgoodlabel.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := aglu.mutation.DeletedAt(); ok {
		_spec.SetField(appgoodlabel.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := aglu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(appgoodlabel.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := aglu.mutation.AppGoodID(); ok {
		_spec.SetField(appgoodlabel.FieldAppGoodID, field.TypeUUID, value)
	}
	if aglu.mutation.AppGoodIDCleared() {
		_spec.ClearField(appgoodlabel.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := aglu.mutation.Icon(); ok {
		_spec.SetField(appgoodlabel.FieldIcon, field.TypeString, value)
	}
	if aglu.mutation.IconCleared() {
		_spec.ClearField(appgoodlabel.FieldIcon, field.TypeString)
	}
	if value, ok := aglu.mutation.IconBgColor(); ok {
		_spec.SetField(appgoodlabel.FieldIconBgColor, field.TypeString, value)
	}
	if aglu.mutation.IconBgColorCleared() {
		_spec.ClearField(appgoodlabel.FieldIconBgColor, field.TypeString)
	}
	if value, ok := aglu.mutation.Label(); ok {
		_spec.SetField(appgoodlabel.FieldLabel, field.TypeString, value)
	}
	if aglu.mutation.LabelCleared() {
		_spec.ClearField(appgoodlabel.FieldLabel, field.TypeString)
	}
	if value, ok := aglu.mutation.LabelBgColor(); ok {
		_spec.SetField(appgoodlabel.FieldLabelBgColor, field.TypeString, value)
	}
	if aglu.mutation.LabelBgColorCleared() {
		_spec.ClearField(appgoodlabel.FieldLabelBgColor, field.TypeString)
	}
	if value, ok := aglu.mutation.Index(); ok {
		_spec.SetField(appgoodlabel.FieldIndex, field.TypeUint8, value)
	}
	if value, ok := aglu.mutation.AddedIndex(); ok {
		_spec.AddField(appgoodlabel.FieldIndex, field.TypeUint8, value)
	}
	if aglu.mutation.IndexCleared() {
		_spec.ClearField(appgoodlabel.FieldIndex, field.TypeUint8)
	}
	_spec.AddModifiers(aglu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, aglu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appgoodlabel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aglu.mutation.done = true
	return n, nil
}

// AppGoodLabelUpdateOne is the builder for updating a single AppGoodLabel entity.
type AppGoodLabelUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppGoodLabelMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (agluo *AppGoodLabelUpdateOne) SetEntID(u uuid.UUID) *AppGoodLabelUpdateOne {
	agluo.mutation.SetEntID(u)
	return agluo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (agluo *AppGoodLabelUpdateOne) SetNillableEntID(u *uuid.UUID) *AppGoodLabelUpdateOne {
	if u != nil {
		agluo.SetEntID(*u)
	}
	return agluo
}

// SetCreatedAt sets the "created_at" field.
func (agluo *AppGoodLabelUpdateOne) SetCreatedAt(u uint32) *AppGoodLabelUpdateOne {
	agluo.mutation.ResetCreatedAt()
	agluo.mutation.SetCreatedAt(u)
	return agluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (agluo *AppGoodLabelUpdateOne) SetNillableCreatedAt(u *uint32) *AppGoodLabelUpdateOne {
	if u != nil {
		agluo.SetCreatedAt(*u)
	}
	return agluo
}

// AddCreatedAt adds u to the "created_at" field.
func (agluo *AppGoodLabelUpdateOne) AddCreatedAt(u int32) *AppGoodLabelUpdateOne {
	agluo.mutation.AddCreatedAt(u)
	return agluo
}

// SetUpdatedAt sets the "updated_at" field.
func (agluo *AppGoodLabelUpdateOne) SetUpdatedAt(u uint32) *AppGoodLabelUpdateOne {
	agluo.mutation.ResetUpdatedAt()
	agluo.mutation.SetUpdatedAt(u)
	return agluo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (agluo *AppGoodLabelUpdateOne) AddUpdatedAt(u int32) *AppGoodLabelUpdateOne {
	agluo.mutation.AddUpdatedAt(u)
	return agluo
}

// SetDeletedAt sets the "deleted_at" field.
func (agluo *AppGoodLabelUpdateOne) SetDeletedAt(u uint32) *AppGoodLabelUpdateOne {
	agluo.mutation.ResetDeletedAt()
	agluo.mutation.SetDeletedAt(u)
	return agluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (agluo *AppGoodLabelUpdateOne) SetNillableDeletedAt(u *uint32) *AppGoodLabelUpdateOne {
	if u != nil {
		agluo.SetDeletedAt(*u)
	}
	return agluo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (agluo *AppGoodLabelUpdateOne) AddDeletedAt(u int32) *AppGoodLabelUpdateOne {
	agluo.mutation.AddDeletedAt(u)
	return agluo
}

// SetAppGoodID sets the "app_good_id" field.
func (agluo *AppGoodLabelUpdateOne) SetAppGoodID(u uuid.UUID) *AppGoodLabelUpdateOne {
	agluo.mutation.SetAppGoodID(u)
	return agluo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (agluo *AppGoodLabelUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *AppGoodLabelUpdateOne {
	if u != nil {
		agluo.SetAppGoodID(*u)
	}
	return agluo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (agluo *AppGoodLabelUpdateOne) ClearAppGoodID() *AppGoodLabelUpdateOne {
	agluo.mutation.ClearAppGoodID()
	return agluo
}

// SetIcon sets the "icon" field.
func (agluo *AppGoodLabelUpdateOne) SetIcon(s string) *AppGoodLabelUpdateOne {
	agluo.mutation.SetIcon(s)
	return agluo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (agluo *AppGoodLabelUpdateOne) SetNillableIcon(s *string) *AppGoodLabelUpdateOne {
	if s != nil {
		agluo.SetIcon(*s)
	}
	return agluo
}

// ClearIcon clears the value of the "icon" field.
func (agluo *AppGoodLabelUpdateOne) ClearIcon() *AppGoodLabelUpdateOne {
	agluo.mutation.ClearIcon()
	return agluo
}

// SetIconBgColor sets the "icon_bg_color" field.
func (agluo *AppGoodLabelUpdateOne) SetIconBgColor(s string) *AppGoodLabelUpdateOne {
	agluo.mutation.SetIconBgColor(s)
	return agluo
}

// SetNillableIconBgColor sets the "icon_bg_color" field if the given value is not nil.
func (agluo *AppGoodLabelUpdateOne) SetNillableIconBgColor(s *string) *AppGoodLabelUpdateOne {
	if s != nil {
		agluo.SetIconBgColor(*s)
	}
	return agluo
}

// ClearIconBgColor clears the value of the "icon_bg_color" field.
func (agluo *AppGoodLabelUpdateOne) ClearIconBgColor() *AppGoodLabelUpdateOne {
	agluo.mutation.ClearIconBgColor()
	return agluo
}

// SetLabel sets the "label" field.
func (agluo *AppGoodLabelUpdateOne) SetLabel(s string) *AppGoodLabelUpdateOne {
	agluo.mutation.SetLabel(s)
	return agluo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (agluo *AppGoodLabelUpdateOne) SetNillableLabel(s *string) *AppGoodLabelUpdateOne {
	if s != nil {
		agluo.SetLabel(*s)
	}
	return agluo
}

// ClearLabel clears the value of the "label" field.
func (agluo *AppGoodLabelUpdateOne) ClearLabel() *AppGoodLabelUpdateOne {
	agluo.mutation.ClearLabel()
	return agluo
}

// SetLabelBgColor sets the "label_bg_color" field.
func (agluo *AppGoodLabelUpdateOne) SetLabelBgColor(s string) *AppGoodLabelUpdateOne {
	agluo.mutation.SetLabelBgColor(s)
	return agluo
}

// SetNillableLabelBgColor sets the "label_bg_color" field if the given value is not nil.
func (agluo *AppGoodLabelUpdateOne) SetNillableLabelBgColor(s *string) *AppGoodLabelUpdateOne {
	if s != nil {
		agluo.SetLabelBgColor(*s)
	}
	return agluo
}

// ClearLabelBgColor clears the value of the "label_bg_color" field.
func (agluo *AppGoodLabelUpdateOne) ClearLabelBgColor() *AppGoodLabelUpdateOne {
	agluo.mutation.ClearLabelBgColor()
	return agluo
}

// SetIndex sets the "index" field.
func (agluo *AppGoodLabelUpdateOne) SetIndex(u uint8) *AppGoodLabelUpdateOne {
	agluo.mutation.ResetIndex()
	agluo.mutation.SetIndex(u)
	return agluo
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (agluo *AppGoodLabelUpdateOne) SetNillableIndex(u *uint8) *AppGoodLabelUpdateOne {
	if u != nil {
		agluo.SetIndex(*u)
	}
	return agluo
}

// AddIndex adds u to the "index" field.
func (agluo *AppGoodLabelUpdateOne) AddIndex(u int8) *AppGoodLabelUpdateOne {
	agluo.mutation.AddIndex(u)
	return agluo
}

// ClearIndex clears the value of the "index" field.
func (agluo *AppGoodLabelUpdateOne) ClearIndex() *AppGoodLabelUpdateOne {
	agluo.mutation.ClearIndex()
	return agluo
}

// Mutation returns the AppGoodLabelMutation object of the builder.
func (agluo *AppGoodLabelUpdateOne) Mutation() *AppGoodLabelMutation {
	return agluo.mutation
}

// Where appends a list predicates to the AppGoodLabelUpdate builder.
func (agluo *AppGoodLabelUpdateOne) Where(ps ...predicate.AppGoodLabel) *AppGoodLabelUpdateOne {
	agluo.mutation.Where(ps...)
	return agluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (agluo *AppGoodLabelUpdateOne) Select(field string, fields ...string) *AppGoodLabelUpdateOne {
	agluo.fields = append([]string{field}, fields...)
	return agluo
}

// Save executes the query and returns the updated AppGoodLabel entity.
func (agluo *AppGoodLabelUpdateOne) Save(ctx context.Context) (*AppGoodLabel, error) {
	agluo.defaults()
	return withHooks(ctx, agluo.sqlSave, agluo.mutation, agluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (agluo *AppGoodLabelUpdateOne) SaveX(ctx context.Context) *AppGoodLabel {
	node, err := agluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (agluo *AppGoodLabelUpdateOne) Exec(ctx context.Context) error {
	_, err := agluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agluo *AppGoodLabelUpdateOne) ExecX(ctx context.Context) {
	if err := agluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agluo *AppGoodLabelUpdateOne) defaults() {
	if _, ok := agluo.mutation.UpdatedAt(); !ok {
		v := appgoodlabel.UpdateDefaultUpdatedAt()
		agluo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (agluo *AppGoodLabelUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppGoodLabelUpdateOne {
	agluo.modifiers = append(agluo.modifiers, modifiers...)
	return agluo
}

func (agluo *AppGoodLabelUpdateOne) sqlSave(ctx context.Context) (_node *AppGoodLabel, err error) {
	_spec := sqlgraph.NewUpdateSpec(appgoodlabel.Table, appgoodlabel.Columns, sqlgraph.NewFieldSpec(appgoodlabel.FieldID, field.TypeUint32))
	id, ok := agluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AppGoodLabel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := agluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appgoodlabel.FieldID)
		for _, f := range fields {
			if !appgoodlabel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != appgoodlabel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := agluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agluo.mutation.EntID(); ok {
		_spec.SetField(appgoodlabel.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := agluo.mutation.CreatedAt(); ok {
		_spec.SetField(appgoodlabel.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := agluo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(appgoodlabel.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := agluo.mutation.UpdatedAt(); ok {
		_spec.SetField(appgoodlabel.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := agluo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(appgoodlabel.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := agluo.mutation.DeletedAt(); ok {
		_spec.SetField(appgoodlabel.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := agluo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(appgoodlabel.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := agluo.mutation.AppGoodID(); ok {
		_spec.SetField(appgoodlabel.FieldAppGoodID, field.TypeUUID, value)
	}
	if agluo.mutation.AppGoodIDCleared() {
		_spec.ClearField(appgoodlabel.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := agluo.mutation.Icon(); ok {
		_spec.SetField(appgoodlabel.FieldIcon, field.TypeString, value)
	}
	if agluo.mutation.IconCleared() {
		_spec.ClearField(appgoodlabel.FieldIcon, field.TypeString)
	}
	if value, ok := agluo.mutation.IconBgColor(); ok {
		_spec.SetField(appgoodlabel.FieldIconBgColor, field.TypeString, value)
	}
	if agluo.mutation.IconBgColorCleared() {
		_spec.ClearField(appgoodlabel.FieldIconBgColor, field.TypeString)
	}
	if value, ok := agluo.mutation.Label(); ok {
		_spec.SetField(appgoodlabel.FieldLabel, field.TypeString, value)
	}
	if agluo.mutation.LabelCleared() {
		_spec.ClearField(appgoodlabel.FieldLabel, field.TypeString)
	}
	if value, ok := agluo.mutation.LabelBgColor(); ok {
		_spec.SetField(appgoodlabel.FieldLabelBgColor, field.TypeString, value)
	}
	if agluo.mutation.LabelBgColorCleared() {
		_spec.ClearField(appgoodlabel.FieldLabelBgColor, field.TypeString)
	}
	if value, ok := agluo.mutation.Index(); ok {
		_spec.SetField(appgoodlabel.FieldIndex, field.TypeUint8, value)
	}
	if value, ok := agluo.mutation.AddedIndex(); ok {
		_spec.AddField(appgoodlabel.FieldIndex, field.TypeUint8, value)
	}
	if agluo.mutation.IndexCleared() {
		_spec.ClearField(appgoodlabel.FieldIndex, field.TypeUint8)
	}
	_spec.AddModifiers(agluo.modifiers...)
	_node = &AppGoodLabel{config: agluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, agluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appgoodlabel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	agluo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/deviceinfo"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// DeviceInfoUpdate is the builder for updating DeviceInfo entities.
type DeviceInfoUpdate struct {
	config
	hooks     []Hook
	mutation  *DeviceInfoMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DeviceInfoUpdate builder.
func (diu *DeviceInfoUpdate) Where(ps ...predicate.DeviceInfo) *DeviceInfoUpdate {
	diu.mutation.Where(ps...)
	return diu
}

// SetEntID sets the "ent_id" field.
func (diu *DeviceInfoUpdate) SetEntID(u uuid.UUID) *DeviceInfoUpdate {
	diu.mutation.SetEntID(u)
	return diu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (diu *DeviceInfoUpdate) SetNillableEntID(u *uuid.UUID) *DeviceInfoUpdate {
	if u != nil {
		diu.SetEntID(*u)
	}
	return diu
}

// SetType sets the "type" field.
func (diu *DeviceInfoUpdate) SetType(s string) *DeviceInfoUpdate {
	diu.mutation.SetType(s)
	return diu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (diu *DeviceInfoUpdate) SetNillableType(s *string) *DeviceInfoUpdate {
	if s != nil {
		diu.SetType(*s)
	}
	return diu
}

// ClearType clears the value of the "type" field.
func (diu *DeviceInfoUpdate) ClearType() *DeviceInfoUpdate {
	diu.mutation.ClearType()
	return diu
}

// SetManufacturerID sets the "manufacturer_id" field.
func (diu *DeviceInfoUpdate) SetManufacturerID(u uuid.UUID) *DeviceInfoUpdate {
	diu.mutation.SetManufacturerID(u)
	return diu
}

// SetNillableManufacturerID sets the "manufacturer_id" field if the given value is not nil.
func (diu *DeviceInfoUpdate) SetNillableManufacturerID(u *uuid.UUID) *DeviceInfoUpdate {
	if u != nil {
		diu.SetManufacturerID(*u)
	}
	return diu
}

// ClearManufacturerID clears the value of the "manufacturer_id" field.
func (diu *DeviceInfoUpdate) ClearManufacturerID() *DeviceInfoUpdate {
	diu.mutation.ClearManufacturerID()
	return diu
}

// SetPowerConsumption sets the "power_consumption" field.
func (diu *DeviceInfoUpdate) SetPowerConsumption(u uint32) *DeviceInfoUpdate {
	diu.mutation.ResetPowerConsumption()
	diu.mutation.SetPowerConsumption(u)
	return diu
}

// SetNillablePowerConsumption sets the "power_consumption" field if the given value is not nil.
func (diu *DeviceInfoUpdate) SetNillablePowerConsumption(u *uint32) *DeviceInfoUpdate {
	if u != nil {
		diu.SetPowerConsumption(*u)
	}
	return diu
}

// AddPowerConsumption adds u to the "power_consumption" field.
func (diu *DeviceInfoUpdate) AddPowerConsumption(u int32) *DeviceInfoUpdate {
	diu.mutation.AddPowerConsumption(u)
	return diu
}

// ClearPowerConsumption clears the value of the "power_consumption" field.
func (diu *DeviceInfoUpdate) ClearPowerConsumption() *DeviceInfoUpdate {
	diu.mutation.ClearPowerConsumption()
	return diu
}

// SetShipmentAt sets the "shipment_at" field.
func (diu *DeviceInfoUpdate) SetShipmentAt(u uint32) *DeviceInfoUpdate {
	diu.mutation.ResetShipmentAt()
	diu.mutation.SetShipmentAt(u)
	return diu
}

// SetNillableShipmentAt sets the "shipment_at" field if the given value is not nil.
func (diu *DeviceInfoUpdate) SetNillableShipmentAt(u *uint32) *DeviceInfoUpdate {
	if u != nil {
		diu.SetShipmentAt(*u)
	}
	return diu
}

// AddShipmentAt adds u to the "shipment_at" field.
func (diu *DeviceInfoUpdate) AddShipmentAt(u int32) *DeviceInfoUpdate {
	diu.mutation.AddShipmentAt(u)
	return diu
}

// ClearShipmentAt clears the value of the "shipment_at" field.
func (diu *DeviceInfoUpdate) ClearShipmentAt() *DeviceInfoUpdate {
	diu.mutation.ClearShipmentAt()
	return diu
}

// Mutation returns the DeviceInfoMutation object of the builder.
func (diu *DeviceInfoUpdate) Mutation() *DeviceInfoMutation {
	return diu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (diu *DeviceInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, diu.sqlSave, diu.mutation, diu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (diu *DeviceInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := diu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (diu *DeviceInfoUpdate) Exec(ctx context.Context) error {
	_, err := diu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (diu *DeviceInfoUpdate) ExecX(ctx context.Context) {
	if err := diu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (diu *DeviceInfoUpdate) check() error {
	if v, ok := diu.mutation.GetType(); ok {
		if err := deviceinfo.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`generated: validator failed for field "DeviceInfo.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (diu *DeviceInfoUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeviceInfoUpdate {
	diu.modifiers = append(diu.modifiers, modifiers...)
	return diu
}

func (diu *DeviceInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := diu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(deviceinfo.Table, deviceinfo.Columns, sqlgraph.NewFieldSpec(deviceinfo.FieldID, field.TypeUint32))
	if ps := diu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := diu.mutation.EntID(); ok {
		_spec.SetField(deviceinfo.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := diu.mutation.GetType(); ok {
		_spec.SetField(deviceinfo.FieldType, field.TypeString, value)
	}
	if diu.mutation.TypeCleared() {
		_spec.ClearField(deviceinfo.FieldType, field.TypeString)
	}
	if value, ok := diu.mutation.ManufacturerID(); ok {
		_spec.SetField(deviceinfo.FieldManufacturerID, field.TypeUUID, value)
	}
	if diu.mutation.ManufacturerIDCleared() {
		_spec.ClearField(deviceinfo.FieldManufacturerID, field.TypeUUID)
	}
	if value, ok := diu.mutation.PowerConsumption(); ok {
		_spec.SetField(deviceinfo.FieldPowerConsumption, field.TypeUint32, value)
	}
	if value, ok := diu.mutation.AddedPowerConsumption(); ok {
		_spec.AddField(deviceinfo.FieldPowerConsumption, field.TypeUint32, value)
	}
	if diu.mutation.PowerConsumptionCleared() {
		_spec.ClearField(deviceinfo.FieldPowerConsumption, field.TypeUint32)
	}
	if value, ok := diu.mutation.ShipmentAt(); ok {
		_spec.SetField(deviceinfo.FieldShipmentAt, field.TypeUint32, value)
	}
	if value, ok := diu.mutation.AddedShipmentAt(); ok {
		_spec.AddField(deviceinfo.FieldShipmentAt, field.TypeUint32, value)
	}
	if diu.mutation.ShipmentAtCleared() {
		_spec.ClearField(deviceinfo.FieldShipmentAt, field.TypeUint32)
	}
	_spec.AddModifiers(diu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, diu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deviceinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	diu.mutation.done = true
	return n, nil
}

// DeviceInfoUpdateOne is the builder for updating a single DeviceInfo entity.
type DeviceInfoUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DeviceInfoMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (diuo *DeviceInfoUpdateOne) SetEntID(u uuid.UUID) *DeviceInfoUpdateOne {
	diuo.mutation.SetEntID(u)
	return diuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (diuo *DeviceInfoUpdateOne) SetNillableEntID(u *uuid.UUID) *DeviceInfoUpdateOne {
	if u != nil {
		diuo.SetEntID(*u)
	}
	return diuo
}

// SetType sets the "type" field.
func (diuo *DeviceInfoUpdateOne) SetType(s string) *DeviceInfoUpdateOne {
	diuo.mutation.SetType(s)
	return diuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (diuo *DeviceInfoUpdateOne) SetNillableType(s *string) *DeviceInfoUpdateOne {
	if s != nil {
		diuo.SetType(*s)
	}
	return diuo
}

// ClearType clears the value of the "type" field.
func (diuo *DeviceInfoUpdateOne) ClearType() *DeviceInfoUpdateOne {
	diuo.mutation.ClearType()
	return diuo
}

// SetManufacturerID sets the "manufacturer_id" field.
func (diuo *DeviceInfoUpdateOne) SetManufacturerID(u uuid.UUID) *DeviceInfoUpdateOne {
	diuo.mutation.SetManufacturerID(u)
	return diuo
}

// SetNillableManufacturerID sets the "manufacturer_id" field if the given value is not nil.
func (diuo *DeviceInfoUpdateOne) SetNillableManufacturerID(u *uuid.UUID) *DeviceInfoUpdateOne {
	if u != nil {
		diuo.SetManufacturerID(*u)
	}
	return diuo
}

// ClearManufacturerID clears the value of the "manufacturer_id" field.
func (diuo *DeviceInfoUpdateOne) ClearManufacturerID() *DeviceInfoUpdateOne {
	diuo.mutation.ClearManufacturerID()
	return diuo
}

// SetPowerConsumption sets the "power_consumption" field.
func (diuo *DeviceInfoUpdateOne) SetPowerConsumption(u uint32) *DeviceInfoUpdateOne {
	diuo.mutation.ResetPowerConsumption()
	diuo.mutation.SetPowerConsumption(u)
	return diuo
}

// SetNillablePowerConsumption sets the "power_consumption" field if the given value is not nil.
func (diuo *DeviceInfoUpdateOne) SetNillablePowerConsumption(u *uint32) *DeviceInfoUpdateOne {
	if u != nil {
		diuo.SetPowerConsumption(*u)
	}
	return diuo
}

// AddPowerConsumption adds u to the "power_consumption" field.
func (diuo *DeviceInfoUpdateOne) AddPowerConsumption(u int32) *DeviceInfoUpdateOne {
	diuo.mutation.AddPowerConsumption(u)
	return diuo
}

// ClearPowerConsumption clears the value of the "power_consumption" field.
func (diuo *DeviceInfoUpdateOne) ClearPowerConsumption() *DeviceInfoUpdateOne {
	diuo.mutation.ClearPowerConsumption()
	return diuo
}

// SetShipmentAt sets the "shipment_at" field.
func (diuo *DeviceInfoUpdateOne) SetShipmentAt(u uint32) *DeviceInfoUpdateOne {
	diuo.mutation.ResetShipmentAt()
	diuo.mutation.SetShipmentAt(u)
	return diuo
}

// SetNillableShipmentAt sets the "shipment_at" field if the given value is not nil.
func (diuo *DeviceInfoUpdateOne) SetNillableShipmentAt(u *uint32) *DeviceInfoUpdateOne {
	if u != nil {
		diuo.SetShipmentAt(*u)
	}
	return diuo
}

// AddShipmentAt adds u to the "shipment_at" field.
func (diuo *DeviceInfoUpdateOne) AddShipmentAt(u int32) *DeviceInfoUpdateOne {
	diuo.mutation.AddShipmentAt(u)
	return diuo
}

// ClearShipmentAt clears the value of the "shipment_at" field.
func (diuo *DeviceInfoUpdateOne) ClearShipmentAt() *DeviceInfoUpdateOne {
	diuo.mutation.ClearShipmentAt()
	return diuo
}

// Mutation returns the DeviceInfoMutation object of the builder.
func (diuo *DeviceInfoUpdateOne) Mutation() *DeviceInfoMutation {
	return diuo.mutation
}

// Where appends a list predicates to the DeviceInfoUpdate builder.
func (diuo *DeviceInfoUpdateOne) Where(ps ...predicate.DeviceInfo) *DeviceInfoUpdateOne {
	diuo.mutation.Where(ps...)
	return diuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (diuo *DeviceInfoUpdateOne) Select(field string, fields ...string) *DeviceInfoUpdateOne {
	diuo.fields = append([]string{field}, fields...)
	return diuo
}

// Save executes the query and returns the updated DeviceInfo entity.
func (diuo *DeviceInfoUpdateOne) Save(ctx context.Context) (*DeviceInfo, error) {
	return withHooks(ctx, diuo.sqlSave, diuo.mutation, diuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (diuo *DeviceInfoUpdateOne) SaveX(ctx context.Context) *DeviceInfo {
	node, err := diuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (diuo *DeviceInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := diuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (diuo *DeviceInfoUpdateOne) ExecX(ctx context.Context) {
	if err := diuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (diuo *DeviceInfoUpdateOne) check() error {
	if v, ok := diuo.mutation.GetType(); ok {
		if err := deviceinfo.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`generated: validator failed for field "DeviceInfo.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (diuo *DeviceInfoUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeviceInfoUpdateOne {
	diuo.modifiers = append(diuo.modifiers, modifiers...)
	return diuo
}

func (diuo *DeviceInfoUpdateOne) sqlSave(ctx context.Context) (_node *DeviceInfo, err error) {
	if err := diuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(deviceinfo.Table, deviceinfo.Columns, sqlgraph.NewFieldSpec(deviceinfo.FieldID, field.TypeUint32))
	id, ok := diuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "DeviceInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := diuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deviceinfo.FieldID)
		for _, f := range fields {
			if !deviceinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != deviceinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := diuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := diuo.mutation.EntID(); ok {
		_spec.SetField(deviceinfo.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := diuo.mutation.GetType(); ok {
		_spec.SetField(deviceinfo.FieldType, field.TypeString, value)
	}
	if diuo.mutation.TypeCleared() {
		_spec.ClearField(deviceinfo.FieldType, field.TypeString)
	}
	if value, ok := diuo.mutation.ManufacturerID(); ok {
		_spec.SetField(deviceinfo.FieldManufacturerID, field.TypeUUID, value)
	}
	if diuo.mutation.ManufacturerIDCleared() {
		_spec.ClearField(deviceinfo.FieldManufacturerID, field.TypeUUID)
	}
	if value, ok := diuo.mutation.PowerConsumption(); ok {
		_spec.SetField(deviceinfo.FieldPowerConsumption, field.TypeUint32, value)
	}
	if value, ok := diuo.mutation.AddedPowerConsumption(); ok {
		_spec.AddField(deviceinfo.FieldPowerConsumption, field.TypeUint32, value)
	}
	if diuo.mutation.PowerConsumptionCleared() {
		_spec.ClearField(deviceinfo.FieldPowerConsumption, field.TypeUint32)
	}
	if value, ok := diuo.mutation.ShipmentAt(); ok {
		_spec.SetField(deviceinfo.FieldShipmentAt, field.TypeUint32, value)
	}
	if value, ok := diuo.mutation.AddedShipmentAt(); ok {
		_spec.AddField(deviceinfo.FieldShipmentAt, field.TypeUint32, value)
	}
	if diuo.mutation.ShipmentAtCleared() {
		_spec.ClearField(deviceinfo.FieldShipmentAt, field.TypeUint32)
	}
	_spec.AddModifiers(diuo.modifiers...)
	_node = &DeviceInfo{config: diuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, diuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deviceinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	diuo.mutation.done = true
	return _node, nil
}

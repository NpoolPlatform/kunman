// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/devicemanufacturer"
	"github.com/google/uuid"
)

// DeviceManufacturerCreate is the builder for creating a DeviceManufacturer entity.
type DeviceManufacturerCreate struct {
	config
	mutation *DeviceManufacturerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (dmc *DeviceManufacturerCreate) SetEntID(u uuid.UUID) *DeviceManufacturerCreate {
	dmc.mutation.SetEntID(u)
	return dmc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (dmc *DeviceManufacturerCreate) SetNillableEntID(u *uuid.UUID) *DeviceManufacturerCreate {
	if u != nil {
		dmc.SetEntID(*u)
	}
	return dmc
}

// SetName sets the "name" field.
func (dmc *DeviceManufacturerCreate) SetName(s string) *DeviceManufacturerCreate {
	dmc.mutation.SetName(s)
	return dmc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dmc *DeviceManufacturerCreate) SetNillableName(s *string) *DeviceManufacturerCreate {
	if s != nil {
		dmc.SetName(*s)
	}
	return dmc
}

// SetLogo sets the "logo" field.
func (dmc *DeviceManufacturerCreate) SetLogo(s string) *DeviceManufacturerCreate {
	dmc.mutation.SetLogo(s)
	return dmc
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (dmc *DeviceManufacturerCreate) SetNillableLogo(s *string) *DeviceManufacturerCreate {
	if s != nil {
		dmc.SetLogo(*s)
	}
	return dmc
}

// SetID sets the "id" field.
func (dmc *DeviceManufacturerCreate) SetID(u uint32) *DeviceManufacturerCreate {
	dmc.mutation.SetID(u)
	return dmc
}

// Mutation returns the DeviceManufacturerMutation object of the builder.
func (dmc *DeviceManufacturerCreate) Mutation() *DeviceManufacturerMutation {
	return dmc.mutation
}

// Save creates the DeviceManufacturer in the database.
func (dmc *DeviceManufacturerCreate) Save(ctx context.Context) (*DeviceManufacturer, error) {
	dmc.defaults()
	return withHooks(ctx, dmc.sqlSave, dmc.mutation, dmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dmc *DeviceManufacturerCreate) SaveX(ctx context.Context) *DeviceManufacturer {
	v, err := dmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dmc *DeviceManufacturerCreate) Exec(ctx context.Context) error {
	_, err := dmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmc *DeviceManufacturerCreate) ExecX(ctx context.Context) {
	if err := dmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dmc *DeviceManufacturerCreate) defaults() {
	if _, ok := dmc.mutation.EntID(); !ok {
		v := devicemanufacturer.DefaultEntID()
		dmc.mutation.SetEntID(v)
	}
	if _, ok := dmc.mutation.Name(); !ok {
		v := devicemanufacturer.DefaultName
		dmc.mutation.SetName(v)
	}
	if _, ok := dmc.mutation.Logo(); !ok {
		v := devicemanufacturer.DefaultLogo
		dmc.mutation.SetLogo(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dmc *DeviceManufacturerCreate) check() error {
	if _, ok := dmc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "DeviceManufacturer.ent_id"`)}
	}
	if v, ok := dmc.mutation.Name(); ok {
		if err := devicemanufacturer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "DeviceManufacturer.name": %w`, err)}
		}
	}
	if v, ok := dmc.mutation.Logo(); ok {
		if err := devicemanufacturer.LogoValidator(v); err != nil {
			return &ValidationError{Name: "logo", err: fmt.Errorf(`generated: validator failed for field "DeviceManufacturer.logo": %w`, err)}
		}
	}
	return nil
}

func (dmc *DeviceManufacturerCreate) sqlSave(ctx context.Context) (*DeviceManufacturer, error) {
	if err := dmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	dmc.mutation.id = &_node.ID
	dmc.mutation.done = true
	return _node, nil
}

func (dmc *DeviceManufacturerCreate) createSpec() (*DeviceManufacturer, *sqlgraph.CreateSpec) {
	var (
		_node = &DeviceManufacturer{config: dmc.config}
		_spec = sqlgraph.NewCreateSpec(devicemanufacturer.Table, sqlgraph.NewFieldSpec(devicemanufacturer.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = dmc.conflict
	if id, ok := dmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dmc.mutation.EntID(); ok {
		_spec.SetField(devicemanufacturer.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := dmc.mutation.Name(); ok {
		_spec.SetField(devicemanufacturer.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dmc.mutation.Logo(); ok {
		_spec.SetField(devicemanufacturer.FieldLogo, field.TypeString, value)
		_node.Logo = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeviceManufacturer.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeviceManufacturerUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (dmc *DeviceManufacturerCreate) OnConflict(opts ...sql.ConflictOption) *DeviceManufacturerUpsertOne {
	dmc.conflict = opts
	return &DeviceManufacturerUpsertOne{
		create: dmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeviceManufacturer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dmc *DeviceManufacturerCreate) OnConflictColumns(columns ...string) *DeviceManufacturerUpsertOne {
	dmc.conflict = append(dmc.conflict, sql.ConflictColumns(columns...))
	return &DeviceManufacturerUpsertOne{
		create: dmc,
	}
}

type (
	// DeviceManufacturerUpsertOne is the builder for "upsert"-ing
	//  one DeviceManufacturer node.
	DeviceManufacturerUpsertOne struct {
		create *DeviceManufacturerCreate
	}

	// DeviceManufacturerUpsert is the "OnConflict" setter.
	DeviceManufacturerUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *DeviceManufacturerUpsert) SetEntID(v uuid.UUID) *DeviceManufacturerUpsert {
	u.Set(devicemanufacturer.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *DeviceManufacturerUpsert) UpdateEntID() *DeviceManufacturerUpsert {
	u.SetExcluded(devicemanufacturer.FieldEntID)
	return u
}

// SetName sets the "name" field.
func (u *DeviceManufacturerUpsert) SetName(v string) *DeviceManufacturerUpsert {
	u.Set(devicemanufacturer.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DeviceManufacturerUpsert) UpdateName() *DeviceManufacturerUpsert {
	u.SetExcluded(devicemanufacturer.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *DeviceManufacturerUpsert) ClearName() *DeviceManufacturerUpsert {
	u.SetNull(devicemanufacturer.FieldName)
	return u
}

// SetLogo sets the "logo" field.
func (u *DeviceManufacturerUpsert) SetLogo(v string) *DeviceManufacturerUpsert {
	u.Set(devicemanufacturer.FieldLogo, v)
	return u
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *DeviceManufacturerUpsert) UpdateLogo() *DeviceManufacturerUpsert {
	u.SetExcluded(devicemanufacturer.FieldLogo)
	return u
}

// ClearLogo clears the value of the "logo" field.
func (u *DeviceManufacturerUpsert) ClearLogo() *DeviceManufacturerUpsert {
	u.SetNull(devicemanufacturer.FieldLogo)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DeviceManufacturer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(devicemanufacturer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeviceManufacturerUpsertOne) UpdateNewValues() *DeviceManufacturerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(devicemanufacturer.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeviceManufacturer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DeviceManufacturerUpsertOne) Ignore() *DeviceManufacturerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeviceManufacturerUpsertOne) DoNothing() *DeviceManufacturerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeviceManufacturerCreate.OnConflict
// documentation for more info.
func (u *DeviceManufacturerUpsertOne) Update(set func(*DeviceManufacturerUpsert)) *DeviceManufacturerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeviceManufacturerUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *DeviceManufacturerUpsertOne) SetEntID(v uuid.UUID) *DeviceManufacturerUpsertOne {
	return u.Update(func(s *DeviceManufacturerUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *DeviceManufacturerUpsertOne) UpdateEntID() *DeviceManufacturerUpsertOne {
	return u.Update(func(s *DeviceManufacturerUpsert) {
		s.UpdateEntID()
	})
}

// SetName sets the "name" field.
func (u *DeviceManufacturerUpsertOne) SetName(v string) *DeviceManufacturerUpsertOne {
	return u.Update(func(s *DeviceManufacturerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DeviceManufacturerUpsertOne) UpdateName() *DeviceManufacturerUpsertOne {
	return u.Update(func(s *DeviceManufacturerUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *DeviceManufacturerUpsertOne) ClearName() *DeviceManufacturerUpsertOne {
	return u.Update(func(s *DeviceManufacturerUpsert) {
		s.ClearName()
	})
}

// SetLogo sets the "logo" field.
func (u *DeviceManufacturerUpsertOne) SetLogo(v string) *DeviceManufacturerUpsertOne {
	return u.Update(func(s *DeviceManufacturerUpsert) {
		s.SetLogo(v)
	})
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *DeviceManufacturerUpsertOne) UpdateLogo() *DeviceManufacturerUpsertOne {
	return u.Update(func(s *DeviceManufacturerUpsert) {
		s.UpdateLogo()
	})
}

// ClearLogo clears the value of the "logo" field.
func (u *DeviceManufacturerUpsertOne) ClearLogo() *DeviceManufacturerUpsertOne {
	return u.Update(func(s *DeviceManufacturerUpsert) {
		s.ClearLogo()
	})
}

// Exec executes the query.
func (u *DeviceManufacturerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for DeviceManufacturerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeviceManufacturerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DeviceManufacturerUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DeviceManufacturerUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DeviceManufacturerCreateBulk is the builder for creating many DeviceManufacturer entities in bulk.
type DeviceManufacturerCreateBulk struct {
	config
	err      error
	builders []*DeviceManufacturerCreate
	conflict []sql.ConflictOption
}

// Save creates the DeviceManufacturer entities in the database.
func (dmcb *DeviceManufacturerCreateBulk) Save(ctx context.Context) ([]*DeviceManufacturer, error) {
	if dmcb.err != nil {
		return nil, dmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dmcb.builders))
	nodes := make([]*DeviceManufacturer, len(dmcb.builders))
	mutators := make([]Mutator, len(dmcb.builders))
	for i := range dmcb.builders {
		func(i int, root context.Context) {
			builder := dmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeviceManufacturerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dmcb *DeviceManufacturerCreateBulk) SaveX(ctx context.Context) []*DeviceManufacturer {
	v, err := dmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dmcb *DeviceManufacturerCreateBulk) Exec(ctx context.Context) error {
	_, err := dmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmcb *DeviceManufacturerCreateBulk) ExecX(ctx context.Context) {
	if err := dmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeviceManufacturer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeviceManufacturerUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (dmcb *DeviceManufacturerCreateBulk) OnConflict(opts ...sql.ConflictOption) *DeviceManufacturerUpsertBulk {
	dmcb.conflict = opts
	return &DeviceManufacturerUpsertBulk{
		create: dmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeviceManufacturer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dmcb *DeviceManufacturerCreateBulk) OnConflictColumns(columns ...string) *DeviceManufacturerUpsertBulk {
	dmcb.conflict = append(dmcb.conflict, sql.ConflictColumns(columns...))
	return &DeviceManufacturerUpsertBulk{
		create: dmcb,
	}
}

// DeviceManufacturerUpsertBulk is the builder for "upsert"-ing
// a bulk of DeviceManufacturer nodes.
type DeviceManufacturerUpsertBulk struct {
	create *DeviceManufacturerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DeviceManufacturer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(devicemanufacturer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeviceManufacturerUpsertBulk) UpdateNewValues() *DeviceManufacturerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(devicemanufacturer.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeviceManufacturer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DeviceManufacturerUpsertBulk) Ignore() *DeviceManufacturerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeviceManufacturerUpsertBulk) DoNothing() *DeviceManufacturerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeviceManufacturerCreateBulk.OnConflict
// documentation for more info.
func (u *DeviceManufacturerUpsertBulk) Update(set func(*DeviceManufacturerUpsert)) *DeviceManufacturerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeviceManufacturerUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *DeviceManufacturerUpsertBulk) SetEntID(v uuid.UUID) *DeviceManufacturerUpsertBulk {
	return u.Update(func(s *DeviceManufacturerUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *DeviceManufacturerUpsertBulk) UpdateEntID() *DeviceManufacturerUpsertBulk {
	return u.Update(func(s *DeviceManufacturerUpsert) {
		s.UpdateEntID()
	})
}

// SetName sets the "name" field.
func (u *DeviceManufacturerUpsertBulk) SetName(v string) *DeviceManufacturerUpsertBulk {
	return u.Update(func(s *DeviceManufacturerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DeviceManufacturerUpsertBulk) UpdateName() *DeviceManufacturerUpsertBulk {
	return u.Update(func(s *DeviceManufacturerUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *DeviceManufacturerUpsertBulk) ClearName() *DeviceManufacturerUpsertBulk {
	return u.Update(func(s *DeviceManufacturerUpsert) {
		s.ClearName()
	})
}

// SetLogo sets the "logo" field.
func (u *DeviceManufacturerUpsertBulk) SetLogo(v string) *DeviceManufacturerUpsertBulk {
	return u.Update(func(s *DeviceManufacturerUpsert) {
		s.SetLogo(v)
	})
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *DeviceManufacturerUpsertBulk) UpdateLogo() *DeviceManufacturerUpsertBulk {
	return u.Update(func(s *DeviceManufacturerUpsert) {
		s.UpdateLogo()
	})
}

// ClearLogo clears the value of the "logo" field.
func (u *DeviceManufacturerUpsertBulk) ClearLogo() *DeviceManufacturerUpsertBulk {
	return u.Update(func(s *DeviceManufacturerUpsert) {
		s.ClearLogo()
	})
}

// Exec executes the query.
func (u *DeviceManufacturerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the DeviceManufacturerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for DeviceManufacturerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeviceManufacturerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appsimulatepowerrental"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppSimulatePowerRentalUpdate is the builder for updating AppSimulatePowerRental entities.
type AppSimulatePowerRentalUpdate struct {
	config
	hooks     []Hook
	mutation  *AppSimulatePowerRentalMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppSimulatePowerRentalUpdate builder.
func (aspru *AppSimulatePowerRentalUpdate) Where(ps ...predicate.AppSimulatePowerRental) *AppSimulatePowerRentalUpdate {
	aspru.mutation.Where(ps...)
	return aspru
}

// SetEntID sets the "ent_id" field.
func (aspru *AppSimulatePowerRentalUpdate) SetEntID(u uuid.UUID) *AppSimulatePowerRentalUpdate {
	aspru.mutation.SetEntID(u)
	return aspru
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (aspru *AppSimulatePowerRentalUpdate) SetNillableEntID(u *uuid.UUID) *AppSimulatePowerRentalUpdate {
	if u != nil {
		aspru.SetEntID(*u)
	}
	return aspru
}

// SetAppGoodID sets the "app_good_id" field.
func (aspru *AppSimulatePowerRentalUpdate) SetAppGoodID(u uuid.UUID) *AppSimulatePowerRentalUpdate {
	aspru.mutation.SetAppGoodID(u)
	return aspru
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (aspru *AppSimulatePowerRentalUpdate) SetNillableAppGoodID(u *uuid.UUID) *AppSimulatePowerRentalUpdate {
	if u != nil {
		aspru.SetAppGoodID(*u)
	}
	return aspru
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (aspru *AppSimulatePowerRentalUpdate) ClearAppGoodID() *AppSimulatePowerRentalUpdate {
	aspru.mutation.ClearAppGoodID()
	return aspru
}

// SetCoinTypeID sets the "coin_type_id" field.
func (aspru *AppSimulatePowerRentalUpdate) SetCoinTypeID(u uuid.UUID) *AppSimulatePowerRentalUpdate {
	aspru.mutation.SetCoinTypeID(u)
	return aspru
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (aspru *AppSimulatePowerRentalUpdate) SetNillableCoinTypeID(u *uuid.UUID) *AppSimulatePowerRentalUpdate {
	if u != nil {
		aspru.SetCoinTypeID(*u)
	}
	return aspru
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (aspru *AppSimulatePowerRentalUpdate) ClearCoinTypeID() *AppSimulatePowerRentalUpdate {
	aspru.mutation.ClearCoinTypeID()
	return aspru
}

// SetOrderUnits sets the "order_units" field.
func (aspru *AppSimulatePowerRentalUpdate) SetOrderUnits(d decimal.Decimal) *AppSimulatePowerRentalUpdate {
	aspru.mutation.SetOrderUnits(d)
	return aspru
}

// SetNillableOrderUnits sets the "order_units" field if the given value is not nil.
func (aspru *AppSimulatePowerRentalUpdate) SetNillableOrderUnits(d *decimal.Decimal) *AppSimulatePowerRentalUpdate {
	if d != nil {
		aspru.SetOrderUnits(*d)
	}
	return aspru
}

// ClearOrderUnits clears the value of the "order_units" field.
func (aspru *AppSimulatePowerRentalUpdate) ClearOrderUnits() *AppSimulatePowerRentalUpdate {
	aspru.mutation.ClearOrderUnits()
	return aspru
}

// SetOrderDurationSeconds sets the "order_duration_seconds" field.
func (aspru *AppSimulatePowerRentalUpdate) SetOrderDurationSeconds(u uint32) *AppSimulatePowerRentalUpdate {
	aspru.mutation.ResetOrderDurationSeconds()
	aspru.mutation.SetOrderDurationSeconds(u)
	return aspru
}

// SetNillableOrderDurationSeconds sets the "order_duration_seconds" field if the given value is not nil.
func (aspru *AppSimulatePowerRentalUpdate) SetNillableOrderDurationSeconds(u *uint32) *AppSimulatePowerRentalUpdate {
	if u != nil {
		aspru.SetOrderDurationSeconds(*u)
	}
	return aspru
}

// AddOrderDurationSeconds adds u to the "order_duration_seconds" field.
func (aspru *AppSimulatePowerRentalUpdate) AddOrderDurationSeconds(u int32) *AppSimulatePowerRentalUpdate {
	aspru.mutation.AddOrderDurationSeconds(u)
	return aspru
}

// ClearOrderDurationSeconds clears the value of the "order_duration_seconds" field.
func (aspru *AppSimulatePowerRentalUpdate) ClearOrderDurationSeconds() *AppSimulatePowerRentalUpdate {
	aspru.mutation.ClearOrderDurationSeconds()
	return aspru
}

// Mutation returns the AppSimulatePowerRentalMutation object of the builder.
func (aspru *AppSimulatePowerRentalUpdate) Mutation() *AppSimulatePowerRentalMutation {
	return aspru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aspru *AppSimulatePowerRentalUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, aspru.sqlSave, aspru.mutation, aspru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aspru *AppSimulatePowerRentalUpdate) SaveX(ctx context.Context) int {
	affected, err := aspru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aspru *AppSimulatePowerRentalUpdate) Exec(ctx context.Context) error {
	_, err := aspru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aspru *AppSimulatePowerRentalUpdate) ExecX(ctx context.Context) {
	if err := aspru.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aspru *AppSimulatePowerRentalUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppSimulatePowerRentalUpdate {
	aspru.modifiers = append(aspru.modifiers, modifiers...)
	return aspru
}

func (aspru *AppSimulatePowerRentalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appsimulatepowerrental.Table, appsimulatepowerrental.Columns, sqlgraph.NewFieldSpec(appsimulatepowerrental.FieldID, field.TypeUint32))
	if ps := aspru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aspru.mutation.EntID(); ok {
		_spec.SetField(appsimulatepowerrental.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := aspru.mutation.AppGoodID(); ok {
		_spec.SetField(appsimulatepowerrental.FieldAppGoodID, field.TypeUUID, value)
	}
	if aspru.mutation.AppGoodIDCleared() {
		_spec.ClearField(appsimulatepowerrental.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := aspru.mutation.CoinTypeID(); ok {
		_spec.SetField(appsimulatepowerrental.FieldCoinTypeID, field.TypeUUID, value)
	}
	if aspru.mutation.CoinTypeIDCleared() {
		_spec.ClearField(appsimulatepowerrental.FieldCoinTypeID, field.TypeUUID)
	}
	if value, ok := aspru.mutation.OrderUnits(); ok {
		_spec.SetField(appsimulatepowerrental.FieldOrderUnits, field.TypeOther, value)
	}
	if aspru.mutation.OrderUnitsCleared() {
		_spec.ClearField(appsimulatepowerrental.FieldOrderUnits, field.TypeOther)
	}
	if value, ok := aspru.mutation.OrderDurationSeconds(); ok {
		_spec.SetField(appsimulatepowerrental.FieldOrderDurationSeconds, field.TypeUint32, value)
	}
	if value, ok := aspru.mutation.AddedOrderDurationSeconds(); ok {
		_spec.AddField(appsimulatepowerrental.FieldOrderDurationSeconds, field.TypeUint32, value)
	}
	if aspru.mutation.OrderDurationSecondsCleared() {
		_spec.ClearField(appsimulatepowerrental.FieldOrderDurationSeconds, field.TypeUint32)
	}
	_spec.AddModifiers(aspru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, aspru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appsimulatepowerrental.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aspru.mutation.done = true
	return n, nil
}

// AppSimulatePowerRentalUpdateOne is the builder for updating a single AppSimulatePowerRental entity.
type AppSimulatePowerRentalUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppSimulatePowerRentalMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (aspruo *AppSimulatePowerRentalUpdateOne) SetEntID(u uuid.UUID) *AppSimulatePowerRentalUpdateOne {
	aspruo.mutation.SetEntID(u)
	return aspruo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (aspruo *AppSimulatePowerRentalUpdateOne) SetNillableEntID(u *uuid.UUID) *AppSimulatePowerRentalUpdateOne {
	if u != nil {
		aspruo.SetEntID(*u)
	}
	return aspruo
}

// SetAppGoodID sets the "app_good_id" field.
func (aspruo *AppSimulatePowerRentalUpdateOne) SetAppGoodID(u uuid.UUID) *AppSimulatePowerRentalUpdateOne {
	aspruo.mutation.SetAppGoodID(u)
	return aspruo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (aspruo *AppSimulatePowerRentalUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *AppSimulatePowerRentalUpdateOne {
	if u != nil {
		aspruo.SetAppGoodID(*u)
	}
	return aspruo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (aspruo *AppSimulatePowerRentalUpdateOne) ClearAppGoodID() *AppSimulatePowerRentalUpdateOne {
	aspruo.mutation.ClearAppGoodID()
	return aspruo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (aspruo *AppSimulatePowerRentalUpdateOne) SetCoinTypeID(u uuid.UUID) *AppSimulatePowerRentalUpdateOne {
	aspruo.mutation.SetCoinTypeID(u)
	return aspruo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (aspruo *AppSimulatePowerRentalUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *AppSimulatePowerRentalUpdateOne {
	if u != nil {
		aspruo.SetCoinTypeID(*u)
	}
	return aspruo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (aspruo *AppSimulatePowerRentalUpdateOne) ClearCoinTypeID() *AppSimulatePowerRentalUpdateOne {
	aspruo.mutation.ClearCoinTypeID()
	return aspruo
}

// SetOrderUnits sets the "order_units" field.
func (aspruo *AppSimulatePowerRentalUpdateOne) SetOrderUnits(d decimal.Decimal) *AppSimulatePowerRentalUpdateOne {
	aspruo.mutation.SetOrderUnits(d)
	return aspruo
}

// SetNillableOrderUnits sets the "order_units" field if the given value is not nil.
func (aspruo *AppSimulatePowerRentalUpdateOne) SetNillableOrderUnits(d *decimal.Decimal) *AppSimulatePowerRentalUpdateOne {
	if d != nil {
		aspruo.SetOrderUnits(*d)
	}
	return aspruo
}

// ClearOrderUnits clears the value of the "order_units" field.
func (aspruo *AppSimulatePowerRentalUpdateOne) ClearOrderUnits() *AppSimulatePowerRentalUpdateOne {
	aspruo.mutation.ClearOrderUnits()
	return aspruo
}

// SetOrderDurationSeconds sets the "order_duration_seconds" field.
func (aspruo *AppSimulatePowerRentalUpdateOne) SetOrderDurationSeconds(u uint32) *AppSimulatePowerRentalUpdateOne {
	aspruo.mutation.ResetOrderDurationSeconds()
	aspruo.mutation.SetOrderDurationSeconds(u)
	return aspruo
}

// SetNillableOrderDurationSeconds sets the "order_duration_seconds" field if the given value is not nil.
func (aspruo *AppSimulatePowerRentalUpdateOne) SetNillableOrderDurationSeconds(u *uint32) *AppSimulatePowerRentalUpdateOne {
	if u != nil {
		aspruo.SetOrderDurationSeconds(*u)
	}
	return aspruo
}

// AddOrderDurationSeconds adds u to the "order_duration_seconds" field.
func (aspruo *AppSimulatePowerRentalUpdateOne) AddOrderDurationSeconds(u int32) *AppSimulatePowerRentalUpdateOne {
	aspruo.mutation.AddOrderDurationSeconds(u)
	return aspruo
}

// ClearOrderDurationSeconds clears the value of the "order_duration_seconds" field.
func (aspruo *AppSimulatePowerRentalUpdateOne) ClearOrderDurationSeconds() *AppSimulatePowerRentalUpdateOne {
	aspruo.mutation.ClearOrderDurationSeconds()
	return aspruo
}

// Mutation returns the AppSimulatePowerRentalMutation object of the builder.
func (aspruo *AppSimulatePowerRentalUpdateOne) Mutation() *AppSimulatePowerRentalMutation {
	return aspruo.mutation
}

// Where appends a list predicates to the AppSimulatePowerRentalUpdate builder.
func (aspruo *AppSimulatePowerRentalUpdateOne) Where(ps ...predicate.AppSimulatePowerRental) *AppSimulatePowerRentalUpdateOne {
	aspruo.mutation.Where(ps...)
	return aspruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aspruo *AppSimulatePowerRentalUpdateOne) Select(field string, fields ...string) *AppSimulatePowerRentalUpdateOne {
	aspruo.fields = append([]string{field}, fields...)
	return aspruo
}

// Save executes the query and returns the updated AppSimulatePowerRental entity.
func (aspruo *AppSimulatePowerRentalUpdateOne) Save(ctx context.Context) (*AppSimulatePowerRental, error) {
	return withHooks(ctx, aspruo.sqlSave, aspruo.mutation, aspruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aspruo *AppSimulatePowerRentalUpdateOne) SaveX(ctx context.Context) *AppSimulatePowerRental {
	node, err := aspruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aspruo *AppSimulatePowerRentalUpdateOne) Exec(ctx context.Context) error {
	_, err := aspruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aspruo *AppSimulatePowerRentalUpdateOne) ExecX(ctx context.Context) {
	if err := aspruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aspruo *AppSimulatePowerRentalUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppSimulatePowerRentalUpdateOne {
	aspruo.modifiers = append(aspruo.modifiers, modifiers...)
	return aspruo
}

func (aspruo *AppSimulatePowerRentalUpdateOne) sqlSave(ctx context.Context) (_node *AppSimulatePowerRental, err error) {
	_spec := sqlgraph.NewUpdateSpec(appsimulatepowerrental.Table, appsimulatepowerrental.Columns, sqlgraph.NewFieldSpec(appsimulatepowerrental.FieldID, field.TypeUint32))
	id, ok := aspruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AppSimulatePowerRental.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aspruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appsimulatepowerrental.FieldID)
		for _, f := range fields {
			if !appsimulatepowerrental.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != appsimulatepowerrental.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aspruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aspruo.mutation.EntID(); ok {
		_spec.SetField(appsimulatepowerrental.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := aspruo.mutation.AppGoodID(); ok {
		_spec.SetField(appsimulatepowerrental.FieldAppGoodID, field.TypeUUID, value)
	}
	if aspruo.mutation.AppGoodIDCleared() {
		_spec.ClearField(appsimulatepowerrental.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := aspruo.mutation.CoinTypeID(); ok {
		_spec.SetField(appsimulatepowerrental.FieldCoinTypeID, field.TypeUUID, value)
	}
	if aspruo.mutation.CoinTypeIDCleared() {
		_spec.ClearField(appsimulatepowerrental.FieldCoinTypeID, field.TypeUUID)
	}
	if value, ok := aspruo.mutation.OrderUnits(); ok {
		_spec.SetField(appsimulatepowerrental.FieldOrderUnits, field.TypeOther, value)
	}
	if aspruo.mutation.OrderUnitsCleared() {
		_spec.ClearField(appsimulatepowerrental.FieldOrderUnits, field.TypeOther)
	}
	if value, ok := aspruo.mutation.OrderDurationSeconds(); ok {
		_spec.SetField(appsimulatepowerrental.FieldOrderDurationSeconds, field.TypeUint32, value)
	}
	if value, ok := aspruo.mutation.AddedOrderDurationSeconds(); ok {
		_spec.AddField(appsimulatepowerrental.FieldOrderDurationSeconds, field.TypeUint32, value)
	}
	if aspruo.mutation.OrderDurationSecondsCleared() {
		_spec.ClearField(appsimulatepowerrental.FieldOrderDurationSeconds, field.TypeUint32)
	}
	_spec.AddModifiers(aspruo.modifiers...)
	_node = &AppSimulatePowerRental{config: aspruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aspruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appsimulatepowerrental.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aspruo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/requiredgood"
	"github.com/google/uuid"
)

// RequiredGoodUpdate is the builder for updating RequiredGood entities.
type RequiredGoodUpdate struct {
	config
	hooks     []Hook
	mutation  *RequiredGoodMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RequiredGoodUpdate builder.
func (rgu *RequiredGoodUpdate) Where(ps ...predicate.RequiredGood) *RequiredGoodUpdate {
	rgu.mutation.Where(ps...)
	return rgu
}

// SetEntID sets the "ent_id" field.
func (rgu *RequiredGoodUpdate) SetEntID(u uuid.UUID) *RequiredGoodUpdate {
	rgu.mutation.SetEntID(u)
	return rgu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (rgu *RequiredGoodUpdate) SetNillableEntID(u *uuid.UUID) *RequiredGoodUpdate {
	if u != nil {
		rgu.SetEntID(*u)
	}
	return rgu
}

// SetMainGoodID sets the "main_good_id" field.
func (rgu *RequiredGoodUpdate) SetMainGoodID(u uuid.UUID) *RequiredGoodUpdate {
	rgu.mutation.SetMainGoodID(u)
	return rgu
}

// SetNillableMainGoodID sets the "main_good_id" field if the given value is not nil.
func (rgu *RequiredGoodUpdate) SetNillableMainGoodID(u *uuid.UUID) *RequiredGoodUpdate {
	if u != nil {
		rgu.SetMainGoodID(*u)
	}
	return rgu
}

// SetRequiredGoodID sets the "required_good_id" field.
func (rgu *RequiredGoodUpdate) SetRequiredGoodID(u uuid.UUID) *RequiredGoodUpdate {
	rgu.mutation.SetRequiredGoodID(u)
	return rgu
}

// SetNillableRequiredGoodID sets the "required_good_id" field if the given value is not nil.
func (rgu *RequiredGoodUpdate) SetNillableRequiredGoodID(u *uuid.UUID) *RequiredGoodUpdate {
	if u != nil {
		rgu.SetRequiredGoodID(*u)
	}
	return rgu
}

// SetMust sets the "must" field.
func (rgu *RequiredGoodUpdate) SetMust(b bool) *RequiredGoodUpdate {
	rgu.mutation.SetMust(b)
	return rgu
}

// SetNillableMust sets the "must" field if the given value is not nil.
func (rgu *RequiredGoodUpdate) SetNillableMust(b *bool) *RequiredGoodUpdate {
	if b != nil {
		rgu.SetMust(*b)
	}
	return rgu
}

// ClearMust clears the value of the "must" field.
func (rgu *RequiredGoodUpdate) ClearMust() *RequiredGoodUpdate {
	rgu.mutation.ClearMust()
	return rgu
}

// Mutation returns the RequiredGoodMutation object of the builder.
func (rgu *RequiredGoodUpdate) Mutation() *RequiredGoodMutation {
	return rgu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rgu *RequiredGoodUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rgu.sqlSave, rgu.mutation, rgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rgu *RequiredGoodUpdate) SaveX(ctx context.Context) int {
	affected, err := rgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rgu *RequiredGoodUpdate) Exec(ctx context.Context) error {
	_, err := rgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rgu *RequiredGoodUpdate) ExecX(ctx context.Context) {
	if err := rgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rgu *RequiredGoodUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RequiredGoodUpdate {
	rgu.modifiers = append(rgu.modifiers, modifiers...)
	return rgu
}

func (rgu *RequiredGoodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(requiredgood.Table, requiredgood.Columns, sqlgraph.NewFieldSpec(requiredgood.FieldID, field.TypeUint32))
	if ps := rgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rgu.mutation.EntID(); ok {
		_spec.SetField(requiredgood.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := rgu.mutation.MainGoodID(); ok {
		_spec.SetField(requiredgood.FieldMainGoodID, field.TypeUUID, value)
	}
	if value, ok := rgu.mutation.RequiredGoodID(); ok {
		_spec.SetField(requiredgood.FieldRequiredGoodID, field.TypeUUID, value)
	}
	if value, ok := rgu.mutation.Must(); ok {
		_spec.SetField(requiredgood.FieldMust, field.TypeBool, value)
	}
	if rgu.mutation.MustCleared() {
		_spec.ClearField(requiredgood.FieldMust, field.TypeBool)
	}
	_spec.AddModifiers(rgu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, rgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{requiredgood.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rgu.mutation.done = true
	return n, nil
}

// RequiredGoodUpdateOne is the builder for updating a single RequiredGood entity.
type RequiredGoodUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RequiredGoodMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (rguo *RequiredGoodUpdateOne) SetEntID(u uuid.UUID) *RequiredGoodUpdateOne {
	rguo.mutation.SetEntID(u)
	return rguo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (rguo *RequiredGoodUpdateOne) SetNillableEntID(u *uuid.UUID) *RequiredGoodUpdateOne {
	if u != nil {
		rguo.SetEntID(*u)
	}
	return rguo
}

// SetMainGoodID sets the "main_good_id" field.
func (rguo *RequiredGoodUpdateOne) SetMainGoodID(u uuid.UUID) *RequiredGoodUpdateOne {
	rguo.mutation.SetMainGoodID(u)
	return rguo
}

// SetNillableMainGoodID sets the "main_good_id" field if the given value is not nil.
func (rguo *RequiredGoodUpdateOne) SetNillableMainGoodID(u *uuid.UUID) *RequiredGoodUpdateOne {
	if u != nil {
		rguo.SetMainGoodID(*u)
	}
	return rguo
}

// SetRequiredGoodID sets the "required_good_id" field.
func (rguo *RequiredGoodUpdateOne) SetRequiredGoodID(u uuid.UUID) *RequiredGoodUpdateOne {
	rguo.mutation.SetRequiredGoodID(u)
	return rguo
}

// SetNillableRequiredGoodID sets the "required_good_id" field if the given value is not nil.
func (rguo *RequiredGoodUpdateOne) SetNillableRequiredGoodID(u *uuid.UUID) *RequiredGoodUpdateOne {
	if u != nil {
		rguo.SetRequiredGoodID(*u)
	}
	return rguo
}

// SetMust sets the "must" field.
func (rguo *RequiredGoodUpdateOne) SetMust(b bool) *RequiredGoodUpdateOne {
	rguo.mutation.SetMust(b)
	return rguo
}

// SetNillableMust sets the "must" field if the given value is not nil.
func (rguo *RequiredGoodUpdateOne) SetNillableMust(b *bool) *RequiredGoodUpdateOne {
	if b != nil {
		rguo.SetMust(*b)
	}
	return rguo
}

// ClearMust clears the value of the "must" field.
func (rguo *RequiredGoodUpdateOne) ClearMust() *RequiredGoodUpdateOne {
	rguo.mutation.ClearMust()
	return rguo
}

// Mutation returns the RequiredGoodMutation object of the builder.
func (rguo *RequiredGoodUpdateOne) Mutation() *RequiredGoodMutation {
	return rguo.mutation
}

// Where appends a list predicates to the RequiredGoodUpdate builder.
func (rguo *RequiredGoodUpdateOne) Where(ps ...predicate.RequiredGood) *RequiredGoodUpdateOne {
	rguo.mutation.Where(ps...)
	return rguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rguo *RequiredGoodUpdateOne) Select(field string, fields ...string) *RequiredGoodUpdateOne {
	rguo.fields = append([]string{field}, fields...)
	return rguo
}

// Save executes the query and returns the updated RequiredGood entity.
func (rguo *RequiredGoodUpdateOne) Save(ctx context.Context) (*RequiredGood, error) {
	return withHooks(ctx, rguo.sqlSave, rguo.mutation, rguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rguo *RequiredGoodUpdateOne) SaveX(ctx context.Context) *RequiredGood {
	node, err := rguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rguo *RequiredGoodUpdateOne) Exec(ctx context.Context) error {
	_, err := rguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rguo *RequiredGoodUpdateOne) ExecX(ctx context.Context) {
	if err := rguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rguo *RequiredGoodUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RequiredGoodUpdateOne {
	rguo.modifiers = append(rguo.modifiers, modifiers...)
	return rguo
}

func (rguo *RequiredGoodUpdateOne) sqlSave(ctx context.Context) (_node *RequiredGood, err error) {
	_spec := sqlgraph.NewUpdateSpec(requiredgood.Table, requiredgood.Columns, sqlgraph.NewFieldSpec(requiredgood.FieldID, field.TypeUint32))
	id, ok := rguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "RequiredGood.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, requiredgood.FieldID)
		for _, f := range fields {
			if !requiredgood.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != requiredgood.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rguo.mutation.EntID(); ok {
		_spec.SetField(requiredgood.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := rguo.mutation.MainGoodID(); ok {
		_spec.SetField(requiredgood.FieldMainGoodID, field.TypeUUID, value)
	}
	if value, ok := rguo.mutation.RequiredGoodID(); ok {
		_spec.SetField(requiredgood.FieldRequiredGoodID, field.TypeUUID, value)
	}
	if value, ok := rguo.mutation.Must(); ok {
		_spec.SetField(requiredgood.FieldMust, field.TypeBool, value)
	}
	if rguo.mutation.MustCleared() {
		_spec.ClearField(requiredgood.FieldMust, field.TypeBool)
	}
	_spec.AddModifiers(rguo.modifiers...)
	_node = &RequiredGood{config: rguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{requiredgood.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rguo.mutation.done = true
	return _node, nil
}

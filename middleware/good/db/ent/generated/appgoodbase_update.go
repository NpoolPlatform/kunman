// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appgoodbase"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// AppGoodBaseUpdate is the builder for updating AppGoodBase entities.
type AppGoodBaseUpdate struct {
	config
	hooks     []Hook
	mutation  *AppGoodBaseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppGoodBaseUpdate builder.
func (agbu *AppGoodBaseUpdate) Where(ps ...predicate.AppGoodBase) *AppGoodBaseUpdate {
	agbu.mutation.Where(ps...)
	return agbu
}

// SetEntID sets the "ent_id" field.
func (agbu *AppGoodBaseUpdate) SetEntID(u uuid.UUID) *AppGoodBaseUpdate {
	agbu.mutation.SetEntID(u)
	return agbu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (agbu *AppGoodBaseUpdate) SetNillableEntID(u *uuid.UUID) *AppGoodBaseUpdate {
	if u != nil {
		agbu.SetEntID(*u)
	}
	return agbu
}

// SetAppID sets the "app_id" field.
func (agbu *AppGoodBaseUpdate) SetAppID(u uuid.UUID) *AppGoodBaseUpdate {
	agbu.mutation.SetAppID(u)
	return agbu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (agbu *AppGoodBaseUpdate) SetNillableAppID(u *uuid.UUID) *AppGoodBaseUpdate {
	if u != nil {
		agbu.SetAppID(*u)
	}
	return agbu
}

// ClearAppID clears the value of the "app_id" field.
func (agbu *AppGoodBaseUpdate) ClearAppID() *AppGoodBaseUpdate {
	agbu.mutation.ClearAppID()
	return agbu
}

// SetGoodID sets the "good_id" field.
func (agbu *AppGoodBaseUpdate) SetGoodID(u uuid.UUID) *AppGoodBaseUpdate {
	agbu.mutation.SetGoodID(u)
	return agbu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (agbu *AppGoodBaseUpdate) SetNillableGoodID(u *uuid.UUID) *AppGoodBaseUpdate {
	if u != nil {
		agbu.SetGoodID(*u)
	}
	return agbu
}

// ClearGoodID clears the value of the "good_id" field.
func (agbu *AppGoodBaseUpdate) ClearGoodID() *AppGoodBaseUpdate {
	agbu.mutation.ClearGoodID()
	return agbu
}

// SetPurchasable sets the "purchasable" field.
func (agbu *AppGoodBaseUpdate) SetPurchasable(b bool) *AppGoodBaseUpdate {
	agbu.mutation.SetPurchasable(b)
	return agbu
}

// SetNillablePurchasable sets the "purchasable" field if the given value is not nil.
func (agbu *AppGoodBaseUpdate) SetNillablePurchasable(b *bool) *AppGoodBaseUpdate {
	if b != nil {
		agbu.SetPurchasable(*b)
	}
	return agbu
}

// ClearPurchasable clears the value of the "purchasable" field.
func (agbu *AppGoodBaseUpdate) ClearPurchasable() *AppGoodBaseUpdate {
	agbu.mutation.ClearPurchasable()
	return agbu
}

// SetEnableProductPage sets the "enable_product_page" field.
func (agbu *AppGoodBaseUpdate) SetEnableProductPage(b bool) *AppGoodBaseUpdate {
	agbu.mutation.SetEnableProductPage(b)
	return agbu
}

// SetNillableEnableProductPage sets the "enable_product_page" field if the given value is not nil.
func (agbu *AppGoodBaseUpdate) SetNillableEnableProductPage(b *bool) *AppGoodBaseUpdate {
	if b != nil {
		agbu.SetEnableProductPage(*b)
	}
	return agbu
}

// ClearEnableProductPage clears the value of the "enable_product_page" field.
func (agbu *AppGoodBaseUpdate) ClearEnableProductPage() *AppGoodBaseUpdate {
	agbu.mutation.ClearEnableProductPage()
	return agbu
}

// SetProductPage sets the "product_page" field.
func (agbu *AppGoodBaseUpdate) SetProductPage(s string) *AppGoodBaseUpdate {
	agbu.mutation.SetProductPage(s)
	return agbu
}

// SetNillableProductPage sets the "product_page" field if the given value is not nil.
func (agbu *AppGoodBaseUpdate) SetNillableProductPage(s *string) *AppGoodBaseUpdate {
	if s != nil {
		agbu.SetProductPage(*s)
	}
	return agbu
}

// ClearProductPage clears the value of the "product_page" field.
func (agbu *AppGoodBaseUpdate) ClearProductPage() *AppGoodBaseUpdate {
	agbu.mutation.ClearProductPage()
	return agbu
}

// SetOnline sets the "online" field.
func (agbu *AppGoodBaseUpdate) SetOnline(b bool) *AppGoodBaseUpdate {
	agbu.mutation.SetOnline(b)
	return agbu
}

// SetNillableOnline sets the "online" field if the given value is not nil.
func (agbu *AppGoodBaseUpdate) SetNillableOnline(b *bool) *AppGoodBaseUpdate {
	if b != nil {
		agbu.SetOnline(*b)
	}
	return agbu
}

// ClearOnline clears the value of the "online" field.
func (agbu *AppGoodBaseUpdate) ClearOnline() *AppGoodBaseUpdate {
	agbu.mutation.ClearOnline()
	return agbu
}

// SetVisible sets the "visible" field.
func (agbu *AppGoodBaseUpdate) SetVisible(b bool) *AppGoodBaseUpdate {
	agbu.mutation.SetVisible(b)
	return agbu
}

// SetNillableVisible sets the "visible" field if the given value is not nil.
func (agbu *AppGoodBaseUpdate) SetNillableVisible(b *bool) *AppGoodBaseUpdate {
	if b != nil {
		agbu.SetVisible(*b)
	}
	return agbu
}

// ClearVisible clears the value of the "visible" field.
func (agbu *AppGoodBaseUpdate) ClearVisible() *AppGoodBaseUpdate {
	agbu.mutation.ClearVisible()
	return agbu
}

// SetName sets the "name" field.
func (agbu *AppGoodBaseUpdate) SetName(s string) *AppGoodBaseUpdate {
	agbu.mutation.SetName(s)
	return agbu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (agbu *AppGoodBaseUpdate) SetNillableName(s *string) *AppGoodBaseUpdate {
	if s != nil {
		agbu.SetName(*s)
	}
	return agbu
}

// ClearName clears the value of the "name" field.
func (agbu *AppGoodBaseUpdate) ClearName() *AppGoodBaseUpdate {
	agbu.mutation.ClearName()
	return agbu
}

// SetDisplayIndex sets the "display_index" field.
func (agbu *AppGoodBaseUpdate) SetDisplayIndex(i int32) *AppGoodBaseUpdate {
	agbu.mutation.ResetDisplayIndex()
	agbu.mutation.SetDisplayIndex(i)
	return agbu
}

// SetNillableDisplayIndex sets the "display_index" field if the given value is not nil.
func (agbu *AppGoodBaseUpdate) SetNillableDisplayIndex(i *int32) *AppGoodBaseUpdate {
	if i != nil {
		agbu.SetDisplayIndex(*i)
	}
	return agbu
}

// AddDisplayIndex adds i to the "display_index" field.
func (agbu *AppGoodBaseUpdate) AddDisplayIndex(i int32) *AppGoodBaseUpdate {
	agbu.mutation.AddDisplayIndex(i)
	return agbu
}

// ClearDisplayIndex clears the value of the "display_index" field.
func (agbu *AppGoodBaseUpdate) ClearDisplayIndex() *AppGoodBaseUpdate {
	agbu.mutation.ClearDisplayIndex()
	return agbu
}

// SetBanner sets the "banner" field.
func (agbu *AppGoodBaseUpdate) SetBanner(s string) *AppGoodBaseUpdate {
	agbu.mutation.SetBanner(s)
	return agbu
}

// SetNillableBanner sets the "banner" field if the given value is not nil.
func (agbu *AppGoodBaseUpdate) SetNillableBanner(s *string) *AppGoodBaseUpdate {
	if s != nil {
		agbu.SetBanner(*s)
	}
	return agbu
}

// ClearBanner clears the value of the "banner" field.
func (agbu *AppGoodBaseUpdate) ClearBanner() *AppGoodBaseUpdate {
	agbu.mutation.ClearBanner()
	return agbu
}

// Mutation returns the AppGoodBaseMutation object of the builder.
func (agbu *AppGoodBaseUpdate) Mutation() *AppGoodBaseMutation {
	return agbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (agbu *AppGoodBaseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, agbu.sqlSave, agbu.mutation, agbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (agbu *AppGoodBaseUpdate) SaveX(ctx context.Context) int {
	affected, err := agbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (agbu *AppGoodBaseUpdate) Exec(ctx context.Context) error {
	_, err := agbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agbu *AppGoodBaseUpdate) ExecX(ctx context.Context) {
	if err := agbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (agbu *AppGoodBaseUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppGoodBaseUpdate {
	agbu.modifiers = append(agbu.modifiers, modifiers...)
	return agbu
}

func (agbu *AppGoodBaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appgoodbase.Table, appgoodbase.Columns, sqlgraph.NewFieldSpec(appgoodbase.FieldID, field.TypeUint32))
	if ps := agbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agbu.mutation.EntID(); ok {
		_spec.SetField(appgoodbase.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := agbu.mutation.AppID(); ok {
		_spec.SetField(appgoodbase.FieldAppID, field.TypeUUID, value)
	}
	if agbu.mutation.AppIDCleared() {
		_spec.ClearField(appgoodbase.FieldAppID, field.TypeUUID)
	}
	if value, ok := agbu.mutation.GoodID(); ok {
		_spec.SetField(appgoodbase.FieldGoodID, field.TypeUUID, value)
	}
	if agbu.mutation.GoodIDCleared() {
		_spec.ClearField(appgoodbase.FieldGoodID, field.TypeUUID)
	}
	if value, ok := agbu.mutation.Purchasable(); ok {
		_spec.SetField(appgoodbase.FieldPurchasable, field.TypeBool, value)
	}
	if agbu.mutation.PurchasableCleared() {
		_spec.ClearField(appgoodbase.FieldPurchasable, field.TypeBool)
	}
	if value, ok := agbu.mutation.EnableProductPage(); ok {
		_spec.SetField(appgoodbase.FieldEnableProductPage, field.TypeBool, value)
	}
	if agbu.mutation.EnableProductPageCleared() {
		_spec.ClearField(appgoodbase.FieldEnableProductPage, field.TypeBool)
	}
	if value, ok := agbu.mutation.ProductPage(); ok {
		_spec.SetField(appgoodbase.FieldProductPage, field.TypeString, value)
	}
	if agbu.mutation.ProductPageCleared() {
		_spec.ClearField(appgoodbase.FieldProductPage, field.TypeString)
	}
	if value, ok := agbu.mutation.Online(); ok {
		_spec.SetField(appgoodbase.FieldOnline, field.TypeBool, value)
	}
	if agbu.mutation.OnlineCleared() {
		_spec.ClearField(appgoodbase.FieldOnline, field.TypeBool)
	}
	if value, ok := agbu.mutation.Visible(); ok {
		_spec.SetField(appgoodbase.FieldVisible, field.TypeBool, value)
	}
	if agbu.mutation.VisibleCleared() {
		_spec.ClearField(appgoodbase.FieldVisible, field.TypeBool)
	}
	if value, ok := agbu.mutation.Name(); ok {
		_spec.SetField(appgoodbase.FieldName, field.TypeString, value)
	}
	if agbu.mutation.NameCleared() {
		_spec.ClearField(appgoodbase.FieldName, field.TypeString)
	}
	if value, ok := agbu.mutation.DisplayIndex(); ok {
		_spec.SetField(appgoodbase.FieldDisplayIndex, field.TypeInt32, value)
	}
	if value, ok := agbu.mutation.AddedDisplayIndex(); ok {
		_spec.AddField(appgoodbase.FieldDisplayIndex, field.TypeInt32, value)
	}
	if agbu.mutation.DisplayIndexCleared() {
		_spec.ClearField(appgoodbase.FieldDisplayIndex, field.TypeInt32)
	}
	if value, ok := agbu.mutation.Banner(); ok {
		_spec.SetField(appgoodbase.FieldBanner, field.TypeString, value)
	}
	if agbu.mutation.BannerCleared() {
		_spec.ClearField(appgoodbase.FieldBanner, field.TypeString)
	}
	_spec.AddModifiers(agbu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, agbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appgoodbase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	agbu.mutation.done = true
	return n, nil
}

// AppGoodBaseUpdateOne is the builder for updating a single AppGoodBase entity.
type AppGoodBaseUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppGoodBaseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (agbuo *AppGoodBaseUpdateOne) SetEntID(u uuid.UUID) *AppGoodBaseUpdateOne {
	agbuo.mutation.SetEntID(u)
	return agbuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (agbuo *AppGoodBaseUpdateOne) SetNillableEntID(u *uuid.UUID) *AppGoodBaseUpdateOne {
	if u != nil {
		agbuo.SetEntID(*u)
	}
	return agbuo
}

// SetAppID sets the "app_id" field.
func (agbuo *AppGoodBaseUpdateOne) SetAppID(u uuid.UUID) *AppGoodBaseUpdateOne {
	agbuo.mutation.SetAppID(u)
	return agbuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (agbuo *AppGoodBaseUpdateOne) SetNillableAppID(u *uuid.UUID) *AppGoodBaseUpdateOne {
	if u != nil {
		agbuo.SetAppID(*u)
	}
	return agbuo
}

// ClearAppID clears the value of the "app_id" field.
func (agbuo *AppGoodBaseUpdateOne) ClearAppID() *AppGoodBaseUpdateOne {
	agbuo.mutation.ClearAppID()
	return agbuo
}

// SetGoodID sets the "good_id" field.
func (agbuo *AppGoodBaseUpdateOne) SetGoodID(u uuid.UUID) *AppGoodBaseUpdateOne {
	agbuo.mutation.SetGoodID(u)
	return agbuo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (agbuo *AppGoodBaseUpdateOne) SetNillableGoodID(u *uuid.UUID) *AppGoodBaseUpdateOne {
	if u != nil {
		agbuo.SetGoodID(*u)
	}
	return agbuo
}

// ClearGoodID clears the value of the "good_id" field.
func (agbuo *AppGoodBaseUpdateOne) ClearGoodID() *AppGoodBaseUpdateOne {
	agbuo.mutation.ClearGoodID()
	return agbuo
}

// SetPurchasable sets the "purchasable" field.
func (agbuo *AppGoodBaseUpdateOne) SetPurchasable(b bool) *AppGoodBaseUpdateOne {
	agbuo.mutation.SetPurchasable(b)
	return agbuo
}

// SetNillablePurchasable sets the "purchasable" field if the given value is not nil.
func (agbuo *AppGoodBaseUpdateOne) SetNillablePurchasable(b *bool) *AppGoodBaseUpdateOne {
	if b != nil {
		agbuo.SetPurchasable(*b)
	}
	return agbuo
}

// ClearPurchasable clears the value of the "purchasable" field.
func (agbuo *AppGoodBaseUpdateOne) ClearPurchasable() *AppGoodBaseUpdateOne {
	agbuo.mutation.ClearPurchasable()
	return agbuo
}

// SetEnableProductPage sets the "enable_product_page" field.
func (agbuo *AppGoodBaseUpdateOne) SetEnableProductPage(b bool) *AppGoodBaseUpdateOne {
	agbuo.mutation.SetEnableProductPage(b)
	return agbuo
}

// SetNillableEnableProductPage sets the "enable_product_page" field if the given value is not nil.
func (agbuo *AppGoodBaseUpdateOne) SetNillableEnableProductPage(b *bool) *AppGoodBaseUpdateOne {
	if b != nil {
		agbuo.SetEnableProductPage(*b)
	}
	return agbuo
}

// ClearEnableProductPage clears the value of the "enable_product_page" field.
func (agbuo *AppGoodBaseUpdateOne) ClearEnableProductPage() *AppGoodBaseUpdateOne {
	agbuo.mutation.ClearEnableProductPage()
	return agbuo
}

// SetProductPage sets the "product_page" field.
func (agbuo *AppGoodBaseUpdateOne) SetProductPage(s string) *AppGoodBaseUpdateOne {
	agbuo.mutation.SetProductPage(s)
	return agbuo
}

// SetNillableProductPage sets the "product_page" field if the given value is not nil.
func (agbuo *AppGoodBaseUpdateOne) SetNillableProductPage(s *string) *AppGoodBaseUpdateOne {
	if s != nil {
		agbuo.SetProductPage(*s)
	}
	return agbuo
}

// ClearProductPage clears the value of the "product_page" field.
func (agbuo *AppGoodBaseUpdateOne) ClearProductPage() *AppGoodBaseUpdateOne {
	agbuo.mutation.ClearProductPage()
	return agbuo
}

// SetOnline sets the "online" field.
func (agbuo *AppGoodBaseUpdateOne) SetOnline(b bool) *AppGoodBaseUpdateOne {
	agbuo.mutation.SetOnline(b)
	return agbuo
}

// SetNillableOnline sets the "online" field if the given value is not nil.
func (agbuo *AppGoodBaseUpdateOne) SetNillableOnline(b *bool) *AppGoodBaseUpdateOne {
	if b != nil {
		agbuo.SetOnline(*b)
	}
	return agbuo
}

// ClearOnline clears the value of the "online" field.
func (agbuo *AppGoodBaseUpdateOne) ClearOnline() *AppGoodBaseUpdateOne {
	agbuo.mutation.ClearOnline()
	return agbuo
}

// SetVisible sets the "visible" field.
func (agbuo *AppGoodBaseUpdateOne) SetVisible(b bool) *AppGoodBaseUpdateOne {
	agbuo.mutation.SetVisible(b)
	return agbuo
}

// SetNillableVisible sets the "visible" field if the given value is not nil.
func (agbuo *AppGoodBaseUpdateOne) SetNillableVisible(b *bool) *AppGoodBaseUpdateOne {
	if b != nil {
		agbuo.SetVisible(*b)
	}
	return agbuo
}

// ClearVisible clears the value of the "visible" field.
func (agbuo *AppGoodBaseUpdateOne) ClearVisible() *AppGoodBaseUpdateOne {
	agbuo.mutation.ClearVisible()
	return agbuo
}

// SetName sets the "name" field.
func (agbuo *AppGoodBaseUpdateOne) SetName(s string) *AppGoodBaseUpdateOne {
	agbuo.mutation.SetName(s)
	return agbuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (agbuo *AppGoodBaseUpdateOne) SetNillableName(s *string) *AppGoodBaseUpdateOne {
	if s != nil {
		agbuo.SetName(*s)
	}
	return agbuo
}

// ClearName clears the value of the "name" field.
func (agbuo *AppGoodBaseUpdateOne) ClearName() *AppGoodBaseUpdateOne {
	agbuo.mutation.ClearName()
	return agbuo
}

// SetDisplayIndex sets the "display_index" field.
func (agbuo *AppGoodBaseUpdateOne) SetDisplayIndex(i int32) *AppGoodBaseUpdateOne {
	agbuo.mutation.ResetDisplayIndex()
	agbuo.mutation.SetDisplayIndex(i)
	return agbuo
}

// SetNillableDisplayIndex sets the "display_index" field if the given value is not nil.
func (agbuo *AppGoodBaseUpdateOne) SetNillableDisplayIndex(i *int32) *AppGoodBaseUpdateOne {
	if i != nil {
		agbuo.SetDisplayIndex(*i)
	}
	return agbuo
}

// AddDisplayIndex adds i to the "display_index" field.
func (agbuo *AppGoodBaseUpdateOne) AddDisplayIndex(i int32) *AppGoodBaseUpdateOne {
	agbuo.mutation.AddDisplayIndex(i)
	return agbuo
}

// ClearDisplayIndex clears the value of the "display_index" field.
func (agbuo *AppGoodBaseUpdateOne) ClearDisplayIndex() *AppGoodBaseUpdateOne {
	agbuo.mutation.ClearDisplayIndex()
	return agbuo
}

// SetBanner sets the "banner" field.
func (agbuo *AppGoodBaseUpdateOne) SetBanner(s string) *AppGoodBaseUpdateOne {
	agbuo.mutation.SetBanner(s)
	return agbuo
}

// SetNillableBanner sets the "banner" field if the given value is not nil.
func (agbuo *AppGoodBaseUpdateOne) SetNillableBanner(s *string) *AppGoodBaseUpdateOne {
	if s != nil {
		agbuo.SetBanner(*s)
	}
	return agbuo
}

// ClearBanner clears the value of the "banner" field.
func (agbuo *AppGoodBaseUpdateOne) ClearBanner() *AppGoodBaseUpdateOne {
	agbuo.mutation.ClearBanner()
	return agbuo
}

// Mutation returns the AppGoodBaseMutation object of the builder.
func (agbuo *AppGoodBaseUpdateOne) Mutation() *AppGoodBaseMutation {
	return agbuo.mutation
}

// Where appends a list predicates to the AppGoodBaseUpdate builder.
func (agbuo *AppGoodBaseUpdateOne) Where(ps ...predicate.AppGoodBase) *AppGoodBaseUpdateOne {
	agbuo.mutation.Where(ps...)
	return agbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (agbuo *AppGoodBaseUpdateOne) Select(field string, fields ...string) *AppGoodBaseUpdateOne {
	agbuo.fields = append([]string{field}, fields...)
	return agbuo
}

// Save executes the query and returns the updated AppGoodBase entity.
func (agbuo *AppGoodBaseUpdateOne) Save(ctx context.Context) (*AppGoodBase, error) {
	return withHooks(ctx, agbuo.sqlSave, agbuo.mutation, agbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (agbuo *AppGoodBaseUpdateOne) SaveX(ctx context.Context) *AppGoodBase {
	node, err := agbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (agbuo *AppGoodBaseUpdateOne) Exec(ctx context.Context) error {
	_, err := agbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agbuo *AppGoodBaseUpdateOne) ExecX(ctx context.Context) {
	if err := agbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (agbuo *AppGoodBaseUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppGoodBaseUpdateOne {
	agbuo.modifiers = append(agbuo.modifiers, modifiers...)
	return agbuo
}

func (agbuo *AppGoodBaseUpdateOne) sqlSave(ctx context.Context) (_node *AppGoodBase, err error) {
	_spec := sqlgraph.NewUpdateSpec(appgoodbase.Table, appgoodbase.Columns, sqlgraph.NewFieldSpec(appgoodbase.FieldID, field.TypeUint32))
	id, ok := agbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AppGoodBase.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := agbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appgoodbase.FieldID)
		for _, f := range fields {
			if !appgoodbase.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != appgoodbase.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := agbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agbuo.mutation.EntID(); ok {
		_spec.SetField(appgoodbase.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := agbuo.mutation.AppID(); ok {
		_spec.SetField(appgoodbase.FieldAppID, field.TypeUUID, value)
	}
	if agbuo.mutation.AppIDCleared() {
		_spec.ClearField(appgoodbase.FieldAppID, field.TypeUUID)
	}
	if value, ok := agbuo.mutation.GoodID(); ok {
		_spec.SetField(appgoodbase.FieldGoodID, field.TypeUUID, value)
	}
	if agbuo.mutation.GoodIDCleared() {
		_spec.ClearField(appgoodbase.FieldGoodID, field.TypeUUID)
	}
	if value, ok := agbuo.mutation.Purchasable(); ok {
		_spec.SetField(appgoodbase.FieldPurchasable, field.TypeBool, value)
	}
	if agbuo.mutation.PurchasableCleared() {
		_spec.ClearField(appgoodbase.FieldPurchasable, field.TypeBool)
	}
	if value, ok := agbuo.mutation.EnableProductPage(); ok {
		_spec.SetField(appgoodbase.FieldEnableProductPage, field.TypeBool, value)
	}
	if agbuo.mutation.EnableProductPageCleared() {
		_spec.ClearField(appgoodbase.FieldEnableProductPage, field.TypeBool)
	}
	if value, ok := agbuo.mutation.ProductPage(); ok {
		_spec.SetField(appgoodbase.FieldProductPage, field.TypeString, value)
	}
	if agbuo.mutation.ProductPageCleared() {
		_spec.ClearField(appgoodbase.FieldProductPage, field.TypeString)
	}
	if value, ok := agbuo.mutation.Online(); ok {
		_spec.SetField(appgoodbase.FieldOnline, field.TypeBool, value)
	}
	if agbuo.mutation.OnlineCleared() {
		_spec.ClearField(appgoodbase.FieldOnline, field.TypeBool)
	}
	if value, ok := agbuo.mutation.Visible(); ok {
		_spec.SetField(appgoodbase.FieldVisible, field.TypeBool, value)
	}
	if agbuo.mutation.VisibleCleared() {
		_spec.ClearField(appgoodbase.FieldVisible, field.TypeBool)
	}
	if value, ok := agbuo.mutation.Name(); ok {
		_spec.SetField(appgoodbase.FieldName, field.TypeString, value)
	}
	if agbuo.mutation.NameCleared() {
		_spec.ClearField(appgoodbase.FieldName, field.TypeString)
	}
	if value, ok := agbuo.mutation.DisplayIndex(); ok {
		_spec.SetField(appgoodbase.FieldDisplayIndex, field.TypeInt32, value)
	}
	if value, ok := agbuo.mutation.AddedDisplayIndex(); ok {
		_spec.AddField(appgoodbase.FieldDisplayIndex, field.TypeInt32, value)
	}
	if agbuo.mutation.DisplayIndexCleared() {
		_spec.ClearField(appgoodbase.FieldDisplayIndex, field.TypeInt32)
	}
	if value, ok := agbuo.mutation.Banner(); ok {
		_spec.SetField(appgoodbase.FieldBanner, field.TypeString, value)
	}
	if agbuo.mutation.BannerCleared() {
		_spec.ClearField(appgoodbase.FieldBanner, field.TypeString)
	}
	_spec.AddModifiers(agbuo.modifiers...)
	_node = &AppGoodBase{config: agbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, agbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appgoodbase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	agbuo.mutation.done = true
	return _node, nil
}

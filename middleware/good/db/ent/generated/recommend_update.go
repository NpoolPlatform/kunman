// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/recommend"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// RecommendUpdate is the builder for updating Recommend entities.
type RecommendUpdate struct {
	config
	hooks     []Hook
	mutation  *RecommendMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RecommendUpdate builder.
func (ru *RecommendUpdate) Where(ps ...predicate.Recommend) *RecommendUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetEntID sets the "ent_id" field.
func (ru *RecommendUpdate) SetEntID(u uuid.UUID) *RecommendUpdate {
	ru.mutation.SetEntID(u)
	return ru
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ru *RecommendUpdate) SetNillableEntID(u *uuid.UUID) *RecommendUpdate {
	if u != nil {
		ru.SetEntID(*u)
	}
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *RecommendUpdate) SetCreatedAt(u uint32) *RecommendUpdate {
	ru.mutation.ResetCreatedAt()
	ru.mutation.SetCreatedAt(u)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *RecommendUpdate) SetNillableCreatedAt(u *uint32) *RecommendUpdate {
	if u != nil {
		ru.SetCreatedAt(*u)
	}
	return ru
}

// AddCreatedAt adds u to the "created_at" field.
func (ru *RecommendUpdate) AddCreatedAt(u int32) *RecommendUpdate {
	ru.mutation.AddCreatedAt(u)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RecommendUpdate) SetUpdatedAt(u uint32) *RecommendUpdate {
	ru.mutation.ResetUpdatedAt()
	ru.mutation.SetUpdatedAt(u)
	return ru
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ru *RecommendUpdate) AddUpdatedAt(u int32) *RecommendUpdate {
	ru.mutation.AddUpdatedAt(u)
	return ru
}

// SetDeletedAt sets the "deleted_at" field.
func (ru *RecommendUpdate) SetDeletedAt(u uint32) *RecommendUpdate {
	ru.mutation.ResetDeletedAt()
	ru.mutation.SetDeletedAt(u)
	return ru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ru *RecommendUpdate) SetNillableDeletedAt(u *uint32) *RecommendUpdate {
	if u != nil {
		ru.SetDeletedAt(*u)
	}
	return ru
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ru *RecommendUpdate) AddDeletedAt(u int32) *RecommendUpdate {
	ru.mutation.AddDeletedAt(u)
	return ru
}

// SetAppGoodID sets the "app_good_id" field.
func (ru *RecommendUpdate) SetAppGoodID(u uuid.UUID) *RecommendUpdate {
	ru.mutation.SetAppGoodID(u)
	return ru
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (ru *RecommendUpdate) SetNillableAppGoodID(u *uuid.UUID) *RecommendUpdate {
	if u != nil {
		ru.SetAppGoodID(*u)
	}
	return ru
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (ru *RecommendUpdate) ClearAppGoodID() *RecommendUpdate {
	ru.mutation.ClearAppGoodID()
	return ru
}

// SetRecommenderID sets the "recommender_id" field.
func (ru *RecommendUpdate) SetRecommenderID(u uuid.UUID) *RecommendUpdate {
	ru.mutation.SetRecommenderID(u)
	return ru
}

// SetNillableRecommenderID sets the "recommender_id" field if the given value is not nil.
func (ru *RecommendUpdate) SetNillableRecommenderID(u *uuid.UUID) *RecommendUpdate {
	if u != nil {
		ru.SetRecommenderID(*u)
	}
	return ru
}

// ClearRecommenderID clears the value of the "recommender_id" field.
func (ru *RecommendUpdate) ClearRecommenderID() *RecommendUpdate {
	ru.mutation.ClearRecommenderID()
	return ru
}

// SetMessage sets the "message" field.
func (ru *RecommendUpdate) SetMessage(s string) *RecommendUpdate {
	ru.mutation.SetMessage(s)
	return ru
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (ru *RecommendUpdate) SetNillableMessage(s *string) *RecommendUpdate {
	if s != nil {
		ru.SetMessage(*s)
	}
	return ru
}

// ClearMessage clears the value of the "message" field.
func (ru *RecommendUpdate) ClearMessage() *RecommendUpdate {
	ru.mutation.ClearMessage()
	return ru
}

// SetRecommendIndex sets the "recommend_index" field.
func (ru *RecommendUpdate) SetRecommendIndex(d decimal.Decimal) *RecommendUpdate {
	ru.mutation.SetRecommendIndex(d)
	return ru
}

// SetNillableRecommendIndex sets the "recommend_index" field if the given value is not nil.
func (ru *RecommendUpdate) SetNillableRecommendIndex(d *decimal.Decimal) *RecommendUpdate {
	if d != nil {
		ru.SetRecommendIndex(*d)
	}
	return ru
}

// ClearRecommendIndex clears the value of the "recommend_index" field.
func (ru *RecommendUpdate) ClearRecommendIndex() *RecommendUpdate {
	ru.mutation.ClearRecommendIndex()
	return ru
}

// SetHide sets the "hide" field.
func (ru *RecommendUpdate) SetHide(b bool) *RecommendUpdate {
	ru.mutation.SetHide(b)
	return ru
}

// SetNillableHide sets the "hide" field if the given value is not nil.
func (ru *RecommendUpdate) SetNillableHide(b *bool) *RecommendUpdate {
	if b != nil {
		ru.SetHide(*b)
	}
	return ru
}

// ClearHide clears the value of the "hide" field.
func (ru *RecommendUpdate) ClearHide() *RecommendUpdate {
	ru.mutation.ClearHide()
	return ru
}

// SetHideReason sets the "hide_reason" field.
func (ru *RecommendUpdate) SetHideReason(s string) *RecommendUpdate {
	ru.mutation.SetHideReason(s)
	return ru
}

// SetNillableHideReason sets the "hide_reason" field if the given value is not nil.
func (ru *RecommendUpdate) SetNillableHideReason(s *string) *RecommendUpdate {
	if s != nil {
		ru.SetHideReason(*s)
	}
	return ru
}

// ClearHideReason clears the value of the "hide_reason" field.
func (ru *RecommendUpdate) ClearHideReason() *RecommendUpdate {
	ru.mutation.ClearHideReason()
	return ru
}

// Mutation returns the RecommendMutation object of the builder.
func (ru *RecommendUpdate) Mutation() *RecommendMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RecommendUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RecommendUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RecommendUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RecommendUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RecommendUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := recommend.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ru *RecommendUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RecommendUpdate {
	ru.modifiers = append(ru.modifiers, modifiers...)
	return ru
}

func (ru *RecommendUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(recommend.Table, recommend.Columns, sqlgraph.NewFieldSpec(recommend.FieldID, field.TypeUint32))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.EntID(); ok {
		_spec.SetField(recommend.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(recommend.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ru.mutation.AddedCreatedAt(); ok {
		_spec.AddField(recommend.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(recommend.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ru.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(recommend.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ru.mutation.DeletedAt(); ok {
		_spec.SetField(recommend.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ru.mutation.AddedDeletedAt(); ok {
		_spec.AddField(recommend.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ru.mutation.AppGoodID(); ok {
		_spec.SetField(recommend.FieldAppGoodID, field.TypeUUID, value)
	}
	if ru.mutation.AppGoodIDCleared() {
		_spec.ClearField(recommend.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := ru.mutation.RecommenderID(); ok {
		_spec.SetField(recommend.FieldRecommenderID, field.TypeUUID, value)
	}
	if ru.mutation.RecommenderIDCleared() {
		_spec.ClearField(recommend.FieldRecommenderID, field.TypeUUID)
	}
	if value, ok := ru.mutation.Message(); ok {
		_spec.SetField(recommend.FieldMessage, field.TypeString, value)
	}
	if ru.mutation.MessageCleared() {
		_spec.ClearField(recommend.FieldMessage, field.TypeString)
	}
	if value, ok := ru.mutation.RecommendIndex(); ok {
		_spec.SetField(recommend.FieldRecommendIndex, field.TypeOther, value)
	}
	if ru.mutation.RecommendIndexCleared() {
		_spec.ClearField(recommend.FieldRecommendIndex, field.TypeOther)
	}
	if value, ok := ru.mutation.Hide(); ok {
		_spec.SetField(recommend.FieldHide, field.TypeBool, value)
	}
	if ru.mutation.HideCleared() {
		_spec.ClearField(recommend.FieldHide, field.TypeBool)
	}
	if value, ok := ru.mutation.HideReason(); ok {
		_spec.SetField(recommend.FieldHideReason, field.TypeString, value)
	}
	if ru.mutation.HideReasonCleared() {
		_spec.ClearField(recommend.FieldHideReason, field.TypeString)
	}
	_spec.AddModifiers(ru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recommend.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RecommendUpdateOne is the builder for updating a single Recommend entity.
type RecommendUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RecommendMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (ruo *RecommendUpdateOne) SetEntID(u uuid.UUID) *RecommendUpdateOne {
	ruo.mutation.SetEntID(u)
	return ruo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ruo *RecommendUpdateOne) SetNillableEntID(u *uuid.UUID) *RecommendUpdateOne {
	if u != nil {
		ruo.SetEntID(*u)
	}
	return ruo
}

// SetCreatedAt sets the "created_at" field.
func (ruo *RecommendUpdateOne) SetCreatedAt(u uint32) *RecommendUpdateOne {
	ruo.mutation.ResetCreatedAt()
	ruo.mutation.SetCreatedAt(u)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *RecommendUpdateOne) SetNillableCreatedAt(u *uint32) *RecommendUpdateOne {
	if u != nil {
		ruo.SetCreatedAt(*u)
	}
	return ruo
}

// AddCreatedAt adds u to the "created_at" field.
func (ruo *RecommendUpdateOne) AddCreatedAt(u int32) *RecommendUpdateOne {
	ruo.mutation.AddCreatedAt(u)
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RecommendUpdateOne) SetUpdatedAt(u uint32) *RecommendUpdateOne {
	ruo.mutation.ResetUpdatedAt()
	ruo.mutation.SetUpdatedAt(u)
	return ruo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ruo *RecommendUpdateOne) AddUpdatedAt(u int32) *RecommendUpdateOne {
	ruo.mutation.AddUpdatedAt(u)
	return ruo
}

// SetDeletedAt sets the "deleted_at" field.
func (ruo *RecommendUpdateOne) SetDeletedAt(u uint32) *RecommendUpdateOne {
	ruo.mutation.ResetDeletedAt()
	ruo.mutation.SetDeletedAt(u)
	return ruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruo *RecommendUpdateOne) SetNillableDeletedAt(u *uint32) *RecommendUpdateOne {
	if u != nil {
		ruo.SetDeletedAt(*u)
	}
	return ruo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ruo *RecommendUpdateOne) AddDeletedAt(u int32) *RecommendUpdateOne {
	ruo.mutation.AddDeletedAt(u)
	return ruo
}

// SetAppGoodID sets the "app_good_id" field.
func (ruo *RecommendUpdateOne) SetAppGoodID(u uuid.UUID) *RecommendUpdateOne {
	ruo.mutation.SetAppGoodID(u)
	return ruo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (ruo *RecommendUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *RecommendUpdateOne {
	if u != nil {
		ruo.SetAppGoodID(*u)
	}
	return ruo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (ruo *RecommendUpdateOne) ClearAppGoodID() *RecommendUpdateOne {
	ruo.mutation.ClearAppGoodID()
	return ruo
}

// SetRecommenderID sets the "recommender_id" field.
func (ruo *RecommendUpdateOne) SetRecommenderID(u uuid.UUID) *RecommendUpdateOne {
	ruo.mutation.SetRecommenderID(u)
	return ruo
}

// SetNillableRecommenderID sets the "recommender_id" field if the given value is not nil.
func (ruo *RecommendUpdateOne) SetNillableRecommenderID(u *uuid.UUID) *RecommendUpdateOne {
	if u != nil {
		ruo.SetRecommenderID(*u)
	}
	return ruo
}

// ClearRecommenderID clears the value of the "recommender_id" field.
func (ruo *RecommendUpdateOne) ClearRecommenderID() *RecommendUpdateOne {
	ruo.mutation.ClearRecommenderID()
	return ruo
}

// SetMessage sets the "message" field.
func (ruo *RecommendUpdateOne) SetMessage(s string) *RecommendUpdateOne {
	ruo.mutation.SetMessage(s)
	return ruo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (ruo *RecommendUpdateOne) SetNillableMessage(s *string) *RecommendUpdateOne {
	if s != nil {
		ruo.SetMessage(*s)
	}
	return ruo
}

// ClearMessage clears the value of the "message" field.
func (ruo *RecommendUpdateOne) ClearMessage() *RecommendUpdateOne {
	ruo.mutation.ClearMessage()
	return ruo
}

// SetRecommendIndex sets the "recommend_index" field.
func (ruo *RecommendUpdateOne) SetRecommendIndex(d decimal.Decimal) *RecommendUpdateOne {
	ruo.mutation.SetRecommendIndex(d)
	return ruo
}

// SetNillableRecommendIndex sets the "recommend_index" field if the given value is not nil.
func (ruo *RecommendUpdateOne) SetNillableRecommendIndex(d *decimal.Decimal) *RecommendUpdateOne {
	if d != nil {
		ruo.SetRecommendIndex(*d)
	}
	return ruo
}

// ClearRecommendIndex clears the value of the "recommend_index" field.
func (ruo *RecommendUpdateOne) ClearRecommendIndex() *RecommendUpdateOne {
	ruo.mutation.ClearRecommendIndex()
	return ruo
}

// SetHide sets the "hide" field.
func (ruo *RecommendUpdateOne) SetHide(b bool) *RecommendUpdateOne {
	ruo.mutation.SetHide(b)
	return ruo
}

// SetNillableHide sets the "hide" field if the given value is not nil.
func (ruo *RecommendUpdateOne) SetNillableHide(b *bool) *RecommendUpdateOne {
	if b != nil {
		ruo.SetHide(*b)
	}
	return ruo
}

// ClearHide clears the value of the "hide" field.
func (ruo *RecommendUpdateOne) ClearHide() *RecommendUpdateOne {
	ruo.mutation.ClearHide()
	return ruo
}

// SetHideReason sets the "hide_reason" field.
func (ruo *RecommendUpdateOne) SetHideReason(s string) *RecommendUpdateOne {
	ruo.mutation.SetHideReason(s)
	return ruo
}

// SetNillableHideReason sets the "hide_reason" field if the given value is not nil.
func (ruo *RecommendUpdateOne) SetNillableHideReason(s *string) *RecommendUpdateOne {
	if s != nil {
		ruo.SetHideReason(*s)
	}
	return ruo
}

// ClearHideReason clears the value of the "hide_reason" field.
func (ruo *RecommendUpdateOne) ClearHideReason() *RecommendUpdateOne {
	ruo.mutation.ClearHideReason()
	return ruo
}

// Mutation returns the RecommendMutation object of the builder.
func (ruo *RecommendUpdateOne) Mutation() *RecommendMutation {
	return ruo.mutation
}

// Where appends a list predicates to the RecommendUpdate builder.
func (ruo *RecommendUpdateOne) Where(ps ...predicate.Recommend) *RecommendUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RecommendUpdateOne) Select(field string, fields ...string) *RecommendUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Recommend entity.
func (ruo *RecommendUpdateOne) Save(ctx context.Context) (*Recommend, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RecommendUpdateOne) SaveX(ctx context.Context) *Recommend {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RecommendUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RecommendUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RecommendUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := recommend.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ruo *RecommendUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RecommendUpdateOne {
	ruo.modifiers = append(ruo.modifiers, modifiers...)
	return ruo
}

func (ruo *RecommendUpdateOne) sqlSave(ctx context.Context) (_node *Recommend, err error) {
	_spec := sqlgraph.NewUpdateSpec(recommend.Table, recommend.Columns, sqlgraph.NewFieldSpec(recommend.FieldID, field.TypeUint32))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Recommend.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recommend.FieldID)
		for _, f := range fields {
			if !recommend.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != recommend.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.EntID(); ok {
		_spec.SetField(recommend.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(recommend.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ruo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(recommend.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(recommend.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ruo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(recommend.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ruo.mutation.DeletedAt(); ok {
		_spec.SetField(recommend.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ruo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(recommend.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ruo.mutation.AppGoodID(); ok {
		_spec.SetField(recommend.FieldAppGoodID, field.TypeUUID, value)
	}
	if ruo.mutation.AppGoodIDCleared() {
		_spec.ClearField(recommend.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := ruo.mutation.RecommenderID(); ok {
		_spec.SetField(recommend.FieldRecommenderID, field.TypeUUID, value)
	}
	if ruo.mutation.RecommenderIDCleared() {
		_spec.ClearField(recommend.FieldRecommenderID, field.TypeUUID)
	}
	if value, ok := ruo.mutation.Message(); ok {
		_spec.SetField(recommend.FieldMessage, field.TypeString, value)
	}
	if ruo.mutation.MessageCleared() {
		_spec.ClearField(recommend.FieldMessage, field.TypeString)
	}
	if value, ok := ruo.mutation.RecommendIndex(); ok {
		_spec.SetField(recommend.FieldRecommendIndex, field.TypeOther, value)
	}
	if ruo.mutation.RecommendIndexCleared() {
		_spec.ClearField(recommend.FieldRecommendIndex, field.TypeOther)
	}
	if value, ok := ruo.mutation.Hide(); ok {
		_spec.SetField(recommend.FieldHide, field.TypeBool, value)
	}
	if ruo.mutation.HideCleared() {
		_spec.ClearField(recommend.FieldHide, field.TypeBool)
	}
	if value, ok := ruo.mutation.HideReason(); ok {
		_spec.SetField(recommend.FieldHideReason, field.TypeString, value)
	}
	if ruo.mutation.HideReasonCleared() {
		_spec.ClearField(recommend.FieldHideReason, field.TypeString)
	}
	_spec.AddModifiers(ruo.modifiers...)
	_node = &Recommend{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recommend.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}

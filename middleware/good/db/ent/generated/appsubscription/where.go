// Code generated by ent, DO NOT EDIT.

package appsubscription

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldEntID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldDeletedAt, v))
}

// AppGoodID applies equality check predicate on the "app_good_id" field. It's identical to AppGoodIDEQ.
func AppGoodID(v uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldAppGoodID, v))
}

// UsdPrice applies equality check predicate on the "usd_price" field. It's identical to UsdPriceEQ.
func UsdPrice(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldUsdPrice, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldProductID, v))
}

// PlanID applies equality check predicate on the "plan_id" field. It's identical to PlanIDEQ.
func PlanID(v string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldPlanID, v))
}

// TrialUnits applies equality check predicate on the "trial_units" field. It's identical to TrialUnitsEQ.
func TrialUnits(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldTrialUnits, v))
}

// TrialUsdPrice applies equality check predicate on the "trial_usd_price" field. It's identical to TrialUsdPriceEQ.
func TrialUsdPrice(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldTrialUsdPrice, v))
}

// PriceFiatID applies equality check predicate on the "price_fiat_id" field. It's identical to PriceFiatIDEQ.
func PriceFiatID(v uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldPriceFiatID, v))
}

// FiatPrice applies equality check predicate on the "fiat_price" field. It's identical to FiatPriceEQ.
func FiatPrice(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldFiatPrice, v))
}

// TrialFiatPrice applies equality check predicate on the "trial_fiat_price" field. It's identical to TrialFiatPriceEQ.
func TrialFiatPrice(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldTrialFiatPrice, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLTE(FieldEntID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLTE(FieldDeletedAt, v))
}

// AppGoodIDEQ applies the EQ predicate on the "app_good_id" field.
func AppGoodIDEQ(v uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldAppGoodID, v))
}

// AppGoodIDNEQ applies the NEQ predicate on the "app_good_id" field.
func AppGoodIDNEQ(v uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNEQ(FieldAppGoodID, v))
}

// AppGoodIDIn applies the In predicate on the "app_good_id" field.
func AppGoodIDIn(vs ...uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldIn(FieldAppGoodID, vs...))
}

// AppGoodIDNotIn applies the NotIn predicate on the "app_good_id" field.
func AppGoodIDNotIn(vs ...uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNotIn(FieldAppGoodID, vs...))
}

// AppGoodIDGT applies the GT predicate on the "app_good_id" field.
func AppGoodIDGT(v uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGT(FieldAppGoodID, v))
}

// AppGoodIDGTE applies the GTE predicate on the "app_good_id" field.
func AppGoodIDGTE(v uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGTE(FieldAppGoodID, v))
}

// AppGoodIDLT applies the LT predicate on the "app_good_id" field.
func AppGoodIDLT(v uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLT(FieldAppGoodID, v))
}

// AppGoodIDLTE applies the LTE predicate on the "app_good_id" field.
func AppGoodIDLTE(v uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLTE(FieldAppGoodID, v))
}

// AppGoodIDIsNil applies the IsNil predicate on the "app_good_id" field.
func AppGoodIDIsNil() predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldIsNull(FieldAppGoodID))
}

// AppGoodIDNotNil applies the NotNil predicate on the "app_good_id" field.
func AppGoodIDNotNil() predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNotNull(FieldAppGoodID))
}

// UsdPriceEQ applies the EQ predicate on the "usd_price" field.
func UsdPriceEQ(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldUsdPrice, v))
}

// UsdPriceNEQ applies the NEQ predicate on the "usd_price" field.
func UsdPriceNEQ(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNEQ(FieldUsdPrice, v))
}

// UsdPriceIn applies the In predicate on the "usd_price" field.
func UsdPriceIn(vs ...decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldIn(FieldUsdPrice, vs...))
}

// UsdPriceNotIn applies the NotIn predicate on the "usd_price" field.
func UsdPriceNotIn(vs ...decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNotIn(FieldUsdPrice, vs...))
}

// UsdPriceGT applies the GT predicate on the "usd_price" field.
func UsdPriceGT(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGT(FieldUsdPrice, v))
}

// UsdPriceGTE applies the GTE predicate on the "usd_price" field.
func UsdPriceGTE(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGTE(FieldUsdPrice, v))
}

// UsdPriceLT applies the LT predicate on the "usd_price" field.
func UsdPriceLT(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLT(FieldUsdPrice, v))
}

// UsdPriceLTE applies the LTE predicate on the "usd_price" field.
func UsdPriceLTE(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLTE(FieldUsdPrice, v))
}

// UsdPriceIsNil applies the IsNil predicate on the "usd_price" field.
func UsdPriceIsNil() predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldIsNull(FieldUsdPrice))
}

// UsdPriceNotNil applies the NotNil predicate on the "usd_price" field.
func UsdPriceNotNil() predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNotNull(FieldUsdPrice))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGT(FieldProductID, v))
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGTE(FieldProductID, v))
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLT(FieldProductID, v))
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLTE(FieldProductID, v))
}

// ProductIDContains applies the Contains predicate on the "product_id" field.
func ProductIDContains(v string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldContains(FieldProductID, v))
}

// ProductIDHasPrefix applies the HasPrefix predicate on the "product_id" field.
func ProductIDHasPrefix(v string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldHasPrefix(FieldProductID, v))
}

// ProductIDHasSuffix applies the HasSuffix predicate on the "product_id" field.
func ProductIDHasSuffix(v string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldHasSuffix(FieldProductID, v))
}

// ProductIDIsNil applies the IsNil predicate on the "product_id" field.
func ProductIDIsNil() predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldIsNull(FieldProductID))
}

// ProductIDNotNil applies the NotNil predicate on the "product_id" field.
func ProductIDNotNil() predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNotNull(FieldProductID))
}

// ProductIDEqualFold applies the EqualFold predicate on the "product_id" field.
func ProductIDEqualFold(v string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEqualFold(FieldProductID, v))
}

// ProductIDContainsFold applies the ContainsFold predicate on the "product_id" field.
func ProductIDContainsFold(v string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldContainsFold(FieldProductID, v))
}

// PlanIDEQ applies the EQ predicate on the "plan_id" field.
func PlanIDEQ(v string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldPlanID, v))
}

// PlanIDNEQ applies the NEQ predicate on the "plan_id" field.
func PlanIDNEQ(v string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNEQ(FieldPlanID, v))
}

// PlanIDIn applies the In predicate on the "plan_id" field.
func PlanIDIn(vs ...string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldIn(FieldPlanID, vs...))
}

// PlanIDNotIn applies the NotIn predicate on the "plan_id" field.
func PlanIDNotIn(vs ...string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNotIn(FieldPlanID, vs...))
}

// PlanIDGT applies the GT predicate on the "plan_id" field.
func PlanIDGT(v string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGT(FieldPlanID, v))
}

// PlanIDGTE applies the GTE predicate on the "plan_id" field.
func PlanIDGTE(v string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGTE(FieldPlanID, v))
}

// PlanIDLT applies the LT predicate on the "plan_id" field.
func PlanIDLT(v string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLT(FieldPlanID, v))
}

// PlanIDLTE applies the LTE predicate on the "plan_id" field.
func PlanIDLTE(v string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLTE(FieldPlanID, v))
}

// PlanIDContains applies the Contains predicate on the "plan_id" field.
func PlanIDContains(v string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldContains(FieldPlanID, v))
}

// PlanIDHasPrefix applies the HasPrefix predicate on the "plan_id" field.
func PlanIDHasPrefix(v string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldHasPrefix(FieldPlanID, v))
}

// PlanIDHasSuffix applies the HasSuffix predicate on the "plan_id" field.
func PlanIDHasSuffix(v string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldHasSuffix(FieldPlanID, v))
}

// PlanIDIsNil applies the IsNil predicate on the "plan_id" field.
func PlanIDIsNil() predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldIsNull(FieldPlanID))
}

// PlanIDNotNil applies the NotNil predicate on the "plan_id" field.
func PlanIDNotNil() predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNotNull(FieldPlanID))
}

// PlanIDEqualFold applies the EqualFold predicate on the "plan_id" field.
func PlanIDEqualFold(v string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEqualFold(FieldPlanID, v))
}

// PlanIDContainsFold applies the ContainsFold predicate on the "plan_id" field.
func PlanIDContainsFold(v string) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldContainsFold(FieldPlanID, v))
}

// TrialUnitsEQ applies the EQ predicate on the "trial_units" field.
func TrialUnitsEQ(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldTrialUnits, v))
}

// TrialUnitsNEQ applies the NEQ predicate on the "trial_units" field.
func TrialUnitsNEQ(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNEQ(FieldTrialUnits, v))
}

// TrialUnitsIn applies the In predicate on the "trial_units" field.
func TrialUnitsIn(vs ...uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldIn(FieldTrialUnits, vs...))
}

// TrialUnitsNotIn applies the NotIn predicate on the "trial_units" field.
func TrialUnitsNotIn(vs ...uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNotIn(FieldTrialUnits, vs...))
}

// TrialUnitsGT applies the GT predicate on the "trial_units" field.
func TrialUnitsGT(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGT(FieldTrialUnits, v))
}

// TrialUnitsGTE applies the GTE predicate on the "trial_units" field.
func TrialUnitsGTE(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGTE(FieldTrialUnits, v))
}

// TrialUnitsLT applies the LT predicate on the "trial_units" field.
func TrialUnitsLT(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLT(FieldTrialUnits, v))
}

// TrialUnitsLTE applies the LTE predicate on the "trial_units" field.
func TrialUnitsLTE(v uint32) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLTE(FieldTrialUnits, v))
}

// TrialUnitsIsNil applies the IsNil predicate on the "trial_units" field.
func TrialUnitsIsNil() predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldIsNull(FieldTrialUnits))
}

// TrialUnitsNotNil applies the NotNil predicate on the "trial_units" field.
func TrialUnitsNotNil() predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNotNull(FieldTrialUnits))
}

// TrialUsdPriceEQ applies the EQ predicate on the "trial_usd_price" field.
func TrialUsdPriceEQ(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldTrialUsdPrice, v))
}

// TrialUsdPriceNEQ applies the NEQ predicate on the "trial_usd_price" field.
func TrialUsdPriceNEQ(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNEQ(FieldTrialUsdPrice, v))
}

// TrialUsdPriceIn applies the In predicate on the "trial_usd_price" field.
func TrialUsdPriceIn(vs ...decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldIn(FieldTrialUsdPrice, vs...))
}

// TrialUsdPriceNotIn applies the NotIn predicate on the "trial_usd_price" field.
func TrialUsdPriceNotIn(vs ...decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNotIn(FieldTrialUsdPrice, vs...))
}

// TrialUsdPriceGT applies the GT predicate on the "trial_usd_price" field.
func TrialUsdPriceGT(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGT(FieldTrialUsdPrice, v))
}

// TrialUsdPriceGTE applies the GTE predicate on the "trial_usd_price" field.
func TrialUsdPriceGTE(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGTE(FieldTrialUsdPrice, v))
}

// TrialUsdPriceLT applies the LT predicate on the "trial_usd_price" field.
func TrialUsdPriceLT(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLT(FieldTrialUsdPrice, v))
}

// TrialUsdPriceLTE applies the LTE predicate on the "trial_usd_price" field.
func TrialUsdPriceLTE(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLTE(FieldTrialUsdPrice, v))
}

// TrialUsdPriceIsNil applies the IsNil predicate on the "trial_usd_price" field.
func TrialUsdPriceIsNil() predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldIsNull(FieldTrialUsdPrice))
}

// TrialUsdPriceNotNil applies the NotNil predicate on the "trial_usd_price" field.
func TrialUsdPriceNotNil() predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNotNull(FieldTrialUsdPrice))
}

// PriceFiatIDEQ applies the EQ predicate on the "price_fiat_id" field.
func PriceFiatIDEQ(v uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldPriceFiatID, v))
}

// PriceFiatIDNEQ applies the NEQ predicate on the "price_fiat_id" field.
func PriceFiatIDNEQ(v uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNEQ(FieldPriceFiatID, v))
}

// PriceFiatIDIn applies the In predicate on the "price_fiat_id" field.
func PriceFiatIDIn(vs ...uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldIn(FieldPriceFiatID, vs...))
}

// PriceFiatIDNotIn applies the NotIn predicate on the "price_fiat_id" field.
func PriceFiatIDNotIn(vs ...uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNotIn(FieldPriceFiatID, vs...))
}

// PriceFiatIDGT applies the GT predicate on the "price_fiat_id" field.
func PriceFiatIDGT(v uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGT(FieldPriceFiatID, v))
}

// PriceFiatIDGTE applies the GTE predicate on the "price_fiat_id" field.
func PriceFiatIDGTE(v uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGTE(FieldPriceFiatID, v))
}

// PriceFiatIDLT applies the LT predicate on the "price_fiat_id" field.
func PriceFiatIDLT(v uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLT(FieldPriceFiatID, v))
}

// PriceFiatIDLTE applies the LTE predicate on the "price_fiat_id" field.
func PriceFiatIDLTE(v uuid.UUID) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLTE(FieldPriceFiatID, v))
}

// PriceFiatIDIsNil applies the IsNil predicate on the "price_fiat_id" field.
func PriceFiatIDIsNil() predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldIsNull(FieldPriceFiatID))
}

// PriceFiatIDNotNil applies the NotNil predicate on the "price_fiat_id" field.
func PriceFiatIDNotNil() predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNotNull(FieldPriceFiatID))
}

// FiatPriceEQ applies the EQ predicate on the "fiat_price" field.
func FiatPriceEQ(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldFiatPrice, v))
}

// FiatPriceNEQ applies the NEQ predicate on the "fiat_price" field.
func FiatPriceNEQ(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNEQ(FieldFiatPrice, v))
}

// FiatPriceIn applies the In predicate on the "fiat_price" field.
func FiatPriceIn(vs ...decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldIn(FieldFiatPrice, vs...))
}

// FiatPriceNotIn applies the NotIn predicate on the "fiat_price" field.
func FiatPriceNotIn(vs ...decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNotIn(FieldFiatPrice, vs...))
}

// FiatPriceGT applies the GT predicate on the "fiat_price" field.
func FiatPriceGT(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGT(FieldFiatPrice, v))
}

// FiatPriceGTE applies the GTE predicate on the "fiat_price" field.
func FiatPriceGTE(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGTE(FieldFiatPrice, v))
}

// FiatPriceLT applies the LT predicate on the "fiat_price" field.
func FiatPriceLT(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLT(FieldFiatPrice, v))
}

// FiatPriceLTE applies the LTE predicate on the "fiat_price" field.
func FiatPriceLTE(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLTE(FieldFiatPrice, v))
}

// FiatPriceIsNil applies the IsNil predicate on the "fiat_price" field.
func FiatPriceIsNil() predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldIsNull(FieldFiatPrice))
}

// FiatPriceNotNil applies the NotNil predicate on the "fiat_price" field.
func FiatPriceNotNil() predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNotNull(FieldFiatPrice))
}

// TrialFiatPriceEQ applies the EQ predicate on the "trial_fiat_price" field.
func TrialFiatPriceEQ(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldEQ(FieldTrialFiatPrice, v))
}

// TrialFiatPriceNEQ applies the NEQ predicate on the "trial_fiat_price" field.
func TrialFiatPriceNEQ(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNEQ(FieldTrialFiatPrice, v))
}

// TrialFiatPriceIn applies the In predicate on the "trial_fiat_price" field.
func TrialFiatPriceIn(vs ...decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldIn(FieldTrialFiatPrice, vs...))
}

// TrialFiatPriceNotIn applies the NotIn predicate on the "trial_fiat_price" field.
func TrialFiatPriceNotIn(vs ...decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNotIn(FieldTrialFiatPrice, vs...))
}

// TrialFiatPriceGT applies the GT predicate on the "trial_fiat_price" field.
func TrialFiatPriceGT(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGT(FieldTrialFiatPrice, v))
}

// TrialFiatPriceGTE applies the GTE predicate on the "trial_fiat_price" field.
func TrialFiatPriceGTE(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldGTE(FieldTrialFiatPrice, v))
}

// TrialFiatPriceLT applies the LT predicate on the "trial_fiat_price" field.
func TrialFiatPriceLT(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLT(FieldTrialFiatPrice, v))
}

// TrialFiatPriceLTE applies the LTE predicate on the "trial_fiat_price" field.
func TrialFiatPriceLTE(v decimal.Decimal) predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldLTE(FieldTrialFiatPrice, v))
}

// TrialFiatPriceIsNil applies the IsNil predicate on the "trial_fiat_price" field.
func TrialFiatPriceIsNil() predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldIsNull(FieldTrialFiatPrice))
}

// TrialFiatPriceNotNil applies the NotNil predicate on the "trial_fiat_price" field.
func TrialFiatPriceNotNil() predicate.AppSubscription {
	return predicate.AppSubscription(sql.FieldNotNull(FieldTrialFiatPrice))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppSubscription) predicate.AppSubscription {
	return predicate.AppSubscription(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppSubscription) predicate.AppSubscription {
	return predicate.AppSubscription(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppSubscription) predicate.AppSubscription {
	return predicate.AppSubscription(sql.NotPredicates(p))
}

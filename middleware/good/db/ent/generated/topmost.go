// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/topmost"
	"github.com/google/uuid"
)

// TopMost is the model entity for the TopMost schema.
type TopMost struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// TopMostType holds the value of the "top_most_type" field.
	TopMostType string `json:"top_most_type,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// TargetURL holds the value of the "target_url" field.
	TargetURL string `json:"target_url,omitempty"`
	// StartAt holds the value of the "start_at" field.
	StartAt uint32 `json:"start_at,omitempty"`
	// EndAt holds the value of the "end_at" field.
	EndAt        uint32 `json:"end_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TopMost) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case topmost.FieldID, topmost.FieldCreatedAt, topmost.FieldUpdatedAt, topmost.FieldDeletedAt, topmost.FieldStartAt, topmost.FieldEndAt:
			values[i] = new(sql.NullInt64)
		case topmost.FieldTopMostType, topmost.FieldTitle, topmost.FieldMessage, topmost.FieldTargetURL:
			values[i] = new(sql.NullString)
		case topmost.FieldEntID, topmost.FieldAppID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TopMost fields.
func (tm *TopMost) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case topmost.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tm.ID = uint32(value.Int64)
		case topmost.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				tm.EntID = *value
			}
		case topmost.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tm.CreatedAt = uint32(value.Int64)
			}
		case topmost.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tm.UpdatedAt = uint32(value.Int64)
			}
		case topmost.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tm.DeletedAt = uint32(value.Int64)
			}
		case topmost.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				tm.AppID = *value
			}
		case topmost.FieldTopMostType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field top_most_type", values[i])
			} else if value.Valid {
				tm.TopMostType = value.String
			}
		case topmost.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				tm.Title = value.String
			}
		case topmost.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				tm.Message = value.String
			}
		case topmost.FieldTargetURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target_url", values[i])
			} else if value.Valid {
				tm.TargetURL = value.String
			}
		case topmost.FieldStartAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				tm.StartAt = uint32(value.Int64)
			}
		case topmost.FieldEndAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				tm.EndAt = uint32(value.Int64)
			}
		default:
			tm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TopMost.
// This includes values selected through modifiers, order, etc.
func (tm *TopMost) Value(name string) (ent.Value, error) {
	return tm.selectValues.Get(name)
}

// Update returns a builder for updating this TopMost.
// Note that you need to call TopMost.Unwrap() before calling this method if this TopMost
// was returned from a transaction, and the transaction was committed or rolled back.
func (tm *TopMost) Update() *TopMostUpdateOne {
	return NewTopMostClient(tm.config).UpdateOne(tm)
}

// Unwrap unwraps the TopMost entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tm *TopMost) Unwrap() *TopMost {
	_tx, ok := tm.config.driver.(*txDriver)
	if !ok {
		panic("generated: TopMost is not a transactional entity")
	}
	tm.config.driver = _tx.drv
	return tm
}

// String implements the fmt.Stringer.
func (tm *TopMost) String() string {
	var builder strings.Builder
	builder.WriteString("TopMost(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tm.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", tm.EntID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", tm.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", tm.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", tm.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", tm.AppID))
	builder.WriteString(", ")
	builder.WriteString("top_most_type=")
	builder.WriteString(tm.TopMostType)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(tm.Title)
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(tm.Message)
	builder.WriteString(", ")
	builder.WriteString("target_url=")
	builder.WriteString(tm.TargetURL)
	builder.WriteString(", ")
	builder.WriteString("start_at=")
	builder.WriteString(fmt.Sprintf("%v", tm.StartAt))
	builder.WriteString(", ")
	builder.WriteString("end_at=")
	builder.WriteString(fmt.Sprintf("%v", tm.EndAt))
	builder.WriteByte(')')
	return builder.String()
}

// TopMosts is a parsable slice of TopMost.
type TopMosts []*TopMost

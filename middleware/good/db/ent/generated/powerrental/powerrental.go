// Code generated by ent, DO NOT EDIT.

package powerrental

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the powerrental type in the database.
	Label = "power_rental"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldGoodID holds the string denoting the good_id field in the database.
	FieldGoodID = "good_id"
	// FieldDeviceTypeID holds the string denoting the device_type_id field in the database.
	FieldDeviceTypeID = "device_type_id"
	// FieldVendorLocationID holds the string denoting the vendor_location_id field in the database.
	FieldVendorLocationID = "vendor_location_id"
	// FieldUnitPrice holds the string denoting the unit_price field in the database.
	FieldUnitPrice = "unit_price"
	// FieldQuantityUnit holds the string denoting the quantity_unit field in the database.
	FieldQuantityUnit = "quantity_unit"
	// FieldQuantityUnitAmount holds the string denoting the quantity_unit_amount field in the database.
	FieldQuantityUnitAmount = "quantity_unit_amount"
	// FieldDeliveryAt holds the string denoting the delivery_at field in the database.
	FieldDeliveryAt = "delivery_at"
	// FieldUnitLockDeposit holds the string denoting the unit_lock_deposit field in the database.
	FieldUnitLockDeposit = "unit_lock_deposit"
	// FieldDurationDisplayType holds the string denoting the duration_display_type field in the database.
	FieldDurationDisplayType = "duration_display_type"
	// FieldStockMode holds the string denoting the stock_mode field in the database.
	FieldStockMode = "stock_mode"
	// Table holds the table name of the powerrental in the database.
	Table = "power_rentals"
)

// Columns holds all SQL columns for powerrental fields.
var Columns = []string{
	FieldID,
	FieldEntID,
	FieldGoodID,
	FieldDeviceTypeID,
	FieldVendorLocationID,
	FieldUnitPrice,
	FieldQuantityUnit,
	FieldQuantityUnitAmount,
	FieldDeliveryAt,
	FieldUnitLockDeposit,
	FieldDurationDisplayType,
	FieldStockMode,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultGoodID holds the default value on creation for the "good_id" field.
	DefaultGoodID func() uuid.UUID
	// DefaultDeviceTypeID holds the default value on creation for the "device_type_id" field.
	DefaultDeviceTypeID func() uuid.UUID
	// DefaultVendorLocationID holds the default value on creation for the "vendor_location_id" field.
	DefaultVendorLocationID func() uuid.UUID
	// DefaultUnitPrice holds the default value on creation for the "unit_price" field.
	DefaultUnitPrice decimal.Decimal
	// DefaultQuantityUnit holds the default value on creation for the "quantity_unit" field.
	DefaultQuantityUnit string
	// DefaultQuantityUnitAmount holds the default value on creation for the "quantity_unit_amount" field.
	DefaultQuantityUnitAmount decimal.Decimal
	// DefaultDeliveryAt holds the default value on creation for the "delivery_at" field.
	DefaultDeliveryAt uint32
	// DefaultUnitLockDeposit holds the default value on creation for the "unit_lock_deposit" field.
	DefaultUnitLockDeposit decimal.Decimal
	// DefaultDurationDisplayType holds the default value on creation for the "duration_display_type" field.
	DefaultDurationDisplayType string
	// DefaultStockMode holds the default value on creation for the "stock_mode" field.
	DefaultStockMode string
)

// OrderOption defines the ordering options for the PowerRental queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByGoodID orders the results by the good_id field.
func ByGoodID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodID, opts...).ToFunc()
}

// ByDeviceTypeID orders the results by the device_type_id field.
func ByDeviceTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceTypeID, opts...).ToFunc()
}

// ByVendorLocationID orders the results by the vendor_location_id field.
func ByVendorLocationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVendorLocationID, opts...).ToFunc()
}

// ByUnitPrice orders the results by the unit_price field.
func ByUnitPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitPrice, opts...).ToFunc()
}

// ByQuantityUnit orders the results by the quantity_unit field.
func ByQuantityUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantityUnit, opts...).ToFunc()
}

// ByQuantityUnitAmount orders the results by the quantity_unit_amount field.
func ByQuantityUnitAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantityUnitAmount, opts...).ToFunc()
}

// ByDeliveryAt orders the results by the delivery_at field.
func ByDeliveryAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeliveryAt, opts...).ToFunc()
}

// ByUnitLockDeposit orders the results by the unit_lock_deposit field.
func ByUnitLockDeposit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitLockDeposit, opts...).ToFunc()
}

// ByDurationDisplayType orders the results by the duration_display_type field.
func ByDurationDisplayType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDurationDisplayType, opts...).ToFunc()
}

// ByStockMode orders the results by the stock_mode field.
func ByStockMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStockMode, opts...).ToFunc()
}

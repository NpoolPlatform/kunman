// Code generated by ent, DO NOT EDIT.

package powerrental

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldEntID, v))
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldGoodID, v))
}

// DeviceTypeID applies equality check predicate on the "device_type_id" field. It's identical to DeviceTypeIDEQ.
func DeviceTypeID(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldDeviceTypeID, v))
}

// VendorLocationID applies equality check predicate on the "vendor_location_id" field. It's identical to VendorLocationIDEQ.
func VendorLocationID(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldVendorLocationID, v))
}

// UnitPrice applies equality check predicate on the "unit_price" field. It's identical to UnitPriceEQ.
func UnitPrice(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldUnitPrice, v))
}

// QuantityUnit applies equality check predicate on the "quantity_unit" field. It's identical to QuantityUnitEQ.
func QuantityUnit(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldQuantityUnit, v))
}

// QuantityUnitAmount applies equality check predicate on the "quantity_unit_amount" field. It's identical to QuantityUnitAmountEQ.
func QuantityUnitAmount(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldQuantityUnitAmount, v))
}

// DeliveryAt applies equality check predicate on the "delivery_at" field. It's identical to DeliveryAtEQ.
func DeliveryAt(v uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldDeliveryAt, v))
}

// UnitLockDeposit applies equality check predicate on the "unit_lock_deposit" field. It's identical to UnitLockDepositEQ.
func UnitLockDeposit(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldUnitLockDeposit, v))
}

// DurationDisplayType applies equality check predicate on the "duration_display_type" field. It's identical to DurationDisplayTypeEQ.
func DurationDisplayType(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldDurationDisplayType, v))
}

// StockMode applies equality check predicate on the "stock_mode" field. It's identical to StockModeEQ.
func StockMode(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldStockMode, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLTE(FieldEntID, v))
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldGoodID, v))
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNEQ(FieldGoodID, v))
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIn(FieldGoodID, vs...))
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotIn(FieldGoodID, vs...))
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGT(FieldGoodID, v))
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGTE(FieldGoodID, v))
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLT(FieldGoodID, v))
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLTE(FieldGoodID, v))
}

// GoodIDIsNil applies the IsNil predicate on the "good_id" field.
func GoodIDIsNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIsNull(FieldGoodID))
}

// GoodIDNotNil applies the NotNil predicate on the "good_id" field.
func GoodIDNotNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotNull(FieldGoodID))
}

// DeviceTypeIDEQ applies the EQ predicate on the "device_type_id" field.
func DeviceTypeIDEQ(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldDeviceTypeID, v))
}

// DeviceTypeIDNEQ applies the NEQ predicate on the "device_type_id" field.
func DeviceTypeIDNEQ(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNEQ(FieldDeviceTypeID, v))
}

// DeviceTypeIDIn applies the In predicate on the "device_type_id" field.
func DeviceTypeIDIn(vs ...uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIn(FieldDeviceTypeID, vs...))
}

// DeviceTypeIDNotIn applies the NotIn predicate on the "device_type_id" field.
func DeviceTypeIDNotIn(vs ...uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotIn(FieldDeviceTypeID, vs...))
}

// DeviceTypeIDGT applies the GT predicate on the "device_type_id" field.
func DeviceTypeIDGT(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGT(FieldDeviceTypeID, v))
}

// DeviceTypeIDGTE applies the GTE predicate on the "device_type_id" field.
func DeviceTypeIDGTE(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGTE(FieldDeviceTypeID, v))
}

// DeviceTypeIDLT applies the LT predicate on the "device_type_id" field.
func DeviceTypeIDLT(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLT(FieldDeviceTypeID, v))
}

// DeviceTypeIDLTE applies the LTE predicate on the "device_type_id" field.
func DeviceTypeIDLTE(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLTE(FieldDeviceTypeID, v))
}

// DeviceTypeIDIsNil applies the IsNil predicate on the "device_type_id" field.
func DeviceTypeIDIsNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIsNull(FieldDeviceTypeID))
}

// DeviceTypeIDNotNil applies the NotNil predicate on the "device_type_id" field.
func DeviceTypeIDNotNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotNull(FieldDeviceTypeID))
}

// VendorLocationIDEQ applies the EQ predicate on the "vendor_location_id" field.
func VendorLocationIDEQ(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldVendorLocationID, v))
}

// VendorLocationIDNEQ applies the NEQ predicate on the "vendor_location_id" field.
func VendorLocationIDNEQ(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNEQ(FieldVendorLocationID, v))
}

// VendorLocationIDIn applies the In predicate on the "vendor_location_id" field.
func VendorLocationIDIn(vs ...uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIn(FieldVendorLocationID, vs...))
}

// VendorLocationIDNotIn applies the NotIn predicate on the "vendor_location_id" field.
func VendorLocationIDNotIn(vs ...uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotIn(FieldVendorLocationID, vs...))
}

// VendorLocationIDGT applies the GT predicate on the "vendor_location_id" field.
func VendorLocationIDGT(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGT(FieldVendorLocationID, v))
}

// VendorLocationIDGTE applies the GTE predicate on the "vendor_location_id" field.
func VendorLocationIDGTE(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGTE(FieldVendorLocationID, v))
}

// VendorLocationIDLT applies the LT predicate on the "vendor_location_id" field.
func VendorLocationIDLT(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLT(FieldVendorLocationID, v))
}

// VendorLocationIDLTE applies the LTE predicate on the "vendor_location_id" field.
func VendorLocationIDLTE(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLTE(FieldVendorLocationID, v))
}

// VendorLocationIDIsNil applies the IsNil predicate on the "vendor_location_id" field.
func VendorLocationIDIsNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIsNull(FieldVendorLocationID))
}

// VendorLocationIDNotNil applies the NotNil predicate on the "vendor_location_id" field.
func VendorLocationIDNotNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotNull(FieldVendorLocationID))
}

// UnitPriceEQ applies the EQ predicate on the "unit_price" field.
func UnitPriceEQ(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldUnitPrice, v))
}

// UnitPriceNEQ applies the NEQ predicate on the "unit_price" field.
func UnitPriceNEQ(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNEQ(FieldUnitPrice, v))
}

// UnitPriceIn applies the In predicate on the "unit_price" field.
func UnitPriceIn(vs ...decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIn(FieldUnitPrice, vs...))
}

// UnitPriceNotIn applies the NotIn predicate on the "unit_price" field.
func UnitPriceNotIn(vs ...decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotIn(FieldUnitPrice, vs...))
}

// UnitPriceGT applies the GT predicate on the "unit_price" field.
func UnitPriceGT(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGT(FieldUnitPrice, v))
}

// UnitPriceGTE applies the GTE predicate on the "unit_price" field.
func UnitPriceGTE(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGTE(FieldUnitPrice, v))
}

// UnitPriceLT applies the LT predicate on the "unit_price" field.
func UnitPriceLT(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLT(FieldUnitPrice, v))
}

// UnitPriceLTE applies the LTE predicate on the "unit_price" field.
func UnitPriceLTE(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLTE(FieldUnitPrice, v))
}

// UnitPriceIsNil applies the IsNil predicate on the "unit_price" field.
func UnitPriceIsNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIsNull(FieldUnitPrice))
}

// UnitPriceNotNil applies the NotNil predicate on the "unit_price" field.
func UnitPriceNotNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotNull(FieldUnitPrice))
}

// QuantityUnitEQ applies the EQ predicate on the "quantity_unit" field.
func QuantityUnitEQ(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldQuantityUnit, v))
}

// QuantityUnitNEQ applies the NEQ predicate on the "quantity_unit" field.
func QuantityUnitNEQ(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNEQ(FieldQuantityUnit, v))
}

// QuantityUnitIn applies the In predicate on the "quantity_unit" field.
func QuantityUnitIn(vs ...string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIn(FieldQuantityUnit, vs...))
}

// QuantityUnitNotIn applies the NotIn predicate on the "quantity_unit" field.
func QuantityUnitNotIn(vs ...string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotIn(FieldQuantityUnit, vs...))
}

// QuantityUnitGT applies the GT predicate on the "quantity_unit" field.
func QuantityUnitGT(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGT(FieldQuantityUnit, v))
}

// QuantityUnitGTE applies the GTE predicate on the "quantity_unit" field.
func QuantityUnitGTE(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGTE(FieldQuantityUnit, v))
}

// QuantityUnitLT applies the LT predicate on the "quantity_unit" field.
func QuantityUnitLT(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLT(FieldQuantityUnit, v))
}

// QuantityUnitLTE applies the LTE predicate on the "quantity_unit" field.
func QuantityUnitLTE(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLTE(FieldQuantityUnit, v))
}

// QuantityUnitContains applies the Contains predicate on the "quantity_unit" field.
func QuantityUnitContains(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldContains(FieldQuantityUnit, v))
}

// QuantityUnitHasPrefix applies the HasPrefix predicate on the "quantity_unit" field.
func QuantityUnitHasPrefix(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldHasPrefix(FieldQuantityUnit, v))
}

// QuantityUnitHasSuffix applies the HasSuffix predicate on the "quantity_unit" field.
func QuantityUnitHasSuffix(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldHasSuffix(FieldQuantityUnit, v))
}

// QuantityUnitIsNil applies the IsNil predicate on the "quantity_unit" field.
func QuantityUnitIsNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIsNull(FieldQuantityUnit))
}

// QuantityUnitNotNil applies the NotNil predicate on the "quantity_unit" field.
func QuantityUnitNotNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotNull(FieldQuantityUnit))
}

// QuantityUnitEqualFold applies the EqualFold predicate on the "quantity_unit" field.
func QuantityUnitEqualFold(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEqualFold(FieldQuantityUnit, v))
}

// QuantityUnitContainsFold applies the ContainsFold predicate on the "quantity_unit" field.
func QuantityUnitContainsFold(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldContainsFold(FieldQuantityUnit, v))
}

// QuantityUnitAmountEQ applies the EQ predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountEQ(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldQuantityUnitAmount, v))
}

// QuantityUnitAmountNEQ applies the NEQ predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountNEQ(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNEQ(FieldQuantityUnitAmount, v))
}

// QuantityUnitAmountIn applies the In predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountIn(vs ...decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIn(FieldQuantityUnitAmount, vs...))
}

// QuantityUnitAmountNotIn applies the NotIn predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountNotIn(vs ...decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotIn(FieldQuantityUnitAmount, vs...))
}

// QuantityUnitAmountGT applies the GT predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountGT(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGT(FieldQuantityUnitAmount, v))
}

// QuantityUnitAmountGTE applies the GTE predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountGTE(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGTE(FieldQuantityUnitAmount, v))
}

// QuantityUnitAmountLT applies the LT predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountLT(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLT(FieldQuantityUnitAmount, v))
}

// QuantityUnitAmountLTE applies the LTE predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountLTE(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLTE(FieldQuantityUnitAmount, v))
}

// QuantityUnitAmountIsNil applies the IsNil predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountIsNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIsNull(FieldQuantityUnitAmount))
}

// QuantityUnitAmountNotNil applies the NotNil predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountNotNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotNull(FieldQuantityUnitAmount))
}

// DeliveryAtEQ applies the EQ predicate on the "delivery_at" field.
func DeliveryAtEQ(v uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldDeliveryAt, v))
}

// DeliveryAtNEQ applies the NEQ predicate on the "delivery_at" field.
func DeliveryAtNEQ(v uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNEQ(FieldDeliveryAt, v))
}

// DeliveryAtIn applies the In predicate on the "delivery_at" field.
func DeliveryAtIn(vs ...uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIn(FieldDeliveryAt, vs...))
}

// DeliveryAtNotIn applies the NotIn predicate on the "delivery_at" field.
func DeliveryAtNotIn(vs ...uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotIn(FieldDeliveryAt, vs...))
}

// DeliveryAtGT applies the GT predicate on the "delivery_at" field.
func DeliveryAtGT(v uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGT(FieldDeliveryAt, v))
}

// DeliveryAtGTE applies the GTE predicate on the "delivery_at" field.
func DeliveryAtGTE(v uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGTE(FieldDeliveryAt, v))
}

// DeliveryAtLT applies the LT predicate on the "delivery_at" field.
func DeliveryAtLT(v uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLT(FieldDeliveryAt, v))
}

// DeliveryAtLTE applies the LTE predicate on the "delivery_at" field.
func DeliveryAtLTE(v uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLTE(FieldDeliveryAt, v))
}

// DeliveryAtIsNil applies the IsNil predicate on the "delivery_at" field.
func DeliveryAtIsNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIsNull(FieldDeliveryAt))
}

// DeliveryAtNotNil applies the NotNil predicate on the "delivery_at" field.
func DeliveryAtNotNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotNull(FieldDeliveryAt))
}

// UnitLockDepositEQ applies the EQ predicate on the "unit_lock_deposit" field.
func UnitLockDepositEQ(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldUnitLockDeposit, v))
}

// UnitLockDepositNEQ applies the NEQ predicate on the "unit_lock_deposit" field.
func UnitLockDepositNEQ(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNEQ(FieldUnitLockDeposit, v))
}

// UnitLockDepositIn applies the In predicate on the "unit_lock_deposit" field.
func UnitLockDepositIn(vs ...decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIn(FieldUnitLockDeposit, vs...))
}

// UnitLockDepositNotIn applies the NotIn predicate on the "unit_lock_deposit" field.
func UnitLockDepositNotIn(vs ...decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotIn(FieldUnitLockDeposit, vs...))
}

// UnitLockDepositGT applies the GT predicate on the "unit_lock_deposit" field.
func UnitLockDepositGT(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGT(FieldUnitLockDeposit, v))
}

// UnitLockDepositGTE applies the GTE predicate on the "unit_lock_deposit" field.
func UnitLockDepositGTE(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGTE(FieldUnitLockDeposit, v))
}

// UnitLockDepositLT applies the LT predicate on the "unit_lock_deposit" field.
func UnitLockDepositLT(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLT(FieldUnitLockDeposit, v))
}

// UnitLockDepositLTE applies the LTE predicate on the "unit_lock_deposit" field.
func UnitLockDepositLTE(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLTE(FieldUnitLockDeposit, v))
}

// UnitLockDepositIsNil applies the IsNil predicate on the "unit_lock_deposit" field.
func UnitLockDepositIsNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIsNull(FieldUnitLockDeposit))
}

// UnitLockDepositNotNil applies the NotNil predicate on the "unit_lock_deposit" field.
func UnitLockDepositNotNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotNull(FieldUnitLockDeposit))
}

// DurationDisplayTypeEQ applies the EQ predicate on the "duration_display_type" field.
func DurationDisplayTypeEQ(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldDurationDisplayType, v))
}

// DurationDisplayTypeNEQ applies the NEQ predicate on the "duration_display_type" field.
func DurationDisplayTypeNEQ(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNEQ(FieldDurationDisplayType, v))
}

// DurationDisplayTypeIn applies the In predicate on the "duration_display_type" field.
func DurationDisplayTypeIn(vs ...string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIn(FieldDurationDisplayType, vs...))
}

// DurationDisplayTypeNotIn applies the NotIn predicate on the "duration_display_type" field.
func DurationDisplayTypeNotIn(vs ...string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotIn(FieldDurationDisplayType, vs...))
}

// DurationDisplayTypeGT applies the GT predicate on the "duration_display_type" field.
func DurationDisplayTypeGT(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGT(FieldDurationDisplayType, v))
}

// DurationDisplayTypeGTE applies the GTE predicate on the "duration_display_type" field.
func DurationDisplayTypeGTE(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGTE(FieldDurationDisplayType, v))
}

// DurationDisplayTypeLT applies the LT predicate on the "duration_display_type" field.
func DurationDisplayTypeLT(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLT(FieldDurationDisplayType, v))
}

// DurationDisplayTypeLTE applies the LTE predicate on the "duration_display_type" field.
func DurationDisplayTypeLTE(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLTE(FieldDurationDisplayType, v))
}

// DurationDisplayTypeContains applies the Contains predicate on the "duration_display_type" field.
func DurationDisplayTypeContains(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldContains(FieldDurationDisplayType, v))
}

// DurationDisplayTypeHasPrefix applies the HasPrefix predicate on the "duration_display_type" field.
func DurationDisplayTypeHasPrefix(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldHasPrefix(FieldDurationDisplayType, v))
}

// DurationDisplayTypeHasSuffix applies the HasSuffix predicate on the "duration_display_type" field.
func DurationDisplayTypeHasSuffix(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldHasSuffix(FieldDurationDisplayType, v))
}

// DurationDisplayTypeIsNil applies the IsNil predicate on the "duration_display_type" field.
func DurationDisplayTypeIsNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIsNull(FieldDurationDisplayType))
}

// DurationDisplayTypeNotNil applies the NotNil predicate on the "duration_display_type" field.
func DurationDisplayTypeNotNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotNull(FieldDurationDisplayType))
}

// DurationDisplayTypeEqualFold applies the EqualFold predicate on the "duration_display_type" field.
func DurationDisplayTypeEqualFold(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEqualFold(FieldDurationDisplayType, v))
}

// DurationDisplayTypeContainsFold applies the ContainsFold predicate on the "duration_display_type" field.
func DurationDisplayTypeContainsFold(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldContainsFold(FieldDurationDisplayType, v))
}

// StockModeEQ applies the EQ predicate on the "stock_mode" field.
func StockModeEQ(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldStockMode, v))
}

// StockModeNEQ applies the NEQ predicate on the "stock_mode" field.
func StockModeNEQ(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNEQ(FieldStockMode, v))
}

// StockModeIn applies the In predicate on the "stock_mode" field.
func StockModeIn(vs ...string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIn(FieldStockMode, vs...))
}

// StockModeNotIn applies the NotIn predicate on the "stock_mode" field.
func StockModeNotIn(vs ...string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotIn(FieldStockMode, vs...))
}

// StockModeGT applies the GT predicate on the "stock_mode" field.
func StockModeGT(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGT(FieldStockMode, v))
}

// StockModeGTE applies the GTE predicate on the "stock_mode" field.
func StockModeGTE(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGTE(FieldStockMode, v))
}

// StockModeLT applies the LT predicate on the "stock_mode" field.
func StockModeLT(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLT(FieldStockMode, v))
}

// StockModeLTE applies the LTE predicate on the "stock_mode" field.
func StockModeLTE(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLTE(FieldStockMode, v))
}

// StockModeContains applies the Contains predicate on the "stock_mode" field.
func StockModeContains(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldContains(FieldStockMode, v))
}

// StockModeHasPrefix applies the HasPrefix predicate on the "stock_mode" field.
func StockModeHasPrefix(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldHasPrefix(FieldStockMode, v))
}

// StockModeHasSuffix applies the HasSuffix predicate on the "stock_mode" field.
func StockModeHasSuffix(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldHasSuffix(FieldStockMode, v))
}

// StockModeIsNil applies the IsNil predicate on the "stock_mode" field.
func StockModeIsNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIsNull(FieldStockMode))
}

// StockModeNotNil applies the NotNil predicate on the "stock_mode" field.
func StockModeNotNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotNull(FieldStockMode))
}

// StockModeEqualFold applies the EqualFold predicate on the "stock_mode" field.
func StockModeEqualFold(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEqualFold(FieldStockMode, v))
}

// StockModeContainsFold applies the ContainsFold predicate on the "stock_mode" field.
func StockModeContainsFold(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldContainsFold(FieldStockMode, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PowerRental) predicate.PowerRental {
	return predicate.PowerRental(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PowerRental) predicate.PowerRental {
	return predicate.PowerRental(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PowerRental) predicate.PowerRental {
	return predicate.PowerRental(sql.NotPredicates(p))
}

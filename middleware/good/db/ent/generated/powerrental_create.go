// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/powerrental"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// PowerRentalCreate is the builder for creating a PowerRental entity.
type PowerRentalCreate struct {
	config
	mutation *PowerRentalMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (prc *PowerRentalCreate) SetEntID(u uuid.UUID) *PowerRentalCreate {
	prc.mutation.SetEntID(u)
	return prc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (prc *PowerRentalCreate) SetNillableEntID(u *uuid.UUID) *PowerRentalCreate {
	if u != nil {
		prc.SetEntID(*u)
	}
	return prc
}

// SetCreatedAt sets the "created_at" field.
func (prc *PowerRentalCreate) SetCreatedAt(u uint32) *PowerRentalCreate {
	prc.mutation.SetCreatedAt(u)
	return prc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (prc *PowerRentalCreate) SetNillableCreatedAt(u *uint32) *PowerRentalCreate {
	if u != nil {
		prc.SetCreatedAt(*u)
	}
	return prc
}

// SetUpdatedAt sets the "updated_at" field.
func (prc *PowerRentalCreate) SetUpdatedAt(u uint32) *PowerRentalCreate {
	prc.mutation.SetUpdatedAt(u)
	return prc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (prc *PowerRentalCreate) SetNillableUpdatedAt(u *uint32) *PowerRentalCreate {
	if u != nil {
		prc.SetUpdatedAt(*u)
	}
	return prc
}

// SetDeletedAt sets the "deleted_at" field.
func (prc *PowerRentalCreate) SetDeletedAt(u uint32) *PowerRentalCreate {
	prc.mutation.SetDeletedAt(u)
	return prc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (prc *PowerRentalCreate) SetNillableDeletedAt(u *uint32) *PowerRentalCreate {
	if u != nil {
		prc.SetDeletedAt(*u)
	}
	return prc
}

// SetGoodID sets the "good_id" field.
func (prc *PowerRentalCreate) SetGoodID(u uuid.UUID) *PowerRentalCreate {
	prc.mutation.SetGoodID(u)
	return prc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (prc *PowerRentalCreate) SetNillableGoodID(u *uuid.UUID) *PowerRentalCreate {
	if u != nil {
		prc.SetGoodID(*u)
	}
	return prc
}

// SetDeviceTypeID sets the "device_type_id" field.
func (prc *PowerRentalCreate) SetDeviceTypeID(u uuid.UUID) *PowerRentalCreate {
	prc.mutation.SetDeviceTypeID(u)
	return prc
}

// SetNillableDeviceTypeID sets the "device_type_id" field if the given value is not nil.
func (prc *PowerRentalCreate) SetNillableDeviceTypeID(u *uuid.UUID) *PowerRentalCreate {
	if u != nil {
		prc.SetDeviceTypeID(*u)
	}
	return prc
}

// SetVendorLocationID sets the "vendor_location_id" field.
func (prc *PowerRentalCreate) SetVendorLocationID(u uuid.UUID) *PowerRentalCreate {
	prc.mutation.SetVendorLocationID(u)
	return prc
}

// SetNillableVendorLocationID sets the "vendor_location_id" field if the given value is not nil.
func (prc *PowerRentalCreate) SetNillableVendorLocationID(u *uuid.UUID) *PowerRentalCreate {
	if u != nil {
		prc.SetVendorLocationID(*u)
	}
	return prc
}

// SetUnitPrice sets the "unit_price" field.
func (prc *PowerRentalCreate) SetUnitPrice(d decimal.Decimal) *PowerRentalCreate {
	prc.mutation.SetUnitPrice(d)
	return prc
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (prc *PowerRentalCreate) SetNillableUnitPrice(d *decimal.Decimal) *PowerRentalCreate {
	if d != nil {
		prc.SetUnitPrice(*d)
	}
	return prc
}

// SetQuantityUnit sets the "quantity_unit" field.
func (prc *PowerRentalCreate) SetQuantityUnit(s string) *PowerRentalCreate {
	prc.mutation.SetQuantityUnit(s)
	return prc
}

// SetNillableQuantityUnit sets the "quantity_unit" field if the given value is not nil.
func (prc *PowerRentalCreate) SetNillableQuantityUnit(s *string) *PowerRentalCreate {
	if s != nil {
		prc.SetQuantityUnit(*s)
	}
	return prc
}

// SetQuantityUnitAmount sets the "quantity_unit_amount" field.
func (prc *PowerRentalCreate) SetQuantityUnitAmount(d decimal.Decimal) *PowerRentalCreate {
	prc.mutation.SetQuantityUnitAmount(d)
	return prc
}

// SetNillableQuantityUnitAmount sets the "quantity_unit_amount" field if the given value is not nil.
func (prc *PowerRentalCreate) SetNillableQuantityUnitAmount(d *decimal.Decimal) *PowerRentalCreate {
	if d != nil {
		prc.SetQuantityUnitAmount(*d)
	}
	return prc
}

// SetDeliveryAt sets the "delivery_at" field.
func (prc *PowerRentalCreate) SetDeliveryAt(u uint32) *PowerRentalCreate {
	prc.mutation.SetDeliveryAt(u)
	return prc
}

// SetNillableDeliveryAt sets the "delivery_at" field if the given value is not nil.
func (prc *PowerRentalCreate) SetNillableDeliveryAt(u *uint32) *PowerRentalCreate {
	if u != nil {
		prc.SetDeliveryAt(*u)
	}
	return prc
}

// SetUnitLockDeposit sets the "unit_lock_deposit" field.
func (prc *PowerRentalCreate) SetUnitLockDeposit(d decimal.Decimal) *PowerRentalCreate {
	prc.mutation.SetUnitLockDeposit(d)
	return prc
}

// SetNillableUnitLockDeposit sets the "unit_lock_deposit" field if the given value is not nil.
func (prc *PowerRentalCreate) SetNillableUnitLockDeposit(d *decimal.Decimal) *PowerRentalCreate {
	if d != nil {
		prc.SetUnitLockDeposit(*d)
	}
	return prc
}

// SetDurationDisplayType sets the "duration_display_type" field.
func (prc *PowerRentalCreate) SetDurationDisplayType(s string) *PowerRentalCreate {
	prc.mutation.SetDurationDisplayType(s)
	return prc
}

// SetNillableDurationDisplayType sets the "duration_display_type" field if the given value is not nil.
func (prc *PowerRentalCreate) SetNillableDurationDisplayType(s *string) *PowerRentalCreate {
	if s != nil {
		prc.SetDurationDisplayType(*s)
	}
	return prc
}

// SetStockMode sets the "stock_mode" field.
func (prc *PowerRentalCreate) SetStockMode(s string) *PowerRentalCreate {
	prc.mutation.SetStockMode(s)
	return prc
}

// SetNillableStockMode sets the "stock_mode" field if the given value is not nil.
func (prc *PowerRentalCreate) SetNillableStockMode(s *string) *PowerRentalCreate {
	if s != nil {
		prc.SetStockMode(*s)
	}
	return prc
}

// SetID sets the "id" field.
func (prc *PowerRentalCreate) SetID(u uint32) *PowerRentalCreate {
	prc.mutation.SetID(u)
	return prc
}

// Mutation returns the PowerRentalMutation object of the builder.
func (prc *PowerRentalCreate) Mutation() *PowerRentalMutation {
	return prc.mutation
}

// Save creates the PowerRental in the database.
func (prc *PowerRentalCreate) Save(ctx context.Context) (*PowerRental, error) {
	prc.defaults()
	return withHooks(ctx, prc.sqlSave, prc.mutation, prc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prc *PowerRentalCreate) SaveX(ctx context.Context) *PowerRental {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *PowerRentalCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *PowerRentalCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prc *PowerRentalCreate) defaults() {
	if _, ok := prc.mutation.EntID(); !ok {
		v := powerrental.DefaultEntID()
		prc.mutation.SetEntID(v)
	}
	if _, ok := prc.mutation.CreatedAt(); !ok {
		v := powerrental.DefaultCreatedAt()
		prc.mutation.SetCreatedAt(v)
	}
	if _, ok := prc.mutation.UpdatedAt(); !ok {
		v := powerrental.DefaultUpdatedAt()
		prc.mutation.SetUpdatedAt(v)
	}
	if _, ok := prc.mutation.DeletedAt(); !ok {
		v := powerrental.DefaultDeletedAt()
		prc.mutation.SetDeletedAt(v)
	}
	if _, ok := prc.mutation.GoodID(); !ok {
		v := powerrental.DefaultGoodID()
		prc.mutation.SetGoodID(v)
	}
	if _, ok := prc.mutation.DeviceTypeID(); !ok {
		v := powerrental.DefaultDeviceTypeID()
		prc.mutation.SetDeviceTypeID(v)
	}
	if _, ok := prc.mutation.VendorLocationID(); !ok {
		v := powerrental.DefaultVendorLocationID()
		prc.mutation.SetVendorLocationID(v)
	}
	if _, ok := prc.mutation.UnitPrice(); !ok {
		v := powerrental.DefaultUnitPrice
		prc.mutation.SetUnitPrice(v)
	}
	if _, ok := prc.mutation.QuantityUnit(); !ok {
		v := powerrental.DefaultQuantityUnit
		prc.mutation.SetQuantityUnit(v)
	}
	if _, ok := prc.mutation.QuantityUnitAmount(); !ok {
		v := powerrental.DefaultQuantityUnitAmount
		prc.mutation.SetQuantityUnitAmount(v)
	}
	if _, ok := prc.mutation.DeliveryAt(); !ok {
		v := powerrental.DefaultDeliveryAt
		prc.mutation.SetDeliveryAt(v)
	}
	if _, ok := prc.mutation.UnitLockDeposit(); !ok {
		v := powerrental.DefaultUnitLockDeposit
		prc.mutation.SetUnitLockDeposit(v)
	}
	if _, ok := prc.mutation.DurationDisplayType(); !ok {
		v := powerrental.DefaultDurationDisplayType
		prc.mutation.SetDurationDisplayType(v)
	}
	if _, ok := prc.mutation.StockMode(); !ok {
		v := powerrental.DefaultStockMode
		prc.mutation.SetStockMode(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prc *PowerRentalCreate) check() error {
	if _, ok := prc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "PowerRental.ent_id"`)}
	}
	if _, ok := prc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "PowerRental.created_at"`)}
	}
	if _, ok := prc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "PowerRental.updated_at"`)}
	}
	if _, ok := prc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "PowerRental.deleted_at"`)}
	}
	return nil
}

func (prc *PowerRentalCreate) sqlSave(ctx context.Context) (*PowerRental, error) {
	if err := prc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	prc.mutation.id = &_node.ID
	prc.mutation.done = true
	return _node, nil
}

func (prc *PowerRentalCreate) createSpec() (*PowerRental, *sqlgraph.CreateSpec) {
	var (
		_node = &PowerRental{config: prc.config}
		_spec = sqlgraph.NewCreateSpec(powerrental.Table, sqlgraph.NewFieldSpec(powerrental.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = prc.conflict
	if id, ok := prc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := prc.mutation.EntID(); ok {
		_spec.SetField(powerrental.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := prc.mutation.CreatedAt(); ok {
		_spec.SetField(powerrental.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := prc.mutation.UpdatedAt(); ok {
		_spec.SetField(powerrental.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := prc.mutation.DeletedAt(); ok {
		_spec.SetField(powerrental.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := prc.mutation.GoodID(); ok {
		_spec.SetField(powerrental.FieldGoodID, field.TypeUUID, value)
		_node.GoodID = value
	}
	if value, ok := prc.mutation.DeviceTypeID(); ok {
		_spec.SetField(powerrental.FieldDeviceTypeID, field.TypeUUID, value)
		_node.DeviceTypeID = value
	}
	if value, ok := prc.mutation.VendorLocationID(); ok {
		_spec.SetField(powerrental.FieldVendorLocationID, field.TypeUUID, value)
		_node.VendorLocationID = value
	}
	if value, ok := prc.mutation.UnitPrice(); ok {
		_spec.SetField(powerrental.FieldUnitPrice, field.TypeOther, value)
		_node.UnitPrice = value
	}
	if value, ok := prc.mutation.QuantityUnit(); ok {
		_spec.SetField(powerrental.FieldQuantityUnit, field.TypeString, value)
		_node.QuantityUnit = value
	}
	if value, ok := prc.mutation.QuantityUnitAmount(); ok {
		_spec.SetField(powerrental.FieldQuantityUnitAmount, field.TypeOther, value)
		_node.QuantityUnitAmount = value
	}
	if value, ok := prc.mutation.DeliveryAt(); ok {
		_spec.SetField(powerrental.FieldDeliveryAt, field.TypeUint32, value)
		_node.DeliveryAt = value
	}
	if value, ok := prc.mutation.UnitLockDeposit(); ok {
		_spec.SetField(powerrental.FieldUnitLockDeposit, field.TypeOther, value)
		_node.UnitLockDeposit = value
	}
	if value, ok := prc.mutation.DurationDisplayType(); ok {
		_spec.SetField(powerrental.FieldDurationDisplayType, field.TypeString, value)
		_node.DurationDisplayType = value
	}
	if value, ok := prc.mutation.StockMode(); ok {
		_spec.SetField(powerrental.FieldStockMode, field.TypeString, value)
		_node.StockMode = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PowerRental.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PowerRentalUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (prc *PowerRentalCreate) OnConflict(opts ...sql.ConflictOption) *PowerRentalUpsertOne {
	prc.conflict = opts
	return &PowerRentalUpsertOne{
		create: prc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PowerRental.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (prc *PowerRentalCreate) OnConflictColumns(columns ...string) *PowerRentalUpsertOne {
	prc.conflict = append(prc.conflict, sql.ConflictColumns(columns...))
	return &PowerRentalUpsertOne{
		create: prc,
	}
}

type (
	// PowerRentalUpsertOne is the builder for "upsert"-ing
	//  one PowerRental node.
	PowerRentalUpsertOne struct {
		create *PowerRentalCreate
	}

	// PowerRentalUpsert is the "OnConflict" setter.
	PowerRentalUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *PowerRentalUpsert) SetEntID(v uuid.UUID) *PowerRentalUpsert {
	u.Set(powerrental.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PowerRentalUpsert) UpdateEntID() *PowerRentalUpsert {
	u.SetExcluded(powerrental.FieldEntID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PowerRentalUpsert) SetCreatedAt(v uint32) *PowerRentalUpsert {
	u.Set(powerrental.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PowerRentalUpsert) UpdateCreatedAt() *PowerRentalUpsert {
	u.SetExcluded(powerrental.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PowerRentalUpsert) AddCreatedAt(v uint32) *PowerRentalUpsert {
	u.Add(powerrental.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PowerRentalUpsert) SetUpdatedAt(v uint32) *PowerRentalUpsert {
	u.Set(powerrental.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PowerRentalUpsert) UpdateUpdatedAt() *PowerRentalUpsert {
	u.SetExcluded(powerrental.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PowerRentalUpsert) AddUpdatedAt(v uint32) *PowerRentalUpsert {
	u.Add(powerrental.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PowerRentalUpsert) SetDeletedAt(v uint32) *PowerRentalUpsert {
	u.Set(powerrental.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PowerRentalUpsert) UpdateDeletedAt() *PowerRentalUpsert {
	u.SetExcluded(powerrental.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PowerRentalUpsert) AddDeletedAt(v uint32) *PowerRentalUpsert {
	u.Add(powerrental.FieldDeletedAt, v)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *PowerRentalUpsert) SetGoodID(v uuid.UUID) *PowerRentalUpsert {
	u.Set(powerrental.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *PowerRentalUpsert) UpdateGoodID() *PowerRentalUpsert {
	u.SetExcluded(powerrental.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *PowerRentalUpsert) ClearGoodID() *PowerRentalUpsert {
	u.SetNull(powerrental.FieldGoodID)
	return u
}

// SetDeviceTypeID sets the "device_type_id" field.
func (u *PowerRentalUpsert) SetDeviceTypeID(v uuid.UUID) *PowerRentalUpsert {
	u.Set(powerrental.FieldDeviceTypeID, v)
	return u
}

// UpdateDeviceTypeID sets the "device_type_id" field to the value that was provided on create.
func (u *PowerRentalUpsert) UpdateDeviceTypeID() *PowerRentalUpsert {
	u.SetExcluded(powerrental.FieldDeviceTypeID)
	return u
}

// ClearDeviceTypeID clears the value of the "device_type_id" field.
func (u *PowerRentalUpsert) ClearDeviceTypeID() *PowerRentalUpsert {
	u.SetNull(powerrental.FieldDeviceTypeID)
	return u
}

// SetVendorLocationID sets the "vendor_location_id" field.
func (u *PowerRentalUpsert) SetVendorLocationID(v uuid.UUID) *PowerRentalUpsert {
	u.Set(powerrental.FieldVendorLocationID, v)
	return u
}

// UpdateVendorLocationID sets the "vendor_location_id" field to the value that was provided on create.
func (u *PowerRentalUpsert) UpdateVendorLocationID() *PowerRentalUpsert {
	u.SetExcluded(powerrental.FieldVendorLocationID)
	return u
}

// ClearVendorLocationID clears the value of the "vendor_location_id" field.
func (u *PowerRentalUpsert) ClearVendorLocationID() *PowerRentalUpsert {
	u.SetNull(powerrental.FieldVendorLocationID)
	return u
}

// SetUnitPrice sets the "unit_price" field.
func (u *PowerRentalUpsert) SetUnitPrice(v decimal.Decimal) *PowerRentalUpsert {
	u.Set(powerrental.FieldUnitPrice, v)
	return u
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *PowerRentalUpsert) UpdateUnitPrice() *PowerRentalUpsert {
	u.SetExcluded(powerrental.FieldUnitPrice)
	return u
}

// ClearUnitPrice clears the value of the "unit_price" field.
func (u *PowerRentalUpsert) ClearUnitPrice() *PowerRentalUpsert {
	u.SetNull(powerrental.FieldUnitPrice)
	return u
}

// SetQuantityUnit sets the "quantity_unit" field.
func (u *PowerRentalUpsert) SetQuantityUnit(v string) *PowerRentalUpsert {
	u.Set(powerrental.FieldQuantityUnit, v)
	return u
}

// UpdateQuantityUnit sets the "quantity_unit" field to the value that was provided on create.
func (u *PowerRentalUpsert) UpdateQuantityUnit() *PowerRentalUpsert {
	u.SetExcluded(powerrental.FieldQuantityUnit)
	return u
}

// ClearQuantityUnit clears the value of the "quantity_unit" field.
func (u *PowerRentalUpsert) ClearQuantityUnit() *PowerRentalUpsert {
	u.SetNull(powerrental.FieldQuantityUnit)
	return u
}

// SetQuantityUnitAmount sets the "quantity_unit_amount" field.
func (u *PowerRentalUpsert) SetQuantityUnitAmount(v decimal.Decimal) *PowerRentalUpsert {
	u.Set(powerrental.FieldQuantityUnitAmount, v)
	return u
}

// UpdateQuantityUnitAmount sets the "quantity_unit_amount" field to the value that was provided on create.
func (u *PowerRentalUpsert) UpdateQuantityUnitAmount() *PowerRentalUpsert {
	u.SetExcluded(powerrental.FieldQuantityUnitAmount)
	return u
}

// ClearQuantityUnitAmount clears the value of the "quantity_unit_amount" field.
func (u *PowerRentalUpsert) ClearQuantityUnitAmount() *PowerRentalUpsert {
	u.SetNull(powerrental.FieldQuantityUnitAmount)
	return u
}

// SetDeliveryAt sets the "delivery_at" field.
func (u *PowerRentalUpsert) SetDeliveryAt(v uint32) *PowerRentalUpsert {
	u.Set(powerrental.FieldDeliveryAt, v)
	return u
}

// UpdateDeliveryAt sets the "delivery_at" field to the value that was provided on create.
func (u *PowerRentalUpsert) UpdateDeliveryAt() *PowerRentalUpsert {
	u.SetExcluded(powerrental.FieldDeliveryAt)
	return u
}

// AddDeliveryAt adds v to the "delivery_at" field.
func (u *PowerRentalUpsert) AddDeliveryAt(v uint32) *PowerRentalUpsert {
	u.Add(powerrental.FieldDeliveryAt, v)
	return u
}

// ClearDeliveryAt clears the value of the "delivery_at" field.
func (u *PowerRentalUpsert) ClearDeliveryAt() *PowerRentalUpsert {
	u.SetNull(powerrental.FieldDeliveryAt)
	return u
}

// SetUnitLockDeposit sets the "unit_lock_deposit" field.
func (u *PowerRentalUpsert) SetUnitLockDeposit(v decimal.Decimal) *PowerRentalUpsert {
	u.Set(powerrental.FieldUnitLockDeposit, v)
	return u
}

// UpdateUnitLockDeposit sets the "unit_lock_deposit" field to the value that was provided on create.
func (u *PowerRentalUpsert) UpdateUnitLockDeposit() *PowerRentalUpsert {
	u.SetExcluded(powerrental.FieldUnitLockDeposit)
	return u
}

// ClearUnitLockDeposit clears the value of the "unit_lock_deposit" field.
func (u *PowerRentalUpsert) ClearUnitLockDeposit() *PowerRentalUpsert {
	u.SetNull(powerrental.FieldUnitLockDeposit)
	return u
}

// SetDurationDisplayType sets the "duration_display_type" field.
func (u *PowerRentalUpsert) SetDurationDisplayType(v string) *PowerRentalUpsert {
	u.Set(powerrental.FieldDurationDisplayType, v)
	return u
}

// UpdateDurationDisplayType sets the "duration_display_type" field to the value that was provided on create.
func (u *PowerRentalUpsert) UpdateDurationDisplayType() *PowerRentalUpsert {
	u.SetExcluded(powerrental.FieldDurationDisplayType)
	return u
}

// ClearDurationDisplayType clears the value of the "duration_display_type" field.
func (u *PowerRentalUpsert) ClearDurationDisplayType() *PowerRentalUpsert {
	u.SetNull(powerrental.FieldDurationDisplayType)
	return u
}

// SetStockMode sets the "stock_mode" field.
func (u *PowerRentalUpsert) SetStockMode(v string) *PowerRentalUpsert {
	u.Set(powerrental.FieldStockMode, v)
	return u
}

// UpdateStockMode sets the "stock_mode" field to the value that was provided on create.
func (u *PowerRentalUpsert) UpdateStockMode() *PowerRentalUpsert {
	u.SetExcluded(powerrental.FieldStockMode)
	return u
}

// ClearStockMode clears the value of the "stock_mode" field.
func (u *PowerRentalUpsert) ClearStockMode() *PowerRentalUpsert {
	u.SetNull(powerrental.FieldStockMode)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PowerRental.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(powerrental.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PowerRentalUpsertOne) UpdateNewValues() *PowerRentalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(powerrental.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PowerRental.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PowerRentalUpsertOne) Ignore() *PowerRentalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PowerRentalUpsertOne) DoNothing() *PowerRentalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PowerRentalCreate.OnConflict
// documentation for more info.
func (u *PowerRentalUpsertOne) Update(set func(*PowerRentalUpsert)) *PowerRentalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PowerRentalUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *PowerRentalUpsertOne) SetEntID(v uuid.UUID) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PowerRentalUpsertOne) UpdateEntID() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *PowerRentalUpsertOne) SetCreatedAt(v uint32) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PowerRentalUpsertOne) AddCreatedAt(v uint32) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PowerRentalUpsertOne) UpdateCreatedAt() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PowerRentalUpsertOne) SetUpdatedAt(v uint32) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PowerRentalUpsertOne) AddUpdatedAt(v uint32) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PowerRentalUpsertOne) UpdateUpdatedAt() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PowerRentalUpsertOne) SetDeletedAt(v uint32) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PowerRentalUpsertOne) AddDeletedAt(v uint32) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PowerRentalUpsertOne) UpdateDeletedAt() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetGoodID sets the "good_id" field.
func (u *PowerRentalUpsertOne) SetGoodID(v uuid.UUID) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *PowerRentalUpsertOne) UpdateGoodID() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *PowerRentalUpsertOne) ClearGoodID() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearGoodID()
	})
}

// SetDeviceTypeID sets the "device_type_id" field.
func (u *PowerRentalUpsertOne) SetDeviceTypeID(v uuid.UUID) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetDeviceTypeID(v)
	})
}

// UpdateDeviceTypeID sets the "device_type_id" field to the value that was provided on create.
func (u *PowerRentalUpsertOne) UpdateDeviceTypeID() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateDeviceTypeID()
	})
}

// ClearDeviceTypeID clears the value of the "device_type_id" field.
func (u *PowerRentalUpsertOne) ClearDeviceTypeID() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearDeviceTypeID()
	})
}

// SetVendorLocationID sets the "vendor_location_id" field.
func (u *PowerRentalUpsertOne) SetVendorLocationID(v uuid.UUID) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetVendorLocationID(v)
	})
}

// UpdateVendorLocationID sets the "vendor_location_id" field to the value that was provided on create.
func (u *PowerRentalUpsertOne) UpdateVendorLocationID() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateVendorLocationID()
	})
}

// ClearVendorLocationID clears the value of the "vendor_location_id" field.
func (u *PowerRentalUpsertOne) ClearVendorLocationID() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearVendorLocationID()
	})
}

// SetUnitPrice sets the "unit_price" field.
func (u *PowerRentalUpsertOne) SetUnitPrice(v decimal.Decimal) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetUnitPrice(v)
	})
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *PowerRentalUpsertOne) UpdateUnitPrice() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateUnitPrice()
	})
}

// ClearUnitPrice clears the value of the "unit_price" field.
func (u *PowerRentalUpsertOne) ClearUnitPrice() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearUnitPrice()
	})
}

// SetQuantityUnit sets the "quantity_unit" field.
func (u *PowerRentalUpsertOne) SetQuantityUnit(v string) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetQuantityUnit(v)
	})
}

// UpdateQuantityUnit sets the "quantity_unit" field to the value that was provided on create.
func (u *PowerRentalUpsertOne) UpdateQuantityUnit() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateQuantityUnit()
	})
}

// ClearQuantityUnit clears the value of the "quantity_unit" field.
func (u *PowerRentalUpsertOne) ClearQuantityUnit() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearQuantityUnit()
	})
}

// SetQuantityUnitAmount sets the "quantity_unit_amount" field.
func (u *PowerRentalUpsertOne) SetQuantityUnitAmount(v decimal.Decimal) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetQuantityUnitAmount(v)
	})
}

// UpdateQuantityUnitAmount sets the "quantity_unit_amount" field to the value that was provided on create.
func (u *PowerRentalUpsertOne) UpdateQuantityUnitAmount() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateQuantityUnitAmount()
	})
}

// ClearQuantityUnitAmount clears the value of the "quantity_unit_amount" field.
func (u *PowerRentalUpsertOne) ClearQuantityUnitAmount() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearQuantityUnitAmount()
	})
}

// SetDeliveryAt sets the "delivery_at" field.
func (u *PowerRentalUpsertOne) SetDeliveryAt(v uint32) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetDeliveryAt(v)
	})
}

// AddDeliveryAt adds v to the "delivery_at" field.
func (u *PowerRentalUpsertOne) AddDeliveryAt(v uint32) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.AddDeliveryAt(v)
	})
}

// UpdateDeliveryAt sets the "delivery_at" field to the value that was provided on create.
func (u *PowerRentalUpsertOne) UpdateDeliveryAt() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateDeliveryAt()
	})
}

// ClearDeliveryAt clears the value of the "delivery_at" field.
func (u *PowerRentalUpsertOne) ClearDeliveryAt() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearDeliveryAt()
	})
}

// SetUnitLockDeposit sets the "unit_lock_deposit" field.
func (u *PowerRentalUpsertOne) SetUnitLockDeposit(v decimal.Decimal) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetUnitLockDeposit(v)
	})
}

// UpdateUnitLockDeposit sets the "unit_lock_deposit" field to the value that was provided on create.
func (u *PowerRentalUpsertOne) UpdateUnitLockDeposit() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateUnitLockDeposit()
	})
}

// ClearUnitLockDeposit clears the value of the "unit_lock_deposit" field.
func (u *PowerRentalUpsertOne) ClearUnitLockDeposit() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearUnitLockDeposit()
	})
}

// SetDurationDisplayType sets the "duration_display_type" field.
func (u *PowerRentalUpsertOne) SetDurationDisplayType(v string) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetDurationDisplayType(v)
	})
}

// UpdateDurationDisplayType sets the "duration_display_type" field to the value that was provided on create.
func (u *PowerRentalUpsertOne) UpdateDurationDisplayType() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateDurationDisplayType()
	})
}

// ClearDurationDisplayType clears the value of the "duration_display_type" field.
func (u *PowerRentalUpsertOne) ClearDurationDisplayType() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearDurationDisplayType()
	})
}

// SetStockMode sets the "stock_mode" field.
func (u *PowerRentalUpsertOne) SetStockMode(v string) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetStockMode(v)
	})
}

// UpdateStockMode sets the "stock_mode" field to the value that was provided on create.
func (u *PowerRentalUpsertOne) UpdateStockMode() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateStockMode()
	})
}

// ClearStockMode clears the value of the "stock_mode" field.
func (u *PowerRentalUpsertOne) ClearStockMode() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearStockMode()
	})
}

// Exec executes the query.
func (u *PowerRentalUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for PowerRentalCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PowerRentalUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PowerRentalUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PowerRentalUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PowerRentalCreateBulk is the builder for creating many PowerRental entities in bulk.
type PowerRentalCreateBulk struct {
	config
	err      error
	builders []*PowerRentalCreate
	conflict []sql.ConflictOption
}

// Save creates the PowerRental entities in the database.
func (prcb *PowerRentalCreateBulk) Save(ctx context.Context) ([]*PowerRental, error) {
	if prcb.err != nil {
		return nil, prcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*PowerRental, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PowerRentalMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = prcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *PowerRentalCreateBulk) SaveX(ctx context.Context) []*PowerRental {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *PowerRentalCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *PowerRentalCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PowerRental.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PowerRentalUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (prcb *PowerRentalCreateBulk) OnConflict(opts ...sql.ConflictOption) *PowerRentalUpsertBulk {
	prcb.conflict = opts
	return &PowerRentalUpsertBulk{
		create: prcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PowerRental.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (prcb *PowerRentalCreateBulk) OnConflictColumns(columns ...string) *PowerRentalUpsertBulk {
	prcb.conflict = append(prcb.conflict, sql.ConflictColumns(columns...))
	return &PowerRentalUpsertBulk{
		create: prcb,
	}
}

// PowerRentalUpsertBulk is the builder for "upsert"-ing
// a bulk of PowerRental nodes.
type PowerRentalUpsertBulk struct {
	create *PowerRentalCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PowerRental.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(powerrental.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PowerRentalUpsertBulk) UpdateNewValues() *PowerRentalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(powerrental.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PowerRental.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PowerRentalUpsertBulk) Ignore() *PowerRentalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PowerRentalUpsertBulk) DoNothing() *PowerRentalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PowerRentalCreateBulk.OnConflict
// documentation for more info.
func (u *PowerRentalUpsertBulk) Update(set func(*PowerRentalUpsert)) *PowerRentalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PowerRentalUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *PowerRentalUpsertBulk) SetEntID(v uuid.UUID) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PowerRentalUpsertBulk) UpdateEntID() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *PowerRentalUpsertBulk) SetCreatedAt(v uint32) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PowerRentalUpsertBulk) AddCreatedAt(v uint32) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PowerRentalUpsertBulk) UpdateCreatedAt() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PowerRentalUpsertBulk) SetUpdatedAt(v uint32) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PowerRentalUpsertBulk) AddUpdatedAt(v uint32) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PowerRentalUpsertBulk) UpdateUpdatedAt() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PowerRentalUpsertBulk) SetDeletedAt(v uint32) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PowerRentalUpsertBulk) AddDeletedAt(v uint32) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PowerRentalUpsertBulk) UpdateDeletedAt() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetGoodID sets the "good_id" field.
func (u *PowerRentalUpsertBulk) SetGoodID(v uuid.UUID) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *PowerRentalUpsertBulk) UpdateGoodID() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *PowerRentalUpsertBulk) ClearGoodID() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearGoodID()
	})
}

// SetDeviceTypeID sets the "device_type_id" field.
func (u *PowerRentalUpsertBulk) SetDeviceTypeID(v uuid.UUID) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetDeviceTypeID(v)
	})
}

// UpdateDeviceTypeID sets the "device_type_id" field to the value that was provided on create.
func (u *PowerRentalUpsertBulk) UpdateDeviceTypeID() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateDeviceTypeID()
	})
}

// ClearDeviceTypeID clears the value of the "device_type_id" field.
func (u *PowerRentalUpsertBulk) ClearDeviceTypeID() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearDeviceTypeID()
	})
}

// SetVendorLocationID sets the "vendor_location_id" field.
func (u *PowerRentalUpsertBulk) SetVendorLocationID(v uuid.UUID) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetVendorLocationID(v)
	})
}

// UpdateVendorLocationID sets the "vendor_location_id" field to the value that was provided on create.
func (u *PowerRentalUpsertBulk) UpdateVendorLocationID() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateVendorLocationID()
	})
}

// ClearVendorLocationID clears the value of the "vendor_location_id" field.
func (u *PowerRentalUpsertBulk) ClearVendorLocationID() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearVendorLocationID()
	})
}

// SetUnitPrice sets the "unit_price" field.
func (u *PowerRentalUpsertBulk) SetUnitPrice(v decimal.Decimal) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetUnitPrice(v)
	})
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *PowerRentalUpsertBulk) UpdateUnitPrice() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateUnitPrice()
	})
}

// ClearUnitPrice clears the value of the "unit_price" field.
func (u *PowerRentalUpsertBulk) ClearUnitPrice() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearUnitPrice()
	})
}

// SetQuantityUnit sets the "quantity_unit" field.
func (u *PowerRentalUpsertBulk) SetQuantityUnit(v string) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetQuantityUnit(v)
	})
}

// UpdateQuantityUnit sets the "quantity_unit" field to the value that was provided on create.
func (u *PowerRentalUpsertBulk) UpdateQuantityUnit() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateQuantityUnit()
	})
}

// ClearQuantityUnit clears the value of the "quantity_unit" field.
func (u *PowerRentalUpsertBulk) ClearQuantityUnit() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearQuantityUnit()
	})
}

// SetQuantityUnitAmount sets the "quantity_unit_amount" field.
func (u *PowerRentalUpsertBulk) SetQuantityUnitAmount(v decimal.Decimal) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetQuantityUnitAmount(v)
	})
}

// UpdateQuantityUnitAmount sets the "quantity_unit_amount" field to the value that was provided on create.
func (u *PowerRentalUpsertBulk) UpdateQuantityUnitAmount() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateQuantityUnitAmount()
	})
}

// ClearQuantityUnitAmount clears the value of the "quantity_unit_amount" field.
func (u *PowerRentalUpsertBulk) ClearQuantityUnitAmount() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearQuantityUnitAmount()
	})
}

// SetDeliveryAt sets the "delivery_at" field.
func (u *PowerRentalUpsertBulk) SetDeliveryAt(v uint32) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetDeliveryAt(v)
	})
}

// AddDeliveryAt adds v to the "delivery_at" field.
func (u *PowerRentalUpsertBulk) AddDeliveryAt(v uint32) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.AddDeliveryAt(v)
	})
}

// UpdateDeliveryAt sets the "delivery_at" field to the value that was provided on create.
func (u *PowerRentalUpsertBulk) UpdateDeliveryAt() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateDeliveryAt()
	})
}

// ClearDeliveryAt clears the value of the "delivery_at" field.
func (u *PowerRentalUpsertBulk) ClearDeliveryAt() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearDeliveryAt()
	})
}

// SetUnitLockDeposit sets the "unit_lock_deposit" field.
func (u *PowerRentalUpsertBulk) SetUnitLockDeposit(v decimal.Decimal) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetUnitLockDeposit(v)
	})
}

// UpdateUnitLockDeposit sets the "unit_lock_deposit" field to the value that was provided on create.
func (u *PowerRentalUpsertBulk) UpdateUnitLockDeposit() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateUnitLockDeposit()
	})
}

// ClearUnitLockDeposit clears the value of the "unit_lock_deposit" field.
func (u *PowerRentalUpsertBulk) ClearUnitLockDeposit() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearUnitLockDeposit()
	})
}

// SetDurationDisplayType sets the "duration_display_type" field.
func (u *PowerRentalUpsertBulk) SetDurationDisplayType(v string) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetDurationDisplayType(v)
	})
}

// UpdateDurationDisplayType sets the "duration_display_type" field to the value that was provided on create.
func (u *PowerRentalUpsertBulk) UpdateDurationDisplayType() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateDurationDisplayType()
	})
}

// ClearDurationDisplayType clears the value of the "duration_display_type" field.
func (u *PowerRentalUpsertBulk) ClearDurationDisplayType() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearDurationDisplayType()
	})
}

// SetStockMode sets the "stock_mode" field.
func (u *PowerRentalUpsertBulk) SetStockMode(v string) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetStockMode(v)
	})
}

// UpdateStockMode sets the "stock_mode" field to the value that was provided on create.
func (u *PowerRentalUpsertBulk) UpdateStockMode() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateStockMode()
	})
}

// ClearStockMode clears the value of the "stock_mode" field.
func (u *PowerRentalUpsertBulk) ClearStockMode() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearStockMode()
	})
}

// Exec executes the query.
func (u *PowerRentalUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the PowerRentalCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for PowerRentalCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PowerRentalUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

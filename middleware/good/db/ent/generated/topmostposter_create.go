// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/topmostposter"
	"github.com/google/uuid"
)

// TopMostPosterCreate is the builder for creating a TopMostPoster entity.
type TopMostPosterCreate struct {
	config
	mutation *TopMostPosterMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (tmpc *TopMostPosterCreate) SetEntID(u uuid.UUID) *TopMostPosterCreate {
	tmpc.mutation.SetEntID(u)
	return tmpc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tmpc *TopMostPosterCreate) SetNillableEntID(u *uuid.UUID) *TopMostPosterCreate {
	if u != nil {
		tmpc.SetEntID(*u)
	}
	return tmpc
}

// SetCreatedAt sets the "created_at" field.
func (tmpc *TopMostPosterCreate) SetCreatedAt(u uint32) *TopMostPosterCreate {
	tmpc.mutation.SetCreatedAt(u)
	return tmpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tmpc *TopMostPosterCreate) SetNillableCreatedAt(u *uint32) *TopMostPosterCreate {
	if u != nil {
		tmpc.SetCreatedAt(*u)
	}
	return tmpc
}

// SetUpdatedAt sets the "updated_at" field.
func (tmpc *TopMostPosterCreate) SetUpdatedAt(u uint32) *TopMostPosterCreate {
	tmpc.mutation.SetUpdatedAt(u)
	return tmpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tmpc *TopMostPosterCreate) SetNillableUpdatedAt(u *uint32) *TopMostPosterCreate {
	if u != nil {
		tmpc.SetUpdatedAt(*u)
	}
	return tmpc
}

// SetDeletedAt sets the "deleted_at" field.
func (tmpc *TopMostPosterCreate) SetDeletedAt(u uint32) *TopMostPosterCreate {
	tmpc.mutation.SetDeletedAt(u)
	return tmpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tmpc *TopMostPosterCreate) SetNillableDeletedAt(u *uint32) *TopMostPosterCreate {
	if u != nil {
		tmpc.SetDeletedAt(*u)
	}
	return tmpc
}

// SetTopMostID sets the "top_most_id" field.
func (tmpc *TopMostPosterCreate) SetTopMostID(u uuid.UUID) *TopMostPosterCreate {
	tmpc.mutation.SetTopMostID(u)
	return tmpc
}

// SetNillableTopMostID sets the "top_most_id" field if the given value is not nil.
func (tmpc *TopMostPosterCreate) SetNillableTopMostID(u *uuid.UUID) *TopMostPosterCreate {
	if u != nil {
		tmpc.SetTopMostID(*u)
	}
	return tmpc
}

// SetPoster sets the "poster" field.
func (tmpc *TopMostPosterCreate) SetPoster(s string) *TopMostPosterCreate {
	tmpc.mutation.SetPoster(s)
	return tmpc
}

// SetNillablePoster sets the "poster" field if the given value is not nil.
func (tmpc *TopMostPosterCreate) SetNillablePoster(s *string) *TopMostPosterCreate {
	if s != nil {
		tmpc.SetPoster(*s)
	}
	return tmpc
}

// SetIndex sets the "index" field.
func (tmpc *TopMostPosterCreate) SetIndex(u uint8) *TopMostPosterCreate {
	tmpc.mutation.SetIndex(u)
	return tmpc
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (tmpc *TopMostPosterCreate) SetNillableIndex(u *uint8) *TopMostPosterCreate {
	if u != nil {
		tmpc.SetIndex(*u)
	}
	return tmpc
}

// SetID sets the "id" field.
func (tmpc *TopMostPosterCreate) SetID(u uint32) *TopMostPosterCreate {
	tmpc.mutation.SetID(u)
	return tmpc
}

// Mutation returns the TopMostPosterMutation object of the builder.
func (tmpc *TopMostPosterCreate) Mutation() *TopMostPosterMutation {
	return tmpc.mutation
}

// Save creates the TopMostPoster in the database.
func (tmpc *TopMostPosterCreate) Save(ctx context.Context) (*TopMostPoster, error) {
	tmpc.defaults()
	return withHooks(ctx, tmpc.sqlSave, tmpc.mutation, tmpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tmpc *TopMostPosterCreate) SaveX(ctx context.Context) *TopMostPoster {
	v, err := tmpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmpc *TopMostPosterCreate) Exec(ctx context.Context) error {
	_, err := tmpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmpc *TopMostPosterCreate) ExecX(ctx context.Context) {
	if err := tmpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmpc *TopMostPosterCreate) defaults() {
	if _, ok := tmpc.mutation.EntID(); !ok {
		v := topmostposter.DefaultEntID()
		tmpc.mutation.SetEntID(v)
	}
	if _, ok := tmpc.mutation.CreatedAt(); !ok {
		v := topmostposter.DefaultCreatedAt()
		tmpc.mutation.SetCreatedAt(v)
	}
	if _, ok := tmpc.mutation.UpdatedAt(); !ok {
		v := topmostposter.DefaultUpdatedAt()
		tmpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tmpc.mutation.DeletedAt(); !ok {
		v := topmostposter.DefaultDeletedAt()
		tmpc.mutation.SetDeletedAt(v)
	}
	if _, ok := tmpc.mutation.TopMostID(); !ok {
		v := topmostposter.DefaultTopMostID()
		tmpc.mutation.SetTopMostID(v)
	}
	if _, ok := tmpc.mutation.Poster(); !ok {
		v := topmostposter.DefaultPoster
		tmpc.mutation.SetPoster(v)
	}
	if _, ok := tmpc.mutation.Index(); !ok {
		v := topmostposter.DefaultIndex
		tmpc.mutation.SetIndex(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tmpc *TopMostPosterCreate) check() error {
	if _, ok := tmpc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "TopMostPoster.ent_id"`)}
	}
	if _, ok := tmpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "TopMostPoster.created_at"`)}
	}
	if _, ok := tmpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "TopMostPoster.updated_at"`)}
	}
	if _, ok := tmpc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "TopMostPoster.deleted_at"`)}
	}
	return nil
}

func (tmpc *TopMostPosterCreate) sqlSave(ctx context.Context) (*TopMostPoster, error) {
	if err := tmpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tmpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tmpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	tmpc.mutation.id = &_node.ID
	tmpc.mutation.done = true
	return _node, nil
}

func (tmpc *TopMostPosterCreate) createSpec() (*TopMostPoster, *sqlgraph.CreateSpec) {
	var (
		_node = &TopMostPoster{config: tmpc.config}
		_spec = sqlgraph.NewCreateSpec(topmostposter.Table, sqlgraph.NewFieldSpec(topmostposter.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = tmpc.conflict
	if id, ok := tmpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tmpc.mutation.EntID(); ok {
		_spec.SetField(topmostposter.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := tmpc.mutation.CreatedAt(); ok {
		_spec.SetField(topmostposter.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := tmpc.mutation.UpdatedAt(); ok {
		_spec.SetField(topmostposter.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := tmpc.mutation.DeletedAt(); ok {
		_spec.SetField(topmostposter.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := tmpc.mutation.TopMostID(); ok {
		_spec.SetField(topmostposter.FieldTopMostID, field.TypeUUID, value)
		_node.TopMostID = value
	}
	if value, ok := tmpc.mutation.Poster(); ok {
		_spec.SetField(topmostposter.FieldPoster, field.TypeString, value)
		_node.Poster = value
	}
	if value, ok := tmpc.mutation.Index(); ok {
		_spec.SetField(topmostposter.FieldIndex, field.TypeUint8, value)
		_node.Index = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TopMostPoster.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TopMostPosterUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (tmpc *TopMostPosterCreate) OnConflict(opts ...sql.ConflictOption) *TopMostPosterUpsertOne {
	tmpc.conflict = opts
	return &TopMostPosterUpsertOne{
		create: tmpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TopMostPoster.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tmpc *TopMostPosterCreate) OnConflictColumns(columns ...string) *TopMostPosterUpsertOne {
	tmpc.conflict = append(tmpc.conflict, sql.ConflictColumns(columns...))
	return &TopMostPosterUpsertOne{
		create: tmpc,
	}
}

type (
	// TopMostPosterUpsertOne is the builder for "upsert"-ing
	//  one TopMostPoster node.
	TopMostPosterUpsertOne struct {
		create *TopMostPosterCreate
	}

	// TopMostPosterUpsert is the "OnConflict" setter.
	TopMostPosterUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *TopMostPosterUpsert) SetEntID(v uuid.UUID) *TopMostPosterUpsert {
	u.Set(topmostposter.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TopMostPosterUpsert) UpdateEntID() *TopMostPosterUpsert {
	u.SetExcluded(topmostposter.FieldEntID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TopMostPosterUpsert) SetCreatedAt(v uint32) *TopMostPosterUpsert {
	u.Set(topmostposter.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TopMostPosterUpsert) UpdateCreatedAt() *TopMostPosterUpsert {
	u.SetExcluded(topmostposter.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TopMostPosterUpsert) AddCreatedAt(v uint32) *TopMostPosterUpsert {
	u.Add(topmostposter.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TopMostPosterUpsert) SetUpdatedAt(v uint32) *TopMostPosterUpsert {
	u.Set(topmostposter.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TopMostPosterUpsert) UpdateUpdatedAt() *TopMostPosterUpsert {
	u.SetExcluded(topmostposter.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TopMostPosterUpsert) AddUpdatedAt(v uint32) *TopMostPosterUpsert {
	u.Add(topmostposter.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TopMostPosterUpsert) SetDeletedAt(v uint32) *TopMostPosterUpsert {
	u.Set(topmostposter.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TopMostPosterUpsert) UpdateDeletedAt() *TopMostPosterUpsert {
	u.SetExcluded(topmostposter.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TopMostPosterUpsert) AddDeletedAt(v uint32) *TopMostPosterUpsert {
	u.Add(topmostposter.FieldDeletedAt, v)
	return u
}

// SetTopMostID sets the "top_most_id" field.
func (u *TopMostPosterUpsert) SetTopMostID(v uuid.UUID) *TopMostPosterUpsert {
	u.Set(topmostposter.FieldTopMostID, v)
	return u
}

// UpdateTopMostID sets the "top_most_id" field to the value that was provided on create.
func (u *TopMostPosterUpsert) UpdateTopMostID() *TopMostPosterUpsert {
	u.SetExcluded(topmostposter.FieldTopMostID)
	return u
}

// ClearTopMostID clears the value of the "top_most_id" field.
func (u *TopMostPosterUpsert) ClearTopMostID() *TopMostPosterUpsert {
	u.SetNull(topmostposter.FieldTopMostID)
	return u
}

// SetPoster sets the "poster" field.
func (u *TopMostPosterUpsert) SetPoster(v string) *TopMostPosterUpsert {
	u.Set(topmostposter.FieldPoster, v)
	return u
}

// UpdatePoster sets the "poster" field to the value that was provided on create.
func (u *TopMostPosterUpsert) UpdatePoster() *TopMostPosterUpsert {
	u.SetExcluded(topmostposter.FieldPoster)
	return u
}

// ClearPoster clears the value of the "poster" field.
func (u *TopMostPosterUpsert) ClearPoster() *TopMostPosterUpsert {
	u.SetNull(topmostposter.FieldPoster)
	return u
}

// SetIndex sets the "index" field.
func (u *TopMostPosterUpsert) SetIndex(v uint8) *TopMostPosterUpsert {
	u.Set(topmostposter.FieldIndex, v)
	return u
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *TopMostPosterUpsert) UpdateIndex() *TopMostPosterUpsert {
	u.SetExcluded(topmostposter.FieldIndex)
	return u
}

// AddIndex adds v to the "index" field.
func (u *TopMostPosterUpsert) AddIndex(v uint8) *TopMostPosterUpsert {
	u.Add(topmostposter.FieldIndex, v)
	return u
}

// ClearIndex clears the value of the "index" field.
func (u *TopMostPosterUpsert) ClearIndex() *TopMostPosterUpsert {
	u.SetNull(topmostposter.FieldIndex)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TopMostPoster.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(topmostposter.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TopMostPosterUpsertOne) UpdateNewValues() *TopMostPosterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(topmostposter.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TopMostPoster.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TopMostPosterUpsertOne) Ignore() *TopMostPosterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TopMostPosterUpsertOne) DoNothing() *TopMostPosterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TopMostPosterCreate.OnConflict
// documentation for more info.
func (u *TopMostPosterUpsertOne) Update(set func(*TopMostPosterUpsert)) *TopMostPosterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TopMostPosterUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *TopMostPosterUpsertOne) SetEntID(v uuid.UUID) *TopMostPosterUpsertOne {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TopMostPosterUpsertOne) UpdateEntID() *TopMostPosterUpsertOne {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TopMostPosterUpsertOne) SetCreatedAt(v uint32) *TopMostPosterUpsertOne {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TopMostPosterUpsertOne) AddCreatedAt(v uint32) *TopMostPosterUpsertOne {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TopMostPosterUpsertOne) UpdateCreatedAt() *TopMostPosterUpsertOne {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TopMostPosterUpsertOne) SetUpdatedAt(v uint32) *TopMostPosterUpsertOne {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TopMostPosterUpsertOne) AddUpdatedAt(v uint32) *TopMostPosterUpsertOne {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TopMostPosterUpsertOne) UpdateUpdatedAt() *TopMostPosterUpsertOne {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TopMostPosterUpsertOne) SetDeletedAt(v uint32) *TopMostPosterUpsertOne {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TopMostPosterUpsertOne) AddDeletedAt(v uint32) *TopMostPosterUpsertOne {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TopMostPosterUpsertOne) UpdateDeletedAt() *TopMostPosterUpsertOne {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetTopMostID sets the "top_most_id" field.
func (u *TopMostPosterUpsertOne) SetTopMostID(v uuid.UUID) *TopMostPosterUpsertOne {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.SetTopMostID(v)
	})
}

// UpdateTopMostID sets the "top_most_id" field to the value that was provided on create.
func (u *TopMostPosterUpsertOne) UpdateTopMostID() *TopMostPosterUpsertOne {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.UpdateTopMostID()
	})
}

// ClearTopMostID clears the value of the "top_most_id" field.
func (u *TopMostPosterUpsertOne) ClearTopMostID() *TopMostPosterUpsertOne {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.ClearTopMostID()
	})
}

// SetPoster sets the "poster" field.
func (u *TopMostPosterUpsertOne) SetPoster(v string) *TopMostPosterUpsertOne {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.SetPoster(v)
	})
}

// UpdatePoster sets the "poster" field to the value that was provided on create.
func (u *TopMostPosterUpsertOne) UpdatePoster() *TopMostPosterUpsertOne {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.UpdatePoster()
	})
}

// ClearPoster clears the value of the "poster" field.
func (u *TopMostPosterUpsertOne) ClearPoster() *TopMostPosterUpsertOne {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.ClearPoster()
	})
}

// SetIndex sets the "index" field.
func (u *TopMostPosterUpsertOne) SetIndex(v uint8) *TopMostPosterUpsertOne {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *TopMostPosterUpsertOne) AddIndex(v uint8) *TopMostPosterUpsertOne {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *TopMostPosterUpsertOne) UpdateIndex() *TopMostPosterUpsertOne {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.UpdateIndex()
	})
}

// ClearIndex clears the value of the "index" field.
func (u *TopMostPosterUpsertOne) ClearIndex() *TopMostPosterUpsertOne {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.ClearIndex()
	})
}

// Exec executes the query.
func (u *TopMostPosterUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for TopMostPosterCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TopMostPosterUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TopMostPosterUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TopMostPosterUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TopMostPosterCreateBulk is the builder for creating many TopMostPoster entities in bulk.
type TopMostPosterCreateBulk struct {
	config
	err      error
	builders []*TopMostPosterCreate
	conflict []sql.ConflictOption
}

// Save creates the TopMostPoster entities in the database.
func (tmpcb *TopMostPosterCreateBulk) Save(ctx context.Context) ([]*TopMostPoster, error) {
	if tmpcb.err != nil {
		return nil, tmpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tmpcb.builders))
	nodes := make([]*TopMostPoster, len(tmpcb.builders))
	mutators := make([]Mutator, len(tmpcb.builders))
	for i := range tmpcb.builders {
		func(i int, root context.Context) {
			builder := tmpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TopMostPosterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tmpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tmpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tmpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tmpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tmpcb *TopMostPosterCreateBulk) SaveX(ctx context.Context) []*TopMostPoster {
	v, err := tmpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmpcb *TopMostPosterCreateBulk) Exec(ctx context.Context) error {
	_, err := tmpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmpcb *TopMostPosterCreateBulk) ExecX(ctx context.Context) {
	if err := tmpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TopMostPoster.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TopMostPosterUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (tmpcb *TopMostPosterCreateBulk) OnConflict(opts ...sql.ConflictOption) *TopMostPosterUpsertBulk {
	tmpcb.conflict = opts
	return &TopMostPosterUpsertBulk{
		create: tmpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TopMostPoster.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tmpcb *TopMostPosterCreateBulk) OnConflictColumns(columns ...string) *TopMostPosterUpsertBulk {
	tmpcb.conflict = append(tmpcb.conflict, sql.ConflictColumns(columns...))
	return &TopMostPosterUpsertBulk{
		create: tmpcb,
	}
}

// TopMostPosterUpsertBulk is the builder for "upsert"-ing
// a bulk of TopMostPoster nodes.
type TopMostPosterUpsertBulk struct {
	create *TopMostPosterCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TopMostPoster.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(topmostposter.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TopMostPosterUpsertBulk) UpdateNewValues() *TopMostPosterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(topmostposter.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TopMostPoster.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TopMostPosterUpsertBulk) Ignore() *TopMostPosterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TopMostPosterUpsertBulk) DoNothing() *TopMostPosterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TopMostPosterCreateBulk.OnConflict
// documentation for more info.
func (u *TopMostPosterUpsertBulk) Update(set func(*TopMostPosterUpsert)) *TopMostPosterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TopMostPosterUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *TopMostPosterUpsertBulk) SetEntID(v uuid.UUID) *TopMostPosterUpsertBulk {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TopMostPosterUpsertBulk) UpdateEntID() *TopMostPosterUpsertBulk {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TopMostPosterUpsertBulk) SetCreatedAt(v uint32) *TopMostPosterUpsertBulk {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TopMostPosterUpsertBulk) AddCreatedAt(v uint32) *TopMostPosterUpsertBulk {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TopMostPosterUpsertBulk) UpdateCreatedAt() *TopMostPosterUpsertBulk {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TopMostPosterUpsertBulk) SetUpdatedAt(v uint32) *TopMostPosterUpsertBulk {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TopMostPosterUpsertBulk) AddUpdatedAt(v uint32) *TopMostPosterUpsertBulk {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TopMostPosterUpsertBulk) UpdateUpdatedAt() *TopMostPosterUpsertBulk {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TopMostPosterUpsertBulk) SetDeletedAt(v uint32) *TopMostPosterUpsertBulk {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TopMostPosterUpsertBulk) AddDeletedAt(v uint32) *TopMostPosterUpsertBulk {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TopMostPosterUpsertBulk) UpdateDeletedAt() *TopMostPosterUpsertBulk {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetTopMostID sets the "top_most_id" field.
func (u *TopMostPosterUpsertBulk) SetTopMostID(v uuid.UUID) *TopMostPosterUpsertBulk {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.SetTopMostID(v)
	})
}

// UpdateTopMostID sets the "top_most_id" field to the value that was provided on create.
func (u *TopMostPosterUpsertBulk) UpdateTopMostID() *TopMostPosterUpsertBulk {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.UpdateTopMostID()
	})
}

// ClearTopMostID clears the value of the "top_most_id" field.
func (u *TopMostPosterUpsertBulk) ClearTopMostID() *TopMostPosterUpsertBulk {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.ClearTopMostID()
	})
}

// SetPoster sets the "poster" field.
func (u *TopMostPosterUpsertBulk) SetPoster(v string) *TopMostPosterUpsertBulk {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.SetPoster(v)
	})
}

// UpdatePoster sets the "poster" field to the value that was provided on create.
func (u *TopMostPosterUpsertBulk) UpdatePoster() *TopMostPosterUpsertBulk {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.UpdatePoster()
	})
}

// ClearPoster clears the value of the "poster" field.
func (u *TopMostPosterUpsertBulk) ClearPoster() *TopMostPosterUpsertBulk {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.ClearPoster()
	})
}

// SetIndex sets the "index" field.
func (u *TopMostPosterUpsertBulk) SetIndex(v uint8) *TopMostPosterUpsertBulk {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *TopMostPosterUpsertBulk) AddIndex(v uint8) *TopMostPosterUpsertBulk {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *TopMostPosterUpsertBulk) UpdateIndex() *TopMostPosterUpsertBulk {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.UpdateIndex()
	})
}

// ClearIndex clears the value of the "index" field.
func (u *TopMostPosterUpsertBulk) ClearIndex() *TopMostPosterUpsertBulk {
	return u.Update(func(s *TopMostPosterUpsert) {
		s.ClearIndex()
	})
}

// Exec executes the query.
func (u *TopMostPosterUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the TopMostPosterCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for TopMostPosterCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TopMostPosterUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/topmostgoodconstraint"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// TopMostGoodConstraintCreate is the builder for creating a TopMostGoodConstraint entity.
type TopMostGoodConstraintCreate struct {
	config
	mutation *TopMostGoodConstraintMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (tmgcc *TopMostGoodConstraintCreate) SetEntID(u uuid.UUID) *TopMostGoodConstraintCreate {
	tmgcc.mutation.SetEntID(u)
	return tmgcc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tmgcc *TopMostGoodConstraintCreate) SetNillableEntID(u *uuid.UUID) *TopMostGoodConstraintCreate {
	if u != nil {
		tmgcc.SetEntID(*u)
	}
	return tmgcc
}

// SetTopMostGoodID sets the "top_most_good_id" field.
func (tmgcc *TopMostGoodConstraintCreate) SetTopMostGoodID(u uuid.UUID) *TopMostGoodConstraintCreate {
	tmgcc.mutation.SetTopMostGoodID(u)
	return tmgcc
}

// SetNillableTopMostGoodID sets the "top_most_good_id" field if the given value is not nil.
func (tmgcc *TopMostGoodConstraintCreate) SetNillableTopMostGoodID(u *uuid.UUID) *TopMostGoodConstraintCreate {
	if u != nil {
		tmgcc.SetTopMostGoodID(*u)
	}
	return tmgcc
}

// SetConstraint sets the "constraint" field.
func (tmgcc *TopMostGoodConstraintCreate) SetConstraint(s string) *TopMostGoodConstraintCreate {
	tmgcc.mutation.SetConstraint(s)
	return tmgcc
}

// SetNillableConstraint sets the "constraint" field if the given value is not nil.
func (tmgcc *TopMostGoodConstraintCreate) SetNillableConstraint(s *string) *TopMostGoodConstraintCreate {
	if s != nil {
		tmgcc.SetConstraint(*s)
	}
	return tmgcc
}

// SetTargetValue sets the "target_value" field.
func (tmgcc *TopMostGoodConstraintCreate) SetTargetValue(d decimal.Decimal) *TopMostGoodConstraintCreate {
	tmgcc.mutation.SetTargetValue(d)
	return tmgcc
}

// SetNillableTargetValue sets the "target_value" field if the given value is not nil.
func (tmgcc *TopMostGoodConstraintCreate) SetNillableTargetValue(d *decimal.Decimal) *TopMostGoodConstraintCreate {
	if d != nil {
		tmgcc.SetTargetValue(*d)
	}
	return tmgcc
}

// SetIndex sets the "index" field.
func (tmgcc *TopMostGoodConstraintCreate) SetIndex(u uint8) *TopMostGoodConstraintCreate {
	tmgcc.mutation.SetIndex(u)
	return tmgcc
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (tmgcc *TopMostGoodConstraintCreate) SetNillableIndex(u *uint8) *TopMostGoodConstraintCreate {
	if u != nil {
		tmgcc.SetIndex(*u)
	}
	return tmgcc
}

// SetID sets the "id" field.
func (tmgcc *TopMostGoodConstraintCreate) SetID(u uint32) *TopMostGoodConstraintCreate {
	tmgcc.mutation.SetID(u)
	return tmgcc
}

// Mutation returns the TopMostGoodConstraintMutation object of the builder.
func (tmgcc *TopMostGoodConstraintCreate) Mutation() *TopMostGoodConstraintMutation {
	return tmgcc.mutation
}

// Save creates the TopMostGoodConstraint in the database.
func (tmgcc *TopMostGoodConstraintCreate) Save(ctx context.Context) (*TopMostGoodConstraint, error) {
	tmgcc.defaults()
	return withHooks(ctx, tmgcc.sqlSave, tmgcc.mutation, tmgcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tmgcc *TopMostGoodConstraintCreate) SaveX(ctx context.Context) *TopMostGoodConstraint {
	v, err := tmgcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmgcc *TopMostGoodConstraintCreate) Exec(ctx context.Context) error {
	_, err := tmgcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmgcc *TopMostGoodConstraintCreate) ExecX(ctx context.Context) {
	if err := tmgcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmgcc *TopMostGoodConstraintCreate) defaults() {
	if _, ok := tmgcc.mutation.EntID(); !ok {
		v := topmostgoodconstraint.DefaultEntID()
		tmgcc.mutation.SetEntID(v)
	}
	if _, ok := tmgcc.mutation.TopMostGoodID(); !ok {
		v := topmostgoodconstraint.DefaultTopMostGoodID()
		tmgcc.mutation.SetTopMostGoodID(v)
	}
	if _, ok := tmgcc.mutation.Constraint(); !ok {
		v := topmostgoodconstraint.DefaultConstraint
		tmgcc.mutation.SetConstraint(v)
	}
	if _, ok := tmgcc.mutation.TargetValue(); !ok {
		v := topmostgoodconstraint.DefaultTargetValue
		tmgcc.mutation.SetTargetValue(v)
	}
	if _, ok := tmgcc.mutation.Index(); !ok {
		v := topmostgoodconstraint.DefaultIndex
		tmgcc.mutation.SetIndex(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tmgcc *TopMostGoodConstraintCreate) check() error {
	if _, ok := tmgcc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "TopMostGoodConstraint.ent_id"`)}
	}
	return nil
}

func (tmgcc *TopMostGoodConstraintCreate) sqlSave(ctx context.Context) (*TopMostGoodConstraint, error) {
	if err := tmgcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tmgcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tmgcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	tmgcc.mutation.id = &_node.ID
	tmgcc.mutation.done = true
	return _node, nil
}

func (tmgcc *TopMostGoodConstraintCreate) createSpec() (*TopMostGoodConstraint, *sqlgraph.CreateSpec) {
	var (
		_node = &TopMostGoodConstraint{config: tmgcc.config}
		_spec = sqlgraph.NewCreateSpec(topmostgoodconstraint.Table, sqlgraph.NewFieldSpec(topmostgoodconstraint.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = tmgcc.conflict
	if id, ok := tmgcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tmgcc.mutation.EntID(); ok {
		_spec.SetField(topmostgoodconstraint.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := tmgcc.mutation.TopMostGoodID(); ok {
		_spec.SetField(topmostgoodconstraint.FieldTopMostGoodID, field.TypeUUID, value)
		_node.TopMostGoodID = value
	}
	if value, ok := tmgcc.mutation.Constraint(); ok {
		_spec.SetField(topmostgoodconstraint.FieldConstraint, field.TypeString, value)
		_node.Constraint = value
	}
	if value, ok := tmgcc.mutation.TargetValue(); ok {
		_spec.SetField(topmostgoodconstraint.FieldTargetValue, field.TypeOther, value)
		_node.TargetValue = value
	}
	if value, ok := tmgcc.mutation.Index(); ok {
		_spec.SetField(topmostgoodconstraint.FieldIndex, field.TypeUint8, value)
		_node.Index = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TopMostGoodConstraint.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TopMostGoodConstraintUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (tmgcc *TopMostGoodConstraintCreate) OnConflict(opts ...sql.ConflictOption) *TopMostGoodConstraintUpsertOne {
	tmgcc.conflict = opts
	return &TopMostGoodConstraintUpsertOne{
		create: tmgcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TopMostGoodConstraint.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tmgcc *TopMostGoodConstraintCreate) OnConflictColumns(columns ...string) *TopMostGoodConstraintUpsertOne {
	tmgcc.conflict = append(tmgcc.conflict, sql.ConflictColumns(columns...))
	return &TopMostGoodConstraintUpsertOne{
		create: tmgcc,
	}
}

type (
	// TopMostGoodConstraintUpsertOne is the builder for "upsert"-ing
	//  one TopMostGoodConstraint node.
	TopMostGoodConstraintUpsertOne struct {
		create *TopMostGoodConstraintCreate
	}

	// TopMostGoodConstraintUpsert is the "OnConflict" setter.
	TopMostGoodConstraintUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *TopMostGoodConstraintUpsert) SetEntID(v uuid.UUID) *TopMostGoodConstraintUpsert {
	u.Set(topmostgoodconstraint.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TopMostGoodConstraintUpsert) UpdateEntID() *TopMostGoodConstraintUpsert {
	u.SetExcluded(topmostgoodconstraint.FieldEntID)
	return u
}

// SetTopMostGoodID sets the "top_most_good_id" field.
func (u *TopMostGoodConstraintUpsert) SetTopMostGoodID(v uuid.UUID) *TopMostGoodConstraintUpsert {
	u.Set(topmostgoodconstraint.FieldTopMostGoodID, v)
	return u
}

// UpdateTopMostGoodID sets the "top_most_good_id" field to the value that was provided on create.
func (u *TopMostGoodConstraintUpsert) UpdateTopMostGoodID() *TopMostGoodConstraintUpsert {
	u.SetExcluded(topmostgoodconstraint.FieldTopMostGoodID)
	return u
}

// ClearTopMostGoodID clears the value of the "top_most_good_id" field.
func (u *TopMostGoodConstraintUpsert) ClearTopMostGoodID() *TopMostGoodConstraintUpsert {
	u.SetNull(topmostgoodconstraint.FieldTopMostGoodID)
	return u
}

// SetConstraint sets the "constraint" field.
func (u *TopMostGoodConstraintUpsert) SetConstraint(v string) *TopMostGoodConstraintUpsert {
	u.Set(topmostgoodconstraint.FieldConstraint, v)
	return u
}

// UpdateConstraint sets the "constraint" field to the value that was provided on create.
func (u *TopMostGoodConstraintUpsert) UpdateConstraint() *TopMostGoodConstraintUpsert {
	u.SetExcluded(topmostgoodconstraint.FieldConstraint)
	return u
}

// ClearConstraint clears the value of the "constraint" field.
func (u *TopMostGoodConstraintUpsert) ClearConstraint() *TopMostGoodConstraintUpsert {
	u.SetNull(topmostgoodconstraint.FieldConstraint)
	return u
}

// SetTargetValue sets the "target_value" field.
func (u *TopMostGoodConstraintUpsert) SetTargetValue(v decimal.Decimal) *TopMostGoodConstraintUpsert {
	u.Set(topmostgoodconstraint.FieldTargetValue, v)
	return u
}

// UpdateTargetValue sets the "target_value" field to the value that was provided on create.
func (u *TopMostGoodConstraintUpsert) UpdateTargetValue() *TopMostGoodConstraintUpsert {
	u.SetExcluded(topmostgoodconstraint.FieldTargetValue)
	return u
}

// ClearTargetValue clears the value of the "target_value" field.
func (u *TopMostGoodConstraintUpsert) ClearTargetValue() *TopMostGoodConstraintUpsert {
	u.SetNull(topmostgoodconstraint.FieldTargetValue)
	return u
}

// SetIndex sets the "index" field.
func (u *TopMostGoodConstraintUpsert) SetIndex(v uint8) *TopMostGoodConstraintUpsert {
	u.Set(topmostgoodconstraint.FieldIndex, v)
	return u
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *TopMostGoodConstraintUpsert) UpdateIndex() *TopMostGoodConstraintUpsert {
	u.SetExcluded(topmostgoodconstraint.FieldIndex)
	return u
}

// AddIndex adds v to the "index" field.
func (u *TopMostGoodConstraintUpsert) AddIndex(v uint8) *TopMostGoodConstraintUpsert {
	u.Add(topmostgoodconstraint.FieldIndex, v)
	return u
}

// ClearIndex clears the value of the "index" field.
func (u *TopMostGoodConstraintUpsert) ClearIndex() *TopMostGoodConstraintUpsert {
	u.SetNull(topmostgoodconstraint.FieldIndex)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TopMostGoodConstraint.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(topmostgoodconstraint.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TopMostGoodConstraintUpsertOne) UpdateNewValues() *TopMostGoodConstraintUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(topmostgoodconstraint.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TopMostGoodConstraint.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TopMostGoodConstraintUpsertOne) Ignore() *TopMostGoodConstraintUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TopMostGoodConstraintUpsertOne) DoNothing() *TopMostGoodConstraintUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TopMostGoodConstraintCreate.OnConflict
// documentation for more info.
func (u *TopMostGoodConstraintUpsertOne) Update(set func(*TopMostGoodConstraintUpsert)) *TopMostGoodConstraintUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TopMostGoodConstraintUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *TopMostGoodConstraintUpsertOne) SetEntID(v uuid.UUID) *TopMostGoodConstraintUpsertOne {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TopMostGoodConstraintUpsertOne) UpdateEntID() *TopMostGoodConstraintUpsertOne {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.UpdateEntID()
	})
}

// SetTopMostGoodID sets the "top_most_good_id" field.
func (u *TopMostGoodConstraintUpsertOne) SetTopMostGoodID(v uuid.UUID) *TopMostGoodConstraintUpsertOne {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.SetTopMostGoodID(v)
	})
}

// UpdateTopMostGoodID sets the "top_most_good_id" field to the value that was provided on create.
func (u *TopMostGoodConstraintUpsertOne) UpdateTopMostGoodID() *TopMostGoodConstraintUpsertOne {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.UpdateTopMostGoodID()
	})
}

// ClearTopMostGoodID clears the value of the "top_most_good_id" field.
func (u *TopMostGoodConstraintUpsertOne) ClearTopMostGoodID() *TopMostGoodConstraintUpsertOne {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.ClearTopMostGoodID()
	})
}

// SetConstraint sets the "constraint" field.
func (u *TopMostGoodConstraintUpsertOne) SetConstraint(v string) *TopMostGoodConstraintUpsertOne {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.SetConstraint(v)
	})
}

// UpdateConstraint sets the "constraint" field to the value that was provided on create.
func (u *TopMostGoodConstraintUpsertOne) UpdateConstraint() *TopMostGoodConstraintUpsertOne {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.UpdateConstraint()
	})
}

// ClearConstraint clears the value of the "constraint" field.
func (u *TopMostGoodConstraintUpsertOne) ClearConstraint() *TopMostGoodConstraintUpsertOne {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.ClearConstraint()
	})
}

// SetTargetValue sets the "target_value" field.
func (u *TopMostGoodConstraintUpsertOne) SetTargetValue(v decimal.Decimal) *TopMostGoodConstraintUpsertOne {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.SetTargetValue(v)
	})
}

// UpdateTargetValue sets the "target_value" field to the value that was provided on create.
func (u *TopMostGoodConstraintUpsertOne) UpdateTargetValue() *TopMostGoodConstraintUpsertOne {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.UpdateTargetValue()
	})
}

// ClearTargetValue clears the value of the "target_value" field.
func (u *TopMostGoodConstraintUpsertOne) ClearTargetValue() *TopMostGoodConstraintUpsertOne {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.ClearTargetValue()
	})
}

// SetIndex sets the "index" field.
func (u *TopMostGoodConstraintUpsertOne) SetIndex(v uint8) *TopMostGoodConstraintUpsertOne {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *TopMostGoodConstraintUpsertOne) AddIndex(v uint8) *TopMostGoodConstraintUpsertOne {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *TopMostGoodConstraintUpsertOne) UpdateIndex() *TopMostGoodConstraintUpsertOne {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.UpdateIndex()
	})
}

// ClearIndex clears the value of the "index" field.
func (u *TopMostGoodConstraintUpsertOne) ClearIndex() *TopMostGoodConstraintUpsertOne {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.ClearIndex()
	})
}

// Exec executes the query.
func (u *TopMostGoodConstraintUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for TopMostGoodConstraintCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TopMostGoodConstraintUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TopMostGoodConstraintUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TopMostGoodConstraintUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TopMostGoodConstraintCreateBulk is the builder for creating many TopMostGoodConstraint entities in bulk.
type TopMostGoodConstraintCreateBulk struct {
	config
	err      error
	builders []*TopMostGoodConstraintCreate
	conflict []sql.ConflictOption
}

// Save creates the TopMostGoodConstraint entities in the database.
func (tmgccb *TopMostGoodConstraintCreateBulk) Save(ctx context.Context) ([]*TopMostGoodConstraint, error) {
	if tmgccb.err != nil {
		return nil, tmgccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tmgccb.builders))
	nodes := make([]*TopMostGoodConstraint, len(tmgccb.builders))
	mutators := make([]Mutator, len(tmgccb.builders))
	for i := range tmgccb.builders {
		func(i int, root context.Context) {
			builder := tmgccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TopMostGoodConstraintMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tmgccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tmgccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tmgccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tmgccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tmgccb *TopMostGoodConstraintCreateBulk) SaveX(ctx context.Context) []*TopMostGoodConstraint {
	v, err := tmgccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmgccb *TopMostGoodConstraintCreateBulk) Exec(ctx context.Context) error {
	_, err := tmgccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmgccb *TopMostGoodConstraintCreateBulk) ExecX(ctx context.Context) {
	if err := tmgccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TopMostGoodConstraint.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TopMostGoodConstraintUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (tmgccb *TopMostGoodConstraintCreateBulk) OnConflict(opts ...sql.ConflictOption) *TopMostGoodConstraintUpsertBulk {
	tmgccb.conflict = opts
	return &TopMostGoodConstraintUpsertBulk{
		create: tmgccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TopMostGoodConstraint.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tmgccb *TopMostGoodConstraintCreateBulk) OnConflictColumns(columns ...string) *TopMostGoodConstraintUpsertBulk {
	tmgccb.conflict = append(tmgccb.conflict, sql.ConflictColumns(columns...))
	return &TopMostGoodConstraintUpsertBulk{
		create: tmgccb,
	}
}

// TopMostGoodConstraintUpsertBulk is the builder for "upsert"-ing
// a bulk of TopMostGoodConstraint nodes.
type TopMostGoodConstraintUpsertBulk struct {
	create *TopMostGoodConstraintCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TopMostGoodConstraint.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(topmostgoodconstraint.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TopMostGoodConstraintUpsertBulk) UpdateNewValues() *TopMostGoodConstraintUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(topmostgoodconstraint.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TopMostGoodConstraint.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TopMostGoodConstraintUpsertBulk) Ignore() *TopMostGoodConstraintUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TopMostGoodConstraintUpsertBulk) DoNothing() *TopMostGoodConstraintUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TopMostGoodConstraintCreateBulk.OnConflict
// documentation for more info.
func (u *TopMostGoodConstraintUpsertBulk) Update(set func(*TopMostGoodConstraintUpsert)) *TopMostGoodConstraintUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TopMostGoodConstraintUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *TopMostGoodConstraintUpsertBulk) SetEntID(v uuid.UUID) *TopMostGoodConstraintUpsertBulk {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TopMostGoodConstraintUpsertBulk) UpdateEntID() *TopMostGoodConstraintUpsertBulk {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.UpdateEntID()
	})
}

// SetTopMostGoodID sets the "top_most_good_id" field.
func (u *TopMostGoodConstraintUpsertBulk) SetTopMostGoodID(v uuid.UUID) *TopMostGoodConstraintUpsertBulk {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.SetTopMostGoodID(v)
	})
}

// UpdateTopMostGoodID sets the "top_most_good_id" field to the value that was provided on create.
func (u *TopMostGoodConstraintUpsertBulk) UpdateTopMostGoodID() *TopMostGoodConstraintUpsertBulk {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.UpdateTopMostGoodID()
	})
}

// ClearTopMostGoodID clears the value of the "top_most_good_id" field.
func (u *TopMostGoodConstraintUpsertBulk) ClearTopMostGoodID() *TopMostGoodConstraintUpsertBulk {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.ClearTopMostGoodID()
	})
}

// SetConstraint sets the "constraint" field.
func (u *TopMostGoodConstraintUpsertBulk) SetConstraint(v string) *TopMostGoodConstraintUpsertBulk {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.SetConstraint(v)
	})
}

// UpdateConstraint sets the "constraint" field to the value that was provided on create.
func (u *TopMostGoodConstraintUpsertBulk) UpdateConstraint() *TopMostGoodConstraintUpsertBulk {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.UpdateConstraint()
	})
}

// ClearConstraint clears the value of the "constraint" field.
func (u *TopMostGoodConstraintUpsertBulk) ClearConstraint() *TopMostGoodConstraintUpsertBulk {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.ClearConstraint()
	})
}

// SetTargetValue sets the "target_value" field.
func (u *TopMostGoodConstraintUpsertBulk) SetTargetValue(v decimal.Decimal) *TopMostGoodConstraintUpsertBulk {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.SetTargetValue(v)
	})
}

// UpdateTargetValue sets the "target_value" field to the value that was provided on create.
func (u *TopMostGoodConstraintUpsertBulk) UpdateTargetValue() *TopMostGoodConstraintUpsertBulk {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.UpdateTargetValue()
	})
}

// ClearTargetValue clears the value of the "target_value" field.
func (u *TopMostGoodConstraintUpsertBulk) ClearTargetValue() *TopMostGoodConstraintUpsertBulk {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.ClearTargetValue()
	})
}

// SetIndex sets the "index" field.
func (u *TopMostGoodConstraintUpsertBulk) SetIndex(v uint8) *TopMostGoodConstraintUpsertBulk {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *TopMostGoodConstraintUpsertBulk) AddIndex(v uint8) *TopMostGoodConstraintUpsertBulk {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *TopMostGoodConstraintUpsertBulk) UpdateIndex() *TopMostGoodConstraintUpsertBulk {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.UpdateIndex()
	})
}

// ClearIndex clears the value of the "index" field.
func (u *TopMostGoodConstraintUpsertBulk) ClearIndex() *TopMostGoodConstraintUpsertBulk {
	return u.Update(func(s *TopMostGoodConstraintUpsert) {
		s.ClearIndex()
	})
}

// Exec executes the query.
func (u *TopMostGoodConstraintUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the TopMostGoodConstraintCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for TopMostGoodConstraintCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TopMostGoodConstraintUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

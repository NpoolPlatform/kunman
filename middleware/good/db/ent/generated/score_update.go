// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/score"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ScoreUpdate is the builder for updating Score entities.
type ScoreUpdate struct {
	config
	hooks     []Hook
	mutation  *ScoreMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ScoreUpdate builder.
func (su *ScoreUpdate) Where(ps ...predicate.Score) *ScoreUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetEntID sets the "ent_id" field.
func (su *ScoreUpdate) SetEntID(u uuid.UUID) *ScoreUpdate {
	su.mutation.SetEntID(u)
	return su
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (su *ScoreUpdate) SetNillableEntID(u *uuid.UUID) *ScoreUpdate {
	if u != nil {
		su.SetEntID(*u)
	}
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *ScoreUpdate) SetCreatedAt(u uint32) *ScoreUpdate {
	su.mutation.ResetCreatedAt()
	su.mutation.SetCreatedAt(u)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *ScoreUpdate) SetNillableCreatedAt(u *uint32) *ScoreUpdate {
	if u != nil {
		su.SetCreatedAt(*u)
	}
	return su
}

// AddCreatedAt adds u to the "created_at" field.
func (su *ScoreUpdate) AddCreatedAt(u int32) *ScoreUpdate {
	su.mutation.AddCreatedAt(u)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *ScoreUpdate) SetUpdatedAt(u uint32) *ScoreUpdate {
	su.mutation.ResetUpdatedAt()
	su.mutation.SetUpdatedAt(u)
	return su
}

// AddUpdatedAt adds u to the "updated_at" field.
func (su *ScoreUpdate) AddUpdatedAt(u int32) *ScoreUpdate {
	su.mutation.AddUpdatedAt(u)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *ScoreUpdate) SetDeletedAt(u uint32) *ScoreUpdate {
	su.mutation.ResetDeletedAt()
	su.mutation.SetDeletedAt(u)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *ScoreUpdate) SetNillableDeletedAt(u *uint32) *ScoreUpdate {
	if u != nil {
		su.SetDeletedAt(*u)
	}
	return su
}

// AddDeletedAt adds u to the "deleted_at" field.
func (su *ScoreUpdate) AddDeletedAt(u int32) *ScoreUpdate {
	su.mutation.AddDeletedAt(u)
	return su
}

// SetUserID sets the "user_id" field.
func (su *ScoreUpdate) SetUserID(u uuid.UUID) *ScoreUpdate {
	su.mutation.SetUserID(u)
	return su
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (su *ScoreUpdate) SetNillableUserID(u *uuid.UUID) *ScoreUpdate {
	if u != nil {
		su.SetUserID(*u)
	}
	return su
}

// ClearUserID clears the value of the "user_id" field.
func (su *ScoreUpdate) ClearUserID() *ScoreUpdate {
	su.mutation.ClearUserID()
	return su
}

// SetAppGoodID sets the "app_good_id" field.
func (su *ScoreUpdate) SetAppGoodID(u uuid.UUID) *ScoreUpdate {
	su.mutation.SetAppGoodID(u)
	return su
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (su *ScoreUpdate) SetNillableAppGoodID(u *uuid.UUID) *ScoreUpdate {
	if u != nil {
		su.SetAppGoodID(*u)
	}
	return su
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (su *ScoreUpdate) ClearAppGoodID() *ScoreUpdate {
	su.mutation.ClearAppGoodID()
	return su
}

// SetScore sets the "score" field.
func (su *ScoreUpdate) SetScore(d decimal.Decimal) *ScoreUpdate {
	su.mutation.SetScore(d)
	return su
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (su *ScoreUpdate) SetNillableScore(d *decimal.Decimal) *ScoreUpdate {
	if d != nil {
		su.SetScore(*d)
	}
	return su
}

// ClearScore clears the value of the "score" field.
func (su *ScoreUpdate) ClearScore() *ScoreUpdate {
	su.mutation.ClearScore()
	return su
}

// SetCommentID sets the "comment_id" field.
func (su *ScoreUpdate) SetCommentID(u uuid.UUID) *ScoreUpdate {
	su.mutation.SetCommentID(u)
	return su
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (su *ScoreUpdate) SetNillableCommentID(u *uuid.UUID) *ScoreUpdate {
	if u != nil {
		su.SetCommentID(*u)
	}
	return su
}

// ClearCommentID clears the value of the "comment_id" field.
func (su *ScoreUpdate) ClearCommentID() *ScoreUpdate {
	su.mutation.ClearCommentID()
	return su
}

// Mutation returns the ScoreMutation object of the builder.
func (su *ScoreUpdate) Mutation() *ScoreMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ScoreUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ScoreUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ScoreUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ScoreUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ScoreUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := score.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *ScoreUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScoreUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *ScoreUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(score.Table, score.Columns, sqlgraph.NewFieldSpec(score.FieldID, field.TypeUint32))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.EntID(); ok {
		_spec.SetField(score.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(score.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedCreatedAt(); ok {
		_spec.AddField(score.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(score.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(score.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(score.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedDeletedAt(); ok {
		_spec.AddField(score.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.UserID(); ok {
		_spec.SetField(score.FieldUserID, field.TypeUUID, value)
	}
	if su.mutation.UserIDCleared() {
		_spec.ClearField(score.FieldUserID, field.TypeUUID)
	}
	if value, ok := su.mutation.AppGoodID(); ok {
		_spec.SetField(score.FieldAppGoodID, field.TypeUUID, value)
	}
	if su.mutation.AppGoodIDCleared() {
		_spec.ClearField(score.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := su.mutation.Score(); ok {
		_spec.SetField(score.FieldScore, field.TypeOther, value)
	}
	if su.mutation.ScoreCleared() {
		_spec.ClearField(score.FieldScore, field.TypeOther)
	}
	if value, ok := su.mutation.CommentID(); ok {
		_spec.SetField(score.FieldCommentID, field.TypeUUID, value)
	}
	if su.mutation.CommentIDCleared() {
		_spec.ClearField(score.FieldCommentID, field.TypeUUID)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{score.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ScoreUpdateOne is the builder for updating a single Score entity.
type ScoreUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ScoreMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (suo *ScoreUpdateOne) SetEntID(u uuid.UUID) *ScoreUpdateOne {
	suo.mutation.SetEntID(u)
	return suo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (suo *ScoreUpdateOne) SetNillableEntID(u *uuid.UUID) *ScoreUpdateOne {
	if u != nil {
		suo.SetEntID(*u)
	}
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *ScoreUpdateOne) SetCreatedAt(u uint32) *ScoreUpdateOne {
	suo.mutation.ResetCreatedAt()
	suo.mutation.SetCreatedAt(u)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *ScoreUpdateOne) SetNillableCreatedAt(u *uint32) *ScoreUpdateOne {
	if u != nil {
		suo.SetCreatedAt(*u)
	}
	return suo
}

// AddCreatedAt adds u to the "created_at" field.
func (suo *ScoreUpdateOne) AddCreatedAt(u int32) *ScoreUpdateOne {
	suo.mutation.AddCreatedAt(u)
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *ScoreUpdateOne) SetUpdatedAt(u uint32) *ScoreUpdateOne {
	suo.mutation.ResetUpdatedAt()
	suo.mutation.SetUpdatedAt(u)
	return suo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (suo *ScoreUpdateOne) AddUpdatedAt(u int32) *ScoreUpdateOne {
	suo.mutation.AddUpdatedAt(u)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *ScoreUpdateOne) SetDeletedAt(u uint32) *ScoreUpdateOne {
	suo.mutation.ResetDeletedAt()
	suo.mutation.SetDeletedAt(u)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *ScoreUpdateOne) SetNillableDeletedAt(u *uint32) *ScoreUpdateOne {
	if u != nil {
		suo.SetDeletedAt(*u)
	}
	return suo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (suo *ScoreUpdateOne) AddDeletedAt(u int32) *ScoreUpdateOne {
	suo.mutation.AddDeletedAt(u)
	return suo
}

// SetUserID sets the "user_id" field.
func (suo *ScoreUpdateOne) SetUserID(u uuid.UUID) *ScoreUpdateOne {
	suo.mutation.SetUserID(u)
	return suo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (suo *ScoreUpdateOne) SetNillableUserID(u *uuid.UUID) *ScoreUpdateOne {
	if u != nil {
		suo.SetUserID(*u)
	}
	return suo
}

// ClearUserID clears the value of the "user_id" field.
func (suo *ScoreUpdateOne) ClearUserID() *ScoreUpdateOne {
	suo.mutation.ClearUserID()
	return suo
}

// SetAppGoodID sets the "app_good_id" field.
func (suo *ScoreUpdateOne) SetAppGoodID(u uuid.UUID) *ScoreUpdateOne {
	suo.mutation.SetAppGoodID(u)
	return suo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (suo *ScoreUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *ScoreUpdateOne {
	if u != nil {
		suo.SetAppGoodID(*u)
	}
	return suo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (suo *ScoreUpdateOne) ClearAppGoodID() *ScoreUpdateOne {
	suo.mutation.ClearAppGoodID()
	return suo
}

// SetScore sets the "score" field.
func (suo *ScoreUpdateOne) SetScore(d decimal.Decimal) *ScoreUpdateOne {
	suo.mutation.SetScore(d)
	return suo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (suo *ScoreUpdateOne) SetNillableScore(d *decimal.Decimal) *ScoreUpdateOne {
	if d != nil {
		suo.SetScore(*d)
	}
	return suo
}

// ClearScore clears the value of the "score" field.
func (suo *ScoreUpdateOne) ClearScore() *ScoreUpdateOne {
	suo.mutation.ClearScore()
	return suo
}

// SetCommentID sets the "comment_id" field.
func (suo *ScoreUpdateOne) SetCommentID(u uuid.UUID) *ScoreUpdateOne {
	suo.mutation.SetCommentID(u)
	return suo
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (suo *ScoreUpdateOne) SetNillableCommentID(u *uuid.UUID) *ScoreUpdateOne {
	if u != nil {
		suo.SetCommentID(*u)
	}
	return suo
}

// ClearCommentID clears the value of the "comment_id" field.
func (suo *ScoreUpdateOne) ClearCommentID() *ScoreUpdateOne {
	suo.mutation.ClearCommentID()
	return suo
}

// Mutation returns the ScoreMutation object of the builder.
func (suo *ScoreUpdateOne) Mutation() *ScoreMutation {
	return suo.mutation
}

// Where appends a list predicates to the ScoreUpdate builder.
func (suo *ScoreUpdateOne) Where(ps ...predicate.Score) *ScoreUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ScoreUpdateOne) Select(field string, fields ...string) *ScoreUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Score entity.
func (suo *ScoreUpdateOne) Save(ctx context.Context) (*Score, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ScoreUpdateOne) SaveX(ctx context.Context) *Score {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ScoreUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ScoreUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ScoreUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := score.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *ScoreUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScoreUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *ScoreUpdateOne) sqlSave(ctx context.Context) (_node *Score, err error) {
	_spec := sqlgraph.NewUpdateSpec(score.Table, score.Columns, sqlgraph.NewFieldSpec(score.FieldID, field.TypeUint32))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Score.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, score.FieldID)
		for _, f := range fields {
			if !score.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != score.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.EntID(); ok {
		_spec.SetField(score.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(score.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(score.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(score.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(score.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(score.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(score.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.UserID(); ok {
		_spec.SetField(score.FieldUserID, field.TypeUUID, value)
	}
	if suo.mutation.UserIDCleared() {
		_spec.ClearField(score.FieldUserID, field.TypeUUID)
	}
	if value, ok := suo.mutation.AppGoodID(); ok {
		_spec.SetField(score.FieldAppGoodID, field.TypeUUID, value)
	}
	if suo.mutation.AppGoodIDCleared() {
		_spec.ClearField(score.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := suo.mutation.Score(); ok {
		_spec.SetField(score.FieldScore, field.TypeOther, value)
	}
	if suo.mutation.ScoreCleared() {
		_spec.ClearField(score.FieldScore, field.TypeOther)
	}
	if value, ok := suo.mutation.CommentID(); ok {
		_spec.SetField(score.FieldCommentID, field.TypeUUID, value)
	}
	if suo.mutation.CommentIDCleared() {
		_spec.ClearField(score.FieldCommentID, field.TypeUUID)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Score{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{score.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}

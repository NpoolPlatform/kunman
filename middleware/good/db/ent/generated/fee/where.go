// Code generated by ent, DO NOT EDIT.

package fee

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Fee {
	return predicate.Fee(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Fee {
	return predicate.Fee(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Fee {
	return predicate.Fee(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Fee {
	return predicate.Fee(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Fee {
	return predicate.Fee(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Fee {
	return predicate.Fee(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Fee {
	return predicate.Fee(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Fee {
	return predicate.Fee(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Fee {
	return predicate.Fee(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.Fee {
	return predicate.Fee(sql.FieldEQ(FieldEntID, v))
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.Fee {
	return predicate.Fee(sql.FieldEQ(FieldGoodID, v))
}

// SettlementType applies equality check predicate on the "settlement_type" field. It's identical to SettlementTypeEQ.
func SettlementType(v string) predicate.Fee {
	return predicate.Fee(sql.FieldEQ(FieldSettlementType, v))
}

// UnitValue applies equality check predicate on the "unit_value" field. It's identical to UnitValueEQ.
func UnitValue(v decimal.Decimal) predicate.Fee {
	return predicate.Fee(sql.FieldEQ(FieldUnitValue, v))
}

// DurationDisplayType applies equality check predicate on the "duration_display_type" field. It's identical to DurationDisplayTypeEQ.
func DurationDisplayType(v string) predicate.Fee {
	return predicate.Fee(sql.FieldEQ(FieldDurationDisplayType, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.Fee {
	return predicate.Fee(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.Fee {
	return predicate.Fee(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.Fee {
	return predicate.Fee(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.Fee {
	return predicate.Fee(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.Fee {
	return predicate.Fee(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.Fee {
	return predicate.Fee(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.Fee {
	return predicate.Fee(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.Fee {
	return predicate.Fee(sql.FieldLTE(FieldEntID, v))
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.Fee {
	return predicate.Fee(sql.FieldEQ(FieldGoodID, v))
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.Fee {
	return predicate.Fee(sql.FieldNEQ(FieldGoodID, v))
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.Fee {
	return predicate.Fee(sql.FieldIn(FieldGoodID, vs...))
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.Fee {
	return predicate.Fee(sql.FieldNotIn(FieldGoodID, vs...))
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.Fee {
	return predicate.Fee(sql.FieldGT(FieldGoodID, v))
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.Fee {
	return predicate.Fee(sql.FieldGTE(FieldGoodID, v))
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.Fee {
	return predicate.Fee(sql.FieldLT(FieldGoodID, v))
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.Fee {
	return predicate.Fee(sql.FieldLTE(FieldGoodID, v))
}

// GoodIDIsNil applies the IsNil predicate on the "good_id" field.
func GoodIDIsNil() predicate.Fee {
	return predicate.Fee(sql.FieldIsNull(FieldGoodID))
}

// GoodIDNotNil applies the NotNil predicate on the "good_id" field.
func GoodIDNotNil() predicate.Fee {
	return predicate.Fee(sql.FieldNotNull(FieldGoodID))
}

// SettlementTypeEQ applies the EQ predicate on the "settlement_type" field.
func SettlementTypeEQ(v string) predicate.Fee {
	return predicate.Fee(sql.FieldEQ(FieldSettlementType, v))
}

// SettlementTypeNEQ applies the NEQ predicate on the "settlement_type" field.
func SettlementTypeNEQ(v string) predicate.Fee {
	return predicate.Fee(sql.FieldNEQ(FieldSettlementType, v))
}

// SettlementTypeIn applies the In predicate on the "settlement_type" field.
func SettlementTypeIn(vs ...string) predicate.Fee {
	return predicate.Fee(sql.FieldIn(FieldSettlementType, vs...))
}

// SettlementTypeNotIn applies the NotIn predicate on the "settlement_type" field.
func SettlementTypeNotIn(vs ...string) predicate.Fee {
	return predicate.Fee(sql.FieldNotIn(FieldSettlementType, vs...))
}

// SettlementTypeGT applies the GT predicate on the "settlement_type" field.
func SettlementTypeGT(v string) predicate.Fee {
	return predicate.Fee(sql.FieldGT(FieldSettlementType, v))
}

// SettlementTypeGTE applies the GTE predicate on the "settlement_type" field.
func SettlementTypeGTE(v string) predicate.Fee {
	return predicate.Fee(sql.FieldGTE(FieldSettlementType, v))
}

// SettlementTypeLT applies the LT predicate on the "settlement_type" field.
func SettlementTypeLT(v string) predicate.Fee {
	return predicate.Fee(sql.FieldLT(FieldSettlementType, v))
}

// SettlementTypeLTE applies the LTE predicate on the "settlement_type" field.
func SettlementTypeLTE(v string) predicate.Fee {
	return predicate.Fee(sql.FieldLTE(FieldSettlementType, v))
}

// SettlementTypeContains applies the Contains predicate on the "settlement_type" field.
func SettlementTypeContains(v string) predicate.Fee {
	return predicate.Fee(sql.FieldContains(FieldSettlementType, v))
}

// SettlementTypeHasPrefix applies the HasPrefix predicate on the "settlement_type" field.
func SettlementTypeHasPrefix(v string) predicate.Fee {
	return predicate.Fee(sql.FieldHasPrefix(FieldSettlementType, v))
}

// SettlementTypeHasSuffix applies the HasSuffix predicate on the "settlement_type" field.
func SettlementTypeHasSuffix(v string) predicate.Fee {
	return predicate.Fee(sql.FieldHasSuffix(FieldSettlementType, v))
}

// SettlementTypeIsNil applies the IsNil predicate on the "settlement_type" field.
func SettlementTypeIsNil() predicate.Fee {
	return predicate.Fee(sql.FieldIsNull(FieldSettlementType))
}

// SettlementTypeNotNil applies the NotNil predicate on the "settlement_type" field.
func SettlementTypeNotNil() predicate.Fee {
	return predicate.Fee(sql.FieldNotNull(FieldSettlementType))
}

// SettlementTypeEqualFold applies the EqualFold predicate on the "settlement_type" field.
func SettlementTypeEqualFold(v string) predicate.Fee {
	return predicate.Fee(sql.FieldEqualFold(FieldSettlementType, v))
}

// SettlementTypeContainsFold applies the ContainsFold predicate on the "settlement_type" field.
func SettlementTypeContainsFold(v string) predicate.Fee {
	return predicate.Fee(sql.FieldContainsFold(FieldSettlementType, v))
}

// UnitValueEQ applies the EQ predicate on the "unit_value" field.
func UnitValueEQ(v decimal.Decimal) predicate.Fee {
	return predicate.Fee(sql.FieldEQ(FieldUnitValue, v))
}

// UnitValueNEQ applies the NEQ predicate on the "unit_value" field.
func UnitValueNEQ(v decimal.Decimal) predicate.Fee {
	return predicate.Fee(sql.FieldNEQ(FieldUnitValue, v))
}

// UnitValueIn applies the In predicate on the "unit_value" field.
func UnitValueIn(vs ...decimal.Decimal) predicate.Fee {
	return predicate.Fee(sql.FieldIn(FieldUnitValue, vs...))
}

// UnitValueNotIn applies the NotIn predicate on the "unit_value" field.
func UnitValueNotIn(vs ...decimal.Decimal) predicate.Fee {
	return predicate.Fee(sql.FieldNotIn(FieldUnitValue, vs...))
}

// UnitValueGT applies the GT predicate on the "unit_value" field.
func UnitValueGT(v decimal.Decimal) predicate.Fee {
	return predicate.Fee(sql.FieldGT(FieldUnitValue, v))
}

// UnitValueGTE applies the GTE predicate on the "unit_value" field.
func UnitValueGTE(v decimal.Decimal) predicate.Fee {
	return predicate.Fee(sql.FieldGTE(FieldUnitValue, v))
}

// UnitValueLT applies the LT predicate on the "unit_value" field.
func UnitValueLT(v decimal.Decimal) predicate.Fee {
	return predicate.Fee(sql.FieldLT(FieldUnitValue, v))
}

// UnitValueLTE applies the LTE predicate on the "unit_value" field.
func UnitValueLTE(v decimal.Decimal) predicate.Fee {
	return predicate.Fee(sql.FieldLTE(FieldUnitValue, v))
}

// UnitValueIsNil applies the IsNil predicate on the "unit_value" field.
func UnitValueIsNil() predicate.Fee {
	return predicate.Fee(sql.FieldIsNull(FieldUnitValue))
}

// UnitValueNotNil applies the NotNil predicate on the "unit_value" field.
func UnitValueNotNil() predicate.Fee {
	return predicate.Fee(sql.FieldNotNull(FieldUnitValue))
}

// DurationDisplayTypeEQ applies the EQ predicate on the "duration_display_type" field.
func DurationDisplayTypeEQ(v string) predicate.Fee {
	return predicate.Fee(sql.FieldEQ(FieldDurationDisplayType, v))
}

// DurationDisplayTypeNEQ applies the NEQ predicate on the "duration_display_type" field.
func DurationDisplayTypeNEQ(v string) predicate.Fee {
	return predicate.Fee(sql.FieldNEQ(FieldDurationDisplayType, v))
}

// DurationDisplayTypeIn applies the In predicate on the "duration_display_type" field.
func DurationDisplayTypeIn(vs ...string) predicate.Fee {
	return predicate.Fee(sql.FieldIn(FieldDurationDisplayType, vs...))
}

// DurationDisplayTypeNotIn applies the NotIn predicate on the "duration_display_type" field.
func DurationDisplayTypeNotIn(vs ...string) predicate.Fee {
	return predicate.Fee(sql.FieldNotIn(FieldDurationDisplayType, vs...))
}

// DurationDisplayTypeGT applies the GT predicate on the "duration_display_type" field.
func DurationDisplayTypeGT(v string) predicate.Fee {
	return predicate.Fee(sql.FieldGT(FieldDurationDisplayType, v))
}

// DurationDisplayTypeGTE applies the GTE predicate on the "duration_display_type" field.
func DurationDisplayTypeGTE(v string) predicate.Fee {
	return predicate.Fee(sql.FieldGTE(FieldDurationDisplayType, v))
}

// DurationDisplayTypeLT applies the LT predicate on the "duration_display_type" field.
func DurationDisplayTypeLT(v string) predicate.Fee {
	return predicate.Fee(sql.FieldLT(FieldDurationDisplayType, v))
}

// DurationDisplayTypeLTE applies the LTE predicate on the "duration_display_type" field.
func DurationDisplayTypeLTE(v string) predicate.Fee {
	return predicate.Fee(sql.FieldLTE(FieldDurationDisplayType, v))
}

// DurationDisplayTypeContains applies the Contains predicate on the "duration_display_type" field.
func DurationDisplayTypeContains(v string) predicate.Fee {
	return predicate.Fee(sql.FieldContains(FieldDurationDisplayType, v))
}

// DurationDisplayTypeHasPrefix applies the HasPrefix predicate on the "duration_display_type" field.
func DurationDisplayTypeHasPrefix(v string) predicate.Fee {
	return predicate.Fee(sql.FieldHasPrefix(FieldDurationDisplayType, v))
}

// DurationDisplayTypeHasSuffix applies the HasSuffix predicate on the "duration_display_type" field.
func DurationDisplayTypeHasSuffix(v string) predicate.Fee {
	return predicate.Fee(sql.FieldHasSuffix(FieldDurationDisplayType, v))
}

// DurationDisplayTypeIsNil applies the IsNil predicate on the "duration_display_type" field.
func DurationDisplayTypeIsNil() predicate.Fee {
	return predicate.Fee(sql.FieldIsNull(FieldDurationDisplayType))
}

// DurationDisplayTypeNotNil applies the NotNil predicate on the "duration_display_type" field.
func DurationDisplayTypeNotNil() predicate.Fee {
	return predicate.Fee(sql.FieldNotNull(FieldDurationDisplayType))
}

// DurationDisplayTypeEqualFold applies the EqualFold predicate on the "duration_display_type" field.
func DurationDisplayTypeEqualFold(v string) predicate.Fee {
	return predicate.Fee(sql.FieldEqualFold(FieldDurationDisplayType, v))
}

// DurationDisplayTypeContainsFold applies the ContainsFold predicate on the "duration_display_type" field.
func DurationDisplayTypeContainsFold(v string) predicate.Fee {
	return predicate.Fee(sql.FieldContainsFold(FieldDurationDisplayType, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Fee) predicate.Fee {
	return predicate.Fee(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Fee) predicate.Fee {
	return predicate.Fee(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Fee) predicate.Fee {
	return predicate.Fee(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/goodrewardhistory"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// GoodRewardHistoryCreate is the builder for creating a GoodRewardHistory entity.
type GoodRewardHistoryCreate struct {
	config
	mutation *GoodRewardHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (grhc *GoodRewardHistoryCreate) SetEntID(u uuid.UUID) *GoodRewardHistoryCreate {
	grhc.mutation.SetEntID(u)
	return grhc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (grhc *GoodRewardHistoryCreate) SetNillableEntID(u *uuid.UUID) *GoodRewardHistoryCreate {
	if u != nil {
		grhc.SetEntID(*u)
	}
	return grhc
}

// SetGoodID sets the "good_id" field.
func (grhc *GoodRewardHistoryCreate) SetGoodID(u uuid.UUID) *GoodRewardHistoryCreate {
	grhc.mutation.SetGoodID(u)
	return grhc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (grhc *GoodRewardHistoryCreate) SetNillableGoodID(u *uuid.UUID) *GoodRewardHistoryCreate {
	if u != nil {
		grhc.SetGoodID(*u)
	}
	return grhc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (grhc *GoodRewardHistoryCreate) SetCoinTypeID(u uuid.UUID) *GoodRewardHistoryCreate {
	grhc.mutation.SetCoinTypeID(u)
	return grhc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (grhc *GoodRewardHistoryCreate) SetNillableCoinTypeID(u *uuid.UUID) *GoodRewardHistoryCreate {
	if u != nil {
		grhc.SetCoinTypeID(*u)
	}
	return grhc
}

// SetRewardDate sets the "reward_date" field.
func (grhc *GoodRewardHistoryCreate) SetRewardDate(u uint32) *GoodRewardHistoryCreate {
	grhc.mutation.SetRewardDate(u)
	return grhc
}

// SetNillableRewardDate sets the "reward_date" field if the given value is not nil.
func (grhc *GoodRewardHistoryCreate) SetNillableRewardDate(u *uint32) *GoodRewardHistoryCreate {
	if u != nil {
		grhc.SetRewardDate(*u)
	}
	return grhc
}

// SetTid sets the "tid" field.
func (grhc *GoodRewardHistoryCreate) SetTid(u uuid.UUID) *GoodRewardHistoryCreate {
	grhc.mutation.SetTid(u)
	return grhc
}

// SetNillableTid sets the "tid" field if the given value is not nil.
func (grhc *GoodRewardHistoryCreate) SetNillableTid(u *uuid.UUID) *GoodRewardHistoryCreate {
	if u != nil {
		grhc.SetTid(*u)
	}
	return grhc
}

// SetAmount sets the "amount" field.
func (grhc *GoodRewardHistoryCreate) SetAmount(d decimal.Decimal) *GoodRewardHistoryCreate {
	grhc.mutation.SetAmount(d)
	return grhc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (grhc *GoodRewardHistoryCreate) SetNillableAmount(d *decimal.Decimal) *GoodRewardHistoryCreate {
	if d != nil {
		grhc.SetAmount(*d)
	}
	return grhc
}

// SetUnitAmount sets the "unit_amount" field.
func (grhc *GoodRewardHistoryCreate) SetUnitAmount(d decimal.Decimal) *GoodRewardHistoryCreate {
	grhc.mutation.SetUnitAmount(d)
	return grhc
}

// SetNillableUnitAmount sets the "unit_amount" field if the given value is not nil.
func (grhc *GoodRewardHistoryCreate) SetNillableUnitAmount(d *decimal.Decimal) *GoodRewardHistoryCreate {
	if d != nil {
		grhc.SetUnitAmount(*d)
	}
	return grhc
}

// SetUnitNetAmount sets the "unit_net_amount" field.
func (grhc *GoodRewardHistoryCreate) SetUnitNetAmount(d decimal.Decimal) *GoodRewardHistoryCreate {
	grhc.mutation.SetUnitNetAmount(d)
	return grhc
}

// SetNillableUnitNetAmount sets the "unit_net_amount" field if the given value is not nil.
func (grhc *GoodRewardHistoryCreate) SetNillableUnitNetAmount(d *decimal.Decimal) *GoodRewardHistoryCreate {
	if d != nil {
		grhc.SetUnitNetAmount(*d)
	}
	return grhc
}

// SetID sets the "id" field.
func (grhc *GoodRewardHistoryCreate) SetID(u uint32) *GoodRewardHistoryCreate {
	grhc.mutation.SetID(u)
	return grhc
}

// Mutation returns the GoodRewardHistoryMutation object of the builder.
func (grhc *GoodRewardHistoryCreate) Mutation() *GoodRewardHistoryMutation {
	return grhc.mutation
}

// Save creates the GoodRewardHistory in the database.
func (grhc *GoodRewardHistoryCreate) Save(ctx context.Context) (*GoodRewardHistory, error) {
	grhc.defaults()
	return withHooks(ctx, grhc.sqlSave, grhc.mutation, grhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (grhc *GoodRewardHistoryCreate) SaveX(ctx context.Context) *GoodRewardHistory {
	v, err := grhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (grhc *GoodRewardHistoryCreate) Exec(ctx context.Context) error {
	_, err := grhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (grhc *GoodRewardHistoryCreate) ExecX(ctx context.Context) {
	if err := grhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (grhc *GoodRewardHistoryCreate) defaults() {
	if _, ok := grhc.mutation.EntID(); !ok {
		v := goodrewardhistory.DefaultEntID()
		grhc.mutation.SetEntID(v)
	}
	if _, ok := grhc.mutation.GoodID(); !ok {
		v := goodrewardhistory.DefaultGoodID()
		grhc.mutation.SetGoodID(v)
	}
	if _, ok := grhc.mutation.CoinTypeID(); !ok {
		v := goodrewardhistory.DefaultCoinTypeID()
		grhc.mutation.SetCoinTypeID(v)
	}
	if _, ok := grhc.mutation.RewardDate(); !ok {
		v := goodrewardhistory.DefaultRewardDate()
		grhc.mutation.SetRewardDate(v)
	}
	if _, ok := grhc.mutation.Tid(); !ok {
		v := goodrewardhistory.DefaultTid()
		grhc.mutation.SetTid(v)
	}
	if _, ok := grhc.mutation.Amount(); !ok {
		v := goodrewardhistory.DefaultAmount
		grhc.mutation.SetAmount(v)
	}
	if _, ok := grhc.mutation.UnitAmount(); !ok {
		v := goodrewardhistory.DefaultUnitAmount
		grhc.mutation.SetUnitAmount(v)
	}
	if _, ok := grhc.mutation.UnitNetAmount(); !ok {
		v := goodrewardhistory.DefaultUnitNetAmount
		grhc.mutation.SetUnitNetAmount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (grhc *GoodRewardHistoryCreate) check() error {
	if _, ok := grhc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "GoodRewardHistory.ent_id"`)}
	}
	return nil
}

func (grhc *GoodRewardHistoryCreate) sqlSave(ctx context.Context) (*GoodRewardHistory, error) {
	if err := grhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := grhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, grhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	grhc.mutation.id = &_node.ID
	grhc.mutation.done = true
	return _node, nil
}

func (grhc *GoodRewardHistoryCreate) createSpec() (*GoodRewardHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodRewardHistory{config: grhc.config}
		_spec = sqlgraph.NewCreateSpec(goodrewardhistory.Table, sqlgraph.NewFieldSpec(goodrewardhistory.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = grhc.conflict
	if id, ok := grhc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := grhc.mutation.EntID(); ok {
		_spec.SetField(goodrewardhistory.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := grhc.mutation.GoodID(); ok {
		_spec.SetField(goodrewardhistory.FieldGoodID, field.TypeUUID, value)
		_node.GoodID = value
	}
	if value, ok := grhc.mutation.CoinTypeID(); ok {
		_spec.SetField(goodrewardhistory.FieldCoinTypeID, field.TypeUUID, value)
		_node.CoinTypeID = value
	}
	if value, ok := grhc.mutation.RewardDate(); ok {
		_spec.SetField(goodrewardhistory.FieldRewardDate, field.TypeUint32, value)
		_node.RewardDate = value
	}
	if value, ok := grhc.mutation.Tid(); ok {
		_spec.SetField(goodrewardhistory.FieldTid, field.TypeUUID, value)
		_node.Tid = value
	}
	if value, ok := grhc.mutation.Amount(); ok {
		_spec.SetField(goodrewardhistory.FieldAmount, field.TypeOther, value)
		_node.Amount = value
	}
	if value, ok := grhc.mutation.UnitAmount(); ok {
		_spec.SetField(goodrewardhistory.FieldUnitAmount, field.TypeOther, value)
		_node.UnitAmount = value
	}
	if value, ok := grhc.mutation.UnitNetAmount(); ok {
		_spec.SetField(goodrewardhistory.FieldUnitNetAmount, field.TypeOther, value)
		_node.UnitNetAmount = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodRewardHistory.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodRewardHistoryUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (grhc *GoodRewardHistoryCreate) OnConflict(opts ...sql.ConflictOption) *GoodRewardHistoryUpsertOne {
	grhc.conflict = opts
	return &GoodRewardHistoryUpsertOne{
		create: grhc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodRewardHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (grhc *GoodRewardHistoryCreate) OnConflictColumns(columns ...string) *GoodRewardHistoryUpsertOne {
	grhc.conflict = append(grhc.conflict, sql.ConflictColumns(columns...))
	return &GoodRewardHistoryUpsertOne{
		create: grhc,
	}
}

type (
	// GoodRewardHistoryUpsertOne is the builder for "upsert"-ing
	//  one GoodRewardHistory node.
	GoodRewardHistoryUpsertOne struct {
		create *GoodRewardHistoryCreate
	}

	// GoodRewardHistoryUpsert is the "OnConflict" setter.
	GoodRewardHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *GoodRewardHistoryUpsert) SetEntID(v uuid.UUID) *GoodRewardHistoryUpsert {
	u.Set(goodrewardhistory.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodRewardHistoryUpsert) UpdateEntID() *GoodRewardHistoryUpsert {
	u.SetExcluded(goodrewardhistory.FieldEntID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *GoodRewardHistoryUpsert) SetGoodID(v uuid.UUID) *GoodRewardHistoryUpsert {
	u.Set(goodrewardhistory.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodRewardHistoryUpsert) UpdateGoodID() *GoodRewardHistoryUpsert {
	u.SetExcluded(goodrewardhistory.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodRewardHistoryUpsert) ClearGoodID() *GoodRewardHistoryUpsert {
	u.SetNull(goodrewardhistory.FieldGoodID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GoodRewardHistoryUpsert) SetCoinTypeID(v uuid.UUID) *GoodRewardHistoryUpsert {
	u.Set(goodrewardhistory.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GoodRewardHistoryUpsert) UpdateCoinTypeID() *GoodRewardHistoryUpsert {
	u.SetExcluded(goodrewardhistory.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *GoodRewardHistoryUpsert) ClearCoinTypeID() *GoodRewardHistoryUpsert {
	u.SetNull(goodrewardhistory.FieldCoinTypeID)
	return u
}

// SetRewardDate sets the "reward_date" field.
func (u *GoodRewardHistoryUpsert) SetRewardDate(v uint32) *GoodRewardHistoryUpsert {
	u.Set(goodrewardhistory.FieldRewardDate, v)
	return u
}

// UpdateRewardDate sets the "reward_date" field to the value that was provided on create.
func (u *GoodRewardHistoryUpsert) UpdateRewardDate() *GoodRewardHistoryUpsert {
	u.SetExcluded(goodrewardhistory.FieldRewardDate)
	return u
}

// AddRewardDate adds v to the "reward_date" field.
func (u *GoodRewardHistoryUpsert) AddRewardDate(v uint32) *GoodRewardHistoryUpsert {
	u.Add(goodrewardhistory.FieldRewardDate, v)
	return u
}

// ClearRewardDate clears the value of the "reward_date" field.
func (u *GoodRewardHistoryUpsert) ClearRewardDate() *GoodRewardHistoryUpsert {
	u.SetNull(goodrewardhistory.FieldRewardDate)
	return u
}

// SetTid sets the "tid" field.
func (u *GoodRewardHistoryUpsert) SetTid(v uuid.UUID) *GoodRewardHistoryUpsert {
	u.Set(goodrewardhistory.FieldTid, v)
	return u
}

// UpdateTid sets the "tid" field to the value that was provided on create.
func (u *GoodRewardHistoryUpsert) UpdateTid() *GoodRewardHistoryUpsert {
	u.SetExcluded(goodrewardhistory.FieldTid)
	return u
}

// ClearTid clears the value of the "tid" field.
func (u *GoodRewardHistoryUpsert) ClearTid() *GoodRewardHistoryUpsert {
	u.SetNull(goodrewardhistory.FieldTid)
	return u
}

// SetAmount sets the "amount" field.
func (u *GoodRewardHistoryUpsert) SetAmount(v decimal.Decimal) *GoodRewardHistoryUpsert {
	u.Set(goodrewardhistory.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *GoodRewardHistoryUpsert) UpdateAmount() *GoodRewardHistoryUpsert {
	u.SetExcluded(goodrewardhistory.FieldAmount)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *GoodRewardHistoryUpsert) ClearAmount() *GoodRewardHistoryUpsert {
	u.SetNull(goodrewardhistory.FieldAmount)
	return u
}

// SetUnitAmount sets the "unit_amount" field.
func (u *GoodRewardHistoryUpsert) SetUnitAmount(v decimal.Decimal) *GoodRewardHistoryUpsert {
	u.Set(goodrewardhistory.FieldUnitAmount, v)
	return u
}

// UpdateUnitAmount sets the "unit_amount" field to the value that was provided on create.
func (u *GoodRewardHistoryUpsert) UpdateUnitAmount() *GoodRewardHistoryUpsert {
	u.SetExcluded(goodrewardhistory.FieldUnitAmount)
	return u
}

// ClearUnitAmount clears the value of the "unit_amount" field.
func (u *GoodRewardHistoryUpsert) ClearUnitAmount() *GoodRewardHistoryUpsert {
	u.SetNull(goodrewardhistory.FieldUnitAmount)
	return u
}

// SetUnitNetAmount sets the "unit_net_amount" field.
func (u *GoodRewardHistoryUpsert) SetUnitNetAmount(v decimal.Decimal) *GoodRewardHistoryUpsert {
	u.Set(goodrewardhistory.FieldUnitNetAmount, v)
	return u
}

// UpdateUnitNetAmount sets the "unit_net_amount" field to the value that was provided on create.
func (u *GoodRewardHistoryUpsert) UpdateUnitNetAmount() *GoodRewardHistoryUpsert {
	u.SetExcluded(goodrewardhistory.FieldUnitNetAmount)
	return u
}

// ClearUnitNetAmount clears the value of the "unit_net_amount" field.
func (u *GoodRewardHistoryUpsert) ClearUnitNetAmount() *GoodRewardHistoryUpsert {
	u.SetNull(goodrewardhistory.FieldUnitNetAmount)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GoodRewardHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodrewardhistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GoodRewardHistoryUpsertOne) UpdateNewValues() *GoodRewardHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(goodrewardhistory.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodRewardHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GoodRewardHistoryUpsertOne) Ignore() *GoodRewardHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodRewardHistoryUpsertOne) DoNothing() *GoodRewardHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodRewardHistoryCreate.OnConflict
// documentation for more info.
func (u *GoodRewardHistoryUpsertOne) Update(set func(*GoodRewardHistoryUpsert)) *GoodRewardHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodRewardHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *GoodRewardHistoryUpsertOne) SetEntID(v uuid.UUID) *GoodRewardHistoryUpsertOne {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodRewardHistoryUpsertOne) UpdateEntID() *GoodRewardHistoryUpsertOne {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.UpdateEntID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *GoodRewardHistoryUpsertOne) SetGoodID(v uuid.UUID) *GoodRewardHistoryUpsertOne {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodRewardHistoryUpsertOne) UpdateGoodID() *GoodRewardHistoryUpsertOne {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodRewardHistoryUpsertOne) ClearGoodID() *GoodRewardHistoryUpsertOne {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.ClearGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GoodRewardHistoryUpsertOne) SetCoinTypeID(v uuid.UUID) *GoodRewardHistoryUpsertOne {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GoodRewardHistoryUpsertOne) UpdateCoinTypeID() *GoodRewardHistoryUpsertOne {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *GoodRewardHistoryUpsertOne) ClearCoinTypeID() *GoodRewardHistoryUpsertOne {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetRewardDate sets the "reward_date" field.
func (u *GoodRewardHistoryUpsertOne) SetRewardDate(v uint32) *GoodRewardHistoryUpsertOne {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.SetRewardDate(v)
	})
}

// AddRewardDate adds v to the "reward_date" field.
func (u *GoodRewardHistoryUpsertOne) AddRewardDate(v uint32) *GoodRewardHistoryUpsertOne {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.AddRewardDate(v)
	})
}

// UpdateRewardDate sets the "reward_date" field to the value that was provided on create.
func (u *GoodRewardHistoryUpsertOne) UpdateRewardDate() *GoodRewardHistoryUpsertOne {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.UpdateRewardDate()
	})
}

// ClearRewardDate clears the value of the "reward_date" field.
func (u *GoodRewardHistoryUpsertOne) ClearRewardDate() *GoodRewardHistoryUpsertOne {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.ClearRewardDate()
	})
}

// SetTid sets the "tid" field.
func (u *GoodRewardHistoryUpsertOne) SetTid(v uuid.UUID) *GoodRewardHistoryUpsertOne {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.SetTid(v)
	})
}

// UpdateTid sets the "tid" field to the value that was provided on create.
func (u *GoodRewardHistoryUpsertOne) UpdateTid() *GoodRewardHistoryUpsertOne {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.UpdateTid()
	})
}

// ClearTid clears the value of the "tid" field.
func (u *GoodRewardHistoryUpsertOne) ClearTid() *GoodRewardHistoryUpsertOne {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.ClearTid()
	})
}

// SetAmount sets the "amount" field.
func (u *GoodRewardHistoryUpsertOne) SetAmount(v decimal.Decimal) *GoodRewardHistoryUpsertOne {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *GoodRewardHistoryUpsertOne) UpdateAmount() *GoodRewardHistoryUpsertOne {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *GoodRewardHistoryUpsertOne) ClearAmount() *GoodRewardHistoryUpsertOne {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.ClearAmount()
	})
}

// SetUnitAmount sets the "unit_amount" field.
func (u *GoodRewardHistoryUpsertOne) SetUnitAmount(v decimal.Decimal) *GoodRewardHistoryUpsertOne {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.SetUnitAmount(v)
	})
}

// UpdateUnitAmount sets the "unit_amount" field to the value that was provided on create.
func (u *GoodRewardHistoryUpsertOne) UpdateUnitAmount() *GoodRewardHistoryUpsertOne {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.UpdateUnitAmount()
	})
}

// ClearUnitAmount clears the value of the "unit_amount" field.
func (u *GoodRewardHistoryUpsertOne) ClearUnitAmount() *GoodRewardHistoryUpsertOne {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.ClearUnitAmount()
	})
}

// SetUnitNetAmount sets the "unit_net_amount" field.
func (u *GoodRewardHistoryUpsertOne) SetUnitNetAmount(v decimal.Decimal) *GoodRewardHistoryUpsertOne {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.SetUnitNetAmount(v)
	})
}

// UpdateUnitNetAmount sets the "unit_net_amount" field to the value that was provided on create.
func (u *GoodRewardHistoryUpsertOne) UpdateUnitNetAmount() *GoodRewardHistoryUpsertOne {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.UpdateUnitNetAmount()
	})
}

// ClearUnitNetAmount clears the value of the "unit_net_amount" field.
func (u *GoodRewardHistoryUpsertOne) ClearUnitNetAmount() *GoodRewardHistoryUpsertOne {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.ClearUnitNetAmount()
	})
}

// Exec executes the query.
func (u *GoodRewardHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for GoodRewardHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodRewardHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GoodRewardHistoryUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GoodRewardHistoryUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GoodRewardHistoryCreateBulk is the builder for creating many GoodRewardHistory entities in bulk.
type GoodRewardHistoryCreateBulk struct {
	config
	err      error
	builders []*GoodRewardHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the GoodRewardHistory entities in the database.
func (grhcb *GoodRewardHistoryCreateBulk) Save(ctx context.Context) ([]*GoodRewardHistory, error) {
	if grhcb.err != nil {
		return nil, grhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(grhcb.builders))
	nodes := make([]*GoodRewardHistory, len(grhcb.builders))
	mutators := make([]Mutator, len(grhcb.builders))
	for i := range grhcb.builders {
		func(i int, root context.Context) {
			builder := grhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodRewardHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, grhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = grhcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, grhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, grhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (grhcb *GoodRewardHistoryCreateBulk) SaveX(ctx context.Context) []*GoodRewardHistory {
	v, err := grhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (grhcb *GoodRewardHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := grhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (grhcb *GoodRewardHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := grhcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodRewardHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodRewardHistoryUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (grhcb *GoodRewardHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *GoodRewardHistoryUpsertBulk {
	grhcb.conflict = opts
	return &GoodRewardHistoryUpsertBulk{
		create: grhcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodRewardHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (grhcb *GoodRewardHistoryCreateBulk) OnConflictColumns(columns ...string) *GoodRewardHistoryUpsertBulk {
	grhcb.conflict = append(grhcb.conflict, sql.ConflictColumns(columns...))
	return &GoodRewardHistoryUpsertBulk{
		create: grhcb,
	}
}

// GoodRewardHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of GoodRewardHistory nodes.
type GoodRewardHistoryUpsertBulk struct {
	create *GoodRewardHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GoodRewardHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodrewardhistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GoodRewardHistoryUpsertBulk) UpdateNewValues() *GoodRewardHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(goodrewardhistory.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodRewardHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GoodRewardHistoryUpsertBulk) Ignore() *GoodRewardHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodRewardHistoryUpsertBulk) DoNothing() *GoodRewardHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodRewardHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *GoodRewardHistoryUpsertBulk) Update(set func(*GoodRewardHistoryUpsert)) *GoodRewardHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodRewardHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *GoodRewardHistoryUpsertBulk) SetEntID(v uuid.UUID) *GoodRewardHistoryUpsertBulk {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodRewardHistoryUpsertBulk) UpdateEntID() *GoodRewardHistoryUpsertBulk {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.UpdateEntID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *GoodRewardHistoryUpsertBulk) SetGoodID(v uuid.UUID) *GoodRewardHistoryUpsertBulk {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodRewardHistoryUpsertBulk) UpdateGoodID() *GoodRewardHistoryUpsertBulk {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodRewardHistoryUpsertBulk) ClearGoodID() *GoodRewardHistoryUpsertBulk {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.ClearGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GoodRewardHistoryUpsertBulk) SetCoinTypeID(v uuid.UUID) *GoodRewardHistoryUpsertBulk {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GoodRewardHistoryUpsertBulk) UpdateCoinTypeID() *GoodRewardHistoryUpsertBulk {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *GoodRewardHistoryUpsertBulk) ClearCoinTypeID() *GoodRewardHistoryUpsertBulk {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetRewardDate sets the "reward_date" field.
func (u *GoodRewardHistoryUpsertBulk) SetRewardDate(v uint32) *GoodRewardHistoryUpsertBulk {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.SetRewardDate(v)
	})
}

// AddRewardDate adds v to the "reward_date" field.
func (u *GoodRewardHistoryUpsertBulk) AddRewardDate(v uint32) *GoodRewardHistoryUpsertBulk {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.AddRewardDate(v)
	})
}

// UpdateRewardDate sets the "reward_date" field to the value that was provided on create.
func (u *GoodRewardHistoryUpsertBulk) UpdateRewardDate() *GoodRewardHistoryUpsertBulk {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.UpdateRewardDate()
	})
}

// ClearRewardDate clears the value of the "reward_date" field.
func (u *GoodRewardHistoryUpsertBulk) ClearRewardDate() *GoodRewardHistoryUpsertBulk {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.ClearRewardDate()
	})
}

// SetTid sets the "tid" field.
func (u *GoodRewardHistoryUpsertBulk) SetTid(v uuid.UUID) *GoodRewardHistoryUpsertBulk {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.SetTid(v)
	})
}

// UpdateTid sets the "tid" field to the value that was provided on create.
func (u *GoodRewardHistoryUpsertBulk) UpdateTid() *GoodRewardHistoryUpsertBulk {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.UpdateTid()
	})
}

// ClearTid clears the value of the "tid" field.
func (u *GoodRewardHistoryUpsertBulk) ClearTid() *GoodRewardHistoryUpsertBulk {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.ClearTid()
	})
}

// SetAmount sets the "amount" field.
func (u *GoodRewardHistoryUpsertBulk) SetAmount(v decimal.Decimal) *GoodRewardHistoryUpsertBulk {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *GoodRewardHistoryUpsertBulk) UpdateAmount() *GoodRewardHistoryUpsertBulk {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *GoodRewardHistoryUpsertBulk) ClearAmount() *GoodRewardHistoryUpsertBulk {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.ClearAmount()
	})
}

// SetUnitAmount sets the "unit_amount" field.
func (u *GoodRewardHistoryUpsertBulk) SetUnitAmount(v decimal.Decimal) *GoodRewardHistoryUpsertBulk {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.SetUnitAmount(v)
	})
}

// UpdateUnitAmount sets the "unit_amount" field to the value that was provided on create.
func (u *GoodRewardHistoryUpsertBulk) UpdateUnitAmount() *GoodRewardHistoryUpsertBulk {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.UpdateUnitAmount()
	})
}

// ClearUnitAmount clears the value of the "unit_amount" field.
func (u *GoodRewardHistoryUpsertBulk) ClearUnitAmount() *GoodRewardHistoryUpsertBulk {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.ClearUnitAmount()
	})
}

// SetUnitNetAmount sets the "unit_net_amount" field.
func (u *GoodRewardHistoryUpsertBulk) SetUnitNetAmount(v decimal.Decimal) *GoodRewardHistoryUpsertBulk {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.SetUnitNetAmount(v)
	})
}

// UpdateUnitNetAmount sets the "unit_net_amount" field to the value that was provided on create.
func (u *GoodRewardHistoryUpsertBulk) UpdateUnitNetAmount() *GoodRewardHistoryUpsertBulk {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.UpdateUnitNetAmount()
	})
}

// ClearUnitNetAmount clears the value of the "unit_net_amount" field.
func (u *GoodRewardHistoryUpsertBulk) ClearUnitNetAmount() *GoodRewardHistoryUpsertBulk {
	return u.Update(func(s *GoodRewardHistoryUpsert) {
		s.ClearUnitNetAmount()
	})
}

// Exec executes the query.
func (u *GoodRewardHistoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the GoodRewardHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for GoodRewardHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodRewardHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

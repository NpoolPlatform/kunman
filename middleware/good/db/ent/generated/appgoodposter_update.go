// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appgoodposter"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// AppGoodPosterUpdate is the builder for updating AppGoodPoster entities.
type AppGoodPosterUpdate struct {
	config
	hooks     []Hook
	mutation  *AppGoodPosterMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppGoodPosterUpdate builder.
func (agpu *AppGoodPosterUpdate) Where(ps ...predicate.AppGoodPoster) *AppGoodPosterUpdate {
	agpu.mutation.Where(ps...)
	return agpu
}

// SetEntID sets the "ent_id" field.
func (agpu *AppGoodPosterUpdate) SetEntID(u uuid.UUID) *AppGoodPosterUpdate {
	agpu.mutation.SetEntID(u)
	return agpu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (agpu *AppGoodPosterUpdate) SetNillableEntID(u *uuid.UUID) *AppGoodPosterUpdate {
	if u != nil {
		agpu.SetEntID(*u)
	}
	return agpu
}

// SetCreatedAt sets the "created_at" field.
func (agpu *AppGoodPosterUpdate) SetCreatedAt(u uint32) *AppGoodPosterUpdate {
	agpu.mutation.ResetCreatedAt()
	agpu.mutation.SetCreatedAt(u)
	return agpu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (agpu *AppGoodPosterUpdate) SetNillableCreatedAt(u *uint32) *AppGoodPosterUpdate {
	if u != nil {
		agpu.SetCreatedAt(*u)
	}
	return agpu
}

// AddCreatedAt adds u to the "created_at" field.
func (agpu *AppGoodPosterUpdate) AddCreatedAt(u int32) *AppGoodPosterUpdate {
	agpu.mutation.AddCreatedAt(u)
	return agpu
}

// SetUpdatedAt sets the "updated_at" field.
func (agpu *AppGoodPosterUpdate) SetUpdatedAt(u uint32) *AppGoodPosterUpdate {
	agpu.mutation.ResetUpdatedAt()
	agpu.mutation.SetUpdatedAt(u)
	return agpu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (agpu *AppGoodPosterUpdate) AddUpdatedAt(u int32) *AppGoodPosterUpdate {
	agpu.mutation.AddUpdatedAt(u)
	return agpu
}

// SetDeletedAt sets the "deleted_at" field.
func (agpu *AppGoodPosterUpdate) SetDeletedAt(u uint32) *AppGoodPosterUpdate {
	agpu.mutation.ResetDeletedAt()
	agpu.mutation.SetDeletedAt(u)
	return agpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (agpu *AppGoodPosterUpdate) SetNillableDeletedAt(u *uint32) *AppGoodPosterUpdate {
	if u != nil {
		agpu.SetDeletedAt(*u)
	}
	return agpu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (agpu *AppGoodPosterUpdate) AddDeletedAt(u int32) *AppGoodPosterUpdate {
	agpu.mutation.AddDeletedAt(u)
	return agpu
}

// SetAppGoodID sets the "app_good_id" field.
func (agpu *AppGoodPosterUpdate) SetAppGoodID(u uuid.UUID) *AppGoodPosterUpdate {
	agpu.mutation.SetAppGoodID(u)
	return agpu
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (agpu *AppGoodPosterUpdate) SetNillableAppGoodID(u *uuid.UUID) *AppGoodPosterUpdate {
	if u != nil {
		agpu.SetAppGoodID(*u)
	}
	return agpu
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (agpu *AppGoodPosterUpdate) ClearAppGoodID() *AppGoodPosterUpdate {
	agpu.mutation.ClearAppGoodID()
	return agpu
}

// SetPoster sets the "poster" field.
func (agpu *AppGoodPosterUpdate) SetPoster(s string) *AppGoodPosterUpdate {
	agpu.mutation.SetPoster(s)
	return agpu
}

// SetNillablePoster sets the "poster" field if the given value is not nil.
func (agpu *AppGoodPosterUpdate) SetNillablePoster(s *string) *AppGoodPosterUpdate {
	if s != nil {
		agpu.SetPoster(*s)
	}
	return agpu
}

// ClearPoster clears the value of the "poster" field.
func (agpu *AppGoodPosterUpdate) ClearPoster() *AppGoodPosterUpdate {
	agpu.mutation.ClearPoster()
	return agpu
}

// SetIndex sets the "index" field.
func (agpu *AppGoodPosterUpdate) SetIndex(u uint8) *AppGoodPosterUpdate {
	agpu.mutation.ResetIndex()
	agpu.mutation.SetIndex(u)
	return agpu
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (agpu *AppGoodPosterUpdate) SetNillableIndex(u *uint8) *AppGoodPosterUpdate {
	if u != nil {
		agpu.SetIndex(*u)
	}
	return agpu
}

// AddIndex adds u to the "index" field.
func (agpu *AppGoodPosterUpdate) AddIndex(u int8) *AppGoodPosterUpdate {
	agpu.mutation.AddIndex(u)
	return agpu
}

// ClearIndex clears the value of the "index" field.
func (agpu *AppGoodPosterUpdate) ClearIndex() *AppGoodPosterUpdate {
	agpu.mutation.ClearIndex()
	return agpu
}

// Mutation returns the AppGoodPosterMutation object of the builder.
func (agpu *AppGoodPosterUpdate) Mutation() *AppGoodPosterMutation {
	return agpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (agpu *AppGoodPosterUpdate) Save(ctx context.Context) (int, error) {
	agpu.defaults()
	return withHooks(ctx, agpu.sqlSave, agpu.mutation, agpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (agpu *AppGoodPosterUpdate) SaveX(ctx context.Context) int {
	affected, err := agpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (agpu *AppGoodPosterUpdate) Exec(ctx context.Context) error {
	_, err := agpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agpu *AppGoodPosterUpdate) ExecX(ctx context.Context) {
	if err := agpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agpu *AppGoodPosterUpdate) defaults() {
	if _, ok := agpu.mutation.UpdatedAt(); !ok {
		v := appgoodposter.UpdateDefaultUpdatedAt()
		agpu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (agpu *AppGoodPosterUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppGoodPosterUpdate {
	agpu.modifiers = append(agpu.modifiers, modifiers...)
	return agpu
}

func (agpu *AppGoodPosterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appgoodposter.Table, appgoodposter.Columns, sqlgraph.NewFieldSpec(appgoodposter.FieldID, field.TypeUint32))
	if ps := agpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agpu.mutation.EntID(); ok {
		_spec.SetField(appgoodposter.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := agpu.mutation.CreatedAt(); ok {
		_spec.SetField(appgoodposter.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := agpu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(appgoodposter.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := agpu.mutation.UpdatedAt(); ok {
		_spec.SetField(appgoodposter.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := agpu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(appgoodposter.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := agpu.mutation.DeletedAt(); ok {
		_spec.SetField(appgoodposter.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := agpu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(appgoodposter.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := agpu.mutation.AppGoodID(); ok {
		_spec.SetField(appgoodposter.FieldAppGoodID, field.TypeUUID, value)
	}
	if agpu.mutation.AppGoodIDCleared() {
		_spec.ClearField(appgoodposter.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := agpu.mutation.Poster(); ok {
		_spec.SetField(appgoodposter.FieldPoster, field.TypeString, value)
	}
	if agpu.mutation.PosterCleared() {
		_spec.ClearField(appgoodposter.FieldPoster, field.TypeString)
	}
	if value, ok := agpu.mutation.Index(); ok {
		_spec.SetField(appgoodposter.FieldIndex, field.TypeUint8, value)
	}
	if value, ok := agpu.mutation.AddedIndex(); ok {
		_spec.AddField(appgoodposter.FieldIndex, field.TypeUint8, value)
	}
	if agpu.mutation.IndexCleared() {
		_spec.ClearField(appgoodposter.FieldIndex, field.TypeUint8)
	}
	_spec.AddModifiers(agpu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, agpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appgoodposter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	agpu.mutation.done = true
	return n, nil
}

// AppGoodPosterUpdateOne is the builder for updating a single AppGoodPoster entity.
type AppGoodPosterUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppGoodPosterMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (agpuo *AppGoodPosterUpdateOne) SetEntID(u uuid.UUID) *AppGoodPosterUpdateOne {
	agpuo.mutation.SetEntID(u)
	return agpuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (agpuo *AppGoodPosterUpdateOne) SetNillableEntID(u *uuid.UUID) *AppGoodPosterUpdateOne {
	if u != nil {
		agpuo.SetEntID(*u)
	}
	return agpuo
}

// SetCreatedAt sets the "created_at" field.
func (agpuo *AppGoodPosterUpdateOne) SetCreatedAt(u uint32) *AppGoodPosterUpdateOne {
	agpuo.mutation.ResetCreatedAt()
	agpuo.mutation.SetCreatedAt(u)
	return agpuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (agpuo *AppGoodPosterUpdateOne) SetNillableCreatedAt(u *uint32) *AppGoodPosterUpdateOne {
	if u != nil {
		agpuo.SetCreatedAt(*u)
	}
	return agpuo
}

// AddCreatedAt adds u to the "created_at" field.
func (agpuo *AppGoodPosterUpdateOne) AddCreatedAt(u int32) *AppGoodPosterUpdateOne {
	agpuo.mutation.AddCreatedAt(u)
	return agpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (agpuo *AppGoodPosterUpdateOne) SetUpdatedAt(u uint32) *AppGoodPosterUpdateOne {
	agpuo.mutation.ResetUpdatedAt()
	agpuo.mutation.SetUpdatedAt(u)
	return agpuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (agpuo *AppGoodPosterUpdateOne) AddUpdatedAt(u int32) *AppGoodPosterUpdateOne {
	agpuo.mutation.AddUpdatedAt(u)
	return agpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (agpuo *AppGoodPosterUpdateOne) SetDeletedAt(u uint32) *AppGoodPosterUpdateOne {
	agpuo.mutation.ResetDeletedAt()
	agpuo.mutation.SetDeletedAt(u)
	return agpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (agpuo *AppGoodPosterUpdateOne) SetNillableDeletedAt(u *uint32) *AppGoodPosterUpdateOne {
	if u != nil {
		agpuo.SetDeletedAt(*u)
	}
	return agpuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (agpuo *AppGoodPosterUpdateOne) AddDeletedAt(u int32) *AppGoodPosterUpdateOne {
	agpuo.mutation.AddDeletedAt(u)
	return agpuo
}

// SetAppGoodID sets the "app_good_id" field.
func (agpuo *AppGoodPosterUpdateOne) SetAppGoodID(u uuid.UUID) *AppGoodPosterUpdateOne {
	agpuo.mutation.SetAppGoodID(u)
	return agpuo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (agpuo *AppGoodPosterUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *AppGoodPosterUpdateOne {
	if u != nil {
		agpuo.SetAppGoodID(*u)
	}
	return agpuo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (agpuo *AppGoodPosterUpdateOne) ClearAppGoodID() *AppGoodPosterUpdateOne {
	agpuo.mutation.ClearAppGoodID()
	return agpuo
}

// SetPoster sets the "poster" field.
func (agpuo *AppGoodPosterUpdateOne) SetPoster(s string) *AppGoodPosterUpdateOne {
	agpuo.mutation.SetPoster(s)
	return agpuo
}

// SetNillablePoster sets the "poster" field if the given value is not nil.
func (agpuo *AppGoodPosterUpdateOne) SetNillablePoster(s *string) *AppGoodPosterUpdateOne {
	if s != nil {
		agpuo.SetPoster(*s)
	}
	return agpuo
}

// ClearPoster clears the value of the "poster" field.
func (agpuo *AppGoodPosterUpdateOne) ClearPoster() *AppGoodPosterUpdateOne {
	agpuo.mutation.ClearPoster()
	return agpuo
}

// SetIndex sets the "index" field.
func (agpuo *AppGoodPosterUpdateOne) SetIndex(u uint8) *AppGoodPosterUpdateOne {
	agpuo.mutation.ResetIndex()
	agpuo.mutation.SetIndex(u)
	return agpuo
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (agpuo *AppGoodPosterUpdateOne) SetNillableIndex(u *uint8) *AppGoodPosterUpdateOne {
	if u != nil {
		agpuo.SetIndex(*u)
	}
	return agpuo
}

// AddIndex adds u to the "index" field.
func (agpuo *AppGoodPosterUpdateOne) AddIndex(u int8) *AppGoodPosterUpdateOne {
	agpuo.mutation.AddIndex(u)
	return agpuo
}

// ClearIndex clears the value of the "index" field.
func (agpuo *AppGoodPosterUpdateOne) ClearIndex() *AppGoodPosterUpdateOne {
	agpuo.mutation.ClearIndex()
	return agpuo
}

// Mutation returns the AppGoodPosterMutation object of the builder.
func (agpuo *AppGoodPosterUpdateOne) Mutation() *AppGoodPosterMutation {
	return agpuo.mutation
}

// Where appends a list predicates to the AppGoodPosterUpdate builder.
func (agpuo *AppGoodPosterUpdateOne) Where(ps ...predicate.AppGoodPoster) *AppGoodPosterUpdateOne {
	agpuo.mutation.Where(ps...)
	return agpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (agpuo *AppGoodPosterUpdateOne) Select(field string, fields ...string) *AppGoodPosterUpdateOne {
	agpuo.fields = append([]string{field}, fields...)
	return agpuo
}

// Save executes the query and returns the updated AppGoodPoster entity.
func (agpuo *AppGoodPosterUpdateOne) Save(ctx context.Context) (*AppGoodPoster, error) {
	agpuo.defaults()
	return withHooks(ctx, agpuo.sqlSave, agpuo.mutation, agpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (agpuo *AppGoodPosterUpdateOne) SaveX(ctx context.Context) *AppGoodPoster {
	node, err := agpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (agpuo *AppGoodPosterUpdateOne) Exec(ctx context.Context) error {
	_, err := agpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agpuo *AppGoodPosterUpdateOne) ExecX(ctx context.Context) {
	if err := agpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agpuo *AppGoodPosterUpdateOne) defaults() {
	if _, ok := agpuo.mutation.UpdatedAt(); !ok {
		v := appgoodposter.UpdateDefaultUpdatedAt()
		agpuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (agpuo *AppGoodPosterUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppGoodPosterUpdateOne {
	agpuo.modifiers = append(agpuo.modifiers, modifiers...)
	return agpuo
}

func (agpuo *AppGoodPosterUpdateOne) sqlSave(ctx context.Context) (_node *AppGoodPoster, err error) {
	_spec := sqlgraph.NewUpdateSpec(appgoodposter.Table, appgoodposter.Columns, sqlgraph.NewFieldSpec(appgoodposter.FieldID, field.TypeUint32))
	id, ok := agpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AppGoodPoster.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := agpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appgoodposter.FieldID)
		for _, f := range fields {
			if !appgoodposter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != appgoodposter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := agpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agpuo.mutation.EntID(); ok {
		_spec.SetField(appgoodposter.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := agpuo.mutation.CreatedAt(); ok {
		_spec.SetField(appgoodposter.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := agpuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(appgoodposter.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := agpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(appgoodposter.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := agpuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(appgoodposter.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := agpuo.mutation.DeletedAt(); ok {
		_spec.SetField(appgoodposter.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := agpuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(appgoodposter.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := agpuo.mutation.AppGoodID(); ok {
		_spec.SetField(appgoodposter.FieldAppGoodID, field.TypeUUID, value)
	}
	if agpuo.mutation.AppGoodIDCleared() {
		_spec.ClearField(appgoodposter.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := agpuo.mutation.Poster(); ok {
		_spec.SetField(appgoodposter.FieldPoster, field.TypeString, value)
	}
	if agpuo.mutation.PosterCleared() {
		_spec.ClearField(appgoodposter.FieldPoster, field.TypeString)
	}
	if value, ok := agpuo.mutation.Index(); ok {
		_spec.SetField(appgoodposter.FieldIndex, field.TypeUint8, value)
	}
	if value, ok := agpuo.mutation.AddedIndex(); ok {
		_spec.AddField(appgoodposter.FieldIndex, field.TypeUint8, value)
	}
	if agpuo.mutation.IndexCleared() {
		_spec.ClearField(appgoodposter.FieldIndex, field.TypeUint8)
	}
	_spec.AddModifiers(agpuo.modifiers...)
	_node = &AppGoodPoster{config: agpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, agpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appgoodposter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	agpuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package stock

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldEntID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldDeletedAt, v))
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldGoodID, v))
}

// Total applies equality check predicate on the "total" field. It's identical to TotalEQ.
func Total(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldTotal, v))
}

// SpotQuantity applies equality check predicate on the "spot_quantity" field. It's identical to SpotQuantityEQ.
func SpotQuantity(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldSpotQuantity, v))
}

// Locked applies equality check predicate on the "locked" field. It's identical to LockedEQ.
func Locked(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldLocked, v))
}

// InService applies equality check predicate on the "in_service" field. It's identical to InServiceEQ.
func InService(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldInService, v))
}

// WaitStart applies equality check predicate on the "wait_start" field. It's identical to WaitStartEQ.
func WaitStart(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldWaitStart, v))
}

// Sold applies equality check predicate on the "sold" field. It's identical to SoldEQ.
func Sold(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldSold, v))
}

// AppReserved applies equality check predicate on the "app_reserved" field. It's identical to AppReservedEQ.
func AppReserved(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldAppReserved, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldEntID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldDeletedAt, v))
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldGoodID, v))
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldGoodID, v))
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldGoodID, vs...))
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldGoodID, vs...))
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldGoodID, v))
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldGoodID, v))
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldGoodID, v))
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldGoodID, v))
}

// GoodIDIsNil applies the IsNil predicate on the "good_id" field.
func GoodIDIsNil() predicate.Stock {
	return predicate.Stock(sql.FieldIsNull(FieldGoodID))
}

// GoodIDNotNil applies the NotNil predicate on the "good_id" field.
func GoodIDNotNil() predicate.Stock {
	return predicate.Stock(sql.FieldNotNull(FieldGoodID))
}

// TotalEQ applies the EQ predicate on the "total" field.
func TotalEQ(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldTotal, v))
}

// TotalNEQ applies the NEQ predicate on the "total" field.
func TotalNEQ(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldTotal, v))
}

// TotalIn applies the In predicate on the "total" field.
func TotalIn(vs ...decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldTotal, vs...))
}

// TotalNotIn applies the NotIn predicate on the "total" field.
func TotalNotIn(vs ...decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldTotal, vs...))
}

// TotalGT applies the GT predicate on the "total" field.
func TotalGT(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldTotal, v))
}

// TotalGTE applies the GTE predicate on the "total" field.
func TotalGTE(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldTotal, v))
}

// TotalLT applies the LT predicate on the "total" field.
func TotalLT(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldTotal, v))
}

// TotalLTE applies the LTE predicate on the "total" field.
func TotalLTE(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldTotal, v))
}

// TotalIsNil applies the IsNil predicate on the "total" field.
func TotalIsNil() predicate.Stock {
	return predicate.Stock(sql.FieldIsNull(FieldTotal))
}

// TotalNotNil applies the NotNil predicate on the "total" field.
func TotalNotNil() predicate.Stock {
	return predicate.Stock(sql.FieldNotNull(FieldTotal))
}

// SpotQuantityEQ applies the EQ predicate on the "spot_quantity" field.
func SpotQuantityEQ(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldSpotQuantity, v))
}

// SpotQuantityNEQ applies the NEQ predicate on the "spot_quantity" field.
func SpotQuantityNEQ(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldSpotQuantity, v))
}

// SpotQuantityIn applies the In predicate on the "spot_quantity" field.
func SpotQuantityIn(vs ...decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldSpotQuantity, vs...))
}

// SpotQuantityNotIn applies the NotIn predicate on the "spot_quantity" field.
func SpotQuantityNotIn(vs ...decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldSpotQuantity, vs...))
}

// SpotQuantityGT applies the GT predicate on the "spot_quantity" field.
func SpotQuantityGT(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldSpotQuantity, v))
}

// SpotQuantityGTE applies the GTE predicate on the "spot_quantity" field.
func SpotQuantityGTE(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldSpotQuantity, v))
}

// SpotQuantityLT applies the LT predicate on the "spot_quantity" field.
func SpotQuantityLT(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldSpotQuantity, v))
}

// SpotQuantityLTE applies the LTE predicate on the "spot_quantity" field.
func SpotQuantityLTE(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldSpotQuantity, v))
}

// SpotQuantityIsNil applies the IsNil predicate on the "spot_quantity" field.
func SpotQuantityIsNil() predicate.Stock {
	return predicate.Stock(sql.FieldIsNull(FieldSpotQuantity))
}

// SpotQuantityNotNil applies the NotNil predicate on the "spot_quantity" field.
func SpotQuantityNotNil() predicate.Stock {
	return predicate.Stock(sql.FieldNotNull(FieldSpotQuantity))
}

// LockedEQ applies the EQ predicate on the "locked" field.
func LockedEQ(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldLocked, v))
}

// LockedNEQ applies the NEQ predicate on the "locked" field.
func LockedNEQ(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldLocked, v))
}

// LockedIn applies the In predicate on the "locked" field.
func LockedIn(vs ...decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldLocked, vs...))
}

// LockedNotIn applies the NotIn predicate on the "locked" field.
func LockedNotIn(vs ...decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldLocked, vs...))
}

// LockedGT applies the GT predicate on the "locked" field.
func LockedGT(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldLocked, v))
}

// LockedGTE applies the GTE predicate on the "locked" field.
func LockedGTE(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldLocked, v))
}

// LockedLT applies the LT predicate on the "locked" field.
func LockedLT(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldLocked, v))
}

// LockedLTE applies the LTE predicate on the "locked" field.
func LockedLTE(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldLocked, v))
}

// LockedIsNil applies the IsNil predicate on the "locked" field.
func LockedIsNil() predicate.Stock {
	return predicate.Stock(sql.FieldIsNull(FieldLocked))
}

// LockedNotNil applies the NotNil predicate on the "locked" field.
func LockedNotNil() predicate.Stock {
	return predicate.Stock(sql.FieldNotNull(FieldLocked))
}

// InServiceEQ applies the EQ predicate on the "in_service" field.
func InServiceEQ(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldInService, v))
}

// InServiceNEQ applies the NEQ predicate on the "in_service" field.
func InServiceNEQ(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldInService, v))
}

// InServiceIn applies the In predicate on the "in_service" field.
func InServiceIn(vs ...decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldInService, vs...))
}

// InServiceNotIn applies the NotIn predicate on the "in_service" field.
func InServiceNotIn(vs ...decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldInService, vs...))
}

// InServiceGT applies the GT predicate on the "in_service" field.
func InServiceGT(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldInService, v))
}

// InServiceGTE applies the GTE predicate on the "in_service" field.
func InServiceGTE(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldInService, v))
}

// InServiceLT applies the LT predicate on the "in_service" field.
func InServiceLT(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldInService, v))
}

// InServiceLTE applies the LTE predicate on the "in_service" field.
func InServiceLTE(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldInService, v))
}

// InServiceIsNil applies the IsNil predicate on the "in_service" field.
func InServiceIsNil() predicate.Stock {
	return predicate.Stock(sql.FieldIsNull(FieldInService))
}

// InServiceNotNil applies the NotNil predicate on the "in_service" field.
func InServiceNotNil() predicate.Stock {
	return predicate.Stock(sql.FieldNotNull(FieldInService))
}

// WaitStartEQ applies the EQ predicate on the "wait_start" field.
func WaitStartEQ(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldWaitStart, v))
}

// WaitStartNEQ applies the NEQ predicate on the "wait_start" field.
func WaitStartNEQ(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldWaitStart, v))
}

// WaitStartIn applies the In predicate on the "wait_start" field.
func WaitStartIn(vs ...decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldWaitStart, vs...))
}

// WaitStartNotIn applies the NotIn predicate on the "wait_start" field.
func WaitStartNotIn(vs ...decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldWaitStart, vs...))
}

// WaitStartGT applies the GT predicate on the "wait_start" field.
func WaitStartGT(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldWaitStart, v))
}

// WaitStartGTE applies the GTE predicate on the "wait_start" field.
func WaitStartGTE(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldWaitStart, v))
}

// WaitStartLT applies the LT predicate on the "wait_start" field.
func WaitStartLT(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldWaitStart, v))
}

// WaitStartLTE applies the LTE predicate on the "wait_start" field.
func WaitStartLTE(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldWaitStart, v))
}

// WaitStartIsNil applies the IsNil predicate on the "wait_start" field.
func WaitStartIsNil() predicate.Stock {
	return predicate.Stock(sql.FieldIsNull(FieldWaitStart))
}

// WaitStartNotNil applies the NotNil predicate on the "wait_start" field.
func WaitStartNotNil() predicate.Stock {
	return predicate.Stock(sql.FieldNotNull(FieldWaitStart))
}

// SoldEQ applies the EQ predicate on the "sold" field.
func SoldEQ(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldSold, v))
}

// SoldNEQ applies the NEQ predicate on the "sold" field.
func SoldNEQ(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldSold, v))
}

// SoldIn applies the In predicate on the "sold" field.
func SoldIn(vs ...decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldSold, vs...))
}

// SoldNotIn applies the NotIn predicate on the "sold" field.
func SoldNotIn(vs ...decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldSold, vs...))
}

// SoldGT applies the GT predicate on the "sold" field.
func SoldGT(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldSold, v))
}

// SoldGTE applies the GTE predicate on the "sold" field.
func SoldGTE(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldSold, v))
}

// SoldLT applies the LT predicate on the "sold" field.
func SoldLT(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldSold, v))
}

// SoldLTE applies the LTE predicate on the "sold" field.
func SoldLTE(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldSold, v))
}

// SoldIsNil applies the IsNil predicate on the "sold" field.
func SoldIsNil() predicate.Stock {
	return predicate.Stock(sql.FieldIsNull(FieldSold))
}

// SoldNotNil applies the NotNil predicate on the "sold" field.
func SoldNotNil() predicate.Stock {
	return predicate.Stock(sql.FieldNotNull(FieldSold))
}

// AppReservedEQ applies the EQ predicate on the "app_reserved" field.
func AppReservedEQ(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldAppReserved, v))
}

// AppReservedNEQ applies the NEQ predicate on the "app_reserved" field.
func AppReservedNEQ(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldAppReserved, v))
}

// AppReservedIn applies the In predicate on the "app_reserved" field.
func AppReservedIn(vs ...decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldAppReserved, vs...))
}

// AppReservedNotIn applies the NotIn predicate on the "app_reserved" field.
func AppReservedNotIn(vs ...decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldAppReserved, vs...))
}

// AppReservedGT applies the GT predicate on the "app_reserved" field.
func AppReservedGT(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldAppReserved, v))
}

// AppReservedGTE applies the GTE predicate on the "app_reserved" field.
func AppReservedGTE(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldAppReserved, v))
}

// AppReservedLT applies the LT predicate on the "app_reserved" field.
func AppReservedLT(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldAppReserved, v))
}

// AppReservedLTE applies the LTE predicate on the "app_reserved" field.
func AppReservedLTE(v decimal.Decimal) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldAppReserved, v))
}

// AppReservedIsNil applies the IsNil predicate on the "app_reserved" field.
func AppReservedIsNil() predicate.Stock {
	return predicate.Stock(sql.FieldIsNull(FieldAppReserved))
}

// AppReservedNotNil applies the NotNil predicate on the "app_reserved" field.
func AppReservedNotNil() predicate.Stock {
	return predicate.Stock(sql.FieldNotNull(FieldAppReserved))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Stock) predicate.Stock {
	return predicate.Stock(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Stock) predicate.Stock {
	return predicate.Stock(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Stock) predicate.Stock {
	return predicate.Stock(sql.NotPredicates(p))
}

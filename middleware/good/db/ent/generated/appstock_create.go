// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appstock"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppStockCreate is the builder for creating a AppStock entity.
type AppStockCreate struct {
	config
	mutation *AppStockMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (asc *AppStockCreate) SetEntID(u uuid.UUID) *AppStockCreate {
	asc.mutation.SetEntID(u)
	return asc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (asc *AppStockCreate) SetNillableEntID(u *uuid.UUID) *AppStockCreate {
	if u != nil {
		asc.SetEntID(*u)
	}
	return asc
}

// SetCreatedAt sets the "created_at" field.
func (asc *AppStockCreate) SetCreatedAt(u uint32) *AppStockCreate {
	asc.mutation.SetCreatedAt(u)
	return asc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asc *AppStockCreate) SetNillableCreatedAt(u *uint32) *AppStockCreate {
	if u != nil {
		asc.SetCreatedAt(*u)
	}
	return asc
}

// SetUpdatedAt sets the "updated_at" field.
func (asc *AppStockCreate) SetUpdatedAt(u uint32) *AppStockCreate {
	asc.mutation.SetUpdatedAt(u)
	return asc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (asc *AppStockCreate) SetNillableUpdatedAt(u *uint32) *AppStockCreate {
	if u != nil {
		asc.SetUpdatedAt(*u)
	}
	return asc
}

// SetDeletedAt sets the "deleted_at" field.
func (asc *AppStockCreate) SetDeletedAt(u uint32) *AppStockCreate {
	asc.mutation.SetDeletedAt(u)
	return asc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (asc *AppStockCreate) SetNillableDeletedAt(u *uint32) *AppStockCreate {
	if u != nil {
		asc.SetDeletedAt(*u)
	}
	return asc
}

// SetAppGoodID sets the "app_good_id" field.
func (asc *AppStockCreate) SetAppGoodID(u uuid.UUID) *AppStockCreate {
	asc.mutation.SetAppGoodID(u)
	return asc
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (asc *AppStockCreate) SetNillableAppGoodID(u *uuid.UUID) *AppStockCreate {
	if u != nil {
		asc.SetAppGoodID(*u)
	}
	return asc
}

// SetReserved sets the "reserved" field.
func (asc *AppStockCreate) SetReserved(d decimal.Decimal) *AppStockCreate {
	asc.mutation.SetReserved(d)
	return asc
}

// SetNillableReserved sets the "reserved" field if the given value is not nil.
func (asc *AppStockCreate) SetNillableReserved(d *decimal.Decimal) *AppStockCreate {
	if d != nil {
		asc.SetReserved(*d)
	}
	return asc
}

// SetSpotQuantity sets the "spot_quantity" field.
func (asc *AppStockCreate) SetSpotQuantity(d decimal.Decimal) *AppStockCreate {
	asc.mutation.SetSpotQuantity(d)
	return asc
}

// SetNillableSpotQuantity sets the "spot_quantity" field if the given value is not nil.
func (asc *AppStockCreate) SetNillableSpotQuantity(d *decimal.Decimal) *AppStockCreate {
	if d != nil {
		asc.SetSpotQuantity(*d)
	}
	return asc
}

// SetLocked sets the "locked" field.
func (asc *AppStockCreate) SetLocked(d decimal.Decimal) *AppStockCreate {
	asc.mutation.SetLocked(d)
	return asc
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (asc *AppStockCreate) SetNillableLocked(d *decimal.Decimal) *AppStockCreate {
	if d != nil {
		asc.SetLocked(*d)
	}
	return asc
}

// SetInService sets the "in_service" field.
func (asc *AppStockCreate) SetInService(d decimal.Decimal) *AppStockCreate {
	asc.mutation.SetInService(d)
	return asc
}

// SetNillableInService sets the "in_service" field if the given value is not nil.
func (asc *AppStockCreate) SetNillableInService(d *decimal.Decimal) *AppStockCreate {
	if d != nil {
		asc.SetInService(*d)
	}
	return asc
}

// SetWaitStart sets the "wait_start" field.
func (asc *AppStockCreate) SetWaitStart(d decimal.Decimal) *AppStockCreate {
	asc.mutation.SetWaitStart(d)
	return asc
}

// SetNillableWaitStart sets the "wait_start" field if the given value is not nil.
func (asc *AppStockCreate) SetNillableWaitStart(d *decimal.Decimal) *AppStockCreate {
	if d != nil {
		asc.SetWaitStart(*d)
	}
	return asc
}

// SetSold sets the "sold" field.
func (asc *AppStockCreate) SetSold(d decimal.Decimal) *AppStockCreate {
	asc.mutation.SetSold(d)
	return asc
}

// SetNillableSold sets the "sold" field if the given value is not nil.
func (asc *AppStockCreate) SetNillableSold(d *decimal.Decimal) *AppStockCreate {
	if d != nil {
		asc.SetSold(*d)
	}
	return asc
}

// SetID sets the "id" field.
func (asc *AppStockCreate) SetID(u uint32) *AppStockCreate {
	asc.mutation.SetID(u)
	return asc
}

// Mutation returns the AppStockMutation object of the builder.
func (asc *AppStockCreate) Mutation() *AppStockMutation {
	return asc.mutation
}

// Save creates the AppStock in the database.
func (asc *AppStockCreate) Save(ctx context.Context) (*AppStock, error) {
	asc.defaults()
	return withHooks(ctx, asc.sqlSave, asc.mutation, asc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (asc *AppStockCreate) SaveX(ctx context.Context) *AppStock {
	v, err := asc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asc *AppStockCreate) Exec(ctx context.Context) error {
	_, err := asc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asc *AppStockCreate) ExecX(ctx context.Context) {
	if err := asc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asc *AppStockCreate) defaults() {
	if _, ok := asc.mutation.EntID(); !ok {
		v := appstock.DefaultEntID()
		asc.mutation.SetEntID(v)
	}
	if _, ok := asc.mutation.CreatedAt(); !ok {
		v := appstock.DefaultCreatedAt()
		asc.mutation.SetCreatedAt(v)
	}
	if _, ok := asc.mutation.UpdatedAt(); !ok {
		v := appstock.DefaultUpdatedAt()
		asc.mutation.SetUpdatedAt(v)
	}
	if _, ok := asc.mutation.DeletedAt(); !ok {
		v := appstock.DefaultDeletedAt()
		asc.mutation.SetDeletedAt(v)
	}
	if _, ok := asc.mutation.AppGoodID(); !ok {
		v := appstock.DefaultAppGoodID()
		asc.mutation.SetAppGoodID(v)
	}
	if _, ok := asc.mutation.Reserved(); !ok {
		v := appstock.DefaultReserved
		asc.mutation.SetReserved(v)
	}
	if _, ok := asc.mutation.SpotQuantity(); !ok {
		v := appstock.DefaultSpotQuantity
		asc.mutation.SetSpotQuantity(v)
	}
	if _, ok := asc.mutation.Locked(); !ok {
		v := appstock.DefaultLocked
		asc.mutation.SetLocked(v)
	}
	if _, ok := asc.mutation.InService(); !ok {
		v := appstock.DefaultInService
		asc.mutation.SetInService(v)
	}
	if _, ok := asc.mutation.WaitStart(); !ok {
		v := appstock.DefaultWaitStart
		asc.mutation.SetWaitStart(v)
	}
	if _, ok := asc.mutation.Sold(); !ok {
		v := appstock.DefaultSold
		asc.mutation.SetSold(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asc *AppStockCreate) check() error {
	if _, ok := asc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "AppStock.ent_id"`)}
	}
	if _, ok := asc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "AppStock.created_at"`)}
	}
	if _, ok := asc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "AppStock.updated_at"`)}
	}
	if _, ok := asc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "AppStock.deleted_at"`)}
	}
	return nil
}

func (asc *AppStockCreate) sqlSave(ctx context.Context) (*AppStock, error) {
	if err := asc.check(); err != nil {
		return nil, err
	}
	_node, _spec := asc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	asc.mutation.id = &_node.ID
	asc.mutation.done = true
	return _node, nil
}

func (asc *AppStockCreate) createSpec() (*AppStock, *sqlgraph.CreateSpec) {
	var (
		_node = &AppStock{config: asc.config}
		_spec = sqlgraph.NewCreateSpec(appstock.Table, sqlgraph.NewFieldSpec(appstock.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = asc.conflict
	if id, ok := asc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := asc.mutation.EntID(); ok {
		_spec.SetField(appstock.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := asc.mutation.CreatedAt(); ok {
		_spec.SetField(appstock.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := asc.mutation.UpdatedAt(); ok {
		_spec.SetField(appstock.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := asc.mutation.DeletedAt(); ok {
		_spec.SetField(appstock.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := asc.mutation.AppGoodID(); ok {
		_spec.SetField(appstock.FieldAppGoodID, field.TypeUUID, value)
		_node.AppGoodID = value
	}
	if value, ok := asc.mutation.Reserved(); ok {
		_spec.SetField(appstock.FieldReserved, field.TypeOther, value)
		_node.Reserved = value
	}
	if value, ok := asc.mutation.SpotQuantity(); ok {
		_spec.SetField(appstock.FieldSpotQuantity, field.TypeOther, value)
		_node.SpotQuantity = value
	}
	if value, ok := asc.mutation.Locked(); ok {
		_spec.SetField(appstock.FieldLocked, field.TypeOther, value)
		_node.Locked = value
	}
	if value, ok := asc.mutation.InService(); ok {
		_spec.SetField(appstock.FieldInService, field.TypeOther, value)
		_node.InService = value
	}
	if value, ok := asc.mutation.WaitStart(); ok {
		_spec.SetField(appstock.FieldWaitStart, field.TypeOther, value)
		_node.WaitStart = value
	}
	if value, ok := asc.mutation.Sold(); ok {
		_spec.SetField(appstock.FieldSold, field.TypeOther, value)
		_node.Sold = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppStock.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppStockUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (asc *AppStockCreate) OnConflict(opts ...sql.ConflictOption) *AppStockUpsertOne {
	asc.conflict = opts
	return &AppStockUpsertOne{
		create: asc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppStock.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (asc *AppStockCreate) OnConflictColumns(columns ...string) *AppStockUpsertOne {
	asc.conflict = append(asc.conflict, sql.ConflictColumns(columns...))
	return &AppStockUpsertOne{
		create: asc,
	}
}

type (
	// AppStockUpsertOne is the builder for "upsert"-ing
	//  one AppStock node.
	AppStockUpsertOne struct {
		create *AppStockCreate
	}

	// AppStockUpsert is the "OnConflict" setter.
	AppStockUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *AppStockUpsert) SetEntID(v uuid.UUID) *AppStockUpsert {
	u.Set(appstock.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppStockUpsert) UpdateEntID() *AppStockUpsert {
	u.SetExcluded(appstock.FieldEntID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppStockUpsert) SetCreatedAt(v uint32) *AppStockUpsert {
	u.Set(appstock.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppStockUpsert) UpdateCreatedAt() *AppStockUpsert {
	u.SetExcluded(appstock.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppStockUpsert) AddCreatedAt(v uint32) *AppStockUpsert {
	u.Add(appstock.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppStockUpsert) SetUpdatedAt(v uint32) *AppStockUpsert {
	u.Set(appstock.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppStockUpsert) UpdateUpdatedAt() *AppStockUpsert {
	u.SetExcluded(appstock.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppStockUpsert) AddUpdatedAt(v uint32) *AppStockUpsert {
	u.Add(appstock.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppStockUpsert) SetDeletedAt(v uint32) *AppStockUpsert {
	u.Set(appstock.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppStockUpsert) UpdateDeletedAt() *AppStockUpsert {
	u.SetExcluded(appstock.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppStockUpsert) AddDeletedAt(v uint32) *AppStockUpsert {
	u.Add(appstock.FieldDeletedAt, v)
	return u
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppStockUpsert) SetAppGoodID(v uuid.UUID) *AppStockUpsert {
	u.Set(appstock.FieldAppGoodID, v)
	return u
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppStockUpsert) UpdateAppGoodID() *AppStockUpsert {
	u.SetExcluded(appstock.FieldAppGoodID)
	return u
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppStockUpsert) ClearAppGoodID() *AppStockUpsert {
	u.SetNull(appstock.FieldAppGoodID)
	return u
}

// SetReserved sets the "reserved" field.
func (u *AppStockUpsert) SetReserved(v decimal.Decimal) *AppStockUpsert {
	u.Set(appstock.FieldReserved, v)
	return u
}

// UpdateReserved sets the "reserved" field to the value that was provided on create.
func (u *AppStockUpsert) UpdateReserved() *AppStockUpsert {
	u.SetExcluded(appstock.FieldReserved)
	return u
}

// ClearReserved clears the value of the "reserved" field.
func (u *AppStockUpsert) ClearReserved() *AppStockUpsert {
	u.SetNull(appstock.FieldReserved)
	return u
}

// SetSpotQuantity sets the "spot_quantity" field.
func (u *AppStockUpsert) SetSpotQuantity(v decimal.Decimal) *AppStockUpsert {
	u.Set(appstock.FieldSpotQuantity, v)
	return u
}

// UpdateSpotQuantity sets the "spot_quantity" field to the value that was provided on create.
func (u *AppStockUpsert) UpdateSpotQuantity() *AppStockUpsert {
	u.SetExcluded(appstock.FieldSpotQuantity)
	return u
}

// ClearSpotQuantity clears the value of the "spot_quantity" field.
func (u *AppStockUpsert) ClearSpotQuantity() *AppStockUpsert {
	u.SetNull(appstock.FieldSpotQuantity)
	return u
}

// SetLocked sets the "locked" field.
func (u *AppStockUpsert) SetLocked(v decimal.Decimal) *AppStockUpsert {
	u.Set(appstock.FieldLocked, v)
	return u
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *AppStockUpsert) UpdateLocked() *AppStockUpsert {
	u.SetExcluded(appstock.FieldLocked)
	return u
}

// ClearLocked clears the value of the "locked" field.
func (u *AppStockUpsert) ClearLocked() *AppStockUpsert {
	u.SetNull(appstock.FieldLocked)
	return u
}

// SetInService sets the "in_service" field.
func (u *AppStockUpsert) SetInService(v decimal.Decimal) *AppStockUpsert {
	u.Set(appstock.FieldInService, v)
	return u
}

// UpdateInService sets the "in_service" field to the value that was provided on create.
func (u *AppStockUpsert) UpdateInService() *AppStockUpsert {
	u.SetExcluded(appstock.FieldInService)
	return u
}

// ClearInService clears the value of the "in_service" field.
func (u *AppStockUpsert) ClearInService() *AppStockUpsert {
	u.SetNull(appstock.FieldInService)
	return u
}

// SetWaitStart sets the "wait_start" field.
func (u *AppStockUpsert) SetWaitStart(v decimal.Decimal) *AppStockUpsert {
	u.Set(appstock.FieldWaitStart, v)
	return u
}

// UpdateWaitStart sets the "wait_start" field to the value that was provided on create.
func (u *AppStockUpsert) UpdateWaitStart() *AppStockUpsert {
	u.SetExcluded(appstock.FieldWaitStart)
	return u
}

// ClearWaitStart clears the value of the "wait_start" field.
func (u *AppStockUpsert) ClearWaitStart() *AppStockUpsert {
	u.SetNull(appstock.FieldWaitStart)
	return u
}

// SetSold sets the "sold" field.
func (u *AppStockUpsert) SetSold(v decimal.Decimal) *AppStockUpsert {
	u.Set(appstock.FieldSold, v)
	return u
}

// UpdateSold sets the "sold" field to the value that was provided on create.
func (u *AppStockUpsert) UpdateSold() *AppStockUpsert {
	u.SetExcluded(appstock.FieldSold)
	return u
}

// ClearSold clears the value of the "sold" field.
func (u *AppStockUpsert) ClearSold() *AppStockUpsert {
	u.SetNull(appstock.FieldSold)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppStock.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appstock.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppStockUpsertOne) UpdateNewValues() *AppStockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appstock.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppStock.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppStockUpsertOne) Ignore() *AppStockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppStockUpsertOne) DoNothing() *AppStockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppStockCreate.OnConflict
// documentation for more info.
func (u *AppStockUpsertOne) Update(set func(*AppStockUpsert)) *AppStockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppStockUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppStockUpsertOne) SetEntID(v uuid.UUID) *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppStockUpsertOne) UpdateEntID() *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AppStockUpsertOne) SetCreatedAt(v uint32) *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppStockUpsertOne) AddCreatedAt(v uint32) *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppStockUpsertOne) UpdateCreatedAt() *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppStockUpsertOne) SetUpdatedAt(v uint32) *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppStockUpsertOne) AddUpdatedAt(v uint32) *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppStockUpsertOne) UpdateUpdatedAt() *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppStockUpsertOne) SetDeletedAt(v uint32) *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppStockUpsertOne) AddDeletedAt(v uint32) *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppStockUpsertOne) UpdateDeletedAt() *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppStockUpsertOne) SetAppGoodID(v uuid.UUID) *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppStockUpsertOne) UpdateAppGoodID() *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppStockUpsertOne) ClearAppGoodID() *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.ClearAppGoodID()
	})
}

// SetReserved sets the "reserved" field.
func (u *AppStockUpsertOne) SetReserved(v decimal.Decimal) *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.SetReserved(v)
	})
}

// UpdateReserved sets the "reserved" field to the value that was provided on create.
func (u *AppStockUpsertOne) UpdateReserved() *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.UpdateReserved()
	})
}

// ClearReserved clears the value of the "reserved" field.
func (u *AppStockUpsertOne) ClearReserved() *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.ClearReserved()
	})
}

// SetSpotQuantity sets the "spot_quantity" field.
func (u *AppStockUpsertOne) SetSpotQuantity(v decimal.Decimal) *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.SetSpotQuantity(v)
	})
}

// UpdateSpotQuantity sets the "spot_quantity" field to the value that was provided on create.
func (u *AppStockUpsertOne) UpdateSpotQuantity() *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.UpdateSpotQuantity()
	})
}

// ClearSpotQuantity clears the value of the "spot_quantity" field.
func (u *AppStockUpsertOne) ClearSpotQuantity() *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.ClearSpotQuantity()
	})
}

// SetLocked sets the "locked" field.
func (u *AppStockUpsertOne) SetLocked(v decimal.Decimal) *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.SetLocked(v)
	})
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *AppStockUpsertOne) UpdateLocked() *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.UpdateLocked()
	})
}

// ClearLocked clears the value of the "locked" field.
func (u *AppStockUpsertOne) ClearLocked() *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.ClearLocked()
	})
}

// SetInService sets the "in_service" field.
func (u *AppStockUpsertOne) SetInService(v decimal.Decimal) *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.SetInService(v)
	})
}

// UpdateInService sets the "in_service" field to the value that was provided on create.
func (u *AppStockUpsertOne) UpdateInService() *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.UpdateInService()
	})
}

// ClearInService clears the value of the "in_service" field.
func (u *AppStockUpsertOne) ClearInService() *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.ClearInService()
	})
}

// SetWaitStart sets the "wait_start" field.
func (u *AppStockUpsertOne) SetWaitStart(v decimal.Decimal) *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.SetWaitStart(v)
	})
}

// UpdateWaitStart sets the "wait_start" field to the value that was provided on create.
func (u *AppStockUpsertOne) UpdateWaitStart() *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.UpdateWaitStart()
	})
}

// ClearWaitStart clears the value of the "wait_start" field.
func (u *AppStockUpsertOne) ClearWaitStart() *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.ClearWaitStart()
	})
}

// SetSold sets the "sold" field.
func (u *AppStockUpsertOne) SetSold(v decimal.Decimal) *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.SetSold(v)
	})
}

// UpdateSold sets the "sold" field to the value that was provided on create.
func (u *AppStockUpsertOne) UpdateSold() *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.UpdateSold()
	})
}

// ClearSold clears the value of the "sold" field.
func (u *AppStockUpsertOne) ClearSold() *AppStockUpsertOne {
	return u.Update(func(s *AppStockUpsert) {
		s.ClearSold()
	})
}

// Exec executes the query.
func (u *AppStockUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppStockCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppStockUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppStockUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppStockUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppStockCreateBulk is the builder for creating many AppStock entities in bulk.
type AppStockCreateBulk struct {
	config
	err      error
	builders []*AppStockCreate
	conflict []sql.ConflictOption
}

// Save creates the AppStock entities in the database.
func (ascb *AppStockCreateBulk) Save(ctx context.Context) ([]*AppStock, error) {
	if ascb.err != nil {
		return nil, ascb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ascb.builders))
	nodes := make([]*AppStock, len(ascb.builders))
	mutators := make([]Mutator, len(ascb.builders))
	for i := range ascb.builders {
		func(i int, root context.Context) {
			builder := ascb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppStockMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ascb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ascb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ascb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ascb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ascb *AppStockCreateBulk) SaveX(ctx context.Context) []*AppStock {
	v, err := ascb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ascb *AppStockCreateBulk) Exec(ctx context.Context) error {
	_, err := ascb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ascb *AppStockCreateBulk) ExecX(ctx context.Context) {
	if err := ascb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppStock.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppStockUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (ascb *AppStockCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppStockUpsertBulk {
	ascb.conflict = opts
	return &AppStockUpsertBulk{
		create: ascb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppStock.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ascb *AppStockCreateBulk) OnConflictColumns(columns ...string) *AppStockUpsertBulk {
	ascb.conflict = append(ascb.conflict, sql.ConflictColumns(columns...))
	return &AppStockUpsertBulk{
		create: ascb,
	}
}

// AppStockUpsertBulk is the builder for "upsert"-ing
// a bulk of AppStock nodes.
type AppStockUpsertBulk struct {
	create *AppStockCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppStock.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appstock.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppStockUpsertBulk) UpdateNewValues() *AppStockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appstock.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppStock.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppStockUpsertBulk) Ignore() *AppStockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppStockUpsertBulk) DoNothing() *AppStockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppStockCreateBulk.OnConflict
// documentation for more info.
func (u *AppStockUpsertBulk) Update(set func(*AppStockUpsert)) *AppStockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppStockUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppStockUpsertBulk) SetEntID(v uuid.UUID) *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppStockUpsertBulk) UpdateEntID() *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AppStockUpsertBulk) SetCreatedAt(v uint32) *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppStockUpsertBulk) AddCreatedAt(v uint32) *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppStockUpsertBulk) UpdateCreatedAt() *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppStockUpsertBulk) SetUpdatedAt(v uint32) *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppStockUpsertBulk) AddUpdatedAt(v uint32) *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppStockUpsertBulk) UpdateUpdatedAt() *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppStockUpsertBulk) SetDeletedAt(v uint32) *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppStockUpsertBulk) AddDeletedAt(v uint32) *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppStockUpsertBulk) UpdateDeletedAt() *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppStockUpsertBulk) SetAppGoodID(v uuid.UUID) *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppStockUpsertBulk) UpdateAppGoodID() *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppStockUpsertBulk) ClearAppGoodID() *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.ClearAppGoodID()
	})
}

// SetReserved sets the "reserved" field.
func (u *AppStockUpsertBulk) SetReserved(v decimal.Decimal) *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.SetReserved(v)
	})
}

// UpdateReserved sets the "reserved" field to the value that was provided on create.
func (u *AppStockUpsertBulk) UpdateReserved() *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.UpdateReserved()
	})
}

// ClearReserved clears the value of the "reserved" field.
func (u *AppStockUpsertBulk) ClearReserved() *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.ClearReserved()
	})
}

// SetSpotQuantity sets the "spot_quantity" field.
func (u *AppStockUpsertBulk) SetSpotQuantity(v decimal.Decimal) *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.SetSpotQuantity(v)
	})
}

// UpdateSpotQuantity sets the "spot_quantity" field to the value that was provided on create.
func (u *AppStockUpsertBulk) UpdateSpotQuantity() *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.UpdateSpotQuantity()
	})
}

// ClearSpotQuantity clears the value of the "spot_quantity" field.
func (u *AppStockUpsertBulk) ClearSpotQuantity() *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.ClearSpotQuantity()
	})
}

// SetLocked sets the "locked" field.
func (u *AppStockUpsertBulk) SetLocked(v decimal.Decimal) *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.SetLocked(v)
	})
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *AppStockUpsertBulk) UpdateLocked() *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.UpdateLocked()
	})
}

// ClearLocked clears the value of the "locked" field.
func (u *AppStockUpsertBulk) ClearLocked() *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.ClearLocked()
	})
}

// SetInService sets the "in_service" field.
func (u *AppStockUpsertBulk) SetInService(v decimal.Decimal) *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.SetInService(v)
	})
}

// UpdateInService sets the "in_service" field to the value that was provided on create.
func (u *AppStockUpsertBulk) UpdateInService() *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.UpdateInService()
	})
}

// ClearInService clears the value of the "in_service" field.
func (u *AppStockUpsertBulk) ClearInService() *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.ClearInService()
	})
}

// SetWaitStart sets the "wait_start" field.
func (u *AppStockUpsertBulk) SetWaitStart(v decimal.Decimal) *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.SetWaitStart(v)
	})
}

// UpdateWaitStart sets the "wait_start" field to the value that was provided on create.
func (u *AppStockUpsertBulk) UpdateWaitStart() *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.UpdateWaitStart()
	})
}

// ClearWaitStart clears the value of the "wait_start" field.
func (u *AppStockUpsertBulk) ClearWaitStart() *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.ClearWaitStart()
	})
}

// SetSold sets the "sold" field.
func (u *AppStockUpsertBulk) SetSold(v decimal.Decimal) *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.SetSold(v)
	})
}

// UpdateSold sets the "sold" field to the value that was provided on create.
func (u *AppStockUpsertBulk) UpdateSold() *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.UpdateSold()
	})
}

// ClearSold clears the value of the "sold" field.
func (u *AppStockUpsertBulk) ClearSold() *AppStockUpsertBulk {
	return u.Update(func(s *AppStockUpsert) {
		s.ClearSold()
	})
}

// Exec executes the query.
func (u *AppStockUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the AppStockCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppStockCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppStockUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

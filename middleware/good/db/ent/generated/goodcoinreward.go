// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/goodcoinreward"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// GoodCoinReward is the model entity for the GoodCoinReward schema.
type GoodCoinReward struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
	// RewardTid holds the value of the "reward_tid" field.
	RewardTid uuid.UUID `json:"reward_tid,omitempty"`
	// NextRewardStartAmount holds the value of the "next_reward_start_amount" field.
	NextRewardStartAmount decimal.Decimal `json:"next_reward_start_amount,omitempty"`
	// LastRewardAmount holds the value of the "last_reward_amount" field.
	LastRewardAmount decimal.Decimal `json:"last_reward_amount,omitempty"`
	// LastUnitRewardAmount holds the value of the "last_unit_reward_amount" field.
	LastUnitRewardAmount decimal.Decimal `json:"last_unit_reward_amount,omitempty"`
	// TotalRewardAmount holds the value of the "total_reward_amount" field.
	TotalRewardAmount decimal.Decimal `json:"total_reward_amount,omitempty"`
	selectValues      sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoodCoinReward) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case goodcoinreward.FieldNextRewardStartAmount, goodcoinreward.FieldLastRewardAmount, goodcoinreward.FieldLastUnitRewardAmount, goodcoinreward.FieldTotalRewardAmount:
			values[i] = new(decimal.Decimal)
		case goodcoinreward.FieldID, goodcoinreward.FieldCreatedAt, goodcoinreward.FieldUpdatedAt, goodcoinreward.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case goodcoinreward.FieldEntID, goodcoinreward.FieldGoodID, goodcoinreward.FieldCoinTypeID, goodcoinreward.FieldRewardTid:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoodCoinReward fields.
func (gcr *GoodCoinReward) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goodcoinreward.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gcr.ID = uint32(value.Int64)
		case goodcoinreward.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				gcr.EntID = *value
			}
		case goodcoinreward.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gcr.CreatedAt = uint32(value.Int64)
			}
		case goodcoinreward.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gcr.UpdatedAt = uint32(value.Int64)
			}
		case goodcoinreward.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				gcr.DeletedAt = uint32(value.Int64)
			}
		case goodcoinreward.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				gcr.GoodID = *value
			}
		case goodcoinreward.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				gcr.CoinTypeID = *value
			}
		case goodcoinreward.FieldRewardTid:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field reward_tid", values[i])
			} else if value != nil {
				gcr.RewardTid = *value
			}
		case goodcoinreward.FieldNextRewardStartAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field next_reward_start_amount", values[i])
			} else if value != nil {
				gcr.NextRewardStartAmount = *value
			}
		case goodcoinreward.FieldLastRewardAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field last_reward_amount", values[i])
			} else if value != nil {
				gcr.LastRewardAmount = *value
			}
		case goodcoinreward.FieldLastUnitRewardAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field last_unit_reward_amount", values[i])
			} else if value != nil {
				gcr.LastUnitRewardAmount = *value
			}
		case goodcoinreward.FieldTotalRewardAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field total_reward_amount", values[i])
			} else if value != nil {
				gcr.TotalRewardAmount = *value
			}
		default:
			gcr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GoodCoinReward.
// This includes values selected through modifiers, order, etc.
func (gcr *GoodCoinReward) Value(name string) (ent.Value, error) {
	return gcr.selectValues.Get(name)
}

// Update returns a builder for updating this GoodCoinReward.
// Note that you need to call GoodCoinReward.Unwrap() before calling this method if this GoodCoinReward
// was returned from a transaction, and the transaction was committed or rolled back.
func (gcr *GoodCoinReward) Update() *GoodCoinRewardUpdateOne {
	return NewGoodCoinRewardClient(gcr.config).UpdateOne(gcr)
}

// Unwrap unwraps the GoodCoinReward entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gcr *GoodCoinReward) Unwrap() *GoodCoinReward {
	_tx, ok := gcr.config.driver.(*txDriver)
	if !ok {
		panic("generated: GoodCoinReward is not a transactional entity")
	}
	gcr.config.driver = _tx.drv
	return gcr
}

// String implements the fmt.Stringer.
func (gcr *GoodCoinReward) String() string {
	var builder strings.Builder
	builder.WriteString("GoodCoinReward(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gcr.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", gcr.EntID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", gcr.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", gcr.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", gcr.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", gcr.GoodID))
	builder.WriteString(", ")
	builder.WriteString("coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", gcr.CoinTypeID))
	builder.WriteString(", ")
	builder.WriteString("reward_tid=")
	builder.WriteString(fmt.Sprintf("%v", gcr.RewardTid))
	builder.WriteString(", ")
	builder.WriteString("next_reward_start_amount=")
	builder.WriteString(fmt.Sprintf("%v", gcr.NextRewardStartAmount))
	builder.WriteString(", ")
	builder.WriteString("last_reward_amount=")
	builder.WriteString(fmt.Sprintf("%v", gcr.LastRewardAmount))
	builder.WriteString(", ")
	builder.WriteString("last_unit_reward_amount=")
	builder.WriteString(fmt.Sprintf("%v", gcr.LastUnitRewardAmount))
	builder.WriteString(", ")
	builder.WriteString("total_reward_amount=")
	builder.WriteString(fmt.Sprintf("%v", gcr.TotalRewardAmount))
	builder.WriteByte(')')
	return builder.String()
}

// GoodCoinRewards is a parsable slice of GoodCoinReward.
type GoodCoinRewards []*GoodCoinReward

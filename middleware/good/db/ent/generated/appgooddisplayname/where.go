// Code generated by ent, DO NOT EDIT.

package appgooddisplayname

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldEQ(FieldEntID, v))
}

// AppGoodID applies equality check predicate on the "app_good_id" field. It's identical to AppGoodIDEQ.
func AppGoodID(v uuid.UUID) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldEQ(FieldAppGoodID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldEQ(FieldName, v))
}

// Index applies equality check predicate on the "index" field. It's identical to IndexEQ.
func Index(v uint8) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldEQ(FieldIndex, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldLTE(FieldEntID, v))
}

// AppGoodIDEQ applies the EQ predicate on the "app_good_id" field.
func AppGoodIDEQ(v uuid.UUID) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldEQ(FieldAppGoodID, v))
}

// AppGoodIDNEQ applies the NEQ predicate on the "app_good_id" field.
func AppGoodIDNEQ(v uuid.UUID) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldNEQ(FieldAppGoodID, v))
}

// AppGoodIDIn applies the In predicate on the "app_good_id" field.
func AppGoodIDIn(vs ...uuid.UUID) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldIn(FieldAppGoodID, vs...))
}

// AppGoodIDNotIn applies the NotIn predicate on the "app_good_id" field.
func AppGoodIDNotIn(vs ...uuid.UUID) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldNotIn(FieldAppGoodID, vs...))
}

// AppGoodIDGT applies the GT predicate on the "app_good_id" field.
func AppGoodIDGT(v uuid.UUID) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldGT(FieldAppGoodID, v))
}

// AppGoodIDGTE applies the GTE predicate on the "app_good_id" field.
func AppGoodIDGTE(v uuid.UUID) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldGTE(FieldAppGoodID, v))
}

// AppGoodIDLT applies the LT predicate on the "app_good_id" field.
func AppGoodIDLT(v uuid.UUID) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldLT(FieldAppGoodID, v))
}

// AppGoodIDLTE applies the LTE predicate on the "app_good_id" field.
func AppGoodIDLTE(v uuid.UUID) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldLTE(FieldAppGoodID, v))
}

// AppGoodIDIsNil applies the IsNil predicate on the "app_good_id" field.
func AppGoodIDIsNil() predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldIsNull(FieldAppGoodID))
}

// AppGoodIDNotNil applies the NotNil predicate on the "app_good_id" field.
func AppGoodIDNotNil() predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldNotNull(FieldAppGoodID))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldContainsFold(FieldName, v))
}

// IndexEQ applies the EQ predicate on the "index" field.
func IndexEQ(v uint8) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldEQ(FieldIndex, v))
}

// IndexNEQ applies the NEQ predicate on the "index" field.
func IndexNEQ(v uint8) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldNEQ(FieldIndex, v))
}

// IndexIn applies the In predicate on the "index" field.
func IndexIn(vs ...uint8) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldIn(FieldIndex, vs...))
}

// IndexNotIn applies the NotIn predicate on the "index" field.
func IndexNotIn(vs ...uint8) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldNotIn(FieldIndex, vs...))
}

// IndexGT applies the GT predicate on the "index" field.
func IndexGT(v uint8) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldGT(FieldIndex, v))
}

// IndexGTE applies the GTE predicate on the "index" field.
func IndexGTE(v uint8) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldGTE(FieldIndex, v))
}

// IndexLT applies the LT predicate on the "index" field.
func IndexLT(v uint8) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldLT(FieldIndex, v))
}

// IndexLTE applies the LTE predicate on the "index" field.
func IndexLTE(v uint8) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldLTE(FieldIndex, v))
}

// IndexIsNil applies the IsNil predicate on the "index" field.
func IndexIsNil() predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldIsNull(FieldIndex))
}

// IndexNotNil applies the NotNil predicate on the "index" field.
func IndexNotNil() predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.FieldNotNull(FieldIndex))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppGoodDisplayName) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppGoodDisplayName) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppGoodDisplayName) predicate.AppGoodDisplayName {
	return predicate.AppGoodDisplayName(sql.NotPredicates(p))
}

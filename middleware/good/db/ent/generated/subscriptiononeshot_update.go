// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/subscriptiononeshot"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// SubscriptionOneShotUpdate is the builder for updating SubscriptionOneShot entities.
type SubscriptionOneShotUpdate struct {
	config
	hooks     []Hook
	mutation  *SubscriptionOneShotMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SubscriptionOneShotUpdate builder.
func (sosu *SubscriptionOneShotUpdate) Where(ps ...predicate.SubscriptionOneShot) *SubscriptionOneShotUpdate {
	sosu.mutation.Where(ps...)
	return sosu
}

// SetEntID sets the "ent_id" field.
func (sosu *SubscriptionOneShotUpdate) SetEntID(u uuid.UUID) *SubscriptionOneShotUpdate {
	sosu.mutation.SetEntID(u)
	return sosu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (sosu *SubscriptionOneShotUpdate) SetNillableEntID(u *uuid.UUID) *SubscriptionOneShotUpdate {
	if u != nil {
		sosu.SetEntID(*u)
	}
	return sosu
}

// SetCreatedAt sets the "created_at" field.
func (sosu *SubscriptionOneShotUpdate) SetCreatedAt(u uint32) *SubscriptionOneShotUpdate {
	sosu.mutation.ResetCreatedAt()
	sosu.mutation.SetCreatedAt(u)
	return sosu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sosu *SubscriptionOneShotUpdate) SetNillableCreatedAt(u *uint32) *SubscriptionOneShotUpdate {
	if u != nil {
		sosu.SetCreatedAt(*u)
	}
	return sosu
}

// AddCreatedAt adds u to the "created_at" field.
func (sosu *SubscriptionOneShotUpdate) AddCreatedAt(u int32) *SubscriptionOneShotUpdate {
	sosu.mutation.AddCreatedAt(u)
	return sosu
}

// SetUpdatedAt sets the "updated_at" field.
func (sosu *SubscriptionOneShotUpdate) SetUpdatedAt(u uint32) *SubscriptionOneShotUpdate {
	sosu.mutation.ResetUpdatedAt()
	sosu.mutation.SetUpdatedAt(u)
	return sosu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (sosu *SubscriptionOneShotUpdate) AddUpdatedAt(u int32) *SubscriptionOneShotUpdate {
	sosu.mutation.AddUpdatedAt(u)
	return sosu
}

// SetDeletedAt sets the "deleted_at" field.
func (sosu *SubscriptionOneShotUpdate) SetDeletedAt(u uint32) *SubscriptionOneShotUpdate {
	sosu.mutation.ResetDeletedAt()
	sosu.mutation.SetDeletedAt(u)
	return sosu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sosu *SubscriptionOneShotUpdate) SetNillableDeletedAt(u *uint32) *SubscriptionOneShotUpdate {
	if u != nil {
		sosu.SetDeletedAt(*u)
	}
	return sosu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (sosu *SubscriptionOneShotUpdate) AddDeletedAt(u int32) *SubscriptionOneShotUpdate {
	sosu.mutation.AddDeletedAt(u)
	return sosu
}

// SetGoodID sets the "good_id" field.
func (sosu *SubscriptionOneShotUpdate) SetGoodID(u uuid.UUID) *SubscriptionOneShotUpdate {
	sosu.mutation.SetGoodID(u)
	return sosu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (sosu *SubscriptionOneShotUpdate) SetNillableGoodID(u *uuid.UUID) *SubscriptionOneShotUpdate {
	if u != nil {
		sosu.SetGoodID(*u)
	}
	return sosu
}

// ClearGoodID clears the value of the "good_id" field.
func (sosu *SubscriptionOneShotUpdate) ClearGoodID() *SubscriptionOneShotUpdate {
	sosu.mutation.ClearGoodID()
	return sosu
}

// SetQuota sets the "quota" field.
func (sosu *SubscriptionOneShotUpdate) SetQuota(u uint32) *SubscriptionOneShotUpdate {
	sosu.mutation.ResetQuota()
	sosu.mutation.SetQuota(u)
	return sosu
}

// SetNillableQuota sets the "quota" field if the given value is not nil.
func (sosu *SubscriptionOneShotUpdate) SetNillableQuota(u *uint32) *SubscriptionOneShotUpdate {
	if u != nil {
		sosu.SetQuota(*u)
	}
	return sosu
}

// AddQuota adds u to the "quota" field.
func (sosu *SubscriptionOneShotUpdate) AddQuota(u int32) *SubscriptionOneShotUpdate {
	sosu.mutation.AddQuota(u)
	return sosu
}

// ClearQuota clears the value of the "quota" field.
func (sosu *SubscriptionOneShotUpdate) ClearQuota() *SubscriptionOneShotUpdate {
	sosu.mutation.ClearQuota()
	return sosu
}

// SetUsdPrice sets the "usd_price" field.
func (sosu *SubscriptionOneShotUpdate) SetUsdPrice(d decimal.Decimal) *SubscriptionOneShotUpdate {
	sosu.mutation.SetUsdPrice(d)
	return sosu
}

// SetNillableUsdPrice sets the "usd_price" field if the given value is not nil.
func (sosu *SubscriptionOneShotUpdate) SetNillableUsdPrice(d *decimal.Decimal) *SubscriptionOneShotUpdate {
	if d != nil {
		sosu.SetUsdPrice(*d)
	}
	return sosu
}

// ClearUsdPrice clears the value of the "usd_price" field.
func (sosu *SubscriptionOneShotUpdate) ClearUsdPrice() *SubscriptionOneShotUpdate {
	sosu.mutation.ClearUsdPrice()
	return sosu
}

// Mutation returns the SubscriptionOneShotMutation object of the builder.
func (sosu *SubscriptionOneShotUpdate) Mutation() *SubscriptionOneShotMutation {
	return sosu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sosu *SubscriptionOneShotUpdate) Save(ctx context.Context) (int, error) {
	sosu.defaults()
	return withHooks(ctx, sosu.sqlSave, sosu.mutation, sosu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sosu *SubscriptionOneShotUpdate) SaveX(ctx context.Context) int {
	affected, err := sosu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sosu *SubscriptionOneShotUpdate) Exec(ctx context.Context) error {
	_, err := sosu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sosu *SubscriptionOneShotUpdate) ExecX(ctx context.Context) {
	if err := sosu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sosu *SubscriptionOneShotUpdate) defaults() {
	if _, ok := sosu.mutation.UpdatedAt(); !ok {
		v := subscriptiononeshot.UpdateDefaultUpdatedAt()
		sosu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sosu *SubscriptionOneShotUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubscriptionOneShotUpdate {
	sosu.modifiers = append(sosu.modifiers, modifiers...)
	return sosu
}

func (sosu *SubscriptionOneShotUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(subscriptiononeshot.Table, subscriptiononeshot.Columns, sqlgraph.NewFieldSpec(subscriptiononeshot.FieldID, field.TypeUint32))
	if ps := sosu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sosu.mutation.EntID(); ok {
		_spec.SetField(subscriptiononeshot.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := sosu.mutation.CreatedAt(); ok {
		_spec.SetField(subscriptiononeshot.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := sosu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(subscriptiononeshot.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := sosu.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptiononeshot.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := sosu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(subscriptiononeshot.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := sosu.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptiononeshot.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := sosu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(subscriptiononeshot.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := sosu.mutation.GoodID(); ok {
		_spec.SetField(subscriptiononeshot.FieldGoodID, field.TypeUUID, value)
	}
	if sosu.mutation.GoodIDCleared() {
		_spec.ClearField(subscriptiononeshot.FieldGoodID, field.TypeUUID)
	}
	if value, ok := sosu.mutation.Quota(); ok {
		_spec.SetField(subscriptiononeshot.FieldQuota, field.TypeUint32, value)
	}
	if value, ok := sosu.mutation.AddedQuota(); ok {
		_spec.AddField(subscriptiononeshot.FieldQuota, field.TypeUint32, value)
	}
	if sosu.mutation.QuotaCleared() {
		_spec.ClearField(subscriptiononeshot.FieldQuota, field.TypeUint32)
	}
	if value, ok := sosu.mutation.UsdPrice(); ok {
		_spec.SetField(subscriptiononeshot.FieldUsdPrice, field.TypeOther, value)
	}
	if sosu.mutation.UsdPriceCleared() {
		_spec.ClearField(subscriptiononeshot.FieldUsdPrice, field.TypeOther)
	}
	_spec.AddModifiers(sosu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sosu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptiononeshot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sosu.mutation.done = true
	return n, nil
}

// SubscriptionOneShotUpdateOne is the builder for updating a single SubscriptionOneShot entity.
type SubscriptionOneShotUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SubscriptionOneShotMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (sosuo *SubscriptionOneShotUpdateOne) SetEntID(u uuid.UUID) *SubscriptionOneShotUpdateOne {
	sosuo.mutation.SetEntID(u)
	return sosuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (sosuo *SubscriptionOneShotUpdateOne) SetNillableEntID(u *uuid.UUID) *SubscriptionOneShotUpdateOne {
	if u != nil {
		sosuo.SetEntID(*u)
	}
	return sosuo
}

// SetCreatedAt sets the "created_at" field.
func (sosuo *SubscriptionOneShotUpdateOne) SetCreatedAt(u uint32) *SubscriptionOneShotUpdateOne {
	sosuo.mutation.ResetCreatedAt()
	sosuo.mutation.SetCreatedAt(u)
	return sosuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sosuo *SubscriptionOneShotUpdateOne) SetNillableCreatedAt(u *uint32) *SubscriptionOneShotUpdateOne {
	if u != nil {
		sosuo.SetCreatedAt(*u)
	}
	return sosuo
}

// AddCreatedAt adds u to the "created_at" field.
func (sosuo *SubscriptionOneShotUpdateOne) AddCreatedAt(u int32) *SubscriptionOneShotUpdateOne {
	sosuo.mutation.AddCreatedAt(u)
	return sosuo
}

// SetUpdatedAt sets the "updated_at" field.
func (sosuo *SubscriptionOneShotUpdateOne) SetUpdatedAt(u uint32) *SubscriptionOneShotUpdateOne {
	sosuo.mutation.ResetUpdatedAt()
	sosuo.mutation.SetUpdatedAt(u)
	return sosuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (sosuo *SubscriptionOneShotUpdateOne) AddUpdatedAt(u int32) *SubscriptionOneShotUpdateOne {
	sosuo.mutation.AddUpdatedAt(u)
	return sosuo
}

// SetDeletedAt sets the "deleted_at" field.
func (sosuo *SubscriptionOneShotUpdateOne) SetDeletedAt(u uint32) *SubscriptionOneShotUpdateOne {
	sosuo.mutation.ResetDeletedAt()
	sosuo.mutation.SetDeletedAt(u)
	return sosuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sosuo *SubscriptionOneShotUpdateOne) SetNillableDeletedAt(u *uint32) *SubscriptionOneShotUpdateOne {
	if u != nil {
		sosuo.SetDeletedAt(*u)
	}
	return sosuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (sosuo *SubscriptionOneShotUpdateOne) AddDeletedAt(u int32) *SubscriptionOneShotUpdateOne {
	sosuo.mutation.AddDeletedAt(u)
	return sosuo
}

// SetGoodID sets the "good_id" field.
func (sosuo *SubscriptionOneShotUpdateOne) SetGoodID(u uuid.UUID) *SubscriptionOneShotUpdateOne {
	sosuo.mutation.SetGoodID(u)
	return sosuo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (sosuo *SubscriptionOneShotUpdateOne) SetNillableGoodID(u *uuid.UUID) *SubscriptionOneShotUpdateOne {
	if u != nil {
		sosuo.SetGoodID(*u)
	}
	return sosuo
}

// ClearGoodID clears the value of the "good_id" field.
func (sosuo *SubscriptionOneShotUpdateOne) ClearGoodID() *SubscriptionOneShotUpdateOne {
	sosuo.mutation.ClearGoodID()
	return sosuo
}

// SetQuota sets the "quota" field.
func (sosuo *SubscriptionOneShotUpdateOne) SetQuota(u uint32) *SubscriptionOneShotUpdateOne {
	sosuo.mutation.ResetQuota()
	sosuo.mutation.SetQuota(u)
	return sosuo
}

// SetNillableQuota sets the "quota" field if the given value is not nil.
func (sosuo *SubscriptionOneShotUpdateOne) SetNillableQuota(u *uint32) *SubscriptionOneShotUpdateOne {
	if u != nil {
		sosuo.SetQuota(*u)
	}
	return sosuo
}

// AddQuota adds u to the "quota" field.
func (sosuo *SubscriptionOneShotUpdateOne) AddQuota(u int32) *SubscriptionOneShotUpdateOne {
	sosuo.mutation.AddQuota(u)
	return sosuo
}

// ClearQuota clears the value of the "quota" field.
func (sosuo *SubscriptionOneShotUpdateOne) ClearQuota() *SubscriptionOneShotUpdateOne {
	sosuo.mutation.ClearQuota()
	return sosuo
}

// SetUsdPrice sets the "usd_price" field.
func (sosuo *SubscriptionOneShotUpdateOne) SetUsdPrice(d decimal.Decimal) *SubscriptionOneShotUpdateOne {
	sosuo.mutation.SetUsdPrice(d)
	return sosuo
}

// SetNillableUsdPrice sets the "usd_price" field if the given value is not nil.
func (sosuo *SubscriptionOneShotUpdateOne) SetNillableUsdPrice(d *decimal.Decimal) *SubscriptionOneShotUpdateOne {
	if d != nil {
		sosuo.SetUsdPrice(*d)
	}
	return sosuo
}

// ClearUsdPrice clears the value of the "usd_price" field.
func (sosuo *SubscriptionOneShotUpdateOne) ClearUsdPrice() *SubscriptionOneShotUpdateOne {
	sosuo.mutation.ClearUsdPrice()
	return sosuo
}

// Mutation returns the SubscriptionOneShotMutation object of the builder.
func (sosuo *SubscriptionOneShotUpdateOne) Mutation() *SubscriptionOneShotMutation {
	return sosuo.mutation
}

// Where appends a list predicates to the SubscriptionOneShotUpdate builder.
func (sosuo *SubscriptionOneShotUpdateOne) Where(ps ...predicate.SubscriptionOneShot) *SubscriptionOneShotUpdateOne {
	sosuo.mutation.Where(ps...)
	return sosuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sosuo *SubscriptionOneShotUpdateOne) Select(field string, fields ...string) *SubscriptionOneShotUpdateOne {
	sosuo.fields = append([]string{field}, fields...)
	return sosuo
}

// Save executes the query and returns the updated SubscriptionOneShot entity.
func (sosuo *SubscriptionOneShotUpdateOne) Save(ctx context.Context) (*SubscriptionOneShot, error) {
	sosuo.defaults()
	return withHooks(ctx, sosuo.sqlSave, sosuo.mutation, sosuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sosuo *SubscriptionOneShotUpdateOne) SaveX(ctx context.Context) *SubscriptionOneShot {
	node, err := sosuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sosuo *SubscriptionOneShotUpdateOne) Exec(ctx context.Context) error {
	_, err := sosuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sosuo *SubscriptionOneShotUpdateOne) ExecX(ctx context.Context) {
	if err := sosuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sosuo *SubscriptionOneShotUpdateOne) defaults() {
	if _, ok := sosuo.mutation.UpdatedAt(); !ok {
		v := subscriptiononeshot.UpdateDefaultUpdatedAt()
		sosuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sosuo *SubscriptionOneShotUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubscriptionOneShotUpdateOne {
	sosuo.modifiers = append(sosuo.modifiers, modifiers...)
	return sosuo
}

func (sosuo *SubscriptionOneShotUpdateOne) sqlSave(ctx context.Context) (_node *SubscriptionOneShot, err error) {
	_spec := sqlgraph.NewUpdateSpec(subscriptiononeshot.Table, subscriptiononeshot.Columns, sqlgraph.NewFieldSpec(subscriptiononeshot.FieldID, field.TypeUint32))
	id, ok := sosuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "SubscriptionOneShot.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sosuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptiononeshot.FieldID)
		for _, f := range fields {
			if !subscriptiononeshot.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != subscriptiononeshot.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sosuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sosuo.mutation.EntID(); ok {
		_spec.SetField(subscriptiononeshot.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := sosuo.mutation.CreatedAt(); ok {
		_spec.SetField(subscriptiononeshot.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := sosuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(subscriptiononeshot.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := sosuo.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptiononeshot.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := sosuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(subscriptiononeshot.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := sosuo.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptiononeshot.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := sosuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(subscriptiononeshot.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := sosuo.mutation.GoodID(); ok {
		_spec.SetField(subscriptiononeshot.FieldGoodID, field.TypeUUID, value)
	}
	if sosuo.mutation.GoodIDCleared() {
		_spec.ClearField(subscriptiononeshot.FieldGoodID, field.TypeUUID)
	}
	if value, ok := sosuo.mutation.Quota(); ok {
		_spec.SetField(subscriptiononeshot.FieldQuota, field.TypeUint32, value)
	}
	if value, ok := sosuo.mutation.AddedQuota(); ok {
		_spec.AddField(subscriptiononeshot.FieldQuota, field.TypeUint32, value)
	}
	if sosuo.mutation.QuotaCleared() {
		_spec.ClearField(subscriptiononeshot.FieldQuota, field.TypeUint32)
	}
	if value, ok := sosuo.mutation.UsdPrice(); ok {
		_spec.SetField(subscriptiononeshot.FieldUsdPrice, field.TypeOther, value)
	}
	if sosuo.mutation.UsdPriceCleared() {
		_spec.ClearField(subscriptiononeshot.FieldUsdPrice, field.TypeOther)
	}
	_spec.AddModifiers(sosuo.modifiers...)
	_node = &SubscriptionOneShot{config: sosuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sosuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptiononeshot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sosuo.mutation.done = true
	return _node, nil
}

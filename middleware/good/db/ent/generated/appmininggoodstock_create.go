// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appmininggoodstock"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppMiningGoodStockCreate is the builder for creating a AppMiningGoodStock entity.
type AppMiningGoodStockCreate struct {
	config
	mutation *AppMiningGoodStockMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (amgsc *AppMiningGoodStockCreate) SetEntID(u uuid.UUID) *AppMiningGoodStockCreate {
	amgsc.mutation.SetEntID(u)
	return amgsc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (amgsc *AppMiningGoodStockCreate) SetNillableEntID(u *uuid.UUID) *AppMiningGoodStockCreate {
	if u != nil {
		amgsc.SetEntID(*u)
	}
	return amgsc
}

// SetCreatedAt sets the "created_at" field.
func (amgsc *AppMiningGoodStockCreate) SetCreatedAt(u uint32) *AppMiningGoodStockCreate {
	amgsc.mutation.SetCreatedAt(u)
	return amgsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (amgsc *AppMiningGoodStockCreate) SetNillableCreatedAt(u *uint32) *AppMiningGoodStockCreate {
	if u != nil {
		amgsc.SetCreatedAt(*u)
	}
	return amgsc
}

// SetUpdatedAt sets the "updated_at" field.
func (amgsc *AppMiningGoodStockCreate) SetUpdatedAt(u uint32) *AppMiningGoodStockCreate {
	amgsc.mutation.SetUpdatedAt(u)
	return amgsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (amgsc *AppMiningGoodStockCreate) SetNillableUpdatedAt(u *uint32) *AppMiningGoodStockCreate {
	if u != nil {
		amgsc.SetUpdatedAt(*u)
	}
	return amgsc
}

// SetDeletedAt sets the "deleted_at" field.
func (amgsc *AppMiningGoodStockCreate) SetDeletedAt(u uint32) *AppMiningGoodStockCreate {
	amgsc.mutation.SetDeletedAt(u)
	return amgsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (amgsc *AppMiningGoodStockCreate) SetNillableDeletedAt(u *uint32) *AppMiningGoodStockCreate {
	if u != nil {
		amgsc.SetDeletedAt(*u)
	}
	return amgsc
}

// SetAppGoodStockID sets the "app_good_stock_id" field.
func (amgsc *AppMiningGoodStockCreate) SetAppGoodStockID(u uuid.UUID) *AppMiningGoodStockCreate {
	amgsc.mutation.SetAppGoodStockID(u)
	return amgsc
}

// SetNillableAppGoodStockID sets the "app_good_stock_id" field if the given value is not nil.
func (amgsc *AppMiningGoodStockCreate) SetNillableAppGoodStockID(u *uuid.UUID) *AppMiningGoodStockCreate {
	if u != nil {
		amgsc.SetAppGoodStockID(*u)
	}
	return amgsc
}

// SetMiningGoodStockID sets the "mining_good_stock_id" field.
func (amgsc *AppMiningGoodStockCreate) SetMiningGoodStockID(u uuid.UUID) *AppMiningGoodStockCreate {
	amgsc.mutation.SetMiningGoodStockID(u)
	return amgsc
}

// SetNillableMiningGoodStockID sets the "mining_good_stock_id" field if the given value is not nil.
func (amgsc *AppMiningGoodStockCreate) SetNillableMiningGoodStockID(u *uuid.UUID) *AppMiningGoodStockCreate {
	if u != nil {
		amgsc.SetMiningGoodStockID(*u)
	}
	return amgsc
}

// SetReserved sets the "reserved" field.
func (amgsc *AppMiningGoodStockCreate) SetReserved(d decimal.Decimal) *AppMiningGoodStockCreate {
	amgsc.mutation.SetReserved(d)
	return amgsc
}

// SetNillableReserved sets the "reserved" field if the given value is not nil.
func (amgsc *AppMiningGoodStockCreate) SetNillableReserved(d *decimal.Decimal) *AppMiningGoodStockCreate {
	if d != nil {
		amgsc.SetReserved(*d)
	}
	return amgsc
}

// SetSpotQuantity sets the "spot_quantity" field.
func (amgsc *AppMiningGoodStockCreate) SetSpotQuantity(d decimal.Decimal) *AppMiningGoodStockCreate {
	amgsc.mutation.SetSpotQuantity(d)
	return amgsc
}

// SetNillableSpotQuantity sets the "spot_quantity" field if the given value is not nil.
func (amgsc *AppMiningGoodStockCreate) SetNillableSpotQuantity(d *decimal.Decimal) *AppMiningGoodStockCreate {
	if d != nil {
		amgsc.SetSpotQuantity(*d)
	}
	return amgsc
}

// SetLocked sets the "locked" field.
func (amgsc *AppMiningGoodStockCreate) SetLocked(d decimal.Decimal) *AppMiningGoodStockCreate {
	amgsc.mutation.SetLocked(d)
	return amgsc
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (amgsc *AppMiningGoodStockCreate) SetNillableLocked(d *decimal.Decimal) *AppMiningGoodStockCreate {
	if d != nil {
		amgsc.SetLocked(*d)
	}
	return amgsc
}

// SetInService sets the "in_service" field.
func (amgsc *AppMiningGoodStockCreate) SetInService(d decimal.Decimal) *AppMiningGoodStockCreate {
	amgsc.mutation.SetInService(d)
	return amgsc
}

// SetNillableInService sets the "in_service" field if the given value is not nil.
func (amgsc *AppMiningGoodStockCreate) SetNillableInService(d *decimal.Decimal) *AppMiningGoodStockCreate {
	if d != nil {
		amgsc.SetInService(*d)
	}
	return amgsc
}

// SetWaitStart sets the "wait_start" field.
func (amgsc *AppMiningGoodStockCreate) SetWaitStart(d decimal.Decimal) *AppMiningGoodStockCreate {
	amgsc.mutation.SetWaitStart(d)
	return amgsc
}

// SetNillableWaitStart sets the "wait_start" field if the given value is not nil.
func (amgsc *AppMiningGoodStockCreate) SetNillableWaitStart(d *decimal.Decimal) *AppMiningGoodStockCreate {
	if d != nil {
		amgsc.SetWaitStart(*d)
	}
	return amgsc
}

// SetSold sets the "sold" field.
func (amgsc *AppMiningGoodStockCreate) SetSold(d decimal.Decimal) *AppMiningGoodStockCreate {
	amgsc.mutation.SetSold(d)
	return amgsc
}

// SetNillableSold sets the "sold" field if the given value is not nil.
func (amgsc *AppMiningGoodStockCreate) SetNillableSold(d *decimal.Decimal) *AppMiningGoodStockCreate {
	if d != nil {
		amgsc.SetSold(*d)
	}
	return amgsc
}

// SetID sets the "id" field.
func (amgsc *AppMiningGoodStockCreate) SetID(u uint32) *AppMiningGoodStockCreate {
	amgsc.mutation.SetID(u)
	return amgsc
}

// Mutation returns the AppMiningGoodStockMutation object of the builder.
func (amgsc *AppMiningGoodStockCreate) Mutation() *AppMiningGoodStockMutation {
	return amgsc.mutation
}

// Save creates the AppMiningGoodStock in the database.
func (amgsc *AppMiningGoodStockCreate) Save(ctx context.Context) (*AppMiningGoodStock, error) {
	amgsc.defaults()
	return withHooks(ctx, amgsc.sqlSave, amgsc.mutation, amgsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (amgsc *AppMiningGoodStockCreate) SaveX(ctx context.Context) *AppMiningGoodStock {
	v, err := amgsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amgsc *AppMiningGoodStockCreate) Exec(ctx context.Context) error {
	_, err := amgsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amgsc *AppMiningGoodStockCreate) ExecX(ctx context.Context) {
	if err := amgsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amgsc *AppMiningGoodStockCreate) defaults() {
	if _, ok := amgsc.mutation.EntID(); !ok {
		v := appmininggoodstock.DefaultEntID()
		amgsc.mutation.SetEntID(v)
	}
	if _, ok := amgsc.mutation.CreatedAt(); !ok {
		v := appmininggoodstock.DefaultCreatedAt()
		amgsc.mutation.SetCreatedAt(v)
	}
	if _, ok := amgsc.mutation.UpdatedAt(); !ok {
		v := appmininggoodstock.DefaultUpdatedAt()
		amgsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := amgsc.mutation.DeletedAt(); !ok {
		v := appmininggoodstock.DefaultDeletedAt()
		amgsc.mutation.SetDeletedAt(v)
	}
	if _, ok := amgsc.mutation.AppGoodStockID(); !ok {
		v := appmininggoodstock.DefaultAppGoodStockID()
		amgsc.mutation.SetAppGoodStockID(v)
	}
	if _, ok := amgsc.mutation.MiningGoodStockID(); !ok {
		v := appmininggoodstock.DefaultMiningGoodStockID()
		amgsc.mutation.SetMiningGoodStockID(v)
	}
	if _, ok := amgsc.mutation.Reserved(); !ok {
		v := appmininggoodstock.DefaultReserved
		amgsc.mutation.SetReserved(v)
	}
	if _, ok := amgsc.mutation.SpotQuantity(); !ok {
		v := appmininggoodstock.DefaultSpotQuantity
		amgsc.mutation.SetSpotQuantity(v)
	}
	if _, ok := amgsc.mutation.Locked(); !ok {
		v := appmininggoodstock.DefaultLocked
		amgsc.mutation.SetLocked(v)
	}
	if _, ok := amgsc.mutation.InService(); !ok {
		v := appmininggoodstock.DefaultInService
		amgsc.mutation.SetInService(v)
	}
	if _, ok := amgsc.mutation.WaitStart(); !ok {
		v := appmininggoodstock.DefaultWaitStart
		amgsc.mutation.SetWaitStart(v)
	}
	if _, ok := amgsc.mutation.Sold(); !ok {
		v := appmininggoodstock.DefaultSold
		amgsc.mutation.SetSold(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (amgsc *AppMiningGoodStockCreate) check() error {
	if _, ok := amgsc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "AppMiningGoodStock.ent_id"`)}
	}
	if _, ok := amgsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "AppMiningGoodStock.created_at"`)}
	}
	if _, ok := amgsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "AppMiningGoodStock.updated_at"`)}
	}
	if _, ok := amgsc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "AppMiningGoodStock.deleted_at"`)}
	}
	return nil
}

func (amgsc *AppMiningGoodStockCreate) sqlSave(ctx context.Context) (*AppMiningGoodStock, error) {
	if err := amgsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := amgsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, amgsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	amgsc.mutation.id = &_node.ID
	amgsc.mutation.done = true
	return _node, nil
}

func (amgsc *AppMiningGoodStockCreate) createSpec() (*AppMiningGoodStock, *sqlgraph.CreateSpec) {
	var (
		_node = &AppMiningGoodStock{config: amgsc.config}
		_spec = sqlgraph.NewCreateSpec(appmininggoodstock.Table, sqlgraph.NewFieldSpec(appmininggoodstock.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = amgsc.conflict
	if id, ok := amgsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := amgsc.mutation.EntID(); ok {
		_spec.SetField(appmininggoodstock.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := amgsc.mutation.CreatedAt(); ok {
		_spec.SetField(appmininggoodstock.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := amgsc.mutation.UpdatedAt(); ok {
		_spec.SetField(appmininggoodstock.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := amgsc.mutation.DeletedAt(); ok {
		_spec.SetField(appmininggoodstock.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := amgsc.mutation.AppGoodStockID(); ok {
		_spec.SetField(appmininggoodstock.FieldAppGoodStockID, field.TypeUUID, value)
		_node.AppGoodStockID = value
	}
	if value, ok := amgsc.mutation.MiningGoodStockID(); ok {
		_spec.SetField(appmininggoodstock.FieldMiningGoodStockID, field.TypeUUID, value)
		_node.MiningGoodStockID = value
	}
	if value, ok := amgsc.mutation.Reserved(); ok {
		_spec.SetField(appmininggoodstock.FieldReserved, field.TypeOther, value)
		_node.Reserved = value
	}
	if value, ok := amgsc.mutation.SpotQuantity(); ok {
		_spec.SetField(appmininggoodstock.FieldSpotQuantity, field.TypeOther, value)
		_node.SpotQuantity = value
	}
	if value, ok := amgsc.mutation.Locked(); ok {
		_spec.SetField(appmininggoodstock.FieldLocked, field.TypeOther, value)
		_node.Locked = value
	}
	if value, ok := amgsc.mutation.InService(); ok {
		_spec.SetField(appmininggoodstock.FieldInService, field.TypeOther, value)
		_node.InService = value
	}
	if value, ok := amgsc.mutation.WaitStart(); ok {
		_spec.SetField(appmininggoodstock.FieldWaitStart, field.TypeOther, value)
		_node.WaitStart = value
	}
	if value, ok := amgsc.mutation.Sold(); ok {
		_spec.SetField(appmininggoodstock.FieldSold, field.TypeOther, value)
		_node.Sold = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppMiningGoodStock.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppMiningGoodStockUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (amgsc *AppMiningGoodStockCreate) OnConflict(opts ...sql.ConflictOption) *AppMiningGoodStockUpsertOne {
	amgsc.conflict = opts
	return &AppMiningGoodStockUpsertOne{
		create: amgsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppMiningGoodStock.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (amgsc *AppMiningGoodStockCreate) OnConflictColumns(columns ...string) *AppMiningGoodStockUpsertOne {
	amgsc.conflict = append(amgsc.conflict, sql.ConflictColumns(columns...))
	return &AppMiningGoodStockUpsertOne{
		create: amgsc,
	}
}

type (
	// AppMiningGoodStockUpsertOne is the builder for "upsert"-ing
	//  one AppMiningGoodStock node.
	AppMiningGoodStockUpsertOne struct {
		create *AppMiningGoodStockCreate
	}

	// AppMiningGoodStockUpsert is the "OnConflict" setter.
	AppMiningGoodStockUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *AppMiningGoodStockUpsert) SetEntID(v uuid.UUID) *AppMiningGoodStockUpsert {
	u.Set(appmininggoodstock.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsert) UpdateEntID() *AppMiningGoodStockUpsert {
	u.SetExcluded(appmininggoodstock.FieldEntID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppMiningGoodStockUpsert) SetCreatedAt(v uint32) *AppMiningGoodStockUpsert {
	u.Set(appmininggoodstock.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsert) UpdateCreatedAt() *AppMiningGoodStockUpsert {
	u.SetExcluded(appmininggoodstock.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppMiningGoodStockUpsert) AddCreatedAt(v uint32) *AppMiningGoodStockUpsert {
	u.Add(appmininggoodstock.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppMiningGoodStockUpsert) SetUpdatedAt(v uint32) *AppMiningGoodStockUpsert {
	u.Set(appmininggoodstock.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsert) UpdateUpdatedAt() *AppMiningGoodStockUpsert {
	u.SetExcluded(appmininggoodstock.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppMiningGoodStockUpsert) AddUpdatedAt(v uint32) *AppMiningGoodStockUpsert {
	u.Add(appmininggoodstock.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppMiningGoodStockUpsert) SetDeletedAt(v uint32) *AppMiningGoodStockUpsert {
	u.Set(appmininggoodstock.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsert) UpdateDeletedAt() *AppMiningGoodStockUpsert {
	u.SetExcluded(appmininggoodstock.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppMiningGoodStockUpsert) AddDeletedAt(v uint32) *AppMiningGoodStockUpsert {
	u.Add(appmininggoodstock.FieldDeletedAt, v)
	return u
}

// SetAppGoodStockID sets the "app_good_stock_id" field.
func (u *AppMiningGoodStockUpsert) SetAppGoodStockID(v uuid.UUID) *AppMiningGoodStockUpsert {
	u.Set(appmininggoodstock.FieldAppGoodStockID, v)
	return u
}

// UpdateAppGoodStockID sets the "app_good_stock_id" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsert) UpdateAppGoodStockID() *AppMiningGoodStockUpsert {
	u.SetExcluded(appmininggoodstock.FieldAppGoodStockID)
	return u
}

// ClearAppGoodStockID clears the value of the "app_good_stock_id" field.
func (u *AppMiningGoodStockUpsert) ClearAppGoodStockID() *AppMiningGoodStockUpsert {
	u.SetNull(appmininggoodstock.FieldAppGoodStockID)
	return u
}

// SetMiningGoodStockID sets the "mining_good_stock_id" field.
func (u *AppMiningGoodStockUpsert) SetMiningGoodStockID(v uuid.UUID) *AppMiningGoodStockUpsert {
	u.Set(appmininggoodstock.FieldMiningGoodStockID, v)
	return u
}

// UpdateMiningGoodStockID sets the "mining_good_stock_id" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsert) UpdateMiningGoodStockID() *AppMiningGoodStockUpsert {
	u.SetExcluded(appmininggoodstock.FieldMiningGoodStockID)
	return u
}

// ClearMiningGoodStockID clears the value of the "mining_good_stock_id" field.
func (u *AppMiningGoodStockUpsert) ClearMiningGoodStockID() *AppMiningGoodStockUpsert {
	u.SetNull(appmininggoodstock.FieldMiningGoodStockID)
	return u
}

// SetReserved sets the "reserved" field.
func (u *AppMiningGoodStockUpsert) SetReserved(v decimal.Decimal) *AppMiningGoodStockUpsert {
	u.Set(appmininggoodstock.FieldReserved, v)
	return u
}

// UpdateReserved sets the "reserved" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsert) UpdateReserved() *AppMiningGoodStockUpsert {
	u.SetExcluded(appmininggoodstock.FieldReserved)
	return u
}

// ClearReserved clears the value of the "reserved" field.
func (u *AppMiningGoodStockUpsert) ClearReserved() *AppMiningGoodStockUpsert {
	u.SetNull(appmininggoodstock.FieldReserved)
	return u
}

// SetSpotQuantity sets the "spot_quantity" field.
func (u *AppMiningGoodStockUpsert) SetSpotQuantity(v decimal.Decimal) *AppMiningGoodStockUpsert {
	u.Set(appmininggoodstock.FieldSpotQuantity, v)
	return u
}

// UpdateSpotQuantity sets the "spot_quantity" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsert) UpdateSpotQuantity() *AppMiningGoodStockUpsert {
	u.SetExcluded(appmininggoodstock.FieldSpotQuantity)
	return u
}

// ClearSpotQuantity clears the value of the "spot_quantity" field.
func (u *AppMiningGoodStockUpsert) ClearSpotQuantity() *AppMiningGoodStockUpsert {
	u.SetNull(appmininggoodstock.FieldSpotQuantity)
	return u
}

// SetLocked sets the "locked" field.
func (u *AppMiningGoodStockUpsert) SetLocked(v decimal.Decimal) *AppMiningGoodStockUpsert {
	u.Set(appmininggoodstock.FieldLocked, v)
	return u
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsert) UpdateLocked() *AppMiningGoodStockUpsert {
	u.SetExcluded(appmininggoodstock.FieldLocked)
	return u
}

// ClearLocked clears the value of the "locked" field.
func (u *AppMiningGoodStockUpsert) ClearLocked() *AppMiningGoodStockUpsert {
	u.SetNull(appmininggoodstock.FieldLocked)
	return u
}

// SetInService sets the "in_service" field.
func (u *AppMiningGoodStockUpsert) SetInService(v decimal.Decimal) *AppMiningGoodStockUpsert {
	u.Set(appmininggoodstock.FieldInService, v)
	return u
}

// UpdateInService sets the "in_service" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsert) UpdateInService() *AppMiningGoodStockUpsert {
	u.SetExcluded(appmininggoodstock.FieldInService)
	return u
}

// ClearInService clears the value of the "in_service" field.
func (u *AppMiningGoodStockUpsert) ClearInService() *AppMiningGoodStockUpsert {
	u.SetNull(appmininggoodstock.FieldInService)
	return u
}

// SetWaitStart sets the "wait_start" field.
func (u *AppMiningGoodStockUpsert) SetWaitStart(v decimal.Decimal) *AppMiningGoodStockUpsert {
	u.Set(appmininggoodstock.FieldWaitStart, v)
	return u
}

// UpdateWaitStart sets the "wait_start" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsert) UpdateWaitStart() *AppMiningGoodStockUpsert {
	u.SetExcluded(appmininggoodstock.FieldWaitStart)
	return u
}

// ClearWaitStart clears the value of the "wait_start" field.
func (u *AppMiningGoodStockUpsert) ClearWaitStart() *AppMiningGoodStockUpsert {
	u.SetNull(appmininggoodstock.FieldWaitStart)
	return u
}

// SetSold sets the "sold" field.
func (u *AppMiningGoodStockUpsert) SetSold(v decimal.Decimal) *AppMiningGoodStockUpsert {
	u.Set(appmininggoodstock.FieldSold, v)
	return u
}

// UpdateSold sets the "sold" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsert) UpdateSold() *AppMiningGoodStockUpsert {
	u.SetExcluded(appmininggoodstock.FieldSold)
	return u
}

// ClearSold clears the value of the "sold" field.
func (u *AppMiningGoodStockUpsert) ClearSold() *AppMiningGoodStockUpsert {
	u.SetNull(appmininggoodstock.FieldSold)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppMiningGoodStock.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appmininggoodstock.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppMiningGoodStockUpsertOne) UpdateNewValues() *AppMiningGoodStockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appmininggoodstock.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppMiningGoodStock.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppMiningGoodStockUpsertOne) Ignore() *AppMiningGoodStockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppMiningGoodStockUpsertOne) DoNothing() *AppMiningGoodStockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppMiningGoodStockCreate.OnConflict
// documentation for more info.
func (u *AppMiningGoodStockUpsertOne) Update(set func(*AppMiningGoodStockUpsert)) *AppMiningGoodStockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppMiningGoodStockUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppMiningGoodStockUpsertOne) SetEntID(v uuid.UUID) *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsertOne) UpdateEntID() *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AppMiningGoodStockUpsertOne) SetCreatedAt(v uint32) *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppMiningGoodStockUpsertOne) AddCreatedAt(v uint32) *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsertOne) UpdateCreatedAt() *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppMiningGoodStockUpsertOne) SetUpdatedAt(v uint32) *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppMiningGoodStockUpsertOne) AddUpdatedAt(v uint32) *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsertOne) UpdateUpdatedAt() *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppMiningGoodStockUpsertOne) SetDeletedAt(v uint32) *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppMiningGoodStockUpsertOne) AddDeletedAt(v uint32) *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsertOne) UpdateDeletedAt() *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppGoodStockID sets the "app_good_stock_id" field.
func (u *AppMiningGoodStockUpsertOne) SetAppGoodStockID(v uuid.UUID) *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.SetAppGoodStockID(v)
	})
}

// UpdateAppGoodStockID sets the "app_good_stock_id" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsertOne) UpdateAppGoodStockID() *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.UpdateAppGoodStockID()
	})
}

// ClearAppGoodStockID clears the value of the "app_good_stock_id" field.
func (u *AppMiningGoodStockUpsertOne) ClearAppGoodStockID() *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.ClearAppGoodStockID()
	})
}

// SetMiningGoodStockID sets the "mining_good_stock_id" field.
func (u *AppMiningGoodStockUpsertOne) SetMiningGoodStockID(v uuid.UUID) *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.SetMiningGoodStockID(v)
	})
}

// UpdateMiningGoodStockID sets the "mining_good_stock_id" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsertOne) UpdateMiningGoodStockID() *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.UpdateMiningGoodStockID()
	})
}

// ClearMiningGoodStockID clears the value of the "mining_good_stock_id" field.
func (u *AppMiningGoodStockUpsertOne) ClearMiningGoodStockID() *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.ClearMiningGoodStockID()
	})
}

// SetReserved sets the "reserved" field.
func (u *AppMiningGoodStockUpsertOne) SetReserved(v decimal.Decimal) *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.SetReserved(v)
	})
}

// UpdateReserved sets the "reserved" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsertOne) UpdateReserved() *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.UpdateReserved()
	})
}

// ClearReserved clears the value of the "reserved" field.
func (u *AppMiningGoodStockUpsertOne) ClearReserved() *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.ClearReserved()
	})
}

// SetSpotQuantity sets the "spot_quantity" field.
func (u *AppMiningGoodStockUpsertOne) SetSpotQuantity(v decimal.Decimal) *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.SetSpotQuantity(v)
	})
}

// UpdateSpotQuantity sets the "spot_quantity" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsertOne) UpdateSpotQuantity() *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.UpdateSpotQuantity()
	})
}

// ClearSpotQuantity clears the value of the "spot_quantity" field.
func (u *AppMiningGoodStockUpsertOne) ClearSpotQuantity() *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.ClearSpotQuantity()
	})
}

// SetLocked sets the "locked" field.
func (u *AppMiningGoodStockUpsertOne) SetLocked(v decimal.Decimal) *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.SetLocked(v)
	})
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsertOne) UpdateLocked() *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.UpdateLocked()
	})
}

// ClearLocked clears the value of the "locked" field.
func (u *AppMiningGoodStockUpsertOne) ClearLocked() *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.ClearLocked()
	})
}

// SetInService sets the "in_service" field.
func (u *AppMiningGoodStockUpsertOne) SetInService(v decimal.Decimal) *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.SetInService(v)
	})
}

// UpdateInService sets the "in_service" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsertOne) UpdateInService() *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.UpdateInService()
	})
}

// ClearInService clears the value of the "in_service" field.
func (u *AppMiningGoodStockUpsertOne) ClearInService() *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.ClearInService()
	})
}

// SetWaitStart sets the "wait_start" field.
func (u *AppMiningGoodStockUpsertOne) SetWaitStart(v decimal.Decimal) *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.SetWaitStart(v)
	})
}

// UpdateWaitStart sets the "wait_start" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsertOne) UpdateWaitStart() *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.UpdateWaitStart()
	})
}

// ClearWaitStart clears the value of the "wait_start" field.
func (u *AppMiningGoodStockUpsertOne) ClearWaitStart() *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.ClearWaitStart()
	})
}

// SetSold sets the "sold" field.
func (u *AppMiningGoodStockUpsertOne) SetSold(v decimal.Decimal) *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.SetSold(v)
	})
}

// UpdateSold sets the "sold" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsertOne) UpdateSold() *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.UpdateSold()
	})
}

// ClearSold clears the value of the "sold" field.
func (u *AppMiningGoodStockUpsertOne) ClearSold() *AppMiningGoodStockUpsertOne {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.ClearSold()
	})
}

// Exec executes the query.
func (u *AppMiningGoodStockUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppMiningGoodStockCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppMiningGoodStockUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppMiningGoodStockUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppMiningGoodStockUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppMiningGoodStockCreateBulk is the builder for creating many AppMiningGoodStock entities in bulk.
type AppMiningGoodStockCreateBulk struct {
	config
	err      error
	builders []*AppMiningGoodStockCreate
	conflict []sql.ConflictOption
}

// Save creates the AppMiningGoodStock entities in the database.
func (amgscb *AppMiningGoodStockCreateBulk) Save(ctx context.Context) ([]*AppMiningGoodStock, error) {
	if amgscb.err != nil {
		return nil, amgscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(amgscb.builders))
	nodes := make([]*AppMiningGoodStock, len(amgscb.builders))
	mutators := make([]Mutator, len(amgscb.builders))
	for i := range amgscb.builders {
		func(i int, root context.Context) {
			builder := amgscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppMiningGoodStockMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, amgscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = amgscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, amgscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, amgscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (amgscb *AppMiningGoodStockCreateBulk) SaveX(ctx context.Context) []*AppMiningGoodStock {
	v, err := amgscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amgscb *AppMiningGoodStockCreateBulk) Exec(ctx context.Context) error {
	_, err := amgscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amgscb *AppMiningGoodStockCreateBulk) ExecX(ctx context.Context) {
	if err := amgscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppMiningGoodStock.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppMiningGoodStockUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (amgscb *AppMiningGoodStockCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppMiningGoodStockUpsertBulk {
	amgscb.conflict = opts
	return &AppMiningGoodStockUpsertBulk{
		create: amgscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppMiningGoodStock.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (amgscb *AppMiningGoodStockCreateBulk) OnConflictColumns(columns ...string) *AppMiningGoodStockUpsertBulk {
	amgscb.conflict = append(amgscb.conflict, sql.ConflictColumns(columns...))
	return &AppMiningGoodStockUpsertBulk{
		create: amgscb,
	}
}

// AppMiningGoodStockUpsertBulk is the builder for "upsert"-ing
// a bulk of AppMiningGoodStock nodes.
type AppMiningGoodStockUpsertBulk struct {
	create *AppMiningGoodStockCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppMiningGoodStock.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appmininggoodstock.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppMiningGoodStockUpsertBulk) UpdateNewValues() *AppMiningGoodStockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appmininggoodstock.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppMiningGoodStock.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppMiningGoodStockUpsertBulk) Ignore() *AppMiningGoodStockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppMiningGoodStockUpsertBulk) DoNothing() *AppMiningGoodStockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppMiningGoodStockCreateBulk.OnConflict
// documentation for more info.
func (u *AppMiningGoodStockUpsertBulk) Update(set func(*AppMiningGoodStockUpsert)) *AppMiningGoodStockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppMiningGoodStockUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppMiningGoodStockUpsertBulk) SetEntID(v uuid.UUID) *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsertBulk) UpdateEntID() *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AppMiningGoodStockUpsertBulk) SetCreatedAt(v uint32) *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppMiningGoodStockUpsertBulk) AddCreatedAt(v uint32) *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsertBulk) UpdateCreatedAt() *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppMiningGoodStockUpsertBulk) SetUpdatedAt(v uint32) *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppMiningGoodStockUpsertBulk) AddUpdatedAt(v uint32) *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsertBulk) UpdateUpdatedAt() *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppMiningGoodStockUpsertBulk) SetDeletedAt(v uint32) *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppMiningGoodStockUpsertBulk) AddDeletedAt(v uint32) *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsertBulk) UpdateDeletedAt() *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppGoodStockID sets the "app_good_stock_id" field.
func (u *AppMiningGoodStockUpsertBulk) SetAppGoodStockID(v uuid.UUID) *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.SetAppGoodStockID(v)
	})
}

// UpdateAppGoodStockID sets the "app_good_stock_id" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsertBulk) UpdateAppGoodStockID() *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.UpdateAppGoodStockID()
	})
}

// ClearAppGoodStockID clears the value of the "app_good_stock_id" field.
func (u *AppMiningGoodStockUpsertBulk) ClearAppGoodStockID() *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.ClearAppGoodStockID()
	})
}

// SetMiningGoodStockID sets the "mining_good_stock_id" field.
func (u *AppMiningGoodStockUpsertBulk) SetMiningGoodStockID(v uuid.UUID) *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.SetMiningGoodStockID(v)
	})
}

// UpdateMiningGoodStockID sets the "mining_good_stock_id" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsertBulk) UpdateMiningGoodStockID() *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.UpdateMiningGoodStockID()
	})
}

// ClearMiningGoodStockID clears the value of the "mining_good_stock_id" field.
func (u *AppMiningGoodStockUpsertBulk) ClearMiningGoodStockID() *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.ClearMiningGoodStockID()
	})
}

// SetReserved sets the "reserved" field.
func (u *AppMiningGoodStockUpsertBulk) SetReserved(v decimal.Decimal) *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.SetReserved(v)
	})
}

// UpdateReserved sets the "reserved" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsertBulk) UpdateReserved() *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.UpdateReserved()
	})
}

// ClearReserved clears the value of the "reserved" field.
func (u *AppMiningGoodStockUpsertBulk) ClearReserved() *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.ClearReserved()
	})
}

// SetSpotQuantity sets the "spot_quantity" field.
func (u *AppMiningGoodStockUpsertBulk) SetSpotQuantity(v decimal.Decimal) *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.SetSpotQuantity(v)
	})
}

// UpdateSpotQuantity sets the "spot_quantity" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsertBulk) UpdateSpotQuantity() *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.UpdateSpotQuantity()
	})
}

// ClearSpotQuantity clears the value of the "spot_quantity" field.
func (u *AppMiningGoodStockUpsertBulk) ClearSpotQuantity() *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.ClearSpotQuantity()
	})
}

// SetLocked sets the "locked" field.
func (u *AppMiningGoodStockUpsertBulk) SetLocked(v decimal.Decimal) *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.SetLocked(v)
	})
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsertBulk) UpdateLocked() *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.UpdateLocked()
	})
}

// ClearLocked clears the value of the "locked" field.
func (u *AppMiningGoodStockUpsertBulk) ClearLocked() *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.ClearLocked()
	})
}

// SetInService sets the "in_service" field.
func (u *AppMiningGoodStockUpsertBulk) SetInService(v decimal.Decimal) *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.SetInService(v)
	})
}

// UpdateInService sets the "in_service" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsertBulk) UpdateInService() *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.UpdateInService()
	})
}

// ClearInService clears the value of the "in_service" field.
func (u *AppMiningGoodStockUpsertBulk) ClearInService() *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.ClearInService()
	})
}

// SetWaitStart sets the "wait_start" field.
func (u *AppMiningGoodStockUpsertBulk) SetWaitStart(v decimal.Decimal) *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.SetWaitStart(v)
	})
}

// UpdateWaitStart sets the "wait_start" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsertBulk) UpdateWaitStart() *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.UpdateWaitStart()
	})
}

// ClearWaitStart clears the value of the "wait_start" field.
func (u *AppMiningGoodStockUpsertBulk) ClearWaitStart() *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.ClearWaitStart()
	})
}

// SetSold sets the "sold" field.
func (u *AppMiningGoodStockUpsertBulk) SetSold(v decimal.Decimal) *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.SetSold(v)
	})
}

// UpdateSold sets the "sold" field to the value that was provided on create.
func (u *AppMiningGoodStockUpsertBulk) UpdateSold() *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.UpdateSold()
	})
}

// ClearSold clears the value of the "sold" field.
func (u *AppMiningGoodStockUpsertBulk) ClearSold() *AppMiningGoodStockUpsertBulk {
	return u.Update(func(s *AppMiningGoodStockUpsert) {
		s.ClearSold()
	})
}

// Exec executes the query.
func (u *AppMiningGoodStockUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the AppMiningGoodStockCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppMiningGoodStockCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppMiningGoodStockUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

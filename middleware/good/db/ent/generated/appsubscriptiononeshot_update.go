// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appsubscriptiononeshot"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppSubscriptionOneShotUpdate is the builder for updating AppSubscriptionOneShot entities.
type AppSubscriptionOneShotUpdate struct {
	config
	hooks     []Hook
	mutation  *AppSubscriptionOneShotMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppSubscriptionOneShotUpdate builder.
func (asosu *AppSubscriptionOneShotUpdate) Where(ps ...predicate.AppSubscriptionOneShot) *AppSubscriptionOneShotUpdate {
	asosu.mutation.Where(ps...)
	return asosu
}

// SetEntID sets the "ent_id" field.
func (asosu *AppSubscriptionOneShotUpdate) SetEntID(u uuid.UUID) *AppSubscriptionOneShotUpdate {
	asosu.mutation.SetEntID(u)
	return asosu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (asosu *AppSubscriptionOneShotUpdate) SetNillableEntID(u *uuid.UUID) *AppSubscriptionOneShotUpdate {
	if u != nil {
		asosu.SetEntID(*u)
	}
	return asosu
}

// SetAppID sets the "app_id" field.
func (asosu *AppSubscriptionOneShotUpdate) SetAppID(u uuid.UUID) *AppSubscriptionOneShotUpdate {
	asosu.mutation.SetAppID(u)
	return asosu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (asosu *AppSubscriptionOneShotUpdate) SetNillableAppID(u *uuid.UUID) *AppSubscriptionOneShotUpdate {
	if u != nil {
		asosu.SetAppID(*u)
	}
	return asosu
}

// ClearAppID clears the value of the "app_id" field.
func (asosu *AppSubscriptionOneShotUpdate) ClearAppID() *AppSubscriptionOneShotUpdate {
	asosu.mutation.ClearAppID()
	return asosu
}

// SetGoodID sets the "good_id" field.
func (asosu *AppSubscriptionOneShotUpdate) SetGoodID(u uuid.UUID) *AppSubscriptionOneShotUpdate {
	asosu.mutation.SetGoodID(u)
	return asosu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (asosu *AppSubscriptionOneShotUpdate) SetNillableGoodID(u *uuid.UUID) *AppSubscriptionOneShotUpdate {
	if u != nil {
		asosu.SetGoodID(*u)
	}
	return asosu
}

// ClearGoodID clears the value of the "good_id" field.
func (asosu *AppSubscriptionOneShotUpdate) ClearGoodID() *AppSubscriptionOneShotUpdate {
	asosu.mutation.ClearGoodID()
	return asosu
}

// SetAppGoodID sets the "app_good_id" field.
func (asosu *AppSubscriptionOneShotUpdate) SetAppGoodID(u uuid.UUID) *AppSubscriptionOneShotUpdate {
	asosu.mutation.SetAppGoodID(u)
	return asosu
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (asosu *AppSubscriptionOneShotUpdate) SetNillableAppGoodID(u *uuid.UUID) *AppSubscriptionOneShotUpdate {
	if u != nil {
		asosu.SetAppGoodID(*u)
	}
	return asosu
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (asosu *AppSubscriptionOneShotUpdate) ClearAppGoodID() *AppSubscriptionOneShotUpdate {
	asosu.mutation.ClearAppGoodID()
	return asosu
}

// SetName sets the "name" field.
func (asosu *AppSubscriptionOneShotUpdate) SetName(s string) *AppSubscriptionOneShotUpdate {
	asosu.mutation.SetName(s)
	return asosu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (asosu *AppSubscriptionOneShotUpdate) SetNillableName(s *string) *AppSubscriptionOneShotUpdate {
	if s != nil {
		asosu.SetName(*s)
	}
	return asosu
}

// ClearName clears the value of the "name" field.
func (asosu *AppSubscriptionOneShotUpdate) ClearName() *AppSubscriptionOneShotUpdate {
	asosu.mutation.ClearName()
	return asosu
}

// SetBanner sets the "banner" field.
func (asosu *AppSubscriptionOneShotUpdate) SetBanner(s string) *AppSubscriptionOneShotUpdate {
	asosu.mutation.SetBanner(s)
	return asosu
}

// SetNillableBanner sets the "banner" field if the given value is not nil.
func (asosu *AppSubscriptionOneShotUpdate) SetNillableBanner(s *string) *AppSubscriptionOneShotUpdate {
	if s != nil {
		asosu.SetBanner(*s)
	}
	return asosu
}

// ClearBanner clears the value of the "banner" field.
func (asosu *AppSubscriptionOneShotUpdate) ClearBanner() *AppSubscriptionOneShotUpdate {
	asosu.mutation.ClearBanner()
	return asosu
}

// SetUsdPrice sets the "usd_price" field.
func (asosu *AppSubscriptionOneShotUpdate) SetUsdPrice(d decimal.Decimal) *AppSubscriptionOneShotUpdate {
	asosu.mutation.SetUsdPrice(d)
	return asosu
}

// SetNillableUsdPrice sets the "usd_price" field if the given value is not nil.
func (asosu *AppSubscriptionOneShotUpdate) SetNillableUsdPrice(d *decimal.Decimal) *AppSubscriptionOneShotUpdate {
	if d != nil {
		asosu.SetUsdPrice(*d)
	}
	return asosu
}

// ClearUsdPrice clears the value of the "usd_price" field.
func (asosu *AppSubscriptionOneShotUpdate) ClearUsdPrice() *AppSubscriptionOneShotUpdate {
	asosu.mutation.ClearUsdPrice()
	return asosu
}

// Mutation returns the AppSubscriptionOneShotMutation object of the builder.
func (asosu *AppSubscriptionOneShotUpdate) Mutation() *AppSubscriptionOneShotMutation {
	return asosu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asosu *AppSubscriptionOneShotUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, asosu.sqlSave, asosu.mutation, asosu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asosu *AppSubscriptionOneShotUpdate) SaveX(ctx context.Context) int {
	affected, err := asosu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asosu *AppSubscriptionOneShotUpdate) Exec(ctx context.Context) error {
	_, err := asosu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asosu *AppSubscriptionOneShotUpdate) ExecX(ctx context.Context) {
	if err := asosu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (asosu *AppSubscriptionOneShotUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppSubscriptionOneShotUpdate {
	asosu.modifiers = append(asosu.modifiers, modifiers...)
	return asosu
}

func (asosu *AppSubscriptionOneShotUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appsubscriptiononeshot.Table, appsubscriptiononeshot.Columns, sqlgraph.NewFieldSpec(appsubscriptiononeshot.FieldID, field.TypeUint32))
	if ps := asosu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asosu.mutation.EntID(); ok {
		_spec.SetField(appsubscriptiononeshot.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := asosu.mutation.AppID(); ok {
		_spec.SetField(appsubscriptiononeshot.FieldAppID, field.TypeUUID, value)
	}
	if asosu.mutation.AppIDCleared() {
		_spec.ClearField(appsubscriptiononeshot.FieldAppID, field.TypeUUID)
	}
	if value, ok := asosu.mutation.GoodID(); ok {
		_spec.SetField(appsubscriptiononeshot.FieldGoodID, field.TypeUUID, value)
	}
	if asosu.mutation.GoodIDCleared() {
		_spec.ClearField(appsubscriptiononeshot.FieldGoodID, field.TypeUUID)
	}
	if value, ok := asosu.mutation.AppGoodID(); ok {
		_spec.SetField(appsubscriptiononeshot.FieldAppGoodID, field.TypeUUID, value)
	}
	if asosu.mutation.AppGoodIDCleared() {
		_spec.ClearField(appsubscriptiononeshot.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := asosu.mutation.Name(); ok {
		_spec.SetField(appsubscriptiononeshot.FieldName, field.TypeString, value)
	}
	if asosu.mutation.NameCleared() {
		_spec.ClearField(appsubscriptiononeshot.FieldName, field.TypeString)
	}
	if value, ok := asosu.mutation.Banner(); ok {
		_spec.SetField(appsubscriptiononeshot.FieldBanner, field.TypeString, value)
	}
	if asosu.mutation.BannerCleared() {
		_spec.ClearField(appsubscriptiononeshot.FieldBanner, field.TypeString)
	}
	if value, ok := asosu.mutation.UsdPrice(); ok {
		_spec.SetField(appsubscriptiononeshot.FieldUsdPrice, field.TypeOther, value)
	}
	if asosu.mutation.UsdPriceCleared() {
		_spec.ClearField(appsubscriptiononeshot.FieldUsdPrice, field.TypeOther)
	}
	_spec.AddModifiers(asosu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, asosu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appsubscriptiononeshot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	asosu.mutation.done = true
	return n, nil
}

// AppSubscriptionOneShotUpdateOne is the builder for updating a single AppSubscriptionOneShot entity.
type AppSubscriptionOneShotUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppSubscriptionOneShotMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (asosuo *AppSubscriptionOneShotUpdateOne) SetEntID(u uuid.UUID) *AppSubscriptionOneShotUpdateOne {
	asosuo.mutation.SetEntID(u)
	return asosuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (asosuo *AppSubscriptionOneShotUpdateOne) SetNillableEntID(u *uuid.UUID) *AppSubscriptionOneShotUpdateOne {
	if u != nil {
		asosuo.SetEntID(*u)
	}
	return asosuo
}

// SetAppID sets the "app_id" field.
func (asosuo *AppSubscriptionOneShotUpdateOne) SetAppID(u uuid.UUID) *AppSubscriptionOneShotUpdateOne {
	asosuo.mutation.SetAppID(u)
	return asosuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (asosuo *AppSubscriptionOneShotUpdateOne) SetNillableAppID(u *uuid.UUID) *AppSubscriptionOneShotUpdateOne {
	if u != nil {
		asosuo.SetAppID(*u)
	}
	return asosuo
}

// ClearAppID clears the value of the "app_id" field.
func (asosuo *AppSubscriptionOneShotUpdateOne) ClearAppID() *AppSubscriptionOneShotUpdateOne {
	asosuo.mutation.ClearAppID()
	return asosuo
}

// SetGoodID sets the "good_id" field.
func (asosuo *AppSubscriptionOneShotUpdateOne) SetGoodID(u uuid.UUID) *AppSubscriptionOneShotUpdateOne {
	asosuo.mutation.SetGoodID(u)
	return asosuo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (asosuo *AppSubscriptionOneShotUpdateOne) SetNillableGoodID(u *uuid.UUID) *AppSubscriptionOneShotUpdateOne {
	if u != nil {
		asosuo.SetGoodID(*u)
	}
	return asosuo
}

// ClearGoodID clears the value of the "good_id" field.
func (asosuo *AppSubscriptionOneShotUpdateOne) ClearGoodID() *AppSubscriptionOneShotUpdateOne {
	asosuo.mutation.ClearGoodID()
	return asosuo
}

// SetAppGoodID sets the "app_good_id" field.
func (asosuo *AppSubscriptionOneShotUpdateOne) SetAppGoodID(u uuid.UUID) *AppSubscriptionOneShotUpdateOne {
	asosuo.mutation.SetAppGoodID(u)
	return asosuo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (asosuo *AppSubscriptionOneShotUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *AppSubscriptionOneShotUpdateOne {
	if u != nil {
		asosuo.SetAppGoodID(*u)
	}
	return asosuo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (asosuo *AppSubscriptionOneShotUpdateOne) ClearAppGoodID() *AppSubscriptionOneShotUpdateOne {
	asosuo.mutation.ClearAppGoodID()
	return asosuo
}

// SetName sets the "name" field.
func (asosuo *AppSubscriptionOneShotUpdateOne) SetName(s string) *AppSubscriptionOneShotUpdateOne {
	asosuo.mutation.SetName(s)
	return asosuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (asosuo *AppSubscriptionOneShotUpdateOne) SetNillableName(s *string) *AppSubscriptionOneShotUpdateOne {
	if s != nil {
		asosuo.SetName(*s)
	}
	return asosuo
}

// ClearName clears the value of the "name" field.
func (asosuo *AppSubscriptionOneShotUpdateOne) ClearName() *AppSubscriptionOneShotUpdateOne {
	asosuo.mutation.ClearName()
	return asosuo
}

// SetBanner sets the "banner" field.
func (asosuo *AppSubscriptionOneShotUpdateOne) SetBanner(s string) *AppSubscriptionOneShotUpdateOne {
	asosuo.mutation.SetBanner(s)
	return asosuo
}

// SetNillableBanner sets the "banner" field if the given value is not nil.
func (asosuo *AppSubscriptionOneShotUpdateOne) SetNillableBanner(s *string) *AppSubscriptionOneShotUpdateOne {
	if s != nil {
		asosuo.SetBanner(*s)
	}
	return asosuo
}

// ClearBanner clears the value of the "banner" field.
func (asosuo *AppSubscriptionOneShotUpdateOne) ClearBanner() *AppSubscriptionOneShotUpdateOne {
	asosuo.mutation.ClearBanner()
	return asosuo
}

// SetUsdPrice sets the "usd_price" field.
func (asosuo *AppSubscriptionOneShotUpdateOne) SetUsdPrice(d decimal.Decimal) *AppSubscriptionOneShotUpdateOne {
	asosuo.mutation.SetUsdPrice(d)
	return asosuo
}

// SetNillableUsdPrice sets the "usd_price" field if the given value is not nil.
func (asosuo *AppSubscriptionOneShotUpdateOne) SetNillableUsdPrice(d *decimal.Decimal) *AppSubscriptionOneShotUpdateOne {
	if d != nil {
		asosuo.SetUsdPrice(*d)
	}
	return asosuo
}

// ClearUsdPrice clears the value of the "usd_price" field.
func (asosuo *AppSubscriptionOneShotUpdateOne) ClearUsdPrice() *AppSubscriptionOneShotUpdateOne {
	asosuo.mutation.ClearUsdPrice()
	return asosuo
}

// Mutation returns the AppSubscriptionOneShotMutation object of the builder.
func (asosuo *AppSubscriptionOneShotUpdateOne) Mutation() *AppSubscriptionOneShotMutation {
	return asosuo.mutation
}

// Where appends a list predicates to the AppSubscriptionOneShotUpdate builder.
func (asosuo *AppSubscriptionOneShotUpdateOne) Where(ps ...predicate.AppSubscriptionOneShot) *AppSubscriptionOneShotUpdateOne {
	asosuo.mutation.Where(ps...)
	return asosuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asosuo *AppSubscriptionOneShotUpdateOne) Select(field string, fields ...string) *AppSubscriptionOneShotUpdateOne {
	asosuo.fields = append([]string{field}, fields...)
	return asosuo
}

// Save executes the query and returns the updated AppSubscriptionOneShot entity.
func (asosuo *AppSubscriptionOneShotUpdateOne) Save(ctx context.Context) (*AppSubscriptionOneShot, error) {
	return withHooks(ctx, asosuo.sqlSave, asosuo.mutation, asosuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asosuo *AppSubscriptionOneShotUpdateOne) SaveX(ctx context.Context) *AppSubscriptionOneShot {
	node, err := asosuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asosuo *AppSubscriptionOneShotUpdateOne) Exec(ctx context.Context) error {
	_, err := asosuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asosuo *AppSubscriptionOneShotUpdateOne) ExecX(ctx context.Context) {
	if err := asosuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (asosuo *AppSubscriptionOneShotUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppSubscriptionOneShotUpdateOne {
	asosuo.modifiers = append(asosuo.modifiers, modifiers...)
	return asosuo
}

func (asosuo *AppSubscriptionOneShotUpdateOne) sqlSave(ctx context.Context) (_node *AppSubscriptionOneShot, err error) {
	_spec := sqlgraph.NewUpdateSpec(appsubscriptiononeshot.Table, appsubscriptiononeshot.Columns, sqlgraph.NewFieldSpec(appsubscriptiononeshot.FieldID, field.TypeUint32))
	id, ok := asosuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AppSubscriptionOneShot.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asosuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appsubscriptiononeshot.FieldID)
		for _, f := range fields {
			if !appsubscriptiononeshot.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != appsubscriptiononeshot.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asosuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asosuo.mutation.EntID(); ok {
		_spec.SetField(appsubscriptiononeshot.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := asosuo.mutation.AppID(); ok {
		_spec.SetField(appsubscriptiononeshot.FieldAppID, field.TypeUUID, value)
	}
	if asosuo.mutation.AppIDCleared() {
		_spec.ClearField(appsubscriptiononeshot.FieldAppID, field.TypeUUID)
	}
	if value, ok := asosuo.mutation.GoodID(); ok {
		_spec.SetField(appsubscriptiononeshot.FieldGoodID, field.TypeUUID, value)
	}
	if asosuo.mutation.GoodIDCleared() {
		_spec.ClearField(appsubscriptiononeshot.FieldGoodID, field.TypeUUID)
	}
	if value, ok := asosuo.mutation.AppGoodID(); ok {
		_spec.SetField(appsubscriptiononeshot.FieldAppGoodID, field.TypeUUID, value)
	}
	if asosuo.mutation.AppGoodIDCleared() {
		_spec.ClearField(appsubscriptiononeshot.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := asosuo.mutation.Name(); ok {
		_spec.SetField(appsubscriptiononeshot.FieldName, field.TypeString, value)
	}
	if asosuo.mutation.NameCleared() {
		_spec.ClearField(appsubscriptiononeshot.FieldName, field.TypeString)
	}
	if value, ok := asosuo.mutation.Banner(); ok {
		_spec.SetField(appsubscriptiononeshot.FieldBanner, field.TypeString, value)
	}
	if asosuo.mutation.BannerCleared() {
		_spec.ClearField(appsubscriptiononeshot.FieldBanner, field.TypeString)
	}
	if value, ok := asosuo.mutation.UsdPrice(); ok {
		_spec.SetField(appsubscriptiononeshot.FieldUsdPrice, field.TypeOther, value)
	}
	if asosuo.mutation.UsdPriceCleared() {
		_spec.ClearField(appsubscriptiononeshot.FieldUsdPrice, field.TypeOther)
	}
	_spec.AddModifiers(asosuo.modifiers...)
	_node = &AppSubscriptionOneShot{config: asosuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asosuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appsubscriptiononeshot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	asosuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appgooddisplayname"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// AppGoodDisplayNameUpdate is the builder for updating AppGoodDisplayName entities.
type AppGoodDisplayNameUpdate struct {
	config
	hooks     []Hook
	mutation  *AppGoodDisplayNameMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppGoodDisplayNameUpdate builder.
func (agdnu *AppGoodDisplayNameUpdate) Where(ps ...predicate.AppGoodDisplayName) *AppGoodDisplayNameUpdate {
	agdnu.mutation.Where(ps...)
	return agdnu
}

// SetEntID sets the "ent_id" field.
func (agdnu *AppGoodDisplayNameUpdate) SetEntID(u uuid.UUID) *AppGoodDisplayNameUpdate {
	agdnu.mutation.SetEntID(u)
	return agdnu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (agdnu *AppGoodDisplayNameUpdate) SetNillableEntID(u *uuid.UUID) *AppGoodDisplayNameUpdate {
	if u != nil {
		agdnu.SetEntID(*u)
	}
	return agdnu
}

// SetAppGoodID sets the "app_good_id" field.
func (agdnu *AppGoodDisplayNameUpdate) SetAppGoodID(u uuid.UUID) *AppGoodDisplayNameUpdate {
	agdnu.mutation.SetAppGoodID(u)
	return agdnu
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (agdnu *AppGoodDisplayNameUpdate) SetNillableAppGoodID(u *uuid.UUID) *AppGoodDisplayNameUpdate {
	if u != nil {
		agdnu.SetAppGoodID(*u)
	}
	return agdnu
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (agdnu *AppGoodDisplayNameUpdate) ClearAppGoodID() *AppGoodDisplayNameUpdate {
	agdnu.mutation.ClearAppGoodID()
	return agdnu
}

// SetName sets the "name" field.
func (agdnu *AppGoodDisplayNameUpdate) SetName(s string) *AppGoodDisplayNameUpdate {
	agdnu.mutation.SetName(s)
	return agdnu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (agdnu *AppGoodDisplayNameUpdate) SetNillableName(s *string) *AppGoodDisplayNameUpdate {
	if s != nil {
		agdnu.SetName(*s)
	}
	return agdnu
}

// ClearName clears the value of the "name" field.
func (agdnu *AppGoodDisplayNameUpdate) ClearName() *AppGoodDisplayNameUpdate {
	agdnu.mutation.ClearName()
	return agdnu
}

// SetIndex sets the "index" field.
func (agdnu *AppGoodDisplayNameUpdate) SetIndex(u uint8) *AppGoodDisplayNameUpdate {
	agdnu.mutation.ResetIndex()
	agdnu.mutation.SetIndex(u)
	return agdnu
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (agdnu *AppGoodDisplayNameUpdate) SetNillableIndex(u *uint8) *AppGoodDisplayNameUpdate {
	if u != nil {
		agdnu.SetIndex(*u)
	}
	return agdnu
}

// AddIndex adds u to the "index" field.
func (agdnu *AppGoodDisplayNameUpdate) AddIndex(u int8) *AppGoodDisplayNameUpdate {
	agdnu.mutation.AddIndex(u)
	return agdnu
}

// ClearIndex clears the value of the "index" field.
func (agdnu *AppGoodDisplayNameUpdate) ClearIndex() *AppGoodDisplayNameUpdate {
	agdnu.mutation.ClearIndex()
	return agdnu
}

// Mutation returns the AppGoodDisplayNameMutation object of the builder.
func (agdnu *AppGoodDisplayNameUpdate) Mutation() *AppGoodDisplayNameMutation {
	return agdnu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (agdnu *AppGoodDisplayNameUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, agdnu.sqlSave, agdnu.mutation, agdnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (agdnu *AppGoodDisplayNameUpdate) SaveX(ctx context.Context) int {
	affected, err := agdnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (agdnu *AppGoodDisplayNameUpdate) Exec(ctx context.Context) error {
	_, err := agdnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agdnu *AppGoodDisplayNameUpdate) ExecX(ctx context.Context) {
	if err := agdnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (agdnu *AppGoodDisplayNameUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppGoodDisplayNameUpdate {
	agdnu.modifiers = append(agdnu.modifiers, modifiers...)
	return agdnu
}

func (agdnu *AppGoodDisplayNameUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appgooddisplayname.Table, appgooddisplayname.Columns, sqlgraph.NewFieldSpec(appgooddisplayname.FieldID, field.TypeUint32))
	if ps := agdnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agdnu.mutation.EntID(); ok {
		_spec.SetField(appgooddisplayname.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := agdnu.mutation.AppGoodID(); ok {
		_spec.SetField(appgooddisplayname.FieldAppGoodID, field.TypeUUID, value)
	}
	if agdnu.mutation.AppGoodIDCleared() {
		_spec.ClearField(appgooddisplayname.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := agdnu.mutation.Name(); ok {
		_spec.SetField(appgooddisplayname.FieldName, field.TypeString, value)
	}
	if agdnu.mutation.NameCleared() {
		_spec.ClearField(appgooddisplayname.FieldName, field.TypeString)
	}
	if value, ok := agdnu.mutation.Index(); ok {
		_spec.SetField(appgooddisplayname.FieldIndex, field.TypeUint8, value)
	}
	if value, ok := agdnu.mutation.AddedIndex(); ok {
		_spec.AddField(appgooddisplayname.FieldIndex, field.TypeUint8, value)
	}
	if agdnu.mutation.IndexCleared() {
		_spec.ClearField(appgooddisplayname.FieldIndex, field.TypeUint8)
	}
	_spec.AddModifiers(agdnu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, agdnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appgooddisplayname.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	agdnu.mutation.done = true
	return n, nil
}

// AppGoodDisplayNameUpdateOne is the builder for updating a single AppGoodDisplayName entity.
type AppGoodDisplayNameUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppGoodDisplayNameMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (agdnuo *AppGoodDisplayNameUpdateOne) SetEntID(u uuid.UUID) *AppGoodDisplayNameUpdateOne {
	agdnuo.mutation.SetEntID(u)
	return agdnuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (agdnuo *AppGoodDisplayNameUpdateOne) SetNillableEntID(u *uuid.UUID) *AppGoodDisplayNameUpdateOne {
	if u != nil {
		agdnuo.SetEntID(*u)
	}
	return agdnuo
}

// SetAppGoodID sets the "app_good_id" field.
func (agdnuo *AppGoodDisplayNameUpdateOne) SetAppGoodID(u uuid.UUID) *AppGoodDisplayNameUpdateOne {
	agdnuo.mutation.SetAppGoodID(u)
	return agdnuo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (agdnuo *AppGoodDisplayNameUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *AppGoodDisplayNameUpdateOne {
	if u != nil {
		agdnuo.SetAppGoodID(*u)
	}
	return agdnuo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (agdnuo *AppGoodDisplayNameUpdateOne) ClearAppGoodID() *AppGoodDisplayNameUpdateOne {
	agdnuo.mutation.ClearAppGoodID()
	return agdnuo
}

// SetName sets the "name" field.
func (agdnuo *AppGoodDisplayNameUpdateOne) SetName(s string) *AppGoodDisplayNameUpdateOne {
	agdnuo.mutation.SetName(s)
	return agdnuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (agdnuo *AppGoodDisplayNameUpdateOne) SetNillableName(s *string) *AppGoodDisplayNameUpdateOne {
	if s != nil {
		agdnuo.SetName(*s)
	}
	return agdnuo
}

// ClearName clears the value of the "name" field.
func (agdnuo *AppGoodDisplayNameUpdateOne) ClearName() *AppGoodDisplayNameUpdateOne {
	agdnuo.mutation.ClearName()
	return agdnuo
}

// SetIndex sets the "index" field.
func (agdnuo *AppGoodDisplayNameUpdateOne) SetIndex(u uint8) *AppGoodDisplayNameUpdateOne {
	agdnuo.mutation.ResetIndex()
	agdnuo.mutation.SetIndex(u)
	return agdnuo
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (agdnuo *AppGoodDisplayNameUpdateOne) SetNillableIndex(u *uint8) *AppGoodDisplayNameUpdateOne {
	if u != nil {
		agdnuo.SetIndex(*u)
	}
	return agdnuo
}

// AddIndex adds u to the "index" field.
func (agdnuo *AppGoodDisplayNameUpdateOne) AddIndex(u int8) *AppGoodDisplayNameUpdateOne {
	agdnuo.mutation.AddIndex(u)
	return agdnuo
}

// ClearIndex clears the value of the "index" field.
func (agdnuo *AppGoodDisplayNameUpdateOne) ClearIndex() *AppGoodDisplayNameUpdateOne {
	agdnuo.mutation.ClearIndex()
	return agdnuo
}

// Mutation returns the AppGoodDisplayNameMutation object of the builder.
func (agdnuo *AppGoodDisplayNameUpdateOne) Mutation() *AppGoodDisplayNameMutation {
	return agdnuo.mutation
}

// Where appends a list predicates to the AppGoodDisplayNameUpdate builder.
func (agdnuo *AppGoodDisplayNameUpdateOne) Where(ps ...predicate.AppGoodDisplayName) *AppGoodDisplayNameUpdateOne {
	agdnuo.mutation.Where(ps...)
	return agdnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (agdnuo *AppGoodDisplayNameUpdateOne) Select(field string, fields ...string) *AppGoodDisplayNameUpdateOne {
	agdnuo.fields = append([]string{field}, fields...)
	return agdnuo
}

// Save executes the query and returns the updated AppGoodDisplayName entity.
func (agdnuo *AppGoodDisplayNameUpdateOne) Save(ctx context.Context) (*AppGoodDisplayName, error) {
	return withHooks(ctx, agdnuo.sqlSave, agdnuo.mutation, agdnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (agdnuo *AppGoodDisplayNameUpdateOne) SaveX(ctx context.Context) *AppGoodDisplayName {
	node, err := agdnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (agdnuo *AppGoodDisplayNameUpdateOne) Exec(ctx context.Context) error {
	_, err := agdnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agdnuo *AppGoodDisplayNameUpdateOne) ExecX(ctx context.Context) {
	if err := agdnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (agdnuo *AppGoodDisplayNameUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppGoodDisplayNameUpdateOne {
	agdnuo.modifiers = append(agdnuo.modifiers, modifiers...)
	return agdnuo
}

func (agdnuo *AppGoodDisplayNameUpdateOne) sqlSave(ctx context.Context) (_node *AppGoodDisplayName, err error) {
	_spec := sqlgraph.NewUpdateSpec(appgooddisplayname.Table, appgooddisplayname.Columns, sqlgraph.NewFieldSpec(appgooddisplayname.FieldID, field.TypeUint32))
	id, ok := agdnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AppGoodDisplayName.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := agdnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appgooddisplayname.FieldID)
		for _, f := range fields {
			if !appgooddisplayname.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != appgooddisplayname.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := agdnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agdnuo.mutation.EntID(); ok {
		_spec.SetField(appgooddisplayname.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := agdnuo.mutation.AppGoodID(); ok {
		_spec.SetField(appgooddisplayname.FieldAppGoodID, field.TypeUUID, value)
	}
	if agdnuo.mutation.AppGoodIDCleared() {
		_spec.ClearField(appgooddisplayname.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := agdnuo.mutation.Name(); ok {
		_spec.SetField(appgooddisplayname.FieldName, field.TypeString, value)
	}
	if agdnuo.mutation.NameCleared() {
		_spec.ClearField(appgooddisplayname.FieldName, field.TypeString)
	}
	if value, ok := agdnuo.mutation.Index(); ok {
		_spec.SetField(appgooddisplayname.FieldIndex, field.TypeUint8, value)
	}
	if value, ok := agdnuo.mutation.AddedIndex(); ok {
		_spec.AddField(appgooddisplayname.FieldIndex, field.TypeUint8, value)
	}
	if agdnuo.mutation.IndexCleared() {
		_spec.ClearField(appgooddisplayname.FieldIndex, field.TypeUint8)
	}
	_spec.AddModifiers(agdnuo.modifiers...)
	_node = &AppGoodDisplayName{config: agdnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, agdnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appgooddisplayname.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	agdnuo.mutation.done = true
	return _node, nil
}

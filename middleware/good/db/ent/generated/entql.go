// Code generated by ent, DO NOT EDIT.

package generated

import (
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appdefaultgood"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appdelegatedstaking"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appfee"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appgood"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appgoodbase"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appgooddescription"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appgooddisplaycolor"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appgooddisplayname"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appgoodlabel"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appgoodposter"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/applegacypowerrental"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appmininggoodstock"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/apppowerrental"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appsimulatepowerrental"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appstock"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appstocklock"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/comment"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/delegatedstaking"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/deviceinfo"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/devicemanufacturer"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/deviceposter"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/extrainfo"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/fbmcrowdfunding"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/fee"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/good"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/goodbase"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/goodcoin"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/goodcoinreward"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/goodmalfunction"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/goodreward"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/goodrewardhistory"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/like"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/mininggoodstock"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/powerrental"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/recommend"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/requiredappgood"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/requiredgood"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/score"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/stock"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/topmost"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/topmostconstraint"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/topmostgood"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/topmostgoodconstraint"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/topmostgoodposter"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/topmostposter"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/vendorbrand"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/vendorlocation"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 47)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appdefaultgood.Table,
			Columns: appdefaultgood.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appdefaultgood.FieldID,
			},
		},
		Type: "AppDefaultGood",
		Fields: map[string]*sqlgraph.FieldSpec{
			appdefaultgood.FieldEntID:      {Type: field.TypeUUID, Column: appdefaultgood.FieldEntID},
			appdefaultgood.FieldAppGoodID:  {Type: field.TypeUUID, Column: appdefaultgood.FieldAppGoodID},
			appdefaultgood.FieldCoinTypeID: {Type: field.TypeUUID, Column: appdefaultgood.FieldCoinTypeID},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appdelegatedstaking.Table,
			Columns: appdelegatedstaking.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appdelegatedstaking.FieldID,
			},
		},
		Type: "AppDelegatedStaking",
		Fields: map[string]*sqlgraph.FieldSpec{
			appdelegatedstaking.FieldEntID:               {Type: field.TypeUUID, Column: appdelegatedstaking.FieldEntID},
			appdelegatedstaking.FieldAppGoodID:           {Type: field.TypeUUID, Column: appdelegatedstaking.FieldAppGoodID},
			appdelegatedstaking.FieldServiceStartAt:      {Type: field.TypeUint32, Column: appdelegatedstaking.FieldServiceStartAt},
			appdelegatedstaking.FieldStartMode:           {Type: field.TypeString, Column: appdelegatedstaking.FieldStartMode},
			appdelegatedstaking.FieldEnableSetCommission: {Type: field.TypeBool, Column: appdelegatedstaking.FieldEnableSetCommission},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appfee.Table,
			Columns: appfee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appfee.FieldID,
			},
		},
		Type: "AppFee",
		Fields: map[string]*sqlgraph.FieldSpec{
			appfee.FieldEntID:                   {Type: field.TypeUUID, Column: appfee.FieldEntID},
			appfee.FieldAppGoodID:               {Type: field.TypeUUID, Column: appfee.FieldAppGoodID},
			appfee.FieldUnitValue:               {Type: field.TypeOther, Column: appfee.FieldUnitValue},
			appfee.FieldCancelMode:              {Type: field.TypeString, Column: appfee.FieldCancelMode},
			appfee.FieldMinOrderDurationSeconds: {Type: field.TypeUint32, Column: appfee.FieldMinOrderDurationSeconds},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appgood.Table,
			Columns: appgood.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appgood.FieldID,
			},
		},
		Type: "AppGood",
		Fields: map[string]*sqlgraph.FieldSpec{
			appgood.FieldEntID:                  {Type: field.TypeUUID, Column: appgood.FieldEntID},
			appgood.FieldAppID:                  {Type: field.TypeUUID, Column: appgood.FieldAppID},
			appgood.FieldGoodID:                 {Type: field.TypeUUID, Column: appgood.FieldGoodID},
			appgood.FieldOnline:                 {Type: field.TypeBool, Column: appgood.FieldOnline},
			appgood.FieldVisible:                {Type: field.TypeBool, Column: appgood.FieldVisible},
			appgood.FieldGoodName:               {Type: field.TypeString, Column: appgood.FieldGoodName},
			appgood.FieldUnitPrice:              {Type: field.TypeOther, Column: appgood.FieldUnitPrice},
			appgood.FieldPackagePrice:           {Type: field.TypeOther, Column: appgood.FieldPackagePrice},
			appgood.FieldDisplayIndex:           {Type: field.TypeInt32, Column: appgood.FieldDisplayIndex},
			appgood.FieldSaleStartAt:            {Type: field.TypeUint32, Column: appgood.FieldSaleStartAt},
			appgood.FieldSaleEndAt:              {Type: field.TypeUint32, Column: appgood.FieldSaleEndAt},
			appgood.FieldServiceStartAt:         {Type: field.TypeUint32, Column: appgood.FieldServiceStartAt},
			appgood.FieldTechnicalFeeRatio:      {Type: field.TypeOther, Column: appgood.FieldTechnicalFeeRatio},
			appgood.FieldElectricityFeeRatio:    {Type: field.TypeOther, Column: appgood.FieldElectricityFeeRatio},
			appgood.FieldDescriptions:           {Type: field.TypeJSON, Column: appgood.FieldDescriptions},
			appgood.FieldGoodBanner:             {Type: field.TypeString, Column: appgood.FieldGoodBanner},
			appgood.FieldDisplayNames:           {Type: field.TypeJSON, Column: appgood.FieldDisplayNames},
			appgood.FieldEnablePurchase:         {Type: field.TypeBool, Column: appgood.FieldEnablePurchase},
			appgood.FieldEnableProductPage:      {Type: field.TypeBool, Column: appgood.FieldEnableProductPage},
			appgood.FieldCancelMode:             {Type: field.TypeString, Column: appgood.FieldCancelMode},
			appgood.FieldDisplayColors:          {Type: field.TypeJSON, Column: appgood.FieldDisplayColors},
			appgood.FieldCancellableBeforeStart: {Type: field.TypeUint32, Column: appgood.FieldCancellableBeforeStart},
			appgood.FieldProductPage:            {Type: field.TypeString, Column: appgood.FieldProductPage},
			appgood.FieldEnableSetCommission:    {Type: field.TypeBool, Column: appgood.FieldEnableSetCommission},
			appgood.FieldPosters:                {Type: field.TypeJSON, Column: appgood.FieldPosters},
			appgood.FieldMinOrderAmount:         {Type: field.TypeOther, Column: appgood.FieldMinOrderAmount},
			appgood.FieldMaxOrderAmount:         {Type: field.TypeOther, Column: appgood.FieldMaxOrderAmount},
			appgood.FieldMaxUserAmount:          {Type: field.TypeOther, Column: appgood.FieldMaxUserAmount},
			appgood.FieldMinOrderDuration:       {Type: field.TypeUint32, Column: appgood.FieldMinOrderDuration},
			appgood.FieldMaxOrderDuration:       {Type: field.TypeUint32, Column: appgood.FieldMaxOrderDuration},
			appgood.FieldPackageWithRequireds:   {Type: field.TypeBool, Column: appgood.FieldPackageWithRequireds},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appgoodbase.Table,
			Columns: appgoodbase.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appgoodbase.FieldID,
			},
		},
		Type: "AppGoodBase",
		Fields: map[string]*sqlgraph.FieldSpec{
			appgoodbase.FieldEntID:             {Type: field.TypeUUID, Column: appgoodbase.FieldEntID},
			appgoodbase.FieldAppID:             {Type: field.TypeUUID, Column: appgoodbase.FieldAppID},
			appgoodbase.FieldGoodID:            {Type: field.TypeUUID, Column: appgoodbase.FieldGoodID},
			appgoodbase.FieldPurchasable:       {Type: field.TypeBool, Column: appgoodbase.FieldPurchasable},
			appgoodbase.FieldEnableProductPage: {Type: field.TypeBool, Column: appgoodbase.FieldEnableProductPage},
			appgoodbase.FieldProductPage:       {Type: field.TypeString, Column: appgoodbase.FieldProductPage},
			appgoodbase.FieldOnline:            {Type: field.TypeBool, Column: appgoodbase.FieldOnline},
			appgoodbase.FieldVisible:           {Type: field.TypeBool, Column: appgoodbase.FieldVisible},
			appgoodbase.FieldName:              {Type: field.TypeString, Column: appgoodbase.FieldName},
			appgoodbase.FieldDisplayIndex:      {Type: field.TypeInt32, Column: appgoodbase.FieldDisplayIndex},
			appgoodbase.FieldBanner:            {Type: field.TypeString, Column: appgoodbase.FieldBanner},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appgooddescription.Table,
			Columns: appgooddescription.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appgooddescription.FieldID,
			},
		},
		Type: "AppGoodDescription",
		Fields: map[string]*sqlgraph.FieldSpec{
			appgooddescription.FieldEntID:       {Type: field.TypeUUID, Column: appgooddescription.FieldEntID},
			appgooddescription.FieldAppGoodID:   {Type: field.TypeUUID, Column: appgooddescription.FieldAppGoodID},
			appgooddescription.FieldDescription: {Type: field.TypeString, Column: appgooddescription.FieldDescription},
			appgooddescription.FieldIndex:       {Type: field.TypeUint8, Column: appgooddescription.FieldIndex},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appgooddisplaycolor.Table,
			Columns: appgooddisplaycolor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appgooddisplaycolor.FieldID,
			},
		},
		Type: "AppGoodDisplayColor",
		Fields: map[string]*sqlgraph.FieldSpec{
			appgooddisplaycolor.FieldEntID:     {Type: field.TypeUUID, Column: appgooddisplaycolor.FieldEntID},
			appgooddisplaycolor.FieldAppGoodID: {Type: field.TypeUUID, Column: appgooddisplaycolor.FieldAppGoodID},
			appgooddisplaycolor.FieldColor:     {Type: field.TypeString, Column: appgooddisplaycolor.FieldColor},
			appgooddisplaycolor.FieldIndex:     {Type: field.TypeUint8, Column: appgooddisplaycolor.FieldIndex},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appgooddisplayname.Table,
			Columns: appgooddisplayname.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appgooddisplayname.FieldID,
			},
		},
		Type: "AppGoodDisplayName",
		Fields: map[string]*sqlgraph.FieldSpec{
			appgooddisplayname.FieldEntID:     {Type: field.TypeUUID, Column: appgooddisplayname.FieldEntID},
			appgooddisplayname.FieldAppGoodID: {Type: field.TypeUUID, Column: appgooddisplayname.FieldAppGoodID},
			appgooddisplayname.FieldName:      {Type: field.TypeString, Column: appgooddisplayname.FieldName},
			appgooddisplayname.FieldIndex:     {Type: field.TypeUint8, Column: appgooddisplayname.FieldIndex},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appgoodlabel.Table,
			Columns: appgoodlabel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appgoodlabel.FieldID,
			},
		},
		Type: "AppGoodLabel",
		Fields: map[string]*sqlgraph.FieldSpec{
			appgoodlabel.FieldEntID:        {Type: field.TypeUUID, Column: appgoodlabel.FieldEntID},
			appgoodlabel.FieldAppGoodID:    {Type: field.TypeUUID, Column: appgoodlabel.FieldAppGoodID},
			appgoodlabel.FieldIcon:         {Type: field.TypeString, Column: appgoodlabel.FieldIcon},
			appgoodlabel.FieldIconBgColor:  {Type: field.TypeString, Column: appgoodlabel.FieldIconBgColor},
			appgoodlabel.FieldLabel:        {Type: field.TypeString, Column: appgoodlabel.FieldLabel},
			appgoodlabel.FieldLabelBgColor: {Type: field.TypeString, Column: appgoodlabel.FieldLabelBgColor},
			appgoodlabel.FieldIndex:        {Type: field.TypeUint8, Column: appgoodlabel.FieldIndex},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appgoodposter.Table,
			Columns: appgoodposter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appgoodposter.FieldID,
			},
		},
		Type: "AppGoodPoster",
		Fields: map[string]*sqlgraph.FieldSpec{
			appgoodposter.FieldEntID:     {Type: field.TypeUUID, Column: appgoodposter.FieldEntID},
			appgoodposter.FieldAppGoodID: {Type: field.TypeUUID, Column: appgoodposter.FieldAppGoodID},
			appgoodposter.FieldPoster:    {Type: field.TypeString, Column: appgoodposter.FieldPoster},
			appgoodposter.FieldIndex:     {Type: field.TypeUint8, Column: appgoodposter.FieldIndex},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   applegacypowerrental.Table,
			Columns: applegacypowerrental.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: applegacypowerrental.FieldID,
			},
		},
		Type: "AppLegacyPowerRental",
		Fields: map[string]*sqlgraph.FieldSpec{
			applegacypowerrental.FieldEntID:             {Type: field.TypeUUID, Column: applegacypowerrental.FieldEntID},
			applegacypowerrental.FieldAppGoodID:         {Type: field.TypeUUID, Column: applegacypowerrental.FieldAppGoodID},
			applegacypowerrental.FieldTechniqueFeeRatio: {Type: field.TypeOther, Column: applegacypowerrental.FieldTechniqueFeeRatio},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appmininggoodstock.Table,
			Columns: appmininggoodstock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appmininggoodstock.FieldID,
			},
		},
		Type: "AppMiningGoodStock",
		Fields: map[string]*sqlgraph.FieldSpec{
			appmininggoodstock.FieldEntID:             {Type: field.TypeUUID, Column: appmininggoodstock.FieldEntID},
			appmininggoodstock.FieldAppGoodStockID:    {Type: field.TypeUUID, Column: appmininggoodstock.FieldAppGoodStockID},
			appmininggoodstock.FieldMiningGoodStockID: {Type: field.TypeUUID, Column: appmininggoodstock.FieldMiningGoodStockID},
			appmininggoodstock.FieldReserved:          {Type: field.TypeOther, Column: appmininggoodstock.FieldReserved},
			appmininggoodstock.FieldSpotQuantity:      {Type: field.TypeOther, Column: appmininggoodstock.FieldSpotQuantity},
			appmininggoodstock.FieldLocked:            {Type: field.TypeOther, Column: appmininggoodstock.FieldLocked},
			appmininggoodstock.FieldInService:         {Type: field.TypeOther, Column: appmininggoodstock.FieldInService},
			appmininggoodstock.FieldWaitStart:         {Type: field.TypeOther, Column: appmininggoodstock.FieldWaitStart},
			appmininggoodstock.FieldSold:              {Type: field.TypeOther, Column: appmininggoodstock.FieldSold},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   apppowerrental.Table,
			Columns: apppowerrental.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: apppowerrental.FieldID,
			},
		},
		Type: "AppPowerRental",
		Fields: map[string]*sqlgraph.FieldSpec{
			apppowerrental.FieldEntID:                        {Type: field.TypeUUID, Column: apppowerrental.FieldEntID},
			apppowerrental.FieldAppGoodID:                    {Type: field.TypeUUID, Column: apppowerrental.FieldAppGoodID},
			apppowerrental.FieldServiceStartAt:               {Type: field.TypeUint32, Column: apppowerrental.FieldServiceStartAt},
			apppowerrental.FieldStartMode:                    {Type: field.TypeString, Column: apppowerrental.FieldStartMode},
			apppowerrental.FieldCancelMode:                   {Type: field.TypeString, Column: apppowerrental.FieldCancelMode},
			apppowerrental.FieldCancelableBeforeStartSeconds: {Type: field.TypeUint32, Column: apppowerrental.FieldCancelableBeforeStartSeconds},
			apppowerrental.FieldEnableSetCommission:          {Type: field.TypeBool, Column: apppowerrental.FieldEnableSetCommission},
			apppowerrental.FieldMinOrderAmount:               {Type: field.TypeOther, Column: apppowerrental.FieldMinOrderAmount},
			apppowerrental.FieldMaxOrderAmount:               {Type: field.TypeOther, Column: apppowerrental.FieldMaxOrderAmount},
			apppowerrental.FieldMaxUserAmount:                {Type: field.TypeOther, Column: apppowerrental.FieldMaxUserAmount},
			apppowerrental.FieldMinOrderDurationSeconds:      {Type: field.TypeUint32, Column: apppowerrental.FieldMinOrderDurationSeconds},
			apppowerrental.FieldMaxOrderDurationSeconds:      {Type: field.TypeUint32, Column: apppowerrental.FieldMaxOrderDurationSeconds},
			apppowerrental.FieldUnitPrice:                    {Type: field.TypeOther, Column: apppowerrental.FieldUnitPrice},
			apppowerrental.FieldSaleStartAt:                  {Type: field.TypeUint32, Column: apppowerrental.FieldSaleStartAt},
			apppowerrental.FieldSaleEndAt:                    {Type: field.TypeUint32, Column: apppowerrental.FieldSaleEndAt},
			apppowerrental.FieldSaleMode:                     {Type: field.TypeString, Column: apppowerrental.FieldSaleMode},
			apppowerrental.FieldFixedDuration:                {Type: field.TypeBool, Column: apppowerrental.FieldFixedDuration},
			apppowerrental.FieldPackageWithRequireds:         {Type: field.TypeBool, Column: apppowerrental.FieldPackageWithRequireds},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appsimulatepowerrental.Table,
			Columns: appsimulatepowerrental.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appsimulatepowerrental.FieldID,
			},
		},
		Type: "AppSimulatePowerRental",
		Fields: map[string]*sqlgraph.FieldSpec{
			appsimulatepowerrental.FieldEntID:                {Type: field.TypeUUID, Column: appsimulatepowerrental.FieldEntID},
			appsimulatepowerrental.FieldAppGoodID:            {Type: field.TypeUUID, Column: appsimulatepowerrental.FieldAppGoodID},
			appsimulatepowerrental.FieldCoinTypeID:           {Type: field.TypeUUID, Column: appsimulatepowerrental.FieldCoinTypeID},
			appsimulatepowerrental.FieldOrderUnits:           {Type: field.TypeOther, Column: appsimulatepowerrental.FieldOrderUnits},
			appsimulatepowerrental.FieldOrderDurationSeconds: {Type: field.TypeUint32, Column: appsimulatepowerrental.FieldOrderDurationSeconds},
		},
	}
	graph.Nodes[14] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appstock.Table,
			Columns: appstock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appstock.FieldID,
			},
		},
		Type: "AppStock",
		Fields: map[string]*sqlgraph.FieldSpec{
			appstock.FieldEntID:        {Type: field.TypeUUID, Column: appstock.FieldEntID},
			appstock.FieldAppGoodID:    {Type: field.TypeUUID, Column: appstock.FieldAppGoodID},
			appstock.FieldReserved:     {Type: field.TypeOther, Column: appstock.FieldReserved},
			appstock.FieldSpotQuantity: {Type: field.TypeOther, Column: appstock.FieldSpotQuantity},
			appstock.FieldLocked:       {Type: field.TypeOther, Column: appstock.FieldLocked},
			appstock.FieldInService:    {Type: field.TypeOther, Column: appstock.FieldInService},
			appstock.FieldWaitStart:    {Type: field.TypeOther, Column: appstock.FieldWaitStart},
			appstock.FieldSold:         {Type: field.TypeOther, Column: appstock.FieldSold},
		},
	}
	graph.Nodes[15] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appstocklock.Table,
			Columns: appstocklock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appstocklock.FieldID,
			},
		},
		Type: "AppStockLock",
		Fields: map[string]*sqlgraph.FieldSpec{
			appstocklock.FieldEntID:           {Type: field.TypeUUID, Column: appstocklock.FieldEntID},
			appstocklock.FieldAppStockID:      {Type: field.TypeUUID, Column: appstocklock.FieldAppStockID},
			appstocklock.FieldAppGoodID:       {Type: field.TypeUUID, Column: appstocklock.FieldAppGoodID},
			appstocklock.FieldUnits:           {Type: field.TypeOther, Column: appstocklock.FieldUnits},
			appstocklock.FieldAppSpotUnits:    {Type: field.TypeOther, Column: appstocklock.FieldAppSpotUnits},
			appstocklock.FieldLockState:       {Type: field.TypeString, Column: appstocklock.FieldLockState},
			appstocklock.FieldChargeBackState: {Type: field.TypeString, Column: appstocklock.FieldChargeBackState},
			appstocklock.FieldExLockID:        {Type: field.TypeUUID, Column: appstocklock.FieldExLockID},
		},
	}
	graph.Nodes[16] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   comment.Table,
			Columns: comment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: comment.FieldID,
			},
		},
		Type: "Comment",
		Fields: map[string]*sqlgraph.FieldSpec{
			comment.FieldEntID:         {Type: field.TypeUUID, Column: comment.FieldEntID},
			comment.FieldUserID:        {Type: field.TypeUUID, Column: comment.FieldUserID},
			comment.FieldAppGoodID:     {Type: field.TypeUUID, Column: comment.FieldAppGoodID},
			comment.FieldOrderID:       {Type: field.TypeUUID, Column: comment.FieldOrderID},
			comment.FieldContent:       {Type: field.TypeString, Column: comment.FieldContent},
			comment.FieldReplyToID:     {Type: field.TypeUUID, Column: comment.FieldReplyToID},
			comment.FieldAnonymous:     {Type: field.TypeBool, Column: comment.FieldAnonymous},
			comment.FieldTrialUser:     {Type: field.TypeBool, Column: comment.FieldTrialUser},
			comment.FieldPurchasedUser: {Type: field.TypeBool, Column: comment.FieldPurchasedUser},
			comment.FieldHide:          {Type: field.TypeBool, Column: comment.FieldHide},
			comment.FieldHideReason:    {Type: field.TypeString, Column: comment.FieldHideReason},
		},
	}
	graph.Nodes[17] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   delegatedstaking.Table,
			Columns: delegatedstaking.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: delegatedstaking.FieldID,
			},
		},
		Type: "DelegatedStaking",
		Fields: map[string]*sqlgraph.FieldSpec{
			delegatedstaking.FieldEntID:              {Type: field.TypeUUID, Column: delegatedstaking.FieldEntID},
			delegatedstaking.FieldGoodID:             {Type: field.TypeUUID, Column: delegatedstaking.FieldGoodID},
			delegatedstaking.FieldContractCodeURL:    {Type: field.TypeString, Column: delegatedstaking.FieldContractCodeURL},
			delegatedstaking.FieldContractCodeBranch: {Type: field.TypeString, Column: delegatedstaking.FieldContractCodeBranch},
			delegatedstaking.FieldContractState:      {Type: field.TypeString, Column: delegatedstaking.FieldContractState},
		},
	}
	graph.Nodes[18] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   deviceinfo.Table,
			Columns: deviceinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: deviceinfo.FieldID,
			},
		},
		Type: "DeviceInfo",
		Fields: map[string]*sqlgraph.FieldSpec{
			deviceinfo.FieldEntID:            {Type: field.TypeUUID, Column: deviceinfo.FieldEntID},
			deviceinfo.FieldType:             {Type: field.TypeString, Column: deviceinfo.FieldType},
			deviceinfo.FieldManufacturerID:   {Type: field.TypeUUID, Column: deviceinfo.FieldManufacturerID},
			deviceinfo.FieldPowerConsumption: {Type: field.TypeUint32, Column: deviceinfo.FieldPowerConsumption},
			deviceinfo.FieldShipmentAt:       {Type: field.TypeUint32, Column: deviceinfo.FieldShipmentAt},
		},
	}
	graph.Nodes[19] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   devicemanufacturer.Table,
			Columns: devicemanufacturer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: devicemanufacturer.FieldID,
			},
		},
		Type: "DeviceManufacturer",
		Fields: map[string]*sqlgraph.FieldSpec{
			devicemanufacturer.FieldEntID: {Type: field.TypeUUID, Column: devicemanufacturer.FieldEntID},
			devicemanufacturer.FieldName:  {Type: field.TypeString, Column: devicemanufacturer.FieldName},
			devicemanufacturer.FieldLogo:  {Type: field.TypeString, Column: devicemanufacturer.FieldLogo},
		},
	}
	graph.Nodes[20] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   deviceposter.Table,
			Columns: deviceposter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: deviceposter.FieldID,
			},
		},
		Type: "DevicePoster",
		Fields: map[string]*sqlgraph.FieldSpec{
			deviceposter.FieldEntID:        {Type: field.TypeUUID, Column: deviceposter.FieldEntID},
			deviceposter.FieldDeviceTypeID: {Type: field.TypeUUID, Column: deviceposter.FieldDeviceTypeID},
			deviceposter.FieldPoster:       {Type: field.TypeString, Column: deviceposter.FieldPoster},
			deviceposter.FieldIndex:        {Type: field.TypeUint8, Column: deviceposter.FieldIndex},
		},
	}
	graph.Nodes[21] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   extrainfo.Table,
			Columns: extrainfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: extrainfo.FieldID,
			},
		},
		Type: "ExtraInfo",
		Fields: map[string]*sqlgraph.FieldSpec{
			extrainfo.FieldEntID:          {Type: field.TypeUUID, Column: extrainfo.FieldEntID},
			extrainfo.FieldAppGoodID:      {Type: field.TypeUUID, Column: extrainfo.FieldAppGoodID},
			extrainfo.FieldLikes:          {Type: field.TypeUint32, Column: extrainfo.FieldLikes},
			extrainfo.FieldDislikes:       {Type: field.TypeUint32, Column: extrainfo.FieldDislikes},
			extrainfo.FieldRecommendCount: {Type: field.TypeUint32, Column: extrainfo.FieldRecommendCount},
			extrainfo.FieldCommentCount:   {Type: field.TypeUint32, Column: extrainfo.FieldCommentCount},
			extrainfo.FieldScoreCount:     {Type: field.TypeUint32, Column: extrainfo.FieldScoreCount},
			extrainfo.FieldScore:          {Type: field.TypeOther, Column: extrainfo.FieldScore},
		},
	}
	graph.Nodes[22] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   fbmcrowdfunding.Table,
			Columns: fbmcrowdfunding.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: fbmcrowdfunding.FieldID,
			},
		},
		Type: "FbmCrowdFunding",
		Fields: map[string]*sqlgraph.FieldSpec{
			fbmcrowdfunding.FieldEntID:               {Type: field.TypeUUID, Column: fbmcrowdfunding.FieldEntID},
			fbmcrowdfunding.FieldGoodID:              {Type: field.TypeUUID, Column: fbmcrowdfunding.FieldGoodID},
			fbmcrowdfunding.FieldMinDepositAmount:    {Type: field.TypeOther, Column: fbmcrowdfunding.FieldMinDepositAmount},
			fbmcrowdfunding.FieldDeliveryAt:          {Type: field.TypeUint32, Column: fbmcrowdfunding.FieldDeliveryAt},
			fbmcrowdfunding.FieldTargetAmount:        {Type: field.TypeOther, Column: fbmcrowdfunding.FieldTargetAmount},
			fbmcrowdfunding.FieldDepositStartAt:      {Type: field.TypeUint32, Column: fbmcrowdfunding.FieldDepositStartAt},
			fbmcrowdfunding.FieldDepositEndAt:        {Type: field.TypeUint32, Column: fbmcrowdfunding.FieldDepositEndAt},
			fbmcrowdfunding.FieldContractAddress:     {Type: field.TypeString, Column: fbmcrowdfunding.FieldContractAddress},
			fbmcrowdfunding.FieldDepositCoinTypeID:   {Type: field.TypeUUID, Column: fbmcrowdfunding.FieldDepositCoinTypeID},
			fbmcrowdfunding.FieldRedeemable:          {Type: field.TypeBool, Column: fbmcrowdfunding.FieldRedeemable},
			fbmcrowdfunding.FieldRedeemDelayHours:    {Type: field.TypeUint32, Column: fbmcrowdfunding.FieldRedeemDelayHours},
			fbmcrowdfunding.FieldDurationDisplayType: {Type: field.TypeString, Column: fbmcrowdfunding.FieldDurationDisplayType},
			fbmcrowdfunding.FieldDurationSeconds:     {Type: field.TypeUint32, Column: fbmcrowdfunding.FieldDurationSeconds},
		},
	}
	graph.Nodes[23] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   fee.Table,
			Columns: fee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: fee.FieldID,
			},
		},
		Type: "Fee",
		Fields: map[string]*sqlgraph.FieldSpec{
			fee.FieldEntID:               {Type: field.TypeUUID, Column: fee.FieldEntID},
			fee.FieldGoodID:              {Type: field.TypeUUID, Column: fee.FieldGoodID},
			fee.FieldSettlementType:      {Type: field.TypeString, Column: fee.FieldSettlementType},
			fee.FieldUnitValue:           {Type: field.TypeOther, Column: fee.FieldUnitValue},
			fee.FieldDurationDisplayType: {Type: field.TypeString, Column: fee.FieldDurationDisplayType},
		},
	}
	graph.Nodes[24] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   good.Table,
			Columns: good.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: good.FieldID,
			},
		},
		Type: "Good",
		Fields: map[string]*sqlgraph.FieldSpec{
			good.FieldEntID:                 {Type: field.TypeUUID, Column: good.FieldEntID},
			good.FieldDeviceInfoID:          {Type: field.TypeUUID, Column: good.FieldDeviceInfoID},
			good.FieldCoinTypeID:            {Type: field.TypeUUID, Column: good.FieldCoinTypeID},
			good.FieldInheritFromGoodID:     {Type: field.TypeUUID, Column: good.FieldInheritFromGoodID},
			good.FieldVendorLocationID:      {Type: field.TypeUUID, Column: good.FieldVendorLocationID},
			good.FieldUnitPrice:             {Type: field.TypeOther, Column: good.FieldUnitPrice},
			good.FieldBenefitType:           {Type: field.TypeString, Column: good.FieldBenefitType},
			good.FieldGoodType:              {Type: field.TypeString, Column: good.FieldGoodType},
			good.FieldTitle:                 {Type: field.TypeString, Column: good.FieldTitle},
			good.FieldUnit:                  {Type: field.TypeString, Column: good.FieldUnit},
			good.FieldQuantityUnit:          {Type: field.TypeString, Column: good.FieldQuantityUnit},
			good.FieldUnitAmount:            {Type: field.TypeInt32, Column: good.FieldUnitAmount},
			good.FieldQuantityUnitAmount:    {Type: field.TypeOther, Column: good.FieldQuantityUnitAmount},
			good.FieldDeliveryAt:            {Type: field.TypeUint32, Column: good.FieldDeliveryAt},
			good.FieldStartAt:               {Type: field.TypeUint32, Column: good.FieldStartAt},
			good.FieldStartMode:             {Type: field.TypeString, Column: good.FieldStartMode},
			good.FieldTestOnly:              {Type: field.TypeBool, Column: good.FieldTestOnly},
			good.FieldBenefitIntervalHours:  {Type: field.TypeUint32, Column: good.FieldBenefitIntervalHours},
			good.FieldUnitLockDeposit:       {Type: field.TypeOther, Column: good.FieldUnitLockDeposit},
			good.FieldUnitType:              {Type: field.TypeString, Column: good.FieldUnitType},
			good.FieldQuantityCalculateType: {Type: field.TypeString, Column: good.FieldQuantityCalculateType},
			good.FieldDurationType:          {Type: field.TypeString, Column: good.FieldDurationType},
			good.FieldDurationCalculateType: {Type: field.TypeString, Column: good.FieldDurationCalculateType},
			good.FieldSettlementType:        {Type: field.TypeString, Column: good.FieldSettlementType},
		},
	}
	graph.Nodes[25] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   goodbase.Table,
			Columns: goodbase.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: goodbase.FieldID,
			},
		},
		Type: "GoodBase",
		Fields: map[string]*sqlgraph.FieldSpec{
			goodbase.FieldEntID:                {Type: field.TypeUUID, Column: goodbase.FieldEntID},
			goodbase.FieldGoodType:             {Type: field.TypeString, Column: goodbase.FieldGoodType},
			goodbase.FieldBenefitType:          {Type: field.TypeString, Column: goodbase.FieldBenefitType},
			goodbase.FieldName:                 {Type: field.TypeString, Column: goodbase.FieldName},
			goodbase.FieldServiceStartAt:       {Type: field.TypeUint32, Column: goodbase.FieldServiceStartAt},
			goodbase.FieldStartMode:            {Type: field.TypeString, Column: goodbase.FieldStartMode},
			goodbase.FieldTestOnly:             {Type: field.TypeBool, Column: goodbase.FieldTestOnly},
			goodbase.FieldBenefitIntervalHours: {Type: field.TypeUint32, Column: goodbase.FieldBenefitIntervalHours},
			goodbase.FieldPurchasable:          {Type: field.TypeBool, Column: goodbase.FieldPurchasable},
			goodbase.FieldOnline:               {Type: field.TypeBool, Column: goodbase.FieldOnline},
			goodbase.FieldState:                {Type: field.TypeString, Column: goodbase.FieldState},
		},
	}
	graph.Nodes[26] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   goodcoin.Table,
			Columns: goodcoin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: goodcoin.FieldID,
			},
		},
		Type: "GoodCoin",
		Fields: map[string]*sqlgraph.FieldSpec{
			goodcoin.FieldEntID:      {Type: field.TypeUUID, Column: goodcoin.FieldEntID},
			goodcoin.FieldGoodID:     {Type: field.TypeUUID, Column: goodcoin.FieldGoodID},
			goodcoin.FieldCoinTypeID: {Type: field.TypeUUID, Column: goodcoin.FieldCoinTypeID},
			goodcoin.FieldMain:       {Type: field.TypeBool, Column: goodcoin.FieldMain},
			goodcoin.FieldIndex:      {Type: field.TypeInt32, Column: goodcoin.FieldIndex},
		},
	}
	graph.Nodes[27] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   goodcoinreward.Table,
			Columns: goodcoinreward.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: goodcoinreward.FieldID,
			},
		},
		Type: "GoodCoinReward",
		Fields: map[string]*sqlgraph.FieldSpec{
			goodcoinreward.FieldEntID:                 {Type: field.TypeUUID, Column: goodcoinreward.FieldEntID},
			goodcoinreward.FieldGoodID:                {Type: field.TypeUUID, Column: goodcoinreward.FieldGoodID},
			goodcoinreward.FieldCoinTypeID:            {Type: field.TypeUUID, Column: goodcoinreward.FieldCoinTypeID},
			goodcoinreward.FieldRewardTid:             {Type: field.TypeUUID, Column: goodcoinreward.FieldRewardTid},
			goodcoinreward.FieldNextRewardStartAmount: {Type: field.TypeOther, Column: goodcoinreward.FieldNextRewardStartAmount},
			goodcoinreward.FieldLastRewardAmount:      {Type: field.TypeOther, Column: goodcoinreward.FieldLastRewardAmount},
			goodcoinreward.FieldLastUnitRewardAmount:  {Type: field.TypeOther, Column: goodcoinreward.FieldLastUnitRewardAmount},
			goodcoinreward.FieldTotalRewardAmount:     {Type: field.TypeOther, Column: goodcoinreward.FieldTotalRewardAmount},
		},
	}
	graph.Nodes[28] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   goodmalfunction.Table,
			Columns: goodmalfunction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: goodmalfunction.FieldID,
			},
		},
		Type: "GoodMalfunction",
		Fields: map[string]*sqlgraph.FieldSpec{
			goodmalfunction.FieldEntID:             {Type: field.TypeUUID, Column: goodmalfunction.FieldEntID},
			goodmalfunction.FieldGoodID:            {Type: field.TypeUUID, Column: goodmalfunction.FieldGoodID},
			goodmalfunction.FieldTitle:             {Type: field.TypeString, Column: goodmalfunction.FieldTitle},
			goodmalfunction.FieldMessage:           {Type: field.TypeString, Column: goodmalfunction.FieldMessage},
			goodmalfunction.FieldStartAt:           {Type: field.TypeUint32, Column: goodmalfunction.FieldStartAt},
			goodmalfunction.FieldDurationSeconds:   {Type: field.TypeUint32, Column: goodmalfunction.FieldDurationSeconds},
			goodmalfunction.FieldCompensateSeconds: {Type: field.TypeUint32, Column: goodmalfunction.FieldCompensateSeconds},
		},
	}
	graph.Nodes[29] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   goodreward.Table,
			Columns: goodreward.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: goodreward.FieldID,
			},
		},
		Type: "GoodReward",
		Fields: map[string]*sqlgraph.FieldSpec{
			goodreward.FieldEntID:        {Type: field.TypeUUID, Column: goodreward.FieldEntID},
			goodreward.FieldGoodID:       {Type: field.TypeUUID, Column: goodreward.FieldGoodID},
			goodreward.FieldRewardState:  {Type: field.TypeString, Column: goodreward.FieldRewardState},
			goodreward.FieldLastRewardAt: {Type: field.TypeUint32, Column: goodreward.FieldLastRewardAt},
		},
	}
	graph.Nodes[30] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   goodrewardhistory.Table,
			Columns: goodrewardhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: goodrewardhistory.FieldID,
			},
		},
		Type: "GoodRewardHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			goodrewardhistory.FieldEntID:         {Type: field.TypeUUID, Column: goodrewardhistory.FieldEntID},
			goodrewardhistory.FieldGoodID:        {Type: field.TypeUUID, Column: goodrewardhistory.FieldGoodID},
			goodrewardhistory.FieldCoinTypeID:    {Type: field.TypeUUID, Column: goodrewardhistory.FieldCoinTypeID},
			goodrewardhistory.FieldRewardDate:    {Type: field.TypeUint32, Column: goodrewardhistory.FieldRewardDate},
			goodrewardhistory.FieldTid:           {Type: field.TypeUUID, Column: goodrewardhistory.FieldTid},
			goodrewardhistory.FieldAmount:        {Type: field.TypeOther, Column: goodrewardhistory.FieldAmount},
			goodrewardhistory.FieldUnitAmount:    {Type: field.TypeOther, Column: goodrewardhistory.FieldUnitAmount},
			goodrewardhistory.FieldUnitNetAmount: {Type: field.TypeOther, Column: goodrewardhistory.FieldUnitNetAmount},
		},
	}
	graph.Nodes[31] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   like.Table,
			Columns: like.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: like.FieldID,
			},
		},
		Type: "Like",
		Fields: map[string]*sqlgraph.FieldSpec{
			like.FieldEntID:     {Type: field.TypeUUID, Column: like.FieldEntID},
			like.FieldUserID:    {Type: field.TypeUUID, Column: like.FieldUserID},
			like.FieldAppGoodID: {Type: field.TypeUUID, Column: like.FieldAppGoodID},
			like.FieldLike:      {Type: field.TypeBool, Column: like.FieldLike},
		},
	}
	graph.Nodes[32] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   mininggoodstock.Table,
			Columns: mininggoodstock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: mininggoodstock.FieldID,
			},
		},
		Type: "MiningGoodStock",
		Fields: map[string]*sqlgraph.FieldSpec{
			mininggoodstock.FieldEntID:          {Type: field.TypeUUID, Column: mininggoodstock.FieldEntID},
			mininggoodstock.FieldGoodStockID:    {Type: field.TypeUUID, Column: mininggoodstock.FieldGoodStockID},
			mininggoodstock.FieldPoolRootUserID: {Type: field.TypeUUID, Column: mininggoodstock.FieldPoolRootUserID},
			mininggoodstock.FieldPoolGoodUserID: {Type: field.TypeUUID, Column: mininggoodstock.FieldPoolGoodUserID},
			mininggoodstock.FieldTotal:          {Type: field.TypeOther, Column: mininggoodstock.FieldTotal},
			mininggoodstock.FieldSpotQuantity:   {Type: field.TypeOther, Column: mininggoodstock.FieldSpotQuantity},
			mininggoodstock.FieldLocked:         {Type: field.TypeOther, Column: mininggoodstock.FieldLocked},
			mininggoodstock.FieldInService:      {Type: field.TypeOther, Column: mininggoodstock.FieldInService},
			mininggoodstock.FieldWaitStart:      {Type: field.TypeOther, Column: mininggoodstock.FieldWaitStart},
			mininggoodstock.FieldSold:           {Type: field.TypeOther, Column: mininggoodstock.FieldSold},
			mininggoodstock.FieldAppReserved:    {Type: field.TypeOther, Column: mininggoodstock.FieldAppReserved},
			mininggoodstock.FieldState:          {Type: field.TypeString, Column: mininggoodstock.FieldState},
		},
	}
	graph.Nodes[33] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   powerrental.Table,
			Columns: powerrental.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: powerrental.FieldID,
			},
		},
		Type: "PowerRental",
		Fields: map[string]*sqlgraph.FieldSpec{
			powerrental.FieldEntID:               {Type: field.TypeUUID, Column: powerrental.FieldEntID},
			powerrental.FieldGoodID:              {Type: field.TypeUUID, Column: powerrental.FieldGoodID},
			powerrental.FieldDeviceTypeID:        {Type: field.TypeUUID, Column: powerrental.FieldDeviceTypeID},
			powerrental.FieldVendorLocationID:    {Type: field.TypeUUID, Column: powerrental.FieldVendorLocationID},
			powerrental.FieldUnitPrice:           {Type: field.TypeOther, Column: powerrental.FieldUnitPrice},
			powerrental.FieldQuantityUnit:        {Type: field.TypeString, Column: powerrental.FieldQuantityUnit},
			powerrental.FieldQuantityUnitAmount:  {Type: field.TypeOther, Column: powerrental.FieldQuantityUnitAmount},
			powerrental.FieldDeliveryAt:          {Type: field.TypeUint32, Column: powerrental.FieldDeliveryAt},
			powerrental.FieldUnitLockDeposit:     {Type: field.TypeOther, Column: powerrental.FieldUnitLockDeposit},
			powerrental.FieldDurationDisplayType: {Type: field.TypeString, Column: powerrental.FieldDurationDisplayType},
			powerrental.FieldStockMode:           {Type: field.TypeString, Column: powerrental.FieldStockMode},
		},
	}
	graph.Nodes[34] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   recommend.Table,
			Columns: recommend.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: recommend.FieldID,
			},
		},
		Type: "Recommend",
		Fields: map[string]*sqlgraph.FieldSpec{
			recommend.FieldEntID:          {Type: field.TypeUUID, Column: recommend.FieldEntID},
			recommend.FieldAppGoodID:      {Type: field.TypeUUID, Column: recommend.FieldAppGoodID},
			recommend.FieldRecommenderID:  {Type: field.TypeUUID, Column: recommend.FieldRecommenderID},
			recommend.FieldMessage:        {Type: field.TypeString, Column: recommend.FieldMessage},
			recommend.FieldRecommendIndex: {Type: field.TypeOther, Column: recommend.FieldRecommendIndex},
			recommend.FieldHide:           {Type: field.TypeBool, Column: recommend.FieldHide},
			recommend.FieldHideReason:     {Type: field.TypeString, Column: recommend.FieldHideReason},
		},
	}
	graph.Nodes[35] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   requiredappgood.Table,
			Columns: requiredappgood.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: requiredappgood.FieldID,
			},
		},
		Type: "RequiredAppGood",
		Fields: map[string]*sqlgraph.FieldSpec{
			requiredappgood.FieldEntID:             {Type: field.TypeUUID, Column: requiredappgood.FieldEntID},
			requiredappgood.FieldMainAppGoodID:     {Type: field.TypeUUID, Column: requiredappgood.FieldMainAppGoodID},
			requiredappgood.FieldRequiredAppGoodID: {Type: field.TypeUUID, Column: requiredappgood.FieldRequiredAppGoodID},
			requiredappgood.FieldMust:              {Type: field.TypeBool, Column: requiredappgood.FieldMust},
		},
	}
	graph.Nodes[36] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   requiredgood.Table,
			Columns: requiredgood.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: requiredgood.FieldID,
			},
		},
		Type: "RequiredGood",
		Fields: map[string]*sqlgraph.FieldSpec{
			requiredgood.FieldEntID:          {Type: field.TypeUUID, Column: requiredgood.FieldEntID},
			requiredgood.FieldMainGoodID:     {Type: field.TypeUUID, Column: requiredgood.FieldMainGoodID},
			requiredgood.FieldRequiredGoodID: {Type: field.TypeUUID, Column: requiredgood.FieldRequiredGoodID},
			requiredgood.FieldMust:           {Type: field.TypeBool, Column: requiredgood.FieldMust},
		},
	}
	graph.Nodes[37] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   score.Table,
			Columns: score.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: score.FieldID,
			},
		},
		Type: "Score",
		Fields: map[string]*sqlgraph.FieldSpec{
			score.FieldEntID:     {Type: field.TypeUUID, Column: score.FieldEntID},
			score.FieldUserID:    {Type: field.TypeUUID, Column: score.FieldUserID},
			score.FieldAppGoodID: {Type: field.TypeUUID, Column: score.FieldAppGoodID},
			score.FieldScore:     {Type: field.TypeOther, Column: score.FieldScore},
			score.FieldCommentID: {Type: field.TypeUUID, Column: score.FieldCommentID},
		},
	}
	graph.Nodes[38] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   stock.Table,
			Columns: stock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: stock.FieldID,
			},
		},
		Type: "Stock",
		Fields: map[string]*sqlgraph.FieldSpec{
			stock.FieldEntID:        {Type: field.TypeUUID, Column: stock.FieldEntID},
			stock.FieldGoodID:       {Type: field.TypeUUID, Column: stock.FieldGoodID},
			stock.FieldTotal:        {Type: field.TypeOther, Column: stock.FieldTotal},
			stock.FieldSpotQuantity: {Type: field.TypeOther, Column: stock.FieldSpotQuantity},
			stock.FieldLocked:       {Type: field.TypeOther, Column: stock.FieldLocked},
			stock.FieldInService:    {Type: field.TypeOther, Column: stock.FieldInService},
			stock.FieldWaitStart:    {Type: field.TypeOther, Column: stock.FieldWaitStart},
			stock.FieldSold:         {Type: field.TypeOther, Column: stock.FieldSold},
			stock.FieldAppReserved:  {Type: field.TypeOther, Column: stock.FieldAppReserved},
		},
	}
	graph.Nodes[39] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   topmost.Table,
			Columns: topmost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: topmost.FieldID,
			},
		},
		Type: "TopMost",
		Fields: map[string]*sqlgraph.FieldSpec{
			topmost.FieldEntID:       {Type: field.TypeUUID, Column: topmost.FieldEntID},
			topmost.FieldAppID:       {Type: field.TypeUUID, Column: topmost.FieldAppID},
			topmost.FieldTopMostType: {Type: field.TypeString, Column: topmost.FieldTopMostType},
			topmost.FieldTitle:       {Type: field.TypeString, Column: topmost.FieldTitle},
			topmost.FieldMessage:     {Type: field.TypeString, Column: topmost.FieldMessage},
			topmost.FieldTargetURL:   {Type: field.TypeString, Column: topmost.FieldTargetURL},
			topmost.FieldStartAt:     {Type: field.TypeUint32, Column: topmost.FieldStartAt},
			topmost.FieldEndAt:       {Type: field.TypeUint32, Column: topmost.FieldEndAt},
		},
	}
	graph.Nodes[40] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   topmostconstraint.Table,
			Columns: topmostconstraint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: topmostconstraint.FieldID,
			},
		},
		Type: "TopMostConstraint",
		Fields: map[string]*sqlgraph.FieldSpec{
			topmostconstraint.FieldEntID:       {Type: field.TypeUUID, Column: topmostconstraint.FieldEntID},
			topmostconstraint.FieldTopMostID:   {Type: field.TypeUUID, Column: topmostconstraint.FieldTopMostID},
			topmostconstraint.FieldConstraint:  {Type: field.TypeString, Column: topmostconstraint.FieldConstraint},
			topmostconstraint.FieldTargetValue: {Type: field.TypeOther, Column: topmostconstraint.FieldTargetValue},
			topmostconstraint.FieldIndex:       {Type: field.TypeUint8, Column: topmostconstraint.FieldIndex},
		},
	}
	graph.Nodes[41] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   topmostgood.Table,
			Columns: topmostgood.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: topmostgood.FieldID,
			},
		},
		Type: "TopMostGood",
		Fields: map[string]*sqlgraph.FieldSpec{
			topmostgood.FieldEntID:        {Type: field.TypeUUID, Column: topmostgood.FieldEntID},
			topmostgood.FieldAppGoodID:    {Type: field.TypeUUID, Column: topmostgood.FieldAppGoodID},
			topmostgood.FieldTopMostID:    {Type: field.TypeUUID, Column: topmostgood.FieldTopMostID},
			topmostgood.FieldDisplayIndex: {Type: field.TypeUint32, Column: topmostgood.FieldDisplayIndex},
			topmostgood.FieldUnitPrice:    {Type: field.TypeOther, Column: topmostgood.FieldUnitPrice},
		},
	}
	graph.Nodes[42] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   topmostgoodconstraint.Table,
			Columns: topmostgoodconstraint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: topmostgoodconstraint.FieldID,
			},
		},
		Type: "TopMostGoodConstraint",
		Fields: map[string]*sqlgraph.FieldSpec{
			topmostgoodconstraint.FieldEntID:         {Type: field.TypeUUID, Column: topmostgoodconstraint.FieldEntID},
			topmostgoodconstraint.FieldTopMostGoodID: {Type: field.TypeUUID, Column: topmostgoodconstraint.FieldTopMostGoodID},
			topmostgoodconstraint.FieldConstraint:    {Type: field.TypeString, Column: topmostgoodconstraint.FieldConstraint},
			topmostgoodconstraint.FieldTargetValue:   {Type: field.TypeOther, Column: topmostgoodconstraint.FieldTargetValue},
			topmostgoodconstraint.FieldIndex:         {Type: field.TypeUint8, Column: topmostgoodconstraint.FieldIndex},
		},
	}
	graph.Nodes[43] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   topmostgoodposter.Table,
			Columns: topmostgoodposter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: topmostgoodposter.FieldID,
			},
		},
		Type: "TopMostGoodPoster",
		Fields: map[string]*sqlgraph.FieldSpec{
			topmostgoodposter.FieldEntID:         {Type: field.TypeUUID, Column: topmostgoodposter.FieldEntID},
			topmostgoodposter.FieldTopMostGoodID: {Type: field.TypeUUID, Column: topmostgoodposter.FieldTopMostGoodID},
			topmostgoodposter.FieldPoster:        {Type: field.TypeString, Column: topmostgoodposter.FieldPoster},
			topmostgoodposter.FieldIndex:         {Type: field.TypeUint8, Column: topmostgoodposter.FieldIndex},
		},
	}
	graph.Nodes[44] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   topmostposter.Table,
			Columns: topmostposter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: topmostposter.FieldID,
			},
		},
		Type: "TopMostPoster",
		Fields: map[string]*sqlgraph.FieldSpec{
			topmostposter.FieldEntID:     {Type: field.TypeUUID, Column: topmostposter.FieldEntID},
			topmostposter.FieldTopMostID: {Type: field.TypeUUID, Column: topmostposter.FieldTopMostID},
			topmostposter.FieldPoster:    {Type: field.TypeString, Column: topmostposter.FieldPoster},
			topmostposter.FieldIndex:     {Type: field.TypeUint8, Column: topmostposter.FieldIndex},
		},
	}
	graph.Nodes[45] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   vendorbrand.Table,
			Columns: vendorbrand.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: vendorbrand.FieldID,
			},
		},
		Type: "VendorBrand",
		Fields: map[string]*sqlgraph.FieldSpec{
			vendorbrand.FieldEntID: {Type: field.TypeUUID, Column: vendorbrand.FieldEntID},
			vendorbrand.FieldName:  {Type: field.TypeString, Column: vendorbrand.FieldName},
			vendorbrand.FieldLogo:  {Type: field.TypeString, Column: vendorbrand.FieldLogo},
		},
	}
	graph.Nodes[46] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   vendorlocation.Table,
			Columns: vendorlocation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: vendorlocation.FieldID,
			},
		},
		Type: "VendorLocation",
		Fields: map[string]*sqlgraph.FieldSpec{
			vendorlocation.FieldEntID:    {Type: field.TypeUUID, Column: vendorlocation.FieldEntID},
			vendorlocation.FieldCountry:  {Type: field.TypeString, Column: vendorlocation.FieldCountry},
			vendorlocation.FieldProvince: {Type: field.TypeString, Column: vendorlocation.FieldProvince},
			vendorlocation.FieldCity:     {Type: field.TypeString, Column: vendorlocation.FieldCity},
			vendorlocation.FieldAddress:  {Type: field.TypeString, Column: vendorlocation.FieldAddress},
			vendorlocation.FieldBrandID:  {Type: field.TypeUUID, Column: vendorlocation.FieldBrandID},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (adgq *AppDefaultGoodQuery) addPredicate(pred func(s *sql.Selector)) {
	adgq.predicates = append(adgq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppDefaultGoodQuery builder.
func (adgq *AppDefaultGoodQuery) Filter() *AppDefaultGoodFilter {
	return &AppDefaultGoodFilter{config: adgq.config, predicateAdder: adgq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppDefaultGoodMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppDefaultGoodMutation builder.
func (m *AppDefaultGoodMutation) Filter() *AppDefaultGoodFilter {
	return &AppDefaultGoodFilter{config: m.config, predicateAdder: m}
}

// AppDefaultGoodFilter provides a generic filtering capability at runtime for AppDefaultGoodQuery.
type AppDefaultGoodFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppDefaultGoodFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppDefaultGoodFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appdefaultgood.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppDefaultGoodFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appdefaultgood.FieldEntID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *AppDefaultGoodFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(appdefaultgood.FieldAppGoodID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *AppDefaultGoodFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(appdefaultgood.FieldCoinTypeID))
}

// addPredicate implements the predicateAdder interface.
func (adsq *AppDelegatedStakingQuery) addPredicate(pred func(s *sql.Selector)) {
	adsq.predicates = append(adsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppDelegatedStakingQuery builder.
func (adsq *AppDelegatedStakingQuery) Filter() *AppDelegatedStakingFilter {
	return &AppDelegatedStakingFilter{config: adsq.config, predicateAdder: adsq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppDelegatedStakingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppDelegatedStakingMutation builder.
func (m *AppDelegatedStakingMutation) Filter() *AppDelegatedStakingFilter {
	return &AppDelegatedStakingFilter{config: m.config, predicateAdder: m}
}

// AppDelegatedStakingFilter provides a generic filtering capability at runtime for AppDelegatedStakingQuery.
type AppDelegatedStakingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppDelegatedStakingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppDelegatedStakingFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appdelegatedstaking.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppDelegatedStakingFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appdelegatedstaking.FieldEntID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *AppDelegatedStakingFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(appdelegatedstaking.FieldAppGoodID))
}

// WhereServiceStartAt applies the entql uint32 predicate on the service_start_at field.
func (f *AppDelegatedStakingFilter) WhereServiceStartAt(p entql.Uint32P) {
	f.Where(p.Field(appdelegatedstaking.FieldServiceStartAt))
}

// WhereStartMode applies the entql string predicate on the start_mode field.
func (f *AppDelegatedStakingFilter) WhereStartMode(p entql.StringP) {
	f.Where(p.Field(appdelegatedstaking.FieldStartMode))
}

// WhereEnableSetCommission applies the entql bool predicate on the enable_set_commission field.
func (f *AppDelegatedStakingFilter) WhereEnableSetCommission(p entql.BoolP) {
	f.Where(p.Field(appdelegatedstaking.FieldEnableSetCommission))
}

// addPredicate implements the predicateAdder interface.
func (afq *AppFeeQuery) addPredicate(pred func(s *sql.Selector)) {
	afq.predicates = append(afq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppFeeQuery builder.
func (afq *AppFeeQuery) Filter() *AppFeeFilter {
	return &AppFeeFilter{config: afq.config, predicateAdder: afq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppFeeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppFeeMutation builder.
func (m *AppFeeMutation) Filter() *AppFeeFilter {
	return &AppFeeFilter{config: m.config, predicateAdder: m}
}

// AppFeeFilter provides a generic filtering capability at runtime for AppFeeQuery.
type AppFeeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppFeeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppFeeFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appfee.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppFeeFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appfee.FieldEntID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *AppFeeFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(appfee.FieldAppGoodID))
}

// WhereUnitValue applies the entql other predicate on the unit_value field.
func (f *AppFeeFilter) WhereUnitValue(p entql.OtherP) {
	f.Where(p.Field(appfee.FieldUnitValue))
}

// WhereCancelMode applies the entql string predicate on the cancel_mode field.
func (f *AppFeeFilter) WhereCancelMode(p entql.StringP) {
	f.Where(p.Field(appfee.FieldCancelMode))
}

// WhereMinOrderDurationSeconds applies the entql uint32 predicate on the min_order_duration_seconds field.
func (f *AppFeeFilter) WhereMinOrderDurationSeconds(p entql.Uint32P) {
	f.Where(p.Field(appfee.FieldMinOrderDurationSeconds))
}

// addPredicate implements the predicateAdder interface.
func (agq *AppGoodQuery) addPredicate(pred func(s *sql.Selector)) {
	agq.predicates = append(agq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppGoodQuery builder.
func (agq *AppGoodQuery) Filter() *AppGoodFilter {
	return &AppGoodFilter{config: agq.config, predicateAdder: agq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppGoodMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppGoodMutation builder.
func (m *AppGoodMutation) Filter() *AppGoodFilter {
	return &AppGoodFilter{config: m.config, predicateAdder: m}
}

// AppGoodFilter provides a generic filtering capability at runtime for AppGoodQuery.
type AppGoodFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppGoodFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppGoodFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appgood.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppGoodFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appgood.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppGoodFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appgood.FieldAppID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *AppGoodFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(appgood.FieldGoodID))
}

// WhereOnline applies the entql bool predicate on the online field.
func (f *AppGoodFilter) WhereOnline(p entql.BoolP) {
	f.Where(p.Field(appgood.FieldOnline))
}

// WhereVisible applies the entql bool predicate on the visible field.
func (f *AppGoodFilter) WhereVisible(p entql.BoolP) {
	f.Where(p.Field(appgood.FieldVisible))
}

// WhereGoodName applies the entql string predicate on the good_name field.
func (f *AppGoodFilter) WhereGoodName(p entql.StringP) {
	f.Where(p.Field(appgood.FieldGoodName))
}

// WhereUnitPrice applies the entql other predicate on the unit_price field.
func (f *AppGoodFilter) WhereUnitPrice(p entql.OtherP) {
	f.Where(p.Field(appgood.FieldUnitPrice))
}

// WherePackagePrice applies the entql other predicate on the package_price field.
func (f *AppGoodFilter) WherePackagePrice(p entql.OtherP) {
	f.Where(p.Field(appgood.FieldPackagePrice))
}

// WhereDisplayIndex applies the entql int32 predicate on the display_index field.
func (f *AppGoodFilter) WhereDisplayIndex(p entql.Int32P) {
	f.Where(p.Field(appgood.FieldDisplayIndex))
}

// WhereSaleStartAt applies the entql uint32 predicate on the sale_start_at field.
func (f *AppGoodFilter) WhereSaleStartAt(p entql.Uint32P) {
	f.Where(p.Field(appgood.FieldSaleStartAt))
}

// WhereSaleEndAt applies the entql uint32 predicate on the sale_end_at field.
func (f *AppGoodFilter) WhereSaleEndAt(p entql.Uint32P) {
	f.Where(p.Field(appgood.FieldSaleEndAt))
}

// WhereServiceStartAt applies the entql uint32 predicate on the service_start_at field.
func (f *AppGoodFilter) WhereServiceStartAt(p entql.Uint32P) {
	f.Where(p.Field(appgood.FieldServiceStartAt))
}

// WhereTechnicalFeeRatio applies the entql other predicate on the technical_fee_ratio field.
func (f *AppGoodFilter) WhereTechnicalFeeRatio(p entql.OtherP) {
	f.Where(p.Field(appgood.FieldTechnicalFeeRatio))
}

// WhereElectricityFeeRatio applies the entql other predicate on the electricity_fee_ratio field.
func (f *AppGoodFilter) WhereElectricityFeeRatio(p entql.OtherP) {
	f.Where(p.Field(appgood.FieldElectricityFeeRatio))
}

// WhereDescriptions applies the entql json.RawMessage predicate on the descriptions field.
func (f *AppGoodFilter) WhereDescriptions(p entql.BytesP) {
	f.Where(p.Field(appgood.FieldDescriptions))
}

// WhereGoodBanner applies the entql string predicate on the good_banner field.
func (f *AppGoodFilter) WhereGoodBanner(p entql.StringP) {
	f.Where(p.Field(appgood.FieldGoodBanner))
}

// WhereDisplayNames applies the entql json.RawMessage predicate on the display_names field.
func (f *AppGoodFilter) WhereDisplayNames(p entql.BytesP) {
	f.Where(p.Field(appgood.FieldDisplayNames))
}

// WhereEnablePurchase applies the entql bool predicate on the enable_purchase field.
func (f *AppGoodFilter) WhereEnablePurchase(p entql.BoolP) {
	f.Where(p.Field(appgood.FieldEnablePurchase))
}

// WhereEnableProductPage applies the entql bool predicate on the enable_product_page field.
func (f *AppGoodFilter) WhereEnableProductPage(p entql.BoolP) {
	f.Where(p.Field(appgood.FieldEnableProductPage))
}

// WhereCancelMode applies the entql string predicate on the cancel_mode field.
func (f *AppGoodFilter) WhereCancelMode(p entql.StringP) {
	f.Where(p.Field(appgood.FieldCancelMode))
}

// WhereDisplayColors applies the entql json.RawMessage predicate on the display_colors field.
func (f *AppGoodFilter) WhereDisplayColors(p entql.BytesP) {
	f.Where(p.Field(appgood.FieldDisplayColors))
}

// WhereCancellableBeforeStart applies the entql uint32 predicate on the cancellable_before_start field.
func (f *AppGoodFilter) WhereCancellableBeforeStart(p entql.Uint32P) {
	f.Where(p.Field(appgood.FieldCancellableBeforeStart))
}

// WhereProductPage applies the entql string predicate on the product_page field.
func (f *AppGoodFilter) WhereProductPage(p entql.StringP) {
	f.Where(p.Field(appgood.FieldProductPage))
}

// WhereEnableSetCommission applies the entql bool predicate on the enable_set_commission field.
func (f *AppGoodFilter) WhereEnableSetCommission(p entql.BoolP) {
	f.Where(p.Field(appgood.FieldEnableSetCommission))
}

// WherePosters applies the entql json.RawMessage predicate on the posters field.
func (f *AppGoodFilter) WherePosters(p entql.BytesP) {
	f.Where(p.Field(appgood.FieldPosters))
}

// WhereMinOrderAmount applies the entql other predicate on the min_order_amount field.
func (f *AppGoodFilter) WhereMinOrderAmount(p entql.OtherP) {
	f.Where(p.Field(appgood.FieldMinOrderAmount))
}

// WhereMaxOrderAmount applies the entql other predicate on the max_order_amount field.
func (f *AppGoodFilter) WhereMaxOrderAmount(p entql.OtherP) {
	f.Where(p.Field(appgood.FieldMaxOrderAmount))
}

// WhereMaxUserAmount applies the entql other predicate on the max_user_amount field.
func (f *AppGoodFilter) WhereMaxUserAmount(p entql.OtherP) {
	f.Where(p.Field(appgood.FieldMaxUserAmount))
}

// WhereMinOrderDuration applies the entql uint32 predicate on the min_order_duration field.
func (f *AppGoodFilter) WhereMinOrderDuration(p entql.Uint32P) {
	f.Where(p.Field(appgood.FieldMinOrderDuration))
}

// WhereMaxOrderDuration applies the entql uint32 predicate on the max_order_duration field.
func (f *AppGoodFilter) WhereMaxOrderDuration(p entql.Uint32P) {
	f.Where(p.Field(appgood.FieldMaxOrderDuration))
}

// WherePackageWithRequireds applies the entql bool predicate on the package_with_requireds field.
func (f *AppGoodFilter) WherePackageWithRequireds(p entql.BoolP) {
	f.Where(p.Field(appgood.FieldPackageWithRequireds))
}

// addPredicate implements the predicateAdder interface.
func (agbq *AppGoodBaseQuery) addPredicate(pred func(s *sql.Selector)) {
	agbq.predicates = append(agbq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppGoodBaseQuery builder.
func (agbq *AppGoodBaseQuery) Filter() *AppGoodBaseFilter {
	return &AppGoodBaseFilter{config: agbq.config, predicateAdder: agbq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppGoodBaseMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppGoodBaseMutation builder.
func (m *AppGoodBaseMutation) Filter() *AppGoodBaseFilter {
	return &AppGoodBaseFilter{config: m.config, predicateAdder: m}
}

// AppGoodBaseFilter provides a generic filtering capability at runtime for AppGoodBaseQuery.
type AppGoodBaseFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppGoodBaseFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppGoodBaseFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appgoodbase.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppGoodBaseFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appgoodbase.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppGoodBaseFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appgoodbase.FieldAppID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *AppGoodBaseFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(appgoodbase.FieldGoodID))
}

// WherePurchasable applies the entql bool predicate on the purchasable field.
func (f *AppGoodBaseFilter) WherePurchasable(p entql.BoolP) {
	f.Where(p.Field(appgoodbase.FieldPurchasable))
}

// WhereEnableProductPage applies the entql bool predicate on the enable_product_page field.
func (f *AppGoodBaseFilter) WhereEnableProductPage(p entql.BoolP) {
	f.Where(p.Field(appgoodbase.FieldEnableProductPage))
}

// WhereProductPage applies the entql string predicate on the product_page field.
func (f *AppGoodBaseFilter) WhereProductPage(p entql.StringP) {
	f.Where(p.Field(appgoodbase.FieldProductPage))
}

// WhereOnline applies the entql bool predicate on the online field.
func (f *AppGoodBaseFilter) WhereOnline(p entql.BoolP) {
	f.Where(p.Field(appgoodbase.FieldOnline))
}

// WhereVisible applies the entql bool predicate on the visible field.
func (f *AppGoodBaseFilter) WhereVisible(p entql.BoolP) {
	f.Where(p.Field(appgoodbase.FieldVisible))
}

// WhereName applies the entql string predicate on the name field.
func (f *AppGoodBaseFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(appgoodbase.FieldName))
}

// WhereDisplayIndex applies the entql int32 predicate on the display_index field.
func (f *AppGoodBaseFilter) WhereDisplayIndex(p entql.Int32P) {
	f.Where(p.Field(appgoodbase.FieldDisplayIndex))
}

// WhereBanner applies the entql string predicate on the banner field.
func (f *AppGoodBaseFilter) WhereBanner(p entql.StringP) {
	f.Where(p.Field(appgoodbase.FieldBanner))
}

// addPredicate implements the predicateAdder interface.
func (agdq *AppGoodDescriptionQuery) addPredicate(pred func(s *sql.Selector)) {
	agdq.predicates = append(agdq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppGoodDescriptionQuery builder.
func (agdq *AppGoodDescriptionQuery) Filter() *AppGoodDescriptionFilter {
	return &AppGoodDescriptionFilter{config: agdq.config, predicateAdder: agdq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppGoodDescriptionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppGoodDescriptionMutation builder.
func (m *AppGoodDescriptionMutation) Filter() *AppGoodDescriptionFilter {
	return &AppGoodDescriptionFilter{config: m.config, predicateAdder: m}
}

// AppGoodDescriptionFilter provides a generic filtering capability at runtime for AppGoodDescriptionQuery.
type AppGoodDescriptionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppGoodDescriptionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppGoodDescriptionFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appgooddescription.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppGoodDescriptionFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appgooddescription.FieldEntID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *AppGoodDescriptionFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(appgooddescription.FieldAppGoodID))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *AppGoodDescriptionFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(appgooddescription.FieldDescription))
}

// WhereIndex applies the entql uint8 predicate on the index field.
func (f *AppGoodDescriptionFilter) WhereIndex(p entql.Uint8P) {
	f.Where(p.Field(appgooddescription.FieldIndex))
}

// addPredicate implements the predicateAdder interface.
func (agdcq *AppGoodDisplayColorQuery) addPredicate(pred func(s *sql.Selector)) {
	agdcq.predicates = append(agdcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppGoodDisplayColorQuery builder.
func (agdcq *AppGoodDisplayColorQuery) Filter() *AppGoodDisplayColorFilter {
	return &AppGoodDisplayColorFilter{config: agdcq.config, predicateAdder: agdcq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppGoodDisplayColorMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppGoodDisplayColorMutation builder.
func (m *AppGoodDisplayColorMutation) Filter() *AppGoodDisplayColorFilter {
	return &AppGoodDisplayColorFilter{config: m.config, predicateAdder: m}
}

// AppGoodDisplayColorFilter provides a generic filtering capability at runtime for AppGoodDisplayColorQuery.
type AppGoodDisplayColorFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppGoodDisplayColorFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppGoodDisplayColorFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appgooddisplaycolor.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppGoodDisplayColorFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appgooddisplaycolor.FieldEntID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *AppGoodDisplayColorFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(appgooddisplaycolor.FieldAppGoodID))
}

// WhereColor applies the entql string predicate on the color field.
func (f *AppGoodDisplayColorFilter) WhereColor(p entql.StringP) {
	f.Where(p.Field(appgooddisplaycolor.FieldColor))
}

// WhereIndex applies the entql uint8 predicate on the index field.
func (f *AppGoodDisplayColorFilter) WhereIndex(p entql.Uint8P) {
	f.Where(p.Field(appgooddisplaycolor.FieldIndex))
}

// addPredicate implements the predicateAdder interface.
func (agdnq *AppGoodDisplayNameQuery) addPredicate(pred func(s *sql.Selector)) {
	agdnq.predicates = append(agdnq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppGoodDisplayNameQuery builder.
func (agdnq *AppGoodDisplayNameQuery) Filter() *AppGoodDisplayNameFilter {
	return &AppGoodDisplayNameFilter{config: agdnq.config, predicateAdder: agdnq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppGoodDisplayNameMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppGoodDisplayNameMutation builder.
func (m *AppGoodDisplayNameMutation) Filter() *AppGoodDisplayNameFilter {
	return &AppGoodDisplayNameFilter{config: m.config, predicateAdder: m}
}

// AppGoodDisplayNameFilter provides a generic filtering capability at runtime for AppGoodDisplayNameQuery.
type AppGoodDisplayNameFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppGoodDisplayNameFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppGoodDisplayNameFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appgooddisplayname.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppGoodDisplayNameFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appgooddisplayname.FieldEntID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *AppGoodDisplayNameFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(appgooddisplayname.FieldAppGoodID))
}

// WhereName applies the entql string predicate on the name field.
func (f *AppGoodDisplayNameFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(appgooddisplayname.FieldName))
}

// WhereIndex applies the entql uint8 predicate on the index field.
func (f *AppGoodDisplayNameFilter) WhereIndex(p entql.Uint8P) {
	f.Where(p.Field(appgooddisplayname.FieldIndex))
}

// addPredicate implements the predicateAdder interface.
func (aglq *AppGoodLabelQuery) addPredicate(pred func(s *sql.Selector)) {
	aglq.predicates = append(aglq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppGoodLabelQuery builder.
func (aglq *AppGoodLabelQuery) Filter() *AppGoodLabelFilter {
	return &AppGoodLabelFilter{config: aglq.config, predicateAdder: aglq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppGoodLabelMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppGoodLabelMutation builder.
func (m *AppGoodLabelMutation) Filter() *AppGoodLabelFilter {
	return &AppGoodLabelFilter{config: m.config, predicateAdder: m}
}

// AppGoodLabelFilter provides a generic filtering capability at runtime for AppGoodLabelQuery.
type AppGoodLabelFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppGoodLabelFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppGoodLabelFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appgoodlabel.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppGoodLabelFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appgoodlabel.FieldEntID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *AppGoodLabelFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(appgoodlabel.FieldAppGoodID))
}

// WhereIcon applies the entql string predicate on the icon field.
func (f *AppGoodLabelFilter) WhereIcon(p entql.StringP) {
	f.Where(p.Field(appgoodlabel.FieldIcon))
}

// WhereIconBgColor applies the entql string predicate on the icon_bg_color field.
func (f *AppGoodLabelFilter) WhereIconBgColor(p entql.StringP) {
	f.Where(p.Field(appgoodlabel.FieldIconBgColor))
}

// WhereLabel applies the entql string predicate on the label field.
func (f *AppGoodLabelFilter) WhereLabel(p entql.StringP) {
	f.Where(p.Field(appgoodlabel.FieldLabel))
}

// WhereLabelBgColor applies the entql string predicate on the label_bg_color field.
func (f *AppGoodLabelFilter) WhereLabelBgColor(p entql.StringP) {
	f.Where(p.Field(appgoodlabel.FieldLabelBgColor))
}

// WhereIndex applies the entql uint8 predicate on the index field.
func (f *AppGoodLabelFilter) WhereIndex(p entql.Uint8P) {
	f.Where(p.Field(appgoodlabel.FieldIndex))
}

// addPredicate implements the predicateAdder interface.
func (agpq *AppGoodPosterQuery) addPredicate(pred func(s *sql.Selector)) {
	agpq.predicates = append(agpq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppGoodPosterQuery builder.
func (agpq *AppGoodPosterQuery) Filter() *AppGoodPosterFilter {
	return &AppGoodPosterFilter{config: agpq.config, predicateAdder: agpq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppGoodPosterMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppGoodPosterMutation builder.
func (m *AppGoodPosterMutation) Filter() *AppGoodPosterFilter {
	return &AppGoodPosterFilter{config: m.config, predicateAdder: m}
}

// AppGoodPosterFilter provides a generic filtering capability at runtime for AppGoodPosterQuery.
type AppGoodPosterFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppGoodPosterFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppGoodPosterFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appgoodposter.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppGoodPosterFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appgoodposter.FieldEntID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *AppGoodPosterFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(appgoodposter.FieldAppGoodID))
}

// WherePoster applies the entql string predicate on the poster field.
func (f *AppGoodPosterFilter) WherePoster(p entql.StringP) {
	f.Where(p.Field(appgoodposter.FieldPoster))
}

// WhereIndex applies the entql uint8 predicate on the index field.
func (f *AppGoodPosterFilter) WhereIndex(p entql.Uint8P) {
	f.Where(p.Field(appgoodposter.FieldIndex))
}

// addPredicate implements the predicateAdder interface.
func (alprq *AppLegacyPowerRentalQuery) addPredicate(pred func(s *sql.Selector)) {
	alprq.predicates = append(alprq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppLegacyPowerRentalQuery builder.
func (alprq *AppLegacyPowerRentalQuery) Filter() *AppLegacyPowerRentalFilter {
	return &AppLegacyPowerRentalFilter{config: alprq.config, predicateAdder: alprq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppLegacyPowerRentalMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppLegacyPowerRentalMutation builder.
func (m *AppLegacyPowerRentalMutation) Filter() *AppLegacyPowerRentalFilter {
	return &AppLegacyPowerRentalFilter{config: m.config, predicateAdder: m}
}

// AppLegacyPowerRentalFilter provides a generic filtering capability at runtime for AppLegacyPowerRentalQuery.
type AppLegacyPowerRentalFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppLegacyPowerRentalFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppLegacyPowerRentalFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(applegacypowerrental.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppLegacyPowerRentalFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(applegacypowerrental.FieldEntID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *AppLegacyPowerRentalFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(applegacypowerrental.FieldAppGoodID))
}

// WhereTechniqueFeeRatio applies the entql other predicate on the technique_fee_ratio field.
func (f *AppLegacyPowerRentalFilter) WhereTechniqueFeeRatio(p entql.OtherP) {
	f.Where(p.Field(applegacypowerrental.FieldTechniqueFeeRatio))
}

// addPredicate implements the predicateAdder interface.
func (amgsq *AppMiningGoodStockQuery) addPredicate(pred func(s *sql.Selector)) {
	amgsq.predicates = append(amgsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppMiningGoodStockQuery builder.
func (amgsq *AppMiningGoodStockQuery) Filter() *AppMiningGoodStockFilter {
	return &AppMiningGoodStockFilter{config: amgsq.config, predicateAdder: amgsq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppMiningGoodStockMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppMiningGoodStockMutation builder.
func (m *AppMiningGoodStockMutation) Filter() *AppMiningGoodStockFilter {
	return &AppMiningGoodStockFilter{config: m.config, predicateAdder: m}
}

// AppMiningGoodStockFilter provides a generic filtering capability at runtime for AppMiningGoodStockQuery.
type AppMiningGoodStockFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppMiningGoodStockFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppMiningGoodStockFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appmininggoodstock.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppMiningGoodStockFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appmininggoodstock.FieldEntID))
}

// WhereAppGoodStockID applies the entql [16]byte predicate on the app_good_stock_id field.
func (f *AppMiningGoodStockFilter) WhereAppGoodStockID(p entql.ValueP) {
	f.Where(p.Field(appmininggoodstock.FieldAppGoodStockID))
}

// WhereMiningGoodStockID applies the entql [16]byte predicate on the mining_good_stock_id field.
func (f *AppMiningGoodStockFilter) WhereMiningGoodStockID(p entql.ValueP) {
	f.Where(p.Field(appmininggoodstock.FieldMiningGoodStockID))
}

// WhereReserved applies the entql other predicate on the reserved field.
func (f *AppMiningGoodStockFilter) WhereReserved(p entql.OtherP) {
	f.Where(p.Field(appmininggoodstock.FieldReserved))
}

// WhereSpotQuantity applies the entql other predicate on the spot_quantity field.
func (f *AppMiningGoodStockFilter) WhereSpotQuantity(p entql.OtherP) {
	f.Where(p.Field(appmininggoodstock.FieldSpotQuantity))
}

// WhereLocked applies the entql other predicate on the locked field.
func (f *AppMiningGoodStockFilter) WhereLocked(p entql.OtherP) {
	f.Where(p.Field(appmininggoodstock.FieldLocked))
}

// WhereInService applies the entql other predicate on the in_service field.
func (f *AppMiningGoodStockFilter) WhereInService(p entql.OtherP) {
	f.Where(p.Field(appmininggoodstock.FieldInService))
}

// WhereWaitStart applies the entql other predicate on the wait_start field.
func (f *AppMiningGoodStockFilter) WhereWaitStart(p entql.OtherP) {
	f.Where(p.Field(appmininggoodstock.FieldWaitStart))
}

// WhereSold applies the entql other predicate on the sold field.
func (f *AppMiningGoodStockFilter) WhereSold(p entql.OtherP) {
	f.Where(p.Field(appmininggoodstock.FieldSold))
}

// addPredicate implements the predicateAdder interface.
func (aprq *AppPowerRentalQuery) addPredicate(pred func(s *sql.Selector)) {
	aprq.predicates = append(aprq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppPowerRentalQuery builder.
func (aprq *AppPowerRentalQuery) Filter() *AppPowerRentalFilter {
	return &AppPowerRentalFilter{config: aprq.config, predicateAdder: aprq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppPowerRentalMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppPowerRentalMutation builder.
func (m *AppPowerRentalMutation) Filter() *AppPowerRentalFilter {
	return &AppPowerRentalFilter{config: m.config, predicateAdder: m}
}

// AppPowerRentalFilter provides a generic filtering capability at runtime for AppPowerRentalQuery.
type AppPowerRentalFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppPowerRentalFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppPowerRentalFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(apppowerrental.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppPowerRentalFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(apppowerrental.FieldEntID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *AppPowerRentalFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(apppowerrental.FieldAppGoodID))
}

// WhereServiceStartAt applies the entql uint32 predicate on the service_start_at field.
func (f *AppPowerRentalFilter) WhereServiceStartAt(p entql.Uint32P) {
	f.Where(p.Field(apppowerrental.FieldServiceStartAt))
}

// WhereStartMode applies the entql string predicate on the start_mode field.
func (f *AppPowerRentalFilter) WhereStartMode(p entql.StringP) {
	f.Where(p.Field(apppowerrental.FieldStartMode))
}

// WhereCancelMode applies the entql string predicate on the cancel_mode field.
func (f *AppPowerRentalFilter) WhereCancelMode(p entql.StringP) {
	f.Where(p.Field(apppowerrental.FieldCancelMode))
}

// WhereCancelableBeforeStartSeconds applies the entql uint32 predicate on the cancelable_before_start_seconds field.
func (f *AppPowerRentalFilter) WhereCancelableBeforeStartSeconds(p entql.Uint32P) {
	f.Where(p.Field(apppowerrental.FieldCancelableBeforeStartSeconds))
}

// WhereEnableSetCommission applies the entql bool predicate on the enable_set_commission field.
func (f *AppPowerRentalFilter) WhereEnableSetCommission(p entql.BoolP) {
	f.Where(p.Field(apppowerrental.FieldEnableSetCommission))
}

// WhereMinOrderAmount applies the entql other predicate on the min_order_amount field.
func (f *AppPowerRentalFilter) WhereMinOrderAmount(p entql.OtherP) {
	f.Where(p.Field(apppowerrental.FieldMinOrderAmount))
}

// WhereMaxOrderAmount applies the entql other predicate on the max_order_amount field.
func (f *AppPowerRentalFilter) WhereMaxOrderAmount(p entql.OtherP) {
	f.Where(p.Field(apppowerrental.FieldMaxOrderAmount))
}

// WhereMaxUserAmount applies the entql other predicate on the max_user_amount field.
func (f *AppPowerRentalFilter) WhereMaxUserAmount(p entql.OtherP) {
	f.Where(p.Field(apppowerrental.FieldMaxUserAmount))
}

// WhereMinOrderDurationSeconds applies the entql uint32 predicate on the min_order_duration_seconds field.
func (f *AppPowerRentalFilter) WhereMinOrderDurationSeconds(p entql.Uint32P) {
	f.Where(p.Field(apppowerrental.FieldMinOrderDurationSeconds))
}

// WhereMaxOrderDurationSeconds applies the entql uint32 predicate on the max_order_duration_seconds field.
func (f *AppPowerRentalFilter) WhereMaxOrderDurationSeconds(p entql.Uint32P) {
	f.Where(p.Field(apppowerrental.FieldMaxOrderDurationSeconds))
}

// WhereUnitPrice applies the entql other predicate on the unit_price field.
func (f *AppPowerRentalFilter) WhereUnitPrice(p entql.OtherP) {
	f.Where(p.Field(apppowerrental.FieldUnitPrice))
}

// WhereSaleStartAt applies the entql uint32 predicate on the sale_start_at field.
func (f *AppPowerRentalFilter) WhereSaleStartAt(p entql.Uint32P) {
	f.Where(p.Field(apppowerrental.FieldSaleStartAt))
}

// WhereSaleEndAt applies the entql uint32 predicate on the sale_end_at field.
func (f *AppPowerRentalFilter) WhereSaleEndAt(p entql.Uint32P) {
	f.Where(p.Field(apppowerrental.FieldSaleEndAt))
}

// WhereSaleMode applies the entql string predicate on the sale_mode field.
func (f *AppPowerRentalFilter) WhereSaleMode(p entql.StringP) {
	f.Where(p.Field(apppowerrental.FieldSaleMode))
}

// WhereFixedDuration applies the entql bool predicate on the fixed_duration field.
func (f *AppPowerRentalFilter) WhereFixedDuration(p entql.BoolP) {
	f.Where(p.Field(apppowerrental.FieldFixedDuration))
}

// WherePackageWithRequireds applies the entql bool predicate on the package_with_requireds field.
func (f *AppPowerRentalFilter) WherePackageWithRequireds(p entql.BoolP) {
	f.Where(p.Field(apppowerrental.FieldPackageWithRequireds))
}

// addPredicate implements the predicateAdder interface.
func (asprq *AppSimulatePowerRentalQuery) addPredicate(pred func(s *sql.Selector)) {
	asprq.predicates = append(asprq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppSimulatePowerRentalQuery builder.
func (asprq *AppSimulatePowerRentalQuery) Filter() *AppSimulatePowerRentalFilter {
	return &AppSimulatePowerRentalFilter{config: asprq.config, predicateAdder: asprq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppSimulatePowerRentalMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppSimulatePowerRentalMutation builder.
func (m *AppSimulatePowerRentalMutation) Filter() *AppSimulatePowerRentalFilter {
	return &AppSimulatePowerRentalFilter{config: m.config, predicateAdder: m}
}

// AppSimulatePowerRentalFilter provides a generic filtering capability at runtime for AppSimulatePowerRentalQuery.
type AppSimulatePowerRentalFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppSimulatePowerRentalFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppSimulatePowerRentalFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appsimulatepowerrental.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppSimulatePowerRentalFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appsimulatepowerrental.FieldEntID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *AppSimulatePowerRentalFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(appsimulatepowerrental.FieldAppGoodID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *AppSimulatePowerRentalFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(appsimulatepowerrental.FieldCoinTypeID))
}

// WhereOrderUnits applies the entql other predicate on the order_units field.
func (f *AppSimulatePowerRentalFilter) WhereOrderUnits(p entql.OtherP) {
	f.Where(p.Field(appsimulatepowerrental.FieldOrderUnits))
}

// WhereOrderDurationSeconds applies the entql uint32 predicate on the order_duration_seconds field.
func (f *AppSimulatePowerRentalFilter) WhereOrderDurationSeconds(p entql.Uint32P) {
	f.Where(p.Field(appsimulatepowerrental.FieldOrderDurationSeconds))
}

// addPredicate implements the predicateAdder interface.
func (asq *AppStockQuery) addPredicate(pred func(s *sql.Selector)) {
	asq.predicates = append(asq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppStockQuery builder.
func (asq *AppStockQuery) Filter() *AppStockFilter {
	return &AppStockFilter{config: asq.config, predicateAdder: asq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppStockMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppStockMutation builder.
func (m *AppStockMutation) Filter() *AppStockFilter {
	return &AppStockFilter{config: m.config, predicateAdder: m}
}

// AppStockFilter provides a generic filtering capability at runtime for AppStockQuery.
type AppStockFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppStockFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[14].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppStockFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appstock.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppStockFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appstock.FieldEntID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *AppStockFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(appstock.FieldAppGoodID))
}

// WhereReserved applies the entql other predicate on the reserved field.
func (f *AppStockFilter) WhereReserved(p entql.OtherP) {
	f.Where(p.Field(appstock.FieldReserved))
}

// WhereSpotQuantity applies the entql other predicate on the spot_quantity field.
func (f *AppStockFilter) WhereSpotQuantity(p entql.OtherP) {
	f.Where(p.Field(appstock.FieldSpotQuantity))
}

// WhereLocked applies the entql other predicate on the locked field.
func (f *AppStockFilter) WhereLocked(p entql.OtherP) {
	f.Where(p.Field(appstock.FieldLocked))
}

// WhereInService applies the entql other predicate on the in_service field.
func (f *AppStockFilter) WhereInService(p entql.OtherP) {
	f.Where(p.Field(appstock.FieldInService))
}

// WhereWaitStart applies the entql other predicate on the wait_start field.
func (f *AppStockFilter) WhereWaitStart(p entql.OtherP) {
	f.Where(p.Field(appstock.FieldWaitStart))
}

// WhereSold applies the entql other predicate on the sold field.
func (f *AppStockFilter) WhereSold(p entql.OtherP) {
	f.Where(p.Field(appstock.FieldSold))
}

// addPredicate implements the predicateAdder interface.
func (aslq *AppStockLockQuery) addPredicate(pred func(s *sql.Selector)) {
	aslq.predicates = append(aslq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppStockLockQuery builder.
func (aslq *AppStockLockQuery) Filter() *AppStockLockFilter {
	return &AppStockLockFilter{config: aslq.config, predicateAdder: aslq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppStockLockMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppStockLockMutation builder.
func (m *AppStockLockMutation) Filter() *AppStockLockFilter {
	return &AppStockLockFilter{config: m.config, predicateAdder: m}
}

// AppStockLockFilter provides a generic filtering capability at runtime for AppStockLockQuery.
type AppStockLockFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppStockLockFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[15].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppStockLockFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appstocklock.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppStockLockFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appstocklock.FieldEntID))
}

// WhereAppStockID applies the entql [16]byte predicate on the app_stock_id field.
func (f *AppStockLockFilter) WhereAppStockID(p entql.ValueP) {
	f.Where(p.Field(appstocklock.FieldAppStockID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *AppStockLockFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(appstocklock.FieldAppGoodID))
}

// WhereUnits applies the entql other predicate on the units field.
func (f *AppStockLockFilter) WhereUnits(p entql.OtherP) {
	f.Where(p.Field(appstocklock.FieldUnits))
}

// WhereAppSpotUnits applies the entql other predicate on the app_spot_units field.
func (f *AppStockLockFilter) WhereAppSpotUnits(p entql.OtherP) {
	f.Where(p.Field(appstocklock.FieldAppSpotUnits))
}

// WhereLockState applies the entql string predicate on the lock_state field.
func (f *AppStockLockFilter) WhereLockState(p entql.StringP) {
	f.Where(p.Field(appstocklock.FieldLockState))
}

// WhereChargeBackState applies the entql string predicate on the charge_back_state field.
func (f *AppStockLockFilter) WhereChargeBackState(p entql.StringP) {
	f.Where(p.Field(appstocklock.FieldChargeBackState))
}

// WhereExLockID applies the entql [16]byte predicate on the ex_lock_id field.
func (f *AppStockLockFilter) WhereExLockID(p entql.ValueP) {
	f.Where(p.Field(appstocklock.FieldExLockID))
}

// addPredicate implements the predicateAdder interface.
func (cq *CommentQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CommentQuery builder.
func (cq *CommentQuery) Filter() *CommentFilter {
	return &CommentFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CommentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CommentMutation builder.
func (m *CommentMutation) Filter() *CommentFilter {
	return &CommentFilter{config: m.config, predicateAdder: m}
}

// CommentFilter provides a generic filtering capability at runtime for CommentQuery.
type CommentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CommentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[16].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *CommentFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(comment.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *CommentFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(comment.FieldEntID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *CommentFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(comment.FieldUserID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *CommentFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(comment.FieldAppGoodID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *CommentFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(comment.FieldOrderID))
}

// WhereContent applies the entql string predicate on the content field.
func (f *CommentFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(comment.FieldContent))
}

// WhereReplyToID applies the entql [16]byte predicate on the reply_to_id field.
func (f *CommentFilter) WhereReplyToID(p entql.ValueP) {
	f.Where(p.Field(comment.FieldReplyToID))
}

// WhereAnonymous applies the entql bool predicate on the anonymous field.
func (f *CommentFilter) WhereAnonymous(p entql.BoolP) {
	f.Where(p.Field(comment.FieldAnonymous))
}

// WhereTrialUser applies the entql bool predicate on the trial_user field.
func (f *CommentFilter) WhereTrialUser(p entql.BoolP) {
	f.Where(p.Field(comment.FieldTrialUser))
}

// WherePurchasedUser applies the entql bool predicate on the purchased_user field.
func (f *CommentFilter) WherePurchasedUser(p entql.BoolP) {
	f.Where(p.Field(comment.FieldPurchasedUser))
}

// WhereHide applies the entql bool predicate on the hide field.
func (f *CommentFilter) WhereHide(p entql.BoolP) {
	f.Where(p.Field(comment.FieldHide))
}

// WhereHideReason applies the entql string predicate on the hide_reason field.
func (f *CommentFilter) WhereHideReason(p entql.StringP) {
	f.Where(p.Field(comment.FieldHideReason))
}

// addPredicate implements the predicateAdder interface.
func (dsq *DelegatedStakingQuery) addPredicate(pred func(s *sql.Selector)) {
	dsq.predicates = append(dsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DelegatedStakingQuery builder.
func (dsq *DelegatedStakingQuery) Filter() *DelegatedStakingFilter {
	return &DelegatedStakingFilter{config: dsq.config, predicateAdder: dsq}
}

// addPredicate implements the predicateAdder interface.
func (m *DelegatedStakingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DelegatedStakingMutation builder.
func (m *DelegatedStakingMutation) Filter() *DelegatedStakingFilter {
	return &DelegatedStakingFilter{config: m.config, predicateAdder: m}
}

// DelegatedStakingFilter provides a generic filtering capability at runtime for DelegatedStakingQuery.
type DelegatedStakingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DelegatedStakingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[17].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *DelegatedStakingFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(delegatedstaking.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *DelegatedStakingFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(delegatedstaking.FieldEntID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *DelegatedStakingFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(delegatedstaking.FieldGoodID))
}

// WhereContractCodeURL applies the entql string predicate on the contract_code_url field.
func (f *DelegatedStakingFilter) WhereContractCodeURL(p entql.StringP) {
	f.Where(p.Field(delegatedstaking.FieldContractCodeURL))
}

// WhereContractCodeBranch applies the entql string predicate on the contract_code_branch field.
func (f *DelegatedStakingFilter) WhereContractCodeBranch(p entql.StringP) {
	f.Where(p.Field(delegatedstaking.FieldContractCodeBranch))
}

// WhereContractState applies the entql string predicate on the contract_state field.
func (f *DelegatedStakingFilter) WhereContractState(p entql.StringP) {
	f.Where(p.Field(delegatedstaking.FieldContractState))
}

// addPredicate implements the predicateAdder interface.
func (diq *DeviceInfoQuery) addPredicate(pred func(s *sql.Selector)) {
	diq.predicates = append(diq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeviceInfoQuery builder.
func (diq *DeviceInfoQuery) Filter() *DeviceInfoFilter {
	return &DeviceInfoFilter{config: diq.config, predicateAdder: diq}
}

// addPredicate implements the predicateAdder interface.
func (m *DeviceInfoMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeviceInfoMutation builder.
func (m *DeviceInfoMutation) Filter() *DeviceInfoFilter {
	return &DeviceInfoFilter{config: m.config, predicateAdder: m}
}

// DeviceInfoFilter provides a generic filtering capability at runtime for DeviceInfoQuery.
type DeviceInfoFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DeviceInfoFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[18].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *DeviceInfoFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(deviceinfo.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *DeviceInfoFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(deviceinfo.FieldEntID))
}

// WhereType applies the entql string predicate on the type field.
func (f *DeviceInfoFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(deviceinfo.FieldType))
}

// WhereManufacturerID applies the entql [16]byte predicate on the manufacturer_id field.
func (f *DeviceInfoFilter) WhereManufacturerID(p entql.ValueP) {
	f.Where(p.Field(deviceinfo.FieldManufacturerID))
}

// WherePowerConsumption applies the entql uint32 predicate on the power_consumption field.
func (f *DeviceInfoFilter) WherePowerConsumption(p entql.Uint32P) {
	f.Where(p.Field(deviceinfo.FieldPowerConsumption))
}

// WhereShipmentAt applies the entql uint32 predicate on the shipment_at field.
func (f *DeviceInfoFilter) WhereShipmentAt(p entql.Uint32P) {
	f.Where(p.Field(deviceinfo.FieldShipmentAt))
}

// addPredicate implements the predicateAdder interface.
func (dmq *DeviceManufacturerQuery) addPredicate(pred func(s *sql.Selector)) {
	dmq.predicates = append(dmq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeviceManufacturerQuery builder.
func (dmq *DeviceManufacturerQuery) Filter() *DeviceManufacturerFilter {
	return &DeviceManufacturerFilter{config: dmq.config, predicateAdder: dmq}
}

// addPredicate implements the predicateAdder interface.
func (m *DeviceManufacturerMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeviceManufacturerMutation builder.
func (m *DeviceManufacturerMutation) Filter() *DeviceManufacturerFilter {
	return &DeviceManufacturerFilter{config: m.config, predicateAdder: m}
}

// DeviceManufacturerFilter provides a generic filtering capability at runtime for DeviceManufacturerQuery.
type DeviceManufacturerFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DeviceManufacturerFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[19].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *DeviceManufacturerFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(devicemanufacturer.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *DeviceManufacturerFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(devicemanufacturer.FieldEntID))
}

// WhereName applies the entql string predicate on the name field.
func (f *DeviceManufacturerFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(devicemanufacturer.FieldName))
}

// WhereLogo applies the entql string predicate on the logo field.
func (f *DeviceManufacturerFilter) WhereLogo(p entql.StringP) {
	f.Where(p.Field(devicemanufacturer.FieldLogo))
}

// addPredicate implements the predicateAdder interface.
func (dpq *DevicePosterQuery) addPredicate(pred func(s *sql.Selector)) {
	dpq.predicates = append(dpq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DevicePosterQuery builder.
func (dpq *DevicePosterQuery) Filter() *DevicePosterFilter {
	return &DevicePosterFilter{config: dpq.config, predicateAdder: dpq}
}

// addPredicate implements the predicateAdder interface.
func (m *DevicePosterMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DevicePosterMutation builder.
func (m *DevicePosterMutation) Filter() *DevicePosterFilter {
	return &DevicePosterFilter{config: m.config, predicateAdder: m}
}

// DevicePosterFilter provides a generic filtering capability at runtime for DevicePosterQuery.
type DevicePosterFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DevicePosterFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[20].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *DevicePosterFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(deviceposter.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *DevicePosterFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(deviceposter.FieldEntID))
}

// WhereDeviceTypeID applies the entql [16]byte predicate on the device_type_id field.
func (f *DevicePosterFilter) WhereDeviceTypeID(p entql.ValueP) {
	f.Where(p.Field(deviceposter.FieldDeviceTypeID))
}

// WherePoster applies the entql string predicate on the poster field.
func (f *DevicePosterFilter) WherePoster(p entql.StringP) {
	f.Where(p.Field(deviceposter.FieldPoster))
}

// WhereIndex applies the entql uint8 predicate on the index field.
func (f *DevicePosterFilter) WhereIndex(p entql.Uint8P) {
	f.Where(p.Field(deviceposter.FieldIndex))
}

// addPredicate implements the predicateAdder interface.
func (eiq *ExtraInfoQuery) addPredicate(pred func(s *sql.Selector)) {
	eiq.predicates = append(eiq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ExtraInfoQuery builder.
func (eiq *ExtraInfoQuery) Filter() *ExtraInfoFilter {
	return &ExtraInfoFilter{config: eiq.config, predicateAdder: eiq}
}

// addPredicate implements the predicateAdder interface.
func (m *ExtraInfoMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ExtraInfoMutation builder.
func (m *ExtraInfoMutation) Filter() *ExtraInfoFilter {
	return &ExtraInfoFilter{config: m.config, predicateAdder: m}
}

// ExtraInfoFilter provides a generic filtering capability at runtime for ExtraInfoQuery.
type ExtraInfoFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ExtraInfoFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[21].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *ExtraInfoFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(extrainfo.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *ExtraInfoFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(extrainfo.FieldEntID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *ExtraInfoFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(extrainfo.FieldAppGoodID))
}

// WhereLikes applies the entql uint32 predicate on the likes field.
func (f *ExtraInfoFilter) WhereLikes(p entql.Uint32P) {
	f.Where(p.Field(extrainfo.FieldLikes))
}

// WhereDislikes applies the entql uint32 predicate on the dislikes field.
func (f *ExtraInfoFilter) WhereDislikes(p entql.Uint32P) {
	f.Where(p.Field(extrainfo.FieldDislikes))
}

// WhereRecommendCount applies the entql uint32 predicate on the recommend_count field.
func (f *ExtraInfoFilter) WhereRecommendCount(p entql.Uint32P) {
	f.Where(p.Field(extrainfo.FieldRecommendCount))
}

// WhereCommentCount applies the entql uint32 predicate on the comment_count field.
func (f *ExtraInfoFilter) WhereCommentCount(p entql.Uint32P) {
	f.Where(p.Field(extrainfo.FieldCommentCount))
}

// WhereScoreCount applies the entql uint32 predicate on the score_count field.
func (f *ExtraInfoFilter) WhereScoreCount(p entql.Uint32P) {
	f.Where(p.Field(extrainfo.FieldScoreCount))
}

// WhereScore applies the entql other predicate on the score field.
func (f *ExtraInfoFilter) WhereScore(p entql.OtherP) {
	f.Where(p.Field(extrainfo.FieldScore))
}

// addPredicate implements the predicateAdder interface.
func (fcfq *FbmCrowdFundingQuery) addPredicate(pred func(s *sql.Selector)) {
	fcfq.predicates = append(fcfq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FbmCrowdFundingQuery builder.
func (fcfq *FbmCrowdFundingQuery) Filter() *FbmCrowdFundingFilter {
	return &FbmCrowdFundingFilter{config: fcfq.config, predicateAdder: fcfq}
}

// addPredicate implements the predicateAdder interface.
func (m *FbmCrowdFundingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FbmCrowdFundingMutation builder.
func (m *FbmCrowdFundingMutation) Filter() *FbmCrowdFundingFilter {
	return &FbmCrowdFundingFilter{config: m.config, predicateAdder: m}
}

// FbmCrowdFundingFilter provides a generic filtering capability at runtime for FbmCrowdFundingQuery.
type FbmCrowdFundingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FbmCrowdFundingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[22].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *FbmCrowdFundingFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(fbmcrowdfunding.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *FbmCrowdFundingFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(fbmcrowdfunding.FieldEntID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *FbmCrowdFundingFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(fbmcrowdfunding.FieldGoodID))
}

// WhereMinDepositAmount applies the entql other predicate on the min_deposit_amount field.
func (f *FbmCrowdFundingFilter) WhereMinDepositAmount(p entql.OtherP) {
	f.Where(p.Field(fbmcrowdfunding.FieldMinDepositAmount))
}

// WhereDeliveryAt applies the entql uint32 predicate on the delivery_at field.
func (f *FbmCrowdFundingFilter) WhereDeliveryAt(p entql.Uint32P) {
	f.Where(p.Field(fbmcrowdfunding.FieldDeliveryAt))
}

// WhereTargetAmount applies the entql other predicate on the target_amount field.
func (f *FbmCrowdFundingFilter) WhereTargetAmount(p entql.OtherP) {
	f.Where(p.Field(fbmcrowdfunding.FieldTargetAmount))
}

// WhereDepositStartAt applies the entql uint32 predicate on the deposit_start_at field.
func (f *FbmCrowdFundingFilter) WhereDepositStartAt(p entql.Uint32P) {
	f.Where(p.Field(fbmcrowdfunding.FieldDepositStartAt))
}

// WhereDepositEndAt applies the entql uint32 predicate on the deposit_end_at field.
func (f *FbmCrowdFundingFilter) WhereDepositEndAt(p entql.Uint32P) {
	f.Where(p.Field(fbmcrowdfunding.FieldDepositEndAt))
}

// WhereContractAddress applies the entql string predicate on the contract_address field.
func (f *FbmCrowdFundingFilter) WhereContractAddress(p entql.StringP) {
	f.Where(p.Field(fbmcrowdfunding.FieldContractAddress))
}

// WhereDepositCoinTypeID applies the entql [16]byte predicate on the deposit_coin_type_id field.
func (f *FbmCrowdFundingFilter) WhereDepositCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(fbmcrowdfunding.FieldDepositCoinTypeID))
}

// WhereRedeemable applies the entql bool predicate on the redeemable field.
func (f *FbmCrowdFundingFilter) WhereRedeemable(p entql.BoolP) {
	f.Where(p.Field(fbmcrowdfunding.FieldRedeemable))
}

// WhereRedeemDelayHours applies the entql uint32 predicate on the redeem_delay_hours field.
func (f *FbmCrowdFundingFilter) WhereRedeemDelayHours(p entql.Uint32P) {
	f.Where(p.Field(fbmcrowdfunding.FieldRedeemDelayHours))
}

// WhereDurationDisplayType applies the entql string predicate on the duration_display_type field.
func (f *FbmCrowdFundingFilter) WhereDurationDisplayType(p entql.StringP) {
	f.Where(p.Field(fbmcrowdfunding.FieldDurationDisplayType))
}

// WhereDurationSeconds applies the entql uint32 predicate on the duration_seconds field.
func (f *FbmCrowdFundingFilter) WhereDurationSeconds(p entql.Uint32P) {
	f.Where(p.Field(fbmcrowdfunding.FieldDurationSeconds))
}

// addPredicate implements the predicateAdder interface.
func (fq *FeeQuery) addPredicate(pred func(s *sql.Selector)) {
	fq.predicates = append(fq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FeeQuery builder.
func (fq *FeeQuery) Filter() *FeeFilter {
	return &FeeFilter{config: fq.config, predicateAdder: fq}
}

// addPredicate implements the predicateAdder interface.
func (m *FeeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FeeMutation builder.
func (m *FeeMutation) Filter() *FeeFilter {
	return &FeeFilter{config: m.config, predicateAdder: m}
}

// FeeFilter provides a generic filtering capability at runtime for FeeQuery.
type FeeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FeeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[23].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *FeeFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(fee.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *FeeFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(fee.FieldEntID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *FeeFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(fee.FieldGoodID))
}

// WhereSettlementType applies the entql string predicate on the settlement_type field.
func (f *FeeFilter) WhereSettlementType(p entql.StringP) {
	f.Where(p.Field(fee.FieldSettlementType))
}

// WhereUnitValue applies the entql other predicate on the unit_value field.
func (f *FeeFilter) WhereUnitValue(p entql.OtherP) {
	f.Where(p.Field(fee.FieldUnitValue))
}

// WhereDurationDisplayType applies the entql string predicate on the duration_display_type field.
func (f *FeeFilter) WhereDurationDisplayType(p entql.StringP) {
	f.Where(p.Field(fee.FieldDurationDisplayType))
}

// addPredicate implements the predicateAdder interface.
func (gq *GoodQuery) addPredicate(pred func(s *sql.Selector)) {
	gq.predicates = append(gq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GoodQuery builder.
func (gq *GoodQuery) Filter() *GoodFilter {
	return &GoodFilter{config: gq.config, predicateAdder: gq}
}

// addPredicate implements the predicateAdder interface.
func (m *GoodMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GoodMutation builder.
func (m *GoodMutation) Filter() *GoodFilter {
	return &GoodFilter{config: m.config, predicateAdder: m}
}

// GoodFilter provides a generic filtering capability at runtime for GoodQuery.
type GoodFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GoodFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[24].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *GoodFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(good.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *GoodFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(good.FieldEntID))
}

// WhereDeviceInfoID applies the entql [16]byte predicate on the device_info_id field.
func (f *GoodFilter) WhereDeviceInfoID(p entql.ValueP) {
	f.Where(p.Field(good.FieldDeviceInfoID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *GoodFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(good.FieldCoinTypeID))
}

// WhereInheritFromGoodID applies the entql [16]byte predicate on the inherit_from_good_id field.
func (f *GoodFilter) WhereInheritFromGoodID(p entql.ValueP) {
	f.Where(p.Field(good.FieldInheritFromGoodID))
}

// WhereVendorLocationID applies the entql [16]byte predicate on the vendor_location_id field.
func (f *GoodFilter) WhereVendorLocationID(p entql.ValueP) {
	f.Where(p.Field(good.FieldVendorLocationID))
}

// WhereUnitPrice applies the entql other predicate on the unit_price field.
func (f *GoodFilter) WhereUnitPrice(p entql.OtherP) {
	f.Where(p.Field(good.FieldUnitPrice))
}

// WhereBenefitType applies the entql string predicate on the benefit_type field.
func (f *GoodFilter) WhereBenefitType(p entql.StringP) {
	f.Where(p.Field(good.FieldBenefitType))
}

// WhereGoodType applies the entql string predicate on the good_type field.
func (f *GoodFilter) WhereGoodType(p entql.StringP) {
	f.Where(p.Field(good.FieldGoodType))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *GoodFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(good.FieldTitle))
}

// WhereUnit applies the entql string predicate on the unit field.
func (f *GoodFilter) WhereUnit(p entql.StringP) {
	f.Where(p.Field(good.FieldUnit))
}

// WhereQuantityUnit applies the entql string predicate on the quantity_unit field.
func (f *GoodFilter) WhereQuantityUnit(p entql.StringP) {
	f.Where(p.Field(good.FieldQuantityUnit))
}

// WhereUnitAmount applies the entql int32 predicate on the unit_amount field.
func (f *GoodFilter) WhereUnitAmount(p entql.Int32P) {
	f.Where(p.Field(good.FieldUnitAmount))
}

// WhereQuantityUnitAmount applies the entql other predicate on the quantity_unit_amount field.
func (f *GoodFilter) WhereQuantityUnitAmount(p entql.OtherP) {
	f.Where(p.Field(good.FieldQuantityUnitAmount))
}

// WhereDeliveryAt applies the entql uint32 predicate on the delivery_at field.
func (f *GoodFilter) WhereDeliveryAt(p entql.Uint32P) {
	f.Where(p.Field(good.FieldDeliveryAt))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *GoodFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(good.FieldStartAt))
}

// WhereStartMode applies the entql string predicate on the start_mode field.
func (f *GoodFilter) WhereStartMode(p entql.StringP) {
	f.Where(p.Field(good.FieldStartMode))
}

// WhereTestOnly applies the entql bool predicate on the test_only field.
func (f *GoodFilter) WhereTestOnly(p entql.BoolP) {
	f.Where(p.Field(good.FieldTestOnly))
}

// WhereBenefitIntervalHours applies the entql uint32 predicate on the benefit_interval_hours field.
func (f *GoodFilter) WhereBenefitIntervalHours(p entql.Uint32P) {
	f.Where(p.Field(good.FieldBenefitIntervalHours))
}

// WhereUnitLockDeposit applies the entql other predicate on the unit_lock_deposit field.
func (f *GoodFilter) WhereUnitLockDeposit(p entql.OtherP) {
	f.Where(p.Field(good.FieldUnitLockDeposit))
}

// WhereUnitType applies the entql string predicate on the unit_type field.
func (f *GoodFilter) WhereUnitType(p entql.StringP) {
	f.Where(p.Field(good.FieldUnitType))
}

// WhereQuantityCalculateType applies the entql string predicate on the quantity_calculate_type field.
func (f *GoodFilter) WhereQuantityCalculateType(p entql.StringP) {
	f.Where(p.Field(good.FieldQuantityCalculateType))
}

// WhereDurationType applies the entql string predicate on the duration_type field.
func (f *GoodFilter) WhereDurationType(p entql.StringP) {
	f.Where(p.Field(good.FieldDurationType))
}

// WhereDurationCalculateType applies the entql string predicate on the duration_calculate_type field.
func (f *GoodFilter) WhereDurationCalculateType(p entql.StringP) {
	f.Where(p.Field(good.FieldDurationCalculateType))
}

// WhereSettlementType applies the entql string predicate on the settlement_type field.
func (f *GoodFilter) WhereSettlementType(p entql.StringP) {
	f.Where(p.Field(good.FieldSettlementType))
}

// addPredicate implements the predicateAdder interface.
func (gbq *GoodBaseQuery) addPredicate(pred func(s *sql.Selector)) {
	gbq.predicates = append(gbq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GoodBaseQuery builder.
func (gbq *GoodBaseQuery) Filter() *GoodBaseFilter {
	return &GoodBaseFilter{config: gbq.config, predicateAdder: gbq}
}

// addPredicate implements the predicateAdder interface.
func (m *GoodBaseMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GoodBaseMutation builder.
func (m *GoodBaseMutation) Filter() *GoodBaseFilter {
	return &GoodBaseFilter{config: m.config, predicateAdder: m}
}

// GoodBaseFilter provides a generic filtering capability at runtime for GoodBaseQuery.
type GoodBaseFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GoodBaseFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[25].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *GoodBaseFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(goodbase.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *GoodBaseFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(goodbase.FieldEntID))
}

// WhereGoodType applies the entql string predicate on the good_type field.
func (f *GoodBaseFilter) WhereGoodType(p entql.StringP) {
	f.Where(p.Field(goodbase.FieldGoodType))
}

// WhereBenefitType applies the entql string predicate on the benefit_type field.
func (f *GoodBaseFilter) WhereBenefitType(p entql.StringP) {
	f.Where(p.Field(goodbase.FieldBenefitType))
}

// WhereName applies the entql string predicate on the name field.
func (f *GoodBaseFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(goodbase.FieldName))
}

// WhereServiceStartAt applies the entql uint32 predicate on the service_start_at field.
func (f *GoodBaseFilter) WhereServiceStartAt(p entql.Uint32P) {
	f.Where(p.Field(goodbase.FieldServiceStartAt))
}

// WhereStartMode applies the entql string predicate on the start_mode field.
func (f *GoodBaseFilter) WhereStartMode(p entql.StringP) {
	f.Where(p.Field(goodbase.FieldStartMode))
}

// WhereTestOnly applies the entql bool predicate on the test_only field.
func (f *GoodBaseFilter) WhereTestOnly(p entql.BoolP) {
	f.Where(p.Field(goodbase.FieldTestOnly))
}

// WhereBenefitIntervalHours applies the entql uint32 predicate on the benefit_interval_hours field.
func (f *GoodBaseFilter) WhereBenefitIntervalHours(p entql.Uint32P) {
	f.Where(p.Field(goodbase.FieldBenefitIntervalHours))
}

// WherePurchasable applies the entql bool predicate on the purchasable field.
func (f *GoodBaseFilter) WherePurchasable(p entql.BoolP) {
	f.Where(p.Field(goodbase.FieldPurchasable))
}

// WhereOnline applies the entql bool predicate on the online field.
func (f *GoodBaseFilter) WhereOnline(p entql.BoolP) {
	f.Where(p.Field(goodbase.FieldOnline))
}

// WhereState applies the entql string predicate on the state field.
func (f *GoodBaseFilter) WhereState(p entql.StringP) {
	f.Where(p.Field(goodbase.FieldState))
}

// addPredicate implements the predicateAdder interface.
func (gcq *GoodCoinQuery) addPredicate(pred func(s *sql.Selector)) {
	gcq.predicates = append(gcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GoodCoinQuery builder.
func (gcq *GoodCoinQuery) Filter() *GoodCoinFilter {
	return &GoodCoinFilter{config: gcq.config, predicateAdder: gcq}
}

// addPredicate implements the predicateAdder interface.
func (m *GoodCoinMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GoodCoinMutation builder.
func (m *GoodCoinMutation) Filter() *GoodCoinFilter {
	return &GoodCoinFilter{config: m.config, predicateAdder: m}
}

// GoodCoinFilter provides a generic filtering capability at runtime for GoodCoinQuery.
type GoodCoinFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GoodCoinFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[26].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *GoodCoinFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(goodcoin.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *GoodCoinFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(goodcoin.FieldEntID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *GoodCoinFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(goodcoin.FieldGoodID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *GoodCoinFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(goodcoin.FieldCoinTypeID))
}

// WhereMain applies the entql bool predicate on the main field.
func (f *GoodCoinFilter) WhereMain(p entql.BoolP) {
	f.Where(p.Field(goodcoin.FieldMain))
}

// WhereIndex applies the entql int32 predicate on the index field.
func (f *GoodCoinFilter) WhereIndex(p entql.Int32P) {
	f.Where(p.Field(goodcoin.FieldIndex))
}

// addPredicate implements the predicateAdder interface.
func (gcrq *GoodCoinRewardQuery) addPredicate(pred func(s *sql.Selector)) {
	gcrq.predicates = append(gcrq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GoodCoinRewardQuery builder.
func (gcrq *GoodCoinRewardQuery) Filter() *GoodCoinRewardFilter {
	return &GoodCoinRewardFilter{config: gcrq.config, predicateAdder: gcrq}
}

// addPredicate implements the predicateAdder interface.
func (m *GoodCoinRewardMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GoodCoinRewardMutation builder.
func (m *GoodCoinRewardMutation) Filter() *GoodCoinRewardFilter {
	return &GoodCoinRewardFilter{config: m.config, predicateAdder: m}
}

// GoodCoinRewardFilter provides a generic filtering capability at runtime for GoodCoinRewardQuery.
type GoodCoinRewardFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GoodCoinRewardFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[27].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *GoodCoinRewardFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(goodcoinreward.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *GoodCoinRewardFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(goodcoinreward.FieldEntID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *GoodCoinRewardFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(goodcoinreward.FieldGoodID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *GoodCoinRewardFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(goodcoinreward.FieldCoinTypeID))
}

// WhereRewardTid applies the entql [16]byte predicate on the reward_tid field.
func (f *GoodCoinRewardFilter) WhereRewardTid(p entql.ValueP) {
	f.Where(p.Field(goodcoinreward.FieldRewardTid))
}

// WhereNextRewardStartAmount applies the entql other predicate on the next_reward_start_amount field.
func (f *GoodCoinRewardFilter) WhereNextRewardStartAmount(p entql.OtherP) {
	f.Where(p.Field(goodcoinreward.FieldNextRewardStartAmount))
}

// WhereLastRewardAmount applies the entql other predicate on the last_reward_amount field.
func (f *GoodCoinRewardFilter) WhereLastRewardAmount(p entql.OtherP) {
	f.Where(p.Field(goodcoinreward.FieldLastRewardAmount))
}

// WhereLastUnitRewardAmount applies the entql other predicate on the last_unit_reward_amount field.
func (f *GoodCoinRewardFilter) WhereLastUnitRewardAmount(p entql.OtherP) {
	f.Where(p.Field(goodcoinreward.FieldLastUnitRewardAmount))
}

// WhereTotalRewardAmount applies the entql other predicate on the total_reward_amount field.
func (f *GoodCoinRewardFilter) WhereTotalRewardAmount(p entql.OtherP) {
	f.Where(p.Field(goodcoinreward.FieldTotalRewardAmount))
}

// addPredicate implements the predicateAdder interface.
func (gmq *GoodMalfunctionQuery) addPredicate(pred func(s *sql.Selector)) {
	gmq.predicates = append(gmq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GoodMalfunctionQuery builder.
func (gmq *GoodMalfunctionQuery) Filter() *GoodMalfunctionFilter {
	return &GoodMalfunctionFilter{config: gmq.config, predicateAdder: gmq}
}

// addPredicate implements the predicateAdder interface.
func (m *GoodMalfunctionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GoodMalfunctionMutation builder.
func (m *GoodMalfunctionMutation) Filter() *GoodMalfunctionFilter {
	return &GoodMalfunctionFilter{config: m.config, predicateAdder: m}
}

// GoodMalfunctionFilter provides a generic filtering capability at runtime for GoodMalfunctionQuery.
type GoodMalfunctionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GoodMalfunctionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[28].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *GoodMalfunctionFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(goodmalfunction.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *GoodMalfunctionFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(goodmalfunction.FieldEntID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *GoodMalfunctionFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(goodmalfunction.FieldGoodID))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *GoodMalfunctionFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(goodmalfunction.FieldTitle))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *GoodMalfunctionFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(goodmalfunction.FieldMessage))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *GoodMalfunctionFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(goodmalfunction.FieldStartAt))
}

// WhereDurationSeconds applies the entql uint32 predicate on the duration_seconds field.
func (f *GoodMalfunctionFilter) WhereDurationSeconds(p entql.Uint32P) {
	f.Where(p.Field(goodmalfunction.FieldDurationSeconds))
}

// WhereCompensateSeconds applies the entql uint32 predicate on the compensate_seconds field.
func (f *GoodMalfunctionFilter) WhereCompensateSeconds(p entql.Uint32P) {
	f.Where(p.Field(goodmalfunction.FieldCompensateSeconds))
}

// addPredicate implements the predicateAdder interface.
func (grq *GoodRewardQuery) addPredicate(pred func(s *sql.Selector)) {
	grq.predicates = append(grq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GoodRewardQuery builder.
func (grq *GoodRewardQuery) Filter() *GoodRewardFilter {
	return &GoodRewardFilter{config: grq.config, predicateAdder: grq}
}

// addPredicate implements the predicateAdder interface.
func (m *GoodRewardMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GoodRewardMutation builder.
func (m *GoodRewardMutation) Filter() *GoodRewardFilter {
	return &GoodRewardFilter{config: m.config, predicateAdder: m}
}

// GoodRewardFilter provides a generic filtering capability at runtime for GoodRewardQuery.
type GoodRewardFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GoodRewardFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[29].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *GoodRewardFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(goodreward.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *GoodRewardFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(goodreward.FieldEntID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *GoodRewardFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(goodreward.FieldGoodID))
}

// WhereRewardState applies the entql string predicate on the reward_state field.
func (f *GoodRewardFilter) WhereRewardState(p entql.StringP) {
	f.Where(p.Field(goodreward.FieldRewardState))
}

// WhereLastRewardAt applies the entql uint32 predicate on the last_reward_at field.
func (f *GoodRewardFilter) WhereLastRewardAt(p entql.Uint32P) {
	f.Where(p.Field(goodreward.FieldLastRewardAt))
}

// addPredicate implements the predicateAdder interface.
func (grhq *GoodRewardHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	grhq.predicates = append(grhq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GoodRewardHistoryQuery builder.
func (grhq *GoodRewardHistoryQuery) Filter() *GoodRewardHistoryFilter {
	return &GoodRewardHistoryFilter{config: grhq.config, predicateAdder: grhq}
}

// addPredicate implements the predicateAdder interface.
func (m *GoodRewardHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GoodRewardHistoryMutation builder.
func (m *GoodRewardHistoryMutation) Filter() *GoodRewardHistoryFilter {
	return &GoodRewardHistoryFilter{config: m.config, predicateAdder: m}
}

// GoodRewardHistoryFilter provides a generic filtering capability at runtime for GoodRewardHistoryQuery.
type GoodRewardHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GoodRewardHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[30].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *GoodRewardHistoryFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(goodrewardhistory.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *GoodRewardHistoryFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(goodrewardhistory.FieldEntID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *GoodRewardHistoryFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(goodrewardhistory.FieldGoodID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *GoodRewardHistoryFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(goodrewardhistory.FieldCoinTypeID))
}

// WhereRewardDate applies the entql uint32 predicate on the reward_date field.
func (f *GoodRewardHistoryFilter) WhereRewardDate(p entql.Uint32P) {
	f.Where(p.Field(goodrewardhistory.FieldRewardDate))
}

// WhereTid applies the entql [16]byte predicate on the tid field.
func (f *GoodRewardHistoryFilter) WhereTid(p entql.ValueP) {
	f.Where(p.Field(goodrewardhistory.FieldTid))
}

// WhereAmount applies the entql other predicate on the amount field.
func (f *GoodRewardHistoryFilter) WhereAmount(p entql.OtherP) {
	f.Where(p.Field(goodrewardhistory.FieldAmount))
}

// WhereUnitAmount applies the entql other predicate on the unit_amount field.
func (f *GoodRewardHistoryFilter) WhereUnitAmount(p entql.OtherP) {
	f.Where(p.Field(goodrewardhistory.FieldUnitAmount))
}

// WhereUnitNetAmount applies the entql other predicate on the unit_net_amount field.
func (f *GoodRewardHistoryFilter) WhereUnitNetAmount(p entql.OtherP) {
	f.Where(p.Field(goodrewardhistory.FieldUnitNetAmount))
}

// addPredicate implements the predicateAdder interface.
func (lq *LikeQuery) addPredicate(pred func(s *sql.Selector)) {
	lq.predicates = append(lq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the LikeQuery builder.
func (lq *LikeQuery) Filter() *LikeFilter {
	return &LikeFilter{config: lq.config, predicateAdder: lq}
}

// addPredicate implements the predicateAdder interface.
func (m *LikeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the LikeMutation builder.
func (m *LikeMutation) Filter() *LikeFilter {
	return &LikeFilter{config: m.config, predicateAdder: m}
}

// LikeFilter provides a generic filtering capability at runtime for LikeQuery.
type LikeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *LikeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[31].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *LikeFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(like.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *LikeFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(like.FieldEntID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *LikeFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(like.FieldUserID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *LikeFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(like.FieldAppGoodID))
}

// WhereLike applies the entql bool predicate on the like field.
func (f *LikeFilter) WhereLike(p entql.BoolP) {
	f.Where(p.Field(like.FieldLike))
}

// addPredicate implements the predicateAdder interface.
func (mgsq *MiningGoodStockQuery) addPredicate(pred func(s *sql.Selector)) {
	mgsq.predicates = append(mgsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MiningGoodStockQuery builder.
func (mgsq *MiningGoodStockQuery) Filter() *MiningGoodStockFilter {
	return &MiningGoodStockFilter{config: mgsq.config, predicateAdder: mgsq}
}

// addPredicate implements the predicateAdder interface.
func (m *MiningGoodStockMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MiningGoodStockMutation builder.
func (m *MiningGoodStockMutation) Filter() *MiningGoodStockFilter {
	return &MiningGoodStockFilter{config: m.config, predicateAdder: m}
}

// MiningGoodStockFilter provides a generic filtering capability at runtime for MiningGoodStockQuery.
type MiningGoodStockFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MiningGoodStockFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[32].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *MiningGoodStockFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(mininggoodstock.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *MiningGoodStockFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(mininggoodstock.FieldEntID))
}

// WhereGoodStockID applies the entql [16]byte predicate on the good_stock_id field.
func (f *MiningGoodStockFilter) WhereGoodStockID(p entql.ValueP) {
	f.Where(p.Field(mininggoodstock.FieldGoodStockID))
}

// WherePoolRootUserID applies the entql [16]byte predicate on the pool_root_user_id field.
func (f *MiningGoodStockFilter) WherePoolRootUserID(p entql.ValueP) {
	f.Where(p.Field(mininggoodstock.FieldPoolRootUserID))
}

// WherePoolGoodUserID applies the entql [16]byte predicate on the pool_good_user_id field.
func (f *MiningGoodStockFilter) WherePoolGoodUserID(p entql.ValueP) {
	f.Where(p.Field(mininggoodstock.FieldPoolGoodUserID))
}

// WhereTotal applies the entql other predicate on the total field.
func (f *MiningGoodStockFilter) WhereTotal(p entql.OtherP) {
	f.Where(p.Field(mininggoodstock.FieldTotal))
}

// WhereSpotQuantity applies the entql other predicate on the spot_quantity field.
func (f *MiningGoodStockFilter) WhereSpotQuantity(p entql.OtherP) {
	f.Where(p.Field(mininggoodstock.FieldSpotQuantity))
}

// WhereLocked applies the entql other predicate on the locked field.
func (f *MiningGoodStockFilter) WhereLocked(p entql.OtherP) {
	f.Where(p.Field(mininggoodstock.FieldLocked))
}

// WhereInService applies the entql other predicate on the in_service field.
func (f *MiningGoodStockFilter) WhereInService(p entql.OtherP) {
	f.Where(p.Field(mininggoodstock.FieldInService))
}

// WhereWaitStart applies the entql other predicate on the wait_start field.
func (f *MiningGoodStockFilter) WhereWaitStart(p entql.OtherP) {
	f.Where(p.Field(mininggoodstock.FieldWaitStart))
}

// WhereSold applies the entql other predicate on the sold field.
func (f *MiningGoodStockFilter) WhereSold(p entql.OtherP) {
	f.Where(p.Field(mininggoodstock.FieldSold))
}

// WhereAppReserved applies the entql other predicate on the app_reserved field.
func (f *MiningGoodStockFilter) WhereAppReserved(p entql.OtherP) {
	f.Where(p.Field(mininggoodstock.FieldAppReserved))
}

// WhereState applies the entql string predicate on the state field.
func (f *MiningGoodStockFilter) WhereState(p entql.StringP) {
	f.Where(p.Field(mininggoodstock.FieldState))
}

// addPredicate implements the predicateAdder interface.
func (prq *PowerRentalQuery) addPredicate(pred func(s *sql.Selector)) {
	prq.predicates = append(prq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PowerRentalQuery builder.
func (prq *PowerRentalQuery) Filter() *PowerRentalFilter {
	return &PowerRentalFilter{config: prq.config, predicateAdder: prq}
}

// addPredicate implements the predicateAdder interface.
func (m *PowerRentalMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PowerRentalMutation builder.
func (m *PowerRentalMutation) Filter() *PowerRentalFilter {
	return &PowerRentalFilter{config: m.config, predicateAdder: m}
}

// PowerRentalFilter provides a generic filtering capability at runtime for PowerRentalQuery.
type PowerRentalFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PowerRentalFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[33].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *PowerRentalFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(powerrental.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *PowerRentalFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(powerrental.FieldEntID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *PowerRentalFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(powerrental.FieldGoodID))
}

// WhereDeviceTypeID applies the entql [16]byte predicate on the device_type_id field.
func (f *PowerRentalFilter) WhereDeviceTypeID(p entql.ValueP) {
	f.Where(p.Field(powerrental.FieldDeviceTypeID))
}

// WhereVendorLocationID applies the entql [16]byte predicate on the vendor_location_id field.
func (f *PowerRentalFilter) WhereVendorLocationID(p entql.ValueP) {
	f.Where(p.Field(powerrental.FieldVendorLocationID))
}

// WhereUnitPrice applies the entql other predicate on the unit_price field.
func (f *PowerRentalFilter) WhereUnitPrice(p entql.OtherP) {
	f.Where(p.Field(powerrental.FieldUnitPrice))
}

// WhereQuantityUnit applies the entql string predicate on the quantity_unit field.
func (f *PowerRentalFilter) WhereQuantityUnit(p entql.StringP) {
	f.Where(p.Field(powerrental.FieldQuantityUnit))
}

// WhereQuantityUnitAmount applies the entql other predicate on the quantity_unit_amount field.
func (f *PowerRentalFilter) WhereQuantityUnitAmount(p entql.OtherP) {
	f.Where(p.Field(powerrental.FieldQuantityUnitAmount))
}

// WhereDeliveryAt applies the entql uint32 predicate on the delivery_at field.
func (f *PowerRentalFilter) WhereDeliveryAt(p entql.Uint32P) {
	f.Where(p.Field(powerrental.FieldDeliveryAt))
}

// WhereUnitLockDeposit applies the entql other predicate on the unit_lock_deposit field.
func (f *PowerRentalFilter) WhereUnitLockDeposit(p entql.OtherP) {
	f.Where(p.Field(powerrental.FieldUnitLockDeposit))
}

// WhereDurationDisplayType applies the entql string predicate on the duration_display_type field.
func (f *PowerRentalFilter) WhereDurationDisplayType(p entql.StringP) {
	f.Where(p.Field(powerrental.FieldDurationDisplayType))
}

// WhereStockMode applies the entql string predicate on the stock_mode field.
func (f *PowerRentalFilter) WhereStockMode(p entql.StringP) {
	f.Where(p.Field(powerrental.FieldStockMode))
}

// addPredicate implements the predicateAdder interface.
func (rq *RecommendQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RecommendQuery builder.
func (rq *RecommendQuery) Filter() *RecommendFilter {
	return &RecommendFilter{config: rq.config, predicateAdder: rq}
}

// addPredicate implements the predicateAdder interface.
func (m *RecommendMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RecommendMutation builder.
func (m *RecommendMutation) Filter() *RecommendFilter {
	return &RecommendFilter{config: m.config, predicateAdder: m}
}

// RecommendFilter provides a generic filtering capability at runtime for RecommendQuery.
type RecommendFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RecommendFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[34].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *RecommendFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(recommend.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *RecommendFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(recommend.FieldEntID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *RecommendFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(recommend.FieldAppGoodID))
}

// WhereRecommenderID applies the entql [16]byte predicate on the recommender_id field.
func (f *RecommendFilter) WhereRecommenderID(p entql.ValueP) {
	f.Where(p.Field(recommend.FieldRecommenderID))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *RecommendFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(recommend.FieldMessage))
}

// WhereRecommendIndex applies the entql other predicate on the recommend_index field.
func (f *RecommendFilter) WhereRecommendIndex(p entql.OtherP) {
	f.Where(p.Field(recommend.FieldRecommendIndex))
}

// WhereHide applies the entql bool predicate on the hide field.
func (f *RecommendFilter) WhereHide(p entql.BoolP) {
	f.Where(p.Field(recommend.FieldHide))
}

// WhereHideReason applies the entql string predicate on the hide_reason field.
func (f *RecommendFilter) WhereHideReason(p entql.StringP) {
	f.Where(p.Field(recommend.FieldHideReason))
}

// addPredicate implements the predicateAdder interface.
func (ragq *RequiredAppGoodQuery) addPredicate(pred func(s *sql.Selector)) {
	ragq.predicates = append(ragq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RequiredAppGoodQuery builder.
func (ragq *RequiredAppGoodQuery) Filter() *RequiredAppGoodFilter {
	return &RequiredAppGoodFilter{config: ragq.config, predicateAdder: ragq}
}

// addPredicate implements the predicateAdder interface.
func (m *RequiredAppGoodMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RequiredAppGoodMutation builder.
func (m *RequiredAppGoodMutation) Filter() *RequiredAppGoodFilter {
	return &RequiredAppGoodFilter{config: m.config, predicateAdder: m}
}

// RequiredAppGoodFilter provides a generic filtering capability at runtime for RequiredAppGoodQuery.
type RequiredAppGoodFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RequiredAppGoodFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[35].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *RequiredAppGoodFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(requiredappgood.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *RequiredAppGoodFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(requiredappgood.FieldEntID))
}

// WhereMainAppGoodID applies the entql [16]byte predicate on the main_app_good_id field.
func (f *RequiredAppGoodFilter) WhereMainAppGoodID(p entql.ValueP) {
	f.Where(p.Field(requiredappgood.FieldMainAppGoodID))
}

// WhereRequiredAppGoodID applies the entql [16]byte predicate on the required_app_good_id field.
func (f *RequiredAppGoodFilter) WhereRequiredAppGoodID(p entql.ValueP) {
	f.Where(p.Field(requiredappgood.FieldRequiredAppGoodID))
}

// WhereMust applies the entql bool predicate on the must field.
func (f *RequiredAppGoodFilter) WhereMust(p entql.BoolP) {
	f.Where(p.Field(requiredappgood.FieldMust))
}

// addPredicate implements the predicateAdder interface.
func (rgq *RequiredGoodQuery) addPredicate(pred func(s *sql.Selector)) {
	rgq.predicates = append(rgq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RequiredGoodQuery builder.
func (rgq *RequiredGoodQuery) Filter() *RequiredGoodFilter {
	return &RequiredGoodFilter{config: rgq.config, predicateAdder: rgq}
}

// addPredicate implements the predicateAdder interface.
func (m *RequiredGoodMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RequiredGoodMutation builder.
func (m *RequiredGoodMutation) Filter() *RequiredGoodFilter {
	return &RequiredGoodFilter{config: m.config, predicateAdder: m}
}

// RequiredGoodFilter provides a generic filtering capability at runtime for RequiredGoodQuery.
type RequiredGoodFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RequiredGoodFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[36].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *RequiredGoodFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(requiredgood.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *RequiredGoodFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(requiredgood.FieldEntID))
}

// WhereMainGoodID applies the entql [16]byte predicate on the main_good_id field.
func (f *RequiredGoodFilter) WhereMainGoodID(p entql.ValueP) {
	f.Where(p.Field(requiredgood.FieldMainGoodID))
}

// WhereRequiredGoodID applies the entql [16]byte predicate on the required_good_id field.
func (f *RequiredGoodFilter) WhereRequiredGoodID(p entql.ValueP) {
	f.Where(p.Field(requiredgood.FieldRequiredGoodID))
}

// WhereMust applies the entql bool predicate on the must field.
func (f *RequiredGoodFilter) WhereMust(p entql.BoolP) {
	f.Where(p.Field(requiredgood.FieldMust))
}

// addPredicate implements the predicateAdder interface.
func (sq *ScoreQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ScoreQuery builder.
func (sq *ScoreQuery) Filter() *ScoreFilter {
	return &ScoreFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *ScoreMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ScoreMutation builder.
func (m *ScoreMutation) Filter() *ScoreFilter {
	return &ScoreFilter{config: m.config, predicateAdder: m}
}

// ScoreFilter provides a generic filtering capability at runtime for ScoreQuery.
type ScoreFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ScoreFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[37].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *ScoreFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(score.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *ScoreFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(score.FieldEntID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *ScoreFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(score.FieldUserID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *ScoreFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(score.FieldAppGoodID))
}

// WhereScore applies the entql other predicate on the score field.
func (f *ScoreFilter) WhereScore(p entql.OtherP) {
	f.Where(p.Field(score.FieldScore))
}

// WhereCommentID applies the entql [16]byte predicate on the comment_id field.
func (f *ScoreFilter) WhereCommentID(p entql.ValueP) {
	f.Where(p.Field(score.FieldCommentID))
}

// addPredicate implements the predicateAdder interface.
func (sq *StockQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the StockQuery builder.
func (sq *StockQuery) Filter() *StockFilter {
	return &StockFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *StockMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the StockMutation builder.
func (m *StockMutation) Filter() *StockFilter {
	return &StockFilter{config: m.config, predicateAdder: m}
}

// StockFilter provides a generic filtering capability at runtime for StockQuery.
type StockFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *StockFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[38].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *StockFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(stock.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *StockFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(stock.FieldEntID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *StockFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(stock.FieldGoodID))
}

// WhereTotal applies the entql other predicate on the total field.
func (f *StockFilter) WhereTotal(p entql.OtherP) {
	f.Where(p.Field(stock.FieldTotal))
}

// WhereSpotQuantity applies the entql other predicate on the spot_quantity field.
func (f *StockFilter) WhereSpotQuantity(p entql.OtherP) {
	f.Where(p.Field(stock.FieldSpotQuantity))
}

// WhereLocked applies the entql other predicate on the locked field.
func (f *StockFilter) WhereLocked(p entql.OtherP) {
	f.Where(p.Field(stock.FieldLocked))
}

// WhereInService applies the entql other predicate on the in_service field.
func (f *StockFilter) WhereInService(p entql.OtherP) {
	f.Where(p.Field(stock.FieldInService))
}

// WhereWaitStart applies the entql other predicate on the wait_start field.
func (f *StockFilter) WhereWaitStart(p entql.OtherP) {
	f.Where(p.Field(stock.FieldWaitStart))
}

// WhereSold applies the entql other predicate on the sold field.
func (f *StockFilter) WhereSold(p entql.OtherP) {
	f.Where(p.Field(stock.FieldSold))
}

// WhereAppReserved applies the entql other predicate on the app_reserved field.
func (f *StockFilter) WhereAppReserved(p entql.OtherP) {
	f.Where(p.Field(stock.FieldAppReserved))
}

// addPredicate implements the predicateAdder interface.
func (tmq *TopMostQuery) addPredicate(pred func(s *sql.Selector)) {
	tmq.predicates = append(tmq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TopMostQuery builder.
func (tmq *TopMostQuery) Filter() *TopMostFilter {
	return &TopMostFilter{config: tmq.config, predicateAdder: tmq}
}

// addPredicate implements the predicateAdder interface.
func (m *TopMostMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TopMostMutation builder.
func (m *TopMostMutation) Filter() *TopMostFilter {
	return &TopMostFilter{config: m.config, predicateAdder: m}
}

// TopMostFilter provides a generic filtering capability at runtime for TopMostQuery.
type TopMostFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TopMostFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[39].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *TopMostFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(topmost.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *TopMostFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(topmost.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *TopMostFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(topmost.FieldAppID))
}

// WhereTopMostType applies the entql string predicate on the top_most_type field.
func (f *TopMostFilter) WhereTopMostType(p entql.StringP) {
	f.Where(p.Field(topmost.FieldTopMostType))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *TopMostFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(topmost.FieldTitle))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *TopMostFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(topmost.FieldMessage))
}

// WhereTargetURL applies the entql string predicate on the target_url field.
func (f *TopMostFilter) WhereTargetURL(p entql.StringP) {
	f.Where(p.Field(topmost.FieldTargetURL))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *TopMostFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(topmost.FieldStartAt))
}

// WhereEndAt applies the entql uint32 predicate on the end_at field.
func (f *TopMostFilter) WhereEndAt(p entql.Uint32P) {
	f.Where(p.Field(topmost.FieldEndAt))
}

// addPredicate implements the predicateAdder interface.
func (tmcq *TopMostConstraintQuery) addPredicate(pred func(s *sql.Selector)) {
	tmcq.predicates = append(tmcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TopMostConstraintQuery builder.
func (tmcq *TopMostConstraintQuery) Filter() *TopMostConstraintFilter {
	return &TopMostConstraintFilter{config: tmcq.config, predicateAdder: tmcq}
}

// addPredicate implements the predicateAdder interface.
func (m *TopMostConstraintMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TopMostConstraintMutation builder.
func (m *TopMostConstraintMutation) Filter() *TopMostConstraintFilter {
	return &TopMostConstraintFilter{config: m.config, predicateAdder: m}
}

// TopMostConstraintFilter provides a generic filtering capability at runtime for TopMostConstraintQuery.
type TopMostConstraintFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TopMostConstraintFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[40].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *TopMostConstraintFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(topmostconstraint.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *TopMostConstraintFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(topmostconstraint.FieldEntID))
}

// WhereTopMostID applies the entql [16]byte predicate on the top_most_id field.
func (f *TopMostConstraintFilter) WhereTopMostID(p entql.ValueP) {
	f.Where(p.Field(topmostconstraint.FieldTopMostID))
}

// WhereConstraint applies the entql string predicate on the constraint field.
func (f *TopMostConstraintFilter) WhereConstraint(p entql.StringP) {
	f.Where(p.Field(topmostconstraint.FieldConstraint))
}

// WhereTargetValue applies the entql other predicate on the target_value field.
func (f *TopMostConstraintFilter) WhereTargetValue(p entql.OtherP) {
	f.Where(p.Field(topmostconstraint.FieldTargetValue))
}

// WhereIndex applies the entql uint8 predicate on the index field.
func (f *TopMostConstraintFilter) WhereIndex(p entql.Uint8P) {
	f.Where(p.Field(topmostconstraint.FieldIndex))
}

// addPredicate implements the predicateAdder interface.
func (tmgq *TopMostGoodQuery) addPredicate(pred func(s *sql.Selector)) {
	tmgq.predicates = append(tmgq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TopMostGoodQuery builder.
func (tmgq *TopMostGoodQuery) Filter() *TopMostGoodFilter {
	return &TopMostGoodFilter{config: tmgq.config, predicateAdder: tmgq}
}

// addPredicate implements the predicateAdder interface.
func (m *TopMostGoodMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TopMostGoodMutation builder.
func (m *TopMostGoodMutation) Filter() *TopMostGoodFilter {
	return &TopMostGoodFilter{config: m.config, predicateAdder: m}
}

// TopMostGoodFilter provides a generic filtering capability at runtime for TopMostGoodQuery.
type TopMostGoodFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TopMostGoodFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[41].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *TopMostGoodFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(topmostgood.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *TopMostGoodFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(topmostgood.FieldEntID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *TopMostGoodFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(topmostgood.FieldAppGoodID))
}

// WhereTopMostID applies the entql [16]byte predicate on the top_most_id field.
func (f *TopMostGoodFilter) WhereTopMostID(p entql.ValueP) {
	f.Where(p.Field(topmostgood.FieldTopMostID))
}

// WhereDisplayIndex applies the entql uint32 predicate on the display_index field.
func (f *TopMostGoodFilter) WhereDisplayIndex(p entql.Uint32P) {
	f.Where(p.Field(topmostgood.FieldDisplayIndex))
}

// WhereUnitPrice applies the entql other predicate on the unit_price field.
func (f *TopMostGoodFilter) WhereUnitPrice(p entql.OtherP) {
	f.Where(p.Field(topmostgood.FieldUnitPrice))
}

// addPredicate implements the predicateAdder interface.
func (tmgcq *TopMostGoodConstraintQuery) addPredicate(pred func(s *sql.Selector)) {
	tmgcq.predicates = append(tmgcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TopMostGoodConstraintQuery builder.
func (tmgcq *TopMostGoodConstraintQuery) Filter() *TopMostGoodConstraintFilter {
	return &TopMostGoodConstraintFilter{config: tmgcq.config, predicateAdder: tmgcq}
}

// addPredicate implements the predicateAdder interface.
func (m *TopMostGoodConstraintMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TopMostGoodConstraintMutation builder.
func (m *TopMostGoodConstraintMutation) Filter() *TopMostGoodConstraintFilter {
	return &TopMostGoodConstraintFilter{config: m.config, predicateAdder: m}
}

// TopMostGoodConstraintFilter provides a generic filtering capability at runtime for TopMostGoodConstraintQuery.
type TopMostGoodConstraintFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TopMostGoodConstraintFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[42].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *TopMostGoodConstraintFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(topmostgoodconstraint.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *TopMostGoodConstraintFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(topmostgoodconstraint.FieldEntID))
}

// WhereTopMostGoodID applies the entql [16]byte predicate on the top_most_good_id field.
func (f *TopMostGoodConstraintFilter) WhereTopMostGoodID(p entql.ValueP) {
	f.Where(p.Field(topmostgoodconstraint.FieldTopMostGoodID))
}

// WhereConstraint applies the entql string predicate on the constraint field.
func (f *TopMostGoodConstraintFilter) WhereConstraint(p entql.StringP) {
	f.Where(p.Field(topmostgoodconstraint.FieldConstraint))
}

// WhereTargetValue applies the entql other predicate on the target_value field.
func (f *TopMostGoodConstraintFilter) WhereTargetValue(p entql.OtherP) {
	f.Where(p.Field(topmostgoodconstraint.FieldTargetValue))
}

// WhereIndex applies the entql uint8 predicate on the index field.
func (f *TopMostGoodConstraintFilter) WhereIndex(p entql.Uint8P) {
	f.Where(p.Field(topmostgoodconstraint.FieldIndex))
}

// addPredicate implements the predicateAdder interface.
func (tmgpq *TopMostGoodPosterQuery) addPredicate(pred func(s *sql.Selector)) {
	tmgpq.predicates = append(tmgpq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TopMostGoodPosterQuery builder.
func (tmgpq *TopMostGoodPosterQuery) Filter() *TopMostGoodPosterFilter {
	return &TopMostGoodPosterFilter{config: tmgpq.config, predicateAdder: tmgpq}
}

// addPredicate implements the predicateAdder interface.
func (m *TopMostGoodPosterMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TopMostGoodPosterMutation builder.
func (m *TopMostGoodPosterMutation) Filter() *TopMostGoodPosterFilter {
	return &TopMostGoodPosterFilter{config: m.config, predicateAdder: m}
}

// TopMostGoodPosterFilter provides a generic filtering capability at runtime for TopMostGoodPosterQuery.
type TopMostGoodPosterFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TopMostGoodPosterFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[43].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *TopMostGoodPosterFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(topmostgoodposter.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *TopMostGoodPosterFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(topmostgoodposter.FieldEntID))
}

// WhereTopMostGoodID applies the entql [16]byte predicate on the top_most_good_id field.
func (f *TopMostGoodPosterFilter) WhereTopMostGoodID(p entql.ValueP) {
	f.Where(p.Field(topmostgoodposter.FieldTopMostGoodID))
}

// WherePoster applies the entql string predicate on the poster field.
func (f *TopMostGoodPosterFilter) WherePoster(p entql.StringP) {
	f.Where(p.Field(topmostgoodposter.FieldPoster))
}

// WhereIndex applies the entql uint8 predicate on the index field.
func (f *TopMostGoodPosterFilter) WhereIndex(p entql.Uint8P) {
	f.Where(p.Field(topmostgoodposter.FieldIndex))
}

// addPredicate implements the predicateAdder interface.
func (tmpq *TopMostPosterQuery) addPredicate(pred func(s *sql.Selector)) {
	tmpq.predicates = append(tmpq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TopMostPosterQuery builder.
func (tmpq *TopMostPosterQuery) Filter() *TopMostPosterFilter {
	return &TopMostPosterFilter{config: tmpq.config, predicateAdder: tmpq}
}

// addPredicate implements the predicateAdder interface.
func (m *TopMostPosterMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TopMostPosterMutation builder.
func (m *TopMostPosterMutation) Filter() *TopMostPosterFilter {
	return &TopMostPosterFilter{config: m.config, predicateAdder: m}
}

// TopMostPosterFilter provides a generic filtering capability at runtime for TopMostPosterQuery.
type TopMostPosterFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TopMostPosterFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[44].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *TopMostPosterFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(topmostposter.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *TopMostPosterFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(topmostposter.FieldEntID))
}

// WhereTopMostID applies the entql [16]byte predicate on the top_most_id field.
func (f *TopMostPosterFilter) WhereTopMostID(p entql.ValueP) {
	f.Where(p.Field(topmostposter.FieldTopMostID))
}

// WherePoster applies the entql string predicate on the poster field.
func (f *TopMostPosterFilter) WherePoster(p entql.StringP) {
	f.Where(p.Field(topmostposter.FieldPoster))
}

// WhereIndex applies the entql uint8 predicate on the index field.
func (f *TopMostPosterFilter) WhereIndex(p entql.Uint8P) {
	f.Where(p.Field(topmostposter.FieldIndex))
}

// addPredicate implements the predicateAdder interface.
func (vbq *VendorBrandQuery) addPredicate(pred func(s *sql.Selector)) {
	vbq.predicates = append(vbq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the VendorBrandQuery builder.
func (vbq *VendorBrandQuery) Filter() *VendorBrandFilter {
	return &VendorBrandFilter{config: vbq.config, predicateAdder: vbq}
}

// addPredicate implements the predicateAdder interface.
func (m *VendorBrandMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the VendorBrandMutation builder.
func (m *VendorBrandMutation) Filter() *VendorBrandFilter {
	return &VendorBrandFilter{config: m.config, predicateAdder: m}
}

// VendorBrandFilter provides a generic filtering capability at runtime for VendorBrandQuery.
type VendorBrandFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *VendorBrandFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[45].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *VendorBrandFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(vendorbrand.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *VendorBrandFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(vendorbrand.FieldEntID))
}

// WhereName applies the entql string predicate on the name field.
func (f *VendorBrandFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(vendorbrand.FieldName))
}

// WhereLogo applies the entql string predicate on the logo field.
func (f *VendorBrandFilter) WhereLogo(p entql.StringP) {
	f.Where(p.Field(vendorbrand.FieldLogo))
}

// addPredicate implements the predicateAdder interface.
func (vlq *VendorLocationQuery) addPredicate(pred func(s *sql.Selector)) {
	vlq.predicates = append(vlq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the VendorLocationQuery builder.
func (vlq *VendorLocationQuery) Filter() *VendorLocationFilter {
	return &VendorLocationFilter{config: vlq.config, predicateAdder: vlq}
}

// addPredicate implements the predicateAdder interface.
func (m *VendorLocationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the VendorLocationMutation builder.
func (m *VendorLocationMutation) Filter() *VendorLocationFilter {
	return &VendorLocationFilter{config: m.config, predicateAdder: m}
}

// VendorLocationFilter provides a generic filtering capability at runtime for VendorLocationQuery.
type VendorLocationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *VendorLocationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[46].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *VendorLocationFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(vendorlocation.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *VendorLocationFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(vendorlocation.FieldEntID))
}

// WhereCountry applies the entql string predicate on the country field.
func (f *VendorLocationFilter) WhereCountry(p entql.StringP) {
	f.Where(p.Field(vendorlocation.FieldCountry))
}

// WhereProvince applies the entql string predicate on the province field.
func (f *VendorLocationFilter) WhereProvince(p entql.StringP) {
	f.Where(p.Field(vendorlocation.FieldProvince))
}

// WhereCity applies the entql string predicate on the city field.
func (f *VendorLocationFilter) WhereCity(p entql.StringP) {
	f.Where(p.Field(vendorlocation.FieldCity))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *VendorLocationFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(vendorlocation.FieldAddress))
}

// WhereBrandID applies the entql [16]byte predicate on the brand_id field.
func (f *VendorLocationFilter) WhereBrandID(p entql.ValueP) {
	f.Where(p.Field(vendorlocation.FieldBrandID))
}

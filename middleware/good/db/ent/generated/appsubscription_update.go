// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appsubscription"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppSubscriptionUpdate is the builder for updating AppSubscription entities.
type AppSubscriptionUpdate struct {
	config
	hooks     []Hook
	mutation  *AppSubscriptionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppSubscriptionUpdate builder.
func (asu *AppSubscriptionUpdate) Where(ps ...predicate.AppSubscription) *AppSubscriptionUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetEntID sets the "ent_id" field.
func (asu *AppSubscriptionUpdate) SetEntID(u uuid.UUID) *AppSubscriptionUpdate {
	asu.mutation.SetEntID(u)
	return asu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (asu *AppSubscriptionUpdate) SetNillableEntID(u *uuid.UUID) *AppSubscriptionUpdate {
	if u != nil {
		asu.SetEntID(*u)
	}
	return asu
}

// SetCreatedAt sets the "created_at" field.
func (asu *AppSubscriptionUpdate) SetCreatedAt(u uint32) *AppSubscriptionUpdate {
	asu.mutation.ResetCreatedAt()
	asu.mutation.SetCreatedAt(u)
	return asu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asu *AppSubscriptionUpdate) SetNillableCreatedAt(u *uint32) *AppSubscriptionUpdate {
	if u != nil {
		asu.SetCreatedAt(*u)
	}
	return asu
}

// AddCreatedAt adds u to the "created_at" field.
func (asu *AppSubscriptionUpdate) AddCreatedAt(u int32) *AppSubscriptionUpdate {
	asu.mutation.AddCreatedAt(u)
	return asu
}

// SetUpdatedAt sets the "updated_at" field.
func (asu *AppSubscriptionUpdate) SetUpdatedAt(u uint32) *AppSubscriptionUpdate {
	asu.mutation.ResetUpdatedAt()
	asu.mutation.SetUpdatedAt(u)
	return asu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (asu *AppSubscriptionUpdate) AddUpdatedAt(u int32) *AppSubscriptionUpdate {
	asu.mutation.AddUpdatedAt(u)
	return asu
}

// SetDeletedAt sets the "deleted_at" field.
func (asu *AppSubscriptionUpdate) SetDeletedAt(u uint32) *AppSubscriptionUpdate {
	asu.mutation.ResetDeletedAt()
	asu.mutation.SetDeletedAt(u)
	return asu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (asu *AppSubscriptionUpdate) SetNillableDeletedAt(u *uint32) *AppSubscriptionUpdate {
	if u != nil {
		asu.SetDeletedAt(*u)
	}
	return asu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (asu *AppSubscriptionUpdate) AddDeletedAt(u int32) *AppSubscriptionUpdate {
	asu.mutation.AddDeletedAt(u)
	return asu
}

// SetAppGoodID sets the "app_good_id" field.
func (asu *AppSubscriptionUpdate) SetAppGoodID(u uuid.UUID) *AppSubscriptionUpdate {
	asu.mutation.SetAppGoodID(u)
	return asu
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (asu *AppSubscriptionUpdate) SetNillableAppGoodID(u *uuid.UUID) *AppSubscriptionUpdate {
	if u != nil {
		asu.SetAppGoodID(*u)
	}
	return asu
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (asu *AppSubscriptionUpdate) ClearAppGoodID() *AppSubscriptionUpdate {
	asu.mutation.ClearAppGoodID()
	return asu
}

// SetUsdPrice sets the "usd_price" field.
func (asu *AppSubscriptionUpdate) SetUsdPrice(d decimal.Decimal) *AppSubscriptionUpdate {
	asu.mutation.SetUsdPrice(d)
	return asu
}

// SetNillableUsdPrice sets the "usd_price" field if the given value is not nil.
func (asu *AppSubscriptionUpdate) SetNillableUsdPrice(d *decimal.Decimal) *AppSubscriptionUpdate {
	if d != nil {
		asu.SetUsdPrice(*d)
	}
	return asu
}

// ClearUsdPrice clears the value of the "usd_price" field.
func (asu *AppSubscriptionUpdate) ClearUsdPrice() *AppSubscriptionUpdate {
	asu.mutation.ClearUsdPrice()
	return asu
}

// SetProductID sets the "product_id" field.
func (asu *AppSubscriptionUpdate) SetProductID(s string) *AppSubscriptionUpdate {
	asu.mutation.SetProductID(s)
	return asu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (asu *AppSubscriptionUpdate) SetNillableProductID(s *string) *AppSubscriptionUpdate {
	if s != nil {
		asu.SetProductID(*s)
	}
	return asu
}

// ClearProductID clears the value of the "product_id" field.
func (asu *AppSubscriptionUpdate) ClearProductID() *AppSubscriptionUpdate {
	asu.mutation.ClearProductID()
	return asu
}

// SetPlanID sets the "plan_id" field.
func (asu *AppSubscriptionUpdate) SetPlanID(s string) *AppSubscriptionUpdate {
	asu.mutation.SetPlanID(s)
	return asu
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (asu *AppSubscriptionUpdate) SetNillablePlanID(s *string) *AppSubscriptionUpdate {
	if s != nil {
		asu.SetPlanID(*s)
	}
	return asu
}

// ClearPlanID clears the value of the "plan_id" field.
func (asu *AppSubscriptionUpdate) ClearPlanID() *AppSubscriptionUpdate {
	asu.mutation.ClearPlanID()
	return asu
}

// SetTrialUnits sets the "trial_units" field.
func (asu *AppSubscriptionUpdate) SetTrialUnits(u uint32) *AppSubscriptionUpdate {
	asu.mutation.ResetTrialUnits()
	asu.mutation.SetTrialUnits(u)
	return asu
}

// SetNillableTrialUnits sets the "trial_units" field if the given value is not nil.
func (asu *AppSubscriptionUpdate) SetNillableTrialUnits(u *uint32) *AppSubscriptionUpdate {
	if u != nil {
		asu.SetTrialUnits(*u)
	}
	return asu
}

// AddTrialUnits adds u to the "trial_units" field.
func (asu *AppSubscriptionUpdate) AddTrialUnits(u int32) *AppSubscriptionUpdate {
	asu.mutation.AddTrialUnits(u)
	return asu
}

// ClearTrialUnits clears the value of the "trial_units" field.
func (asu *AppSubscriptionUpdate) ClearTrialUnits() *AppSubscriptionUpdate {
	asu.mutation.ClearTrialUnits()
	return asu
}

// SetTrialUsdPrice sets the "trial_usd_price" field.
func (asu *AppSubscriptionUpdate) SetTrialUsdPrice(d decimal.Decimal) *AppSubscriptionUpdate {
	asu.mutation.SetTrialUsdPrice(d)
	return asu
}

// SetNillableTrialUsdPrice sets the "trial_usd_price" field if the given value is not nil.
func (asu *AppSubscriptionUpdate) SetNillableTrialUsdPrice(d *decimal.Decimal) *AppSubscriptionUpdate {
	if d != nil {
		asu.SetTrialUsdPrice(*d)
	}
	return asu
}

// ClearTrialUsdPrice clears the value of the "trial_usd_price" field.
func (asu *AppSubscriptionUpdate) ClearTrialUsdPrice() *AppSubscriptionUpdate {
	asu.mutation.ClearTrialUsdPrice()
	return asu
}

// SetPriceFiatID sets the "price_fiat_id" field.
func (asu *AppSubscriptionUpdate) SetPriceFiatID(u uuid.UUID) *AppSubscriptionUpdate {
	asu.mutation.SetPriceFiatID(u)
	return asu
}

// SetNillablePriceFiatID sets the "price_fiat_id" field if the given value is not nil.
func (asu *AppSubscriptionUpdate) SetNillablePriceFiatID(u *uuid.UUID) *AppSubscriptionUpdate {
	if u != nil {
		asu.SetPriceFiatID(*u)
	}
	return asu
}

// ClearPriceFiatID clears the value of the "price_fiat_id" field.
func (asu *AppSubscriptionUpdate) ClearPriceFiatID() *AppSubscriptionUpdate {
	asu.mutation.ClearPriceFiatID()
	return asu
}

// SetFiatPrice sets the "fiat_price" field.
func (asu *AppSubscriptionUpdate) SetFiatPrice(d decimal.Decimal) *AppSubscriptionUpdate {
	asu.mutation.SetFiatPrice(d)
	return asu
}

// SetNillableFiatPrice sets the "fiat_price" field if the given value is not nil.
func (asu *AppSubscriptionUpdate) SetNillableFiatPrice(d *decimal.Decimal) *AppSubscriptionUpdate {
	if d != nil {
		asu.SetFiatPrice(*d)
	}
	return asu
}

// ClearFiatPrice clears the value of the "fiat_price" field.
func (asu *AppSubscriptionUpdate) ClearFiatPrice() *AppSubscriptionUpdate {
	asu.mutation.ClearFiatPrice()
	return asu
}

// SetTrialFiatPrice sets the "trial_fiat_price" field.
func (asu *AppSubscriptionUpdate) SetTrialFiatPrice(d decimal.Decimal) *AppSubscriptionUpdate {
	asu.mutation.SetTrialFiatPrice(d)
	return asu
}

// SetNillableTrialFiatPrice sets the "trial_fiat_price" field if the given value is not nil.
func (asu *AppSubscriptionUpdate) SetNillableTrialFiatPrice(d *decimal.Decimal) *AppSubscriptionUpdate {
	if d != nil {
		asu.SetTrialFiatPrice(*d)
	}
	return asu
}

// ClearTrialFiatPrice clears the value of the "trial_fiat_price" field.
func (asu *AppSubscriptionUpdate) ClearTrialFiatPrice() *AppSubscriptionUpdate {
	asu.mutation.ClearTrialFiatPrice()
	return asu
}

// Mutation returns the AppSubscriptionMutation object of the builder.
func (asu *AppSubscriptionUpdate) Mutation() *AppSubscriptionMutation {
	return asu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *AppSubscriptionUpdate) Save(ctx context.Context) (int, error) {
	asu.defaults()
	return withHooks(ctx, asu.sqlSave, asu.mutation, asu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AppSubscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AppSubscriptionUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AppSubscriptionUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asu *AppSubscriptionUpdate) defaults() {
	if _, ok := asu.mutation.UpdatedAt(); !ok {
		v := appsubscription.UpdateDefaultUpdatedAt()
		asu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (asu *AppSubscriptionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppSubscriptionUpdate {
	asu.modifiers = append(asu.modifiers, modifiers...)
	return asu
}

func (asu *AppSubscriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appsubscription.Table, appsubscription.Columns, sqlgraph.NewFieldSpec(appsubscription.FieldID, field.TypeUint32))
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.EntID(); ok {
		_spec.SetField(appsubscription.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := asu.mutation.CreatedAt(); ok {
		_spec.SetField(appsubscription.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := asu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(appsubscription.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := asu.mutation.UpdatedAt(); ok {
		_spec.SetField(appsubscription.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := asu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(appsubscription.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := asu.mutation.DeletedAt(); ok {
		_spec.SetField(appsubscription.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := asu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(appsubscription.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := asu.mutation.AppGoodID(); ok {
		_spec.SetField(appsubscription.FieldAppGoodID, field.TypeUUID, value)
	}
	if asu.mutation.AppGoodIDCleared() {
		_spec.ClearField(appsubscription.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := asu.mutation.UsdPrice(); ok {
		_spec.SetField(appsubscription.FieldUsdPrice, field.TypeOther, value)
	}
	if asu.mutation.UsdPriceCleared() {
		_spec.ClearField(appsubscription.FieldUsdPrice, field.TypeOther)
	}
	if value, ok := asu.mutation.ProductID(); ok {
		_spec.SetField(appsubscription.FieldProductID, field.TypeString, value)
	}
	if asu.mutation.ProductIDCleared() {
		_spec.ClearField(appsubscription.FieldProductID, field.TypeString)
	}
	if value, ok := asu.mutation.PlanID(); ok {
		_spec.SetField(appsubscription.FieldPlanID, field.TypeString, value)
	}
	if asu.mutation.PlanIDCleared() {
		_spec.ClearField(appsubscription.FieldPlanID, field.TypeString)
	}
	if value, ok := asu.mutation.TrialUnits(); ok {
		_spec.SetField(appsubscription.FieldTrialUnits, field.TypeUint32, value)
	}
	if value, ok := asu.mutation.AddedTrialUnits(); ok {
		_spec.AddField(appsubscription.FieldTrialUnits, field.TypeUint32, value)
	}
	if asu.mutation.TrialUnitsCleared() {
		_spec.ClearField(appsubscription.FieldTrialUnits, field.TypeUint32)
	}
	if value, ok := asu.mutation.TrialUsdPrice(); ok {
		_spec.SetField(appsubscription.FieldTrialUsdPrice, field.TypeOther, value)
	}
	if asu.mutation.TrialUsdPriceCleared() {
		_spec.ClearField(appsubscription.FieldTrialUsdPrice, field.TypeOther)
	}
	if value, ok := asu.mutation.PriceFiatID(); ok {
		_spec.SetField(appsubscription.FieldPriceFiatID, field.TypeUUID, value)
	}
	if asu.mutation.PriceFiatIDCleared() {
		_spec.ClearField(appsubscription.FieldPriceFiatID, field.TypeUUID)
	}
	if value, ok := asu.mutation.FiatPrice(); ok {
		_spec.SetField(appsubscription.FieldFiatPrice, field.TypeOther, value)
	}
	if asu.mutation.FiatPriceCleared() {
		_spec.ClearField(appsubscription.FieldFiatPrice, field.TypeOther)
	}
	if value, ok := asu.mutation.TrialFiatPrice(); ok {
		_spec.SetField(appsubscription.FieldTrialFiatPrice, field.TypeOther, value)
	}
	if asu.mutation.TrialFiatPriceCleared() {
		_spec.ClearField(appsubscription.FieldTrialFiatPrice, field.TypeOther)
	}
	_spec.AddModifiers(asu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appsubscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	asu.mutation.done = true
	return n, nil
}

// AppSubscriptionUpdateOne is the builder for updating a single AppSubscription entity.
type AppSubscriptionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppSubscriptionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (asuo *AppSubscriptionUpdateOne) SetEntID(u uuid.UUID) *AppSubscriptionUpdateOne {
	asuo.mutation.SetEntID(u)
	return asuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (asuo *AppSubscriptionUpdateOne) SetNillableEntID(u *uuid.UUID) *AppSubscriptionUpdateOne {
	if u != nil {
		asuo.SetEntID(*u)
	}
	return asuo
}

// SetCreatedAt sets the "created_at" field.
func (asuo *AppSubscriptionUpdateOne) SetCreatedAt(u uint32) *AppSubscriptionUpdateOne {
	asuo.mutation.ResetCreatedAt()
	asuo.mutation.SetCreatedAt(u)
	return asuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asuo *AppSubscriptionUpdateOne) SetNillableCreatedAt(u *uint32) *AppSubscriptionUpdateOne {
	if u != nil {
		asuo.SetCreatedAt(*u)
	}
	return asuo
}

// AddCreatedAt adds u to the "created_at" field.
func (asuo *AppSubscriptionUpdateOne) AddCreatedAt(u int32) *AppSubscriptionUpdateOne {
	asuo.mutation.AddCreatedAt(u)
	return asuo
}

// SetUpdatedAt sets the "updated_at" field.
func (asuo *AppSubscriptionUpdateOne) SetUpdatedAt(u uint32) *AppSubscriptionUpdateOne {
	asuo.mutation.ResetUpdatedAt()
	asuo.mutation.SetUpdatedAt(u)
	return asuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (asuo *AppSubscriptionUpdateOne) AddUpdatedAt(u int32) *AppSubscriptionUpdateOne {
	asuo.mutation.AddUpdatedAt(u)
	return asuo
}

// SetDeletedAt sets the "deleted_at" field.
func (asuo *AppSubscriptionUpdateOne) SetDeletedAt(u uint32) *AppSubscriptionUpdateOne {
	asuo.mutation.ResetDeletedAt()
	asuo.mutation.SetDeletedAt(u)
	return asuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (asuo *AppSubscriptionUpdateOne) SetNillableDeletedAt(u *uint32) *AppSubscriptionUpdateOne {
	if u != nil {
		asuo.SetDeletedAt(*u)
	}
	return asuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (asuo *AppSubscriptionUpdateOne) AddDeletedAt(u int32) *AppSubscriptionUpdateOne {
	asuo.mutation.AddDeletedAt(u)
	return asuo
}

// SetAppGoodID sets the "app_good_id" field.
func (asuo *AppSubscriptionUpdateOne) SetAppGoodID(u uuid.UUID) *AppSubscriptionUpdateOne {
	asuo.mutation.SetAppGoodID(u)
	return asuo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (asuo *AppSubscriptionUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *AppSubscriptionUpdateOne {
	if u != nil {
		asuo.SetAppGoodID(*u)
	}
	return asuo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (asuo *AppSubscriptionUpdateOne) ClearAppGoodID() *AppSubscriptionUpdateOne {
	asuo.mutation.ClearAppGoodID()
	return asuo
}

// SetUsdPrice sets the "usd_price" field.
func (asuo *AppSubscriptionUpdateOne) SetUsdPrice(d decimal.Decimal) *AppSubscriptionUpdateOne {
	asuo.mutation.SetUsdPrice(d)
	return asuo
}

// SetNillableUsdPrice sets the "usd_price" field if the given value is not nil.
func (asuo *AppSubscriptionUpdateOne) SetNillableUsdPrice(d *decimal.Decimal) *AppSubscriptionUpdateOne {
	if d != nil {
		asuo.SetUsdPrice(*d)
	}
	return asuo
}

// ClearUsdPrice clears the value of the "usd_price" field.
func (asuo *AppSubscriptionUpdateOne) ClearUsdPrice() *AppSubscriptionUpdateOne {
	asuo.mutation.ClearUsdPrice()
	return asuo
}

// SetProductID sets the "product_id" field.
func (asuo *AppSubscriptionUpdateOne) SetProductID(s string) *AppSubscriptionUpdateOne {
	asuo.mutation.SetProductID(s)
	return asuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (asuo *AppSubscriptionUpdateOne) SetNillableProductID(s *string) *AppSubscriptionUpdateOne {
	if s != nil {
		asuo.SetProductID(*s)
	}
	return asuo
}

// ClearProductID clears the value of the "product_id" field.
func (asuo *AppSubscriptionUpdateOne) ClearProductID() *AppSubscriptionUpdateOne {
	asuo.mutation.ClearProductID()
	return asuo
}

// SetPlanID sets the "plan_id" field.
func (asuo *AppSubscriptionUpdateOne) SetPlanID(s string) *AppSubscriptionUpdateOne {
	asuo.mutation.SetPlanID(s)
	return asuo
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (asuo *AppSubscriptionUpdateOne) SetNillablePlanID(s *string) *AppSubscriptionUpdateOne {
	if s != nil {
		asuo.SetPlanID(*s)
	}
	return asuo
}

// ClearPlanID clears the value of the "plan_id" field.
func (asuo *AppSubscriptionUpdateOne) ClearPlanID() *AppSubscriptionUpdateOne {
	asuo.mutation.ClearPlanID()
	return asuo
}

// SetTrialUnits sets the "trial_units" field.
func (asuo *AppSubscriptionUpdateOne) SetTrialUnits(u uint32) *AppSubscriptionUpdateOne {
	asuo.mutation.ResetTrialUnits()
	asuo.mutation.SetTrialUnits(u)
	return asuo
}

// SetNillableTrialUnits sets the "trial_units" field if the given value is not nil.
func (asuo *AppSubscriptionUpdateOne) SetNillableTrialUnits(u *uint32) *AppSubscriptionUpdateOne {
	if u != nil {
		asuo.SetTrialUnits(*u)
	}
	return asuo
}

// AddTrialUnits adds u to the "trial_units" field.
func (asuo *AppSubscriptionUpdateOne) AddTrialUnits(u int32) *AppSubscriptionUpdateOne {
	asuo.mutation.AddTrialUnits(u)
	return asuo
}

// ClearTrialUnits clears the value of the "trial_units" field.
func (asuo *AppSubscriptionUpdateOne) ClearTrialUnits() *AppSubscriptionUpdateOne {
	asuo.mutation.ClearTrialUnits()
	return asuo
}

// SetTrialUsdPrice sets the "trial_usd_price" field.
func (asuo *AppSubscriptionUpdateOne) SetTrialUsdPrice(d decimal.Decimal) *AppSubscriptionUpdateOne {
	asuo.mutation.SetTrialUsdPrice(d)
	return asuo
}

// SetNillableTrialUsdPrice sets the "trial_usd_price" field if the given value is not nil.
func (asuo *AppSubscriptionUpdateOne) SetNillableTrialUsdPrice(d *decimal.Decimal) *AppSubscriptionUpdateOne {
	if d != nil {
		asuo.SetTrialUsdPrice(*d)
	}
	return asuo
}

// ClearTrialUsdPrice clears the value of the "trial_usd_price" field.
func (asuo *AppSubscriptionUpdateOne) ClearTrialUsdPrice() *AppSubscriptionUpdateOne {
	asuo.mutation.ClearTrialUsdPrice()
	return asuo
}

// SetPriceFiatID sets the "price_fiat_id" field.
func (asuo *AppSubscriptionUpdateOne) SetPriceFiatID(u uuid.UUID) *AppSubscriptionUpdateOne {
	asuo.mutation.SetPriceFiatID(u)
	return asuo
}

// SetNillablePriceFiatID sets the "price_fiat_id" field if the given value is not nil.
func (asuo *AppSubscriptionUpdateOne) SetNillablePriceFiatID(u *uuid.UUID) *AppSubscriptionUpdateOne {
	if u != nil {
		asuo.SetPriceFiatID(*u)
	}
	return asuo
}

// ClearPriceFiatID clears the value of the "price_fiat_id" field.
func (asuo *AppSubscriptionUpdateOne) ClearPriceFiatID() *AppSubscriptionUpdateOne {
	asuo.mutation.ClearPriceFiatID()
	return asuo
}

// SetFiatPrice sets the "fiat_price" field.
func (asuo *AppSubscriptionUpdateOne) SetFiatPrice(d decimal.Decimal) *AppSubscriptionUpdateOne {
	asuo.mutation.SetFiatPrice(d)
	return asuo
}

// SetNillableFiatPrice sets the "fiat_price" field if the given value is not nil.
func (asuo *AppSubscriptionUpdateOne) SetNillableFiatPrice(d *decimal.Decimal) *AppSubscriptionUpdateOne {
	if d != nil {
		asuo.SetFiatPrice(*d)
	}
	return asuo
}

// ClearFiatPrice clears the value of the "fiat_price" field.
func (asuo *AppSubscriptionUpdateOne) ClearFiatPrice() *AppSubscriptionUpdateOne {
	asuo.mutation.ClearFiatPrice()
	return asuo
}

// SetTrialFiatPrice sets the "trial_fiat_price" field.
func (asuo *AppSubscriptionUpdateOne) SetTrialFiatPrice(d decimal.Decimal) *AppSubscriptionUpdateOne {
	asuo.mutation.SetTrialFiatPrice(d)
	return asuo
}

// SetNillableTrialFiatPrice sets the "trial_fiat_price" field if the given value is not nil.
func (asuo *AppSubscriptionUpdateOne) SetNillableTrialFiatPrice(d *decimal.Decimal) *AppSubscriptionUpdateOne {
	if d != nil {
		asuo.SetTrialFiatPrice(*d)
	}
	return asuo
}

// ClearTrialFiatPrice clears the value of the "trial_fiat_price" field.
func (asuo *AppSubscriptionUpdateOne) ClearTrialFiatPrice() *AppSubscriptionUpdateOne {
	asuo.mutation.ClearTrialFiatPrice()
	return asuo
}

// Mutation returns the AppSubscriptionMutation object of the builder.
func (asuo *AppSubscriptionUpdateOne) Mutation() *AppSubscriptionMutation {
	return asuo.mutation
}

// Where appends a list predicates to the AppSubscriptionUpdate builder.
func (asuo *AppSubscriptionUpdateOne) Where(ps ...predicate.AppSubscription) *AppSubscriptionUpdateOne {
	asuo.mutation.Where(ps...)
	return asuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *AppSubscriptionUpdateOne) Select(field string, fields ...string) *AppSubscriptionUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated AppSubscription entity.
func (asuo *AppSubscriptionUpdateOne) Save(ctx context.Context) (*AppSubscription, error) {
	asuo.defaults()
	return withHooks(ctx, asuo.sqlSave, asuo.mutation, asuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AppSubscriptionUpdateOne) SaveX(ctx context.Context) *AppSubscription {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *AppSubscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AppSubscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asuo *AppSubscriptionUpdateOne) defaults() {
	if _, ok := asuo.mutation.UpdatedAt(); !ok {
		v := appsubscription.UpdateDefaultUpdatedAt()
		asuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (asuo *AppSubscriptionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppSubscriptionUpdateOne {
	asuo.modifiers = append(asuo.modifiers, modifiers...)
	return asuo
}

func (asuo *AppSubscriptionUpdateOne) sqlSave(ctx context.Context) (_node *AppSubscription, err error) {
	_spec := sqlgraph.NewUpdateSpec(appsubscription.Table, appsubscription.Columns, sqlgraph.NewFieldSpec(appsubscription.FieldID, field.TypeUint32))
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AppSubscription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appsubscription.FieldID)
		for _, f := range fields {
			if !appsubscription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != appsubscription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.EntID(); ok {
		_spec.SetField(appsubscription.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := asuo.mutation.CreatedAt(); ok {
		_spec.SetField(appsubscription.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := asuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(appsubscription.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := asuo.mutation.UpdatedAt(); ok {
		_spec.SetField(appsubscription.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := asuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(appsubscription.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := asuo.mutation.DeletedAt(); ok {
		_spec.SetField(appsubscription.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := asuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(appsubscription.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := asuo.mutation.AppGoodID(); ok {
		_spec.SetField(appsubscription.FieldAppGoodID, field.TypeUUID, value)
	}
	if asuo.mutation.AppGoodIDCleared() {
		_spec.ClearField(appsubscription.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := asuo.mutation.UsdPrice(); ok {
		_spec.SetField(appsubscription.FieldUsdPrice, field.TypeOther, value)
	}
	if asuo.mutation.UsdPriceCleared() {
		_spec.ClearField(appsubscription.FieldUsdPrice, field.TypeOther)
	}
	if value, ok := asuo.mutation.ProductID(); ok {
		_spec.SetField(appsubscription.FieldProductID, field.TypeString, value)
	}
	if asuo.mutation.ProductIDCleared() {
		_spec.ClearField(appsubscription.FieldProductID, field.TypeString)
	}
	if value, ok := asuo.mutation.PlanID(); ok {
		_spec.SetField(appsubscription.FieldPlanID, field.TypeString, value)
	}
	if asuo.mutation.PlanIDCleared() {
		_spec.ClearField(appsubscription.FieldPlanID, field.TypeString)
	}
	if value, ok := asuo.mutation.TrialUnits(); ok {
		_spec.SetField(appsubscription.FieldTrialUnits, field.TypeUint32, value)
	}
	if value, ok := asuo.mutation.AddedTrialUnits(); ok {
		_spec.AddField(appsubscription.FieldTrialUnits, field.TypeUint32, value)
	}
	if asuo.mutation.TrialUnitsCleared() {
		_spec.ClearField(appsubscription.FieldTrialUnits, field.TypeUint32)
	}
	if value, ok := asuo.mutation.TrialUsdPrice(); ok {
		_spec.SetField(appsubscription.FieldTrialUsdPrice, field.TypeOther, value)
	}
	if asuo.mutation.TrialUsdPriceCleared() {
		_spec.ClearField(appsubscription.FieldTrialUsdPrice, field.TypeOther)
	}
	if value, ok := asuo.mutation.PriceFiatID(); ok {
		_spec.SetField(appsubscription.FieldPriceFiatID, field.TypeUUID, value)
	}
	if asuo.mutation.PriceFiatIDCleared() {
		_spec.ClearField(appsubscription.FieldPriceFiatID, field.TypeUUID)
	}
	if value, ok := asuo.mutation.FiatPrice(); ok {
		_spec.SetField(appsubscription.FieldFiatPrice, field.TypeOther, value)
	}
	if asuo.mutation.FiatPriceCleared() {
		_spec.ClearField(appsubscription.FieldFiatPrice, field.TypeOther)
	}
	if value, ok := asuo.mutation.TrialFiatPrice(); ok {
		_spec.SetField(appsubscription.FieldTrialFiatPrice, field.TypeOther, value)
	}
	if asuo.mutation.TrialFiatPriceCleared() {
		_spec.ClearField(appsubscription.FieldTrialFiatPrice, field.TypeOther)
	}
	_spec.AddModifiers(asuo.modifiers...)
	_node = &AppSubscription{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appsubscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	asuo.mutation.done = true
	return _node, nil
}

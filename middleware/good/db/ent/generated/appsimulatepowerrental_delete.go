// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appsimulatepowerrental"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
)

// AppSimulatePowerRentalDelete is the builder for deleting a AppSimulatePowerRental entity.
type AppSimulatePowerRentalDelete struct {
	config
	hooks    []Hook
	mutation *AppSimulatePowerRentalMutation
}

// Where appends a list predicates to the AppSimulatePowerRentalDelete builder.
func (asprd *AppSimulatePowerRentalDelete) Where(ps ...predicate.AppSimulatePowerRental) *AppSimulatePowerRentalDelete {
	asprd.mutation.Where(ps...)
	return asprd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (asprd *AppSimulatePowerRentalDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, asprd.sqlExec, asprd.mutation, asprd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (asprd *AppSimulatePowerRentalDelete) ExecX(ctx context.Context) int {
	n, err := asprd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (asprd *AppSimulatePowerRentalDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(appsimulatepowerrental.Table, sqlgraph.NewFieldSpec(appsimulatepowerrental.FieldID, field.TypeUint32))
	if ps := asprd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, asprd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	asprd.mutation.done = true
	return affected, err
}

// AppSimulatePowerRentalDeleteOne is the builder for deleting a single AppSimulatePowerRental entity.
type AppSimulatePowerRentalDeleteOne struct {
	asprd *AppSimulatePowerRentalDelete
}

// Where appends a list predicates to the AppSimulatePowerRentalDelete builder.
func (asprdo *AppSimulatePowerRentalDeleteOne) Where(ps ...predicate.AppSimulatePowerRental) *AppSimulatePowerRentalDeleteOne {
	asprdo.asprd.mutation.Where(ps...)
	return asprdo
}

// Exec executes the deletion query.
func (asprdo *AppSimulatePowerRentalDeleteOne) Exec(ctx context.Context) error {
	n, err := asprdo.asprd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{appsimulatepowerrental.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (asprdo *AppSimulatePowerRentalDeleteOne) ExecX(ctx context.Context) {
	if err := asprdo.Exec(ctx); err != nil {
		panic(err)
	}
}

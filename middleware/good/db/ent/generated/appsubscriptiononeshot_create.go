// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appsubscriptiononeshot"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppSubscriptionOneShotCreate is the builder for creating a AppSubscriptionOneShot entity.
type AppSubscriptionOneShotCreate struct {
	config
	mutation *AppSubscriptionOneShotMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (asosc *AppSubscriptionOneShotCreate) SetEntID(u uuid.UUID) *AppSubscriptionOneShotCreate {
	asosc.mutation.SetEntID(u)
	return asosc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (asosc *AppSubscriptionOneShotCreate) SetNillableEntID(u *uuid.UUID) *AppSubscriptionOneShotCreate {
	if u != nil {
		asosc.SetEntID(*u)
	}
	return asosc
}

// SetCreatedAt sets the "created_at" field.
func (asosc *AppSubscriptionOneShotCreate) SetCreatedAt(u uint32) *AppSubscriptionOneShotCreate {
	asosc.mutation.SetCreatedAt(u)
	return asosc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asosc *AppSubscriptionOneShotCreate) SetNillableCreatedAt(u *uint32) *AppSubscriptionOneShotCreate {
	if u != nil {
		asosc.SetCreatedAt(*u)
	}
	return asosc
}

// SetUpdatedAt sets the "updated_at" field.
func (asosc *AppSubscriptionOneShotCreate) SetUpdatedAt(u uint32) *AppSubscriptionOneShotCreate {
	asosc.mutation.SetUpdatedAt(u)
	return asosc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (asosc *AppSubscriptionOneShotCreate) SetNillableUpdatedAt(u *uint32) *AppSubscriptionOneShotCreate {
	if u != nil {
		asosc.SetUpdatedAt(*u)
	}
	return asosc
}

// SetDeletedAt sets the "deleted_at" field.
func (asosc *AppSubscriptionOneShotCreate) SetDeletedAt(u uint32) *AppSubscriptionOneShotCreate {
	asosc.mutation.SetDeletedAt(u)
	return asosc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (asosc *AppSubscriptionOneShotCreate) SetNillableDeletedAt(u *uint32) *AppSubscriptionOneShotCreate {
	if u != nil {
		asosc.SetDeletedAt(*u)
	}
	return asosc
}

// SetAppID sets the "app_id" field.
func (asosc *AppSubscriptionOneShotCreate) SetAppID(u uuid.UUID) *AppSubscriptionOneShotCreate {
	asosc.mutation.SetAppID(u)
	return asosc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (asosc *AppSubscriptionOneShotCreate) SetNillableAppID(u *uuid.UUID) *AppSubscriptionOneShotCreate {
	if u != nil {
		asosc.SetAppID(*u)
	}
	return asosc
}

// SetGoodID sets the "good_id" field.
func (asosc *AppSubscriptionOneShotCreate) SetGoodID(u uuid.UUID) *AppSubscriptionOneShotCreate {
	asosc.mutation.SetGoodID(u)
	return asosc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (asosc *AppSubscriptionOneShotCreate) SetNillableGoodID(u *uuid.UUID) *AppSubscriptionOneShotCreate {
	if u != nil {
		asosc.SetGoodID(*u)
	}
	return asosc
}

// SetAppGoodID sets the "app_good_id" field.
func (asosc *AppSubscriptionOneShotCreate) SetAppGoodID(u uuid.UUID) *AppSubscriptionOneShotCreate {
	asosc.mutation.SetAppGoodID(u)
	return asosc
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (asosc *AppSubscriptionOneShotCreate) SetNillableAppGoodID(u *uuid.UUID) *AppSubscriptionOneShotCreate {
	if u != nil {
		asosc.SetAppGoodID(*u)
	}
	return asosc
}

// SetName sets the "name" field.
func (asosc *AppSubscriptionOneShotCreate) SetName(s string) *AppSubscriptionOneShotCreate {
	asosc.mutation.SetName(s)
	return asosc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (asosc *AppSubscriptionOneShotCreate) SetNillableName(s *string) *AppSubscriptionOneShotCreate {
	if s != nil {
		asosc.SetName(*s)
	}
	return asosc
}

// SetBanner sets the "banner" field.
func (asosc *AppSubscriptionOneShotCreate) SetBanner(s string) *AppSubscriptionOneShotCreate {
	asosc.mutation.SetBanner(s)
	return asosc
}

// SetNillableBanner sets the "banner" field if the given value is not nil.
func (asosc *AppSubscriptionOneShotCreate) SetNillableBanner(s *string) *AppSubscriptionOneShotCreate {
	if s != nil {
		asosc.SetBanner(*s)
	}
	return asosc
}

// SetUsdPrice sets the "usd_price" field.
func (asosc *AppSubscriptionOneShotCreate) SetUsdPrice(d decimal.Decimal) *AppSubscriptionOneShotCreate {
	asosc.mutation.SetUsdPrice(d)
	return asosc
}

// SetNillableUsdPrice sets the "usd_price" field if the given value is not nil.
func (asosc *AppSubscriptionOneShotCreate) SetNillableUsdPrice(d *decimal.Decimal) *AppSubscriptionOneShotCreate {
	if d != nil {
		asosc.SetUsdPrice(*d)
	}
	return asosc
}

// SetID sets the "id" field.
func (asosc *AppSubscriptionOneShotCreate) SetID(u uint32) *AppSubscriptionOneShotCreate {
	asosc.mutation.SetID(u)
	return asosc
}

// Mutation returns the AppSubscriptionOneShotMutation object of the builder.
func (asosc *AppSubscriptionOneShotCreate) Mutation() *AppSubscriptionOneShotMutation {
	return asosc.mutation
}

// Save creates the AppSubscriptionOneShot in the database.
func (asosc *AppSubscriptionOneShotCreate) Save(ctx context.Context) (*AppSubscriptionOneShot, error) {
	asosc.defaults()
	return withHooks(ctx, asosc.sqlSave, asosc.mutation, asosc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (asosc *AppSubscriptionOneShotCreate) SaveX(ctx context.Context) *AppSubscriptionOneShot {
	v, err := asosc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asosc *AppSubscriptionOneShotCreate) Exec(ctx context.Context) error {
	_, err := asosc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asosc *AppSubscriptionOneShotCreate) ExecX(ctx context.Context) {
	if err := asosc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asosc *AppSubscriptionOneShotCreate) defaults() {
	if _, ok := asosc.mutation.EntID(); !ok {
		v := appsubscriptiononeshot.DefaultEntID()
		asosc.mutation.SetEntID(v)
	}
	if _, ok := asosc.mutation.CreatedAt(); !ok {
		v := appsubscriptiononeshot.DefaultCreatedAt()
		asosc.mutation.SetCreatedAt(v)
	}
	if _, ok := asosc.mutation.UpdatedAt(); !ok {
		v := appsubscriptiononeshot.DefaultUpdatedAt()
		asosc.mutation.SetUpdatedAt(v)
	}
	if _, ok := asosc.mutation.DeletedAt(); !ok {
		v := appsubscriptiononeshot.DefaultDeletedAt()
		asosc.mutation.SetDeletedAt(v)
	}
	if _, ok := asosc.mutation.AppID(); !ok {
		v := appsubscriptiononeshot.DefaultAppID()
		asosc.mutation.SetAppID(v)
	}
	if _, ok := asosc.mutation.GoodID(); !ok {
		v := appsubscriptiononeshot.DefaultGoodID()
		asosc.mutation.SetGoodID(v)
	}
	if _, ok := asosc.mutation.AppGoodID(); !ok {
		v := appsubscriptiononeshot.DefaultAppGoodID()
		asosc.mutation.SetAppGoodID(v)
	}
	if _, ok := asosc.mutation.Name(); !ok {
		v := appsubscriptiononeshot.DefaultName
		asosc.mutation.SetName(v)
	}
	if _, ok := asosc.mutation.Banner(); !ok {
		v := appsubscriptiononeshot.DefaultBanner
		asosc.mutation.SetBanner(v)
	}
	if _, ok := asosc.mutation.UsdPrice(); !ok {
		v := appsubscriptiononeshot.DefaultUsdPrice
		asosc.mutation.SetUsdPrice(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asosc *AppSubscriptionOneShotCreate) check() error {
	if _, ok := asosc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "AppSubscriptionOneShot.ent_id"`)}
	}
	if _, ok := asosc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "AppSubscriptionOneShot.created_at"`)}
	}
	if _, ok := asosc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "AppSubscriptionOneShot.updated_at"`)}
	}
	if _, ok := asosc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "AppSubscriptionOneShot.deleted_at"`)}
	}
	return nil
}

func (asosc *AppSubscriptionOneShotCreate) sqlSave(ctx context.Context) (*AppSubscriptionOneShot, error) {
	if err := asosc.check(); err != nil {
		return nil, err
	}
	_node, _spec := asosc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asosc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	asosc.mutation.id = &_node.ID
	asosc.mutation.done = true
	return _node, nil
}

func (asosc *AppSubscriptionOneShotCreate) createSpec() (*AppSubscriptionOneShot, *sqlgraph.CreateSpec) {
	var (
		_node = &AppSubscriptionOneShot{config: asosc.config}
		_spec = sqlgraph.NewCreateSpec(appsubscriptiononeshot.Table, sqlgraph.NewFieldSpec(appsubscriptiononeshot.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = asosc.conflict
	if id, ok := asosc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := asosc.mutation.EntID(); ok {
		_spec.SetField(appsubscriptiononeshot.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := asosc.mutation.CreatedAt(); ok {
		_spec.SetField(appsubscriptiononeshot.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := asosc.mutation.UpdatedAt(); ok {
		_spec.SetField(appsubscriptiononeshot.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := asosc.mutation.DeletedAt(); ok {
		_spec.SetField(appsubscriptiononeshot.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := asosc.mutation.AppID(); ok {
		_spec.SetField(appsubscriptiononeshot.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := asosc.mutation.GoodID(); ok {
		_spec.SetField(appsubscriptiononeshot.FieldGoodID, field.TypeUUID, value)
		_node.GoodID = value
	}
	if value, ok := asosc.mutation.AppGoodID(); ok {
		_spec.SetField(appsubscriptiononeshot.FieldAppGoodID, field.TypeUUID, value)
		_node.AppGoodID = value
	}
	if value, ok := asosc.mutation.Name(); ok {
		_spec.SetField(appsubscriptiononeshot.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := asosc.mutation.Banner(); ok {
		_spec.SetField(appsubscriptiononeshot.FieldBanner, field.TypeString, value)
		_node.Banner = value
	}
	if value, ok := asosc.mutation.UsdPrice(); ok {
		_spec.SetField(appsubscriptiononeshot.FieldUsdPrice, field.TypeOther, value)
		_node.UsdPrice = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppSubscriptionOneShot.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppSubscriptionOneShotUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (asosc *AppSubscriptionOneShotCreate) OnConflict(opts ...sql.ConflictOption) *AppSubscriptionOneShotUpsertOne {
	asosc.conflict = opts
	return &AppSubscriptionOneShotUpsertOne{
		create: asosc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppSubscriptionOneShot.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (asosc *AppSubscriptionOneShotCreate) OnConflictColumns(columns ...string) *AppSubscriptionOneShotUpsertOne {
	asosc.conflict = append(asosc.conflict, sql.ConflictColumns(columns...))
	return &AppSubscriptionOneShotUpsertOne{
		create: asosc,
	}
}

type (
	// AppSubscriptionOneShotUpsertOne is the builder for "upsert"-ing
	//  one AppSubscriptionOneShot node.
	AppSubscriptionOneShotUpsertOne struct {
		create *AppSubscriptionOneShotCreate
	}

	// AppSubscriptionOneShotUpsert is the "OnConflict" setter.
	AppSubscriptionOneShotUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *AppSubscriptionOneShotUpsert) SetEntID(v uuid.UUID) *AppSubscriptionOneShotUpsert {
	u.Set(appsubscriptiononeshot.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsert) UpdateEntID() *AppSubscriptionOneShotUpsert {
	u.SetExcluded(appsubscriptiononeshot.FieldEntID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppSubscriptionOneShotUpsert) SetCreatedAt(v uint32) *AppSubscriptionOneShotUpsert {
	u.Set(appsubscriptiononeshot.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsert) UpdateCreatedAt() *AppSubscriptionOneShotUpsert {
	u.SetExcluded(appsubscriptiononeshot.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppSubscriptionOneShotUpsert) AddCreatedAt(v uint32) *AppSubscriptionOneShotUpsert {
	u.Add(appsubscriptiononeshot.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppSubscriptionOneShotUpsert) SetUpdatedAt(v uint32) *AppSubscriptionOneShotUpsert {
	u.Set(appsubscriptiononeshot.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsert) UpdateUpdatedAt() *AppSubscriptionOneShotUpsert {
	u.SetExcluded(appsubscriptiononeshot.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppSubscriptionOneShotUpsert) AddUpdatedAt(v uint32) *AppSubscriptionOneShotUpsert {
	u.Add(appsubscriptiononeshot.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppSubscriptionOneShotUpsert) SetDeletedAt(v uint32) *AppSubscriptionOneShotUpsert {
	u.Set(appsubscriptiononeshot.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsert) UpdateDeletedAt() *AppSubscriptionOneShotUpsert {
	u.SetExcluded(appsubscriptiononeshot.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppSubscriptionOneShotUpsert) AddDeletedAt(v uint32) *AppSubscriptionOneShotUpsert {
	u.Add(appsubscriptiononeshot.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppSubscriptionOneShotUpsert) SetAppID(v uuid.UUID) *AppSubscriptionOneShotUpsert {
	u.Set(appsubscriptiononeshot.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsert) UpdateAppID() *AppSubscriptionOneShotUpsert {
	u.SetExcluded(appsubscriptiononeshot.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppSubscriptionOneShotUpsert) ClearAppID() *AppSubscriptionOneShotUpsert {
	u.SetNull(appsubscriptiononeshot.FieldAppID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *AppSubscriptionOneShotUpsert) SetGoodID(v uuid.UUID) *AppSubscriptionOneShotUpsert {
	u.Set(appsubscriptiononeshot.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsert) UpdateGoodID() *AppSubscriptionOneShotUpsert {
	u.SetExcluded(appsubscriptiononeshot.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *AppSubscriptionOneShotUpsert) ClearGoodID() *AppSubscriptionOneShotUpsert {
	u.SetNull(appsubscriptiononeshot.FieldGoodID)
	return u
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppSubscriptionOneShotUpsert) SetAppGoodID(v uuid.UUID) *AppSubscriptionOneShotUpsert {
	u.Set(appsubscriptiononeshot.FieldAppGoodID, v)
	return u
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsert) UpdateAppGoodID() *AppSubscriptionOneShotUpsert {
	u.SetExcluded(appsubscriptiononeshot.FieldAppGoodID)
	return u
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppSubscriptionOneShotUpsert) ClearAppGoodID() *AppSubscriptionOneShotUpsert {
	u.SetNull(appsubscriptiononeshot.FieldAppGoodID)
	return u
}

// SetName sets the "name" field.
func (u *AppSubscriptionOneShotUpsert) SetName(v string) *AppSubscriptionOneShotUpsert {
	u.Set(appsubscriptiononeshot.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsert) UpdateName() *AppSubscriptionOneShotUpsert {
	u.SetExcluded(appsubscriptiononeshot.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *AppSubscriptionOneShotUpsert) ClearName() *AppSubscriptionOneShotUpsert {
	u.SetNull(appsubscriptiononeshot.FieldName)
	return u
}

// SetBanner sets the "banner" field.
func (u *AppSubscriptionOneShotUpsert) SetBanner(v string) *AppSubscriptionOneShotUpsert {
	u.Set(appsubscriptiononeshot.FieldBanner, v)
	return u
}

// UpdateBanner sets the "banner" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsert) UpdateBanner() *AppSubscriptionOneShotUpsert {
	u.SetExcluded(appsubscriptiononeshot.FieldBanner)
	return u
}

// ClearBanner clears the value of the "banner" field.
func (u *AppSubscriptionOneShotUpsert) ClearBanner() *AppSubscriptionOneShotUpsert {
	u.SetNull(appsubscriptiononeshot.FieldBanner)
	return u
}

// SetUsdPrice sets the "usd_price" field.
func (u *AppSubscriptionOneShotUpsert) SetUsdPrice(v decimal.Decimal) *AppSubscriptionOneShotUpsert {
	u.Set(appsubscriptiononeshot.FieldUsdPrice, v)
	return u
}

// UpdateUsdPrice sets the "usd_price" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsert) UpdateUsdPrice() *AppSubscriptionOneShotUpsert {
	u.SetExcluded(appsubscriptiononeshot.FieldUsdPrice)
	return u
}

// ClearUsdPrice clears the value of the "usd_price" field.
func (u *AppSubscriptionOneShotUpsert) ClearUsdPrice() *AppSubscriptionOneShotUpsert {
	u.SetNull(appsubscriptiononeshot.FieldUsdPrice)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppSubscriptionOneShot.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appsubscriptiononeshot.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppSubscriptionOneShotUpsertOne) UpdateNewValues() *AppSubscriptionOneShotUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appsubscriptiononeshot.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppSubscriptionOneShot.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppSubscriptionOneShotUpsertOne) Ignore() *AppSubscriptionOneShotUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppSubscriptionOneShotUpsertOne) DoNothing() *AppSubscriptionOneShotUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppSubscriptionOneShotCreate.OnConflict
// documentation for more info.
func (u *AppSubscriptionOneShotUpsertOne) Update(set func(*AppSubscriptionOneShotUpsert)) *AppSubscriptionOneShotUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppSubscriptionOneShotUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppSubscriptionOneShotUpsertOne) SetEntID(v uuid.UUID) *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsertOne) UpdateEntID() *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AppSubscriptionOneShotUpsertOne) SetCreatedAt(v uint32) *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppSubscriptionOneShotUpsertOne) AddCreatedAt(v uint32) *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsertOne) UpdateCreatedAt() *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppSubscriptionOneShotUpsertOne) SetUpdatedAt(v uint32) *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppSubscriptionOneShotUpsertOne) AddUpdatedAt(v uint32) *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsertOne) UpdateUpdatedAt() *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppSubscriptionOneShotUpsertOne) SetDeletedAt(v uint32) *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppSubscriptionOneShotUpsertOne) AddDeletedAt(v uint32) *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsertOne) UpdateDeletedAt() *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppSubscriptionOneShotUpsertOne) SetAppID(v uuid.UUID) *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsertOne) UpdateAppID() *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppSubscriptionOneShotUpsertOne) ClearAppID() *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.ClearAppID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *AppSubscriptionOneShotUpsertOne) SetGoodID(v uuid.UUID) *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsertOne) UpdateGoodID() *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *AppSubscriptionOneShotUpsertOne) ClearGoodID() *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.ClearGoodID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppSubscriptionOneShotUpsertOne) SetAppGoodID(v uuid.UUID) *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsertOne) UpdateAppGoodID() *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppSubscriptionOneShotUpsertOne) ClearAppGoodID() *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.ClearAppGoodID()
	})
}

// SetName sets the "name" field.
func (u *AppSubscriptionOneShotUpsertOne) SetName(v string) *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsertOne) UpdateName() *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *AppSubscriptionOneShotUpsertOne) ClearName() *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.ClearName()
	})
}

// SetBanner sets the "banner" field.
func (u *AppSubscriptionOneShotUpsertOne) SetBanner(v string) *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.SetBanner(v)
	})
}

// UpdateBanner sets the "banner" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsertOne) UpdateBanner() *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.UpdateBanner()
	})
}

// ClearBanner clears the value of the "banner" field.
func (u *AppSubscriptionOneShotUpsertOne) ClearBanner() *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.ClearBanner()
	})
}

// SetUsdPrice sets the "usd_price" field.
func (u *AppSubscriptionOneShotUpsertOne) SetUsdPrice(v decimal.Decimal) *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.SetUsdPrice(v)
	})
}

// UpdateUsdPrice sets the "usd_price" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsertOne) UpdateUsdPrice() *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.UpdateUsdPrice()
	})
}

// ClearUsdPrice clears the value of the "usd_price" field.
func (u *AppSubscriptionOneShotUpsertOne) ClearUsdPrice() *AppSubscriptionOneShotUpsertOne {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.ClearUsdPrice()
	})
}

// Exec executes the query.
func (u *AppSubscriptionOneShotUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppSubscriptionOneShotCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppSubscriptionOneShotUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppSubscriptionOneShotUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppSubscriptionOneShotUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppSubscriptionOneShotCreateBulk is the builder for creating many AppSubscriptionOneShot entities in bulk.
type AppSubscriptionOneShotCreateBulk struct {
	config
	err      error
	builders []*AppSubscriptionOneShotCreate
	conflict []sql.ConflictOption
}

// Save creates the AppSubscriptionOneShot entities in the database.
func (asoscb *AppSubscriptionOneShotCreateBulk) Save(ctx context.Context) ([]*AppSubscriptionOneShot, error) {
	if asoscb.err != nil {
		return nil, asoscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(asoscb.builders))
	nodes := make([]*AppSubscriptionOneShot, len(asoscb.builders))
	mutators := make([]Mutator, len(asoscb.builders))
	for i := range asoscb.builders {
		func(i int, root context.Context) {
			builder := asoscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppSubscriptionOneShotMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, asoscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = asoscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, asoscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, asoscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (asoscb *AppSubscriptionOneShotCreateBulk) SaveX(ctx context.Context) []*AppSubscriptionOneShot {
	v, err := asoscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asoscb *AppSubscriptionOneShotCreateBulk) Exec(ctx context.Context) error {
	_, err := asoscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asoscb *AppSubscriptionOneShotCreateBulk) ExecX(ctx context.Context) {
	if err := asoscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppSubscriptionOneShot.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppSubscriptionOneShotUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (asoscb *AppSubscriptionOneShotCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppSubscriptionOneShotUpsertBulk {
	asoscb.conflict = opts
	return &AppSubscriptionOneShotUpsertBulk{
		create: asoscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppSubscriptionOneShot.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (asoscb *AppSubscriptionOneShotCreateBulk) OnConflictColumns(columns ...string) *AppSubscriptionOneShotUpsertBulk {
	asoscb.conflict = append(asoscb.conflict, sql.ConflictColumns(columns...))
	return &AppSubscriptionOneShotUpsertBulk{
		create: asoscb,
	}
}

// AppSubscriptionOneShotUpsertBulk is the builder for "upsert"-ing
// a bulk of AppSubscriptionOneShot nodes.
type AppSubscriptionOneShotUpsertBulk struct {
	create *AppSubscriptionOneShotCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppSubscriptionOneShot.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appsubscriptiononeshot.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppSubscriptionOneShotUpsertBulk) UpdateNewValues() *AppSubscriptionOneShotUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appsubscriptiononeshot.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppSubscriptionOneShot.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppSubscriptionOneShotUpsertBulk) Ignore() *AppSubscriptionOneShotUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppSubscriptionOneShotUpsertBulk) DoNothing() *AppSubscriptionOneShotUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppSubscriptionOneShotCreateBulk.OnConflict
// documentation for more info.
func (u *AppSubscriptionOneShotUpsertBulk) Update(set func(*AppSubscriptionOneShotUpsert)) *AppSubscriptionOneShotUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppSubscriptionOneShotUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppSubscriptionOneShotUpsertBulk) SetEntID(v uuid.UUID) *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsertBulk) UpdateEntID() *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AppSubscriptionOneShotUpsertBulk) SetCreatedAt(v uint32) *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppSubscriptionOneShotUpsertBulk) AddCreatedAt(v uint32) *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsertBulk) UpdateCreatedAt() *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppSubscriptionOneShotUpsertBulk) SetUpdatedAt(v uint32) *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppSubscriptionOneShotUpsertBulk) AddUpdatedAt(v uint32) *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsertBulk) UpdateUpdatedAt() *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppSubscriptionOneShotUpsertBulk) SetDeletedAt(v uint32) *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppSubscriptionOneShotUpsertBulk) AddDeletedAt(v uint32) *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsertBulk) UpdateDeletedAt() *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppSubscriptionOneShotUpsertBulk) SetAppID(v uuid.UUID) *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsertBulk) UpdateAppID() *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppSubscriptionOneShotUpsertBulk) ClearAppID() *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.ClearAppID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *AppSubscriptionOneShotUpsertBulk) SetGoodID(v uuid.UUID) *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsertBulk) UpdateGoodID() *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *AppSubscriptionOneShotUpsertBulk) ClearGoodID() *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.ClearGoodID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppSubscriptionOneShotUpsertBulk) SetAppGoodID(v uuid.UUID) *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsertBulk) UpdateAppGoodID() *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppSubscriptionOneShotUpsertBulk) ClearAppGoodID() *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.ClearAppGoodID()
	})
}

// SetName sets the "name" field.
func (u *AppSubscriptionOneShotUpsertBulk) SetName(v string) *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsertBulk) UpdateName() *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *AppSubscriptionOneShotUpsertBulk) ClearName() *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.ClearName()
	})
}

// SetBanner sets the "banner" field.
func (u *AppSubscriptionOneShotUpsertBulk) SetBanner(v string) *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.SetBanner(v)
	})
}

// UpdateBanner sets the "banner" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsertBulk) UpdateBanner() *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.UpdateBanner()
	})
}

// ClearBanner clears the value of the "banner" field.
func (u *AppSubscriptionOneShotUpsertBulk) ClearBanner() *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.ClearBanner()
	})
}

// SetUsdPrice sets the "usd_price" field.
func (u *AppSubscriptionOneShotUpsertBulk) SetUsdPrice(v decimal.Decimal) *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.SetUsdPrice(v)
	})
}

// UpdateUsdPrice sets the "usd_price" field to the value that was provided on create.
func (u *AppSubscriptionOneShotUpsertBulk) UpdateUsdPrice() *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.UpdateUsdPrice()
	})
}

// ClearUsdPrice clears the value of the "usd_price" field.
func (u *AppSubscriptionOneShotUpsertBulk) ClearUsdPrice() *AppSubscriptionOneShotUpsertBulk {
	return u.Update(func(s *AppSubscriptionOneShotUpsert) {
		s.ClearUsdPrice()
	})
}

// Exec executes the query.
func (u *AppSubscriptionOneShotUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the AppSubscriptionOneShotCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppSubscriptionOneShotCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppSubscriptionOneShotUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

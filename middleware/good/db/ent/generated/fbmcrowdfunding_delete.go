// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/fbmcrowdfunding"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
)

// FbmCrowdFundingDelete is the builder for deleting a FbmCrowdFunding entity.
type FbmCrowdFundingDelete struct {
	config
	hooks    []Hook
	mutation *FbmCrowdFundingMutation
}

// Where appends a list predicates to the FbmCrowdFundingDelete builder.
func (fcfd *FbmCrowdFundingDelete) Where(ps ...predicate.FbmCrowdFunding) *FbmCrowdFundingDelete {
	fcfd.mutation.Where(ps...)
	return fcfd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fcfd *FbmCrowdFundingDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, fcfd.sqlExec, fcfd.mutation, fcfd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fcfd *FbmCrowdFundingDelete) ExecX(ctx context.Context) int {
	n, err := fcfd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fcfd *FbmCrowdFundingDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(fbmcrowdfunding.Table, sqlgraph.NewFieldSpec(fbmcrowdfunding.FieldID, field.TypeUint32))
	if ps := fcfd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fcfd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fcfd.mutation.done = true
	return affected, err
}

// FbmCrowdFundingDeleteOne is the builder for deleting a single FbmCrowdFunding entity.
type FbmCrowdFundingDeleteOne struct {
	fcfd *FbmCrowdFundingDelete
}

// Where appends a list predicates to the FbmCrowdFundingDelete builder.
func (fcfdo *FbmCrowdFundingDeleteOne) Where(ps ...predicate.FbmCrowdFunding) *FbmCrowdFundingDeleteOne {
	fcfdo.fcfd.mutation.Where(ps...)
	return fcfdo
}

// Exec executes the deletion query.
func (fcfdo *FbmCrowdFundingDeleteOne) Exec(ctx context.Context) error {
	n, err := fcfdo.fcfd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{fbmcrowdfunding.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fcfdo *FbmCrowdFundingDeleteOne) ExecX(ctx context.Context) {
	if err := fcfdo.Exec(ctx); err != nil {
		panic(err)
	}
}

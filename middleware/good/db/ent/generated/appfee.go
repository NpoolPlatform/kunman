// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appfee"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppFee is the model entity for the AppFee schema.
type AppFee struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppGoodID holds the value of the "app_good_id" field.
	AppGoodID uuid.UUID `json:"app_good_id,omitempty"`
	// UnitValue holds the value of the "unit_value" field.
	UnitValue decimal.Decimal `json:"unit_value,omitempty"`
	// CancelMode holds the value of the "cancel_mode" field.
	CancelMode string `json:"cancel_mode,omitempty"`
	// MinOrderDurationSeconds holds the value of the "min_order_duration_seconds" field.
	MinOrderDurationSeconds uint32 `json:"min_order_duration_seconds,omitempty"`
	selectValues            sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppFee) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appfee.FieldUnitValue:
			values[i] = new(decimal.Decimal)
		case appfee.FieldID, appfee.FieldMinOrderDurationSeconds:
			values[i] = new(sql.NullInt64)
		case appfee.FieldCancelMode:
			values[i] = new(sql.NullString)
		case appfee.FieldEntID, appfee.FieldAppGoodID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppFee fields.
func (af *AppFee) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appfee.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			af.ID = uint32(value.Int64)
		case appfee.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				af.EntID = *value
			}
		case appfee.FieldAppGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_good_id", values[i])
			} else if value != nil {
				af.AppGoodID = *value
			}
		case appfee.FieldUnitValue:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field unit_value", values[i])
			} else if value != nil {
				af.UnitValue = *value
			}
		case appfee.FieldCancelMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cancel_mode", values[i])
			} else if value.Valid {
				af.CancelMode = value.String
			}
		case appfee.FieldMinOrderDurationSeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field min_order_duration_seconds", values[i])
			} else if value.Valid {
				af.MinOrderDurationSeconds = uint32(value.Int64)
			}
		default:
			af.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppFee.
// This includes values selected through modifiers, order, etc.
func (af *AppFee) Value(name string) (ent.Value, error) {
	return af.selectValues.Get(name)
}

// Update returns a builder for updating this AppFee.
// Note that you need to call AppFee.Unwrap() before calling this method if this AppFee
// was returned from a transaction, and the transaction was committed or rolled back.
func (af *AppFee) Update() *AppFeeUpdateOne {
	return NewAppFeeClient(af.config).UpdateOne(af)
}

// Unwrap unwraps the AppFee entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (af *AppFee) Unwrap() *AppFee {
	_tx, ok := af.config.driver.(*txDriver)
	if !ok {
		panic("generated: AppFee is not a transactional entity")
	}
	af.config.driver = _tx.drv
	return af
}

// String implements the fmt.Stringer.
func (af *AppFee) String() string {
	var builder strings.Builder
	builder.WriteString("AppFee(")
	builder.WriteString(fmt.Sprintf("id=%v, ", af.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", af.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_good_id=")
	builder.WriteString(fmt.Sprintf("%v", af.AppGoodID))
	builder.WriteString(", ")
	builder.WriteString("unit_value=")
	builder.WriteString(fmt.Sprintf("%v", af.UnitValue))
	builder.WriteString(", ")
	builder.WriteString("cancel_mode=")
	builder.WriteString(af.CancelMode)
	builder.WriteString(", ")
	builder.WriteString("min_order_duration_seconds=")
	builder.WriteString(fmt.Sprintf("%v", af.MinOrderDurationSeconds))
	builder.WriteByte(')')
	return builder.String()
}

// AppFees is a parsable slice of AppFee.
type AppFees []*AppFee

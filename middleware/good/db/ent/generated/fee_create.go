// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/fee"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// FeeCreate is the builder for creating a Fee entity.
type FeeCreate struct {
	config
	mutation *FeeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (fc *FeeCreate) SetEntID(u uuid.UUID) *FeeCreate {
	fc.mutation.SetEntID(u)
	return fc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (fc *FeeCreate) SetNillableEntID(u *uuid.UUID) *FeeCreate {
	if u != nil {
		fc.SetEntID(*u)
	}
	return fc
}

// SetGoodID sets the "good_id" field.
func (fc *FeeCreate) SetGoodID(u uuid.UUID) *FeeCreate {
	fc.mutation.SetGoodID(u)
	return fc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (fc *FeeCreate) SetNillableGoodID(u *uuid.UUID) *FeeCreate {
	if u != nil {
		fc.SetGoodID(*u)
	}
	return fc
}

// SetSettlementType sets the "settlement_type" field.
func (fc *FeeCreate) SetSettlementType(s string) *FeeCreate {
	fc.mutation.SetSettlementType(s)
	return fc
}

// SetNillableSettlementType sets the "settlement_type" field if the given value is not nil.
func (fc *FeeCreate) SetNillableSettlementType(s *string) *FeeCreate {
	if s != nil {
		fc.SetSettlementType(*s)
	}
	return fc
}

// SetUnitValue sets the "unit_value" field.
func (fc *FeeCreate) SetUnitValue(d decimal.Decimal) *FeeCreate {
	fc.mutation.SetUnitValue(d)
	return fc
}

// SetNillableUnitValue sets the "unit_value" field if the given value is not nil.
func (fc *FeeCreate) SetNillableUnitValue(d *decimal.Decimal) *FeeCreate {
	if d != nil {
		fc.SetUnitValue(*d)
	}
	return fc
}

// SetDurationDisplayType sets the "duration_display_type" field.
func (fc *FeeCreate) SetDurationDisplayType(s string) *FeeCreate {
	fc.mutation.SetDurationDisplayType(s)
	return fc
}

// SetNillableDurationDisplayType sets the "duration_display_type" field if the given value is not nil.
func (fc *FeeCreate) SetNillableDurationDisplayType(s *string) *FeeCreate {
	if s != nil {
		fc.SetDurationDisplayType(*s)
	}
	return fc
}

// SetID sets the "id" field.
func (fc *FeeCreate) SetID(u uint32) *FeeCreate {
	fc.mutation.SetID(u)
	return fc
}

// Mutation returns the FeeMutation object of the builder.
func (fc *FeeCreate) Mutation() *FeeMutation {
	return fc.mutation
}

// Save creates the Fee in the database.
func (fc *FeeCreate) Save(ctx context.Context) (*Fee, error) {
	fc.defaults()
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FeeCreate) SaveX(ctx context.Context) *Fee {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FeeCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FeeCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FeeCreate) defaults() {
	if _, ok := fc.mutation.EntID(); !ok {
		v := fee.DefaultEntID()
		fc.mutation.SetEntID(v)
	}
	if _, ok := fc.mutation.GoodID(); !ok {
		v := fee.DefaultGoodID()
		fc.mutation.SetGoodID(v)
	}
	if _, ok := fc.mutation.SettlementType(); !ok {
		v := fee.DefaultSettlementType
		fc.mutation.SetSettlementType(v)
	}
	if _, ok := fc.mutation.UnitValue(); !ok {
		v := fee.DefaultUnitValue
		fc.mutation.SetUnitValue(v)
	}
	if _, ok := fc.mutation.DurationDisplayType(); !ok {
		v := fee.DefaultDurationDisplayType
		fc.mutation.SetDurationDisplayType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FeeCreate) check() error {
	if _, ok := fc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "Fee.ent_id"`)}
	}
	return nil
}

func (fc *FeeCreate) sqlSave(ctx context.Context) (*Fee, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FeeCreate) createSpec() (*Fee, *sqlgraph.CreateSpec) {
	var (
		_node = &Fee{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(fee.Table, sqlgraph.NewFieldSpec(fee.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = fc.conflict
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.EntID(); ok {
		_spec.SetField(fee.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := fc.mutation.GoodID(); ok {
		_spec.SetField(fee.FieldGoodID, field.TypeUUID, value)
		_node.GoodID = value
	}
	if value, ok := fc.mutation.SettlementType(); ok {
		_spec.SetField(fee.FieldSettlementType, field.TypeString, value)
		_node.SettlementType = value
	}
	if value, ok := fc.mutation.UnitValue(); ok {
		_spec.SetField(fee.FieldUnitValue, field.TypeOther, value)
		_node.UnitValue = value
	}
	if value, ok := fc.mutation.DurationDisplayType(); ok {
		_spec.SetField(fee.FieldDurationDisplayType, field.TypeString, value)
		_node.DurationDisplayType = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Fee.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FeeUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (fc *FeeCreate) OnConflict(opts ...sql.ConflictOption) *FeeUpsertOne {
	fc.conflict = opts
	return &FeeUpsertOne{
		create: fc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Fee.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fc *FeeCreate) OnConflictColumns(columns ...string) *FeeUpsertOne {
	fc.conflict = append(fc.conflict, sql.ConflictColumns(columns...))
	return &FeeUpsertOne{
		create: fc,
	}
}

type (
	// FeeUpsertOne is the builder for "upsert"-ing
	//  one Fee node.
	FeeUpsertOne struct {
		create *FeeCreate
	}

	// FeeUpsert is the "OnConflict" setter.
	FeeUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *FeeUpsert) SetEntID(v uuid.UUID) *FeeUpsert {
	u.Set(fee.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *FeeUpsert) UpdateEntID() *FeeUpsert {
	u.SetExcluded(fee.FieldEntID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *FeeUpsert) SetGoodID(v uuid.UUID) *FeeUpsert {
	u.Set(fee.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *FeeUpsert) UpdateGoodID() *FeeUpsert {
	u.SetExcluded(fee.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *FeeUpsert) ClearGoodID() *FeeUpsert {
	u.SetNull(fee.FieldGoodID)
	return u
}

// SetSettlementType sets the "settlement_type" field.
func (u *FeeUpsert) SetSettlementType(v string) *FeeUpsert {
	u.Set(fee.FieldSettlementType, v)
	return u
}

// UpdateSettlementType sets the "settlement_type" field to the value that was provided on create.
func (u *FeeUpsert) UpdateSettlementType() *FeeUpsert {
	u.SetExcluded(fee.FieldSettlementType)
	return u
}

// ClearSettlementType clears the value of the "settlement_type" field.
func (u *FeeUpsert) ClearSettlementType() *FeeUpsert {
	u.SetNull(fee.FieldSettlementType)
	return u
}

// SetUnitValue sets the "unit_value" field.
func (u *FeeUpsert) SetUnitValue(v decimal.Decimal) *FeeUpsert {
	u.Set(fee.FieldUnitValue, v)
	return u
}

// UpdateUnitValue sets the "unit_value" field to the value that was provided on create.
func (u *FeeUpsert) UpdateUnitValue() *FeeUpsert {
	u.SetExcluded(fee.FieldUnitValue)
	return u
}

// ClearUnitValue clears the value of the "unit_value" field.
func (u *FeeUpsert) ClearUnitValue() *FeeUpsert {
	u.SetNull(fee.FieldUnitValue)
	return u
}

// SetDurationDisplayType sets the "duration_display_type" field.
func (u *FeeUpsert) SetDurationDisplayType(v string) *FeeUpsert {
	u.Set(fee.FieldDurationDisplayType, v)
	return u
}

// UpdateDurationDisplayType sets the "duration_display_type" field to the value that was provided on create.
func (u *FeeUpsert) UpdateDurationDisplayType() *FeeUpsert {
	u.SetExcluded(fee.FieldDurationDisplayType)
	return u
}

// ClearDurationDisplayType clears the value of the "duration_display_type" field.
func (u *FeeUpsert) ClearDurationDisplayType() *FeeUpsert {
	u.SetNull(fee.FieldDurationDisplayType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Fee.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(fee.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FeeUpsertOne) UpdateNewValues() *FeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(fee.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Fee.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FeeUpsertOne) Ignore() *FeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FeeUpsertOne) DoNothing() *FeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FeeCreate.OnConflict
// documentation for more info.
func (u *FeeUpsertOne) Update(set func(*FeeUpsert)) *FeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FeeUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *FeeUpsertOne) SetEntID(v uuid.UUID) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *FeeUpsertOne) UpdateEntID() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateEntID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *FeeUpsertOne) SetGoodID(v uuid.UUID) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *FeeUpsertOne) UpdateGoodID() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *FeeUpsertOne) ClearGoodID() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.ClearGoodID()
	})
}

// SetSettlementType sets the "settlement_type" field.
func (u *FeeUpsertOne) SetSettlementType(v string) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.SetSettlementType(v)
	})
}

// UpdateSettlementType sets the "settlement_type" field to the value that was provided on create.
func (u *FeeUpsertOne) UpdateSettlementType() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateSettlementType()
	})
}

// ClearSettlementType clears the value of the "settlement_type" field.
func (u *FeeUpsertOne) ClearSettlementType() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.ClearSettlementType()
	})
}

// SetUnitValue sets the "unit_value" field.
func (u *FeeUpsertOne) SetUnitValue(v decimal.Decimal) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.SetUnitValue(v)
	})
}

// UpdateUnitValue sets the "unit_value" field to the value that was provided on create.
func (u *FeeUpsertOne) UpdateUnitValue() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateUnitValue()
	})
}

// ClearUnitValue clears the value of the "unit_value" field.
func (u *FeeUpsertOne) ClearUnitValue() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.ClearUnitValue()
	})
}

// SetDurationDisplayType sets the "duration_display_type" field.
func (u *FeeUpsertOne) SetDurationDisplayType(v string) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.SetDurationDisplayType(v)
	})
}

// UpdateDurationDisplayType sets the "duration_display_type" field to the value that was provided on create.
func (u *FeeUpsertOne) UpdateDurationDisplayType() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateDurationDisplayType()
	})
}

// ClearDurationDisplayType clears the value of the "duration_display_type" field.
func (u *FeeUpsertOne) ClearDurationDisplayType() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.ClearDurationDisplayType()
	})
}

// Exec executes the query.
func (u *FeeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for FeeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FeeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FeeUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FeeUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FeeCreateBulk is the builder for creating many Fee entities in bulk.
type FeeCreateBulk struct {
	config
	err      error
	builders []*FeeCreate
	conflict []sql.ConflictOption
}

// Save creates the Fee entities in the database.
func (fcb *FeeCreateBulk) Save(ctx context.Context) ([]*Fee, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Fee, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FeeCreateBulk) SaveX(ctx context.Context) []*Fee {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FeeCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FeeCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Fee.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FeeUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (fcb *FeeCreateBulk) OnConflict(opts ...sql.ConflictOption) *FeeUpsertBulk {
	fcb.conflict = opts
	return &FeeUpsertBulk{
		create: fcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Fee.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcb *FeeCreateBulk) OnConflictColumns(columns ...string) *FeeUpsertBulk {
	fcb.conflict = append(fcb.conflict, sql.ConflictColumns(columns...))
	return &FeeUpsertBulk{
		create: fcb,
	}
}

// FeeUpsertBulk is the builder for "upsert"-ing
// a bulk of Fee nodes.
type FeeUpsertBulk struct {
	create *FeeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Fee.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(fee.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FeeUpsertBulk) UpdateNewValues() *FeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(fee.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Fee.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FeeUpsertBulk) Ignore() *FeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FeeUpsertBulk) DoNothing() *FeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FeeCreateBulk.OnConflict
// documentation for more info.
func (u *FeeUpsertBulk) Update(set func(*FeeUpsert)) *FeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FeeUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *FeeUpsertBulk) SetEntID(v uuid.UUID) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *FeeUpsertBulk) UpdateEntID() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateEntID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *FeeUpsertBulk) SetGoodID(v uuid.UUID) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *FeeUpsertBulk) UpdateGoodID() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *FeeUpsertBulk) ClearGoodID() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.ClearGoodID()
	})
}

// SetSettlementType sets the "settlement_type" field.
func (u *FeeUpsertBulk) SetSettlementType(v string) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.SetSettlementType(v)
	})
}

// UpdateSettlementType sets the "settlement_type" field to the value that was provided on create.
func (u *FeeUpsertBulk) UpdateSettlementType() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateSettlementType()
	})
}

// ClearSettlementType clears the value of the "settlement_type" field.
func (u *FeeUpsertBulk) ClearSettlementType() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.ClearSettlementType()
	})
}

// SetUnitValue sets the "unit_value" field.
func (u *FeeUpsertBulk) SetUnitValue(v decimal.Decimal) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.SetUnitValue(v)
	})
}

// UpdateUnitValue sets the "unit_value" field to the value that was provided on create.
func (u *FeeUpsertBulk) UpdateUnitValue() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateUnitValue()
	})
}

// ClearUnitValue clears the value of the "unit_value" field.
func (u *FeeUpsertBulk) ClearUnitValue() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.ClearUnitValue()
	})
}

// SetDurationDisplayType sets the "duration_display_type" field.
func (u *FeeUpsertBulk) SetDurationDisplayType(v string) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.SetDurationDisplayType(v)
	})
}

// UpdateDurationDisplayType sets the "duration_display_type" field to the value that was provided on create.
func (u *FeeUpsertBulk) UpdateDurationDisplayType() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateDurationDisplayType()
	})
}

// ClearDurationDisplayType clears the value of the "duration_display_type" field.
func (u *FeeUpsertBulk) ClearDurationDisplayType() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.ClearDurationDisplayType()
	})
}

// Exec executes the query.
func (u *FeeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the FeeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for FeeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FeeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

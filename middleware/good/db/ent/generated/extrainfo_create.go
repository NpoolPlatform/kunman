// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/extrainfo"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ExtraInfoCreate is the builder for creating a ExtraInfo entity.
type ExtraInfoCreate struct {
	config
	mutation *ExtraInfoMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (eic *ExtraInfoCreate) SetEntID(u uuid.UUID) *ExtraInfoCreate {
	eic.mutation.SetEntID(u)
	return eic
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (eic *ExtraInfoCreate) SetNillableEntID(u *uuid.UUID) *ExtraInfoCreate {
	if u != nil {
		eic.SetEntID(*u)
	}
	return eic
}

// SetCreatedAt sets the "created_at" field.
func (eic *ExtraInfoCreate) SetCreatedAt(u uint32) *ExtraInfoCreate {
	eic.mutation.SetCreatedAt(u)
	return eic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eic *ExtraInfoCreate) SetNillableCreatedAt(u *uint32) *ExtraInfoCreate {
	if u != nil {
		eic.SetCreatedAt(*u)
	}
	return eic
}

// SetUpdatedAt sets the "updated_at" field.
func (eic *ExtraInfoCreate) SetUpdatedAt(u uint32) *ExtraInfoCreate {
	eic.mutation.SetUpdatedAt(u)
	return eic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (eic *ExtraInfoCreate) SetNillableUpdatedAt(u *uint32) *ExtraInfoCreate {
	if u != nil {
		eic.SetUpdatedAt(*u)
	}
	return eic
}

// SetDeletedAt sets the "deleted_at" field.
func (eic *ExtraInfoCreate) SetDeletedAt(u uint32) *ExtraInfoCreate {
	eic.mutation.SetDeletedAt(u)
	return eic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eic *ExtraInfoCreate) SetNillableDeletedAt(u *uint32) *ExtraInfoCreate {
	if u != nil {
		eic.SetDeletedAt(*u)
	}
	return eic
}

// SetAppGoodID sets the "app_good_id" field.
func (eic *ExtraInfoCreate) SetAppGoodID(u uuid.UUID) *ExtraInfoCreate {
	eic.mutation.SetAppGoodID(u)
	return eic
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (eic *ExtraInfoCreate) SetNillableAppGoodID(u *uuid.UUID) *ExtraInfoCreate {
	if u != nil {
		eic.SetAppGoodID(*u)
	}
	return eic
}

// SetLikes sets the "likes" field.
func (eic *ExtraInfoCreate) SetLikes(u uint32) *ExtraInfoCreate {
	eic.mutation.SetLikes(u)
	return eic
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (eic *ExtraInfoCreate) SetNillableLikes(u *uint32) *ExtraInfoCreate {
	if u != nil {
		eic.SetLikes(*u)
	}
	return eic
}

// SetDislikes sets the "dislikes" field.
func (eic *ExtraInfoCreate) SetDislikes(u uint32) *ExtraInfoCreate {
	eic.mutation.SetDislikes(u)
	return eic
}

// SetNillableDislikes sets the "dislikes" field if the given value is not nil.
func (eic *ExtraInfoCreate) SetNillableDislikes(u *uint32) *ExtraInfoCreate {
	if u != nil {
		eic.SetDislikes(*u)
	}
	return eic
}

// SetRecommendCount sets the "recommend_count" field.
func (eic *ExtraInfoCreate) SetRecommendCount(u uint32) *ExtraInfoCreate {
	eic.mutation.SetRecommendCount(u)
	return eic
}

// SetNillableRecommendCount sets the "recommend_count" field if the given value is not nil.
func (eic *ExtraInfoCreate) SetNillableRecommendCount(u *uint32) *ExtraInfoCreate {
	if u != nil {
		eic.SetRecommendCount(*u)
	}
	return eic
}

// SetCommentCount sets the "comment_count" field.
func (eic *ExtraInfoCreate) SetCommentCount(u uint32) *ExtraInfoCreate {
	eic.mutation.SetCommentCount(u)
	return eic
}

// SetNillableCommentCount sets the "comment_count" field if the given value is not nil.
func (eic *ExtraInfoCreate) SetNillableCommentCount(u *uint32) *ExtraInfoCreate {
	if u != nil {
		eic.SetCommentCount(*u)
	}
	return eic
}

// SetScoreCount sets the "score_count" field.
func (eic *ExtraInfoCreate) SetScoreCount(u uint32) *ExtraInfoCreate {
	eic.mutation.SetScoreCount(u)
	return eic
}

// SetNillableScoreCount sets the "score_count" field if the given value is not nil.
func (eic *ExtraInfoCreate) SetNillableScoreCount(u *uint32) *ExtraInfoCreate {
	if u != nil {
		eic.SetScoreCount(*u)
	}
	return eic
}

// SetScore sets the "score" field.
func (eic *ExtraInfoCreate) SetScore(d decimal.Decimal) *ExtraInfoCreate {
	eic.mutation.SetScore(d)
	return eic
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (eic *ExtraInfoCreate) SetNillableScore(d *decimal.Decimal) *ExtraInfoCreate {
	if d != nil {
		eic.SetScore(*d)
	}
	return eic
}

// SetID sets the "id" field.
func (eic *ExtraInfoCreate) SetID(u uint32) *ExtraInfoCreate {
	eic.mutation.SetID(u)
	return eic
}

// Mutation returns the ExtraInfoMutation object of the builder.
func (eic *ExtraInfoCreate) Mutation() *ExtraInfoMutation {
	return eic.mutation
}

// Save creates the ExtraInfo in the database.
func (eic *ExtraInfoCreate) Save(ctx context.Context) (*ExtraInfo, error) {
	eic.defaults()
	return withHooks(ctx, eic.sqlSave, eic.mutation, eic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (eic *ExtraInfoCreate) SaveX(ctx context.Context) *ExtraInfo {
	v, err := eic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eic *ExtraInfoCreate) Exec(ctx context.Context) error {
	_, err := eic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eic *ExtraInfoCreate) ExecX(ctx context.Context) {
	if err := eic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eic *ExtraInfoCreate) defaults() {
	if _, ok := eic.mutation.EntID(); !ok {
		v := extrainfo.DefaultEntID()
		eic.mutation.SetEntID(v)
	}
	if _, ok := eic.mutation.CreatedAt(); !ok {
		v := extrainfo.DefaultCreatedAt()
		eic.mutation.SetCreatedAt(v)
	}
	if _, ok := eic.mutation.UpdatedAt(); !ok {
		v := extrainfo.DefaultUpdatedAt()
		eic.mutation.SetUpdatedAt(v)
	}
	if _, ok := eic.mutation.DeletedAt(); !ok {
		v := extrainfo.DefaultDeletedAt()
		eic.mutation.SetDeletedAt(v)
	}
	if _, ok := eic.mutation.AppGoodID(); !ok {
		v := extrainfo.DefaultAppGoodID()
		eic.mutation.SetAppGoodID(v)
	}
	if _, ok := eic.mutation.Likes(); !ok {
		v := extrainfo.DefaultLikes
		eic.mutation.SetLikes(v)
	}
	if _, ok := eic.mutation.Dislikes(); !ok {
		v := extrainfo.DefaultDislikes
		eic.mutation.SetDislikes(v)
	}
	if _, ok := eic.mutation.RecommendCount(); !ok {
		v := extrainfo.DefaultRecommendCount
		eic.mutation.SetRecommendCount(v)
	}
	if _, ok := eic.mutation.CommentCount(); !ok {
		v := extrainfo.DefaultCommentCount
		eic.mutation.SetCommentCount(v)
	}
	if _, ok := eic.mutation.ScoreCount(); !ok {
		v := extrainfo.DefaultScoreCount
		eic.mutation.SetScoreCount(v)
	}
	if _, ok := eic.mutation.Score(); !ok {
		v := extrainfo.DefaultScore
		eic.mutation.SetScore(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eic *ExtraInfoCreate) check() error {
	if _, ok := eic.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "ExtraInfo.ent_id"`)}
	}
	if _, ok := eic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "ExtraInfo.created_at"`)}
	}
	if _, ok := eic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "ExtraInfo.updated_at"`)}
	}
	if _, ok := eic.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "ExtraInfo.deleted_at"`)}
	}
	return nil
}

func (eic *ExtraInfoCreate) sqlSave(ctx context.Context) (*ExtraInfo, error) {
	if err := eic.check(); err != nil {
		return nil, err
	}
	_node, _spec := eic.createSpec()
	if err := sqlgraph.CreateNode(ctx, eic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	eic.mutation.id = &_node.ID
	eic.mutation.done = true
	return _node, nil
}

func (eic *ExtraInfoCreate) createSpec() (*ExtraInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &ExtraInfo{config: eic.config}
		_spec = sqlgraph.NewCreateSpec(extrainfo.Table, sqlgraph.NewFieldSpec(extrainfo.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = eic.conflict
	if id, ok := eic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := eic.mutation.EntID(); ok {
		_spec.SetField(extrainfo.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := eic.mutation.CreatedAt(); ok {
		_spec.SetField(extrainfo.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := eic.mutation.UpdatedAt(); ok {
		_spec.SetField(extrainfo.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := eic.mutation.DeletedAt(); ok {
		_spec.SetField(extrainfo.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := eic.mutation.AppGoodID(); ok {
		_spec.SetField(extrainfo.FieldAppGoodID, field.TypeUUID, value)
		_node.AppGoodID = value
	}
	if value, ok := eic.mutation.Likes(); ok {
		_spec.SetField(extrainfo.FieldLikes, field.TypeUint32, value)
		_node.Likes = value
	}
	if value, ok := eic.mutation.Dislikes(); ok {
		_spec.SetField(extrainfo.FieldDislikes, field.TypeUint32, value)
		_node.Dislikes = value
	}
	if value, ok := eic.mutation.RecommendCount(); ok {
		_spec.SetField(extrainfo.FieldRecommendCount, field.TypeUint32, value)
		_node.RecommendCount = value
	}
	if value, ok := eic.mutation.CommentCount(); ok {
		_spec.SetField(extrainfo.FieldCommentCount, field.TypeUint32, value)
		_node.CommentCount = value
	}
	if value, ok := eic.mutation.ScoreCount(); ok {
		_spec.SetField(extrainfo.FieldScoreCount, field.TypeUint32, value)
		_node.ScoreCount = value
	}
	if value, ok := eic.mutation.Score(); ok {
		_spec.SetField(extrainfo.FieldScore, field.TypeOther, value)
		_node.Score = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ExtraInfo.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExtraInfoUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (eic *ExtraInfoCreate) OnConflict(opts ...sql.ConflictOption) *ExtraInfoUpsertOne {
	eic.conflict = opts
	return &ExtraInfoUpsertOne{
		create: eic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ExtraInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (eic *ExtraInfoCreate) OnConflictColumns(columns ...string) *ExtraInfoUpsertOne {
	eic.conflict = append(eic.conflict, sql.ConflictColumns(columns...))
	return &ExtraInfoUpsertOne{
		create: eic,
	}
}

type (
	// ExtraInfoUpsertOne is the builder for "upsert"-ing
	//  one ExtraInfo node.
	ExtraInfoUpsertOne struct {
		create *ExtraInfoCreate
	}

	// ExtraInfoUpsert is the "OnConflict" setter.
	ExtraInfoUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *ExtraInfoUpsert) SetEntID(v uuid.UUID) *ExtraInfoUpsert {
	u.Set(extrainfo.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *ExtraInfoUpsert) UpdateEntID() *ExtraInfoUpsert {
	u.SetExcluded(extrainfo.FieldEntID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ExtraInfoUpsert) SetCreatedAt(v uint32) *ExtraInfoUpsert {
	u.Set(extrainfo.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ExtraInfoUpsert) UpdateCreatedAt() *ExtraInfoUpsert {
	u.SetExcluded(extrainfo.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ExtraInfoUpsert) AddCreatedAt(v uint32) *ExtraInfoUpsert {
	u.Add(extrainfo.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ExtraInfoUpsert) SetUpdatedAt(v uint32) *ExtraInfoUpsert {
	u.Set(extrainfo.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ExtraInfoUpsert) UpdateUpdatedAt() *ExtraInfoUpsert {
	u.SetExcluded(extrainfo.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ExtraInfoUpsert) AddUpdatedAt(v uint32) *ExtraInfoUpsert {
	u.Add(extrainfo.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ExtraInfoUpsert) SetDeletedAt(v uint32) *ExtraInfoUpsert {
	u.Set(extrainfo.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ExtraInfoUpsert) UpdateDeletedAt() *ExtraInfoUpsert {
	u.SetExcluded(extrainfo.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ExtraInfoUpsert) AddDeletedAt(v uint32) *ExtraInfoUpsert {
	u.Add(extrainfo.FieldDeletedAt, v)
	return u
}

// SetAppGoodID sets the "app_good_id" field.
func (u *ExtraInfoUpsert) SetAppGoodID(v uuid.UUID) *ExtraInfoUpsert {
	u.Set(extrainfo.FieldAppGoodID, v)
	return u
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *ExtraInfoUpsert) UpdateAppGoodID() *ExtraInfoUpsert {
	u.SetExcluded(extrainfo.FieldAppGoodID)
	return u
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *ExtraInfoUpsert) ClearAppGoodID() *ExtraInfoUpsert {
	u.SetNull(extrainfo.FieldAppGoodID)
	return u
}

// SetLikes sets the "likes" field.
func (u *ExtraInfoUpsert) SetLikes(v uint32) *ExtraInfoUpsert {
	u.Set(extrainfo.FieldLikes, v)
	return u
}

// UpdateLikes sets the "likes" field to the value that was provided on create.
func (u *ExtraInfoUpsert) UpdateLikes() *ExtraInfoUpsert {
	u.SetExcluded(extrainfo.FieldLikes)
	return u
}

// AddLikes adds v to the "likes" field.
func (u *ExtraInfoUpsert) AddLikes(v uint32) *ExtraInfoUpsert {
	u.Add(extrainfo.FieldLikes, v)
	return u
}

// ClearLikes clears the value of the "likes" field.
func (u *ExtraInfoUpsert) ClearLikes() *ExtraInfoUpsert {
	u.SetNull(extrainfo.FieldLikes)
	return u
}

// SetDislikes sets the "dislikes" field.
func (u *ExtraInfoUpsert) SetDislikes(v uint32) *ExtraInfoUpsert {
	u.Set(extrainfo.FieldDislikes, v)
	return u
}

// UpdateDislikes sets the "dislikes" field to the value that was provided on create.
func (u *ExtraInfoUpsert) UpdateDislikes() *ExtraInfoUpsert {
	u.SetExcluded(extrainfo.FieldDislikes)
	return u
}

// AddDislikes adds v to the "dislikes" field.
func (u *ExtraInfoUpsert) AddDislikes(v uint32) *ExtraInfoUpsert {
	u.Add(extrainfo.FieldDislikes, v)
	return u
}

// ClearDislikes clears the value of the "dislikes" field.
func (u *ExtraInfoUpsert) ClearDislikes() *ExtraInfoUpsert {
	u.SetNull(extrainfo.FieldDislikes)
	return u
}

// SetRecommendCount sets the "recommend_count" field.
func (u *ExtraInfoUpsert) SetRecommendCount(v uint32) *ExtraInfoUpsert {
	u.Set(extrainfo.FieldRecommendCount, v)
	return u
}

// UpdateRecommendCount sets the "recommend_count" field to the value that was provided on create.
func (u *ExtraInfoUpsert) UpdateRecommendCount() *ExtraInfoUpsert {
	u.SetExcluded(extrainfo.FieldRecommendCount)
	return u
}

// AddRecommendCount adds v to the "recommend_count" field.
func (u *ExtraInfoUpsert) AddRecommendCount(v uint32) *ExtraInfoUpsert {
	u.Add(extrainfo.FieldRecommendCount, v)
	return u
}

// ClearRecommendCount clears the value of the "recommend_count" field.
func (u *ExtraInfoUpsert) ClearRecommendCount() *ExtraInfoUpsert {
	u.SetNull(extrainfo.FieldRecommendCount)
	return u
}

// SetCommentCount sets the "comment_count" field.
func (u *ExtraInfoUpsert) SetCommentCount(v uint32) *ExtraInfoUpsert {
	u.Set(extrainfo.FieldCommentCount, v)
	return u
}

// UpdateCommentCount sets the "comment_count" field to the value that was provided on create.
func (u *ExtraInfoUpsert) UpdateCommentCount() *ExtraInfoUpsert {
	u.SetExcluded(extrainfo.FieldCommentCount)
	return u
}

// AddCommentCount adds v to the "comment_count" field.
func (u *ExtraInfoUpsert) AddCommentCount(v uint32) *ExtraInfoUpsert {
	u.Add(extrainfo.FieldCommentCount, v)
	return u
}

// ClearCommentCount clears the value of the "comment_count" field.
func (u *ExtraInfoUpsert) ClearCommentCount() *ExtraInfoUpsert {
	u.SetNull(extrainfo.FieldCommentCount)
	return u
}

// SetScoreCount sets the "score_count" field.
func (u *ExtraInfoUpsert) SetScoreCount(v uint32) *ExtraInfoUpsert {
	u.Set(extrainfo.FieldScoreCount, v)
	return u
}

// UpdateScoreCount sets the "score_count" field to the value that was provided on create.
func (u *ExtraInfoUpsert) UpdateScoreCount() *ExtraInfoUpsert {
	u.SetExcluded(extrainfo.FieldScoreCount)
	return u
}

// AddScoreCount adds v to the "score_count" field.
func (u *ExtraInfoUpsert) AddScoreCount(v uint32) *ExtraInfoUpsert {
	u.Add(extrainfo.FieldScoreCount, v)
	return u
}

// ClearScoreCount clears the value of the "score_count" field.
func (u *ExtraInfoUpsert) ClearScoreCount() *ExtraInfoUpsert {
	u.SetNull(extrainfo.FieldScoreCount)
	return u
}

// SetScore sets the "score" field.
func (u *ExtraInfoUpsert) SetScore(v decimal.Decimal) *ExtraInfoUpsert {
	u.Set(extrainfo.FieldScore, v)
	return u
}

// UpdateScore sets the "score" field to the value that was provided on create.
func (u *ExtraInfoUpsert) UpdateScore() *ExtraInfoUpsert {
	u.SetExcluded(extrainfo.FieldScore)
	return u
}

// ClearScore clears the value of the "score" field.
func (u *ExtraInfoUpsert) ClearScore() *ExtraInfoUpsert {
	u.SetNull(extrainfo.FieldScore)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ExtraInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(extrainfo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ExtraInfoUpsertOne) UpdateNewValues() *ExtraInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(extrainfo.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ExtraInfo.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ExtraInfoUpsertOne) Ignore() *ExtraInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExtraInfoUpsertOne) DoNothing() *ExtraInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExtraInfoCreate.OnConflict
// documentation for more info.
func (u *ExtraInfoUpsertOne) Update(set func(*ExtraInfoUpsert)) *ExtraInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExtraInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *ExtraInfoUpsertOne) SetEntID(v uuid.UUID) *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *ExtraInfoUpsertOne) UpdateEntID() *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ExtraInfoUpsertOne) SetCreatedAt(v uint32) *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ExtraInfoUpsertOne) AddCreatedAt(v uint32) *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ExtraInfoUpsertOne) UpdateCreatedAt() *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ExtraInfoUpsertOne) SetUpdatedAt(v uint32) *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ExtraInfoUpsertOne) AddUpdatedAt(v uint32) *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ExtraInfoUpsertOne) UpdateUpdatedAt() *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ExtraInfoUpsertOne) SetDeletedAt(v uint32) *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ExtraInfoUpsertOne) AddDeletedAt(v uint32) *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ExtraInfoUpsertOne) UpdateDeletedAt() *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *ExtraInfoUpsertOne) SetAppGoodID(v uuid.UUID) *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *ExtraInfoUpsertOne) UpdateAppGoodID() *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *ExtraInfoUpsertOne) ClearAppGoodID() *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.ClearAppGoodID()
	})
}

// SetLikes sets the "likes" field.
func (u *ExtraInfoUpsertOne) SetLikes(v uint32) *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.SetLikes(v)
	})
}

// AddLikes adds v to the "likes" field.
func (u *ExtraInfoUpsertOne) AddLikes(v uint32) *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.AddLikes(v)
	})
}

// UpdateLikes sets the "likes" field to the value that was provided on create.
func (u *ExtraInfoUpsertOne) UpdateLikes() *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.UpdateLikes()
	})
}

// ClearLikes clears the value of the "likes" field.
func (u *ExtraInfoUpsertOne) ClearLikes() *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.ClearLikes()
	})
}

// SetDislikes sets the "dislikes" field.
func (u *ExtraInfoUpsertOne) SetDislikes(v uint32) *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.SetDislikes(v)
	})
}

// AddDislikes adds v to the "dislikes" field.
func (u *ExtraInfoUpsertOne) AddDislikes(v uint32) *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.AddDislikes(v)
	})
}

// UpdateDislikes sets the "dislikes" field to the value that was provided on create.
func (u *ExtraInfoUpsertOne) UpdateDislikes() *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.UpdateDislikes()
	})
}

// ClearDislikes clears the value of the "dislikes" field.
func (u *ExtraInfoUpsertOne) ClearDislikes() *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.ClearDislikes()
	})
}

// SetRecommendCount sets the "recommend_count" field.
func (u *ExtraInfoUpsertOne) SetRecommendCount(v uint32) *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.SetRecommendCount(v)
	})
}

// AddRecommendCount adds v to the "recommend_count" field.
func (u *ExtraInfoUpsertOne) AddRecommendCount(v uint32) *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.AddRecommendCount(v)
	})
}

// UpdateRecommendCount sets the "recommend_count" field to the value that was provided on create.
func (u *ExtraInfoUpsertOne) UpdateRecommendCount() *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.UpdateRecommendCount()
	})
}

// ClearRecommendCount clears the value of the "recommend_count" field.
func (u *ExtraInfoUpsertOne) ClearRecommendCount() *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.ClearRecommendCount()
	})
}

// SetCommentCount sets the "comment_count" field.
func (u *ExtraInfoUpsertOne) SetCommentCount(v uint32) *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.SetCommentCount(v)
	})
}

// AddCommentCount adds v to the "comment_count" field.
func (u *ExtraInfoUpsertOne) AddCommentCount(v uint32) *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.AddCommentCount(v)
	})
}

// UpdateCommentCount sets the "comment_count" field to the value that was provided on create.
func (u *ExtraInfoUpsertOne) UpdateCommentCount() *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.UpdateCommentCount()
	})
}

// ClearCommentCount clears the value of the "comment_count" field.
func (u *ExtraInfoUpsertOne) ClearCommentCount() *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.ClearCommentCount()
	})
}

// SetScoreCount sets the "score_count" field.
func (u *ExtraInfoUpsertOne) SetScoreCount(v uint32) *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.SetScoreCount(v)
	})
}

// AddScoreCount adds v to the "score_count" field.
func (u *ExtraInfoUpsertOne) AddScoreCount(v uint32) *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.AddScoreCount(v)
	})
}

// UpdateScoreCount sets the "score_count" field to the value that was provided on create.
func (u *ExtraInfoUpsertOne) UpdateScoreCount() *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.UpdateScoreCount()
	})
}

// ClearScoreCount clears the value of the "score_count" field.
func (u *ExtraInfoUpsertOne) ClearScoreCount() *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.ClearScoreCount()
	})
}

// SetScore sets the "score" field.
func (u *ExtraInfoUpsertOne) SetScore(v decimal.Decimal) *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.SetScore(v)
	})
}

// UpdateScore sets the "score" field to the value that was provided on create.
func (u *ExtraInfoUpsertOne) UpdateScore() *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.UpdateScore()
	})
}

// ClearScore clears the value of the "score" field.
func (u *ExtraInfoUpsertOne) ClearScore() *ExtraInfoUpsertOne {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.ClearScore()
	})
}

// Exec executes the query.
func (u *ExtraInfoUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for ExtraInfoCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExtraInfoUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ExtraInfoUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ExtraInfoUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ExtraInfoCreateBulk is the builder for creating many ExtraInfo entities in bulk.
type ExtraInfoCreateBulk struct {
	config
	err      error
	builders []*ExtraInfoCreate
	conflict []sql.ConflictOption
}

// Save creates the ExtraInfo entities in the database.
func (eicb *ExtraInfoCreateBulk) Save(ctx context.Context) ([]*ExtraInfo, error) {
	if eicb.err != nil {
		return nil, eicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(eicb.builders))
	nodes := make([]*ExtraInfo, len(eicb.builders))
	mutators := make([]Mutator, len(eicb.builders))
	for i := range eicb.builders {
		func(i int, root context.Context) {
			builder := eicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExtraInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = eicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eicb *ExtraInfoCreateBulk) SaveX(ctx context.Context) []*ExtraInfo {
	v, err := eicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eicb *ExtraInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := eicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eicb *ExtraInfoCreateBulk) ExecX(ctx context.Context) {
	if err := eicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ExtraInfo.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExtraInfoUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (eicb *ExtraInfoCreateBulk) OnConflict(opts ...sql.ConflictOption) *ExtraInfoUpsertBulk {
	eicb.conflict = opts
	return &ExtraInfoUpsertBulk{
		create: eicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ExtraInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (eicb *ExtraInfoCreateBulk) OnConflictColumns(columns ...string) *ExtraInfoUpsertBulk {
	eicb.conflict = append(eicb.conflict, sql.ConflictColumns(columns...))
	return &ExtraInfoUpsertBulk{
		create: eicb,
	}
}

// ExtraInfoUpsertBulk is the builder for "upsert"-ing
// a bulk of ExtraInfo nodes.
type ExtraInfoUpsertBulk struct {
	create *ExtraInfoCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ExtraInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(extrainfo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ExtraInfoUpsertBulk) UpdateNewValues() *ExtraInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(extrainfo.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ExtraInfo.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ExtraInfoUpsertBulk) Ignore() *ExtraInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExtraInfoUpsertBulk) DoNothing() *ExtraInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExtraInfoCreateBulk.OnConflict
// documentation for more info.
func (u *ExtraInfoUpsertBulk) Update(set func(*ExtraInfoUpsert)) *ExtraInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExtraInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *ExtraInfoUpsertBulk) SetEntID(v uuid.UUID) *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *ExtraInfoUpsertBulk) UpdateEntID() *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ExtraInfoUpsertBulk) SetCreatedAt(v uint32) *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ExtraInfoUpsertBulk) AddCreatedAt(v uint32) *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ExtraInfoUpsertBulk) UpdateCreatedAt() *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ExtraInfoUpsertBulk) SetUpdatedAt(v uint32) *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ExtraInfoUpsertBulk) AddUpdatedAt(v uint32) *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ExtraInfoUpsertBulk) UpdateUpdatedAt() *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ExtraInfoUpsertBulk) SetDeletedAt(v uint32) *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ExtraInfoUpsertBulk) AddDeletedAt(v uint32) *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ExtraInfoUpsertBulk) UpdateDeletedAt() *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *ExtraInfoUpsertBulk) SetAppGoodID(v uuid.UUID) *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *ExtraInfoUpsertBulk) UpdateAppGoodID() *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *ExtraInfoUpsertBulk) ClearAppGoodID() *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.ClearAppGoodID()
	})
}

// SetLikes sets the "likes" field.
func (u *ExtraInfoUpsertBulk) SetLikes(v uint32) *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.SetLikes(v)
	})
}

// AddLikes adds v to the "likes" field.
func (u *ExtraInfoUpsertBulk) AddLikes(v uint32) *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.AddLikes(v)
	})
}

// UpdateLikes sets the "likes" field to the value that was provided on create.
func (u *ExtraInfoUpsertBulk) UpdateLikes() *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.UpdateLikes()
	})
}

// ClearLikes clears the value of the "likes" field.
func (u *ExtraInfoUpsertBulk) ClearLikes() *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.ClearLikes()
	})
}

// SetDislikes sets the "dislikes" field.
func (u *ExtraInfoUpsertBulk) SetDislikes(v uint32) *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.SetDislikes(v)
	})
}

// AddDislikes adds v to the "dislikes" field.
func (u *ExtraInfoUpsertBulk) AddDislikes(v uint32) *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.AddDislikes(v)
	})
}

// UpdateDislikes sets the "dislikes" field to the value that was provided on create.
func (u *ExtraInfoUpsertBulk) UpdateDislikes() *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.UpdateDislikes()
	})
}

// ClearDislikes clears the value of the "dislikes" field.
func (u *ExtraInfoUpsertBulk) ClearDislikes() *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.ClearDislikes()
	})
}

// SetRecommendCount sets the "recommend_count" field.
func (u *ExtraInfoUpsertBulk) SetRecommendCount(v uint32) *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.SetRecommendCount(v)
	})
}

// AddRecommendCount adds v to the "recommend_count" field.
func (u *ExtraInfoUpsertBulk) AddRecommendCount(v uint32) *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.AddRecommendCount(v)
	})
}

// UpdateRecommendCount sets the "recommend_count" field to the value that was provided on create.
func (u *ExtraInfoUpsertBulk) UpdateRecommendCount() *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.UpdateRecommendCount()
	})
}

// ClearRecommendCount clears the value of the "recommend_count" field.
func (u *ExtraInfoUpsertBulk) ClearRecommendCount() *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.ClearRecommendCount()
	})
}

// SetCommentCount sets the "comment_count" field.
func (u *ExtraInfoUpsertBulk) SetCommentCount(v uint32) *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.SetCommentCount(v)
	})
}

// AddCommentCount adds v to the "comment_count" field.
func (u *ExtraInfoUpsertBulk) AddCommentCount(v uint32) *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.AddCommentCount(v)
	})
}

// UpdateCommentCount sets the "comment_count" field to the value that was provided on create.
func (u *ExtraInfoUpsertBulk) UpdateCommentCount() *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.UpdateCommentCount()
	})
}

// ClearCommentCount clears the value of the "comment_count" field.
func (u *ExtraInfoUpsertBulk) ClearCommentCount() *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.ClearCommentCount()
	})
}

// SetScoreCount sets the "score_count" field.
func (u *ExtraInfoUpsertBulk) SetScoreCount(v uint32) *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.SetScoreCount(v)
	})
}

// AddScoreCount adds v to the "score_count" field.
func (u *ExtraInfoUpsertBulk) AddScoreCount(v uint32) *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.AddScoreCount(v)
	})
}

// UpdateScoreCount sets the "score_count" field to the value that was provided on create.
func (u *ExtraInfoUpsertBulk) UpdateScoreCount() *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.UpdateScoreCount()
	})
}

// ClearScoreCount clears the value of the "score_count" field.
func (u *ExtraInfoUpsertBulk) ClearScoreCount() *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.ClearScoreCount()
	})
}

// SetScore sets the "score" field.
func (u *ExtraInfoUpsertBulk) SetScore(v decimal.Decimal) *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.SetScore(v)
	})
}

// UpdateScore sets the "score" field to the value that was provided on create.
func (u *ExtraInfoUpsertBulk) UpdateScore() *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.UpdateScore()
	})
}

// ClearScore clears the value of the "score" field.
func (u *ExtraInfoUpsertBulk) ClearScore() *ExtraInfoUpsertBulk {
	return u.Update(func(s *ExtraInfoUpsert) {
		s.ClearScore()
	})
}

// Exec executes the query.
func (u *ExtraInfoUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the ExtraInfoCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for ExtraInfoCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExtraInfoUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

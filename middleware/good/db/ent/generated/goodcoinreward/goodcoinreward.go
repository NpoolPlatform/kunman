// Code generated by ent, DO NOT EDIT.

package goodcoinreward

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the goodcoinreward type in the database.
	Label = "good_coin_reward"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldGoodID holds the string denoting the good_id field in the database.
	FieldGoodID = "good_id"
	// FieldCoinTypeID holds the string denoting the coin_type_id field in the database.
	FieldCoinTypeID = "coin_type_id"
	// FieldRewardTid holds the string denoting the reward_tid field in the database.
	FieldRewardTid = "reward_tid"
	// FieldNextRewardStartAmount holds the string denoting the next_reward_start_amount field in the database.
	FieldNextRewardStartAmount = "next_reward_start_amount"
	// FieldLastRewardAmount holds the string denoting the last_reward_amount field in the database.
	FieldLastRewardAmount = "last_reward_amount"
	// FieldLastUnitRewardAmount holds the string denoting the last_unit_reward_amount field in the database.
	FieldLastUnitRewardAmount = "last_unit_reward_amount"
	// FieldTotalRewardAmount holds the string denoting the total_reward_amount field in the database.
	FieldTotalRewardAmount = "total_reward_amount"
	// Table holds the table name of the goodcoinreward in the database.
	Table = "good_coin_rewards"
)

// Columns holds all SQL columns for goodcoinreward fields.
var Columns = []string{
	FieldID,
	FieldEntID,
	FieldGoodID,
	FieldCoinTypeID,
	FieldRewardTid,
	FieldNextRewardStartAmount,
	FieldLastRewardAmount,
	FieldLastUnitRewardAmount,
	FieldTotalRewardAmount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultGoodID holds the default value on creation for the "good_id" field.
	DefaultGoodID func() uuid.UUID
	// DefaultCoinTypeID holds the default value on creation for the "coin_type_id" field.
	DefaultCoinTypeID func() uuid.UUID
	// DefaultRewardTid holds the default value on creation for the "reward_tid" field.
	DefaultRewardTid func() uuid.UUID
	// DefaultNextRewardStartAmount holds the default value on creation for the "next_reward_start_amount" field.
	DefaultNextRewardStartAmount decimal.Decimal
	// DefaultLastRewardAmount holds the default value on creation for the "last_reward_amount" field.
	DefaultLastRewardAmount decimal.Decimal
	// DefaultLastUnitRewardAmount holds the default value on creation for the "last_unit_reward_amount" field.
	DefaultLastUnitRewardAmount decimal.Decimal
	// DefaultTotalRewardAmount holds the default value on creation for the "total_reward_amount" field.
	DefaultTotalRewardAmount decimal.Decimal
)

// OrderOption defines the ordering options for the GoodCoinReward queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByGoodID orders the results by the good_id field.
func ByGoodID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodID, opts...).ToFunc()
}

// ByCoinTypeID orders the results by the coin_type_id field.
func ByCoinTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoinTypeID, opts...).ToFunc()
}

// ByRewardTid orders the results by the reward_tid field.
func ByRewardTid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRewardTid, opts...).ToFunc()
}

// ByNextRewardStartAmount orders the results by the next_reward_start_amount field.
func ByNextRewardStartAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextRewardStartAmount, opts...).ToFunc()
}

// ByLastRewardAmount orders the results by the last_reward_amount field.
func ByLastRewardAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastRewardAmount, opts...).ToFunc()
}

// ByLastUnitRewardAmount orders the results by the last_unit_reward_amount field.
func ByLastUnitRewardAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUnitRewardAmount, opts...).ToFunc()
}

// ByTotalRewardAmount orders the results by the total_reward_amount field.
func ByTotalRewardAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalRewardAmount, opts...).ToFunc()
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appdefaultgood"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// AppDefaultGoodUpdate is the builder for updating AppDefaultGood entities.
type AppDefaultGoodUpdate struct {
	config
	hooks     []Hook
	mutation  *AppDefaultGoodMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppDefaultGoodUpdate builder.
func (adgu *AppDefaultGoodUpdate) Where(ps ...predicate.AppDefaultGood) *AppDefaultGoodUpdate {
	adgu.mutation.Where(ps...)
	return adgu
}

// SetEntID sets the "ent_id" field.
func (adgu *AppDefaultGoodUpdate) SetEntID(u uuid.UUID) *AppDefaultGoodUpdate {
	adgu.mutation.SetEntID(u)
	return adgu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (adgu *AppDefaultGoodUpdate) SetNillableEntID(u *uuid.UUID) *AppDefaultGoodUpdate {
	if u != nil {
		adgu.SetEntID(*u)
	}
	return adgu
}

// SetAppGoodID sets the "app_good_id" field.
func (adgu *AppDefaultGoodUpdate) SetAppGoodID(u uuid.UUID) *AppDefaultGoodUpdate {
	adgu.mutation.SetAppGoodID(u)
	return adgu
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (adgu *AppDefaultGoodUpdate) SetNillableAppGoodID(u *uuid.UUID) *AppDefaultGoodUpdate {
	if u != nil {
		adgu.SetAppGoodID(*u)
	}
	return adgu
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (adgu *AppDefaultGoodUpdate) ClearAppGoodID() *AppDefaultGoodUpdate {
	adgu.mutation.ClearAppGoodID()
	return adgu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (adgu *AppDefaultGoodUpdate) SetCoinTypeID(u uuid.UUID) *AppDefaultGoodUpdate {
	adgu.mutation.SetCoinTypeID(u)
	return adgu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (adgu *AppDefaultGoodUpdate) SetNillableCoinTypeID(u *uuid.UUID) *AppDefaultGoodUpdate {
	if u != nil {
		adgu.SetCoinTypeID(*u)
	}
	return adgu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (adgu *AppDefaultGoodUpdate) ClearCoinTypeID() *AppDefaultGoodUpdate {
	adgu.mutation.ClearCoinTypeID()
	return adgu
}

// Mutation returns the AppDefaultGoodMutation object of the builder.
func (adgu *AppDefaultGoodUpdate) Mutation() *AppDefaultGoodMutation {
	return adgu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (adgu *AppDefaultGoodUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, adgu.sqlSave, adgu.mutation, adgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (adgu *AppDefaultGoodUpdate) SaveX(ctx context.Context) int {
	affected, err := adgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (adgu *AppDefaultGoodUpdate) Exec(ctx context.Context) error {
	_, err := adgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adgu *AppDefaultGoodUpdate) ExecX(ctx context.Context) {
	if err := adgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (adgu *AppDefaultGoodUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppDefaultGoodUpdate {
	adgu.modifiers = append(adgu.modifiers, modifiers...)
	return adgu
}

func (adgu *AppDefaultGoodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appdefaultgood.Table, appdefaultgood.Columns, sqlgraph.NewFieldSpec(appdefaultgood.FieldID, field.TypeUint32))
	if ps := adgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := adgu.mutation.EntID(); ok {
		_spec.SetField(appdefaultgood.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := adgu.mutation.AppGoodID(); ok {
		_spec.SetField(appdefaultgood.FieldAppGoodID, field.TypeUUID, value)
	}
	if adgu.mutation.AppGoodIDCleared() {
		_spec.ClearField(appdefaultgood.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := adgu.mutation.CoinTypeID(); ok {
		_spec.SetField(appdefaultgood.FieldCoinTypeID, field.TypeUUID, value)
	}
	if adgu.mutation.CoinTypeIDCleared() {
		_spec.ClearField(appdefaultgood.FieldCoinTypeID, field.TypeUUID)
	}
	_spec.AddModifiers(adgu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, adgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appdefaultgood.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	adgu.mutation.done = true
	return n, nil
}

// AppDefaultGoodUpdateOne is the builder for updating a single AppDefaultGood entity.
type AppDefaultGoodUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppDefaultGoodMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (adguo *AppDefaultGoodUpdateOne) SetEntID(u uuid.UUID) *AppDefaultGoodUpdateOne {
	adguo.mutation.SetEntID(u)
	return adguo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (adguo *AppDefaultGoodUpdateOne) SetNillableEntID(u *uuid.UUID) *AppDefaultGoodUpdateOne {
	if u != nil {
		adguo.SetEntID(*u)
	}
	return adguo
}

// SetAppGoodID sets the "app_good_id" field.
func (adguo *AppDefaultGoodUpdateOne) SetAppGoodID(u uuid.UUID) *AppDefaultGoodUpdateOne {
	adguo.mutation.SetAppGoodID(u)
	return adguo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (adguo *AppDefaultGoodUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *AppDefaultGoodUpdateOne {
	if u != nil {
		adguo.SetAppGoodID(*u)
	}
	return adguo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (adguo *AppDefaultGoodUpdateOne) ClearAppGoodID() *AppDefaultGoodUpdateOne {
	adguo.mutation.ClearAppGoodID()
	return adguo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (adguo *AppDefaultGoodUpdateOne) SetCoinTypeID(u uuid.UUID) *AppDefaultGoodUpdateOne {
	adguo.mutation.SetCoinTypeID(u)
	return adguo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (adguo *AppDefaultGoodUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *AppDefaultGoodUpdateOne {
	if u != nil {
		adguo.SetCoinTypeID(*u)
	}
	return adguo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (adguo *AppDefaultGoodUpdateOne) ClearCoinTypeID() *AppDefaultGoodUpdateOne {
	adguo.mutation.ClearCoinTypeID()
	return adguo
}

// Mutation returns the AppDefaultGoodMutation object of the builder.
func (adguo *AppDefaultGoodUpdateOne) Mutation() *AppDefaultGoodMutation {
	return adguo.mutation
}

// Where appends a list predicates to the AppDefaultGoodUpdate builder.
func (adguo *AppDefaultGoodUpdateOne) Where(ps ...predicate.AppDefaultGood) *AppDefaultGoodUpdateOne {
	adguo.mutation.Where(ps...)
	return adguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (adguo *AppDefaultGoodUpdateOne) Select(field string, fields ...string) *AppDefaultGoodUpdateOne {
	adguo.fields = append([]string{field}, fields...)
	return adguo
}

// Save executes the query and returns the updated AppDefaultGood entity.
func (adguo *AppDefaultGoodUpdateOne) Save(ctx context.Context) (*AppDefaultGood, error) {
	return withHooks(ctx, adguo.sqlSave, adguo.mutation, adguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (adguo *AppDefaultGoodUpdateOne) SaveX(ctx context.Context) *AppDefaultGood {
	node, err := adguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (adguo *AppDefaultGoodUpdateOne) Exec(ctx context.Context) error {
	_, err := adguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adguo *AppDefaultGoodUpdateOne) ExecX(ctx context.Context) {
	if err := adguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (adguo *AppDefaultGoodUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppDefaultGoodUpdateOne {
	adguo.modifiers = append(adguo.modifiers, modifiers...)
	return adguo
}

func (adguo *AppDefaultGoodUpdateOne) sqlSave(ctx context.Context) (_node *AppDefaultGood, err error) {
	_spec := sqlgraph.NewUpdateSpec(appdefaultgood.Table, appdefaultgood.Columns, sqlgraph.NewFieldSpec(appdefaultgood.FieldID, field.TypeUint32))
	id, ok := adguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AppDefaultGood.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := adguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appdefaultgood.FieldID)
		for _, f := range fields {
			if !appdefaultgood.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != appdefaultgood.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := adguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := adguo.mutation.EntID(); ok {
		_spec.SetField(appdefaultgood.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := adguo.mutation.AppGoodID(); ok {
		_spec.SetField(appdefaultgood.FieldAppGoodID, field.TypeUUID, value)
	}
	if adguo.mutation.AppGoodIDCleared() {
		_spec.ClearField(appdefaultgood.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := adguo.mutation.CoinTypeID(); ok {
		_spec.SetField(appdefaultgood.FieldCoinTypeID, field.TypeUUID, value)
	}
	if adguo.mutation.CoinTypeIDCleared() {
		_spec.ClearField(appdefaultgood.FieldCoinTypeID, field.TypeUUID)
	}
	_spec.AddModifiers(adguo.modifiers...)
	_node = &AppDefaultGood{config: adguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, adguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appdefaultgood.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	adguo.mutation.done = true
	return _node, nil
}

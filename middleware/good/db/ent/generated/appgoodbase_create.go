// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appgoodbase"
	"github.com/google/uuid"
)

// AppGoodBaseCreate is the builder for creating a AppGoodBase entity.
type AppGoodBaseCreate struct {
	config
	mutation *AppGoodBaseMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (agbc *AppGoodBaseCreate) SetEntID(u uuid.UUID) *AppGoodBaseCreate {
	agbc.mutation.SetEntID(u)
	return agbc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (agbc *AppGoodBaseCreate) SetNillableEntID(u *uuid.UUID) *AppGoodBaseCreate {
	if u != nil {
		agbc.SetEntID(*u)
	}
	return agbc
}

// SetAppID sets the "app_id" field.
func (agbc *AppGoodBaseCreate) SetAppID(u uuid.UUID) *AppGoodBaseCreate {
	agbc.mutation.SetAppID(u)
	return agbc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (agbc *AppGoodBaseCreate) SetNillableAppID(u *uuid.UUID) *AppGoodBaseCreate {
	if u != nil {
		agbc.SetAppID(*u)
	}
	return agbc
}

// SetGoodID sets the "good_id" field.
func (agbc *AppGoodBaseCreate) SetGoodID(u uuid.UUID) *AppGoodBaseCreate {
	agbc.mutation.SetGoodID(u)
	return agbc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (agbc *AppGoodBaseCreate) SetNillableGoodID(u *uuid.UUID) *AppGoodBaseCreate {
	if u != nil {
		agbc.SetGoodID(*u)
	}
	return agbc
}

// SetPurchasable sets the "purchasable" field.
func (agbc *AppGoodBaseCreate) SetPurchasable(b bool) *AppGoodBaseCreate {
	agbc.mutation.SetPurchasable(b)
	return agbc
}

// SetNillablePurchasable sets the "purchasable" field if the given value is not nil.
func (agbc *AppGoodBaseCreate) SetNillablePurchasable(b *bool) *AppGoodBaseCreate {
	if b != nil {
		agbc.SetPurchasable(*b)
	}
	return agbc
}

// SetEnableProductPage sets the "enable_product_page" field.
func (agbc *AppGoodBaseCreate) SetEnableProductPage(b bool) *AppGoodBaseCreate {
	agbc.mutation.SetEnableProductPage(b)
	return agbc
}

// SetNillableEnableProductPage sets the "enable_product_page" field if the given value is not nil.
func (agbc *AppGoodBaseCreate) SetNillableEnableProductPage(b *bool) *AppGoodBaseCreate {
	if b != nil {
		agbc.SetEnableProductPage(*b)
	}
	return agbc
}

// SetProductPage sets the "product_page" field.
func (agbc *AppGoodBaseCreate) SetProductPage(s string) *AppGoodBaseCreate {
	agbc.mutation.SetProductPage(s)
	return agbc
}

// SetNillableProductPage sets the "product_page" field if the given value is not nil.
func (agbc *AppGoodBaseCreate) SetNillableProductPage(s *string) *AppGoodBaseCreate {
	if s != nil {
		agbc.SetProductPage(*s)
	}
	return agbc
}

// SetOnline sets the "online" field.
func (agbc *AppGoodBaseCreate) SetOnline(b bool) *AppGoodBaseCreate {
	agbc.mutation.SetOnline(b)
	return agbc
}

// SetNillableOnline sets the "online" field if the given value is not nil.
func (agbc *AppGoodBaseCreate) SetNillableOnline(b *bool) *AppGoodBaseCreate {
	if b != nil {
		agbc.SetOnline(*b)
	}
	return agbc
}

// SetVisible sets the "visible" field.
func (agbc *AppGoodBaseCreate) SetVisible(b bool) *AppGoodBaseCreate {
	agbc.mutation.SetVisible(b)
	return agbc
}

// SetNillableVisible sets the "visible" field if the given value is not nil.
func (agbc *AppGoodBaseCreate) SetNillableVisible(b *bool) *AppGoodBaseCreate {
	if b != nil {
		agbc.SetVisible(*b)
	}
	return agbc
}

// SetName sets the "name" field.
func (agbc *AppGoodBaseCreate) SetName(s string) *AppGoodBaseCreate {
	agbc.mutation.SetName(s)
	return agbc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (agbc *AppGoodBaseCreate) SetNillableName(s *string) *AppGoodBaseCreate {
	if s != nil {
		agbc.SetName(*s)
	}
	return agbc
}

// SetDisplayIndex sets the "display_index" field.
func (agbc *AppGoodBaseCreate) SetDisplayIndex(i int32) *AppGoodBaseCreate {
	agbc.mutation.SetDisplayIndex(i)
	return agbc
}

// SetNillableDisplayIndex sets the "display_index" field if the given value is not nil.
func (agbc *AppGoodBaseCreate) SetNillableDisplayIndex(i *int32) *AppGoodBaseCreate {
	if i != nil {
		agbc.SetDisplayIndex(*i)
	}
	return agbc
}

// SetBanner sets the "banner" field.
func (agbc *AppGoodBaseCreate) SetBanner(s string) *AppGoodBaseCreate {
	agbc.mutation.SetBanner(s)
	return agbc
}

// SetNillableBanner sets the "banner" field if the given value is not nil.
func (agbc *AppGoodBaseCreate) SetNillableBanner(s *string) *AppGoodBaseCreate {
	if s != nil {
		agbc.SetBanner(*s)
	}
	return agbc
}

// SetID sets the "id" field.
func (agbc *AppGoodBaseCreate) SetID(u uint32) *AppGoodBaseCreate {
	agbc.mutation.SetID(u)
	return agbc
}

// Mutation returns the AppGoodBaseMutation object of the builder.
func (agbc *AppGoodBaseCreate) Mutation() *AppGoodBaseMutation {
	return agbc.mutation
}

// Save creates the AppGoodBase in the database.
func (agbc *AppGoodBaseCreate) Save(ctx context.Context) (*AppGoodBase, error) {
	agbc.defaults()
	return withHooks(ctx, agbc.sqlSave, agbc.mutation, agbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (agbc *AppGoodBaseCreate) SaveX(ctx context.Context) *AppGoodBase {
	v, err := agbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agbc *AppGoodBaseCreate) Exec(ctx context.Context) error {
	_, err := agbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agbc *AppGoodBaseCreate) ExecX(ctx context.Context) {
	if err := agbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agbc *AppGoodBaseCreate) defaults() {
	if _, ok := agbc.mutation.EntID(); !ok {
		v := appgoodbase.DefaultEntID()
		agbc.mutation.SetEntID(v)
	}
	if _, ok := agbc.mutation.AppID(); !ok {
		v := appgoodbase.DefaultAppID()
		agbc.mutation.SetAppID(v)
	}
	if _, ok := agbc.mutation.GoodID(); !ok {
		v := appgoodbase.DefaultGoodID()
		agbc.mutation.SetGoodID(v)
	}
	if _, ok := agbc.mutation.Purchasable(); !ok {
		v := appgoodbase.DefaultPurchasable
		agbc.mutation.SetPurchasable(v)
	}
	if _, ok := agbc.mutation.EnableProductPage(); !ok {
		v := appgoodbase.DefaultEnableProductPage
		agbc.mutation.SetEnableProductPage(v)
	}
	if _, ok := agbc.mutation.ProductPage(); !ok {
		v := appgoodbase.DefaultProductPage
		agbc.mutation.SetProductPage(v)
	}
	if _, ok := agbc.mutation.Online(); !ok {
		v := appgoodbase.DefaultOnline
		agbc.mutation.SetOnline(v)
	}
	if _, ok := agbc.mutation.Visible(); !ok {
		v := appgoodbase.DefaultVisible
		agbc.mutation.SetVisible(v)
	}
	if _, ok := agbc.mutation.Name(); !ok {
		v := appgoodbase.DefaultName
		agbc.mutation.SetName(v)
	}
	if _, ok := agbc.mutation.DisplayIndex(); !ok {
		v := appgoodbase.DefaultDisplayIndex
		agbc.mutation.SetDisplayIndex(v)
	}
	if _, ok := agbc.mutation.Banner(); !ok {
		v := appgoodbase.DefaultBanner
		agbc.mutation.SetBanner(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (agbc *AppGoodBaseCreate) check() error {
	if _, ok := agbc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "AppGoodBase.ent_id"`)}
	}
	return nil
}

func (agbc *AppGoodBaseCreate) sqlSave(ctx context.Context) (*AppGoodBase, error) {
	if err := agbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := agbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, agbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	agbc.mutation.id = &_node.ID
	agbc.mutation.done = true
	return _node, nil
}

func (agbc *AppGoodBaseCreate) createSpec() (*AppGoodBase, *sqlgraph.CreateSpec) {
	var (
		_node = &AppGoodBase{config: agbc.config}
		_spec = sqlgraph.NewCreateSpec(appgoodbase.Table, sqlgraph.NewFieldSpec(appgoodbase.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = agbc.conflict
	if id, ok := agbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := agbc.mutation.EntID(); ok {
		_spec.SetField(appgoodbase.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := agbc.mutation.AppID(); ok {
		_spec.SetField(appgoodbase.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := agbc.mutation.GoodID(); ok {
		_spec.SetField(appgoodbase.FieldGoodID, field.TypeUUID, value)
		_node.GoodID = value
	}
	if value, ok := agbc.mutation.Purchasable(); ok {
		_spec.SetField(appgoodbase.FieldPurchasable, field.TypeBool, value)
		_node.Purchasable = value
	}
	if value, ok := agbc.mutation.EnableProductPage(); ok {
		_spec.SetField(appgoodbase.FieldEnableProductPage, field.TypeBool, value)
		_node.EnableProductPage = value
	}
	if value, ok := agbc.mutation.ProductPage(); ok {
		_spec.SetField(appgoodbase.FieldProductPage, field.TypeString, value)
		_node.ProductPage = value
	}
	if value, ok := agbc.mutation.Online(); ok {
		_spec.SetField(appgoodbase.FieldOnline, field.TypeBool, value)
		_node.Online = value
	}
	if value, ok := agbc.mutation.Visible(); ok {
		_spec.SetField(appgoodbase.FieldVisible, field.TypeBool, value)
		_node.Visible = value
	}
	if value, ok := agbc.mutation.Name(); ok {
		_spec.SetField(appgoodbase.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := agbc.mutation.DisplayIndex(); ok {
		_spec.SetField(appgoodbase.FieldDisplayIndex, field.TypeInt32, value)
		_node.DisplayIndex = value
	}
	if value, ok := agbc.mutation.Banner(); ok {
		_spec.SetField(appgoodbase.FieldBanner, field.TypeString, value)
		_node.Banner = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppGoodBase.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppGoodBaseUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (agbc *AppGoodBaseCreate) OnConflict(opts ...sql.ConflictOption) *AppGoodBaseUpsertOne {
	agbc.conflict = opts
	return &AppGoodBaseUpsertOne{
		create: agbc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppGoodBase.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (agbc *AppGoodBaseCreate) OnConflictColumns(columns ...string) *AppGoodBaseUpsertOne {
	agbc.conflict = append(agbc.conflict, sql.ConflictColumns(columns...))
	return &AppGoodBaseUpsertOne{
		create: agbc,
	}
}

type (
	// AppGoodBaseUpsertOne is the builder for "upsert"-ing
	//  one AppGoodBase node.
	AppGoodBaseUpsertOne struct {
		create *AppGoodBaseCreate
	}

	// AppGoodBaseUpsert is the "OnConflict" setter.
	AppGoodBaseUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *AppGoodBaseUpsert) SetEntID(v uuid.UUID) *AppGoodBaseUpsert {
	u.Set(appgoodbase.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppGoodBaseUpsert) UpdateEntID() *AppGoodBaseUpsert {
	u.SetExcluded(appgoodbase.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppGoodBaseUpsert) SetAppID(v uuid.UUID) *AppGoodBaseUpsert {
	u.Set(appgoodbase.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppGoodBaseUpsert) UpdateAppID() *AppGoodBaseUpsert {
	u.SetExcluded(appgoodbase.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppGoodBaseUpsert) ClearAppID() *AppGoodBaseUpsert {
	u.SetNull(appgoodbase.FieldAppID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *AppGoodBaseUpsert) SetGoodID(v uuid.UUID) *AppGoodBaseUpsert {
	u.Set(appgoodbase.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AppGoodBaseUpsert) UpdateGoodID() *AppGoodBaseUpsert {
	u.SetExcluded(appgoodbase.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *AppGoodBaseUpsert) ClearGoodID() *AppGoodBaseUpsert {
	u.SetNull(appgoodbase.FieldGoodID)
	return u
}

// SetPurchasable sets the "purchasable" field.
func (u *AppGoodBaseUpsert) SetPurchasable(v bool) *AppGoodBaseUpsert {
	u.Set(appgoodbase.FieldPurchasable, v)
	return u
}

// UpdatePurchasable sets the "purchasable" field to the value that was provided on create.
func (u *AppGoodBaseUpsert) UpdatePurchasable() *AppGoodBaseUpsert {
	u.SetExcluded(appgoodbase.FieldPurchasable)
	return u
}

// ClearPurchasable clears the value of the "purchasable" field.
func (u *AppGoodBaseUpsert) ClearPurchasable() *AppGoodBaseUpsert {
	u.SetNull(appgoodbase.FieldPurchasable)
	return u
}

// SetEnableProductPage sets the "enable_product_page" field.
func (u *AppGoodBaseUpsert) SetEnableProductPage(v bool) *AppGoodBaseUpsert {
	u.Set(appgoodbase.FieldEnableProductPage, v)
	return u
}

// UpdateEnableProductPage sets the "enable_product_page" field to the value that was provided on create.
func (u *AppGoodBaseUpsert) UpdateEnableProductPage() *AppGoodBaseUpsert {
	u.SetExcluded(appgoodbase.FieldEnableProductPage)
	return u
}

// ClearEnableProductPage clears the value of the "enable_product_page" field.
func (u *AppGoodBaseUpsert) ClearEnableProductPage() *AppGoodBaseUpsert {
	u.SetNull(appgoodbase.FieldEnableProductPage)
	return u
}

// SetProductPage sets the "product_page" field.
func (u *AppGoodBaseUpsert) SetProductPage(v string) *AppGoodBaseUpsert {
	u.Set(appgoodbase.FieldProductPage, v)
	return u
}

// UpdateProductPage sets the "product_page" field to the value that was provided on create.
func (u *AppGoodBaseUpsert) UpdateProductPage() *AppGoodBaseUpsert {
	u.SetExcluded(appgoodbase.FieldProductPage)
	return u
}

// ClearProductPage clears the value of the "product_page" field.
func (u *AppGoodBaseUpsert) ClearProductPage() *AppGoodBaseUpsert {
	u.SetNull(appgoodbase.FieldProductPage)
	return u
}

// SetOnline sets the "online" field.
func (u *AppGoodBaseUpsert) SetOnline(v bool) *AppGoodBaseUpsert {
	u.Set(appgoodbase.FieldOnline, v)
	return u
}

// UpdateOnline sets the "online" field to the value that was provided on create.
func (u *AppGoodBaseUpsert) UpdateOnline() *AppGoodBaseUpsert {
	u.SetExcluded(appgoodbase.FieldOnline)
	return u
}

// ClearOnline clears the value of the "online" field.
func (u *AppGoodBaseUpsert) ClearOnline() *AppGoodBaseUpsert {
	u.SetNull(appgoodbase.FieldOnline)
	return u
}

// SetVisible sets the "visible" field.
func (u *AppGoodBaseUpsert) SetVisible(v bool) *AppGoodBaseUpsert {
	u.Set(appgoodbase.FieldVisible, v)
	return u
}

// UpdateVisible sets the "visible" field to the value that was provided on create.
func (u *AppGoodBaseUpsert) UpdateVisible() *AppGoodBaseUpsert {
	u.SetExcluded(appgoodbase.FieldVisible)
	return u
}

// ClearVisible clears the value of the "visible" field.
func (u *AppGoodBaseUpsert) ClearVisible() *AppGoodBaseUpsert {
	u.SetNull(appgoodbase.FieldVisible)
	return u
}

// SetName sets the "name" field.
func (u *AppGoodBaseUpsert) SetName(v string) *AppGoodBaseUpsert {
	u.Set(appgoodbase.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppGoodBaseUpsert) UpdateName() *AppGoodBaseUpsert {
	u.SetExcluded(appgoodbase.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *AppGoodBaseUpsert) ClearName() *AppGoodBaseUpsert {
	u.SetNull(appgoodbase.FieldName)
	return u
}

// SetDisplayIndex sets the "display_index" field.
func (u *AppGoodBaseUpsert) SetDisplayIndex(v int32) *AppGoodBaseUpsert {
	u.Set(appgoodbase.FieldDisplayIndex, v)
	return u
}

// UpdateDisplayIndex sets the "display_index" field to the value that was provided on create.
func (u *AppGoodBaseUpsert) UpdateDisplayIndex() *AppGoodBaseUpsert {
	u.SetExcluded(appgoodbase.FieldDisplayIndex)
	return u
}

// AddDisplayIndex adds v to the "display_index" field.
func (u *AppGoodBaseUpsert) AddDisplayIndex(v int32) *AppGoodBaseUpsert {
	u.Add(appgoodbase.FieldDisplayIndex, v)
	return u
}

// ClearDisplayIndex clears the value of the "display_index" field.
func (u *AppGoodBaseUpsert) ClearDisplayIndex() *AppGoodBaseUpsert {
	u.SetNull(appgoodbase.FieldDisplayIndex)
	return u
}

// SetBanner sets the "banner" field.
func (u *AppGoodBaseUpsert) SetBanner(v string) *AppGoodBaseUpsert {
	u.Set(appgoodbase.FieldBanner, v)
	return u
}

// UpdateBanner sets the "banner" field to the value that was provided on create.
func (u *AppGoodBaseUpsert) UpdateBanner() *AppGoodBaseUpsert {
	u.SetExcluded(appgoodbase.FieldBanner)
	return u
}

// ClearBanner clears the value of the "banner" field.
func (u *AppGoodBaseUpsert) ClearBanner() *AppGoodBaseUpsert {
	u.SetNull(appgoodbase.FieldBanner)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppGoodBase.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appgoodbase.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppGoodBaseUpsertOne) UpdateNewValues() *AppGoodBaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appgoodbase.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppGoodBase.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppGoodBaseUpsertOne) Ignore() *AppGoodBaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppGoodBaseUpsertOne) DoNothing() *AppGoodBaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppGoodBaseCreate.OnConflict
// documentation for more info.
func (u *AppGoodBaseUpsertOne) Update(set func(*AppGoodBaseUpsert)) *AppGoodBaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppGoodBaseUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppGoodBaseUpsertOne) SetEntID(v uuid.UUID) *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppGoodBaseUpsertOne) UpdateEntID() *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppGoodBaseUpsertOne) SetAppID(v uuid.UUID) *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppGoodBaseUpsertOne) UpdateAppID() *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppGoodBaseUpsertOne) ClearAppID() *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.ClearAppID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *AppGoodBaseUpsertOne) SetGoodID(v uuid.UUID) *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AppGoodBaseUpsertOne) UpdateGoodID() *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *AppGoodBaseUpsertOne) ClearGoodID() *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.ClearGoodID()
	})
}

// SetPurchasable sets the "purchasable" field.
func (u *AppGoodBaseUpsertOne) SetPurchasable(v bool) *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.SetPurchasable(v)
	})
}

// UpdatePurchasable sets the "purchasable" field to the value that was provided on create.
func (u *AppGoodBaseUpsertOne) UpdatePurchasable() *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.UpdatePurchasable()
	})
}

// ClearPurchasable clears the value of the "purchasable" field.
func (u *AppGoodBaseUpsertOne) ClearPurchasable() *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.ClearPurchasable()
	})
}

// SetEnableProductPage sets the "enable_product_page" field.
func (u *AppGoodBaseUpsertOne) SetEnableProductPage(v bool) *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.SetEnableProductPage(v)
	})
}

// UpdateEnableProductPage sets the "enable_product_page" field to the value that was provided on create.
func (u *AppGoodBaseUpsertOne) UpdateEnableProductPage() *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.UpdateEnableProductPage()
	})
}

// ClearEnableProductPage clears the value of the "enable_product_page" field.
func (u *AppGoodBaseUpsertOne) ClearEnableProductPage() *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.ClearEnableProductPage()
	})
}

// SetProductPage sets the "product_page" field.
func (u *AppGoodBaseUpsertOne) SetProductPage(v string) *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.SetProductPage(v)
	})
}

// UpdateProductPage sets the "product_page" field to the value that was provided on create.
func (u *AppGoodBaseUpsertOne) UpdateProductPage() *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.UpdateProductPage()
	})
}

// ClearProductPage clears the value of the "product_page" field.
func (u *AppGoodBaseUpsertOne) ClearProductPage() *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.ClearProductPage()
	})
}

// SetOnline sets the "online" field.
func (u *AppGoodBaseUpsertOne) SetOnline(v bool) *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.SetOnline(v)
	})
}

// UpdateOnline sets the "online" field to the value that was provided on create.
func (u *AppGoodBaseUpsertOne) UpdateOnline() *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.UpdateOnline()
	})
}

// ClearOnline clears the value of the "online" field.
func (u *AppGoodBaseUpsertOne) ClearOnline() *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.ClearOnline()
	})
}

// SetVisible sets the "visible" field.
func (u *AppGoodBaseUpsertOne) SetVisible(v bool) *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.SetVisible(v)
	})
}

// UpdateVisible sets the "visible" field to the value that was provided on create.
func (u *AppGoodBaseUpsertOne) UpdateVisible() *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.UpdateVisible()
	})
}

// ClearVisible clears the value of the "visible" field.
func (u *AppGoodBaseUpsertOne) ClearVisible() *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.ClearVisible()
	})
}

// SetName sets the "name" field.
func (u *AppGoodBaseUpsertOne) SetName(v string) *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppGoodBaseUpsertOne) UpdateName() *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *AppGoodBaseUpsertOne) ClearName() *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.ClearName()
	})
}

// SetDisplayIndex sets the "display_index" field.
func (u *AppGoodBaseUpsertOne) SetDisplayIndex(v int32) *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.SetDisplayIndex(v)
	})
}

// AddDisplayIndex adds v to the "display_index" field.
func (u *AppGoodBaseUpsertOne) AddDisplayIndex(v int32) *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.AddDisplayIndex(v)
	})
}

// UpdateDisplayIndex sets the "display_index" field to the value that was provided on create.
func (u *AppGoodBaseUpsertOne) UpdateDisplayIndex() *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.UpdateDisplayIndex()
	})
}

// ClearDisplayIndex clears the value of the "display_index" field.
func (u *AppGoodBaseUpsertOne) ClearDisplayIndex() *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.ClearDisplayIndex()
	})
}

// SetBanner sets the "banner" field.
func (u *AppGoodBaseUpsertOne) SetBanner(v string) *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.SetBanner(v)
	})
}

// UpdateBanner sets the "banner" field to the value that was provided on create.
func (u *AppGoodBaseUpsertOne) UpdateBanner() *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.UpdateBanner()
	})
}

// ClearBanner clears the value of the "banner" field.
func (u *AppGoodBaseUpsertOne) ClearBanner() *AppGoodBaseUpsertOne {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.ClearBanner()
	})
}

// Exec executes the query.
func (u *AppGoodBaseUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppGoodBaseCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppGoodBaseUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppGoodBaseUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppGoodBaseUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppGoodBaseCreateBulk is the builder for creating many AppGoodBase entities in bulk.
type AppGoodBaseCreateBulk struct {
	config
	err      error
	builders []*AppGoodBaseCreate
	conflict []sql.ConflictOption
}

// Save creates the AppGoodBase entities in the database.
func (agbcb *AppGoodBaseCreateBulk) Save(ctx context.Context) ([]*AppGoodBase, error) {
	if agbcb.err != nil {
		return nil, agbcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(agbcb.builders))
	nodes := make([]*AppGoodBase, len(agbcb.builders))
	mutators := make([]Mutator, len(agbcb.builders))
	for i := range agbcb.builders {
		func(i int, root context.Context) {
			builder := agbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppGoodBaseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, agbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = agbcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, agbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, agbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (agbcb *AppGoodBaseCreateBulk) SaveX(ctx context.Context) []*AppGoodBase {
	v, err := agbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agbcb *AppGoodBaseCreateBulk) Exec(ctx context.Context) error {
	_, err := agbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agbcb *AppGoodBaseCreateBulk) ExecX(ctx context.Context) {
	if err := agbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppGoodBase.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppGoodBaseUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (agbcb *AppGoodBaseCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppGoodBaseUpsertBulk {
	agbcb.conflict = opts
	return &AppGoodBaseUpsertBulk{
		create: agbcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppGoodBase.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (agbcb *AppGoodBaseCreateBulk) OnConflictColumns(columns ...string) *AppGoodBaseUpsertBulk {
	agbcb.conflict = append(agbcb.conflict, sql.ConflictColumns(columns...))
	return &AppGoodBaseUpsertBulk{
		create: agbcb,
	}
}

// AppGoodBaseUpsertBulk is the builder for "upsert"-ing
// a bulk of AppGoodBase nodes.
type AppGoodBaseUpsertBulk struct {
	create *AppGoodBaseCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppGoodBase.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appgoodbase.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppGoodBaseUpsertBulk) UpdateNewValues() *AppGoodBaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appgoodbase.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppGoodBase.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppGoodBaseUpsertBulk) Ignore() *AppGoodBaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppGoodBaseUpsertBulk) DoNothing() *AppGoodBaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppGoodBaseCreateBulk.OnConflict
// documentation for more info.
func (u *AppGoodBaseUpsertBulk) Update(set func(*AppGoodBaseUpsert)) *AppGoodBaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppGoodBaseUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppGoodBaseUpsertBulk) SetEntID(v uuid.UUID) *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppGoodBaseUpsertBulk) UpdateEntID() *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppGoodBaseUpsertBulk) SetAppID(v uuid.UUID) *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppGoodBaseUpsertBulk) UpdateAppID() *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppGoodBaseUpsertBulk) ClearAppID() *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.ClearAppID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *AppGoodBaseUpsertBulk) SetGoodID(v uuid.UUID) *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AppGoodBaseUpsertBulk) UpdateGoodID() *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *AppGoodBaseUpsertBulk) ClearGoodID() *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.ClearGoodID()
	})
}

// SetPurchasable sets the "purchasable" field.
func (u *AppGoodBaseUpsertBulk) SetPurchasable(v bool) *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.SetPurchasable(v)
	})
}

// UpdatePurchasable sets the "purchasable" field to the value that was provided on create.
func (u *AppGoodBaseUpsertBulk) UpdatePurchasable() *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.UpdatePurchasable()
	})
}

// ClearPurchasable clears the value of the "purchasable" field.
func (u *AppGoodBaseUpsertBulk) ClearPurchasable() *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.ClearPurchasable()
	})
}

// SetEnableProductPage sets the "enable_product_page" field.
func (u *AppGoodBaseUpsertBulk) SetEnableProductPage(v bool) *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.SetEnableProductPage(v)
	})
}

// UpdateEnableProductPage sets the "enable_product_page" field to the value that was provided on create.
func (u *AppGoodBaseUpsertBulk) UpdateEnableProductPage() *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.UpdateEnableProductPage()
	})
}

// ClearEnableProductPage clears the value of the "enable_product_page" field.
func (u *AppGoodBaseUpsertBulk) ClearEnableProductPage() *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.ClearEnableProductPage()
	})
}

// SetProductPage sets the "product_page" field.
func (u *AppGoodBaseUpsertBulk) SetProductPage(v string) *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.SetProductPage(v)
	})
}

// UpdateProductPage sets the "product_page" field to the value that was provided on create.
func (u *AppGoodBaseUpsertBulk) UpdateProductPage() *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.UpdateProductPage()
	})
}

// ClearProductPage clears the value of the "product_page" field.
func (u *AppGoodBaseUpsertBulk) ClearProductPage() *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.ClearProductPage()
	})
}

// SetOnline sets the "online" field.
func (u *AppGoodBaseUpsertBulk) SetOnline(v bool) *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.SetOnline(v)
	})
}

// UpdateOnline sets the "online" field to the value that was provided on create.
func (u *AppGoodBaseUpsertBulk) UpdateOnline() *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.UpdateOnline()
	})
}

// ClearOnline clears the value of the "online" field.
func (u *AppGoodBaseUpsertBulk) ClearOnline() *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.ClearOnline()
	})
}

// SetVisible sets the "visible" field.
func (u *AppGoodBaseUpsertBulk) SetVisible(v bool) *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.SetVisible(v)
	})
}

// UpdateVisible sets the "visible" field to the value that was provided on create.
func (u *AppGoodBaseUpsertBulk) UpdateVisible() *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.UpdateVisible()
	})
}

// ClearVisible clears the value of the "visible" field.
func (u *AppGoodBaseUpsertBulk) ClearVisible() *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.ClearVisible()
	})
}

// SetName sets the "name" field.
func (u *AppGoodBaseUpsertBulk) SetName(v string) *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppGoodBaseUpsertBulk) UpdateName() *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *AppGoodBaseUpsertBulk) ClearName() *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.ClearName()
	})
}

// SetDisplayIndex sets the "display_index" field.
func (u *AppGoodBaseUpsertBulk) SetDisplayIndex(v int32) *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.SetDisplayIndex(v)
	})
}

// AddDisplayIndex adds v to the "display_index" field.
func (u *AppGoodBaseUpsertBulk) AddDisplayIndex(v int32) *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.AddDisplayIndex(v)
	})
}

// UpdateDisplayIndex sets the "display_index" field to the value that was provided on create.
func (u *AppGoodBaseUpsertBulk) UpdateDisplayIndex() *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.UpdateDisplayIndex()
	})
}

// ClearDisplayIndex clears the value of the "display_index" field.
func (u *AppGoodBaseUpsertBulk) ClearDisplayIndex() *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.ClearDisplayIndex()
	})
}

// SetBanner sets the "banner" field.
func (u *AppGoodBaseUpsertBulk) SetBanner(v string) *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.SetBanner(v)
	})
}

// UpdateBanner sets the "banner" field to the value that was provided on create.
func (u *AppGoodBaseUpsertBulk) UpdateBanner() *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.UpdateBanner()
	})
}

// ClearBanner clears the value of the "banner" field.
func (u *AppGoodBaseUpsertBulk) ClearBanner() *AppGoodBaseUpsertBulk {
	return u.Update(func(s *AppGoodBaseUpsert) {
		s.ClearBanner()
	})
}

// Exec executes the query.
func (u *AppGoodBaseUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the AppGoodBaseCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppGoodBaseCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppGoodBaseUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/fee"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// FeeUpdate is the builder for updating Fee entities.
type FeeUpdate struct {
	config
	hooks     []Hook
	mutation  *FeeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FeeUpdate builder.
func (fu *FeeUpdate) Where(ps ...predicate.Fee) *FeeUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetEntID sets the "ent_id" field.
func (fu *FeeUpdate) SetEntID(u uuid.UUID) *FeeUpdate {
	fu.mutation.SetEntID(u)
	return fu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (fu *FeeUpdate) SetNillableEntID(u *uuid.UUID) *FeeUpdate {
	if u != nil {
		fu.SetEntID(*u)
	}
	return fu
}

// SetCreatedAt sets the "created_at" field.
func (fu *FeeUpdate) SetCreatedAt(u uint32) *FeeUpdate {
	fu.mutation.ResetCreatedAt()
	fu.mutation.SetCreatedAt(u)
	return fu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fu *FeeUpdate) SetNillableCreatedAt(u *uint32) *FeeUpdate {
	if u != nil {
		fu.SetCreatedAt(*u)
	}
	return fu
}

// AddCreatedAt adds u to the "created_at" field.
func (fu *FeeUpdate) AddCreatedAt(u int32) *FeeUpdate {
	fu.mutation.AddCreatedAt(u)
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FeeUpdate) SetUpdatedAt(u uint32) *FeeUpdate {
	fu.mutation.ResetUpdatedAt()
	fu.mutation.SetUpdatedAt(u)
	return fu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (fu *FeeUpdate) AddUpdatedAt(u int32) *FeeUpdate {
	fu.mutation.AddUpdatedAt(u)
	return fu
}

// SetDeletedAt sets the "deleted_at" field.
func (fu *FeeUpdate) SetDeletedAt(u uint32) *FeeUpdate {
	fu.mutation.ResetDeletedAt()
	fu.mutation.SetDeletedAt(u)
	return fu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fu *FeeUpdate) SetNillableDeletedAt(u *uint32) *FeeUpdate {
	if u != nil {
		fu.SetDeletedAt(*u)
	}
	return fu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (fu *FeeUpdate) AddDeletedAt(u int32) *FeeUpdate {
	fu.mutation.AddDeletedAt(u)
	return fu
}

// SetGoodID sets the "good_id" field.
func (fu *FeeUpdate) SetGoodID(u uuid.UUID) *FeeUpdate {
	fu.mutation.SetGoodID(u)
	return fu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (fu *FeeUpdate) SetNillableGoodID(u *uuid.UUID) *FeeUpdate {
	if u != nil {
		fu.SetGoodID(*u)
	}
	return fu
}

// ClearGoodID clears the value of the "good_id" field.
func (fu *FeeUpdate) ClearGoodID() *FeeUpdate {
	fu.mutation.ClearGoodID()
	return fu
}

// SetSettlementType sets the "settlement_type" field.
func (fu *FeeUpdate) SetSettlementType(s string) *FeeUpdate {
	fu.mutation.SetSettlementType(s)
	return fu
}

// SetNillableSettlementType sets the "settlement_type" field if the given value is not nil.
func (fu *FeeUpdate) SetNillableSettlementType(s *string) *FeeUpdate {
	if s != nil {
		fu.SetSettlementType(*s)
	}
	return fu
}

// ClearSettlementType clears the value of the "settlement_type" field.
func (fu *FeeUpdate) ClearSettlementType() *FeeUpdate {
	fu.mutation.ClearSettlementType()
	return fu
}

// SetUnitValue sets the "unit_value" field.
func (fu *FeeUpdate) SetUnitValue(d decimal.Decimal) *FeeUpdate {
	fu.mutation.SetUnitValue(d)
	return fu
}

// SetNillableUnitValue sets the "unit_value" field if the given value is not nil.
func (fu *FeeUpdate) SetNillableUnitValue(d *decimal.Decimal) *FeeUpdate {
	if d != nil {
		fu.SetUnitValue(*d)
	}
	return fu
}

// ClearUnitValue clears the value of the "unit_value" field.
func (fu *FeeUpdate) ClearUnitValue() *FeeUpdate {
	fu.mutation.ClearUnitValue()
	return fu
}

// SetDurationDisplayType sets the "duration_display_type" field.
func (fu *FeeUpdate) SetDurationDisplayType(s string) *FeeUpdate {
	fu.mutation.SetDurationDisplayType(s)
	return fu
}

// SetNillableDurationDisplayType sets the "duration_display_type" field if the given value is not nil.
func (fu *FeeUpdate) SetNillableDurationDisplayType(s *string) *FeeUpdate {
	if s != nil {
		fu.SetDurationDisplayType(*s)
	}
	return fu
}

// ClearDurationDisplayType clears the value of the "duration_display_type" field.
func (fu *FeeUpdate) ClearDurationDisplayType() *FeeUpdate {
	fu.mutation.ClearDurationDisplayType()
	return fu
}

// Mutation returns the FeeMutation object of the builder.
func (fu *FeeUpdate) Mutation() *FeeMutation {
	return fu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FeeUpdate) Save(ctx context.Context) (int, error) {
	fu.defaults()
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FeeUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FeeUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FeeUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FeeUpdate) defaults() {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		v := fee.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fu *FeeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FeeUpdate {
	fu.modifiers = append(fu.modifiers, modifiers...)
	return fu
}

func (fu *FeeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(fee.Table, fee.Columns, sqlgraph.NewFieldSpec(fee.FieldID, field.TypeUint32))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.EntID(); ok {
		_spec.SetField(fee.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := fu.mutation.CreatedAt(); ok {
		_spec.SetField(fee.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := fu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(fee.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(fee.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := fu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(fee.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := fu.mutation.DeletedAt(); ok {
		_spec.SetField(fee.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := fu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(fee.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := fu.mutation.GoodID(); ok {
		_spec.SetField(fee.FieldGoodID, field.TypeUUID, value)
	}
	if fu.mutation.GoodIDCleared() {
		_spec.ClearField(fee.FieldGoodID, field.TypeUUID)
	}
	if value, ok := fu.mutation.SettlementType(); ok {
		_spec.SetField(fee.FieldSettlementType, field.TypeString, value)
	}
	if fu.mutation.SettlementTypeCleared() {
		_spec.ClearField(fee.FieldSettlementType, field.TypeString)
	}
	if value, ok := fu.mutation.UnitValue(); ok {
		_spec.SetField(fee.FieldUnitValue, field.TypeOther, value)
	}
	if fu.mutation.UnitValueCleared() {
		_spec.ClearField(fee.FieldUnitValue, field.TypeOther)
	}
	if value, ok := fu.mutation.DurationDisplayType(); ok {
		_spec.SetField(fee.FieldDurationDisplayType, field.TypeString, value)
	}
	if fu.mutation.DurationDisplayTypeCleared() {
		_spec.ClearField(fee.FieldDurationDisplayType, field.TypeString)
	}
	_spec.AddModifiers(fu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FeeUpdateOne is the builder for updating a single Fee entity.
type FeeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FeeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (fuo *FeeUpdateOne) SetEntID(u uuid.UUID) *FeeUpdateOne {
	fuo.mutation.SetEntID(u)
	return fuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (fuo *FeeUpdateOne) SetNillableEntID(u *uuid.UUID) *FeeUpdateOne {
	if u != nil {
		fuo.SetEntID(*u)
	}
	return fuo
}

// SetCreatedAt sets the "created_at" field.
func (fuo *FeeUpdateOne) SetCreatedAt(u uint32) *FeeUpdateOne {
	fuo.mutation.ResetCreatedAt()
	fuo.mutation.SetCreatedAt(u)
	return fuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fuo *FeeUpdateOne) SetNillableCreatedAt(u *uint32) *FeeUpdateOne {
	if u != nil {
		fuo.SetCreatedAt(*u)
	}
	return fuo
}

// AddCreatedAt adds u to the "created_at" field.
func (fuo *FeeUpdateOne) AddCreatedAt(u int32) *FeeUpdateOne {
	fuo.mutation.AddCreatedAt(u)
	return fuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FeeUpdateOne) SetUpdatedAt(u uint32) *FeeUpdateOne {
	fuo.mutation.ResetUpdatedAt()
	fuo.mutation.SetUpdatedAt(u)
	return fuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (fuo *FeeUpdateOne) AddUpdatedAt(u int32) *FeeUpdateOne {
	fuo.mutation.AddUpdatedAt(u)
	return fuo
}

// SetDeletedAt sets the "deleted_at" field.
func (fuo *FeeUpdateOne) SetDeletedAt(u uint32) *FeeUpdateOne {
	fuo.mutation.ResetDeletedAt()
	fuo.mutation.SetDeletedAt(u)
	return fuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fuo *FeeUpdateOne) SetNillableDeletedAt(u *uint32) *FeeUpdateOne {
	if u != nil {
		fuo.SetDeletedAt(*u)
	}
	return fuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (fuo *FeeUpdateOne) AddDeletedAt(u int32) *FeeUpdateOne {
	fuo.mutation.AddDeletedAt(u)
	return fuo
}

// SetGoodID sets the "good_id" field.
func (fuo *FeeUpdateOne) SetGoodID(u uuid.UUID) *FeeUpdateOne {
	fuo.mutation.SetGoodID(u)
	return fuo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (fuo *FeeUpdateOne) SetNillableGoodID(u *uuid.UUID) *FeeUpdateOne {
	if u != nil {
		fuo.SetGoodID(*u)
	}
	return fuo
}

// ClearGoodID clears the value of the "good_id" field.
func (fuo *FeeUpdateOne) ClearGoodID() *FeeUpdateOne {
	fuo.mutation.ClearGoodID()
	return fuo
}

// SetSettlementType sets the "settlement_type" field.
func (fuo *FeeUpdateOne) SetSettlementType(s string) *FeeUpdateOne {
	fuo.mutation.SetSettlementType(s)
	return fuo
}

// SetNillableSettlementType sets the "settlement_type" field if the given value is not nil.
func (fuo *FeeUpdateOne) SetNillableSettlementType(s *string) *FeeUpdateOne {
	if s != nil {
		fuo.SetSettlementType(*s)
	}
	return fuo
}

// ClearSettlementType clears the value of the "settlement_type" field.
func (fuo *FeeUpdateOne) ClearSettlementType() *FeeUpdateOne {
	fuo.mutation.ClearSettlementType()
	return fuo
}

// SetUnitValue sets the "unit_value" field.
func (fuo *FeeUpdateOne) SetUnitValue(d decimal.Decimal) *FeeUpdateOne {
	fuo.mutation.SetUnitValue(d)
	return fuo
}

// SetNillableUnitValue sets the "unit_value" field if the given value is not nil.
func (fuo *FeeUpdateOne) SetNillableUnitValue(d *decimal.Decimal) *FeeUpdateOne {
	if d != nil {
		fuo.SetUnitValue(*d)
	}
	return fuo
}

// ClearUnitValue clears the value of the "unit_value" field.
func (fuo *FeeUpdateOne) ClearUnitValue() *FeeUpdateOne {
	fuo.mutation.ClearUnitValue()
	return fuo
}

// SetDurationDisplayType sets the "duration_display_type" field.
func (fuo *FeeUpdateOne) SetDurationDisplayType(s string) *FeeUpdateOne {
	fuo.mutation.SetDurationDisplayType(s)
	return fuo
}

// SetNillableDurationDisplayType sets the "duration_display_type" field if the given value is not nil.
func (fuo *FeeUpdateOne) SetNillableDurationDisplayType(s *string) *FeeUpdateOne {
	if s != nil {
		fuo.SetDurationDisplayType(*s)
	}
	return fuo
}

// ClearDurationDisplayType clears the value of the "duration_display_type" field.
func (fuo *FeeUpdateOne) ClearDurationDisplayType() *FeeUpdateOne {
	fuo.mutation.ClearDurationDisplayType()
	return fuo
}

// Mutation returns the FeeMutation object of the builder.
func (fuo *FeeUpdateOne) Mutation() *FeeMutation {
	return fuo.mutation
}

// Where appends a list predicates to the FeeUpdate builder.
func (fuo *FeeUpdateOne) Where(ps ...predicate.Fee) *FeeUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FeeUpdateOne) Select(field string, fields ...string) *FeeUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Fee entity.
func (fuo *FeeUpdateOne) Save(ctx context.Context) (*Fee, error) {
	fuo.defaults()
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FeeUpdateOne) SaveX(ctx context.Context) *Fee {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FeeUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FeeUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FeeUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		v := fee.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fuo *FeeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FeeUpdateOne {
	fuo.modifiers = append(fuo.modifiers, modifiers...)
	return fuo
}

func (fuo *FeeUpdateOne) sqlSave(ctx context.Context) (_node *Fee, err error) {
	_spec := sqlgraph.NewUpdateSpec(fee.Table, fee.Columns, sqlgraph.NewFieldSpec(fee.FieldID, field.TypeUint32))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Fee.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fee.FieldID)
		for _, f := range fields {
			if !fee.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != fee.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.EntID(); ok {
		_spec.SetField(fee.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := fuo.mutation.CreatedAt(); ok {
		_spec.SetField(fee.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := fuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(fee.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(fee.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := fuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(fee.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := fuo.mutation.DeletedAt(); ok {
		_spec.SetField(fee.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := fuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(fee.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := fuo.mutation.GoodID(); ok {
		_spec.SetField(fee.FieldGoodID, field.TypeUUID, value)
	}
	if fuo.mutation.GoodIDCleared() {
		_spec.ClearField(fee.FieldGoodID, field.TypeUUID)
	}
	if value, ok := fuo.mutation.SettlementType(); ok {
		_spec.SetField(fee.FieldSettlementType, field.TypeString, value)
	}
	if fuo.mutation.SettlementTypeCleared() {
		_spec.ClearField(fee.FieldSettlementType, field.TypeString)
	}
	if value, ok := fuo.mutation.UnitValue(); ok {
		_spec.SetField(fee.FieldUnitValue, field.TypeOther, value)
	}
	if fuo.mutation.UnitValueCleared() {
		_spec.ClearField(fee.FieldUnitValue, field.TypeOther)
	}
	if value, ok := fuo.mutation.DurationDisplayType(); ok {
		_spec.SetField(fee.FieldDurationDisplayType, field.TypeString, value)
	}
	if fuo.mutation.DurationDisplayTypeCleared() {
		_spec.ClearField(fee.FieldDurationDisplayType, field.TypeString)
	}
	_spec.AddModifiers(fuo.modifiers...)
	_node = &Fee{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}

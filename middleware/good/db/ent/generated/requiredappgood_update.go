// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/requiredappgood"
	"github.com/google/uuid"
)

// RequiredAppGoodUpdate is the builder for updating RequiredAppGood entities.
type RequiredAppGoodUpdate struct {
	config
	hooks     []Hook
	mutation  *RequiredAppGoodMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RequiredAppGoodUpdate builder.
func (ragu *RequiredAppGoodUpdate) Where(ps ...predicate.RequiredAppGood) *RequiredAppGoodUpdate {
	ragu.mutation.Where(ps...)
	return ragu
}

// SetEntID sets the "ent_id" field.
func (ragu *RequiredAppGoodUpdate) SetEntID(u uuid.UUID) *RequiredAppGoodUpdate {
	ragu.mutation.SetEntID(u)
	return ragu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ragu *RequiredAppGoodUpdate) SetNillableEntID(u *uuid.UUID) *RequiredAppGoodUpdate {
	if u != nil {
		ragu.SetEntID(*u)
	}
	return ragu
}

// SetMainAppGoodID sets the "main_app_good_id" field.
func (ragu *RequiredAppGoodUpdate) SetMainAppGoodID(u uuid.UUID) *RequiredAppGoodUpdate {
	ragu.mutation.SetMainAppGoodID(u)
	return ragu
}

// SetNillableMainAppGoodID sets the "main_app_good_id" field if the given value is not nil.
func (ragu *RequiredAppGoodUpdate) SetNillableMainAppGoodID(u *uuid.UUID) *RequiredAppGoodUpdate {
	if u != nil {
		ragu.SetMainAppGoodID(*u)
	}
	return ragu
}

// SetRequiredAppGoodID sets the "required_app_good_id" field.
func (ragu *RequiredAppGoodUpdate) SetRequiredAppGoodID(u uuid.UUID) *RequiredAppGoodUpdate {
	ragu.mutation.SetRequiredAppGoodID(u)
	return ragu
}

// SetNillableRequiredAppGoodID sets the "required_app_good_id" field if the given value is not nil.
func (ragu *RequiredAppGoodUpdate) SetNillableRequiredAppGoodID(u *uuid.UUID) *RequiredAppGoodUpdate {
	if u != nil {
		ragu.SetRequiredAppGoodID(*u)
	}
	return ragu
}

// SetMust sets the "must" field.
func (ragu *RequiredAppGoodUpdate) SetMust(b bool) *RequiredAppGoodUpdate {
	ragu.mutation.SetMust(b)
	return ragu
}

// SetNillableMust sets the "must" field if the given value is not nil.
func (ragu *RequiredAppGoodUpdate) SetNillableMust(b *bool) *RequiredAppGoodUpdate {
	if b != nil {
		ragu.SetMust(*b)
	}
	return ragu
}

// ClearMust clears the value of the "must" field.
func (ragu *RequiredAppGoodUpdate) ClearMust() *RequiredAppGoodUpdate {
	ragu.mutation.ClearMust()
	return ragu
}

// Mutation returns the RequiredAppGoodMutation object of the builder.
func (ragu *RequiredAppGoodUpdate) Mutation() *RequiredAppGoodMutation {
	return ragu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ragu *RequiredAppGoodUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ragu.sqlSave, ragu.mutation, ragu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ragu *RequiredAppGoodUpdate) SaveX(ctx context.Context) int {
	affected, err := ragu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ragu *RequiredAppGoodUpdate) Exec(ctx context.Context) error {
	_, err := ragu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ragu *RequiredAppGoodUpdate) ExecX(ctx context.Context) {
	if err := ragu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ragu *RequiredAppGoodUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RequiredAppGoodUpdate {
	ragu.modifiers = append(ragu.modifiers, modifiers...)
	return ragu
}

func (ragu *RequiredAppGoodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(requiredappgood.Table, requiredappgood.Columns, sqlgraph.NewFieldSpec(requiredappgood.FieldID, field.TypeUint32))
	if ps := ragu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ragu.mutation.EntID(); ok {
		_spec.SetField(requiredappgood.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := ragu.mutation.MainAppGoodID(); ok {
		_spec.SetField(requiredappgood.FieldMainAppGoodID, field.TypeUUID, value)
	}
	if value, ok := ragu.mutation.RequiredAppGoodID(); ok {
		_spec.SetField(requiredappgood.FieldRequiredAppGoodID, field.TypeUUID, value)
	}
	if value, ok := ragu.mutation.Must(); ok {
		_spec.SetField(requiredappgood.FieldMust, field.TypeBool, value)
	}
	if ragu.mutation.MustCleared() {
		_spec.ClearField(requiredappgood.FieldMust, field.TypeBool)
	}
	_spec.AddModifiers(ragu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ragu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{requiredappgood.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ragu.mutation.done = true
	return n, nil
}

// RequiredAppGoodUpdateOne is the builder for updating a single RequiredAppGood entity.
type RequiredAppGoodUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RequiredAppGoodMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (raguo *RequiredAppGoodUpdateOne) SetEntID(u uuid.UUID) *RequiredAppGoodUpdateOne {
	raguo.mutation.SetEntID(u)
	return raguo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (raguo *RequiredAppGoodUpdateOne) SetNillableEntID(u *uuid.UUID) *RequiredAppGoodUpdateOne {
	if u != nil {
		raguo.SetEntID(*u)
	}
	return raguo
}

// SetMainAppGoodID sets the "main_app_good_id" field.
func (raguo *RequiredAppGoodUpdateOne) SetMainAppGoodID(u uuid.UUID) *RequiredAppGoodUpdateOne {
	raguo.mutation.SetMainAppGoodID(u)
	return raguo
}

// SetNillableMainAppGoodID sets the "main_app_good_id" field if the given value is not nil.
func (raguo *RequiredAppGoodUpdateOne) SetNillableMainAppGoodID(u *uuid.UUID) *RequiredAppGoodUpdateOne {
	if u != nil {
		raguo.SetMainAppGoodID(*u)
	}
	return raguo
}

// SetRequiredAppGoodID sets the "required_app_good_id" field.
func (raguo *RequiredAppGoodUpdateOne) SetRequiredAppGoodID(u uuid.UUID) *RequiredAppGoodUpdateOne {
	raguo.mutation.SetRequiredAppGoodID(u)
	return raguo
}

// SetNillableRequiredAppGoodID sets the "required_app_good_id" field if the given value is not nil.
func (raguo *RequiredAppGoodUpdateOne) SetNillableRequiredAppGoodID(u *uuid.UUID) *RequiredAppGoodUpdateOne {
	if u != nil {
		raguo.SetRequiredAppGoodID(*u)
	}
	return raguo
}

// SetMust sets the "must" field.
func (raguo *RequiredAppGoodUpdateOne) SetMust(b bool) *RequiredAppGoodUpdateOne {
	raguo.mutation.SetMust(b)
	return raguo
}

// SetNillableMust sets the "must" field if the given value is not nil.
func (raguo *RequiredAppGoodUpdateOne) SetNillableMust(b *bool) *RequiredAppGoodUpdateOne {
	if b != nil {
		raguo.SetMust(*b)
	}
	return raguo
}

// ClearMust clears the value of the "must" field.
func (raguo *RequiredAppGoodUpdateOne) ClearMust() *RequiredAppGoodUpdateOne {
	raguo.mutation.ClearMust()
	return raguo
}

// Mutation returns the RequiredAppGoodMutation object of the builder.
func (raguo *RequiredAppGoodUpdateOne) Mutation() *RequiredAppGoodMutation {
	return raguo.mutation
}

// Where appends a list predicates to the RequiredAppGoodUpdate builder.
func (raguo *RequiredAppGoodUpdateOne) Where(ps ...predicate.RequiredAppGood) *RequiredAppGoodUpdateOne {
	raguo.mutation.Where(ps...)
	return raguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (raguo *RequiredAppGoodUpdateOne) Select(field string, fields ...string) *RequiredAppGoodUpdateOne {
	raguo.fields = append([]string{field}, fields...)
	return raguo
}

// Save executes the query and returns the updated RequiredAppGood entity.
func (raguo *RequiredAppGoodUpdateOne) Save(ctx context.Context) (*RequiredAppGood, error) {
	return withHooks(ctx, raguo.sqlSave, raguo.mutation, raguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (raguo *RequiredAppGoodUpdateOne) SaveX(ctx context.Context) *RequiredAppGood {
	node, err := raguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (raguo *RequiredAppGoodUpdateOne) Exec(ctx context.Context) error {
	_, err := raguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (raguo *RequiredAppGoodUpdateOne) ExecX(ctx context.Context) {
	if err := raguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (raguo *RequiredAppGoodUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RequiredAppGoodUpdateOne {
	raguo.modifiers = append(raguo.modifiers, modifiers...)
	return raguo
}

func (raguo *RequiredAppGoodUpdateOne) sqlSave(ctx context.Context) (_node *RequiredAppGood, err error) {
	_spec := sqlgraph.NewUpdateSpec(requiredappgood.Table, requiredappgood.Columns, sqlgraph.NewFieldSpec(requiredappgood.FieldID, field.TypeUint32))
	id, ok := raguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "RequiredAppGood.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := raguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, requiredappgood.FieldID)
		for _, f := range fields {
			if !requiredappgood.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != requiredappgood.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := raguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := raguo.mutation.EntID(); ok {
		_spec.SetField(requiredappgood.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := raguo.mutation.MainAppGoodID(); ok {
		_spec.SetField(requiredappgood.FieldMainAppGoodID, field.TypeUUID, value)
	}
	if value, ok := raguo.mutation.RequiredAppGoodID(); ok {
		_spec.SetField(requiredappgood.FieldRequiredAppGoodID, field.TypeUUID, value)
	}
	if value, ok := raguo.mutation.Must(); ok {
		_spec.SetField(requiredappgood.FieldMust, field.TypeBool, value)
	}
	if raguo.mutation.MustCleared() {
		_spec.ClearField(requiredappgood.FieldMust, field.TypeBool)
	}
	_spec.AddModifiers(raguo.modifiers...)
	_node = &RequiredAppGood{config: raguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, raguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{requiredappgood.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	raguo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/topmostgoodposter"
)

// TopMostGoodPosterDelete is the builder for deleting a TopMostGoodPoster entity.
type TopMostGoodPosterDelete struct {
	config
	hooks    []Hook
	mutation *TopMostGoodPosterMutation
}

// Where appends a list predicates to the TopMostGoodPosterDelete builder.
func (tmgpd *TopMostGoodPosterDelete) Where(ps ...predicate.TopMostGoodPoster) *TopMostGoodPosterDelete {
	tmgpd.mutation.Where(ps...)
	return tmgpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tmgpd *TopMostGoodPosterDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tmgpd.sqlExec, tmgpd.mutation, tmgpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tmgpd *TopMostGoodPosterDelete) ExecX(ctx context.Context) int {
	n, err := tmgpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tmgpd *TopMostGoodPosterDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(topmostgoodposter.Table, sqlgraph.NewFieldSpec(topmostgoodposter.FieldID, field.TypeUint32))
	if ps := tmgpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tmgpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tmgpd.mutation.done = true
	return affected, err
}

// TopMostGoodPosterDeleteOne is the builder for deleting a single TopMostGoodPoster entity.
type TopMostGoodPosterDeleteOne struct {
	tmgpd *TopMostGoodPosterDelete
}

// Where appends a list predicates to the TopMostGoodPosterDelete builder.
func (tmgpdo *TopMostGoodPosterDeleteOne) Where(ps ...predicate.TopMostGoodPoster) *TopMostGoodPosterDeleteOne {
	tmgpdo.tmgpd.mutation.Where(ps...)
	return tmgpdo
}

// Exec executes the deletion query.
func (tmgpdo *TopMostGoodPosterDeleteOne) Exec(ctx context.Context) error {
	n, err := tmgpdo.tmgpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{topmostgoodposter.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tmgpdo *TopMostGoodPosterDeleteOne) ExecX(ctx context.Context) {
	if err := tmgpdo.Exec(ctx); err != nil {
		panic(err)
	}
}

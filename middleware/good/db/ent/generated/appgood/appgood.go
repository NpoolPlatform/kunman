// Code generated by ent, DO NOT EDIT.

package appgood

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the appgood type in the database.
	Label = "app_good"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldGoodID holds the string denoting the good_id field in the database.
	FieldGoodID = "good_id"
	// FieldOnline holds the string denoting the online field in the database.
	FieldOnline = "online"
	// FieldVisible holds the string denoting the visible field in the database.
	FieldVisible = "visible"
	// FieldGoodName holds the string denoting the good_name field in the database.
	FieldGoodName = "good_name"
	// FieldUnitPrice holds the string denoting the unit_price field in the database.
	FieldUnitPrice = "unit_price"
	// FieldPackagePrice holds the string denoting the package_price field in the database.
	FieldPackagePrice = "package_price"
	// FieldDisplayIndex holds the string denoting the display_index field in the database.
	FieldDisplayIndex = "display_index"
	// FieldSaleStartAt holds the string denoting the sale_start_at field in the database.
	FieldSaleStartAt = "sale_start_at"
	// FieldSaleEndAt holds the string denoting the sale_end_at field in the database.
	FieldSaleEndAt = "sale_end_at"
	// FieldServiceStartAt holds the string denoting the service_start_at field in the database.
	FieldServiceStartAt = "service_start_at"
	// FieldTechnicalFeeRatio holds the string denoting the technical_fee_ratio field in the database.
	FieldTechnicalFeeRatio = "technical_fee_ratio"
	// FieldElectricityFeeRatio holds the string denoting the electricity_fee_ratio field in the database.
	FieldElectricityFeeRatio = "electricity_fee_ratio"
	// FieldDescriptions holds the string denoting the descriptions field in the database.
	FieldDescriptions = "descriptions"
	// FieldGoodBanner holds the string denoting the good_banner field in the database.
	FieldGoodBanner = "good_banner"
	// FieldDisplayNames holds the string denoting the display_names field in the database.
	FieldDisplayNames = "display_names"
	// FieldEnablePurchase holds the string denoting the enable_purchase field in the database.
	FieldEnablePurchase = "enable_purchase"
	// FieldEnableProductPage holds the string denoting the enable_product_page field in the database.
	FieldEnableProductPage = "enable_product_page"
	// FieldCancelMode holds the string denoting the cancel_mode field in the database.
	FieldCancelMode = "cancel_mode"
	// FieldDisplayColors holds the string denoting the display_colors field in the database.
	FieldDisplayColors = "display_colors"
	// FieldCancellableBeforeStart holds the string denoting the cancellable_before_start field in the database.
	FieldCancellableBeforeStart = "cancellable_before_start"
	// FieldProductPage holds the string denoting the product_page field in the database.
	FieldProductPage = "product_page"
	// FieldEnableSetCommission holds the string denoting the enable_set_commission field in the database.
	FieldEnableSetCommission = "enable_set_commission"
	// FieldPosters holds the string denoting the posters field in the database.
	FieldPosters = "posters"
	// FieldMinOrderAmount holds the string denoting the min_order_amount field in the database.
	FieldMinOrderAmount = "min_order_amount"
	// FieldMaxOrderAmount holds the string denoting the max_order_amount field in the database.
	FieldMaxOrderAmount = "max_order_amount"
	// FieldMaxUserAmount holds the string denoting the max_user_amount field in the database.
	FieldMaxUserAmount = "max_user_amount"
	// FieldMinOrderDuration holds the string denoting the min_order_duration field in the database.
	FieldMinOrderDuration = "min_order_duration"
	// FieldMaxOrderDuration holds the string denoting the max_order_duration field in the database.
	FieldMaxOrderDuration = "max_order_duration"
	// FieldPackageWithRequireds holds the string denoting the package_with_requireds field in the database.
	FieldPackageWithRequireds = "package_with_requireds"
	// Table holds the table name of the appgood in the database.
	Table = "app_goods"
)

// Columns holds all SQL columns for appgood fields.
var Columns = []string{
	FieldID,
	FieldEntID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldAppID,
	FieldGoodID,
	FieldOnline,
	FieldVisible,
	FieldGoodName,
	FieldUnitPrice,
	FieldPackagePrice,
	FieldDisplayIndex,
	FieldSaleStartAt,
	FieldSaleEndAt,
	FieldServiceStartAt,
	FieldTechnicalFeeRatio,
	FieldElectricityFeeRatio,
	FieldDescriptions,
	FieldGoodBanner,
	FieldDisplayNames,
	FieldEnablePurchase,
	FieldEnableProductPage,
	FieldCancelMode,
	FieldDisplayColors,
	FieldCancellableBeforeStart,
	FieldProductPage,
	FieldEnableSetCommission,
	FieldPosters,
	FieldMinOrderAmount,
	FieldMaxOrderAmount,
	FieldMaxUserAmount,
	FieldMinOrderDuration,
	FieldMaxOrderDuration,
	FieldPackageWithRequireds,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() uint32
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() uint32
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() uint32
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt func() uint32
	// DefaultOnline holds the default value on creation for the "online" field.
	DefaultOnline bool
	// DefaultVisible holds the default value on creation for the "visible" field.
	DefaultVisible bool
	// DefaultGoodName holds the default value on creation for the "good_name" field.
	DefaultGoodName string
	// DefaultUnitPrice holds the default value on creation for the "unit_price" field.
	DefaultUnitPrice decimal.Decimal
	// DefaultPackagePrice holds the default value on creation for the "package_price" field.
	DefaultPackagePrice decimal.Decimal
	// DefaultDisplayIndex holds the default value on creation for the "display_index" field.
	DefaultDisplayIndex int32
	// DefaultSaleStartAt holds the default value on creation for the "sale_start_at" field.
	DefaultSaleStartAt uint32
	// DefaultSaleEndAt holds the default value on creation for the "sale_end_at" field.
	DefaultSaleEndAt uint32
	// DefaultServiceStartAt holds the default value on creation for the "service_start_at" field.
	DefaultServiceStartAt uint32
	// DefaultTechnicalFeeRatio holds the default value on creation for the "technical_fee_ratio" field.
	DefaultTechnicalFeeRatio decimal.Decimal
	// DefaultElectricityFeeRatio holds the default value on creation for the "electricity_fee_ratio" field.
	DefaultElectricityFeeRatio decimal.Decimal
	// DefaultDescriptions holds the default value on creation for the "descriptions" field.
	DefaultDescriptions []string
	// DefaultGoodBanner holds the default value on creation for the "good_banner" field.
	DefaultGoodBanner string
	// DefaultDisplayNames holds the default value on creation for the "display_names" field.
	DefaultDisplayNames []string
	// DefaultEnablePurchase holds the default value on creation for the "enable_purchase" field.
	DefaultEnablePurchase bool
	// DefaultEnableProductPage holds the default value on creation for the "enable_product_page" field.
	DefaultEnableProductPage bool
	// DefaultCancelMode holds the default value on creation for the "cancel_mode" field.
	DefaultCancelMode string
	// DefaultDisplayColors holds the default value on creation for the "display_colors" field.
	DefaultDisplayColors []string
	// DefaultCancellableBeforeStart holds the default value on creation for the "cancellable_before_start" field.
	DefaultCancellableBeforeStart uint32
	// DefaultProductPage holds the default value on creation for the "product_page" field.
	DefaultProductPage string
	// DefaultEnableSetCommission holds the default value on creation for the "enable_set_commission" field.
	DefaultEnableSetCommission bool
	// DefaultPosters holds the default value on creation for the "posters" field.
	DefaultPosters []string
	// DefaultMinOrderAmount holds the default value on creation for the "min_order_amount" field.
	DefaultMinOrderAmount decimal.Decimal
	// DefaultMaxOrderAmount holds the default value on creation for the "max_order_amount" field.
	DefaultMaxOrderAmount decimal.Decimal
	// DefaultMaxUserAmount holds the default value on creation for the "max_user_amount" field.
	DefaultMaxUserAmount decimal.Decimal
	// DefaultMinOrderDuration holds the default value on creation for the "min_order_duration" field.
	DefaultMinOrderDuration uint32
	// DefaultMaxOrderDuration holds the default value on creation for the "max_order_duration" field.
	DefaultMaxOrderDuration uint32
	// DefaultPackageWithRequireds holds the default value on creation for the "package_with_requireds" field.
	DefaultPackageWithRequireds bool
)

// OrderOption defines the ordering options for the AppGood queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByAppID orders the results by the app_id field.
func ByAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppID, opts...).ToFunc()
}

// ByGoodID orders the results by the good_id field.
func ByGoodID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodID, opts...).ToFunc()
}

// ByOnline orders the results by the online field.
func ByOnline(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOnline, opts...).ToFunc()
}

// ByVisible orders the results by the visible field.
func ByVisible(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVisible, opts...).ToFunc()
}

// ByGoodName orders the results by the good_name field.
func ByGoodName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodName, opts...).ToFunc()
}

// ByUnitPrice orders the results by the unit_price field.
func ByUnitPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitPrice, opts...).ToFunc()
}

// ByPackagePrice orders the results by the package_price field.
func ByPackagePrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPackagePrice, opts...).ToFunc()
}

// ByDisplayIndex orders the results by the display_index field.
func ByDisplayIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayIndex, opts...).ToFunc()
}

// BySaleStartAt orders the results by the sale_start_at field.
func BySaleStartAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSaleStartAt, opts...).ToFunc()
}

// BySaleEndAt orders the results by the sale_end_at field.
func BySaleEndAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSaleEndAt, opts...).ToFunc()
}

// ByServiceStartAt orders the results by the service_start_at field.
func ByServiceStartAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServiceStartAt, opts...).ToFunc()
}

// ByTechnicalFeeRatio orders the results by the technical_fee_ratio field.
func ByTechnicalFeeRatio(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTechnicalFeeRatio, opts...).ToFunc()
}

// ByElectricityFeeRatio orders the results by the electricity_fee_ratio field.
func ByElectricityFeeRatio(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldElectricityFeeRatio, opts...).ToFunc()
}

// ByGoodBanner orders the results by the good_banner field.
func ByGoodBanner(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodBanner, opts...).ToFunc()
}

// ByEnablePurchase orders the results by the enable_purchase field.
func ByEnablePurchase(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnablePurchase, opts...).ToFunc()
}

// ByEnableProductPage orders the results by the enable_product_page field.
func ByEnableProductPage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnableProductPage, opts...).ToFunc()
}

// ByCancelMode orders the results by the cancel_mode field.
func ByCancelMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCancelMode, opts...).ToFunc()
}

// ByCancellableBeforeStart orders the results by the cancellable_before_start field.
func ByCancellableBeforeStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCancellableBeforeStart, opts...).ToFunc()
}

// ByProductPage orders the results by the product_page field.
func ByProductPage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductPage, opts...).ToFunc()
}

// ByEnableSetCommission orders the results by the enable_set_commission field.
func ByEnableSetCommission(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnableSetCommission, opts...).ToFunc()
}

// ByMinOrderAmount orders the results by the min_order_amount field.
func ByMinOrderAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinOrderAmount, opts...).ToFunc()
}

// ByMaxOrderAmount orders the results by the max_order_amount field.
func ByMaxOrderAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxOrderAmount, opts...).ToFunc()
}

// ByMaxUserAmount orders the results by the max_user_amount field.
func ByMaxUserAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxUserAmount, opts...).ToFunc()
}

// ByMinOrderDuration orders the results by the min_order_duration field.
func ByMinOrderDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinOrderDuration, opts...).ToFunc()
}

// ByMaxOrderDuration orders the results by the max_order_duration field.
func ByMaxOrderDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxOrderDuration, opts...).ToFunc()
}

// ByPackageWithRequireds orders the results by the package_with_requireds field.
func ByPackageWithRequireds(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPackageWithRequireds, opts...).ToFunc()
}

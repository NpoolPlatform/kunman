// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/goodbase"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// GoodBaseUpdate is the builder for updating GoodBase entities.
type GoodBaseUpdate struct {
	config
	hooks     []Hook
	mutation  *GoodBaseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GoodBaseUpdate builder.
func (gbu *GoodBaseUpdate) Where(ps ...predicate.GoodBase) *GoodBaseUpdate {
	gbu.mutation.Where(ps...)
	return gbu
}

// SetEntID sets the "ent_id" field.
func (gbu *GoodBaseUpdate) SetEntID(u uuid.UUID) *GoodBaseUpdate {
	gbu.mutation.SetEntID(u)
	return gbu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (gbu *GoodBaseUpdate) SetNillableEntID(u *uuid.UUID) *GoodBaseUpdate {
	if u != nil {
		gbu.SetEntID(*u)
	}
	return gbu
}

// SetGoodType sets the "good_type" field.
func (gbu *GoodBaseUpdate) SetGoodType(s string) *GoodBaseUpdate {
	gbu.mutation.SetGoodType(s)
	return gbu
}

// SetNillableGoodType sets the "good_type" field if the given value is not nil.
func (gbu *GoodBaseUpdate) SetNillableGoodType(s *string) *GoodBaseUpdate {
	if s != nil {
		gbu.SetGoodType(*s)
	}
	return gbu
}

// ClearGoodType clears the value of the "good_type" field.
func (gbu *GoodBaseUpdate) ClearGoodType() *GoodBaseUpdate {
	gbu.mutation.ClearGoodType()
	return gbu
}

// SetBenefitType sets the "benefit_type" field.
func (gbu *GoodBaseUpdate) SetBenefitType(s string) *GoodBaseUpdate {
	gbu.mutation.SetBenefitType(s)
	return gbu
}

// SetNillableBenefitType sets the "benefit_type" field if the given value is not nil.
func (gbu *GoodBaseUpdate) SetNillableBenefitType(s *string) *GoodBaseUpdate {
	if s != nil {
		gbu.SetBenefitType(*s)
	}
	return gbu
}

// ClearBenefitType clears the value of the "benefit_type" field.
func (gbu *GoodBaseUpdate) ClearBenefitType() *GoodBaseUpdate {
	gbu.mutation.ClearBenefitType()
	return gbu
}

// SetName sets the "name" field.
func (gbu *GoodBaseUpdate) SetName(s string) *GoodBaseUpdate {
	gbu.mutation.SetName(s)
	return gbu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gbu *GoodBaseUpdate) SetNillableName(s *string) *GoodBaseUpdate {
	if s != nil {
		gbu.SetName(*s)
	}
	return gbu
}

// ClearName clears the value of the "name" field.
func (gbu *GoodBaseUpdate) ClearName() *GoodBaseUpdate {
	gbu.mutation.ClearName()
	return gbu
}

// SetServiceStartAt sets the "service_start_at" field.
func (gbu *GoodBaseUpdate) SetServiceStartAt(u uint32) *GoodBaseUpdate {
	gbu.mutation.ResetServiceStartAt()
	gbu.mutation.SetServiceStartAt(u)
	return gbu
}

// SetNillableServiceStartAt sets the "service_start_at" field if the given value is not nil.
func (gbu *GoodBaseUpdate) SetNillableServiceStartAt(u *uint32) *GoodBaseUpdate {
	if u != nil {
		gbu.SetServiceStartAt(*u)
	}
	return gbu
}

// AddServiceStartAt adds u to the "service_start_at" field.
func (gbu *GoodBaseUpdate) AddServiceStartAt(u int32) *GoodBaseUpdate {
	gbu.mutation.AddServiceStartAt(u)
	return gbu
}

// ClearServiceStartAt clears the value of the "service_start_at" field.
func (gbu *GoodBaseUpdate) ClearServiceStartAt() *GoodBaseUpdate {
	gbu.mutation.ClearServiceStartAt()
	return gbu
}

// SetStartMode sets the "start_mode" field.
func (gbu *GoodBaseUpdate) SetStartMode(s string) *GoodBaseUpdate {
	gbu.mutation.SetStartMode(s)
	return gbu
}

// SetNillableStartMode sets the "start_mode" field if the given value is not nil.
func (gbu *GoodBaseUpdate) SetNillableStartMode(s *string) *GoodBaseUpdate {
	if s != nil {
		gbu.SetStartMode(*s)
	}
	return gbu
}

// ClearStartMode clears the value of the "start_mode" field.
func (gbu *GoodBaseUpdate) ClearStartMode() *GoodBaseUpdate {
	gbu.mutation.ClearStartMode()
	return gbu
}

// SetTestOnly sets the "test_only" field.
func (gbu *GoodBaseUpdate) SetTestOnly(b bool) *GoodBaseUpdate {
	gbu.mutation.SetTestOnly(b)
	return gbu
}

// SetNillableTestOnly sets the "test_only" field if the given value is not nil.
func (gbu *GoodBaseUpdate) SetNillableTestOnly(b *bool) *GoodBaseUpdate {
	if b != nil {
		gbu.SetTestOnly(*b)
	}
	return gbu
}

// ClearTestOnly clears the value of the "test_only" field.
func (gbu *GoodBaseUpdate) ClearTestOnly() *GoodBaseUpdate {
	gbu.mutation.ClearTestOnly()
	return gbu
}

// SetBenefitIntervalHours sets the "benefit_interval_hours" field.
func (gbu *GoodBaseUpdate) SetBenefitIntervalHours(u uint32) *GoodBaseUpdate {
	gbu.mutation.ResetBenefitIntervalHours()
	gbu.mutation.SetBenefitIntervalHours(u)
	return gbu
}

// SetNillableBenefitIntervalHours sets the "benefit_interval_hours" field if the given value is not nil.
func (gbu *GoodBaseUpdate) SetNillableBenefitIntervalHours(u *uint32) *GoodBaseUpdate {
	if u != nil {
		gbu.SetBenefitIntervalHours(*u)
	}
	return gbu
}

// AddBenefitIntervalHours adds u to the "benefit_interval_hours" field.
func (gbu *GoodBaseUpdate) AddBenefitIntervalHours(u int32) *GoodBaseUpdate {
	gbu.mutation.AddBenefitIntervalHours(u)
	return gbu
}

// ClearBenefitIntervalHours clears the value of the "benefit_interval_hours" field.
func (gbu *GoodBaseUpdate) ClearBenefitIntervalHours() *GoodBaseUpdate {
	gbu.mutation.ClearBenefitIntervalHours()
	return gbu
}

// SetPurchasable sets the "purchasable" field.
func (gbu *GoodBaseUpdate) SetPurchasable(b bool) *GoodBaseUpdate {
	gbu.mutation.SetPurchasable(b)
	return gbu
}

// SetNillablePurchasable sets the "purchasable" field if the given value is not nil.
func (gbu *GoodBaseUpdate) SetNillablePurchasable(b *bool) *GoodBaseUpdate {
	if b != nil {
		gbu.SetPurchasable(*b)
	}
	return gbu
}

// ClearPurchasable clears the value of the "purchasable" field.
func (gbu *GoodBaseUpdate) ClearPurchasable() *GoodBaseUpdate {
	gbu.mutation.ClearPurchasable()
	return gbu
}

// SetOnline sets the "online" field.
func (gbu *GoodBaseUpdate) SetOnline(b bool) *GoodBaseUpdate {
	gbu.mutation.SetOnline(b)
	return gbu
}

// SetNillableOnline sets the "online" field if the given value is not nil.
func (gbu *GoodBaseUpdate) SetNillableOnline(b *bool) *GoodBaseUpdate {
	if b != nil {
		gbu.SetOnline(*b)
	}
	return gbu
}

// ClearOnline clears the value of the "online" field.
func (gbu *GoodBaseUpdate) ClearOnline() *GoodBaseUpdate {
	gbu.mutation.ClearOnline()
	return gbu
}

// SetState sets the "state" field.
func (gbu *GoodBaseUpdate) SetState(s string) *GoodBaseUpdate {
	gbu.mutation.SetState(s)
	return gbu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (gbu *GoodBaseUpdate) SetNillableState(s *string) *GoodBaseUpdate {
	if s != nil {
		gbu.SetState(*s)
	}
	return gbu
}

// ClearState clears the value of the "state" field.
func (gbu *GoodBaseUpdate) ClearState() *GoodBaseUpdate {
	gbu.mutation.ClearState()
	return gbu
}

// Mutation returns the GoodBaseMutation object of the builder.
func (gbu *GoodBaseUpdate) Mutation() *GoodBaseMutation {
	return gbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gbu *GoodBaseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gbu.sqlSave, gbu.mutation, gbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gbu *GoodBaseUpdate) SaveX(ctx context.Context) int {
	affected, err := gbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gbu *GoodBaseUpdate) Exec(ctx context.Context) error {
	_, err := gbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gbu *GoodBaseUpdate) ExecX(ctx context.Context) {
	if err := gbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gbu *GoodBaseUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GoodBaseUpdate {
	gbu.modifiers = append(gbu.modifiers, modifiers...)
	return gbu
}

func (gbu *GoodBaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(goodbase.Table, goodbase.Columns, sqlgraph.NewFieldSpec(goodbase.FieldID, field.TypeUint32))
	if ps := gbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gbu.mutation.EntID(); ok {
		_spec.SetField(goodbase.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := gbu.mutation.GoodType(); ok {
		_spec.SetField(goodbase.FieldGoodType, field.TypeString, value)
	}
	if gbu.mutation.GoodTypeCleared() {
		_spec.ClearField(goodbase.FieldGoodType, field.TypeString)
	}
	if value, ok := gbu.mutation.BenefitType(); ok {
		_spec.SetField(goodbase.FieldBenefitType, field.TypeString, value)
	}
	if gbu.mutation.BenefitTypeCleared() {
		_spec.ClearField(goodbase.FieldBenefitType, field.TypeString)
	}
	if value, ok := gbu.mutation.Name(); ok {
		_spec.SetField(goodbase.FieldName, field.TypeString, value)
	}
	if gbu.mutation.NameCleared() {
		_spec.ClearField(goodbase.FieldName, field.TypeString)
	}
	if value, ok := gbu.mutation.ServiceStartAt(); ok {
		_spec.SetField(goodbase.FieldServiceStartAt, field.TypeUint32, value)
	}
	if value, ok := gbu.mutation.AddedServiceStartAt(); ok {
		_spec.AddField(goodbase.FieldServiceStartAt, field.TypeUint32, value)
	}
	if gbu.mutation.ServiceStartAtCleared() {
		_spec.ClearField(goodbase.FieldServiceStartAt, field.TypeUint32)
	}
	if value, ok := gbu.mutation.StartMode(); ok {
		_spec.SetField(goodbase.FieldStartMode, field.TypeString, value)
	}
	if gbu.mutation.StartModeCleared() {
		_spec.ClearField(goodbase.FieldStartMode, field.TypeString)
	}
	if value, ok := gbu.mutation.TestOnly(); ok {
		_spec.SetField(goodbase.FieldTestOnly, field.TypeBool, value)
	}
	if gbu.mutation.TestOnlyCleared() {
		_spec.ClearField(goodbase.FieldTestOnly, field.TypeBool)
	}
	if value, ok := gbu.mutation.BenefitIntervalHours(); ok {
		_spec.SetField(goodbase.FieldBenefitIntervalHours, field.TypeUint32, value)
	}
	if value, ok := gbu.mutation.AddedBenefitIntervalHours(); ok {
		_spec.AddField(goodbase.FieldBenefitIntervalHours, field.TypeUint32, value)
	}
	if gbu.mutation.BenefitIntervalHoursCleared() {
		_spec.ClearField(goodbase.FieldBenefitIntervalHours, field.TypeUint32)
	}
	if value, ok := gbu.mutation.Purchasable(); ok {
		_spec.SetField(goodbase.FieldPurchasable, field.TypeBool, value)
	}
	if gbu.mutation.PurchasableCleared() {
		_spec.ClearField(goodbase.FieldPurchasable, field.TypeBool)
	}
	if value, ok := gbu.mutation.Online(); ok {
		_spec.SetField(goodbase.FieldOnline, field.TypeBool, value)
	}
	if gbu.mutation.OnlineCleared() {
		_spec.ClearField(goodbase.FieldOnline, field.TypeBool)
	}
	if value, ok := gbu.mutation.State(); ok {
		_spec.SetField(goodbase.FieldState, field.TypeString, value)
	}
	if gbu.mutation.StateCleared() {
		_spec.ClearField(goodbase.FieldState, field.TypeString)
	}
	_spec.AddModifiers(gbu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, gbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodbase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gbu.mutation.done = true
	return n, nil
}

// GoodBaseUpdateOne is the builder for updating a single GoodBase entity.
type GoodBaseUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GoodBaseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (gbuo *GoodBaseUpdateOne) SetEntID(u uuid.UUID) *GoodBaseUpdateOne {
	gbuo.mutation.SetEntID(u)
	return gbuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (gbuo *GoodBaseUpdateOne) SetNillableEntID(u *uuid.UUID) *GoodBaseUpdateOne {
	if u != nil {
		gbuo.SetEntID(*u)
	}
	return gbuo
}

// SetGoodType sets the "good_type" field.
func (gbuo *GoodBaseUpdateOne) SetGoodType(s string) *GoodBaseUpdateOne {
	gbuo.mutation.SetGoodType(s)
	return gbuo
}

// SetNillableGoodType sets the "good_type" field if the given value is not nil.
func (gbuo *GoodBaseUpdateOne) SetNillableGoodType(s *string) *GoodBaseUpdateOne {
	if s != nil {
		gbuo.SetGoodType(*s)
	}
	return gbuo
}

// ClearGoodType clears the value of the "good_type" field.
func (gbuo *GoodBaseUpdateOne) ClearGoodType() *GoodBaseUpdateOne {
	gbuo.mutation.ClearGoodType()
	return gbuo
}

// SetBenefitType sets the "benefit_type" field.
func (gbuo *GoodBaseUpdateOne) SetBenefitType(s string) *GoodBaseUpdateOne {
	gbuo.mutation.SetBenefitType(s)
	return gbuo
}

// SetNillableBenefitType sets the "benefit_type" field if the given value is not nil.
func (gbuo *GoodBaseUpdateOne) SetNillableBenefitType(s *string) *GoodBaseUpdateOne {
	if s != nil {
		gbuo.SetBenefitType(*s)
	}
	return gbuo
}

// ClearBenefitType clears the value of the "benefit_type" field.
func (gbuo *GoodBaseUpdateOne) ClearBenefitType() *GoodBaseUpdateOne {
	gbuo.mutation.ClearBenefitType()
	return gbuo
}

// SetName sets the "name" field.
func (gbuo *GoodBaseUpdateOne) SetName(s string) *GoodBaseUpdateOne {
	gbuo.mutation.SetName(s)
	return gbuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gbuo *GoodBaseUpdateOne) SetNillableName(s *string) *GoodBaseUpdateOne {
	if s != nil {
		gbuo.SetName(*s)
	}
	return gbuo
}

// ClearName clears the value of the "name" field.
func (gbuo *GoodBaseUpdateOne) ClearName() *GoodBaseUpdateOne {
	gbuo.mutation.ClearName()
	return gbuo
}

// SetServiceStartAt sets the "service_start_at" field.
func (gbuo *GoodBaseUpdateOne) SetServiceStartAt(u uint32) *GoodBaseUpdateOne {
	gbuo.mutation.ResetServiceStartAt()
	gbuo.mutation.SetServiceStartAt(u)
	return gbuo
}

// SetNillableServiceStartAt sets the "service_start_at" field if the given value is not nil.
func (gbuo *GoodBaseUpdateOne) SetNillableServiceStartAt(u *uint32) *GoodBaseUpdateOne {
	if u != nil {
		gbuo.SetServiceStartAt(*u)
	}
	return gbuo
}

// AddServiceStartAt adds u to the "service_start_at" field.
func (gbuo *GoodBaseUpdateOne) AddServiceStartAt(u int32) *GoodBaseUpdateOne {
	gbuo.mutation.AddServiceStartAt(u)
	return gbuo
}

// ClearServiceStartAt clears the value of the "service_start_at" field.
func (gbuo *GoodBaseUpdateOne) ClearServiceStartAt() *GoodBaseUpdateOne {
	gbuo.mutation.ClearServiceStartAt()
	return gbuo
}

// SetStartMode sets the "start_mode" field.
func (gbuo *GoodBaseUpdateOne) SetStartMode(s string) *GoodBaseUpdateOne {
	gbuo.mutation.SetStartMode(s)
	return gbuo
}

// SetNillableStartMode sets the "start_mode" field if the given value is not nil.
func (gbuo *GoodBaseUpdateOne) SetNillableStartMode(s *string) *GoodBaseUpdateOne {
	if s != nil {
		gbuo.SetStartMode(*s)
	}
	return gbuo
}

// ClearStartMode clears the value of the "start_mode" field.
func (gbuo *GoodBaseUpdateOne) ClearStartMode() *GoodBaseUpdateOne {
	gbuo.mutation.ClearStartMode()
	return gbuo
}

// SetTestOnly sets the "test_only" field.
func (gbuo *GoodBaseUpdateOne) SetTestOnly(b bool) *GoodBaseUpdateOne {
	gbuo.mutation.SetTestOnly(b)
	return gbuo
}

// SetNillableTestOnly sets the "test_only" field if the given value is not nil.
func (gbuo *GoodBaseUpdateOne) SetNillableTestOnly(b *bool) *GoodBaseUpdateOne {
	if b != nil {
		gbuo.SetTestOnly(*b)
	}
	return gbuo
}

// ClearTestOnly clears the value of the "test_only" field.
func (gbuo *GoodBaseUpdateOne) ClearTestOnly() *GoodBaseUpdateOne {
	gbuo.mutation.ClearTestOnly()
	return gbuo
}

// SetBenefitIntervalHours sets the "benefit_interval_hours" field.
func (gbuo *GoodBaseUpdateOne) SetBenefitIntervalHours(u uint32) *GoodBaseUpdateOne {
	gbuo.mutation.ResetBenefitIntervalHours()
	gbuo.mutation.SetBenefitIntervalHours(u)
	return gbuo
}

// SetNillableBenefitIntervalHours sets the "benefit_interval_hours" field if the given value is not nil.
func (gbuo *GoodBaseUpdateOne) SetNillableBenefitIntervalHours(u *uint32) *GoodBaseUpdateOne {
	if u != nil {
		gbuo.SetBenefitIntervalHours(*u)
	}
	return gbuo
}

// AddBenefitIntervalHours adds u to the "benefit_interval_hours" field.
func (gbuo *GoodBaseUpdateOne) AddBenefitIntervalHours(u int32) *GoodBaseUpdateOne {
	gbuo.mutation.AddBenefitIntervalHours(u)
	return gbuo
}

// ClearBenefitIntervalHours clears the value of the "benefit_interval_hours" field.
func (gbuo *GoodBaseUpdateOne) ClearBenefitIntervalHours() *GoodBaseUpdateOne {
	gbuo.mutation.ClearBenefitIntervalHours()
	return gbuo
}

// SetPurchasable sets the "purchasable" field.
func (gbuo *GoodBaseUpdateOne) SetPurchasable(b bool) *GoodBaseUpdateOne {
	gbuo.mutation.SetPurchasable(b)
	return gbuo
}

// SetNillablePurchasable sets the "purchasable" field if the given value is not nil.
func (gbuo *GoodBaseUpdateOne) SetNillablePurchasable(b *bool) *GoodBaseUpdateOne {
	if b != nil {
		gbuo.SetPurchasable(*b)
	}
	return gbuo
}

// ClearPurchasable clears the value of the "purchasable" field.
func (gbuo *GoodBaseUpdateOne) ClearPurchasable() *GoodBaseUpdateOne {
	gbuo.mutation.ClearPurchasable()
	return gbuo
}

// SetOnline sets the "online" field.
func (gbuo *GoodBaseUpdateOne) SetOnline(b bool) *GoodBaseUpdateOne {
	gbuo.mutation.SetOnline(b)
	return gbuo
}

// SetNillableOnline sets the "online" field if the given value is not nil.
func (gbuo *GoodBaseUpdateOne) SetNillableOnline(b *bool) *GoodBaseUpdateOne {
	if b != nil {
		gbuo.SetOnline(*b)
	}
	return gbuo
}

// ClearOnline clears the value of the "online" field.
func (gbuo *GoodBaseUpdateOne) ClearOnline() *GoodBaseUpdateOne {
	gbuo.mutation.ClearOnline()
	return gbuo
}

// SetState sets the "state" field.
func (gbuo *GoodBaseUpdateOne) SetState(s string) *GoodBaseUpdateOne {
	gbuo.mutation.SetState(s)
	return gbuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (gbuo *GoodBaseUpdateOne) SetNillableState(s *string) *GoodBaseUpdateOne {
	if s != nil {
		gbuo.SetState(*s)
	}
	return gbuo
}

// ClearState clears the value of the "state" field.
func (gbuo *GoodBaseUpdateOne) ClearState() *GoodBaseUpdateOne {
	gbuo.mutation.ClearState()
	return gbuo
}

// Mutation returns the GoodBaseMutation object of the builder.
func (gbuo *GoodBaseUpdateOne) Mutation() *GoodBaseMutation {
	return gbuo.mutation
}

// Where appends a list predicates to the GoodBaseUpdate builder.
func (gbuo *GoodBaseUpdateOne) Where(ps ...predicate.GoodBase) *GoodBaseUpdateOne {
	gbuo.mutation.Where(ps...)
	return gbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gbuo *GoodBaseUpdateOne) Select(field string, fields ...string) *GoodBaseUpdateOne {
	gbuo.fields = append([]string{field}, fields...)
	return gbuo
}

// Save executes the query and returns the updated GoodBase entity.
func (gbuo *GoodBaseUpdateOne) Save(ctx context.Context) (*GoodBase, error) {
	return withHooks(ctx, gbuo.sqlSave, gbuo.mutation, gbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gbuo *GoodBaseUpdateOne) SaveX(ctx context.Context) *GoodBase {
	node, err := gbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gbuo *GoodBaseUpdateOne) Exec(ctx context.Context) error {
	_, err := gbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gbuo *GoodBaseUpdateOne) ExecX(ctx context.Context) {
	if err := gbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gbuo *GoodBaseUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GoodBaseUpdateOne {
	gbuo.modifiers = append(gbuo.modifiers, modifiers...)
	return gbuo
}

func (gbuo *GoodBaseUpdateOne) sqlSave(ctx context.Context) (_node *GoodBase, err error) {
	_spec := sqlgraph.NewUpdateSpec(goodbase.Table, goodbase.Columns, sqlgraph.NewFieldSpec(goodbase.FieldID, field.TypeUint32))
	id, ok := gbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "GoodBase.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodbase.FieldID)
		for _, f := range fields {
			if !goodbase.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != goodbase.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gbuo.mutation.EntID(); ok {
		_spec.SetField(goodbase.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := gbuo.mutation.GoodType(); ok {
		_spec.SetField(goodbase.FieldGoodType, field.TypeString, value)
	}
	if gbuo.mutation.GoodTypeCleared() {
		_spec.ClearField(goodbase.FieldGoodType, field.TypeString)
	}
	if value, ok := gbuo.mutation.BenefitType(); ok {
		_spec.SetField(goodbase.FieldBenefitType, field.TypeString, value)
	}
	if gbuo.mutation.BenefitTypeCleared() {
		_spec.ClearField(goodbase.FieldBenefitType, field.TypeString)
	}
	if value, ok := gbuo.mutation.Name(); ok {
		_spec.SetField(goodbase.FieldName, field.TypeString, value)
	}
	if gbuo.mutation.NameCleared() {
		_spec.ClearField(goodbase.FieldName, field.TypeString)
	}
	if value, ok := gbuo.mutation.ServiceStartAt(); ok {
		_spec.SetField(goodbase.FieldServiceStartAt, field.TypeUint32, value)
	}
	if value, ok := gbuo.mutation.AddedServiceStartAt(); ok {
		_spec.AddField(goodbase.FieldServiceStartAt, field.TypeUint32, value)
	}
	if gbuo.mutation.ServiceStartAtCleared() {
		_spec.ClearField(goodbase.FieldServiceStartAt, field.TypeUint32)
	}
	if value, ok := gbuo.mutation.StartMode(); ok {
		_spec.SetField(goodbase.FieldStartMode, field.TypeString, value)
	}
	if gbuo.mutation.StartModeCleared() {
		_spec.ClearField(goodbase.FieldStartMode, field.TypeString)
	}
	if value, ok := gbuo.mutation.TestOnly(); ok {
		_spec.SetField(goodbase.FieldTestOnly, field.TypeBool, value)
	}
	if gbuo.mutation.TestOnlyCleared() {
		_spec.ClearField(goodbase.FieldTestOnly, field.TypeBool)
	}
	if value, ok := gbuo.mutation.BenefitIntervalHours(); ok {
		_spec.SetField(goodbase.FieldBenefitIntervalHours, field.TypeUint32, value)
	}
	if value, ok := gbuo.mutation.AddedBenefitIntervalHours(); ok {
		_spec.AddField(goodbase.FieldBenefitIntervalHours, field.TypeUint32, value)
	}
	if gbuo.mutation.BenefitIntervalHoursCleared() {
		_spec.ClearField(goodbase.FieldBenefitIntervalHours, field.TypeUint32)
	}
	if value, ok := gbuo.mutation.Purchasable(); ok {
		_spec.SetField(goodbase.FieldPurchasable, field.TypeBool, value)
	}
	if gbuo.mutation.PurchasableCleared() {
		_spec.ClearField(goodbase.FieldPurchasable, field.TypeBool)
	}
	if value, ok := gbuo.mutation.Online(); ok {
		_spec.SetField(goodbase.FieldOnline, field.TypeBool, value)
	}
	if gbuo.mutation.OnlineCleared() {
		_spec.ClearField(goodbase.FieldOnline, field.TypeBool)
	}
	if value, ok := gbuo.mutation.State(); ok {
		_spec.SetField(goodbase.FieldState, field.TypeString, value)
	}
	if gbuo.mutation.StateCleared() {
		_spec.ClearField(goodbase.FieldState, field.TypeString)
	}
	_spec.AddModifiers(gbuo.modifiers...)
	_node = &GoodBase{config: gbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodbase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gbuo.mutation.done = true
	return _node, nil
}

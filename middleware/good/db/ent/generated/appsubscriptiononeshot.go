// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appsubscriptiononeshot"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppSubscriptionOneShot is the model entity for the AppSubscriptionOneShot schema.
type AppSubscriptionOneShot struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// AppGoodID holds the value of the "app_good_id" field.
	AppGoodID uuid.UUID `json:"app_good_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Banner holds the value of the "banner" field.
	Banner string `json:"banner,omitempty"`
	// UsdPrice holds the value of the "usd_price" field.
	UsdPrice     decimal.Decimal `json:"usd_price,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppSubscriptionOneShot) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appsubscriptiononeshot.FieldUsdPrice:
			values[i] = new(decimal.Decimal)
		case appsubscriptiononeshot.FieldID:
			values[i] = new(sql.NullInt64)
		case appsubscriptiononeshot.FieldName, appsubscriptiononeshot.FieldBanner:
			values[i] = new(sql.NullString)
		case appsubscriptiononeshot.FieldEntID, appsubscriptiononeshot.FieldAppID, appsubscriptiononeshot.FieldGoodID, appsubscriptiononeshot.FieldAppGoodID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppSubscriptionOneShot fields.
func (asos *AppSubscriptionOneShot) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appsubscriptiononeshot.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			asos.ID = uint32(value.Int64)
		case appsubscriptiononeshot.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				asos.EntID = *value
			}
		case appsubscriptiononeshot.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				asos.AppID = *value
			}
		case appsubscriptiononeshot.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				asos.GoodID = *value
			}
		case appsubscriptiononeshot.FieldAppGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_good_id", values[i])
			} else if value != nil {
				asos.AppGoodID = *value
			}
		case appsubscriptiononeshot.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				asos.Name = value.String
			}
		case appsubscriptiononeshot.FieldBanner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field banner", values[i])
			} else if value.Valid {
				asos.Banner = value.String
			}
		case appsubscriptiononeshot.FieldUsdPrice:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field usd_price", values[i])
			} else if value != nil {
				asos.UsdPrice = *value
			}
		default:
			asos.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppSubscriptionOneShot.
// This includes values selected through modifiers, order, etc.
func (asos *AppSubscriptionOneShot) Value(name string) (ent.Value, error) {
	return asos.selectValues.Get(name)
}

// Update returns a builder for updating this AppSubscriptionOneShot.
// Note that you need to call AppSubscriptionOneShot.Unwrap() before calling this method if this AppSubscriptionOneShot
// was returned from a transaction, and the transaction was committed or rolled back.
func (asos *AppSubscriptionOneShot) Update() *AppSubscriptionOneShotUpdateOne {
	return NewAppSubscriptionOneShotClient(asos.config).UpdateOne(asos)
}

// Unwrap unwraps the AppSubscriptionOneShot entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (asos *AppSubscriptionOneShot) Unwrap() *AppSubscriptionOneShot {
	_tx, ok := asos.config.driver.(*txDriver)
	if !ok {
		panic("generated: AppSubscriptionOneShot is not a transactional entity")
	}
	asos.config.driver = _tx.drv
	return asos
}

// String implements the fmt.Stringer.
func (asos *AppSubscriptionOneShot) String() string {
	var builder strings.Builder
	builder.WriteString("AppSubscriptionOneShot(")
	builder.WriteString(fmt.Sprintf("id=%v, ", asos.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", asos.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", asos.AppID))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", asos.GoodID))
	builder.WriteString(", ")
	builder.WriteString("app_good_id=")
	builder.WriteString(fmt.Sprintf("%v", asos.AppGoodID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(asos.Name)
	builder.WriteString(", ")
	builder.WriteString("banner=")
	builder.WriteString(asos.Banner)
	builder.WriteString(", ")
	builder.WriteString("usd_price=")
	builder.WriteString(fmt.Sprintf("%v", asos.UsdPrice))
	builder.WriteByte(')')
	return builder.String()
}

// AppSubscriptionOneShots is a parsable slice of AppSubscriptionOneShot.
type AppSubscriptionOneShots []*AppSubscriptionOneShot

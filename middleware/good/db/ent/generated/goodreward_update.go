// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/goodreward"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// GoodRewardUpdate is the builder for updating GoodReward entities.
type GoodRewardUpdate struct {
	config
	hooks     []Hook
	mutation  *GoodRewardMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GoodRewardUpdate builder.
func (gru *GoodRewardUpdate) Where(ps ...predicate.GoodReward) *GoodRewardUpdate {
	gru.mutation.Where(ps...)
	return gru
}

// SetEntID sets the "ent_id" field.
func (gru *GoodRewardUpdate) SetEntID(u uuid.UUID) *GoodRewardUpdate {
	gru.mutation.SetEntID(u)
	return gru
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (gru *GoodRewardUpdate) SetNillableEntID(u *uuid.UUID) *GoodRewardUpdate {
	if u != nil {
		gru.SetEntID(*u)
	}
	return gru
}

// SetCreatedAt sets the "created_at" field.
func (gru *GoodRewardUpdate) SetCreatedAt(u uint32) *GoodRewardUpdate {
	gru.mutation.ResetCreatedAt()
	gru.mutation.SetCreatedAt(u)
	return gru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gru *GoodRewardUpdate) SetNillableCreatedAt(u *uint32) *GoodRewardUpdate {
	if u != nil {
		gru.SetCreatedAt(*u)
	}
	return gru
}

// AddCreatedAt adds u to the "created_at" field.
func (gru *GoodRewardUpdate) AddCreatedAt(u int32) *GoodRewardUpdate {
	gru.mutation.AddCreatedAt(u)
	return gru
}

// SetUpdatedAt sets the "updated_at" field.
func (gru *GoodRewardUpdate) SetUpdatedAt(u uint32) *GoodRewardUpdate {
	gru.mutation.ResetUpdatedAt()
	gru.mutation.SetUpdatedAt(u)
	return gru
}

// AddUpdatedAt adds u to the "updated_at" field.
func (gru *GoodRewardUpdate) AddUpdatedAt(u int32) *GoodRewardUpdate {
	gru.mutation.AddUpdatedAt(u)
	return gru
}

// SetDeletedAt sets the "deleted_at" field.
func (gru *GoodRewardUpdate) SetDeletedAt(u uint32) *GoodRewardUpdate {
	gru.mutation.ResetDeletedAt()
	gru.mutation.SetDeletedAt(u)
	return gru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gru *GoodRewardUpdate) SetNillableDeletedAt(u *uint32) *GoodRewardUpdate {
	if u != nil {
		gru.SetDeletedAt(*u)
	}
	return gru
}

// AddDeletedAt adds u to the "deleted_at" field.
func (gru *GoodRewardUpdate) AddDeletedAt(u int32) *GoodRewardUpdate {
	gru.mutation.AddDeletedAt(u)
	return gru
}

// SetGoodID sets the "good_id" field.
func (gru *GoodRewardUpdate) SetGoodID(u uuid.UUID) *GoodRewardUpdate {
	gru.mutation.SetGoodID(u)
	return gru
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (gru *GoodRewardUpdate) SetNillableGoodID(u *uuid.UUID) *GoodRewardUpdate {
	if u != nil {
		gru.SetGoodID(*u)
	}
	return gru
}

// ClearGoodID clears the value of the "good_id" field.
func (gru *GoodRewardUpdate) ClearGoodID() *GoodRewardUpdate {
	gru.mutation.ClearGoodID()
	return gru
}

// SetRewardState sets the "reward_state" field.
func (gru *GoodRewardUpdate) SetRewardState(s string) *GoodRewardUpdate {
	gru.mutation.SetRewardState(s)
	return gru
}

// SetNillableRewardState sets the "reward_state" field if the given value is not nil.
func (gru *GoodRewardUpdate) SetNillableRewardState(s *string) *GoodRewardUpdate {
	if s != nil {
		gru.SetRewardState(*s)
	}
	return gru
}

// ClearRewardState clears the value of the "reward_state" field.
func (gru *GoodRewardUpdate) ClearRewardState() *GoodRewardUpdate {
	gru.mutation.ClearRewardState()
	return gru
}

// SetLastRewardAt sets the "last_reward_at" field.
func (gru *GoodRewardUpdate) SetLastRewardAt(u uint32) *GoodRewardUpdate {
	gru.mutation.ResetLastRewardAt()
	gru.mutation.SetLastRewardAt(u)
	return gru
}

// SetNillableLastRewardAt sets the "last_reward_at" field if the given value is not nil.
func (gru *GoodRewardUpdate) SetNillableLastRewardAt(u *uint32) *GoodRewardUpdate {
	if u != nil {
		gru.SetLastRewardAt(*u)
	}
	return gru
}

// AddLastRewardAt adds u to the "last_reward_at" field.
func (gru *GoodRewardUpdate) AddLastRewardAt(u int32) *GoodRewardUpdate {
	gru.mutation.AddLastRewardAt(u)
	return gru
}

// ClearLastRewardAt clears the value of the "last_reward_at" field.
func (gru *GoodRewardUpdate) ClearLastRewardAt() *GoodRewardUpdate {
	gru.mutation.ClearLastRewardAt()
	return gru
}

// Mutation returns the GoodRewardMutation object of the builder.
func (gru *GoodRewardUpdate) Mutation() *GoodRewardMutation {
	return gru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gru *GoodRewardUpdate) Save(ctx context.Context) (int, error) {
	gru.defaults()
	return withHooks(ctx, gru.sqlSave, gru.mutation, gru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gru *GoodRewardUpdate) SaveX(ctx context.Context) int {
	affected, err := gru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gru *GoodRewardUpdate) Exec(ctx context.Context) error {
	_, err := gru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gru *GoodRewardUpdate) ExecX(ctx context.Context) {
	if err := gru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gru *GoodRewardUpdate) defaults() {
	if _, ok := gru.mutation.UpdatedAt(); !ok {
		v := goodreward.UpdateDefaultUpdatedAt()
		gru.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gru *GoodRewardUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GoodRewardUpdate {
	gru.modifiers = append(gru.modifiers, modifiers...)
	return gru
}

func (gru *GoodRewardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(goodreward.Table, goodreward.Columns, sqlgraph.NewFieldSpec(goodreward.FieldID, field.TypeUint32))
	if ps := gru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gru.mutation.EntID(); ok {
		_spec.SetField(goodreward.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := gru.mutation.CreatedAt(); ok {
		_spec.SetField(goodreward.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := gru.mutation.AddedCreatedAt(); ok {
		_spec.AddField(goodreward.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := gru.mutation.UpdatedAt(); ok {
		_spec.SetField(goodreward.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := gru.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(goodreward.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := gru.mutation.DeletedAt(); ok {
		_spec.SetField(goodreward.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := gru.mutation.AddedDeletedAt(); ok {
		_spec.AddField(goodreward.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := gru.mutation.GoodID(); ok {
		_spec.SetField(goodreward.FieldGoodID, field.TypeUUID, value)
	}
	if gru.mutation.GoodIDCleared() {
		_spec.ClearField(goodreward.FieldGoodID, field.TypeUUID)
	}
	if value, ok := gru.mutation.RewardState(); ok {
		_spec.SetField(goodreward.FieldRewardState, field.TypeString, value)
	}
	if gru.mutation.RewardStateCleared() {
		_spec.ClearField(goodreward.FieldRewardState, field.TypeString)
	}
	if value, ok := gru.mutation.LastRewardAt(); ok {
		_spec.SetField(goodreward.FieldLastRewardAt, field.TypeUint32, value)
	}
	if value, ok := gru.mutation.AddedLastRewardAt(); ok {
		_spec.AddField(goodreward.FieldLastRewardAt, field.TypeUint32, value)
	}
	if gru.mutation.LastRewardAtCleared() {
		_spec.ClearField(goodreward.FieldLastRewardAt, field.TypeUint32)
	}
	_spec.AddModifiers(gru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, gru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodreward.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gru.mutation.done = true
	return n, nil
}

// GoodRewardUpdateOne is the builder for updating a single GoodReward entity.
type GoodRewardUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GoodRewardMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (gruo *GoodRewardUpdateOne) SetEntID(u uuid.UUID) *GoodRewardUpdateOne {
	gruo.mutation.SetEntID(u)
	return gruo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (gruo *GoodRewardUpdateOne) SetNillableEntID(u *uuid.UUID) *GoodRewardUpdateOne {
	if u != nil {
		gruo.SetEntID(*u)
	}
	return gruo
}

// SetCreatedAt sets the "created_at" field.
func (gruo *GoodRewardUpdateOne) SetCreatedAt(u uint32) *GoodRewardUpdateOne {
	gruo.mutation.ResetCreatedAt()
	gruo.mutation.SetCreatedAt(u)
	return gruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gruo *GoodRewardUpdateOne) SetNillableCreatedAt(u *uint32) *GoodRewardUpdateOne {
	if u != nil {
		gruo.SetCreatedAt(*u)
	}
	return gruo
}

// AddCreatedAt adds u to the "created_at" field.
func (gruo *GoodRewardUpdateOne) AddCreatedAt(u int32) *GoodRewardUpdateOne {
	gruo.mutation.AddCreatedAt(u)
	return gruo
}

// SetUpdatedAt sets the "updated_at" field.
func (gruo *GoodRewardUpdateOne) SetUpdatedAt(u uint32) *GoodRewardUpdateOne {
	gruo.mutation.ResetUpdatedAt()
	gruo.mutation.SetUpdatedAt(u)
	return gruo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (gruo *GoodRewardUpdateOne) AddUpdatedAt(u int32) *GoodRewardUpdateOne {
	gruo.mutation.AddUpdatedAt(u)
	return gruo
}

// SetDeletedAt sets the "deleted_at" field.
func (gruo *GoodRewardUpdateOne) SetDeletedAt(u uint32) *GoodRewardUpdateOne {
	gruo.mutation.ResetDeletedAt()
	gruo.mutation.SetDeletedAt(u)
	return gruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gruo *GoodRewardUpdateOne) SetNillableDeletedAt(u *uint32) *GoodRewardUpdateOne {
	if u != nil {
		gruo.SetDeletedAt(*u)
	}
	return gruo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (gruo *GoodRewardUpdateOne) AddDeletedAt(u int32) *GoodRewardUpdateOne {
	gruo.mutation.AddDeletedAt(u)
	return gruo
}

// SetGoodID sets the "good_id" field.
func (gruo *GoodRewardUpdateOne) SetGoodID(u uuid.UUID) *GoodRewardUpdateOne {
	gruo.mutation.SetGoodID(u)
	return gruo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (gruo *GoodRewardUpdateOne) SetNillableGoodID(u *uuid.UUID) *GoodRewardUpdateOne {
	if u != nil {
		gruo.SetGoodID(*u)
	}
	return gruo
}

// ClearGoodID clears the value of the "good_id" field.
func (gruo *GoodRewardUpdateOne) ClearGoodID() *GoodRewardUpdateOne {
	gruo.mutation.ClearGoodID()
	return gruo
}

// SetRewardState sets the "reward_state" field.
func (gruo *GoodRewardUpdateOne) SetRewardState(s string) *GoodRewardUpdateOne {
	gruo.mutation.SetRewardState(s)
	return gruo
}

// SetNillableRewardState sets the "reward_state" field if the given value is not nil.
func (gruo *GoodRewardUpdateOne) SetNillableRewardState(s *string) *GoodRewardUpdateOne {
	if s != nil {
		gruo.SetRewardState(*s)
	}
	return gruo
}

// ClearRewardState clears the value of the "reward_state" field.
func (gruo *GoodRewardUpdateOne) ClearRewardState() *GoodRewardUpdateOne {
	gruo.mutation.ClearRewardState()
	return gruo
}

// SetLastRewardAt sets the "last_reward_at" field.
func (gruo *GoodRewardUpdateOne) SetLastRewardAt(u uint32) *GoodRewardUpdateOne {
	gruo.mutation.ResetLastRewardAt()
	gruo.mutation.SetLastRewardAt(u)
	return gruo
}

// SetNillableLastRewardAt sets the "last_reward_at" field if the given value is not nil.
func (gruo *GoodRewardUpdateOne) SetNillableLastRewardAt(u *uint32) *GoodRewardUpdateOne {
	if u != nil {
		gruo.SetLastRewardAt(*u)
	}
	return gruo
}

// AddLastRewardAt adds u to the "last_reward_at" field.
func (gruo *GoodRewardUpdateOne) AddLastRewardAt(u int32) *GoodRewardUpdateOne {
	gruo.mutation.AddLastRewardAt(u)
	return gruo
}

// ClearLastRewardAt clears the value of the "last_reward_at" field.
func (gruo *GoodRewardUpdateOne) ClearLastRewardAt() *GoodRewardUpdateOne {
	gruo.mutation.ClearLastRewardAt()
	return gruo
}

// Mutation returns the GoodRewardMutation object of the builder.
func (gruo *GoodRewardUpdateOne) Mutation() *GoodRewardMutation {
	return gruo.mutation
}

// Where appends a list predicates to the GoodRewardUpdate builder.
func (gruo *GoodRewardUpdateOne) Where(ps ...predicate.GoodReward) *GoodRewardUpdateOne {
	gruo.mutation.Where(ps...)
	return gruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gruo *GoodRewardUpdateOne) Select(field string, fields ...string) *GoodRewardUpdateOne {
	gruo.fields = append([]string{field}, fields...)
	return gruo
}

// Save executes the query and returns the updated GoodReward entity.
func (gruo *GoodRewardUpdateOne) Save(ctx context.Context) (*GoodReward, error) {
	gruo.defaults()
	return withHooks(ctx, gruo.sqlSave, gruo.mutation, gruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gruo *GoodRewardUpdateOne) SaveX(ctx context.Context) *GoodReward {
	node, err := gruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gruo *GoodRewardUpdateOne) Exec(ctx context.Context) error {
	_, err := gruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gruo *GoodRewardUpdateOne) ExecX(ctx context.Context) {
	if err := gruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gruo *GoodRewardUpdateOne) defaults() {
	if _, ok := gruo.mutation.UpdatedAt(); !ok {
		v := goodreward.UpdateDefaultUpdatedAt()
		gruo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gruo *GoodRewardUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GoodRewardUpdateOne {
	gruo.modifiers = append(gruo.modifiers, modifiers...)
	return gruo
}

func (gruo *GoodRewardUpdateOne) sqlSave(ctx context.Context) (_node *GoodReward, err error) {
	_spec := sqlgraph.NewUpdateSpec(goodreward.Table, goodreward.Columns, sqlgraph.NewFieldSpec(goodreward.FieldID, field.TypeUint32))
	id, ok := gruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "GoodReward.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodreward.FieldID)
		for _, f := range fields {
			if !goodreward.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != goodreward.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gruo.mutation.EntID(); ok {
		_spec.SetField(goodreward.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := gruo.mutation.CreatedAt(); ok {
		_spec.SetField(goodreward.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := gruo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(goodreward.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := gruo.mutation.UpdatedAt(); ok {
		_spec.SetField(goodreward.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := gruo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(goodreward.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := gruo.mutation.DeletedAt(); ok {
		_spec.SetField(goodreward.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := gruo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(goodreward.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := gruo.mutation.GoodID(); ok {
		_spec.SetField(goodreward.FieldGoodID, field.TypeUUID, value)
	}
	if gruo.mutation.GoodIDCleared() {
		_spec.ClearField(goodreward.FieldGoodID, field.TypeUUID)
	}
	if value, ok := gruo.mutation.RewardState(); ok {
		_spec.SetField(goodreward.FieldRewardState, field.TypeString, value)
	}
	if gruo.mutation.RewardStateCleared() {
		_spec.ClearField(goodreward.FieldRewardState, field.TypeString)
	}
	if value, ok := gruo.mutation.LastRewardAt(); ok {
		_spec.SetField(goodreward.FieldLastRewardAt, field.TypeUint32, value)
	}
	if value, ok := gruo.mutation.AddedLastRewardAt(); ok {
		_spec.AddField(goodreward.FieldLastRewardAt, field.TypeUint32, value)
	}
	if gruo.mutation.LastRewardAtCleared() {
		_spec.ClearField(goodreward.FieldLastRewardAt, field.TypeUint32)
	}
	_spec.AddModifiers(gruo.modifiers...)
	_node = &GoodReward{config: gruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodreward.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gruo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appmininggoodstock"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
)

// AppMiningGoodStockDelete is the builder for deleting a AppMiningGoodStock entity.
type AppMiningGoodStockDelete struct {
	config
	hooks    []Hook
	mutation *AppMiningGoodStockMutation
}

// Where appends a list predicates to the AppMiningGoodStockDelete builder.
func (amgsd *AppMiningGoodStockDelete) Where(ps ...predicate.AppMiningGoodStock) *AppMiningGoodStockDelete {
	amgsd.mutation.Where(ps...)
	return amgsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (amgsd *AppMiningGoodStockDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, amgsd.sqlExec, amgsd.mutation, amgsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (amgsd *AppMiningGoodStockDelete) ExecX(ctx context.Context) int {
	n, err := amgsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (amgsd *AppMiningGoodStockDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(appmininggoodstock.Table, sqlgraph.NewFieldSpec(appmininggoodstock.FieldID, field.TypeUint32))
	if ps := amgsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, amgsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	amgsd.mutation.done = true
	return affected, err
}

// AppMiningGoodStockDeleteOne is the builder for deleting a single AppMiningGoodStock entity.
type AppMiningGoodStockDeleteOne struct {
	amgsd *AppMiningGoodStockDelete
}

// Where appends a list predicates to the AppMiningGoodStockDelete builder.
func (amgsdo *AppMiningGoodStockDeleteOne) Where(ps ...predicate.AppMiningGoodStock) *AppMiningGoodStockDeleteOne {
	amgsdo.amgsd.mutation.Where(ps...)
	return amgsdo
}

// Exec executes the deletion query.
func (amgsdo *AppMiningGoodStockDeleteOne) Exec(ctx context.Context) error {
	n, err := amgsdo.amgsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{appmininggoodstock.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (amgsdo *AppMiningGoodStockDeleteOne) ExecX(ctx context.Context) {
	if err := amgsdo.Exec(ctx); err != nil {
		panic(err)
	}
}

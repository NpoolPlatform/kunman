// Code generated by ent, DO NOT EDIT.

package goodrewardhistory

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldEQ(FieldEntID, v))
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldEQ(FieldGoodID, v))
}

// CoinTypeID applies equality check predicate on the "coin_type_id" field. It's identical to CoinTypeIDEQ.
func CoinTypeID(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldEQ(FieldCoinTypeID, v))
}

// RewardDate applies equality check predicate on the "reward_date" field. It's identical to RewardDateEQ.
func RewardDate(v uint32) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldEQ(FieldRewardDate, v))
}

// Tid applies equality check predicate on the "tid" field. It's identical to TidEQ.
func Tid(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldEQ(FieldTid, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldEQ(FieldAmount, v))
}

// UnitAmount applies equality check predicate on the "unit_amount" field. It's identical to UnitAmountEQ.
func UnitAmount(v decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldEQ(FieldUnitAmount, v))
}

// UnitNetAmount applies equality check predicate on the "unit_net_amount" field. It's identical to UnitNetAmountEQ.
func UnitNetAmount(v decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldEQ(FieldUnitNetAmount, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldLTE(FieldEntID, v))
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldEQ(FieldGoodID, v))
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldNEQ(FieldGoodID, v))
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldIn(FieldGoodID, vs...))
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldNotIn(FieldGoodID, vs...))
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldGT(FieldGoodID, v))
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldGTE(FieldGoodID, v))
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldLT(FieldGoodID, v))
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldLTE(FieldGoodID, v))
}

// GoodIDIsNil applies the IsNil predicate on the "good_id" field.
func GoodIDIsNil() predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldIsNull(FieldGoodID))
}

// GoodIDNotNil applies the NotNil predicate on the "good_id" field.
func GoodIDNotNil() predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldNotNull(FieldGoodID))
}

// CoinTypeIDEQ applies the EQ predicate on the "coin_type_id" field.
func CoinTypeIDEQ(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldEQ(FieldCoinTypeID, v))
}

// CoinTypeIDNEQ applies the NEQ predicate on the "coin_type_id" field.
func CoinTypeIDNEQ(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldNEQ(FieldCoinTypeID, v))
}

// CoinTypeIDIn applies the In predicate on the "coin_type_id" field.
func CoinTypeIDIn(vs ...uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldIn(FieldCoinTypeID, vs...))
}

// CoinTypeIDNotIn applies the NotIn predicate on the "coin_type_id" field.
func CoinTypeIDNotIn(vs ...uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldNotIn(FieldCoinTypeID, vs...))
}

// CoinTypeIDGT applies the GT predicate on the "coin_type_id" field.
func CoinTypeIDGT(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldGT(FieldCoinTypeID, v))
}

// CoinTypeIDGTE applies the GTE predicate on the "coin_type_id" field.
func CoinTypeIDGTE(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldGTE(FieldCoinTypeID, v))
}

// CoinTypeIDLT applies the LT predicate on the "coin_type_id" field.
func CoinTypeIDLT(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldLT(FieldCoinTypeID, v))
}

// CoinTypeIDLTE applies the LTE predicate on the "coin_type_id" field.
func CoinTypeIDLTE(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldLTE(FieldCoinTypeID, v))
}

// CoinTypeIDIsNil applies the IsNil predicate on the "coin_type_id" field.
func CoinTypeIDIsNil() predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldIsNull(FieldCoinTypeID))
}

// CoinTypeIDNotNil applies the NotNil predicate on the "coin_type_id" field.
func CoinTypeIDNotNil() predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldNotNull(FieldCoinTypeID))
}

// RewardDateEQ applies the EQ predicate on the "reward_date" field.
func RewardDateEQ(v uint32) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldEQ(FieldRewardDate, v))
}

// RewardDateNEQ applies the NEQ predicate on the "reward_date" field.
func RewardDateNEQ(v uint32) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldNEQ(FieldRewardDate, v))
}

// RewardDateIn applies the In predicate on the "reward_date" field.
func RewardDateIn(vs ...uint32) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldIn(FieldRewardDate, vs...))
}

// RewardDateNotIn applies the NotIn predicate on the "reward_date" field.
func RewardDateNotIn(vs ...uint32) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldNotIn(FieldRewardDate, vs...))
}

// RewardDateGT applies the GT predicate on the "reward_date" field.
func RewardDateGT(v uint32) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldGT(FieldRewardDate, v))
}

// RewardDateGTE applies the GTE predicate on the "reward_date" field.
func RewardDateGTE(v uint32) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldGTE(FieldRewardDate, v))
}

// RewardDateLT applies the LT predicate on the "reward_date" field.
func RewardDateLT(v uint32) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldLT(FieldRewardDate, v))
}

// RewardDateLTE applies the LTE predicate on the "reward_date" field.
func RewardDateLTE(v uint32) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldLTE(FieldRewardDate, v))
}

// RewardDateIsNil applies the IsNil predicate on the "reward_date" field.
func RewardDateIsNil() predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldIsNull(FieldRewardDate))
}

// RewardDateNotNil applies the NotNil predicate on the "reward_date" field.
func RewardDateNotNil() predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldNotNull(FieldRewardDate))
}

// TidEQ applies the EQ predicate on the "tid" field.
func TidEQ(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldEQ(FieldTid, v))
}

// TidNEQ applies the NEQ predicate on the "tid" field.
func TidNEQ(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldNEQ(FieldTid, v))
}

// TidIn applies the In predicate on the "tid" field.
func TidIn(vs ...uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldIn(FieldTid, vs...))
}

// TidNotIn applies the NotIn predicate on the "tid" field.
func TidNotIn(vs ...uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldNotIn(FieldTid, vs...))
}

// TidGT applies the GT predicate on the "tid" field.
func TidGT(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldGT(FieldTid, v))
}

// TidGTE applies the GTE predicate on the "tid" field.
func TidGTE(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldGTE(FieldTid, v))
}

// TidLT applies the LT predicate on the "tid" field.
func TidLT(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldLT(FieldTid, v))
}

// TidLTE applies the LTE predicate on the "tid" field.
func TidLTE(v uuid.UUID) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldLTE(FieldTid, v))
}

// TidIsNil applies the IsNil predicate on the "tid" field.
func TidIsNil() predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldIsNull(FieldTid))
}

// TidNotNil applies the NotNil predicate on the "tid" field.
func TidNotNil() predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldNotNull(FieldTid))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldLTE(FieldAmount, v))
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldIsNull(FieldAmount))
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldNotNull(FieldAmount))
}

// UnitAmountEQ applies the EQ predicate on the "unit_amount" field.
func UnitAmountEQ(v decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldEQ(FieldUnitAmount, v))
}

// UnitAmountNEQ applies the NEQ predicate on the "unit_amount" field.
func UnitAmountNEQ(v decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldNEQ(FieldUnitAmount, v))
}

// UnitAmountIn applies the In predicate on the "unit_amount" field.
func UnitAmountIn(vs ...decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldIn(FieldUnitAmount, vs...))
}

// UnitAmountNotIn applies the NotIn predicate on the "unit_amount" field.
func UnitAmountNotIn(vs ...decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldNotIn(FieldUnitAmount, vs...))
}

// UnitAmountGT applies the GT predicate on the "unit_amount" field.
func UnitAmountGT(v decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldGT(FieldUnitAmount, v))
}

// UnitAmountGTE applies the GTE predicate on the "unit_amount" field.
func UnitAmountGTE(v decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldGTE(FieldUnitAmount, v))
}

// UnitAmountLT applies the LT predicate on the "unit_amount" field.
func UnitAmountLT(v decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldLT(FieldUnitAmount, v))
}

// UnitAmountLTE applies the LTE predicate on the "unit_amount" field.
func UnitAmountLTE(v decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldLTE(FieldUnitAmount, v))
}

// UnitAmountIsNil applies the IsNil predicate on the "unit_amount" field.
func UnitAmountIsNil() predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldIsNull(FieldUnitAmount))
}

// UnitAmountNotNil applies the NotNil predicate on the "unit_amount" field.
func UnitAmountNotNil() predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldNotNull(FieldUnitAmount))
}

// UnitNetAmountEQ applies the EQ predicate on the "unit_net_amount" field.
func UnitNetAmountEQ(v decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldEQ(FieldUnitNetAmount, v))
}

// UnitNetAmountNEQ applies the NEQ predicate on the "unit_net_amount" field.
func UnitNetAmountNEQ(v decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldNEQ(FieldUnitNetAmount, v))
}

// UnitNetAmountIn applies the In predicate on the "unit_net_amount" field.
func UnitNetAmountIn(vs ...decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldIn(FieldUnitNetAmount, vs...))
}

// UnitNetAmountNotIn applies the NotIn predicate on the "unit_net_amount" field.
func UnitNetAmountNotIn(vs ...decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldNotIn(FieldUnitNetAmount, vs...))
}

// UnitNetAmountGT applies the GT predicate on the "unit_net_amount" field.
func UnitNetAmountGT(v decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldGT(FieldUnitNetAmount, v))
}

// UnitNetAmountGTE applies the GTE predicate on the "unit_net_amount" field.
func UnitNetAmountGTE(v decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldGTE(FieldUnitNetAmount, v))
}

// UnitNetAmountLT applies the LT predicate on the "unit_net_amount" field.
func UnitNetAmountLT(v decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldLT(FieldUnitNetAmount, v))
}

// UnitNetAmountLTE applies the LTE predicate on the "unit_net_amount" field.
func UnitNetAmountLTE(v decimal.Decimal) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldLTE(FieldUnitNetAmount, v))
}

// UnitNetAmountIsNil applies the IsNil predicate on the "unit_net_amount" field.
func UnitNetAmountIsNil() predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldIsNull(FieldUnitNetAmount))
}

// UnitNetAmountNotNil applies the NotNil predicate on the "unit_net_amount" field.
func UnitNetAmountNotNil() predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.FieldNotNull(FieldUnitNetAmount))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GoodRewardHistory) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GoodRewardHistory) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GoodRewardHistory) predicate.GoodRewardHistory {
	return predicate.GoodRewardHistory(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package goodrewardhistory

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the goodrewardhistory type in the database.
	Label = "good_reward_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldGoodID holds the string denoting the good_id field in the database.
	FieldGoodID = "good_id"
	// FieldCoinTypeID holds the string denoting the coin_type_id field in the database.
	FieldCoinTypeID = "coin_type_id"
	// FieldRewardDate holds the string denoting the reward_date field in the database.
	FieldRewardDate = "reward_date"
	// FieldTid holds the string denoting the tid field in the database.
	FieldTid = "tid"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldUnitAmount holds the string denoting the unit_amount field in the database.
	FieldUnitAmount = "unit_amount"
	// FieldUnitNetAmount holds the string denoting the unit_net_amount field in the database.
	FieldUnitNetAmount = "unit_net_amount"
	// Table holds the table name of the goodrewardhistory in the database.
	Table = "good_reward_histories"
)

// Columns holds all SQL columns for goodrewardhistory fields.
var Columns = []string{
	FieldID,
	FieldEntID,
	FieldGoodID,
	FieldCoinTypeID,
	FieldRewardDate,
	FieldTid,
	FieldAmount,
	FieldUnitAmount,
	FieldUnitNetAmount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultGoodID holds the default value on creation for the "good_id" field.
	DefaultGoodID func() uuid.UUID
	// DefaultCoinTypeID holds the default value on creation for the "coin_type_id" field.
	DefaultCoinTypeID func() uuid.UUID
	// DefaultRewardDate holds the default value on creation for the "reward_date" field.
	DefaultRewardDate func() uint32
	// DefaultTid holds the default value on creation for the "tid" field.
	DefaultTid func() uuid.UUID
	// DefaultAmount holds the default value on creation for the "amount" field.
	DefaultAmount decimal.Decimal
	// DefaultUnitAmount holds the default value on creation for the "unit_amount" field.
	DefaultUnitAmount decimal.Decimal
	// DefaultUnitNetAmount holds the default value on creation for the "unit_net_amount" field.
	DefaultUnitNetAmount decimal.Decimal
)

// OrderOption defines the ordering options for the GoodRewardHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByGoodID orders the results by the good_id field.
func ByGoodID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodID, opts...).ToFunc()
}

// ByCoinTypeID orders the results by the coin_type_id field.
func ByCoinTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoinTypeID, opts...).ToFunc()
}

// ByRewardDate orders the results by the reward_date field.
func ByRewardDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRewardDate, opts...).ToFunc()
}

// ByTid orders the results by the tid field.
func ByTid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTid, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByUnitAmount orders the results by the unit_amount field.
func ByUnitAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitAmount, opts...).ToFunc()
}

// ByUnitNetAmount orders the results by the unit_net_amount field.
func ByUnitNetAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitNetAmount, opts...).ToFunc()
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/goodbase"
	"github.com/google/uuid"
)

// GoodBaseCreate is the builder for creating a GoodBase entity.
type GoodBaseCreate struct {
	config
	mutation *GoodBaseMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (gbc *GoodBaseCreate) SetEntID(u uuid.UUID) *GoodBaseCreate {
	gbc.mutation.SetEntID(u)
	return gbc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (gbc *GoodBaseCreate) SetNillableEntID(u *uuid.UUID) *GoodBaseCreate {
	if u != nil {
		gbc.SetEntID(*u)
	}
	return gbc
}

// SetCreatedAt sets the "created_at" field.
func (gbc *GoodBaseCreate) SetCreatedAt(u uint32) *GoodBaseCreate {
	gbc.mutation.SetCreatedAt(u)
	return gbc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gbc *GoodBaseCreate) SetNillableCreatedAt(u *uint32) *GoodBaseCreate {
	if u != nil {
		gbc.SetCreatedAt(*u)
	}
	return gbc
}

// SetUpdatedAt sets the "updated_at" field.
func (gbc *GoodBaseCreate) SetUpdatedAt(u uint32) *GoodBaseCreate {
	gbc.mutation.SetUpdatedAt(u)
	return gbc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gbc *GoodBaseCreate) SetNillableUpdatedAt(u *uint32) *GoodBaseCreate {
	if u != nil {
		gbc.SetUpdatedAt(*u)
	}
	return gbc
}

// SetDeletedAt sets the "deleted_at" field.
func (gbc *GoodBaseCreate) SetDeletedAt(u uint32) *GoodBaseCreate {
	gbc.mutation.SetDeletedAt(u)
	return gbc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gbc *GoodBaseCreate) SetNillableDeletedAt(u *uint32) *GoodBaseCreate {
	if u != nil {
		gbc.SetDeletedAt(*u)
	}
	return gbc
}

// SetGoodType sets the "good_type" field.
func (gbc *GoodBaseCreate) SetGoodType(s string) *GoodBaseCreate {
	gbc.mutation.SetGoodType(s)
	return gbc
}

// SetNillableGoodType sets the "good_type" field if the given value is not nil.
func (gbc *GoodBaseCreate) SetNillableGoodType(s *string) *GoodBaseCreate {
	if s != nil {
		gbc.SetGoodType(*s)
	}
	return gbc
}

// SetBenefitType sets the "benefit_type" field.
func (gbc *GoodBaseCreate) SetBenefitType(s string) *GoodBaseCreate {
	gbc.mutation.SetBenefitType(s)
	return gbc
}

// SetNillableBenefitType sets the "benefit_type" field if the given value is not nil.
func (gbc *GoodBaseCreate) SetNillableBenefitType(s *string) *GoodBaseCreate {
	if s != nil {
		gbc.SetBenefitType(*s)
	}
	return gbc
}

// SetName sets the "name" field.
func (gbc *GoodBaseCreate) SetName(s string) *GoodBaseCreate {
	gbc.mutation.SetName(s)
	return gbc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gbc *GoodBaseCreate) SetNillableName(s *string) *GoodBaseCreate {
	if s != nil {
		gbc.SetName(*s)
	}
	return gbc
}

// SetServiceStartAt sets the "service_start_at" field.
func (gbc *GoodBaseCreate) SetServiceStartAt(u uint32) *GoodBaseCreate {
	gbc.mutation.SetServiceStartAt(u)
	return gbc
}

// SetNillableServiceStartAt sets the "service_start_at" field if the given value is not nil.
func (gbc *GoodBaseCreate) SetNillableServiceStartAt(u *uint32) *GoodBaseCreate {
	if u != nil {
		gbc.SetServiceStartAt(*u)
	}
	return gbc
}

// SetStartMode sets the "start_mode" field.
func (gbc *GoodBaseCreate) SetStartMode(s string) *GoodBaseCreate {
	gbc.mutation.SetStartMode(s)
	return gbc
}

// SetNillableStartMode sets the "start_mode" field if the given value is not nil.
func (gbc *GoodBaseCreate) SetNillableStartMode(s *string) *GoodBaseCreate {
	if s != nil {
		gbc.SetStartMode(*s)
	}
	return gbc
}

// SetTestOnly sets the "test_only" field.
func (gbc *GoodBaseCreate) SetTestOnly(b bool) *GoodBaseCreate {
	gbc.mutation.SetTestOnly(b)
	return gbc
}

// SetNillableTestOnly sets the "test_only" field if the given value is not nil.
func (gbc *GoodBaseCreate) SetNillableTestOnly(b *bool) *GoodBaseCreate {
	if b != nil {
		gbc.SetTestOnly(*b)
	}
	return gbc
}

// SetBenefitIntervalHours sets the "benefit_interval_hours" field.
func (gbc *GoodBaseCreate) SetBenefitIntervalHours(u uint32) *GoodBaseCreate {
	gbc.mutation.SetBenefitIntervalHours(u)
	return gbc
}

// SetNillableBenefitIntervalHours sets the "benefit_interval_hours" field if the given value is not nil.
func (gbc *GoodBaseCreate) SetNillableBenefitIntervalHours(u *uint32) *GoodBaseCreate {
	if u != nil {
		gbc.SetBenefitIntervalHours(*u)
	}
	return gbc
}

// SetPurchasable sets the "purchasable" field.
func (gbc *GoodBaseCreate) SetPurchasable(b bool) *GoodBaseCreate {
	gbc.mutation.SetPurchasable(b)
	return gbc
}

// SetNillablePurchasable sets the "purchasable" field if the given value is not nil.
func (gbc *GoodBaseCreate) SetNillablePurchasable(b *bool) *GoodBaseCreate {
	if b != nil {
		gbc.SetPurchasable(*b)
	}
	return gbc
}

// SetOnline sets the "online" field.
func (gbc *GoodBaseCreate) SetOnline(b bool) *GoodBaseCreate {
	gbc.mutation.SetOnline(b)
	return gbc
}

// SetNillableOnline sets the "online" field if the given value is not nil.
func (gbc *GoodBaseCreate) SetNillableOnline(b *bool) *GoodBaseCreate {
	if b != nil {
		gbc.SetOnline(*b)
	}
	return gbc
}

// SetState sets the "state" field.
func (gbc *GoodBaseCreate) SetState(s string) *GoodBaseCreate {
	gbc.mutation.SetState(s)
	return gbc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (gbc *GoodBaseCreate) SetNillableState(s *string) *GoodBaseCreate {
	if s != nil {
		gbc.SetState(*s)
	}
	return gbc
}

// SetID sets the "id" field.
func (gbc *GoodBaseCreate) SetID(u uint32) *GoodBaseCreate {
	gbc.mutation.SetID(u)
	return gbc
}

// Mutation returns the GoodBaseMutation object of the builder.
func (gbc *GoodBaseCreate) Mutation() *GoodBaseMutation {
	return gbc.mutation
}

// Save creates the GoodBase in the database.
func (gbc *GoodBaseCreate) Save(ctx context.Context) (*GoodBase, error) {
	gbc.defaults()
	return withHooks(ctx, gbc.sqlSave, gbc.mutation, gbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gbc *GoodBaseCreate) SaveX(ctx context.Context) *GoodBase {
	v, err := gbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gbc *GoodBaseCreate) Exec(ctx context.Context) error {
	_, err := gbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gbc *GoodBaseCreate) ExecX(ctx context.Context) {
	if err := gbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gbc *GoodBaseCreate) defaults() {
	if _, ok := gbc.mutation.EntID(); !ok {
		v := goodbase.DefaultEntID()
		gbc.mutation.SetEntID(v)
	}
	if _, ok := gbc.mutation.CreatedAt(); !ok {
		v := goodbase.DefaultCreatedAt()
		gbc.mutation.SetCreatedAt(v)
	}
	if _, ok := gbc.mutation.UpdatedAt(); !ok {
		v := goodbase.DefaultUpdatedAt()
		gbc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gbc.mutation.DeletedAt(); !ok {
		v := goodbase.DefaultDeletedAt()
		gbc.mutation.SetDeletedAt(v)
	}
	if _, ok := gbc.mutation.GoodType(); !ok {
		v := goodbase.DefaultGoodType
		gbc.mutation.SetGoodType(v)
	}
	if _, ok := gbc.mutation.BenefitType(); !ok {
		v := goodbase.DefaultBenefitType
		gbc.mutation.SetBenefitType(v)
	}
	if _, ok := gbc.mutation.Name(); !ok {
		v := goodbase.DefaultName
		gbc.mutation.SetName(v)
	}
	if _, ok := gbc.mutation.ServiceStartAt(); !ok {
		v := goodbase.DefaultServiceStartAt
		gbc.mutation.SetServiceStartAt(v)
	}
	if _, ok := gbc.mutation.StartMode(); !ok {
		v := goodbase.DefaultStartMode
		gbc.mutation.SetStartMode(v)
	}
	if _, ok := gbc.mutation.TestOnly(); !ok {
		v := goodbase.DefaultTestOnly
		gbc.mutation.SetTestOnly(v)
	}
	if _, ok := gbc.mutation.BenefitIntervalHours(); !ok {
		v := goodbase.DefaultBenefitIntervalHours
		gbc.mutation.SetBenefitIntervalHours(v)
	}
	if _, ok := gbc.mutation.Purchasable(); !ok {
		v := goodbase.DefaultPurchasable
		gbc.mutation.SetPurchasable(v)
	}
	if _, ok := gbc.mutation.Online(); !ok {
		v := goodbase.DefaultOnline
		gbc.mutation.SetOnline(v)
	}
	if _, ok := gbc.mutation.State(); !ok {
		v := goodbase.DefaultState
		gbc.mutation.SetState(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gbc *GoodBaseCreate) check() error {
	if _, ok := gbc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "GoodBase.ent_id"`)}
	}
	if _, ok := gbc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "GoodBase.created_at"`)}
	}
	if _, ok := gbc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "GoodBase.updated_at"`)}
	}
	if _, ok := gbc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "GoodBase.deleted_at"`)}
	}
	return nil
}

func (gbc *GoodBaseCreate) sqlSave(ctx context.Context) (*GoodBase, error) {
	if err := gbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	gbc.mutation.id = &_node.ID
	gbc.mutation.done = true
	return _node, nil
}

func (gbc *GoodBaseCreate) createSpec() (*GoodBase, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodBase{config: gbc.config}
		_spec = sqlgraph.NewCreateSpec(goodbase.Table, sqlgraph.NewFieldSpec(goodbase.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = gbc.conflict
	if id, ok := gbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gbc.mutation.EntID(); ok {
		_spec.SetField(goodbase.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := gbc.mutation.CreatedAt(); ok {
		_spec.SetField(goodbase.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := gbc.mutation.UpdatedAt(); ok {
		_spec.SetField(goodbase.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := gbc.mutation.DeletedAt(); ok {
		_spec.SetField(goodbase.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := gbc.mutation.GoodType(); ok {
		_spec.SetField(goodbase.FieldGoodType, field.TypeString, value)
		_node.GoodType = value
	}
	if value, ok := gbc.mutation.BenefitType(); ok {
		_spec.SetField(goodbase.FieldBenefitType, field.TypeString, value)
		_node.BenefitType = value
	}
	if value, ok := gbc.mutation.Name(); ok {
		_spec.SetField(goodbase.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := gbc.mutation.ServiceStartAt(); ok {
		_spec.SetField(goodbase.FieldServiceStartAt, field.TypeUint32, value)
		_node.ServiceStartAt = value
	}
	if value, ok := gbc.mutation.StartMode(); ok {
		_spec.SetField(goodbase.FieldStartMode, field.TypeString, value)
		_node.StartMode = value
	}
	if value, ok := gbc.mutation.TestOnly(); ok {
		_spec.SetField(goodbase.FieldTestOnly, field.TypeBool, value)
		_node.TestOnly = value
	}
	if value, ok := gbc.mutation.BenefitIntervalHours(); ok {
		_spec.SetField(goodbase.FieldBenefitIntervalHours, field.TypeUint32, value)
		_node.BenefitIntervalHours = value
	}
	if value, ok := gbc.mutation.Purchasable(); ok {
		_spec.SetField(goodbase.FieldPurchasable, field.TypeBool, value)
		_node.Purchasable = value
	}
	if value, ok := gbc.mutation.Online(); ok {
		_spec.SetField(goodbase.FieldOnline, field.TypeBool, value)
		_node.Online = value
	}
	if value, ok := gbc.mutation.State(); ok {
		_spec.SetField(goodbase.FieldState, field.TypeString, value)
		_node.State = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodBase.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodBaseUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (gbc *GoodBaseCreate) OnConflict(opts ...sql.ConflictOption) *GoodBaseUpsertOne {
	gbc.conflict = opts
	return &GoodBaseUpsertOne{
		create: gbc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodBase.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gbc *GoodBaseCreate) OnConflictColumns(columns ...string) *GoodBaseUpsertOne {
	gbc.conflict = append(gbc.conflict, sql.ConflictColumns(columns...))
	return &GoodBaseUpsertOne{
		create: gbc,
	}
}

type (
	// GoodBaseUpsertOne is the builder for "upsert"-ing
	//  one GoodBase node.
	GoodBaseUpsertOne struct {
		create *GoodBaseCreate
	}

	// GoodBaseUpsert is the "OnConflict" setter.
	GoodBaseUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *GoodBaseUpsert) SetEntID(v uuid.UUID) *GoodBaseUpsert {
	u.Set(goodbase.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodBaseUpsert) UpdateEntID() *GoodBaseUpsert {
	u.SetExcluded(goodbase.FieldEntID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodBaseUpsert) SetCreatedAt(v uint32) *GoodBaseUpsert {
	u.Set(goodbase.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodBaseUpsert) UpdateCreatedAt() *GoodBaseUpsert {
	u.SetExcluded(goodbase.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodBaseUpsert) AddCreatedAt(v uint32) *GoodBaseUpsert {
	u.Add(goodbase.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodBaseUpsert) SetUpdatedAt(v uint32) *GoodBaseUpsert {
	u.Set(goodbase.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodBaseUpsert) UpdateUpdatedAt() *GoodBaseUpsert {
	u.SetExcluded(goodbase.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodBaseUpsert) AddUpdatedAt(v uint32) *GoodBaseUpsert {
	u.Add(goodbase.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodBaseUpsert) SetDeletedAt(v uint32) *GoodBaseUpsert {
	u.Set(goodbase.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodBaseUpsert) UpdateDeletedAt() *GoodBaseUpsert {
	u.SetExcluded(goodbase.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodBaseUpsert) AddDeletedAt(v uint32) *GoodBaseUpsert {
	u.Add(goodbase.FieldDeletedAt, v)
	return u
}

// SetGoodType sets the "good_type" field.
func (u *GoodBaseUpsert) SetGoodType(v string) *GoodBaseUpsert {
	u.Set(goodbase.FieldGoodType, v)
	return u
}

// UpdateGoodType sets the "good_type" field to the value that was provided on create.
func (u *GoodBaseUpsert) UpdateGoodType() *GoodBaseUpsert {
	u.SetExcluded(goodbase.FieldGoodType)
	return u
}

// ClearGoodType clears the value of the "good_type" field.
func (u *GoodBaseUpsert) ClearGoodType() *GoodBaseUpsert {
	u.SetNull(goodbase.FieldGoodType)
	return u
}

// SetBenefitType sets the "benefit_type" field.
func (u *GoodBaseUpsert) SetBenefitType(v string) *GoodBaseUpsert {
	u.Set(goodbase.FieldBenefitType, v)
	return u
}

// UpdateBenefitType sets the "benefit_type" field to the value that was provided on create.
func (u *GoodBaseUpsert) UpdateBenefitType() *GoodBaseUpsert {
	u.SetExcluded(goodbase.FieldBenefitType)
	return u
}

// ClearBenefitType clears the value of the "benefit_type" field.
func (u *GoodBaseUpsert) ClearBenefitType() *GoodBaseUpsert {
	u.SetNull(goodbase.FieldBenefitType)
	return u
}

// SetName sets the "name" field.
func (u *GoodBaseUpsert) SetName(v string) *GoodBaseUpsert {
	u.Set(goodbase.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GoodBaseUpsert) UpdateName() *GoodBaseUpsert {
	u.SetExcluded(goodbase.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *GoodBaseUpsert) ClearName() *GoodBaseUpsert {
	u.SetNull(goodbase.FieldName)
	return u
}

// SetServiceStartAt sets the "service_start_at" field.
func (u *GoodBaseUpsert) SetServiceStartAt(v uint32) *GoodBaseUpsert {
	u.Set(goodbase.FieldServiceStartAt, v)
	return u
}

// UpdateServiceStartAt sets the "service_start_at" field to the value that was provided on create.
func (u *GoodBaseUpsert) UpdateServiceStartAt() *GoodBaseUpsert {
	u.SetExcluded(goodbase.FieldServiceStartAt)
	return u
}

// AddServiceStartAt adds v to the "service_start_at" field.
func (u *GoodBaseUpsert) AddServiceStartAt(v uint32) *GoodBaseUpsert {
	u.Add(goodbase.FieldServiceStartAt, v)
	return u
}

// ClearServiceStartAt clears the value of the "service_start_at" field.
func (u *GoodBaseUpsert) ClearServiceStartAt() *GoodBaseUpsert {
	u.SetNull(goodbase.FieldServiceStartAt)
	return u
}

// SetStartMode sets the "start_mode" field.
func (u *GoodBaseUpsert) SetStartMode(v string) *GoodBaseUpsert {
	u.Set(goodbase.FieldStartMode, v)
	return u
}

// UpdateStartMode sets the "start_mode" field to the value that was provided on create.
func (u *GoodBaseUpsert) UpdateStartMode() *GoodBaseUpsert {
	u.SetExcluded(goodbase.FieldStartMode)
	return u
}

// ClearStartMode clears the value of the "start_mode" field.
func (u *GoodBaseUpsert) ClearStartMode() *GoodBaseUpsert {
	u.SetNull(goodbase.FieldStartMode)
	return u
}

// SetTestOnly sets the "test_only" field.
func (u *GoodBaseUpsert) SetTestOnly(v bool) *GoodBaseUpsert {
	u.Set(goodbase.FieldTestOnly, v)
	return u
}

// UpdateTestOnly sets the "test_only" field to the value that was provided on create.
func (u *GoodBaseUpsert) UpdateTestOnly() *GoodBaseUpsert {
	u.SetExcluded(goodbase.FieldTestOnly)
	return u
}

// ClearTestOnly clears the value of the "test_only" field.
func (u *GoodBaseUpsert) ClearTestOnly() *GoodBaseUpsert {
	u.SetNull(goodbase.FieldTestOnly)
	return u
}

// SetBenefitIntervalHours sets the "benefit_interval_hours" field.
func (u *GoodBaseUpsert) SetBenefitIntervalHours(v uint32) *GoodBaseUpsert {
	u.Set(goodbase.FieldBenefitIntervalHours, v)
	return u
}

// UpdateBenefitIntervalHours sets the "benefit_interval_hours" field to the value that was provided on create.
func (u *GoodBaseUpsert) UpdateBenefitIntervalHours() *GoodBaseUpsert {
	u.SetExcluded(goodbase.FieldBenefitIntervalHours)
	return u
}

// AddBenefitIntervalHours adds v to the "benefit_interval_hours" field.
func (u *GoodBaseUpsert) AddBenefitIntervalHours(v uint32) *GoodBaseUpsert {
	u.Add(goodbase.FieldBenefitIntervalHours, v)
	return u
}

// ClearBenefitIntervalHours clears the value of the "benefit_interval_hours" field.
func (u *GoodBaseUpsert) ClearBenefitIntervalHours() *GoodBaseUpsert {
	u.SetNull(goodbase.FieldBenefitIntervalHours)
	return u
}

// SetPurchasable sets the "purchasable" field.
func (u *GoodBaseUpsert) SetPurchasable(v bool) *GoodBaseUpsert {
	u.Set(goodbase.FieldPurchasable, v)
	return u
}

// UpdatePurchasable sets the "purchasable" field to the value that was provided on create.
func (u *GoodBaseUpsert) UpdatePurchasable() *GoodBaseUpsert {
	u.SetExcluded(goodbase.FieldPurchasable)
	return u
}

// ClearPurchasable clears the value of the "purchasable" field.
func (u *GoodBaseUpsert) ClearPurchasable() *GoodBaseUpsert {
	u.SetNull(goodbase.FieldPurchasable)
	return u
}

// SetOnline sets the "online" field.
func (u *GoodBaseUpsert) SetOnline(v bool) *GoodBaseUpsert {
	u.Set(goodbase.FieldOnline, v)
	return u
}

// UpdateOnline sets the "online" field to the value that was provided on create.
func (u *GoodBaseUpsert) UpdateOnline() *GoodBaseUpsert {
	u.SetExcluded(goodbase.FieldOnline)
	return u
}

// ClearOnline clears the value of the "online" field.
func (u *GoodBaseUpsert) ClearOnline() *GoodBaseUpsert {
	u.SetNull(goodbase.FieldOnline)
	return u
}

// SetState sets the "state" field.
func (u *GoodBaseUpsert) SetState(v string) *GoodBaseUpsert {
	u.Set(goodbase.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *GoodBaseUpsert) UpdateState() *GoodBaseUpsert {
	u.SetExcluded(goodbase.FieldState)
	return u
}

// ClearState clears the value of the "state" field.
func (u *GoodBaseUpsert) ClearState() *GoodBaseUpsert {
	u.SetNull(goodbase.FieldState)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GoodBase.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodbase.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GoodBaseUpsertOne) UpdateNewValues() *GoodBaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(goodbase.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodBase.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GoodBaseUpsertOne) Ignore() *GoodBaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodBaseUpsertOne) DoNothing() *GoodBaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodBaseCreate.OnConflict
// documentation for more info.
func (u *GoodBaseUpsertOne) Update(set func(*GoodBaseUpsert)) *GoodBaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodBaseUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *GoodBaseUpsertOne) SetEntID(v uuid.UUID) *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodBaseUpsertOne) UpdateEntID() *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodBaseUpsertOne) SetCreatedAt(v uint32) *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodBaseUpsertOne) AddCreatedAt(v uint32) *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodBaseUpsertOne) UpdateCreatedAt() *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodBaseUpsertOne) SetUpdatedAt(v uint32) *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodBaseUpsertOne) AddUpdatedAt(v uint32) *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodBaseUpsertOne) UpdateUpdatedAt() *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodBaseUpsertOne) SetDeletedAt(v uint32) *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodBaseUpsertOne) AddDeletedAt(v uint32) *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodBaseUpsertOne) UpdateDeletedAt() *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetGoodType sets the "good_type" field.
func (u *GoodBaseUpsertOne) SetGoodType(v string) *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetGoodType(v)
	})
}

// UpdateGoodType sets the "good_type" field to the value that was provided on create.
func (u *GoodBaseUpsertOne) UpdateGoodType() *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdateGoodType()
	})
}

// ClearGoodType clears the value of the "good_type" field.
func (u *GoodBaseUpsertOne) ClearGoodType() *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.ClearGoodType()
	})
}

// SetBenefitType sets the "benefit_type" field.
func (u *GoodBaseUpsertOne) SetBenefitType(v string) *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetBenefitType(v)
	})
}

// UpdateBenefitType sets the "benefit_type" field to the value that was provided on create.
func (u *GoodBaseUpsertOne) UpdateBenefitType() *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdateBenefitType()
	})
}

// ClearBenefitType clears the value of the "benefit_type" field.
func (u *GoodBaseUpsertOne) ClearBenefitType() *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.ClearBenefitType()
	})
}

// SetName sets the "name" field.
func (u *GoodBaseUpsertOne) SetName(v string) *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GoodBaseUpsertOne) UpdateName() *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *GoodBaseUpsertOne) ClearName() *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.ClearName()
	})
}

// SetServiceStartAt sets the "service_start_at" field.
func (u *GoodBaseUpsertOne) SetServiceStartAt(v uint32) *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetServiceStartAt(v)
	})
}

// AddServiceStartAt adds v to the "service_start_at" field.
func (u *GoodBaseUpsertOne) AddServiceStartAt(v uint32) *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.AddServiceStartAt(v)
	})
}

// UpdateServiceStartAt sets the "service_start_at" field to the value that was provided on create.
func (u *GoodBaseUpsertOne) UpdateServiceStartAt() *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdateServiceStartAt()
	})
}

// ClearServiceStartAt clears the value of the "service_start_at" field.
func (u *GoodBaseUpsertOne) ClearServiceStartAt() *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.ClearServiceStartAt()
	})
}

// SetStartMode sets the "start_mode" field.
func (u *GoodBaseUpsertOne) SetStartMode(v string) *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetStartMode(v)
	})
}

// UpdateStartMode sets the "start_mode" field to the value that was provided on create.
func (u *GoodBaseUpsertOne) UpdateStartMode() *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdateStartMode()
	})
}

// ClearStartMode clears the value of the "start_mode" field.
func (u *GoodBaseUpsertOne) ClearStartMode() *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.ClearStartMode()
	})
}

// SetTestOnly sets the "test_only" field.
func (u *GoodBaseUpsertOne) SetTestOnly(v bool) *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetTestOnly(v)
	})
}

// UpdateTestOnly sets the "test_only" field to the value that was provided on create.
func (u *GoodBaseUpsertOne) UpdateTestOnly() *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdateTestOnly()
	})
}

// ClearTestOnly clears the value of the "test_only" field.
func (u *GoodBaseUpsertOne) ClearTestOnly() *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.ClearTestOnly()
	})
}

// SetBenefitIntervalHours sets the "benefit_interval_hours" field.
func (u *GoodBaseUpsertOne) SetBenefitIntervalHours(v uint32) *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetBenefitIntervalHours(v)
	})
}

// AddBenefitIntervalHours adds v to the "benefit_interval_hours" field.
func (u *GoodBaseUpsertOne) AddBenefitIntervalHours(v uint32) *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.AddBenefitIntervalHours(v)
	})
}

// UpdateBenefitIntervalHours sets the "benefit_interval_hours" field to the value that was provided on create.
func (u *GoodBaseUpsertOne) UpdateBenefitIntervalHours() *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdateBenefitIntervalHours()
	})
}

// ClearBenefitIntervalHours clears the value of the "benefit_interval_hours" field.
func (u *GoodBaseUpsertOne) ClearBenefitIntervalHours() *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.ClearBenefitIntervalHours()
	})
}

// SetPurchasable sets the "purchasable" field.
func (u *GoodBaseUpsertOne) SetPurchasable(v bool) *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetPurchasable(v)
	})
}

// UpdatePurchasable sets the "purchasable" field to the value that was provided on create.
func (u *GoodBaseUpsertOne) UpdatePurchasable() *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdatePurchasable()
	})
}

// ClearPurchasable clears the value of the "purchasable" field.
func (u *GoodBaseUpsertOne) ClearPurchasable() *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.ClearPurchasable()
	})
}

// SetOnline sets the "online" field.
func (u *GoodBaseUpsertOne) SetOnline(v bool) *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetOnline(v)
	})
}

// UpdateOnline sets the "online" field to the value that was provided on create.
func (u *GoodBaseUpsertOne) UpdateOnline() *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdateOnline()
	})
}

// ClearOnline clears the value of the "online" field.
func (u *GoodBaseUpsertOne) ClearOnline() *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.ClearOnline()
	})
}

// SetState sets the "state" field.
func (u *GoodBaseUpsertOne) SetState(v string) *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *GoodBaseUpsertOne) UpdateState() *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *GoodBaseUpsertOne) ClearState() *GoodBaseUpsertOne {
	return u.Update(func(s *GoodBaseUpsert) {
		s.ClearState()
	})
}

// Exec executes the query.
func (u *GoodBaseUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for GoodBaseCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodBaseUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GoodBaseUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GoodBaseUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GoodBaseCreateBulk is the builder for creating many GoodBase entities in bulk.
type GoodBaseCreateBulk struct {
	config
	err      error
	builders []*GoodBaseCreate
	conflict []sql.ConflictOption
}

// Save creates the GoodBase entities in the database.
func (gbcb *GoodBaseCreateBulk) Save(ctx context.Context) ([]*GoodBase, error) {
	if gbcb.err != nil {
		return nil, gbcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gbcb.builders))
	nodes := make([]*GoodBase, len(gbcb.builders))
	mutators := make([]Mutator, len(gbcb.builders))
	for i := range gbcb.builders {
		func(i int, root context.Context) {
			builder := gbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodBaseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gbcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gbcb *GoodBaseCreateBulk) SaveX(ctx context.Context) []*GoodBase {
	v, err := gbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gbcb *GoodBaseCreateBulk) Exec(ctx context.Context) error {
	_, err := gbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gbcb *GoodBaseCreateBulk) ExecX(ctx context.Context) {
	if err := gbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodBase.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodBaseUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (gbcb *GoodBaseCreateBulk) OnConflict(opts ...sql.ConflictOption) *GoodBaseUpsertBulk {
	gbcb.conflict = opts
	return &GoodBaseUpsertBulk{
		create: gbcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodBase.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gbcb *GoodBaseCreateBulk) OnConflictColumns(columns ...string) *GoodBaseUpsertBulk {
	gbcb.conflict = append(gbcb.conflict, sql.ConflictColumns(columns...))
	return &GoodBaseUpsertBulk{
		create: gbcb,
	}
}

// GoodBaseUpsertBulk is the builder for "upsert"-ing
// a bulk of GoodBase nodes.
type GoodBaseUpsertBulk struct {
	create *GoodBaseCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GoodBase.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodbase.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GoodBaseUpsertBulk) UpdateNewValues() *GoodBaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(goodbase.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodBase.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GoodBaseUpsertBulk) Ignore() *GoodBaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodBaseUpsertBulk) DoNothing() *GoodBaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodBaseCreateBulk.OnConflict
// documentation for more info.
func (u *GoodBaseUpsertBulk) Update(set func(*GoodBaseUpsert)) *GoodBaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodBaseUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *GoodBaseUpsertBulk) SetEntID(v uuid.UUID) *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodBaseUpsertBulk) UpdateEntID() *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodBaseUpsertBulk) SetCreatedAt(v uint32) *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodBaseUpsertBulk) AddCreatedAt(v uint32) *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodBaseUpsertBulk) UpdateCreatedAt() *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodBaseUpsertBulk) SetUpdatedAt(v uint32) *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodBaseUpsertBulk) AddUpdatedAt(v uint32) *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodBaseUpsertBulk) UpdateUpdatedAt() *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodBaseUpsertBulk) SetDeletedAt(v uint32) *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodBaseUpsertBulk) AddDeletedAt(v uint32) *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodBaseUpsertBulk) UpdateDeletedAt() *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetGoodType sets the "good_type" field.
func (u *GoodBaseUpsertBulk) SetGoodType(v string) *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetGoodType(v)
	})
}

// UpdateGoodType sets the "good_type" field to the value that was provided on create.
func (u *GoodBaseUpsertBulk) UpdateGoodType() *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdateGoodType()
	})
}

// ClearGoodType clears the value of the "good_type" field.
func (u *GoodBaseUpsertBulk) ClearGoodType() *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.ClearGoodType()
	})
}

// SetBenefitType sets the "benefit_type" field.
func (u *GoodBaseUpsertBulk) SetBenefitType(v string) *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetBenefitType(v)
	})
}

// UpdateBenefitType sets the "benefit_type" field to the value that was provided on create.
func (u *GoodBaseUpsertBulk) UpdateBenefitType() *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdateBenefitType()
	})
}

// ClearBenefitType clears the value of the "benefit_type" field.
func (u *GoodBaseUpsertBulk) ClearBenefitType() *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.ClearBenefitType()
	})
}

// SetName sets the "name" field.
func (u *GoodBaseUpsertBulk) SetName(v string) *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GoodBaseUpsertBulk) UpdateName() *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *GoodBaseUpsertBulk) ClearName() *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.ClearName()
	})
}

// SetServiceStartAt sets the "service_start_at" field.
func (u *GoodBaseUpsertBulk) SetServiceStartAt(v uint32) *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetServiceStartAt(v)
	})
}

// AddServiceStartAt adds v to the "service_start_at" field.
func (u *GoodBaseUpsertBulk) AddServiceStartAt(v uint32) *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.AddServiceStartAt(v)
	})
}

// UpdateServiceStartAt sets the "service_start_at" field to the value that was provided on create.
func (u *GoodBaseUpsertBulk) UpdateServiceStartAt() *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdateServiceStartAt()
	})
}

// ClearServiceStartAt clears the value of the "service_start_at" field.
func (u *GoodBaseUpsertBulk) ClearServiceStartAt() *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.ClearServiceStartAt()
	})
}

// SetStartMode sets the "start_mode" field.
func (u *GoodBaseUpsertBulk) SetStartMode(v string) *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetStartMode(v)
	})
}

// UpdateStartMode sets the "start_mode" field to the value that was provided on create.
func (u *GoodBaseUpsertBulk) UpdateStartMode() *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdateStartMode()
	})
}

// ClearStartMode clears the value of the "start_mode" field.
func (u *GoodBaseUpsertBulk) ClearStartMode() *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.ClearStartMode()
	})
}

// SetTestOnly sets the "test_only" field.
func (u *GoodBaseUpsertBulk) SetTestOnly(v bool) *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetTestOnly(v)
	})
}

// UpdateTestOnly sets the "test_only" field to the value that was provided on create.
func (u *GoodBaseUpsertBulk) UpdateTestOnly() *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdateTestOnly()
	})
}

// ClearTestOnly clears the value of the "test_only" field.
func (u *GoodBaseUpsertBulk) ClearTestOnly() *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.ClearTestOnly()
	})
}

// SetBenefitIntervalHours sets the "benefit_interval_hours" field.
func (u *GoodBaseUpsertBulk) SetBenefitIntervalHours(v uint32) *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetBenefitIntervalHours(v)
	})
}

// AddBenefitIntervalHours adds v to the "benefit_interval_hours" field.
func (u *GoodBaseUpsertBulk) AddBenefitIntervalHours(v uint32) *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.AddBenefitIntervalHours(v)
	})
}

// UpdateBenefitIntervalHours sets the "benefit_interval_hours" field to the value that was provided on create.
func (u *GoodBaseUpsertBulk) UpdateBenefitIntervalHours() *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdateBenefitIntervalHours()
	})
}

// ClearBenefitIntervalHours clears the value of the "benefit_interval_hours" field.
func (u *GoodBaseUpsertBulk) ClearBenefitIntervalHours() *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.ClearBenefitIntervalHours()
	})
}

// SetPurchasable sets the "purchasable" field.
func (u *GoodBaseUpsertBulk) SetPurchasable(v bool) *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetPurchasable(v)
	})
}

// UpdatePurchasable sets the "purchasable" field to the value that was provided on create.
func (u *GoodBaseUpsertBulk) UpdatePurchasable() *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdatePurchasable()
	})
}

// ClearPurchasable clears the value of the "purchasable" field.
func (u *GoodBaseUpsertBulk) ClearPurchasable() *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.ClearPurchasable()
	})
}

// SetOnline sets the "online" field.
func (u *GoodBaseUpsertBulk) SetOnline(v bool) *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetOnline(v)
	})
}

// UpdateOnline sets the "online" field to the value that was provided on create.
func (u *GoodBaseUpsertBulk) UpdateOnline() *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdateOnline()
	})
}

// ClearOnline clears the value of the "online" field.
func (u *GoodBaseUpsertBulk) ClearOnline() *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.ClearOnline()
	})
}

// SetState sets the "state" field.
func (u *GoodBaseUpsertBulk) SetState(v string) *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *GoodBaseUpsertBulk) UpdateState() *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *GoodBaseUpsertBulk) ClearState() *GoodBaseUpsertBulk {
	return u.Update(func(s *GoodBaseUpsert) {
		s.ClearState()
	})
}

// Exec executes the query.
func (u *GoodBaseUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the GoodBaseCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for GoodBaseCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodBaseUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

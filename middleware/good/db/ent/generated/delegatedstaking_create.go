// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/delegatedstaking"
	"github.com/google/uuid"
)

// DelegatedStakingCreate is the builder for creating a DelegatedStaking entity.
type DelegatedStakingCreate struct {
	config
	mutation *DelegatedStakingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (dsc *DelegatedStakingCreate) SetEntID(u uuid.UUID) *DelegatedStakingCreate {
	dsc.mutation.SetEntID(u)
	return dsc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (dsc *DelegatedStakingCreate) SetNillableEntID(u *uuid.UUID) *DelegatedStakingCreate {
	if u != nil {
		dsc.SetEntID(*u)
	}
	return dsc
}

// SetGoodID sets the "good_id" field.
func (dsc *DelegatedStakingCreate) SetGoodID(u uuid.UUID) *DelegatedStakingCreate {
	dsc.mutation.SetGoodID(u)
	return dsc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (dsc *DelegatedStakingCreate) SetNillableGoodID(u *uuid.UUID) *DelegatedStakingCreate {
	if u != nil {
		dsc.SetGoodID(*u)
	}
	return dsc
}

// SetContractCodeURL sets the "contract_code_url" field.
func (dsc *DelegatedStakingCreate) SetContractCodeURL(s string) *DelegatedStakingCreate {
	dsc.mutation.SetContractCodeURL(s)
	return dsc
}

// SetNillableContractCodeURL sets the "contract_code_url" field if the given value is not nil.
func (dsc *DelegatedStakingCreate) SetNillableContractCodeURL(s *string) *DelegatedStakingCreate {
	if s != nil {
		dsc.SetContractCodeURL(*s)
	}
	return dsc
}

// SetContractCodeBranch sets the "contract_code_branch" field.
func (dsc *DelegatedStakingCreate) SetContractCodeBranch(s string) *DelegatedStakingCreate {
	dsc.mutation.SetContractCodeBranch(s)
	return dsc
}

// SetNillableContractCodeBranch sets the "contract_code_branch" field if the given value is not nil.
func (dsc *DelegatedStakingCreate) SetNillableContractCodeBranch(s *string) *DelegatedStakingCreate {
	if s != nil {
		dsc.SetContractCodeBranch(*s)
	}
	return dsc
}

// SetContractState sets the "contract_state" field.
func (dsc *DelegatedStakingCreate) SetContractState(s string) *DelegatedStakingCreate {
	dsc.mutation.SetContractState(s)
	return dsc
}

// SetNillableContractState sets the "contract_state" field if the given value is not nil.
func (dsc *DelegatedStakingCreate) SetNillableContractState(s *string) *DelegatedStakingCreate {
	if s != nil {
		dsc.SetContractState(*s)
	}
	return dsc
}

// SetID sets the "id" field.
func (dsc *DelegatedStakingCreate) SetID(u uint32) *DelegatedStakingCreate {
	dsc.mutation.SetID(u)
	return dsc
}

// Mutation returns the DelegatedStakingMutation object of the builder.
func (dsc *DelegatedStakingCreate) Mutation() *DelegatedStakingMutation {
	return dsc.mutation
}

// Save creates the DelegatedStaking in the database.
func (dsc *DelegatedStakingCreate) Save(ctx context.Context) (*DelegatedStaking, error) {
	dsc.defaults()
	return withHooks(ctx, dsc.sqlSave, dsc.mutation, dsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dsc *DelegatedStakingCreate) SaveX(ctx context.Context) *DelegatedStaking {
	v, err := dsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dsc *DelegatedStakingCreate) Exec(ctx context.Context) error {
	_, err := dsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsc *DelegatedStakingCreate) ExecX(ctx context.Context) {
	if err := dsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dsc *DelegatedStakingCreate) defaults() {
	if _, ok := dsc.mutation.EntID(); !ok {
		v := delegatedstaking.DefaultEntID()
		dsc.mutation.SetEntID(v)
	}
	if _, ok := dsc.mutation.GoodID(); !ok {
		v := delegatedstaking.DefaultGoodID()
		dsc.mutation.SetGoodID(v)
	}
	if _, ok := dsc.mutation.ContractCodeURL(); !ok {
		v := delegatedstaking.DefaultContractCodeURL
		dsc.mutation.SetContractCodeURL(v)
	}
	if _, ok := dsc.mutation.ContractCodeBranch(); !ok {
		v := delegatedstaking.DefaultContractCodeBranch
		dsc.mutation.SetContractCodeBranch(v)
	}
	if _, ok := dsc.mutation.ContractState(); !ok {
		v := delegatedstaking.DefaultContractState
		dsc.mutation.SetContractState(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dsc *DelegatedStakingCreate) check() error {
	if _, ok := dsc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "DelegatedStaking.ent_id"`)}
	}
	return nil
}

func (dsc *DelegatedStakingCreate) sqlSave(ctx context.Context) (*DelegatedStaking, error) {
	if err := dsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	dsc.mutation.id = &_node.ID
	dsc.mutation.done = true
	return _node, nil
}

func (dsc *DelegatedStakingCreate) createSpec() (*DelegatedStaking, *sqlgraph.CreateSpec) {
	var (
		_node = &DelegatedStaking{config: dsc.config}
		_spec = sqlgraph.NewCreateSpec(delegatedstaking.Table, sqlgraph.NewFieldSpec(delegatedstaking.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = dsc.conflict
	if id, ok := dsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dsc.mutation.EntID(); ok {
		_spec.SetField(delegatedstaking.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := dsc.mutation.GoodID(); ok {
		_spec.SetField(delegatedstaking.FieldGoodID, field.TypeUUID, value)
		_node.GoodID = value
	}
	if value, ok := dsc.mutation.ContractCodeURL(); ok {
		_spec.SetField(delegatedstaking.FieldContractCodeURL, field.TypeString, value)
		_node.ContractCodeURL = value
	}
	if value, ok := dsc.mutation.ContractCodeBranch(); ok {
		_spec.SetField(delegatedstaking.FieldContractCodeBranch, field.TypeString, value)
		_node.ContractCodeBranch = value
	}
	if value, ok := dsc.mutation.ContractState(); ok {
		_spec.SetField(delegatedstaking.FieldContractState, field.TypeString, value)
		_node.ContractState = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DelegatedStaking.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DelegatedStakingUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (dsc *DelegatedStakingCreate) OnConflict(opts ...sql.ConflictOption) *DelegatedStakingUpsertOne {
	dsc.conflict = opts
	return &DelegatedStakingUpsertOne{
		create: dsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DelegatedStaking.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dsc *DelegatedStakingCreate) OnConflictColumns(columns ...string) *DelegatedStakingUpsertOne {
	dsc.conflict = append(dsc.conflict, sql.ConflictColumns(columns...))
	return &DelegatedStakingUpsertOne{
		create: dsc,
	}
}

type (
	// DelegatedStakingUpsertOne is the builder for "upsert"-ing
	//  one DelegatedStaking node.
	DelegatedStakingUpsertOne struct {
		create *DelegatedStakingCreate
	}

	// DelegatedStakingUpsert is the "OnConflict" setter.
	DelegatedStakingUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *DelegatedStakingUpsert) SetEntID(v uuid.UUID) *DelegatedStakingUpsert {
	u.Set(delegatedstaking.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *DelegatedStakingUpsert) UpdateEntID() *DelegatedStakingUpsert {
	u.SetExcluded(delegatedstaking.FieldEntID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *DelegatedStakingUpsert) SetGoodID(v uuid.UUID) *DelegatedStakingUpsert {
	u.Set(delegatedstaking.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *DelegatedStakingUpsert) UpdateGoodID() *DelegatedStakingUpsert {
	u.SetExcluded(delegatedstaking.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *DelegatedStakingUpsert) ClearGoodID() *DelegatedStakingUpsert {
	u.SetNull(delegatedstaking.FieldGoodID)
	return u
}

// SetContractCodeURL sets the "contract_code_url" field.
func (u *DelegatedStakingUpsert) SetContractCodeURL(v string) *DelegatedStakingUpsert {
	u.Set(delegatedstaking.FieldContractCodeURL, v)
	return u
}

// UpdateContractCodeURL sets the "contract_code_url" field to the value that was provided on create.
func (u *DelegatedStakingUpsert) UpdateContractCodeURL() *DelegatedStakingUpsert {
	u.SetExcluded(delegatedstaking.FieldContractCodeURL)
	return u
}

// ClearContractCodeURL clears the value of the "contract_code_url" field.
func (u *DelegatedStakingUpsert) ClearContractCodeURL() *DelegatedStakingUpsert {
	u.SetNull(delegatedstaking.FieldContractCodeURL)
	return u
}

// SetContractCodeBranch sets the "contract_code_branch" field.
func (u *DelegatedStakingUpsert) SetContractCodeBranch(v string) *DelegatedStakingUpsert {
	u.Set(delegatedstaking.FieldContractCodeBranch, v)
	return u
}

// UpdateContractCodeBranch sets the "contract_code_branch" field to the value that was provided on create.
func (u *DelegatedStakingUpsert) UpdateContractCodeBranch() *DelegatedStakingUpsert {
	u.SetExcluded(delegatedstaking.FieldContractCodeBranch)
	return u
}

// ClearContractCodeBranch clears the value of the "contract_code_branch" field.
func (u *DelegatedStakingUpsert) ClearContractCodeBranch() *DelegatedStakingUpsert {
	u.SetNull(delegatedstaking.FieldContractCodeBranch)
	return u
}

// SetContractState sets the "contract_state" field.
func (u *DelegatedStakingUpsert) SetContractState(v string) *DelegatedStakingUpsert {
	u.Set(delegatedstaking.FieldContractState, v)
	return u
}

// UpdateContractState sets the "contract_state" field to the value that was provided on create.
func (u *DelegatedStakingUpsert) UpdateContractState() *DelegatedStakingUpsert {
	u.SetExcluded(delegatedstaking.FieldContractState)
	return u
}

// ClearContractState clears the value of the "contract_state" field.
func (u *DelegatedStakingUpsert) ClearContractState() *DelegatedStakingUpsert {
	u.SetNull(delegatedstaking.FieldContractState)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DelegatedStaking.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(delegatedstaking.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DelegatedStakingUpsertOne) UpdateNewValues() *DelegatedStakingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(delegatedstaking.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DelegatedStaking.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DelegatedStakingUpsertOne) Ignore() *DelegatedStakingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DelegatedStakingUpsertOne) DoNothing() *DelegatedStakingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DelegatedStakingCreate.OnConflict
// documentation for more info.
func (u *DelegatedStakingUpsertOne) Update(set func(*DelegatedStakingUpsert)) *DelegatedStakingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DelegatedStakingUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *DelegatedStakingUpsertOne) SetEntID(v uuid.UUID) *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *DelegatedStakingUpsertOne) UpdateEntID() *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateEntID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *DelegatedStakingUpsertOne) SetGoodID(v uuid.UUID) *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *DelegatedStakingUpsertOne) UpdateGoodID() *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *DelegatedStakingUpsertOne) ClearGoodID() *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.ClearGoodID()
	})
}

// SetContractCodeURL sets the "contract_code_url" field.
func (u *DelegatedStakingUpsertOne) SetContractCodeURL(v string) *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetContractCodeURL(v)
	})
}

// UpdateContractCodeURL sets the "contract_code_url" field to the value that was provided on create.
func (u *DelegatedStakingUpsertOne) UpdateContractCodeURL() *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateContractCodeURL()
	})
}

// ClearContractCodeURL clears the value of the "contract_code_url" field.
func (u *DelegatedStakingUpsertOne) ClearContractCodeURL() *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.ClearContractCodeURL()
	})
}

// SetContractCodeBranch sets the "contract_code_branch" field.
func (u *DelegatedStakingUpsertOne) SetContractCodeBranch(v string) *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetContractCodeBranch(v)
	})
}

// UpdateContractCodeBranch sets the "contract_code_branch" field to the value that was provided on create.
func (u *DelegatedStakingUpsertOne) UpdateContractCodeBranch() *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateContractCodeBranch()
	})
}

// ClearContractCodeBranch clears the value of the "contract_code_branch" field.
func (u *DelegatedStakingUpsertOne) ClearContractCodeBranch() *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.ClearContractCodeBranch()
	})
}

// SetContractState sets the "contract_state" field.
func (u *DelegatedStakingUpsertOne) SetContractState(v string) *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetContractState(v)
	})
}

// UpdateContractState sets the "contract_state" field to the value that was provided on create.
func (u *DelegatedStakingUpsertOne) UpdateContractState() *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateContractState()
	})
}

// ClearContractState clears the value of the "contract_state" field.
func (u *DelegatedStakingUpsertOne) ClearContractState() *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.ClearContractState()
	})
}

// Exec executes the query.
func (u *DelegatedStakingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for DelegatedStakingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DelegatedStakingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DelegatedStakingUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DelegatedStakingUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DelegatedStakingCreateBulk is the builder for creating many DelegatedStaking entities in bulk.
type DelegatedStakingCreateBulk struct {
	config
	err      error
	builders []*DelegatedStakingCreate
	conflict []sql.ConflictOption
}

// Save creates the DelegatedStaking entities in the database.
func (dscb *DelegatedStakingCreateBulk) Save(ctx context.Context) ([]*DelegatedStaking, error) {
	if dscb.err != nil {
		return nil, dscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dscb.builders))
	nodes := make([]*DelegatedStaking, len(dscb.builders))
	mutators := make([]Mutator, len(dscb.builders))
	for i := range dscb.builders {
		func(i int, root context.Context) {
			builder := dscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DelegatedStakingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dscb *DelegatedStakingCreateBulk) SaveX(ctx context.Context) []*DelegatedStaking {
	v, err := dscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dscb *DelegatedStakingCreateBulk) Exec(ctx context.Context) error {
	_, err := dscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dscb *DelegatedStakingCreateBulk) ExecX(ctx context.Context) {
	if err := dscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DelegatedStaking.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DelegatedStakingUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (dscb *DelegatedStakingCreateBulk) OnConflict(opts ...sql.ConflictOption) *DelegatedStakingUpsertBulk {
	dscb.conflict = opts
	return &DelegatedStakingUpsertBulk{
		create: dscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DelegatedStaking.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dscb *DelegatedStakingCreateBulk) OnConflictColumns(columns ...string) *DelegatedStakingUpsertBulk {
	dscb.conflict = append(dscb.conflict, sql.ConflictColumns(columns...))
	return &DelegatedStakingUpsertBulk{
		create: dscb,
	}
}

// DelegatedStakingUpsertBulk is the builder for "upsert"-ing
// a bulk of DelegatedStaking nodes.
type DelegatedStakingUpsertBulk struct {
	create *DelegatedStakingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DelegatedStaking.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(delegatedstaking.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DelegatedStakingUpsertBulk) UpdateNewValues() *DelegatedStakingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(delegatedstaking.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DelegatedStaking.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DelegatedStakingUpsertBulk) Ignore() *DelegatedStakingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DelegatedStakingUpsertBulk) DoNothing() *DelegatedStakingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DelegatedStakingCreateBulk.OnConflict
// documentation for more info.
func (u *DelegatedStakingUpsertBulk) Update(set func(*DelegatedStakingUpsert)) *DelegatedStakingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DelegatedStakingUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *DelegatedStakingUpsertBulk) SetEntID(v uuid.UUID) *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *DelegatedStakingUpsertBulk) UpdateEntID() *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateEntID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *DelegatedStakingUpsertBulk) SetGoodID(v uuid.UUID) *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *DelegatedStakingUpsertBulk) UpdateGoodID() *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *DelegatedStakingUpsertBulk) ClearGoodID() *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.ClearGoodID()
	})
}

// SetContractCodeURL sets the "contract_code_url" field.
func (u *DelegatedStakingUpsertBulk) SetContractCodeURL(v string) *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetContractCodeURL(v)
	})
}

// UpdateContractCodeURL sets the "contract_code_url" field to the value that was provided on create.
func (u *DelegatedStakingUpsertBulk) UpdateContractCodeURL() *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateContractCodeURL()
	})
}

// ClearContractCodeURL clears the value of the "contract_code_url" field.
func (u *DelegatedStakingUpsertBulk) ClearContractCodeURL() *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.ClearContractCodeURL()
	})
}

// SetContractCodeBranch sets the "contract_code_branch" field.
func (u *DelegatedStakingUpsertBulk) SetContractCodeBranch(v string) *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetContractCodeBranch(v)
	})
}

// UpdateContractCodeBranch sets the "contract_code_branch" field to the value that was provided on create.
func (u *DelegatedStakingUpsertBulk) UpdateContractCodeBranch() *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateContractCodeBranch()
	})
}

// ClearContractCodeBranch clears the value of the "contract_code_branch" field.
func (u *DelegatedStakingUpsertBulk) ClearContractCodeBranch() *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.ClearContractCodeBranch()
	})
}

// SetContractState sets the "contract_state" field.
func (u *DelegatedStakingUpsertBulk) SetContractState(v string) *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetContractState(v)
	})
}

// UpdateContractState sets the "contract_state" field to the value that was provided on create.
func (u *DelegatedStakingUpsertBulk) UpdateContractState() *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateContractState()
	})
}

// ClearContractState clears the value of the "contract_state" field.
func (u *DelegatedStakingUpsertBulk) ClearContractState() *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.ClearContractState()
	})
}

// Exec executes the query.
func (u *DelegatedStakingUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the DelegatedStakingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for DelegatedStakingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DelegatedStakingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appgooddisplayname"
	"github.com/google/uuid"
)

// AppGoodDisplayNameCreate is the builder for creating a AppGoodDisplayName entity.
type AppGoodDisplayNameCreate struct {
	config
	mutation *AppGoodDisplayNameMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (agdnc *AppGoodDisplayNameCreate) SetEntID(u uuid.UUID) *AppGoodDisplayNameCreate {
	agdnc.mutation.SetEntID(u)
	return agdnc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (agdnc *AppGoodDisplayNameCreate) SetNillableEntID(u *uuid.UUID) *AppGoodDisplayNameCreate {
	if u != nil {
		agdnc.SetEntID(*u)
	}
	return agdnc
}

// SetAppGoodID sets the "app_good_id" field.
func (agdnc *AppGoodDisplayNameCreate) SetAppGoodID(u uuid.UUID) *AppGoodDisplayNameCreate {
	agdnc.mutation.SetAppGoodID(u)
	return agdnc
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (agdnc *AppGoodDisplayNameCreate) SetNillableAppGoodID(u *uuid.UUID) *AppGoodDisplayNameCreate {
	if u != nil {
		agdnc.SetAppGoodID(*u)
	}
	return agdnc
}

// SetName sets the "name" field.
func (agdnc *AppGoodDisplayNameCreate) SetName(s string) *AppGoodDisplayNameCreate {
	agdnc.mutation.SetName(s)
	return agdnc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (agdnc *AppGoodDisplayNameCreate) SetNillableName(s *string) *AppGoodDisplayNameCreate {
	if s != nil {
		agdnc.SetName(*s)
	}
	return agdnc
}

// SetIndex sets the "index" field.
func (agdnc *AppGoodDisplayNameCreate) SetIndex(u uint8) *AppGoodDisplayNameCreate {
	agdnc.mutation.SetIndex(u)
	return agdnc
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (agdnc *AppGoodDisplayNameCreate) SetNillableIndex(u *uint8) *AppGoodDisplayNameCreate {
	if u != nil {
		agdnc.SetIndex(*u)
	}
	return agdnc
}

// SetID sets the "id" field.
func (agdnc *AppGoodDisplayNameCreate) SetID(u uint32) *AppGoodDisplayNameCreate {
	agdnc.mutation.SetID(u)
	return agdnc
}

// Mutation returns the AppGoodDisplayNameMutation object of the builder.
func (agdnc *AppGoodDisplayNameCreate) Mutation() *AppGoodDisplayNameMutation {
	return agdnc.mutation
}

// Save creates the AppGoodDisplayName in the database.
func (agdnc *AppGoodDisplayNameCreate) Save(ctx context.Context) (*AppGoodDisplayName, error) {
	agdnc.defaults()
	return withHooks(ctx, agdnc.sqlSave, agdnc.mutation, agdnc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (agdnc *AppGoodDisplayNameCreate) SaveX(ctx context.Context) *AppGoodDisplayName {
	v, err := agdnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agdnc *AppGoodDisplayNameCreate) Exec(ctx context.Context) error {
	_, err := agdnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agdnc *AppGoodDisplayNameCreate) ExecX(ctx context.Context) {
	if err := agdnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agdnc *AppGoodDisplayNameCreate) defaults() {
	if _, ok := agdnc.mutation.EntID(); !ok {
		v := appgooddisplayname.DefaultEntID()
		agdnc.mutation.SetEntID(v)
	}
	if _, ok := agdnc.mutation.AppGoodID(); !ok {
		v := appgooddisplayname.DefaultAppGoodID()
		agdnc.mutation.SetAppGoodID(v)
	}
	if _, ok := agdnc.mutation.Name(); !ok {
		v := appgooddisplayname.DefaultName
		agdnc.mutation.SetName(v)
	}
	if _, ok := agdnc.mutation.Index(); !ok {
		v := appgooddisplayname.DefaultIndex
		agdnc.mutation.SetIndex(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (agdnc *AppGoodDisplayNameCreate) check() error {
	if _, ok := agdnc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "AppGoodDisplayName.ent_id"`)}
	}
	return nil
}

func (agdnc *AppGoodDisplayNameCreate) sqlSave(ctx context.Context) (*AppGoodDisplayName, error) {
	if err := agdnc.check(); err != nil {
		return nil, err
	}
	_node, _spec := agdnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, agdnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	agdnc.mutation.id = &_node.ID
	agdnc.mutation.done = true
	return _node, nil
}

func (agdnc *AppGoodDisplayNameCreate) createSpec() (*AppGoodDisplayName, *sqlgraph.CreateSpec) {
	var (
		_node = &AppGoodDisplayName{config: agdnc.config}
		_spec = sqlgraph.NewCreateSpec(appgooddisplayname.Table, sqlgraph.NewFieldSpec(appgooddisplayname.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = agdnc.conflict
	if id, ok := agdnc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := agdnc.mutation.EntID(); ok {
		_spec.SetField(appgooddisplayname.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := agdnc.mutation.AppGoodID(); ok {
		_spec.SetField(appgooddisplayname.FieldAppGoodID, field.TypeUUID, value)
		_node.AppGoodID = value
	}
	if value, ok := agdnc.mutation.Name(); ok {
		_spec.SetField(appgooddisplayname.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := agdnc.mutation.Index(); ok {
		_spec.SetField(appgooddisplayname.FieldIndex, field.TypeUint8, value)
		_node.Index = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppGoodDisplayName.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppGoodDisplayNameUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (agdnc *AppGoodDisplayNameCreate) OnConflict(opts ...sql.ConflictOption) *AppGoodDisplayNameUpsertOne {
	agdnc.conflict = opts
	return &AppGoodDisplayNameUpsertOne{
		create: agdnc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppGoodDisplayName.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (agdnc *AppGoodDisplayNameCreate) OnConflictColumns(columns ...string) *AppGoodDisplayNameUpsertOne {
	agdnc.conflict = append(agdnc.conflict, sql.ConflictColumns(columns...))
	return &AppGoodDisplayNameUpsertOne{
		create: agdnc,
	}
}

type (
	// AppGoodDisplayNameUpsertOne is the builder for "upsert"-ing
	//  one AppGoodDisplayName node.
	AppGoodDisplayNameUpsertOne struct {
		create *AppGoodDisplayNameCreate
	}

	// AppGoodDisplayNameUpsert is the "OnConflict" setter.
	AppGoodDisplayNameUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *AppGoodDisplayNameUpsert) SetEntID(v uuid.UUID) *AppGoodDisplayNameUpsert {
	u.Set(appgooddisplayname.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppGoodDisplayNameUpsert) UpdateEntID() *AppGoodDisplayNameUpsert {
	u.SetExcluded(appgooddisplayname.FieldEntID)
	return u
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppGoodDisplayNameUpsert) SetAppGoodID(v uuid.UUID) *AppGoodDisplayNameUpsert {
	u.Set(appgooddisplayname.FieldAppGoodID, v)
	return u
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppGoodDisplayNameUpsert) UpdateAppGoodID() *AppGoodDisplayNameUpsert {
	u.SetExcluded(appgooddisplayname.FieldAppGoodID)
	return u
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppGoodDisplayNameUpsert) ClearAppGoodID() *AppGoodDisplayNameUpsert {
	u.SetNull(appgooddisplayname.FieldAppGoodID)
	return u
}

// SetName sets the "name" field.
func (u *AppGoodDisplayNameUpsert) SetName(v string) *AppGoodDisplayNameUpsert {
	u.Set(appgooddisplayname.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppGoodDisplayNameUpsert) UpdateName() *AppGoodDisplayNameUpsert {
	u.SetExcluded(appgooddisplayname.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *AppGoodDisplayNameUpsert) ClearName() *AppGoodDisplayNameUpsert {
	u.SetNull(appgooddisplayname.FieldName)
	return u
}

// SetIndex sets the "index" field.
func (u *AppGoodDisplayNameUpsert) SetIndex(v uint8) *AppGoodDisplayNameUpsert {
	u.Set(appgooddisplayname.FieldIndex, v)
	return u
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *AppGoodDisplayNameUpsert) UpdateIndex() *AppGoodDisplayNameUpsert {
	u.SetExcluded(appgooddisplayname.FieldIndex)
	return u
}

// AddIndex adds v to the "index" field.
func (u *AppGoodDisplayNameUpsert) AddIndex(v uint8) *AppGoodDisplayNameUpsert {
	u.Add(appgooddisplayname.FieldIndex, v)
	return u
}

// ClearIndex clears the value of the "index" field.
func (u *AppGoodDisplayNameUpsert) ClearIndex() *AppGoodDisplayNameUpsert {
	u.SetNull(appgooddisplayname.FieldIndex)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppGoodDisplayName.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appgooddisplayname.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppGoodDisplayNameUpsertOne) UpdateNewValues() *AppGoodDisplayNameUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appgooddisplayname.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppGoodDisplayName.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppGoodDisplayNameUpsertOne) Ignore() *AppGoodDisplayNameUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppGoodDisplayNameUpsertOne) DoNothing() *AppGoodDisplayNameUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppGoodDisplayNameCreate.OnConflict
// documentation for more info.
func (u *AppGoodDisplayNameUpsertOne) Update(set func(*AppGoodDisplayNameUpsert)) *AppGoodDisplayNameUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppGoodDisplayNameUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppGoodDisplayNameUpsertOne) SetEntID(v uuid.UUID) *AppGoodDisplayNameUpsertOne {
	return u.Update(func(s *AppGoodDisplayNameUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppGoodDisplayNameUpsertOne) UpdateEntID() *AppGoodDisplayNameUpsertOne {
	return u.Update(func(s *AppGoodDisplayNameUpsert) {
		s.UpdateEntID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppGoodDisplayNameUpsertOne) SetAppGoodID(v uuid.UUID) *AppGoodDisplayNameUpsertOne {
	return u.Update(func(s *AppGoodDisplayNameUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppGoodDisplayNameUpsertOne) UpdateAppGoodID() *AppGoodDisplayNameUpsertOne {
	return u.Update(func(s *AppGoodDisplayNameUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppGoodDisplayNameUpsertOne) ClearAppGoodID() *AppGoodDisplayNameUpsertOne {
	return u.Update(func(s *AppGoodDisplayNameUpsert) {
		s.ClearAppGoodID()
	})
}

// SetName sets the "name" field.
func (u *AppGoodDisplayNameUpsertOne) SetName(v string) *AppGoodDisplayNameUpsertOne {
	return u.Update(func(s *AppGoodDisplayNameUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppGoodDisplayNameUpsertOne) UpdateName() *AppGoodDisplayNameUpsertOne {
	return u.Update(func(s *AppGoodDisplayNameUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *AppGoodDisplayNameUpsertOne) ClearName() *AppGoodDisplayNameUpsertOne {
	return u.Update(func(s *AppGoodDisplayNameUpsert) {
		s.ClearName()
	})
}

// SetIndex sets the "index" field.
func (u *AppGoodDisplayNameUpsertOne) SetIndex(v uint8) *AppGoodDisplayNameUpsertOne {
	return u.Update(func(s *AppGoodDisplayNameUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *AppGoodDisplayNameUpsertOne) AddIndex(v uint8) *AppGoodDisplayNameUpsertOne {
	return u.Update(func(s *AppGoodDisplayNameUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *AppGoodDisplayNameUpsertOne) UpdateIndex() *AppGoodDisplayNameUpsertOne {
	return u.Update(func(s *AppGoodDisplayNameUpsert) {
		s.UpdateIndex()
	})
}

// ClearIndex clears the value of the "index" field.
func (u *AppGoodDisplayNameUpsertOne) ClearIndex() *AppGoodDisplayNameUpsertOne {
	return u.Update(func(s *AppGoodDisplayNameUpsert) {
		s.ClearIndex()
	})
}

// Exec executes the query.
func (u *AppGoodDisplayNameUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppGoodDisplayNameCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppGoodDisplayNameUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppGoodDisplayNameUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppGoodDisplayNameUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppGoodDisplayNameCreateBulk is the builder for creating many AppGoodDisplayName entities in bulk.
type AppGoodDisplayNameCreateBulk struct {
	config
	err      error
	builders []*AppGoodDisplayNameCreate
	conflict []sql.ConflictOption
}

// Save creates the AppGoodDisplayName entities in the database.
func (agdncb *AppGoodDisplayNameCreateBulk) Save(ctx context.Context) ([]*AppGoodDisplayName, error) {
	if agdncb.err != nil {
		return nil, agdncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(agdncb.builders))
	nodes := make([]*AppGoodDisplayName, len(agdncb.builders))
	mutators := make([]Mutator, len(agdncb.builders))
	for i := range agdncb.builders {
		func(i int, root context.Context) {
			builder := agdncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppGoodDisplayNameMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, agdncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = agdncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, agdncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, agdncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (agdncb *AppGoodDisplayNameCreateBulk) SaveX(ctx context.Context) []*AppGoodDisplayName {
	v, err := agdncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agdncb *AppGoodDisplayNameCreateBulk) Exec(ctx context.Context) error {
	_, err := agdncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agdncb *AppGoodDisplayNameCreateBulk) ExecX(ctx context.Context) {
	if err := agdncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppGoodDisplayName.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppGoodDisplayNameUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (agdncb *AppGoodDisplayNameCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppGoodDisplayNameUpsertBulk {
	agdncb.conflict = opts
	return &AppGoodDisplayNameUpsertBulk{
		create: agdncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppGoodDisplayName.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (agdncb *AppGoodDisplayNameCreateBulk) OnConflictColumns(columns ...string) *AppGoodDisplayNameUpsertBulk {
	agdncb.conflict = append(agdncb.conflict, sql.ConflictColumns(columns...))
	return &AppGoodDisplayNameUpsertBulk{
		create: agdncb,
	}
}

// AppGoodDisplayNameUpsertBulk is the builder for "upsert"-ing
// a bulk of AppGoodDisplayName nodes.
type AppGoodDisplayNameUpsertBulk struct {
	create *AppGoodDisplayNameCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppGoodDisplayName.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appgooddisplayname.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppGoodDisplayNameUpsertBulk) UpdateNewValues() *AppGoodDisplayNameUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appgooddisplayname.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppGoodDisplayName.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppGoodDisplayNameUpsertBulk) Ignore() *AppGoodDisplayNameUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppGoodDisplayNameUpsertBulk) DoNothing() *AppGoodDisplayNameUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppGoodDisplayNameCreateBulk.OnConflict
// documentation for more info.
func (u *AppGoodDisplayNameUpsertBulk) Update(set func(*AppGoodDisplayNameUpsert)) *AppGoodDisplayNameUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppGoodDisplayNameUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppGoodDisplayNameUpsertBulk) SetEntID(v uuid.UUID) *AppGoodDisplayNameUpsertBulk {
	return u.Update(func(s *AppGoodDisplayNameUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppGoodDisplayNameUpsertBulk) UpdateEntID() *AppGoodDisplayNameUpsertBulk {
	return u.Update(func(s *AppGoodDisplayNameUpsert) {
		s.UpdateEntID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppGoodDisplayNameUpsertBulk) SetAppGoodID(v uuid.UUID) *AppGoodDisplayNameUpsertBulk {
	return u.Update(func(s *AppGoodDisplayNameUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppGoodDisplayNameUpsertBulk) UpdateAppGoodID() *AppGoodDisplayNameUpsertBulk {
	return u.Update(func(s *AppGoodDisplayNameUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppGoodDisplayNameUpsertBulk) ClearAppGoodID() *AppGoodDisplayNameUpsertBulk {
	return u.Update(func(s *AppGoodDisplayNameUpsert) {
		s.ClearAppGoodID()
	})
}

// SetName sets the "name" field.
func (u *AppGoodDisplayNameUpsertBulk) SetName(v string) *AppGoodDisplayNameUpsertBulk {
	return u.Update(func(s *AppGoodDisplayNameUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppGoodDisplayNameUpsertBulk) UpdateName() *AppGoodDisplayNameUpsertBulk {
	return u.Update(func(s *AppGoodDisplayNameUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *AppGoodDisplayNameUpsertBulk) ClearName() *AppGoodDisplayNameUpsertBulk {
	return u.Update(func(s *AppGoodDisplayNameUpsert) {
		s.ClearName()
	})
}

// SetIndex sets the "index" field.
func (u *AppGoodDisplayNameUpsertBulk) SetIndex(v uint8) *AppGoodDisplayNameUpsertBulk {
	return u.Update(func(s *AppGoodDisplayNameUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *AppGoodDisplayNameUpsertBulk) AddIndex(v uint8) *AppGoodDisplayNameUpsertBulk {
	return u.Update(func(s *AppGoodDisplayNameUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *AppGoodDisplayNameUpsertBulk) UpdateIndex() *AppGoodDisplayNameUpsertBulk {
	return u.Update(func(s *AppGoodDisplayNameUpsert) {
		s.UpdateIndex()
	})
}

// ClearIndex clears the value of the "index" field.
func (u *AppGoodDisplayNameUpsertBulk) ClearIndex() *AppGoodDisplayNameUpsertBulk {
	return u.Update(func(s *AppGoodDisplayNameUpsert) {
		s.ClearIndex()
	})
}

// Exec executes the query.
func (u *AppGoodDisplayNameUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the AppGoodDisplayNameCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppGoodDisplayNameCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppGoodDisplayNameUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

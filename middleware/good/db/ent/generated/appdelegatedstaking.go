// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appdelegatedstaking"
	"github.com/google/uuid"
)

// AppDelegatedStaking is the model entity for the AppDelegatedStaking schema.
type AppDelegatedStaking struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppGoodID holds the value of the "app_good_id" field.
	AppGoodID uuid.UUID `json:"app_good_id,omitempty"`
	// ServiceStartAt holds the value of the "service_start_at" field.
	ServiceStartAt uint32 `json:"service_start_at,omitempty"`
	// StartMode holds the value of the "start_mode" field.
	StartMode string `json:"start_mode,omitempty"`
	// EnableSetCommission holds the value of the "enable_set_commission" field.
	EnableSetCommission bool `json:"enable_set_commission,omitempty"`
	selectValues        sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppDelegatedStaking) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appdelegatedstaking.FieldEnableSetCommission:
			values[i] = new(sql.NullBool)
		case appdelegatedstaking.FieldID, appdelegatedstaking.FieldCreatedAt, appdelegatedstaking.FieldUpdatedAt, appdelegatedstaking.FieldDeletedAt, appdelegatedstaking.FieldServiceStartAt:
			values[i] = new(sql.NullInt64)
		case appdelegatedstaking.FieldStartMode:
			values[i] = new(sql.NullString)
		case appdelegatedstaking.FieldEntID, appdelegatedstaking.FieldAppGoodID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppDelegatedStaking fields.
func (ads *AppDelegatedStaking) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appdelegatedstaking.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ads.ID = uint32(value.Int64)
		case appdelegatedstaking.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				ads.EntID = *value
			}
		case appdelegatedstaking.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ads.CreatedAt = uint32(value.Int64)
			}
		case appdelegatedstaking.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ads.UpdatedAt = uint32(value.Int64)
			}
		case appdelegatedstaking.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ads.DeletedAt = uint32(value.Int64)
			}
		case appdelegatedstaking.FieldAppGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_good_id", values[i])
			} else if value != nil {
				ads.AppGoodID = *value
			}
		case appdelegatedstaking.FieldServiceStartAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field service_start_at", values[i])
			} else if value.Valid {
				ads.ServiceStartAt = uint32(value.Int64)
			}
		case appdelegatedstaking.FieldStartMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field start_mode", values[i])
			} else if value.Valid {
				ads.StartMode = value.String
			}
		case appdelegatedstaking.FieldEnableSetCommission:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable_set_commission", values[i])
			} else if value.Valid {
				ads.EnableSetCommission = value.Bool
			}
		default:
			ads.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppDelegatedStaking.
// This includes values selected through modifiers, order, etc.
func (ads *AppDelegatedStaking) Value(name string) (ent.Value, error) {
	return ads.selectValues.Get(name)
}

// Update returns a builder for updating this AppDelegatedStaking.
// Note that you need to call AppDelegatedStaking.Unwrap() before calling this method if this AppDelegatedStaking
// was returned from a transaction, and the transaction was committed or rolled back.
func (ads *AppDelegatedStaking) Update() *AppDelegatedStakingUpdateOne {
	return NewAppDelegatedStakingClient(ads.config).UpdateOne(ads)
}

// Unwrap unwraps the AppDelegatedStaking entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ads *AppDelegatedStaking) Unwrap() *AppDelegatedStaking {
	_tx, ok := ads.config.driver.(*txDriver)
	if !ok {
		panic("generated: AppDelegatedStaking is not a transactional entity")
	}
	ads.config.driver = _tx.drv
	return ads
}

// String implements the fmt.Stringer.
func (ads *AppDelegatedStaking) String() string {
	var builder strings.Builder
	builder.WriteString("AppDelegatedStaking(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ads.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", ads.EntID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", ads.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ads.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", ads.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("app_good_id=")
	builder.WriteString(fmt.Sprintf("%v", ads.AppGoodID))
	builder.WriteString(", ")
	builder.WriteString("service_start_at=")
	builder.WriteString(fmt.Sprintf("%v", ads.ServiceStartAt))
	builder.WriteString(", ")
	builder.WriteString("start_mode=")
	builder.WriteString(ads.StartMode)
	builder.WriteString(", ")
	builder.WriteString("enable_set_commission=")
	builder.WriteString(fmt.Sprintf("%v", ads.EnableSetCommission))
	builder.WriteByte(')')
	return builder.String()
}

// AppDelegatedStakings is a parsable slice of AppDelegatedStaking.
type AppDelegatedStakings []*AppDelegatedStaking

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appgoodbase"
	"github.com/google/uuid"
)

// AppGoodBase is the model entity for the AppGoodBase schema.
type AppGoodBase struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// Purchasable holds the value of the "purchasable" field.
	Purchasable bool `json:"purchasable,omitempty"`
	// EnableProductPage holds the value of the "enable_product_page" field.
	EnableProductPage bool `json:"enable_product_page,omitempty"`
	// ProductPage holds the value of the "product_page" field.
	ProductPage string `json:"product_page,omitempty"`
	// Online holds the value of the "online" field.
	Online bool `json:"online,omitempty"`
	// Visible holds the value of the "visible" field.
	Visible bool `json:"visible,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DisplayIndex holds the value of the "display_index" field.
	DisplayIndex int32 `json:"display_index,omitempty"`
	// Banner holds the value of the "banner" field.
	Banner       string `json:"banner,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppGoodBase) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appgoodbase.FieldPurchasable, appgoodbase.FieldEnableProductPage, appgoodbase.FieldOnline, appgoodbase.FieldVisible:
			values[i] = new(sql.NullBool)
		case appgoodbase.FieldID, appgoodbase.FieldDisplayIndex:
			values[i] = new(sql.NullInt64)
		case appgoodbase.FieldProductPage, appgoodbase.FieldName, appgoodbase.FieldBanner:
			values[i] = new(sql.NullString)
		case appgoodbase.FieldEntID, appgoodbase.FieldAppID, appgoodbase.FieldGoodID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppGoodBase fields.
func (agb *AppGoodBase) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appgoodbase.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			agb.ID = uint32(value.Int64)
		case appgoodbase.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				agb.EntID = *value
			}
		case appgoodbase.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				agb.AppID = *value
			}
		case appgoodbase.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				agb.GoodID = *value
			}
		case appgoodbase.FieldPurchasable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field purchasable", values[i])
			} else if value.Valid {
				agb.Purchasable = value.Bool
			}
		case appgoodbase.FieldEnableProductPage:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable_product_page", values[i])
			} else if value.Valid {
				agb.EnableProductPage = value.Bool
			}
		case appgoodbase.FieldProductPage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_page", values[i])
			} else if value.Valid {
				agb.ProductPage = value.String
			}
		case appgoodbase.FieldOnline:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field online", values[i])
			} else if value.Valid {
				agb.Online = value.Bool
			}
		case appgoodbase.FieldVisible:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field visible", values[i])
			} else if value.Valid {
				agb.Visible = value.Bool
			}
		case appgoodbase.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				agb.Name = value.String
			}
		case appgoodbase.FieldDisplayIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field display_index", values[i])
			} else if value.Valid {
				agb.DisplayIndex = int32(value.Int64)
			}
		case appgoodbase.FieldBanner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field banner", values[i])
			} else if value.Valid {
				agb.Banner = value.String
			}
		default:
			agb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppGoodBase.
// This includes values selected through modifiers, order, etc.
func (agb *AppGoodBase) Value(name string) (ent.Value, error) {
	return agb.selectValues.Get(name)
}

// Update returns a builder for updating this AppGoodBase.
// Note that you need to call AppGoodBase.Unwrap() before calling this method if this AppGoodBase
// was returned from a transaction, and the transaction was committed or rolled back.
func (agb *AppGoodBase) Update() *AppGoodBaseUpdateOne {
	return NewAppGoodBaseClient(agb.config).UpdateOne(agb)
}

// Unwrap unwraps the AppGoodBase entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (agb *AppGoodBase) Unwrap() *AppGoodBase {
	_tx, ok := agb.config.driver.(*txDriver)
	if !ok {
		panic("generated: AppGoodBase is not a transactional entity")
	}
	agb.config.driver = _tx.drv
	return agb
}

// String implements the fmt.Stringer.
func (agb *AppGoodBase) String() string {
	var builder strings.Builder
	builder.WriteString("AppGoodBase(")
	builder.WriteString(fmt.Sprintf("id=%v, ", agb.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", agb.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", agb.AppID))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", agb.GoodID))
	builder.WriteString(", ")
	builder.WriteString("purchasable=")
	builder.WriteString(fmt.Sprintf("%v", agb.Purchasable))
	builder.WriteString(", ")
	builder.WriteString("enable_product_page=")
	builder.WriteString(fmt.Sprintf("%v", agb.EnableProductPage))
	builder.WriteString(", ")
	builder.WriteString("product_page=")
	builder.WriteString(agb.ProductPage)
	builder.WriteString(", ")
	builder.WriteString("online=")
	builder.WriteString(fmt.Sprintf("%v", agb.Online))
	builder.WriteString(", ")
	builder.WriteString("visible=")
	builder.WriteString(fmt.Sprintf("%v", agb.Visible))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(agb.Name)
	builder.WriteString(", ")
	builder.WriteString("display_index=")
	builder.WriteString(fmt.Sprintf("%v", agb.DisplayIndex))
	builder.WriteString(", ")
	builder.WriteString("banner=")
	builder.WriteString(agb.Banner)
	builder.WriteByte(')')
	return builder.String()
}

// AppGoodBases is a parsable slice of AppGoodBase.
type AppGoodBases []*AppGoodBase

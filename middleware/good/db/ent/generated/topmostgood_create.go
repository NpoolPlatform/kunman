// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/topmostgood"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// TopMostGoodCreate is the builder for creating a TopMostGood entity.
type TopMostGoodCreate struct {
	config
	mutation *TopMostGoodMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (tmgc *TopMostGoodCreate) SetEntID(u uuid.UUID) *TopMostGoodCreate {
	tmgc.mutation.SetEntID(u)
	return tmgc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tmgc *TopMostGoodCreate) SetNillableEntID(u *uuid.UUID) *TopMostGoodCreate {
	if u != nil {
		tmgc.SetEntID(*u)
	}
	return tmgc
}

// SetCreatedAt sets the "created_at" field.
func (tmgc *TopMostGoodCreate) SetCreatedAt(u uint32) *TopMostGoodCreate {
	tmgc.mutation.SetCreatedAt(u)
	return tmgc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tmgc *TopMostGoodCreate) SetNillableCreatedAt(u *uint32) *TopMostGoodCreate {
	if u != nil {
		tmgc.SetCreatedAt(*u)
	}
	return tmgc
}

// SetUpdatedAt sets the "updated_at" field.
func (tmgc *TopMostGoodCreate) SetUpdatedAt(u uint32) *TopMostGoodCreate {
	tmgc.mutation.SetUpdatedAt(u)
	return tmgc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tmgc *TopMostGoodCreate) SetNillableUpdatedAt(u *uint32) *TopMostGoodCreate {
	if u != nil {
		tmgc.SetUpdatedAt(*u)
	}
	return tmgc
}

// SetDeletedAt sets the "deleted_at" field.
func (tmgc *TopMostGoodCreate) SetDeletedAt(u uint32) *TopMostGoodCreate {
	tmgc.mutation.SetDeletedAt(u)
	return tmgc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tmgc *TopMostGoodCreate) SetNillableDeletedAt(u *uint32) *TopMostGoodCreate {
	if u != nil {
		tmgc.SetDeletedAt(*u)
	}
	return tmgc
}

// SetAppGoodID sets the "app_good_id" field.
func (tmgc *TopMostGoodCreate) SetAppGoodID(u uuid.UUID) *TopMostGoodCreate {
	tmgc.mutation.SetAppGoodID(u)
	return tmgc
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (tmgc *TopMostGoodCreate) SetNillableAppGoodID(u *uuid.UUID) *TopMostGoodCreate {
	if u != nil {
		tmgc.SetAppGoodID(*u)
	}
	return tmgc
}

// SetTopMostID sets the "top_most_id" field.
func (tmgc *TopMostGoodCreate) SetTopMostID(u uuid.UUID) *TopMostGoodCreate {
	tmgc.mutation.SetTopMostID(u)
	return tmgc
}

// SetNillableTopMostID sets the "top_most_id" field if the given value is not nil.
func (tmgc *TopMostGoodCreate) SetNillableTopMostID(u *uuid.UUID) *TopMostGoodCreate {
	if u != nil {
		tmgc.SetTopMostID(*u)
	}
	return tmgc
}

// SetDisplayIndex sets the "display_index" field.
func (tmgc *TopMostGoodCreate) SetDisplayIndex(u uint32) *TopMostGoodCreate {
	tmgc.mutation.SetDisplayIndex(u)
	return tmgc
}

// SetNillableDisplayIndex sets the "display_index" field if the given value is not nil.
func (tmgc *TopMostGoodCreate) SetNillableDisplayIndex(u *uint32) *TopMostGoodCreate {
	if u != nil {
		tmgc.SetDisplayIndex(*u)
	}
	return tmgc
}

// SetUnitPrice sets the "unit_price" field.
func (tmgc *TopMostGoodCreate) SetUnitPrice(d decimal.Decimal) *TopMostGoodCreate {
	tmgc.mutation.SetUnitPrice(d)
	return tmgc
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (tmgc *TopMostGoodCreate) SetNillableUnitPrice(d *decimal.Decimal) *TopMostGoodCreate {
	if d != nil {
		tmgc.SetUnitPrice(*d)
	}
	return tmgc
}

// SetID sets the "id" field.
func (tmgc *TopMostGoodCreate) SetID(u uint32) *TopMostGoodCreate {
	tmgc.mutation.SetID(u)
	return tmgc
}

// Mutation returns the TopMostGoodMutation object of the builder.
func (tmgc *TopMostGoodCreate) Mutation() *TopMostGoodMutation {
	return tmgc.mutation
}

// Save creates the TopMostGood in the database.
func (tmgc *TopMostGoodCreate) Save(ctx context.Context) (*TopMostGood, error) {
	tmgc.defaults()
	return withHooks(ctx, tmgc.sqlSave, tmgc.mutation, tmgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tmgc *TopMostGoodCreate) SaveX(ctx context.Context) *TopMostGood {
	v, err := tmgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmgc *TopMostGoodCreate) Exec(ctx context.Context) error {
	_, err := tmgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmgc *TopMostGoodCreate) ExecX(ctx context.Context) {
	if err := tmgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmgc *TopMostGoodCreate) defaults() {
	if _, ok := tmgc.mutation.EntID(); !ok {
		v := topmostgood.DefaultEntID()
		tmgc.mutation.SetEntID(v)
	}
	if _, ok := tmgc.mutation.CreatedAt(); !ok {
		v := topmostgood.DefaultCreatedAt()
		tmgc.mutation.SetCreatedAt(v)
	}
	if _, ok := tmgc.mutation.UpdatedAt(); !ok {
		v := topmostgood.DefaultUpdatedAt()
		tmgc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tmgc.mutation.DeletedAt(); !ok {
		v := topmostgood.DefaultDeletedAt()
		tmgc.mutation.SetDeletedAt(v)
	}
	if _, ok := tmgc.mutation.AppGoodID(); !ok {
		v := topmostgood.DefaultAppGoodID()
		tmgc.mutation.SetAppGoodID(v)
	}
	if _, ok := tmgc.mutation.TopMostID(); !ok {
		v := topmostgood.DefaultTopMostID()
		tmgc.mutation.SetTopMostID(v)
	}
	if _, ok := tmgc.mutation.DisplayIndex(); !ok {
		v := topmostgood.DefaultDisplayIndex
		tmgc.mutation.SetDisplayIndex(v)
	}
	if _, ok := tmgc.mutation.UnitPrice(); !ok {
		v := topmostgood.DefaultUnitPrice
		tmgc.mutation.SetUnitPrice(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tmgc *TopMostGoodCreate) check() error {
	if _, ok := tmgc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "TopMostGood.ent_id"`)}
	}
	if _, ok := tmgc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "TopMostGood.created_at"`)}
	}
	if _, ok := tmgc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "TopMostGood.updated_at"`)}
	}
	if _, ok := tmgc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "TopMostGood.deleted_at"`)}
	}
	return nil
}

func (tmgc *TopMostGoodCreate) sqlSave(ctx context.Context) (*TopMostGood, error) {
	if err := tmgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tmgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tmgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	tmgc.mutation.id = &_node.ID
	tmgc.mutation.done = true
	return _node, nil
}

func (tmgc *TopMostGoodCreate) createSpec() (*TopMostGood, *sqlgraph.CreateSpec) {
	var (
		_node = &TopMostGood{config: tmgc.config}
		_spec = sqlgraph.NewCreateSpec(topmostgood.Table, sqlgraph.NewFieldSpec(topmostgood.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = tmgc.conflict
	if id, ok := tmgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tmgc.mutation.EntID(); ok {
		_spec.SetField(topmostgood.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := tmgc.mutation.CreatedAt(); ok {
		_spec.SetField(topmostgood.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := tmgc.mutation.UpdatedAt(); ok {
		_spec.SetField(topmostgood.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := tmgc.mutation.DeletedAt(); ok {
		_spec.SetField(topmostgood.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := tmgc.mutation.AppGoodID(); ok {
		_spec.SetField(topmostgood.FieldAppGoodID, field.TypeUUID, value)
		_node.AppGoodID = value
	}
	if value, ok := tmgc.mutation.TopMostID(); ok {
		_spec.SetField(topmostgood.FieldTopMostID, field.TypeUUID, value)
		_node.TopMostID = value
	}
	if value, ok := tmgc.mutation.DisplayIndex(); ok {
		_spec.SetField(topmostgood.FieldDisplayIndex, field.TypeUint32, value)
		_node.DisplayIndex = value
	}
	if value, ok := tmgc.mutation.UnitPrice(); ok {
		_spec.SetField(topmostgood.FieldUnitPrice, field.TypeOther, value)
		_node.UnitPrice = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TopMostGood.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TopMostGoodUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (tmgc *TopMostGoodCreate) OnConflict(opts ...sql.ConflictOption) *TopMostGoodUpsertOne {
	tmgc.conflict = opts
	return &TopMostGoodUpsertOne{
		create: tmgc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TopMostGood.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tmgc *TopMostGoodCreate) OnConflictColumns(columns ...string) *TopMostGoodUpsertOne {
	tmgc.conflict = append(tmgc.conflict, sql.ConflictColumns(columns...))
	return &TopMostGoodUpsertOne{
		create: tmgc,
	}
}

type (
	// TopMostGoodUpsertOne is the builder for "upsert"-ing
	//  one TopMostGood node.
	TopMostGoodUpsertOne struct {
		create *TopMostGoodCreate
	}

	// TopMostGoodUpsert is the "OnConflict" setter.
	TopMostGoodUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *TopMostGoodUpsert) SetEntID(v uuid.UUID) *TopMostGoodUpsert {
	u.Set(topmostgood.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TopMostGoodUpsert) UpdateEntID() *TopMostGoodUpsert {
	u.SetExcluded(topmostgood.FieldEntID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TopMostGoodUpsert) SetCreatedAt(v uint32) *TopMostGoodUpsert {
	u.Set(topmostgood.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TopMostGoodUpsert) UpdateCreatedAt() *TopMostGoodUpsert {
	u.SetExcluded(topmostgood.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TopMostGoodUpsert) AddCreatedAt(v uint32) *TopMostGoodUpsert {
	u.Add(topmostgood.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TopMostGoodUpsert) SetUpdatedAt(v uint32) *TopMostGoodUpsert {
	u.Set(topmostgood.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TopMostGoodUpsert) UpdateUpdatedAt() *TopMostGoodUpsert {
	u.SetExcluded(topmostgood.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TopMostGoodUpsert) AddUpdatedAt(v uint32) *TopMostGoodUpsert {
	u.Add(topmostgood.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TopMostGoodUpsert) SetDeletedAt(v uint32) *TopMostGoodUpsert {
	u.Set(topmostgood.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TopMostGoodUpsert) UpdateDeletedAt() *TopMostGoodUpsert {
	u.SetExcluded(topmostgood.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TopMostGoodUpsert) AddDeletedAt(v uint32) *TopMostGoodUpsert {
	u.Add(topmostgood.FieldDeletedAt, v)
	return u
}

// SetAppGoodID sets the "app_good_id" field.
func (u *TopMostGoodUpsert) SetAppGoodID(v uuid.UUID) *TopMostGoodUpsert {
	u.Set(topmostgood.FieldAppGoodID, v)
	return u
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *TopMostGoodUpsert) UpdateAppGoodID() *TopMostGoodUpsert {
	u.SetExcluded(topmostgood.FieldAppGoodID)
	return u
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *TopMostGoodUpsert) ClearAppGoodID() *TopMostGoodUpsert {
	u.SetNull(topmostgood.FieldAppGoodID)
	return u
}

// SetTopMostID sets the "top_most_id" field.
func (u *TopMostGoodUpsert) SetTopMostID(v uuid.UUID) *TopMostGoodUpsert {
	u.Set(topmostgood.FieldTopMostID, v)
	return u
}

// UpdateTopMostID sets the "top_most_id" field to the value that was provided on create.
func (u *TopMostGoodUpsert) UpdateTopMostID() *TopMostGoodUpsert {
	u.SetExcluded(topmostgood.FieldTopMostID)
	return u
}

// ClearTopMostID clears the value of the "top_most_id" field.
func (u *TopMostGoodUpsert) ClearTopMostID() *TopMostGoodUpsert {
	u.SetNull(topmostgood.FieldTopMostID)
	return u
}

// SetDisplayIndex sets the "display_index" field.
func (u *TopMostGoodUpsert) SetDisplayIndex(v uint32) *TopMostGoodUpsert {
	u.Set(topmostgood.FieldDisplayIndex, v)
	return u
}

// UpdateDisplayIndex sets the "display_index" field to the value that was provided on create.
func (u *TopMostGoodUpsert) UpdateDisplayIndex() *TopMostGoodUpsert {
	u.SetExcluded(topmostgood.FieldDisplayIndex)
	return u
}

// AddDisplayIndex adds v to the "display_index" field.
func (u *TopMostGoodUpsert) AddDisplayIndex(v uint32) *TopMostGoodUpsert {
	u.Add(topmostgood.FieldDisplayIndex, v)
	return u
}

// ClearDisplayIndex clears the value of the "display_index" field.
func (u *TopMostGoodUpsert) ClearDisplayIndex() *TopMostGoodUpsert {
	u.SetNull(topmostgood.FieldDisplayIndex)
	return u
}

// SetUnitPrice sets the "unit_price" field.
func (u *TopMostGoodUpsert) SetUnitPrice(v decimal.Decimal) *TopMostGoodUpsert {
	u.Set(topmostgood.FieldUnitPrice, v)
	return u
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *TopMostGoodUpsert) UpdateUnitPrice() *TopMostGoodUpsert {
	u.SetExcluded(topmostgood.FieldUnitPrice)
	return u
}

// ClearUnitPrice clears the value of the "unit_price" field.
func (u *TopMostGoodUpsert) ClearUnitPrice() *TopMostGoodUpsert {
	u.SetNull(topmostgood.FieldUnitPrice)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TopMostGood.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(topmostgood.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TopMostGoodUpsertOne) UpdateNewValues() *TopMostGoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(topmostgood.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TopMostGood.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TopMostGoodUpsertOne) Ignore() *TopMostGoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TopMostGoodUpsertOne) DoNothing() *TopMostGoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TopMostGoodCreate.OnConflict
// documentation for more info.
func (u *TopMostGoodUpsertOne) Update(set func(*TopMostGoodUpsert)) *TopMostGoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TopMostGoodUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *TopMostGoodUpsertOne) SetEntID(v uuid.UUID) *TopMostGoodUpsertOne {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TopMostGoodUpsertOne) UpdateEntID() *TopMostGoodUpsertOne {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TopMostGoodUpsertOne) SetCreatedAt(v uint32) *TopMostGoodUpsertOne {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TopMostGoodUpsertOne) AddCreatedAt(v uint32) *TopMostGoodUpsertOne {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TopMostGoodUpsertOne) UpdateCreatedAt() *TopMostGoodUpsertOne {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TopMostGoodUpsertOne) SetUpdatedAt(v uint32) *TopMostGoodUpsertOne {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TopMostGoodUpsertOne) AddUpdatedAt(v uint32) *TopMostGoodUpsertOne {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TopMostGoodUpsertOne) UpdateUpdatedAt() *TopMostGoodUpsertOne {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TopMostGoodUpsertOne) SetDeletedAt(v uint32) *TopMostGoodUpsertOne {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TopMostGoodUpsertOne) AddDeletedAt(v uint32) *TopMostGoodUpsertOne {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TopMostGoodUpsertOne) UpdateDeletedAt() *TopMostGoodUpsertOne {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *TopMostGoodUpsertOne) SetAppGoodID(v uuid.UUID) *TopMostGoodUpsertOne {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *TopMostGoodUpsertOne) UpdateAppGoodID() *TopMostGoodUpsertOne {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *TopMostGoodUpsertOne) ClearAppGoodID() *TopMostGoodUpsertOne {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.ClearAppGoodID()
	})
}

// SetTopMostID sets the "top_most_id" field.
func (u *TopMostGoodUpsertOne) SetTopMostID(v uuid.UUID) *TopMostGoodUpsertOne {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.SetTopMostID(v)
	})
}

// UpdateTopMostID sets the "top_most_id" field to the value that was provided on create.
func (u *TopMostGoodUpsertOne) UpdateTopMostID() *TopMostGoodUpsertOne {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.UpdateTopMostID()
	})
}

// ClearTopMostID clears the value of the "top_most_id" field.
func (u *TopMostGoodUpsertOne) ClearTopMostID() *TopMostGoodUpsertOne {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.ClearTopMostID()
	})
}

// SetDisplayIndex sets the "display_index" field.
func (u *TopMostGoodUpsertOne) SetDisplayIndex(v uint32) *TopMostGoodUpsertOne {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.SetDisplayIndex(v)
	})
}

// AddDisplayIndex adds v to the "display_index" field.
func (u *TopMostGoodUpsertOne) AddDisplayIndex(v uint32) *TopMostGoodUpsertOne {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.AddDisplayIndex(v)
	})
}

// UpdateDisplayIndex sets the "display_index" field to the value that was provided on create.
func (u *TopMostGoodUpsertOne) UpdateDisplayIndex() *TopMostGoodUpsertOne {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.UpdateDisplayIndex()
	})
}

// ClearDisplayIndex clears the value of the "display_index" field.
func (u *TopMostGoodUpsertOne) ClearDisplayIndex() *TopMostGoodUpsertOne {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.ClearDisplayIndex()
	})
}

// SetUnitPrice sets the "unit_price" field.
func (u *TopMostGoodUpsertOne) SetUnitPrice(v decimal.Decimal) *TopMostGoodUpsertOne {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.SetUnitPrice(v)
	})
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *TopMostGoodUpsertOne) UpdateUnitPrice() *TopMostGoodUpsertOne {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.UpdateUnitPrice()
	})
}

// ClearUnitPrice clears the value of the "unit_price" field.
func (u *TopMostGoodUpsertOne) ClearUnitPrice() *TopMostGoodUpsertOne {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.ClearUnitPrice()
	})
}

// Exec executes the query.
func (u *TopMostGoodUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for TopMostGoodCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TopMostGoodUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TopMostGoodUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TopMostGoodUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TopMostGoodCreateBulk is the builder for creating many TopMostGood entities in bulk.
type TopMostGoodCreateBulk struct {
	config
	err      error
	builders []*TopMostGoodCreate
	conflict []sql.ConflictOption
}

// Save creates the TopMostGood entities in the database.
func (tmgcb *TopMostGoodCreateBulk) Save(ctx context.Context) ([]*TopMostGood, error) {
	if tmgcb.err != nil {
		return nil, tmgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tmgcb.builders))
	nodes := make([]*TopMostGood, len(tmgcb.builders))
	mutators := make([]Mutator, len(tmgcb.builders))
	for i := range tmgcb.builders {
		func(i int, root context.Context) {
			builder := tmgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TopMostGoodMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tmgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tmgcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tmgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tmgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tmgcb *TopMostGoodCreateBulk) SaveX(ctx context.Context) []*TopMostGood {
	v, err := tmgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmgcb *TopMostGoodCreateBulk) Exec(ctx context.Context) error {
	_, err := tmgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmgcb *TopMostGoodCreateBulk) ExecX(ctx context.Context) {
	if err := tmgcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TopMostGood.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TopMostGoodUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (tmgcb *TopMostGoodCreateBulk) OnConflict(opts ...sql.ConflictOption) *TopMostGoodUpsertBulk {
	tmgcb.conflict = opts
	return &TopMostGoodUpsertBulk{
		create: tmgcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TopMostGood.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tmgcb *TopMostGoodCreateBulk) OnConflictColumns(columns ...string) *TopMostGoodUpsertBulk {
	tmgcb.conflict = append(tmgcb.conflict, sql.ConflictColumns(columns...))
	return &TopMostGoodUpsertBulk{
		create: tmgcb,
	}
}

// TopMostGoodUpsertBulk is the builder for "upsert"-ing
// a bulk of TopMostGood nodes.
type TopMostGoodUpsertBulk struct {
	create *TopMostGoodCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TopMostGood.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(topmostgood.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TopMostGoodUpsertBulk) UpdateNewValues() *TopMostGoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(topmostgood.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TopMostGood.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TopMostGoodUpsertBulk) Ignore() *TopMostGoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TopMostGoodUpsertBulk) DoNothing() *TopMostGoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TopMostGoodCreateBulk.OnConflict
// documentation for more info.
func (u *TopMostGoodUpsertBulk) Update(set func(*TopMostGoodUpsert)) *TopMostGoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TopMostGoodUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *TopMostGoodUpsertBulk) SetEntID(v uuid.UUID) *TopMostGoodUpsertBulk {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TopMostGoodUpsertBulk) UpdateEntID() *TopMostGoodUpsertBulk {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TopMostGoodUpsertBulk) SetCreatedAt(v uint32) *TopMostGoodUpsertBulk {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TopMostGoodUpsertBulk) AddCreatedAt(v uint32) *TopMostGoodUpsertBulk {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TopMostGoodUpsertBulk) UpdateCreatedAt() *TopMostGoodUpsertBulk {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TopMostGoodUpsertBulk) SetUpdatedAt(v uint32) *TopMostGoodUpsertBulk {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TopMostGoodUpsertBulk) AddUpdatedAt(v uint32) *TopMostGoodUpsertBulk {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TopMostGoodUpsertBulk) UpdateUpdatedAt() *TopMostGoodUpsertBulk {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TopMostGoodUpsertBulk) SetDeletedAt(v uint32) *TopMostGoodUpsertBulk {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TopMostGoodUpsertBulk) AddDeletedAt(v uint32) *TopMostGoodUpsertBulk {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TopMostGoodUpsertBulk) UpdateDeletedAt() *TopMostGoodUpsertBulk {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *TopMostGoodUpsertBulk) SetAppGoodID(v uuid.UUID) *TopMostGoodUpsertBulk {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *TopMostGoodUpsertBulk) UpdateAppGoodID() *TopMostGoodUpsertBulk {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *TopMostGoodUpsertBulk) ClearAppGoodID() *TopMostGoodUpsertBulk {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.ClearAppGoodID()
	})
}

// SetTopMostID sets the "top_most_id" field.
func (u *TopMostGoodUpsertBulk) SetTopMostID(v uuid.UUID) *TopMostGoodUpsertBulk {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.SetTopMostID(v)
	})
}

// UpdateTopMostID sets the "top_most_id" field to the value that was provided on create.
func (u *TopMostGoodUpsertBulk) UpdateTopMostID() *TopMostGoodUpsertBulk {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.UpdateTopMostID()
	})
}

// ClearTopMostID clears the value of the "top_most_id" field.
func (u *TopMostGoodUpsertBulk) ClearTopMostID() *TopMostGoodUpsertBulk {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.ClearTopMostID()
	})
}

// SetDisplayIndex sets the "display_index" field.
func (u *TopMostGoodUpsertBulk) SetDisplayIndex(v uint32) *TopMostGoodUpsertBulk {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.SetDisplayIndex(v)
	})
}

// AddDisplayIndex adds v to the "display_index" field.
func (u *TopMostGoodUpsertBulk) AddDisplayIndex(v uint32) *TopMostGoodUpsertBulk {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.AddDisplayIndex(v)
	})
}

// UpdateDisplayIndex sets the "display_index" field to the value that was provided on create.
func (u *TopMostGoodUpsertBulk) UpdateDisplayIndex() *TopMostGoodUpsertBulk {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.UpdateDisplayIndex()
	})
}

// ClearDisplayIndex clears the value of the "display_index" field.
func (u *TopMostGoodUpsertBulk) ClearDisplayIndex() *TopMostGoodUpsertBulk {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.ClearDisplayIndex()
	})
}

// SetUnitPrice sets the "unit_price" field.
func (u *TopMostGoodUpsertBulk) SetUnitPrice(v decimal.Decimal) *TopMostGoodUpsertBulk {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.SetUnitPrice(v)
	})
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *TopMostGoodUpsertBulk) UpdateUnitPrice() *TopMostGoodUpsertBulk {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.UpdateUnitPrice()
	})
}

// ClearUnitPrice clears the value of the "unit_price" field.
func (u *TopMostGoodUpsertBulk) ClearUnitPrice() *TopMostGoodUpsertBulk {
	return u.Update(func(s *TopMostGoodUpsert) {
		s.ClearUnitPrice()
	})
}

// Exec executes the query.
func (u *TopMostGoodUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the TopMostGoodCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for TopMostGoodCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TopMostGoodUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated"
)

// The AppDefaultGoodFunc type is an adapter to allow the use of ordinary
// function as AppDefaultGood mutator.
type AppDefaultGoodFunc func(context.Context, *generated.AppDefaultGoodMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f AppDefaultGoodFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.AppDefaultGoodMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.AppDefaultGoodMutation", m)
}

// The AppDelegatedStakingFunc type is an adapter to allow the use of ordinary
// function as AppDelegatedStaking mutator.
type AppDelegatedStakingFunc func(context.Context, *generated.AppDelegatedStakingMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f AppDelegatedStakingFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.AppDelegatedStakingMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.AppDelegatedStakingMutation", m)
}

// The AppFeeFunc type is an adapter to allow the use of ordinary
// function as AppFee mutator.
type AppFeeFunc func(context.Context, *generated.AppFeeMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f AppFeeFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.AppFeeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.AppFeeMutation", m)
}

// The AppGoodFunc type is an adapter to allow the use of ordinary
// function as AppGood mutator.
type AppGoodFunc func(context.Context, *generated.AppGoodMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f AppGoodFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.AppGoodMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.AppGoodMutation", m)
}

// The AppGoodBaseFunc type is an adapter to allow the use of ordinary
// function as AppGoodBase mutator.
type AppGoodBaseFunc func(context.Context, *generated.AppGoodBaseMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f AppGoodBaseFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.AppGoodBaseMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.AppGoodBaseMutation", m)
}

// The AppGoodDescriptionFunc type is an adapter to allow the use of ordinary
// function as AppGoodDescription mutator.
type AppGoodDescriptionFunc func(context.Context, *generated.AppGoodDescriptionMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f AppGoodDescriptionFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.AppGoodDescriptionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.AppGoodDescriptionMutation", m)
}

// The AppGoodDisplayColorFunc type is an adapter to allow the use of ordinary
// function as AppGoodDisplayColor mutator.
type AppGoodDisplayColorFunc func(context.Context, *generated.AppGoodDisplayColorMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f AppGoodDisplayColorFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.AppGoodDisplayColorMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.AppGoodDisplayColorMutation", m)
}

// The AppGoodDisplayNameFunc type is an adapter to allow the use of ordinary
// function as AppGoodDisplayName mutator.
type AppGoodDisplayNameFunc func(context.Context, *generated.AppGoodDisplayNameMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f AppGoodDisplayNameFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.AppGoodDisplayNameMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.AppGoodDisplayNameMutation", m)
}

// The AppGoodLabelFunc type is an adapter to allow the use of ordinary
// function as AppGoodLabel mutator.
type AppGoodLabelFunc func(context.Context, *generated.AppGoodLabelMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f AppGoodLabelFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.AppGoodLabelMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.AppGoodLabelMutation", m)
}

// The AppGoodPosterFunc type is an adapter to allow the use of ordinary
// function as AppGoodPoster mutator.
type AppGoodPosterFunc func(context.Context, *generated.AppGoodPosterMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f AppGoodPosterFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.AppGoodPosterMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.AppGoodPosterMutation", m)
}

// The AppLegacyPowerRentalFunc type is an adapter to allow the use of ordinary
// function as AppLegacyPowerRental mutator.
type AppLegacyPowerRentalFunc func(context.Context, *generated.AppLegacyPowerRentalMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f AppLegacyPowerRentalFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.AppLegacyPowerRentalMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.AppLegacyPowerRentalMutation", m)
}

// The AppMiningGoodStockFunc type is an adapter to allow the use of ordinary
// function as AppMiningGoodStock mutator.
type AppMiningGoodStockFunc func(context.Context, *generated.AppMiningGoodStockMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f AppMiningGoodStockFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.AppMiningGoodStockMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.AppMiningGoodStockMutation", m)
}

// The AppPowerRentalFunc type is an adapter to allow the use of ordinary
// function as AppPowerRental mutator.
type AppPowerRentalFunc func(context.Context, *generated.AppPowerRentalMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f AppPowerRentalFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.AppPowerRentalMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.AppPowerRentalMutation", m)
}

// The AppSimulatePowerRentalFunc type is an adapter to allow the use of ordinary
// function as AppSimulatePowerRental mutator.
type AppSimulatePowerRentalFunc func(context.Context, *generated.AppSimulatePowerRentalMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f AppSimulatePowerRentalFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.AppSimulatePowerRentalMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.AppSimulatePowerRentalMutation", m)
}

// The AppStockFunc type is an adapter to allow the use of ordinary
// function as AppStock mutator.
type AppStockFunc func(context.Context, *generated.AppStockMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f AppStockFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.AppStockMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.AppStockMutation", m)
}

// The AppStockLockFunc type is an adapter to allow the use of ordinary
// function as AppStockLock mutator.
type AppStockLockFunc func(context.Context, *generated.AppStockLockMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f AppStockLockFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.AppStockLockMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.AppStockLockMutation", m)
}

// The AppSubscriptionFunc type is an adapter to allow the use of ordinary
// function as AppSubscription mutator.
type AppSubscriptionFunc func(context.Context, *generated.AppSubscriptionMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f AppSubscriptionFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.AppSubscriptionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.AppSubscriptionMutation", m)
}

// The AppSubscriptionOneShotFunc type is an adapter to allow the use of ordinary
// function as AppSubscriptionOneShot mutator.
type AppSubscriptionOneShotFunc func(context.Context, *generated.AppSubscriptionOneShotMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f AppSubscriptionOneShotFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.AppSubscriptionOneShotMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.AppSubscriptionOneShotMutation", m)
}

// The CommentFunc type is an adapter to allow the use of ordinary
// function as Comment mutator.
type CommentFunc func(context.Context, *generated.CommentMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f CommentFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.CommentMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.CommentMutation", m)
}

// The DelegatedStakingFunc type is an adapter to allow the use of ordinary
// function as DelegatedStaking mutator.
type DelegatedStakingFunc func(context.Context, *generated.DelegatedStakingMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f DelegatedStakingFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.DelegatedStakingMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.DelegatedStakingMutation", m)
}

// The DeviceInfoFunc type is an adapter to allow the use of ordinary
// function as DeviceInfo mutator.
type DeviceInfoFunc func(context.Context, *generated.DeviceInfoMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f DeviceInfoFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.DeviceInfoMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.DeviceInfoMutation", m)
}

// The DeviceManufacturerFunc type is an adapter to allow the use of ordinary
// function as DeviceManufacturer mutator.
type DeviceManufacturerFunc func(context.Context, *generated.DeviceManufacturerMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f DeviceManufacturerFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.DeviceManufacturerMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.DeviceManufacturerMutation", m)
}

// The DevicePosterFunc type is an adapter to allow the use of ordinary
// function as DevicePoster mutator.
type DevicePosterFunc func(context.Context, *generated.DevicePosterMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f DevicePosterFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.DevicePosterMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.DevicePosterMutation", m)
}

// The ExtraInfoFunc type is an adapter to allow the use of ordinary
// function as ExtraInfo mutator.
type ExtraInfoFunc func(context.Context, *generated.ExtraInfoMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f ExtraInfoFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.ExtraInfoMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.ExtraInfoMutation", m)
}

// The FbmCrowdFundingFunc type is an adapter to allow the use of ordinary
// function as FbmCrowdFunding mutator.
type FbmCrowdFundingFunc func(context.Context, *generated.FbmCrowdFundingMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f FbmCrowdFundingFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.FbmCrowdFundingMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.FbmCrowdFundingMutation", m)
}

// The FeeFunc type is an adapter to allow the use of ordinary
// function as Fee mutator.
type FeeFunc func(context.Context, *generated.FeeMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f FeeFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.FeeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.FeeMutation", m)
}

// The GoodFunc type is an adapter to allow the use of ordinary
// function as Good mutator.
type GoodFunc func(context.Context, *generated.GoodMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f GoodFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.GoodMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.GoodMutation", m)
}

// The GoodBaseFunc type is an adapter to allow the use of ordinary
// function as GoodBase mutator.
type GoodBaseFunc func(context.Context, *generated.GoodBaseMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f GoodBaseFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.GoodBaseMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.GoodBaseMutation", m)
}

// The GoodCoinFunc type is an adapter to allow the use of ordinary
// function as GoodCoin mutator.
type GoodCoinFunc func(context.Context, *generated.GoodCoinMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f GoodCoinFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.GoodCoinMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.GoodCoinMutation", m)
}

// The GoodCoinRewardFunc type is an adapter to allow the use of ordinary
// function as GoodCoinReward mutator.
type GoodCoinRewardFunc func(context.Context, *generated.GoodCoinRewardMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f GoodCoinRewardFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.GoodCoinRewardMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.GoodCoinRewardMutation", m)
}

// The GoodMalfunctionFunc type is an adapter to allow the use of ordinary
// function as GoodMalfunction mutator.
type GoodMalfunctionFunc func(context.Context, *generated.GoodMalfunctionMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f GoodMalfunctionFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.GoodMalfunctionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.GoodMalfunctionMutation", m)
}

// The GoodRewardFunc type is an adapter to allow the use of ordinary
// function as GoodReward mutator.
type GoodRewardFunc func(context.Context, *generated.GoodRewardMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f GoodRewardFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.GoodRewardMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.GoodRewardMutation", m)
}

// The GoodRewardHistoryFunc type is an adapter to allow the use of ordinary
// function as GoodRewardHistory mutator.
type GoodRewardHistoryFunc func(context.Context, *generated.GoodRewardHistoryMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f GoodRewardHistoryFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.GoodRewardHistoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.GoodRewardHistoryMutation", m)
}

// The LikeFunc type is an adapter to allow the use of ordinary
// function as Like mutator.
type LikeFunc func(context.Context, *generated.LikeMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f LikeFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.LikeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.LikeMutation", m)
}

// The MiningGoodStockFunc type is an adapter to allow the use of ordinary
// function as MiningGoodStock mutator.
type MiningGoodStockFunc func(context.Context, *generated.MiningGoodStockMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f MiningGoodStockFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.MiningGoodStockMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.MiningGoodStockMutation", m)
}

// The PowerRentalFunc type is an adapter to allow the use of ordinary
// function as PowerRental mutator.
type PowerRentalFunc func(context.Context, *generated.PowerRentalMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f PowerRentalFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.PowerRentalMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.PowerRentalMutation", m)
}

// The RecommendFunc type is an adapter to allow the use of ordinary
// function as Recommend mutator.
type RecommendFunc func(context.Context, *generated.RecommendMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f RecommendFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.RecommendMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.RecommendMutation", m)
}

// The RequiredAppGoodFunc type is an adapter to allow the use of ordinary
// function as RequiredAppGood mutator.
type RequiredAppGoodFunc func(context.Context, *generated.RequiredAppGoodMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f RequiredAppGoodFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.RequiredAppGoodMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.RequiredAppGoodMutation", m)
}

// The RequiredGoodFunc type is an adapter to allow the use of ordinary
// function as RequiredGood mutator.
type RequiredGoodFunc func(context.Context, *generated.RequiredGoodMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f RequiredGoodFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.RequiredGoodMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.RequiredGoodMutation", m)
}

// The ScoreFunc type is an adapter to allow the use of ordinary
// function as Score mutator.
type ScoreFunc func(context.Context, *generated.ScoreMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f ScoreFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.ScoreMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.ScoreMutation", m)
}

// The StockFunc type is an adapter to allow the use of ordinary
// function as Stock mutator.
type StockFunc func(context.Context, *generated.StockMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f StockFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.StockMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.StockMutation", m)
}

// The SubscriptionFunc type is an adapter to allow the use of ordinary
// function as Subscription mutator.
type SubscriptionFunc func(context.Context, *generated.SubscriptionMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f SubscriptionFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.SubscriptionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.SubscriptionMutation", m)
}

// The SubscriptionOneShotFunc type is an adapter to allow the use of ordinary
// function as SubscriptionOneShot mutator.
type SubscriptionOneShotFunc func(context.Context, *generated.SubscriptionOneShotMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f SubscriptionOneShotFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.SubscriptionOneShotMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.SubscriptionOneShotMutation", m)
}

// The TopMostFunc type is an adapter to allow the use of ordinary
// function as TopMost mutator.
type TopMostFunc func(context.Context, *generated.TopMostMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f TopMostFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.TopMostMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.TopMostMutation", m)
}

// The TopMostConstraintFunc type is an adapter to allow the use of ordinary
// function as TopMostConstraint mutator.
type TopMostConstraintFunc func(context.Context, *generated.TopMostConstraintMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f TopMostConstraintFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.TopMostConstraintMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.TopMostConstraintMutation", m)
}

// The TopMostGoodFunc type is an adapter to allow the use of ordinary
// function as TopMostGood mutator.
type TopMostGoodFunc func(context.Context, *generated.TopMostGoodMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f TopMostGoodFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.TopMostGoodMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.TopMostGoodMutation", m)
}

// The TopMostGoodConstraintFunc type is an adapter to allow the use of ordinary
// function as TopMostGoodConstraint mutator.
type TopMostGoodConstraintFunc func(context.Context, *generated.TopMostGoodConstraintMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f TopMostGoodConstraintFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.TopMostGoodConstraintMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.TopMostGoodConstraintMutation", m)
}

// The TopMostGoodPosterFunc type is an adapter to allow the use of ordinary
// function as TopMostGoodPoster mutator.
type TopMostGoodPosterFunc func(context.Context, *generated.TopMostGoodPosterMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f TopMostGoodPosterFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.TopMostGoodPosterMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.TopMostGoodPosterMutation", m)
}

// The TopMostPosterFunc type is an adapter to allow the use of ordinary
// function as TopMostPoster mutator.
type TopMostPosterFunc func(context.Context, *generated.TopMostPosterMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f TopMostPosterFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.TopMostPosterMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.TopMostPosterMutation", m)
}

// The VendorBrandFunc type is an adapter to allow the use of ordinary
// function as VendorBrand mutator.
type VendorBrandFunc func(context.Context, *generated.VendorBrandMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f VendorBrandFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.VendorBrandMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.VendorBrandMutation", m)
}

// The VendorLocationFunc type is an adapter to allow the use of ordinary
// function as VendorLocation mutator.
type VendorLocationFunc func(context.Context, *generated.VendorLocationMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f VendorLocationFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.VendorLocationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.VendorLocationMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, generated.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m generated.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m generated.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m generated.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op generated.Op) Condition {
	return func(_ context.Context, m generated.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m generated.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m generated.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m generated.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk generated.Hook, cond Condition) generated.Hook {
	return func(next generated.Mutator) generated.Mutator {
		return generated.MutateFunc(func(ctx context.Context, m generated.Mutation) (generated.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, generated.Delete|generated.Create)
func On(hk generated.Hook, op generated.Op) generated.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, generated.Update|generated.UpdateOne)
func Unless(hk generated.Hook, op generated.Op) generated.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) generated.Hook {
	return func(generated.Mutator) generated.Mutator {
		return generated.MutateFunc(func(context.Context, generated.Mutation) (generated.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []generated.Hook {
//		return []generated.Hook{
//			Reject(generated.Delete|generated.Update),
//		}
//	}
func Reject(op generated.Op) generated.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []generated.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...generated.Hook) Chain {
	return Chain{append([]generated.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() generated.Hook {
	return func(mutator generated.Mutator) generated.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...generated.Hook) Chain {
	newHooks := make([]generated.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/vendorlocation"
	"github.com/google/uuid"
)

// VendorLocationUpdate is the builder for updating VendorLocation entities.
type VendorLocationUpdate struct {
	config
	hooks     []Hook
	mutation  *VendorLocationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the VendorLocationUpdate builder.
func (vlu *VendorLocationUpdate) Where(ps ...predicate.VendorLocation) *VendorLocationUpdate {
	vlu.mutation.Where(ps...)
	return vlu
}

// SetEntID sets the "ent_id" field.
func (vlu *VendorLocationUpdate) SetEntID(u uuid.UUID) *VendorLocationUpdate {
	vlu.mutation.SetEntID(u)
	return vlu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (vlu *VendorLocationUpdate) SetNillableEntID(u *uuid.UUID) *VendorLocationUpdate {
	if u != nil {
		vlu.SetEntID(*u)
	}
	return vlu
}

// SetCreatedAt sets the "created_at" field.
func (vlu *VendorLocationUpdate) SetCreatedAt(u uint32) *VendorLocationUpdate {
	vlu.mutation.ResetCreatedAt()
	vlu.mutation.SetCreatedAt(u)
	return vlu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vlu *VendorLocationUpdate) SetNillableCreatedAt(u *uint32) *VendorLocationUpdate {
	if u != nil {
		vlu.SetCreatedAt(*u)
	}
	return vlu
}

// AddCreatedAt adds u to the "created_at" field.
func (vlu *VendorLocationUpdate) AddCreatedAt(u int32) *VendorLocationUpdate {
	vlu.mutation.AddCreatedAt(u)
	return vlu
}

// SetUpdatedAt sets the "updated_at" field.
func (vlu *VendorLocationUpdate) SetUpdatedAt(u uint32) *VendorLocationUpdate {
	vlu.mutation.ResetUpdatedAt()
	vlu.mutation.SetUpdatedAt(u)
	return vlu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (vlu *VendorLocationUpdate) AddUpdatedAt(u int32) *VendorLocationUpdate {
	vlu.mutation.AddUpdatedAt(u)
	return vlu
}

// SetDeletedAt sets the "deleted_at" field.
func (vlu *VendorLocationUpdate) SetDeletedAt(u uint32) *VendorLocationUpdate {
	vlu.mutation.ResetDeletedAt()
	vlu.mutation.SetDeletedAt(u)
	return vlu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vlu *VendorLocationUpdate) SetNillableDeletedAt(u *uint32) *VendorLocationUpdate {
	if u != nil {
		vlu.SetDeletedAt(*u)
	}
	return vlu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (vlu *VendorLocationUpdate) AddDeletedAt(u int32) *VendorLocationUpdate {
	vlu.mutation.AddDeletedAt(u)
	return vlu
}

// SetCountry sets the "country" field.
func (vlu *VendorLocationUpdate) SetCountry(s string) *VendorLocationUpdate {
	vlu.mutation.SetCountry(s)
	return vlu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (vlu *VendorLocationUpdate) SetNillableCountry(s *string) *VendorLocationUpdate {
	if s != nil {
		vlu.SetCountry(*s)
	}
	return vlu
}

// ClearCountry clears the value of the "country" field.
func (vlu *VendorLocationUpdate) ClearCountry() *VendorLocationUpdate {
	vlu.mutation.ClearCountry()
	return vlu
}

// SetProvince sets the "province" field.
func (vlu *VendorLocationUpdate) SetProvince(s string) *VendorLocationUpdate {
	vlu.mutation.SetProvince(s)
	return vlu
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (vlu *VendorLocationUpdate) SetNillableProvince(s *string) *VendorLocationUpdate {
	if s != nil {
		vlu.SetProvince(*s)
	}
	return vlu
}

// ClearProvince clears the value of the "province" field.
func (vlu *VendorLocationUpdate) ClearProvince() *VendorLocationUpdate {
	vlu.mutation.ClearProvince()
	return vlu
}

// SetCity sets the "city" field.
func (vlu *VendorLocationUpdate) SetCity(s string) *VendorLocationUpdate {
	vlu.mutation.SetCity(s)
	return vlu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (vlu *VendorLocationUpdate) SetNillableCity(s *string) *VendorLocationUpdate {
	if s != nil {
		vlu.SetCity(*s)
	}
	return vlu
}

// ClearCity clears the value of the "city" field.
func (vlu *VendorLocationUpdate) ClearCity() *VendorLocationUpdate {
	vlu.mutation.ClearCity()
	return vlu
}

// SetAddress sets the "address" field.
func (vlu *VendorLocationUpdate) SetAddress(s string) *VendorLocationUpdate {
	vlu.mutation.SetAddress(s)
	return vlu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (vlu *VendorLocationUpdate) SetNillableAddress(s *string) *VendorLocationUpdate {
	if s != nil {
		vlu.SetAddress(*s)
	}
	return vlu
}

// ClearAddress clears the value of the "address" field.
func (vlu *VendorLocationUpdate) ClearAddress() *VendorLocationUpdate {
	vlu.mutation.ClearAddress()
	return vlu
}

// SetBrandID sets the "brand_id" field.
func (vlu *VendorLocationUpdate) SetBrandID(u uuid.UUID) *VendorLocationUpdate {
	vlu.mutation.SetBrandID(u)
	return vlu
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (vlu *VendorLocationUpdate) SetNillableBrandID(u *uuid.UUID) *VendorLocationUpdate {
	if u != nil {
		vlu.SetBrandID(*u)
	}
	return vlu
}

// ClearBrandID clears the value of the "brand_id" field.
func (vlu *VendorLocationUpdate) ClearBrandID() *VendorLocationUpdate {
	vlu.mutation.ClearBrandID()
	return vlu
}

// Mutation returns the VendorLocationMutation object of the builder.
func (vlu *VendorLocationUpdate) Mutation() *VendorLocationMutation {
	return vlu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vlu *VendorLocationUpdate) Save(ctx context.Context) (int, error) {
	vlu.defaults()
	return withHooks(ctx, vlu.sqlSave, vlu.mutation, vlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vlu *VendorLocationUpdate) SaveX(ctx context.Context) int {
	affected, err := vlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vlu *VendorLocationUpdate) Exec(ctx context.Context) error {
	_, err := vlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vlu *VendorLocationUpdate) ExecX(ctx context.Context) {
	if err := vlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vlu *VendorLocationUpdate) defaults() {
	if _, ok := vlu.mutation.UpdatedAt(); !ok {
		v := vendorlocation.UpdateDefaultUpdatedAt()
		vlu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vlu *VendorLocationUpdate) check() error {
	if v, ok := vlu.mutation.Country(); ok {
		if err := vendorlocation.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`generated: validator failed for field "VendorLocation.country": %w`, err)}
		}
	}
	if v, ok := vlu.mutation.Province(); ok {
		if err := vendorlocation.ProvinceValidator(v); err != nil {
			return &ValidationError{Name: "province", err: fmt.Errorf(`generated: validator failed for field "VendorLocation.province": %w`, err)}
		}
	}
	if v, ok := vlu.mutation.City(); ok {
		if err := vendorlocation.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`generated: validator failed for field "VendorLocation.city": %w`, err)}
		}
	}
	if v, ok := vlu.mutation.Address(); ok {
		if err := vendorlocation.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`generated: validator failed for field "VendorLocation.address": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vlu *VendorLocationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VendorLocationUpdate {
	vlu.modifiers = append(vlu.modifiers, modifiers...)
	return vlu
}

func (vlu *VendorLocationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vendorlocation.Table, vendorlocation.Columns, sqlgraph.NewFieldSpec(vendorlocation.FieldID, field.TypeUint32))
	if ps := vlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vlu.mutation.EntID(); ok {
		_spec.SetField(vendorlocation.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := vlu.mutation.CreatedAt(); ok {
		_spec.SetField(vendorlocation.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := vlu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(vendorlocation.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := vlu.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorlocation.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := vlu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(vendorlocation.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := vlu.mutation.DeletedAt(); ok {
		_spec.SetField(vendorlocation.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := vlu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(vendorlocation.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := vlu.mutation.Country(); ok {
		_spec.SetField(vendorlocation.FieldCountry, field.TypeString, value)
	}
	if vlu.mutation.CountryCleared() {
		_spec.ClearField(vendorlocation.FieldCountry, field.TypeString)
	}
	if value, ok := vlu.mutation.Province(); ok {
		_spec.SetField(vendorlocation.FieldProvince, field.TypeString, value)
	}
	if vlu.mutation.ProvinceCleared() {
		_spec.ClearField(vendorlocation.FieldProvince, field.TypeString)
	}
	if value, ok := vlu.mutation.City(); ok {
		_spec.SetField(vendorlocation.FieldCity, field.TypeString, value)
	}
	if vlu.mutation.CityCleared() {
		_spec.ClearField(vendorlocation.FieldCity, field.TypeString)
	}
	if value, ok := vlu.mutation.Address(); ok {
		_spec.SetField(vendorlocation.FieldAddress, field.TypeString, value)
	}
	if vlu.mutation.AddressCleared() {
		_spec.ClearField(vendorlocation.FieldAddress, field.TypeString)
	}
	if value, ok := vlu.mutation.BrandID(); ok {
		_spec.SetField(vendorlocation.FieldBrandID, field.TypeUUID, value)
	}
	if vlu.mutation.BrandIDCleared() {
		_spec.ClearField(vendorlocation.FieldBrandID, field.TypeUUID)
	}
	_spec.AddModifiers(vlu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, vlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendorlocation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vlu.mutation.done = true
	return n, nil
}

// VendorLocationUpdateOne is the builder for updating a single VendorLocation entity.
type VendorLocationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *VendorLocationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (vluo *VendorLocationUpdateOne) SetEntID(u uuid.UUID) *VendorLocationUpdateOne {
	vluo.mutation.SetEntID(u)
	return vluo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (vluo *VendorLocationUpdateOne) SetNillableEntID(u *uuid.UUID) *VendorLocationUpdateOne {
	if u != nil {
		vluo.SetEntID(*u)
	}
	return vluo
}

// SetCreatedAt sets the "created_at" field.
func (vluo *VendorLocationUpdateOne) SetCreatedAt(u uint32) *VendorLocationUpdateOne {
	vluo.mutation.ResetCreatedAt()
	vluo.mutation.SetCreatedAt(u)
	return vluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vluo *VendorLocationUpdateOne) SetNillableCreatedAt(u *uint32) *VendorLocationUpdateOne {
	if u != nil {
		vluo.SetCreatedAt(*u)
	}
	return vluo
}

// AddCreatedAt adds u to the "created_at" field.
func (vluo *VendorLocationUpdateOne) AddCreatedAt(u int32) *VendorLocationUpdateOne {
	vluo.mutation.AddCreatedAt(u)
	return vluo
}

// SetUpdatedAt sets the "updated_at" field.
func (vluo *VendorLocationUpdateOne) SetUpdatedAt(u uint32) *VendorLocationUpdateOne {
	vluo.mutation.ResetUpdatedAt()
	vluo.mutation.SetUpdatedAt(u)
	return vluo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (vluo *VendorLocationUpdateOne) AddUpdatedAt(u int32) *VendorLocationUpdateOne {
	vluo.mutation.AddUpdatedAt(u)
	return vluo
}

// SetDeletedAt sets the "deleted_at" field.
func (vluo *VendorLocationUpdateOne) SetDeletedAt(u uint32) *VendorLocationUpdateOne {
	vluo.mutation.ResetDeletedAt()
	vluo.mutation.SetDeletedAt(u)
	return vluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vluo *VendorLocationUpdateOne) SetNillableDeletedAt(u *uint32) *VendorLocationUpdateOne {
	if u != nil {
		vluo.SetDeletedAt(*u)
	}
	return vluo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (vluo *VendorLocationUpdateOne) AddDeletedAt(u int32) *VendorLocationUpdateOne {
	vluo.mutation.AddDeletedAt(u)
	return vluo
}

// SetCountry sets the "country" field.
func (vluo *VendorLocationUpdateOne) SetCountry(s string) *VendorLocationUpdateOne {
	vluo.mutation.SetCountry(s)
	return vluo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (vluo *VendorLocationUpdateOne) SetNillableCountry(s *string) *VendorLocationUpdateOne {
	if s != nil {
		vluo.SetCountry(*s)
	}
	return vluo
}

// ClearCountry clears the value of the "country" field.
func (vluo *VendorLocationUpdateOne) ClearCountry() *VendorLocationUpdateOne {
	vluo.mutation.ClearCountry()
	return vluo
}

// SetProvince sets the "province" field.
func (vluo *VendorLocationUpdateOne) SetProvince(s string) *VendorLocationUpdateOne {
	vluo.mutation.SetProvince(s)
	return vluo
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (vluo *VendorLocationUpdateOne) SetNillableProvince(s *string) *VendorLocationUpdateOne {
	if s != nil {
		vluo.SetProvince(*s)
	}
	return vluo
}

// ClearProvince clears the value of the "province" field.
func (vluo *VendorLocationUpdateOne) ClearProvince() *VendorLocationUpdateOne {
	vluo.mutation.ClearProvince()
	return vluo
}

// SetCity sets the "city" field.
func (vluo *VendorLocationUpdateOne) SetCity(s string) *VendorLocationUpdateOne {
	vluo.mutation.SetCity(s)
	return vluo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (vluo *VendorLocationUpdateOne) SetNillableCity(s *string) *VendorLocationUpdateOne {
	if s != nil {
		vluo.SetCity(*s)
	}
	return vluo
}

// ClearCity clears the value of the "city" field.
func (vluo *VendorLocationUpdateOne) ClearCity() *VendorLocationUpdateOne {
	vluo.mutation.ClearCity()
	return vluo
}

// SetAddress sets the "address" field.
func (vluo *VendorLocationUpdateOne) SetAddress(s string) *VendorLocationUpdateOne {
	vluo.mutation.SetAddress(s)
	return vluo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (vluo *VendorLocationUpdateOne) SetNillableAddress(s *string) *VendorLocationUpdateOne {
	if s != nil {
		vluo.SetAddress(*s)
	}
	return vluo
}

// ClearAddress clears the value of the "address" field.
func (vluo *VendorLocationUpdateOne) ClearAddress() *VendorLocationUpdateOne {
	vluo.mutation.ClearAddress()
	return vluo
}

// SetBrandID sets the "brand_id" field.
func (vluo *VendorLocationUpdateOne) SetBrandID(u uuid.UUID) *VendorLocationUpdateOne {
	vluo.mutation.SetBrandID(u)
	return vluo
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (vluo *VendorLocationUpdateOne) SetNillableBrandID(u *uuid.UUID) *VendorLocationUpdateOne {
	if u != nil {
		vluo.SetBrandID(*u)
	}
	return vluo
}

// ClearBrandID clears the value of the "brand_id" field.
func (vluo *VendorLocationUpdateOne) ClearBrandID() *VendorLocationUpdateOne {
	vluo.mutation.ClearBrandID()
	return vluo
}

// Mutation returns the VendorLocationMutation object of the builder.
func (vluo *VendorLocationUpdateOne) Mutation() *VendorLocationMutation {
	return vluo.mutation
}

// Where appends a list predicates to the VendorLocationUpdate builder.
func (vluo *VendorLocationUpdateOne) Where(ps ...predicate.VendorLocation) *VendorLocationUpdateOne {
	vluo.mutation.Where(ps...)
	return vluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vluo *VendorLocationUpdateOne) Select(field string, fields ...string) *VendorLocationUpdateOne {
	vluo.fields = append([]string{field}, fields...)
	return vluo
}

// Save executes the query and returns the updated VendorLocation entity.
func (vluo *VendorLocationUpdateOne) Save(ctx context.Context) (*VendorLocation, error) {
	vluo.defaults()
	return withHooks(ctx, vluo.sqlSave, vluo.mutation, vluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vluo *VendorLocationUpdateOne) SaveX(ctx context.Context) *VendorLocation {
	node, err := vluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vluo *VendorLocationUpdateOne) Exec(ctx context.Context) error {
	_, err := vluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vluo *VendorLocationUpdateOne) ExecX(ctx context.Context) {
	if err := vluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vluo *VendorLocationUpdateOne) defaults() {
	if _, ok := vluo.mutation.UpdatedAt(); !ok {
		v := vendorlocation.UpdateDefaultUpdatedAt()
		vluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vluo *VendorLocationUpdateOne) check() error {
	if v, ok := vluo.mutation.Country(); ok {
		if err := vendorlocation.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`generated: validator failed for field "VendorLocation.country": %w`, err)}
		}
	}
	if v, ok := vluo.mutation.Province(); ok {
		if err := vendorlocation.ProvinceValidator(v); err != nil {
			return &ValidationError{Name: "province", err: fmt.Errorf(`generated: validator failed for field "VendorLocation.province": %w`, err)}
		}
	}
	if v, ok := vluo.mutation.City(); ok {
		if err := vendorlocation.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`generated: validator failed for field "VendorLocation.city": %w`, err)}
		}
	}
	if v, ok := vluo.mutation.Address(); ok {
		if err := vendorlocation.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`generated: validator failed for field "VendorLocation.address": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vluo *VendorLocationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VendorLocationUpdateOne {
	vluo.modifiers = append(vluo.modifiers, modifiers...)
	return vluo
}

func (vluo *VendorLocationUpdateOne) sqlSave(ctx context.Context) (_node *VendorLocation, err error) {
	if err := vluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vendorlocation.Table, vendorlocation.Columns, sqlgraph.NewFieldSpec(vendorlocation.FieldID, field.TypeUint32))
	id, ok := vluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "VendorLocation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vendorlocation.FieldID)
		for _, f := range fields {
			if !vendorlocation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != vendorlocation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vluo.mutation.EntID(); ok {
		_spec.SetField(vendorlocation.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := vluo.mutation.CreatedAt(); ok {
		_spec.SetField(vendorlocation.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := vluo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(vendorlocation.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := vluo.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorlocation.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := vluo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(vendorlocation.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := vluo.mutation.DeletedAt(); ok {
		_spec.SetField(vendorlocation.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := vluo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(vendorlocation.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := vluo.mutation.Country(); ok {
		_spec.SetField(vendorlocation.FieldCountry, field.TypeString, value)
	}
	if vluo.mutation.CountryCleared() {
		_spec.ClearField(vendorlocation.FieldCountry, field.TypeString)
	}
	if value, ok := vluo.mutation.Province(); ok {
		_spec.SetField(vendorlocation.FieldProvince, field.TypeString, value)
	}
	if vluo.mutation.ProvinceCleared() {
		_spec.ClearField(vendorlocation.FieldProvince, field.TypeString)
	}
	if value, ok := vluo.mutation.City(); ok {
		_spec.SetField(vendorlocation.FieldCity, field.TypeString, value)
	}
	if vluo.mutation.CityCleared() {
		_spec.ClearField(vendorlocation.FieldCity, field.TypeString)
	}
	if value, ok := vluo.mutation.Address(); ok {
		_spec.SetField(vendorlocation.FieldAddress, field.TypeString, value)
	}
	if vluo.mutation.AddressCleared() {
		_spec.ClearField(vendorlocation.FieldAddress, field.TypeString)
	}
	if value, ok := vluo.mutation.BrandID(); ok {
		_spec.SetField(vendorlocation.FieldBrandID, field.TypeUUID, value)
	}
	if vluo.mutation.BrandIDCleared() {
		_spec.ClearField(vendorlocation.FieldBrandID, field.TypeUUID)
	}
	_spec.AddModifiers(vluo.modifiers...)
	_node = &VendorLocation{config: vluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendorlocation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vluo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/apppowerrental"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppPowerRentalUpdate is the builder for updating AppPowerRental entities.
type AppPowerRentalUpdate struct {
	config
	hooks     []Hook
	mutation  *AppPowerRentalMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppPowerRentalUpdate builder.
func (apru *AppPowerRentalUpdate) Where(ps ...predicate.AppPowerRental) *AppPowerRentalUpdate {
	apru.mutation.Where(ps...)
	return apru
}

// SetEntID sets the "ent_id" field.
func (apru *AppPowerRentalUpdate) SetEntID(u uuid.UUID) *AppPowerRentalUpdate {
	apru.mutation.SetEntID(u)
	return apru
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (apru *AppPowerRentalUpdate) SetNillableEntID(u *uuid.UUID) *AppPowerRentalUpdate {
	if u != nil {
		apru.SetEntID(*u)
	}
	return apru
}

// SetAppGoodID sets the "app_good_id" field.
func (apru *AppPowerRentalUpdate) SetAppGoodID(u uuid.UUID) *AppPowerRentalUpdate {
	apru.mutation.SetAppGoodID(u)
	return apru
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (apru *AppPowerRentalUpdate) SetNillableAppGoodID(u *uuid.UUID) *AppPowerRentalUpdate {
	if u != nil {
		apru.SetAppGoodID(*u)
	}
	return apru
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (apru *AppPowerRentalUpdate) ClearAppGoodID() *AppPowerRentalUpdate {
	apru.mutation.ClearAppGoodID()
	return apru
}

// SetServiceStartAt sets the "service_start_at" field.
func (apru *AppPowerRentalUpdate) SetServiceStartAt(u uint32) *AppPowerRentalUpdate {
	apru.mutation.ResetServiceStartAt()
	apru.mutation.SetServiceStartAt(u)
	return apru
}

// SetNillableServiceStartAt sets the "service_start_at" field if the given value is not nil.
func (apru *AppPowerRentalUpdate) SetNillableServiceStartAt(u *uint32) *AppPowerRentalUpdate {
	if u != nil {
		apru.SetServiceStartAt(*u)
	}
	return apru
}

// AddServiceStartAt adds u to the "service_start_at" field.
func (apru *AppPowerRentalUpdate) AddServiceStartAt(u int32) *AppPowerRentalUpdate {
	apru.mutation.AddServiceStartAt(u)
	return apru
}

// ClearServiceStartAt clears the value of the "service_start_at" field.
func (apru *AppPowerRentalUpdate) ClearServiceStartAt() *AppPowerRentalUpdate {
	apru.mutation.ClearServiceStartAt()
	return apru
}

// SetStartMode sets the "start_mode" field.
func (apru *AppPowerRentalUpdate) SetStartMode(s string) *AppPowerRentalUpdate {
	apru.mutation.SetStartMode(s)
	return apru
}

// SetNillableStartMode sets the "start_mode" field if the given value is not nil.
func (apru *AppPowerRentalUpdate) SetNillableStartMode(s *string) *AppPowerRentalUpdate {
	if s != nil {
		apru.SetStartMode(*s)
	}
	return apru
}

// ClearStartMode clears the value of the "start_mode" field.
func (apru *AppPowerRentalUpdate) ClearStartMode() *AppPowerRentalUpdate {
	apru.mutation.ClearStartMode()
	return apru
}

// SetCancelMode sets the "cancel_mode" field.
func (apru *AppPowerRentalUpdate) SetCancelMode(s string) *AppPowerRentalUpdate {
	apru.mutation.SetCancelMode(s)
	return apru
}

// SetNillableCancelMode sets the "cancel_mode" field if the given value is not nil.
func (apru *AppPowerRentalUpdate) SetNillableCancelMode(s *string) *AppPowerRentalUpdate {
	if s != nil {
		apru.SetCancelMode(*s)
	}
	return apru
}

// ClearCancelMode clears the value of the "cancel_mode" field.
func (apru *AppPowerRentalUpdate) ClearCancelMode() *AppPowerRentalUpdate {
	apru.mutation.ClearCancelMode()
	return apru
}

// SetCancelableBeforeStartSeconds sets the "cancelable_before_start_seconds" field.
func (apru *AppPowerRentalUpdate) SetCancelableBeforeStartSeconds(u uint32) *AppPowerRentalUpdate {
	apru.mutation.ResetCancelableBeforeStartSeconds()
	apru.mutation.SetCancelableBeforeStartSeconds(u)
	return apru
}

// SetNillableCancelableBeforeStartSeconds sets the "cancelable_before_start_seconds" field if the given value is not nil.
func (apru *AppPowerRentalUpdate) SetNillableCancelableBeforeStartSeconds(u *uint32) *AppPowerRentalUpdate {
	if u != nil {
		apru.SetCancelableBeforeStartSeconds(*u)
	}
	return apru
}

// AddCancelableBeforeStartSeconds adds u to the "cancelable_before_start_seconds" field.
func (apru *AppPowerRentalUpdate) AddCancelableBeforeStartSeconds(u int32) *AppPowerRentalUpdate {
	apru.mutation.AddCancelableBeforeStartSeconds(u)
	return apru
}

// ClearCancelableBeforeStartSeconds clears the value of the "cancelable_before_start_seconds" field.
func (apru *AppPowerRentalUpdate) ClearCancelableBeforeStartSeconds() *AppPowerRentalUpdate {
	apru.mutation.ClearCancelableBeforeStartSeconds()
	return apru
}

// SetEnableSetCommission sets the "enable_set_commission" field.
func (apru *AppPowerRentalUpdate) SetEnableSetCommission(b bool) *AppPowerRentalUpdate {
	apru.mutation.SetEnableSetCommission(b)
	return apru
}

// SetNillableEnableSetCommission sets the "enable_set_commission" field if the given value is not nil.
func (apru *AppPowerRentalUpdate) SetNillableEnableSetCommission(b *bool) *AppPowerRentalUpdate {
	if b != nil {
		apru.SetEnableSetCommission(*b)
	}
	return apru
}

// ClearEnableSetCommission clears the value of the "enable_set_commission" field.
func (apru *AppPowerRentalUpdate) ClearEnableSetCommission() *AppPowerRentalUpdate {
	apru.mutation.ClearEnableSetCommission()
	return apru
}

// SetMinOrderAmount sets the "min_order_amount" field.
func (apru *AppPowerRentalUpdate) SetMinOrderAmount(d decimal.Decimal) *AppPowerRentalUpdate {
	apru.mutation.SetMinOrderAmount(d)
	return apru
}

// SetNillableMinOrderAmount sets the "min_order_amount" field if the given value is not nil.
func (apru *AppPowerRentalUpdate) SetNillableMinOrderAmount(d *decimal.Decimal) *AppPowerRentalUpdate {
	if d != nil {
		apru.SetMinOrderAmount(*d)
	}
	return apru
}

// ClearMinOrderAmount clears the value of the "min_order_amount" field.
func (apru *AppPowerRentalUpdate) ClearMinOrderAmount() *AppPowerRentalUpdate {
	apru.mutation.ClearMinOrderAmount()
	return apru
}

// SetMaxOrderAmount sets the "max_order_amount" field.
func (apru *AppPowerRentalUpdate) SetMaxOrderAmount(d decimal.Decimal) *AppPowerRentalUpdate {
	apru.mutation.SetMaxOrderAmount(d)
	return apru
}

// SetNillableMaxOrderAmount sets the "max_order_amount" field if the given value is not nil.
func (apru *AppPowerRentalUpdate) SetNillableMaxOrderAmount(d *decimal.Decimal) *AppPowerRentalUpdate {
	if d != nil {
		apru.SetMaxOrderAmount(*d)
	}
	return apru
}

// ClearMaxOrderAmount clears the value of the "max_order_amount" field.
func (apru *AppPowerRentalUpdate) ClearMaxOrderAmount() *AppPowerRentalUpdate {
	apru.mutation.ClearMaxOrderAmount()
	return apru
}

// SetMaxUserAmount sets the "max_user_amount" field.
func (apru *AppPowerRentalUpdate) SetMaxUserAmount(d decimal.Decimal) *AppPowerRentalUpdate {
	apru.mutation.SetMaxUserAmount(d)
	return apru
}

// SetNillableMaxUserAmount sets the "max_user_amount" field if the given value is not nil.
func (apru *AppPowerRentalUpdate) SetNillableMaxUserAmount(d *decimal.Decimal) *AppPowerRentalUpdate {
	if d != nil {
		apru.SetMaxUserAmount(*d)
	}
	return apru
}

// ClearMaxUserAmount clears the value of the "max_user_amount" field.
func (apru *AppPowerRentalUpdate) ClearMaxUserAmount() *AppPowerRentalUpdate {
	apru.mutation.ClearMaxUserAmount()
	return apru
}

// SetMinOrderDurationSeconds sets the "min_order_duration_seconds" field.
func (apru *AppPowerRentalUpdate) SetMinOrderDurationSeconds(u uint32) *AppPowerRentalUpdate {
	apru.mutation.ResetMinOrderDurationSeconds()
	apru.mutation.SetMinOrderDurationSeconds(u)
	return apru
}

// SetNillableMinOrderDurationSeconds sets the "min_order_duration_seconds" field if the given value is not nil.
func (apru *AppPowerRentalUpdate) SetNillableMinOrderDurationSeconds(u *uint32) *AppPowerRentalUpdate {
	if u != nil {
		apru.SetMinOrderDurationSeconds(*u)
	}
	return apru
}

// AddMinOrderDurationSeconds adds u to the "min_order_duration_seconds" field.
func (apru *AppPowerRentalUpdate) AddMinOrderDurationSeconds(u int32) *AppPowerRentalUpdate {
	apru.mutation.AddMinOrderDurationSeconds(u)
	return apru
}

// ClearMinOrderDurationSeconds clears the value of the "min_order_duration_seconds" field.
func (apru *AppPowerRentalUpdate) ClearMinOrderDurationSeconds() *AppPowerRentalUpdate {
	apru.mutation.ClearMinOrderDurationSeconds()
	return apru
}

// SetMaxOrderDurationSeconds sets the "max_order_duration_seconds" field.
func (apru *AppPowerRentalUpdate) SetMaxOrderDurationSeconds(u uint32) *AppPowerRentalUpdate {
	apru.mutation.ResetMaxOrderDurationSeconds()
	apru.mutation.SetMaxOrderDurationSeconds(u)
	return apru
}

// SetNillableMaxOrderDurationSeconds sets the "max_order_duration_seconds" field if the given value is not nil.
func (apru *AppPowerRentalUpdate) SetNillableMaxOrderDurationSeconds(u *uint32) *AppPowerRentalUpdate {
	if u != nil {
		apru.SetMaxOrderDurationSeconds(*u)
	}
	return apru
}

// AddMaxOrderDurationSeconds adds u to the "max_order_duration_seconds" field.
func (apru *AppPowerRentalUpdate) AddMaxOrderDurationSeconds(u int32) *AppPowerRentalUpdate {
	apru.mutation.AddMaxOrderDurationSeconds(u)
	return apru
}

// ClearMaxOrderDurationSeconds clears the value of the "max_order_duration_seconds" field.
func (apru *AppPowerRentalUpdate) ClearMaxOrderDurationSeconds() *AppPowerRentalUpdate {
	apru.mutation.ClearMaxOrderDurationSeconds()
	return apru
}

// SetUnitPrice sets the "unit_price" field.
func (apru *AppPowerRentalUpdate) SetUnitPrice(d decimal.Decimal) *AppPowerRentalUpdate {
	apru.mutation.SetUnitPrice(d)
	return apru
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (apru *AppPowerRentalUpdate) SetNillableUnitPrice(d *decimal.Decimal) *AppPowerRentalUpdate {
	if d != nil {
		apru.SetUnitPrice(*d)
	}
	return apru
}

// ClearUnitPrice clears the value of the "unit_price" field.
func (apru *AppPowerRentalUpdate) ClearUnitPrice() *AppPowerRentalUpdate {
	apru.mutation.ClearUnitPrice()
	return apru
}

// SetSaleStartAt sets the "sale_start_at" field.
func (apru *AppPowerRentalUpdate) SetSaleStartAt(u uint32) *AppPowerRentalUpdate {
	apru.mutation.ResetSaleStartAt()
	apru.mutation.SetSaleStartAt(u)
	return apru
}

// SetNillableSaleStartAt sets the "sale_start_at" field if the given value is not nil.
func (apru *AppPowerRentalUpdate) SetNillableSaleStartAt(u *uint32) *AppPowerRentalUpdate {
	if u != nil {
		apru.SetSaleStartAt(*u)
	}
	return apru
}

// AddSaleStartAt adds u to the "sale_start_at" field.
func (apru *AppPowerRentalUpdate) AddSaleStartAt(u int32) *AppPowerRentalUpdate {
	apru.mutation.AddSaleStartAt(u)
	return apru
}

// ClearSaleStartAt clears the value of the "sale_start_at" field.
func (apru *AppPowerRentalUpdate) ClearSaleStartAt() *AppPowerRentalUpdate {
	apru.mutation.ClearSaleStartAt()
	return apru
}

// SetSaleEndAt sets the "sale_end_at" field.
func (apru *AppPowerRentalUpdate) SetSaleEndAt(u uint32) *AppPowerRentalUpdate {
	apru.mutation.ResetSaleEndAt()
	apru.mutation.SetSaleEndAt(u)
	return apru
}

// SetNillableSaleEndAt sets the "sale_end_at" field if the given value is not nil.
func (apru *AppPowerRentalUpdate) SetNillableSaleEndAt(u *uint32) *AppPowerRentalUpdate {
	if u != nil {
		apru.SetSaleEndAt(*u)
	}
	return apru
}

// AddSaleEndAt adds u to the "sale_end_at" field.
func (apru *AppPowerRentalUpdate) AddSaleEndAt(u int32) *AppPowerRentalUpdate {
	apru.mutation.AddSaleEndAt(u)
	return apru
}

// ClearSaleEndAt clears the value of the "sale_end_at" field.
func (apru *AppPowerRentalUpdate) ClearSaleEndAt() *AppPowerRentalUpdate {
	apru.mutation.ClearSaleEndAt()
	return apru
}

// SetSaleMode sets the "sale_mode" field.
func (apru *AppPowerRentalUpdate) SetSaleMode(s string) *AppPowerRentalUpdate {
	apru.mutation.SetSaleMode(s)
	return apru
}

// SetNillableSaleMode sets the "sale_mode" field if the given value is not nil.
func (apru *AppPowerRentalUpdate) SetNillableSaleMode(s *string) *AppPowerRentalUpdate {
	if s != nil {
		apru.SetSaleMode(*s)
	}
	return apru
}

// ClearSaleMode clears the value of the "sale_mode" field.
func (apru *AppPowerRentalUpdate) ClearSaleMode() *AppPowerRentalUpdate {
	apru.mutation.ClearSaleMode()
	return apru
}

// SetFixedDuration sets the "fixed_duration" field.
func (apru *AppPowerRentalUpdate) SetFixedDuration(b bool) *AppPowerRentalUpdate {
	apru.mutation.SetFixedDuration(b)
	return apru
}

// SetNillableFixedDuration sets the "fixed_duration" field if the given value is not nil.
func (apru *AppPowerRentalUpdate) SetNillableFixedDuration(b *bool) *AppPowerRentalUpdate {
	if b != nil {
		apru.SetFixedDuration(*b)
	}
	return apru
}

// ClearFixedDuration clears the value of the "fixed_duration" field.
func (apru *AppPowerRentalUpdate) ClearFixedDuration() *AppPowerRentalUpdate {
	apru.mutation.ClearFixedDuration()
	return apru
}

// SetPackageWithRequireds sets the "package_with_requireds" field.
func (apru *AppPowerRentalUpdate) SetPackageWithRequireds(b bool) *AppPowerRentalUpdate {
	apru.mutation.SetPackageWithRequireds(b)
	return apru
}

// SetNillablePackageWithRequireds sets the "package_with_requireds" field if the given value is not nil.
func (apru *AppPowerRentalUpdate) SetNillablePackageWithRequireds(b *bool) *AppPowerRentalUpdate {
	if b != nil {
		apru.SetPackageWithRequireds(*b)
	}
	return apru
}

// ClearPackageWithRequireds clears the value of the "package_with_requireds" field.
func (apru *AppPowerRentalUpdate) ClearPackageWithRequireds() *AppPowerRentalUpdate {
	apru.mutation.ClearPackageWithRequireds()
	return apru
}

// Mutation returns the AppPowerRentalMutation object of the builder.
func (apru *AppPowerRentalUpdate) Mutation() *AppPowerRentalMutation {
	return apru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (apru *AppPowerRentalUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, apru.sqlSave, apru.mutation, apru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (apru *AppPowerRentalUpdate) SaveX(ctx context.Context) int {
	affected, err := apru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (apru *AppPowerRentalUpdate) Exec(ctx context.Context) error {
	_, err := apru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apru *AppPowerRentalUpdate) ExecX(ctx context.Context) {
	if err := apru.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (apru *AppPowerRentalUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppPowerRentalUpdate {
	apru.modifiers = append(apru.modifiers, modifiers...)
	return apru
}

func (apru *AppPowerRentalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(apppowerrental.Table, apppowerrental.Columns, sqlgraph.NewFieldSpec(apppowerrental.FieldID, field.TypeUint32))
	if ps := apru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apru.mutation.EntID(); ok {
		_spec.SetField(apppowerrental.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := apru.mutation.AppGoodID(); ok {
		_spec.SetField(apppowerrental.FieldAppGoodID, field.TypeUUID, value)
	}
	if apru.mutation.AppGoodIDCleared() {
		_spec.ClearField(apppowerrental.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := apru.mutation.ServiceStartAt(); ok {
		_spec.SetField(apppowerrental.FieldServiceStartAt, field.TypeUint32, value)
	}
	if value, ok := apru.mutation.AddedServiceStartAt(); ok {
		_spec.AddField(apppowerrental.FieldServiceStartAt, field.TypeUint32, value)
	}
	if apru.mutation.ServiceStartAtCleared() {
		_spec.ClearField(apppowerrental.FieldServiceStartAt, field.TypeUint32)
	}
	if value, ok := apru.mutation.StartMode(); ok {
		_spec.SetField(apppowerrental.FieldStartMode, field.TypeString, value)
	}
	if apru.mutation.StartModeCleared() {
		_spec.ClearField(apppowerrental.FieldStartMode, field.TypeString)
	}
	if value, ok := apru.mutation.CancelMode(); ok {
		_spec.SetField(apppowerrental.FieldCancelMode, field.TypeString, value)
	}
	if apru.mutation.CancelModeCleared() {
		_spec.ClearField(apppowerrental.FieldCancelMode, field.TypeString)
	}
	if value, ok := apru.mutation.CancelableBeforeStartSeconds(); ok {
		_spec.SetField(apppowerrental.FieldCancelableBeforeStartSeconds, field.TypeUint32, value)
	}
	if value, ok := apru.mutation.AddedCancelableBeforeStartSeconds(); ok {
		_spec.AddField(apppowerrental.FieldCancelableBeforeStartSeconds, field.TypeUint32, value)
	}
	if apru.mutation.CancelableBeforeStartSecondsCleared() {
		_spec.ClearField(apppowerrental.FieldCancelableBeforeStartSeconds, field.TypeUint32)
	}
	if value, ok := apru.mutation.EnableSetCommission(); ok {
		_spec.SetField(apppowerrental.FieldEnableSetCommission, field.TypeBool, value)
	}
	if apru.mutation.EnableSetCommissionCleared() {
		_spec.ClearField(apppowerrental.FieldEnableSetCommission, field.TypeBool)
	}
	if value, ok := apru.mutation.MinOrderAmount(); ok {
		_spec.SetField(apppowerrental.FieldMinOrderAmount, field.TypeOther, value)
	}
	if apru.mutation.MinOrderAmountCleared() {
		_spec.ClearField(apppowerrental.FieldMinOrderAmount, field.TypeOther)
	}
	if value, ok := apru.mutation.MaxOrderAmount(); ok {
		_spec.SetField(apppowerrental.FieldMaxOrderAmount, field.TypeOther, value)
	}
	if apru.mutation.MaxOrderAmountCleared() {
		_spec.ClearField(apppowerrental.FieldMaxOrderAmount, field.TypeOther)
	}
	if value, ok := apru.mutation.MaxUserAmount(); ok {
		_spec.SetField(apppowerrental.FieldMaxUserAmount, field.TypeOther, value)
	}
	if apru.mutation.MaxUserAmountCleared() {
		_spec.ClearField(apppowerrental.FieldMaxUserAmount, field.TypeOther)
	}
	if value, ok := apru.mutation.MinOrderDurationSeconds(); ok {
		_spec.SetField(apppowerrental.FieldMinOrderDurationSeconds, field.TypeUint32, value)
	}
	if value, ok := apru.mutation.AddedMinOrderDurationSeconds(); ok {
		_spec.AddField(apppowerrental.FieldMinOrderDurationSeconds, field.TypeUint32, value)
	}
	if apru.mutation.MinOrderDurationSecondsCleared() {
		_spec.ClearField(apppowerrental.FieldMinOrderDurationSeconds, field.TypeUint32)
	}
	if value, ok := apru.mutation.MaxOrderDurationSeconds(); ok {
		_spec.SetField(apppowerrental.FieldMaxOrderDurationSeconds, field.TypeUint32, value)
	}
	if value, ok := apru.mutation.AddedMaxOrderDurationSeconds(); ok {
		_spec.AddField(apppowerrental.FieldMaxOrderDurationSeconds, field.TypeUint32, value)
	}
	if apru.mutation.MaxOrderDurationSecondsCleared() {
		_spec.ClearField(apppowerrental.FieldMaxOrderDurationSeconds, field.TypeUint32)
	}
	if value, ok := apru.mutation.UnitPrice(); ok {
		_spec.SetField(apppowerrental.FieldUnitPrice, field.TypeOther, value)
	}
	if apru.mutation.UnitPriceCleared() {
		_spec.ClearField(apppowerrental.FieldUnitPrice, field.TypeOther)
	}
	if value, ok := apru.mutation.SaleStartAt(); ok {
		_spec.SetField(apppowerrental.FieldSaleStartAt, field.TypeUint32, value)
	}
	if value, ok := apru.mutation.AddedSaleStartAt(); ok {
		_spec.AddField(apppowerrental.FieldSaleStartAt, field.TypeUint32, value)
	}
	if apru.mutation.SaleStartAtCleared() {
		_spec.ClearField(apppowerrental.FieldSaleStartAt, field.TypeUint32)
	}
	if value, ok := apru.mutation.SaleEndAt(); ok {
		_spec.SetField(apppowerrental.FieldSaleEndAt, field.TypeUint32, value)
	}
	if value, ok := apru.mutation.AddedSaleEndAt(); ok {
		_spec.AddField(apppowerrental.FieldSaleEndAt, field.TypeUint32, value)
	}
	if apru.mutation.SaleEndAtCleared() {
		_spec.ClearField(apppowerrental.FieldSaleEndAt, field.TypeUint32)
	}
	if value, ok := apru.mutation.SaleMode(); ok {
		_spec.SetField(apppowerrental.FieldSaleMode, field.TypeString, value)
	}
	if apru.mutation.SaleModeCleared() {
		_spec.ClearField(apppowerrental.FieldSaleMode, field.TypeString)
	}
	if value, ok := apru.mutation.FixedDuration(); ok {
		_spec.SetField(apppowerrental.FieldFixedDuration, field.TypeBool, value)
	}
	if apru.mutation.FixedDurationCleared() {
		_spec.ClearField(apppowerrental.FieldFixedDuration, field.TypeBool)
	}
	if value, ok := apru.mutation.PackageWithRequireds(); ok {
		_spec.SetField(apppowerrental.FieldPackageWithRequireds, field.TypeBool, value)
	}
	if apru.mutation.PackageWithRequiredsCleared() {
		_spec.ClearField(apppowerrental.FieldPackageWithRequireds, field.TypeBool)
	}
	_spec.AddModifiers(apru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, apru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apppowerrental.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	apru.mutation.done = true
	return n, nil
}

// AppPowerRentalUpdateOne is the builder for updating a single AppPowerRental entity.
type AppPowerRentalUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppPowerRentalMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (apruo *AppPowerRentalUpdateOne) SetEntID(u uuid.UUID) *AppPowerRentalUpdateOne {
	apruo.mutation.SetEntID(u)
	return apruo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (apruo *AppPowerRentalUpdateOne) SetNillableEntID(u *uuid.UUID) *AppPowerRentalUpdateOne {
	if u != nil {
		apruo.SetEntID(*u)
	}
	return apruo
}

// SetAppGoodID sets the "app_good_id" field.
func (apruo *AppPowerRentalUpdateOne) SetAppGoodID(u uuid.UUID) *AppPowerRentalUpdateOne {
	apruo.mutation.SetAppGoodID(u)
	return apruo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (apruo *AppPowerRentalUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *AppPowerRentalUpdateOne {
	if u != nil {
		apruo.SetAppGoodID(*u)
	}
	return apruo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (apruo *AppPowerRentalUpdateOne) ClearAppGoodID() *AppPowerRentalUpdateOne {
	apruo.mutation.ClearAppGoodID()
	return apruo
}

// SetServiceStartAt sets the "service_start_at" field.
func (apruo *AppPowerRentalUpdateOne) SetServiceStartAt(u uint32) *AppPowerRentalUpdateOne {
	apruo.mutation.ResetServiceStartAt()
	apruo.mutation.SetServiceStartAt(u)
	return apruo
}

// SetNillableServiceStartAt sets the "service_start_at" field if the given value is not nil.
func (apruo *AppPowerRentalUpdateOne) SetNillableServiceStartAt(u *uint32) *AppPowerRentalUpdateOne {
	if u != nil {
		apruo.SetServiceStartAt(*u)
	}
	return apruo
}

// AddServiceStartAt adds u to the "service_start_at" field.
func (apruo *AppPowerRentalUpdateOne) AddServiceStartAt(u int32) *AppPowerRentalUpdateOne {
	apruo.mutation.AddServiceStartAt(u)
	return apruo
}

// ClearServiceStartAt clears the value of the "service_start_at" field.
func (apruo *AppPowerRentalUpdateOne) ClearServiceStartAt() *AppPowerRentalUpdateOne {
	apruo.mutation.ClearServiceStartAt()
	return apruo
}

// SetStartMode sets the "start_mode" field.
func (apruo *AppPowerRentalUpdateOne) SetStartMode(s string) *AppPowerRentalUpdateOne {
	apruo.mutation.SetStartMode(s)
	return apruo
}

// SetNillableStartMode sets the "start_mode" field if the given value is not nil.
func (apruo *AppPowerRentalUpdateOne) SetNillableStartMode(s *string) *AppPowerRentalUpdateOne {
	if s != nil {
		apruo.SetStartMode(*s)
	}
	return apruo
}

// ClearStartMode clears the value of the "start_mode" field.
func (apruo *AppPowerRentalUpdateOne) ClearStartMode() *AppPowerRentalUpdateOne {
	apruo.mutation.ClearStartMode()
	return apruo
}

// SetCancelMode sets the "cancel_mode" field.
func (apruo *AppPowerRentalUpdateOne) SetCancelMode(s string) *AppPowerRentalUpdateOne {
	apruo.mutation.SetCancelMode(s)
	return apruo
}

// SetNillableCancelMode sets the "cancel_mode" field if the given value is not nil.
func (apruo *AppPowerRentalUpdateOne) SetNillableCancelMode(s *string) *AppPowerRentalUpdateOne {
	if s != nil {
		apruo.SetCancelMode(*s)
	}
	return apruo
}

// ClearCancelMode clears the value of the "cancel_mode" field.
func (apruo *AppPowerRentalUpdateOne) ClearCancelMode() *AppPowerRentalUpdateOne {
	apruo.mutation.ClearCancelMode()
	return apruo
}

// SetCancelableBeforeStartSeconds sets the "cancelable_before_start_seconds" field.
func (apruo *AppPowerRentalUpdateOne) SetCancelableBeforeStartSeconds(u uint32) *AppPowerRentalUpdateOne {
	apruo.mutation.ResetCancelableBeforeStartSeconds()
	apruo.mutation.SetCancelableBeforeStartSeconds(u)
	return apruo
}

// SetNillableCancelableBeforeStartSeconds sets the "cancelable_before_start_seconds" field if the given value is not nil.
func (apruo *AppPowerRentalUpdateOne) SetNillableCancelableBeforeStartSeconds(u *uint32) *AppPowerRentalUpdateOne {
	if u != nil {
		apruo.SetCancelableBeforeStartSeconds(*u)
	}
	return apruo
}

// AddCancelableBeforeStartSeconds adds u to the "cancelable_before_start_seconds" field.
func (apruo *AppPowerRentalUpdateOne) AddCancelableBeforeStartSeconds(u int32) *AppPowerRentalUpdateOne {
	apruo.mutation.AddCancelableBeforeStartSeconds(u)
	return apruo
}

// ClearCancelableBeforeStartSeconds clears the value of the "cancelable_before_start_seconds" field.
func (apruo *AppPowerRentalUpdateOne) ClearCancelableBeforeStartSeconds() *AppPowerRentalUpdateOne {
	apruo.mutation.ClearCancelableBeforeStartSeconds()
	return apruo
}

// SetEnableSetCommission sets the "enable_set_commission" field.
func (apruo *AppPowerRentalUpdateOne) SetEnableSetCommission(b bool) *AppPowerRentalUpdateOne {
	apruo.mutation.SetEnableSetCommission(b)
	return apruo
}

// SetNillableEnableSetCommission sets the "enable_set_commission" field if the given value is not nil.
func (apruo *AppPowerRentalUpdateOne) SetNillableEnableSetCommission(b *bool) *AppPowerRentalUpdateOne {
	if b != nil {
		apruo.SetEnableSetCommission(*b)
	}
	return apruo
}

// ClearEnableSetCommission clears the value of the "enable_set_commission" field.
func (apruo *AppPowerRentalUpdateOne) ClearEnableSetCommission() *AppPowerRentalUpdateOne {
	apruo.mutation.ClearEnableSetCommission()
	return apruo
}

// SetMinOrderAmount sets the "min_order_amount" field.
func (apruo *AppPowerRentalUpdateOne) SetMinOrderAmount(d decimal.Decimal) *AppPowerRentalUpdateOne {
	apruo.mutation.SetMinOrderAmount(d)
	return apruo
}

// SetNillableMinOrderAmount sets the "min_order_amount" field if the given value is not nil.
func (apruo *AppPowerRentalUpdateOne) SetNillableMinOrderAmount(d *decimal.Decimal) *AppPowerRentalUpdateOne {
	if d != nil {
		apruo.SetMinOrderAmount(*d)
	}
	return apruo
}

// ClearMinOrderAmount clears the value of the "min_order_amount" field.
func (apruo *AppPowerRentalUpdateOne) ClearMinOrderAmount() *AppPowerRentalUpdateOne {
	apruo.mutation.ClearMinOrderAmount()
	return apruo
}

// SetMaxOrderAmount sets the "max_order_amount" field.
func (apruo *AppPowerRentalUpdateOne) SetMaxOrderAmount(d decimal.Decimal) *AppPowerRentalUpdateOne {
	apruo.mutation.SetMaxOrderAmount(d)
	return apruo
}

// SetNillableMaxOrderAmount sets the "max_order_amount" field if the given value is not nil.
func (apruo *AppPowerRentalUpdateOne) SetNillableMaxOrderAmount(d *decimal.Decimal) *AppPowerRentalUpdateOne {
	if d != nil {
		apruo.SetMaxOrderAmount(*d)
	}
	return apruo
}

// ClearMaxOrderAmount clears the value of the "max_order_amount" field.
func (apruo *AppPowerRentalUpdateOne) ClearMaxOrderAmount() *AppPowerRentalUpdateOne {
	apruo.mutation.ClearMaxOrderAmount()
	return apruo
}

// SetMaxUserAmount sets the "max_user_amount" field.
func (apruo *AppPowerRentalUpdateOne) SetMaxUserAmount(d decimal.Decimal) *AppPowerRentalUpdateOne {
	apruo.mutation.SetMaxUserAmount(d)
	return apruo
}

// SetNillableMaxUserAmount sets the "max_user_amount" field if the given value is not nil.
func (apruo *AppPowerRentalUpdateOne) SetNillableMaxUserAmount(d *decimal.Decimal) *AppPowerRentalUpdateOne {
	if d != nil {
		apruo.SetMaxUserAmount(*d)
	}
	return apruo
}

// ClearMaxUserAmount clears the value of the "max_user_amount" field.
func (apruo *AppPowerRentalUpdateOne) ClearMaxUserAmount() *AppPowerRentalUpdateOne {
	apruo.mutation.ClearMaxUserAmount()
	return apruo
}

// SetMinOrderDurationSeconds sets the "min_order_duration_seconds" field.
func (apruo *AppPowerRentalUpdateOne) SetMinOrderDurationSeconds(u uint32) *AppPowerRentalUpdateOne {
	apruo.mutation.ResetMinOrderDurationSeconds()
	apruo.mutation.SetMinOrderDurationSeconds(u)
	return apruo
}

// SetNillableMinOrderDurationSeconds sets the "min_order_duration_seconds" field if the given value is not nil.
func (apruo *AppPowerRentalUpdateOne) SetNillableMinOrderDurationSeconds(u *uint32) *AppPowerRentalUpdateOne {
	if u != nil {
		apruo.SetMinOrderDurationSeconds(*u)
	}
	return apruo
}

// AddMinOrderDurationSeconds adds u to the "min_order_duration_seconds" field.
func (apruo *AppPowerRentalUpdateOne) AddMinOrderDurationSeconds(u int32) *AppPowerRentalUpdateOne {
	apruo.mutation.AddMinOrderDurationSeconds(u)
	return apruo
}

// ClearMinOrderDurationSeconds clears the value of the "min_order_duration_seconds" field.
func (apruo *AppPowerRentalUpdateOne) ClearMinOrderDurationSeconds() *AppPowerRentalUpdateOne {
	apruo.mutation.ClearMinOrderDurationSeconds()
	return apruo
}

// SetMaxOrderDurationSeconds sets the "max_order_duration_seconds" field.
func (apruo *AppPowerRentalUpdateOne) SetMaxOrderDurationSeconds(u uint32) *AppPowerRentalUpdateOne {
	apruo.mutation.ResetMaxOrderDurationSeconds()
	apruo.mutation.SetMaxOrderDurationSeconds(u)
	return apruo
}

// SetNillableMaxOrderDurationSeconds sets the "max_order_duration_seconds" field if the given value is not nil.
func (apruo *AppPowerRentalUpdateOne) SetNillableMaxOrderDurationSeconds(u *uint32) *AppPowerRentalUpdateOne {
	if u != nil {
		apruo.SetMaxOrderDurationSeconds(*u)
	}
	return apruo
}

// AddMaxOrderDurationSeconds adds u to the "max_order_duration_seconds" field.
func (apruo *AppPowerRentalUpdateOne) AddMaxOrderDurationSeconds(u int32) *AppPowerRentalUpdateOne {
	apruo.mutation.AddMaxOrderDurationSeconds(u)
	return apruo
}

// ClearMaxOrderDurationSeconds clears the value of the "max_order_duration_seconds" field.
func (apruo *AppPowerRentalUpdateOne) ClearMaxOrderDurationSeconds() *AppPowerRentalUpdateOne {
	apruo.mutation.ClearMaxOrderDurationSeconds()
	return apruo
}

// SetUnitPrice sets the "unit_price" field.
func (apruo *AppPowerRentalUpdateOne) SetUnitPrice(d decimal.Decimal) *AppPowerRentalUpdateOne {
	apruo.mutation.SetUnitPrice(d)
	return apruo
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (apruo *AppPowerRentalUpdateOne) SetNillableUnitPrice(d *decimal.Decimal) *AppPowerRentalUpdateOne {
	if d != nil {
		apruo.SetUnitPrice(*d)
	}
	return apruo
}

// ClearUnitPrice clears the value of the "unit_price" field.
func (apruo *AppPowerRentalUpdateOne) ClearUnitPrice() *AppPowerRentalUpdateOne {
	apruo.mutation.ClearUnitPrice()
	return apruo
}

// SetSaleStartAt sets the "sale_start_at" field.
func (apruo *AppPowerRentalUpdateOne) SetSaleStartAt(u uint32) *AppPowerRentalUpdateOne {
	apruo.mutation.ResetSaleStartAt()
	apruo.mutation.SetSaleStartAt(u)
	return apruo
}

// SetNillableSaleStartAt sets the "sale_start_at" field if the given value is not nil.
func (apruo *AppPowerRentalUpdateOne) SetNillableSaleStartAt(u *uint32) *AppPowerRentalUpdateOne {
	if u != nil {
		apruo.SetSaleStartAt(*u)
	}
	return apruo
}

// AddSaleStartAt adds u to the "sale_start_at" field.
func (apruo *AppPowerRentalUpdateOne) AddSaleStartAt(u int32) *AppPowerRentalUpdateOne {
	apruo.mutation.AddSaleStartAt(u)
	return apruo
}

// ClearSaleStartAt clears the value of the "sale_start_at" field.
func (apruo *AppPowerRentalUpdateOne) ClearSaleStartAt() *AppPowerRentalUpdateOne {
	apruo.mutation.ClearSaleStartAt()
	return apruo
}

// SetSaleEndAt sets the "sale_end_at" field.
func (apruo *AppPowerRentalUpdateOne) SetSaleEndAt(u uint32) *AppPowerRentalUpdateOne {
	apruo.mutation.ResetSaleEndAt()
	apruo.mutation.SetSaleEndAt(u)
	return apruo
}

// SetNillableSaleEndAt sets the "sale_end_at" field if the given value is not nil.
func (apruo *AppPowerRentalUpdateOne) SetNillableSaleEndAt(u *uint32) *AppPowerRentalUpdateOne {
	if u != nil {
		apruo.SetSaleEndAt(*u)
	}
	return apruo
}

// AddSaleEndAt adds u to the "sale_end_at" field.
func (apruo *AppPowerRentalUpdateOne) AddSaleEndAt(u int32) *AppPowerRentalUpdateOne {
	apruo.mutation.AddSaleEndAt(u)
	return apruo
}

// ClearSaleEndAt clears the value of the "sale_end_at" field.
func (apruo *AppPowerRentalUpdateOne) ClearSaleEndAt() *AppPowerRentalUpdateOne {
	apruo.mutation.ClearSaleEndAt()
	return apruo
}

// SetSaleMode sets the "sale_mode" field.
func (apruo *AppPowerRentalUpdateOne) SetSaleMode(s string) *AppPowerRentalUpdateOne {
	apruo.mutation.SetSaleMode(s)
	return apruo
}

// SetNillableSaleMode sets the "sale_mode" field if the given value is not nil.
func (apruo *AppPowerRentalUpdateOne) SetNillableSaleMode(s *string) *AppPowerRentalUpdateOne {
	if s != nil {
		apruo.SetSaleMode(*s)
	}
	return apruo
}

// ClearSaleMode clears the value of the "sale_mode" field.
func (apruo *AppPowerRentalUpdateOne) ClearSaleMode() *AppPowerRentalUpdateOne {
	apruo.mutation.ClearSaleMode()
	return apruo
}

// SetFixedDuration sets the "fixed_duration" field.
func (apruo *AppPowerRentalUpdateOne) SetFixedDuration(b bool) *AppPowerRentalUpdateOne {
	apruo.mutation.SetFixedDuration(b)
	return apruo
}

// SetNillableFixedDuration sets the "fixed_duration" field if the given value is not nil.
func (apruo *AppPowerRentalUpdateOne) SetNillableFixedDuration(b *bool) *AppPowerRentalUpdateOne {
	if b != nil {
		apruo.SetFixedDuration(*b)
	}
	return apruo
}

// ClearFixedDuration clears the value of the "fixed_duration" field.
func (apruo *AppPowerRentalUpdateOne) ClearFixedDuration() *AppPowerRentalUpdateOne {
	apruo.mutation.ClearFixedDuration()
	return apruo
}

// SetPackageWithRequireds sets the "package_with_requireds" field.
func (apruo *AppPowerRentalUpdateOne) SetPackageWithRequireds(b bool) *AppPowerRentalUpdateOne {
	apruo.mutation.SetPackageWithRequireds(b)
	return apruo
}

// SetNillablePackageWithRequireds sets the "package_with_requireds" field if the given value is not nil.
func (apruo *AppPowerRentalUpdateOne) SetNillablePackageWithRequireds(b *bool) *AppPowerRentalUpdateOne {
	if b != nil {
		apruo.SetPackageWithRequireds(*b)
	}
	return apruo
}

// ClearPackageWithRequireds clears the value of the "package_with_requireds" field.
func (apruo *AppPowerRentalUpdateOne) ClearPackageWithRequireds() *AppPowerRentalUpdateOne {
	apruo.mutation.ClearPackageWithRequireds()
	return apruo
}

// Mutation returns the AppPowerRentalMutation object of the builder.
func (apruo *AppPowerRentalUpdateOne) Mutation() *AppPowerRentalMutation {
	return apruo.mutation
}

// Where appends a list predicates to the AppPowerRentalUpdate builder.
func (apruo *AppPowerRentalUpdateOne) Where(ps ...predicate.AppPowerRental) *AppPowerRentalUpdateOne {
	apruo.mutation.Where(ps...)
	return apruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (apruo *AppPowerRentalUpdateOne) Select(field string, fields ...string) *AppPowerRentalUpdateOne {
	apruo.fields = append([]string{field}, fields...)
	return apruo
}

// Save executes the query and returns the updated AppPowerRental entity.
func (apruo *AppPowerRentalUpdateOne) Save(ctx context.Context) (*AppPowerRental, error) {
	return withHooks(ctx, apruo.sqlSave, apruo.mutation, apruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (apruo *AppPowerRentalUpdateOne) SaveX(ctx context.Context) *AppPowerRental {
	node, err := apruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (apruo *AppPowerRentalUpdateOne) Exec(ctx context.Context) error {
	_, err := apruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apruo *AppPowerRentalUpdateOne) ExecX(ctx context.Context) {
	if err := apruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (apruo *AppPowerRentalUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppPowerRentalUpdateOne {
	apruo.modifiers = append(apruo.modifiers, modifiers...)
	return apruo
}

func (apruo *AppPowerRentalUpdateOne) sqlSave(ctx context.Context) (_node *AppPowerRental, err error) {
	_spec := sqlgraph.NewUpdateSpec(apppowerrental.Table, apppowerrental.Columns, sqlgraph.NewFieldSpec(apppowerrental.FieldID, field.TypeUint32))
	id, ok := apruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AppPowerRental.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := apruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apppowerrental.FieldID)
		for _, f := range fields {
			if !apppowerrental.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != apppowerrental.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := apruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apruo.mutation.EntID(); ok {
		_spec.SetField(apppowerrental.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := apruo.mutation.AppGoodID(); ok {
		_spec.SetField(apppowerrental.FieldAppGoodID, field.TypeUUID, value)
	}
	if apruo.mutation.AppGoodIDCleared() {
		_spec.ClearField(apppowerrental.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := apruo.mutation.ServiceStartAt(); ok {
		_spec.SetField(apppowerrental.FieldServiceStartAt, field.TypeUint32, value)
	}
	if value, ok := apruo.mutation.AddedServiceStartAt(); ok {
		_spec.AddField(apppowerrental.FieldServiceStartAt, field.TypeUint32, value)
	}
	if apruo.mutation.ServiceStartAtCleared() {
		_spec.ClearField(apppowerrental.FieldServiceStartAt, field.TypeUint32)
	}
	if value, ok := apruo.mutation.StartMode(); ok {
		_spec.SetField(apppowerrental.FieldStartMode, field.TypeString, value)
	}
	if apruo.mutation.StartModeCleared() {
		_spec.ClearField(apppowerrental.FieldStartMode, field.TypeString)
	}
	if value, ok := apruo.mutation.CancelMode(); ok {
		_spec.SetField(apppowerrental.FieldCancelMode, field.TypeString, value)
	}
	if apruo.mutation.CancelModeCleared() {
		_spec.ClearField(apppowerrental.FieldCancelMode, field.TypeString)
	}
	if value, ok := apruo.mutation.CancelableBeforeStartSeconds(); ok {
		_spec.SetField(apppowerrental.FieldCancelableBeforeStartSeconds, field.TypeUint32, value)
	}
	if value, ok := apruo.mutation.AddedCancelableBeforeStartSeconds(); ok {
		_spec.AddField(apppowerrental.FieldCancelableBeforeStartSeconds, field.TypeUint32, value)
	}
	if apruo.mutation.CancelableBeforeStartSecondsCleared() {
		_spec.ClearField(apppowerrental.FieldCancelableBeforeStartSeconds, field.TypeUint32)
	}
	if value, ok := apruo.mutation.EnableSetCommission(); ok {
		_spec.SetField(apppowerrental.FieldEnableSetCommission, field.TypeBool, value)
	}
	if apruo.mutation.EnableSetCommissionCleared() {
		_spec.ClearField(apppowerrental.FieldEnableSetCommission, field.TypeBool)
	}
	if value, ok := apruo.mutation.MinOrderAmount(); ok {
		_spec.SetField(apppowerrental.FieldMinOrderAmount, field.TypeOther, value)
	}
	if apruo.mutation.MinOrderAmountCleared() {
		_spec.ClearField(apppowerrental.FieldMinOrderAmount, field.TypeOther)
	}
	if value, ok := apruo.mutation.MaxOrderAmount(); ok {
		_spec.SetField(apppowerrental.FieldMaxOrderAmount, field.TypeOther, value)
	}
	if apruo.mutation.MaxOrderAmountCleared() {
		_spec.ClearField(apppowerrental.FieldMaxOrderAmount, field.TypeOther)
	}
	if value, ok := apruo.mutation.MaxUserAmount(); ok {
		_spec.SetField(apppowerrental.FieldMaxUserAmount, field.TypeOther, value)
	}
	if apruo.mutation.MaxUserAmountCleared() {
		_spec.ClearField(apppowerrental.FieldMaxUserAmount, field.TypeOther)
	}
	if value, ok := apruo.mutation.MinOrderDurationSeconds(); ok {
		_spec.SetField(apppowerrental.FieldMinOrderDurationSeconds, field.TypeUint32, value)
	}
	if value, ok := apruo.mutation.AddedMinOrderDurationSeconds(); ok {
		_spec.AddField(apppowerrental.FieldMinOrderDurationSeconds, field.TypeUint32, value)
	}
	if apruo.mutation.MinOrderDurationSecondsCleared() {
		_spec.ClearField(apppowerrental.FieldMinOrderDurationSeconds, field.TypeUint32)
	}
	if value, ok := apruo.mutation.MaxOrderDurationSeconds(); ok {
		_spec.SetField(apppowerrental.FieldMaxOrderDurationSeconds, field.TypeUint32, value)
	}
	if value, ok := apruo.mutation.AddedMaxOrderDurationSeconds(); ok {
		_spec.AddField(apppowerrental.FieldMaxOrderDurationSeconds, field.TypeUint32, value)
	}
	if apruo.mutation.MaxOrderDurationSecondsCleared() {
		_spec.ClearField(apppowerrental.FieldMaxOrderDurationSeconds, field.TypeUint32)
	}
	if value, ok := apruo.mutation.UnitPrice(); ok {
		_spec.SetField(apppowerrental.FieldUnitPrice, field.TypeOther, value)
	}
	if apruo.mutation.UnitPriceCleared() {
		_spec.ClearField(apppowerrental.FieldUnitPrice, field.TypeOther)
	}
	if value, ok := apruo.mutation.SaleStartAt(); ok {
		_spec.SetField(apppowerrental.FieldSaleStartAt, field.TypeUint32, value)
	}
	if value, ok := apruo.mutation.AddedSaleStartAt(); ok {
		_spec.AddField(apppowerrental.FieldSaleStartAt, field.TypeUint32, value)
	}
	if apruo.mutation.SaleStartAtCleared() {
		_spec.ClearField(apppowerrental.FieldSaleStartAt, field.TypeUint32)
	}
	if value, ok := apruo.mutation.SaleEndAt(); ok {
		_spec.SetField(apppowerrental.FieldSaleEndAt, field.TypeUint32, value)
	}
	if value, ok := apruo.mutation.AddedSaleEndAt(); ok {
		_spec.AddField(apppowerrental.FieldSaleEndAt, field.TypeUint32, value)
	}
	if apruo.mutation.SaleEndAtCleared() {
		_spec.ClearField(apppowerrental.FieldSaleEndAt, field.TypeUint32)
	}
	if value, ok := apruo.mutation.SaleMode(); ok {
		_spec.SetField(apppowerrental.FieldSaleMode, field.TypeString, value)
	}
	if apruo.mutation.SaleModeCleared() {
		_spec.ClearField(apppowerrental.FieldSaleMode, field.TypeString)
	}
	if value, ok := apruo.mutation.FixedDuration(); ok {
		_spec.SetField(apppowerrental.FieldFixedDuration, field.TypeBool, value)
	}
	if apruo.mutation.FixedDurationCleared() {
		_spec.ClearField(apppowerrental.FieldFixedDuration, field.TypeBool)
	}
	if value, ok := apruo.mutation.PackageWithRequireds(); ok {
		_spec.SetField(apppowerrental.FieldPackageWithRequireds, field.TypeBool, value)
	}
	if apruo.mutation.PackageWithRequiredsCleared() {
		_spec.ClearField(apppowerrental.FieldPackageWithRequireds, field.TypeBool)
	}
	_spec.AddModifiers(apruo.modifiers...)
	_node = &AppPowerRental{config: apruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, apruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apppowerrental.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	apruo.mutation.done = true
	return _node, nil
}

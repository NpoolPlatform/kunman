// Code generated by ent, DO NOT EDIT.

package goodcoin

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldEQ(FieldEntID, v))
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldEQ(FieldGoodID, v))
}

// CoinTypeID applies equality check predicate on the "coin_type_id" field. It's identical to CoinTypeIDEQ.
func CoinTypeID(v uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldEQ(FieldCoinTypeID, v))
}

// Main applies equality check predicate on the "main" field. It's identical to MainEQ.
func Main(v bool) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldEQ(FieldMain, v))
}

// Index applies equality check predicate on the "index" field. It's identical to IndexEQ.
func Index(v int32) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldEQ(FieldIndex, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldLTE(FieldEntID, v))
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldEQ(FieldGoodID, v))
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldNEQ(FieldGoodID, v))
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldIn(FieldGoodID, vs...))
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldNotIn(FieldGoodID, vs...))
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldGT(FieldGoodID, v))
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldGTE(FieldGoodID, v))
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldLT(FieldGoodID, v))
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldLTE(FieldGoodID, v))
}

// GoodIDIsNil applies the IsNil predicate on the "good_id" field.
func GoodIDIsNil() predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldIsNull(FieldGoodID))
}

// GoodIDNotNil applies the NotNil predicate on the "good_id" field.
func GoodIDNotNil() predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldNotNull(FieldGoodID))
}

// CoinTypeIDEQ applies the EQ predicate on the "coin_type_id" field.
func CoinTypeIDEQ(v uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldEQ(FieldCoinTypeID, v))
}

// CoinTypeIDNEQ applies the NEQ predicate on the "coin_type_id" field.
func CoinTypeIDNEQ(v uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldNEQ(FieldCoinTypeID, v))
}

// CoinTypeIDIn applies the In predicate on the "coin_type_id" field.
func CoinTypeIDIn(vs ...uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldIn(FieldCoinTypeID, vs...))
}

// CoinTypeIDNotIn applies the NotIn predicate on the "coin_type_id" field.
func CoinTypeIDNotIn(vs ...uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldNotIn(FieldCoinTypeID, vs...))
}

// CoinTypeIDGT applies the GT predicate on the "coin_type_id" field.
func CoinTypeIDGT(v uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldGT(FieldCoinTypeID, v))
}

// CoinTypeIDGTE applies the GTE predicate on the "coin_type_id" field.
func CoinTypeIDGTE(v uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldGTE(FieldCoinTypeID, v))
}

// CoinTypeIDLT applies the LT predicate on the "coin_type_id" field.
func CoinTypeIDLT(v uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldLT(FieldCoinTypeID, v))
}

// CoinTypeIDLTE applies the LTE predicate on the "coin_type_id" field.
func CoinTypeIDLTE(v uuid.UUID) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldLTE(FieldCoinTypeID, v))
}

// CoinTypeIDIsNil applies the IsNil predicate on the "coin_type_id" field.
func CoinTypeIDIsNil() predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldIsNull(FieldCoinTypeID))
}

// CoinTypeIDNotNil applies the NotNil predicate on the "coin_type_id" field.
func CoinTypeIDNotNil() predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldNotNull(FieldCoinTypeID))
}

// MainEQ applies the EQ predicate on the "main" field.
func MainEQ(v bool) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldEQ(FieldMain, v))
}

// MainNEQ applies the NEQ predicate on the "main" field.
func MainNEQ(v bool) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldNEQ(FieldMain, v))
}

// MainIsNil applies the IsNil predicate on the "main" field.
func MainIsNil() predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldIsNull(FieldMain))
}

// MainNotNil applies the NotNil predicate on the "main" field.
func MainNotNil() predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldNotNull(FieldMain))
}

// IndexEQ applies the EQ predicate on the "index" field.
func IndexEQ(v int32) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldEQ(FieldIndex, v))
}

// IndexNEQ applies the NEQ predicate on the "index" field.
func IndexNEQ(v int32) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldNEQ(FieldIndex, v))
}

// IndexIn applies the In predicate on the "index" field.
func IndexIn(vs ...int32) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldIn(FieldIndex, vs...))
}

// IndexNotIn applies the NotIn predicate on the "index" field.
func IndexNotIn(vs ...int32) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldNotIn(FieldIndex, vs...))
}

// IndexGT applies the GT predicate on the "index" field.
func IndexGT(v int32) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldGT(FieldIndex, v))
}

// IndexGTE applies the GTE predicate on the "index" field.
func IndexGTE(v int32) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldGTE(FieldIndex, v))
}

// IndexLT applies the LT predicate on the "index" field.
func IndexLT(v int32) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldLT(FieldIndex, v))
}

// IndexLTE applies the LTE predicate on the "index" field.
func IndexLTE(v int32) predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldLTE(FieldIndex, v))
}

// IndexIsNil applies the IsNil predicate on the "index" field.
func IndexIsNil() predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldIsNull(FieldIndex))
}

// IndexNotNil applies the NotNil predicate on the "index" field.
func IndexNotNil() predicate.GoodCoin {
	return predicate.GoodCoin(sql.FieldNotNull(FieldIndex))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GoodCoin) predicate.GoodCoin {
	return predicate.GoodCoin(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GoodCoin) predicate.GoodCoin {
	return predicate.GoodCoin(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GoodCoin) predicate.GoodCoin {
	return predicate.GoodCoin(sql.NotPredicates(p))
}

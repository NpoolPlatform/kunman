// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/extrainfo"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ExtraInfo is the model entity for the ExtraInfo schema.
type ExtraInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppGoodID holds the value of the "app_good_id" field.
	AppGoodID uuid.UUID `json:"app_good_id,omitempty"`
	// Likes holds the value of the "likes" field.
	Likes uint32 `json:"likes,omitempty"`
	// Dislikes holds the value of the "dislikes" field.
	Dislikes uint32 `json:"dislikes,omitempty"`
	// RecommendCount holds the value of the "recommend_count" field.
	RecommendCount uint32 `json:"recommend_count,omitempty"`
	// CommentCount holds the value of the "comment_count" field.
	CommentCount uint32 `json:"comment_count,omitempty"`
	// ScoreCount holds the value of the "score_count" field.
	ScoreCount uint32 `json:"score_count,omitempty"`
	// Score holds the value of the "score" field.
	Score        decimal.Decimal `json:"score,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExtraInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case extrainfo.FieldScore:
			values[i] = new(decimal.Decimal)
		case extrainfo.FieldID, extrainfo.FieldCreatedAt, extrainfo.FieldUpdatedAt, extrainfo.FieldDeletedAt, extrainfo.FieldLikes, extrainfo.FieldDislikes, extrainfo.FieldRecommendCount, extrainfo.FieldCommentCount, extrainfo.FieldScoreCount:
			values[i] = new(sql.NullInt64)
		case extrainfo.FieldEntID, extrainfo.FieldAppGoodID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExtraInfo fields.
func (ei *ExtraInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case extrainfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ei.ID = uint32(value.Int64)
		case extrainfo.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				ei.EntID = *value
			}
		case extrainfo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ei.CreatedAt = uint32(value.Int64)
			}
		case extrainfo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ei.UpdatedAt = uint32(value.Int64)
			}
		case extrainfo.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ei.DeletedAt = uint32(value.Int64)
			}
		case extrainfo.FieldAppGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_good_id", values[i])
			} else if value != nil {
				ei.AppGoodID = *value
			}
		case extrainfo.FieldLikes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field likes", values[i])
			} else if value.Valid {
				ei.Likes = uint32(value.Int64)
			}
		case extrainfo.FieldDislikes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dislikes", values[i])
			} else if value.Valid {
				ei.Dislikes = uint32(value.Int64)
			}
		case extrainfo.FieldRecommendCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field recommend_count", values[i])
			} else if value.Valid {
				ei.RecommendCount = uint32(value.Int64)
			}
		case extrainfo.FieldCommentCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field comment_count", values[i])
			} else if value.Valid {
				ei.CommentCount = uint32(value.Int64)
			}
		case extrainfo.FieldScoreCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field score_count", values[i])
			} else if value.Valid {
				ei.ScoreCount = uint32(value.Int64)
			}
		case extrainfo.FieldScore:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value != nil {
				ei.Score = *value
			}
		default:
			ei.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ExtraInfo.
// This includes values selected through modifiers, order, etc.
func (ei *ExtraInfo) Value(name string) (ent.Value, error) {
	return ei.selectValues.Get(name)
}

// Update returns a builder for updating this ExtraInfo.
// Note that you need to call ExtraInfo.Unwrap() before calling this method if this ExtraInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (ei *ExtraInfo) Update() *ExtraInfoUpdateOne {
	return NewExtraInfoClient(ei.config).UpdateOne(ei)
}

// Unwrap unwraps the ExtraInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ei *ExtraInfo) Unwrap() *ExtraInfo {
	_tx, ok := ei.config.driver.(*txDriver)
	if !ok {
		panic("generated: ExtraInfo is not a transactional entity")
	}
	ei.config.driver = _tx.drv
	return ei
}

// String implements the fmt.Stringer.
func (ei *ExtraInfo) String() string {
	var builder strings.Builder
	builder.WriteString("ExtraInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ei.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", ei.EntID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", ei.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ei.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", ei.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("app_good_id=")
	builder.WriteString(fmt.Sprintf("%v", ei.AppGoodID))
	builder.WriteString(", ")
	builder.WriteString("likes=")
	builder.WriteString(fmt.Sprintf("%v", ei.Likes))
	builder.WriteString(", ")
	builder.WriteString("dislikes=")
	builder.WriteString(fmt.Sprintf("%v", ei.Dislikes))
	builder.WriteString(", ")
	builder.WriteString("recommend_count=")
	builder.WriteString(fmt.Sprintf("%v", ei.RecommendCount))
	builder.WriteString(", ")
	builder.WriteString("comment_count=")
	builder.WriteString(fmt.Sprintf("%v", ei.CommentCount))
	builder.WriteString(", ")
	builder.WriteString("score_count=")
	builder.WriteString(fmt.Sprintf("%v", ei.ScoreCount))
	builder.WriteString(", ")
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", ei.Score))
	builder.WriteByte(')')
	return builder.String()
}

// ExtraInfos is a parsable slice of ExtraInfo.
type ExtraInfos []*ExtraInfo

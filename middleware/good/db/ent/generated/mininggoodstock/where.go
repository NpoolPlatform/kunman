// Code generated by ent, DO NOT EDIT.

package mininggoodstock

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEQ(FieldEntID, v))
}

// GoodStockID applies equality check predicate on the "good_stock_id" field. It's identical to GoodStockIDEQ.
func GoodStockID(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEQ(FieldGoodStockID, v))
}

// PoolRootUserID applies equality check predicate on the "pool_root_user_id" field. It's identical to PoolRootUserIDEQ.
func PoolRootUserID(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEQ(FieldPoolRootUserID, v))
}

// PoolGoodUserID applies equality check predicate on the "pool_good_user_id" field. It's identical to PoolGoodUserIDEQ.
func PoolGoodUserID(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEQ(FieldPoolGoodUserID, v))
}

// Total applies equality check predicate on the "total" field. It's identical to TotalEQ.
func Total(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEQ(FieldTotal, v))
}

// SpotQuantity applies equality check predicate on the "spot_quantity" field. It's identical to SpotQuantityEQ.
func SpotQuantity(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEQ(FieldSpotQuantity, v))
}

// Locked applies equality check predicate on the "locked" field. It's identical to LockedEQ.
func Locked(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEQ(FieldLocked, v))
}

// InService applies equality check predicate on the "in_service" field. It's identical to InServiceEQ.
func InService(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEQ(FieldInService, v))
}

// WaitStart applies equality check predicate on the "wait_start" field. It's identical to WaitStartEQ.
func WaitStart(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEQ(FieldWaitStart, v))
}

// Sold applies equality check predicate on the "sold" field. It's identical to SoldEQ.
func Sold(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEQ(FieldSold, v))
}

// AppReserved applies equality check predicate on the "app_reserved" field. It's identical to AppReservedEQ.
func AppReserved(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEQ(FieldAppReserved, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEQ(FieldState, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldLTE(FieldEntID, v))
}

// GoodStockIDEQ applies the EQ predicate on the "good_stock_id" field.
func GoodStockIDEQ(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEQ(FieldGoodStockID, v))
}

// GoodStockIDNEQ applies the NEQ predicate on the "good_stock_id" field.
func GoodStockIDNEQ(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNEQ(FieldGoodStockID, v))
}

// GoodStockIDIn applies the In predicate on the "good_stock_id" field.
func GoodStockIDIn(vs ...uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldIn(FieldGoodStockID, vs...))
}

// GoodStockIDNotIn applies the NotIn predicate on the "good_stock_id" field.
func GoodStockIDNotIn(vs ...uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNotIn(FieldGoodStockID, vs...))
}

// GoodStockIDGT applies the GT predicate on the "good_stock_id" field.
func GoodStockIDGT(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldGT(FieldGoodStockID, v))
}

// GoodStockIDGTE applies the GTE predicate on the "good_stock_id" field.
func GoodStockIDGTE(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldGTE(FieldGoodStockID, v))
}

// GoodStockIDLT applies the LT predicate on the "good_stock_id" field.
func GoodStockIDLT(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldLT(FieldGoodStockID, v))
}

// GoodStockIDLTE applies the LTE predicate on the "good_stock_id" field.
func GoodStockIDLTE(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldLTE(FieldGoodStockID, v))
}

// GoodStockIDIsNil applies the IsNil predicate on the "good_stock_id" field.
func GoodStockIDIsNil() predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldIsNull(FieldGoodStockID))
}

// GoodStockIDNotNil applies the NotNil predicate on the "good_stock_id" field.
func GoodStockIDNotNil() predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNotNull(FieldGoodStockID))
}

// PoolRootUserIDEQ applies the EQ predicate on the "pool_root_user_id" field.
func PoolRootUserIDEQ(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEQ(FieldPoolRootUserID, v))
}

// PoolRootUserIDNEQ applies the NEQ predicate on the "pool_root_user_id" field.
func PoolRootUserIDNEQ(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNEQ(FieldPoolRootUserID, v))
}

// PoolRootUserIDIn applies the In predicate on the "pool_root_user_id" field.
func PoolRootUserIDIn(vs ...uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldIn(FieldPoolRootUserID, vs...))
}

// PoolRootUserIDNotIn applies the NotIn predicate on the "pool_root_user_id" field.
func PoolRootUserIDNotIn(vs ...uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNotIn(FieldPoolRootUserID, vs...))
}

// PoolRootUserIDGT applies the GT predicate on the "pool_root_user_id" field.
func PoolRootUserIDGT(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldGT(FieldPoolRootUserID, v))
}

// PoolRootUserIDGTE applies the GTE predicate on the "pool_root_user_id" field.
func PoolRootUserIDGTE(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldGTE(FieldPoolRootUserID, v))
}

// PoolRootUserIDLT applies the LT predicate on the "pool_root_user_id" field.
func PoolRootUserIDLT(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldLT(FieldPoolRootUserID, v))
}

// PoolRootUserIDLTE applies the LTE predicate on the "pool_root_user_id" field.
func PoolRootUserIDLTE(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldLTE(FieldPoolRootUserID, v))
}

// PoolRootUserIDIsNil applies the IsNil predicate on the "pool_root_user_id" field.
func PoolRootUserIDIsNil() predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldIsNull(FieldPoolRootUserID))
}

// PoolRootUserIDNotNil applies the NotNil predicate on the "pool_root_user_id" field.
func PoolRootUserIDNotNil() predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNotNull(FieldPoolRootUserID))
}

// PoolGoodUserIDEQ applies the EQ predicate on the "pool_good_user_id" field.
func PoolGoodUserIDEQ(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEQ(FieldPoolGoodUserID, v))
}

// PoolGoodUserIDNEQ applies the NEQ predicate on the "pool_good_user_id" field.
func PoolGoodUserIDNEQ(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNEQ(FieldPoolGoodUserID, v))
}

// PoolGoodUserIDIn applies the In predicate on the "pool_good_user_id" field.
func PoolGoodUserIDIn(vs ...uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldIn(FieldPoolGoodUserID, vs...))
}

// PoolGoodUserIDNotIn applies the NotIn predicate on the "pool_good_user_id" field.
func PoolGoodUserIDNotIn(vs ...uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNotIn(FieldPoolGoodUserID, vs...))
}

// PoolGoodUserIDGT applies the GT predicate on the "pool_good_user_id" field.
func PoolGoodUserIDGT(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldGT(FieldPoolGoodUserID, v))
}

// PoolGoodUserIDGTE applies the GTE predicate on the "pool_good_user_id" field.
func PoolGoodUserIDGTE(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldGTE(FieldPoolGoodUserID, v))
}

// PoolGoodUserIDLT applies the LT predicate on the "pool_good_user_id" field.
func PoolGoodUserIDLT(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldLT(FieldPoolGoodUserID, v))
}

// PoolGoodUserIDLTE applies the LTE predicate on the "pool_good_user_id" field.
func PoolGoodUserIDLTE(v uuid.UUID) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldLTE(FieldPoolGoodUserID, v))
}

// PoolGoodUserIDIsNil applies the IsNil predicate on the "pool_good_user_id" field.
func PoolGoodUserIDIsNil() predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldIsNull(FieldPoolGoodUserID))
}

// PoolGoodUserIDNotNil applies the NotNil predicate on the "pool_good_user_id" field.
func PoolGoodUserIDNotNil() predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNotNull(FieldPoolGoodUserID))
}

// TotalEQ applies the EQ predicate on the "total" field.
func TotalEQ(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEQ(FieldTotal, v))
}

// TotalNEQ applies the NEQ predicate on the "total" field.
func TotalNEQ(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNEQ(FieldTotal, v))
}

// TotalIn applies the In predicate on the "total" field.
func TotalIn(vs ...decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldIn(FieldTotal, vs...))
}

// TotalNotIn applies the NotIn predicate on the "total" field.
func TotalNotIn(vs ...decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNotIn(FieldTotal, vs...))
}

// TotalGT applies the GT predicate on the "total" field.
func TotalGT(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldGT(FieldTotal, v))
}

// TotalGTE applies the GTE predicate on the "total" field.
func TotalGTE(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldGTE(FieldTotal, v))
}

// TotalLT applies the LT predicate on the "total" field.
func TotalLT(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldLT(FieldTotal, v))
}

// TotalLTE applies the LTE predicate on the "total" field.
func TotalLTE(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldLTE(FieldTotal, v))
}

// TotalIsNil applies the IsNil predicate on the "total" field.
func TotalIsNil() predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldIsNull(FieldTotal))
}

// TotalNotNil applies the NotNil predicate on the "total" field.
func TotalNotNil() predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNotNull(FieldTotal))
}

// SpotQuantityEQ applies the EQ predicate on the "spot_quantity" field.
func SpotQuantityEQ(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEQ(FieldSpotQuantity, v))
}

// SpotQuantityNEQ applies the NEQ predicate on the "spot_quantity" field.
func SpotQuantityNEQ(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNEQ(FieldSpotQuantity, v))
}

// SpotQuantityIn applies the In predicate on the "spot_quantity" field.
func SpotQuantityIn(vs ...decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldIn(FieldSpotQuantity, vs...))
}

// SpotQuantityNotIn applies the NotIn predicate on the "spot_quantity" field.
func SpotQuantityNotIn(vs ...decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNotIn(FieldSpotQuantity, vs...))
}

// SpotQuantityGT applies the GT predicate on the "spot_quantity" field.
func SpotQuantityGT(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldGT(FieldSpotQuantity, v))
}

// SpotQuantityGTE applies the GTE predicate on the "spot_quantity" field.
func SpotQuantityGTE(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldGTE(FieldSpotQuantity, v))
}

// SpotQuantityLT applies the LT predicate on the "spot_quantity" field.
func SpotQuantityLT(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldLT(FieldSpotQuantity, v))
}

// SpotQuantityLTE applies the LTE predicate on the "spot_quantity" field.
func SpotQuantityLTE(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldLTE(FieldSpotQuantity, v))
}

// SpotQuantityIsNil applies the IsNil predicate on the "spot_quantity" field.
func SpotQuantityIsNil() predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldIsNull(FieldSpotQuantity))
}

// SpotQuantityNotNil applies the NotNil predicate on the "spot_quantity" field.
func SpotQuantityNotNil() predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNotNull(FieldSpotQuantity))
}

// LockedEQ applies the EQ predicate on the "locked" field.
func LockedEQ(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEQ(FieldLocked, v))
}

// LockedNEQ applies the NEQ predicate on the "locked" field.
func LockedNEQ(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNEQ(FieldLocked, v))
}

// LockedIn applies the In predicate on the "locked" field.
func LockedIn(vs ...decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldIn(FieldLocked, vs...))
}

// LockedNotIn applies the NotIn predicate on the "locked" field.
func LockedNotIn(vs ...decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNotIn(FieldLocked, vs...))
}

// LockedGT applies the GT predicate on the "locked" field.
func LockedGT(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldGT(FieldLocked, v))
}

// LockedGTE applies the GTE predicate on the "locked" field.
func LockedGTE(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldGTE(FieldLocked, v))
}

// LockedLT applies the LT predicate on the "locked" field.
func LockedLT(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldLT(FieldLocked, v))
}

// LockedLTE applies the LTE predicate on the "locked" field.
func LockedLTE(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldLTE(FieldLocked, v))
}

// LockedIsNil applies the IsNil predicate on the "locked" field.
func LockedIsNil() predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldIsNull(FieldLocked))
}

// LockedNotNil applies the NotNil predicate on the "locked" field.
func LockedNotNil() predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNotNull(FieldLocked))
}

// InServiceEQ applies the EQ predicate on the "in_service" field.
func InServiceEQ(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEQ(FieldInService, v))
}

// InServiceNEQ applies the NEQ predicate on the "in_service" field.
func InServiceNEQ(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNEQ(FieldInService, v))
}

// InServiceIn applies the In predicate on the "in_service" field.
func InServiceIn(vs ...decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldIn(FieldInService, vs...))
}

// InServiceNotIn applies the NotIn predicate on the "in_service" field.
func InServiceNotIn(vs ...decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNotIn(FieldInService, vs...))
}

// InServiceGT applies the GT predicate on the "in_service" field.
func InServiceGT(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldGT(FieldInService, v))
}

// InServiceGTE applies the GTE predicate on the "in_service" field.
func InServiceGTE(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldGTE(FieldInService, v))
}

// InServiceLT applies the LT predicate on the "in_service" field.
func InServiceLT(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldLT(FieldInService, v))
}

// InServiceLTE applies the LTE predicate on the "in_service" field.
func InServiceLTE(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldLTE(FieldInService, v))
}

// InServiceIsNil applies the IsNil predicate on the "in_service" field.
func InServiceIsNil() predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldIsNull(FieldInService))
}

// InServiceNotNil applies the NotNil predicate on the "in_service" field.
func InServiceNotNil() predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNotNull(FieldInService))
}

// WaitStartEQ applies the EQ predicate on the "wait_start" field.
func WaitStartEQ(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEQ(FieldWaitStart, v))
}

// WaitStartNEQ applies the NEQ predicate on the "wait_start" field.
func WaitStartNEQ(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNEQ(FieldWaitStart, v))
}

// WaitStartIn applies the In predicate on the "wait_start" field.
func WaitStartIn(vs ...decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldIn(FieldWaitStart, vs...))
}

// WaitStartNotIn applies the NotIn predicate on the "wait_start" field.
func WaitStartNotIn(vs ...decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNotIn(FieldWaitStart, vs...))
}

// WaitStartGT applies the GT predicate on the "wait_start" field.
func WaitStartGT(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldGT(FieldWaitStart, v))
}

// WaitStartGTE applies the GTE predicate on the "wait_start" field.
func WaitStartGTE(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldGTE(FieldWaitStart, v))
}

// WaitStartLT applies the LT predicate on the "wait_start" field.
func WaitStartLT(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldLT(FieldWaitStart, v))
}

// WaitStartLTE applies the LTE predicate on the "wait_start" field.
func WaitStartLTE(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldLTE(FieldWaitStart, v))
}

// WaitStartIsNil applies the IsNil predicate on the "wait_start" field.
func WaitStartIsNil() predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldIsNull(FieldWaitStart))
}

// WaitStartNotNil applies the NotNil predicate on the "wait_start" field.
func WaitStartNotNil() predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNotNull(FieldWaitStart))
}

// SoldEQ applies the EQ predicate on the "sold" field.
func SoldEQ(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEQ(FieldSold, v))
}

// SoldNEQ applies the NEQ predicate on the "sold" field.
func SoldNEQ(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNEQ(FieldSold, v))
}

// SoldIn applies the In predicate on the "sold" field.
func SoldIn(vs ...decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldIn(FieldSold, vs...))
}

// SoldNotIn applies the NotIn predicate on the "sold" field.
func SoldNotIn(vs ...decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNotIn(FieldSold, vs...))
}

// SoldGT applies the GT predicate on the "sold" field.
func SoldGT(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldGT(FieldSold, v))
}

// SoldGTE applies the GTE predicate on the "sold" field.
func SoldGTE(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldGTE(FieldSold, v))
}

// SoldLT applies the LT predicate on the "sold" field.
func SoldLT(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldLT(FieldSold, v))
}

// SoldLTE applies the LTE predicate on the "sold" field.
func SoldLTE(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldLTE(FieldSold, v))
}

// SoldIsNil applies the IsNil predicate on the "sold" field.
func SoldIsNil() predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldIsNull(FieldSold))
}

// SoldNotNil applies the NotNil predicate on the "sold" field.
func SoldNotNil() predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNotNull(FieldSold))
}

// AppReservedEQ applies the EQ predicate on the "app_reserved" field.
func AppReservedEQ(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEQ(FieldAppReserved, v))
}

// AppReservedNEQ applies the NEQ predicate on the "app_reserved" field.
func AppReservedNEQ(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNEQ(FieldAppReserved, v))
}

// AppReservedIn applies the In predicate on the "app_reserved" field.
func AppReservedIn(vs ...decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldIn(FieldAppReserved, vs...))
}

// AppReservedNotIn applies the NotIn predicate on the "app_reserved" field.
func AppReservedNotIn(vs ...decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNotIn(FieldAppReserved, vs...))
}

// AppReservedGT applies the GT predicate on the "app_reserved" field.
func AppReservedGT(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldGT(FieldAppReserved, v))
}

// AppReservedGTE applies the GTE predicate on the "app_reserved" field.
func AppReservedGTE(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldGTE(FieldAppReserved, v))
}

// AppReservedLT applies the LT predicate on the "app_reserved" field.
func AppReservedLT(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldLT(FieldAppReserved, v))
}

// AppReservedLTE applies the LTE predicate on the "app_reserved" field.
func AppReservedLTE(v decimal.Decimal) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldLTE(FieldAppReserved, v))
}

// AppReservedIsNil applies the IsNil predicate on the "app_reserved" field.
func AppReservedIsNil() predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldIsNull(FieldAppReserved))
}

// AppReservedNotNil applies the NotNil predicate on the "app_reserved" field.
func AppReservedNotNil() predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNotNull(FieldAppReserved))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldHasSuffix(FieldState, v))
}

// StateIsNil applies the IsNil predicate on the "state" field.
func StateIsNil() predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldIsNull(FieldState))
}

// StateNotNil applies the NotNil predicate on the "state" field.
func StateNotNil() predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldNotNull(FieldState))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.FieldContainsFold(FieldState, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MiningGoodStock) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MiningGoodStock) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MiningGoodStock) predicate.MiningGoodStock {
	return predicate.MiningGoodStock(sql.NotPredicates(p))
}

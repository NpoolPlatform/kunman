// Code generated by ent, DO NOT EDIT.

package mininggoodstock

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the mininggoodstock type in the database.
	Label = "mining_good_stock"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldGoodStockID holds the string denoting the good_stock_id field in the database.
	FieldGoodStockID = "good_stock_id"
	// FieldPoolRootUserID holds the string denoting the pool_root_user_id field in the database.
	FieldPoolRootUserID = "pool_root_user_id"
	// FieldPoolGoodUserID holds the string denoting the pool_good_user_id field in the database.
	FieldPoolGoodUserID = "pool_good_user_id"
	// FieldTotal holds the string denoting the total field in the database.
	FieldTotal = "total"
	// FieldSpotQuantity holds the string denoting the spot_quantity field in the database.
	FieldSpotQuantity = "spot_quantity"
	// FieldLocked holds the string denoting the locked field in the database.
	FieldLocked = "locked"
	// FieldInService holds the string denoting the in_service field in the database.
	FieldInService = "in_service"
	// FieldWaitStart holds the string denoting the wait_start field in the database.
	FieldWaitStart = "wait_start"
	// FieldSold holds the string denoting the sold field in the database.
	FieldSold = "sold"
	// FieldAppReserved holds the string denoting the app_reserved field in the database.
	FieldAppReserved = "app_reserved"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// Table holds the table name of the mininggoodstock in the database.
	Table = "mining_good_stocks"
)

// Columns holds all SQL columns for mininggoodstock fields.
var Columns = []string{
	FieldID,
	FieldEntID,
	FieldGoodStockID,
	FieldPoolRootUserID,
	FieldPoolGoodUserID,
	FieldTotal,
	FieldSpotQuantity,
	FieldLocked,
	FieldInService,
	FieldWaitStart,
	FieldSold,
	FieldAppReserved,
	FieldState,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultGoodStockID holds the default value on creation for the "good_stock_id" field.
	DefaultGoodStockID func() uuid.UUID
	// DefaultPoolRootUserID holds the default value on creation for the "pool_root_user_id" field.
	DefaultPoolRootUserID func() uuid.UUID
	// DefaultPoolGoodUserID holds the default value on creation for the "pool_good_user_id" field.
	DefaultPoolGoodUserID func() uuid.UUID
	// DefaultTotal holds the default value on creation for the "total" field.
	DefaultTotal decimal.Decimal
	// DefaultSpotQuantity holds the default value on creation for the "spot_quantity" field.
	DefaultSpotQuantity decimal.Decimal
	// DefaultLocked holds the default value on creation for the "locked" field.
	DefaultLocked decimal.Decimal
	// DefaultInService holds the default value on creation for the "in_service" field.
	DefaultInService decimal.Decimal
	// DefaultWaitStart holds the default value on creation for the "wait_start" field.
	DefaultWaitStart decimal.Decimal
	// DefaultSold holds the default value on creation for the "sold" field.
	DefaultSold decimal.Decimal
	// DefaultAppReserved holds the default value on creation for the "app_reserved" field.
	DefaultAppReserved decimal.Decimal
	// DefaultState holds the default value on creation for the "state" field.
	DefaultState string
)

// OrderOption defines the ordering options for the MiningGoodStock queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByGoodStockID orders the results by the good_stock_id field.
func ByGoodStockID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodStockID, opts...).ToFunc()
}

// ByPoolRootUserID orders the results by the pool_root_user_id field.
func ByPoolRootUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPoolRootUserID, opts...).ToFunc()
}

// ByPoolGoodUserID orders the results by the pool_good_user_id field.
func ByPoolGoodUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPoolGoodUserID, opts...).ToFunc()
}

// ByTotal orders the results by the total field.
func ByTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotal, opts...).ToFunc()
}

// BySpotQuantity orders the results by the spot_quantity field.
func BySpotQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpotQuantity, opts...).ToFunc()
}

// ByLocked orders the results by the locked field.
func ByLocked(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocked, opts...).ToFunc()
}

// ByInService orders the results by the in_service field.
func ByInService(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInService, opts...).ToFunc()
}

// ByWaitStart orders the results by the wait_start field.
func ByWaitStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWaitStart, opts...).ToFunc()
}

// BySold orders the results by the sold field.
func BySold(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSold, opts...).ToFunc()
}

// ByAppReserved orders the results by the app_reserved field.
func ByAppReserved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppReserved, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

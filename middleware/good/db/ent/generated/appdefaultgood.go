// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appdefaultgood"
	"github.com/google/uuid"
)

// AppDefaultGood is the model entity for the AppDefaultGood schema.
type AppDefaultGood struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppGoodID holds the value of the "app_good_id" field.
	AppGoodID uuid.UUID `json:"app_good_id,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID   uuid.UUID `json:"coin_type_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppDefaultGood) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appdefaultgood.FieldID:
			values[i] = new(sql.NullInt64)
		case appdefaultgood.FieldEntID, appdefaultgood.FieldAppGoodID, appdefaultgood.FieldCoinTypeID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppDefaultGood fields.
func (adg *AppDefaultGood) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appdefaultgood.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			adg.ID = uint32(value.Int64)
		case appdefaultgood.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				adg.EntID = *value
			}
		case appdefaultgood.FieldAppGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_good_id", values[i])
			} else if value != nil {
				adg.AppGoodID = *value
			}
		case appdefaultgood.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				adg.CoinTypeID = *value
			}
		default:
			adg.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppDefaultGood.
// This includes values selected through modifiers, order, etc.
func (adg *AppDefaultGood) Value(name string) (ent.Value, error) {
	return adg.selectValues.Get(name)
}

// Update returns a builder for updating this AppDefaultGood.
// Note that you need to call AppDefaultGood.Unwrap() before calling this method if this AppDefaultGood
// was returned from a transaction, and the transaction was committed or rolled back.
func (adg *AppDefaultGood) Update() *AppDefaultGoodUpdateOne {
	return NewAppDefaultGoodClient(adg.config).UpdateOne(adg)
}

// Unwrap unwraps the AppDefaultGood entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (adg *AppDefaultGood) Unwrap() *AppDefaultGood {
	_tx, ok := adg.config.driver.(*txDriver)
	if !ok {
		panic("generated: AppDefaultGood is not a transactional entity")
	}
	adg.config.driver = _tx.drv
	return adg
}

// String implements the fmt.Stringer.
func (adg *AppDefaultGood) String() string {
	var builder strings.Builder
	builder.WriteString("AppDefaultGood(")
	builder.WriteString(fmt.Sprintf("id=%v, ", adg.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", adg.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_good_id=")
	builder.WriteString(fmt.Sprintf("%v", adg.AppGoodID))
	builder.WriteString(", ")
	builder.WriteString("coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", adg.CoinTypeID))
	builder.WriteByte(')')
	return builder.String()
}

// AppDefaultGoods is a parsable slice of AppDefaultGood.
type AppDefaultGoods []*AppDefaultGood

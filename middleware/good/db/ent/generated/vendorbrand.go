// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/vendorbrand"
	"github.com/google/uuid"
)

// VendorBrand is the model entity for the VendorBrand schema.
type VendorBrand struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Logo holds the value of the "logo" field.
	Logo         string `json:"logo,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VendorBrand) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vendorbrand.FieldID, vendorbrand.FieldCreatedAt, vendorbrand.FieldUpdatedAt, vendorbrand.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case vendorbrand.FieldName, vendorbrand.FieldLogo:
			values[i] = new(sql.NullString)
		case vendorbrand.FieldEntID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VendorBrand fields.
func (vb *VendorBrand) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vendorbrand.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vb.ID = uint32(value.Int64)
		case vendorbrand.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				vb.EntID = *value
			}
		case vendorbrand.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vb.CreatedAt = uint32(value.Int64)
			}
		case vendorbrand.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vb.UpdatedAt = uint32(value.Int64)
			}
		case vendorbrand.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				vb.DeletedAt = uint32(value.Int64)
			}
		case vendorbrand.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				vb.Name = value.String
			}
		case vendorbrand.FieldLogo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo", values[i])
			} else if value.Valid {
				vb.Logo = value.String
			}
		default:
			vb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VendorBrand.
// This includes values selected through modifiers, order, etc.
func (vb *VendorBrand) Value(name string) (ent.Value, error) {
	return vb.selectValues.Get(name)
}

// Update returns a builder for updating this VendorBrand.
// Note that you need to call VendorBrand.Unwrap() before calling this method if this VendorBrand
// was returned from a transaction, and the transaction was committed or rolled back.
func (vb *VendorBrand) Update() *VendorBrandUpdateOne {
	return NewVendorBrandClient(vb.config).UpdateOne(vb)
}

// Unwrap unwraps the VendorBrand entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vb *VendorBrand) Unwrap() *VendorBrand {
	_tx, ok := vb.config.driver.(*txDriver)
	if !ok {
		panic("generated: VendorBrand is not a transactional entity")
	}
	vb.config.driver = _tx.drv
	return vb
}

// String implements the fmt.Stringer.
func (vb *VendorBrand) String() string {
	var builder strings.Builder
	builder.WriteString("VendorBrand(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vb.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", vb.EntID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", vb.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", vb.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", vb.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(vb.Name)
	builder.WriteString(", ")
	builder.WriteString("logo=")
	builder.WriteString(vb.Logo)
	builder.WriteByte(')')
	return builder.String()
}

// VendorBrands is a parsable slice of VendorBrand.
type VendorBrands []*VendorBrand

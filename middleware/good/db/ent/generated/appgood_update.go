// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appgood"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppGoodUpdate is the builder for updating AppGood entities.
type AppGoodUpdate struct {
	config
	hooks     []Hook
	mutation  *AppGoodMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppGoodUpdate builder.
func (agu *AppGoodUpdate) Where(ps ...predicate.AppGood) *AppGoodUpdate {
	agu.mutation.Where(ps...)
	return agu
}

// SetEntID sets the "ent_id" field.
func (agu *AppGoodUpdate) SetEntID(u uuid.UUID) *AppGoodUpdate {
	agu.mutation.SetEntID(u)
	return agu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableEntID(u *uuid.UUID) *AppGoodUpdate {
	if u != nil {
		agu.SetEntID(*u)
	}
	return agu
}

// SetAppID sets the "app_id" field.
func (agu *AppGoodUpdate) SetAppID(u uuid.UUID) *AppGoodUpdate {
	agu.mutation.SetAppID(u)
	return agu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableAppID(u *uuid.UUID) *AppGoodUpdate {
	if u != nil {
		agu.SetAppID(*u)
	}
	return agu
}

// SetGoodID sets the "good_id" field.
func (agu *AppGoodUpdate) SetGoodID(u uuid.UUID) *AppGoodUpdate {
	agu.mutation.SetGoodID(u)
	return agu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableGoodID(u *uuid.UUID) *AppGoodUpdate {
	if u != nil {
		agu.SetGoodID(*u)
	}
	return agu
}

// SetOnline sets the "online" field.
func (agu *AppGoodUpdate) SetOnline(b bool) *AppGoodUpdate {
	agu.mutation.SetOnline(b)
	return agu
}

// SetNillableOnline sets the "online" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableOnline(b *bool) *AppGoodUpdate {
	if b != nil {
		agu.SetOnline(*b)
	}
	return agu
}

// ClearOnline clears the value of the "online" field.
func (agu *AppGoodUpdate) ClearOnline() *AppGoodUpdate {
	agu.mutation.ClearOnline()
	return agu
}

// SetVisible sets the "visible" field.
func (agu *AppGoodUpdate) SetVisible(b bool) *AppGoodUpdate {
	agu.mutation.SetVisible(b)
	return agu
}

// SetNillableVisible sets the "visible" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableVisible(b *bool) *AppGoodUpdate {
	if b != nil {
		agu.SetVisible(*b)
	}
	return agu
}

// ClearVisible clears the value of the "visible" field.
func (agu *AppGoodUpdate) ClearVisible() *AppGoodUpdate {
	agu.mutation.ClearVisible()
	return agu
}

// SetGoodName sets the "good_name" field.
func (agu *AppGoodUpdate) SetGoodName(s string) *AppGoodUpdate {
	agu.mutation.SetGoodName(s)
	return agu
}

// SetNillableGoodName sets the "good_name" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableGoodName(s *string) *AppGoodUpdate {
	if s != nil {
		agu.SetGoodName(*s)
	}
	return agu
}

// ClearGoodName clears the value of the "good_name" field.
func (agu *AppGoodUpdate) ClearGoodName() *AppGoodUpdate {
	agu.mutation.ClearGoodName()
	return agu
}

// SetUnitPrice sets the "unit_price" field.
func (agu *AppGoodUpdate) SetUnitPrice(d decimal.Decimal) *AppGoodUpdate {
	agu.mutation.SetUnitPrice(d)
	return agu
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableUnitPrice(d *decimal.Decimal) *AppGoodUpdate {
	if d != nil {
		agu.SetUnitPrice(*d)
	}
	return agu
}

// ClearUnitPrice clears the value of the "unit_price" field.
func (agu *AppGoodUpdate) ClearUnitPrice() *AppGoodUpdate {
	agu.mutation.ClearUnitPrice()
	return agu
}

// SetPackagePrice sets the "package_price" field.
func (agu *AppGoodUpdate) SetPackagePrice(d decimal.Decimal) *AppGoodUpdate {
	agu.mutation.SetPackagePrice(d)
	return agu
}

// SetNillablePackagePrice sets the "package_price" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillablePackagePrice(d *decimal.Decimal) *AppGoodUpdate {
	if d != nil {
		agu.SetPackagePrice(*d)
	}
	return agu
}

// ClearPackagePrice clears the value of the "package_price" field.
func (agu *AppGoodUpdate) ClearPackagePrice() *AppGoodUpdate {
	agu.mutation.ClearPackagePrice()
	return agu
}

// SetDisplayIndex sets the "display_index" field.
func (agu *AppGoodUpdate) SetDisplayIndex(i int32) *AppGoodUpdate {
	agu.mutation.ResetDisplayIndex()
	agu.mutation.SetDisplayIndex(i)
	return agu
}

// SetNillableDisplayIndex sets the "display_index" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableDisplayIndex(i *int32) *AppGoodUpdate {
	if i != nil {
		agu.SetDisplayIndex(*i)
	}
	return agu
}

// AddDisplayIndex adds i to the "display_index" field.
func (agu *AppGoodUpdate) AddDisplayIndex(i int32) *AppGoodUpdate {
	agu.mutation.AddDisplayIndex(i)
	return agu
}

// ClearDisplayIndex clears the value of the "display_index" field.
func (agu *AppGoodUpdate) ClearDisplayIndex() *AppGoodUpdate {
	agu.mutation.ClearDisplayIndex()
	return agu
}

// SetSaleStartAt sets the "sale_start_at" field.
func (agu *AppGoodUpdate) SetSaleStartAt(u uint32) *AppGoodUpdate {
	agu.mutation.ResetSaleStartAt()
	agu.mutation.SetSaleStartAt(u)
	return agu
}

// SetNillableSaleStartAt sets the "sale_start_at" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableSaleStartAt(u *uint32) *AppGoodUpdate {
	if u != nil {
		agu.SetSaleStartAt(*u)
	}
	return agu
}

// AddSaleStartAt adds u to the "sale_start_at" field.
func (agu *AppGoodUpdate) AddSaleStartAt(u int32) *AppGoodUpdate {
	agu.mutation.AddSaleStartAt(u)
	return agu
}

// ClearSaleStartAt clears the value of the "sale_start_at" field.
func (agu *AppGoodUpdate) ClearSaleStartAt() *AppGoodUpdate {
	agu.mutation.ClearSaleStartAt()
	return agu
}

// SetSaleEndAt sets the "sale_end_at" field.
func (agu *AppGoodUpdate) SetSaleEndAt(u uint32) *AppGoodUpdate {
	agu.mutation.ResetSaleEndAt()
	agu.mutation.SetSaleEndAt(u)
	return agu
}

// SetNillableSaleEndAt sets the "sale_end_at" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableSaleEndAt(u *uint32) *AppGoodUpdate {
	if u != nil {
		agu.SetSaleEndAt(*u)
	}
	return agu
}

// AddSaleEndAt adds u to the "sale_end_at" field.
func (agu *AppGoodUpdate) AddSaleEndAt(u int32) *AppGoodUpdate {
	agu.mutation.AddSaleEndAt(u)
	return agu
}

// ClearSaleEndAt clears the value of the "sale_end_at" field.
func (agu *AppGoodUpdate) ClearSaleEndAt() *AppGoodUpdate {
	agu.mutation.ClearSaleEndAt()
	return agu
}

// SetServiceStartAt sets the "service_start_at" field.
func (agu *AppGoodUpdate) SetServiceStartAt(u uint32) *AppGoodUpdate {
	agu.mutation.ResetServiceStartAt()
	agu.mutation.SetServiceStartAt(u)
	return agu
}

// SetNillableServiceStartAt sets the "service_start_at" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableServiceStartAt(u *uint32) *AppGoodUpdate {
	if u != nil {
		agu.SetServiceStartAt(*u)
	}
	return agu
}

// AddServiceStartAt adds u to the "service_start_at" field.
func (agu *AppGoodUpdate) AddServiceStartAt(u int32) *AppGoodUpdate {
	agu.mutation.AddServiceStartAt(u)
	return agu
}

// ClearServiceStartAt clears the value of the "service_start_at" field.
func (agu *AppGoodUpdate) ClearServiceStartAt() *AppGoodUpdate {
	agu.mutation.ClearServiceStartAt()
	return agu
}

// SetTechnicalFeeRatio sets the "technical_fee_ratio" field.
func (agu *AppGoodUpdate) SetTechnicalFeeRatio(d decimal.Decimal) *AppGoodUpdate {
	agu.mutation.SetTechnicalFeeRatio(d)
	return agu
}

// SetNillableTechnicalFeeRatio sets the "technical_fee_ratio" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableTechnicalFeeRatio(d *decimal.Decimal) *AppGoodUpdate {
	if d != nil {
		agu.SetTechnicalFeeRatio(*d)
	}
	return agu
}

// ClearTechnicalFeeRatio clears the value of the "technical_fee_ratio" field.
func (agu *AppGoodUpdate) ClearTechnicalFeeRatio() *AppGoodUpdate {
	agu.mutation.ClearTechnicalFeeRatio()
	return agu
}

// SetElectricityFeeRatio sets the "electricity_fee_ratio" field.
func (agu *AppGoodUpdate) SetElectricityFeeRatio(d decimal.Decimal) *AppGoodUpdate {
	agu.mutation.SetElectricityFeeRatio(d)
	return agu
}

// SetNillableElectricityFeeRatio sets the "electricity_fee_ratio" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableElectricityFeeRatio(d *decimal.Decimal) *AppGoodUpdate {
	if d != nil {
		agu.SetElectricityFeeRatio(*d)
	}
	return agu
}

// ClearElectricityFeeRatio clears the value of the "electricity_fee_ratio" field.
func (agu *AppGoodUpdate) ClearElectricityFeeRatio() *AppGoodUpdate {
	agu.mutation.ClearElectricityFeeRatio()
	return agu
}

// SetDescriptions sets the "descriptions" field.
func (agu *AppGoodUpdate) SetDescriptions(s []string) *AppGoodUpdate {
	agu.mutation.SetDescriptions(s)
	return agu
}

// AppendDescriptions appends s to the "descriptions" field.
func (agu *AppGoodUpdate) AppendDescriptions(s []string) *AppGoodUpdate {
	agu.mutation.AppendDescriptions(s)
	return agu
}

// ClearDescriptions clears the value of the "descriptions" field.
func (agu *AppGoodUpdate) ClearDescriptions() *AppGoodUpdate {
	agu.mutation.ClearDescriptions()
	return agu
}

// SetGoodBanner sets the "good_banner" field.
func (agu *AppGoodUpdate) SetGoodBanner(s string) *AppGoodUpdate {
	agu.mutation.SetGoodBanner(s)
	return agu
}

// SetNillableGoodBanner sets the "good_banner" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableGoodBanner(s *string) *AppGoodUpdate {
	if s != nil {
		agu.SetGoodBanner(*s)
	}
	return agu
}

// ClearGoodBanner clears the value of the "good_banner" field.
func (agu *AppGoodUpdate) ClearGoodBanner() *AppGoodUpdate {
	agu.mutation.ClearGoodBanner()
	return agu
}

// SetDisplayNames sets the "display_names" field.
func (agu *AppGoodUpdate) SetDisplayNames(s []string) *AppGoodUpdate {
	agu.mutation.SetDisplayNames(s)
	return agu
}

// AppendDisplayNames appends s to the "display_names" field.
func (agu *AppGoodUpdate) AppendDisplayNames(s []string) *AppGoodUpdate {
	agu.mutation.AppendDisplayNames(s)
	return agu
}

// ClearDisplayNames clears the value of the "display_names" field.
func (agu *AppGoodUpdate) ClearDisplayNames() *AppGoodUpdate {
	agu.mutation.ClearDisplayNames()
	return agu
}

// SetEnablePurchase sets the "enable_purchase" field.
func (agu *AppGoodUpdate) SetEnablePurchase(b bool) *AppGoodUpdate {
	agu.mutation.SetEnablePurchase(b)
	return agu
}

// SetNillableEnablePurchase sets the "enable_purchase" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableEnablePurchase(b *bool) *AppGoodUpdate {
	if b != nil {
		agu.SetEnablePurchase(*b)
	}
	return agu
}

// ClearEnablePurchase clears the value of the "enable_purchase" field.
func (agu *AppGoodUpdate) ClearEnablePurchase() *AppGoodUpdate {
	agu.mutation.ClearEnablePurchase()
	return agu
}

// SetEnableProductPage sets the "enable_product_page" field.
func (agu *AppGoodUpdate) SetEnableProductPage(b bool) *AppGoodUpdate {
	agu.mutation.SetEnableProductPage(b)
	return agu
}

// SetNillableEnableProductPage sets the "enable_product_page" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableEnableProductPage(b *bool) *AppGoodUpdate {
	if b != nil {
		agu.SetEnableProductPage(*b)
	}
	return agu
}

// ClearEnableProductPage clears the value of the "enable_product_page" field.
func (agu *AppGoodUpdate) ClearEnableProductPage() *AppGoodUpdate {
	agu.mutation.ClearEnableProductPage()
	return agu
}

// SetCancelMode sets the "cancel_mode" field.
func (agu *AppGoodUpdate) SetCancelMode(s string) *AppGoodUpdate {
	agu.mutation.SetCancelMode(s)
	return agu
}

// SetNillableCancelMode sets the "cancel_mode" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableCancelMode(s *string) *AppGoodUpdate {
	if s != nil {
		agu.SetCancelMode(*s)
	}
	return agu
}

// ClearCancelMode clears the value of the "cancel_mode" field.
func (agu *AppGoodUpdate) ClearCancelMode() *AppGoodUpdate {
	agu.mutation.ClearCancelMode()
	return agu
}

// SetDisplayColors sets the "display_colors" field.
func (agu *AppGoodUpdate) SetDisplayColors(s []string) *AppGoodUpdate {
	agu.mutation.SetDisplayColors(s)
	return agu
}

// AppendDisplayColors appends s to the "display_colors" field.
func (agu *AppGoodUpdate) AppendDisplayColors(s []string) *AppGoodUpdate {
	agu.mutation.AppendDisplayColors(s)
	return agu
}

// ClearDisplayColors clears the value of the "display_colors" field.
func (agu *AppGoodUpdate) ClearDisplayColors() *AppGoodUpdate {
	agu.mutation.ClearDisplayColors()
	return agu
}

// SetCancellableBeforeStart sets the "cancellable_before_start" field.
func (agu *AppGoodUpdate) SetCancellableBeforeStart(u uint32) *AppGoodUpdate {
	agu.mutation.ResetCancellableBeforeStart()
	agu.mutation.SetCancellableBeforeStart(u)
	return agu
}

// SetNillableCancellableBeforeStart sets the "cancellable_before_start" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableCancellableBeforeStart(u *uint32) *AppGoodUpdate {
	if u != nil {
		agu.SetCancellableBeforeStart(*u)
	}
	return agu
}

// AddCancellableBeforeStart adds u to the "cancellable_before_start" field.
func (agu *AppGoodUpdate) AddCancellableBeforeStart(u int32) *AppGoodUpdate {
	agu.mutation.AddCancellableBeforeStart(u)
	return agu
}

// ClearCancellableBeforeStart clears the value of the "cancellable_before_start" field.
func (agu *AppGoodUpdate) ClearCancellableBeforeStart() *AppGoodUpdate {
	agu.mutation.ClearCancellableBeforeStart()
	return agu
}

// SetProductPage sets the "product_page" field.
func (agu *AppGoodUpdate) SetProductPage(s string) *AppGoodUpdate {
	agu.mutation.SetProductPage(s)
	return agu
}

// SetNillableProductPage sets the "product_page" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableProductPage(s *string) *AppGoodUpdate {
	if s != nil {
		agu.SetProductPage(*s)
	}
	return agu
}

// ClearProductPage clears the value of the "product_page" field.
func (agu *AppGoodUpdate) ClearProductPage() *AppGoodUpdate {
	agu.mutation.ClearProductPage()
	return agu
}

// SetEnableSetCommission sets the "enable_set_commission" field.
func (agu *AppGoodUpdate) SetEnableSetCommission(b bool) *AppGoodUpdate {
	agu.mutation.SetEnableSetCommission(b)
	return agu
}

// SetNillableEnableSetCommission sets the "enable_set_commission" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableEnableSetCommission(b *bool) *AppGoodUpdate {
	if b != nil {
		agu.SetEnableSetCommission(*b)
	}
	return agu
}

// ClearEnableSetCommission clears the value of the "enable_set_commission" field.
func (agu *AppGoodUpdate) ClearEnableSetCommission() *AppGoodUpdate {
	agu.mutation.ClearEnableSetCommission()
	return agu
}

// SetPosters sets the "posters" field.
func (agu *AppGoodUpdate) SetPosters(s []string) *AppGoodUpdate {
	agu.mutation.SetPosters(s)
	return agu
}

// AppendPosters appends s to the "posters" field.
func (agu *AppGoodUpdate) AppendPosters(s []string) *AppGoodUpdate {
	agu.mutation.AppendPosters(s)
	return agu
}

// ClearPosters clears the value of the "posters" field.
func (agu *AppGoodUpdate) ClearPosters() *AppGoodUpdate {
	agu.mutation.ClearPosters()
	return agu
}

// SetMinOrderAmount sets the "min_order_amount" field.
func (agu *AppGoodUpdate) SetMinOrderAmount(d decimal.Decimal) *AppGoodUpdate {
	agu.mutation.SetMinOrderAmount(d)
	return agu
}

// SetNillableMinOrderAmount sets the "min_order_amount" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableMinOrderAmount(d *decimal.Decimal) *AppGoodUpdate {
	if d != nil {
		agu.SetMinOrderAmount(*d)
	}
	return agu
}

// ClearMinOrderAmount clears the value of the "min_order_amount" field.
func (agu *AppGoodUpdate) ClearMinOrderAmount() *AppGoodUpdate {
	agu.mutation.ClearMinOrderAmount()
	return agu
}

// SetMaxOrderAmount sets the "max_order_amount" field.
func (agu *AppGoodUpdate) SetMaxOrderAmount(d decimal.Decimal) *AppGoodUpdate {
	agu.mutation.SetMaxOrderAmount(d)
	return agu
}

// SetNillableMaxOrderAmount sets the "max_order_amount" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableMaxOrderAmount(d *decimal.Decimal) *AppGoodUpdate {
	if d != nil {
		agu.SetMaxOrderAmount(*d)
	}
	return agu
}

// ClearMaxOrderAmount clears the value of the "max_order_amount" field.
func (agu *AppGoodUpdate) ClearMaxOrderAmount() *AppGoodUpdate {
	agu.mutation.ClearMaxOrderAmount()
	return agu
}

// SetMaxUserAmount sets the "max_user_amount" field.
func (agu *AppGoodUpdate) SetMaxUserAmount(d decimal.Decimal) *AppGoodUpdate {
	agu.mutation.SetMaxUserAmount(d)
	return agu
}

// SetNillableMaxUserAmount sets the "max_user_amount" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableMaxUserAmount(d *decimal.Decimal) *AppGoodUpdate {
	if d != nil {
		agu.SetMaxUserAmount(*d)
	}
	return agu
}

// ClearMaxUserAmount clears the value of the "max_user_amount" field.
func (agu *AppGoodUpdate) ClearMaxUserAmount() *AppGoodUpdate {
	agu.mutation.ClearMaxUserAmount()
	return agu
}

// SetMinOrderDuration sets the "min_order_duration" field.
func (agu *AppGoodUpdate) SetMinOrderDuration(u uint32) *AppGoodUpdate {
	agu.mutation.ResetMinOrderDuration()
	agu.mutation.SetMinOrderDuration(u)
	return agu
}

// SetNillableMinOrderDuration sets the "min_order_duration" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableMinOrderDuration(u *uint32) *AppGoodUpdate {
	if u != nil {
		agu.SetMinOrderDuration(*u)
	}
	return agu
}

// AddMinOrderDuration adds u to the "min_order_duration" field.
func (agu *AppGoodUpdate) AddMinOrderDuration(u int32) *AppGoodUpdate {
	agu.mutation.AddMinOrderDuration(u)
	return agu
}

// ClearMinOrderDuration clears the value of the "min_order_duration" field.
func (agu *AppGoodUpdate) ClearMinOrderDuration() *AppGoodUpdate {
	agu.mutation.ClearMinOrderDuration()
	return agu
}

// SetMaxOrderDuration sets the "max_order_duration" field.
func (agu *AppGoodUpdate) SetMaxOrderDuration(u uint32) *AppGoodUpdate {
	agu.mutation.ResetMaxOrderDuration()
	agu.mutation.SetMaxOrderDuration(u)
	return agu
}

// SetNillableMaxOrderDuration sets the "max_order_duration" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableMaxOrderDuration(u *uint32) *AppGoodUpdate {
	if u != nil {
		agu.SetMaxOrderDuration(*u)
	}
	return agu
}

// AddMaxOrderDuration adds u to the "max_order_duration" field.
func (agu *AppGoodUpdate) AddMaxOrderDuration(u int32) *AppGoodUpdate {
	agu.mutation.AddMaxOrderDuration(u)
	return agu
}

// ClearMaxOrderDuration clears the value of the "max_order_duration" field.
func (agu *AppGoodUpdate) ClearMaxOrderDuration() *AppGoodUpdate {
	agu.mutation.ClearMaxOrderDuration()
	return agu
}

// SetPackageWithRequireds sets the "package_with_requireds" field.
func (agu *AppGoodUpdate) SetPackageWithRequireds(b bool) *AppGoodUpdate {
	agu.mutation.SetPackageWithRequireds(b)
	return agu
}

// SetNillablePackageWithRequireds sets the "package_with_requireds" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillablePackageWithRequireds(b *bool) *AppGoodUpdate {
	if b != nil {
		agu.SetPackageWithRequireds(*b)
	}
	return agu
}

// ClearPackageWithRequireds clears the value of the "package_with_requireds" field.
func (agu *AppGoodUpdate) ClearPackageWithRequireds() *AppGoodUpdate {
	agu.mutation.ClearPackageWithRequireds()
	return agu
}

// Mutation returns the AppGoodMutation object of the builder.
func (agu *AppGoodUpdate) Mutation() *AppGoodMutation {
	return agu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (agu *AppGoodUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, agu.sqlSave, agu.mutation, agu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (agu *AppGoodUpdate) SaveX(ctx context.Context) int {
	affected, err := agu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (agu *AppGoodUpdate) Exec(ctx context.Context) error {
	_, err := agu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agu *AppGoodUpdate) ExecX(ctx context.Context) {
	if err := agu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (agu *AppGoodUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppGoodUpdate {
	agu.modifiers = append(agu.modifiers, modifiers...)
	return agu
}

func (agu *AppGoodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appgood.Table, appgood.Columns, sqlgraph.NewFieldSpec(appgood.FieldID, field.TypeUint32))
	if ps := agu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agu.mutation.EntID(); ok {
		_spec.SetField(appgood.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := agu.mutation.AppID(); ok {
		_spec.SetField(appgood.FieldAppID, field.TypeUUID, value)
	}
	if value, ok := agu.mutation.GoodID(); ok {
		_spec.SetField(appgood.FieldGoodID, field.TypeUUID, value)
	}
	if value, ok := agu.mutation.Online(); ok {
		_spec.SetField(appgood.FieldOnline, field.TypeBool, value)
	}
	if agu.mutation.OnlineCleared() {
		_spec.ClearField(appgood.FieldOnline, field.TypeBool)
	}
	if value, ok := agu.mutation.Visible(); ok {
		_spec.SetField(appgood.FieldVisible, field.TypeBool, value)
	}
	if agu.mutation.VisibleCleared() {
		_spec.ClearField(appgood.FieldVisible, field.TypeBool)
	}
	if value, ok := agu.mutation.GoodName(); ok {
		_spec.SetField(appgood.FieldGoodName, field.TypeString, value)
	}
	if agu.mutation.GoodNameCleared() {
		_spec.ClearField(appgood.FieldGoodName, field.TypeString)
	}
	if value, ok := agu.mutation.UnitPrice(); ok {
		_spec.SetField(appgood.FieldUnitPrice, field.TypeOther, value)
	}
	if agu.mutation.UnitPriceCleared() {
		_spec.ClearField(appgood.FieldUnitPrice, field.TypeOther)
	}
	if value, ok := agu.mutation.PackagePrice(); ok {
		_spec.SetField(appgood.FieldPackagePrice, field.TypeOther, value)
	}
	if agu.mutation.PackagePriceCleared() {
		_spec.ClearField(appgood.FieldPackagePrice, field.TypeOther)
	}
	if value, ok := agu.mutation.DisplayIndex(); ok {
		_spec.SetField(appgood.FieldDisplayIndex, field.TypeInt32, value)
	}
	if value, ok := agu.mutation.AddedDisplayIndex(); ok {
		_spec.AddField(appgood.FieldDisplayIndex, field.TypeInt32, value)
	}
	if agu.mutation.DisplayIndexCleared() {
		_spec.ClearField(appgood.FieldDisplayIndex, field.TypeInt32)
	}
	if value, ok := agu.mutation.SaleStartAt(); ok {
		_spec.SetField(appgood.FieldSaleStartAt, field.TypeUint32, value)
	}
	if value, ok := agu.mutation.AddedSaleStartAt(); ok {
		_spec.AddField(appgood.FieldSaleStartAt, field.TypeUint32, value)
	}
	if agu.mutation.SaleStartAtCleared() {
		_spec.ClearField(appgood.FieldSaleStartAt, field.TypeUint32)
	}
	if value, ok := agu.mutation.SaleEndAt(); ok {
		_spec.SetField(appgood.FieldSaleEndAt, field.TypeUint32, value)
	}
	if value, ok := agu.mutation.AddedSaleEndAt(); ok {
		_spec.AddField(appgood.FieldSaleEndAt, field.TypeUint32, value)
	}
	if agu.mutation.SaleEndAtCleared() {
		_spec.ClearField(appgood.FieldSaleEndAt, field.TypeUint32)
	}
	if value, ok := agu.mutation.ServiceStartAt(); ok {
		_spec.SetField(appgood.FieldServiceStartAt, field.TypeUint32, value)
	}
	if value, ok := agu.mutation.AddedServiceStartAt(); ok {
		_spec.AddField(appgood.FieldServiceStartAt, field.TypeUint32, value)
	}
	if agu.mutation.ServiceStartAtCleared() {
		_spec.ClearField(appgood.FieldServiceStartAt, field.TypeUint32)
	}
	if value, ok := agu.mutation.TechnicalFeeRatio(); ok {
		_spec.SetField(appgood.FieldTechnicalFeeRatio, field.TypeOther, value)
	}
	if agu.mutation.TechnicalFeeRatioCleared() {
		_spec.ClearField(appgood.FieldTechnicalFeeRatio, field.TypeOther)
	}
	if value, ok := agu.mutation.ElectricityFeeRatio(); ok {
		_spec.SetField(appgood.FieldElectricityFeeRatio, field.TypeOther, value)
	}
	if agu.mutation.ElectricityFeeRatioCleared() {
		_spec.ClearField(appgood.FieldElectricityFeeRatio, field.TypeOther)
	}
	if value, ok := agu.mutation.Descriptions(); ok {
		_spec.SetField(appgood.FieldDescriptions, field.TypeJSON, value)
	}
	if value, ok := agu.mutation.AppendedDescriptions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, appgood.FieldDescriptions, value)
		})
	}
	if agu.mutation.DescriptionsCleared() {
		_spec.ClearField(appgood.FieldDescriptions, field.TypeJSON)
	}
	if value, ok := agu.mutation.GoodBanner(); ok {
		_spec.SetField(appgood.FieldGoodBanner, field.TypeString, value)
	}
	if agu.mutation.GoodBannerCleared() {
		_spec.ClearField(appgood.FieldGoodBanner, field.TypeString)
	}
	if value, ok := agu.mutation.DisplayNames(); ok {
		_spec.SetField(appgood.FieldDisplayNames, field.TypeJSON, value)
	}
	if value, ok := agu.mutation.AppendedDisplayNames(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, appgood.FieldDisplayNames, value)
		})
	}
	if agu.mutation.DisplayNamesCleared() {
		_spec.ClearField(appgood.FieldDisplayNames, field.TypeJSON)
	}
	if value, ok := agu.mutation.EnablePurchase(); ok {
		_spec.SetField(appgood.FieldEnablePurchase, field.TypeBool, value)
	}
	if agu.mutation.EnablePurchaseCleared() {
		_spec.ClearField(appgood.FieldEnablePurchase, field.TypeBool)
	}
	if value, ok := agu.mutation.EnableProductPage(); ok {
		_spec.SetField(appgood.FieldEnableProductPage, field.TypeBool, value)
	}
	if agu.mutation.EnableProductPageCleared() {
		_spec.ClearField(appgood.FieldEnableProductPage, field.TypeBool)
	}
	if value, ok := agu.mutation.CancelMode(); ok {
		_spec.SetField(appgood.FieldCancelMode, field.TypeString, value)
	}
	if agu.mutation.CancelModeCleared() {
		_spec.ClearField(appgood.FieldCancelMode, field.TypeString)
	}
	if value, ok := agu.mutation.DisplayColors(); ok {
		_spec.SetField(appgood.FieldDisplayColors, field.TypeJSON, value)
	}
	if value, ok := agu.mutation.AppendedDisplayColors(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, appgood.FieldDisplayColors, value)
		})
	}
	if agu.mutation.DisplayColorsCleared() {
		_spec.ClearField(appgood.FieldDisplayColors, field.TypeJSON)
	}
	if value, ok := agu.mutation.CancellableBeforeStart(); ok {
		_spec.SetField(appgood.FieldCancellableBeforeStart, field.TypeUint32, value)
	}
	if value, ok := agu.mutation.AddedCancellableBeforeStart(); ok {
		_spec.AddField(appgood.FieldCancellableBeforeStart, field.TypeUint32, value)
	}
	if agu.mutation.CancellableBeforeStartCleared() {
		_spec.ClearField(appgood.FieldCancellableBeforeStart, field.TypeUint32)
	}
	if value, ok := agu.mutation.ProductPage(); ok {
		_spec.SetField(appgood.FieldProductPage, field.TypeString, value)
	}
	if agu.mutation.ProductPageCleared() {
		_spec.ClearField(appgood.FieldProductPage, field.TypeString)
	}
	if value, ok := agu.mutation.EnableSetCommission(); ok {
		_spec.SetField(appgood.FieldEnableSetCommission, field.TypeBool, value)
	}
	if agu.mutation.EnableSetCommissionCleared() {
		_spec.ClearField(appgood.FieldEnableSetCommission, field.TypeBool)
	}
	if value, ok := agu.mutation.Posters(); ok {
		_spec.SetField(appgood.FieldPosters, field.TypeJSON, value)
	}
	if value, ok := agu.mutation.AppendedPosters(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, appgood.FieldPosters, value)
		})
	}
	if agu.mutation.PostersCleared() {
		_spec.ClearField(appgood.FieldPosters, field.TypeJSON)
	}
	if value, ok := agu.mutation.MinOrderAmount(); ok {
		_spec.SetField(appgood.FieldMinOrderAmount, field.TypeOther, value)
	}
	if agu.mutation.MinOrderAmountCleared() {
		_spec.ClearField(appgood.FieldMinOrderAmount, field.TypeOther)
	}
	if value, ok := agu.mutation.MaxOrderAmount(); ok {
		_spec.SetField(appgood.FieldMaxOrderAmount, field.TypeOther, value)
	}
	if agu.mutation.MaxOrderAmountCleared() {
		_spec.ClearField(appgood.FieldMaxOrderAmount, field.TypeOther)
	}
	if value, ok := agu.mutation.MaxUserAmount(); ok {
		_spec.SetField(appgood.FieldMaxUserAmount, field.TypeOther, value)
	}
	if agu.mutation.MaxUserAmountCleared() {
		_spec.ClearField(appgood.FieldMaxUserAmount, field.TypeOther)
	}
	if value, ok := agu.mutation.MinOrderDuration(); ok {
		_spec.SetField(appgood.FieldMinOrderDuration, field.TypeUint32, value)
	}
	if value, ok := agu.mutation.AddedMinOrderDuration(); ok {
		_spec.AddField(appgood.FieldMinOrderDuration, field.TypeUint32, value)
	}
	if agu.mutation.MinOrderDurationCleared() {
		_spec.ClearField(appgood.FieldMinOrderDuration, field.TypeUint32)
	}
	if value, ok := agu.mutation.MaxOrderDuration(); ok {
		_spec.SetField(appgood.FieldMaxOrderDuration, field.TypeUint32, value)
	}
	if value, ok := agu.mutation.AddedMaxOrderDuration(); ok {
		_spec.AddField(appgood.FieldMaxOrderDuration, field.TypeUint32, value)
	}
	if agu.mutation.MaxOrderDurationCleared() {
		_spec.ClearField(appgood.FieldMaxOrderDuration, field.TypeUint32)
	}
	if value, ok := agu.mutation.PackageWithRequireds(); ok {
		_spec.SetField(appgood.FieldPackageWithRequireds, field.TypeBool, value)
	}
	if agu.mutation.PackageWithRequiredsCleared() {
		_spec.ClearField(appgood.FieldPackageWithRequireds, field.TypeBool)
	}
	_spec.AddModifiers(agu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, agu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appgood.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	agu.mutation.done = true
	return n, nil
}

// AppGoodUpdateOne is the builder for updating a single AppGood entity.
type AppGoodUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppGoodMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (aguo *AppGoodUpdateOne) SetEntID(u uuid.UUID) *AppGoodUpdateOne {
	aguo.mutation.SetEntID(u)
	return aguo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableEntID(u *uuid.UUID) *AppGoodUpdateOne {
	if u != nil {
		aguo.SetEntID(*u)
	}
	return aguo
}

// SetAppID sets the "app_id" field.
func (aguo *AppGoodUpdateOne) SetAppID(u uuid.UUID) *AppGoodUpdateOne {
	aguo.mutation.SetAppID(u)
	return aguo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableAppID(u *uuid.UUID) *AppGoodUpdateOne {
	if u != nil {
		aguo.SetAppID(*u)
	}
	return aguo
}

// SetGoodID sets the "good_id" field.
func (aguo *AppGoodUpdateOne) SetGoodID(u uuid.UUID) *AppGoodUpdateOne {
	aguo.mutation.SetGoodID(u)
	return aguo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableGoodID(u *uuid.UUID) *AppGoodUpdateOne {
	if u != nil {
		aguo.SetGoodID(*u)
	}
	return aguo
}

// SetOnline sets the "online" field.
func (aguo *AppGoodUpdateOne) SetOnline(b bool) *AppGoodUpdateOne {
	aguo.mutation.SetOnline(b)
	return aguo
}

// SetNillableOnline sets the "online" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableOnline(b *bool) *AppGoodUpdateOne {
	if b != nil {
		aguo.SetOnline(*b)
	}
	return aguo
}

// ClearOnline clears the value of the "online" field.
func (aguo *AppGoodUpdateOne) ClearOnline() *AppGoodUpdateOne {
	aguo.mutation.ClearOnline()
	return aguo
}

// SetVisible sets the "visible" field.
func (aguo *AppGoodUpdateOne) SetVisible(b bool) *AppGoodUpdateOne {
	aguo.mutation.SetVisible(b)
	return aguo
}

// SetNillableVisible sets the "visible" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableVisible(b *bool) *AppGoodUpdateOne {
	if b != nil {
		aguo.SetVisible(*b)
	}
	return aguo
}

// ClearVisible clears the value of the "visible" field.
func (aguo *AppGoodUpdateOne) ClearVisible() *AppGoodUpdateOne {
	aguo.mutation.ClearVisible()
	return aguo
}

// SetGoodName sets the "good_name" field.
func (aguo *AppGoodUpdateOne) SetGoodName(s string) *AppGoodUpdateOne {
	aguo.mutation.SetGoodName(s)
	return aguo
}

// SetNillableGoodName sets the "good_name" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableGoodName(s *string) *AppGoodUpdateOne {
	if s != nil {
		aguo.SetGoodName(*s)
	}
	return aguo
}

// ClearGoodName clears the value of the "good_name" field.
func (aguo *AppGoodUpdateOne) ClearGoodName() *AppGoodUpdateOne {
	aguo.mutation.ClearGoodName()
	return aguo
}

// SetUnitPrice sets the "unit_price" field.
func (aguo *AppGoodUpdateOne) SetUnitPrice(d decimal.Decimal) *AppGoodUpdateOne {
	aguo.mutation.SetUnitPrice(d)
	return aguo
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableUnitPrice(d *decimal.Decimal) *AppGoodUpdateOne {
	if d != nil {
		aguo.SetUnitPrice(*d)
	}
	return aguo
}

// ClearUnitPrice clears the value of the "unit_price" field.
func (aguo *AppGoodUpdateOne) ClearUnitPrice() *AppGoodUpdateOne {
	aguo.mutation.ClearUnitPrice()
	return aguo
}

// SetPackagePrice sets the "package_price" field.
func (aguo *AppGoodUpdateOne) SetPackagePrice(d decimal.Decimal) *AppGoodUpdateOne {
	aguo.mutation.SetPackagePrice(d)
	return aguo
}

// SetNillablePackagePrice sets the "package_price" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillablePackagePrice(d *decimal.Decimal) *AppGoodUpdateOne {
	if d != nil {
		aguo.SetPackagePrice(*d)
	}
	return aguo
}

// ClearPackagePrice clears the value of the "package_price" field.
func (aguo *AppGoodUpdateOne) ClearPackagePrice() *AppGoodUpdateOne {
	aguo.mutation.ClearPackagePrice()
	return aguo
}

// SetDisplayIndex sets the "display_index" field.
func (aguo *AppGoodUpdateOne) SetDisplayIndex(i int32) *AppGoodUpdateOne {
	aguo.mutation.ResetDisplayIndex()
	aguo.mutation.SetDisplayIndex(i)
	return aguo
}

// SetNillableDisplayIndex sets the "display_index" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableDisplayIndex(i *int32) *AppGoodUpdateOne {
	if i != nil {
		aguo.SetDisplayIndex(*i)
	}
	return aguo
}

// AddDisplayIndex adds i to the "display_index" field.
func (aguo *AppGoodUpdateOne) AddDisplayIndex(i int32) *AppGoodUpdateOne {
	aguo.mutation.AddDisplayIndex(i)
	return aguo
}

// ClearDisplayIndex clears the value of the "display_index" field.
func (aguo *AppGoodUpdateOne) ClearDisplayIndex() *AppGoodUpdateOne {
	aguo.mutation.ClearDisplayIndex()
	return aguo
}

// SetSaleStartAt sets the "sale_start_at" field.
func (aguo *AppGoodUpdateOne) SetSaleStartAt(u uint32) *AppGoodUpdateOne {
	aguo.mutation.ResetSaleStartAt()
	aguo.mutation.SetSaleStartAt(u)
	return aguo
}

// SetNillableSaleStartAt sets the "sale_start_at" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableSaleStartAt(u *uint32) *AppGoodUpdateOne {
	if u != nil {
		aguo.SetSaleStartAt(*u)
	}
	return aguo
}

// AddSaleStartAt adds u to the "sale_start_at" field.
func (aguo *AppGoodUpdateOne) AddSaleStartAt(u int32) *AppGoodUpdateOne {
	aguo.mutation.AddSaleStartAt(u)
	return aguo
}

// ClearSaleStartAt clears the value of the "sale_start_at" field.
func (aguo *AppGoodUpdateOne) ClearSaleStartAt() *AppGoodUpdateOne {
	aguo.mutation.ClearSaleStartAt()
	return aguo
}

// SetSaleEndAt sets the "sale_end_at" field.
func (aguo *AppGoodUpdateOne) SetSaleEndAt(u uint32) *AppGoodUpdateOne {
	aguo.mutation.ResetSaleEndAt()
	aguo.mutation.SetSaleEndAt(u)
	return aguo
}

// SetNillableSaleEndAt sets the "sale_end_at" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableSaleEndAt(u *uint32) *AppGoodUpdateOne {
	if u != nil {
		aguo.SetSaleEndAt(*u)
	}
	return aguo
}

// AddSaleEndAt adds u to the "sale_end_at" field.
func (aguo *AppGoodUpdateOne) AddSaleEndAt(u int32) *AppGoodUpdateOne {
	aguo.mutation.AddSaleEndAt(u)
	return aguo
}

// ClearSaleEndAt clears the value of the "sale_end_at" field.
func (aguo *AppGoodUpdateOne) ClearSaleEndAt() *AppGoodUpdateOne {
	aguo.mutation.ClearSaleEndAt()
	return aguo
}

// SetServiceStartAt sets the "service_start_at" field.
func (aguo *AppGoodUpdateOne) SetServiceStartAt(u uint32) *AppGoodUpdateOne {
	aguo.mutation.ResetServiceStartAt()
	aguo.mutation.SetServiceStartAt(u)
	return aguo
}

// SetNillableServiceStartAt sets the "service_start_at" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableServiceStartAt(u *uint32) *AppGoodUpdateOne {
	if u != nil {
		aguo.SetServiceStartAt(*u)
	}
	return aguo
}

// AddServiceStartAt adds u to the "service_start_at" field.
func (aguo *AppGoodUpdateOne) AddServiceStartAt(u int32) *AppGoodUpdateOne {
	aguo.mutation.AddServiceStartAt(u)
	return aguo
}

// ClearServiceStartAt clears the value of the "service_start_at" field.
func (aguo *AppGoodUpdateOne) ClearServiceStartAt() *AppGoodUpdateOne {
	aguo.mutation.ClearServiceStartAt()
	return aguo
}

// SetTechnicalFeeRatio sets the "technical_fee_ratio" field.
func (aguo *AppGoodUpdateOne) SetTechnicalFeeRatio(d decimal.Decimal) *AppGoodUpdateOne {
	aguo.mutation.SetTechnicalFeeRatio(d)
	return aguo
}

// SetNillableTechnicalFeeRatio sets the "technical_fee_ratio" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableTechnicalFeeRatio(d *decimal.Decimal) *AppGoodUpdateOne {
	if d != nil {
		aguo.SetTechnicalFeeRatio(*d)
	}
	return aguo
}

// ClearTechnicalFeeRatio clears the value of the "technical_fee_ratio" field.
func (aguo *AppGoodUpdateOne) ClearTechnicalFeeRatio() *AppGoodUpdateOne {
	aguo.mutation.ClearTechnicalFeeRatio()
	return aguo
}

// SetElectricityFeeRatio sets the "electricity_fee_ratio" field.
func (aguo *AppGoodUpdateOne) SetElectricityFeeRatio(d decimal.Decimal) *AppGoodUpdateOne {
	aguo.mutation.SetElectricityFeeRatio(d)
	return aguo
}

// SetNillableElectricityFeeRatio sets the "electricity_fee_ratio" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableElectricityFeeRatio(d *decimal.Decimal) *AppGoodUpdateOne {
	if d != nil {
		aguo.SetElectricityFeeRatio(*d)
	}
	return aguo
}

// ClearElectricityFeeRatio clears the value of the "electricity_fee_ratio" field.
func (aguo *AppGoodUpdateOne) ClearElectricityFeeRatio() *AppGoodUpdateOne {
	aguo.mutation.ClearElectricityFeeRatio()
	return aguo
}

// SetDescriptions sets the "descriptions" field.
func (aguo *AppGoodUpdateOne) SetDescriptions(s []string) *AppGoodUpdateOne {
	aguo.mutation.SetDescriptions(s)
	return aguo
}

// AppendDescriptions appends s to the "descriptions" field.
func (aguo *AppGoodUpdateOne) AppendDescriptions(s []string) *AppGoodUpdateOne {
	aguo.mutation.AppendDescriptions(s)
	return aguo
}

// ClearDescriptions clears the value of the "descriptions" field.
func (aguo *AppGoodUpdateOne) ClearDescriptions() *AppGoodUpdateOne {
	aguo.mutation.ClearDescriptions()
	return aguo
}

// SetGoodBanner sets the "good_banner" field.
func (aguo *AppGoodUpdateOne) SetGoodBanner(s string) *AppGoodUpdateOne {
	aguo.mutation.SetGoodBanner(s)
	return aguo
}

// SetNillableGoodBanner sets the "good_banner" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableGoodBanner(s *string) *AppGoodUpdateOne {
	if s != nil {
		aguo.SetGoodBanner(*s)
	}
	return aguo
}

// ClearGoodBanner clears the value of the "good_banner" field.
func (aguo *AppGoodUpdateOne) ClearGoodBanner() *AppGoodUpdateOne {
	aguo.mutation.ClearGoodBanner()
	return aguo
}

// SetDisplayNames sets the "display_names" field.
func (aguo *AppGoodUpdateOne) SetDisplayNames(s []string) *AppGoodUpdateOne {
	aguo.mutation.SetDisplayNames(s)
	return aguo
}

// AppendDisplayNames appends s to the "display_names" field.
func (aguo *AppGoodUpdateOne) AppendDisplayNames(s []string) *AppGoodUpdateOne {
	aguo.mutation.AppendDisplayNames(s)
	return aguo
}

// ClearDisplayNames clears the value of the "display_names" field.
func (aguo *AppGoodUpdateOne) ClearDisplayNames() *AppGoodUpdateOne {
	aguo.mutation.ClearDisplayNames()
	return aguo
}

// SetEnablePurchase sets the "enable_purchase" field.
func (aguo *AppGoodUpdateOne) SetEnablePurchase(b bool) *AppGoodUpdateOne {
	aguo.mutation.SetEnablePurchase(b)
	return aguo
}

// SetNillableEnablePurchase sets the "enable_purchase" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableEnablePurchase(b *bool) *AppGoodUpdateOne {
	if b != nil {
		aguo.SetEnablePurchase(*b)
	}
	return aguo
}

// ClearEnablePurchase clears the value of the "enable_purchase" field.
func (aguo *AppGoodUpdateOne) ClearEnablePurchase() *AppGoodUpdateOne {
	aguo.mutation.ClearEnablePurchase()
	return aguo
}

// SetEnableProductPage sets the "enable_product_page" field.
func (aguo *AppGoodUpdateOne) SetEnableProductPage(b bool) *AppGoodUpdateOne {
	aguo.mutation.SetEnableProductPage(b)
	return aguo
}

// SetNillableEnableProductPage sets the "enable_product_page" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableEnableProductPage(b *bool) *AppGoodUpdateOne {
	if b != nil {
		aguo.SetEnableProductPage(*b)
	}
	return aguo
}

// ClearEnableProductPage clears the value of the "enable_product_page" field.
func (aguo *AppGoodUpdateOne) ClearEnableProductPage() *AppGoodUpdateOne {
	aguo.mutation.ClearEnableProductPage()
	return aguo
}

// SetCancelMode sets the "cancel_mode" field.
func (aguo *AppGoodUpdateOne) SetCancelMode(s string) *AppGoodUpdateOne {
	aguo.mutation.SetCancelMode(s)
	return aguo
}

// SetNillableCancelMode sets the "cancel_mode" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableCancelMode(s *string) *AppGoodUpdateOne {
	if s != nil {
		aguo.SetCancelMode(*s)
	}
	return aguo
}

// ClearCancelMode clears the value of the "cancel_mode" field.
func (aguo *AppGoodUpdateOne) ClearCancelMode() *AppGoodUpdateOne {
	aguo.mutation.ClearCancelMode()
	return aguo
}

// SetDisplayColors sets the "display_colors" field.
func (aguo *AppGoodUpdateOne) SetDisplayColors(s []string) *AppGoodUpdateOne {
	aguo.mutation.SetDisplayColors(s)
	return aguo
}

// AppendDisplayColors appends s to the "display_colors" field.
func (aguo *AppGoodUpdateOne) AppendDisplayColors(s []string) *AppGoodUpdateOne {
	aguo.mutation.AppendDisplayColors(s)
	return aguo
}

// ClearDisplayColors clears the value of the "display_colors" field.
func (aguo *AppGoodUpdateOne) ClearDisplayColors() *AppGoodUpdateOne {
	aguo.mutation.ClearDisplayColors()
	return aguo
}

// SetCancellableBeforeStart sets the "cancellable_before_start" field.
func (aguo *AppGoodUpdateOne) SetCancellableBeforeStart(u uint32) *AppGoodUpdateOne {
	aguo.mutation.ResetCancellableBeforeStart()
	aguo.mutation.SetCancellableBeforeStart(u)
	return aguo
}

// SetNillableCancellableBeforeStart sets the "cancellable_before_start" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableCancellableBeforeStart(u *uint32) *AppGoodUpdateOne {
	if u != nil {
		aguo.SetCancellableBeforeStart(*u)
	}
	return aguo
}

// AddCancellableBeforeStart adds u to the "cancellable_before_start" field.
func (aguo *AppGoodUpdateOne) AddCancellableBeforeStart(u int32) *AppGoodUpdateOne {
	aguo.mutation.AddCancellableBeforeStart(u)
	return aguo
}

// ClearCancellableBeforeStart clears the value of the "cancellable_before_start" field.
func (aguo *AppGoodUpdateOne) ClearCancellableBeforeStart() *AppGoodUpdateOne {
	aguo.mutation.ClearCancellableBeforeStart()
	return aguo
}

// SetProductPage sets the "product_page" field.
func (aguo *AppGoodUpdateOne) SetProductPage(s string) *AppGoodUpdateOne {
	aguo.mutation.SetProductPage(s)
	return aguo
}

// SetNillableProductPage sets the "product_page" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableProductPage(s *string) *AppGoodUpdateOne {
	if s != nil {
		aguo.SetProductPage(*s)
	}
	return aguo
}

// ClearProductPage clears the value of the "product_page" field.
func (aguo *AppGoodUpdateOne) ClearProductPage() *AppGoodUpdateOne {
	aguo.mutation.ClearProductPage()
	return aguo
}

// SetEnableSetCommission sets the "enable_set_commission" field.
func (aguo *AppGoodUpdateOne) SetEnableSetCommission(b bool) *AppGoodUpdateOne {
	aguo.mutation.SetEnableSetCommission(b)
	return aguo
}

// SetNillableEnableSetCommission sets the "enable_set_commission" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableEnableSetCommission(b *bool) *AppGoodUpdateOne {
	if b != nil {
		aguo.SetEnableSetCommission(*b)
	}
	return aguo
}

// ClearEnableSetCommission clears the value of the "enable_set_commission" field.
func (aguo *AppGoodUpdateOne) ClearEnableSetCommission() *AppGoodUpdateOne {
	aguo.mutation.ClearEnableSetCommission()
	return aguo
}

// SetPosters sets the "posters" field.
func (aguo *AppGoodUpdateOne) SetPosters(s []string) *AppGoodUpdateOne {
	aguo.mutation.SetPosters(s)
	return aguo
}

// AppendPosters appends s to the "posters" field.
func (aguo *AppGoodUpdateOne) AppendPosters(s []string) *AppGoodUpdateOne {
	aguo.mutation.AppendPosters(s)
	return aguo
}

// ClearPosters clears the value of the "posters" field.
func (aguo *AppGoodUpdateOne) ClearPosters() *AppGoodUpdateOne {
	aguo.mutation.ClearPosters()
	return aguo
}

// SetMinOrderAmount sets the "min_order_amount" field.
func (aguo *AppGoodUpdateOne) SetMinOrderAmount(d decimal.Decimal) *AppGoodUpdateOne {
	aguo.mutation.SetMinOrderAmount(d)
	return aguo
}

// SetNillableMinOrderAmount sets the "min_order_amount" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableMinOrderAmount(d *decimal.Decimal) *AppGoodUpdateOne {
	if d != nil {
		aguo.SetMinOrderAmount(*d)
	}
	return aguo
}

// ClearMinOrderAmount clears the value of the "min_order_amount" field.
func (aguo *AppGoodUpdateOne) ClearMinOrderAmount() *AppGoodUpdateOne {
	aguo.mutation.ClearMinOrderAmount()
	return aguo
}

// SetMaxOrderAmount sets the "max_order_amount" field.
func (aguo *AppGoodUpdateOne) SetMaxOrderAmount(d decimal.Decimal) *AppGoodUpdateOne {
	aguo.mutation.SetMaxOrderAmount(d)
	return aguo
}

// SetNillableMaxOrderAmount sets the "max_order_amount" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableMaxOrderAmount(d *decimal.Decimal) *AppGoodUpdateOne {
	if d != nil {
		aguo.SetMaxOrderAmount(*d)
	}
	return aguo
}

// ClearMaxOrderAmount clears the value of the "max_order_amount" field.
func (aguo *AppGoodUpdateOne) ClearMaxOrderAmount() *AppGoodUpdateOne {
	aguo.mutation.ClearMaxOrderAmount()
	return aguo
}

// SetMaxUserAmount sets the "max_user_amount" field.
func (aguo *AppGoodUpdateOne) SetMaxUserAmount(d decimal.Decimal) *AppGoodUpdateOne {
	aguo.mutation.SetMaxUserAmount(d)
	return aguo
}

// SetNillableMaxUserAmount sets the "max_user_amount" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableMaxUserAmount(d *decimal.Decimal) *AppGoodUpdateOne {
	if d != nil {
		aguo.SetMaxUserAmount(*d)
	}
	return aguo
}

// ClearMaxUserAmount clears the value of the "max_user_amount" field.
func (aguo *AppGoodUpdateOne) ClearMaxUserAmount() *AppGoodUpdateOne {
	aguo.mutation.ClearMaxUserAmount()
	return aguo
}

// SetMinOrderDuration sets the "min_order_duration" field.
func (aguo *AppGoodUpdateOne) SetMinOrderDuration(u uint32) *AppGoodUpdateOne {
	aguo.mutation.ResetMinOrderDuration()
	aguo.mutation.SetMinOrderDuration(u)
	return aguo
}

// SetNillableMinOrderDuration sets the "min_order_duration" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableMinOrderDuration(u *uint32) *AppGoodUpdateOne {
	if u != nil {
		aguo.SetMinOrderDuration(*u)
	}
	return aguo
}

// AddMinOrderDuration adds u to the "min_order_duration" field.
func (aguo *AppGoodUpdateOne) AddMinOrderDuration(u int32) *AppGoodUpdateOne {
	aguo.mutation.AddMinOrderDuration(u)
	return aguo
}

// ClearMinOrderDuration clears the value of the "min_order_duration" field.
func (aguo *AppGoodUpdateOne) ClearMinOrderDuration() *AppGoodUpdateOne {
	aguo.mutation.ClearMinOrderDuration()
	return aguo
}

// SetMaxOrderDuration sets the "max_order_duration" field.
func (aguo *AppGoodUpdateOne) SetMaxOrderDuration(u uint32) *AppGoodUpdateOne {
	aguo.mutation.ResetMaxOrderDuration()
	aguo.mutation.SetMaxOrderDuration(u)
	return aguo
}

// SetNillableMaxOrderDuration sets the "max_order_duration" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableMaxOrderDuration(u *uint32) *AppGoodUpdateOne {
	if u != nil {
		aguo.SetMaxOrderDuration(*u)
	}
	return aguo
}

// AddMaxOrderDuration adds u to the "max_order_duration" field.
func (aguo *AppGoodUpdateOne) AddMaxOrderDuration(u int32) *AppGoodUpdateOne {
	aguo.mutation.AddMaxOrderDuration(u)
	return aguo
}

// ClearMaxOrderDuration clears the value of the "max_order_duration" field.
func (aguo *AppGoodUpdateOne) ClearMaxOrderDuration() *AppGoodUpdateOne {
	aguo.mutation.ClearMaxOrderDuration()
	return aguo
}

// SetPackageWithRequireds sets the "package_with_requireds" field.
func (aguo *AppGoodUpdateOne) SetPackageWithRequireds(b bool) *AppGoodUpdateOne {
	aguo.mutation.SetPackageWithRequireds(b)
	return aguo
}

// SetNillablePackageWithRequireds sets the "package_with_requireds" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillablePackageWithRequireds(b *bool) *AppGoodUpdateOne {
	if b != nil {
		aguo.SetPackageWithRequireds(*b)
	}
	return aguo
}

// ClearPackageWithRequireds clears the value of the "package_with_requireds" field.
func (aguo *AppGoodUpdateOne) ClearPackageWithRequireds() *AppGoodUpdateOne {
	aguo.mutation.ClearPackageWithRequireds()
	return aguo
}

// Mutation returns the AppGoodMutation object of the builder.
func (aguo *AppGoodUpdateOne) Mutation() *AppGoodMutation {
	return aguo.mutation
}

// Where appends a list predicates to the AppGoodUpdate builder.
func (aguo *AppGoodUpdateOne) Where(ps ...predicate.AppGood) *AppGoodUpdateOne {
	aguo.mutation.Where(ps...)
	return aguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aguo *AppGoodUpdateOne) Select(field string, fields ...string) *AppGoodUpdateOne {
	aguo.fields = append([]string{field}, fields...)
	return aguo
}

// Save executes the query and returns the updated AppGood entity.
func (aguo *AppGoodUpdateOne) Save(ctx context.Context) (*AppGood, error) {
	return withHooks(ctx, aguo.sqlSave, aguo.mutation, aguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aguo *AppGoodUpdateOne) SaveX(ctx context.Context) *AppGood {
	node, err := aguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aguo *AppGoodUpdateOne) Exec(ctx context.Context) error {
	_, err := aguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aguo *AppGoodUpdateOne) ExecX(ctx context.Context) {
	if err := aguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aguo *AppGoodUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppGoodUpdateOne {
	aguo.modifiers = append(aguo.modifiers, modifiers...)
	return aguo
}

func (aguo *AppGoodUpdateOne) sqlSave(ctx context.Context) (_node *AppGood, err error) {
	_spec := sqlgraph.NewUpdateSpec(appgood.Table, appgood.Columns, sqlgraph.NewFieldSpec(appgood.FieldID, field.TypeUint32))
	id, ok := aguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AppGood.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appgood.FieldID)
		for _, f := range fields {
			if !appgood.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != appgood.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aguo.mutation.EntID(); ok {
		_spec.SetField(appgood.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := aguo.mutation.AppID(); ok {
		_spec.SetField(appgood.FieldAppID, field.TypeUUID, value)
	}
	if value, ok := aguo.mutation.GoodID(); ok {
		_spec.SetField(appgood.FieldGoodID, field.TypeUUID, value)
	}
	if value, ok := aguo.mutation.Online(); ok {
		_spec.SetField(appgood.FieldOnline, field.TypeBool, value)
	}
	if aguo.mutation.OnlineCleared() {
		_spec.ClearField(appgood.FieldOnline, field.TypeBool)
	}
	if value, ok := aguo.mutation.Visible(); ok {
		_spec.SetField(appgood.FieldVisible, field.TypeBool, value)
	}
	if aguo.mutation.VisibleCleared() {
		_spec.ClearField(appgood.FieldVisible, field.TypeBool)
	}
	if value, ok := aguo.mutation.GoodName(); ok {
		_spec.SetField(appgood.FieldGoodName, field.TypeString, value)
	}
	if aguo.mutation.GoodNameCleared() {
		_spec.ClearField(appgood.FieldGoodName, field.TypeString)
	}
	if value, ok := aguo.mutation.UnitPrice(); ok {
		_spec.SetField(appgood.FieldUnitPrice, field.TypeOther, value)
	}
	if aguo.mutation.UnitPriceCleared() {
		_spec.ClearField(appgood.FieldUnitPrice, field.TypeOther)
	}
	if value, ok := aguo.mutation.PackagePrice(); ok {
		_spec.SetField(appgood.FieldPackagePrice, field.TypeOther, value)
	}
	if aguo.mutation.PackagePriceCleared() {
		_spec.ClearField(appgood.FieldPackagePrice, field.TypeOther)
	}
	if value, ok := aguo.mutation.DisplayIndex(); ok {
		_spec.SetField(appgood.FieldDisplayIndex, field.TypeInt32, value)
	}
	if value, ok := aguo.mutation.AddedDisplayIndex(); ok {
		_spec.AddField(appgood.FieldDisplayIndex, field.TypeInt32, value)
	}
	if aguo.mutation.DisplayIndexCleared() {
		_spec.ClearField(appgood.FieldDisplayIndex, field.TypeInt32)
	}
	if value, ok := aguo.mutation.SaleStartAt(); ok {
		_spec.SetField(appgood.FieldSaleStartAt, field.TypeUint32, value)
	}
	if value, ok := aguo.mutation.AddedSaleStartAt(); ok {
		_spec.AddField(appgood.FieldSaleStartAt, field.TypeUint32, value)
	}
	if aguo.mutation.SaleStartAtCleared() {
		_spec.ClearField(appgood.FieldSaleStartAt, field.TypeUint32)
	}
	if value, ok := aguo.mutation.SaleEndAt(); ok {
		_spec.SetField(appgood.FieldSaleEndAt, field.TypeUint32, value)
	}
	if value, ok := aguo.mutation.AddedSaleEndAt(); ok {
		_spec.AddField(appgood.FieldSaleEndAt, field.TypeUint32, value)
	}
	if aguo.mutation.SaleEndAtCleared() {
		_spec.ClearField(appgood.FieldSaleEndAt, field.TypeUint32)
	}
	if value, ok := aguo.mutation.ServiceStartAt(); ok {
		_spec.SetField(appgood.FieldServiceStartAt, field.TypeUint32, value)
	}
	if value, ok := aguo.mutation.AddedServiceStartAt(); ok {
		_spec.AddField(appgood.FieldServiceStartAt, field.TypeUint32, value)
	}
	if aguo.mutation.ServiceStartAtCleared() {
		_spec.ClearField(appgood.FieldServiceStartAt, field.TypeUint32)
	}
	if value, ok := aguo.mutation.TechnicalFeeRatio(); ok {
		_spec.SetField(appgood.FieldTechnicalFeeRatio, field.TypeOther, value)
	}
	if aguo.mutation.TechnicalFeeRatioCleared() {
		_spec.ClearField(appgood.FieldTechnicalFeeRatio, field.TypeOther)
	}
	if value, ok := aguo.mutation.ElectricityFeeRatio(); ok {
		_spec.SetField(appgood.FieldElectricityFeeRatio, field.TypeOther, value)
	}
	if aguo.mutation.ElectricityFeeRatioCleared() {
		_spec.ClearField(appgood.FieldElectricityFeeRatio, field.TypeOther)
	}
	if value, ok := aguo.mutation.Descriptions(); ok {
		_spec.SetField(appgood.FieldDescriptions, field.TypeJSON, value)
	}
	if value, ok := aguo.mutation.AppendedDescriptions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, appgood.FieldDescriptions, value)
		})
	}
	if aguo.mutation.DescriptionsCleared() {
		_spec.ClearField(appgood.FieldDescriptions, field.TypeJSON)
	}
	if value, ok := aguo.mutation.GoodBanner(); ok {
		_spec.SetField(appgood.FieldGoodBanner, field.TypeString, value)
	}
	if aguo.mutation.GoodBannerCleared() {
		_spec.ClearField(appgood.FieldGoodBanner, field.TypeString)
	}
	if value, ok := aguo.mutation.DisplayNames(); ok {
		_spec.SetField(appgood.FieldDisplayNames, field.TypeJSON, value)
	}
	if value, ok := aguo.mutation.AppendedDisplayNames(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, appgood.FieldDisplayNames, value)
		})
	}
	if aguo.mutation.DisplayNamesCleared() {
		_spec.ClearField(appgood.FieldDisplayNames, field.TypeJSON)
	}
	if value, ok := aguo.mutation.EnablePurchase(); ok {
		_spec.SetField(appgood.FieldEnablePurchase, field.TypeBool, value)
	}
	if aguo.mutation.EnablePurchaseCleared() {
		_spec.ClearField(appgood.FieldEnablePurchase, field.TypeBool)
	}
	if value, ok := aguo.mutation.EnableProductPage(); ok {
		_spec.SetField(appgood.FieldEnableProductPage, field.TypeBool, value)
	}
	if aguo.mutation.EnableProductPageCleared() {
		_spec.ClearField(appgood.FieldEnableProductPage, field.TypeBool)
	}
	if value, ok := aguo.mutation.CancelMode(); ok {
		_spec.SetField(appgood.FieldCancelMode, field.TypeString, value)
	}
	if aguo.mutation.CancelModeCleared() {
		_spec.ClearField(appgood.FieldCancelMode, field.TypeString)
	}
	if value, ok := aguo.mutation.DisplayColors(); ok {
		_spec.SetField(appgood.FieldDisplayColors, field.TypeJSON, value)
	}
	if value, ok := aguo.mutation.AppendedDisplayColors(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, appgood.FieldDisplayColors, value)
		})
	}
	if aguo.mutation.DisplayColorsCleared() {
		_spec.ClearField(appgood.FieldDisplayColors, field.TypeJSON)
	}
	if value, ok := aguo.mutation.CancellableBeforeStart(); ok {
		_spec.SetField(appgood.FieldCancellableBeforeStart, field.TypeUint32, value)
	}
	if value, ok := aguo.mutation.AddedCancellableBeforeStart(); ok {
		_spec.AddField(appgood.FieldCancellableBeforeStart, field.TypeUint32, value)
	}
	if aguo.mutation.CancellableBeforeStartCleared() {
		_spec.ClearField(appgood.FieldCancellableBeforeStart, field.TypeUint32)
	}
	if value, ok := aguo.mutation.ProductPage(); ok {
		_spec.SetField(appgood.FieldProductPage, field.TypeString, value)
	}
	if aguo.mutation.ProductPageCleared() {
		_spec.ClearField(appgood.FieldProductPage, field.TypeString)
	}
	if value, ok := aguo.mutation.EnableSetCommission(); ok {
		_spec.SetField(appgood.FieldEnableSetCommission, field.TypeBool, value)
	}
	if aguo.mutation.EnableSetCommissionCleared() {
		_spec.ClearField(appgood.FieldEnableSetCommission, field.TypeBool)
	}
	if value, ok := aguo.mutation.Posters(); ok {
		_spec.SetField(appgood.FieldPosters, field.TypeJSON, value)
	}
	if value, ok := aguo.mutation.AppendedPosters(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, appgood.FieldPosters, value)
		})
	}
	if aguo.mutation.PostersCleared() {
		_spec.ClearField(appgood.FieldPosters, field.TypeJSON)
	}
	if value, ok := aguo.mutation.MinOrderAmount(); ok {
		_spec.SetField(appgood.FieldMinOrderAmount, field.TypeOther, value)
	}
	if aguo.mutation.MinOrderAmountCleared() {
		_spec.ClearField(appgood.FieldMinOrderAmount, field.TypeOther)
	}
	if value, ok := aguo.mutation.MaxOrderAmount(); ok {
		_spec.SetField(appgood.FieldMaxOrderAmount, field.TypeOther, value)
	}
	if aguo.mutation.MaxOrderAmountCleared() {
		_spec.ClearField(appgood.FieldMaxOrderAmount, field.TypeOther)
	}
	if value, ok := aguo.mutation.MaxUserAmount(); ok {
		_spec.SetField(appgood.FieldMaxUserAmount, field.TypeOther, value)
	}
	if aguo.mutation.MaxUserAmountCleared() {
		_spec.ClearField(appgood.FieldMaxUserAmount, field.TypeOther)
	}
	if value, ok := aguo.mutation.MinOrderDuration(); ok {
		_spec.SetField(appgood.FieldMinOrderDuration, field.TypeUint32, value)
	}
	if value, ok := aguo.mutation.AddedMinOrderDuration(); ok {
		_spec.AddField(appgood.FieldMinOrderDuration, field.TypeUint32, value)
	}
	if aguo.mutation.MinOrderDurationCleared() {
		_spec.ClearField(appgood.FieldMinOrderDuration, field.TypeUint32)
	}
	if value, ok := aguo.mutation.MaxOrderDuration(); ok {
		_spec.SetField(appgood.FieldMaxOrderDuration, field.TypeUint32, value)
	}
	if value, ok := aguo.mutation.AddedMaxOrderDuration(); ok {
		_spec.AddField(appgood.FieldMaxOrderDuration, field.TypeUint32, value)
	}
	if aguo.mutation.MaxOrderDurationCleared() {
		_spec.ClearField(appgood.FieldMaxOrderDuration, field.TypeUint32)
	}
	if value, ok := aguo.mutation.PackageWithRequireds(); ok {
		_spec.SetField(appgood.FieldPackageWithRequireds, field.TypeBool, value)
	}
	if aguo.mutation.PackageWithRequiredsCleared() {
		_spec.ClearField(appgood.FieldPackageWithRequireds, field.TypeBool)
	}
	_spec.AddModifiers(aguo.modifiers...)
	_node = &AppGood{config: aguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appgood.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aguo.mutation.done = true
	return _node, nil
}

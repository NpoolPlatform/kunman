// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/apppowerrental"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppPowerRentalCreate is the builder for creating a AppPowerRental entity.
type AppPowerRentalCreate struct {
	config
	mutation *AppPowerRentalMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (aprc *AppPowerRentalCreate) SetEntID(u uuid.UUID) *AppPowerRentalCreate {
	aprc.mutation.SetEntID(u)
	return aprc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (aprc *AppPowerRentalCreate) SetNillableEntID(u *uuid.UUID) *AppPowerRentalCreate {
	if u != nil {
		aprc.SetEntID(*u)
	}
	return aprc
}

// SetCreatedAt sets the "created_at" field.
func (aprc *AppPowerRentalCreate) SetCreatedAt(u uint32) *AppPowerRentalCreate {
	aprc.mutation.SetCreatedAt(u)
	return aprc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aprc *AppPowerRentalCreate) SetNillableCreatedAt(u *uint32) *AppPowerRentalCreate {
	if u != nil {
		aprc.SetCreatedAt(*u)
	}
	return aprc
}

// SetUpdatedAt sets the "updated_at" field.
func (aprc *AppPowerRentalCreate) SetUpdatedAt(u uint32) *AppPowerRentalCreate {
	aprc.mutation.SetUpdatedAt(u)
	return aprc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aprc *AppPowerRentalCreate) SetNillableUpdatedAt(u *uint32) *AppPowerRentalCreate {
	if u != nil {
		aprc.SetUpdatedAt(*u)
	}
	return aprc
}

// SetDeletedAt sets the "deleted_at" field.
func (aprc *AppPowerRentalCreate) SetDeletedAt(u uint32) *AppPowerRentalCreate {
	aprc.mutation.SetDeletedAt(u)
	return aprc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aprc *AppPowerRentalCreate) SetNillableDeletedAt(u *uint32) *AppPowerRentalCreate {
	if u != nil {
		aprc.SetDeletedAt(*u)
	}
	return aprc
}

// SetAppGoodID sets the "app_good_id" field.
func (aprc *AppPowerRentalCreate) SetAppGoodID(u uuid.UUID) *AppPowerRentalCreate {
	aprc.mutation.SetAppGoodID(u)
	return aprc
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (aprc *AppPowerRentalCreate) SetNillableAppGoodID(u *uuid.UUID) *AppPowerRentalCreate {
	if u != nil {
		aprc.SetAppGoodID(*u)
	}
	return aprc
}

// SetServiceStartAt sets the "service_start_at" field.
func (aprc *AppPowerRentalCreate) SetServiceStartAt(u uint32) *AppPowerRentalCreate {
	aprc.mutation.SetServiceStartAt(u)
	return aprc
}

// SetNillableServiceStartAt sets the "service_start_at" field if the given value is not nil.
func (aprc *AppPowerRentalCreate) SetNillableServiceStartAt(u *uint32) *AppPowerRentalCreate {
	if u != nil {
		aprc.SetServiceStartAt(*u)
	}
	return aprc
}

// SetStartMode sets the "start_mode" field.
func (aprc *AppPowerRentalCreate) SetStartMode(s string) *AppPowerRentalCreate {
	aprc.mutation.SetStartMode(s)
	return aprc
}

// SetNillableStartMode sets the "start_mode" field if the given value is not nil.
func (aprc *AppPowerRentalCreate) SetNillableStartMode(s *string) *AppPowerRentalCreate {
	if s != nil {
		aprc.SetStartMode(*s)
	}
	return aprc
}

// SetCancelMode sets the "cancel_mode" field.
func (aprc *AppPowerRentalCreate) SetCancelMode(s string) *AppPowerRentalCreate {
	aprc.mutation.SetCancelMode(s)
	return aprc
}

// SetNillableCancelMode sets the "cancel_mode" field if the given value is not nil.
func (aprc *AppPowerRentalCreate) SetNillableCancelMode(s *string) *AppPowerRentalCreate {
	if s != nil {
		aprc.SetCancelMode(*s)
	}
	return aprc
}

// SetCancelableBeforeStartSeconds sets the "cancelable_before_start_seconds" field.
func (aprc *AppPowerRentalCreate) SetCancelableBeforeStartSeconds(u uint32) *AppPowerRentalCreate {
	aprc.mutation.SetCancelableBeforeStartSeconds(u)
	return aprc
}

// SetNillableCancelableBeforeStartSeconds sets the "cancelable_before_start_seconds" field if the given value is not nil.
func (aprc *AppPowerRentalCreate) SetNillableCancelableBeforeStartSeconds(u *uint32) *AppPowerRentalCreate {
	if u != nil {
		aprc.SetCancelableBeforeStartSeconds(*u)
	}
	return aprc
}

// SetEnableSetCommission sets the "enable_set_commission" field.
func (aprc *AppPowerRentalCreate) SetEnableSetCommission(b bool) *AppPowerRentalCreate {
	aprc.mutation.SetEnableSetCommission(b)
	return aprc
}

// SetNillableEnableSetCommission sets the "enable_set_commission" field if the given value is not nil.
func (aprc *AppPowerRentalCreate) SetNillableEnableSetCommission(b *bool) *AppPowerRentalCreate {
	if b != nil {
		aprc.SetEnableSetCommission(*b)
	}
	return aprc
}

// SetMinOrderAmount sets the "min_order_amount" field.
func (aprc *AppPowerRentalCreate) SetMinOrderAmount(d decimal.Decimal) *AppPowerRentalCreate {
	aprc.mutation.SetMinOrderAmount(d)
	return aprc
}

// SetNillableMinOrderAmount sets the "min_order_amount" field if the given value is not nil.
func (aprc *AppPowerRentalCreate) SetNillableMinOrderAmount(d *decimal.Decimal) *AppPowerRentalCreate {
	if d != nil {
		aprc.SetMinOrderAmount(*d)
	}
	return aprc
}

// SetMaxOrderAmount sets the "max_order_amount" field.
func (aprc *AppPowerRentalCreate) SetMaxOrderAmount(d decimal.Decimal) *AppPowerRentalCreate {
	aprc.mutation.SetMaxOrderAmount(d)
	return aprc
}

// SetNillableMaxOrderAmount sets the "max_order_amount" field if the given value is not nil.
func (aprc *AppPowerRentalCreate) SetNillableMaxOrderAmount(d *decimal.Decimal) *AppPowerRentalCreate {
	if d != nil {
		aprc.SetMaxOrderAmount(*d)
	}
	return aprc
}

// SetMaxUserAmount sets the "max_user_amount" field.
func (aprc *AppPowerRentalCreate) SetMaxUserAmount(d decimal.Decimal) *AppPowerRentalCreate {
	aprc.mutation.SetMaxUserAmount(d)
	return aprc
}

// SetNillableMaxUserAmount sets the "max_user_amount" field if the given value is not nil.
func (aprc *AppPowerRentalCreate) SetNillableMaxUserAmount(d *decimal.Decimal) *AppPowerRentalCreate {
	if d != nil {
		aprc.SetMaxUserAmount(*d)
	}
	return aprc
}

// SetMinOrderDurationSeconds sets the "min_order_duration_seconds" field.
func (aprc *AppPowerRentalCreate) SetMinOrderDurationSeconds(u uint32) *AppPowerRentalCreate {
	aprc.mutation.SetMinOrderDurationSeconds(u)
	return aprc
}

// SetNillableMinOrderDurationSeconds sets the "min_order_duration_seconds" field if the given value is not nil.
func (aprc *AppPowerRentalCreate) SetNillableMinOrderDurationSeconds(u *uint32) *AppPowerRentalCreate {
	if u != nil {
		aprc.SetMinOrderDurationSeconds(*u)
	}
	return aprc
}

// SetMaxOrderDurationSeconds sets the "max_order_duration_seconds" field.
func (aprc *AppPowerRentalCreate) SetMaxOrderDurationSeconds(u uint32) *AppPowerRentalCreate {
	aprc.mutation.SetMaxOrderDurationSeconds(u)
	return aprc
}

// SetNillableMaxOrderDurationSeconds sets the "max_order_duration_seconds" field if the given value is not nil.
func (aprc *AppPowerRentalCreate) SetNillableMaxOrderDurationSeconds(u *uint32) *AppPowerRentalCreate {
	if u != nil {
		aprc.SetMaxOrderDurationSeconds(*u)
	}
	return aprc
}

// SetUnitPrice sets the "unit_price" field.
func (aprc *AppPowerRentalCreate) SetUnitPrice(d decimal.Decimal) *AppPowerRentalCreate {
	aprc.mutation.SetUnitPrice(d)
	return aprc
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (aprc *AppPowerRentalCreate) SetNillableUnitPrice(d *decimal.Decimal) *AppPowerRentalCreate {
	if d != nil {
		aprc.SetUnitPrice(*d)
	}
	return aprc
}

// SetSaleStartAt sets the "sale_start_at" field.
func (aprc *AppPowerRentalCreate) SetSaleStartAt(u uint32) *AppPowerRentalCreate {
	aprc.mutation.SetSaleStartAt(u)
	return aprc
}

// SetNillableSaleStartAt sets the "sale_start_at" field if the given value is not nil.
func (aprc *AppPowerRentalCreate) SetNillableSaleStartAt(u *uint32) *AppPowerRentalCreate {
	if u != nil {
		aprc.SetSaleStartAt(*u)
	}
	return aprc
}

// SetSaleEndAt sets the "sale_end_at" field.
func (aprc *AppPowerRentalCreate) SetSaleEndAt(u uint32) *AppPowerRentalCreate {
	aprc.mutation.SetSaleEndAt(u)
	return aprc
}

// SetNillableSaleEndAt sets the "sale_end_at" field if the given value is not nil.
func (aprc *AppPowerRentalCreate) SetNillableSaleEndAt(u *uint32) *AppPowerRentalCreate {
	if u != nil {
		aprc.SetSaleEndAt(*u)
	}
	return aprc
}

// SetSaleMode sets the "sale_mode" field.
func (aprc *AppPowerRentalCreate) SetSaleMode(s string) *AppPowerRentalCreate {
	aprc.mutation.SetSaleMode(s)
	return aprc
}

// SetNillableSaleMode sets the "sale_mode" field if the given value is not nil.
func (aprc *AppPowerRentalCreate) SetNillableSaleMode(s *string) *AppPowerRentalCreate {
	if s != nil {
		aprc.SetSaleMode(*s)
	}
	return aprc
}

// SetFixedDuration sets the "fixed_duration" field.
func (aprc *AppPowerRentalCreate) SetFixedDuration(b bool) *AppPowerRentalCreate {
	aprc.mutation.SetFixedDuration(b)
	return aprc
}

// SetNillableFixedDuration sets the "fixed_duration" field if the given value is not nil.
func (aprc *AppPowerRentalCreate) SetNillableFixedDuration(b *bool) *AppPowerRentalCreate {
	if b != nil {
		aprc.SetFixedDuration(*b)
	}
	return aprc
}

// SetPackageWithRequireds sets the "package_with_requireds" field.
func (aprc *AppPowerRentalCreate) SetPackageWithRequireds(b bool) *AppPowerRentalCreate {
	aprc.mutation.SetPackageWithRequireds(b)
	return aprc
}

// SetNillablePackageWithRequireds sets the "package_with_requireds" field if the given value is not nil.
func (aprc *AppPowerRentalCreate) SetNillablePackageWithRequireds(b *bool) *AppPowerRentalCreate {
	if b != nil {
		aprc.SetPackageWithRequireds(*b)
	}
	return aprc
}

// SetID sets the "id" field.
func (aprc *AppPowerRentalCreate) SetID(u uint32) *AppPowerRentalCreate {
	aprc.mutation.SetID(u)
	return aprc
}

// Mutation returns the AppPowerRentalMutation object of the builder.
func (aprc *AppPowerRentalCreate) Mutation() *AppPowerRentalMutation {
	return aprc.mutation
}

// Save creates the AppPowerRental in the database.
func (aprc *AppPowerRentalCreate) Save(ctx context.Context) (*AppPowerRental, error) {
	aprc.defaults()
	return withHooks(ctx, aprc.sqlSave, aprc.mutation, aprc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aprc *AppPowerRentalCreate) SaveX(ctx context.Context) *AppPowerRental {
	v, err := aprc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aprc *AppPowerRentalCreate) Exec(ctx context.Context) error {
	_, err := aprc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aprc *AppPowerRentalCreate) ExecX(ctx context.Context) {
	if err := aprc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aprc *AppPowerRentalCreate) defaults() {
	if _, ok := aprc.mutation.EntID(); !ok {
		v := apppowerrental.DefaultEntID()
		aprc.mutation.SetEntID(v)
	}
	if _, ok := aprc.mutation.CreatedAt(); !ok {
		v := apppowerrental.DefaultCreatedAt()
		aprc.mutation.SetCreatedAt(v)
	}
	if _, ok := aprc.mutation.UpdatedAt(); !ok {
		v := apppowerrental.DefaultUpdatedAt()
		aprc.mutation.SetUpdatedAt(v)
	}
	if _, ok := aprc.mutation.DeletedAt(); !ok {
		v := apppowerrental.DefaultDeletedAt()
		aprc.mutation.SetDeletedAt(v)
	}
	if _, ok := aprc.mutation.AppGoodID(); !ok {
		v := apppowerrental.DefaultAppGoodID()
		aprc.mutation.SetAppGoodID(v)
	}
	if _, ok := aprc.mutation.ServiceStartAt(); !ok {
		v := apppowerrental.DefaultServiceStartAt
		aprc.mutation.SetServiceStartAt(v)
	}
	if _, ok := aprc.mutation.StartMode(); !ok {
		v := apppowerrental.DefaultStartMode
		aprc.mutation.SetStartMode(v)
	}
	if _, ok := aprc.mutation.CancelMode(); !ok {
		v := apppowerrental.DefaultCancelMode
		aprc.mutation.SetCancelMode(v)
	}
	if _, ok := aprc.mutation.CancelableBeforeStartSeconds(); !ok {
		v := apppowerrental.DefaultCancelableBeforeStartSeconds
		aprc.mutation.SetCancelableBeforeStartSeconds(v)
	}
	if _, ok := aprc.mutation.EnableSetCommission(); !ok {
		v := apppowerrental.DefaultEnableSetCommission
		aprc.mutation.SetEnableSetCommission(v)
	}
	if _, ok := aprc.mutation.MinOrderAmount(); !ok {
		v := apppowerrental.DefaultMinOrderAmount
		aprc.mutation.SetMinOrderAmount(v)
	}
	if _, ok := aprc.mutation.MaxOrderAmount(); !ok {
		v := apppowerrental.DefaultMaxOrderAmount
		aprc.mutation.SetMaxOrderAmount(v)
	}
	if _, ok := aprc.mutation.MaxUserAmount(); !ok {
		v := apppowerrental.DefaultMaxUserAmount
		aprc.mutation.SetMaxUserAmount(v)
	}
	if _, ok := aprc.mutation.MinOrderDurationSeconds(); !ok {
		v := apppowerrental.DefaultMinOrderDurationSeconds
		aprc.mutation.SetMinOrderDurationSeconds(v)
	}
	if _, ok := aprc.mutation.MaxOrderDurationSeconds(); !ok {
		v := apppowerrental.DefaultMaxOrderDurationSeconds
		aprc.mutation.SetMaxOrderDurationSeconds(v)
	}
	if _, ok := aprc.mutation.UnitPrice(); !ok {
		v := apppowerrental.DefaultUnitPrice
		aprc.mutation.SetUnitPrice(v)
	}
	if _, ok := aprc.mutation.SaleStartAt(); !ok {
		v := apppowerrental.DefaultSaleStartAt
		aprc.mutation.SetSaleStartAt(v)
	}
	if _, ok := aprc.mutation.SaleEndAt(); !ok {
		v := apppowerrental.DefaultSaleEndAt
		aprc.mutation.SetSaleEndAt(v)
	}
	if _, ok := aprc.mutation.SaleMode(); !ok {
		v := apppowerrental.DefaultSaleMode
		aprc.mutation.SetSaleMode(v)
	}
	if _, ok := aprc.mutation.FixedDuration(); !ok {
		v := apppowerrental.DefaultFixedDuration
		aprc.mutation.SetFixedDuration(v)
	}
	if _, ok := aprc.mutation.PackageWithRequireds(); !ok {
		v := apppowerrental.DefaultPackageWithRequireds
		aprc.mutation.SetPackageWithRequireds(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aprc *AppPowerRentalCreate) check() error {
	if _, ok := aprc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "AppPowerRental.ent_id"`)}
	}
	if _, ok := aprc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "AppPowerRental.created_at"`)}
	}
	if _, ok := aprc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "AppPowerRental.updated_at"`)}
	}
	if _, ok := aprc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "AppPowerRental.deleted_at"`)}
	}
	return nil
}

func (aprc *AppPowerRentalCreate) sqlSave(ctx context.Context) (*AppPowerRental, error) {
	if err := aprc.check(); err != nil {
		return nil, err
	}
	_node, _spec := aprc.createSpec()
	if err := sqlgraph.CreateNode(ctx, aprc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	aprc.mutation.id = &_node.ID
	aprc.mutation.done = true
	return _node, nil
}

func (aprc *AppPowerRentalCreate) createSpec() (*AppPowerRental, *sqlgraph.CreateSpec) {
	var (
		_node = &AppPowerRental{config: aprc.config}
		_spec = sqlgraph.NewCreateSpec(apppowerrental.Table, sqlgraph.NewFieldSpec(apppowerrental.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = aprc.conflict
	if id, ok := aprc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := aprc.mutation.EntID(); ok {
		_spec.SetField(apppowerrental.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := aprc.mutation.CreatedAt(); ok {
		_spec.SetField(apppowerrental.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := aprc.mutation.UpdatedAt(); ok {
		_spec.SetField(apppowerrental.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := aprc.mutation.DeletedAt(); ok {
		_spec.SetField(apppowerrental.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := aprc.mutation.AppGoodID(); ok {
		_spec.SetField(apppowerrental.FieldAppGoodID, field.TypeUUID, value)
		_node.AppGoodID = value
	}
	if value, ok := aprc.mutation.ServiceStartAt(); ok {
		_spec.SetField(apppowerrental.FieldServiceStartAt, field.TypeUint32, value)
		_node.ServiceStartAt = value
	}
	if value, ok := aprc.mutation.StartMode(); ok {
		_spec.SetField(apppowerrental.FieldStartMode, field.TypeString, value)
		_node.StartMode = value
	}
	if value, ok := aprc.mutation.CancelMode(); ok {
		_spec.SetField(apppowerrental.FieldCancelMode, field.TypeString, value)
		_node.CancelMode = value
	}
	if value, ok := aprc.mutation.CancelableBeforeStartSeconds(); ok {
		_spec.SetField(apppowerrental.FieldCancelableBeforeStartSeconds, field.TypeUint32, value)
		_node.CancelableBeforeStartSeconds = value
	}
	if value, ok := aprc.mutation.EnableSetCommission(); ok {
		_spec.SetField(apppowerrental.FieldEnableSetCommission, field.TypeBool, value)
		_node.EnableSetCommission = value
	}
	if value, ok := aprc.mutation.MinOrderAmount(); ok {
		_spec.SetField(apppowerrental.FieldMinOrderAmount, field.TypeOther, value)
		_node.MinOrderAmount = value
	}
	if value, ok := aprc.mutation.MaxOrderAmount(); ok {
		_spec.SetField(apppowerrental.FieldMaxOrderAmount, field.TypeOther, value)
		_node.MaxOrderAmount = value
	}
	if value, ok := aprc.mutation.MaxUserAmount(); ok {
		_spec.SetField(apppowerrental.FieldMaxUserAmount, field.TypeOther, value)
		_node.MaxUserAmount = value
	}
	if value, ok := aprc.mutation.MinOrderDurationSeconds(); ok {
		_spec.SetField(apppowerrental.FieldMinOrderDurationSeconds, field.TypeUint32, value)
		_node.MinOrderDurationSeconds = value
	}
	if value, ok := aprc.mutation.MaxOrderDurationSeconds(); ok {
		_spec.SetField(apppowerrental.FieldMaxOrderDurationSeconds, field.TypeUint32, value)
		_node.MaxOrderDurationSeconds = value
	}
	if value, ok := aprc.mutation.UnitPrice(); ok {
		_spec.SetField(apppowerrental.FieldUnitPrice, field.TypeOther, value)
		_node.UnitPrice = value
	}
	if value, ok := aprc.mutation.SaleStartAt(); ok {
		_spec.SetField(apppowerrental.FieldSaleStartAt, field.TypeUint32, value)
		_node.SaleStartAt = value
	}
	if value, ok := aprc.mutation.SaleEndAt(); ok {
		_spec.SetField(apppowerrental.FieldSaleEndAt, field.TypeUint32, value)
		_node.SaleEndAt = value
	}
	if value, ok := aprc.mutation.SaleMode(); ok {
		_spec.SetField(apppowerrental.FieldSaleMode, field.TypeString, value)
		_node.SaleMode = value
	}
	if value, ok := aprc.mutation.FixedDuration(); ok {
		_spec.SetField(apppowerrental.FieldFixedDuration, field.TypeBool, value)
		_node.FixedDuration = value
	}
	if value, ok := aprc.mutation.PackageWithRequireds(); ok {
		_spec.SetField(apppowerrental.FieldPackageWithRequireds, field.TypeBool, value)
		_node.PackageWithRequireds = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppPowerRental.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppPowerRentalUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (aprc *AppPowerRentalCreate) OnConflict(opts ...sql.ConflictOption) *AppPowerRentalUpsertOne {
	aprc.conflict = opts
	return &AppPowerRentalUpsertOne{
		create: aprc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppPowerRental.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aprc *AppPowerRentalCreate) OnConflictColumns(columns ...string) *AppPowerRentalUpsertOne {
	aprc.conflict = append(aprc.conflict, sql.ConflictColumns(columns...))
	return &AppPowerRentalUpsertOne{
		create: aprc,
	}
}

type (
	// AppPowerRentalUpsertOne is the builder for "upsert"-ing
	//  one AppPowerRental node.
	AppPowerRentalUpsertOne struct {
		create *AppPowerRentalCreate
	}

	// AppPowerRentalUpsert is the "OnConflict" setter.
	AppPowerRentalUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *AppPowerRentalUpsert) SetEntID(v uuid.UUID) *AppPowerRentalUpsert {
	u.Set(apppowerrental.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppPowerRentalUpsert) UpdateEntID() *AppPowerRentalUpsert {
	u.SetExcluded(apppowerrental.FieldEntID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppPowerRentalUpsert) SetCreatedAt(v uint32) *AppPowerRentalUpsert {
	u.Set(apppowerrental.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppPowerRentalUpsert) UpdateCreatedAt() *AppPowerRentalUpsert {
	u.SetExcluded(apppowerrental.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppPowerRentalUpsert) AddCreatedAt(v uint32) *AppPowerRentalUpsert {
	u.Add(apppowerrental.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppPowerRentalUpsert) SetUpdatedAt(v uint32) *AppPowerRentalUpsert {
	u.Set(apppowerrental.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppPowerRentalUpsert) UpdateUpdatedAt() *AppPowerRentalUpsert {
	u.SetExcluded(apppowerrental.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppPowerRentalUpsert) AddUpdatedAt(v uint32) *AppPowerRentalUpsert {
	u.Add(apppowerrental.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppPowerRentalUpsert) SetDeletedAt(v uint32) *AppPowerRentalUpsert {
	u.Set(apppowerrental.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppPowerRentalUpsert) UpdateDeletedAt() *AppPowerRentalUpsert {
	u.SetExcluded(apppowerrental.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppPowerRentalUpsert) AddDeletedAt(v uint32) *AppPowerRentalUpsert {
	u.Add(apppowerrental.FieldDeletedAt, v)
	return u
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppPowerRentalUpsert) SetAppGoodID(v uuid.UUID) *AppPowerRentalUpsert {
	u.Set(apppowerrental.FieldAppGoodID, v)
	return u
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppPowerRentalUpsert) UpdateAppGoodID() *AppPowerRentalUpsert {
	u.SetExcluded(apppowerrental.FieldAppGoodID)
	return u
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppPowerRentalUpsert) ClearAppGoodID() *AppPowerRentalUpsert {
	u.SetNull(apppowerrental.FieldAppGoodID)
	return u
}

// SetServiceStartAt sets the "service_start_at" field.
func (u *AppPowerRentalUpsert) SetServiceStartAt(v uint32) *AppPowerRentalUpsert {
	u.Set(apppowerrental.FieldServiceStartAt, v)
	return u
}

// UpdateServiceStartAt sets the "service_start_at" field to the value that was provided on create.
func (u *AppPowerRentalUpsert) UpdateServiceStartAt() *AppPowerRentalUpsert {
	u.SetExcluded(apppowerrental.FieldServiceStartAt)
	return u
}

// AddServiceStartAt adds v to the "service_start_at" field.
func (u *AppPowerRentalUpsert) AddServiceStartAt(v uint32) *AppPowerRentalUpsert {
	u.Add(apppowerrental.FieldServiceStartAt, v)
	return u
}

// ClearServiceStartAt clears the value of the "service_start_at" field.
func (u *AppPowerRentalUpsert) ClearServiceStartAt() *AppPowerRentalUpsert {
	u.SetNull(apppowerrental.FieldServiceStartAt)
	return u
}

// SetStartMode sets the "start_mode" field.
func (u *AppPowerRentalUpsert) SetStartMode(v string) *AppPowerRentalUpsert {
	u.Set(apppowerrental.FieldStartMode, v)
	return u
}

// UpdateStartMode sets the "start_mode" field to the value that was provided on create.
func (u *AppPowerRentalUpsert) UpdateStartMode() *AppPowerRentalUpsert {
	u.SetExcluded(apppowerrental.FieldStartMode)
	return u
}

// ClearStartMode clears the value of the "start_mode" field.
func (u *AppPowerRentalUpsert) ClearStartMode() *AppPowerRentalUpsert {
	u.SetNull(apppowerrental.FieldStartMode)
	return u
}

// SetCancelMode sets the "cancel_mode" field.
func (u *AppPowerRentalUpsert) SetCancelMode(v string) *AppPowerRentalUpsert {
	u.Set(apppowerrental.FieldCancelMode, v)
	return u
}

// UpdateCancelMode sets the "cancel_mode" field to the value that was provided on create.
func (u *AppPowerRentalUpsert) UpdateCancelMode() *AppPowerRentalUpsert {
	u.SetExcluded(apppowerrental.FieldCancelMode)
	return u
}

// ClearCancelMode clears the value of the "cancel_mode" field.
func (u *AppPowerRentalUpsert) ClearCancelMode() *AppPowerRentalUpsert {
	u.SetNull(apppowerrental.FieldCancelMode)
	return u
}

// SetCancelableBeforeStartSeconds sets the "cancelable_before_start_seconds" field.
func (u *AppPowerRentalUpsert) SetCancelableBeforeStartSeconds(v uint32) *AppPowerRentalUpsert {
	u.Set(apppowerrental.FieldCancelableBeforeStartSeconds, v)
	return u
}

// UpdateCancelableBeforeStartSeconds sets the "cancelable_before_start_seconds" field to the value that was provided on create.
func (u *AppPowerRentalUpsert) UpdateCancelableBeforeStartSeconds() *AppPowerRentalUpsert {
	u.SetExcluded(apppowerrental.FieldCancelableBeforeStartSeconds)
	return u
}

// AddCancelableBeforeStartSeconds adds v to the "cancelable_before_start_seconds" field.
func (u *AppPowerRentalUpsert) AddCancelableBeforeStartSeconds(v uint32) *AppPowerRentalUpsert {
	u.Add(apppowerrental.FieldCancelableBeforeStartSeconds, v)
	return u
}

// ClearCancelableBeforeStartSeconds clears the value of the "cancelable_before_start_seconds" field.
func (u *AppPowerRentalUpsert) ClearCancelableBeforeStartSeconds() *AppPowerRentalUpsert {
	u.SetNull(apppowerrental.FieldCancelableBeforeStartSeconds)
	return u
}

// SetEnableSetCommission sets the "enable_set_commission" field.
func (u *AppPowerRentalUpsert) SetEnableSetCommission(v bool) *AppPowerRentalUpsert {
	u.Set(apppowerrental.FieldEnableSetCommission, v)
	return u
}

// UpdateEnableSetCommission sets the "enable_set_commission" field to the value that was provided on create.
func (u *AppPowerRentalUpsert) UpdateEnableSetCommission() *AppPowerRentalUpsert {
	u.SetExcluded(apppowerrental.FieldEnableSetCommission)
	return u
}

// ClearEnableSetCommission clears the value of the "enable_set_commission" field.
func (u *AppPowerRentalUpsert) ClearEnableSetCommission() *AppPowerRentalUpsert {
	u.SetNull(apppowerrental.FieldEnableSetCommission)
	return u
}

// SetMinOrderAmount sets the "min_order_amount" field.
func (u *AppPowerRentalUpsert) SetMinOrderAmount(v decimal.Decimal) *AppPowerRentalUpsert {
	u.Set(apppowerrental.FieldMinOrderAmount, v)
	return u
}

// UpdateMinOrderAmount sets the "min_order_amount" field to the value that was provided on create.
func (u *AppPowerRentalUpsert) UpdateMinOrderAmount() *AppPowerRentalUpsert {
	u.SetExcluded(apppowerrental.FieldMinOrderAmount)
	return u
}

// ClearMinOrderAmount clears the value of the "min_order_amount" field.
func (u *AppPowerRentalUpsert) ClearMinOrderAmount() *AppPowerRentalUpsert {
	u.SetNull(apppowerrental.FieldMinOrderAmount)
	return u
}

// SetMaxOrderAmount sets the "max_order_amount" field.
func (u *AppPowerRentalUpsert) SetMaxOrderAmount(v decimal.Decimal) *AppPowerRentalUpsert {
	u.Set(apppowerrental.FieldMaxOrderAmount, v)
	return u
}

// UpdateMaxOrderAmount sets the "max_order_amount" field to the value that was provided on create.
func (u *AppPowerRentalUpsert) UpdateMaxOrderAmount() *AppPowerRentalUpsert {
	u.SetExcluded(apppowerrental.FieldMaxOrderAmount)
	return u
}

// ClearMaxOrderAmount clears the value of the "max_order_amount" field.
func (u *AppPowerRentalUpsert) ClearMaxOrderAmount() *AppPowerRentalUpsert {
	u.SetNull(apppowerrental.FieldMaxOrderAmount)
	return u
}

// SetMaxUserAmount sets the "max_user_amount" field.
func (u *AppPowerRentalUpsert) SetMaxUserAmount(v decimal.Decimal) *AppPowerRentalUpsert {
	u.Set(apppowerrental.FieldMaxUserAmount, v)
	return u
}

// UpdateMaxUserAmount sets the "max_user_amount" field to the value that was provided on create.
func (u *AppPowerRentalUpsert) UpdateMaxUserAmount() *AppPowerRentalUpsert {
	u.SetExcluded(apppowerrental.FieldMaxUserAmount)
	return u
}

// ClearMaxUserAmount clears the value of the "max_user_amount" field.
func (u *AppPowerRentalUpsert) ClearMaxUserAmount() *AppPowerRentalUpsert {
	u.SetNull(apppowerrental.FieldMaxUserAmount)
	return u
}

// SetMinOrderDurationSeconds sets the "min_order_duration_seconds" field.
func (u *AppPowerRentalUpsert) SetMinOrderDurationSeconds(v uint32) *AppPowerRentalUpsert {
	u.Set(apppowerrental.FieldMinOrderDurationSeconds, v)
	return u
}

// UpdateMinOrderDurationSeconds sets the "min_order_duration_seconds" field to the value that was provided on create.
func (u *AppPowerRentalUpsert) UpdateMinOrderDurationSeconds() *AppPowerRentalUpsert {
	u.SetExcluded(apppowerrental.FieldMinOrderDurationSeconds)
	return u
}

// AddMinOrderDurationSeconds adds v to the "min_order_duration_seconds" field.
func (u *AppPowerRentalUpsert) AddMinOrderDurationSeconds(v uint32) *AppPowerRentalUpsert {
	u.Add(apppowerrental.FieldMinOrderDurationSeconds, v)
	return u
}

// ClearMinOrderDurationSeconds clears the value of the "min_order_duration_seconds" field.
func (u *AppPowerRentalUpsert) ClearMinOrderDurationSeconds() *AppPowerRentalUpsert {
	u.SetNull(apppowerrental.FieldMinOrderDurationSeconds)
	return u
}

// SetMaxOrderDurationSeconds sets the "max_order_duration_seconds" field.
func (u *AppPowerRentalUpsert) SetMaxOrderDurationSeconds(v uint32) *AppPowerRentalUpsert {
	u.Set(apppowerrental.FieldMaxOrderDurationSeconds, v)
	return u
}

// UpdateMaxOrderDurationSeconds sets the "max_order_duration_seconds" field to the value that was provided on create.
func (u *AppPowerRentalUpsert) UpdateMaxOrderDurationSeconds() *AppPowerRentalUpsert {
	u.SetExcluded(apppowerrental.FieldMaxOrderDurationSeconds)
	return u
}

// AddMaxOrderDurationSeconds adds v to the "max_order_duration_seconds" field.
func (u *AppPowerRentalUpsert) AddMaxOrderDurationSeconds(v uint32) *AppPowerRentalUpsert {
	u.Add(apppowerrental.FieldMaxOrderDurationSeconds, v)
	return u
}

// ClearMaxOrderDurationSeconds clears the value of the "max_order_duration_seconds" field.
func (u *AppPowerRentalUpsert) ClearMaxOrderDurationSeconds() *AppPowerRentalUpsert {
	u.SetNull(apppowerrental.FieldMaxOrderDurationSeconds)
	return u
}

// SetUnitPrice sets the "unit_price" field.
func (u *AppPowerRentalUpsert) SetUnitPrice(v decimal.Decimal) *AppPowerRentalUpsert {
	u.Set(apppowerrental.FieldUnitPrice, v)
	return u
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *AppPowerRentalUpsert) UpdateUnitPrice() *AppPowerRentalUpsert {
	u.SetExcluded(apppowerrental.FieldUnitPrice)
	return u
}

// ClearUnitPrice clears the value of the "unit_price" field.
func (u *AppPowerRentalUpsert) ClearUnitPrice() *AppPowerRentalUpsert {
	u.SetNull(apppowerrental.FieldUnitPrice)
	return u
}

// SetSaleStartAt sets the "sale_start_at" field.
func (u *AppPowerRentalUpsert) SetSaleStartAt(v uint32) *AppPowerRentalUpsert {
	u.Set(apppowerrental.FieldSaleStartAt, v)
	return u
}

// UpdateSaleStartAt sets the "sale_start_at" field to the value that was provided on create.
func (u *AppPowerRentalUpsert) UpdateSaleStartAt() *AppPowerRentalUpsert {
	u.SetExcluded(apppowerrental.FieldSaleStartAt)
	return u
}

// AddSaleStartAt adds v to the "sale_start_at" field.
func (u *AppPowerRentalUpsert) AddSaleStartAt(v uint32) *AppPowerRentalUpsert {
	u.Add(apppowerrental.FieldSaleStartAt, v)
	return u
}

// ClearSaleStartAt clears the value of the "sale_start_at" field.
func (u *AppPowerRentalUpsert) ClearSaleStartAt() *AppPowerRentalUpsert {
	u.SetNull(apppowerrental.FieldSaleStartAt)
	return u
}

// SetSaleEndAt sets the "sale_end_at" field.
func (u *AppPowerRentalUpsert) SetSaleEndAt(v uint32) *AppPowerRentalUpsert {
	u.Set(apppowerrental.FieldSaleEndAt, v)
	return u
}

// UpdateSaleEndAt sets the "sale_end_at" field to the value that was provided on create.
func (u *AppPowerRentalUpsert) UpdateSaleEndAt() *AppPowerRentalUpsert {
	u.SetExcluded(apppowerrental.FieldSaleEndAt)
	return u
}

// AddSaleEndAt adds v to the "sale_end_at" field.
func (u *AppPowerRentalUpsert) AddSaleEndAt(v uint32) *AppPowerRentalUpsert {
	u.Add(apppowerrental.FieldSaleEndAt, v)
	return u
}

// ClearSaleEndAt clears the value of the "sale_end_at" field.
func (u *AppPowerRentalUpsert) ClearSaleEndAt() *AppPowerRentalUpsert {
	u.SetNull(apppowerrental.FieldSaleEndAt)
	return u
}

// SetSaleMode sets the "sale_mode" field.
func (u *AppPowerRentalUpsert) SetSaleMode(v string) *AppPowerRentalUpsert {
	u.Set(apppowerrental.FieldSaleMode, v)
	return u
}

// UpdateSaleMode sets the "sale_mode" field to the value that was provided on create.
func (u *AppPowerRentalUpsert) UpdateSaleMode() *AppPowerRentalUpsert {
	u.SetExcluded(apppowerrental.FieldSaleMode)
	return u
}

// ClearSaleMode clears the value of the "sale_mode" field.
func (u *AppPowerRentalUpsert) ClearSaleMode() *AppPowerRentalUpsert {
	u.SetNull(apppowerrental.FieldSaleMode)
	return u
}

// SetFixedDuration sets the "fixed_duration" field.
func (u *AppPowerRentalUpsert) SetFixedDuration(v bool) *AppPowerRentalUpsert {
	u.Set(apppowerrental.FieldFixedDuration, v)
	return u
}

// UpdateFixedDuration sets the "fixed_duration" field to the value that was provided on create.
func (u *AppPowerRentalUpsert) UpdateFixedDuration() *AppPowerRentalUpsert {
	u.SetExcluded(apppowerrental.FieldFixedDuration)
	return u
}

// ClearFixedDuration clears the value of the "fixed_duration" field.
func (u *AppPowerRentalUpsert) ClearFixedDuration() *AppPowerRentalUpsert {
	u.SetNull(apppowerrental.FieldFixedDuration)
	return u
}

// SetPackageWithRequireds sets the "package_with_requireds" field.
func (u *AppPowerRentalUpsert) SetPackageWithRequireds(v bool) *AppPowerRentalUpsert {
	u.Set(apppowerrental.FieldPackageWithRequireds, v)
	return u
}

// UpdatePackageWithRequireds sets the "package_with_requireds" field to the value that was provided on create.
func (u *AppPowerRentalUpsert) UpdatePackageWithRequireds() *AppPowerRentalUpsert {
	u.SetExcluded(apppowerrental.FieldPackageWithRequireds)
	return u
}

// ClearPackageWithRequireds clears the value of the "package_with_requireds" field.
func (u *AppPowerRentalUpsert) ClearPackageWithRequireds() *AppPowerRentalUpsert {
	u.SetNull(apppowerrental.FieldPackageWithRequireds)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppPowerRental.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(apppowerrental.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppPowerRentalUpsertOne) UpdateNewValues() *AppPowerRentalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(apppowerrental.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppPowerRental.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppPowerRentalUpsertOne) Ignore() *AppPowerRentalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppPowerRentalUpsertOne) DoNothing() *AppPowerRentalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppPowerRentalCreate.OnConflict
// documentation for more info.
func (u *AppPowerRentalUpsertOne) Update(set func(*AppPowerRentalUpsert)) *AppPowerRentalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppPowerRentalUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppPowerRentalUpsertOne) SetEntID(v uuid.UUID) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppPowerRentalUpsertOne) UpdateEntID() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AppPowerRentalUpsertOne) SetCreatedAt(v uint32) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppPowerRentalUpsertOne) AddCreatedAt(v uint32) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppPowerRentalUpsertOne) UpdateCreatedAt() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppPowerRentalUpsertOne) SetUpdatedAt(v uint32) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppPowerRentalUpsertOne) AddUpdatedAt(v uint32) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppPowerRentalUpsertOne) UpdateUpdatedAt() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppPowerRentalUpsertOne) SetDeletedAt(v uint32) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppPowerRentalUpsertOne) AddDeletedAt(v uint32) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppPowerRentalUpsertOne) UpdateDeletedAt() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppPowerRentalUpsertOne) SetAppGoodID(v uuid.UUID) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppPowerRentalUpsertOne) UpdateAppGoodID() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppPowerRentalUpsertOne) ClearAppGoodID() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearAppGoodID()
	})
}

// SetServiceStartAt sets the "service_start_at" field.
func (u *AppPowerRentalUpsertOne) SetServiceStartAt(v uint32) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetServiceStartAt(v)
	})
}

// AddServiceStartAt adds v to the "service_start_at" field.
func (u *AppPowerRentalUpsertOne) AddServiceStartAt(v uint32) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.AddServiceStartAt(v)
	})
}

// UpdateServiceStartAt sets the "service_start_at" field to the value that was provided on create.
func (u *AppPowerRentalUpsertOne) UpdateServiceStartAt() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateServiceStartAt()
	})
}

// ClearServiceStartAt clears the value of the "service_start_at" field.
func (u *AppPowerRentalUpsertOne) ClearServiceStartAt() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearServiceStartAt()
	})
}

// SetStartMode sets the "start_mode" field.
func (u *AppPowerRentalUpsertOne) SetStartMode(v string) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetStartMode(v)
	})
}

// UpdateStartMode sets the "start_mode" field to the value that was provided on create.
func (u *AppPowerRentalUpsertOne) UpdateStartMode() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateStartMode()
	})
}

// ClearStartMode clears the value of the "start_mode" field.
func (u *AppPowerRentalUpsertOne) ClearStartMode() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearStartMode()
	})
}

// SetCancelMode sets the "cancel_mode" field.
func (u *AppPowerRentalUpsertOne) SetCancelMode(v string) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetCancelMode(v)
	})
}

// UpdateCancelMode sets the "cancel_mode" field to the value that was provided on create.
func (u *AppPowerRentalUpsertOne) UpdateCancelMode() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateCancelMode()
	})
}

// ClearCancelMode clears the value of the "cancel_mode" field.
func (u *AppPowerRentalUpsertOne) ClearCancelMode() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearCancelMode()
	})
}

// SetCancelableBeforeStartSeconds sets the "cancelable_before_start_seconds" field.
func (u *AppPowerRentalUpsertOne) SetCancelableBeforeStartSeconds(v uint32) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetCancelableBeforeStartSeconds(v)
	})
}

// AddCancelableBeforeStartSeconds adds v to the "cancelable_before_start_seconds" field.
func (u *AppPowerRentalUpsertOne) AddCancelableBeforeStartSeconds(v uint32) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.AddCancelableBeforeStartSeconds(v)
	})
}

// UpdateCancelableBeforeStartSeconds sets the "cancelable_before_start_seconds" field to the value that was provided on create.
func (u *AppPowerRentalUpsertOne) UpdateCancelableBeforeStartSeconds() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateCancelableBeforeStartSeconds()
	})
}

// ClearCancelableBeforeStartSeconds clears the value of the "cancelable_before_start_seconds" field.
func (u *AppPowerRentalUpsertOne) ClearCancelableBeforeStartSeconds() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearCancelableBeforeStartSeconds()
	})
}

// SetEnableSetCommission sets the "enable_set_commission" field.
func (u *AppPowerRentalUpsertOne) SetEnableSetCommission(v bool) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetEnableSetCommission(v)
	})
}

// UpdateEnableSetCommission sets the "enable_set_commission" field to the value that was provided on create.
func (u *AppPowerRentalUpsertOne) UpdateEnableSetCommission() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateEnableSetCommission()
	})
}

// ClearEnableSetCommission clears the value of the "enable_set_commission" field.
func (u *AppPowerRentalUpsertOne) ClearEnableSetCommission() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearEnableSetCommission()
	})
}

// SetMinOrderAmount sets the "min_order_amount" field.
func (u *AppPowerRentalUpsertOne) SetMinOrderAmount(v decimal.Decimal) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetMinOrderAmount(v)
	})
}

// UpdateMinOrderAmount sets the "min_order_amount" field to the value that was provided on create.
func (u *AppPowerRentalUpsertOne) UpdateMinOrderAmount() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateMinOrderAmount()
	})
}

// ClearMinOrderAmount clears the value of the "min_order_amount" field.
func (u *AppPowerRentalUpsertOne) ClearMinOrderAmount() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearMinOrderAmount()
	})
}

// SetMaxOrderAmount sets the "max_order_amount" field.
func (u *AppPowerRentalUpsertOne) SetMaxOrderAmount(v decimal.Decimal) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetMaxOrderAmount(v)
	})
}

// UpdateMaxOrderAmount sets the "max_order_amount" field to the value that was provided on create.
func (u *AppPowerRentalUpsertOne) UpdateMaxOrderAmount() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateMaxOrderAmount()
	})
}

// ClearMaxOrderAmount clears the value of the "max_order_amount" field.
func (u *AppPowerRentalUpsertOne) ClearMaxOrderAmount() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearMaxOrderAmount()
	})
}

// SetMaxUserAmount sets the "max_user_amount" field.
func (u *AppPowerRentalUpsertOne) SetMaxUserAmount(v decimal.Decimal) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetMaxUserAmount(v)
	})
}

// UpdateMaxUserAmount sets the "max_user_amount" field to the value that was provided on create.
func (u *AppPowerRentalUpsertOne) UpdateMaxUserAmount() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateMaxUserAmount()
	})
}

// ClearMaxUserAmount clears the value of the "max_user_amount" field.
func (u *AppPowerRentalUpsertOne) ClearMaxUserAmount() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearMaxUserAmount()
	})
}

// SetMinOrderDurationSeconds sets the "min_order_duration_seconds" field.
func (u *AppPowerRentalUpsertOne) SetMinOrderDurationSeconds(v uint32) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetMinOrderDurationSeconds(v)
	})
}

// AddMinOrderDurationSeconds adds v to the "min_order_duration_seconds" field.
func (u *AppPowerRentalUpsertOne) AddMinOrderDurationSeconds(v uint32) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.AddMinOrderDurationSeconds(v)
	})
}

// UpdateMinOrderDurationSeconds sets the "min_order_duration_seconds" field to the value that was provided on create.
func (u *AppPowerRentalUpsertOne) UpdateMinOrderDurationSeconds() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateMinOrderDurationSeconds()
	})
}

// ClearMinOrderDurationSeconds clears the value of the "min_order_duration_seconds" field.
func (u *AppPowerRentalUpsertOne) ClearMinOrderDurationSeconds() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearMinOrderDurationSeconds()
	})
}

// SetMaxOrderDurationSeconds sets the "max_order_duration_seconds" field.
func (u *AppPowerRentalUpsertOne) SetMaxOrderDurationSeconds(v uint32) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetMaxOrderDurationSeconds(v)
	})
}

// AddMaxOrderDurationSeconds adds v to the "max_order_duration_seconds" field.
func (u *AppPowerRentalUpsertOne) AddMaxOrderDurationSeconds(v uint32) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.AddMaxOrderDurationSeconds(v)
	})
}

// UpdateMaxOrderDurationSeconds sets the "max_order_duration_seconds" field to the value that was provided on create.
func (u *AppPowerRentalUpsertOne) UpdateMaxOrderDurationSeconds() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateMaxOrderDurationSeconds()
	})
}

// ClearMaxOrderDurationSeconds clears the value of the "max_order_duration_seconds" field.
func (u *AppPowerRentalUpsertOne) ClearMaxOrderDurationSeconds() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearMaxOrderDurationSeconds()
	})
}

// SetUnitPrice sets the "unit_price" field.
func (u *AppPowerRentalUpsertOne) SetUnitPrice(v decimal.Decimal) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetUnitPrice(v)
	})
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *AppPowerRentalUpsertOne) UpdateUnitPrice() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateUnitPrice()
	})
}

// ClearUnitPrice clears the value of the "unit_price" field.
func (u *AppPowerRentalUpsertOne) ClearUnitPrice() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearUnitPrice()
	})
}

// SetSaleStartAt sets the "sale_start_at" field.
func (u *AppPowerRentalUpsertOne) SetSaleStartAt(v uint32) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetSaleStartAt(v)
	})
}

// AddSaleStartAt adds v to the "sale_start_at" field.
func (u *AppPowerRentalUpsertOne) AddSaleStartAt(v uint32) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.AddSaleStartAt(v)
	})
}

// UpdateSaleStartAt sets the "sale_start_at" field to the value that was provided on create.
func (u *AppPowerRentalUpsertOne) UpdateSaleStartAt() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateSaleStartAt()
	})
}

// ClearSaleStartAt clears the value of the "sale_start_at" field.
func (u *AppPowerRentalUpsertOne) ClearSaleStartAt() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearSaleStartAt()
	})
}

// SetSaleEndAt sets the "sale_end_at" field.
func (u *AppPowerRentalUpsertOne) SetSaleEndAt(v uint32) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetSaleEndAt(v)
	})
}

// AddSaleEndAt adds v to the "sale_end_at" field.
func (u *AppPowerRentalUpsertOne) AddSaleEndAt(v uint32) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.AddSaleEndAt(v)
	})
}

// UpdateSaleEndAt sets the "sale_end_at" field to the value that was provided on create.
func (u *AppPowerRentalUpsertOne) UpdateSaleEndAt() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateSaleEndAt()
	})
}

// ClearSaleEndAt clears the value of the "sale_end_at" field.
func (u *AppPowerRentalUpsertOne) ClearSaleEndAt() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearSaleEndAt()
	})
}

// SetSaleMode sets the "sale_mode" field.
func (u *AppPowerRentalUpsertOne) SetSaleMode(v string) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetSaleMode(v)
	})
}

// UpdateSaleMode sets the "sale_mode" field to the value that was provided on create.
func (u *AppPowerRentalUpsertOne) UpdateSaleMode() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateSaleMode()
	})
}

// ClearSaleMode clears the value of the "sale_mode" field.
func (u *AppPowerRentalUpsertOne) ClearSaleMode() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearSaleMode()
	})
}

// SetFixedDuration sets the "fixed_duration" field.
func (u *AppPowerRentalUpsertOne) SetFixedDuration(v bool) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetFixedDuration(v)
	})
}

// UpdateFixedDuration sets the "fixed_duration" field to the value that was provided on create.
func (u *AppPowerRentalUpsertOne) UpdateFixedDuration() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateFixedDuration()
	})
}

// ClearFixedDuration clears the value of the "fixed_duration" field.
func (u *AppPowerRentalUpsertOne) ClearFixedDuration() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearFixedDuration()
	})
}

// SetPackageWithRequireds sets the "package_with_requireds" field.
func (u *AppPowerRentalUpsertOne) SetPackageWithRequireds(v bool) *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetPackageWithRequireds(v)
	})
}

// UpdatePackageWithRequireds sets the "package_with_requireds" field to the value that was provided on create.
func (u *AppPowerRentalUpsertOne) UpdatePackageWithRequireds() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdatePackageWithRequireds()
	})
}

// ClearPackageWithRequireds clears the value of the "package_with_requireds" field.
func (u *AppPowerRentalUpsertOne) ClearPackageWithRequireds() *AppPowerRentalUpsertOne {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearPackageWithRequireds()
	})
}

// Exec executes the query.
func (u *AppPowerRentalUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppPowerRentalCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppPowerRentalUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppPowerRentalUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppPowerRentalUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppPowerRentalCreateBulk is the builder for creating many AppPowerRental entities in bulk.
type AppPowerRentalCreateBulk struct {
	config
	err      error
	builders []*AppPowerRentalCreate
	conflict []sql.ConflictOption
}

// Save creates the AppPowerRental entities in the database.
func (aprcb *AppPowerRentalCreateBulk) Save(ctx context.Context) ([]*AppPowerRental, error) {
	if aprcb.err != nil {
		return nil, aprcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aprcb.builders))
	nodes := make([]*AppPowerRental, len(aprcb.builders))
	mutators := make([]Mutator, len(aprcb.builders))
	for i := range aprcb.builders {
		func(i int, root context.Context) {
			builder := aprcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppPowerRentalMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aprcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aprcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aprcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aprcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aprcb *AppPowerRentalCreateBulk) SaveX(ctx context.Context) []*AppPowerRental {
	v, err := aprcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aprcb *AppPowerRentalCreateBulk) Exec(ctx context.Context) error {
	_, err := aprcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aprcb *AppPowerRentalCreateBulk) ExecX(ctx context.Context) {
	if err := aprcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppPowerRental.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppPowerRentalUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (aprcb *AppPowerRentalCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppPowerRentalUpsertBulk {
	aprcb.conflict = opts
	return &AppPowerRentalUpsertBulk{
		create: aprcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppPowerRental.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aprcb *AppPowerRentalCreateBulk) OnConflictColumns(columns ...string) *AppPowerRentalUpsertBulk {
	aprcb.conflict = append(aprcb.conflict, sql.ConflictColumns(columns...))
	return &AppPowerRentalUpsertBulk{
		create: aprcb,
	}
}

// AppPowerRentalUpsertBulk is the builder for "upsert"-ing
// a bulk of AppPowerRental nodes.
type AppPowerRentalUpsertBulk struct {
	create *AppPowerRentalCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppPowerRental.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(apppowerrental.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppPowerRentalUpsertBulk) UpdateNewValues() *AppPowerRentalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(apppowerrental.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppPowerRental.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppPowerRentalUpsertBulk) Ignore() *AppPowerRentalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppPowerRentalUpsertBulk) DoNothing() *AppPowerRentalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppPowerRentalCreateBulk.OnConflict
// documentation for more info.
func (u *AppPowerRentalUpsertBulk) Update(set func(*AppPowerRentalUpsert)) *AppPowerRentalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppPowerRentalUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppPowerRentalUpsertBulk) SetEntID(v uuid.UUID) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppPowerRentalUpsertBulk) UpdateEntID() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AppPowerRentalUpsertBulk) SetCreatedAt(v uint32) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppPowerRentalUpsertBulk) AddCreatedAt(v uint32) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppPowerRentalUpsertBulk) UpdateCreatedAt() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppPowerRentalUpsertBulk) SetUpdatedAt(v uint32) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppPowerRentalUpsertBulk) AddUpdatedAt(v uint32) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppPowerRentalUpsertBulk) UpdateUpdatedAt() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppPowerRentalUpsertBulk) SetDeletedAt(v uint32) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppPowerRentalUpsertBulk) AddDeletedAt(v uint32) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppPowerRentalUpsertBulk) UpdateDeletedAt() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppPowerRentalUpsertBulk) SetAppGoodID(v uuid.UUID) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppPowerRentalUpsertBulk) UpdateAppGoodID() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppPowerRentalUpsertBulk) ClearAppGoodID() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearAppGoodID()
	})
}

// SetServiceStartAt sets the "service_start_at" field.
func (u *AppPowerRentalUpsertBulk) SetServiceStartAt(v uint32) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetServiceStartAt(v)
	})
}

// AddServiceStartAt adds v to the "service_start_at" field.
func (u *AppPowerRentalUpsertBulk) AddServiceStartAt(v uint32) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.AddServiceStartAt(v)
	})
}

// UpdateServiceStartAt sets the "service_start_at" field to the value that was provided on create.
func (u *AppPowerRentalUpsertBulk) UpdateServiceStartAt() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateServiceStartAt()
	})
}

// ClearServiceStartAt clears the value of the "service_start_at" field.
func (u *AppPowerRentalUpsertBulk) ClearServiceStartAt() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearServiceStartAt()
	})
}

// SetStartMode sets the "start_mode" field.
func (u *AppPowerRentalUpsertBulk) SetStartMode(v string) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetStartMode(v)
	})
}

// UpdateStartMode sets the "start_mode" field to the value that was provided on create.
func (u *AppPowerRentalUpsertBulk) UpdateStartMode() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateStartMode()
	})
}

// ClearStartMode clears the value of the "start_mode" field.
func (u *AppPowerRentalUpsertBulk) ClearStartMode() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearStartMode()
	})
}

// SetCancelMode sets the "cancel_mode" field.
func (u *AppPowerRentalUpsertBulk) SetCancelMode(v string) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetCancelMode(v)
	})
}

// UpdateCancelMode sets the "cancel_mode" field to the value that was provided on create.
func (u *AppPowerRentalUpsertBulk) UpdateCancelMode() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateCancelMode()
	})
}

// ClearCancelMode clears the value of the "cancel_mode" field.
func (u *AppPowerRentalUpsertBulk) ClearCancelMode() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearCancelMode()
	})
}

// SetCancelableBeforeStartSeconds sets the "cancelable_before_start_seconds" field.
func (u *AppPowerRentalUpsertBulk) SetCancelableBeforeStartSeconds(v uint32) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetCancelableBeforeStartSeconds(v)
	})
}

// AddCancelableBeforeStartSeconds adds v to the "cancelable_before_start_seconds" field.
func (u *AppPowerRentalUpsertBulk) AddCancelableBeforeStartSeconds(v uint32) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.AddCancelableBeforeStartSeconds(v)
	})
}

// UpdateCancelableBeforeStartSeconds sets the "cancelable_before_start_seconds" field to the value that was provided on create.
func (u *AppPowerRentalUpsertBulk) UpdateCancelableBeforeStartSeconds() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateCancelableBeforeStartSeconds()
	})
}

// ClearCancelableBeforeStartSeconds clears the value of the "cancelable_before_start_seconds" field.
func (u *AppPowerRentalUpsertBulk) ClearCancelableBeforeStartSeconds() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearCancelableBeforeStartSeconds()
	})
}

// SetEnableSetCommission sets the "enable_set_commission" field.
func (u *AppPowerRentalUpsertBulk) SetEnableSetCommission(v bool) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetEnableSetCommission(v)
	})
}

// UpdateEnableSetCommission sets the "enable_set_commission" field to the value that was provided on create.
func (u *AppPowerRentalUpsertBulk) UpdateEnableSetCommission() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateEnableSetCommission()
	})
}

// ClearEnableSetCommission clears the value of the "enable_set_commission" field.
func (u *AppPowerRentalUpsertBulk) ClearEnableSetCommission() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearEnableSetCommission()
	})
}

// SetMinOrderAmount sets the "min_order_amount" field.
func (u *AppPowerRentalUpsertBulk) SetMinOrderAmount(v decimal.Decimal) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetMinOrderAmount(v)
	})
}

// UpdateMinOrderAmount sets the "min_order_amount" field to the value that was provided on create.
func (u *AppPowerRentalUpsertBulk) UpdateMinOrderAmount() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateMinOrderAmount()
	})
}

// ClearMinOrderAmount clears the value of the "min_order_amount" field.
func (u *AppPowerRentalUpsertBulk) ClearMinOrderAmount() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearMinOrderAmount()
	})
}

// SetMaxOrderAmount sets the "max_order_amount" field.
func (u *AppPowerRentalUpsertBulk) SetMaxOrderAmount(v decimal.Decimal) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetMaxOrderAmount(v)
	})
}

// UpdateMaxOrderAmount sets the "max_order_amount" field to the value that was provided on create.
func (u *AppPowerRentalUpsertBulk) UpdateMaxOrderAmount() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateMaxOrderAmount()
	})
}

// ClearMaxOrderAmount clears the value of the "max_order_amount" field.
func (u *AppPowerRentalUpsertBulk) ClearMaxOrderAmount() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearMaxOrderAmount()
	})
}

// SetMaxUserAmount sets the "max_user_amount" field.
func (u *AppPowerRentalUpsertBulk) SetMaxUserAmount(v decimal.Decimal) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetMaxUserAmount(v)
	})
}

// UpdateMaxUserAmount sets the "max_user_amount" field to the value that was provided on create.
func (u *AppPowerRentalUpsertBulk) UpdateMaxUserAmount() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateMaxUserAmount()
	})
}

// ClearMaxUserAmount clears the value of the "max_user_amount" field.
func (u *AppPowerRentalUpsertBulk) ClearMaxUserAmount() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearMaxUserAmount()
	})
}

// SetMinOrderDurationSeconds sets the "min_order_duration_seconds" field.
func (u *AppPowerRentalUpsertBulk) SetMinOrderDurationSeconds(v uint32) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetMinOrderDurationSeconds(v)
	})
}

// AddMinOrderDurationSeconds adds v to the "min_order_duration_seconds" field.
func (u *AppPowerRentalUpsertBulk) AddMinOrderDurationSeconds(v uint32) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.AddMinOrderDurationSeconds(v)
	})
}

// UpdateMinOrderDurationSeconds sets the "min_order_duration_seconds" field to the value that was provided on create.
func (u *AppPowerRentalUpsertBulk) UpdateMinOrderDurationSeconds() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateMinOrderDurationSeconds()
	})
}

// ClearMinOrderDurationSeconds clears the value of the "min_order_duration_seconds" field.
func (u *AppPowerRentalUpsertBulk) ClearMinOrderDurationSeconds() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearMinOrderDurationSeconds()
	})
}

// SetMaxOrderDurationSeconds sets the "max_order_duration_seconds" field.
func (u *AppPowerRentalUpsertBulk) SetMaxOrderDurationSeconds(v uint32) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetMaxOrderDurationSeconds(v)
	})
}

// AddMaxOrderDurationSeconds adds v to the "max_order_duration_seconds" field.
func (u *AppPowerRentalUpsertBulk) AddMaxOrderDurationSeconds(v uint32) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.AddMaxOrderDurationSeconds(v)
	})
}

// UpdateMaxOrderDurationSeconds sets the "max_order_duration_seconds" field to the value that was provided on create.
func (u *AppPowerRentalUpsertBulk) UpdateMaxOrderDurationSeconds() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateMaxOrderDurationSeconds()
	})
}

// ClearMaxOrderDurationSeconds clears the value of the "max_order_duration_seconds" field.
func (u *AppPowerRentalUpsertBulk) ClearMaxOrderDurationSeconds() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearMaxOrderDurationSeconds()
	})
}

// SetUnitPrice sets the "unit_price" field.
func (u *AppPowerRentalUpsertBulk) SetUnitPrice(v decimal.Decimal) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetUnitPrice(v)
	})
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *AppPowerRentalUpsertBulk) UpdateUnitPrice() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateUnitPrice()
	})
}

// ClearUnitPrice clears the value of the "unit_price" field.
func (u *AppPowerRentalUpsertBulk) ClearUnitPrice() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearUnitPrice()
	})
}

// SetSaleStartAt sets the "sale_start_at" field.
func (u *AppPowerRentalUpsertBulk) SetSaleStartAt(v uint32) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetSaleStartAt(v)
	})
}

// AddSaleStartAt adds v to the "sale_start_at" field.
func (u *AppPowerRentalUpsertBulk) AddSaleStartAt(v uint32) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.AddSaleStartAt(v)
	})
}

// UpdateSaleStartAt sets the "sale_start_at" field to the value that was provided on create.
func (u *AppPowerRentalUpsertBulk) UpdateSaleStartAt() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateSaleStartAt()
	})
}

// ClearSaleStartAt clears the value of the "sale_start_at" field.
func (u *AppPowerRentalUpsertBulk) ClearSaleStartAt() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearSaleStartAt()
	})
}

// SetSaleEndAt sets the "sale_end_at" field.
func (u *AppPowerRentalUpsertBulk) SetSaleEndAt(v uint32) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetSaleEndAt(v)
	})
}

// AddSaleEndAt adds v to the "sale_end_at" field.
func (u *AppPowerRentalUpsertBulk) AddSaleEndAt(v uint32) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.AddSaleEndAt(v)
	})
}

// UpdateSaleEndAt sets the "sale_end_at" field to the value that was provided on create.
func (u *AppPowerRentalUpsertBulk) UpdateSaleEndAt() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateSaleEndAt()
	})
}

// ClearSaleEndAt clears the value of the "sale_end_at" field.
func (u *AppPowerRentalUpsertBulk) ClearSaleEndAt() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearSaleEndAt()
	})
}

// SetSaleMode sets the "sale_mode" field.
func (u *AppPowerRentalUpsertBulk) SetSaleMode(v string) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetSaleMode(v)
	})
}

// UpdateSaleMode sets the "sale_mode" field to the value that was provided on create.
func (u *AppPowerRentalUpsertBulk) UpdateSaleMode() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateSaleMode()
	})
}

// ClearSaleMode clears the value of the "sale_mode" field.
func (u *AppPowerRentalUpsertBulk) ClearSaleMode() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearSaleMode()
	})
}

// SetFixedDuration sets the "fixed_duration" field.
func (u *AppPowerRentalUpsertBulk) SetFixedDuration(v bool) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetFixedDuration(v)
	})
}

// UpdateFixedDuration sets the "fixed_duration" field to the value that was provided on create.
func (u *AppPowerRentalUpsertBulk) UpdateFixedDuration() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdateFixedDuration()
	})
}

// ClearFixedDuration clears the value of the "fixed_duration" field.
func (u *AppPowerRentalUpsertBulk) ClearFixedDuration() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearFixedDuration()
	})
}

// SetPackageWithRequireds sets the "package_with_requireds" field.
func (u *AppPowerRentalUpsertBulk) SetPackageWithRequireds(v bool) *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.SetPackageWithRequireds(v)
	})
}

// UpdatePackageWithRequireds sets the "package_with_requireds" field to the value that was provided on create.
func (u *AppPowerRentalUpsertBulk) UpdatePackageWithRequireds() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.UpdatePackageWithRequireds()
	})
}

// ClearPackageWithRequireds clears the value of the "package_with_requireds" field.
func (u *AppPowerRentalUpsertBulk) ClearPackageWithRequireds() *AppPowerRentalUpsertBulk {
	return u.Update(func(s *AppPowerRentalUpsert) {
		s.ClearPackageWithRequireds()
	})
}

// Exec executes the query.
func (u *AppPowerRentalUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the AppPowerRentalCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppPowerRentalCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppPowerRentalUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

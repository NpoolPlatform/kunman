// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"

	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated"

	"entgo.io/ent/entql"
	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns a formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return privacy.Allowf(format, a...)
}

// Denyf returns a formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return privacy.Denyf(format, a...)
}

// Skipf returns a formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return privacy.Skipf(format, a...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
	// MutationRuleFunc type is an adapter which allows the use of
	// ordinary functions as mutation rules.
	MutationRuleFunc = privacy.MutationRuleFunc

	// QueryMutationRule is an interface which groups query and mutation rules.
	QueryMutationRule = privacy.QueryMutationRule
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, generated.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	return f(ctx, q)
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return privacy.AlwaysAllowRule()
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return privacy.AlwaysDenyRule()
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return privacy.ContextQueryMutationRule(eval)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op generated.Op) MutationRule {
	return privacy.OnMutationOperation(rule, op)
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op generated.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m generated.Mutation) error {
		return Denyf("generated/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The AppDefaultGoodQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppDefaultGoodQueryRuleFunc func(context.Context, *generated.AppDefaultGoodQuery) error

// EvalQuery return f(ctx, q).
func (f AppDefaultGoodQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppDefaultGoodQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppDefaultGoodQuery", q)
}

// The AppDefaultGoodMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppDefaultGoodMutationRuleFunc func(context.Context, *generated.AppDefaultGoodMutation) error

// EvalMutation calls f(ctx, m).
func (f AppDefaultGoodMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppDefaultGoodMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppDefaultGoodMutation", m)
}

// The AppDelegatedStakingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppDelegatedStakingQueryRuleFunc func(context.Context, *generated.AppDelegatedStakingQuery) error

// EvalQuery return f(ctx, q).
func (f AppDelegatedStakingQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppDelegatedStakingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppDelegatedStakingQuery", q)
}

// The AppDelegatedStakingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppDelegatedStakingMutationRuleFunc func(context.Context, *generated.AppDelegatedStakingMutation) error

// EvalMutation calls f(ctx, m).
func (f AppDelegatedStakingMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppDelegatedStakingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppDelegatedStakingMutation", m)
}

// The AppFeeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppFeeQueryRuleFunc func(context.Context, *generated.AppFeeQuery) error

// EvalQuery return f(ctx, q).
func (f AppFeeQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppFeeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppFeeQuery", q)
}

// The AppFeeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppFeeMutationRuleFunc func(context.Context, *generated.AppFeeMutation) error

// EvalMutation calls f(ctx, m).
func (f AppFeeMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppFeeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppFeeMutation", m)
}

// The AppGoodQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppGoodQueryRuleFunc func(context.Context, *generated.AppGoodQuery) error

// EvalQuery return f(ctx, q).
func (f AppGoodQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppGoodQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppGoodQuery", q)
}

// The AppGoodMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppGoodMutationRuleFunc func(context.Context, *generated.AppGoodMutation) error

// EvalMutation calls f(ctx, m).
func (f AppGoodMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppGoodMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppGoodMutation", m)
}

// The AppGoodBaseQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppGoodBaseQueryRuleFunc func(context.Context, *generated.AppGoodBaseQuery) error

// EvalQuery return f(ctx, q).
func (f AppGoodBaseQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppGoodBaseQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppGoodBaseQuery", q)
}

// The AppGoodBaseMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppGoodBaseMutationRuleFunc func(context.Context, *generated.AppGoodBaseMutation) error

// EvalMutation calls f(ctx, m).
func (f AppGoodBaseMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppGoodBaseMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppGoodBaseMutation", m)
}

// The AppGoodDescriptionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppGoodDescriptionQueryRuleFunc func(context.Context, *generated.AppGoodDescriptionQuery) error

// EvalQuery return f(ctx, q).
func (f AppGoodDescriptionQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppGoodDescriptionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppGoodDescriptionQuery", q)
}

// The AppGoodDescriptionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppGoodDescriptionMutationRuleFunc func(context.Context, *generated.AppGoodDescriptionMutation) error

// EvalMutation calls f(ctx, m).
func (f AppGoodDescriptionMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppGoodDescriptionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppGoodDescriptionMutation", m)
}

// The AppGoodDisplayColorQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppGoodDisplayColorQueryRuleFunc func(context.Context, *generated.AppGoodDisplayColorQuery) error

// EvalQuery return f(ctx, q).
func (f AppGoodDisplayColorQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppGoodDisplayColorQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppGoodDisplayColorQuery", q)
}

// The AppGoodDisplayColorMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppGoodDisplayColorMutationRuleFunc func(context.Context, *generated.AppGoodDisplayColorMutation) error

// EvalMutation calls f(ctx, m).
func (f AppGoodDisplayColorMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppGoodDisplayColorMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppGoodDisplayColorMutation", m)
}

// The AppGoodDisplayNameQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppGoodDisplayNameQueryRuleFunc func(context.Context, *generated.AppGoodDisplayNameQuery) error

// EvalQuery return f(ctx, q).
func (f AppGoodDisplayNameQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppGoodDisplayNameQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppGoodDisplayNameQuery", q)
}

// The AppGoodDisplayNameMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppGoodDisplayNameMutationRuleFunc func(context.Context, *generated.AppGoodDisplayNameMutation) error

// EvalMutation calls f(ctx, m).
func (f AppGoodDisplayNameMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppGoodDisplayNameMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppGoodDisplayNameMutation", m)
}

// The AppGoodLabelQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppGoodLabelQueryRuleFunc func(context.Context, *generated.AppGoodLabelQuery) error

// EvalQuery return f(ctx, q).
func (f AppGoodLabelQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppGoodLabelQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppGoodLabelQuery", q)
}

// The AppGoodLabelMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppGoodLabelMutationRuleFunc func(context.Context, *generated.AppGoodLabelMutation) error

// EvalMutation calls f(ctx, m).
func (f AppGoodLabelMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppGoodLabelMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppGoodLabelMutation", m)
}

// The AppGoodPosterQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppGoodPosterQueryRuleFunc func(context.Context, *generated.AppGoodPosterQuery) error

// EvalQuery return f(ctx, q).
func (f AppGoodPosterQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppGoodPosterQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppGoodPosterQuery", q)
}

// The AppGoodPosterMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppGoodPosterMutationRuleFunc func(context.Context, *generated.AppGoodPosterMutation) error

// EvalMutation calls f(ctx, m).
func (f AppGoodPosterMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppGoodPosterMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppGoodPosterMutation", m)
}

// The AppLegacyPowerRentalQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppLegacyPowerRentalQueryRuleFunc func(context.Context, *generated.AppLegacyPowerRentalQuery) error

// EvalQuery return f(ctx, q).
func (f AppLegacyPowerRentalQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppLegacyPowerRentalQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppLegacyPowerRentalQuery", q)
}

// The AppLegacyPowerRentalMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppLegacyPowerRentalMutationRuleFunc func(context.Context, *generated.AppLegacyPowerRentalMutation) error

// EvalMutation calls f(ctx, m).
func (f AppLegacyPowerRentalMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppLegacyPowerRentalMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppLegacyPowerRentalMutation", m)
}

// The AppMiningGoodStockQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppMiningGoodStockQueryRuleFunc func(context.Context, *generated.AppMiningGoodStockQuery) error

// EvalQuery return f(ctx, q).
func (f AppMiningGoodStockQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppMiningGoodStockQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppMiningGoodStockQuery", q)
}

// The AppMiningGoodStockMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppMiningGoodStockMutationRuleFunc func(context.Context, *generated.AppMiningGoodStockMutation) error

// EvalMutation calls f(ctx, m).
func (f AppMiningGoodStockMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppMiningGoodStockMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppMiningGoodStockMutation", m)
}

// The AppPowerRentalQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppPowerRentalQueryRuleFunc func(context.Context, *generated.AppPowerRentalQuery) error

// EvalQuery return f(ctx, q).
func (f AppPowerRentalQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppPowerRentalQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppPowerRentalQuery", q)
}

// The AppPowerRentalMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppPowerRentalMutationRuleFunc func(context.Context, *generated.AppPowerRentalMutation) error

// EvalMutation calls f(ctx, m).
func (f AppPowerRentalMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppPowerRentalMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppPowerRentalMutation", m)
}

// The AppSimulatePowerRentalQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppSimulatePowerRentalQueryRuleFunc func(context.Context, *generated.AppSimulatePowerRentalQuery) error

// EvalQuery return f(ctx, q).
func (f AppSimulatePowerRentalQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppSimulatePowerRentalQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppSimulatePowerRentalQuery", q)
}

// The AppSimulatePowerRentalMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppSimulatePowerRentalMutationRuleFunc func(context.Context, *generated.AppSimulatePowerRentalMutation) error

// EvalMutation calls f(ctx, m).
func (f AppSimulatePowerRentalMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppSimulatePowerRentalMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppSimulatePowerRentalMutation", m)
}

// The AppStockQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppStockQueryRuleFunc func(context.Context, *generated.AppStockQuery) error

// EvalQuery return f(ctx, q).
func (f AppStockQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppStockQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppStockQuery", q)
}

// The AppStockMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppStockMutationRuleFunc func(context.Context, *generated.AppStockMutation) error

// EvalMutation calls f(ctx, m).
func (f AppStockMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppStockMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppStockMutation", m)
}

// The AppStockLockQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppStockLockQueryRuleFunc func(context.Context, *generated.AppStockLockQuery) error

// EvalQuery return f(ctx, q).
func (f AppStockLockQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppStockLockQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppStockLockQuery", q)
}

// The AppStockLockMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppStockLockMutationRuleFunc func(context.Context, *generated.AppStockLockMutation) error

// EvalMutation calls f(ctx, m).
func (f AppStockLockMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppStockLockMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppStockLockMutation", m)
}

// The AppSubscriptionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppSubscriptionQueryRuleFunc func(context.Context, *generated.AppSubscriptionQuery) error

// EvalQuery return f(ctx, q).
func (f AppSubscriptionQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppSubscriptionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppSubscriptionQuery", q)
}

// The AppSubscriptionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppSubscriptionMutationRuleFunc func(context.Context, *generated.AppSubscriptionMutation) error

// EvalMutation calls f(ctx, m).
func (f AppSubscriptionMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppSubscriptionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppSubscriptionMutation", m)
}

// The AppSubscriptionOneShotQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppSubscriptionOneShotQueryRuleFunc func(context.Context, *generated.AppSubscriptionOneShotQuery) error

// EvalQuery return f(ctx, q).
func (f AppSubscriptionOneShotQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppSubscriptionOneShotQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppSubscriptionOneShotQuery", q)
}

// The AppSubscriptionOneShotMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppSubscriptionOneShotMutationRuleFunc func(context.Context, *generated.AppSubscriptionOneShotMutation) error

// EvalMutation calls f(ctx, m).
func (f AppSubscriptionOneShotMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppSubscriptionOneShotMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppSubscriptionOneShotMutation", m)
}

// The CommentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CommentQueryRuleFunc func(context.Context, *generated.CommentQuery) error

// EvalQuery return f(ctx, q).
func (f CommentQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.CommentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.CommentQuery", q)
}

// The CommentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CommentMutationRuleFunc func(context.Context, *generated.CommentMutation) error

// EvalMutation calls f(ctx, m).
func (f CommentMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.CommentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.CommentMutation", m)
}

// The DelegatedStakingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DelegatedStakingQueryRuleFunc func(context.Context, *generated.DelegatedStakingQuery) error

// EvalQuery return f(ctx, q).
func (f DelegatedStakingQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.DelegatedStakingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.DelegatedStakingQuery", q)
}

// The DelegatedStakingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DelegatedStakingMutationRuleFunc func(context.Context, *generated.DelegatedStakingMutation) error

// EvalMutation calls f(ctx, m).
func (f DelegatedStakingMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.DelegatedStakingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.DelegatedStakingMutation", m)
}

// The DeviceInfoQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DeviceInfoQueryRuleFunc func(context.Context, *generated.DeviceInfoQuery) error

// EvalQuery return f(ctx, q).
func (f DeviceInfoQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.DeviceInfoQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.DeviceInfoQuery", q)
}

// The DeviceInfoMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DeviceInfoMutationRuleFunc func(context.Context, *generated.DeviceInfoMutation) error

// EvalMutation calls f(ctx, m).
func (f DeviceInfoMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.DeviceInfoMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.DeviceInfoMutation", m)
}

// The DeviceManufacturerQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DeviceManufacturerQueryRuleFunc func(context.Context, *generated.DeviceManufacturerQuery) error

// EvalQuery return f(ctx, q).
func (f DeviceManufacturerQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.DeviceManufacturerQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.DeviceManufacturerQuery", q)
}

// The DeviceManufacturerMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DeviceManufacturerMutationRuleFunc func(context.Context, *generated.DeviceManufacturerMutation) error

// EvalMutation calls f(ctx, m).
func (f DeviceManufacturerMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.DeviceManufacturerMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.DeviceManufacturerMutation", m)
}

// The DevicePosterQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DevicePosterQueryRuleFunc func(context.Context, *generated.DevicePosterQuery) error

// EvalQuery return f(ctx, q).
func (f DevicePosterQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.DevicePosterQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.DevicePosterQuery", q)
}

// The DevicePosterMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DevicePosterMutationRuleFunc func(context.Context, *generated.DevicePosterMutation) error

// EvalMutation calls f(ctx, m).
func (f DevicePosterMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.DevicePosterMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.DevicePosterMutation", m)
}

// The ExtraInfoQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ExtraInfoQueryRuleFunc func(context.Context, *generated.ExtraInfoQuery) error

// EvalQuery return f(ctx, q).
func (f ExtraInfoQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ExtraInfoQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.ExtraInfoQuery", q)
}

// The ExtraInfoMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ExtraInfoMutationRuleFunc func(context.Context, *generated.ExtraInfoMutation) error

// EvalMutation calls f(ctx, m).
func (f ExtraInfoMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.ExtraInfoMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.ExtraInfoMutation", m)
}

// The FbmCrowdFundingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FbmCrowdFundingQueryRuleFunc func(context.Context, *generated.FbmCrowdFundingQuery) error

// EvalQuery return f(ctx, q).
func (f FbmCrowdFundingQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.FbmCrowdFundingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.FbmCrowdFundingQuery", q)
}

// The FbmCrowdFundingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FbmCrowdFundingMutationRuleFunc func(context.Context, *generated.FbmCrowdFundingMutation) error

// EvalMutation calls f(ctx, m).
func (f FbmCrowdFundingMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.FbmCrowdFundingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.FbmCrowdFundingMutation", m)
}

// The FeeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FeeQueryRuleFunc func(context.Context, *generated.FeeQuery) error

// EvalQuery return f(ctx, q).
func (f FeeQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.FeeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.FeeQuery", q)
}

// The FeeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FeeMutationRuleFunc func(context.Context, *generated.FeeMutation) error

// EvalMutation calls f(ctx, m).
func (f FeeMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.FeeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.FeeMutation", m)
}

// The GoodQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GoodQueryRuleFunc func(context.Context, *generated.GoodQuery) error

// EvalQuery return f(ctx, q).
func (f GoodQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.GoodQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.GoodQuery", q)
}

// The GoodMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GoodMutationRuleFunc func(context.Context, *generated.GoodMutation) error

// EvalMutation calls f(ctx, m).
func (f GoodMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.GoodMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.GoodMutation", m)
}

// The GoodBaseQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GoodBaseQueryRuleFunc func(context.Context, *generated.GoodBaseQuery) error

// EvalQuery return f(ctx, q).
func (f GoodBaseQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.GoodBaseQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.GoodBaseQuery", q)
}

// The GoodBaseMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GoodBaseMutationRuleFunc func(context.Context, *generated.GoodBaseMutation) error

// EvalMutation calls f(ctx, m).
func (f GoodBaseMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.GoodBaseMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.GoodBaseMutation", m)
}

// The GoodCoinQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GoodCoinQueryRuleFunc func(context.Context, *generated.GoodCoinQuery) error

// EvalQuery return f(ctx, q).
func (f GoodCoinQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.GoodCoinQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.GoodCoinQuery", q)
}

// The GoodCoinMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GoodCoinMutationRuleFunc func(context.Context, *generated.GoodCoinMutation) error

// EvalMutation calls f(ctx, m).
func (f GoodCoinMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.GoodCoinMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.GoodCoinMutation", m)
}

// The GoodCoinRewardQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GoodCoinRewardQueryRuleFunc func(context.Context, *generated.GoodCoinRewardQuery) error

// EvalQuery return f(ctx, q).
func (f GoodCoinRewardQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.GoodCoinRewardQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.GoodCoinRewardQuery", q)
}

// The GoodCoinRewardMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GoodCoinRewardMutationRuleFunc func(context.Context, *generated.GoodCoinRewardMutation) error

// EvalMutation calls f(ctx, m).
func (f GoodCoinRewardMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.GoodCoinRewardMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.GoodCoinRewardMutation", m)
}

// The GoodMalfunctionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GoodMalfunctionQueryRuleFunc func(context.Context, *generated.GoodMalfunctionQuery) error

// EvalQuery return f(ctx, q).
func (f GoodMalfunctionQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.GoodMalfunctionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.GoodMalfunctionQuery", q)
}

// The GoodMalfunctionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GoodMalfunctionMutationRuleFunc func(context.Context, *generated.GoodMalfunctionMutation) error

// EvalMutation calls f(ctx, m).
func (f GoodMalfunctionMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.GoodMalfunctionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.GoodMalfunctionMutation", m)
}

// The GoodRewardQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GoodRewardQueryRuleFunc func(context.Context, *generated.GoodRewardQuery) error

// EvalQuery return f(ctx, q).
func (f GoodRewardQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.GoodRewardQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.GoodRewardQuery", q)
}

// The GoodRewardMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GoodRewardMutationRuleFunc func(context.Context, *generated.GoodRewardMutation) error

// EvalMutation calls f(ctx, m).
func (f GoodRewardMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.GoodRewardMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.GoodRewardMutation", m)
}

// The GoodRewardHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GoodRewardHistoryQueryRuleFunc func(context.Context, *generated.GoodRewardHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f GoodRewardHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.GoodRewardHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.GoodRewardHistoryQuery", q)
}

// The GoodRewardHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GoodRewardHistoryMutationRuleFunc func(context.Context, *generated.GoodRewardHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f GoodRewardHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.GoodRewardHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.GoodRewardHistoryMutation", m)
}

// The LikeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type LikeQueryRuleFunc func(context.Context, *generated.LikeQuery) error

// EvalQuery return f(ctx, q).
func (f LikeQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.LikeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.LikeQuery", q)
}

// The LikeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type LikeMutationRuleFunc func(context.Context, *generated.LikeMutation) error

// EvalMutation calls f(ctx, m).
func (f LikeMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.LikeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.LikeMutation", m)
}

// The MiningGoodStockQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type MiningGoodStockQueryRuleFunc func(context.Context, *generated.MiningGoodStockQuery) error

// EvalQuery return f(ctx, q).
func (f MiningGoodStockQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.MiningGoodStockQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.MiningGoodStockQuery", q)
}

// The MiningGoodStockMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type MiningGoodStockMutationRuleFunc func(context.Context, *generated.MiningGoodStockMutation) error

// EvalMutation calls f(ctx, m).
func (f MiningGoodStockMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.MiningGoodStockMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.MiningGoodStockMutation", m)
}

// The PowerRentalQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PowerRentalQueryRuleFunc func(context.Context, *generated.PowerRentalQuery) error

// EvalQuery return f(ctx, q).
func (f PowerRentalQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.PowerRentalQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.PowerRentalQuery", q)
}

// The PowerRentalMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PowerRentalMutationRuleFunc func(context.Context, *generated.PowerRentalMutation) error

// EvalMutation calls f(ctx, m).
func (f PowerRentalMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.PowerRentalMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.PowerRentalMutation", m)
}

// The RecommendQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RecommendQueryRuleFunc func(context.Context, *generated.RecommendQuery) error

// EvalQuery return f(ctx, q).
func (f RecommendQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.RecommendQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.RecommendQuery", q)
}

// The RecommendMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RecommendMutationRuleFunc func(context.Context, *generated.RecommendMutation) error

// EvalMutation calls f(ctx, m).
func (f RecommendMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.RecommendMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.RecommendMutation", m)
}

// The RequiredAppGoodQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RequiredAppGoodQueryRuleFunc func(context.Context, *generated.RequiredAppGoodQuery) error

// EvalQuery return f(ctx, q).
func (f RequiredAppGoodQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.RequiredAppGoodQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.RequiredAppGoodQuery", q)
}

// The RequiredAppGoodMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RequiredAppGoodMutationRuleFunc func(context.Context, *generated.RequiredAppGoodMutation) error

// EvalMutation calls f(ctx, m).
func (f RequiredAppGoodMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.RequiredAppGoodMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.RequiredAppGoodMutation", m)
}

// The RequiredGoodQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RequiredGoodQueryRuleFunc func(context.Context, *generated.RequiredGoodQuery) error

// EvalQuery return f(ctx, q).
func (f RequiredGoodQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.RequiredGoodQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.RequiredGoodQuery", q)
}

// The RequiredGoodMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RequiredGoodMutationRuleFunc func(context.Context, *generated.RequiredGoodMutation) error

// EvalMutation calls f(ctx, m).
func (f RequiredGoodMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.RequiredGoodMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.RequiredGoodMutation", m)
}

// The ScoreQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ScoreQueryRuleFunc func(context.Context, *generated.ScoreQuery) error

// EvalQuery return f(ctx, q).
func (f ScoreQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ScoreQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.ScoreQuery", q)
}

// The ScoreMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ScoreMutationRuleFunc func(context.Context, *generated.ScoreMutation) error

// EvalMutation calls f(ctx, m).
func (f ScoreMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.ScoreMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.ScoreMutation", m)
}

// The StockQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type StockQueryRuleFunc func(context.Context, *generated.StockQuery) error

// EvalQuery return f(ctx, q).
func (f StockQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.StockQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.StockQuery", q)
}

// The StockMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type StockMutationRuleFunc func(context.Context, *generated.StockMutation) error

// EvalMutation calls f(ctx, m).
func (f StockMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.StockMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.StockMutation", m)
}

// The SubscriptionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SubscriptionQueryRuleFunc func(context.Context, *generated.SubscriptionQuery) error

// EvalQuery return f(ctx, q).
func (f SubscriptionQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.SubscriptionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.SubscriptionQuery", q)
}

// The SubscriptionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SubscriptionMutationRuleFunc func(context.Context, *generated.SubscriptionMutation) error

// EvalMutation calls f(ctx, m).
func (f SubscriptionMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.SubscriptionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.SubscriptionMutation", m)
}

// The SubscriptionOneShotQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SubscriptionOneShotQueryRuleFunc func(context.Context, *generated.SubscriptionOneShotQuery) error

// EvalQuery return f(ctx, q).
func (f SubscriptionOneShotQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.SubscriptionOneShotQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.SubscriptionOneShotQuery", q)
}

// The SubscriptionOneShotMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SubscriptionOneShotMutationRuleFunc func(context.Context, *generated.SubscriptionOneShotMutation) error

// EvalMutation calls f(ctx, m).
func (f SubscriptionOneShotMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.SubscriptionOneShotMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.SubscriptionOneShotMutation", m)
}

// The TopMostQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TopMostQueryRuleFunc func(context.Context, *generated.TopMostQuery) error

// EvalQuery return f(ctx, q).
func (f TopMostQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.TopMostQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.TopMostQuery", q)
}

// The TopMostMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TopMostMutationRuleFunc func(context.Context, *generated.TopMostMutation) error

// EvalMutation calls f(ctx, m).
func (f TopMostMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.TopMostMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.TopMostMutation", m)
}

// The TopMostConstraintQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TopMostConstraintQueryRuleFunc func(context.Context, *generated.TopMostConstraintQuery) error

// EvalQuery return f(ctx, q).
func (f TopMostConstraintQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.TopMostConstraintQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.TopMostConstraintQuery", q)
}

// The TopMostConstraintMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TopMostConstraintMutationRuleFunc func(context.Context, *generated.TopMostConstraintMutation) error

// EvalMutation calls f(ctx, m).
func (f TopMostConstraintMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.TopMostConstraintMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.TopMostConstraintMutation", m)
}

// The TopMostGoodQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TopMostGoodQueryRuleFunc func(context.Context, *generated.TopMostGoodQuery) error

// EvalQuery return f(ctx, q).
func (f TopMostGoodQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.TopMostGoodQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.TopMostGoodQuery", q)
}

// The TopMostGoodMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TopMostGoodMutationRuleFunc func(context.Context, *generated.TopMostGoodMutation) error

// EvalMutation calls f(ctx, m).
func (f TopMostGoodMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.TopMostGoodMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.TopMostGoodMutation", m)
}

// The TopMostGoodConstraintQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TopMostGoodConstraintQueryRuleFunc func(context.Context, *generated.TopMostGoodConstraintQuery) error

// EvalQuery return f(ctx, q).
func (f TopMostGoodConstraintQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.TopMostGoodConstraintQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.TopMostGoodConstraintQuery", q)
}

// The TopMostGoodConstraintMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TopMostGoodConstraintMutationRuleFunc func(context.Context, *generated.TopMostGoodConstraintMutation) error

// EvalMutation calls f(ctx, m).
func (f TopMostGoodConstraintMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.TopMostGoodConstraintMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.TopMostGoodConstraintMutation", m)
}

// The TopMostGoodPosterQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TopMostGoodPosterQueryRuleFunc func(context.Context, *generated.TopMostGoodPosterQuery) error

// EvalQuery return f(ctx, q).
func (f TopMostGoodPosterQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.TopMostGoodPosterQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.TopMostGoodPosterQuery", q)
}

// The TopMostGoodPosterMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TopMostGoodPosterMutationRuleFunc func(context.Context, *generated.TopMostGoodPosterMutation) error

// EvalMutation calls f(ctx, m).
func (f TopMostGoodPosterMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.TopMostGoodPosterMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.TopMostGoodPosterMutation", m)
}

// The TopMostPosterQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TopMostPosterQueryRuleFunc func(context.Context, *generated.TopMostPosterQuery) error

// EvalQuery return f(ctx, q).
func (f TopMostPosterQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.TopMostPosterQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.TopMostPosterQuery", q)
}

// The TopMostPosterMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TopMostPosterMutationRuleFunc func(context.Context, *generated.TopMostPosterMutation) error

// EvalMutation calls f(ctx, m).
func (f TopMostPosterMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.TopMostPosterMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.TopMostPosterMutation", m)
}

// The VendorBrandQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type VendorBrandQueryRuleFunc func(context.Context, *generated.VendorBrandQuery) error

// EvalQuery return f(ctx, q).
func (f VendorBrandQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.VendorBrandQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.VendorBrandQuery", q)
}

// The VendorBrandMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type VendorBrandMutationRuleFunc func(context.Context, *generated.VendorBrandMutation) error

// EvalMutation calls f(ctx, m).
func (f VendorBrandMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.VendorBrandMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.VendorBrandMutation", m)
}

// The VendorLocationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type VendorLocationQueryRuleFunc func(context.Context, *generated.VendorLocationQuery) error

// EvalQuery return f(ctx, q).
func (f VendorLocationQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.VendorLocationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.VendorLocationQuery", q)
}

// The VendorLocationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type VendorLocationMutationRuleFunc func(context.Context, *generated.VendorLocationMutation) error

// EvalMutation calls f(ctx, m).
func (f VendorLocationMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.VendorLocationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.VendorLocationMutation", m)
}

type (
	// Filter is the interface that wraps the Where function
	// for filtering nodes in queries and mutations.
	Filter interface {
		// Where applies a filter on the executed query/mutation.
		Where(entql.P)
	}

	// The FilterFunc type is an adapter that allows the use of ordinary
	// functions as filters for query and mutation types.
	FilterFunc func(context.Context, Filter) error
)

// EvalQuery calls f(ctx, q) if the query implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	fr, err := queryFilter(q)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

// EvalMutation calls f(ctx, q) if the mutation implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	fr, err := mutationFilter(m)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

var _ QueryMutationRule = FilterFunc(nil)

func queryFilter(q generated.Query) (Filter, error) {
	switch q := q.(type) {
	case *generated.AppDefaultGoodQuery:
		return q.Filter(), nil
	case *generated.AppDelegatedStakingQuery:
		return q.Filter(), nil
	case *generated.AppFeeQuery:
		return q.Filter(), nil
	case *generated.AppGoodQuery:
		return q.Filter(), nil
	case *generated.AppGoodBaseQuery:
		return q.Filter(), nil
	case *generated.AppGoodDescriptionQuery:
		return q.Filter(), nil
	case *generated.AppGoodDisplayColorQuery:
		return q.Filter(), nil
	case *generated.AppGoodDisplayNameQuery:
		return q.Filter(), nil
	case *generated.AppGoodLabelQuery:
		return q.Filter(), nil
	case *generated.AppGoodPosterQuery:
		return q.Filter(), nil
	case *generated.AppLegacyPowerRentalQuery:
		return q.Filter(), nil
	case *generated.AppMiningGoodStockQuery:
		return q.Filter(), nil
	case *generated.AppPowerRentalQuery:
		return q.Filter(), nil
	case *generated.AppSimulatePowerRentalQuery:
		return q.Filter(), nil
	case *generated.AppStockQuery:
		return q.Filter(), nil
	case *generated.AppStockLockQuery:
		return q.Filter(), nil
	case *generated.AppSubscriptionQuery:
		return q.Filter(), nil
	case *generated.AppSubscriptionOneShotQuery:
		return q.Filter(), nil
	case *generated.CommentQuery:
		return q.Filter(), nil
	case *generated.DelegatedStakingQuery:
		return q.Filter(), nil
	case *generated.DeviceInfoQuery:
		return q.Filter(), nil
	case *generated.DeviceManufacturerQuery:
		return q.Filter(), nil
	case *generated.DevicePosterQuery:
		return q.Filter(), nil
	case *generated.ExtraInfoQuery:
		return q.Filter(), nil
	case *generated.FbmCrowdFundingQuery:
		return q.Filter(), nil
	case *generated.FeeQuery:
		return q.Filter(), nil
	case *generated.GoodQuery:
		return q.Filter(), nil
	case *generated.GoodBaseQuery:
		return q.Filter(), nil
	case *generated.GoodCoinQuery:
		return q.Filter(), nil
	case *generated.GoodCoinRewardQuery:
		return q.Filter(), nil
	case *generated.GoodMalfunctionQuery:
		return q.Filter(), nil
	case *generated.GoodRewardQuery:
		return q.Filter(), nil
	case *generated.GoodRewardHistoryQuery:
		return q.Filter(), nil
	case *generated.LikeQuery:
		return q.Filter(), nil
	case *generated.MiningGoodStockQuery:
		return q.Filter(), nil
	case *generated.PowerRentalQuery:
		return q.Filter(), nil
	case *generated.RecommendQuery:
		return q.Filter(), nil
	case *generated.RequiredAppGoodQuery:
		return q.Filter(), nil
	case *generated.RequiredGoodQuery:
		return q.Filter(), nil
	case *generated.ScoreQuery:
		return q.Filter(), nil
	case *generated.StockQuery:
		return q.Filter(), nil
	case *generated.SubscriptionQuery:
		return q.Filter(), nil
	case *generated.SubscriptionOneShotQuery:
		return q.Filter(), nil
	case *generated.TopMostQuery:
		return q.Filter(), nil
	case *generated.TopMostConstraintQuery:
		return q.Filter(), nil
	case *generated.TopMostGoodQuery:
		return q.Filter(), nil
	case *generated.TopMostGoodConstraintQuery:
		return q.Filter(), nil
	case *generated.TopMostGoodPosterQuery:
		return q.Filter(), nil
	case *generated.TopMostPosterQuery:
		return q.Filter(), nil
	case *generated.VendorBrandQuery:
		return q.Filter(), nil
	case *generated.VendorLocationQuery:
		return q.Filter(), nil
	default:
		return nil, Denyf("generated/privacy: unexpected query type %T for query filter", q)
	}
}

func mutationFilter(m generated.Mutation) (Filter, error) {
	switch m := m.(type) {
	case *generated.AppDefaultGoodMutation:
		return m.Filter(), nil
	case *generated.AppDelegatedStakingMutation:
		return m.Filter(), nil
	case *generated.AppFeeMutation:
		return m.Filter(), nil
	case *generated.AppGoodMutation:
		return m.Filter(), nil
	case *generated.AppGoodBaseMutation:
		return m.Filter(), nil
	case *generated.AppGoodDescriptionMutation:
		return m.Filter(), nil
	case *generated.AppGoodDisplayColorMutation:
		return m.Filter(), nil
	case *generated.AppGoodDisplayNameMutation:
		return m.Filter(), nil
	case *generated.AppGoodLabelMutation:
		return m.Filter(), nil
	case *generated.AppGoodPosterMutation:
		return m.Filter(), nil
	case *generated.AppLegacyPowerRentalMutation:
		return m.Filter(), nil
	case *generated.AppMiningGoodStockMutation:
		return m.Filter(), nil
	case *generated.AppPowerRentalMutation:
		return m.Filter(), nil
	case *generated.AppSimulatePowerRentalMutation:
		return m.Filter(), nil
	case *generated.AppStockMutation:
		return m.Filter(), nil
	case *generated.AppStockLockMutation:
		return m.Filter(), nil
	case *generated.AppSubscriptionMutation:
		return m.Filter(), nil
	case *generated.AppSubscriptionOneShotMutation:
		return m.Filter(), nil
	case *generated.CommentMutation:
		return m.Filter(), nil
	case *generated.DelegatedStakingMutation:
		return m.Filter(), nil
	case *generated.DeviceInfoMutation:
		return m.Filter(), nil
	case *generated.DeviceManufacturerMutation:
		return m.Filter(), nil
	case *generated.DevicePosterMutation:
		return m.Filter(), nil
	case *generated.ExtraInfoMutation:
		return m.Filter(), nil
	case *generated.FbmCrowdFundingMutation:
		return m.Filter(), nil
	case *generated.FeeMutation:
		return m.Filter(), nil
	case *generated.GoodMutation:
		return m.Filter(), nil
	case *generated.GoodBaseMutation:
		return m.Filter(), nil
	case *generated.GoodCoinMutation:
		return m.Filter(), nil
	case *generated.GoodCoinRewardMutation:
		return m.Filter(), nil
	case *generated.GoodMalfunctionMutation:
		return m.Filter(), nil
	case *generated.GoodRewardMutation:
		return m.Filter(), nil
	case *generated.GoodRewardHistoryMutation:
		return m.Filter(), nil
	case *generated.LikeMutation:
		return m.Filter(), nil
	case *generated.MiningGoodStockMutation:
		return m.Filter(), nil
	case *generated.PowerRentalMutation:
		return m.Filter(), nil
	case *generated.RecommendMutation:
		return m.Filter(), nil
	case *generated.RequiredAppGoodMutation:
		return m.Filter(), nil
	case *generated.RequiredGoodMutation:
		return m.Filter(), nil
	case *generated.ScoreMutation:
		return m.Filter(), nil
	case *generated.StockMutation:
		return m.Filter(), nil
	case *generated.SubscriptionMutation:
		return m.Filter(), nil
	case *generated.SubscriptionOneShotMutation:
		return m.Filter(), nil
	case *generated.TopMostMutation:
		return m.Filter(), nil
	case *generated.TopMostConstraintMutation:
		return m.Filter(), nil
	case *generated.TopMostGoodMutation:
		return m.Filter(), nil
	case *generated.TopMostGoodConstraintMutation:
		return m.Filter(), nil
	case *generated.TopMostGoodPosterMutation:
		return m.Filter(), nil
	case *generated.TopMostPosterMutation:
		return m.Filter(), nil
	case *generated.VendorBrandMutation:
		return m.Filter(), nil
	case *generated.VendorLocationMutation:
		return m.Filter(), nil
	default:
		return nil, Denyf("generated/privacy: unexpected mutation type %T for mutation filter", m)
	}
}

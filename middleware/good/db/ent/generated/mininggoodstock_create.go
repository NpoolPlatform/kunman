// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/mininggoodstock"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// MiningGoodStockCreate is the builder for creating a MiningGoodStock entity.
type MiningGoodStockCreate struct {
	config
	mutation *MiningGoodStockMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (mgsc *MiningGoodStockCreate) SetEntID(u uuid.UUID) *MiningGoodStockCreate {
	mgsc.mutation.SetEntID(u)
	return mgsc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (mgsc *MiningGoodStockCreate) SetNillableEntID(u *uuid.UUID) *MiningGoodStockCreate {
	if u != nil {
		mgsc.SetEntID(*u)
	}
	return mgsc
}

// SetCreatedAt sets the "created_at" field.
func (mgsc *MiningGoodStockCreate) SetCreatedAt(u uint32) *MiningGoodStockCreate {
	mgsc.mutation.SetCreatedAt(u)
	return mgsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mgsc *MiningGoodStockCreate) SetNillableCreatedAt(u *uint32) *MiningGoodStockCreate {
	if u != nil {
		mgsc.SetCreatedAt(*u)
	}
	return mgsc
}

// SetUpdatedAt sets the "updated_at" field.
func (mgsc *MiningGoodStockCreate) SetUpdatedAt(u uint32) *MiningGoodStockCreate {
	mgsc.mutation.SetUpdatedAt(u)
	return mgsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mgsc *MiningGoodStockCreate) SetNillableUpdatedAt(u *uint32) *MiningGoodStockCreate {
	if u != nil {
		mgsc.SetUpdatedAt(*u)
	}
	return mgsc
}

// SetDeletedAt sets the "deleted_at" field.
func (mgsc *MiningGoodStockCreate) SetDeletedAt(u uint32) *MiningGoodStockCreate {
	mgsc.mutation.SetDeletedAt(u)
	return mgsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mgsc *MiningGoodStockCreate) SetNillableDeletedAt(u *uint32) *MiningGoodStockCreate {
	if u != nil {
		mgsc.SetDeletedAt(*u)
	}
	return mgsc
}

// SetGoodStockID sets the "good_stock_id" field.
func (mgsc *MiningGoodStockCreate) SetGoodStockID(u uuid.UUID) *MiningGoodStockCreate {
	mgsc.mutation.SetGoodStockID(u)
	return mgsc
}

// SetNillableGoodStockID sets the "good_stock_id" field if the given value is not nil.
func (mgsc *MiningGoodStockCreate) SetNillableGoodStockID(u *uuid.UUID) *MiningGoodStockCreate {
	if u != nil {
		mgsc.SetGoodStockID(*u)
	}
	return mgsc
}

// SetPoolRootUserID sets the "pool_root_user_id" field.
func (mgsc *MiningGoodStockCreate) SetPoolRootUserID(u uuid.UUID) *MiningGoodStockCreate {
	mgsc.mutation.SetPoolRootUserID(u)
	return mgsc
}

// SetNillablePoolRootUserID sets the "pool_root_user_id" field if the given value is not nil.
func (mgsc *MiningGoodStockCreate) SetNillablePoolRootUserID(u *uuid.UUID) *MiningGoodStockCreate {
	if u != nil {
		mgsc.SetPoolRootUserID(*u)
	}
	return mgsc
}

// SetPoolGoodUserID sets the "pool_good_user_id" field.
func (mgsc *MiningGoodStockCreate) SetPoolGoodUserID(u uuid.UUID) *MiningGoodStockCreate {
	mgsc.mutation.SetPoolGoodUserID(u)
	return mgsc
}

// SetNillablePoolGoodUserID sets the "pool_good_user_id" field if the given value is not nil.
func (mgsc *MiningGoodStockCreate) SetNillablePoolGoodUserID(u *uuid.UUID) *MiningGoodStockCreate {
	if u != nil {
		mgsc.SetPoolGoodUserID(*u)
	}
	return mgsc
}

// SetTotal sets the "total" field.
func (mgsc *MiningGoodStockCreate) SetTotal(d decimal.Decimal) *MiningGoodStockCreate {
	mgsc.mutation.SetTotal(d)
	return mgsc
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (mgsc *MiningGoodStockCreate) SetNillableTotal(d *decimal.Decimal) *MiningGoodStockCreate {
	if d != nil {
		mgsc.SetTotal(*d)
	}
	return mgsc
}

// SetSpotQuantity sets the "spot_quantity" field.
func (mgsc *MiningGoodStockCreate) SetSpotQuantity(d decimal.Decimal) *MiningGoodStockCreate {
	mgsc.mutation.SetSpotQuantity(d)
	return mgsc
}

// SetNillableSpotQuantity sets the "spot_quantity" field if the given value is not nil.
func (mgsc *MiningGoodStockCreate) SetNillableSpotQuantity(d *decimal.Decimal) *MiningGoodStockCreate {
	if d != nil {
		mgsc.SetSpotQuantity(*d)
	}
	return mgsc
}

// SetLocked sets the "locked" field.
func (mgsc *MiningGoodStockCreate) SetLocked(d decimal.Decimal) *MiningGoodStockCreate {
	mgsc.mutation.SetLocked(d)
	return mgsc
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (mgsc *MiningGoodStockCreate) SetNillableLocked(d *decimal.Decimal) *MiningGoodStockCreate {
	if d != nil {
		mgsc.SetLocked(*d)
	}
	return mgsc
}

// SetInService sets the "in_service" field.
func (mgsc *MiningGoodStockCreate) SetInService(d decimal.Decimal) *MiningGoodStockCreate {
	mgsc.mutation.SetInService(d)
	return mgsc
}

// SetNillableInService sets the "in_service" field if the given value is not nil.
func (mgsc *MiningGoodStockCreate) SetNillableInService(d *decimal.Decimal) *MiningGoodStockCreate {
	if d != nil {
		mgsc.SetInService(*d)
	}
	return mgsc
}

// SetWaitStart sets the "wait_start" field.
func (mgsc *MiningGoodStockCreate) SetWaitStart(d decimal.Decimal) *MiningGoodStockCreate {
	mgsc.mutation.SetWaitStart(d)
	return mgsc
}

// SetNillableWaitStart sets the "wait_start" field if the given value is not nil.
func (mgsc *MiningGoodStockCreate) SetNillableWaitStart(d *decimal.Decimal) *MiningGoodStockCreate {
	if d != nil {
		mgsc.SetWaitStart(*d)
	}
	return mgsc
}

// SetSold sets the "sold" field.
func (mgsc *MiningGoodStockCreate) SetSold(d decimal.Decimal) *MiningGoodStockCreate {
	mgsc.mutation.SetSold(d)
	return mgsc
}

// SetNillableSold sets the "sold" field if the given value is not nil.
func (mgsc *MiningGoodStockCreate) SetNillableSold(d *decimal.Decimal) *MiningGoodStockCreate {
	if d != nil {
		mgsc.SetSold(*d)
	}
	return mgsc
}

// SetAppReserved sets the "app_reserved" field.
func (mgsc *MiningGoodStockCreate) SetAppReserved(d decimal.Decimal) *MiningGoodStockCreate {
	mgsc.mutation.SetAppReserved(d)
	return mgsc
}

// SetNillableAppReserved sets the "app_reserved" field if the given value is not nil.
func (mgsc *MiningGoodStockCreate) SetNillableAppReserved(d *decimal.Decimal) *MiningGoodStockCreate {
	if d != nil {
		mgsc.SetAppReserved(*d)
	}
	return mgsc
}

// SetState sets the "state" field.
func (mgsc *MiningGoodStockCreate) SetState(s string) *MiningGoodStockCreate {
	mgsc.mutation.SetState(s)
	return mgsc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (mgsc *MiningGoodStockCreate) SetNillableState(s *string) *MiningGoodStockCreate {
	if s != nil {
		mgsc.SetState(*s)
	}
	return mgsc
}

// SetID sets the "id" field.
func (mgsc *MiningGoodStockCreate) SetID(u uint32) *MiningGoodStockCreate {
	mgsc.mutation.SetID(u)
	return mgsc
}

// Mutation returns the MiningGoodStockMutation object of the builder.
func (mgsc *MiningGoodStockCreate) Mutation() *MiningGoodStockMutation {
	return mgsc.mutation
}

// Save creates the MiningGoodStock in the database.
func (mgsc *MiningGoodStockCreate) Save(ctx context.Context) (*MiningGoodStock, error) {
	mgsc.defaults()
	return withHooks(ctx, mgsc.sqlSave, mgsc.mutation, mgsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mgsc *MiningGoodStockCreate) SaveX(ctx context.Context) *MiningGoodStock {
	v, err := mgsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mgsc *MiningGoodStockCreate) Exec(ctx context.Context) error {
	_, err := mgsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mgsc *MiningGoodStockCreate) ExecX(ctx context.Context) {
	if err := mgsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mgsc *MiningGoodStockCreate) defaults() {
	if _, ok := mgsc.mutation.EntID(); !ok {
		v := mininggoodstock.DefaultEntID()
		mgsc.mutation.SetEntID(v)
	}
	if _, ok := mgsc.mutation.CreatedAt(); !ok {
		v := mininggoodstock.DefaultCreatedAt()
		mgsc.mutation.SetCreatedAt(v)
	}
	if _, ok := mgsc.mutation.UpdatedAt(); !ok {
		v := mininggoodstock.DefaultUpdatedAt()
		mgsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mgsc.mutation.DeletedAt(); !ok {
		v := mininggoodstock.DefaultDeletedAt()
		mgsc.mutation.SetDeletedAt(v)
	}
	if _, ok := mgsc.mutation.GoodStockID(); !ok {
		v := mininggoodstock.DefaultGoodStockID()
		mgsc.mutation.SetGoodStockID(v)
	}
	if _, ok := mgsc.mutation.PoolRootUserID(); !ok {
		v := mininggoodstock.DefaultPoolRootUserID()
		mgsc.mutation.SetPoolRootUserID(v)
	}
	if _, ok := mgsc.mutation.PoolGoodUserID(); !ok {
		v := mininggoodstock.DefaultPoolGoodUserID()
		mgsc.mutation.SetPoolGoodUserID(v)
	}
	if _, ok := mgsc.mutation.Total(); !ok {
		v := mininggoodstock.DefaultTotal
		mgsc.mutation.SetTotal(v)
	}
	if _, ok := mgsc.mutation.SpotQuantity(); !ok {
		v := mininggoodstock.DefaultSpotQuantity
		mgsc.mutation.SetSpotQuantity(v)
	}
	if _, ok := mgsc.mutation.Locked(); !ok {
		v := mininggoodstock.DefaultLocked
		mgsc.mutation.SetLocked(v)
	}
	if _, ok := mgsc.mutation.InService(); !ok {
		v := mininggoodstock.DefaultInService
		mgsc.mutation.SetInService(v)
	}
	if _, ok := mgsc.mutation.WaitStart(); !ok {
		v := mininggoodstock.DefaultWaitStart
		mgsc.mutation.SetWaitStart(v)
	}
	if _, ok := mgsc.mutation.Sold(); !ok {
		v := mininggoodstock.DefaultSold
		mgsc.mutation.SetSold(v)
	}
	if _, ok := mgsc.mutation.AppReserved(); !ok {
		v := mininggoodstock.DefaultAppReserved
		mgsc.mutation.SetAppReserved(v)
	}
	if _, ok := mgsc.mutation.State(); !ok {
		v := mininggoodstock.DefaultState
		mgsc.mutation.SetState(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mgsc *MiningGoodStockCreate) check() error {
	if _, ok := mgsc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "MiningGoodStock.ent_id"`)}
	}
	if _, ok := mgsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "MiningGoodStock.created_at"`)}
	}
	if _, ok := mgsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "MiningGoodStock.updated_at"`)}
	}
	if _, ok := mgsc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "MiningGoodStock.deleted_at"`)}
	}
	return nil
}

func (mgsc *MiningGoodStockCreate) sqlSave(ctx context.Context) (*MiningGoodStock, error) {
	if err := mgsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mgsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mgsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	mgsc.mutation.id = &_node.ID
	mgsc.mutation.done = true
	return _node, nil
}

func (mgsc *MiningGoodStockCreate) createSpec() (*MiningGoodStock, *sqlgraph.CreateSpec) {
	var (
		_node = &MiningGoodStock{config: mgsc.config}
		_spec = sqlgraph.NewCreateSpec(mininggoodstock.Table, sqlgraph.NewFieldSpec(mininggoodstock.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = mgsc.conflict
	if id, ok := mgsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mgsc.mutation.EntID(); ok {
		_spec.SetField(mininggoodstock.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := mgsc.mutation.CreatedAt(); ok {
		_spec.SetField(mininggoodstock.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := mgsc.mutation.UpdatedAt(); ok {
		_spec.SetField(mininggoodstock.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := mgsc.mutation.DeletedAt(); ok {
		_spec.SetField(mininggoodstock.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := mgsc.mutation.GoodStockID(); ok {
		_spec.SetField(mininggoodstock.FieldGoodStockID, field.TypeUUID, value)
		_node.GoodStockID = value
	}
	if value, ok := mgsc.mutation.PoolRootUserID(); ok {
		_spec.SetField(mininggoodstock.FieldPoolRootUserID, field.TypeUUID, value)
		_node.PoolRootUserID = value
	}
	if value, ok := mgsc.mutation.PoolGoodUserID(); ok {
		_spec.SetField(mininggoodstock.FieldPoolGoodUserID, field.TypeUUID, value)
		_node.PoolGoodUserID = value
	}
	if value, ok := mgsc.mutation.Total(); ok {
		_spec.SetField(mininggoodstock.FieldTotal, field.TypeOther, value)
		_node.Total = value
	}
	if value, ok := mgsc.mutation.SpotQuantity(); ok {
		_spec.SetField(mininggoodstock.FieldSpotQuantity, field.TypeOther, value)
		_node.SpotQuantity = value
	}
	if value, ok := mgsc.mutation.Locked(); ok {
		_spec.SetField(mininggoodstock.FieldLocked, field.TypeOther, value)
		_node.Locked = value
	}
	if value, ok := mgsc.mutation.InService(); ok {
		_spec.SetField(mininggoodstock.FieldInService, field.TypeOther, value)
		_node.InService = value
	}
	if value, ok := mgsc.mutation.WaitStart(); ok {
		_spec.SetField(mininggoodstock.FieldWaitStart, field.TypeOther, value)
		_node.WaitStart = value
	}
	if value, ok := mgsc.mutation.Sold(); ok {
		_spec.SetField(mininggoodstock.FieldSold, field.TypeOther, value)
		_node.Sold = value
	}
	if value, ok := mgsc.mutation.AppReserved(); ok {
		_spec.SetField(mininggoodstock.FieldAppReserved, field.TypeOther, value)
		_node.AppReserved = value
	}
	if value, ok := mgsc.mutation.State(); ok {
		_spec.SetField(mininggoodstock.FieldState, field.TypeString, value)
		_node.State = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MiningGoodStock.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MiningGoodStockUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (mgsc *MiningGoodStockCreate) OnConflict(opts ...sql.ConflictOption) *MiningGoodStockUpsertOne {
	mgsc.conflict = opts
	return &MiningGoodStockUpsertOne{
		create: mgsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MiningGoodStock.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mgsc *MiningGoodStockCreate) OnConflictColumns(columns ...string) *MiningGoodStockUpsertOne {
	mgsc.conflict = append(mgsc.conflict, sql.ConflictColumns(columns...))
	return &MiningGoodStockUpsertOne{
		create: mgsc,
	}
}

type (
	// MiningGoodStockUpsertOne is the builder for "upsert"-ing
	//  one MiningGoodStock node.
	MiningGoodStockUpsertOne struct {
		create *MiningGoodStockCreate
	}

	// MiningGoodStockUpsert is the "OnConflict" setter.
	MiningGoodStockUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *MiningGoodStockUpsert) SetEntID(v uuid.UUID) *MiningGoodStockUpsert {
	u.Set(mininggoodstock.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *MiningGoodStockUpsert) UpdateEntID() *MiningGoodStockUpsert {
	u.SetExcluded(mininggoodstock.FieldEntID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *MiningGoodStockUpsert) SetCreatedAt(v uint32) *MiningGoodStockUpsert {
	u.Set(mininggoodstock.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MiningGoodStockUpsert) UpdateCreatedAt() *MiningGoodStockUpsert {
	u.SetExcluded(mininggoodstock.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *MiningGoodStockUpsert) AddCreatedAt(v uint32) *MiningGoodStockUpsert {
	u.Add(mininggoodstock.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MiningGoodStockUpsert) SetUpdatedAt(v uint32) *MiningGoodStockUpsert {
	u.Set(mininggoodstock.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MiningGoodStockUpsert) UpdateUpdatedAt() *MiningGoodStockUpsert {
	u.SetExcluded(mininggoodstock.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *MiningGoodStockUpsert) AddUpdatedAt(v uint32) *MiningGoodStockUpsert {
	u.Add(mininggoodstock.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MiningGoodStockUpsert) SetDeletedAt(v uint32) *MiningGoodStockUpsert {
	u.Set(mininggoodstock.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MiningGoodStockUpsert) UpdateDeletedAt() *MiningGoodStockUpsert {
	u.SetExcluded(mininggoodstock.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *MiningGoodStockUpsert) AddDeletedAt(v uint32) *MiningGoodStockUpsert {
	u.Add(mininggoodstock.FieldDeletedAt, v)
	return u
}

// SetGoodStockID sets the "good_stock_id" field.
func (u *MiningGoodStockUpsert) SetGoodStockID(v uuid.UUID) *MiningGoodStockUpsert {
	u.Set(mininggoodstock.FieldGoodStockID, v)
	return u
}

// UpdateGoodStockID sets the "good_stock_id" field to the value that was provided on create.
func (u *MiningGoodStockUpsert) UpdateGoodStockID() *MiningGoodStockUpsert {
	u.SetExcluded(mininggoodstock.FieldGoodStockID)
	return u
}

// ClearGoodStockID clears the value of the "good_stock_id" field.
func (u *MiningGoodStockUpsert) ClearGoodStockID() *MiningGoodStockUpsert {
	u.SetNull(mininggoodstock.FieldGoodStockID)
	return u
}

// SetPoolRootUserID sets the "pool_root_user_id" field.
func (u *MiningGoodStockUpsert) SetPoolRootUserID(v uuid.UUID) *MiningGoodStockUpsert {
	u.Set(mininggoodstock.FieldPoolRootUserID, v)
	return u
}

// UpdatePoolRootUserID sets the "pool_root_user_id" field to the value that was provided on create.
func (u *MiningGoodStockUpsert) UpdatePoolRootUserID() *MiningGoodStockUpsert {
	u.SetExcluded(mininggoodstock.FieldPoolRootUserID)
	return u
}

// ClearPoolRootUserID clears the value of the "pool_root_user_id" field.
func (u *MiningGoodStockUpsert) ClearPoolRootUserID() *MiningGoodStockUpsert {
	u.SetNull(mininggoodstock.FieldPoolRootUserID)
	return u
}

// SetPoolGoodUserID sets the "pool_good_user_id" field.
func (u *MiningGoodStockUpsert) SetPoolGoodUserID(v uuid.UUID) *MiningGoodStockUpsert {
	u.Set(mininggoodstock.FieldPoolGoodUserID, v)
	return u
}

// UpdatePoolGoodUserID sets the "pool_good_user_id" field to the value that was provided on create.
func (u *MiningGoodStockUpsert) UpdatePoolGoodUserID() *MiningGoodStockUpsert {
	u.SetExcluded(mininggoodstock.FieldPoolGoodUserID)
	return u
}

// ClearPoolGoodUserID clears the value of the "pool_good_user_id" field.
func (u *MiningGoodStockUpsert) ClearPoolGoodUserID() *MiningGoodStockUpsert {
	u.SetNull(mininggoodstock.FieldPoolGoodUserID)
	return u
}

// SetTotal sets the "total" field.
func (u *MiningGoodStockUpsert) SetTotal(v decimal.Decimal) *MiningGoodStockUpsert {
	u.Set(mininggoodstock.FieldTotal, v)
	return u
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *MiningGoodStockUpsert) UpdateTotal() *MiningGoodStockUpsert {
	u.SetExcluded(mininggoodstock.FieldTotal)
	return u
}

// ClearTotal clears the value of the "total" field.
func (u *MiningGoodStockUpsert) ClearTotal() *MiningGoodStockUpsert {
	u.SetNull(mininggoodstock.FieldTotal)
	return u
}

// SetSpotQuantity sets the "spot_quantity" field.
func (u *MiningGoodStockUpsert) SetSpotQuantity(v decimal.Decimal) *MiningGoodStockUpsert {
	u.Set(mininggoodstock.FieldSpotQuantity, v)
	return u
}

// UpdateSpotQuantity sets the "spot_quantity" field to the value that was provided on create.
func (u *MiningGoodStockUpsert) UpdateSpotQuantity() *MiningGoodStockUpsert {
	u.SetExcluded(mininggoodstock.FieldSpotQuantity)
	return u
}

// ClearSpotQuantity clears the value of the "spot_quantity" field.
func (u *MiningGoodStockUpsert) ClearSpotQuantity() *MiningGoodStockUpsert {
	u.SetNull(mininggoodstock.FieldSpotQuantity)
	return u
}

// SetLocked sets the "locked" field.
func (u *MiningGoodStockUpsert) SetLocked(v decimal.Decimal) *MiningGoodStockUpsert {
	u.Set(mininggoodstock.FieldLocked, v)
	return u
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *MiningGoodStockUpsert) UpdateLocked() *MiningGoodStockUpsert {
	u.SetExcluded(mininggoodstock.FieldLocked)
	return u
}

// ClearLocked clears the value of the "locked" field.
func (u *MiningGoodStockUpsert) ClearLocked() *MiningGoodStockUpsert {
	u.SetNull(mininggoodstock.FieldLocked)
	return u
}

// SetInService sets the "in_service" field.
func (u *MiningGoodStockUpsert) SetInService(v decimal.Decimal) *MiningGoodStockUpsert {
	u.Set(mininggoodstock.FieldInService, v)
	return u
}

// UpdateInService sets the "in_service" field to the value that was provided on create.
func (u *MiningGoodStockUpsert) UpdateInService() *MiningGoodStockUpsert {
	u.SetExcluded(mininggoodstock.FieldInService)
	return u
}

// ClearInService clears the value of the "in_service" field.
func (u *MiningGoodStockUpsert) ClearInService() *MiningGoodStockUpsert {
	u.SetNull(mininggoodstock.FieldInService)
	return u
}

// SetWaitStart sets the "wait_start" field.
func (u *MiningGoodStockUpsert) SetWaitStart(v decimal.Decimal) *MiningGoodStockUpsert {
	u.Set(mininggoodstock.FieldWaitStart, v)
	return u
}

// UpdateWaitStart sets the "wait_start" field to the value that was provided on create.
func (u *MiningGoodStockUpsert) UpdateWaitStart() *MiningGoodStockUpsert {
	u.SetExcluded(mininggoodstock.FieldWaitStart)
	return u
}

// ClearWaitStart clears the value of the "wait_start" field.
func (u *MiningGoodStockUpsert) ClearWaitStart() *MiningGoodStockUpsert {
	u.SetNull(mininggoodstock.FieldWaitStart)
	return u
}

// SetSold sets the "sold" field.
func (u *MiningGoodStockUpsert) SetSold(v decimal.Decimal) *MiningGoodStockUpsert {
	u.Set(mininggoodstock.FieldSold, v)
	return u
}

// UpdateSold sets the "sold" field to the value that was provided on create.
func (u *MiningGoodStockUpsert) UpdateSold() *MiningGoodStockUpsert {
	u.SetExcluded(mininggoodstock.FieldSold)
	return u
}

// ClearSold clears the value of the "sold" field.
func (u *MiningGoodStockUpsert) ClearSold() *MiningGoodStockUpsert {
	u.SetNull(mininggoodstock.FieldSold)
	return u
}

// SetAppReserved sets the "app_reserved" field.
func (u *MiningGoodStockUpsert) SetAppReserved(v decimal.Decimal) *MiningGoodStockUpsert {
	u.Set(mininggoodstock.FieldAppReserved, v)
	return u
}

// UpdateAppReserved sets the "app_reserved" field to the value that was provided on create.
func (u *MiningGoodStockUpsert) UpdateAppReserved() *MiningGoodStockUpsert {
	u.SetExcluded(mininggoodstock.FieldAppReserved)
	return u
}

// ClearAppReserved clears the value of the "app_reserved" field.
func (u *MiningGoodStockUpsert) ClearAppReserved() *MiningGoodStockUpsert {
	u.SetNull(mininggoodstock.FieldAppReserved)
	return u
}

// SetState sets the "state" field.
func (u *MiningGoodStockUpsert) SetState(v string) *MiningGoodStockUpsert {
	u.Set(mininggoodstock.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *MiningGoodStockUpsert) UpdateState() *MiningGoodStockUpsert {
	u.SetExcluded(mininggoodstock.FieldState)
	return u
}

// ClearState clears the value of the "state" field.
func (u *MiningGoodStockUpsert) ClearState() *MiningGoodStockUpsert {
	u.SetNull(mininggoodstock.FieldState)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MiningGoodStock.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mininggoodstock.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MiningGoodStockUpsertOne) UpdateNewValues() *MiningGoodStockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(mininggoodstock.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MiningGoodStock.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MiningGoodStockUpsertOne) Ignore() *MiningGoodStockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MiningGoodStockUpsertOne) DoNothing() *MiningGoodStockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MiningGoodStockCreate.OnConflict
// documentation for more info.
func (u *MiningGoodStockUpsertOne) Update(set func(*MiningGoodStockUpsert)) *MiningGoodStockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MiningGoodStockUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *MiningGoodStockUpsertOne) SetEntID(v uuid.UUID) *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *MiningGoodStockUpsertOne) UpdateEntID() *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *MiningGoodStockUpsertOne) SetCreatedAt(v uint32) *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *MiningGoodStockUpsertOne) AddCreatedAt(v uint32) *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MiningGoodStockUpsertOne) UpdateCreatedAt() *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MiningGoodStockUpsertOne) SetUpdatedAt(v uint32) *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *MiningGoodStockUpsertOne) AddUpdatedAt(v uint32) *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MiningGoodStockUpsertOne) UpdateUpdatedAt() *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MiningGoodStockUpsertOne) SetDeletedAt(v uint32) *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *MiningGoodStockUpsertOne) AddDeletedAt(v uint32) *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MiningGoodStockUpsertOne) UpdateDeletedAt() *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetGoodStockID sets the "good_stock_id" field.
func (u *MiningGoodStockUpsertOne) SetGoodStockID(v uuid.UUID) *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetGoodStockID(v)
	})
}

// UpdateGoodStockID sets the "good_stock_id" field to the value that was provided on create.
func (u *MiningGoodStockUpsertOne) UpdateGoodStockID() *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdateGoodStockID()
	})
}

// ClearGoodStockID clears the value of the "good_stock_id" field.
func (u *MiningGoodStockUpsertOne) ClearGoodStockID() *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.ClearGoodStockID()
	})
}

// SetPoolRootUserID sets the "pool_root_user_id" field.
func (u *MiningGoodStockUpsertOne) SetPoolRootUserID(v uuid.UUID) *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetPoolRootUserID(v)
	})
}

// UpdatePoolRootUserID sets the "pool_root_user_id" field to the value that was provided on create.
func (u *MiningGoodStockUpsertOne) UpdatePoolRootUserID() *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdatePoolRootUserID()
	})
}

// ClearPoolRootUserID clears the value of the "pool_root_user_id" field.
func (u *MiningGoodStockUpsertOne) ClearPoolRootUserID() *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.ClearPoolRootUserID()
	})
}

// SetPoolGoodUserID sets the "pool_good_user_id" field.
func (u *MiningGoodStockUpsertOne) SetPoolGoodUserID(v uuid.UUID) *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetPoolGoodUserID(v)
	})
}

// UpdatePoolGoodUserID sets the "pool_good_user_id" field to the value that was provided on create.
func (u *MiningGoodStockUpsertOne) UpdatePoolGoodUserID() *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdatePoolGoodUserID()
	})
}

// ClearPoolGoodUserID clears the value of the "pool_good_user_id" field.
func (u *MiningGoodStockUpsertOne) ClearPoolGoodUserID() *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.ClearPoolGoodUserID()
	})
}

// SetTotal sets the "total" field.
func (u *MiningGoodStockUpsertOne) SetTotal(v decimal.Decimal) *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetTotal(v)
	})
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *MiningGoodStockUpsertOne) UpdateTotal() *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdateTotal()
	})
}

// ClearTotal clears the value of the "total" field.
func (u *MiningGoodStockUpsertOne) ClearTotal() *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.ClearTotal()
	})
}

// SetSpotQuantity sets the "spot_quantity" field.
func (u *MiningGoodStockUpsertOne) SetSpotQuantity(v decimal.Decimal) *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetSpotQuantity(v)
	})
}

// UpdateSpotQuantity sets the "spot_quantity" field to the value that was provided on create.
func (u *MiningGoodStockUpsertOne) UpdateSpotQuantity() *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdateSpotQuantity()
	})
}

// ClearSpotQuantity clears the value of the "spot_quantity" field.
func (u *MiningGoodStockUpsertOne) ClearSpotQuantity() *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.ClearSpotQuantity()
	})
}

// SetLocked sets the "locked" field.
func (u *MiningGoodStockUpsertOne) SetLocked(v decimal.Decimal) *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetLocked(v)
	})
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *MiningGoodStockUpsertOne) UpdateLocked() *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdateLocked()
	})
}

// ClearLocked clears the value of the "locked" field.
func (u *MiningGoodStockUpsertOne) ClearLocked() *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.ClearLocked()
	})
}

// SetInService sets the "in_service" field.
func (u *MiningGoodStockUpsertOne) SetInService(v decimal.Decimal) *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetInService(v)
	})
}

// UpdateInService sets the "in_service" field to the value that was provided on create.
func (u *MiningGoodStockUpsertOne) UpdateInService() *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdateInService()
	})
}

// ClearInService clears the value of the "in_service" field.
func (u *MiningGoodStockUpsertOne) ClearInService() *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.ClearInService()
	})
}

// SetWaitStart sets the "wait_start" field.
func (u *MiningGoodStockUpsertOne) SetWaitStart(v decimal.Decimal) *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetWaitStart(v)
	})
}

// UpdateWaitStart sets the "wait_start" field to the value that was provided on create.
func (u *MiningGoodStockUpsertOne) UpdateWaitStart() *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdateWaitStart()
	})
}

// ClearWaitStart clears the value of the "wait_start" field.
func (u *MiningGoodStockUpsertOne) ClearWaitStart() *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.ClearWaitStart()
	})
}

// SetSold sets the "sold" field.
func (u *MiningGoodStockUpsertOne) SetSold(v decimal.Decimal) *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetSold(v)
	})
}

// UpdateSold sets the "sold" field to the value that was provided on create.
func (u *MiningGoodStockUpsertOne) UpdateSold() *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdateSold()
	})
}

// ClearSold clears the value of the "sold" field.
func (u *MiningGoodStockUpsertOne) ClearSold() *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.ClearSold()
	})
}

// SetAppReserved sets the "app_reserved" field.
func (u *MiningGoodStockUpsertOne) SetAppReserved(v decimal.Decimal) *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetAppReserved(v)
	})
}

// UpdateAppReserved sets the "app_reserved" field to the value that was provided on create.
func (u *MiningGoodStockUpsertOne) UpdateAppReserved() *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdateAppReserved()
	})
}

// ClearAppReserved clears the value of the "app_reserved" field.
func (u *MiningGoodStockUpsertOne) ClearAppReserved() *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.ClearAppReserved()
	})
}

// SetState sets the "state" field.
func (u *MiningGoodStockUpsertOne) SetState(v string) *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *MiningGoodStockUpsertOne) UpdateState() *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *MiningGoodStockUpsertOne) ClearState() *MiningGoodStockUpsertOne {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.ClearState()
	})
}

// Exec executes the query.
func (u *MiningGoodStockUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for MiningGoodStockCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MiningGoodStockUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MiningGoodStockUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MiningGoodStockUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MiningGoodStockCreateBulk is the builder for creating many MiningGoodStock entities in bulk.
type MiningGoodStockCreateBulk struct {
	config
	err      error
	builders []*MiningGoodStockCreate
	conflict []sql.ConflictOption
}

// Save creates the MiningGoodStock entities in the database.
func (mgscb *MiningGoodStockCreateBulk) Save(ctx context.Context) ([]*MiningGoodStock, error) {
	if mgscb.err != nil {
		return nil, mgscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mgscb.builders))
	nodes := make([]*MiningGoodStock, len(mgscb.builders))
	mutators := make([]Mutator, len(mgscb.builders))
	for i := range mgscb.builders {
		func(i int, root context.Context) {
			builder := mgscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MiningGoodStockMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mgscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mgscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mgscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mgscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mgscb *MiningGoodStockCreateBulk) SaveX(ctx context.Context) []*MiningGoodStock {
	v, err := mgscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mgscb *MiningGoodStockCreateBulk) Exec(ctx context.Context) error {
	_, err := mgscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mgscb *MiningGoodStockCreateBulk) ExecX(ctx context.Context) {
	if err := mgscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MiningGoodStock.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MiningGoodStockUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (mgscb *MiningGoodStockCreateBulk) OnConflict(opts ...sql.ConflictOption) *MiningGoodStockUpsertBulk {
	mgscb.conflict = opts
	return &MiningGoodStockUpsertBulk{
		create: mgscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MiningGoodStock.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mgscb *MiningGoodStockCreateBulk) OnConflictColumns(columns ...string) *MiningGoodStockUpsertBulk {
	mgscb.conflict = append(mgscb.conflict, sql.ConflictColumns(columns...))
	return &MiningGoodStockUpsertBulk{
		create: mgscb,
	}
}

// MiningGoodStockUpsertBulk is the builder for "upsert"-ing
// a bulk of MiningGoodStock nodes.
type MiningGoodStockUpsertBulk struct {
	create *MiningGoodStockCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MiningGoodStock.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mininggoodstock.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MiningGoodStockUpsertBulk) UpdateNewValues() *MiningGoodStockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(mininggoodstock.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MiningGoodStock.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MiningGoodStockUpsertBulk) Ignore() *MiningGoodStockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MiningGoodStockUpsertBulk) DoNothing() *MiningGoodStockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MiningGoodStockCreateBulk.OnConflict
// documentation for more info.
func (u *MiningGoodStockUpsertBulk) Update(set func(*MiningGoodStockUpsert)) *MiningGoodStockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MiningGoodStockUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *MiningGoodStockUpsertBulk) SetEntID(v uuid.UUID) *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *MiningGoodStockUpsertBulk) UpdateEntID() *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *MiningGoodStockUpsertBulk) SetCreatedAt(v uint32) *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *MiningGoodStockUpsertBulk) AddCreatedAt(v uint32) *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MiningGoodStockUpsertBulk) UpdateCreatedAt() *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MiningGoodStockUpsertBulk) SetUpdatedAt(v uint32) *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *MiningGoodStockUpsertBulk) AddUpdatedAt(v uint32) *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MiningGoodStockUpsertBulk) UpdateUpdatedAt() *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MiningGoodStockUpsertBulk) SetDeletedAt(v uint32) *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *MiningGoodStockUpsertBulk) AddDeletedAt(v uint32) *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MiningGoodStockUpsertBulk) UpdateDeletedAt() *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetGoodStockID sets the "good_stock_id" field.
func (u *MiningGoodStockUpsertBulk) SetGoodStockID(v uuid.UUID) *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetGoodStockID(v)
	})
}

// UpdateGoodStockID sets the "good_stock_id" field to the value that was provided on create.
func (u *MiningGoodStockUpsertBulk) UpdateGoodStockID() *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdateGoodStockID()
	})
}

// ClearGoodStockID clears the value of the "good_stock_id" field.
func (u *MiningGoodStockUpsertBulk) ClearGoodStockID() *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.ClearGoodStockID()
	})
}

// SetPoolRootUserID sets the "pool_root_user_id" field.
func (u *MiningGoodStockUpsertBulk) SetPoolRootUserID(v uuid.UUID) *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetPoolRootUserID(v)
	})
}

// UpdatePoolRootUserID sets the "pool_root_user_id" field to the value that was provided on create.
func (u *MiningGoodStockUpsertBulk) UpdatePoolRootUserID() *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdatePoolRootUserID()
	})
}

// ClearPoolRootUserID clears the value of the "pool_root_user_id" field.
func (u *MiningGoodStockUpsertBulk) ClearPoolRootUserID() *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.ClearPoolRootUserID()
	})
}

// SetPoolGoodUserID sets the "pool_good_user_id" field.
func (u *MiningGoodStockUpsertBulk) SetPoolGoodUserID(v uuid.UUID) *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetPoolGoodUserID(v)
	})
}

// UpdatePoolGoodUserID sets the "pool_good_user_id" field to the value that was provided on create.
func (u *MiningGoodStockUpsertBulk) UpdatePoolGoodUserID() *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdatePoolGoodUserID()
	})
}

// ClearPoolGoodUserID clears the value of the "pool_good_user_id" field.
func (u *MiningGoodStockUpsertBulk) ClearPoolGoodUserID() *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.ClearPoolGoodUserID()
	})
}

// SetTotal sets the "total" field.
func (u *MiningGoodStockUpsertBulk) SetTotal(v decimal.Decimal) *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetTotal(v)
	})
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *MiningGoodStockUpsertBulk) UpdateTotal() *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdateTotal()
	})
}

// ClearTotal clears the value of the "total" field.
func (u *MiningGoodStockUpsertBulk) ClearTotal() *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.ClearTotal()
	})
}

// SetSpotQuantity sets the "spot_quantity" field.
func (u *MiningGoodStockUpsertBulk) SetSpotQuantity(v decimal.Decimal) *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetSpotQuantity(v)
	})
}

// UpdateSpotQuantity sets the "spot_quantity" field to the value that was provided on create.
func (u *MiningGoodStockUpsertBulk) UpdateSpotQuantity() *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdateSpotQuantity()
	})
}

// ClearSpotQuantity clears the value of the "spot_quantity" field.
func (u *MiningGoodStockUpsertBulk) ClearSpotQuantity() *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.ClearSpotQuantity()
	})
}

// SetLocked sets the "locked" field.
func (u *MiningGoodStockUpsertBulk) SetLocked(v decimal.Decimal) *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetLocked(v)
	})
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *MiningGoodStockUpsertBulk) UpdateLocked() *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdateLocked()
	})
}

// ClearLocked clears the value of the "locked" field.
func (u *MiningGoodStockUpsertBulk) ClearLocked() *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.ClearLocked()
	})
}

// SetInService sets the "in_service" field.
func (u *MiningGoodStockUpsertBulk) SetInService(v decimal.Decimal) *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetInService(v)
	})
}

// UpdateInService sets the "in_service" field to the value that was provided on create.
func (u *MiningGoodStockUpsertBulk) UpdateInService() *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdateInService()
	})
}

// ClearInService clears the value of the "in_service" field.
func (u *MiningGoodStockUpsertBulk) ClearInService() *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.ClearInService()
	})
}

// SetWaitStart sets the "wait_start" field.
func (u *MiningGoodStockUpsertBulk) SetWaitStart(v decimal.Decimal) *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetWaitStart(v)
	})
}

// UpdateWaitStart sets the "wait_start" field to the value that was provided on create.
func (u *MiningGoodStockUpsertBulk) UpdateWaitStart() *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdateWaitStart()
	})
}

// ClearWaitStart clears the value of the "wait_start" field.
func (u *MiningGoodStockUpsertBulk) ClearWaitStart() *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.ClearWaitStart()
	})
}

// SetSold sets the "sold" field.
func (u *MiningGoodStockUpsertBulk) SetSold(v decimal.Decimal) *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetSold(v)
	})
}

// UpdateSold sets the "sold" field to the value that was provided on create.
func (u *MiningGoodStockUpsertBulk) UpdateSold() *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdateSold()
	})
}

// ClearSold clears the value of the "sold" field.
func (u *MiningGoodStockUpsertBulk) ClearSold() *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.ClearSold()
	})
}

// SetAppReserved sets the "app_reserved" field.
func (u *MiningGoodStockUpsertBulk) SetAppReserved(v decimal.Decimal) *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetAppReserved(v)
	})
}

// UpdateAppReserved sets the "app_reserved" field to the value that was provided on create.
func (u *MiningGoodStockUpsertBulk) UpdateAppReserved() *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdateAppReserved()
	})
}

// ClearAppReserved clears the value of the "app_reserved" field.
func (u *MiningGoodStockUpsertBulk) ClearAppReserved() *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.ClearAppReserved()
	})
}

// SetState sets the "state" field.
func (u *MiningGoodStockUpsertBulk) SetState(v string) *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *MiningGoodStockUpsertBulk) UpdateState() *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *MiningGoodStockUpsertBulk) ClearState() *MiningGoodStockUpsertBulk {
	return u.Update(func(s *MiningGoodStockUpsert) {
		s.ClearState()
	})
}

// Exec executes the query.
func (u *MiningGoodStockUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the MiningGoodStockCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for MiningGoodStockCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MiningGoodStockUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appgooddescription"
	"github.com/google/uuid"
)

// AppGoodDescriptionCreate is the builder for creating a AppGoodDescription entity.
type AppGoodDescriptionCreate struct {
	config
	mutation *AppGoodDescriptionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (agdc *AppGoodDescriptionCreate) SetEntID(u uuid.UUID) *AppGoodDescriptionCreate {
	agdc.mutation.SetEntID(u)
	return agdc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (agdc *AppGoodDescriptionCreate) SetNillableEntID(u *uuid.UUID) *AppGoodDescriptionCreate {
	if u != nil {
		agdc.SetEntID(*u)
	}
	return agdc
}

// SetAppGoodID sets the "app_good_id" field.
func (agdc *AppGoodDescriptionCreate) SetAppGoodID(u uuid.UUID) *AppGoodDescriptionCreate {
	agdc.mutation.SetAppGoodID(u)
	return agdc
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (agdc *AppGoodDescriptionCreate) SetNillableAppGoodID(u *uuid.UUID) *AppGoodDescriptionCreate {
	if u != nil {
		agdc.SetAppGoodID(*u)
	}
	return agdc
}

// SetDescription sets the "description" field.
func (agdc *AppGoodDescriptionCreate) SetDescription(s string) *AppGoodDescriptionCreate {
	agdc.mutation.SetDescription(s)
	return agdc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (agdc *AppGoodDescriptionCreate) SetNillableDescription(s *string) *AppGoodDescriptionCreate {
	if s != nil {
		agdc.SetDescription(*s)
	}
	return agdc
}

// SetIndex sets the "index" field.
func (agdc *AppGoodDescriptionCreate) SetIndex(u uint8) *AppGoodDescriptionCreate {
	agdc.mutation.SetIndex(u)
	return agdc
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (agdc *AppGoodDescriptionCreate) SetNillableIndex(u *uint8) *AppGoodDescriptionCreate {
	if u != nil {
		agdc.SetIndex(*u)
	}
	return agdc
}

// SetID sets the "id" field.
func (agdc *AppGoodDescriptionCreate) SetID(u uint32) *AppGoodDescriptionCreate {
	agdc.mutation.SetID(u)
	return agdc
}

// Mutation returns the AppGoodDescriptionMutation object of the builder.
func (agdc *AppGoodDescriptionCreate) Mutation() *AppGoodDescriptionMutation {
	return agdc.mutation
}

// Save creates the AppGoodDescription in the database.
func (agdc *AppGoodDescriptionCreate) Save(ctx context.Context) (*AppGoodDescription, error) {
	agdc.defaults()
	return withHooks(ctx, agdc.sqlSave, agdc.mutation, agdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (agdc *AppGoodDescriptionCreate) SaveX(ctx context.Context) *AppGoodDescription {
	v, err := agdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agdc *AppGoodDescriptionCreate) Exec(ctx context.Context) error {
	_, err := agdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agdc *AppGoodDescriptionCreate) ExecX(ctx context.Context) {
	if err := agdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agdc *AppGoodDescriptionCreate) defaults() {
	if _, ok := agdc.mutation.EntID(); !ok {
		v := appgooddescription.DefaultEntID()
		agdc.mutation.SetEntID(v)
	}
	if _, ok := agdc.mutation.AppGoodID(); !ok {
		v := appgooddescription.DefaultAppGoodID()
		agdc.mutation.SetAppGoodID(v)
	}
	if _, ok := agdc.mutation.Description(); !ok {
		v := appgooddescription.DefaultDescription
		agdc.mutation.SetDescription(v)
	}
	if _, ok := agdc.mutation.Index(); !ok {
		v := appgooddescription.DefaultIndex
		agdc.mutation.SetIndex(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (agdc *AppGoodDescriptionCreate) check() error {
	if _, ok := agdc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "AppGoodDescription.ent_id"`)}
	}
	return nil
}

func (agdc *AppGoodDescriptionCreate) sqlSave(ctx context.Context) (*AppGoodDescription, error) {
	if err := agdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := agdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, agdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	agdc.mutation.id = &_node.ID
	agdc.mutation.done = true
	return _node, nil
}

func (agdc *AppGoodDescriptionCreate) createSpec() (*AppGoodDescription, *sqlgraph.CreateSpec) {
	var (
		_node = &AppGoodDescription{config: agdc.config}
		_spec = sqlgraph.NewCreateSpec(appgooddescription.Table, sqlgraph.NewFieldSpec(appgooddescription.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = agdc.conflict
	if id, ok := agdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := agdc.mutation.EntID(); ok {
		_spec.SetField(appgooddescription.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := agdc.mutation.AppGoodID(); ok {
		_spec.SetField(appgooddescription.FieldAppGoodID, field.TypeUUID, value)
		_node.AppGoodID = value
	}
	if value, ok := agdc.mutation.Description(); ok {
		_spec.SetField(appgooddescription.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := agdc.mutation.Index(); ok {
		_spec.SetField(appgooddescription.FieldIndex, field.TypeUint8, value)
		_node.Index = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppGoodDescription.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppGoodDescriptionUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (agdc *AppGoodDescriptionCreate) OnConflict(opts ...sql.ConflictOption) *AppGoodDescriptionUpsertOne {
	agdc.conflict = opts
	return &AppGoodDescriptionUpsertOne{
		create: agdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppGoodDescription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (agdc *AppGoodDescriptionCreate) OnConflictColumns(columns ...string) *AppGoodDescriptionUpsertOne {
	agdc.conflict = append(agdc.conflict, sql.ConflictColumns(columns...))
	return &AppGoodDescriptionUpsertOne{
		create: agdc,
	}
}

type (
	// AppGoodDescriptionUpsertOne is the builder for "upsert"-ing
	//  one AppGoodDescription node.
	AppGoodDescriptionUpsertOne struct {
		create *AppGoodDescriptionCreate
	}

	// AppGoodDescriptionUpsert is the "OnConflict" setter.
	AppGoodDescriptionUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *AppGoodDescriptionUpsert) SetEntID(v uuid.UUID) *AppGoodDescriptionUpsert {
	u.Set(appgooddescription.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppGoodDescriptionUpsert) UpdateEntID() *AppGoodDescriptionUpsert {
	u.SetExcluded(appgooddescription.FieldEntID)
	return u
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppGoodDescriptionUpsert) SetAppGoodID(v uuid.UUID) *AppGoodDescriptionUpsert {
	u.Set(appgooddescription.FieldAppGoodID, v)
	return u
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppGoodDescriptionUpsert) UpdateAppGoodID() *AppGoodDescriptionUpsert {
	u.SetExcluded(appgooddescription.FieldAppGoodID)
	return u
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppGoodDescriptionUpsert) ClearAppGoodID() *AppGoodDescriptionUpsert {
	u.SetNull(appgooddescription.FieldAppGoodID)
	return u
}

// SetDescription sets the "description" field.
func (u *AppGoodDescriptionUpsert) SetDescription(v string) *AppGoodDescriptionUpsert {
	u.Set(appgooddescription.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AppGoodDescriptionUpsert) UpdateDescription() *AppGoodDescriptionUpsert {
	u.SetExcluded(appgooddescription.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *AppGoodDescriptionUpsert) ClearDescription() *AppGoodDescriptionUpsert {
	u.SetNull(appgooddescription.FieldDescription)
	return u
}

// SetIndex sets the "index" field.
func (u *AppGoodDescriptionUpsert) SetIndex(v uint8) *AppGoodDescriptionUpsert {
	u.Set(appgooddescription.FieldIndex, v)
	return u
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *AppGoodDescriptionUpsert) UpdateIndex() *AppGoodDescriptionUpsert {
	u.SetExcluded(appgooddescription.FieldIndex)
	return u
}

// AddIndex adds v to the "index" field.
func (u *AppGoodDescriptionUpsert) AddIndex(v uint8) *AppGoodDescriptionUpsert {
	u.Add(appgooddescription.FieldIndex, v)
	return u
}

// ClearIndex clears the value of the "index" field.
func (u *AppGoodDescriptionUpsert) ClearIndex() *AppGoodDescriptionUpsert {
	u.SetNull(appgooddescription.FieldIndex)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppGoodDescription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appgooddescription.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppGoodDescriptionUpsertOne) UpdateNewValues() *AppGoodDescriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appgooddescription.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppGoodDescription.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppGoodDescriptionUpsertOne) Ignore() *AppGoodDescriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppGoodDescriptionUpsertOne) DoNothing() *AppGoodDescriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppGoodDescriptionCreate.OnConflict
// documentation for more info.
func (u *AppGoodDescriptionUpsertOne) Update(set func(*AppGoodDescriptionUpsert)) *AppGoodDescriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppGoodDescriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppGoodDescriptionUpsertOne) SetEntID(v uuid.UUID) *AppGoodDescriptionUpsertOne {
	return u.Update(func(s *AppGoodDescriptionUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppGoodDescriptionUpsertOne) UpdateEntID() *AppGoodDescriptionUpsertOne {
	return u.Update(func(s *AppGoodDescriptionUpsert) {
		s.UpdateEntID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppGoodDescriptionUpsertOne) SetAppGoodID(v uuid.UUID) *AppGoodDescriptionUpsertOne {
	return u.Update(func(s *AppGoodDescriptionUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppGoodDescriptionUpsertOne) UpdateAppGoodID() *AppGoodDescriptionUpsertOne {
	return u.Update(func(s *AppGoodDescriptionUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppGoodDescriptionUpsertOne) ClearAppGoodID() *AppGoodDescriptionUpsertOne {
	return u.Update(func(s *AppGoodDescriptionUpsert) {
		s.ClearAppGoodID()
	})
}

// SetDescription sets the "description" field.
func (u *AppGoodDescriptionUpsertOne) SetDescription(v string) *AppGoodDescriptionUpsertOne {
	return u.Update(func(s *AppGoodDescriptionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AppGoodDescriptionUpsertOne) UpdateDescription() *AppGoodDescriptionUpsertOne {
	return u.Update(func(s *AppGoodDescriptionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *AppGoodDescriptionUpsertOne) ClearDescription() *AppGoodDescriptionUpsertOne {
	return u.Update(func(s *AppGoodDescriptionUpsert) {
		s.ClearDescription()
	})
}

// SetIndex sets the "index" field.
func (u *AppGoodDescriptionUpsertOne) SetIndex(v uint8) *AppGoodDescriptionUpsertOne {
	return u.Update(func(s *AppGoodDescriptionUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *AppGoodDescriptionUpsertOne) AddIndex(v uint8) *AppGoodDescriptionUpsertOne {
	return u.Update(func(s *AppGoodDescriptionUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *AppGoodDescriptionUpsertOne) UpdateIndex() *AppGoodDescriptionUpsertOne {
	return u.Update(func(s *AppGoodDescriptionUpsert) {
		s.UpdateIndex()
	})
}

// ClearIndex clears the value of the "index" field.
func (u *AppGoodDescriptionUpsertOne) ClearIndex() *AppGoodDescriptionUpsertOne {
	return u.Update(func(s *AppGoodDescriptionUpsert) {
		s.ClearIndex()
	})
}

// Exec executes the query.
func (u *AppGoodDescriptionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppGoodDescriptionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppGoodDescriptionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppGoodDescriptionUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppGoodDescriptionUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppGoodDescriptionCreateBulk is the builder for creating many AppGoodDescription entities in bulk.
type AppGoodDescriptionCreateBulk struct {
	config
	err      error
	builders []*AppGoodDescriptionCreate
	conflict []sql.ConflictOption
}

// Save creates the AppGoodDescription entities in the database.
func (agdcb *AppGoodDescriptionCreateBulk) Save(ctx context.Context) ([]*AppGoodDescription, error) {
	if agdcb.err != nil {
		return nil, agdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(agdcb.builders))
	nodes := make([]*AppGoodDescription, len(agdcb.builders))
	mutators := make([]Mutator, len(agdcb.builders))
	for i := range agdcb.builders {
		func(i int, root context.Context) {
			builder := agdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppGoodDescriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, agdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = agdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, agdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, agdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (agdcb *AppGoodDescriptionCreateBulk) SaveX(ctx context.Context) []*AppGoodDescription {
	v, err := agdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agdcb *AppGoodDescriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := agdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agdcb *AppGoodDescriptionCreateBulk) ExecX(ctx context.Context) {
	if err := agdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppGoodDescription.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppGoodDescriptionUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (agdcb *AppGoodDescriptionCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppGoodDescriptionUpsertBulk {
	agdcb.conflict = opts
	return &AppGoodDescriptionUpsertBulk{
		create: agdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppGoodDescription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (agdcb *AppGoodDescriptionCreateBulk) OnConflictColumns(columns ...string) *AppGoodDescriptionUpsertBulk {
	agdcb.conflict = append(agdcb.conflict, sql.ConflictColumns(columns...))
	return &AppGoodDescriptionUpsertBulk{
		create: agdcb,
	}
}

// AppGoodDescriptionUpsertBulk is the builder for "upsert"-ing
// a bulk of AppGoodDescription nodes.
type AppGoodDescriptionUpsertBulk struct {
	create *AppGoodDescriptionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppGoodDescription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appgooddescription.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppGoodDescriptionUpsertBulk) UpdateNewValues() *AppGoodDescriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appgooddescription.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppGoodDescription.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppGoodDescriptionUpsertBulk) Ignore() *AppGoodDescriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppGoodDescriptionUpsertBulk) DoNothing() *AppGoodDescriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppGoodDescriptionCreateBulk.OnConflict
// documentation for more info.
func (u *AppGoodDescriptionUpsertBulk) Update(set func(*AppGoodDescriptionUpsert)) *AppGoodDescriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppGoodDescriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppGoodDescriptionUpsertBulk) SetEntID(v uuid.UUID) *AppGoodDescriptionUpsertBulk {
	return u.Update(func(s *AppGoodDescriptionUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppGoodDescriptionUpsertBulk) UpdateEntID() *AppGoodDescriptionUpsertBulk {
	return u.Update(func(s *AppGoodDescriptionUpsert) {
		s.UpdateEntID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppGoodDescriptionUpsertBulk) SetAppGoodID(v uuid.UUID) *AppGoodDescriptionUpsertBulk {
	return u.Update(func(s *AppGoodDescriptionUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppGoodDescriptionUpsertBulk) UpdateAppGoodID() *AppGoodDescriptionUpsertBulk {
	return u.Update(func(s *AppGoodDescriptionUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppGoodDescriptionUpsertBulk) ClearAppGoodID() *AppGoodDescriptionUpsertBulk {
	return u.Update(func(s *AppGoodDescriptionUpsert) {
		s.ClearAppGoodID()
	})
}

// SetDescription sets the "description" field.
func (u *AppGoodDescriptionUpsertBulk) SetDescription(v string) *AppGoodDescriptionUpsertBulk {
	return u.Update(func(s *AppGoodDescriptionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AppGoodDescriptionUpsertBulk) UpdateDescription() *AppGoodDescriptionUpsertBulk {
	return u.Update(func(s *AppGoodDescriptionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *AppGoodDescriptionUpsertBulk) ClearDescription() *AppGoodDescriptionUpsertBulk {
	return u.Update(func(s *AppGoodDescriptionUpsert) {
		s.ClearDescription()
	})
}

// SetIndex sets the "index" field.
func (u *AppGoodDescriptionUpsertBulk) SetIndex(v uint8) *AppGoodDescriptionUpsertBulk {
	return u.Update(func(s *AppGoodDescriptionUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *AppGoodDescriptionUpsertBulk) AddIndex(v uint8) *AppGoodDescriptionUpsertBulk {
	return u.Update(func(s *AppGoodDescriptionUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *AppGoodDescriptionUpsertBulk) UpdateIndex() *AppGoodDescriptionUpsertBulk {
	return u.Update(func(s *AppGoodDescriptionUpsert) {
		s.UpdateIndex()
	})
}

// ClearIndex clears the value of the "index" field.
func (u *AppGoodDescriptionUpsertBulk) ClearIndex() *AppGoodDescriptionUpsertBulk {
	return u.Update(func(s *AppGoodDescriptionUpsert) {
		s.ClearIndex()
	})
}

// Exec executes the query.
func (u *AppGoodDescriptionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the AppGoodDescriptionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppGoodDescriptionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppGoodDescriptionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

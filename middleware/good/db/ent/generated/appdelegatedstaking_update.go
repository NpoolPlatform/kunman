// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appdelegatedstaking"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// AppDelegatedStakingUpdate is the builder for updating AppDelegatedStaking entities.
type AppDelegatedStakingUpdate struct {
	config
	hooks     []Hook
	mutation  *AppDelegatedStakingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppDelegatedStakingUpdate builder.
func (adsu *AppDelegatedStakingUpdate) Where(ps ...predicate.AppDelegatedStaking) *AppDelegatedStakingUpdate {
	adsu.mutation.Where(ps...)
	return adsu
}

// SetEntID sets the "ent_id" field.
func (adsu *AppDelegatedStakingUpdate) SetEntID(u uuid.UUID) *AppDelegatedStakingUpdate {
	adsu.mutation.SetEntID(u)
	return adsu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (adsu *AppDelegatedStakingUpdate) SetNillableEntID(u *uuid.UUID) *AppDelegatedStakingUpdate {
	if u != nil {
		adsu.SetEntID(*u)
	}
	return adsu
}

// SetCreatedAt sets the "created_at" field.
func (adsu *AppDelegatedStakingUpdate) SetCreatedAt(u uint32) *AppDelegatedStakingUpdate {
	adsu.mutation.ResetCreatedAt()
	adsu.mutation.SetCreatedAt(u)
	return adsu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (adsu *AppDelegatedStakingUpdate) SetNillableCreatedAt(u *uint32) *AppDelegatedStakingUpdate {
	if u != nil {
		adsu.SetCreatedAt(*u)
	}
	return adsu
}

// AddCreatedAt adds u to the "created_at" field.
func (adsu *AppDelegatedStakingUpdate) AddCreatedAt(u int32) *AppDelegatedStakingUpdate {
	adsu.mutation.AddCreatedAt(u)
	return adsu
}

// SetUpdatedAt sets the "updated_at" field.
func (adsu *AppDelegatedStakingUpdate) SetUpdatedAt(u uint32) *AppDelegatedStakingUpdate {
	adsu.mutation.ResetUpdatedAt()
	adsu.mutation.SetUpdatedAt(u)
	return adsu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (adsu *AppDelegatedStakingUpdate) AddUpdatedAt(u int32) *AppDelegatedStakingUpdate {
	adsu.mutation.AddUpdatedAt(u)
	return adsu
}

// SetDeletedAt sets the "deleted_at" field.
func (adsu *AppDelegatedStakingUpdate) SetDeletedAt(u uint32) *AppDelegatedStakingUpdate {
	adsu.mutation.ResetDeletedAt()
	adsu.mutation.SetDeletedAt(u)
	return adsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (adsu *AppDelegatedStakingUpdate) SetNillableDeletedAt(u *uint32) *AppDelegatedStakingUpdate {
	if u != nil {
		adsu.SetDeletedAt(*u)
	}
	return adsu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (adsu *AppDelegatedStakingUpdate) AddDeletedAt(u int32) *AppDelegatedStakingUpdate {
	adsu.mutation.AddDeletedAt(u)
	return adsu
}

// SetAppGoodID sets the "app_good_id" field.
func (adsu *AppDelegatedStakingUpdate) SetAppGoodID(u uuid.UUID) *AppDelegatedStakingUpdate {
	adsu.mutation.SetAppGoodID(u)
	return adsu
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (adsu *AppDelegatedStakingUpdate) SetNillableAppGoodID(u *uuid.UUID) *AppDelegatedStakingUpdate {
	if u != nil {
		adsu.SetAppGoodID(*u)
	}
	return adsu
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (adsu *AppDelegatedStakingUpdate) ClearAppGoodID() *AppDelegatedStakingUpdate {
	adsu.mutation.ClearAppGoodID()
	return adsu
}

// SetServiceStartAt sets the "service_start_at" field.
func (adsu *AppDelegatedStakingUpdate) SetServiceStartAt(u uint32) *AppDelegatedStakingUpdate {
	adsu.mutation.ResetServiceStartAt()
	adsu.mutation.SetServiceStartAt(u)
	return adsu
}

// SetNillableServiceStartAt sets the "service_start_at" field if the given value is not nil.
func (adsu *AppDelegatedStakingUpdate) SetNillableServiceStartAt(u *uint32) *AppDelegatedStakingUpdate {
	if u != nil {
		adsu.SetServiceStartAt(*u)
	}
	return adsu
}

// AddServiceStartAt adds u to the "service_start_at" field.
func (adsu *AppDelegatedStakingUpdate) AddServiceStartAt(u int32) *AppDelegatedStakingUpdate {
	adsu.mutation.AddServiceStartAt(u)
	return adsu
}

// ClearServiceStartAt clears the value of the "service_start_at" field.
func (adsu *AppDelegatedStakingUpdate) ClearServiceStartAt() *AppDelegatedStakingUpdate {
	adsu.mutation.ClearServiceStartAt()
	return adsu
}

// SetStartMode sets the "start_mode" field.
func (adsu *AppDelegatedStakingUpdate) SetStartMode(s string) *AppDelegatedStakingUpdate {
	adsu.mutation.SetStartMode(s)
	return adsu
}

// SetNillableStartMode sets the "start_mode" field if the given value is not nil.
func (adsu *AppDelegatedStakingUpdate) SetNillableStartMode(s *string) *AppDelegatedStakingUpdate {
	if s != nil {
		adsu.SetStartMode(*s)
	}
	return adsu
}

// ClearStartMode clears the value of the "start_mode" field.
func (adsu *AppDelegatedStakingUpdate) ClearStartMode() *AppDelegatedStakingUpdate {
	adsu.mutation.ClearStartMode()
	return adsu
}

// SetEnableSetCommission sets the "enable_set_commission" field.
func (adsu *AppDelegatedStakingUpdate) SetEnableSetCommission(b bool) *AppDelegatedStakingUpdate {
	adsu.mutation.SetEnableSetCommission(b)
	return adsu
}

// SetNillableEnableSetCommission sets the "enable_set_commission" field if the given value is not nil.
func (adsu *AppDelegatedStakingUpdate) SetNillableEnableSetCommission(b *bool) *AppDelegatedStakingUpdate {
	if b != nil {
		adsu.SetEnableSetCommission(*b)
	}
	return adsu
}

// ClearEnableSetCommission clears the value of the "enable_set_commission" field.
func (adsu *AppDelegatedStakingUpdate) ClearEnableSetCommission() *AppDelegatedStakingUpdate {
	adsu.mutation.ClearEnableSetCommission()
	return adsu
}

// Mutation returns the AppDelegatedStakingMutation object of the builder.
func (adsu *AppDelegatedStakingUpdate) Mutation() *AppDelegatedStakingMutation {
	return adsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (adsu *AppDelegatedStakingUpdate) Save(ctx context.Context) (int, error) {
	adsu.defaults()
	return withHooks(ctx, adsu.sqlSave, adsu.mutation, adsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (adsu *AppDelegatedStakingUpdate) SaveX(ctx context.Context) int {
	affected, err := adsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (adsu *AppDelegatedStakingUpdate) Exec(ctx context.Context) error {
	_, err := adsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adsu *AppDelegatedStakingUpdate) ExecX(ctx context.Context) {
	if err := adsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (adsu *AppDelegatedStakingUpdate) defaults() {
	if _, ok := adsu.mutation.UpdatedAt(); !ok {
		v := appdelegatedstaking.UpdateDefaultUpdatedAt()
		adsu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (adsu *AppDelegatedStakingUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppDelegatedStakingUpdate {
	adsu.modifiers = append(adsu.modifiers, modifiers...)
	return adsu
}

func (adsu *AppDelegatedStakingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appdelegatedstaking.Table, appdelegatedstaking.Columns, sqlgraph.NewFieldSpec(appdelegatedstaking.FieldID, field.TypeUint32))
	if ps := adsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := adsu.mutation.EntID(); ok {
		_spec.SetField(appdelegatedstaking.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := adsu.mutation.CreatedAt(); ok {
		_spec.SetField(appdelegatedstaking.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := adsu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(appdelegatedstaking.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := adsu.mutation.UpdatedAt(); ok {
		_spec.SetField(appdelegatedstaking.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := adsu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(appdelegatedstaking.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := adsu.mutation.DeletedAt(); ok {
		_spec.SetField(appdelegatedstaking.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := adsu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(appdelegatedstaking.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := adsu.mutation.AppGoodID(); ok {
		_spec.SetField(appdelegatedstaking.FieldAppGoodID, field.TypeUUID, value)
	}
	if adsu.mutation.AppGoodIDCleared() {
		_spec.ClearField(appdelegatedstaking.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := adsu.mutation.ServiceStartAt(); ok {
		_spec.SetField(appdelegatedstaking.FieldServiceStartAt, field.TypeUint32, value)
	}
	if value, ok := adsu.mutation.AddedServiceStartAt(); ok {
		_spec.AddField(appdelegatedstaking.FieldServiceStartAt, field.TypeUint32, value)
	}
	if adsu.mutation.ServiceStartAtCleared() {
		_spec.ClearField(appdelegatedstaking.FieldServiceStartAt, field.TypeUint32)
	}
	if value, ok := adsu.mutation.StartMode(); ok {
		_spec.SetField(appdelegatedstaking.FieldStartMode, field.TypeString, value)
	}
	if adsu.mutation.StartModeCleared() {
		_spec.ClearField(appdelegatedstaking.FieldStartMode, field.TypeString)
	}
	if value, ok := adsu.mutation.EnableSetCommission(); ok {
		_spec.SetField(appdelegatedstaking.FieldEnableSetCommission, field.TypeBool, value)
	}
	if adsu.mutation.EnableSetCommissionCleared() {
		_spec.ClearField(appdelegatedstaking.FieldEnableSetCommission, field.TypeBool)
	}
	_spec.AddModifiers(adsu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, adsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appdelegatedstaking.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	adsu.mutation.done = true
	return n, nil
}

// AppDelegatedStakingUpdateOne is the builder for updating a single AppDelegatedStaking entity.
type AppDelegatedStakingUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppDelegatedStakingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (adsuo *AppDelegatedStakingUpdateOne) SetEntID(u uuid.UUID) *AppDelegatedStakingUpdateOne {
	adsuo.mutation.SetEntID(u)
	return adsuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (adsuo *AppDelegatedStakingUpdateOne) SetNillableEntID(u *uuid.UUID) *AppDelegatedStakingUpdateOne {
	if u != nil {
		adsuo.SetEntID(*u)
	}
	return adsuo
}

// SetCreatedAt sets the "created_at" field.
func (adsuo *AppDelegatedStakingUpdateOne) SetCreatedAt(u uint32) *AppDelegatedStakingUpdateOne {
	adsuo.mutation.ResetCreatedAt()
	adsuo.mutation.SetCreatedAt(u)
	return adsuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (adsuo *AppDelegatedStakingUpdateOne) SetNillableCreatedAt(u *uint32) *AppDelegatedStakingUpdateOne {
	if u != nil {
		adsuo.SetCreatedAt(*u)
	}
	return adsuo
}

// AddCreatedAt adds u to the "created_at" field.
func (adsuo *AppDelegatedStakingUpdateOne) AddCreatedAt(u int32) *AppDelegatedStakingUpdateOne {
	adsuo.mutation.AddCreatedAt(u)
	return adsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (adsuo *AppDelegatedStakingUpdateOne) SetUpdatedAt(u uint32) *AppDelegatedStakingUpdateOne {
	adsuo.mutation.ResetUpdatedAt()
	adsuo.mutation.SetUpdatedAt(u)
	return adsuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (adsuo *AppDelegatedStakingUpdateOne) AddUpdatedAt(u int32) *AppDelegatedStakingUpdateOne {
	adsuo.mutation.AddUpdatedAt(u)
	return adsuo
}

// SetDeletedAt sets the "deleted_at" field.
func (adsuo *AppDelegatedStakingUpdateOne) SetDeletedAt(u uint32) *AppDelegatedStakingUpdateOne {
	adsuo.mutation.ResetDeletedAt()
	adsuo.mutation.SetDeletedAt(u)
	return adsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (adsuo *AppDelegatedStakingUpdateOne) SetNillableDeletedAt(u *uint32) *AppDelegatedStakingUpdateOne {
	if u != nil {
		adsuo.SetDeletedAt(*u)
	}
	return adsuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (adsuo *AppDelegatedStakingUpdateOne) AddDeletedAt(u int32) *AppDelegatedStakingUpdateOne {
	adsuo.mutation.AddDeletedAt(u)
	return adsuo
}

// SetAppGoodID sets the "app_good_id" field.
func (adsuo *AppDelegatedStakingUpdateOne) SetAppGoodID(u uuid.UUID) *AppDelegatedStakingUpdateOne {
	adsuo.mutation.SetAppGoodID(u)
	return adsuo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (adsuo *AppDelegatedStakingUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *AppDelegatedStakingUpdateOne {
	if u != nil {
		adsuo.SetAppGoodID(*u)
	}
	return adsuo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (adsuo *AppDelegatedStakingUpdateOne) ClearAppGoodID() *AppDelegatedStakingUpdateOne {
	adsuo.mutation.ClearAppGoodID()
	return adsuo
}

// SetServiceStartAt sets the "service_start_at" field.
func (adsuo *AppDelegatedStakingUpdateOne) SetServiceStartAt(u uint32) *AppDelegatedStakingUpdateOne {
	adsuo.mutation.ResetServiceStartAt()
	adsuo.mutation.SetServiceStartAt(u)
	return adsuo
}

// SetNillableServiceStartAt sets the "service_start_at" field if the given value is not nil.
func (adsuo *AppDelegatedStakingUpdateOne) SetNillableServiceStartAt(u *uint32) *AppDelegatedStakingUpdateOne {
	if u != nil {
		adsuo.SetServiceStartAt(*u)
	}
	return adsuo
}

// AddServiceStartAt adds u to the "service_start_at" field.
func (adsuo *AppDelegatedStakingUpdateOne) AddServiceStartAt(u int32) *AppDelegatedStakingUpdateOne {
	adsuo.mutation.AddServiceStartAt(u)
	return adsuo
}

// ClearServiceStartAt clears the value of the "service_start_at" field.
func (adsuo *AppDelegatedStakingUpdateOne) ClearServiceStartAt() *AppDelegatedStakingUpdateOne {
	adsuo.mutation.ClearServiceStartAt()
	return adsuo
}

// SetStartMode sets the "start_mode" field.
func (adsuo *AppDelegatedStakingUpdateOne) SetStartMode(s string) *AppDelegatedStakingUpdateOne {
	adsuo.mutation.SetStartMode(s)
	return adsuo
}

// SetNillableStartMode sets the "start_mode" field if the given value is not nil.
func (adsuo *AppDelegatedStakingUpdateOne) SetNillableStartMode(s *string) *AppDelegatedStakingUpdateOne {
	if s != nil {
		adsuo.SetStartMode(*s)
	}
	return adsuo
}

// ClearStartMode clears the value of the "start_mode" field.
func (adsuo *AppDelegatedStakingUpdateOne) ClearStartMode() *AppDelegatedStakingUpdateOne {
	adsuo.mutation.ClearStartMode()
	return adsuo
}

// SetEnableSetCommission sets the "enable_set_commission" field.
func (adsuo *AppDelegatedStakingUpdateOne) SetEnableSetCommission(b bool) *AppDelegatedStakingUpdateOne {
	adsuo.mutation.SetEnableSetCommission(b)
	return adsuo
}

// SetNillableEnableSetCommission sets the "enable_set_commission" field if the given value is not nil.
func (adsuo *AppDelegatedStakingUpdateOne) SetNillableEnableSetCommission(b *bool) *AppDelegatedStakingUpdateOne {
	if b != nil {
		adsuo.SetEnableSetCommission(*b)
	}
	return adsuo
}

// ClearEnableSetCommission clears the value of the "enable_set_commission" field.
func (adsuo *AppDelegatedStakingUpdateOne) ClearEnableSetCommission() *AppDelegatedStakingUpdateOne {
	adsuo.mutation.ClearEnableSetCommission()
	return adsuo
}

// Mutation returns the AppDelegatedStakingMutation object of the builder.
func (adsuo *AppDelegatedStakingUpdateOne) Mutation() *AppDelegatedStakingMutation {
	return adsuo.mutation
}

// Where appends a list predicates to the AppDelegatedStakingUpdate builder.
func (adsuo *AppDelegatedStakingUpdateOne) Where(ps ...predicate.AppDelegatedStaking) *AppDelegatedStakingUpdateOne {
	adsuo.mutation.Where(ps...)
	return adsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (adsuo *AppDelegatedStakingUpdateOne) Select(field string, fields ...string) *AppDelegatedStakingUpdateOne {
	adsuo.fields = append([]string{field}, fields...)
	return adsuo
}

// Save executes the query and returns the updated AppDelegatedStaking entity.
func (adsuo *AppDelegatedStakingUpdateOne) Save(ctx context.Context) (*AppDelegatedStaking, error) {
	adsuo.defaults()
	return withHooks(ctx, adsuo.sqlSave, adsuo.mutation, adsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (adsuo *AppDelegatedStakingUpdateOne) SaveX(ctx context.Context) *AppDelegatedStaking {
	node, err := adsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (adsuo *AppDelegatedStakingUpdateOne) Exec(ctx context.Context) error {
	_, err := adsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adsuo *AppDelegatedStakingUpdateOne) ExecX(ctx context.Context) {
	if err := adsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (adsuo *AppDelegatedStakingUpdateOne) defaults() {
	if _, ok := adsuo.mutation.UpdatedAt(); !ok {
		v := appdelegatedstaking.UpdateDefaultUpdatedAt()
		adsuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (adsuo *AppDelegatedStakingUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppDelegatedStakingUpdateOne {
	adsuo.modifiers = append(adsuo.modifiers, modifiers...)
	return adsuo
}

func (adsuo *AppDelegatedStakingUpdateOne) sqlSave(ctx context.Context) (_node *AppDelegatedStaking, err error) {
	_spec := sqlgraph.NewUpdateSpec(appdelegatedstaking.Table, appdelegatedstaking.Columns, sqlgraph.NewFieldSpec(appdelegatedstaking.FieldID, field.TypeUint32))
	id, ok := adsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AppDelegatedStaking.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := adsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appdelegatedstaking.FieldID)
		for _, f := range fields {
			if !appdelegatedstaking.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != appdelegatedstaking.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := adsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := adsuo.mutation.EntID(); ok {
		_spec.SetField(appdelegatedstaking.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := adsuo.mutation.CreatedAt(); ok {
		_spec.SetField(appdelegatedstaking.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := adsuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(appdelegatedstaking.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := adsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(appdelegatedstaking.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := adsuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(appdelegatedstaking.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := adsuo.mutation.DeletedAt(); ok {
		_spec.SetField(appdelegatedstaking.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := adsuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(appdelegatedstaking.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := adsuo.mutation.AppGoodID(); ok {
		_spec.SetField(appdelegatedstaking.FieldAppGoodID, field.TypeUUID, value)
	}
	if adsuo.mutation.AppGoodIDCleared() {
		_spec.ClearField(appdelegatedstaking.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := adsuo.mutation.ServiceStartAt(); ok {
		_spec.SetField(appdelegatedstaking.FieldServiceStartAt, field.TypeUint32, value)
	}
	if value, ok := adsuo.mutation.AddedServiceStartAt(); ok {
		_spec.AddField(appdelegatedstaking.FieldServiceStartAt, field.TypeUint32, value)
	}
	if adsuo.mutation.ServiceStartAtCleared() {
		_spec.ClearField(appdelegatedstaking.FieldServiceStartAt, field.TypeUint32)
	}
	if value, ok := adsuo.mutation.StartMode(); ok {
		_spec.SetField(appdelegatedstaking.FieldStartMode, field.TypeString, value)
	}
	if adsuo.mutation.StartModeCleared() {
		_spec.ClearField(appdelegatedstaking.FieldStartMode, field.TypeString)
	}
	if value, ok := adsuo.mutation.EnableSetCommission(); ok {
		_spec.SetField(appdelegatedstaking.FieldEnableSetCommission, field.TypeBool, value)
	}
	if adsuo.mutation.EnableSetCommissionCleared() {
		_spec.ClearField(appdelegatedstaking.FieldEnableSetCommission, field.TypeBool)
	}
	_spec.AddModifiers(adsuo.modifiers...)
	_node = &AppDelegatedStaking{config: adsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, adsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appdelegatedstaking.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	adsuo.mutation.done = true
	return _node, nil
}

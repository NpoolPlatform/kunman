// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appstocklock"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppStockLock is the model entity for the AppStockLock schema.
type AppStockLock struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppStockID holds the value of the "app_stock_id" field.
	AppStockID uuid.UUID `json:"app_stock_id,omitempty"`
	// AppGoodID holds the value of the "app_good_id" field.
	AppGoodID uuid.UUID `json:"app_good_id,omitempty"`
	// Units holds the value of the "units" field.
	Units decimal.Decimal `json:"units,omitempty"`
	// AppSpotUnits holds the value of the "app_spot_units" field.
	AppSpotUnits decimal.Decimal `json:"app_spot_units,omitempty"`
	// LockState holds the value of the "lock_state" field.
	LockState string `json:"lock_state,omitempty"`
	// ChargeBackState holds the value of the "charge_back_state" field.
	ChargeBackState string `json:"charge_back_state,omitempty"`
	// ExLockID holds the value of the "ex_lock_id" field.
	ExLockID     uuid.UUID `json:"ex_lock_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppStockLock) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appstocklock.FieldUnits, appstocklock.FieldAppSpotUnits:
			values[i] = new(decimal.Decimal)
		case appstocklock.FieldID:
			values[i] = new(sql.NullInt64)
		case appstocklock.FieldLockState, appstocklock.FieldChargeBackState:
			values[i] = new(sql.NullString)
		case appstocklock.FieldEntID, appstocklock.FieldAppStockID, appstocklock.FieldAppGoodID, appstocklock.FieldExLockID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppStockLock fields.
func (asl *AppStockLock) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appstocklock.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			asl.ID = uint32(value.Int64)
		case appstocklock.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				asl.EntID = *value
			}
		case appstocklock.FieldAppStockID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_stock_id", values[i])
			} else if value != nil {
				asl.AppStockID = *value
			}
		case appstocklock.FieldAppGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_good_id", values[i])
			} else if value != nil {
				asl.AppGoodID = *value
			}
		case appstocklock.FieldUnits:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field units", values[i])
			} else if value != nil {
				asl.Units = *value
			}
		case appstocklock.FieldAppSpotUnits:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field app_spot_units", values[i])
			} else if value != nil {
				asl.AppSpotUnits = *value
			}
		case appstocklock.FieldLockState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lock_state", values[i])
			} else if value.Valid {
				asl.LockState = value.String
			}
		case appstocklock.FieldChargeBackState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field charge_back_state", values[i])
			} else if value.Valid {
				asl.ChargeBackState = value.String
			}
		case appstocklock.FieldExLockID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ex_lock_id", values[i])
			} else if value != nil {
				asl.ExLockID = *value
			}
		default:
			asl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppStockLock.
// This includes values selected through modifiers, order, etc.
func (asl *AppStockLock) Value(name string) (ent.Value, error) {
	return asl.selectValues.Get(name)
}

// Update returns a builder for updating this AppStockLock.
// Note that you need to call AppStockLock.Unwrap() before calling this method if this AppStockLock
// was returned from a transaction, and the transaction was committed or rolled back.
func (asl *AppStockLock) Update() *AppStockLockUpdateOne {
	return NewAppStockLockClient(asl.config).UpdateOne(asl)
}

// Unwrap unwraps the AppStockLock entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (asl *AppStockLock) Unwrap() *AppStockLock {
	_tx, ok := asl.config.driver.(*txDriver)
	if !ok {
		panic("generated: AppStockLock is not a transactional entity")
	}
	asl.config.driver = _tx.drv
	return asl
}

// String implements the fmt.Stringer.
func (asl *AppStockLock) String() string {
	var builder strings.Builder
	builder.WriteString("AppStockLock(")
	builder.WriteString(fmt.Sprintf("id=%v, ", asl.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", asl.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_stock_id=")
	builder.WriteString(fmt.Sprintf("%v", asl.AppStockID))
	builder.WriteString(", ")
	builder.WriteString("app_good_id=")
	builder.WriteString(fmt.Sprintf("%v", asl.AppGoodID))
	builder.WriteString(", ")
	builder.WriteString("units=")
	builder.WriteString(fmt.Sprintf("%v", asl.Units))
	builder.WriteString(", ")
	builder.WriteString("app_spot_units=")
	builder.WriteString(fmt.Sprintf("%v", asl.AppSpotUnits))
	builder.WriteString(", ")
	builder.WriteString("lock_state=")
	builder.WriteString(asl.LockState)
	builder.WriteString(", ")
	builder.WriteString("charge_back_state=")
	builder.WriteString(asl.ChargeBackState)
	builder.WriteString(", ")
	builder.WriteString("ex_lock_id=")
	builder.WriteString(fmt.Sprintf("%v", asl.ExLockID))
	builder.WriteByte(')')
	return builder.String()
}

// AppStockLocks is a parsable slice of AppStockLock.
type AppStockLocks []*AppStockLock

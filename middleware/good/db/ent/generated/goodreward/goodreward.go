// Code generated by ent, DO NOT EDIT.

package goodreward

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the goodreward type in the database.
	Label = "good_reward"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldGoodID holds the string denoting the good_id field in the database.
	FieldGoodID = "good_id"
	// FieldRewardState holds the string denoting the reward_state field in the database.
	FieldRewardState = "reward_state"
	// FieldLastRewardAt holds the string denoting the last_reward_at field in the database.
	FieldLastRewardAt = "last_reward_at"
	// Table holds the table name of the goodreward in the database.
	Table = "good_rewards"
)

// Columns holds all SQL columns for goodreward fields.
var Columns = []string{
	FieldID,
	FieldEntID,
	FieldGoodID,
	FieldRewardState,
	FieldLastRewardAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultGoodID holds the default value on creation for the "good_id" field.
	DefaultGoodID func() uuid.UUID
	// DefaultRewardState holds the default value on creation for the "reward_state" field.
	DefaultRewardState string
	// DefaultLastRewardAt holds the default value on creation for the "last_reward_at" field.
	DefaultLastRewardAt uint32
)

// OrderOption defines the ordering options for the GoodReward queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByGoodID orders the results by the good_id field.
func ByGoodID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodID, opts...).ToFunc()
}

// ByRewardState orders the results by the reward_state field.
func ByRewardState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRewardState, opts...).ToFunc()
}

// ByLastRewardAt orders the results by the last_reward_at field.
func ByLastRewardAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastRewardAt, opts...).ToFunc()
}

// Code generated by ent, DO NOT EDIT.

package goodreward

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldEQ(FieldEntID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldEQ(FieldDeletedAt, v))
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldEQ(FieldGoodID, v))
}

// RewardState applies equality check predicate on the "reward_state" field. It's identical to RewardStateEQ.
func RewardState(v string) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldEQ(FieldRewardState, v))
}

// LastRewardAt applies equality check predicate on the "last_reward_at" field. It's identical to LastRewardAtEQ.
func LastRewardAt(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldEQ(FieldLastRewardAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldLTE(FieldEntID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldLTE(FieldDeletedAt, v))
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldEQ(FieldGoodID, v))
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldNEQ(FieldGoodID, v))
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldIn(FieldGoodID, vs...))
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldNotIn(FieldGoodID, vs...))
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldGT(FieldGoodID, v))
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldGTE(FieldGoodID, v))
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldLT(FieldGoodID, v))
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldLTE(FieldGoodID, v))
}

// GoodIDIsNil applies the IsNil predicate on the "good_id" field.
func GoodIDIsNil() predicate.GoodReward {
	return predicate.GoodReward(sql.FieldIsNull(FieldGoodID))
}

// GoodIDNotNil applies the NotNil predicate on the "good_id" field.
func GoodIDNotNil() predicate.GoodReward {
	return predicate.GoodReward(sql.FieldNotNull(FieldGoodID))
}

// RewardStateEQ applies the EQ predicate on the "reward_state" field.
func RewardStateEQ(v string) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldEQ(FieldRewardState, v))
}

// RewardStateNEQ applies the NEQ predicate on the "reward_state" field.
func RewardStateNEQ(v string) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldNEQ(FieldRewardState, v))
}

// RewardStateIn applies the In predicate on the "reward_state" field.
func RewardStateIn(vs ...string) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldIn(FieldRewardState, vs...))
}

// RewardStateNotIn applies the NotIn predicate on the "reward_state" field.
func RewardStateNotIn(vs ...string) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldNotIn(FieldRewardState, vs...))
}

// RewardStateGT applies the GT predicate on the "reward_state" field.
func RewardStateGT(v string) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldGT(FieldRewardState, v))
}

// RewardStateGTE applies the GTE predicate on the "reward_state" field.
func RewardStateGTE(v string) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldGTE(FieldRewardState, v))
}

// RewardStateLT applies the LT predicate on the "reward_state" field.
func RewardStateLT(v string) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldLT(FieldRewardState, v))
}

// RewardStateLTE applies the LTE predicate on the "reward_state" field.
func RewardStateLTE(v string) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldLTE(FieldRewardState, v))
}

// RewardStateContains applies the Contains predicate on the "reward_state" field.
func RewardStateContains(v string) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldContains(FieldRewardState, v))
}

// RewardStateHasPrefix applies the HasPrefix predicate on the "reward_state" field.
func RewardStateHasPrefix(v string) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldHasPrefix(FieldRewardState, v))
}

// RewardStateHasSuffix applies the HasSuffix predicate on the "reward_state" field.
func RewardStateHasSuffix(v string) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldHasSuffix(FieldRewardState, v))
}

// RewardStateIsNil applies the IsNil predicate on the "reward_state" field.
func RewardStateIsNil() predicate.GoodReward {
	return predicate.GoodReward(sql.FieldIsNull(FieldRewardState))
}

// RewardStateNotNil applies the NotNil predicate on the "reward_state" field.
func RewardStateNotNil() predicate.GoodReward {
	return predicate.GoodReward(sql.FieldNotNull(FieldRewardState))
}

// RewardStateEqualFold applies the EqualFold predicate on the "reward_state" field.
func RewardStateEqualFold(v string) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldEqualFold(FieldRewardState, v))
}

// RewardStateContainsFold applies the ContainsFold predicate on the "reward_state" field.
func RewardStateContainsFold(v string) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldContainsFold(FieldRewardState, v))
}

// LastRewardAtEQ applies the EQ predicate on the "last_reward_at" field.
func LastRewardAtEQ(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldEQ(FieldLastRewardAt, v))
}

// LastRewardAtNEQ applies the NEQ predicate on the "last_reward_at" field.
func LastRewardAtNEQ(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldNEQ(FieldLastRewardAt, v))
}

// LastRewardAtIn applies the In predicate on the "last_reward_at" field.
func LastRewardAtIn(vs ...uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldIn(FieldLastRewardAt, vs...))
}

// LastRewardAtNotIn applies the NotIn predicate on the "last_reward_at" field.
func LastRewardAtNotIn(vs ...uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldNotIn(FieldLastRewardAt, vs...))
}

// LastRewardAtGT applies the GT predicate on the "last_reward_at" field.
func LastRewardAtGT(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldGT(FieldLastRewardAt, v))
}

// LastRewardAtGTE applies the GTE predicate on the "last_reward_at" field.
func LastRewardAtGTE(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldGTE(FieldLastRewardAt, v))
}

// LastRewardAtLT applies the LT predicate on the "last_reward_at" field.
func LastRewardAtLT(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldLT(FieldLastRewardAt, v))
}

// LastRewardAtLTE applies the LTE predicate on the "last_reward_at" field.
func LastRewardAtLTE(v uint32) predicate.GoodReward {
	return predicate.GoodReward(sql.FieldLTE(FieldLastRewardAt, v))
}

// LastRewardAtIsNil applies the IsNil predicate on the "last_reward_at" field.
func LastRewardAtIsNil() predicate.GoodReward {
	return predicate.GoodReward(sql.FieldIsNull(FieldLastRewardAt))
}

// LastRewardAtNotNil applies the NotNil predicate on the "last_reward_at" field.
func LastRewardAtNotNil() predicate.GoodReward {
	return predicate.GoodReward(sql.FieldNotNull(FieldLastRewardAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GoodReward) predicate.GoodReward {
	return predicate.GoodReward(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GoodReward) predicate.GoodReward {
	return predicate.GoodReward(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GoodReward) predicate.GoodReward {
	return predicate.GoodReward(sql.NotPredicates(p))
}

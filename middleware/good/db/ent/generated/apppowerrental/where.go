// Code generated by ent, DO NOT EDIT.

package apppowerrental

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldEntID, v))
}

// AppGoodID applies equality check predicate on the "app_good_id" field. It's identical to AppGoodIDEQ.
func AppGoodID(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldAppGoodID, v))
}

// ServiceStartAt applies equality check predicate on the "service_start_at" field. It's identical to ServiceStartAtEQ.
func ServiceStartAt(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldServiceStartAt, v))
}

// StartMode applies equality check predicate on the "start_mode" field. It's identical to StartModeEQ.
func StartMode(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldStartMode, v))
}

// CancelMode applies equality check predicate on the "cancel_mode" field. It's identical to CancelModeEQ.
func CancelMode(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldCancelMode, v))
}

// CancelableBeforeStartSeconds applies equality check predicate on the "cancelable_before_start_seconds" field. It's identical to CancelableBeforeStartSecondsEQ.
func CancelableBeforeStartSeconds(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldCancelableBeforeStartSeconds, v))
}

// EnableSetCommission applies equality check predicate on the "enable_set_commission" field. It's identical to EnableSetCommissionEQ.
func EnableSetCommission(v bool) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldEnableSetCommission, v))
}

// MinOrderAmount applies equality check predicate on the "min_order_amount" field. It's identical to MinOrderAmountEQ.
func MinOrderAmount(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldMinOrderAmount, v))
}

// MaxOrderAmount applies equality check predicate on the "max_order_amount" field. It's identical to MaxOrderAmountEQ.
func MaxOrderAmount(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldMaxOrderAmount, v))
}

// MaxUserAmount applies equality check predicate on the "max_user_amount" field. It's identical to MaxUserAmountEQ.
func MaxUserAmount(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldMaxUserAmount, v))
}

// MinOrderDurationSeconds applies equality check predicate on the "min_order_duration_seconds" field. It's identical to MinOrderDurationSecondsEQ.
func MinOrderDurationSeconds(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldMinOrderDurationSeconds, v))
}

// MaxOrderDurationSeconds applies equality check predicate on the "max_order_duration_seconds" field. It's identical to MaxOrderDurationSecondsEQ.
func MaxOrderDurationSeconds(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldMaxOrderDurationSeconds, v))
}

// UnitPrice applies equality check predicate on the "unit_price" field. It's identical to UnitPriceEQ.
func UnitPrice(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldUnitPrice, v))
}

// SaleStartAt applies equality check predicate on the "sale_start_at" field. It's identical to SaleStartAtEQ.
func SaleStartAt(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldSaleStartAt, v))
}

// SaleEndAt applies equality check predicate on the "sale_end_at" field. It's identical to SaleEndAtEQ.
func SaleEndAt(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldSaleEndAt, v))
}

// SaleMode applies equality check predicate on the "sale_mode" field. It's identical to SaleModeEQ.
func SaleMode(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldSaleMode, v))
}

// FixedDuration applies equality check predicate on the "fixed_duration" field. It's identical to FixedDurationEQ.
func FixedDuration(v bool) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldFixedDuration, v))
}

// PackageWithRequireds applies equality check predicate on the "package_with_requireds" field. It's identical to PackageWithRequiredsEQ.
func PackageWithRequireds(v bool) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldPackageWithRequireds, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLTE(FieldEntID, v))
}

// AppGoodIDEQ applies the EQ predicate on the "app_good_id" field.
func AppGoodIDEQ(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldAppGoodID, v))
}

// AppGoodIDNEQ applies the NEQ predicate on the "app_good_id" field.
func AppGoodIDNEQ(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNEQ(FieldAppGoodID, v))
}

// AppGoodIDIn applies the In predicate on the "app_good_id" field.
func AppGoodIDIn(vs ...uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIn(FieldAppGoodID, vs...))
}

// AppGoodIDNotIn applies the NotIn predicate on the "app_good_id" field.
func AppGoodIDNotIn(vs ...uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotIn(FieldAppGoodID, vs...))
}

// AppGoodIDGT applies the GT predicate on the "app_good_id" field.
func AppGoodIDGT(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGT(FieldAppGoodID, v))
}

// AppGoodIDGTE applies the GTE predicate on the "app_good_id" field.
func AppGoodIDGTE(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGTE(FieldAppGoodID, v))
}

// AppGoodIDLT applies the LT predicate on the "app_good_id" field.
func AppGoodIDLT(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLT(FieldAppGoodID, v))
}

// AppGoodIDLTE applies the LTE predicate on the "app_good_id" field.
func AppGoodIDLTE(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLTE(FieldAppGoodID, v))
}

// AppGoodIDIsNil applies the IsNil predicate on the "app_good_id" field.
func AppGoodIDIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIsNull(FieldAppGoodID))
}

// AppGoodIDNotNil applies the NotNil predicate on the "app_good_id" field.
func AppGoodIDNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotNull(FieldAppGoodID))
}

// ServiceStartAtEQ applies the EQ predicate on the "service_start_at" field.
func ServiceStartAtEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldServiceStartAt, v))
}

// ServiceStartAtNEQ applies the NEQ predicate on the "service_start_at" field.
func ServiceStartAtNEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNEQ(FieldServiceStartAt, v))
}

// ServiceStartAtIn applies the In predicate on the "service_start_at" field.
func ServiceStartAtIn(vs ...uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIn(FieldServiceStartAt, vs...))
}

// ServiceStartAtNotIn applies the NotIn predicate on the "service_start_at" field.
func ServiceStartAtNotIn(vs ...uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotIn(FieldServiceStartAt, vs...))
}

// ServiceStartAtGT applies the GT predicate on the "service_start_at" field.
func ServiceStartAtGT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGT(FieldServiceStartAt, v))
}

// ServiceStartAtGTE applies the GTE predicate on the "service_start_at" field.
func ServiceStartAtGTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGTE(FieldServiceStartAt, v))
}

// ServiceStartAtLT applies the LT predicate on the "service_start_at" field.
func ServiceStartAtLT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLT(FieldServiceStartAt, v))
}

// ServiceStartAtLTE applies the LTE predicate on the "service_start_at" field.
func ServiceStartAtLTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLTE(FieldServiceStartAt, v))
}

// ServiceStartAtIsNil applies the IsNil predicate on the "service_start_at" field.
func ServiceStartAtIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIsNull(FieldServiceStartAt))
}

// ServiceStartAtNotNil applies the NotNil predicate on the "service_start_at" field.
func ServiceStartAtNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotNull(FieldServiceStartAt))
}

// StartModeEQ applies the EQ predicate on the "start_mode" field.
func StartModeEQ(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldStartMode, v))
}

// StartModeNEQ applies the NEQ predicate on the "start_mode" field.
func StartModeNEQ(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNEQ(FieldStartMode, v))
}

// StartModeIn applies the In predicate on the "start_mode" field.
func StartModeIn(vs ...string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIn(FieldStartMode, vs...))
}

// StartModeNotIn applies the NotIn predicate on the "start_mode" field.
func StartModeNotIn(vs ...string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotIn(FieldStartMode, vs...))
}

// StartModeGT applies the GT predicate on the "start_mode" field.
func StartModeGT(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGT(FieldStartMode, v))
}

// StartModeGTE applies the GTE predicate on the "start_mode" field.
func StartModeGTE(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGTE(FieldStartMode, v))
}

// StartModeLT applies the LT predicate on the "start_mode" field.
func StartModeLT(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLT(FieldStartMode, v))
}

// StartModeLTE applies the LTE predicate on the "start_mode" field.
func StartModeLTE(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLTE(FieldStartMode, v))
}

// StartModeContains applies the Contains predicate on the "start_mode" field.
func StartModeContains(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldContains(FieldStartMode, v))
}

// StartModeHasPrefix applies the HasPrefix predicate on the "start_mode" field.
func StartModeHasPrefix(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldHasPrefix(FieldStartMode, v))
}

// StartModeHasSuffix applies the HasSuffix predicate on the "start_mode" field.
func StartModeHasSuffix(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldHasSuffix(FieldStartMode, v))
}

// StartModeIsNil applies the IsNil predicate on the "start_mode" field.
func StartModeIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIsNull(FieldStartMode))
}

// StartModeNotNil applies the NotNil predicate on the "start_mode" field.
func StartModeNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotNull(FieldStartMode))
}

// StartModeEqualFold applies the EqualFold predicate on the "start_mode" field.
func StartModeEqualFold(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEqualFold(FieldStartMode, v))
}

// StartModeContainsFold applies the ContainsFold predicate on the "start_mode" field.
func StartModeContainsFold(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldContainsFold(FieldStartMode, v))
}

// CancelModeEQ applies the EQ predicate on the "cancel_mode" field.
func CancelModeEQ(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldCancelMode, v))
}

// CancelModeNEQ applies the NEQ predicate on the "cancel_mode" field.
func CancelModeNEQ(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNEQ(FieldCancelMode, v))
}

// CancelModeIn applies the In predicate on the "cancel_mode" field.
func CancelModeIn(vs ...string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIn(FieldCancelMode, vs...))
}

// CancelModeNotIn applies the NotIn predicate on the "cancel_mode" field.
func CancelModeNotIn(vs ...string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotIn(FieldCancelMode, vs...))
}

// CancelModeGT applies the GT predicate on the "cancel_mode" field.
func CancelModeGT(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGT(FieldCancelMode, v))
}

// CancelModeGTE applies the GTE predicate on the "cancel_mode" field.
func CancelModeGTE(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGTE(FieldCancelMode, v))
}

// CancelModeLT applies the LT predicate on the "cancel_mode" field.
func CancelModeLT(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLT(FieldCancelMode, v))
}

// CancelModeLTE applies the LTE predicate on the "cancel_mode" field.
func CancelModeLTE(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLTE(FieldCancelMode, v))
}

// CancelModeContains applies the Contains predicate on the "cancel_mode" field.
func CancelModeContains(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldContains(FieldCancelMode, v))
}

// CancelModeHasPrefix applies the HasPrefix predicate on the "cancel_mode" field.
func CancelModeHasPrefix(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldHasPrefix(FieldCancelMode, v))
}

// CancelModeHasSuffix applies the HasSuffix predicate on the "cancel_mode" field.
func CancelModeHasSuffix(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldHasSuffix(FieldCancelMode, v))
}

// CancelModeIsNil applies the IsNil predicate on the "cancel_mode" field.
func CancelModeIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIsNull(FieldCancelMode))
}

// CancelModeNotNil applies the NotNil predicate on the "cancel_mode" field.
func CancelModeNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotNull(FieldCancelMode))
}

// CancelModeEqualFold applies the EqualFold predicate on the "cancel_mode" field.
func CancelModeEqualFold(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEqualFold(FieldCancelMode, v))
}

// CancelModeContainsFold applies the ContainsFold predicate on the "cancel_mode" field.
func CancelModeContainsFold(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldContainsFold(FieldCancelMode, v))
}

// CancelableBeforeStartSecondsEQ applies the EQ predicate on the "cancelable_before_start_seconds" field.
func CancelableBeforeStartSecondsEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldCancelableBeforeStartSeconds, v))
}

// CancelableBeforeStartSecondsNEQ applies the NEQ predicate on the "cancelable_before_start_seconds" field.
func CancelableBeforeStartSecondsNEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNEQ(FieldCancelableBeforeStartSeconds, v))
}

// CancelableBeforeStartSecondsIn applies the In predicate on the "cancelable_before_start_seconds" field.
func CancelableBeforeStartSecondsIn(vs ...uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIn(FieldCancelableBeforeStartSeconds, vs...))
}

// CancelableBeforeStartSecondsNotIn applies the NotIn predicate on the "cancelable_before_start_seconds" field.
func CancelableBeforeStartSecondsNotIn(vs ...uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotIn(FieldCancelableBeforeStartSeconds, vs...))
}

// CancelableBeforeStartSecondsGT applies the GT predicate on the "cancelable_before_start_seconds" field.
func CancelableBeforeStartSecondsGT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGT(FieldCancelableBeforeStartSeconds, v))
}

// CancelableBeforeStartSecondsGTE applies the GTE predicate on the "cancelable_before_start_seconds" field.
func CancelableBeforeStartSecondsGTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGTE(FieldCancelableBeforeStartSeconds, v))
}

// CancelableBeforeStartSecondsLT applies the LT predicate on the "cancelable_before_start_seconds" field.
func CancelableBeforeStartSecondsLT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLT(FieldCancelableBeforeStartSeconds, v))
}

// CancelableBeforeStartSecondsLTE applies the LTE predicate on the "cancelable_before_start_seconds" field.
func CancelableBeforeStartSecondsLTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLTE(FieldCancelableBeforeStartSeconds, v))
}

// CancelableBeforeStartSecondsIsNil applies the IsNil predicate on the "cancelable_before_start_seconds" field.
func CancelableBeforeStartSecondsIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIsNull(FieldCancelableBeforeStartSeconds))
}

// CancelableBeforeStartSecondsNotNil applies the NotNil predicate on the "cancelable_before_start_seconds" field.
func CancelableBeforeStartSecondsNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotNull(FieldCancelableBeforeStartSeconds))
}

// EnableSetCommissionEQ applies the EQ predicate on the "enable_set_commission" field.
func EnableSetCommissionEQ(v bool) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldEnableSetCommission, v))
}

// EnableSetCommissionNEQ applies the NEQ predicate on the "enable_set_commission" field.
func EnableSetCommissionNEQ(v bool) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNEQ(FieldEnableSetCommission, v))
}

// EnableSetCommissionIsNil applies the IsNil predicate on the "enable_set_commission" field.
func EnableSetCommissionIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIsNull(FieldEnableSetCommission))
}

// EnableSetCommissionNotNil applies the NotNil predicate on the "enable_set_commission" field.
func EnableSetCommissionNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotNull(FieldEnableSetCommission))
}

// MinOrderAmountEQ applies the EQ predicate on the "min_order_amount" field.
func MinOrderAmountEQ(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldMinOrderAmount, v))
}

// MinOrderAmountNEQ applies the NEQ predicate on the "min_order_amount" field.
func MinOrderAmountNEQ(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNEQ(FieldMinOrderAmount, v))
}

// MinOrderAmountIn applies the In predicate on the "min_order_amount" field.
func MinOrderAmountIn(vs ...decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIn(FieldMinOrderAmount, vs...))
}

// MinOrderAmountNotIn applies the NotIn predicate on the "min_order_amount" field.
func MinOrderAmountNotIn(vs ...decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotIn(FieldMinOrderAmount, vs...))
}

// MinOrderAmountGT applies the GT predicate on the "min_order_amount" field.
func MinOrderAmountGT(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGT(FieldMinOrderAmount, v))
}

// MinOrderAmountGTE applies the GTE predicate on the "min_order_amount" field.
func MinOrderAmountGTE(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGTE(FieldMinOrderAmount, v))
}

// MinOrderAmountLT applies the LT predicate on the "min_order_amount" field.
func MinOrderAmountLT(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLT(FieldMinOrderAmount, v))
}

// MinOrderAmountLTE applies the LTE predicate on the "min_order_amount" field.
func MinOrderAmountLTE(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLTE(FieldMinOrderAmount, v))
}

// MinOrderAmountIsNil applies the IsNil predicate on the "min_order_amount" field.
func MinOrderAmountIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIsNull(FieldMinOrderAmount))
}

// MinOrderAmountNotNil applies the NotNil predicate on the "min_order_amount" field.
func MinOrderAmountNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotNull(FieldMinOrderAmount))
}

// MaxOrderAmountEQ applies the EQ predicate on the "max_order_amount" field.
func MaxOrderAmountEQ(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldMaxOrderAmount, v))
}

// MaxOrderAmountNEQ applies the NEQ predicate on the "max_order_amount" field.
func MaxOrderAmountNEQ(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNEQ(FieldMaxOrderAmount, v))
}

// MaxOrderAmountIn applies the In predicate on the "max_order_amount" field.
func MaxOrderAmountIn(vs ...decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIn(FieldMaxOrderAmount, vs...))
}

// MaxOrderAmountNotIn applies the NotIn predicate on the "max_order_amount" field.
func MaxOrderAmountNotIn(vs ...decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotIn(FieldMaxOrderAmount, vs...))
}

// MaxOrderAmountGT applies the GT predicate on the "max_order_amount" field.
func MaxOrderAmountGT(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGT(FieldMaxOrderAmount, v))
}

// MaxOrderAmountGTE applies the GTE predicate on the "max_order_amount" field.
func MaxOrderAmountGTE(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGTE(FieldMaxOrderAmount, v))
}

// MaxOrderAmountLT applies the LT predicate on the "max_order_amount" field.
func MaxOrderAmountLT(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLT(FieldMaxOrderAmount, v))
}

// MaxOrderAmountLTE applies the LTE predicate on the "max_order_amount" field.
func MaxOrderAmountLTE(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLTE(FieldMaxOrderAmount, v))
}

// MaxOrderAmountIsNil applies the IsNil predicate on the "max_order_amount" field.
func MaxOrderAmountIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIsNull(FieldMaxOrderAmount))
}

// MaxOrderAmountNotNil applies the NotNil predicate on the "max_order_amount" field.
func MaxOrderAmountNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotNull(FieldMaxOrderAmount))
}

// MaxUserAmountEQ applies the EQ predicate on the "max_user_amount" field.
func MaxUserAmountEQ(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldMaxUserAmount, v))
}

// MaxUserAmountNEQ applies the NEQ predicate on the "max_user_amount" field.
func MaxUserAmountNEQ(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNEQ(FieldMaxUserAmount, v))
}

// MaxUserAmountIn applies the In predicate on the "max_user_amount" field.
func MaxUserAmountIn(vs ...decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIn(FieldMaxUserAmount, vs...))
}

// MaxUserAmountNotIn applies the NotIn predicate on the "max_user_amount" field.
func MaxUserAmountNotIn(vs ...decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotIn(FieldMaxUserAmount, vs...))
}

// MaxUserAmountGT applies the GT predicate on the "max_user_amount" field.
func MaxUserAmountGT(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGT(FieldMaxUserAmount, v))
}

// MaxUserAmountGTE applies the GTE predicate on the "max_user_amount" field.
func MaxUserAmountGTE(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGTE(FieldMaxUserAmount, v))
}

// MaxUserAmountLT applies the LT predicate on the "max_user_amount" field.
func MaxUserAmountLT(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLT(FieldMaxUserAmount, v))
}

// MaxUserAmountLTE applies the LTE predicate on the "max_user_amount" field.
func MaxUserAmountLTE(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLTE(FieldMaxUserAmount, v))
}

// MaxUserAmountIsNil applies the IsNil predicate on the "max_user_amount" field.
func MaxUserAmountIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIsNull(FieldMaxUserAmount))
}

// MaxUserAmountNotNil applies the NotNil predicate on the "max_user_amount" field.
func MaxUserAmountNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotNull(FieldMaxUserAmount))
}

// MinOrderDurationSecondsEQ applies the EQ predicate on the "min_order_duration_seconds" field.
func MinOrderDurationSecondsEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldMinOrderDurationSeconds, v))
}

// MinOrderDurationSecondsNEQ applies the NEQ predicate on the "min_order_duration_seconds" field.
func MinOrderDurationSecondsNEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNEQ(FieldMinOrderDurationSeconds, v))
}

// MinOrderDurationSecondsIn applies the In predicate on the "min_order_duration_seconds" field.
func MinOrderDurationSecondsIn(vs ...uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIn(FieldMinOrderDurationSeconds, vs...))
}

// MinOrderDurationSecondsNotIn applies the NotIn predicate on the "min_order_duration_seconds" field.
func MinOrderDurationSecondsNotIn(vs ...uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotIn(FieldMinOrderDurationSeconds, vs...))
}

// MinOrderDurationSecondsGT applies the GT predicate on the "min_order_duration_seconds" field.
func MinOrderDurationSecondsGT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGT(FieldMinOrderDurationSeconds, v))
}

// MinOrderDurationSecondsGTE applies the GTE predicate on the "min_order_duration_seconds" field.
func MinOrderDurationSecondsGTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGTE(FieldMinOrderDurationSeconds, v))
}

// MinOrderDurationSecondsLT applies the LT predicate on the "min_order_duration_seconds" field.
func MinOrderDurationSecondsLT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLT(FieldMinOrderDurationSeconds, v))
}

// MinOrderDurationSecondsLTE applies the LTE predicate on the "min_order_duration_seconds" field.
func MinOrderDurationSecondsLTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLTE(FieldMinOrderDurationSeconds, v))
}

// MinOrderDurationSecondsIsNil applies the IsNil predicate on the "min_order_duration_seconds" field.
func MinOrderDurationSecondsIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIsNull(FieldMinOrderDurationSeconds))
}

// MinOrderDurationSecondsNotNil applies the NotNil predicate on the "min_order_duration_seconds" field.
func MinOrderDurationSecondsNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotNull(FieldMinOrderDurationSeconds))
}

// MaxOrderDurationSecondsEQ applies the EQ predicate on the "max_order_duration_seconds" field.
func MaxOrderDurationSecondsEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldMaxOrderDurationSeconds, v))
}

// MaxOrderDurationSecondsNEQ applies the NEQ predicate on the "max_order_duration_seconds" field.
func MaxOrderDurationSecondsNEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNEQ(FieldMaxOrderDurationSeconds, v))
}

// MaxOrderDurationSecondsIn applies the In predicate on the "max_order_duration_seconds" field.
func MaxOrderDurationSecondsIn(vs ...uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIn(FieldMaxOrderDurationSeconds, vs...))
}

// MaxOrderDurationSecondsNotIn applies the NotIn predicate on the "max_order_duration_seconds" field.
func MaxOrderDurationSecondsNotIn(vs ...uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotIn(FieldMaxOrderDurationSeconds, vs...))
}

// MaxOrderDurationSecondsGT applies the GT predicate on the "max_order_duration_seconds" field.
func MaxOrderDurationSecondsGT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGT(FieldMaxOrderDurationSeconds, v))
}

// MaxOrderDurationSecondsGTE applies the GTE predicate on the "max_order_duration_seconds" field.
func MaxOrderDurationSecondsGTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGTE(FieldMaxOrderDurationSeconds, v))
}

// MaxOrderDurationSecondsLT applies the LT predicate on the "max_order_duration_seconds" field.
func MaxOrderDurationSecondsLT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLT(FieldMaxOrderDurationSeconds, v))
}

// MaxOrderDurationSecondsLTE applies the LTE predicate on the "max_order_duration_seconds" field.
func MaxOrderDurationSecondsLTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLTE(FieldMaxOrderDurationSeconds, v))
}

// MaxOrderDurationSecondsIsNil applies the IsNil predicate on the "max_order_duration_seconds" field.
func MaxOrderDurationSecondsIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIsNull(FieldMaxOrderDurationSeconds))
}

// MaxOrderDurationSecondsNotNil applies the NotNil predicate on the "max_order_duration_seconds" field.
func MaxOrderDurationSecondsNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotNull(FieldMaxOrderDurationSeconds))
}

// UnitPriceEQ applies the EQ predicate on the "unit_price" field.
func UnitPriceEQ(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldUnitPrice, v))
}

// UnitPriceNEQ applies the NEQ predicate on the "unit_price" field.
func UnitPriceNEQ(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNEQ(FieldUnitPrice, v))
}

// UnitPriceIn applies the In predicate on the "unit_price" field.
func UnitPriceIn(vs ...decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIn(FieldUnitPrice, vs...))
}

// UnitPriceNotIn applies the NotIn predicate on the "unit_price" field.
func UnitPriceNotIn(vs ...decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotIn(FieldUnitPrice, vs...))
}

// UnitPriceGT applies the GT predicate on the "unit_price" field.
func UnitPriceGT(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGT(FieldUnitPrice, v))
}

// UnitPriceGTE applies the GTE predicate on the "unit_price" field.
func UnitPriceGTE(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGTE(FieldUnitPrice, v))
}

// UnitPriceLT applies the LT predicate on the "unit_price" field.
func UnitPriceLT(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLT(FieldUnitPrice, v))
}

// UnitPriceLTE applies the LTE predicate on the "unit_price" field.
func UnitPriceLTE(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLTE(FieldUnitPrice, v))
}

// UnitPriceIsNil applies the IsNil predicate on the "unit_price" field.
func UnitPriceIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIsNull(FieldUnitPrice))
}

// UnitPriceNotNil applies the NotNil predicate on the "unit_price" field.
func UnitPriceNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotNull(FieldUnitPrice))
}

// SaleStartAtEQ applies the EQ predicate on the "sale_start_at" field.
func SaleStartAtEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldSaleStartAt, v))
}

// SaleStartAtNEQ applies the NEQ predicate on the "sale_start_at" field.
func SaleStartAtNEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNEQ(FieldSaleStartAt, v))
}

// SaleStartAtIn applies the In predicate on the "sale_start_at" field.
func SaleStartAtIn(vs ...uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIn(FieldSaleStartAt, vs...))
}

// SaleStartAtNotIn applies the NotIn predicate on the "sale_start_at" field.
func SaleStartAtNotIn(vs ...uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotIn(FieldSaleStartAt, vs...))
}

// SaleStartAtGT applies the GT predicate on the "sale_start_at" field.
func SaleStartAtGT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGT(FieldSaleStartAt, v))
}

// SaleStartAtGTE applies the GTE predicate on the "sale_start_at" field.
func SaleStartAtGTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGTE(FieldSaleStartAt, v))
}

// SaleStartAtLT applies the LT predicate on the "sale_start_at" field.
func SaleStartAtLT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLT(FieldSaleStartAt, v))
}

// SaleStartAtLTE applies the LTE predicate on the "sale_start_at" field.
func SaleStartAtLTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLTE(FieldSaleStartAt, v))
}

// SaleStartAtIsNil applies the IsNil predicate on the "sale_start_at" field.
func SaleStartAtIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIsNull(FieldSaleStartAt))
}

// SaleStartAtNotNil applies the NotNil predicate on the "sale_start_at" field.
func SaleStartAtNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotNull(FieldSaleStartAt))
}

// SaleEndAtEQ applies the EQ predicate on the "sale_end_at" field.
func SaleEndAtEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldSaleEndAt, v))
}

// SaleEndAtNEQ applies the NEQ predicate on the "sale_end_at" field.
func SaleEndAtNEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNEQ(FieldSaleEndAt, v))
}

// SaleEndAtIn applies the In predicate on the "sale_end_at" field.
func SaleEndAtIn(vs ...uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIn(FieldSaleEndAt, vs...))
}

// SaleEndAtNotIn applies the NotIn predicate on the "sale_end_at" field.
func SaleEndAtNotIn(vs ...uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotIn(FieldSaleEndAt, vs...))
}

// SaleEndAtGT applies the GT predicate on the "sale_end_at" field.
func SaleEndAtGT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGT(FieldSaleEndAt, v))
}

// SaleEndAtGTE applies the GTE predicate on the "sale_end_at" field.
func SaleEndAtGTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGTE(FieldSaleEndAt, v))
}

// SaleEndAtLT applies the LT predicate on the "sale_end_at" field.
func SaleEndAtLT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLT(FieldSaleEndAt, v))
}

// SaleEndAtLTE applies the LTE predicate on the "sale_end_at" field.
func SaleEndAtLTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLTE(FieldSaleEndAt, v))
}

// SaleEndAtIsNil applies the IsNil predicate on the "sale_end_at" field.
func SaleEndAtIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIsNull(FieldSaleEndAt))
}

// SaleEndAtNotNil applies the NotNil predicate on the "sale_end_at" field.
func SaleEndAtNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotNull(FieldSaleEndAt))
}

// SaleModeEQ applies the EQ predicate on the "sale_mode" field.
func SaleModeEQ(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldSaleMode, v))
}

// SaleModeNEQ applies the NEQ predicate on the "sale_mode" field.
func SaleModeNEQ(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNEQ(FieldSaleMode, v))
}

// SaleModeIn applies the In predicate on the "sale_mode" field.
func SaleModeIn(vs ...string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIn(FieldSaleMode, vs...))
}

// SaleModeNotIn applies the NotIn predicate on the "sale_mode" field.
func SaleModeNotIn(vs ...string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotIn(FieldSaleMode, vs...))
}

// SaleModeGT applies the GT predicate on the "sale_mode" field.
func SaleModeGT(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGT(FieldSaleMode, v))
}

// SaleModeGTE applies the GTE predicate on the "sale_mode" field.
func SaleModeGTE(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldGTE(FieldSaleMode, v))
}

// SaleModeLT applies the LT predicate on the "sale_mode" field.
func SaleModeLT(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLT(FieldSaleMode, v))
}

// SaleModeLTE applies the LTE predicate on the "sale_mode" field.
func SaleModeLTE(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldLTE(FieldSaleMode, v))
}

// SaleModeContains applies the Contains predicate on the "sale_mode" field.
func SaleModeContains(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldContains(FieldSaleMode, v))
}

// SaleModeHasPrefix applies the HasPrefix predicate on the "sale_mode" field.
func SaleModeHasPrefix(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldHasPrefix(FieldSaleMode, v))
}

// SaleModeHasSuffix applies the HasSuffix predicate on the "sale_mode" field.
func SaleModeHasSuffix(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldHasSuffix(FieldSaleMode, v))
}

// SaleModeIsNil applies the IsNil predicate on the "sale_mode" field.
func SaleModeIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIsNull(FieldSaleMode))
}

// SaleModeNotNil applies the NotNil predicate on the "sale_mode" field.
func SaleModeNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotNull(FieldSaleMode))
}

// SaleModeEqualFold applies the EqualFold predicate on the "sale_mode" field.
func SaleModeEqualFold(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEqualFold(FieldSaleMode, v))
}

// SaleModeContainsFold applies the ContainsFold predicate on the "sale_mode" field.
func SaleModeContainsFold(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldContainsFold(FieldSaleMode, v))
}

// FixedDurationEQ applies the EQ predicate on the "fixed_duration" field.
func FixedDurationEQ(v bool) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldFixedDuration, v))
}

// FixedDurationNEQ applies the NEQ predicate on the "fixed_duration" field.
func FixedDurationNEQ(v bool) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNEQ(FieldFixedDuration, v))
}

// FixedDurationIsNil applies the IsNil predicate on the "fixed_duration" field.
func FixedDurationIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIsNull(FieldFixedDuration))
}

// FixedDurationNotNil applies the NotNil predicate on the "fixed_duration" field.
func FixedDurationNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotNull(FieldFixedDuration))
}

// PackageWithRequiredsEQ applies the EQ predicate on the "package_with_requireds" field.
func PackageWithRequiredsEQ(v bool) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldEQ(FieldPackageWithRequireds, v))
}

// PackageWithRequiredsNEQ applies the NEQ predicate on the "package_with_requireds" field.
func PackageWithRequiredsNEQ(v bool) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNEQ(FieldPackageWithRequireds, v))
}

// PackageWithRequiredsIsNil applies the IsNil predicate on the "package_with_requireds" field.
func PackageWithRequiredsIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldIsNull(FieldPackageWithRequireds))
}

// PackageWithRequiredsNotNil applies the NotNil predicate on the "package_with_requireds" field.
func PackageWithRequiredsNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.FieldNotNull(FieldPackageWithRequireds))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppPowerRental) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppPowerRental) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppPowerRental) predicate.AppPowerRental {
	return predicate.AppPowerRental(sql.NotPredicates(p))
}

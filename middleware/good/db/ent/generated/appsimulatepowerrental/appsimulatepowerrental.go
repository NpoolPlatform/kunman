// Code generated by ent, DO NOT EDIT.

package appsimulatepowerrental

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the appsimulatepowerrental type in the database.
	Label = "app_simulate_power_rental"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldAppGoodID holds the string denoting the app_good_id field in the database.
	FieldAppGoodID = "app_good_id"
	// FieldCoinTypeID holds the string denoting the coin_type_id field in the database.
	FieldCoinTypeID = "coin_type_id"
	// FieldOrderUnits holds the string denoting the order_units field in the database.
	FieldOrderUnits = "order_units"
	// FieldOrderDurationSeconds holds the string denoting the order_duration_seconds field in the database.
	FieldOrderDurationSeconds = "order_duration_seconds"
	// Table holds the table name of the appsimulatepowerrental in the database.
	Table = "app_simulate_power_rentals"
)

// Columns holds all SQL columns for appsimulatepowerrental fields.
var Columns = []string{
	FieldID,
	FieldEntID,
	FieldAppGoodID,
	FieldCoinTypeID,
	FieldOrderUnits,
	FieldOrderDurationSeconds,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultOrderUnits holds the default value on creation for the "order_units" field.
	DefaultOrderUnits decimal.Decimal
	// DefaultOrderDurationSeconds holds the default value on creation for the "order_duration_seconds" field.
	DefaultOrderDurationSeconds uint32
)

// OrderOption defines the ordering options for the AppSimulatePowerRental queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByAppGoodID orders the results by the app_good_id field.
func ByAppGoodID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppGoodID, opts...).ToFunc()
}

// ByCoinTypeID orders the results by the coin_type_id field.
func ByCoinTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoinTypeID, opts...).ToFunc()
}

// ByOrderUnits orders the results by the order_units field.
func ByOrderUnits(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderUnits, opts...).ToFunc()
}

// ByOrderDurationSeconds orders the results by the order_duration_seconds field.
func ByOrderDurationSeconds(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderDurationSeconds, opts...).ToFunc()
}

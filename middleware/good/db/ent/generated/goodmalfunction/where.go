// Code generated by ent, DO NOT EDIT.

package goodmalfunction

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldEQ(FieldEntID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldEQ(FieldDeletedAt, v))
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldEQ(FieldGoodID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldEQ(FieldTitle, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldEQ(FieldMessage, v))
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldEQ(FieldStartAt, v))
}

// DurationSeconds applies equality check predicate on the "duration_seconds" field. It's identical to DurationSecondsEQ.
func DurationSeconds(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldEQ(FieldDurationSeconds, v))
}

// CompensateSeconds applies equality check predicate on the "compensate_seconds" field. It's identical to CompensateSecondsEQ.
func CompensateSeconds(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldEQ(FieldCompensateSeconds, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldLTE(FieldEntID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldLTE(FieldDeletedAt, v))
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldEQ(FieldGoodID, v))
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNEQ(FieldGoodID, v))
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldIn(FieldGoodID, vs...))
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNotIn(FieldGoodID, vs...))
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldGT(FieldGoodID, v))
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldGTE(FieldGoodID, v))
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldLT(FieldGoodID, v))
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldLTE(FieldGoodID, v))
}

// GoodIDIsNil applies the IsNil predicate on the "good_id" field.
func GoodIDIsNil() predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldIsNull(FieldGoodID))
}

// GoodIDNotNil applies the NotNil predicate on the "good_id" field.
func GoodIDNotNil() predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNotNull(FieldGoodID))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldIsNull(FieldTitle))
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNotNull(FieldTitle))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldContainsFold(FieldTitle, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageIsNil applies the IsNil predicate on the "message" field.
func MessageIsNil() predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldIsNull(FieldMessage))
}

// MessageNotNil applies the NotNil predicate on the "message" field.
func MessageNotNil() predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNotNull(FieldMessage))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldContainsFold(FieldMessage, v))
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldEQ(FieldStartAt, v))
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNEQ(FieldStartAt, v))
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldIn(FieldStartAt, vs...))
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNotIn(FieldStartAt, vs...))
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldGT(FieldStartAt, v))
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldGTE(FieldStartAt, v))
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldLT(FieldStartAt, v))
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldLTE(FieldStartAt, v))
}

// StartAtIsNil applies the IsNil predicate on the "start_at" field.
func StartAtIsNil() predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldIsNull(FieldStartAt))
}

// StartAtNotNil applies the NotNil predicate on the "start_at" field.
func StartAtNotNil() predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNotNull(FieldStartAt))
}

// DurationSecondsEQ applies the EQ predicate on the "duration_seconds" field.
func DurationSecondsEQ(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldEQ(FieldDurationSeconds, v))
}

// DurationSecondsNEQ applies the NEQ predicate on the "duration_seconds" field.
func DurationSecondsNEQ(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNEQ(FieldDurationSeconds, v))
}

// DurationSecondsIn applies the In predicate on the "duration_seconds" field.
func DurationSecondsIn(vs ...uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldIn(FieldDurationSeconds, vs...))
}

// DurationSecondsNotIn applies the NotIn predicate on the "duration_seconds" field.
func DurationSecondsNotIn(vs ...uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNotIn(FieldDurationSeconds, vs...))
}

// DurationSecondsGT applies the GT predicate on the "duration_seconds" field.
func DurationSecondsGT(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldGT(FieldDurationSeconds, v))
}

// DurationSecondsGTE applies the GTE predicate on the "duration_seconds" field.
func DurationSecondsGTE(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldGTE(FieldDurationSeconds, v))
}

// DurationSecondsLT applies the LT predicate on the "duration_seconds" field.
func DurationSecondsLT(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldLT(FieldDurationSeconds, v))
}

// DurationSecondsLTE applies the LTE predicate on the "duration_seconds" field.
func DurationSecondsLTE(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldLTE(FieldDurationSeconds, v))
}

// DurationSecondsIsNil applies the IsNil predicate on the "duration_seconds" field.
func DurationSecondsIsNil() predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldIsNull(FieldDurationSeconds))
}

// DurationSecondsNotNil applies the NotNil predicate on the "duration_seconds" field.
func DurationSecondsNotNil() predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNotNull(FieldDurationSeconds))
}

// CompensateSecondsEQ applies the EQ predicate on the "compensate_seconds" field.
func CompensateSecondsEQ(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldEQ(FieldCompensateSeconds, v))
}

// CompensateSecondsNEQ applies the NEQ predicate on the "compensate_seconds" field.
func CompensateSecondsNEQ(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNEQ(FieldCompensateSeconds, v))
}

// CompensateSecondsIn applies the In predicate on the "compensate_seconds" field.
func CompensateSecondsIn(vs ...uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldIn(FieldCompensateSeconds, vs...))
}

// CompensateSecondsNotIn applies the NotIn predicate on the "compensate_seconds" field.
func CompensateSecondsNotIn(vs ...uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNotIn(FieldCompensateSeconds, vs...))
}

// CompensateSecondsGT applies the GT predicate on the "compensate_seconds" field.
func CompensateSecondsGT(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldGT(FieldCompensateSeconds, v))
}

// CompensateSecondsGTE applies the GTE predicate on the "compensate_seconds" field.
func CompensateSecondsGTE(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldGTE(FieldCompensateSeconds, v))
}

// CompensateSecondsLT applies the LT predicate on the "compensate_seconds" field.
func CompensateSecondsLT(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldLT(FieldCompensateSeconds, v))
}

// CompensateSecondsLTE applies the LTE predicate on the "compensate_seconds" field.
func CompensateSecondsLTE(v uint32) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldLTE(FieldCompensateSeconds, v))
}

// CompensateSecondsIsNil applies the IsNil predicate on the "compensate_seconds" field.
func CompensateSecondsIsNil() predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldIsNull(FieldCompensateSeconds))
}

// CompensateSecondsNotNil applies the NotNil predicate on the "compensate_seconds" field.
func CompensateSecondsNotNil() predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.FieldNotNull(FieldCompensateSeconds))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GoodMalfunction) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GoodMalfunction) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GoodMalfunction) predicate.GoodMalfunction {
	return predicate.GoodMalfunction(sql.NotPredicates(p))
}

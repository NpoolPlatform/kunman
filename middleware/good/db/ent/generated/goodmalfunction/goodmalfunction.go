// Code generated by ent, DO NOT EDIT.

package goodmalfunction

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the goodmalfunction type in the database.
	Label = "good_malfunction"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldGoodID holds the string denoting the good_id field in the database.
	FieldGoodID = "good_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldStartAt holds the string denoting the start_at field in the database.
	FieldStartAt = "start_at"
	// FieldDurationSeconds holds the string denoting the duration_seconds field in the database.
	FieldDurationSeconds = "duration_seconds"
	// FieldCompensateSeconds holds the string denoting the compensate_seconds field in the database.
	FieldCompensateSeconds = "compensate_seconds"
	// Table holds the table name of the goodmalfunction in the database.
	Table = "good_malfunctions"
)

// Columns holds all SQL columns for goodmalfunction fields.
var Columns = []string{
	FieldID,
	FieldEntID,
	FieldGoodID,
	FieldTitle,
	FieldMessage,
	FieldStartAt,
	FieldDurationSeconds,
	FieldCompensateSeconds,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultGoodID holds the default value on creation for the "good_id" field.
	DefaultGoodID func() uuid.UUID
	// DefaultTitle holds the default value on creation for the "title" field.
	DefaultTitle string
	// DefaultMessage holds the default value on creation for the "message" field.
	DefaultMessage string
	// DefaultStartAt holds the default value on creation for the "start_at" field.
	DefaultStartAt uint32
	// DefaultDurationSeconds holds the default value on creation for the "duration_seconds" field.
	DefaultDurationSeconds uint32
	// DefaultCompensateSeconds holds the default value on creation for the "compensate_seconds" field.
	DefaultCompensateSeconds uint32
)

// OrderOption defines the ordering options for the GoodMalfunction queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByGoodID orders the results by the good_id field.
func ByGoodID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByMessage orders the results by the message field.
func ByMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessage, opts...).ToFunc()
}

// ByStartAt orders the results by the start_at field.
func ByStartAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartAt, opts...).ToFunc()
}

// ByDurationSeconds orders the results by the duration_seconds field.
func ByDurationSeconds(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDurationSeconds, opts...).ToFunc()
}

// ByCompensateSeconds orders the results by the compensate_seconds field.
func ByCompensateSeconds(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompensateSeconds, opts...).ToFunc()
}

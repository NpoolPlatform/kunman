// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/topmost"
	"github.com/google/uuid"
)

// TopMostUpdate is the builder for updating TopMost entities.
type TopMostUpdate struct {
	config
	hooks     []Hook
	mutation  *TopMostMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TopMostUpdate builder.
func (tmu *TopMostUpdate) Where(ps ...predicate.TopMost) *TopMostUpdate {
	tmu.mutation.Where(ps...)
	return tmu
}

// SetEntID sets the "ent_id" field.
func (tmu *TopMostUpdate) SetEntID(u uuid.UUID) *TopMostUpdate {
	tmu.mutation.SetEntID(u)
	return tmu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tmu *TopMostUpdate) SetNillableEntID(u *uuid.UUID) *TopMostUpdate {
	if u != nil {
		tmu.SetEntID(*u)
	}
	return tmu
}

// SetCreatedAt sets the "created_at" field.
func (tmu *TopMostUpdate) SetCreatedAt(u uint32) *TopMostUpdate {
	tmu.mutation.ResetCreatedAt()
	tmu.mutation.SetCreatedAt(u)
	return tmu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tmu *TopMostUpdate) SetNillableCreatedAt(u *uint32) *TopMostUpdate {
	if u != nil {
		tmu.SetCreatedAt(*u)
	}
	return tmu
}

// AddCreatedAt adds u to the "created_at" field.
func (tmu *TopMostUpdate) AddCreatedAt(u int32) *TopMostUpdate {
	tmu.mutation.AddCreatedAt(u)
	return tmu
}

// SetUpdatedAt sets the "updated_at" field.
func (tmu *TopMostUpdate) SetUpdatedAt(u uint32) *TopMostUpdate {
	tmu.mutation.ResetUpdatedAt()
	tmu.mutation.SetUpdatedAt(u)
	return tmu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tmu *TopMostUpdate) AddUpdatedAt(u int32) *TopMostUpdate {
	tmu.mutation.AddUpdatedAt(u)
	return tmu
}

// SetDeletedAt sets the "deleted_at" field.
func (tmu *TopMostUpdate) SetDeletedAt(u uint32) *TopMostUpdate {
	tmu.mutation.ResetDeletedAt()
	tmu.mutation.SetDeletedAt(u)
	return tmu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tmu *TopMostUpdate) SetNillableDeletedAt(u *uint32) *TopMostUpdate {
	if u != nil {
		tmu.SetDeletedAt(*u)
	}
	return tmu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tmu *TopMostUpdate) AddDeletedAt(u int32) *TopMostUpdate {
	tmu.mutation.AddDeletedAt(u)
	return tmu
}

// SetAppID sets the "app_id" field.
func (tmu *TopMostUpdate) SetAppID(u uuid.UUID) *TopMostUpdate {
	tmu.mutation.SetAppID(u)
	return tmu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (tmu *TopMostUpdate) SetNillableAppID(u *uuid.UUID) *TopMostUpdate {
	if u != nil {
		tmu.SetAppID(*u)
	}
	return tmu
}

// ClearAppID clears the value of the "app_id" field.
func (tmu *TopMostUpdate) ClearAppID() *TopMostUpdate {
	tmu.mutation.ClearAppID()
	return tmu
}

// SetTopMostType sets the "top_most_type" field.
func (tmu *TopMostUpdate) SetTopMostType(s string) *TopMostUpdate {
	tmu.mutation.SetTopMostType(s)
	return tmu
}

// SetNillableTopMostType sets the "top_most_type" field if the given value is not nil.
func (tmu *TopMostUpdate) SetNillableTopMostType(s *string) *TopMostUpdate {
	if s != nil {
		tmu.SetTopMostType(*s)
	}
	return tmu
}

// ClearTopMostType clears the value of the "top_most_type" field.
func (tmu *TopMostUpdate) ClearTopMostType() *TopMostUpdate {
	tmu.mutation.ClearTopMostType()
	return tmu
}

// SetTitle sets the "title" field.
func (tmu *TopMostUpdate) SetTitle(s string) *TopMostUpdate {
	tmu.mutation.SetTitle(s)
	return tmu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tmu *TopMostUpdate) SetNillableTitle(s *string) *TopMostUpdate {
	if s != nil {
		tmu.SetTitle(*s)
	}
	return tmu
}

// ClearTitle clears the value of the "title" field.
func (tmu *TopMostUpdate) ClearTitle() *TopMostUpdate {
	tmu.mutation.ClearTitle()
	return tmu
}

// SetMessage sets the "message" field.
func (tmu *TopMostUpdate) SetMessage(s string) *TopMostUpdate {
	tmu.mutation.SetMessage(s)
	return tmu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (tmu *TopMostUpdate) SetNillableMessage(s *string) *TopMostUpdate {
	if s != nil {
		tmu.SetMessage(*s)
	}
	return tmu
}

// ClearMessage clears the value of the "message" field.
func (tmu *TopMostUpdate) ClearMessage() *TopMostUpdate {
	tmu.mutation.ClearMessage()
	return tmu
}

// SetTargetURL sets the "target_url" field.
func (tmu *TopMostUpdate) SetTargetURL(s string) *TopMostUpdate {
	tmu.mutation.SetTargetURL(s)
	return tmu
}

// SetNillableTargetURL sets the "target_url" field if the given value is not nil.
func (tmu *TopMostUpdate) SetNillableTargetURL(s *string) *TopMostUpdate {
	if s != nil {
		tmu.SetTargetURL(*s)
	}
	return tmu
}

// ClearTargetURL clears the value of the "target_url" field.
func (tmu *TopMostUpdate) ClearTargetURL() *TopMostUpdate {
	tmu.mutation.ClearTargetURL()
	return tmu
}

// SetStartAt sets the "start_at" field.
func (tmu *TopMostUpdate) SetStartAt(u uint32) *TopMostUpdate {
	tmu.mutation.ResetStartAt()
	tmu.mutation.SetStartAt(u)
	return tmu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (tmu *TopMostUpdate) SetNillableStartAt(u *uint32) *TopMostUpdate {
	if u != nil {
		tmu.SetStartAt(*u)
	}
	return tmu
}

// AddStartAt adds u to the "start_at" field.
func (tmu *TopMostUpdate) AddStartAt(u int32) *TopMostUpdate {
	tmu.mutation.AddStartAt(u)
	return tmu
}

// ClearStartAt clears the value of the "start_at" field.
func (tmu *TopMostUpdate) ClearStartAt() *TopMostUpdate {
	tmu.mutation.ClearStartAt()
	return tmu
}

// SetEndAt sets the "end_at" field.
func (tmu *TopMostUpdate) SetEndAt(u uint32) *TopMostUpdate {
	tmu.mutation.ResetEndAt()
	tmu.mutation.SetEndAt(u)
	return tmu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (tmu *TopMostUpdate) SetNillableEndAt(u *uint32) *TopMostUpdate {
	if u != nil {
		tmu.SetEndAt(*u)
	}
	return tmu
}

// AddEndAt adds u to the "end_at" field.
func (tmu *TopMostUpdate) AddEndAt(u int32) *TopMostUpdate {
	tmu.mutation.AddEndAt(u)
	return tmu
}

// ClearEndAt clears the value of the "end_at" field.
func (tmu *TopMostUpdate) ClearEndAt() *TopMostUpdate {
	tmu.mutation.ClearEndAt()
	return tmu
}

// Mutation returns the TopMostMutation object of the builder.
func (tmu *TopMostUpdate) Mutation() *TopMostMutation {
	return tmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tmu *TopMostUpdate) Save(ctx context.Context) (int, error) {
	tmu.defaults()
	return withHooks(ctx, tmu.sqlSave, tmu.mutation, tmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tmu *TopMostUpdate) SaveX(ctx context.Context) int {
	affected, err := tmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tmu *TopMostUpdate) Exec(ctx context.Context) error {
	_, err := tmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmu *TopMostUpdate) ExecX(ctx context.Context) {
	if err := tmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmu *TopMostUpdate) defaults() {
	if _, ok := tmu.mutation.UpdatedAt(); !ok {
		v := topmost.UpdateDefaultUpdatedAt()
		tmu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tmu *TopMostUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TopMostUpdate {
	tmu.modifiers = append(tmu.modifiers, modifiers...)
	return tmu
}

func (tmu *TopMostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(topmost.Table, topmost.Columns, sqlgraph.NewFieldSpec(topmost.FieldID, field.TypeUint32))
	if ps := tmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmu.mutation.EntID(); ok {
		_spec.SetField(topmost.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := tmu.mutation.CreatedAt(); ok {
		_spec.SetField(topmost.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := tmu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(topmost.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := tmu.mutation.UpdatedAt(); ok {
		_spec.SetField(topmost.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := tmu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(topmost.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := tmu.mutation.DeletedAt(); ok {
		_spec.SetField(topmost.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := tmu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(topmost.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := tmu.mutation.AppID(); ok {
		_spec.SetField(topmost.FieldAppID, field.TypeUUID, value)
	}
	if tmu.mutation.AppIDCleared() {
		_spec.ClearField(topmost.FieldAppID, field.TypeUUID)
	}
	if value, ok := tmu.mutation.TopMostType(); ok {
		_spec.SetField(topmost.FieldTopMostType, field.TypeString, value)
	}
	if tmu.mutation.TopMostTypeCleared() {
		_spec.ClearField(topmost.FieldTopMostType, field.TypeString)
	}
	if value, ok := tmu.mutation.Title(); ok {
		_spec.SetField(topmost.FieldTitle, field.TypeString, value)
	}
	if tmu.mutation.TitleCleared() {
		_spec.ClearField(topmost.FieldTitle, field.TypeString)
	}
	if value, ok := tmu.mutation.Message(); ok {
		_spec.SetField(topmost.FieldMessage, field.TypeString, value)
	}
	if tmu.mutation.MessageCleared() {
		_spec.ClearField(topmost.FieldMessage, field.TypeString)
	}
	if value, ok := tmu.mutation.TargetURL(); ok {
		_spec.SetField(topmost.FieldTargetURL, field.TypeString, value)
	}
	if tmu.mutation.TargetURLCleared() {
		_spec.ClearField(topmost.FieldTargetURL, field.TypeString)
	}
	if value, ok := tmu.mutation.StartAt(); ok {
		_spec.SetField(topmost.FieldStartAt, field.TypeUint32, value)
	}
	if value, ok := tmu.mutation.AddedStartAt(); ok {
		_spec.AddField(topmost.FieldStartAt, field.TypeUint32, value)
	}
	if tmu.mutation.StartAtCleared() {
		_spec.ClearField(topmost.FieldStartAt, field.TypeUint32)
	}
	if value, ok := tmu.mutation.EndAt(); ok {
		_spec.SetField(topmost.FieldEndAt, field.TypeUint32, value)
	}
	if value, ok := tmu.mutation.AddedEndAt(); ok {
		_spec.AddField(topmost.FieldEndAt, field.TypeUint32, value)
	}
	if tmu.mutation.EndAtCleared() {
		_spec.ClearField(topmost.FieldEndAt, field.TypeUint32)
	}
	_spec.AddModifiers(tmu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topmost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tmu.mutation.done = true
	return n, nil
}

// TopMostUpdateOne is the builder for updating a single TopMost entity.
type TopMostUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TopMostMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (tmuo *TopMostUpdateOne) SetEntID(u uuid.UUID) *TopMostUpdateOne {
	tmuo.mutation.SetEntID(u)
	return tmuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tmuo *TopMostUpdateOne) SetNillableEntID(u *uuid.UUID) *TopMostUpdateOne {
	if u != nil {
		tmuo.SetEntID(*u)
	}
	return tmuo
}

// SetCreatedAt sets the "created_at" field.
func (tmuo *TopMostUpdateOne) SetCreatedAt(u uint32) *TopMostUpdateOne {
	tmuo.mutation.ResetCreatedAt()
	tmuo.mutation.SetCreatedAt(u)
	return tmuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tmuo *TopMostUpdateOne) SetNillableCreatedAt(u *uint32) *TopMostUpdateOne {
	if u != nil {
		tmuo.SetCreatedAt(*u)
	}
	return tmuo
}

// AddCreatedAt adds u to the "created_at" field.
func (tmuo *TopMostUpdateOne) AddCreatedAt(u int32) *TopMostUpdateOne {
	tmuo.mutation.AddCreatedAt(u)
	return tmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tmuo *TopMostUpdateOne) SetUpdatedAt(u uint32) *TopMostUpdateOne {
	tmuo.mutation.ResetUpdatedAt()
	tmuo.mutation.SetUpdatedAt(u)
	return tmuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tmuo *TopMostUpdateOne) AddUpdatedAt(u int32) *TopMostUpdateOne {
	tmuo.mutation.AddUpdatedAt(u)
	return tmuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tmuo *TopMostUpdateOne) SetDeletedAt(u uint32) *TopMostUpdateOne {
	tmuo.mutation.ResetDeletedAt()
	tmuo.mutation.SetDeletedAt(u)
	return tmuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tmuo *TopMostUpdateOne) SetNillableDeletedAt(u *uint32) *TopMostUpdateOne {
	if u != nil {
		tmuo.SetDeletedAt(*u)
	}
	return tmuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tmuo *TopMostUpdateOne) AddDeletedAt(u int32) *TopMostUpdateOne {
	tmuo.mutation.AddDeletedAt(u)
	return tmuo
}

// SetAppID sets the "app_id" field.
func (tmuo *TopMostUpdateOne) SetAppID(u uuid.UUID) *TopMostUpdateOne {
	tmuo.mutation.SetAppID(u)
	return tmuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (tmuo *TopMostUpdateOne) SetNillableAppID(u *uuid.UUID) *TopMostUpdateOne {
	if u != nil {
		tmuo.SetAppID(*u)
	}
	return tmuo
}

// ClearAppID clears the value of the "app_id" field.
func (tmuo *TopMostUpdateOne) ClearAppID() *TopMostUpdateOne {
	tmuo.mutation.ClearAppID()
	return tmuo
}

// SetTopMostType sets the "top_most_type" field.
func (tmuo *TopMostUpdateOne) SetTopMostType(s string) *TopMostUpdateOne {
	tmuo.mutation.SetTopMostType(s)
	return tmuo
}

// SetNillableTopMostType sets the "top_most_type" field if the given value is not nil.
func (tmuo *TopMostUpdateOne) SetNillableTopMostType(s *string) *TopMostUpdateOne {
	if s != nil {
		tmuo.SetTopMostType(*s)
	}
	return tmuo
}

// ClearTopMostType clears the value of the "top_most_type" field.
func (tmuo *TopMostUpdateOne) ClearTopMostType() *TopMostUpdateOne {
	tmuo.mutation.ClearTopMostType()
	return tmuo
}

// SetTitle sets the "title" field.
func (tmuo *TopMostUpdateOne) SetTitle(s string) *TopMostUpdateOne {
	tmuo.mutation.SetTitle(s)
	return tmuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tmuo *TopMostUpdateOne) SetNillableTitle(s *string) *TopMostUpdateOne {
	if s != nil {
		tmuo.SetTitle(*s)
	}
	return tmuo
}

// ClearTitle clears the value of the "title" field.
func (tmuo *TopMostUpdateOne) ClearTitle() *TopMostUpdateOne {
	tmuo.mutation.ClearTitle()
	return tmuo
}

// SetMessage sets the "message" field.
func (tmuo *TopMostUpdateOne) SetMessage(s string) *TopMostUpdateOne {
	tmuo.mutation.SetMessage(s)
	return tmuo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (tmuo *TopMostUpdateOne) SetNillableMessage(s *string) *TopMostUpdateOne {
	if s != nil {
		tmuo.SetMessage(*s)
	}
	return tmuo
}

// ClearMessage clears the value of the "message" field.
func (tmuo *TopMostUpdateOne) ClearMessage() *TopMostUpdateOne {
	tmuo.mutation.ClearMessage()
	return tmuo
}

// SetTargetURL sets the "target_url" field.
func (tmuo *TopMostUpdateOne) SetTargetURL(s string) *TopMostUpdateOne {
	tmuo.mutation.SetTargetURL(s)
	return tmuo
}

// SetNillableTargetURL sets the "target_url" field if the given value is not nil.
func (tmuo *TopMostUpdateOne) SetNillableTargetURL(s *string) *TopMostUpdateOne {
	if s != nil {
		tmuo.SetTargetURL(*s)
	}
	return tmuo
}

// ClearTargetURL clears the value of the "target_url" field.
func (tmuo *TopMostUpdateOne) ClearTargetURL() *TopMostUpdateOne {
	tmuo.mutation.ClearTargetURL()
	return tmuo
}

// SetStartAt sets the "start_at" field.
func (tmuo *TopMostUpdateOne) SetStartAt(u uint32) *TopMostUpdateOne {
	tmuo.mutation.ResetStartAt()
	tmuo.mutation.SetStartAt(u)
	return tmuo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (tmuo *TopMostUpdateOne) SetNillableStartAt(u *uint32) *TopMostUpdateOne {
	if u != nil {
		tmuo.SetStartAt(*u)
	}
	return tmuo
}

// AddStartAt adds u to the "start_at" field.
func (tmuo *TopMostUpdateOne) AddStartAt(u int32) *TopMostUpdateOne {
	tmuo.mutation.AddStartAt(u)
	return tmuo
}

// ClearStartAt clears the value of the "start_at" field.
func (tmuo *TopMostUpdateOne) ClearStartAt() *TopMostUpdateOne {
	tmuo.mutation.ClearStartAt()
	return tmuo
}

// SetEndAt sets the "end_at" field.
func (tmuo *TopMostUpdateOne) SetEndAt(u uint32) *TopMostUpdateOne {
	tmuo.mutation.ResetEndAt()
	tmuo.mutation.SetEndAt(u)
	return tmuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (tmuo *TopMostUpdateOne) SetNillableEndAt(u *uint32) *TopMostUpdateOne {
	if u != nil {
		tmuo.SetEndAt(*u)
	}
	return tmuo
}

// AddEndAt adds u to the "end_at" field.
func (tmuo *TopMostUpdateOne) AddEndAt(u int32) *TopMostUpdateOne {
	tmuo.mutation.AddEndAt(u)
	return tmuo
}

// ClearEndAt clears the value of the "end_at" field.
func (tmuo *TopMostUpdateOne) ClearEndAt() *TopMostUpdateOne {
	tmuo.mutation.ClearEndAt()
	return tmuo
}

// Mutation returns the TopMostMutation object of the builder.
func (tmuo *TopMostUpdateOne) Mutation() *TopMostMutation {
	return tmuo.mutation
}

// Where appends a list predicates to the TopMostUpdate builder.
func (tmuo *TopMostUpdateOne) Where(ps ...predicate.TopMost) *TopMostUpdateOne {
	tmuo.mutation.Where(ps...)
	return tmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tmuo *TopMostUpdateOne) Select(field string, fields ...string) *TopMostUpdateOne {
	tmuo.fields = append([]string{field}, fields...)
	return tmuo
}

// Save executes the query and returns the updated TopMost entity.
func (tmuo *TopMostUpdateOne) Save(ctx context.Context) (*TopMost, error) {
	tmuo.defaults()
	return withHooks(ctx, tmuo.sqlSave, tmuo.mutation, tmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tmuo *TopMostUpdateOne) SaveX(ctx context.Context) *TopMost {
	node, err := tmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tmuo *TopMostUpdateOne) Exec(ctx context.Context) error {
	_, err := tmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmuo *TopMostUpdateOne) ExecX(ctx context.Context) {
	if err := tmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmuo *TopMostUpdateOne) defaults() {
	if _, ok := tmuo.mutation.UpdatedAt(); !ok {
		v := topmost.UpdateDefaultUpdatedAt()
		tmuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tmuo *TopMostUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TopMostUpdateOne {
	tmuo.modifiers = append(tmuo.modifiers, modifiers...)
	return tmuo
}

func (tmuo *TopMostUpdateOne) sqlSave(ctx context.Context) (_node *TopMost, err error) {
	_spec := sqlgraph.NewUpdateSpec(topmost.Table, topmost.Columns, sqlgraph.NewFieldSpec(topmost.FieldID, field.TypeUint32))
	id, ok := tmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "TopMost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, topmost.FieldID)
		for _, f := range fields {
			if !topmost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != topmost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmuo.mutation.EntID(); ok {
		_spec.SetField(topmost.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := tmuo.mutation.CreatedAt(); ok {
		_spec.SetField(topmost.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := tmuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(topmost.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := tmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(topmost.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := tmuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(topmost.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := tmuo.mutation.DeletedAt(); ok {
		_spec.SetField(topmost.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := tmuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(topmost.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := tmuo.mutation.AppID(); ok {
		_spec.SetField(topmost.FieldAppID, field.TypeUUID, value)
	}
	if tmuo.mutation.AppIDCleared() {
		_spec.ClearField(topmost.FieldAppID, field.TypeUUID)
	}
	if value, ok := tmuo.mutation.TopMostType(); ok {
		_spec.SetField(topmost.FieldTopMostType, field.TypeString, value)
	}
	if tmuo.mutation.TopMostTypeCleared() {
		_spec.ClearField(topmost.FieldTopMostType, field.TypeString)
	}
	if value, ok := tmuo.mutation.Title(); ok {
		_spec.SetField(topmost.FieldTitle, field.TypeString, value)
	}
	if tmuo.mutation.TitleCleared() {
		_spec.ClearField(topmost.FieldTitle, field.TypeString)
	}
	if value, ok := tmuo.mutation.Message(); ok {
		_spec.SetField(topmost.FieldMessage, field.TypeString, value)
	}
	if tmuo.mutation.MessageCleared() {
		_spec.ClearField(topmost.FieldMessage, field.TypeString)
	}
	if value, ok := tmuo.mutation.TargetURL(); ok {
		_spec.SetField(topmost.FieldTargetURL, field.TypeString, value)
	}
	if tmuo.mutation.TargetURLCleared() {
		_spec.ClearField(topmost.FieldTargetURL, field.TypeString)
	}
	if value, ok := tmuo.mutation.StartAt(); ok {
		_spec.SetField(topmost.FieldStartAt, field.TypeUint32, value)
	}
	if value, ok := tmuo.mutation.AddedStartAt(); ok {
		_spec.AddField(topmost.FieldStartAt, field.TypeUint32, value)
	}
	if tmuo.mutation.StartAtCleared() {
		_spec.ClearField(topmost.FieldStartAt, field.TypeUint32)
	}
	if value, ok := tmuo.mutation.EndAt(); ok {
		_spec.SetField(topmost.FieldEndAt, field.TypeUint32, value)
	}
	if value, ok := tmuo.mutation.AddedEndAt(); ok {
		_spec.AddField(topmost.FieldEndAt, field.TypeUint32, value)
	}
	if tmuo.mutation.EndAtCleared() {
		_spec.ClearField(topmost.FieldEndAt, field.TypeUint32)
	}
	_spec.AddModifiers(tmuo.modifiers...)
	_node = &TopMost{config: tmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topmost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tmuo.mutation.done = true
	return _node, nil
}

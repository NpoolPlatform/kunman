// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/fbmcrowdfunding"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// FbmCrowdFundingCreate is the builder for creating a FbmCrowdFunding entity.
type FbmCrowdFundingCreate struct {
	config
	mutation *FbmCrowdFundingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (fcfc *FbmCrowdFundingCreate) SetEntID(u uuid.UUID) *FbmCrowdFundingCreate {
	fcfc.mutation.SetEntID(u)
	return fcfc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (fcfc *FbmCrowdFundingCreate) SetNillableEntID(u *uuid.UUID) *FbmCrowdFundingCreate {
	if u != nil {
		fcfc.SetEntID(*u)
	}
	return fcfc
}

// SetGoodID sets the "good_id" field.
func (fcfc *FbmCrowdFundingCreate) SetGoodID(u uuid.UUID) *FbmCrowdFundingCreate {
	fcfc.mutation.SetGoodID(u)
	return fcfc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (fcfc *FbmCrowdFundingCreate) SetNillableGoodID(u *uuid.UUID) *FbmCrowdFundingCreate {
	if u != nil {
		fcfc.SetGoodID(*u)
	}
	return fcfc
}

// SetMinDepositAmount sets the "min_deposit_amount" field.
func (fcfc *FbmCrowdFundingCreate) SetMinDepositAmount(d decimal.Decimal) *FbmCrowdFundingCreate {
	fcfc.mutation.SetMinDepositAmount(d)
	return fcfc
}

// SetNillableMinDepositAmount sets the "min_deposit_amount" field if the given value is not nil.
func (fcfc *FbmCrowdFundingCreate) SetNillableMinDepositAmount(d *decimal.Decimal) *FbmCrowdFundingCreate {
	if d != nil {
		fcfc.SetMinDepositAmount(*d)
	}
	return fcfc
}

// SetDeliveryAt sets the "delivery_at" field.
func (fcfc *FbmCrowdFundingCreate) SetDeliveryAt(u uint32) *FbmCrowdFundingCreate {
	fcfc.mutation.SetDeliveryAt(u)
	return fcfc
}

// SetNillableDeliveryAt sets the "delivery_at" field if the given value is not nil.
func (fcfc *FbmCrowdFundingCreate) SetNillableDeliveryAt(u *uint32) *FbmCrowdFundingCreate {
	if u != nil {
		fcfc.SetDeliveryAt(*u)
	}
	return fcfc
}

// SetTargetAmount sets the "target_amount" field.
func (fcfc *FbmCrowdFundingCreate) SetTargetAmount(d decimal.Decimal) *FbmCrowdFundingCreate {
	fcfc.mutation.SetTargetAmount(d)
	return fcfc
}

// SetNillableTargetAmount sets the "target_amount" field if the given value is not nil.
func (fcfc *FbmCrowdFundingCreate) SetNillableTargetAmount(d *decimal.Decimal) *FbmCrowdFundingCreate {
	if d != nil {
		fcfc.SetTargetAmount(*d)
	}
	return fcfc
}

// SetDepositStartAt sets the "deposit_start_at" field.
func (fcfc *FbmCrowdFundingCreate) SetDepositStartAt(u uint32) *FbmCrowdFundingCreate {
	fcfc.mutation.SetDepositStartAt(u)
	return fcfc
}

// SetNillableDepositStartAt sets the "deposit_start_at" field if the given value is not nil.
func (fcfc *FbmCrowdFundingCreate) SetNillableDepositStartAt(u *uint32) *FbmCrowdFundingCreate {
	if u != nil {
		fcfc.SetDepositStartAt(*u)
	}
	return fcfc
}

// SetDepositEndAt sets the "deposit_end_at" field.
func (fcfc *FbmCrowdFundingCreate) SetDepositEndAt(u uint32) *FbmCrowdFundingCreate {
	fcfc.mutation.SetDepositEndAt(u)
	return fcfc
}

// SetNillableDepositEndAt sets the "deposit_end_at" field if the given value is not nil.
func (fcfc *FbmCrowdFundingCreate) SetNillableDepositEndAt(u *uint32) *FbmCrowdFundingCreate {
	if u != nil {
		fcfc.SetDepositEndAt(*u)
	}
	return fcfc
}

// SetContractAddress sets the "contract_address" field.
func (fcfc *FbmCrowdFundingCreate) SetContractAddress(s string) *FbmCrowdFundingCreate {
	fcfc.mutation.SetContractAddress(s)
	return fcfc
}

// SetNillableContractAddress sets the "contract_address" field if the given value is not nil.
func (fcfc *FbmCrowdFundingCreate) SetNillableContractAddress(s *string) *FbmCrowdFundingCreate {
	if s != nil {
		fcfc.SetContractAddress(*s)
	}
	return fcfc
}

// SetDepositCoinTypeID sets the "deposit_coin_type_id" field.
func (fcfc *FbmCrowdFundingCreate) SetDepositCoinTypeID(u uuid.UUID) *FbmCrowdFundingCreate {
	fcfc.mutation.SetDepositCoinTypeID(u)
	return fcfc
}

// SetNillableDepositCoinTypeID sets the "deposit_coin_type_id" field if the given value is not nil.
func (fcfc *FbmCrowdFundingCreate) SetNillableDepositCoinTypeID(u *uuid.UUID) *FbmCrowdFundingCreate {
	if u != nil {
		fcfc.SetDepositCoinTypeID(*u)
	}
	return fcfc
}

// SetRedeemable sets the "redeemable" field.
func (fcfc *FbmCrowdFundingCreate) SetRedeemable(b bool) *FbmCrowdFundingCreate {
	fcfc.mutation.SetRedeemable(b)
	return fcfc
}

// SetNillableRedeemable sets the "redeemable" field if the given value is not nil.
func (fcfc *FbmCrowdFundingCreate) SetNillableRedeemable(b *bool) *FbmCrowdFundingCreate {
	if b != nil {
		fcfc.SetRedeemable(*b)
	}
	return fcfc
}

// SetRedeemDelayHours sets the "redeem_delay_hours" field.
func (fcfc *FbmCrowdFundingCreate) SetRedeemDelayHours(u uint32) *FbmCrowdFundingCreate {
	fcfc.mutation.SetRedeemDelayHours(u)
	return fcfc
}

// SetNillableRedeemDelayHours sets the "redeem_delay_hours" field if the given value is not nil.
func (fcfc *FbmCrowdFundingCreate) SetNillableRedeemDelayHours(u *uint32) *FbmCrowdFundingCreate {
	if u != nil {
		fcfc.SetRedeemDelayHours(*u)
	}
	return fcfc
}

// SetDurationDisplayType sets the "duration_display_type" field.
func (fcfc *FbmCrowdFundingCreate) SetDurationDisplayType(s string) *FbmCrowdFundingCreate {
	fcfc.mutation.SetDurationDisplayType(s)
	return fcfc
}

// SetNillableDurationDisplayType sets the "duration_display_type" field if the given value is not nil.
func (fcfc *FbmCrowdFundingCreate) SetNillableDurationDisplayType(s *string) *FbmCrowdFundingCreate {
	if s != nil {
		fcfc.SetDurationDisplayType(*s)
	}
	return fcfc
}

// SetDurationSeconds sets the "duration_seconds" field.
func (fcfc *FbmCrowdFundingCreate) SetDurationSeconds(u uint32) *FbmCrowdFundingCreate {
	fcfc.mutation.SetDurationSeconds(u)
	return fcfc
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (fcfc *FbmCrowdFundingCreate) SetNillableDurationSeconds(u *uint32) *FbmCrowdFundingCreate {
	if u != nil {
		fcfc.SetDurationSeconds(*u)
	}
	return fcfc
}

// SetID sets the "id" field.
func (fcfc *FbmCrowdFundingCreate) SetID(u uint32) *FbmCrowdFundingCreate {
	fcfc.mutation.SetID(u)
	return fcfc
}

// Mutation returns the FbmCrowdFundingMutation object of the builder.
func (fcfc *FbmCrowdFundingCreate) Mutation() *FbmCrowdFundingMutation {
	return fcfc.mutation
}

// Save creates the FbmCrowdFunding in the database.
func (fcfc *FbmCrowdFundingCreate) Save(ctx context.Context) (*FbmCrowdFunding, error) {
	fcfc.defaults()
	return withHooks(ctx, fcfc.sqlSave, fcfc.mutation, fcfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fcfc *FbmCrowdFundingCreate) SaveX(ctx context.Context) *FbmCrowdFunding {
	v, err := fcfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcfc *FbmCrowdFundingCreate) Exec(ctx context.Context) error {
	_, err := fcfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcfc *FbmCrowdFundingCreate) ExecX(ctx context.Context) {
	if err := fcfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fcfc *FbmCrowdFundingCreate) defaults() {
	if _, ok := fcfc.mutation.EntID(); !ok {
		v := fbmcrowdfunding.DefaultEntID()
		fcfc.mutation.SetEntID(v)
	}
	if _, ok := fcfc.mutation.GoodID(); !ok {
		v := fbmcrowdfunding.DefaultGoodID()
		fcfc.mutation.SetGoodID(v)
	}
	if _, ok := fcfc.mutation.MinDepositAmount(); !ok {
		v := fbmcrowdfunding.DefaultMinDepositAmount
		fcfc.mutation.SetMinDepositAmount(v)
	}
	if _, ok := fcfc.mutation.DeliveryAt(); !ok {
		v := fbmcrowdfunding.DefaultDeliveryAt
		fcfc.mutation.SetDeliveryAt(v)
	}
	if _, ok := fcfc.mutation.TargetAmount(); !ok {
		v := fbmcrowdfunding.DefaultTargetAmount
		fcfc.mutation.SetTargetAmount(v)
	}
	if _, ok := fcfc.mutation.DepositStartAt(); !ok {
		v := fbmcrowdfunding.DefaultDepositStartAt
		fcfc.mutation.SetDepositStartAt(v)
	}
	if _, ok := fcfc.mutation.DepositEndAt(); !ok {
		v := fbmcrowdfunding.DefaultDepositEndAt
		fcfc.mutation.SetDepositEndAt(v)
	}
	if _, ok := fcfc.mutation.ContractAddress(); !ok {
		v := fbmcrowdfunding.DefaultContractAddress
		fcfc.mutation.SetContractAddress(v)
	}
	if _, ok := fcfc.mutation.DepositCoinTypeID(); !ok {
		v := fbmcrowdfunding.DefaultDepositCoinTypeID()
		fcfc.mutation.SetDepositCoinTypeID(v)
	}
	if _, ok := fcfc.mutation.Redeemable(); !ok {
		v := fbmcrowdfunding.DefaultRedeemable
		fcfc.mutation.SetRedeemable(v)
	}
	if _, ok := fcfc.mutation.RedeemDelayHours(); !ok {
		v := fbmcrowdfunding.DefaultRedeemDelayHours
		fcfc.mutation.SetRedeemDelayHours(v)
	}
	if _, ok := fcfc.mutation.DurationDisplayType(); !ok {
		v := fbmcrowdfunding.DefaultDurationDisplayType
		fcfc.mutation.SetDurationDisplayType(v)
	}
	if _, ok := fcfc.mutation.DurationSeconds(); !ok {
		v := fbmcrowdfunding.DefaultDurationSeconds
		fcfc.mutation.SetDurationSeconds(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fcfc *FbmCrowdFundingCreate) check() error {
	if _, ok := fcfc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "FbmCrowdFunding.ent_id"`)}
	}
	return nil
}

func (fcfc *FbmCrowdFundingCreate) sqlSave(ctx context.Context) (*FbmCrowdFunding, error) {
	if err := fcfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fcfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fcfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	fcfc.mutation.id = &_node.ID
	fcfc.mutation.done = true
	return _node, nil
}

func (fcfc *FbmCrowdFundingCreate) createSpec() (*FbmCrowdFunding, *sqlgraph.CreateSpec) {
	var (
		_node = &FbmCrowdFunding{config: fcfc.config}
		_spec = sqlgraph.NewCreateSpec(fbmcrowdfunding.Table, sqlgraph.NewFieldSpec(fbmcrowdfunding.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = fcfc.conflict
	if id, ok := fcfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fcfc.mutation.EntID(); ok {
		_spec.SetField(fbmcrowdfunding.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := fcfc.mutation.GoodID(); ok {
		_spec.SetField(fbmcrowdfunding.FieldGoodID, field.TypeUUID, value)
		_node.GoodID = value
	}
	if value, ok := fcfc.mutation.MinDepositAmount(); ok {
		_spec.SetField(fbmcrowdfunding.FieldMinDepositAmount, field.TypeOther, value)
		_node.MinDepositAmount = value
	}
	if value, ok := fcfc.mutation.DeliveryAt(); ok {
		_spec.SetField(fbmcrowdfunding.FieldDeliveryAt, field.TypeUint32, value)
		_node.DeliveryAt = value
	}
	if value, ok := fcfc.mutation.TargetAmount(); ok {
		_spec.SetField(fbmcrowdfunding.FieldTargetAmount, field.TypeOther, value)
		_node.TargetAmount = value
	}
	if value, ok := fcfc.mutation.DepositStartAt(); ok {
		_spec.SetField(fbmcrowdfunding.FieldDepositStartAt, field.TypeUint32, value)
		_node.DepositStartAt = value
	}
	if value, ok := fcfc.mutation.DepositEndAt(); ok {
		_spec.SetField(fbmcrowdfunding.FieldDepositEndAt, field.TypeUint32, value)
		_node.DepositEndAt = value
	}
	if value, ok := fcfc.mutation.ContractAddress(); ok {
		_spec.SetField(fbmcrowdfunding.FieldContractAddress, field.TypeString, value)
		_node.ContractAddress = value
	}
	if value, ok := fcfc.mutation.DepositCoinTypeID(); ok {
		_spec.SetField(fbmcrowdfunding.FieldDepositCoinTypeID, field.TypeUUID, value)
		_node.DepositCoinTypeID = value
	}
	if value, ok := fcfc.mutation.Redeemable(); ok {
		_spec.SetField(fbmcrowdfunding.FieldRedeemable, field.TypeBool, value)
		_node.Redeemable = value
	}
	if value, ok := fcfc.mutation.RedeemDelayHours(); ok {
		_spec.SetField(fbmcrowdfunding.FieldRedeemDelayHours, field.TypeUint32, value)
		_node.RedeemDelayHours = value
	}
	if value, ok := fcfc.mutation.DurationDisplayType(); ok {
		_spec.SetField(fbmcrowdfunding.FieldDurationDisplayType, field.TypeString, value)
		_node.DurationDisplayType = value
	}
	if value, ok := fcfc.mutation.DurationSeconds(); ok {
		_spec.SetField(fbmcrowdfunding.FieldDurationSeconds, field.TypeUint32, value)
		_node.DurationSeconds = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FbmCrowdFunding.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FbmCrowdFundingUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (fcfc *FbmCrowdFundingCreate) OnConflict(opts ...sql.ConflictOption) *FbmCrowdFundingUpsertOne {
	fcfc.conflict = opts
	return &FbmCrowdFundingUpsertOne{
		create: fcfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FbmCrowdFunding.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcfc *FbmCrowdFundingCreate) OnConflictColumns(columns ...string) *FbmCrowdFundingUpsertOne {
	fcfc.conflict = append(fcfc.conflict, sql.ConflictColumns(columns...))
	return &FbmCrowdFundingUpsertOne{
		create: fcfc,
	}
}

type (
	// FbmCrowdFundingUpsertOne is the builder for "upsert"-ing
	//  one FbmCrowdFunding node.
	FbmCrowdFundingUpsertOne struct {
		create *FbmCrowdFundingCreate
	}

	// FbmCrowdFundingUpsert is the "OnConflict" setter.
	FbmCrowdFundingUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *FbmCrowdFundingUpsert) SetEntID(v uuid.UUID) *FbmCrowdFundingUpsert {
	u.Set(fbmcrowdfunding.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsert) UpdateEntID() *FbmCrowdFundingUpsert {
	u.SetExcluded(fbmcrowdfunding.FieldEntID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *FbmCrowdFundingUpsert) SetGoodID(v uuid.UUID) *FbmCrowdFundingUpsert {
	u.Set(fbmcrowdfunding.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsert) UpdateGoodID() *FbmCrowdFundingUpsert {
	u.SetExcluded(fbmcrowdfunding.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *FbmCrowdFundingUpsert) ClearGoodID() *FbmCrowdFundingUpsert {
	u.SetNull(fbmcrowdfunding.FieldGoodID)
	return u
}

// SetMinDepositAmount sets the "min_deposit_amount" field.
func (u *FbmCrowdFundingUpsert) SetMinDepositAmount(v decimal.Decimal) *FbmCrowdFundingUpsert {
	u.Set(fbmcrowdfunding.FieldMinDepositAmount, v)
	return u
}

// UpdateMinDepositAmount sets the "min_deposit_amount" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsert) UpdateMinDepositAmount() *FbmCrowdFundingUpsert {
	u.SetExcluded(fbmcrowdfunding.FieldMinDepositAmount)
	return u
}

// ClearMinDepositAmount clears the value of the "min_deposit_amount" field.
func (u *FbmCrowdFundingUpsert) ClearMinDepositAmount() *FbmCrowdFundingUpsert {
	u.SetNull(fbmcrowdfunding.FieldMinDepositAmount)
	return u
}

// SetDeliveryAt sets the "delivery_at" field.
func (u *FbmCrowdFundingUpsert) SetDeliveryAt(v uint32) *FbmCrowdFundingUpsert {
	u.Set(fbmcrowdfunding.FieldDeliveryAt, v)
	return u
}

// UpdateDeliveryAt sets the "delivery_at" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsert) UpdateDeliveryAt() *FbmCrowdFundingUpsert {
	u.SetExcluded(fbmcrowdfunding.FieldDeliveryAt)
	return u
}

// AddDeliveryAt adds v to the "delivery_at" field.
func (u *FbmCrowdFundingUpsert) AddDeliveryAt(v uint32) *FbmCrowdFundingUpsert {
	u.Add(fbmcrowdfunding.FieldDeliveryAt, v)
	return u
}

// ClearDeliveryAt clears the value of the "delivery_at" field.
func (u *FbmCrowdFundingUpsert) ClearDeliveryAt() *FbmCrowdFundingUpsert {
	u.SetNull(fbmcrowdfunding.FieldDeliveryAt)
	return u
}

// SetTargetAmount sets the "target_amount" field.
func (u *FbmCrowdFundingUpsert) SetTargetAmount(v decimal.Decimal) *FbmCrowdFundingUpsert {
	u.Set(fbmcrowdfunding.FieldTargetAmount, v)
	return u
}

// UpdateTargetAmount sets the "target_amount" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsert) UpdateTargetAmount() *FbmCrowdFundingUpsert {
	u.SetExcluded(fbmcrowdfunding.FieldTargetAmount)
	return u
}

// ClearTargetAmount clears the value of the "target_amount" field.
func (u *FbmCrowdFundingUpsert) ClearTargetAmount() *FbmCrowdFundingUpsert {
	u.SetNull(fbmcrowdfunding.FieldTargetAmount)
	return u
}

// SetDepositStartAt sets the "deposit_start_at" field.
func (u *FbmCrowdFundingUpsert) SetDepositStartAt(v uint32) *FbmCrowdFundingUpsert {
	u.Set(fbmcrowdfunding.FieldDepositStartAt, v)
	return u
}

// UpdateDepositStartAt sets the "deposit_start_at" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsert) UpdateDepositStartAt() *FbmCrowdFundingUpsert {
	u.SetExcluded(fbmcrowdfunding.FieldDepositStartAt)
	return u
}

// AddDepositStartAt adds v to the "deposit_start_at" field.
func (u *FbmCrowdFundingUpsert) AddDepositStartAt(v uint32) *FbmCrowdFundingUpsert {
	u.Add(fbmcrowdfunding.FieldDepositStartAt, v)
	return u
}

// ClearDepositStartAt clears the value of the "deposit_start_at" field.
func (u *FbmCrowdFundingUpsert) ClearDepositStartAt() *FbmCrowdFundingUpsert {
	u.SetNull(fbmcrowdfunding.FieldDepositStartAt)
	return u
}

// SetDepositEndAt sets the "deposit_end_at" field.
func (u *FbmCrowdFundingUpsert) SetDepositEndAt(v uint32) *FbmCrowdFundingUpsert {
	u.Set(fbmcrowdfunding.FieldDepositEndAt, v)
	return u
}

// UpdateDepositEndAt sets the "deposit_end_at" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsert) UpdateDepositEndAt() *FbmCrowdFundingUpsert {
	u.SetExcluded(fbmcrowdfunding.FieldDepositEndAt)
	return u
}

// AddDepositEndAt adds v to the "deposit_end_at" field.
func (u *FbmCrowdFundingUpsert) AddDepositEndAt(v uint32) *FbmCrowdFundingUpsert {
	u.Add(fbmcrowdfunding.FieldDepositEndAt, v)
	return u
}

// ClearDepositEndAt clears the value of the "deposit_end_at" field.
func (u *FbmCrowdFundingUpsert) ClearDepositEndAt() *FbmCrowdFundingUpsert {
	u.SetNull(fbmcrowdfunding.FieldDepositEndAt)
	return u
}

// SetContractAddress sets the "contract_address" field.
func (u *FbmCrowdFundingUpsert) SetContractAddress(v string) *FbmCrowdFundingUpsert {
	u.Set(fbmcrowdfunding.FieldContractAddress, v)
	return u
}

// UpdateContractAddress sets the "contract_address" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsert) UpdateContractAddress() *FbmCrowdFundingUpsert {
	u.SetExcluded(fbmcrowdfunding.FieldContractAddress)
	return u
}

// ClearContractAddress clears the value of the "contract_address" field.
func (u *FbmCrowdFundingUpsert) ClearContractAddress() *FbmCrowdFundingUpsert {
	u.SetNull(fbmcrowdfunding.FieldContractAddress)
	return u
}

// SetDepositCoinTypeID sets the "deposit_coin_type_id" field.
func (u *FbmCrowdFundingUpsert) SetDepositCoinTypeID(v uuid.UUID) *FbmCrowdFundingUpsert {
	u.Set(fbmcrowdfunding.FieldDepositCoinTypeID, v)
	return u
}

// UpdateDepositCoinTypeID sets the "deposit_coin_type_id" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsert) UpdateDepositCoinTypeID() *FbmCrowdFundingUpsert {
	u.SetExcluded(fbmcrowdfunding.FieldDepositCoinTypeID)
	return u
}

// ClearDepositCoinTypeID clears the value of the "deposit_coin_type_id" field.
func (u *FbmCrowdFundingUpsert) ClearDepositCoinTypeID() *FbmCrowdFundingUpsert {
	u.SetNull(fbmcrowdfunding.FieldDepositCoinTypeID)
	return u
}

// SetRedeemable sets the "redeemable" field.
func (u *FbmCrowdFundingUpsert) SetRedeemable(v bool) *FbmCrowdFundingUpsert {
	u.Set(fbmcrowdfunding.FieldRedeemable, v)
	return u
}

// UpdateRedeemable sets the "redeemable" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsert) UpdateRedeemable() *FbmCrowdFundingUpsert {
	u.SetExcluded(fbmcrowdfunding.FieldRedeemable)
	return u
}

// ClearRedeemable clears the value of the "redeemable" field.
func (u *FbmCrowdFundingUpsert) ClearRedeemable() *FbmCrowdFundingUpsert {
	u.SetNull(fbmcrowdfunding.FieldRedeemable)
	return u
}

// SetRedeemDelayHours sets the "redeem_delay_hours" field.
func (u *FbmCrowdFundingUpsert) SetRedeemDelayHours(v uint32) *FbmCrowdFundingUpsert {
	u.Set(fbmcrowdfunding.FieldRedeemDelayHours, v)
	return u
}

// UpdateRedeemDelayHours sets the "redeem_delay_hours" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsert) UpdateRedeemDelayHours() *FbmCrowdFundingUpsert {
	u.SetExcluded(fbmcrowdfunding.FieldRedeemDelayHours)
	return u
}

// AddRedeemDelayHours adds v to the "redeem_delay_hours" field.
func (u *FbmCrowdFundingUpsert) AddRedeemDelayHours(v uint32) *FbmCrowdFundingUpsert {
	u.Add(fbmcrowdfunding.FieldRedeemDelayHours, v)
	return u
}

// ClearRedeemDelayHours clears the value of the "redeem_delay_hours" field.
func (u *FbmCrowdFundingUpsert) ClearRedeemDelayHours() *FbmCrowdFundingUpsert {
	u.SetNull(fbmcrowdfunding.FieldRedeemDelayHours)
	return u
}

// SetDurationDisplayType sets the "duration_display_type" field.
func (u *FbmCrowdFundingUpsert) SetDurationDisplayType(v string) *FbmCrowdFundingUpsert {
	u.Set(fbmcrowdfunding.FieldDurationDisplayType, v)
	return u
}

// UpdateDurationDisplayType sets the "duration_display_type" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsert) UpdateDurationDisplayType() *FbmCrowdFundingUpsert {
	u.SetExcluded(fbmcrowdfunding.FieldDurationDisplayType)
	return u
}

// ClearDurationDisplayType clears the value of the "duration_display_type" field.
func (u *FbmCrowdFundingUpsert) ClearDurationDisplayType() *FbmCrowdFundingUpsert {
	u.SetNull(fbmcrowdfunding.FieldDurationDisplayType)
	return u
}

// SetDurationSeconds sets the "duration_seconds" field.
func (u *FbmCrowdFundingUpsert) SetDurationSeconds(v uint32) *FbmCrowdFundingUpsert {
	u.Set(fbmcrowdfunding.FieldDurationSeconds, v)
	return u
}

// UpdateDurationSeconds sets the "duration_seconds" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsert) UpdateDurationSeconds() *FbmCrowdFundingUpsert {
	u.SetExcluded(fbmcrowdfunding.FieldDurationSeconds)
	return u
}

// AddDurationSeconds adds v to the "duration_seconds" field.
func (u *FbmCrowdFundingUpsert) AddDurationSeconds(v uint32) *FbmCrowdFundingUpsert {
	u.Add(fbmcrowdfunding.FieldDurationSeconds, v)
	return u
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (u *FbmCrowdFundingUpsert) ClearDurationSeconds() *FbmCrowdFundingUpsert {
	u.SetNull(fbmcrowdfunding.FieldDurationSeconds)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.FbmCrowdFunding.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(fbmcrowdfunding.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FbmCrowdFundingUpsertOne) UpdateNewValues() *FbmCrowdFundingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(fbmcrowdfunding.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FbmCrowdFunding.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FbmCrowdFundingUpsertOne) Ignore() *FbmCrowdFundingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FbmCrowdFundingUpsertOne) DoNothing() *FbmCrowdFundingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FbmCrowdFundingCreate.OnConflict
// documentation for more info.
func (u *FbmCrowdFundingUpsertOne) Update(set func(*FbmCrowdFundingUpsert)) *FbmCrowdFundingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FbmCrowdFundingUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *FbmCrowdFundingUpsertOne) SetEntID(v uuid.UUID) *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsertOne) UpdateEntID() *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.UpdateEntID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *FbmCrowdFundingUpsertOne) SetGoodID(v uuid.UUID) *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsertOne) UpdateGoodID() *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *FbmCrowdFundingUpsertOne) ClearGoodID() *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.ClearGoodID()
	})
}

// SetMinDepositAmount sets the "min_deposit_amount" field.
func (u *FbmCrowdFundingUpsertOne) SetMinDepositAmount(v decimal.Decimal) *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.SetMinDepositAmount(v)
	})
}

// UpdateMinDepositAmount sets the "min_deposit_amount" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsertOne) UpdateMinDepositAmount() *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.UpdateMinDepositAmount()
	})
}

// ClearMinDepositAmount clears the value of the "min_deposit_amount" field.
func (u *FbmCrowdFundingUpsertOne) ClearMinDepositAmount() *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.ClearMinDepositAmount()
	})
}

// SetDeliveryAt sets the "delivery_at" field.
func (u *FbmCrowdFundingUpsertOne) SetDeliveryAt(v uint32) *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.SetDeliveryAt(v)
	})
}

// AddDeliveryAt adds v to the "delivery_at" field.
func (u *FbmCrowdFundingUpsertOne) AddDeliveryAt(v uint32) *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.AddDeliveryAt(v)
	})
}

// UpdateDeliveryAt sets the "delivery_at" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsertOne) UpdateDeliveryAt() *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.UpdateDeliveryAt()
	})
}

// ClearDeliveryAt clears the value of the "delivery_at" field.
func (u *FbmCrowdFundingUpsertOne) ClearDeliveryAt() *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.ClearDeliveryAt()
	})
}

// SetTargetAmount sets the "target_amount" field.
func (u *FbmCrowdFundingUpsertOne) SetTargetAmount(v decimal.Decimal) *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.SetTargetAmount(v)
	})
}

// UpdateTargetAmount sets the "target_amount" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsertOne) UpdateTargetAmount() *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.UpdateTargetAmount()
	})
}

// ClearTargetAmount clears the value of the "target_amount" field.
func (u *FbmCrowdFundingUpsertOne) ClearTargetAmount() *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.ClearTargetAmount()
	})
}

// SetDepositStartAt sets the "deposit_start_at" field.
func (u *FbmCrowdFundingUpsertOne) SetDepositStartAt(v uint32) *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.SetDepositStartAt(v)
	})
}

// AddDepositStartAt adds v to the "deposit_start_at" field.
func (u *FbmCrowdFundingUpsertOne) AddDepositStartAt(v uint32) *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.AddDepositStartAt(v)
	})
}

// UpdateDepositStartAt sets the "deposit_start_at" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsertOne) UpdateDepositStartAt() *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.UpdateDepositStartAt()
	})
}

// ClearDepositStartAt clears the value of the "deposit_start_at" field.
func (u *FbmCrowdFundingUpsertOne) ClearDepositStartAt() *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.ClearDepositStartAt()
	})
}

// SetDepositEndAt sets the "deposit_end_at" field.
func (u *FbmCrowdFundingUpsertOne) SetDepositEndAt(v uint32) *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.SetDepositEndAt(v)
	})
}

// AddDepositEndAt adds v to the "deposit_end_at" field.
func (u *FbmCrowdFundingUpsertOne) AddDepositEndAt(v uint32) *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.AddDepositEndAt(v)
	})
}

// UpdateDepositEndAt sets the "deposit_end_at" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsertOne) UpdateDepositEndAt() *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.UpdateDepositEndAt()
	})
}

// ClearDepositEndAt clears the value of the "deposit_end_at" field.
func (u *FbmCrowdFundingUpsertOne) ClearDepositEndAt() *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.ClearDepositEndAt()
	})
}

// SetContractAddress sets the "contract_address" field.
func (u *FbmCrowdFundingUpsertOne) SetContractAddress(v string) *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.SetContractAddress(v)
	})
}

// UpdateContractAddress sets the "contract_address" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsertOne) UpdateContractAddress() *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.UpdateContractAddress()
	})
}

// ClearContractAddress clears the value of the "contract_address" field.
func (u *FbmCrowdFundingUpsertOne) ClearContractAddress() *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.ClearContractAddress()
	})
}

// SetDepositCoinTypeID sets the "deposit_coin_type_id" field.
func (u *FbmCrowdFundingUpsertOne) SetDepositCoinTypeID(v uuid.UUID) *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.SetDepositCoinTypeID(v)
	})
}

// UpdateDepositCoinTypeID sets the "deposit_coin_type_id" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsertOne) UpdateDepositCoinTypeID() *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.UpdateDepositCoinTypeID()
	})
}

// ClearDepositCoinTypeID clears the value of the "deposit_coin_type_id" field.
func (u *FbmCrowdFundingUpsertOne) ClearDepositCoinTypeID() *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.ClearDepositCoinTypeID()
	})
}

// SetRedeemable sets the "redeemable" field.
func (u *FbmCrowdFundingUpsertOne) SetRedeemable(v bool) *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.SetRedeemable(v)
	})
}

// UpdateRedeemable sets the "redeemable" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsertOne) UpdateRedeemable() *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.UpdateRedeemable()
	})
}

// ClearRedeemable clears the value of the "redeemable" field.
func (u *FbmCrowdFundingUpsertOne) ClearRedeemable() *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.ClearRedeemable()
	})
}

// SetRedeemDelayHours sets the "redeem_delay_hours" field.
func (u *FbmCrowdFundingUpsertOne) SetRedeemDelayHours(v uint32) *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.SetRedeemDelayHours(v)
	})
}

// AddRedeemDelayHours adds v to the "redeem_delay_hours" field.
func (u *FbmCrowdFundingUpsertOne) AddRedeemDelayHours(v uint32) *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.AddRedeemDelayHours(v)
	})
}

// UpdateRedeemDelayHours sets the "redeem_delay_hours" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsertOne) UpdateRedeemDelayHours() *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.UpdateRedeemDelayHours()
	})
}

// ClearRedeemDelayHours clears the value of the "redeem_delay_hours" field.
func (u *FbmCrowdFundingUpsertOne) ClearRedeemDelayHours() *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.ClearRedeemDelayHours()
	})
}

// SetDurationDisplayType sets the "duration_display_type" field.
func (u *FbmCrowdFundingUpsertOne) SetDurationDisplayType(v string) *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.SetDurationDisplayType(v)
	})
}

// UpdateDurationDisplayType sets the "duration_display_type" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsertOne) UpdateDurationDisplayType() *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.UpdateDurationDisplayType()
	})
}

// ClearDurationDisplayType clears the value of the "duration_display_type" field.
func (u *FbmCrowdFundingUpsertOne) ClearDurationDisplayType() *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.ClearDurationDisplayType()
	})
}

// SetDurationSeconds sets the "duration_seconds" field.
func (u *FbmCrowdFundingUpsertOne) SetDurationSeconds(v uint32) *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.SetDurationSeconds(v)
	})
}

// AddDurationSeconds adds v to the "duration_seconds" field.
func (u *FbmCrowdFundingUpsertOne) AddDurationSeconds(v uint32) *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.AddDurationSeconds(v)
	})
}

// UpdateDurationSeconds sets the "duration_seconds" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsertOne) UpdateDurationSeconds() *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.UpdateDurationSeconds()
	})
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (u *FbmCrowdFundingUpsertOne) ClearDurationSeconds() *FbmCrowdFundingUpsertOne {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.ClearDurationSeconds()
	})
}

// Exec executes the query.
func (u *FbmCrowdFundingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for FbmCrowdFundingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FbmCrowdFundingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FbmCrowdFundingUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FbmCrowdFundingUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FbmCrowdFundingCreateBulk is the builder for creating many FbmCrowdFunding entities in bulk.
type FbmCrowdFundingCreateBulk struct {
	config
	err      error
	builders []*FbmCrowdFundingCreate
	conflict []sql.ConflictOption
}

// Save creates the FbmCrowdFunding entities in the database.
func (fcfcb *FbmCrowdFundingCreateBulk) Save(ctx context.Context) ([]*FbmCrowdFunding, error) {
	if fcfcb.err != nil {
		return nil, fcfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcfcb.builders))
	nodes := make([]*FbmCrowdFunding, len(fcfcb.builders))
	mutators := make([]Mutator, len(fcfcb.builders))
	for i := range fcfcb.builders {
		func(i int, root context.Context) {
			builder := fcfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FbmCrowdFundingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcfcb *FbmCrowdFundingCreateBulk) SaveX(ctx context.Context) []*FbmCrowdFunding {
	v, err := fcfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcfcb *FbmCrowdFundingCreateBulk) Exec(ctx context.Context) error {
	_, err := fcfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcfcb *FbmCrowdFundingCreateBulk) ExecX(ctx context.Context) {
	if err := fcfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FbmCrowdFunding.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FbmCrowdFundingUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (fcfcb *FbmCrowdFundingCreateBulk) OnConflict(opts ...sql.ConflictOption) *FbmCrowdFundingUpsertBulk {
	fcfcb.conflict = opts
	return &FbmCrowdFundingUpsertBulk{
		create: fcfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FbmCrowdFunding.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcfcb *FbmCrowdFundingCreateBulk) OnConflictColumns(columns ...string) *FbmCrowdFundingUpsertBulk {
	fcfcb.conflict = append(fcfcb.conflict, sql.ConflictColumns(columns...))
	return &FbmCrowdFundingUpsertBulk{
		create: fcfcb,
	}
}

// FbmCrowdFundingUpsertBulk is the builder for "upsert"-ing
// a bulk of FbmCrowdFunding nodes.
type FbmCrowdFundingUpsertBulk struct {
	create *FbmCrowdFundingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FbmCrowdFunding.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(fbmcrowdfunding.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FbmCrowdFundingUpsertBulk) UpdateNewValues() *FbmCrowdFundingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(fbmcrowdfunding.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FbmCrowdFunding.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FbmCrowdFundingUpsertBulk) Ignore() *FbmCrowdFundingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FbmCrowdFundingUpsertBulk) DoNothing() *FbmCrowdFundingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FbmCrowdFundingCreateBulk.OnConflict
// documentation for more info.
func (u *FbmCrowdFundingUpsertBulk) Update(set func(*FbmCrowdFundingUpsert)) *FbmCrowdFundingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FbmCrowdFundingUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *FbmCrowdFundingUpsertBulk) SetEntID(v uuid.UUID) *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsertBulk) UpdateEntID() *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.UpdateEntID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *FbmCrowdFundingUpsertBulk) SetGoodID(v uuid.UUID) *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsertBulk) UpdateGoodID() *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *FbmCrowdFundingUpsertBulk) ClearGoodID() *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.ClearGoodID()
	})
}

// SetMinDepositAmount sets the "min_deposit_amount" field.
func (u *FbmCrowdFundingUpsertBulk) SetMinDepositAmount(v decimal.Decimal) *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.SetMinDepositAmount(v)
	})
}

// UpdateMinDepositAmount sets the "min_deposit_amount" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsertBulk) UpdateMinDepositAmount() *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.UpdateMinDepositAmount()
	})
}

// ClearMinDepositAmount clears the value of the "min_deposit_amount" field.
func (u *FbmCrowdFundingUpsertBulk) ClearMinDepositAmount() *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.ClearMinDepositAmount()
	})
}

// SetDeliveryAt sets the "delivery_at" field.
func (u *FbmCrowdFundingUpsertBulk) SetDeliveryAt(v uint32) *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.SetDeliveryAt(v)
	})
}

// AddDeliveryAt adds v to the "delivery_at" field.
func (u *FbmCrowdFundingUpsertBulk) AddDeliveryAt(v uint32) *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.AddDeliveryAt(v)
	})
}

// UpdateDeliveryAt sets the "delivery_at" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsertBulk) UpdateDeliveryAt() *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.UpdateDeliveryAt()
	})
}

// ClearDeliveryAt clears the value of the "delivery_at" field.
func (u *FbmCrowdFundingUpsertBulk) ClearDeliveryAt() *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.ClearDeliveryAt()
	})
}

// SetTargetAmount sets the "target_amount" field.
func (u *FbmCrowdFundingUpsertBulk) SetTargetAmount(v decimal.Decimal) *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.SetTargetAmount(v)
	})
}

// UpdateTargetAmount sets the "target_amount" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsertBulk) UpdateTargetAmount() *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.UpdateTargetAmount()
	})
}

// ClearTargetAmount clears the value of the "target_amount" field.
func (u *FbmCrowdFundingUpsertBulk) ClearTargetAmount() *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.ClearTargetAmount()
	})
}

// SetDepositStartAt sets the "deposit_start_at" field.
func (u *FbmCrowdFundingUpsertBulk) SetDepositStartAt(v uint32) *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.SetDepositStartAt(v)
	})
}

// AddDepositStartAt adds v to the "deposit_start_at" field.
func (u *FbmCrowdFundingUpsertBulk) AddDepositStartAt(v uint32) *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.AddDepositStartAt(v)
	})
}

// UpdateDepositStartAt sets the "deposit_start_at" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsertBulk) UpdateDepositStartAt() *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.UpdateDepositStartAt()
	})
}

// ClearDepositStartAt clears the value of the "deposit_start_at" field.
func (u *FbmCrowdFundingUpsertBulk) ClearDepositStartAt() *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.ClearDepositStartAt()
	})
}

// SetDepositEndAt sets the "deposit_end_at" field.
func (u *FbmCrowdFundingUpsertBulk) SetDepositEndAt(v uint32) *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.SetDepositEndAt(v)
	})
}

// AddDepositEndAt adds v to the "deposit_end_at" field.
func (u *FbmCrowdFundingUpsertBulk) AddDepositEndAt(v uint32) *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.AddDepositEndAt(v)
	})
}

// UpdateDepositEndAt sets the "deposit_end_at" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsertBulk) UpdateDepositEndAt() *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.UpdateDepositEndAt()
	})
}

// ClearDepositEndAt clears the value of the "deposit_end_at" field.
func (u *FbmCrowdFundingUpsertBulk) ClearDepositEndAt() *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.ClearDepositEndAt()
	})
}

// SetContractAddress sets the "contract_address" field.
func (u *FbmCrowdFundingUpsertBulk) SetContractAddress(v string) *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.SetContractAddress(v)
	})
}

// UpdateContractAddress sets the "contract_address" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsertBulk) UpdateContractAddress() *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.UpdateContractAddress()
	})
}

// ClearContractAddress clears the value of the "contract_address" field.
func (u *FbmCrowdFundingUpsertBulk) ClearContractAddress() *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.ClearContractAddress()
	})
}

// SetDepositCoinTypeID sets the "deposit_coin_type_id" field.
func (u *FbmCrowdFundingUpsertBulk) SetDepositCoinTypeID(v uuid.UUID) *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.SetDepositCoinTypeID(v)
	})
}

// UpdateDepositCoinTypeID sets the "deposit_coin_type_id" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsertBulk) UpdateDepositCoinTypeID() *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.UpdateDepositCoinTypeID()
	})
}

// ClearDepositCoinTypeID clears the value of the "deposit_coin_type_id" field.
func (u *FbmCrowdFundingUpsertBulk) ClearDepositCoinTypeID() *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.ClearDepositCoinTypeID()
	})
}

// SetRedeemable sets the "redeemable" field.
func (u *FbmCrowdFundingUpsertBulk) SetRedeemable(v bool) *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.SetRedeemable(v)
	})
}

// UpdateRedeemable sets the "redeemable" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsertBulk) UpdateRedeemable() *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.UpdateRedeemable()
	})
}

// ClearRedeemable clears the value of the "redeemable" field.
func (u *FbmCrowdFundingUpsertBulk) ClearRedeemable() *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.ClearRedeemable()
	})
}

// SetRedeemDelayHours sets the "redeem_delay_hours" field.
func (u *FbmCrowdFundingUpsertBulk) SetRedeemDelayHours(v uint32) *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.SetRedeemDelayHours(v)
	})
}

// AddRedeemDelayHours adds v to the "redeem_delay_hours" field.
func (u *FbmCrowdFundingUpsertBulk) AddRedeemDelayHours(v uint32) *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.AddRedeemDelayHours(v)
	})
}

// UpdateRedeemDelayHours sets the "redeem_delay_hours" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsertBulk) UpdateRedeemDelayHours() *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.UpdateRedeemDelayHours()
	})
}

// ClearRedeemDelayHours clears the value of the "redeem_delay_hours" field.
func (u *FbmCrowdFundingUpsertBulk) ClearRedeemDelayHours() *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.ClearRedeemDelayHours()
	})
}

// SetDurationDisplayType sets the "duration_display_type" field.
func (u *FbmCrowdFundingUpsertBulk) SetDurationDisplayType(v string) *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.SetDurationDisplayType(v)
	})
}

// UpdateDurationDisplayType sets the "duration_display_type" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsertBulk) UpdateDurationDisplayType() *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.UpdateDurationDisplayType()
	})
}

// ClearDurationDisplayType clears the value of the "duration_display_type" field.
func (u *FbmCrowdFundingUpsertBulk) ClearDurationDisplayType() *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.ClearDurationDisplayType()
	})
}

// SetDurationSeconds sets the "duration_seconds" field.
func (u *FbmCrowdFundingUpsertBulk) SetDurationSeconds(v uint32) *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.SetDurationSeconds(v)
	})
}

// AddDurationSeconds adds v to the "duration_seconds" field.
func (u *FbmCrowdFundingUpsertBulk) AddDurationSeconds(v uint32) *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.AddDurationSeconds(v)
	})
}

// UpdateDurationSeconds sets the "duration_seconds" field to the value that was provided on create.
func (u *FbmCrowdFundingUpsertBulk) UpdateDurationSeconds() *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.UpdateDurationSeconds()
	})
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (u *FbmCrowdFundingUpsertBulk) ClearDurationSeconds() *FbmCrowdFundingUpsertBulk {
	return u.Update(func(s *FbmCrowdFundingUpsert) {
		s.ClearDurationSeconds()
	})
}

// Exec executes the query.
func (u *FbmCrowdFundingUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the FbmCrowdFundingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for FbmCrowdFundingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FbmCrowdFundingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

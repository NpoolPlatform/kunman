// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/good"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// Good is the model entity for the Good schema.
type Good struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// DeviceInfoID holds the value of the "device_info_id" field.
	DeviceInfoID uuid.UUID `json:"device_info_id,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
	// InheritFromGoodID holds the value of the "inherit_from_good_id" field.
	InheritFromGoodID uuid.UUID `json:"inherit_from_good_id,omitempty"`
	// VendorLocationID holds the value of the "vendor_location_id" field.
	VendorLocationID uuid.UUID `json:"vendor_location_id,omitempty"`
	// UnitPrice holds the value of the "unit_price" field.
	UnitPrice decimal.Decimal `json:"unit_price,omitempty"`
	// BenefitType holds the value of the "benefit_type" field.
	BenefitType string `json:"benefit_type,omitempty"`
	// GoodType holds the value of the "good_type" field.
	GoodType string `json:"good_type,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Unit holds the value of the "unit" field.
	Unit string `json:"unit,omitempty"`
	// QuantityUnit holds the value of the "quantity_unit" field.
	QuantityUnit string `json:"quantity_unit,omitempty"`
	// UnitAmount holds the value of the "unit_amount" field.
	UnitAmount int32 `json:"unit_amount,omitempty"`
	// QuantityUnitAmount holds the value of the "quantity_unit_amount" field.
	QuantityUnitAmount decimal.Decimal `json:"quantity_unit_amount,omitempty"`
	// DeliveryAt holds the value of the "delivery_at" field.
	DeliveryAt uint32 `json:"delivery_at,omitempty"`
	// StartAt holds the value of the "start_at" field.
	StartAt uint32 `json:"start_at,omitempty"`
	// StartMode holds the value of the "start_mode" field.
	StartMode string `json:"start_mode,omitempty"`
	// TestOnly holds the value of the "test_only" field.
	TestOnly bool `json:"test_only,omitempty"`
	// BenefitIntervalHours holds the value of the "benefit_interval_hours" field.
	BenefitIntervalHours uint32 `json:"benefit_interval_hours,omitempty"`
	// UnitLockDeposit holds the value of the "unit_lock_deposit" field.
	UnitLockDeposit decimal.Decimal `json:"unit_lock_deposit,omitempty"`
	// UnitType holds the value of the "unit_type" field.
	UnitType string `json:"unit_type,omitempty"`
	// QuantityCalculateType holds the value of the "quantity_calculate_type" field.
	QuantityCalculateType string `json:"quantity_calculate_type,omitempty"`
	// DurationType holds the value of the "duration_type" field.
	DurationType string `json:"duration_type,omitempty"`
	// DurationCalculateType holds the value of the "duration_calculate_type" field.
	DurationCalculateType string `json:"duration_calculate_type,omitempty"`
	// SettlementType holds the value of the "settlement_type" field.
	SettlementType string `json:"settlement_type,omitempty"`
	selectValues   sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Good) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case good.FieldUnitPrice, good.FieldQuantityUnitAmount, good.FieldUnitLockDeposit:
			values[i] = new(decimal.Decimal)
		case good.FieldTestOnly:
			values[i] = new(sql.NullBool)
		case good.FieldID, good.FieldUnitAmount, good.FieldDeliveryAt, good.FieldStartAt, good.FieldBenefitIntervalHours:
			values[i] = new(sql.NullInt64)
		case good.FieldBenefitType, good.FieldGoodType, good.FieldTitle, good.FieldUnit, good.FieldQuantityUnit, good.FieldStartMode, good.FieldUnitType, good.FieldQuantityCalculateType, good.FieldDurationType, good.FieldDurationCalculateType, good.FieldSettlementType:
			values[i] = new(sql.NullString)
		case good.FieldEntID, good.FieldDeviceInfoID, good.FieldCoinTypeID, good.FieldInheritFromGoodID, good.FieldVendorLocationID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Good fields.
func (_go *Good) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case good.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_go.ID = uint32(value.Int64)
		case good.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				_go.EntID = *value
			}
		case good.FieldDeviceInfoID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field device_info_id", values[i])
			} else if value != nil {
				_go.DeviceInfoID = *value
			}
		case good.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				_go.CoinTypeID = *value
			}
		case good.FieldInheritFromGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field inherit_from_good_id", values[i])
			} else if value != nil {
				_go.InheritFromGoodID = *value
			}
		case good.FieldVendorLocationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field vendor_location_id", values[i])
			} else if value != nil {
				_go.VendorLocationID = *value
			}
		case good.FieldUnitPrice:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field unit_price", values[i])
			} else if value != nil {
				_go.UnitPrice = *value
			}
		case good.FieldBenefitType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field benefit_type", values[i])
			} else if value.Valid {
				_go.BenefitType = value.String
			}
		case good.FieldGoodType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field good_type", values[i])
			} else if value.Valid {
				_go.GoodType = value.String
			}
		case good.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				_go.Title = value.String
			}
		case good.FieldUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit", values[i])
			} else if value.Valid {
				_go.Unit = value.String
			}
		case good.FieldQuantityUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field quantity_unit", values[i])
			} else if value.Valid {
				_go.QuantityUnit = value.String
			}
		case good.FieldUnitAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field unit_amount", values[i])
			} else if value.Valid {
				_go.UnitAmount = int32(value.Int64)
			}
		case good.FieldQuantityUnitAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field quantity_unit_amount", values[i])
			} else if value != nil {
				_go.QuantityUnitAmount = *value
			}
		case good.FieldDeliveryAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_at", values[i])
			} else if value.Valid {
				_go.DeliveryAt = uint32(value.Int64)
			}
		case good.FieldStartAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				_go.StartAt = uint32(value.Int64)
			}
		case good.FieldStartMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field start_mode", values[i])
			} else if value.Valid {
				_go.StartMode = value.String
			}
		case good.FieldTestOnly:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field test_only", values[i])
			} else if value.Valid {
				_go.TestOnly = value.Bool
			}
		case good.FieldBenefitIntervalHours:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field benefit_interval_hours", values[i])
			} else if value.Valid {
				_go.BenefitIntervalHours = uint32(value.Int64)
			}
		case good.FieldUnitLockDeposit:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field unit_lock_deposit", values[i])
			} else if value != nil {
				_go.UnitLockDeposit = *value
			}
		case good.FieldUnitType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit_type", values[i])
			} else if value.Valid {
				_go.UnitType = value.String
			}
		case good.FieldQuantityCalculateType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field quantity_calculate_type", values[i])
			} else if value.Valid {
				_go.QuantityCalculateType = value.String
			}
		case good.FieldDurationType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field duration_type", values[i])
			} else if value.Valid {
				_go.DurationType = value.String
			}
		case good.FieldDurationCalculateType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field duration_calculate_type", values[i])
			} else if value.Valid {
				_go.DurationCalculateType = value.String
			}
		case good.FieldSettlementType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field settlement_type", values[i])
			} else if value.Valid {
				_go.SettlementType = value.String
			}
		default:
			_go.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Good.
// This includes values selected through modifiers, order, etc.
func (_go *Good) Value(name string) (ent.Value, error) {
	return _go.selectValues.Get(name)
}

// Update returns a builder for updating this Good.
// Note that you need to call Good.Unwrap() before calling this method if this Good
// was returned from a transaction, and the transaction was committed or rolled back.
func (_go *Good) Update() *GoodUpdateOne {
	return NewGoodClient(_go.config).UpdateOne(_go)
}

// Unwrap unwraps the Good entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_go *Good) Unwrap() *Good {
	_tx, ok := _go.config.driver.(*txDriver)
	if !ok {
		panic("generated: Good is not a transactional entity")
	}
	_go.config.driver = _tx.drv
	return _go
}

// String implements the fmt.Stringer.
func (_go *Good) String() string {
	var builder strings.Builder
	builder.WriteString("Good(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _go.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", _go.EntID))
	builder.WriteString(", ")
	builder.WriteString("device_info_id=")
	builder.WriteString(fmt.Sprintf("%v", _go.DeviceInfoID))
	builder.WriteString(", ")
	builder.WriteString("coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", _go.CoinTypeID))
	builder.WriteString(", ")
	builder.WriteString("inherit_from_good_id=")
	builder.WriteString(fmt.Sprintf("%v", _go.InheritFromGoodID))
	builder.WriteString(", ")
	builder.WriteString("vendor_location_id=")
	builder.WriteString(fmt.Sprintf("%v", _go.VendorLocationID))
	builder.WriteString(", ")
	builder.WriteString("unit_price=")
	builder.WriteString(fmt.Sprintf("%v", _go.UnitPrice))
	builder.WriteString(", ")
	builder.WriteString("benefit_type=")
	builder.WriteString(_go.BenefitType)
	builder.WriteString(", ")
	builder.WriteString("good_type=")
	builder.WriteString(_go.GoodType)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(_go.Title)
	builder.WriteString(", ")
	builder.WriteString("unit=")
	builder.WriteString(_go.Unit)
	builder.WriteString(", ")
	builder.WriteString("quantity_unit=")
	builder.WriteString(_go.QuantityUnit)
	builder.WriteString(", ")
	builder.WriteString("unit_amount=")
	builder.WriteString(fmt.Sprintf("%v", _go.UnitAmount))
	builder.WriteString(", ")
	builder.WriteString("quantity_unit_amount=")
	builder.WriteString(fmt.Sprintf("%v", _go.QuantityUnitAmount))
	builder.WriteString(", ")
	builder.WriteString("delivery_at=")
	builder.WriteString(fmt.Sprintf("%v", _go.DeliveryAt))
	builder.WriteString(", ")
	builder.WriteString("start_at=")
	builder.WriteString(fmt.Sprintf("%v", _go.StartAt))
	builder.WriteString(", ")
	builder.WriteString("start_mode=")
	builder.WriteString(_go.StartMode)
	builder.WriteString(", ")
	builder.WriteString("test_only=")
	builder.WriteString(fmt.Sprintf("%v", _go.TestOnly))
	builder.WriteString(", ")
	builder.WriteString("benefit_interval_hours=")
	builder.WriteString(fmt.Sprintf("%v", _go.BenefitIntervalHours))
	builder.WriteString(", ")
	builder.WriteString("unit_lock_deposit=")
	builder.WriteString(fmt.Sprintf("%v", _go.UnitLockDeposit))
	builder.WriteString(", ")
	builder.WriteString("unit_type=")
	builder.WriteString(_go.UnitType)
	builder.WriteString(", ")
	builder.WriteString("quantity_calculate_type=")
	builder.WriteString(_go.QuantityCalculateType)
	builder.WriteString(", ")
	builder.WriteString("duration_type=")
	builder.WriteString(_go.DurationType)
	builder.WriteString(", ")
	builder.WriteString("duration_calculate_type=")
	builder.WriteString(_go.DurationCalculateType)
	builder.WriteString(", ")
	builder.WriteString("settlement_type=")
	builder.WriteString(_go.SettlementType)
	builder.WriteByte(')')
	return builder.String()
}

// Goods is a parsable slice of Good.
type Goods []*Good

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/subscriptiononeshot"
)

// SubscriptionOneShotDelete is the builder for deleting a SubscriptionOneShot entity.
type SubscriptionOneShotDelete struct {
	config
	hooks    []Hook
	mutation *SubscriptionOneShotMutation
}

// Where appends a list predicates to the SubscriptionOneShotDelete builder.
func (sosd *SubscriptionOneShotDelete) Where(ps ...predicate.SubscriptionOneShot) *SubscriptionOneShotDelete {
	sosd.mutation.Where(ps...)
	return sosd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sosd *SubscriptionOneShotDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sosd.sqlExec, sosd.mutation, sosd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sosd *SubscriptionOneShotDelete) ExecX(ctx context.Context) int {
	n, err := sosd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sosd *SubscriptionOneShotDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(subscriptiononeshot.Table, sqlgraph.NewFieldSpec(subscriptiononeshot.FieldID, field.TypeUint32))
	if ps := sosd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sosd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sosd.mutation.done = true
	return affected, err
}

// SubscriptionOneShotDeleteOne is the builder for deleting a single SubscriptionOneShot entity.
type SubscriptionOneShotDeleteOne struct {
	sosd *SubscriptionOneShotDelete
}

// Where appends a list predicates to the SubscriptionOneShotDelete builder.
func (sosdo *SubscriptionOneShotDeleteOne) Where(ps ...predicate.SubscriptionOneShot) *SubscriptionOneShotDeleteOne {
	sosdo.sosd.mutation.Where(ps...)
	return sosdo
}

// Exec executes the deletion query.
func (sosdo *SubscriptionOneShotDeleteOne) Exec(ctx context.Context) error {
	n, err := sosdo.sosd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{subscriptiononeshot.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sosdo *SubscriptionOneShotDeleteOne) ExecX(ctx context.Context) {
	if err := sosdo.Exec(ctx); err != nil {
		panic(err)
	}
}

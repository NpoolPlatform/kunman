// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appsubscription"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppSubscriptionCreate is the builder for creating a AppSubscription entity.
type AppSubscriptionCreate struct {
	config
	mutation *AppSubscriptionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (asc *AppSubscriptionCreate) SetEntID(u uuid.UUID) *AppSubscriptionCreate {
	asc.mutation.SetEntID(u)
	return asc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (asc *AppSubscriptionCreate) SetNillableEntID(u *uuid.UUID) *AppSubscriptionCreate {
	if u != nil {
		asc.SetEntID(*u)
	}
	return asc
}

// SetCreatedAt sets the "created_at" field.
func (asc *AppSubscriptionCreate) SetCreatedAt(u uint32) *AppSubscriptionCreate {
	asc.mutation.SetCreatedAt(u)
	return asc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asc *AppSubscriptionCreate) SetNillableCreatedAt(u *uint32) *AppSubscriptionCreate {
	if u != nil {
		asc.SetCreatedAt(*u)
	}
	return asc
}

// SetUpdatedAt sets the "updated_at" field.
func (asc *AppSubscriptionCreate) SetUpdatedAt(u uint32) *AppSubscriptionCreate {
	asc.mutation.SetUpdatedAt(u)
	return asc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (asc *AppSubscriptionCreate) SetNillableUpdatedAt(u *uint32) *AppSubscriptionCreate {
	if u != nil {
		asc.SetUpdatedAt(*u)
	}
	return asc
}

// SetDeletedAt sets the "deleted_at" field.
func (asc *AppSubscriptionCreate) SetDeletedAt(u uint32) *AppSubscriptionCreate {
	asc.mutation.SetDeletedAt(u)
	return asc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (asc *AppSubscriptionCreate) SetNillableDeletedAt(u *uint32) *AppSubscriptionCreate {
	if u != nil {
		asc.SetDeletedAt(*u)
	}
	return asc
}

// SetAppGoodID sets the "app_good_id" field.
func (asc *AppSubscriptionCreate) SetAppGoodID(u uuid.UUID) *AppSubscriptionCreate {
	asc.mutation.SetAppGoodID(u)
	return asc
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (asc *AppSubscriptionCreate) SetNillableAppGoodID(u *uuid.UUID) *AppSubscriptionCreate {
	if u != nil {
		asc.SetAppGoodID(*u)
	}
	return asc
}

// SetUsdPrice sets the "usd_price" field.
func (asc *AppSubscriptionCreate) SetUsdPrice(d decimal.Decimal) *AppSubscriptionCreate {
	asc.mutation.SetUsdPrice(d)
	return asc
}

// SetNillableUsdPrice sets the "usd_price" field if the given value is not nil.
func (asc *AppSubscriptionCreate) SetNillableUsdPrice(d *decimal.Decimal) *AppSubscriptionCreate {
	if d != nil {
		asc.SetUsdPrice(*d)
	}
	return asc
}

// SetID sets the "id" field.
func (asc *AppSubscriptionCreate) SetID(u uint32) *AppSubscriptionCreate {
	asc.mutation.SetID(u)
	return asc
}

// Mutation returns the AppSubscriptionMutation object of the builder.
func (asc *AppSubscriptionCreate) Mutation() *AppSubscriptionMutation {
	return asc.mutation
}

// Save creates the AppSubscription in the database.
func (asc *AppSubscriptionCreate) Save(ctx context.Context) (*AppSubscription, error) {
	asc.defaults()
	return withHooks(ctx, asc.sqlSave, asc.mutation, asc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (asc *AppSubscriptionCreate) SaveX(ctx context.Context) *AppSubscription {
	v, err := asc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asc *AppSubscriptionCreate) Exec(ctx context.Context) error {
	_, err := asc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asc *AppSubscriptionCreate) ExecX(ctx context.Context) {
	if err := asc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asc *AppSubscriptionCreate) defaults() {
	if _, ok := asc.mutation.EntID(); !ok {
		v := appsubscription.DefaultEntID()
		asc.mutation.SetEntID(v)
	}
	if _, ok := asc.mutation.CreatedAt(); !ok {
		v := appsubscription.DefaultCreatedAt()
		asc.mutation.SetCreatedAt(v)
	}
	if _, ok := asc.mutation.UpdatedAt(); !ok {
		v := appsubscription.DefaultUpdatedAt()
		asc.mutation.SetUpdatedAt(v)
	}
	if _, ok := asc.mutation.DeletedAt(); !ok {
		v := appsubscription.DefaultDeletedAt()
		asc.mutation.SetDeletedAt(v)
	}
	if _, ok := asc.mutation.AppGoodID(); !ok {
		v := appsubscription.DefaultAppGoodID()
		asc.mutation.SetAppGoodID(v)
	}
	if _, ok := asc.mutation.UsdPrice(); !ok {
		v := appsubscription.DefaultUsdPrice
		asc.mutation.SetUsdPrice(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asc *AppSubscriptionCreate) check() error {
	if _, ok := asc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "AppSubscription.ent_id"`)}
	}
	if _, ok := asc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "AppSubscription.created_at"`)}
	}
	if _, ok := asc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "AppSubscription.updated_at"`)}
	}
	if _, ok := asc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "AppSubscription.deleted_at"`)}
	}
	return nil
}

func (asc *AppSubscriptionCreate) sqlSave(ctx context.Context) (*AppSubscription, error) {
	if err := asc.check(); err != nil {
		return nil, err
	}
	_node, _spec := asc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	asc.mutation.id = &_node.ID
	asc.mutation.done = true
	return _node, nil
}

func (asc *AppSubscriptionCreate) createSpec() (*AppSubscription, *sqlgraph.CreateSpec) {
	var (
		_node = &AppSubscription{config: asc.config}
		_spec = sqlgraph.NewCreateSpec(appsubscription.Table, sqlgraph.NewFieldSpec(appsubscription.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = asc.conflict
	if id, ok := asc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := asc.mutation.EntID(); ok {
		_spec.SetField(appsubscription.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := asc.mutation.CreatedAt(); ok {
		_spec.SetField(appsubscription.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := asc.mutation.UpdatedAt(); ok {
		_spec.SetField(appsubscription.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := asc.mutation.DeletedAt(); ok {
		_spec.SetField(appsubscription.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := asc.mutation.AppGoodID(); ok {
		_spec.SetField(appsubscription.FieldAppGoodID, field.TypeUUID, value)
		_node.AppGoodID = value
	}
	if value, ok := asc.mutation.UsdPrice(); ok {
		_spec.SetField(appsubscription.FieldUsdPrice, field.TypeOther, value)
		_node.UsdPrice = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppSubscription.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppSubscriptionUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (asc *AppSubscriptionCreate) OnConflict(opts ...sql.ConflictOption) *AppSubscriptionUpsertOne {
	asc.conflict = opts
	return &AppSubscriptionUpsertOne{
		create: asc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppSubscription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (asc *AppSubscriptionCreate) OnConflictColumns(columns ...string) *AppSubscriptionUpsertOne {
	asc.conflict = append(asc.conflict, sql.ConflictColumns(columns...))
	return &AppSubscriptionUpsertOne{
		create: asc,
	}
}

type (
	// AppSubscriptionUpsertOne is the builder for "upsert"-ing
	//  one AppSubscription node.
	AppSubscriptionUpsertOne struct {
		create *AppSubscriptionCreate
	}

	// AppSubscriptionUpsert is the "OnConflict" setter.
	AppSubscriptionUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *AppSubscriptionUpsert) SetEntID(v uuid.UUID) *AppSubscriptionUpsert {
	u.Set(appsubscription.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppSubscriptionUpsert) UpdateEntID() *AppSubscriptionUpsert {
	u.SetExcluded(appsubscription.FieldEntID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppSubscriptionUpsert) SetCreatedAt(v uint32) *AppSubscriptionUpsert {
	u.Set(appsubscription.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppSubscriptionUpsert) UpdateCreatedAt() *AppSubscriptionUpsert {
	u.SetExcluded(appsubscription.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppSubscriptionUpsert) AddCreatedAt(v uint32) *AppSubscriptionUpsert {
	u.Add(appsubscription.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppSubscriptionUpsert) SetUpdatedAt(v uint32) *AppSubscriptionUpsert {
	u.Set(appsubscription.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppSubscriptionUpsert) UpdateUpdatedAt() *AppSubscriptionUpsert {
	u.SetExcluded(appsubscription.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppSubscriptionUpsert) AddUpdatedAt(v uint32) *AppSubscriptionUpsert {
	u.Add(appsubscription.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppSubscriptionUpsert) SetDeletedAt(v uint32) *AppSubscriptionUpsert {
	u.Set(appsubscription.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppSubscriptionUpsert) UpdateDeletedAt() *AppSubscriptionUpsert {
	u.SetExcluded(appsubscription.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppSubscriptionUpsert) AddDeletedAt(v uint32) *AppSubscriptionUpsert {
	u.Add(appsubscription.FieldDeletedAt, v)
	return u
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppSubscriptionUpsert) SetAppGoodID(v uuid.UUID) *AppSubscriptionUpsert {
	u.Set(appsubscription.FieldAppGoodID, v)
	return u
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppSubscriptionUpsert) UpdateAppGoodID() *AppSubscriptionUpsert {
	u.SetExcluded(appsubscription.FieldAppGoodID)
	return u
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppSubscriptionUpsert) ClearAppGoodID() *AppSubscriptionUpsert {
	u.SetNull(appsubscription.FieldAppGoodID)
	return u
}

// SetUsdPrice sets the "usd_price" field.
func (u *AppSubscriptionUpsert) SetUsdPrice(v decimal.Decimal) *AppSubscriptionUpsert {
	u.Set(appsubscription.FieldUsdPrice, v)
	return u
}

// UpdateUsdPrice sets the "usd_price" field to the value that was provided on create.
func (u *AppSubscriptionUpsert) UpdateUsdPrice() *AppSubscriptionUpsert {
	u.SetExcluded(appsubscription.FieldUsdPrice)
	return u
}

// ClearUsdPrice clears the value of the "usd_price" field.
func (u *AppSubscriptionUpsert) ClearUsdPrice() *AppSubscriptionUpsert {
	u.SetNull(appsubscription.FieldUsdPrice)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppSubscription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appsubscription.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppSubscriptionUpsertOne) UpdateNewValues() *AppSubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appsubscription.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppSubscription.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppSubscriptionUpsertOne) Ignore() *AppSubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppSubscriptionUpsertOne) DoNothing() *AppSubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppSubscriptionCreate.OnConflict
// documentation for more info.
func (u *AppSubscriptionUpsertOne) Update(set func(*AppSubscriptionUpsert)) *AppSubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppSubscriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppSubscriptionUpsertOne) SetEntID(v uuid.UUID) *AppSubscriptionUpsertOne {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppSubscriptionUpsertOne) UpdateEntID() *AppSubscriptionUpsertOne {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AppSubscriptionUpsertOne) SetCreatedAt(v uint32) *AppSubscriptionUpsertOne {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppSubscriptionUpsertOne) AddCreatedAt(v uint32) *AppSubscriptionUpsertOne {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppSubscriptionUpsertOne) UpdateCreatedAt() *AppSubscriptionUpsertOne {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppSubscriptionUpsertOne) SetUpdatedAt(v uint32) *AppSubscriptionUpsertOne {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppSubscriptionUpsertOne) AddUpdatedAt(v uint32) *AppSubscriptionUpsertOne {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppSubscriptionUpsertOne) UpdateUpdatedAt() *AppSubscriptionUpsertOne {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppSubscriptionUpsertOne) SetDeletedAt(v uint32) *AppSubscriptionUpsertOne {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppSubscriptionUpsertOne) AddDeletedAt(v uint32) *AppSubscriptionUpsertOne {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppSubscriptionUpsertOne) UpdateDeletedAt() *AppSubscriptionUpsertOne {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppSubscriptionUpsertOne) SetAppGoodID(v uuid.UUID) *AppSubscriptionUpsertOne {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppSubscriptionUpsertOne) UpdateAppGoodID() *AppSubscriptionUpsertOne {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppSubscriptionUpsertOne) ClearAppGoodID() *AppSubscriptionUpsertOne {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.ClearAppGoodID()
	})
}

// SetUsdPrice sets the "usd_price" field.
func (u *AppSubscriptionUpsertOne) SetUsdPrice(v decimal.Decimal) *AppSubscriptionUpsertOne {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.SetUsdPrice(v)
	})
}

// UpdateUsdPrice sets the "usd_price" field to the value that was provided on create.
func (u *AppSubscriptionUpsertOne) UpdateUsdPrice() *AppSubscriptionUpsertOne {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.UpdateUsdPrice()
	})
}

// ClearUsdPrice clears the value of the "usd_price" field.
func (u *AppSubscriptionUpsertOne) ClearUsdPrice() *AppSubscriptionUpsertOne {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.ClearUsdPrice()
	})
}

// Exec executes the query.
func (u *AppSubscriptionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppSubscriptionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppSubscriptionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppSubscriptionUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppSubscriptionUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppSubscriptionCreateBulk is the builder for creating many AppSubscription entities in bulk.
type AppSubscriptionCreateBulk struct {
	config
	err      error
	builders []*AppSubscriptionCreate
	conflict []sql.ConflictOption
}

// Save creates the AppSubscription entities in the database.
func (ascb *AppSubscriptionCreateBulk) Save(ctx context.Context) ([]*AppSubscription, error) {
	if ascb.err != nil {
		return nil, ascb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ascb.builders))
	nodes := make([]*AppSubscription, len(ascb.builders))
	mutators := make([]Mutator, len(ascb.builders))
	for i := range ascb.builders {
		func(i int, root context.Context) {
			builder := ascb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppSubscriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ascb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ascb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ascb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ascb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ascb *AppSubscriptionCreateBulk) SaveX(ctx context.Context) []*AppSubscription {
	v, err := ascb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ascb *AppSubscriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := ascb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ascb *AppSubscriptionCreateBulk) ExecX(ctx context.Context) {
	if err := ascb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppSubscription.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppSubscriptionUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (ascb *AppSubscriptionCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppSubscriptionUpsertBulk {
	ascb.conflict = opts
	return &AppSubscriptionUpsertBulk{
		create: ascb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppSubscription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ascb *AppSubscriptionCreateBulk) OnConflictColumns(columns ...string) *AppSubscriptionUpsertBulk {
	ascb.conflict = append(ascb.conflict, sql.ConflictColumns(columns...))
	return &AppSubscriptionUpsertBulk{
		create: ascb,
	}
}

// AppSubscriptionUpsertBulk is the builder for "upsert"-ing
// a bulk of AppSubscription nodes.
type AppSubscriptionUpsertBulk struct {
	create *AppSubscriptionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppSubscription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appsubscription.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppSubscriptionUpsertBulk) UpdateNewValues() *AppSubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appsubscription.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppSubscription.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppSubscriptionUpsertBulk) Ignore() *AppSubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppSubscriptionUpsertBulk) DoNothing() *AppSubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppSubscriptionCreateBulk.OnConflict
// documentation for more info.
func (u *AppSubscriptionUpsertBulk) Update(set func(*AppSubscriptionUpsert)) *AppSubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppSubscriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppSubscriptionUpsertBulk) SetEntID(v uuid.UUID) *AppSubscriptionUpsertBulk {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppSubscriptionUpsertBulk) UpdateEntID() *AppSubscriptionUpsertBulk {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AppSubscriptionUpsertBulk) SetCreatedAt(v uint32) *AppSubscriptionUpsertBulk {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppSubscriptionUpsertBulk) AddCreatedAt(v uint32) *AppSubscriptionUpsertBulk {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppSubscriptionUpsertBulk) UpdateCreatedAt() *AppSubscriptionUpsertBulk {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppSubscriptionUpsertBulk) SetUpdatedAt(v uint32) *AppSubscriptionUpsertBulk {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppSubscriptionUpsertBulk) AddUpdatedAt(v uint32) *AppSubscriptionUpsertBulk {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppSubscriptionUpsertBulk) UpdateUpdatedAt() *AppSubscriptionUpsertBulk {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppSubscriptionUpsertBulk) SetDeletedAt(v uint32) *AppSubscriptionUpsertBulk {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppSubscriptionUpsertBulk) AddDeletedAt(v uint32) *AppSubscriptionUpsertBulk {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppSubscriptionUpsertBulk) UpdateDeletedAt() *AppSubscriptionUpsertBulk {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppSubscriptionUpsertBulk) SetAppGoodID(v uuid.UUID) *AppSubscriptionUpsertBulk {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppSubscriptionUpsertBulk) UpdateAppGoodID() *AppSubscriptionUpsertBulk {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppSubscriptionUpsertBulk) ClearAppGoodID() *AppSubscriptionUpsertBulk {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.ClearAppGoodID()
	})
}

// SetUsdPrice sets the "usd_price" field.
func (u *AppSubscriptionUpsertBulk) SetUsdPrice(v decimal.Decimal) *AppSubscriptionUpsertBulk {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.SetUsdPrice(v)
	})
}

// UpdateUsdPrice sets the "usd_price" field to the value that was provided on create.
func (u *AppSubscriptionUpsertBulk) UpdateUsdPrice() *AppSubscriptionUpsertBulk {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.UpdateUsdPrice()
	})
}

// ClearUsdPrice clears the value of the "usd_price" field.
func (u *AppSubscriptionUpsertBulk) ClearUsdPrice() *AppSubscriptionUpsertBulk {
	return u.Update(func(s *AppSubscriptionUpsert) {
		s.ClearUsdPrice()
	})
}

// Exec executes the query.
func (u *AppSubscriptionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the AppSubscriptionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppSubscriptionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppSubscriptionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

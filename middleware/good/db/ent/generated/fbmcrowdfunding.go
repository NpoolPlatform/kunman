// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/fbmcrowdfunding"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// FbmCrowdFunding is the model entity for the FbmCrowdFunding schema.
type FbmCrowdFunding struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// MinDepositAmount holds the value of the "min_deposit_amount" field.
	MinDepositAmount decimal.Decimal `json:"min_deposit_amount,omitempty"`
	// DeliveryAt holds the value of the "delivery_at" field.
	DeliveryAt uint32 `json:"delivery_at,omitempty"`
	// TargetAmount holds the value of the "target_amount" field.
	TargetAmount decimal.Decimal `json:"target_amount,omitempty"`
	// DepositStartAt holds the value of the "deposit_start_at" field.
	DepositStartAt uint32 `json:"deposit_start_at,omitempty"`
	// DepositEndAt holds the value of the "deposit_end_at" field.
	DepositEndAt uint32 `json:"deposit_end_at,omitempty"`
	// ContractAddress holds the value of the "contract_address" field.
	ContractAddress string `json:"contract_address,omitempty"`
	// DepositCoinTypeID holds the value of the "deposit_coin_type_id" field.
	DepositCoinTypeID uuid.UUID `json:"deposit_coin_type_id,omitempty"`
	// Redeemable holds the value of the "redeemable" field.
	Redeemable bool `json:"redeemable,omitempty"`
	// RedeemDelayHours holds the value of the "redeem_delay_hours" field.
	RedeemDelayHours uint32 `json:"redeem_delay_hours,omitempty"`
	// DurationDisplayType holds the value of the "duration_display_type" field.
	DurationDisplayType string `json:"duration_display_type,omitempty"`
	// DurationSeconds holds the value of the "duration_seconds" field.
	DurationSeconds uint32 `json:"duration_seconds,omitempty"`
	selectValues    sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FbmCrowdFunding) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fbmcrowdfunding.FieldMinDepositAmount, fbmcrowdfunding.FieldTargetAmount:
			values[i] = new(decimal.Decimal)
		case fbmcrowdfunding.FieldRedeemable:
			values[i] = new(sql.NullBool)
		case fbmcrowdfunding.FieldID, fbmcrowdfunding.FieldCreatedAt, fbmcrowdfunding.FieldUpdatedAt, fbmcrowdfunding.FieldDeletedAt, fbmcrowdfunding.FieldDeliveryAt, fbmcrowdfunding.FieldDepositStartAt, fbmcrowdfunding.FieldDepositEndAt, fbmcrowdfunding.FieldRedeemDelayHours, fbmcrowdfunding.FieldDurationSeconds:
			values[i] = new(sql.NullInt64)
		case fbmcrowdfunding.FieldContractAddress, fbmcrowdfunding.FieldDurationDisplayType:
			values[i] = new(sql.NullString)
		case fbmcrowdfunding.FieldEntID, fbmcrowdfunding.FieldGoodID, fbmcrowdfunding.FieldDepositCoinTypeID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FbmCrowdFunding fields.
func (fcf *FbmCrowdFunding) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fbmcrowdfunding.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fcf.ID = uint32(value.Int64)
		case fbmcrowdfunding.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				fcf.EntID = *value
			}
		case fbmcrowdfunding.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fcf.CreatedAt = uint32(value.Int64)
			}
		case fbmcrowdfunding.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fcf.UpdatedAt = uint32(value.Int64)
			}
		case fbmcrowdfunding.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				fcf.DeletedAt = uint32(value.Int64)
			}
		case fbmcrowdfunding.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				fcf.GoodID = *value
			}
		case fbmcrowdfunding.FieldMinDepositAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field min_deposit_amount", values[i])
			} else if value != nil {
				fcf.MinDepositAmount = *value
			}
		case fbmcrowdfunding.FieldDeliveryAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_at", values[i])
			} else if value.Valid {
				fcf.DeliveryAt = uint32(value.Int64)
			}
		case fbmcrowdfunding.FieldTargetAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field target_amount", values[i])
			} else if value != nil {
				fcf.TargetAmount = *value
			}
		case fbmcrowdfunding.FieldDepositStartAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deposit_start_at", values[i])
			} else if value.Valid {
				fcf.DepositStartAt = uint32(value.Int64)
			}
		case fbmcrowdfunding.FieldDepositEndAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deposit_end_at", values[i])
			} else if value.Valid {
				fcf.DepositEndAt = uint32(value.Int64)
			}
		case fbmcrowdfunding.FieldContractAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contract_address", values[i])
			} else if value.Valid {
				fcf.ContractAddress = value.String
			}
		case fbmcrowdfunding.FieldDepositCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field deposit_coin_type_id", values[i])
			} else if value != nil {
				fcf.DepositCoinTypeID = *value
			}
		case fbmcrowdfunding.FieldRedeemable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field redeemable", values[i])
			} else if value.Valid {
				fcf.Redeemable = value.Bool
			}
		case fbmcrowdfunding.FieldRedeemDelayHours:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field redeem_delay_hours", values[i])
			} else if value.Valid {
				fcf.RedeemDelayHours = uint32(value.Int64)
			}
		case fbmcrowdfunding.FieldDurationDisplayType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field duration_display_type", values[i])
			} else if value.Valid {
				fcf.DurationDisplayType = value.String
			}
		case fbmcrowdfunding.FieldDurationSeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_seconds", values[i])
			} else if value.Valid {
				fcf.DurationSeconds = uint32(value.Int64)
			}
		default:
			fcf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FbmCrowdFunding.
// This includes values selected through modifiers, order, etc.
func (fcf *FbmCrowdFunding) Value(name string) (ent.Value, error) {
	return fcf.selectValues.Get(name)
}

// Update returns a builder for updating this FbmCrowdFunding.
// Note that you need to call FbmCrowdFunding.Unwrap() before calling this method if this FbmCrowdFunding
// was returned from a transaction, and the transaction was committed or rolled back.
func (fcf *FbmCrowdFunding) Update() *FbmCrowdFundingUpdateOne {
	return NewFbmCrowdFundingClient(fcf.config).UpdateOne(fcf)
}

// Unwrap unwraps the FbmCrowdFunding entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fcf *FbmCrowdFunding) Unwrap() *FbmCrowdFunding {
	_tx, ok := fcf.config.driver.(*txDriver)
	if !ok {
		panic("generated: FbmCrowdFunding is not a transactional entity")
	}
	fcf.config.driver = _tx.drv
	return fcf
}

// String implements the fmt.Stringer.
func (fcf *FbmCrowdFunding) String() string {
	var builder strings.Builder
	builder.WriteString("FbmCrowdFunding(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fcf.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", fcf.EntID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", fcf.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", fcf.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", fcf.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", fcf.GoodID))
	builder.WriteString(", ")
	builder.WriteString("min_deposit_amount=")
	builder.WriteString(fmt.Sprintf("%v", fcf.MinDepositAmount))
	builder.WriteString(", ")
	builder.WriteString("delivery_at=")
	builder.WriteString(fmt.Sprintf("%v", fcf.DeliveryAt))
	builder.WriteString(", ")
	builder.WriteString("target_amount=")
	builder.WriteString(fmt.Sprintf("%v", fcf.TargetAmount))
	builder.WriteString(", ")
	builder.WriteString("deposit_start_at=")
	builder.WriteString(fmt.Sprintf("%v", fcf.DepositStartAt))
	builder.WriteString(", ")
	builder.WriteString("deposit_end_at=")
	builder.WriteString(fmt.Sprintf("%v", fcf.DepositEndAt))
	builder.WriteString(", ")
	builder.WriteString("contract_address=")
	builder.WriteString(fcf.ContractAddress)
	builder.WriteString(", ")
	builder.WriteString("deposit_coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", fcf.DepositCoinTypeID))
	builder.WriteString(", ")
	builder.WriteString("redeemable=")
	builder.WriteString(fmt.Sprintf("%v", fcf.Redeemable))
	builder.WriteString(", ")
	builder.WriteString("redeem_delay_hours=")
	builder.WriteString(fmt.Sprintf("%v", fcf.RedeemDelayHours))
	builder.WriteString(", ")
	builder.WriteString("duration_display_type=")
	builder.WriteString(fcf.DurationDisplayType)
	builder.WriteString(", ")
	builder.WriteString("duration_seconds=")
	builder.WriteString(fmt.Sprintf("%v", fcf.DurationSeconds))
	builder.WriteByte(')')
	return builder.String()
}

// FbmCrowdFundings is a parsable slice of FbmCrowdFunding.
type FbmCrowdFundings []*FbmCrowdFunding

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/subscription"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// SubscriptionCreate is the builder for creating a Subscription entity.
type SubscriptionCreate struct {
	config
	mutation *SubscriptionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (sc *SubscriptionCreate) SetEntID(u uuid.UUID) *SubscriptionCreate {
	sc.mutation.SetEntID(u)
	return sc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableEntID(u *uuid.UUID) *SubscriptionCreate {
	if u != nil {
		sc.SetEntID(*u)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SubscriptionCreate) SetCreatedAt(u uint32) *SubscriptionCreate {
	sc.mutation.SetCreatedAt(u)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableCreatedAt(u *uint32) *SubscriptionCreate {
	if u != nil {
		sc.SetCreatedAt(*u)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SubscriptionCreate) SetUpdatedAt(u uint32) *SubscriptionCreate {
	sc.mutation.SetUpdatedAt(u)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableUpdatedAt(u *uint32) *SubscriptionCreate {
	if u != nil {
		sc.SetUpdatedAt(*u)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *SubscriptionCreate) SetDeletedAt(u uint32) *SubscriptionCreate {
	sc.mutation.SetDeletedAt(u)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableDeletedAt(u *uint32) *SubscriptionCreate {
	if u != nil {
		sc.SetDeletedAt(*u)
	}
	return sc
}

// SetGoodID sets the "good_id" field.
func (sc *SubscriptionCreate) SetGoodID(u uuid.UUID) *SubscriptionCreate {
	sc.mutation.SetGoodID(u)
	return sc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableGoodID(u *uuid.UUID) *SubscriptionCreate {
	if u != nil {
		sc.SetGoodID(*u)
	}
	return sc
}

// SetGoodType sets the "good_type" field.
func (sc *SubscriptionCreate) SetGoodType(s string) *SubscriptionCreate {
	sc.mutation.SetGoodType(s)
	return sc
}

// SetNillableGoodType sets the "good_type" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableGoodType(s *string) *SubscriptionCreate {
	if s != nil {
		sc.SetGoodType(*s)
	}
	return sc
}

// SetName sets the "name" field.
func (sc *SubscriptionCreate) SetName(s string) *SubscriptionCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableName(s *string) *SubscriptionCreate {
	if s != nil {
		sc.SetName(*s)
	}
	return sc
}

// SetDurationDisplayType sets the "duration_display_type" field.
func (sc *SubscriptionCreate) SetDurationDisplayType(s string) *SubscriptionCreate {
	sc.mutation.SetDurationDisplayType(s)
	return sc
}

// SetNillableDurationDisplayType sets the "duration_display_type" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableDurationDisplayType(s *string) *SubscriptionCreate {
	if s != nil {
		sc.SetDurationDisplayType(*s)
	}
	return sc
}

// SetDurationUnits sets the "duration_units" field.
func (sc *SubscriptionCreate) SetDurationUnits(u uint32) *SubscriptionCreate {
	sc.mutation.SetDurationUnits(u)
	return sc
}

// SetNillableDurationUnits sets the "duration_units" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableDurationUnits(u *uint32) *SubscriptionCreate {
	if u != nil {
		sc.SetDurationUnits(*u)
	}
	return sc
}

// SetDurationQuota sets the "duration_quota" field.
func (sc *SubscriptionCreate) SetDurationQuota(u uint32) *SubscriptionCreate {
	sc.mutation.SetDurationQuota(u)
	return sc
}

// SetNillableDurationQuota sets the "duration_quota" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableDurationQuota(u *uint32) *SubscriptionCreate {
	if u != nil {
		sc.SetDurationQuota(*u)
	}
	return sc
}

// SetDailyBonusQuota sets the "daily_bonus_quota" field.
func (sc *SubscriptionCreate) SetDailyBonusQuota(u uint32) *SubscriptionCreate {
	sc.mutation.SetDailyBonusQuota(u)
	return sc
}

// SetNillableDailyBonusQuota sets the "daily_bonus_quota" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableDailyBonusQuota(u *uint32) *SubscriptionCreate {
	if u != nil {
		sc.SetDailyBonusQuota(*u)
	}
	return sc
}

// SetUsdPrice sets the "usd_price" field.
func (sc *SubscriptionCreate) SetUsdPrice(d decimal.Decimal) *SubscriptionCreate {
	sc.mutation.SetUsdPrice(d)
	return sc
}

// SetNillableUsdPrice sets the "usd_price" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableUsdPrice(d *decimal.Decimal) *SubscriptionCreate {
	if d != nil {
		sc.SetUsdPrice(*d)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SubscriptionCreate) SetID(u uint32) *SubscriptionCreate {
	sc.mutation.SetID(u)
	return sc
}

// Mutation returns the SubscriptionMutation object of the builder.
func (sc *SubscriptionCreate) Mutation() *SubscriptionMutation {
	return sc.mutation
}

// Save creates the Subscription in the database.
func (sc *SubscriptionCreate) Save(ctx context.Context) (*Subscription, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SubscriptionCreate) SaveX(ctx context.Context) *Subscription {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SubscriptionCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SubscriptionCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SubscriptionCreate) defaults() {
	if _, ok := sc.mutation.EntID(); !ok {
		v := subscription.DefaultEntID()
		sc.mutation.SetEntID(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := subscription.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := subscription.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.DeletedAt(); !ok {
		v := subscription.DefaultDeletedAt()
		sc.mutation.SetDeletedAt(v)
	}
	if _, ok := sc.mutation.GoodID(); !ok {
		v := subscription.DefaultGoodID()
		sc.mutation.SetGoodID(v)
	}
	if _, ok := sc.mutation.GoodType(); !ok {
		v := subscription.DefaultGoodType
		sc.mutation.SetGoodType(v)
	}
	if _, ok := sc.mutation.Name(); !ok {
		v := subscription.DefaultName
		sc.mutation.SetName(v)
	}
	if _, ok := sc.mutation.DurationDisplayType(); !ok {
		v := subscription.DefaultDurationDisplayType
		sc.mutation.SetDurationDisplayType(v)
	}
	if _, ok := sc.mutation.DurationUnits(); !ok {
		v := subscription.DefaultDurationUnits
		sc.mutation.SetDurationUnits(v)
	}
	if _, ok := sc.mutation.DurationQuota(); !ok {
		v := subscription.DefaultDurationQuota
		sc.mutation.SetDurationQuota(v)
	}
	if _, ok := sc.mutation.DailyBonusQuota(); !ok {
		v := subscription.DefaultDailyBonusQuota
		sc.mutation.SetDailyBonusQuota(v)
	}
	if _, ok := sc.mutation.UsdPrice(); !ok {
		v := subscription.DefaultUsdPrice
		sc.mutation.SetUsdPrice(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SubscriptionCreate) check() error {
	if _, ok := sc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "Subscription.ent_id"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Subscription.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Subscription.updated_at"`)}
	}
	if _, ok := sc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "Subscription.deleted_at"`)}
	}
	return nil
}

func (sc *SubscriptionCreate) sqlSave(ctx context.Context) (*Subscription, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SubscriptionCreate) createSpec() (*Subscription, *sqlgraph.CreateSpec) {
	var (
		_node = &Subscription{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(subscription.Table, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.EntID(); ok {
		_spec.SetField(subscription.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(subscription.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(subscription.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.SetField(subscription.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := sc.mutation.GoodID(); ok {
		_spec.SetField(subscription.FieldGoodID, field.TypeUUID, value)
		_node.GoodID = value
	}
	if value, ok := sc.mutation.GoodType(); ok {
		_spec.SetField(subscription.FieldGoodType, field.TypeString, value)
		_node.GoodType = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(subscription.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.DurationDisplayType(); ok {
		_spec.SetField(subscription.FieldDurationDisplayType, field.TypeString, value)
		_node.DurationDisplayType = value
	}
	if value, ok := sc.mutation.DurationUnits(); ok {
		_spec.SetField(subscription.FieldDurationUnits, field.TypeUint32, value)
		_node.DurationUnits = value
	}
	if value, ok := sc.mutation.DurationQuota(); ok {
		_spec.SetField(subscription.FieldDurationQuota, field.TypeUint32, value)
		_node.DurationQuota = value
	}
	if value, ok := sc.mutation.DailyBonusQuota(); ok {
		_spec.SetField(subscription.FieldDailyBonusQuota, field.TypeUint32, value)
		_node.DailyBonusQuota = value
	}
	if value, ok := sc.mutation.UsdPrice(); ok {
		_spec.SetField(subscription.FieldUsdPrice, field.TypeOther, value)
		_node.UsdPrice = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Subscription.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (sc *SubscriptionCreate) OnConflict(opts ...sql.ConflictOption) *SubscriptionUpsertOne {
	sc.conflict = opts
	return &SubscriptionUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Subscription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SubscriptionCreate) OnConflictColumns(columns ...string) *SubscriptionUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionUpsertOne{
		create: sc,
	}
}

type (
	// SubscriptionUpsertOne is the builder for "upsert"-ing
	//  one Subscription node.
	SubscriptionUpsertOne struct {
		create *SubscriptionCreate
	}

	// SubscriptionUpsert is the "OnConflict" setter.
	SubscriptionUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *SubscriptionUpsert) SetEntID(v uuid.UUID) *SubscriptionUpsert {
	u.Set(subscription.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateEntID() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldEntID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SubscriptionUpsert) SetCreatedAt(v uint32) *SubscriptionUpsert {
	u.Set(subscription.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateCreatedAt() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SubscriptionUpsert) AddCreatedAt(v uint32) *SubscriptionUpsert {
	u.Add(subscription.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionUpsert) SetUpdatedAt(v uint32) *SubscriptionUpsert {
	u.Set(subscription.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateUpdatedAt() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SubscriptionUpsert) AddUpdatedAt(v uint32) *SubscriptionUpsert {
	u.Add(subscription.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionUpsert) SetDeletedAt(v uint32) *SubscriptionUpsert {
	u.Set(subscription.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateDeletedAt() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SubscriptionUpsert) AddDeletedAt(v uint32) *SubscriptionUpsert {
	u.Add(subscription.FieldDeletedAt, v)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *SubscriptionUpsert) SetGoodID(v uuid.UUID) *SubscriptionUpsert {
	u.Set(subscription.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateGoodID() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *SubscriptionUpsert) ClearGoodID() *SubscriptionUpsert {
	u.SetNull(subscription.FieldGoodID)
	return u
}

// SetGoodType sets the "good_type" field.
func (u *SubscriptionUpsert) SetGoodType(v string) *SubscriptionUpsert {
	u.Set(subscription.FieldGoodType, v)
	return u
}

// UpdateGoodType sets the "good_type" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateGoodType() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldGoodType)
	return u
}

// ClearGoodType clears the value of the "good_type" field.
func (u *SubscriptionUpsert) ClearGoodType() *SubscriptionUpsert {
	u.SetNull(subscription.FieldGoodType)
	return u
}

// SetName sets the "name" field.
func (u *SubscriptionUpsert) SetName(v string) *SubscriptionUpsert {
	u.Set(subscription.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateName() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *SubscriptionUpsert) ClearName() *SubscriptionUpsert {
	u.SetNull(subscription.FieldName)
	return u
}

// SetDurationDisplayType sets the "duration_display_type" field.
func (u *SubscriptionUpsert) SetDurationDisplayType(v string) *SubscriptionUpsert {
	u.Set(subscription.FieldDurationDisplayType, v)
	return u
}

// UpdateDurationDisplayType sets the "duration_display_type" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateDurationDisplayType() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldDurationDisplayType)
	return u
}

// ClearDurationDisplayType clears the value of the "duration_display_type" field.
func (u *SubscriptionUpsert) ClearDurationDisplayType() *SubscriptionUpsert {
	u.SetNull(subscription.FieldDurationDisplayType)
	return u
}

// SetDurationUnits sets the "duration_units" field.
func (u *SubscriptionUpsert) SetDurationUnits(v uint32) *SubscriptionUpsert {
	u.Set(subscription.FieldDurationUnits, v)
	return u
}

// UpdateDurationUnits sets the "duration_units" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateDurationUnits() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldDurationUnits)
	return u
}

// AddDurationUnits adds v to the "duration_units" field.
func (u *SubscriptionUpsert) AddDurationUnits(v uint32) *SubscriptionUpsert {
	u.Add(subscription.FieldDurationUnits, v)
	return u
}

// ClearDurationUnits clears the value of the "duration_units" field.
func (u *SubscriptionUpsert) ClearDurationUnits() *SubscriptionUpsert {
	u.SetNull(subscription.FieldDurationUnits)
	return u
}

// SetDurationQuota sets the "duration_quota" field.
func (u *SubscriptionUpsert) SetDurationQuota(v uint32) *SubscriptionUpsert {
	u.Set(subscription.FieldDurationQuota, v)
	return u
}

// UpdateDurationQuota sets the "duration_quota" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateDurationQuota() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldDurationQuota)
	return u
}

// AddDurationQuota adds v to the "duration_quota" field.
func (u *SubscriptionUpsert) AddDurationQuota(v uint32) *SubscriptionUpsert {
	u.Add(subscription.FieldDurationQuota, v)
	return u
}

// ClearDurationQuota clears the value of the "duration_quota" field.
func (u *SubscriptionUpsert) ClearDurationQuota() *SubscriptionUpsert {
	u.SetNull(subscription.FieldDurationQuota)
	return u
}

// SetDailyBonusQuota sets the "daily_bonus_quota" field.
func (u *SubscriptionUpsert) SetDailyBonusQuota(v uint32) *SubscriptionUpsert {
	u.Set(subscription.FieldDailyBonusQuota, v)
	return u
}

// UpdateDailyBonusQuota sets the "daily_bonus_quota" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateDailyBonusQuota() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldDailyBonusQuota)
	return u
}

// AddDailyBonusQuota adds v to the "daily_bonus_quota" field.
func (u *SubscriptionUpsert) AddDailyBonusQuota(v uint32) *SubscriptionUpsert {
	u.Add(subscription.FieldDailyBonusQuota, v)
	return u
}

// ClearDailyBonusQuota clears the value of the "daily_bonus_quota" field.
func (u *SubscriptionUpsert) ClearDailyBonusQuota() *SubscriptionUpsert {
	u.SetNull(subscription.FieldDailyBonusQuota)
	return u
}

// SetUsdPrice sets the "usd_price" field.
func (u *SubscriptionUpsert) SetUsdPrice(v decimal.Decimal) *SubscriptionUpsert {
	u.Set(subscription.FieldUsdPrice, v)
	return u
}

// UpdateUsdPrice sets the "usd_price" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateUsdPrice() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldUsdPrice)
	return u
}

// ClearUsdPrice clears the value of the "usd_price" field.
func (u *SubscriptionUpsert) ClearUsdPrice() *SubscriptionUpsert {
	u.SetNull(subscription.FieldUsdPrice)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Subscription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscription.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionUpsertOne) UpdateNewValues() *SubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(subscription.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Subscription.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SubscriptionUpsertOne) Ignore() *SubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionUpsertOne) DoNothing() *SubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionCreate.OnConflict
// documentation for more info.
func (u *SubscriptionUpsertOne) Update(set func(*SubscriptionUpsert)) *SubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *SubscriptionUpsertOne) SetEntID(v uuid.UUID) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateEntID() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SubscriptionUpsertOne) SetCreatedAt(v uint32) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SubscriptionUpsertOne) AddCreatedAt(v uint32) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateCreatedAt() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionUpsertOne) SetUpdatedAt(v uint32) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SubscriptionUpsertOne) AddUpdatedAt(v uint32) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateUpdatedAt() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionUpsertOne) SetDeletedAt(v uint32) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SubscriptionUpsertOne) AddDeletedAt(v uint32) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateDeletedAt() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetGoodID sets the "good_id" field.
func (u *SubscriptionUpsertOne) SetGoodID(v uuid.UUID) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateGoodID() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *SubscriptionUpsertOne) ClearGoodID() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearGoodID()
	})
}

// SetGoodType sets the "good_type" field.
func (u *SubscriptionUpsertOne) SetGoodType(v string) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetGoodType(v)
	})
}

// UpdateGoodType sets the "good_type" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateGoodType() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateGoodType()
	})
}

// ClearGoodType clears the value of the "good_type" field.
func (u *SubscriptionUpsertOne) ClearGoodType() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearGoodType()
	})
}

// SetName sets the "name" field.
func (u *SubscriptionUpsertOne) SetName(v string) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateName() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *SubscriptionUpsertOne) ClearName() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearName()
	})
}

// SetDurationDisplayType sets the "duration_display_type" field.
func (u *SubscriptionUpsertOne) SetDurationDisplayType(v string) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetDurationDisplayType(v)
	})
}

// UpdateDurationDisplayType sets the "duration_display_type" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateDurationDisplayType() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateDurationDisplayType()
	})
}

// ClearDurationDisplayType clears the value of the "duration_display_type" field.
func (u *SubscriptionUpsertOne) ClearDurationDisplayType() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearDurationDisplayType()
	})
}

// SetDurationUnits sets the "duration_units" field.
func (u *SubscriptionUpsertOne) SetDurationUnits(v uint32) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetDurationUnits(v)
	})
}

// AddDurationUnits adds v to the "duration_units" field.
func (u *SubscriptionUpsertOne) AddDurationUnits(v uint32) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.AddDurationUnits(v)
	})
}

// UpdateDurationUnits sets the "duration_units" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateDurationUnits() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateDurationUnits()
	})
}

// ClearDurationUnits clears the value of the "duration_units" field.
func (u *SubscriptionUpsertOne) ClearDurationUnits() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearDurationUnits()
	})
}

// SetDurationQuota sets the "duration_quota" field.
func (u *SubscriptionUpsertOne) SetDurationQuota(v uint32) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetDurationQuota(v)
	})
}

// AddDurationQuota adds v to the "duration_quota" field.
func (u *SubscriptionUpsertOne) AddDurationQuota(v uint32) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.AddDurationQuota(v)
	})
}

// UpdateDurationQuota sets the "duration_quota" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateDurationQuota() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateDurationQuota()
	})
}

// ClearDurationQuota clears the value of the "duration_quota" field.
func (u *SubscriptionUpsertOne) ClearDurationQuota() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearDurationQuota()
	})
}

// SetDailyBonusQuota sets the "daily_bonus_quota" field.
func (u *SubscriptionUpsertOne) SetDailyBonusQuota(v uint32) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetDailyBonusQuota(v)
	})
}

// AddDailyBonusQuota adds v to the "daily_bonus_quota" field.
func (u *SubscriptionUpsertOne) AddDailyBonusQuota(v uint32) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.AddDailyBonusQuota(v)
	})
}

// UpdateDailyBonusQuota sets the "daily_bonus_quota" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateDailyBonusQuota() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateDailyBonusQuota()
	})
}

// ClearDailyBonusQuota clears the value of the "daily_bonus_quota" field.
func (u *SubscriptionUpsertOne) ClearDailyBonusQuota() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearDailyBonusQuota()
	})
}

// SetUsdPrice sets the "usd_price" field.
func (u *SubscriptionUpsertOne) SetUsdPrice(v decimal.Decimal) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetUsdPrice(v)
	})
}

// UpdateUsdPrice sets the "usd_price" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateUsdPrice() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateUsdPrice()
	})
}

// ClearUsdPrice clears the value of the "usd_price" field.
func (u *SubscriptionUpsertOne) ClearUsdPrice() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearUsdPrice()
	})
}

// Exec executes the query.
func (u *SubscriptionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for SubscriptionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubscriptionUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubscriptionUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubscriptionCreateBulk is the builder for creating many Subscription entities in bulk.
type SubscriptionCreateBulk struct {
	config
	err      error
	builders []*SubscriptionCreate
	conflict []sql.ConflictOption
}

// Save creates the Subscription entities in the database.
func (scb *SubscriptionCreateBulk) Save(ctx context.Context) ([]*Subscription, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Subscription, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SubscriptionCreateBulk) SaveX(ctx context.Context) []*Subscription {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SubscriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SubscriptionCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Subscription.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (scb *SubscriptionCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubscriptionUpsertBulk {
	scb.conflict = opts
	return &SubscriptionUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Subscription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SubscriptionCreateBulk) OnConflictColumns(columns ...string) *SubscriptionUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionUpsertBulk{
		create: scb,
	}
}

// SubscriptionUpsertBulk is the builder for "upsert"-ing
// a bulk of Subscription nodes.
type SubscriptionUpsertBulk struct {
	create *SubscriptionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Subscription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscription.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionUpsertBulk) UpdateNewValues() *SubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(subscription.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Subscription.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SubscriptionUpsertBulk) Ignore() *SubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionUpsertBulk) DoNothing() *SubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionCreateBulk.OnConflict
// documentation for more info.
func (u *SubscriptionUpsertBulk) Update(set func(*SubscriptionUpsert)) *SubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *SubscriptionUpsertBulk) SetEntID(v uuid.UUID) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateEntID() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SubscriptionUpsertBulk) SetCreatedAt(v uint32) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SubscriptionUpsertBulk) AddCreatedAt(v uint32) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateCreatedAt() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionUpsertBulk) SetUpdatedAt(v uint32) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SubscriptionUpsertBulk) AddUpdatedAt(v uint32) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateUpdatedAt() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionUpsertBulk) SetDeletedAt(v uint32) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SubscriptionUpsertBulk) AddDeletedAt(v uint32) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateDeletedAt() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetGoodID sets the "good_id" field.
func (u *SubscriptionUpsertBulk) SetGoodID(v uuid.UUID) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateGoodID() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *SubscriptionUpsertBulk) ClearGoodID() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearGoodID()
	})
}

// SetGoodType sets the "good_type" field.
func (u *SubscriptionUpsertBulk) SetGoodType(v string) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetGoodType(v)
	})
}

// UpdateGoodType sets the "good_type" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateGoodType() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateGoodType()
	})
}

// ClearGoodType clears the value of the "good_type" field.
func (u *SubscriptionUpsertBulk) ClearGoodType() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearGoodType()
	})
}

// SetName sets the "name" field.
func (u *SubscriptionUpsertBulk) SetName(v string) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateName() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *SubscriptionUpsertBulk) ClearName() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearName()
	})
}

// SetDurationDisplayType sets the "duration_display_type" field.
func (u *SubscriptionUpsertBulk) SetDurationDisplayType(v string) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetDurationDisplayType(v)
	})
}

// UpdateDurationDisplayType sets the "duration_display_type" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateDurationDisplayType() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateDurationDisplayType()
	})
}

// ClearDurationDisplayType clears the value of the "duration_display_type" field.
func (u *SubscriptionUpsertBulk) ClearDurationDisplayType() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearDurationDisplayType()
	})
}

// SetDurationUnits sets the "duration_units" field.
func (u *SubscriptionUpsertBulk) SetDurationUnits(v uint32) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetDurationUnits(v)
	})
}

// AddDurationUnits adds v to the "duration_units" field.
func (u *SubscriptionUpsertBulk) AddDurationUnits(v uint32) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.AddDurationUnits(v)
	})
}

// UpdateDurationUnits sets the "duration_units" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateDurationUnits() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateDurationUnits()
	})
}

// ClearDurationUnits clears the value of the "duration_units" field.
func (u *SubscriptionUpsertBulk) ClearDurationUnits() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearDurationUnits()
	})
}

// SetDurationQuota sets the "duration_quota" field.
func (u *SubscriptionUpsertBulk) SetDurationQuota(v uint32) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetDurationQuota(v)
	})
}

// AddDurationQuota adds v to the "duration_quota" field.
func (u *SubscriptionUpsertBulk) AddDurationQuota(v uint32) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.AddDurationQuota(v)
	})
}

// UpdateDurationQuota sets the "duration_quota" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateDurationQuota() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateDurationQuota()
	})
}

// ClearDurationQuota clears the value of the "duration_quota" field.
func (u *SubscriptionUpsertBulk) ClearDurationQuota() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearDurationQuota()
	})
}

// SetDailyBonusQuota sets the "daily_bonus_quota" field.
func (u *SubscriptionUpsertBulk) SetDailyBonusQuota(v uint32) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetDailyBonusQuota(v)
	})
}

// AddDailyBonusQuota adds v to the "daily_bonus_quota" field.
func (u *SubscriptionUpsertBulk) AddDailyBonusQuota(v uint32) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.AddDailyBonusQuota(v)
	})
}

// UpdateDailyBonusQuota sets the "daily_bonus_quota" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateDailyBonusQuota() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateDailyBonusQuota()
	})
}

// ClearDailyBonusQuota clears the value of the "daily_bonus_quota" field.
func (u *SubscriptionUpsertBulk) ClearDailyBonusQuota() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearDailyBonusQuota()
	})
}

// SetUsdPrice sets the "usd_price" field.
func (u *SubscriptionUpsertBulk) SetUsdPrice(v decimal.Decimal) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetUsdPrice(v)
	})
}

// UpdateUsdPrice sets the "usd_price" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateUsdPrice() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateUsdPrice()
	})
}

// ClearUsdPrice clears the value of the "usd_price" field.
func (u *SubscriptionUpsertBulk) ClearUsdPrice() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearUsdPrice()
	})
}

// Exec executes the query.
func (u *SubscriptionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the SubscriptionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for SubscriptionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

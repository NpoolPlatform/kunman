// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appgoodposter"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
)

// AppGoodPosterDelete is the builder for deleting a AppGoodPoster entity.
type AppGoodPosterDelete struct {
	config
	hooks    []Hook
	mutation *AppGoodPosterMutation
}

// Where appends a list predicates to the AppGoodPosterDelete builder.
func (agpd *AppGoodPosterDelete) Where(ps ...predicate.AppGoodPoster) *AppGoodPosterDelete {
	agpd.mutation.Where(ps...)
	return agpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (agpd *AppGoodPosterDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, agpd.sqlExec, agpd.mutation, agpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (agpd *AppGoodPosterDelete) ExecX(ctx context.Context) int {
	n, err := agpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (agpd *AppGoodPosterDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(appgoodposter.Table, sqlgraph.NewFieldSpec(appgoodposter.FieldID, field.TypeUint32))
	if ps := agpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, agpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	agpd.mutation.done = true
	return affected, err
}

// AppGoodPosterDeleteOne is the builder for deleting a single AppGoodPoster entity.
type AppGoodPosterDeleteOne struct {
	agpd *AppGoodPosterDelete
}

// Where appends a list predicates to the AppGoodPosterDelete builder.
func (agpdo *AppGoodPosterDeleteOne) Where(ps ...predicate.AppGoodPoster) *AppGoodPosterDeleteOne {
	agpdo.agpd.mutation.Where(ps...)
	return agpdo
}

// Exec executes the deletion query.
func (agpdo *AppGoodPosterDeleteOne) Exec(ctx context.Context) error {
	n, err := agpdo.agpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{appgoodposter.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (agpdo *AppGoodPosterDeleteOne) ExecX(ctx context.Context) {
	if err := agpdo.Exec(ctx); err != nil {
		panic(err)
	}
}

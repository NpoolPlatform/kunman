// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/subscriptiononeshot"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// SubscriptionOneShotCreate is the builder for creating a SubscriptionOneShot entity.
type SubscriptionOneShotCreate struct {
	config
	mutation *SubscriptionOneShotMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (sosc *SubscriptionOneShotCreate) SetEntID(u uuid.UUID) *SubscriptionOneShotCreate {
	sosc.mutation.SetEntID(u)
	return sosc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (sosc *SubscriptionOneShotCreate) SetNillableEntID(u *uuid.UUID) *SubscriptionOneShotCreate {
	if u != nil {
		sosc.SetEntID(*u)
	}
	return sosc
}

// SetGoodID sets the "good_id" field.
func (sosc *SubscriptionOneShotCreate) SetGoodID(u uuid.UUID) *SubscriptionOneShotCreate {
	sosc.mutation.SetGoodID(u)
	return sosc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (sosc *SubscriptionOneShotCreate) SetNillableGoodID(u *uuid.UUID) *SubscriptionOneShotCreate {
	if u != nil {
		sosc.SetGoodID(*u)
	}
	return sosc
}

// SetGoodType sets the "good_type" field.
func (sosc *SubscriptionOneShotCreate) SetGoodType(s string) *SubscriptionOneShotCreate {
	sosc.mutation.SetGoodType(s)
	return sosc
}

// SetNillableGoodType sets the "good_type" field if the given value is not nil.
func (sosc *SubscriptionOneShotCreate) SetNillableGoodType(s *string) *SubscriptionOneShotCreate {
	if s != nil {
		sosc.SetGoodType(*s)
	}
	return sosc
}

// SetName sets the "name" field.
func (sosc *SubscriptionOneShotCreate) SetName(s string) *SubscriptionOneShotCreate {
	sosc.mutation.SetName(s)
	return sosc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sosc *SubscriptionOneShotCreate) SetNillableName(s *string) *SubscriptionOneShotCreate {
	if s != nil {
		sosc.SetName(*s)
	}
	return sosc
}

// SetQuota sets the "quota" field.
func (sosc *SubscriptionOneShotCreate) SetQuota(u uint32) *SubscriptionOneShotCreate {
	sosc.mutation.SetQuota(u)
	return sosc
}

// SetNillableQuota sets the "quota" field if the given value is not nil.
func (sosc *SubscriptionOneShotCreate) SetNillableQuota(u *uint32) *SubscriptionOneShotCreate {
	if u != nil {
		sosc.SetQuota(*u)
	}
	return sosc
}

// SetUsdPrice sets the "usd_price" field.
func (sosc *SubscriptionOneShotCreate) SetUsdPrice(d decimal.Decimal) *SubscriptionOneShotCreate {
	sosc.mutation.SetUsdPrice(d)
	return sosc
}

// SetNillableUsdPrice sets the "usd_price" field if the given value is not nil.
func (sosc *SubscriptionOneShotCreate) SetNillableUsdPrice(d *decimal.Decimal) *SubscriptionOneShotCreate {
	if d != nil {
		sosc.SetUsdPrice(*d)
	}
	return sosc
}

// SetLifeSeconds sets the "life_seconds" field.
func (sosc *SubscriptionOneShotCreate) SetLifeSeconds(u uint32) *SubscriptionOneShotCreate {
	sosc.mutation.SetLifeSeconds(u)
	return sosc
}

// SetNillableLifeSeconds sets the "life_seconds" field if the given value is not nil.
func (sosc *SubscriptionOneShotCreate) SetNillableLifeSeconds(u *uint32) *SubscriptionOneShotCreate {
	if u != nil {
		sosc.SetLifeSeconds(*u)
	}
	return sosc
}

// SetID sets the "id" field.
func (sosc *SubscriptionOneShotCreate) SetID(u uint32) *SubscriptionOneShotCreate {
	sosc.mutation.SetID(u)
	return sosc
}

// Mutation returns the SubscriptionOneShotMutation object of the builder.
func (sosc *SubscriptionOneShotCreate) Mutation() *SubscriptionOneShotMutation {
	return sosc.mutation
}

// Save creates the SubscriptionOneShot in the database.
func (sosc *SubscriptionOneShotCreate) Save(ctx context.Context) (*SubscriptionOneShot, error) {
	sosc.defaults()
	return withHooks(ctx, sosc.sqlSave, sosc.mutation, sosc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sosc *SubscriptionOneShotCreate) SaveX(ctx context.Context) *SubscriptionOneShot {
	v, err := sosc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sosc *SubscriptionOneShotCreate) Exec(ctx context.Context) error {
	_, err := sosc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sosc *SubscriptionOneShotCreate) ExecX(ctx context.Context) {
	if err := sosc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sosc *SubscriptionOneShotCreate) defaults() {
	if _, ok := sosc.mutation.EntID(); !ok {
		v := subscriptiononeshot.DefaultEntID()
		sosc.mutation.SetEntID(v)
	}
	if _, ok := sosc.mutation.GoodID(); !ok {
		v := subscriptiononeshot.DefaultGoodID()
		sosc.mutation.SetGoodID(v)
	}
	if _, ok := sosc.mutation.GoodType(); !ok {
		v := subscriptiononeshot.DefaultGoodType
		sosc.mutation.SetGoodType(v)
	}
	if _, ok := sosc.mutation.Name(); !ok {
		v := subscriptiononeshot.DefaultName
		sosc.mutation.SetName(v)
	}
	if _, ok := sosc.mutation.Quota(); !ok {
		v := subscriptiononeshot.DefaultQuota
		sosc.mutation.SetQuota(v)
	}
	if _, ok := sosc.mutation.UsdPrice(); !ok {
		v := subscriptiononeshot.DefaultUsdPrice
		sosc.mutation.SetUsdPrice(v)
	}
	if _, ok := sosc.mutation.LifeSeconds(); !ok {
		v := subscriptiononeshot.DefaultLifeSeconds
		sosc.mutation.SetLifeSeconds(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sosc *SubscriptionOneShotCreate) check() error {
	if _, ok := sosc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "SubscriptionOneShot.ent_id"`)}
	}
	return nil
}

func (sosc *SubscriptionOneShotCreate) sqlSave(ctx context.Context) (*SubscriptionOneShot, error) {
	if err := sosc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sosc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sosc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	sosc.mutation.id = &_node.ID
	sosc.mutation.done = true
	return _node, nil
}

func (sosc *SubscriptionOneShotCreate) createSpec() (*SubscriptionOneShot, *sqlgraph.CreateSpec) {
	var (
		_node = &SubscriptionOneShot{config: sosc.config}
		_spec = sqlgraph.NewCreateSpec(subscriptiononeshot.Table, sqlgraph.NewFieldSpec(subscriptiononeshot.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = sosc.conflict
	if id, ok := sosc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sosc.mutation.EntID(); ok {
		_spec.SetField(subscriptiononeshot.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := sosc.mutation.GoodID(); ok {
		_spec.SetField(subscriptiononeshot.FieldGoodID, field.TypeUUID, value)
		_node.GoodID = value
	}
	if value, ok := sosc.mutation.GoodType(); ok {
		_spec.SetField(subscriptiononeshot.FieldGoodType, field.TypeString, value)
		_node.GoodType = value
	}
	if value, ok := sosc.mutation.Name(); ok {
		_spec.SetField(subscriptiononeshot.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sosc.mutation.Quota(); ok {
		_spec.SetField(subscriptiononeshot.FieldQuota, field.TypeUint32, value)
		_node.Quota = value
	}
	if value, ok := sosc.mutation.UsdPrice(); ok {
		_spec.SetField(subscriptiononeshot.FieldUsdPrice, field.TypeOther, value)
		_node.UsdPrice = value
	}
	if value, ok := sosc.mutation.LifeSeconds(); ok {
		_spec.SetField(subscriptiononeshot.FieldLifeSeconds, field.TypeUint32, value)
		_node.LifeSeconds = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscriptionOneShot.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionOneShotUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (sosc *SubscriptionOneShotCreate) OnConflict(opts ...sql.ConflictOption) *SubscriptionOneShotUpsertOne {
	sosc.conflict = opts
	return &SubscriptionOneShotUpsertOne{
		create: sosc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscriptionOneShot.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sosc *SubscriptionOneShotCreate) OnConflictColumns(columns ...string) *SubscriptionOneShotUpsertOne {
	sosc.conflict = append(sosc.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionOneShotUpsertOne{
		create: sosc,
	}
}

type (
	// SubscriptionOneShotUpsertOne is the builder for "upsert"-ing
	//  one SubscriptionOneShot node.
	SubscriptionOneShotUpsertOne struct {
		create *SubscriptionOneShotCreate
	}

	// SubscriptionOneShotUpsert is the "OnConflict" setter.
	SubscriptionOneShotUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *SubscriptionOneShotUpsert) SetEntID(v uuid.UUID) *SubscriptionOneShotUpsert {
	u.Set(subscriptiononeshot.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SubscriptionOneShotUpsert) UpdateEntID() *SubscriptionOneShotUpsert {
	u.SetExcluded(subscriptiononeshot.FieldEntID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *SubscriptionOneShotUpsert) SetGoodID(v uuid.UUID) *SubscriptionOneShotUpsert {
	u.Set(subscriptiononeshot.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *SubscriptionOneShotUpsert) UpdateGoodID() *SubscriptionOneShotUpsert {
	u.SetExcluded(subscriptiononeshot.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *SubscriptionOneShotUpsert) ClearGoodID() *SubscriptionOneShotUpsert {
	u.SetNull(subscriptiononeshot.FieldGoodID)
	return u
}

// SetGoodType sets the "good_type" field.
func (u *SubscriptionOneShotUpsert) SetGoodType(v string) *SubscriptionOneShotUpsert {
	u.Set(subscriptiononeshot.FieldGoodType, v)
	return u
}

// UpdateGoodType sets the "good_type" field to the value that was provided on create.
func (u *SubscriptionOneShotUpsert) UpdateGoodType() *SubscriptionOneShotUpsert {
	u.SetExcluded(subscriptiononeshot.FieldGoodType)
	return u
}

// ClearGoodType clears the value of the "good_type" field.
func (u *SubscriptionOneShotUpsert) ClearGoodType() *SubscriptionOneShotUpsert {
	u.SetNull(subscriptiononeshot.FieldGoodType)
	return u
}

// SetName sets the "name" field.
func (u *SubscriptionOneShotUpsert) SetName(v string) *SubscriptionOneShotUpsert {
	u.Set(subscriptiononeshot.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SubscriptionOneShotUpsert) UpdateName() *SubscriptionOneShotUpsert {
	u.SetExcluded(subscriptiononeshot.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *SubscriptionOneShotUpsert) ClearName() *SubscriptionOneShotUpsert {
	u.SetNull(subscriptiononeshot.FieldName)
	return u
}

// SetQuota sets the "quota" field.
func (u *SubscriptionOneShotUpsert) SetQuota(v uint32) *SubscriptionOneShotUpsert {
	u.Set(subscriptiononeshot.FieldQuota, v)
	return u
}

// UpdateQuota sets the "quota" field to the value that was provided on create.
func (u *SubscriptionOneShotUpsert) UpdateQuota() *SubscriptionOneShotUpsert {
	u.SetExcluded(subscriptiononeshot.FieldQuota)
	return u
}

// AddQuota adds v to the "quota" field.
func (u *SubscriptionOneShotUpsert) AddQuota(v uint32) *SubscriptionOneShotUpsert {
	u.Add(subscriptiononeshot.FieldQuota, v)
	return u
}

// ClearQuota clears the value of the "quota" field.
func (u *SubscriptionOneShotUpsert) ClearQuota() *SubscriptionOneShotUpsert {
	u.SetNull(subscriptiononeshot.FieldQuota)
	return u
}

// SetUsdPrice sets the "usd_price" field.
func (u *SubscriptionOneShotUpsert) SetUsdPrice(v decimal.Decimal) *SubscriptionOneShotUpsert {
	u.Set(subscriptiononeshot.FieldUsdPrice, v)
	return u
}

// UpdateUsdPrice sets the "usd_price" field to the value that was provided on create.
func (u *SubscriptionOneShotUpsert) UpdateUsdPrice() *SubscriptionOneShotUpsert {
	u.SetExcluded(subscriptiononeshot.FieldUsdPrice)
	return u
}

// ClearUsdPrice clears the value of the "usd_price" field.
func (u *SubscriptionOneShotUpsert) ClearUsdPrice() *SubscriptionOneShotUpsert {
	u.SetNull(subscriptiononeshot.FieldUsdPrice)
	return u
}

// SetLifeSeconds sets the "life_seconds" field.
func (u *SubscriptionOneShotUpsert) SetLifeSeconds(v uint32) *SubscriptionOneShotUpsert {
	u.Set(subscriptiononeshot.FieldLifeSeconds, v)
	return u
}

// UpdateLifeSeconds sets the "life_seconds" field to the value that was provided on create.
func (u *SubscriptionOneShotUpsert) UpdateLifeSeconds() *SubscriptionOneShotUpsert {
	u.SetExcluded(subscriptiononeshot.FieldLifeSeconds)
	return u
}

// AddLifeSeconds adds v to the "life_seconds" field.
func (u *SubscriptionOneShotUpsert) AddLifeSeconds(v uint32) *SubscriptionOneShotUpsert {
	u.Add(subscriptiononeshot.FieldLifeSeconds, v)
	return u
}

// ClearLifeSeconds clears the value of the "life_seconds" field.
func (u *SubscriptionOneShotUpsert) ClearLifeSeconds() *SubscriptionOneShotUpsert {
	u.SetNull(subscriptiononeshot.FieldLifeSeconds)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SubscriptionOneShot.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscriptiononeshot.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionOneShotUpsertOne) UpdateNewValues() *SubscriptionOneShotUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(subscriptiononeshot.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscriptionOneShot.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SubscriptionOneShotUpsertOne) Ignore() *SubscriptionOneShotUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionOneShotUpsertOne) DoNothing() *SubscriptionOneShotUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionOneShotCreate.OnConflict
// documentation for more info.
func (u *SubscriptionOneShotUpsertOne) Update(set func(*SubscriptionOneShotUpsert)) *SubscriptionOneShotUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionOneShotUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *SubscriptionOneShotUpsertOne) SetEntID(v uuid.UUID) *SubscriptionOneShotUpsertOne {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SubscriptionOneShotUpsertOne) UpdateEntID() *SubscriptionOneShotUpsertOne {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.UpdateEntID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *SubscriptionOneShotUpsertOne) SetGoodID(v uuid.UUID) *SubscriptionOneShotUpsertOne {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *SubscriptionOneShotUpsertOne) UpdateGoodID() *SubscriptionOneShotUpsertOne {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *SubscriptionOneShotUpsertOne) ClearGoodID() *SubscriptionOneShotUpsertOne {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.ClearGoodID()
	})
}

// SetGoodType sets the "good_type" field.
func (u *SubscriptionOneShotUpsertOne) SetGoodType(v string) *SubscriptionOneShotUpsertOne {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.SetGoodType(v)
	})
}

// UpdateGoodType sets the "good_type" field to the value that was provided on create.
func (u *SubscriptionOneShotUpsertOne) UpdateGoodType() *SubscriptionOneShotUpsertOne {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.UpdateGoodType()
	})
}

// ClearGoodType clears the value of the "good_type" field.
func (u *SubscriptionOneShotUpsertOne) ClearGoodType() *SubscriptionOneShotUpsertOne {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.ClearGoodType()
	})
}

// SetName sets the "name" field.
func (u *SubscriptionOneShotUpsertOne) SetName(v string) *SubscriptionOneShotUpsertOne {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SubscriptionOneShotUpsertOne) UpdateName() *SubscriptionOneShotUpsertOne {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *SubscriptionOneShotUpsertOne) ClearName() *SubscriptionOneShotUpsertOne {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.ClearName()
	})
}

// SetQuota sets the "quota" field.
func (u *SubscriptionOneShotUpsertOne) SetQuota(v uint32) *SubscriptionOneShotUpsertOne {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.SetQuota(v)
	})
}

// AddQuota adds v to the "quota" field.
func (u *SubscriptionOneShotUpsertOne) AddQuota(v uint32) *SubscriptionOneShotUpsertOne {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.AddQuota(v)
	})
}

// UpdateQuota sets the "quota" field to the value that was provided on create.
func (u *SubscriptionOneShotUpsertOne) UpdateQuota() *SubscriptionOneShotUpsertOne {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.UpdateQuota()
	})
}

// ClearQuota clears the value of the "quota" field.
func (u *SubscriptionOneShotUpsertOne) ClearQuota() *SubscriptionOneShotUpsertOne {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.ClearQuota()
	})
}

// SetUsdPrice sets the "usd_price" field.
func (u *SubscriptionOneShotUpsertOne) SetUsdPrice(v decimal.Decimal) *SubscriptionOneShotUpsertOne {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.SetUsdPrice(v)
	})
}

// UpdateUsdPrice sets the "usd_price" field to the value that was provided on create.
func (u *SubscriptionOneShotUpsertOne) UpdateUsdPrice() *SubscriptionOneShotUpsertOne {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.UpdateUsdPrice()
	})
}

// ClearUsdPrice clears the value of the "usd_price" field.
func (u *SubscriptionOneShotUpsertOne) ClearUsdPrice() *SubscriptionOneShotUpsertOne {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.ClearUsdPrice()
	})
}

// SetLifeSeconds sets the "life_seconds" field.
func (u *SubscriptionOneShotUpsertOne) SetLifeSeconds(v uint32) *SubscriptionOneShotUpsertOne {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.SetLifeSeconds(v)
	})
}

// AddLifeSeconds adds v to the "life_seconds" field.
func (u *SubscriptionOneShotUpsertOne) AddLifeSeconds(v uint32) *SubscriptionOneShotUpsertOne {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.AddLifeSeconds(v)
	})
}

// UpdateLifeSeconds sets the "life_seconds" field to the value that was provided on create.
func (u *SubscriptionOneShotUpsertOne) UpdateLifeSeconds() *SubscriptionOneShotUpsertOne {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.UpdateLifeSeconds()
	})
}

// ClearLifeSeconds clears the value of the "life_seconds" field.
func (u *SubscriptionOneShotUpsertOne) ClearLifeSeconds() *SubscriptionOneShotUpsertOne {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.ClearLifeSeconds()
	})
}

// Exec executes the query.
func (u *SubscriptionOneShotUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for SubscriptionOneShotCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionOneShotUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubscriptionOneShotUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubscriptionOneShotUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubscriptionOneShotCreateBulk is the builder for creating many SubscriptionOneShot entities in bulk.
type SubscriptionOneShotCreateBulk struct {
	config
	err      error
	builders []*SubscriptionOneShotCreate
	conflict []sql.ConflictOption
}

// Save creates the SubscriptionOneShot entities in the database.
func (soscb *SubscriptionOneShotCreateBulk) Save(ctx context.Context) ([]*SubscriptionOneShot, error) {
	if soscb.err != nil {
		return nil, soscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(soscb.builders))
	nodes := make([]*SubscriptionOneShot, len(soscb.builders))
	mutators := make([]Mutator, len(soscb.builders))
	for i := range soscb.builders {
		func(i int, root context.Context) {
			builder := soscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionOneShotMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, soscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = soscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, soscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, soscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (soscb *SubscriptionOneShotCreateBulk) SaveX(ctx context.Context) []*SubscriptionOneShot {
	v, err := soscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (soscb *SubscriptionOneShotCreateBulk) Exec(ctx context.Context) error {
	_, err := soscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (soscb *SubscriptionOneShotCreateBulk) ExecX(ctx context.Context) {
	if err := soscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscriptionOneShot.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionOneShotUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (soscb *SubscriptionOneShotCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubscriptionOneShotUpsertBulk {
	soscb.conflict = opts
	return &SubscriptionOneShotUpsertBulk{
		create: soscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscriptionOneShot.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (soscb *SubscriptionOneShotCreateBulk) OnConflictColumns(columns ...string) *SubscriptionOneShotUpsertBulk {
	soscb.conflict = append(soscb.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionOneShotUpsertBulk{
		create: soscb,
	}
}

// SubscriptionOneShotUpsertBulk is the builder for "upsert"-ing
// a bulk of SubscriptionOneShot nodes.
type SubscriptionOneShotUpsertBulk struct {
	create *SubscriptionOneShotCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SubscriptionOneShot.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscriptiononeshot.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionOneShotUpsertBulk) UpdateNewValues() *SubscriptionOneShotUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(subscriptiononeshot.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscriptionOneShot.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SubscriptionOneShotUpsertBulk) Ignore() *SubscriptionOneShotUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionOneShotUpsertBulk) DoNothing() *SubscriptionOneShotUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionOneShotCreateBulk.OnConflict
// documentation for more info.
func (u *SubscriptionOneShotUpsertBulk) Update(set func(*SubscriptionOneShotUpsert)) *SubscriptionOneShotUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionOneShotUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *SubscriptionOneShotUpsertBulk) SetEntID(v uuid.UUID) *SubscriptionOneShotUpsertBulk {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SubscriptionOneShotUpsertBulk) UpdateEntID() *SubscriptionOneShotUpsertBulk {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.UpdateEntID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *SubscriptionOneShotUpsertBulk) SetGoodID(v uuid.UUID) *SubscriptionOneShotUpsertBulk {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *SubscriptionOneShotUpsertBulk) UpdateGoodID() *SubscriptionOneShotUpsertBulk {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *SubscriptionOneShotUpsertBulk) ClearGoodID() *SubscriptionOneShotUpsertBulk {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.ClearGoodID()
	})
}

// SetGoodType sets the "good_type" field.
func (u *SubscriptionOneShotUpsertBulk) SetGoodType(v string) *SubscriptionOneShotUpsertBulk {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.SetGoodType(v)
	})
}

// UpdateGoodType sets the "good_type" field to the value that was provided on create.
func (u *SubscriptionOneShotUpsertBulk) UpdateGoodType() *SubscriptionOneShotUpsertBulk {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.UpdateGoodType()
	})
}

// ClearGoodType clears the value of the "good_type" field.
func (u *SubscriptionOneShotUpsertBulk) ClearGoodType() *SubscriptionOneShotUpsertBulk {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.ClearGoodType()
	})
}

// SetName sets the "name" field.
func (u *SubscriptionOneShotUpsertBulk) SetName(v string) *SubscriptionOneShotUpsertBulk {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SubscriptionOneShotUpsertBulk) UpdateName() *SubscriptionOneShotUpsertBulk {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *SubscriptionOneShotUpsertBulk) ClearName() *SubscriptionOneShotUpsertBulk {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.ClearName()
	})
}

// SetQuota sets the "quota" field.
func (u *SubscriptionOneShotUpsertBulk) SetQuota(v uint32) *SubscriptionOneShotUpsertBulk {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.SetQuota(v)
	})
}

// AddQuota adds v to the "quota" field.
func (u *SubscriptionOneShotUpsertBulk) AddQuota(v uint32) *SubscriptionOneShotUpsertBulk {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.AddQuota(v)
	})
}

// UpdateQuota sets the "quota" field to the value that was provided on create.
func (u *SubscriptionOneShotUpsertBulk) UpdateQuota() *SubscriptionOneShotUpsertBulk {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.UpdateQuota()
	})
}

// ClearQuota clears the value of the "quota" field.
func (u *SubscriptionOneShotUpsertBulk) ClearQuota() *SubscriptionOneShotUpsertBulk {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.ClearQuota()
	})
}

// SetUsdPrice sets the "usd_price" field.
func (u *SubscriptionOneShotUpsertBulk) SetUsdPrice(v decimal.Decimal) *SubscriptionOneShotUpsertBulk {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.SetUsdPrice(v)
	})
}

// UpdateUsdPrice sets the "usd_price" field to the value that was provided on create.
func (u *SubscriptionOneShotUpsertBulk) UpdateUsdPrice() *SubscriptionOneShotUpsertBulk {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.UpdateUsdPrice()
	})
}

// ClearUsdPrice clears the value of the "usd_price" field.
func (u *SubscriptionOneShotUpsertBulk) ClearUsdPrice() *SubscriptionOneShotUpsertBulk {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.ClearUsdPrice()
	})
}

// SetLifeSeconds sets the "life_seconds" field.
func (u *SubscriptionOneShotUpsertBulk) SetLifeSeconds(v uint32) *SubscriptionOneShotUpsertBulk {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.SetLifeSeconds(v)
	})
}

// AddLifeSeconds adds v to the "life_seconds" field.
func (u *SubscriptionOneShotUpsertBulk) AddLifeSeconds(v uint32) *SubscriptionOneShotUpsertBulk {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.AddLifeSeconds(v)
	})
}

// UpdateLifeSeconds sets the "life_seconds" field to the value that was provided on create.
func (u *SubscriptionOneShotUpsertBulk) UpdateLifeSeconds() *SubscriptionOneShotUpsertBulk {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.UpdateLifeSeconds()
	})
}

// ClearLifeSeconds clears the value of the "life_seconds" field.
func (u *SubscriptionOneShotUpsertBulk) ClearLifeSeconds() *SubscriptionOneShotUpsertBulk {
	return u.Update(func(s *SubscriptionOneShotUpsert) {
		s.ClearLifeSeconds()
	})
}

// Exec executes the query.
func (u *SubscriptionOneShotUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the SubscriptionOneShotCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for SubscriptionOneShotCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionOneShotUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

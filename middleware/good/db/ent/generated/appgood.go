// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appgood"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppGood is the model entity for the AppGood schema.
type AppGood struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// Online holds the value of the "online" field.
	Online bool `json:"online,omitempty"`
	// Visible holds the value of the "visible" field.
	Visible bool `json:"visible,omitempty"`
	// GoodName holds the value of the "good_name" field.
	GoodName string `json:"good_name,omitempty"`
	// UnitPrice holds the value of the "unit_price" field.
	UnitPrice decimal.Decimal `json:"unit_price,omitempty"`
	// PackagePrice holds the value of the "package_price" field.
	PackagePrice decimal.Decimal `json:"package_price,omitempty"`
	// DisplayIndex holds the value of the "display_index" field.
	DisplayIndex int32 `json:"display_index,omitempty"`
	// SaleStartAt holds the value of the "sale_start_at" field.
	SaleStartAt uint32 `json:"sale_start_at,omitempty"`
	// SaleEndAt holds the value of the "sale_end_at" field.
	SaleEndAt uint32 `json:"sale_end_at,omitempty"`
	// ServiceStartAt holds the value of the "service_start_at" field.
	ServiceStartAt uint32 `json:"service_start_at,omitempty"`
	// TechnicalFeeRatio holds the value of the "technical_fee_ratio" field.
	TechnicalFeeRatio decimal.Decimal `json:"technical_fee_ratio,omitempty"`
	// ElectricityFeeRatio holds the value of the "electricity_fee_ratio" field.
	ElectricityFeeRatio decimal.Decimal `json:"electricity_fee_ratio,omitempty"`
	// Descriptions holds the value of the "descriptions" field.
	Descriptions []string `json:"descriptions,omitempty"`
	// GoodBanner holds the value of the "good_banner" field.
	GoodBanner string `json:"good_banner,omitempty"`
	// DisplayNames holds the value of the "display_names" field.
	DisplayNames []string `json:"display_names,omitempty"`
	// EnablePurchase holds the value of the "enable_purchase" field.
	EnablePurchase bool `json:"enable_purchase,omitempty"`
	// EnableProductPage holds the value of the "enable_product_page" field.
	EnableProductPage bool `json:"enable_product_page,omitempty"`
	// CancelMode holds the value of the "cancel_mode" field.
	CancelMode string `json:"cancel_mode,omitempty"`
	// DisplayColors holds the value of the "display_colors" field.
	DisplayColors []string `json:"display_colors,omitempty"`
	// CancellableBeforeStart holds the value of the "cancellable_before_start" field.
	CancellableBeforeStart uint32 `json:"cancellable_before_start,omitempty"`
	// ProductPage holds the value of the "product_page" field.
	ProductPage string `json:"product_page,omitempty"`
	// EnableSetCommission holds the value of the "enable_set_commission" field.
	EnableSetCommission bool `json:"enable_set_commission,omitempty"`
	// Posters holds the value of the "posters" field.
	Posters []string `json:"posters,omitempty"`
	// MinOrderAmount holds the value of the "min_order_amount" field.
	MinOrderAmount decimal.Decimal `json:"min_order_amount,omitempty"`
	// MaxOrderAmount holds the value of the "max_order_amount" field.
	MaxOrderAmount decimal.Decimal `json:"max_order_amount,omitempty"`
	// MaxUserAmount holds the value of the "max_user_amount" field.
	MaxUserAmount decimal.Decimal `json:"max_user_amount,omitempty"`
	// MinOrderDuration holds the value of the "min_order_duration" field.
	MinOrderDuration uint32 `json:"min_order_duration,omitempty"`
	// MaxOrderDuration holds the value of the "max_order_duration" field.
	MaxOrderDuration uint32 `json:"max_order_duration,omitempty"`
	// PackageWithRequireds holds the value of the "package_with_requireds" field.
	PackageWithRequireds bool `json:"package_with_requireds,omitempty"`
	selectValues         sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppGood) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appgood.FieldDescriptions, appgood.FieldDisplayNames, appgood.FieldDisplayColors, appgood.FieldPosters:
			values[i] = new([]byte)
		case appgood.FieldUnitPrice, appgood.FieldPackagePrice, appgood.FieldTechnicalFeeRatio, appgood.FieldElectricityFeeRatio, appgood.FieldMinOrderAmount, appgood.FieldMaxOrderAmount, appgood.FieldMaxUserAmount:
			values[i] = new(decimal.Decimal)
		case appgood.FieldOnline, appgood.FieldVisible, appgood.FieldEnablePurchase, appgood.FieldEnableProductPage, appgood.FieldEnableSetCommission, appgood.FieldPackageWithRequireds:
			values[i] = new(sql.NullBool)
		case appgood.FieldID, appgood.FieldCreatedAt, appgood.FieldUpdatedAt, appgood.FieldDeletedAt, appgood.FieldDisplayIndex, appgood.FieldSaleStartAt, appgood.FieldSaleEndAt, appgood.FieldServiceStartAt, appgood.FieldCancellableBeforeStart, appgood.FieldMinOrderDuration, appgood.FieldMaxOrderDuration:
			values[i] = new(sql.NullInt64)
		case appgood.FieldGoodName, appgood.FieldGoodBanner, appgood.FieldCancelMode, appgood.FieldProductPage:
			values[i] = new(sql.NullString)
		case appgood.FieldEntID, appgood.FieldAppID, appgood.FieldGoodID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppGood fields.
func (ag *AppGood) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appgood.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ag.ID = uint32(value.Int64)
		case appgood.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				ag.EntID = *value
			}
		case appgood.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ag.CreatedAt = uint32(value.Int64)
			}
		case appgood.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ag.UpdatedAt = uint32(value.Int64)
			}
		case appgood.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ag.DeletedAt = uint32(value.Int64)
			}
		case appgood.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				ag.AppID = *value
			}
		case appgood.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				ag.GoodID = *value
			}
		case appgood.FieldOnline:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field online", values[i])
			} else if value.Valid {
				ag.Online = value.Bool
			}
		case appgood.FieldVisible:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field visible", values[i])
			} else if value.Valid {
				ag.Visible = value.Bool
			}
		case appgood.FieldGoodName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field good_name", values[i])
			} else if value.Valid {
				ag.GoodName = value.String
			}
		case appgood.FieldUnitPrice:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field unit_price", values[i])
			} else if value != nil {
				ag.UnitPrice = *value
			}
		case appgood.FieldPackagePrice:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field package_price", values[i])
			} else if value != nil {
				ag.PackagePrice = *value
			}
		case appgood.FieldDisplayIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field display_index", values[i])
			} else if value.Valid {
				ag.DisplayIndex = int32(value.Int64)
			}
		case appgood.FieldSaleStartAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sale_start_at", values[i])
			} else if value.Valid {
				ag.SaleStartAt = uint32(value.Int64)
			}
		case appgood.FieldSaleEndAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sale_end_at", values[i])
			} else if value.Valid {
				ag.SaleEndAt = uint32(value.Int64)
			}
		case appgood.FieldServiceStartAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field service_start_at", values[i])
			} else if value.Valid {
				ag.ServiceStartAt = uint32(value.Int64)
			}
		case appgood.FieldTechnicalFeeRatio:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field technical_fee_ratio", values[i])
			} else if value != nil {
				ag.TechnicalFeeRatio = *value
			}
		case appgood.FieldElectricityFeeRatio:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field electricity_fee_ratio", values[i])
			} else if value != nil {
				ag.ElectricityFeeRatio = *value
			}
		case appgood.FieldDescriptions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field descriptions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ag.Descriptions); err != nil {
					return fmt.Errorf("unmarshal field descriptions: %w", err)
				}
			}
		case appgood.FieldGoodBanner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field good_banner", values[i])
			} else if value.Valid {
				ag.GoodBanner = value.String
			}
		case appgood.FieldDisplayNames:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field display_names", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ag.DisplayNames); err != nil {
					return fmt.Errorf("unmarshal field display_names: %w", err)
				}
			}
		case appgood.FieldEnablePurchase:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable_purchase", values[i])
			} else if value.Valid {
				ag.EnablePurchase = value.Bool
			}
		case appgood.FieldEnableProductPage:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable_product_page", values[i])
			} else if value.Valid {
				ag.EnableProductPage = value.Bool
			}
		case appgood.FieldCancelMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cancel_mode", values[i])
			} else if value.Valid {
				ag.CancelMode = value.String
			}
		case appgood.FieldDisplayColors:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field display_colors", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ag.DisplayColors); err != nil {
					return fmt.Errorf("unmarshal field display_colors: %w", err)
				}
			}
		case appgood.FieldCancellableBeforeStart:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cancellable_before_start", values[i])
			} else if value.Valid {
				ag.CancellableBeforeStart = uint32(value.Int64)
			}
		case appgood.FieldProductPage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_page", values[i])
			} else if value.Valid {
				ag.ProductPage = value.String
			}
		case appgood.FieldEnableSetCommission:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable_set_commission", values[i])
			} else if value.Valid {
				ag.EnableSetCommission = value.Bool
			}
		case appgood.FieldPosters:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field posters", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ag.Posters); err != nil {
					return fmt.Errorf("unmarshal field posters: %w", err)
				}
			}
		case appgood.FieldMinOrderAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field min_order_amount", values[i])
			} else if value != nil {
				ag.MinOrderAmount = *value
			}
		case appgood.FieldMaxOrderAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field max_order_amount", values[i])
			} else if value != nil {
				ag.MaxOrderAmount = *value
			}
		case appgood.FieldMaxUserAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field max_user_amount", values[i])
			} else if value != nil {
				ag.MaxUserAmount = *value
			}
		case appgood.FieldMinOrderDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field min_order_duration", values[i])
			} else if value.Valid {
				ag.MinOrderDuration = uint32(value.Int64)
			}
		case appgood.FieldMaxOrderDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_order_duration", values[i])
			} else if value.Valid {
				ag.MaxOrderDuration = uint32(value.Int64)
			}
		case appgood.FieldPackageWithRequireds:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field package_with_requireds", values[i])
			} else if value.Valid {
				ag.PackageWithRequireds = value.Bool
			}
		default:
			ag.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppGood.
// This includes values selected through modifiers, order, etc.
func (ag *AppGood) Value(name string) (ent.Value, error) {
	return ag.selectValues.Get(name)
}

// Update returns a builder for updating this AppGood.
// Note that you need to call AppGood.Unwrap() before calling this method if this AppGood
// was returned from a transaction, and the transaction was committed or rolled back.
func (ag *AppGood) Update() *AppGoodUpdateOne {
	return NewAppGoodClient(ag.config).UpdateOne(ag)
}

// Unwrap unwraps the AppGood entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ag *AppGood) Unwrap() *AppGood {
	_tx, ok := ag.config.driver.(*txDriver)
	if !ok {
		panic("generated: AppGood is not a transactional entity")
	}
	ag.config.driver = _tx.drv
	return ag
}

// String implements the fmt.Stringer.
func (ag *AppGood) String() string {
	var builder strings.Builder
	builder.WriteString("AppGood(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ag.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", ag.EntID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", ag.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ag.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", ag.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", ag.AppID))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", ag.GoodID))
	builder.WriteString(", ")
	builder.WriteString("online=")
	builder.WriteString(fmt.Sprintf("%v", ag.Online))
	builder.WriteString(", ")
	builder.WriteString("visible=")
	builder.WriteString(fmt.Sprintf("%v", ag.Visible))
	builder.WriteString(", ")
	builder.WriteString("good_name=")
	builder.WriteString(ag.GoodName)
	builder.WriteString(", ")
	builder.WriteString("unit_price=")
	builder.WriteString(fmt.Sprintf("%v", ag.UnitPrice))
	builder.WriteString(", ")
	builder.WriteString("package_price=")
	builder.WriteString(fmt.Sprintf("%v", ag.PackagePrice))
	builder.WriteString(", ")
	builder.WriteString("display_index=")
	builder.WriteString(fmt.Sprintf("%v", ag.DisplayIndex))
	builder.WriteString(", ")
	builder.WriteString("sale_start_at=")
	builder.WriteString(fmt.Sprintf("%v", ag.SaleStartAt))
	builder.WriteString(", ")
	builder.WriteString("sale_end_at=")
	builder.WriteString(fmt.Sprintf("%v", ag.SaleEndAt))
	builder.WriteString(", ")
	builder.WriteString("service_start_at=")
	builder.WriteString(fmt.Sprintf("%v", ag.ServiceStartAt))
	builder.WriteString(", ")
	builder.WriteString("technical_fee_ratio=")
	builder.WriteString(fmt.Sprintf("%v", ag.TechnicalFeeRatio))
	builder.WriteString(", ")
	builder.WriteString("electricity_fee_ratio=")
	builder.WriteString(fmt.Sprintf("%v", ag.ElectricityFeeRatio))
	builder.WriteString(", ")
	builder.WriteString("descriptions=")
	builder.WriteString(fmt.Sprintf("%v", ag.Descriptions))
	builder.WriteString(", ")
	builder.WriteString("good_banner=")
	builder.WriteString(ag.GoodBanner)
	builder.WriteString(", ")
	builder.WriteString("display_names=")
	builder.WriteString(fmt.Sprintf("%v", ag.DisplayNames))
	builder.WriteString(", ")
	builder.WriteString("enable_purchase=")
	builder.WriteString(fmt.Sprintf("%v", ag.EnablePurchase))
	builder.WriteString(", ")
	builder.WriteString("enable_product_page=")
	builder.WriteString(fmt.Sprintf("%v", ag.EnableProductPage))
	builder.WriteString(", ")
	builder.WriteString("cancel_mode=")
	builder.WriteString(ag.CancelMode)
	builder.WriteString(", ")
	builder.WriteString("display_colors=")
	builder.WriteString(fmt.Sprintf("%v", ag.DisplayColors))
	builder.WriteString(", ")
	builder.WriteString("cancellable_before_start=")
	builder.WriteString(fmt.Sprintf("%v", ag.CancellableBeforeStart))
	builder.WriteString(", ")
	builder.WriteString("product_page=")
	builder.WriteString(ag.ProductPage)
	builder.WriteString(", ")
	builder.WriteString("enable_set_commission=")
	builder.WriteString(fmt.Sprintf("%v", ag.EnableSetCommission))
	builder.WriteString(", ")
	builder.WriteString("posters=")
	builder.WriteString(fmt.Sprintf("%v", ag.Posters))
	builder.WriteString(", ")
	builder.WriteString("min_order_amount=")
	builder.WriteString(fmt.Sprintf("%v", ag.MinOrderAmount))
	builder.WriteString(", ")
	builder.WriteString("max_order_amount=")
	builder.WriteString(fmt.Sprintf("%v", ag.MaxOrderAmount))
	builder.WriteString(", ")
	builder.WriteString("max_user_amount=")
	builder.WriteString(fmt.Sprintf("%v", ag.MaxUserAmount))
	builder.WriteString(", ")
	builder.WriteString("min_order_duration=")
	builder.WriteString(fmt.Sprintf("%v", ag.MinOrderDuration))
	builder.WriteString(", ")
	builder.WriteString("max_order_duration=")
	builder.WriteString(fmt.Sprintf("%v", ag.MaxOrderDuration))
	builder.WriteString(", ")
	builder.WriteString("package_with_requireds=")
	builder.WriteString(fmt.Sprintf("%v", ag.PackageWithRequireds))
	builder.WriteByte(')')
	return builder.String()
}

// AppGoods is a parsable slice of AppGood.
type AppGoods []*AppGood

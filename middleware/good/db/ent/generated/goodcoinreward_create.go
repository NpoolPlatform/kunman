// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/goodcoinreward"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// GoodCoinRewardCreate is the builder for creating a GoodCoinReward entity.
type GoodCoinRewardCreate struct {
	config
	mutation *GoodCoinRewardMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (gcrc *GoodCoinRewardCreate) SetEntID(u uuid.UUID) *GoodCoinRewardCreate {
	gcrc.mutation.SetEntID(u)
	return gcrc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (gcrc *GoodCoinRewardCreate) SetNillableEntID(u *uuid.UUID) *GoodCoinRewardCreate {
	if u != nil {
		gcrc.SetEntID(*u)
	}
	return gcrc
}

// SetCreatedAt sets the "created_at" field.
func (gcrc *GoodCoinRewardCreate) SetCreatedAt(u uint32) *GoodCoinRewardCreate {
	gcrc.mutation.SetCreatedAt(u)
	return gcrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gcrc *GoodCoinRewardCreate) SetNillableCreatedAt(u *uint32) *GoodCoinRewardCreate {
	if u != nil {
		gcrc.SetCreatedAt(*u)
	}
	return gcrc
}

// SetUpdatedAt sets the "updated_at" field.
func (gcrc *GoodCoinRewardCreate) SetUpdatedAt(u uint32) *GoodCoinRewardCreate {
	gcrc.mutation.SetUpdatedAt(u)
	return gcrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gcrc *GoodCoinRewardCreate) SetNillableUpdatedAt(u *uint32) *GoodCoinRewardCreate {
	if u != nil {
		gcrc.SetUpdatedAt(*u)
	}
	return gcrc
}

// SetDeletedAt sets the "deleted_at" field.
func (gcrc *GoodCoinRewardCreate) SetDeletedAt(u uint32) *GoodCoinRewardCreate {
	gcrc.mutation.SetDeletedAt(u)
	return gcrc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gcrc *GoodCoinRewardCreate) SetNillableDeletedAt(u *uint32) *GoodCoinRewardCreate {
	if u != nil {
		gcrc.SetDeletedAt(*u)
	}
	return gcrc
}

// SetGoodID sets the "good_id" field.
func (gcrc *GoodCoinRewardCreate) SetGoodID(u uuid.UUID) *GoodCoinRewardCreate {
	gcrc.mutation.SetGoodID(u)
	return gcrc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (gcrc *GoodCoinRewardCreate) SetNillableGoodID(u *uuid.UUID) *GoodCoinRewardCreate {
	if u != nil {
		gcrc.SetGoodID(*u)
	}
	return gcrc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (gcrc *GoodCoinRewardCreate) SetCoinTypeID(u uuid.UUID) *GoodCoinRewardCreate {
	gcrc.mutation.SetCoinTypeID(u)
	return gcrc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (gcrc *GoodCoinRewardCreate) SetNillableCoinTypeID(u *uuid.UUID) *GoodCoinRewardCreate {
	if u != nil {
		gcrc.SetCoinTypeID(*u)
	}
	return gcrc
}

// SetRewardTid sets the "reward_tid" field.
func (gcrc *GoodCoinRewardCreate) SetRewardTid(u uuid.UUID) *GoodCoinRewardCreate {
	gcrc.mutation.SetRewardTid(u)
	return gcrc
}

// SetNillableRewardTid sets the "reward_tid" field if the given value is not nil.
func (gcrc *GoodCoinRewardCreate) SetNillableRewardTid(u *uuid.UUID) *GoodCoinRewardCreate {
	if u != nil {
		gcrc.SetRewardTid(*u)
	}
	return gcrc
}

// SetNextRewardStartAmount sets the "next_reward_start_amount" field.
func (gcrc *GoodCoinRewardCreate) SetNextRewardStartAmount(d decimal.Decimal) *GoodCoinRewardCreate {
	gcrc.mutation.SetNextRewardStartAmount(d)
	return gcrc
}

// SetNillableNextRewardStartAmount sets the "next_reward_start_amount" field if the given value is not nil.
func (gcrc *GoodCoinRewardCreate) SetNillableNextRewardStartAmount(d *decimal.Decimal) *GoodCoinRewardCreate {
	if d != nil {
		gcrc.SetNextRewardStartAmount(*d)
	}
	return gcrc
}

// SetLastRewardAmount sets the "last_reward_amount" field.
func (gcrc *GoodCoinRewardCreate) SetLastRewardAmount(d decimal.Decimal) *GoodCoinRewardCreate {
	gcrc.mutation.SetLastRewardAmount(d)
	return gcrc
}

// SetNillableLastRewardAmount sets the "last_reward_amount" field if the given value is not nil.
func (gcrc *GoodCoinRewardCreate) SetNillableLastRewardAmount(d *decimal.Decimal) *GoodCoinRewardCreate {
	if d != nil {
		gcrc.SetLastRewardAmount(*d)
	}
	return gcrc
}

// SetLastUnitRewardAmount sets the "last_unit_reward_amount" field.
func (gcrc *GoodCoinRewardCreate) SetLastUnitRewardAmount(d decimal.Decimal) *GoodCoinRewardCreate {
	gcrc.mutation.SetLastUnitRewardAmount(d)
	return gcrc
}

// SetNillableLastUnitRewardAmount sets the "last_unit_reward_amount" field if the given value is not nil.
func (gcrc *GoodCoinRewardCreate) SetNillableLastUnitRewardAmount(d *decimal.Decimal) *GoodCoinRewardCreate {
	if d != nil {
		gcrc.SetLastUnitRewardAmount(*d)
	}
	return gcrc
}

// SetTotalRewardAmount sets the "total_reward_amount" field.
func (gcrc *GoodCoinRewardCreate) SetTotalRewardAmount(d decimal.Decimal) *GoodCoinRewardCreate {
	gcrc.mutation.SetTotalRewardAmount(d)
	return gcrc
}

// SetNillableTotalRewardAmount sets the "total_reward_amount" field if the given value is not nil.
func (gcrc *GoodCoinRewardCreate) SetNillableTotalRewardAmount(d *decimal.Decimal) *GoodCoinRewardCreate {
	if d != nil {
		gcrc.SetTotalRewardAmount(*d)
	}
	return gcrc
}

// SetID sets the "id" field.
func (gcrc *GoodCoinRewardCreate) SetID(u uint32) *GoodCoinRewardCreate {
	gcrc.mutation.SetID(u)
	return gcrc
}

// Mutation returns the GoodCoinRewardMutation object of the builder.
func (gcrc *GoodCoinRewardCreate) Mutation() *GoodCoinRewardMutation {
	return gcrc.mutation
}

// Save creates the GoodCoinReward in the database.
func (gcrc *GoodCoinRewardCreate) Save(ctx context.Context) (*GoodCoinReward, error) {
	gcrc.defaults()
	return withHooks(ctx, gcrc.sqlSave, gcrc.mutation, gcrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gcrc *GoodCoinRewardCreate) SaveX(ctx context.Context) *GoodCoinReward {
	v, err := gcrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcrc *GoodCoinRewardCreate) Exec(ctx context.Context) error {
	_, err := gcrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcrc *GoodCoinRewardCreate) ExecX(ctx context.Context) {
	if err := gcrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gcrc *GoodCoinRewardCreate) defaults() {
	if _, ok := gcrc.mutation.EntID(); !ok {
		v := goodcoinreward.DefaultEntID()
		gcrc.mutation.SetEntID(v)
	}
	if _, ok := gcrc.mutation.CreatedAt(); !ok {
		v := goodcoinreward.DefaultCreatedAt()
		gcrc.mutation.SetCreatedAt(v)
	}
	if _, ok := gcrc.mutation.UpdatedAt(); !ok {
		v := goodcoinreward.DefaultUpdatedAt()
		gcrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gcrc.mutation.DeletedAt(); !ok {
		v := goodcoinreward.DefaultDeletedAt()
		gcrc.mutation.SetDeletedAt(v)
	}
	if _, ok := gcrc.mutation.GoodID(); !ok {
		v := goodcoinreward.DefaultGoodID()
		gcrc.mutation.SetGoodID(v)
	}
	if _, ok := gcrc.mutation.CoinTypeID(); !ok {
		v := goodcoinreward.DefaultCoinTypeID()
		gcrc.mutation.SetCoinTypeID(v)
	}
	if _, ok := gcrc.mutation.RewardTid(); !ok {
		v := goodcoinreward.DefaultRewardTid()
		gcrc.mutation.SetRewardTid(v)
	}
	if _, ok := gcrc.mutation.NextRewardStartAmount(); !ok {
		v := goodcoinreward.DefaultNextRewardStartAmount
		gcrc.mutation.SetNextRewardStartAmount(v)
	}
	if _, ok := gcrc.mutation.LastRewardAmount(); !ok {
		v := goodcoinreward.DefaultLastRewardAmount
		gcrc.mutation.SetLastRewardAmount(v)
	}
	if _, ok := gcrc.mutation.LastUnitRewardAmount(); !ok {
		v := goodcoinreward.DefaultLastUnitRewardAmount
		gcrc.mutation.SetLastUnitRewardAmount(v)
	}
	if _, ok := gcrc.mutation.TotalRewardAmount(); !ok {
		v := goodcoinreward.DefaultTotalRewardAmount
		gcrc.mutation.SetTotalRewardAmount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gcrc *GoodCoinRewardCreate) check() error {
	if _, ok := gcrc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "GoodCoinReward.ent_id"`)}
	}
	if _, ok := gcrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "GoodCoinReward.created_at"`)}
	}
	if _, ok := gcrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "GoodCoinReward.updated_at"`)}
	}
	if _, ok := gcrc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "GoodCoinReward.deleted_at"`)}
	}
	return nil
}

func (gcrc *GoodCoinRewardCreate) sqlSave(ctx context.Context) (*GoodCoinReward, error) {
	if err := gcrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gcrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gcrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	gcrc.mutation.id = &_node.ID
	gcrc.mutation.done = true
	return _node, nil
}

func (gcrc *GoodCoinRewardCreate) createSpec() (*GoodCoinReward, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodCoinReward{config: gcrc.config}
		_spec = sqlgraph.NewCreateSpec(goodcoinreward.Table, sqlgraph.NewFieldSpec(goodcoinreward.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = gcrc.conflict
	if id, ok := gcrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gcrc.mutation.EntID(); ok {
		_spec.SetField(goodcoinreward.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := gcrc.mutation.CreatedAt(); ok {
		_spec.SetField(goodcoinreward.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := gcrc.mutation.UpdatedAt(); ok {
		_spec.SetField(goodcoinreward.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := gcrc.mutation.DeletedAt(); ok {
		_spec.SetField(goodcoinreward.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := gcrc.mutation.GoodID(); ok {
		_spec.SetField(goodcoinreward.FieldGoodID, field.TypeUUID, value)
		_node.GoodID = value
	}
	if value, ok := gcrc.mutation.CoinTypeID(); ok {
		_spec.SetField(goodcoinreward.FieldCoinTypeID, field.TypeUUID, value)
		_node.CoinTypeID = value
	}
	if value, ok := gcrc.mutation.RewardTid(); ok {
		_spec.SetField(goodcoinreward.FieldRewardTid, field.TypeUUID, value)
		_node.RewardTid = value
	}
	if value, ok := gcrc.mutation.NextRewardStartAmount(); ok {
		_spec.SetField(goodcoinreward.FieldNextRewardStartAmount, field.TypeOther, value)
		_node.NextRewardStartAmount = value
	}
	if value, ok := gcrc.mutation.LastRewardAmount(); ok {
		_spec.SetField(goodcoinreward.FieldLastRewardAmount, field.TypeOther, value)
		_node.LastRewardAmount = value
	}
	if value, ok := gcrc.mutation.LastUnitRewardAmount(); ok {
		_spec.SetField(goodcoinreward.FieldLastUnitRewardAmount, field.TypeOther, value)
		_node.LastUnitRewardAmount = value
	}
	if value, ok := gcrc.mutation.TotalRewardAmount(); ok {
		_spec.SetField(goodcoinreward.FieldTotalRewardAmount, field.TypeOther, value)
		_node.TotalRewardAmount = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodCoinReward.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodCoinRewardUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (gcrc *GoodCoinRewardCreate) OnConflict(opts ...sql.ConflictOption) *GoodCoinRewardUpsertOne {
	gcrc.conflict = opts
	return &GoodCoinRewardUpsertOne{
		create: gcrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodCoinReward.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gcrc *GoodCoinRewardCreate) OnConflictColumns(columns ...string) *GoodCoinRewardUpsertOne {
	gcrc.conflict = append(gcrc.conflict, sql.ConflictColumns(columns...))
	return &GoodCoinRewardUpsertOne{
		create: gcrc,
	}
}

type (
	// GoodCoinRewardUpsertOne is the builder for "upsert"-ing
	//  one GoodCoinReward node.
	GoodCoinRewardUpsertOne struct {
		create *GoodCoinRewardCreate
	}

	// GoodCoinRewardUpsert is the "OnConflict" setter.
	GoodCoinRewardUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *GoodCoinRewardUpsert) SetEntID(v uuid.UUID) *GoodCoinRewardUpsert {
	u.Set(goodcoinreward.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodCoinRewardUpsert) UpdateEntID() *GoodCoinRewardUpsert {
	u.SetExcluded(goodcoinreward.FieldEntID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodCoinRewardUpsert) SetCreatedAt(v uint32) *GoodCoinRewardUpsert {
	u.Set(goodcoinreward.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodCoinRewardUpsert) UpdateCreatedAt() *GoodCoinRewardUpsert {
	u.SetExcluded(goodcoinreward.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodCoinRewardUpsert) AddCreatedAt(v uint32) *GoodCoinRewardUpsert {
	u.Add(goodcoinreward.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodCoinRewardUpsert) SetUpdatedAt(v uint32) *GoodCoinRewardUpsert {
	u.Set(goodcoinreward.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodCoinRewardUpsert) UpdateUpdatedAt() *GoodCoinRewardUpsert {
	u.SetExcluded(goodcoinreward.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodCoinRewardUpsert) AddUpdatedAt(v uint32) *GoodCoinRewardUpsert {
	u.Add(goodcoinreward.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodCoinRewardUpsert) SetDeletedAt(v uint32) *GoodCoinRewardUpsert {
	u.Set(goodcoinreward.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodCoinRewardUpsert) UpdateDeletedAt() *GoodCoinRewardUpsert {
	u.SetExcluded(goodcoinreward.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodCoinRewardUpsert) AddDeletedAt(v uint32) *GoodCoinRewardUpsert {
	u.Add(goodcoinreward.FieldDeletedAt, v)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *GoodCoinRewardUpsert) SetGoodID(v uuid.UUID) *GoodCoinRewardUpsert {
	u.Set(goodcoinreward.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodCoinRewardUpsert) UpdateGoodID() *GoodCoinRewardUpsert {
	u.SetExcluded(goodcoinreward.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodCoinRewardUpsert) ClearGoodID() *GoodCoinRewardUpsert {
	u.SetNull(goodcoinreward.FieldGoodID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GoodCoinRewardUpsert) SetCoinTypeID(v uuid.UUID) *GoodCoinRewardUpsert {
	u.Set(goodcoinreward.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GoodCoinRewardUpsert) UpdateCoinTypeID() *GoodCoinRewardUpsert {
	u.SetExcluded(goodcoinreward.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *GoodCoinRewardUpsert) ClearCoinTypeID() *GoodCoinRewardUpsert {
	u.SetNull(goodcoinreward.FieldCoinTypeID)
	return u
}

// SetRewardTid sets the "reward_tid" field.
func (u *GoodCoinRewardUpsert) SetRewardTid(v uuid.UUID) *GoodCoinRewardUpsert {
	u.Set(goodcoinreward.FieldRewardTid, v)
	return u
}

// UpdateRewardTid sets the "reward_tid" field to the value that was provided on create.
func (u *GoodCoinRewardUpsert) UpdateRewardTid() *GoodCoinRewardUpsert {
	u.SetExcluded(goodcoinreward.FieldRewardTid)
	return u
}

// ClearRewardTid clears the value of the "reward_tid" field.
func (u *GoodCoinRewardUpsert) ClearRewardTid() *GoodCoinRewardUpsert {
	u.SetNull(goodcoinreward.FieldRewardTid)
	return u
}

// SetNextRewardStartAmount sets the "next_reward_start_amount" field.
func (u *GoodCoinRewardUpsert) SetNextRewardStartAmount(v decimal.Decimal) *GoodCoinRewardUpsert {
	u.Set(goodcoinreward.FieldNextRewardStartAmount, v)
	return u
}

// UpdateNextRewardStartAmount sets the "next_reward_start_amount" field to the value that was provided on create.
func (u *GoodCoinRewardUpsert) UpdateNextRewardStartAmount() *GoodCoinRewardUpsert {
	u.SetExcluded(goodcoinreward.FieldNextRewardStartAmount)
	return u
}

// ClearNextRewardStartAmount clears the value of the "next_reward_start_amount" field.
func (u *GoodCoinRewardUpsert) ClearNextRewardStartAmount() *GoodCoinRewardUpsert {
	u.SetNull(goodcoinreward.FieldNextRewardStartAmount)
	return u
}

// SetLastRewardAmount sets the "last_reward_amount" field.
func (u *GoodCoinRewardUpsert) SetLastRewardAmount(v decimal.Decimal) *GoodCoinRewardUpsert {
	u.Set(goodcoinreward.FieldLastRewardAmount, v)
	return u
}

// UpdateLastRewardAmount sets the "last_reward_amount" field to the value that was provided on create.
func (u *GoodCoinRewardUpsert) UpdateLastRewardAmount() *GoodCoinRewardUpsert {
	u.SetExcluded(goodcoinreward.FieldLastRewardAmount)
	return u
}

// ClearLastRewardAmount clears the value of the "last_reward_amount" field.
func (u *GoodCoinRewardUpsert) ClearLastRewardAmount() *GoodCoinRewardUpsert {
	u.SetNull(goodcoinreward.FieldLastRewardAmount)
	return u
}

// SetLastUnitRewardAmount sets the "last_unit_reward_amount" field.
func (u *GoodCoinRewardUpsert) SetLastUnitRewardAmount(v decimal.Decimal) *GoodCoinRewardUpsert {
	u.Set(goodcoinreward.FieldLastUnitRewardAmount, v)
	return u
}

// UpdateLastUnitRewardAmount sets the "last_unit_reward_amount" field to the value that was provided on create.
func (u *GoodCoinRewardUpsert) UpdateLastUnitRewardAmount() *GoodCoinRewardUpsert {
	u.SetExcluded(goodcoinreward.FieldLastUnitRewardAmount)
	return u
}

// ClearLastUnitRewardAmount clears the value of the "last_unit_reward_amount" field.
func (u *GoodCoinRewardUpsert) ClearLastUnitRewardAmount() *GoodCoinRewardUpsert {
	u.SetNull(goodcoinreward.FieldLastUnitRewardAmount)
	return u
}

// SetTotalRewardAmount sets the "total_reward_amount" field.
func (u *GoodCoinRewardUpsert) SetTotalRewardAmount(v decimal.Decimal) *GoodCoinRewardUpsert {
	u.Set(goodcoinreward.FieldTotalRewardAmount, v)
	return u
}

// UpdateTotalRewardAmount sets the "total_reward_amount" field to the value that was provided on create.
func (u *GoodCoinRewardUpsert) UpdateTotalRewardAmount() *GoodCoinRewardUpsert {
	u.SetExcluded(goodcoinreward.FieldTotalRewardAmount)
	return u
}

// ClearTotalRewardAmount clears the value of the "total_reward_amount" field.
func (u *GoodCoinRewardUpsert) ClearTotalRewardAmount() *GoodCoinRewardUpsert {
	u.SetNull(goodcoinreward.FieldTotalRewardAmount)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GoodCoinReward.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodcoinreward.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GoodCoinRewardUpsertOne) UpdateNewValues() *GoodCoinRewardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(goodcoinreward.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodCoinReward.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GoodCoinRewardUpsertOne) Ignore() *GoodCoinRewardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodCoinRewardUpsertOne) DoNothing() *GoodCoinRewardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodCoinRewardCreate.OnConflict
// documentation for more info.
func (u *GoodCoinRewardUpsertOne) Update(set func(*GoodCoinRewardUpsert)) *GoodCoinRewardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodCoinRewardUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *GoodCoinRewardUpsertOne) SetEntID(v uuid.UUID) *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodCoinRewardUpsertOne) UpdateEntID() *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodCoinRewardUpsertOne) SetCreatedAt(v uint32) *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodCoinRewardUpsertOne) AddCreatedAt(v uint32) *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodCoinRewardUpsertOne) UpdateCreatedAt() *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodCoinRewardUpsertOne) SetUpdatedAt(v uint32) *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodCoinRewardUpsertOne) AddUpdatedAt(v uint32) *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodCoinRewardUpsertOne) UpdateUpdatedAt() *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodCoinRewardUpsertOne) SetDeletedAt(v uint32) *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodCoinRewardUpsertOne) AddDeletedAt(v uint32) *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodCoinRewardUpsertOne) UpdateDeletedAt() *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetGoodID sets the "good_id" field.
func (u *GoodCoinRewardUpsertOne) SetGoodID(v uuid.UUID) *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodCoinRewardUpsertOne) UpdateGoodID() *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodCoinRewardUpsertOne) ClearGoodID() *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.ClearGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GoodCoinRewardUpsertOne) SetCoinTypeID(v uuid.UUID) *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GoodCoinRewardUpsertOne) UpdateCoinTypeID() *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *GoodCoinRewardUpsertOne) ClearCoinTypeID() *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetRewardTid sets the "reward_tid" field.
func (u *GoodCoinRewardUpsertOne) SetRewardTid(v uuid.UUID) *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.SetRewardTid(v)
	})
}

// UpdateRewardTid sets the "reward_tid" field to the value that was provided on create.
func (u *GoodCoinRewardUpsertOne) UpdateRewardTid() *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.UpdateRewardTid()
	})
}

// ClearRewardTid clears the value of the "reward_tid" field.
func (u *GoodCoinRewardUpsertOne) ClearRewardTid() *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.ClearRewardTid()
	})
}

// SetNextRewardStartAmount sets the "next_reward_start_amount" field.
func (u *GoodCoinRewardUpsertOne) SetNextRewardStartAmount(v decimal.Decimal) *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.SetNextRewardStartAmount(v)
	})
}

// UpdateNextRewardStartAmount sets the "next_reward_start_amount" field to the value that was provided on create.
func (u *GoodCoinRewardUpsertOne) UpdateNextRewardStartAmount() *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.UpdateNextRewardStartAmount()
	})
}

// ClearNextRewardStartAmount clears the value of the "next_reward_start_amount" field.
func (u *GoodCoinRewardUpsertOne) ClearNextRewardStartAmount() *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.ClearNextRewardStartAmount()
	})
}

// SetLastRewardAmount sets the "last_reward_amount" field.
func (u *GoodCoinRewardUpsertOne) SetLastRewardAmount(v decimal.Decimal) *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.SetLastRewardAmount(v)
	})
}

// UpdateLastRewardAmount sets the "last_reward_amount" field to the value that was provided on create.
func (u *GoodCoinRewardUpsertOne) UpdateLastRewardAmount() *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.UpdateLastRewardAmount()
	})
}

// ClearLastRewardAmount clears the value of the "last_reward_amount" field.
func (u *GoodCoinRewardUpsertOne) ClearLastRewardAmount() *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.ClearLastRewardAmount()
	})
}

// SetLastUnitRewardAmount sets the "last_unit_reward_amount" field.
func (u *GoodCoinRewardUpsertOne) SetLastUnitRewardAmount(v decimal.Decimal) *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.SetLastUnitRewardAmount(v)
	})
}

// UpdateLastUnitRewardAmount sets the "last_unit_reward_amount" field to the value that was provided on create.
func (u *GoodCoinRewardUpsertOne) UpdateLastUnitRewardAmount() *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.UpdateLastUnitRewardAmount()
	})
}

// ClearLastUnitRewardAmount clears the value of the "last_unit_reward_amount" field.
func (u *GoodCoinRewardUpsertOne) ClearLastUnitRewardAmount() *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.ClearLastUnitRewardAmount()
	})
}

// SetTotalRewardAmount sets the "total_reward_amount" field.
func (u *GoodCoinRewardUpsertOne) SetTotalRewardAmount(v decimal.Decimal) *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.SetTotalRewardAmount(v)
	})
}

// UpdateTotalRewardAmount sets the "total_reward_amount" field to the value that was provided on create.
func (u *GoodCoinRewardUpsertOne) UpdateTotalRewardAmount() *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.UpdateTotalRewardAmount()
	})
}

// ClearTotalRewardAmount clears the value of the "total_reward_amount" field.
func (u *GoodCoinRewardUpsertOne) ClearTotalRewardAmount() *GoodCoinRewardUpsertOne {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.ClearTotalRewardAmount()
	})
}

// Exec executes the query.
func (u *GoodCoinRewardUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for GoodCoinRewardCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodCoinRewardUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GoodCoinRewardUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GoodCoinRewardUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GoodCoinRewardCreateBulk is the builder for creating many GoodCoinReward entities in bulk.
type GoodCoinRewardCreateBulk struct {
	config
	err      error
	builders []*GoodCoinRewardCreate
	conflict []sql.ConflictOption
}

// Save creates the GoodCoinReward entities in the database.
func (gcrcb *GoodCoinRewardCreateBulk) Save(ctx context.Context) ([]*GoodCoinReward, error) {
	if gcrcb.err != nil {
		return nil, gcrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gcrcb.builders))
	nodes := make([]*GoodCoinReward, len(gcrcb.builders))
	mutators := make([]Mutator, len(gcrcb.builders))
	for i := range gcrcb.builders {
		func(i int, root context.Context) {
			builder := gcrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodCoinRewardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gcrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcrcb *GoodCoinRewardCreateBulk) SaveX(ctx context.Context) []*GoodCoinReward {
	v, err := gcrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcrcb *GoodCoinRewardCreateBulk) Exec(ctx context.Context) error {
	_, err := gcrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcrcb *GoodCoinRewardCreateBulk) ExecX(ctx context.Context) {
	if err := gcrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodCoinReward.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodCoinRewardUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (gcrcb *GoodCoinRewardCreateBulk) OnConflict(opts ...sql.ConflictOption) *GoodCoinRewardUpsertBulk {
	gcrcb.conflict = opts
	return &GoodCoinRewardUpsertBulk{
		create: gcrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodCoinReward.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gcrcb *GoodCoinRewardCreateBulk) OnConflictColumns(columns ...string) *GoodCoinRewardUpsertBulk {
	gcrcb.conflict = append(gcrcb.conflict, sql.ConflictColumns(columns...))
	return &GoodCoinRewardUpsertBulk{
		create: gcrcb,
	}
}

// GoodCoinRewardUpsertBulk is the builder for "upsert"-ing
// a bulk of GoodCoinReward nodes.
type GoodCoinRewardUpsertBulk struct {
	create *GoodCoinRewardCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GoodCoinReward.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodcoinreward.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GoodCoinRewardUpsertBulk) UpdateNewValues() *GoodCoinRewardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(goodcoinreward.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodCoinReward.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GoodCoinRewardUpsertBulk) Ignore() *GoodCoinRewardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodCoinRewardUpsertBulk) DoNothing() *GoodCoinRewardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodCoinRewardCreateBulk.OnConflict
// documentation for more info.
func (u *GoodCoinRewardUpsertBulk) Update(set func(*GoodCoinRewardUpsert)) *GoodCoinRewardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodCoinRewardUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *GoodCoinRewardUpsertBulk) SetEntID(v uuid.UUID) *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodCoinRewardUpsertBulk) UpdateEntID() *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodCoinRewardUpsertBulk) SetCreatedAt(v uint32) *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodCoinRewardUpsertBulk) AddCreatedAt(v uint32) *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodCoinRewardUpsertBulk) UpdateCreatedAt() *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodCoinRewardUpsertBulk) SetUpdatedAt(v uint32) *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodCoinRewardUpsertBulk) AddUpdatedAt(v uint32) *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodCoinRewardUpsertBulk) UpdateUpdatedAt() *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodCoinRewardUpsertBulk) SetDeletedAt(v uint32) *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodCoinRewardUpsertBulk) AddDeletedAt(v uint32) *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodCoinRewardUpsertBulk) UpdateDeletedAt() *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetGoodID sets the "good_id" field.
func (u *GoodCoinRewardUpsertBulk) SetGoodID(v uuid.UUID) *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodCoinRewardUpsertBulk) UpdateGoodID() *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodCoinRewardUpsertBulk) ClearGoodID() *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.ClearGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GoodCoinRewardUpsertBulk) SetCoinTypeID(v uuid.UUID) *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GoodCoinRewardUpsertBulk) UpdateCoinTypeID() *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *GoodCoinRewardUpsertBulk) ClearCoinTypeID() *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetRewardTid sets the "reward_tid" field.
func (u *GoodCoinRewardUpsertBulk) SetRewardTid(v uuid.UUID) *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.SetRewardTid(v)
	})
}

// UpdateRewardTid sets the "reward_tid" field to the value that was provided on create.
func (u *GoodCoinRewardUpsertBulk) UpdateRewardTid() *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.UpdateRewardTid()
	})
}

// ClearRewardTid clears the value of the "reward_tid" field.
func (u *GoodCoinRewardUpsertBulk) ClearRewardTid() *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.ClearRewardTid()
	})
}

// SetNextRewardStartAmount sets the "next_reward_start_amount" field.
func (u *GoodCoinRewardUpsertBulk) SetNextRewardStartAmount(v decimal.Decimal) *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.SetNextRewardStartAmount(v)
	})
}

// UpdateNextRewardStartAmount sets the "next_reward_start_amount" field to the value that was provided on create.
func (u *GoodCoinRewardUpsertBulk) UpdateNextRewardStartAmount() *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.UpdateNextRewardStartAmount()
	})
}

// ClearNextRewardStartAmount clears the value of the "next_reward_start_amount" field.
func (u *GoodCoinRewardUpsertBulk) ClearNextRewardStartAmount() *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.ClearNextRewardStartAmount()
	})
}

// SetLastRewardAmount sets the "last_reward_amount" field.
func (u *GoodCoinRewardUpsertBulk) SetLastRewardAmount(v decimal.Decimal) *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.SetLastRewardAmount(v)
	})
}

// UpdateLastRewardAmount sets the "last_reward_amount" field to the value that was provided on create.
func (u *GoodCoinRewardUpsertBulk) UpdateLastRewardAmount() *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.UpdateLastRewardAmount()
	})
}

// ClearLastRewardAmount clears the value of the "last_reward_amount" field.
func (u *GoodCoinRewardUpsertBulk) ClearLastRewardAmount() *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.ClearLastRewardAmount()
	})
}

// SetLastUnitRewardAmount sets the "last_unit_reward_amount" field.
func (u *GoodCoinRewardUpsertBulk) SetLastUnitRewardAmount(v decimal.Decimal) *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.SetLastUnitRewardAmount(v)
	})
}

// UpdateLastUnitRewardAmount sets the "last_unit_reward_amount" field to the value that was provided on create.
func (u *GoodCoinRewardUpsertBulk) UpdateLastUnitRewardAmount() *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.UpdateLastUnitRewardAmount()
	})
}

// ClearLastUnitRewardAmount clears the value of the "last_unit_reward_amount" field.
func (u *GoodCoinRewardUpsertBulk) ClearLastUnitRewardAmount() *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.ClearLastUnitRewardAmount()
	})
}

// SetTotalRewardAmount sets the "total_reward_amount" field.
func (u *GoodCoinRewardUpsertBulk) SetTotalRewardAmount(v decimal.Decimal) *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.SetTotalRewardAmount(v)
	})
}

// UpdateTotalRewardAmount sets the "total_reward_amount" field to the value that was provided on create.
func (u *GoodCoinRewardUpsertBulk) UpdateTotalRewardAmount() *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.UpdateTotalRewardAmount()
	})
}

// ClearTotalRewardAmount clears the value of the "total_reward_amount" field.
func (u *GoodCoinRewardUpsertBulk) ClearTotalRewardAmount() *GoodCoinRewardUpsertBulk {
	return u.Update(func(s *GoodCoinRewardUpsert) {
		s.ClearTotalRewardAmount()
	})
}

// Exec executes the query.
func (u *GoodCoinRewardUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the GoodCoinRewardCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for GoodCoinRewardCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodCoinRewardUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

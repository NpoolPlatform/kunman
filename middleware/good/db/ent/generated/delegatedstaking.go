// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/delegatedstaking"
	"github.com/google/uuid"
)

// DelegatedStaking is the model entity for the DelegatedStaking schema.
type DelegatedStaking struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// ContractCodeURL holds the value of the "contract_code_url" field.
	ContractCodeURL string `json:"contract_code_url,omitempty"`
	// ContractCodeBranch holds the value of the "contract_code_branch" field.
	ContractCodeBranch string `json:"contract_code_branch,omitempty"`
	// ContractState holds the value of the "contract_state" field.
	ContractState string `json:"contract_state,omitempty"`
	selectValues  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DelegatedStaking) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case delegatedstaking.FieldID:
			values[i] = new(sql.NullInt64)
		case delegatedstaking.FieldContractCodeURL, delegatedstaking.FieldContractCodeBranch, delegatedstaking.FieldContractState:
			values[i] = new(sql.NullString)
		case delegatedstaking.FieldEntID, delegatedstaking.FieldGoodID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DelegatedStaking fields.
func (ds *DelegatedStaking) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case delegatedstaking.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ds.ID = uint32(value.Int64)
		case delegatedstaking.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				ds.EntID = *value
			}
		case delegatedstaking.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				ds.GoodID = *value
			}
		case delegatedstaking.FieldContractCodeURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contract_code_url", values[i])
			} else if value.Valid {
				ds.ContractCodeURL = value.String
			}
		case delegatedstaking.FieldContractCodeBranch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contract_code_branch", values[i])
			} else if value.Valid {
				ds.ContractCodeBranch = value.String
			}
		case delegatedstaking.FieldContractState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contract_state", values[i])
			} else if value.Valid {
				ds.ContractState = value.String
			}
		default:
			ds.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DelegatedStaking.
// This includes values selected through modifiers, order, etc.
func (ds *DelegatedStaking) Value(name string) (ent.Value, error) {
	return ds.selectValues.Get(name)
}

// Update returns a builder for updating this DelegatedStaking.
// Note that you need to call DelegatedStaking.Unwrap() before calling this method if this DelegatedStaking
// was returned from a transaction, and the transaction was committed or rolled back.
func (ds *DelegatedStaking) Update() *DelegatedStakingUpdateOne {
	return NewDelegatedStakingClient(ds.config).UpdateOne(ds)
}

// Unwrap unwraps the DelegatedStaking entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ds *DelegatedStaking) Unwrap() *DelegatedStaking {
	_tx, ok := ds.config.driver.(*txDriver)
	if !ok {
		panic("generated: DelegatedStaking is not a transactional entity")
	}
	ds.config.driver = _tx.drv
	return ds
}

// String implements the fmt.Stringer.
func (ds *DelegatedStaking) String() string {
	var builder strings.Builder
	builder.WriteString("DelegatedStaking(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ds.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", ds.EntID))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", ds.GoodID))
	builder.WriteString(", ")
	builder.WriteString("contract_code_url=")
	builder.WriteString(ds.ContractCodeURL)
	builder.WriteString(", ")
	builder.WriteString("contract_code_branch=")
	builder.WriteString(ds.ContractCodeBranch)
	builder.WriteString(", ")
	builder.WriteString("contract_state=")
	builder.WriteString(ds.ContractState)
	builder.WriteByte(')')
	return builder.String()
}

// DelegatedStakings is a parsable slice of DelegatedStaking.
type DelegatedStakings []*DelegatedStaking

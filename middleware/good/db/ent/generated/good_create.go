// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/good"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// GoodCreate is the builder for creating a Good entity.
type GoodCreate struct {
	config
	mutation *GoodMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (gc *GoodCreate) SetEntID(u uuid.UUID) *GoodCreate {
	gc.mutation.SetEntID(u)
	return gc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (gc *GoodCreate) SetNillableEntID(u *uuid.UUID) *GoodCreate {
	if u != nil {
		gc.SetEntID(*u)
	}
	return gc
}

// SetDeviceInfoID sets the "device_info_id" field.
func (gc *GoodCreate) SetDeviceInfoID(u uuid.UUID) *GoodCreate {
	gc.mutation.SetDeviceInfoID(u)
	return gc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (gc *GoodCreate) SetCoinTypeID(u uuid.UUID) *GoodCreate {
	gc.mutation.SetCoinTypeID(u)
	return gc
}

// SetInheritFromGoodID sets the "inherit_from_good_id" field.
func (gc *GoodCreate) SetInheritFromGoodID(u uuid.UUID) *GoodCreate {
	gc.mutation.SetInheritFromGoodID(u)
	return gc
}

// SetNillableInheritFromGoodID sets the "inherit_from_good_id" field if the given value is not nil.
func (gc *GoodCreate) SetNillableInheritFromGoodID(u *uuid.UUID) *GoodCreate {
	if u != nil {
		gc.SetInheritFromGoodID(*u)
	}
	return gc
}

// SetVendorLocationID sets the "vendor_location_id" field.
func (gc *GoodCreate) SetVendorLocationID(u uuid.UUID) *GoodCreate {
	gc.mutation.SetVendorLocationID(u)
	return gc
}

// SetUnitPrice sets the "unit_price" field.
func (gc *GoodCreate) SetUnitPrice(d decimal.Decimal) *GoodCreate {
	gc.mutation.SetUnitPrice(d)
	return gc
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (gc *GoodCreate) SetNillableUnitPrice(d *decimal.Decimal) *GoodCreate {
	if d != nil {
		gc.SetUnitPrice(*d)
	}
	return gc
}

// SetBenefitType sets the "benefit_type" field.
func (gc *GoodCreate) SetBenefitType(s string) *GoodCreate {
	gc.mutation.SetBenefitType(s)
	return gc
}

// SetNillableBenefitType sets the "benefit_type" field if the given value is not nil.
func (gc *GoodCreate) SetNillableBenefitType(s *string) *GoodCreate {
	if s != nil {
		gc.SetBenefitType(*s)
	}
	return gc
}

// SetGoodType sets the "good_type" field.
func (gc *GoodCreate) SetGoodType(s string) *GoodCreate {
	gc.mutation.SetGoodType(s)
	return gc
}

// SetNillableGoodType sets the "good_type" field if the given value is not nil.
func (gc *GoodCreate) SetNillableGoodType(s *string) *GoodCreate {
	if s != nil {
		gc.SetGoodType(*s)
	}
	return gc
}

// SetTitle sets the "title" field.
func (gc *GoodCreate) SetTitle(s string) *GoodCreate {
	gc.mutation.SetTitle(s)
	return gc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (gc *GoodCreate) SetNillableTitle(s *string) *GoodCreate {
	if s != nil {
		gc.SetTitle(*s)
	}
	return gc
}

// SetUnit sets the "unit" field.
func (gc *GoodCreate) SetUnit(s string) *GoodCreate {
	gc.mutation.SetUnit(s)
	return gc
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (gc *GoodCreate) SetNillableUnit(s *string) *GoodCreate {
	if s != nil {
		gc.SetUnit(*s)
	}
	return gc
}

// SetQuantityUnit sets the "quantity_unit" field.
func (gc *GoodCreate) SetQuantityUnit(s string) *GoodCreate {
	gc.mutation.SetQuantityUnit(s)
	return gc
}

// SetNillableQuantityUnit sets the "quantity_unit" field if the given value is not nil.
func (gc *GoodCreate) SetNillableQuantityUnit(s *string) *GoodCreate {
	if s != nil {
		gc.SetQuantityUnit(*s)
	}
	return gc
}

// SetUnitAmount sets the "unit_amount" field.
func (gc *GoodCreate) SetUnitAmount(i int32) *GoodCreate {
	gc.mutation.SetUnitAmount(i)
	return gc
}

// SetNillableUnitAmount sets the "unit_amount" field if the given value is not nil.
func (gc *GoodCreate) SetNillableUnitAmount(i *int32) *GoodCreate {
	if i != nil {
		gc.SetUnitAmount(*i)
	}
	return gc
}

// SetQuantityUnitAmount sets the "quantity_unit_amount" field.
func (gc *GoodCreate) SetQuantityUnitAmount(d decimal.Decimal) *GoodCreate {
	gc.mutation.SetQuantityUnitAmount(d)
	return gc
}

// SetNillableQuantityUnitAmount sets the "quantity_unit_amount" field if the given value is not nil.
func (gc *GoodCreate) SetNillableQuantityUnitAmount(d *decimal.Decimal) *GoodCreate {
	if d != nil {
		gc.SetQuantityUnitAmount(*d)
	}
	return gc
}

// SetDeliveryAt sets the "delivery_at" field.
func (gc *GoodCreate) SetDeliveryAt(u uint32) *GoodCreate {
	gc.mutation.SetDeliveryAt(u)
	return gc
}

// SetNillableDeliveryAt sets the "delivery_at" field if the given value is not nil.
func (gc *GoodCreate) SetNillableDeliveryAt(u *uint32) *GoodCreate {
	if u != nil {
		gc.SetDeliveryAt(*u)
	}
	return gc
}

// SetStartAt sets the "start_at" field.
func (gc *GoodCreate) SetStartAt(u uint32) *GoodCreate {
	gc.mutation.SetStartAt(u)
	return gc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (gc *GoodCreate) SetNillableStartAt(u *uint32) *GoodCreate {
	if u != nil {
		gc.SetStartAt(*u)
	}
	return gc
}

// SetStartMode sets the "start_mode" field.
func (gc *GoodCreate) SetStartMode(s string) *GoodCreate {
	gc.mutation.SetStartMode(s)
	return gc
}

// SetNillableStartMode sets the "start_mode" field if the given value is not nil.
func (gc *GoodCreate) SetNillableStartMode(s *string) *GoodCreate {
	if s != nil {
		gc.SetStartMode(*s)
	}
	return gc
}

// SetTestOnly sets the "test_only" field.
func (gc *GoodCreate) SetTestOnly(b bool) *GoodCreate {
	gc.mutation.SetTestOnly(b)
	return gc
}

// SetNillableTestOnly sets the "test_only" field if the given value is not nil.
func (gc *GoodCreate) SetNillableTestOnly(b *bool) *GoodCreate {
	if b != nil {
		gc.SetTestOnly(*b)
	}
	return gc
}

// SetBenefitIntervalHours sets the "benefit_interval_hours" field.
func (gc *GoodCreate) SetBenefitIntervalHours(u uint32) *GoodCreate {
	gc.mutation.SetBenefitIntervalHours(u)
	return gc
}

// SetNillableBenefitIntervalHours sets the "benefit_interval_hours" field if the given value is not nil.
func (gc *GoodCreate) SetNillableBenefitIntervalHours(u *uint32) *GoodCreate {
	if u != nil {
		gc.SetBenefitIntervalHours(*u)
	}
	return gc
}

// SetUnitLockDeposit sets the "unit_lock_deposit" field.
func (gc *GoodCreate) SetUnitLockDeposit(d decimal.Decimal) *GoodCreate {
	gc.mutation.SetUnitLockDeposit(d)
	return gc
}

// SetNillableUnitLockDeposit sets the "unit_lock_deposit" field if the given value is not nil.
func (gc *GoodCreate) SetNillableUnitLockDeposit(d *decimal.Decimal) *GoodCreate {
	if d != nil {
		gc.SetUnitLockDeposit(*d)
	}
	return gc
}

// SetUnitType sets the "unit_type" field.
func (gc *GoodCreate) SetUnitType(s string) *GoodCreate {
	gc.mutation.SetUnitType(s)
	return gc
}

// SetNillableUnitType sets the "unit_type" field if the given value is not nil.
func (gc *GoodCreate) SetNillableUnitType(s *string) *GoodCreate {
	if s != nil {
		gc.SetUnitType(*s)
	}
	return gc
}

// SetQuantityCalculateType sets the "quantity_calculate_type" field.
func (gc *GoodCreate) SetQuantityCalculateType(s string) *GoodCreate {
	gc.mutation.SetQuantityCalculateType(s)
	return gc
}

// SetNillableQuantityCalculateType sets the "quantity_calculate_type" field if the given value is not nil.
func (gc *GoodCreate) SetNillableQuantityCalculateType(s *string) *GoodCreate {
	if s != nil {
		gc.SetQuantityCalculateType(*s)
	}
	return gc
}

// SetDurationType sets the "duration_type" field.
func (gc *GoodCreate) SetDurationType(s string) *GoodCreate {
	gc.mutation.SetDurationType(s)
	return gc
}

// SetNillableDurationType sets the "duration_type" field if the given value is not nil.
func (gc *GoodCreate) SetNillableDurationType(s *string) *GoodCreate {
	if s != nil {
		gc.SetDurationType(*s)
	}
	return gc
}

// SetDurationCalculateType sets the "duration_calculate_type" field.
func (gc *GoodCreate) SetDurationCalculateType(s string) *GoodCreate {
	gc.mutation.SetDurationCalculateType(s)
	return gc
}

// SetNillableDurationCalculateType sets the "duration_calculate_type" field if the given value is not nil.
func (gc *GoodCreate) SetNillableDurationCalculateType(s *string) *GoodCreate {
	if s != nil {
		gc.SetDurationCalculateType(*s)
	}
	return gc
}

// SetSettlementType sets the "settlement_type" field.
func (gc *GoodCreate) SetSettlementType(s string) *GoodCreate {
	gc.mutation.SetSettlementType(s)
	return gc
}

// SetNillableSettlementType sets the "settlement_type" field if the given value is not nil.
func (gc *GoodCreate) SetNillableSettlementType(s *string) *GoodCreate {
	if s != nil {
		gc.SetSettlementType(*s)
	}
	return gc
}

// SetID sets the "id" field.
func (gc *GoodCreate) SetID(u uint32) *GoodCreate {
	gc.mutation.SetID(u)
	return gc
}

// Mutation returns the GoodMutation object of the builder.
func (gc *GoodCreate) Mutation() *GoodMutation {
	return gc.mutation
}

// Save creates the Good in the database.
func (gc *GoodCreate) Save(ctx context.Context) (*Good, error) {
	gc.defaults()
	return withHooks(ctx, gc.sqlSave, gc.mutation, gc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GoodCreate) SaveX(ctx context.Context) *Good {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GoodCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GoodCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GoodCreate) defaults() {
	if _, ok := gc.mutation.EntID(); !ok {
		v := good.DefaultEntID()
		gc.mutation.SetEntID(v)
	}
	if _, ok := gc.mutation.InheritFromGoodID(); !ok {
		v := good.DefaultInheritFromGoodID()
		gc.mutation.SetInheritFromGoodID(v)
	}
	if _, ok := gc.mutation.UnitPrice(); !ok {
		v := good.DefaultUnitPrice
		gc.mutation.SetUnitPrice(v)
	}
	if _, ok := gc.mutation.BenefitType(); !ok {
		v := good.DefaultBenefitType
		gc.mutation.SetBenefitType(v)
	}
	if _, ok := gc.mutation.GoodType(); !ok {
		v := good.DefaultGoodType
		gc.mutation.SetGoodType(v)
	}
	if _, ok := gc.mutation.Title(); !ok {
		v := good.DefaultTitle
		gc.mutation.SetTitle(v)
	}
	if _, ok := gc.mutation.Unit(); !ok {
		v := good.DefaultUnit
		gc.mutation.SetUnit(v)
	}
	if _, ok := gc.mutation.QuantityUnit(); !ok {
		v := good.DefaultQuantityUnit
		gc.mutation.SetQuantityUnit(v)
	}
	if _, ok := gc.mutation.UnitAmount(); !ok {
		v := good.DefaultUnitAmount
		gc.mutation.SetUnitAmount(v)
	}
	if _, ok := gc.mutation.QuantityUnitAmount(); !ok {
		v := good.DefaultQuantityUnitAmount
		gc.mutation.SetQuantityUnitAmount(v)
	}
	if _, ok := gc.mutation.DeliveryAt(); !ok {
		v := good.DefaultDeliveryAt
		gc.mutation.SetDeliveryAt(v)
	}
	if _, ok := gc.mutation.StartAt(); !ok {
		v := good.DefaultStartAt
		gc.mutation.SetStartAt(v)
	}
	if _, ok := gc.mutation.StartMode(); !ok {
		v := good.DefaultStartMode
		gc.mutation.SetStartMode(v)
	}
	if _, ok := gc.mutation.TestOnly(); !ok {
		v := good.DefaultTestOnly
		gc.mutation.SetTestOnly(v)
	}
	if _, ok := gc.mutation.BenefitIntervalHours(); !ok {
		v := good.DefaultBenefitIntervalHours
		gc.mutation.SetBenefitIntervalHours(v)
	}
	if _, ok := gc.mutation.UnitLockDeposit(); !ok {
		v := good.DefaultUnitLockDeposit
		gc.mutation.SetUnitLockDeposit(v)
	}
	if _, ok := gc.mutation.UnitType(); !ok {
		v := good.DefaultUnitType
		gc.mutation.SetUnitType(v)
	}
	if _, ok := gc.mutation.QuantityCalculateType(); !ok {
		v := good.DefaultQuantityCalculateType
		gc.mutation.SetQuantityCalculateType(v)
	}
	if _, ok := gc.mutation.DurationType(); !ok {
		v := good.DefaultDurationType
		gc.mutation.SetDurationType(v)
	}
	if _, ok := gc.mutation.DurationCalculateType(); !ok {
		v := good.DefaultDurationCalculateType
		gc.mutation.SetDurationCalculateType(v)
	}
	if _, ok := gc.mutation.SettlementType(); !ok {
		v := good.DefaultSettlementType
		gc.mutation.SetSettlementType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GoodCreate) check() error {
	if _, ok := gc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "Good.ent_id"`)}
	}
	if _, ok := gc.mutation.DeviceInfoID(); !ok {
		return &ValidationError{Name: "device_info_id", err: errors.New(`generated: missing required field "Good.device_info_id"`)}
	}
	if _, ok := gc.mutation.CoinTypeID(); !ok {
		return &ValidationError{Name: "coin_type_id", err: errors.New(`generated: missing required field "Good.coin_type_id"`)}
	}
	if _, ok := gc.mutation.VendorLocationID(); !ok {
		return &ValidationError{Name: "vendor_location_id", err: errors.New(`generated: missing required field "Good.vendor_location_id"`)}
	}
	return nil
}

func (gc *GoodCreate) sqlSave(ctx context.Context) (*Good, error) {
	if err := gc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	gc.mutation.id = &_node.ID
	gc.mutation.done = true
	return _node, nil
}

func (gc *GoodCreate) createSpec() (*Good, *sqlgraph.CreateSpec) {
	var (
		_node = &Good{config: gc.config}
		_spec = sqlgraph.NewCreateSpec(good.Table, sqlgraph.NewFieldSpec(good.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = gc.conflict
	if id, ok := gc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gc.mutation.EntID(); ok {
		_spec.SetField(good.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := gc.mutation.DeviceInfoID(); ok {
		_spec.SetField(good.FieldDeviceInfoID, field.TypeUUID, value)
		_node.DeviceInfoID = value
	}
	if value, ok := gc.mutation.CoinTypeID(); ok {
		_spec.SetField(good.FieldCoinTypeID, field.TypeUUID, value)
		_node.CoinTypeID = value
	}
	if value, ok := gc.mutation.InheritFromGoodID(); ok {
		_spec.SetField(good.FieldInheritFromGoodID, field.TypeUUID, value)
		_node.InheritFromGoodID = value
	}
	if value, ok := gc.mutation.VendorLocationID(); ok {
		_spec.SetField(good.FieldVendorLocationID, field.TypeUUID, value)
		_node.VendorLocationID = value
	}
	if value, ok := gc.mutation.UnitPrice(); ok {
		_spec.SetField(good.FieldUnitPrice, field.TypeOther, value)
		_node.UnitPrice = value
	}
	if value, ok := gc.mutation.BenefitType(); ok {
		_spec.SetField(good.FieldBenefitType, field.TypeString, value)
		_node.BenefitType = value
	}
	if value, ok := gc.mutation.GoodType(); ok {
		_spec.SetField(good.FieldGoodType, field.TypeString, value)
		_node.GoodType = value
	}
	if value, ok := gc.mutation.Title(); ok {
		_spec.SetField(good.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := gc.mutation.Unit(); ok {
		_spec.SetField(good.FieldUnit, field.TypeString, value)
		_node.Unit = value
	}
	if value, ok := gc.mutation.QuantityUnit(); ok {
		_spec.SetField(good.FieldQuantityUnit, field.TypeString, value)
		_node.QuantityUnit = value
	}
	if value, ok := gc.mutation.UnitAmount(); ok {
		_spec.SetField(good.FieldUnitAmount, field.TypeInt32, value)
		_node.UnitAmount = value
	}
	if value, ok := gc.mutation.QuantityUnitAmount(); ok {
		_spec.SetField(good.FieldQuantityUnitAmount, field.TypeOther, value)
		_node.QuantityUnitAmount = value
	}
	if value, ok := gc.mutation.DeliveryAt(); ok {
		_spec.SetField(good.FieldDeliveryAt, field.TypeUint32, value)
		_node.DeliveryAt = value
	}
	if value, ok := gc.mutation.StartAt(); ok {
		_spec.SetField(good.FieldStartAt, field.TypeUint32, value)
		_node.StartAt = value
	}
	if value, ok := gc.mutation.StartMode(); ok {
		_spec.SetField(good.FieldStartMode, field.TypeString, value)
		_node.StartMode = value
	}
	if value, ok := gc.mutation.TestOnly(); ok {
		_spec.SetField(good.FieldTestOnly, field.TypeBool, value)
		_node.TestOnly = value
	}
	if value, ok := gc.mutation.BenefitIntervalHours(); ok {
		_spec.SetField(good.FieldBenefitIntervalHours, field.TypeUint32, value)
		_node.BenefitIntervalHours = value
	}
	if value, ok := gc.mutation.UnitLockDeposit(); ok {
		_spec.SetField(good.FieldUnitLockDeposit, field.TypeOther, value)
		_node.UnitLockDeposit = value
	}
	if value, ok := gc.mutation.UnitType(); ok {
		_spec.SetField(good.FieldUnitType, field.TypeString, value)
		_node.UnitType = value
	}
	if value, ok := gc.mutation.QuantityCalculateType(); ok {
		_spec.SetField(good.FieldQuantityCalculateType, field.TypeString, value)
		_node.QuantityCalculateType = value
	}
	if value, ok := gc.mutation.DurationType(); ok {
		_spec.SetField(good.FieldDurationType, field.TypeString, value)
		_node.DurationType = value
	}
	if value, ok := gc.mutation.DurationCalculateType(); ok {
		_spec.SetField(good.FieldDurationCalculateType, field.TypeString, value)
		_node.DurationCalculateType = value
	}
	if value, ok := gc.mutation.SettlementType(); ok {
		_spec.SetField(good.FieldSettlementType, field.TypeString, value)
		_node.SettlementType = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Good.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (gc *GoodCreate) OnConflict(opts ...sql.ConflictOption) *GoodUpsertOne {
	gc.conflict = opts
	return &GoodUpsertOne{
		create: gc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Good.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gc *GoodCreate) OnConflictColumns(columns ...string) *GoodUpsertOne {
	gc.conflict = append(gc.conflict, sql.ConflictColumns(columns...))
	return &GoodUpsertOne{
		create: gc,
	}
}

type (
	// GoodUpsertOne is the builder for "upsert"-ing
	//  one Good node.
	GoodUpsertOne struct {
		create *GoodCreate
	}

	// GoodUpsert is the "OnConflict" setter.
	GoodUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *GoodUpsert) SetEntID(v uuid.UUID) *GoodUpsert {
	u.Set(good.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodUpsert) UpdateEntID() *GoodUpsert {
	u.SetExcluded(good.FieldEntID)
	return u
}

// SetDeviceInfoID sets the "device_info_id" field.
func (u *GoodUpsert) SetDeviceInfoID(v uuid.UUID) *GoodUpsert {
	u.Set(good.FieldDeviceInfoID, v)
	return u
}

// UpdateDeviceInfoID sets the "device_info_id" field to the value that was provided on create.
func (u *GoodUpsert) UpdateDeviceInfoID() *GoodUpsert {
	u.SetExcluded(good.FieldDeviceInfoID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GoodUpsert) SetCoinTypeID(v uuid.UUID) *GoodUpsert {
	u.Set(good.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GoodUpsert) UpdateCoinTypeID() *GoodUpsert {
	u.SetExcluded(good.FieldCoinTypeID)
	return u
}

// SetInheritFromGoodID sets the "inherit_from_good_id" field.
func (u *GoodUpsert) SetInheritFromGoodID(v uuid.UUID) *GoodUpsert {
	u.Set(good.FieldInheritFromGoodID, v)
	return u
}

// UpdateInheritFromGoodID sets the "inherit_from_good_id" field to the value that was provided on create.
func (u *GoodUpsert) UpdateInheritFromGoodID() *GoodUpsert {
	u.SetExcluded(good.FieldInheritFromGoodID)
	return u
}

// ClearInheritFromGoodID clears the value of the "inherit_from_good_id" field.
func (u *GoodUpsert) ClearInheritFromGoodID() *GoodUpsert {
	u.SetNull(good.FieldInheritFromGoodID)
	return u
}

// SetVendorLocationID sets the "vendor_location_id" field.
func (u *GoodUpsert) SetVendorLocationID(v uuid.UUID) *GoodUpsert {
	u.Set(good.FieldVendorLocationID, v)
	return u
}

// UpdateVendorLocationID sets the "vendor_location_id" field to the value that was provided on create.
func (u *GoodUpsert) UpdateVendorLocationID() *GoodUpsert {
	u.SetExcluded(good.FieldVendorLocationID)
	return u
}

// SetUnitPrice sets the "unit_price" field.
func (u *GoodUpsert) SetUnitPrice(v decimal.Decimal) *GoodUpsert {
	u.Set(good.FieldUnitPrice, v)
	return u
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *GoodUpsert) UpdateUnitPrice() *GoodUpsert {
	u.SetExcluded(good.FieldUnitPrice)
	return u
}

// ClearUnitPrice clears the value of the "unit_price" field.
func (u *GoodUpsert) ClearUnitPrice() *GoodUpsert {
	u.SetNull(good.FieldUnitPrice)
	return u
}

// SetBenefitType sets the "benefit_type" field.
func (u *GoodUpsert) SetBenefitType(v string) *GoodUpsert {
	u.Set(good.FieldBenefitType, v)
	return u
}

// UpdateBenefitType sets the "benefit_type" field to the value that was provided on create.
func (u *GoodUpsert) UpdateBenefitType() *GoodUpsert {
	u.SetExcluded(good.FieldBenefitType)
	return u
}

// ClearBenefitType clears the value of the "benefit_type" field.
func (u *GoodUpsert) ClearBenefitType() *GoodUpsert {
	u.SetNull(good.FieldBenefitType)
	return u
}

// SetGoodType sets the "good_type" field.
func (u *GoodUpsert) SetGoodType(v string) *GoodUpsert {
	u.Set(good.FieldGoodType, v)
	return u
}

// UpdateGoodType sets the "good_type" field to the value that was provided on create.
func (u *GoodUpsert) UpdateGoodType() *GoodUpsert {
	u.SetExcluded(good.FieldGoodType)
	return u
}

// ClearGoodType clears the value of the "good_type" field.
func (u *GoodUpsert) ClearGoodType() *GoodUpsert {
	u.SetNull(good.FieldGoodType)
	return u
}

// SetTitle sets the "title" field.
func (u *GoodUpsert) SetTitle(v string) *GoodUpsert {
	u.Set(good.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *GoodUpsert) UpdateTitle() *GoodUpsert {
	u.SetExcluded(good.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *GoodUpsert) ClearTitle() *GoodUpsert {
	u.SetNull(good.FieldTitle)
	return u
}

// SetUnit sets the "unit" field.
func (u *GoodUpsert) SetUnit(v string) *GoodUpsert {
	u.Set(good.FieldUnit, v)
	return u
}

// UpdateUnit sets the "unit" field to the value that was provided on create.
func (u *GoodUpsert) UpdateUnit() *GoodUpsert {
	u.SetExcluded(good.FieldUnit)
	return u
}

// ClearUnit clears the value of the "unit" field.
func (u *GoodUpsert) ClearUnit() *GoodUpsert {
	u.SetNull(good.FieldUnit)
	return u
}

// SetQuantityUnit sets the "quantity_unit" field.
func (u *GoodUpsert) SetQuantityUnit(v string) *GoodUpsert {
	u.Set(good.FieldQuantityUnit, v)
	return u
}

// UpdateQuantityUnit sets the "quantity_unit" field to the value that was provided on create.
func (u *GoodUpsert) UpdateQuantityUnit() *GoodUpsert {
	u.SetExcluded(good.FieldQuantityUnit)
	return u
}

// ClearQuantityUnit clears the value of the "quantity_unit" field.
func (u *GoodUpsert) ClearQuantityUnit() *GoodUpsert {
	u.SetNull(good.FieldQuantityUnit)
	return u
}

// SetUnitAmount sets the "unit_amount" field.
func (u *GoodUpsert) SetUnitAmount(v int32) *GoodUpsert {
	u.Set(good.FieldUnitAmount, v)
	return u
}

// UpdateUnitAmount sets the "unit_amount" field to the value that was provided on create.
func (u *GoodUpsert) UpdateUnitAmount() *GoodUpsert {
	u.SetExcluded(good.FieldUnitAmount)
	return u
}

// AddUnitAmount adds v to the "unit_amount" field.
func (u *GoodUpsert) AddUnitAmount(v int32) *GoodUpsert {
	u.Add(good.FieldUnitAmount, v)
	return u
}

// ClearUnitAmount clears the value of the "unit_amount" field.
func (u *GoodUpsert) ClearUnitAmount() *GoodUpsert {
	u.SetNull(good.FieldUnitAmount)
	return u
}

// SetQuantityUnitAmount sets the "quantity_unit_amount" field.
func (u *GoodUpsert) SetQuantityUnitAmount(v decimal.Decimal) *GoodUpsert {
	u.Set(good.FieldQuantityUnitAmount, v)
	return u
}

// UpdateQuantityUnitAmount sets the "quantity_unit_amount" field to the value that was provided on create.
func (u *GoodUpsert) UpdateQuantityUnitAmount() *GoodUpsert {
	u.SetExcluded(good.FieldQuantityUnitAmount)
	return u
}

// ClearQuantityUnitAmount clears the value of the "quantity_unit_amount" field.
func (u *GoodUpsert) ClearQuantityUnitAmount() *GoodUpsert {
	u.SetNull(good.FieldQuantityUnitAmount)
	return u
}

// SetDeliveryAt sets the "delivery_at" field.
func (u *GoodUpsert) SetDeliveryAt(v uint32) *GoodUpsert {
	u.Set(good.FieldDeliveryAt, v)
	return u
}

// UpdateDeliveryAt sets the "delivery_at" field to the value that was provided on create.
func (u *GoodUpsert) UpdateDeliveryAt() *GoodUpsert {
	u.SetExcluded(good.FieldDeliveryAt)
	return u
}

// AddDeliveryAt adds v to the "delivery_at" field.
func (u *GoodUpsert) AddDeliveryAt(v uint32) *GoodUpsert {
	u.Add(good.FieldDeliveryAt, v)
	return u
}

// ClearDeliveryAt clears the value of the "delivery_at" field.
func (u *GoodUpsert) ClearDeliveryAt() *GoodUpsert {
	u.SetNull(good.FieldDeliveryAt)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *GoodUpsert) SetStartAt(v uint32) *GoodUpsert {
	u.Set(good.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *GoodUpsert) UpdateStartAt() *GoodUpsert {
	u.SetExcluded(good.FieldStartAt)
	return u
}

// AddStartAt adds v to the "start_at" field.
func (u *GoodUpsert) AddStartAt(v uint32) *GoodUpsert {
	u.Add(good.FieldStartAt, v)
	return u
}

// ClearStartAt clears the value of the "start_at" field.
func (u *GoodUpsert) ClearStartAt() *GoodUpsert {
	u.SetNull(good.FieldStartAt)
	return u
}

// SetStartMode sets the "start_mode" field.
func (u *GoodUpsert) SetStartMode(v string) *GoodUpsert {
	u.Set(good.FieldStartMode, v)
	return u
}

// UpdateStartMode sets the "start_mode" field to the value that was provided on create.
func (u *GoodUpsert) UpdateStartMode() *GoodUpsert {
	u.SetExcluded(good.FieldStartMode)
	return u
}

// ClearStartMode clears the value of the "start_mode" field.
func (u *GoodUpsert) ClearStartMode() *GoodUpsert {
	u.SetNull(good.FieldStartMode)
	return u
}

// SetTestOnly sets the "test_only" field.
func (u *GoodUpsert) SetTestOnly(v bool) *GoodUpsert {
	u.Set(good.FieldTestOnly, v)
	return u
}

// UpdateTestOnly sets the "test_only" field to the value that was provided on create.
func (u *GoodUpsert) UpdateTestOnly() *GoodUpsert {
	u.SetExcluded(good.FieldTestOnly)
	return u
}

// ClearTestOnly clears the value of the "test_only" field.
func (u *GoodUpsert) ClearTestOnly() *GoodUpsert {
	u.SetNull(good.FieldTestOnly)
	return u
}

// SetBenefitIntervalHours sets the "benefit_interval_hours" field.
func (u *GoodUpsert) SetBenefitIntervalHours(v uint32) *GoodUpsert {
	u.Set(good.FieldBenefitIntervalHours, v)
	return u
}

// UpdateBenefitIntervalHours sets the "benefit_interval_hours" field to the value that was provided on create.
func (u *GoodUpsert) UpdateBenefitIntervalHours() *GoodUpsert {
	u.SetExcluded(good.FieldBenefitIntervalHours)
	return u
}

// AddBenefitIntervalHours adds v to the "benefit_interval_hours" field.
func (u *GoodUpsert) AddBenefitIntervalHours(v uint32) *GoodUpsert {
	u.Add(good.FieldBenefitIntervalHours, v)
	return u
}

// ClearBenefitIntervalHours clears the value of the "benefit_interval_hours" field.
func (u *GoodUpsert) ClearBenefitIntervalHours() *GoodUpsert {
	u.SetNull(good.FieldBenefitIntervalHours)
	return u
}

// SetUnitLockDeposit sets the "unit_lock_deposit" field.
func (u *GoodUpsert) SetUnitLockDeposit(v decimal.Decimal) *GoodUpsert {
	u.Set(good.FieldUnitLockDeposit, v)
	return u
}

// UpdateUnitLockDeposit sets the "unit_lock_deposit" field to the value that was provided on create.
func (u *GoodUpsert) UpdateUnitLockDeposit() *GoodUpsert {
	u.SetExcluded(good.FieldUnitLockDeposit)
	return u
}

// ClearUnitLockDeposit clears the value of the "unit_lock_deposit" field.
func (u *GoodUpsert) ClearUnitLockDeposit() *GoodUpsert {
	u.SetNull(good.FieldUnitLockDeposit)
	return u
}

// SetUnitType sets the "unit_type" field.
func (u *GoodUpsert) SetUnitType(v string) *GoodUpsert {
	u.Set(good.FieldUnitType, v)
	return u
}

// UpdateUnitType sets the "unit_type" field to the value that was provided on create.
func (u *GoodUpsert) UpdateUnitType() *GoodUpsert {
	u.SetExcluded(good.FieldUnitType)
	return u
}

// ClearUnitType clears the value of the "unit_type" field.
func (u *GoodUpsert) ClearUnitType() *GoodUpsert {
	u.SetNull(good.FieldUnitType)
	return u
}

// SetQuantityCalculateType sets the "quantity_calculate_type" field.
func (u *GoodUpsert) SetQuantityCalculateType(v string) *GoodUpsert {
	u.Set(good.FieldQuantityCalculateType, v)
	return u
}

// UpdateQuantityCalculateType sets the "quantity_calculate_type" field to the value that was provided on create.
func (u *GoodUpsert) UpdateQuantityCalculateType() *GoodUpsert {
	u.SetExcluded(good.FieldQuantityCalculateType)
	return u
}

// ClearQuantityCalculateType clears the value of the "quantity_calculate_type" field.
func (u *GoodUpsert) ClearQuantityCalculateType() *GoodUpsert {
	u.SetNull(good.FieldQuantityCalculateType)
	return u
}

// SetDurationType sets the "duration_type" field.
func (u *GoodUpsert) SetDurationType(v string) *GoodUpsert {
	u.Set(good.FieldDurationType, v)
	return u
}

// UpdateDurationType sets the "duration_type" field to the value that was provided on create.
func (u *GoodUpsert) UpdateDurationType() *GoodUpsert {
	u.SetExcluded(good.FieldDurationType)
	return u
}

// ClearDurationType clears the value of the "duration_type" field.
func (u *GoodUpsert) ClearDurationType() *GoodUpsert {
	u.SetNull(good.FieldDurationType)
	return u
}

// SetDurationCalculateType sets the "duration_calculate_type" field.
func (u *GoodUpsert) SetDurationCalculateType(v string) *GoodUpsert {
	u.Set(good.FieldDurationCalculateType, v)
	return u
}

// UpdateDurationCalculateType sets the "duration_calculate_type" field to the value that was provided on create.
func (u *GoodUpsert) UpdateDurationCalculateType() *GoodUpsert {
	u.SetExcluded(good.FieldDurationCalculateType)
	return u
}

// ClearDurationCalculateType clears the value of the "duration_calculate_type" field.
func (u *GoodUpsert) ClearDurationCalculateType() *GoodUpsert {
	u.SetNull(good.FieldDurationCalculateType)
	return u
}

// SetSettlementType sets the "settlement_type" field.
func (u *GoodUpsert) SetSettlementType(v string) *GoodUpsert {
	u.Set(good.FieldSettlementType, v)
	return u
}

// UpdateSettlementType sets the "settlement_type" field to the value that was provided on create.
func (u *GoodUpsert) UpdateSettlementType() *GoodUpsert {
	u.SetExcluded(good.FieldSettlementType)
	return u
}

// ClearSettlementType clears the value of the "settlement_type" field.
func (u *GoodUpsert) ClearSettlementType() *GoodUpsert {
	u.SetNull(good.FieldSettlementType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Good.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(good.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GoodUpsertOne) UpdateNewValues() *GoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(good.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Good.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GoodUpsertOne) Ignore() *GoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodUpsertOne) DoNothing() *GoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodCreate.OnConflict
// documentation for more info.
func (u *GoodUpsertOne) Update(set func(*GoodUpsert)) *GoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *GoodUpsertOne) SetEntID(v uuid.UUID) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateEntID() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateEntID()
	})
}

// SetDeviceInfoID sets the "device_info_id" field.
func (u *GoodUpsertOne) SetDeviceInfoID(v uuid.UUID) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetDeviceInfoID(v)
	})
}

// UpdateDeviceInfoID sets the "device_info_id" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateDeviceInfoID() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateDeviceInfoID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GoodUpsertOne) SetCoinTypeID(v uuid.UUID) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateCoinTypeID() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateCoinTypeID()
	})
}

// SetInheritFromGoodID sets the "inherit_from_good_id" field.
func (u *GoodUpsertOne) SetInheritFromGoodID(v uuid.UUID) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetInheritFromGoodID(v)
	})
}

// UpdateInheritFromGoodID sets the "inherit_from_good_id" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateInheritFromGoodID() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateInheritFromGoodID()
	})
}

// ClearInheritFromGoodID clears the value of the "inherit_from_good_id" field.
func (u *GoodUpsertOne) ClearInheritFromGoodID() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearInheritFromGoodID()
	})
}

// SetVendorLocationID sets the "vendor_location_id" field.
func (u *GoodUpsertOne) SetVendorLocationID(v uuid.UUID) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetVendorLocationID(v)
	})
}

// UpdateVendorLocationID sets the "vendor_location_id" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateVendorLocationID() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateVendorLocationID()
	})
}

// SetUnitPrice sets the "unit_price" field.
func (u *GoodUpsertOne) SetUnitPrice(v decimal.Decimal) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetUnitPrice(v)
	})
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateUnitPrice() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateUnitPrice()
	})
}

// ClearUnitPrice clears the value of the "unit_price" field.
func (u *GoodUpsertOne) ClearUnitPrice() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearUnitPrice()
	})
}

// SetBenefitType sets the "benefit_type" field.
func (u *GoodUpsertOne) SetBenefitType(v string) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetBenefitType(v)
	})
}

// UpdateBenefitType sets the "benefit_type" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateBenefitType() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateBenefitType()
	})
}

// ClearBenefitType clears the value of the "benefit_type" field.
func (u *GoodUpsertOne) ClearBenefitType() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearBenefitType()
	})
}

// SetGoodType sets the "good_type" field.
func (u *GoodUpsertOne) SetGoodType(v string) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetGoodType(v)
	})
}

// UpdateGoodType sets the "good_type" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateGoodType() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateGoodType()
	})
}

// ClearGoodType clears the value of the "good_type" field.
func (u *GoodUpsertOne) ClearGoodType() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearGoodType()
	})
}

// SetTitle sets the "title" field.
func (u *GoodUpsertOne) SetTitle(v string) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateTitle() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *GoodUpsertOne) ClearTitle() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearTitle()
	})
}

// SetUnit sets the "unit" field.
func (u *GoodUpsertOne) SetUnit(v string) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetUnit(v)
	})
}

// UpdateUnit sets the "unit" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateUnit() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateUnit()
	})
}

// ClearUnit clears the value of the "unit" field.
func (u *GoodUpsertOne) ClearUnit() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearUnit()
	})
}

// SetQuantityUnit sets the "quantity_unit" field.
func (u *GoodUpsertOne) SetQuantityUnit(v string) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetQuantityUnit(v)
	})
}

// UpdateQuantityUnit sets the "quantity_unit" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateQuantityUnit() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateQuantityUnit()
	})
}

// ClearQuantityUnit clears the value of the "quantity_unit" field.
func (u *GoodUpsertOne) ClearQuantityUnit() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearQuantityUnit()
	})
}

// SetUnitAmount sets the "unit_amount" field.
func (u *GoodUpsertOne) SetUnitAmount(v int32) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetUnitAmount(v)
	})
}

// AddUnitAmount adds v to the "unit_amount" field.
func (u *GoodUpsertOne) AddUnitAmount(v int32) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.AddUnitAmount(v)
	})
}

// UpdateUnitAmount sets the "unit_amount" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateUnitAmount() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateUnitAmount()
	})
}

// ClearUnitAmount clears the value of the "unit_amount" field.
func (u *GoodUpsertOne) ClearUnitAmount() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearUnitAmount()
	})
}

// SetQuantityUnitAmount sets the "quantity_unit_amount" field.
func (u *GoodUpsertOne) SetQuantityUnitAmount(v decimal.Decimal) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetQuantityUnitAmount(v)
	})
}

// UpdateQuantityUnitAmount sets the "quantity_unit_amount" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateQuantityUnitAmount() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateQuantityUnitAmount()
	})
}

// ClearQuantityUnitAmount clears the value of the "quantity_unit_amount" field.
func (u *GoodUpsertOne) ClearQuantityUnitAmount() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearQuantityUnitAmount()
	})
}

// SetDeliveryAt sets the "delivery_at" field.
func (u *GoodUpsertOne) SetDeliveryAt(v uint32) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetDeliveryAt(v)
	})
}

// AddDeliveryAt adds v to the "delivery_at" field.
func (u *GoodUpsertOne) AddDeliveryAt(v uint32) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.AddDeliveryAt(v)
	})
}

// UpdateDeliveryAt sets the "delivery_at" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateDeliveryAt() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateDeliveryAt()
	})
}

// ClearDeliveryAt clears the value of the "delivery_at" field.
func (u *GoodUpsertOne) ClearDeliveryAt() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearDeliveryAt()
	})
}

// SetStartAt sets the "start_at" field.
func (u *GoodUpsertOne) SetStartAt(v uint32) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *GoodUpsertOne) AddStartAt(v uint32) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateStartAt() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *GoodUpsertOne) ClearStartAt() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearStartAt()
	})
}

// SetStartMode sets the "start_mode" field.
func (u *GoodUpsertOne) SetStartMode(v string) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetStartMode(v)
	})
}

// UpdateStartMode sets the "start_mode" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateStartMode() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateStartMode()
	})
}

// ClearStartMode clears the value of the "start_mode" field.
func (u *GoodUpsertOne) ClearStartMode() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearStartMode()
	})
}

// SetTestOnly sets the "test_only" field.
func (u *GoodUpsertOne) SetTestOnly(v bool) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetTestOnly(v)
	})
}

// UpdateTestOnly sets the "test_only" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateTestOnly() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateTestOnly()
	})
}

// ClearTestOnly clears the value of the "test_only" field.
func (u *GoodUpsertOne) ClearTestOnly() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearTestOnly()
	})
}

// SetBenefitIntervalHours sets the "benefit_interval_hours" field.
func (u *GoodUpsertOne) SetBenefitIntervalHours(v uint32) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetBenefitIntervalHours(v)
	})
}

// AddBenefitIntervalHours adds v to the "benefit_interval_hours" field.
func (u *GoodUpsertOne) AddBenefitIntervalHours(v uint32) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.AddBenefitIntervalHours(v)
	})
}

// UpdateBenefitIntervalHours sets the "benefit_interval_hours" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateBenefitIntervalHours() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateBenefitIntervalHours()
	})
}

// ClearBenefitIntervalHours clears the value of the "benefit_interval_hours" field.
func (u *GoodUpsertOne) ClearBenefitIntervalHours() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearBenefitIntervalHours()
	})
}

// SetUnitLockDeposit sets the "unit_lock_deposit" field.
func (u *GoodUpsertOne) SetUnitLockDeposit(v decimal.Decimal) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetUnitLockDeposit(v)
	})
}

// UpdateUnitLockDeposit sets the "unit_lock_deposit" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateUnitLockDeposit() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateUnitLockDeposit()
	})
}

// ClearUnitLockDeposit clears the value of the "unit_lock_deposit" field.
func (u *GoodUpsertOne) ClearUnitLockDeposit() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearUnitLockDeposit()
	})
}

// SetUnitType sets the "unit_type" field.
func (u *GoodUpsertOne) SetUnitType(v string) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetUnitType(v)
	})
}

// UpdateUnitType sets the "unit_type" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateUnitType() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateUnitType()
	})
}

// ClearUnitType clears the value of the "unit_type" field.
func (u *GoodUpsertOne) ClearUnitType() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearUnitType()
	})
}

// SetQuantityCalculateType sets the "quantity_calculate_type" field.
func (u *GoodUpsertOne) SetQuantityCalculateType(v string) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetQuantityCalculateType(v)
	})
}

// UpdateQuantityCalculateType sets the "quantity_calculate_type" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateQuantityCalculateType() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateQuantityCalculateType()
	})
}

// ClearQuantityCalculateType clears the value of the "quantity_calculate_type" field.
func (u *GoodUpsertOne) ClearQuantityCalculateType() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearQuantityCalculateType()
	})
}

// SetDurationType sets the "duration_type" field.
func (u *GoodUpsertOne) SetDurationType(v string) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetDurationType(v)
	})
}

// UpdateDurationType sets the "duration_type" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateDurationType() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateDurationType()
	})
}

// ClearDurationType clears the value of the "duration_type" field.
func (u *GoodUpsertOne) ClearDurationType() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearDurationType()
	})
}

// SetDurationCalculateType sets the "duration_calculate_type" field.
func (u *GoodUpsertOne) SetDurationCalculateType(v string) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetDurationCalculateType(v)
	})
}

// UpdateDurationCalculateType sets the "duration_calculate_type" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateDurationCalculateType() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateDurationCalculateType()
	})
}

// ClearDurationCalculateType clears the value of the "duration_calculate_type" field.
func (u *GoodUpsertOne) ClearDurationCalculateType() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearDurationCalculateType()
	})
}

// SetSettlementType sets the "settlement_type" field.
func (u *GoodUpsertOne) SetSettlementType(v string) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetSettlementType(v)
	})
}

// UpdateSettlementType sets the "settlement_type" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateSettlementType() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateSettlementType()
	})
}

// ClearSettlementType clears the value of the "settlement_type" field.
func (u *GoodUpsertOne) ClearSettlementType() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearSettlementType()
	})
}

// Exec executes the query.
func (u *GoodUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for GoodCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GoodUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GoodUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GoodCreateBulk is the builder for creating many Good entities in bulk.
type GoodCreateBulk struct {
	config
	err      error
	builders []*GoodCreate
	conflict []sql.ConflictOption
}

// Save creates the Good entities in the database.
func (gcb *GoodCreateBulk) Save(ctx context.Context) ([]*Good, error) {
	if gcb.err != nil {
		return nil, gcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Good, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GoodCreateBulk) SaveX(ctx context.Context) []*Good {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GoodCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GoodCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Good.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (gcb *GoodCreateBulk) OnConflict(opts ...sql.ConflictOption) *GoodUpsertBulk {
	gcb.conflict = opts
	return &GoodUpsertBulk{
		create: gcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Good.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gcb *GoodCreateBulk) OnConflictColumns(columns ...string) *GoodUpsertBulk {
	gcb.conflict = append(gcb.conflict, sql.ConflictColumns(columns...))
	return &GoodUpsertBulk{
		create: gcb,
	}
}

// GoodUpsertBulk is the builder for "upsert"-ing
// a bulk of Good nodes.
type GoodUpsertBulk struct {
	create *GoodCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Good.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(good.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GoodUpsertBulk) UpdateNewValues() *GoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(good.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Good.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GoodUpsertBulk) Ignore() *GoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodUpsertBulk) DoNothing() *GoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodCreateBulk.OnConflict
// documentation for more info.
func (u *GoodUpsertBulk) Update(set func(*GoodUpsert)) *GoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *GoodUpsertBulk) SetEntID(v uuid.UUID) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateEntID() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateEntID()
	})
}

// SetDeviceInfoID sets the "device_info_id" field.
func (u *GoodUpsertBulk) SetDeviceInfoID(v uuid.UUID) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetDeviceInfoID(v)
	})
}

// UpdateDeviceInfoID sets the "device_info_id" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateDeviceInfoID() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateDeviceInfoID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GoodUpsertBulk) SetCoinTypeID(v uuid.UUID) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateCoinTypeID() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateCoinTypeID()
	})
}

// SetInheritFromGoodID sets the "inherit_from_good_id" field.
func (u *GoodUpsertBulk) SetInheritFromGoodID(v uuid.UUID) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetInheritFromGoodID(v)
	})
}

// UpdateInheritFromGoodID sets the "inherit_from_good_id" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateInheritFromGoodID() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateInheritFromGoodID()
	})
}

// ClearInheritFromGoodID clears the value of the "inherit_from_good_id" field.
func (u *GoodUpsertBulk) ClearInheritFromGoodID() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearInheritFromGoodID()
	})
}

// SetVendorLocationID sets the "vendor_location_id" field.
func (u *GoodUpsertBulk) SetVendorLocationID(v uuid.UUID) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetVendorLocationID(v)
	})
}

// UpdateVendorLocationID sets the "vendor_location_id" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateVendorLocationID() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateVendorLocationID()
	})
}

// SetUnitPrice sets the "unit_price" field.
func (u *GoodUpsertBulk) SetUnitPrice(v decimal.Decimal) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetUnitPrice(v)
	})
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateUnitPrice() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateUnitPrice()
	})
}

// ClearUnitPrice clears the value of the "unit_price" field.
func (u *GoodUpsertBulk) ClearUnitPrice() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearUnitPrice()
	})
}

// SetBenefitType sets the "benefit_type" field.
func (u *GoodUpsertBulk) SetBenefitType(v string) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetBenefitType(v)
	})
}

// UpdateBenefitType sets the "benefit_type" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateBenefitType() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateBenefitType()
	})
}

// ClearBenefitType clears the value of the "benefit_type" field.
func (u *GoodUpsertBulk) ClearBenefitType() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearBenefitType()
	})
}

// SetGoodType sets the "good_type" field.
func (u *GoodUpsertBulk) SetGoodType(v string) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetGoodType(v)
	})
}

// UpdateGoodType sets the "good_type" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateGoodType() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateGoodType()
	})
}

// ClearGoodType clears the value of the "good_type" field.
func (u *GoodUpsertBulk) ClearGoodType() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearGoodType()
	})
}

// SetTitle sets the "title" field.
func (u *GoodUpsertBulk) SetTitle(v string) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateTitle() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *GoodUpsertBulk) ClearTitle() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearTitle()
	})
}

// SetUnit sets the "unit" field.
func (u *GoodUpsertBulk) SetUnit(v string) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetUnit(v)
	})
}

// UpdateUnit sets the "unit" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateUnit() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateUnit()
	})
}

// ClearUnit clears the value of the "unit" field.
func (u *GoodUpsertBulk) ClearUnit() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearUnit()
	})
}

// SetQuantityUnit sets the "quantity_unit" field.
func (u *GoodUpsertBulk) SetQuantityUnit(v string) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetQuantityUnit(v)
	})
}

// UpdateQuantityUnit sets the "quantity_unit" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateQuantityUnit() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateQuantityUnit()
	})
}

// ClearQuantityUnit clears the value of the "quantity_unit" field.
func (u *GoodUpsertBulk) ClearQuantityUnit() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearQuantityUnit()
	})
}

// SetUnitAmount sets the "unit_amount" field.
func (u *GoodUpsertBulk) SetUnitAmount(v int32) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetUnitAmount(v)
	})
}

// AddUnitAmount adds v to the "unit_amount" field.
func (u *GoodUpsertBulk) AddUnitAmount(v int32) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.AddUnitAmount(v)
	})
}

// UpdateUnitAmount sets the "unit_amount" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateUnitAmount() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateUnitAmount()
	})
}

// ClearUnitAmount clears the value of the "unit_amount" field.
func (u *GoodUpsertBulk) ClearUnitAmount() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearUnitAmount()
	})
}

// SetQuantityUnitAmount sets the "quantity_unit_amount" field.
func (u *GoodUpsertBulk) SetQuantityUnitAmount(v decimal.Decimal) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetQuantityUnitAmount(v)
	})
}

// UpdateQuantityUnitAmount sets the "quantity_unit_amount" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateQuantityUnitAmount() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateQuantityUnitAmount()
	})
}

// ClearQuantityUnitAmount clears the value of the "quantity_unit_amount" field.
func (u *GoodUpsertBulk) ClearQuantityUnitAmount() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearQuantityUnitAmount()
	})
}

// SetDeliveryAt sets the "delivery_at" field.
func (u *GoodUpsertBulk) SetDeliveryAt(v uint32) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetDeliveryAt(v)
	})
}

// AddDeliveryAt adds v to the "delivery_at" field.
func (u *GoodUpsertBulk) AddDeliveryAt(v uint32) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.AddDeliveryAt(v)
	})
}

// UpdateDeliveryAt sets the "delivery_at" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateDeliveryAt() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateDeliveryAt()
	})
}

// ClearDeliveryAt clears the value of the "delivery_at" field.
func (u *GoodUpsertBulk) ClearDeliveryAt() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearDeliveryAt()
	})
}

// SetStartAt sets the "start_at" field.
func (u *GoodUpsertBulk) SetStartAt(v uint32) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *GoodUpsertBulk) AddStartAt(v uint32) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateStartAt() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *GoodUpsertBulk) ClearStartAt() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearStartAt()
	})
}

// SetStartMode sets the "start_mode" field.
func (u *GoodUpsertBulk) SetStartMode(v string) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetStartMode(v)
	})
}

// UpdateStartMode sets the "start_mode" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateStartMode() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateStartMode()
	})
}

// ClearStartMode clears the value of the "start_mode" field.
func (u *GoodUpsertBulk) ClearStartMode() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearStartMode()
	})
}

// SetTestOnly sets the "test_only" field.
func (u *GoodUpsertBulk) SetTestOnly(v bool) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetTestOnly(v)
	})
}

// UpdateTestOnly sets the "test_only" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateTestOnly() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateTestOnly()
	})
}

// ClearTestOnly clears the value of the "test_only" field.
func (u *GoodUpsertBulk) ClearTestOnly() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearTestOnly()
	})
}

// SetBenefitIntervalHours sets the "benefit_interval_hours" field.
func (u *GoodUpsertBulk) SetBenefitIntervalHours(v uint32) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetBenefitIntervalHours(v)
	})
}

// AddBenefitIntervalHours adds v to the "benefit_interval_hours" field.
func (u *GoodUpsertBulk) AddBenefitIntervalHours(v uint32) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.AddBenefitIntervalHours(v)
	})
}

// UpdateBenefitIntervalHours sets the "benefit_interval_hours" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateBenefitIntervalHours() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateBenefitIntervalHours()
	})
}

// ClearBenefitIntervalHours clears the value of the "benefit_interval_hours" field.
func (u *GoodUpsertBulk) ClearBenefitIntervalHours() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearBenefitIntervalHours()
	})
}

// SetUnitLockDeposit sets the "unit_lock_deposit" field.
func (u *GoodUpsertBulk) SetUnitLockDeposit(v decimal.Decimal) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetUnitLockDeposit(v)
	})
}

// UpdateUnitLockDeposit sets the "unit_lock_deposit" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateUnitLockDeposit() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateUnitLockDeposit()
	})
}

// ClearUnitLockDeposit clears the value of the "unit_lock_deposit" field.
func (u *GoodUpsertBulk) ClearUnitLockDeposit() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearUnitLockDeposit()
	})
}

// SetUnitType sets the "unit_type" field.
func (u *GoodUpsertBulk) SetUnitType(v string) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetUnitType(v)
	})
}

// UpdateUnitType sets the "unit_type" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateUnitType() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateUnitType()
	})
}

// ClearUnitType clears the value of the "unit_type" field.
func (u *GoodUpsertBulk) ClearUnitType() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearUnitType()
	})
}

// SetQuantityCalculateType sets the "quantity_calculate_type" field.
func (u *GoodUpsertBulk) SetQuantityCalculateType(v string) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetQuantityCalculateType(v)
	})
}

// UpdateQuantityCalculateType sets the "quantity_calculate_type" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateQuantityCalculateType() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateQuantityCalculateType()
	})
}

// ClearQuantityCalculateType clears the value of the "quantity_calculate_type" field.
func (u *GoodUpsertBulk) ClearQuantityCalculateType() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearQuantityCalculateType()
	})
}

// SetDurationType sets the "duration_type" field.
func (u *GoodUpsertBulk) SetDurationType(v string) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetDurationType(v)
	})
}

// UpdateDurationType sets the "duration_type" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateDurationType() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateDurationType()
	})
}

// ClearDurationType clears the value of the "duration_type" field.
func (u *GoodUpsertBulk) ClearDurationType() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearDurationType()
	})
}

// SetDurationCalculateType sets the "duration_calculate_type" field.
func (u *GoodUpsertBulk) SetDurationCalculateType(v string) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetDurationCalculateType(v)
	})
}

// UpdateDurationCalculateType sets the "duration_calculate_type" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateDurationCalculateType() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateDurationCalculateType()
	})
}

// ClearDurationCalculateType clears the value of the "duration_calculate_type" field.
func (u *GoodUpsertBulk) ClearDurationCalculateType() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearDurationCalculateType()
	})
}

// SetSettlementType sets the "settlement_type" field.
func (u *GoodUpsertBulk) SetSettlementType(v string) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetSettlementType(v)
	})
}

// UpdateSettlementType sets the "settlement_type" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateSettlementType() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateSettlementType()
	})
}

// ClearSettlementType clears the value of the "settlement_type" field.
func (u *GoodUpsertBulk) ClearSettlementType() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearSettlementType()
	})
}

// Exec executes the query.
func (u *GoodUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the GoodCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for GoodCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

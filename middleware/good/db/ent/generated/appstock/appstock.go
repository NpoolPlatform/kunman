// Code generated by ent, DO NOT EDIT.

package appstock

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the appstock type in the database.
	Label = "app_stock"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldAppGoodID holds the string denoting the app_good_id field in the database.
	FieldAppGoodID = "app_good_id"
	// FieldReserved holds the string denoting the reserved field in the database.
	FieldReserved = "reserved"
	// FieldSpotQuantity holds the string denoting the spot_quantity field in the database.
	FieldSpotQuantity = "spot_quantity"
	// FieldLocked holds the string denoting the locked field in the database.
	FieldLocked = "locked"
	// FieldInService holds the string denoting the in_service field in the database.
	FieldInService = "in_service"
	// FieldWaitStart holds the string denoting the wait_start field in the database.
	FieldWaitStart = "wait_start"
	// FieldSold holds the string denoting the sold field in the database.
	FieldSold = "sold"
	// Table holds the table name of the appstock in the database.
	Table = "app_stocks"
)

// Columns holds all SQL columns for appstock fields.
var Columns = []string{
	FieldID,
	FieldEntID,
	FieldAppGoodID,
	FieldReserved,
	FieldSpotQuantity,
	FieldLocked,
	FieldInService,
	FieldWaitStart,
	FieldSold,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultAppGoodID holds the default value on creation for the "app_good_id" field.
	DefaultAppGoodID func() uuid.UUID
	// DefaultReserved holds the default value on creation for the "reserved" field.
	DefaultReserved decimal.Decimal
	// DefaultSpotQuantity holds the default value on creation for the "spot_quantity" field.
	DefaultSpotQuantity decimal.Decimal
	// DefaultLocked holds the default value on creation for the "locked" field.
	DefaultLocked decimal.Decimal
	// DefaultInService holds the default value on creation for the "in_service" field.
	DefaultInService decimal.Decimal
	// DefaultWaitStart holds the default value on creation for the "wait_start" field.
	DefaultWaitStart decimal.Decimal
	// DefaultSold holds the default value on creation for the "sold" field.
	DefaultSold decimal.Decimal
)

// OrderOption defines the ordering options for the AppStock queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByAppGoodID orders the results by the app_good_id field.
func ByAppGoodID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppGoodID, opts...).ToFunc()
}

// ByReserved orders the results by the reserved field.
func ByReserved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReserved, opts...).ToFunc()
}

// BySpotQuantity orders the results by the spot_quantity field.
func BySpotQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpotQuantity, opts...).ToFunc()
}

// ByLocked orders the results by the locked field.
func ByLocked(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocked, opts...).ToFunc()
}

// ByInService orders the results by the in_service field.
func ByInService(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInService, opts...).ToFunc()
}

// ByWaitStart orders the results by the wait_start field.
func ByWaitStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWaitStart, opts...).ToFunc()
}

// BySold orders the results by the sold field.
func BySold(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSold, opts...).ToFunc()
}

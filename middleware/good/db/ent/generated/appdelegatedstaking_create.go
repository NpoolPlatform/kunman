// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appdelegatedstaking"
	"github.com/google/uuid"
)

// AppDelegatedStakingCreate is the builder for creating a AppDelegatedStaking entity.
type AppDelegatedStakingCreate struct {
	config
	mutation *AppDelegatedStakingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (adsc *AppDelegatedStakingCreate) SetEntID(u uuid.UUID) *AppDelegatedStakingCreate {
	adsc.mutation.SetEntID(u)
	return adsc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (adsc *AppDelegatedStakingCreate) SetNillableEntID(u *uuid.UUID) *AppDelegatedStakingCreate {
	if u != nil {
		adsc.SetEntID(*u)
	}
	return adsc
}

// SetCreatedAt sets the "created_at" field.
func (adsc *AppDelegatedStakingCreate) SetCreatedAt(u uint32) *AppDelegatedStakingCreate {
	adsc.mutation.SetCreatedAt(u)
	return adsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (adsc *AppDelegatedStakingCreate) SetNillableCreatedAt(u *uint32) *AppDelegatedStakingCreate {
	if u != nil {
		adsc.SetCreatedAt(*u)
	}
	return adsc
}

// SetUpdatedAt sets the "updated_at" field.
func (adsc *AppDelegatedStakingCreate) SetUpdatedAt(u uint32) *AppDelegatedStakingCreate {
	adsc.mutation.SetUpdatedAt(u)
	return adsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (adsc *AppDelegatedStakingCreate) SetNillableUpdatedAt(u *uint32) *AppDelegatedStakingCreate {
	if u != nil {
		adsc.SetUpdatedAt(*u)
	}
	return adsc
}

// SetDeletedAt sets the "deleted_at" field.
func (adsc *AppDelegatedStakingCreate) SetDeletedAt(u uint32) *AppDelegatedStakingCreate {
	adsc.mutation.SetDeletedAt(u)
	return adsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (adsc *AppDelegatedStakingCreate) SetNillableDeletedAt(u *uint32) *AppDelegatedStakingCreate {
	if u != nil {
		adsc.SetDeletedAt(*u)
	}
	return adsc
}

// SetAppGoodID sets the "app_good_id" field.
func (adsc *AppDelegatedStakingCreate) SetAppGoodID(u uuid.UUID) *AppDelegatedStakingCreate {
	adsc.mutation.SetAppGoodID(u)
	return adsc
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (adsc *AppDelegatedStakingCreate) SetNillableAppGoodID(u *uuid.UUID) *AppDelegatedStakingCreate {
	if u != nil {
		adsc.SetAppGoodID(*u)
	}
	return adsc
}

// SetServiceStartAt sets the "service_start_at" field.
func (adsc *AppDelegatedStakingCreate) SetServiceStartAt(u uint32) *AppDelegatedStakingCreate {
	adsc.mutation.SetServiceStartAt(u)
	return adsc
}

// SetNillableServiceStartAt sets the "service_start_at" field if the given value is not nil.
func (adsc *AppDelegatedStakingCreate) SetNillableServiceStartAt(u *uint32) *AppDelegatedStakingCreate {
	if u != nil {
		adsc.SetServiceStartAt(*u)
	}
	return adsc
}

// SetStartMode sets the "start_mode" field.
func (adsc *AppDelegatedStakingCreate) SetStartMode(s string) *AppDelegatedStakingCreate {
	adsc.mutation.SetStartMode(s)
	return adsc
}

// SetNillableStartMode sets the "start_mode" field if the given value is not nil.
func (adsc *AppDelegatedStakingCreate) SetNillableStartMode(s *string) *AppDelegatedStakingCreate {
	if s != nil {
		adsc.SetStartMode(*s)
	}
	return adsc
}

// SetEnableSetCommission sets the "enable_set_commission" field.
func (adsc *AppDelegatedStakingCreate) SetEnableSetCommission(b bool) *AppDelegatedStakingCreate {
	adsc.mutation.SetEnableSetCommission(b)
	return adsc
}

// SetNillableEnableSetCommission sets the "enable_set_commission" field if the given value is not nil.
func (adsc *AppDelegatedStakingCreate) SetNillableEnableSetCommission(b *bool) *AppDelegatedStakingCreate {
	if b != nil {
		adsc.SetEnableSetCommission(*b)
	}
	return adsc
}

// SetID sets the "id" field.
func (adsc *AppDelegatedStakingCreate) SetID(u uint32) *AppDelegatedStakingCreate {
	adsc.mutation.SetID(u)
	return adsc
}

// Mutation returns the AppDelegatedStakingMutation object of the builder.
func (adsc *AppDelegatedStakingCreate) Mutation() *AppDelegatedStakingMutation {
	return adsc.mutation
}

// Save creates the AppDelegatedStaking in the database.
func (adsc *AppDelegatedStakingCreate) Save(ctx context.Context) (*AppDelegatedStaking, error) {
	adsc.defaults()
	return withHooks(ctx, adsc.sqlSave, adsc.mutation, adsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (adsc *AppDelegatedStakingCreate) SaveX(ctx context.Context) *AppDelegatedStaking {
	v, err := adsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (adsc *AppDelegatedStakingCreate) Exec(ctx context.Context) error {
	_, err := adsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adsc *AppDelegatedStakingCreate) ExecX(ctx context.Context) {
	if err := adsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (adsc *AppDelegatedStakingCreate) defaults() {
	if _, ok := adsc.mutation.EntID(); !ok {
		v := appdelegatedstaking.DefaultEntID()
		adsc.mutation.SetEntID(v)
	}
	if _, ok := adsc.mutation.CreatedAt(); !ok {
		v := appdelegatedstaking.DefaultCreatedAt()
		adsc.mutation.SetCreatedAt(v)
	}
	if _, ok := adsc.mutation.UpdatedAt(); !ok {
		v := appdelegatedstaking.DefaultUpdatedAt()
		adsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := adsc.mutation.DeletedAt(); !ok {
		v := appdelegatedstaking.DefaultDeletedAt()
		adsc.mutation.SetDeletedAt(v)
	}
	if _, ok := adsc.mutation.AppGoodID(); !ok {
		v := appdelegatedstaking.DefaultAppGoodID()
		adsc.mutation.SetAppGoodID(v)
	}
	if _, ok := adsc.mutation.ServiceStartAt(); !ok {
		v := appdelegatedstaking.DefaultServiceStartAt
		adsc.mutation.SetServiceStartAt(v)
	}
	if _, ok := adsc.mutation.StartMode(); !ok {
		v := appdelegatedstaking.DefaultStartMode
		adsc.mutation.SetStartMode(v)
	}
	if _, ok := adsc.mutation.EnableSetCommission(); !ok {
		v := appdelegatedstaking.DefaultEnableSetCommission
		adsc.mutation.SetEnableSetCommission(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (adsc *AppDelegatedStakingCreate) check() error {
	if _, ok := adsc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "AppDelegatedStaking.ent_id"`)}
	}
	if _, ok := adsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "AppDelegatedStaking.created_at"`)}
	}
	if _, ok := adsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "AppDelegatedStaking.updated_at"`)}
	}
	if _, ok := adsc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "AppDelegatedStaking.deleted_at"`)}
	}
	return nil
}

func (adsc *AppDelegatedStakingCreate) sqlSave(ctx context.Context) (*AppDelegatedStaking, error) {
	if err := adsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := adsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, adsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	adsc.mutation.id = &_node.ID
	adsc.mutation.done = true
	return _node, nil
}

func (adsc *AppDelegatedStakingCreate) createSpec() (*AppDelegatedStaking, *sqlgraph.CreateSpec) {
	var (
		_node = &AppDelegatedStaking{config: adsc.config}
		_spec = sqlgraph.NewCreateSpec(appdelegatedstaking.Table, sqlgraph.NewFieldSpec(appdelegatedstaking.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = adsc.conflict
	if id, ok := adsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := adsc.mutation.EntID(); ok {
		_spec.SetField(appdelegatedstaking.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := adsc.mutation.CreatedAt(); ok {
		_spec.SetField(appdelegatedstaking.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := adsc.mutation.UpdatedAt(); ok {
		_spec.SetField(appdelegatedstaking.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := adsc.mutation.DeletedAt(); ok {
		_spec.SetField(appdelegatedstaking.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := adsc.mutation.AppGoodID(); ok {
		_spec.SetField(appdelegatedstaking.FieldAppGoodID, field.TypeUUID, value)
		_node.AppGoodID = value
	}
	if value, ok := adsc.mutation.ServiceStartAt(); ok {
		_spec.SetField(appdelegatedstaking.FieldServiceStartAt, field.TypeUint32, value)
		_node.ServiceStartAt = value
	}
	if value, ok := adsc.mutation.StartMode(); ok {
		_spec.SetField(appdelegatedstaking.FieldStartMode, field.TypeString, value)
		_node.StartMode = value
	}
	if value, ok := adsc.mutation.EnableSetCommission(); ok {
		_spec.SetField(appdelegatedstaking.FieldEnableSetCommission, field.TypeBool, value)
		_node.EnableSetCommission = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppDelegatedStaking.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppDelegatedStakingUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (adsc *AppDelegatedStakingCreate) OnConflict(opts ...sql.ConflictOption) *AppDelegatedStakingUpsertOne {
	adsc.conflict = opts
	return &AppDelegatedStakingUpsertOne{
		create: adsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppDelegatedStaking.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (adsc *AppDelegatedStakingCreate) OnConflictColumns(columns ...string) *AppDelegatedStakingUpsertOne {
	adsc.conflict = append(adsc.conflict, sql.ConflictColumns(columns...))
	return &AppDelegatedStakingUpsertOne{
		create: adsc,
	}
}

type (
	// AppDelegatedStakingUpsertOne is the builder for "upsert"-ing
	//  one AppDelegatedStaking node.
	AppDelegatedStakingUpsertOne struct {
		create *AppDelegatedStakingCreate
	}

	// AppDelegatedStakingUpsert is the "OnConflict" setter.
	AppDelegatedStakingUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *AppDelegatedStakingUpsert) SetEntID(v uuid.UUID) *AppDelegatedStakingUpsert {
	u.Set(appdelegatedstaking.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppDelegatedStakingUpsert) UpdateEntID() *AppDelegatedStakingUpsert {
	u.SetExcluded(appdelegatedstaking.FieldEntID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppDelegatedStakingUpsert) SetCreatedAt(v uint32) *AppDelegatedStakingUpsert {
	u.Set(appdelegatedstaking.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppDelegatedStakingUpsert) UpdateCreatedAt() *AppDelegatedStakingUpsert {
	u.SetExcluded(appdelegatedstaking.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppDelegatedStakingUpsert) AddCreatedAt(v uint32) *AppDelegatedStakingUpsert {
	u.Add(appdelegatedstaking.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppDelegatedStakingUpsert) SetUpdatedAt(v uint32) *AppDelegatedStakingUpsert {
	u.Set(appdelegatedstaking.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppDelegatedStakingUpsert) UpdateUpdatedAt() *AppDelegatedStakingUpsert {
	u.SetExcluded(appdelegatedstaking.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppDelegatedStakingUpsert) AddUpdatedAt(v uint32) *AppDelegatedStakingUpsert {
	u.Add(appdelegatedstaking.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppDelegatedStakingUpsert) SetDeletedAt(v uint32) *AppDelegatedStakingUpsert {
	u.Set(appdelegatedstaking.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppDelegatedStakingUpsert) UpdateDeletedAt() *AppDelegatedStakingUpsert {
	u.SetExcluded(appdelegatedstaking.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppDelegatedStakingUpsert) AddDeletedAt(v uint32) *AppDelegatedStakingUpsert {
	u.Add(appdelegatedstaking.FieldDeletedAt, v)
	return u
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppDelegatedStakingUpsert) SetAppGoodID(v uuid.UUID) *AppDelegatedStakingUpsert {
	u.Set(appdelegatedstaking.FieldAppGoodID, v)
	return u
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppDelegatedStakingUpsert) UpdateAppGoodID() *AppDelegatedStakingUpsert {
	u.SetExcluded(appdelegatedstaking.FieldAppGoodID)
	return u
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppDelegatedStakingUpsert) ClearAppGoodID() *AppDelegatedStakingUpsert {
	u.SetNull(appdelegatedstaking.FieldAppGoodID)
	return u
}

// SetServiceStartAt sets the "service_start_at" field.
func (u *AppDelegatedStakingUpsert) SetServiceStartAt(v uint32) *AppDelegatedStakingUpsert {
	u.Set(appdelegatedstaking.FieldServiceStartAt, v)
	return u
}

// UpdateServiceStartAt sets the "service_start_at" field to the value that was provided on create.
func (u *AppDelegatedStakingUpsert) UpdateServiceStartAt() *AppDelegatedStakingUpsert {
	u.SetExcluded(appdelegatedstaking.FieldServiceStartAt)
	return u
}

// AddServiceStartAt adds v to the "service_start_at" field.
func (u *AppDelegatedStakingUpsert) AddServiceStartAt(v uint32) *AppDelegatedStakingUpsert {
	u.Add(appdelegatedstaking.FieldServiceStartAt, v)
	return u
}

// ClearServiceStartAt clears the value of the "service_start_at" field.
func (u *AppDelegatedStakingUpsert) ClearServiceStartAt() *AppDelegatedStakingUpsert {
	u.SetNull(appdelegatedstaking.FieldServiceStartAt)
	return u
}

// SetStartMode sets the "start_mode" field.
func (u *AppDelegatedStakingUpsert) SetStartMode(v string) *AppDelegatedStakingUpsert {
	u.Set(appdelegatedstaking.FieldStartMode, v)
	return u
}

// UpdateStartMode sets the "start_mode" field to the value that was provided on create.
func (u *AppDelegatedStakingUpsert) UpdateStartMode() *AppDelegatedStakingUpsert {
	u.SetExcluded(appdelegatedstaking.FieldStartMode)
	return u
}

// ClearStartMode clears the value of the "start_mode" field.
func (u *AppDelegatedStakingUpsert) ClearStartMode() *AppDelegatedStakingUpsert {
	u.SetNull(appdelegatedstaking.FieldStartMode)
	return u
}

// SetEnableSetCommission sets the "enable_set_commission" field.
func (u *AppDelegatedStakingUpsert) SetEnableSetCommission(v bool) *AppDelegatedStakingUpsert {
	u.Set(appdelegatedstaking.FieldEnableSetCommission, v)
	return u
}

// UpdateEnableSetCommission sets the "enable_set_commission" field to the value that was provided on create.
func (u *AppDelegatedStakingUpsert) UpdateEnableSetCommission() *AppDelegatedStakingUpsert {
	u.SetExcluded(appdelegatedstaking.FieldEnableSetCommission)
	return u
}

// ClearEnableSetCommission clears the value of the "enable_set_commission" field.
func (u *AppDelegatedStakingUpsert) ClearEnableSetCommission() *AppDelegatedStakingUpsert {
	u.SetNull(appdelegatedstaking.FieldEnableSetCommission)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppDelegatedStaking.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appdelegatedstaking.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppDelegatedStakingUpsertOne) UpdateNewValues() *AppDelegatedStakingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appdelegatedstaking.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppDelegatedStaking.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppDelegatedStakingUpsertOne) Ignore() *AppDelegatedStakingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppDelegatedStakingUpsertOne) DoNothing() *AppDelegatedStakingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppDelegatedStakingCreate.OnConflict
// documentation for more info.
func (u *AppDelegatedStakingUpsertOne) Update(set func(*AppDelegatedStakingUpsert)) *AppDelegatedStakingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppDelegatedStakingUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppDelegatedStakingUpsertOne) SetEntID(v uuid.UUID) *AppDelegatedStakingUpsertOne {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppDelegatedStakingUpsertOne) UpdateEntID() *AppDelegatedStakingUpsertOne {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AppDelegatedStakingUpsertOne) SetCreatedAt(v uint32) *AppDelegatedStakingUpsertOne {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppDelegatedStakingUpsertOne) AddCreatedAt(v uint32) *AppDelegatedStakingUpsertOne {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppDelegatedStakingUpsertOne) UpdateCreatedAt() *AppDelegatedStakingUpsertOne {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppDelegatedStakingUpsertOne) SetUpdatedAt(v uint32) *AppDelegatedStakingUpsertOne {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppDelegatedStakingUpsertOne) AddUpdatedAt(v uint32) *AppDelegatedStakingUpsertOne {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppDelegatedStakingUpsertOne) UpdateUpdatedAt() *AppDelegatedStakingUpsertOne {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppDelegatedStakingUpsertOne) SetDeletedAt(v uint32) *AppDelegatedStakingUpsertOne {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppDelegatedStakingUpsertOne) AddDeletedAt(v uint32) *AppDelegatedStakingUpsertOne {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppDelegatedStakingUpsertOne) UpdateDeletedAt() *AppDelegatedStakingUpsertOne {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppDelegatedStakingUpsertOne) SetAppGoodID(v uuid.UUID) *AppDelegatedStakingUpsertOne {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppDelegatedStakingUpsertOne) UpdateAppGoodID() *AppDelegatedStakingUpsertOne {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppDelegatedStakingUpsertOne) ClearAppGoodID() *AppDelegatedStakingUpsertOne {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.ClearAppGoodID()
	})
}

// SetServiceStartAt sets the "service_start_at" field.
func (u *AppDelegatedStakingUpsertOne) SetServiceStartAt(v uint32) *AppDelegatedStakingUpsertOne {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.SetServiceStartAt(v)
	})
}

// AddServiceStartAt adds v to the "service_start_at" field.
func (u *AppDelegatedStakingUpsertOne) AddServiceStartAt(v uint32) *AppDelegatedStakingUpsertOne {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.AddServiceStartAt(v)
	})
}

// UpdateServiceStartAt sets the "service_start_at" field to the value that was provided on create.
func (u *AppDelegatedStakingUpsertOne) UpdateServiceStartAt() *AppDelegatedStakingUpsertOne {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.UpdateServiceStartAt()
	})
}

// ClearServiceStartAt clears the value of the "service_start_at" field.
func (u *AppDelegatedStakingUpsertOne) ClearServiceStartAt() *AppDelegatedStakingUpsertOne {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.ClearServiceStartAt()
	})
}

// SetStartMode sets the "start_mode" field.
func (u *AppDelegatedStakingUpsertOne) SetStartMode(v string) *AppDelegatedStakingUpsertOne {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.SetStartMode(v)
	})
}

// UpdateStartMode sets the "start_mode" field to the value that was provided on create.
func (u *AppDelegatedStakingUpsertOne) UpdateStartMode() *AppDelegatedStakingUpsertOne {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.UpdateStartMode()
	})
}

// ClearStartMode clears the value of the "start_mode" field.
func (u *AppDelegatedStakingUpsertOne) ClearStartMode() *AppDelegatedStakingUpsertOne {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.ClearStartMode()
	})
}

// SetEnableSetCommission sets the "enable_set_commission" field.
func (u *AppDelegatedStakingUpsertOne) SetEnableSetCommission(v bool) *AppDelegatedStakingUpsertOne {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.SetEnableSetCommission(v)
	})
}

// UpdateEnableSetCommission sets the "enable_set_commission" field to the value that was provided on create.
func (u *AppDelegatedStakingUpsertOne) UpdateEnableSetCommission() *AppDelegatedStakingUpsertOne {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.UpdateEnableSetCommission()
	})
}

// ClearEnableSetCommission clears the value of the "enable_set_commission" field.
func (u *AppDelegatedStakingUpsertOne) ClearEnableSetCommission() *AppDelegatedStakingUpsertOne {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.ClearEnableSetCommission()
	})
}

// Exec executes the query.
func (u *AppDelegatedStakingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppDelegatedStakingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppDelegatedStakingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppDelegatedStakingUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppDelegatedStakingUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppDelegatedStakingCreateBulk is the builder for creating many AppDelegatedStaking entities in bulk.
type AppDelegatedStakingCreateBulk struct {
	config
	err      error
	builders []*AppDelegatedStakingCreate
	conflict []sql.ConflictOption
}

// Save creates the AppDelegatedStaking entities in the database.
func (adscb *AppDelegatedStakingCreateBulk) Save(ctx context.Context) ([]*AppDelegatedStaking, error) {
	if adscb.err != nil {
		return nil, adscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(adscb.builders))
	nodes := make([]*AppDelegatedStaking, len(adscb.builders))
	mutators := make([]Mutator, len(adscb.builders))
	for i := range adscb.builders {
		func(i int, root context.Context) {
			builder := adscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppDelegatedStakingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, adscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = adscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, adscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, adscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (adscb *AppDelegatedStakingCreateBulk) SaveX(ctx context.Context) []*AppDelegatedStaking {
	v, err := adscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (adscb *AppDelegatedStakingCreateBulk) Exec(ctx context.Context) error {
	_, err := adscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adscb *AppDelegatedStakingCreateBulk) ExecX(ctx context.Context) {
	if err := adscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppDelegatedStaking.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppDelegatedStakingUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (adscb *AppDelegatedStakingCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppDelegatedStakingUpsertBulk {
	adscb.conflict = opts
	return &AppDelegatedStakingUpsertBulk{
		create: adscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppDelegatedStaking.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (adscb *AppDelegatedStakingCreateBulk) OnConflictColumns(columns ...string) *AppDelegatedStakingUpsertBulk {
	adscb.conflict = append(adscb.conflict, sql.ConflictColumns(columns...))
	return &AppDelegatedStakingUpsertBulk{
		create: adscb,
	}
}

// AppDelegatedStakingUpsertBulk is the builder for "upsert"-ing
// a bulk of AppDelegatedStaking nodes.
type AppDelegatedStakingUpsertBulk struct {
	create *AppDelegatedStakingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppDelegatedStaking.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appdelegatedstaking.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppDelegatedStakingUpsertBulk) UpdateNewValues() *AppDelegatedStakingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appdelegatedstaking.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppDelegatedStaking.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppDelegatedStakingUpsertBulk) Ignore() *AppDelegatedStakingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppDelegatedStakingUpsertBulk) DoNothing() *AppDelegatedStakingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppDelegatedStakingCreateBulk.OnConflict
// documentation for more info.
func (u *AppDelegatedStakingUpsertBulk) Update(set func(*AppDelegatedStakingUpsert)) *AppDelegatedStakingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppDelegatedStakingUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppDelegatedStakingUpsertBulk) SetEntID(v uuid.UUID) *AppDelegatedStakingUpsertBulk {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppDelegatedStakingUpsertBulk) UpdateEntID() *AppDelegatedStakingUpsertBulk {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AppDelegatedStakingUpsertBulk) SetCreatedAt(v uint32) *AppDelegatedStakingUpsertBulk {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppDelegatedStakingUpsertBulk) AddCreatedAt(v uint32) *AppDelegatedStakingUpsertBulk {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppDelegatedStakingUpsertBulk) UpdateCreatedAt() *AppDelegatedStakingUpsertBulk {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppDelegatedStakingUpsertBulk) SetUpdatedAt(v uint32) *AppDelegatedStakingUpsertBulk {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppDelegatedStakingUpsertBulk) AddUpdatedAt(v uint32) *AppDelegatedStakingUpsertBulk {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppDelegatedStakingUpsertBulk) UpdateUpdatedAt() *AppDelegatedStakingUpsertBulk {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppDelegatedStakingUpsertBulk) SetDeletedAt(v uint32) *AppDelegatedStakingUpsertBulk {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppDelegatedStakingUpsertBulk) AddDeletedAt(v uint32) *AppDelegatedStakingUpsertBulk {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppDelegatedStakingUpsertBulk) UpdateDeletedAt() *AppDelegatedStakingUpsertBulk {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppDelegatedStakingUpsertBulk) SetAppGoodID(v uuid.UUID) *AppDelegatedStakingUpsertBulk {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppDelegatedStakingUpsertBulk) UpdateAppGoodID() *AppDelegatedStakingUpsertBulk {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppDelegatedStakingUpsertBulk) ClearAppGoodID() *AppDelegatedStakingUpsertBulk {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.ClearAppGoodID()
	})
}

// SetServiceStartAt sets the "service_start_at" field.
func (u *AppDelegatedStakingUpsertBulk) SetServiceStartAt(v uint32) *AppDelegatedStakingUpsertBulk {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.SetServiceStartAt(v)
	})
}

// AddServiceStartAt adds v to the "service_start_at" field.
func (u *AppDelegatedStakingUpsertBulk) AddServiceStartAt(v uint32) *AppDelegatedStakingUpsertBulk {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.AddServiceStartAt(v)
	})
}

// UpdateServiceStartAt sets the "service_start_at" field to the value that was provided on create.
func (u *AppDelegatedStakingUpsertBulk) UpdateServiceStartAt() *AppDelegatedStakingUpsertBulk {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.UpdateServiceStartAt()
	})
}

// ClearServiceStartAt clears the value of the "service_start_at" field.
func (u *AppDelegatedStakingUpsertBulk) ClearServiceStartAt() *AppDelegatedStakingUpsertBulk {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.ClearServiceStartAt()
	})
}

// SetStartMode sets the "start_mode" field.
func (u *AppDelegatedStakingUpsertBulk) SetStartMode(v string) *AppDelegatedStakingUpsertBulk {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.SetStartMode(v)
	})
}

// UpdateStartMode sets the "start_mode" field to the value that was provided on create.
func (u *AppDelegatedStakingUpsertBulk) UpdateStartMode() *AppDelegatedStakingUpsertBulk {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.UpdateStartMode()
	})
}

// ClearStartMode clears the value of the "start_mode" field.
func (u *AppDelegatedStakingUpsertBulk) ClearStartMode() *AppDelegatedStakingUpsertBulk {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.ClearStartMode()
	})
}

// SetEnableSetCommission sets the "enable_set_commission" field.
func (u *AppDelegatedStakingUpsertBulk) SetEnableSetCommission(v bool) *AppDelegatedStakingUpsertBulk {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.SetEnableSetCommission(v)
	})
}

// UpdateEnableSetCommission sets the "enable_set_commission" field to the value that was provided on create.
func (u *AppDelegatedStakingUpsertBulk) UpdateEnableSetCommission() *AppDelegatedStakingUpsertBulk {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.UpdateEnableSetCommission()
	})
}

// ClearEnableSetCommission clears the value of the "enable_set_commission" field.
func (u *AppDelegatedStakingUpsertBulk) ClearEnableSetCommission() *AppDelegatedStakingUpsertBulk {
	return u.Update(func(s *AppDelegatedStakingUpsert) {
		s.ClearEnableSetCommission()
	})
}

// Exec executes the query.
func (u *AppDelegatedStakingUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the AppDelegatedStakingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppDelegatedStakingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppDelegatedStakingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

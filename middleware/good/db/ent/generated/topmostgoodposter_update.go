// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/topmostgoodposter"
	"github.com/google/uuid"
)

// TopMostGoodPosterUpdate is the builder for updating TopMostGoodPoster entities.
type TopMostGoodPosterUpdate struct {
	config
	hooks     []Hook
	mutation  *TopMostGoodPosterMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TopMostGoodPosterUpdate builder.
func (tmgpu *TopMostGoodPosterUpdate) Where(ps ...predicate.TopMostGoodPoster) *TopMostGoodPosterUpdate {
	tmgpu.mutation.Where(ps...)
	return tmgpu
}

// SetEntID sets the "ent_id" field.
func (tmgpu *TopMostGoodPosterUpdate) SetEntID(u uuid.UUID) *TopMostGoodPosterUpdate {
	tmgpu.mutation.SetEntID(u)
	return tmgpu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tmgpu *TopMostGoodPosterUpdate) SetNillableEntID(u *uuid.UUID) *TopMostGoodPosterUpdate {
	if u != nil {
		tmgpu.SetEntID(*u)
	}
	return tmgpu
}

// SetTopMostGoodID sets the "top_most_good_id" field.
func (tmgpu *TopMostGoodPosterUpdate) SetTopMostGoodID(u uuid.UUID) *TopMostGoodPosterUpdate {
	tmgpu.mutation.SetTopMostGoodID(u)
	return tmgpu
}

// SetNillableTopMostGoodID sets the "top_most_good_id" field if the given value is not nil.
func (tmgpu *TopMostGoodPosterUpdate) SetNillableTopMostGoodID(u *uuid.UUID) *TopMostGoodPosterUpdate {
	if u != nil {
		tmgpu.SetTopMostGoodID(*u)
	}
	return tmgpu
}

// ClearTopMostGoodID clears the value of the "top_most_good_id" field.
func (tmgpu *TopMostGoodPosterUpdate) ClearTopMostGoodID() *TopMostGoodPosterUpdate {
	tmgpu.mutation.ClearTopMostGoodID()
	return tmgpu
}

// SetPoster sets the "poster" field.
func (tmgpu *TopMostGoodPosterUpdate) SetPoster(s string) *TopMostGoodPosterUpdate {
	tmgpu.mutation.SetPoster(s)
	return tmgpu
}

// SetNillablePoster sets the "poster" field if the given value is not nil.
func (tmgpu *TopMostGoodPosterUpdate) SetNillablePoster(s *string) *TopMostGoodPosterUpdate {
	if s != nil {
		tmgpu.SetPoster(*s)
	}
	return tmgpu
}

// ClearPoster clears the value of the "poster" field.
func (tmgpu *TopMostGoodPosterUpdate) ClearPoster() *TopMostGoodPosterUpdate {
	tmgpu.mutation.ClearPoster()
	return tmgpu
}

// SetIndex sets the "index" field.
func (tmgpu *TopMostGoodPosterUpdate) SetIndex(u uint8) *TopMostGoodPosterUpdate {
	tmgpu.mutation.ResetIndex()
	tmgpu.mutation.SetIndex(u)
	return tmgpu
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (tmgpu *TopMostGoodPosterUpdate) SetNillableIndex(u *uint8) *TopMostGoodPosterUpdate {
	if u != nil {
		tmgpu.SetIndex(*u)
	}
	return tmgpu
}

// AddIndex adds u to the "index" field.
func (tmgpu *TopMostGoodPosterUpdate) AddIndex(u int8) *TopMostGoodPosterUpdate {
	tmgpu.mutation.AddIndex(u)
	return tmgpu
}

// ClearIndex clears the value of the "index" field.
func (tmgpu *TopMostGoodPosterUpdate) ClearIndex() *TopMostGoodPosterUpdate {
	tmgpu.mutation.ClearIndex()
	return tmgpu
}

// Mutation returns the TopMostGoodPosterMutation object of the builder.
func (tmgpu *TopMostGoodPosterUpdate) Mutation() *TopMostGoodPosterMutation {
	return tmgpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tmgpu *TopMostGoodPosterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tmgpu.sqlSave, tmgpu.mutation, tmgpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tmgpu *TopMostGoodPosterUpdate) SaveX(ctx context.Context) int {
	affected, err := tmgpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tmgpu *TopMostGoodPosterUpdate) Exec(ctx context.Context) error {
	_, err := tmgpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmgpu *TopMostGoodPosterUpdate) ExecX(ctx context.Context) {
	if err := tmgpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tmgpu *TopMostGoodPosterUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TopMostGoodPosterUpdate {
	tmgpu.modifiers = append(tmgpu.modifiers, modifiers...)
	return tmgpu
}

func (tmgpu *TopMostGoodPosterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(topmostgoodposter.Table, topmostgoodposter.Columns, sqlgraph.NewFieldSpec(topmostgoodposter.FieldID, field.TypeUint32))
	if ps := tmgpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmgpu.mutation.EntID(); ok {
		_spec.SetField(topmostgoodposter.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := tmgpu.mutation.TopMostGoodID(); ok {
		_spec.SetField(topmostgoodposter.FieldTopMostGoodID, field.TypeUUID, value)
	}
	if tmgpu.mutation.TopMostGoodIDCleared() {
		_spec.ClearField(topmostgoodposter.FieldTopMostGoodID, field.TypeUUID)
	}
	if value, ok := tmgpu.mutation.Poster(); ok {
		_spec.SetField(topmostgoodposter.FieldPoster, field.TypeString, value)
	}
	if tmgpu.mutation.PosterCleared() {
		_spec.ClearField(topmostgoodposter.FieldPoster, field.TypeString)
	}
	if value, ok := tmgpu.mutation.Index(); ok {
		_spec.SetField(topmostgoodposter.FieldIndex, field.TypeUint8, value)
	}
	if value, ok := tmgpu.mutation.AddedIndex(); ok {
		_spec.AddField(topmostgoodposter.FieldIndex, field.TypeUint8, value)
	}
	if tmgpu.mutation.IndexCleared() {
		_spec.ClearField(topmostgoodposter.FieldIndex, field.TypeUint8)
	}
	_spec.AddModifiers(tmgpu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tmgpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topmostgoodposter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tmgpu.mutation.done = true
	return n, nil
}

// TopMostGoodPosterUpdateOne is the builder for updating a single TopMostGoodPoster entity.
type TopMostGoodPosterUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TopMostGoodPosterMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (tmgpuo *TopMostGoodPosterUpdateOne) SetEntID(u uuid.UUID) *TopMostGoodPosterUpdateOne {
	tmgpuo.mutation.SetEntID(u)
	return tmgpuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tmgpuo *TopMostGoodPosterUpdateOne) SetNillableEntID(u *uuid.UUID) *TopMostGoodPosterUpdateOne {
	if u != nil {
		tmgpuo.SetEntID(*u)
	}
	return tmgpuo
}

// SetTopMostGoodID sets the "top_most_good_id" field.
func (tmgpuo *TopMostGoodPosterUpdateOne) SetTopMostGoodID(u uuid.UUID) *TopMostGoodPosterUpdateOne {
	tmgpuo.mutation.SetTopMostGoodID(u)
	return tmgpuo
}

// SetNillableTopMostGoodID sets the "top_most_good_id" field if the given value is not nil.
func (tmgpuo *TopMostGoodPosterUpdateOne) SetNillableTopMostGoodID(u *uuid.UUID) *TopMostGoodPosterUpdateOne {
	if u != nil {
		tmgpuo.SetTopMostGoodID(*u)
	}
	return tmgpuo
}

// ClearTopMostGoodID clears the value of the "top_most_good_id" field.
func (tmgpuo *TopMostGoodPosterUpdateOne) ClearTopMostGoodID() *TopMostGoodPosterUpdateOne {
	tmgpuo.mutation.ClearTopMostGoodID()
	return tmgpuo
}

// SetPoster sets the "poster" field.
func (tmgpuo *TopMostGoodPosterUpdateOne) SetPoster(s string) *TopMostGoodPosterUpdateOne {
	tmgpuo.mutation.SetPoster(s)
	return tmgpuo
}

// SetNillablePoster sets the "poster" field if the given value is not nil.
func (tmgpuo *TopMostGoodPosterUpdateOne) SetNillablePoster(s *string) *TopMostGoodPosterUpdateOne {
	if s != nil {
		tmgpuo.SetPoster(*s)
	}
	return tmgpuo
}

// ClearPoster clears the value of the "poster" field.
func (tmgpuo *TopMostGoodPosterUpdateOne) ClearPoster() *TopMostGoodPosterUpdateOne {
	tmgpuo.mutation.ClearPoster()
	return tmgpuo
}

// SetIndex sets the "index" field.
func (tmgpuo *TopMostGoodPosterUpdateOne) SetIndex(u uint8) *TopMostGoodPosterUpdateOne {
	tmgpuo.mutation.ResetIndex()
	tmgpuo.mutation.SetIndex(u)
	return tmgpuo
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (tmgpuo *TopMostGoodPosterUpdateOne) SetNillableIndex(u *uint8) *TopMostGoodPosterUpdateOne {
	if u != nil {
		tmgpuo.SetIndex(*u)
	}
	return tmgpuo
}

// AddIndex adds u to the "index" field.
func (tmgpuo *TopMostGoodPosterUpdateOne) AddIndex(u int8) *TopMostGoodPosterUpdateOne {
	tmgpuo.mutation.AddIndex(u)
	return tmgpuo
}

// ClearIndex clears the value of the "index" field.
func (tmgpuo *TopMostGoodPosterUpdateOne) ClearIndex() *TopMostGoodPosterUpdateOne {
	tmgpuo.mutation.ClearIndex()
	return tmgpuo
}

// Mutation returns the TopMostGoodPosterMutation object of the builder.
func (tmgpuo *TopMostGoodPosterUpdateOne) Mutation() *TopMostGoodPosterMutation {
	return tmgpuo.mutation
}

// Where appends a list predicates to the TopMostGoodPosterUpdate builder.
func (tmgpuo *TopMostGoodPosterUpdateOne) Where(ps ...predicate.TopMostGoodPoster) *TopMostGoodPosterUpdateOne {
	tmgpuo.mutation.Where(ps...)
	return tmgpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tmgpuo *TopMostGoodPosterUpdateOne) Select(field string, fields ...string) *TopMostGoodPosterUpdateOne {
	tmgpuo.fields = append([]string{field}, fields...)
	return tmgpuo
}

// Save executes the query and returns the updated TopMostGoodPoster entity.
func (tmgpuo *TopMostGoodPosterUpdateOne) Save(ctx context.Context) (*TopMostGoodPoster, error) {
	return withHooks(ctx, tmgpuo.sqlSave, tmgpuo.mutation, tmgpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tmgpuo *TopMostGoodPosterUpdateOne) SaveX(ctx context.Context) *TopMostGoodPoster {
	node, err := tmgpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tmgpuo *TopMostGoodPosterUpdateOne) Exec(ctx context.Context) error {
	_, err := tmgpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmgpuo *TopMostGoodPosterUpdateOne) ExecX(ctx context.Context) {
	if err := tmgpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tmgpuo *TopMostGoodPosterUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TopMostGoodPosterUpdateOne {
	tmgpuo.modifiers = append(tmgpuo.modifiers, modifiers...)
	return tmgpuo
}

func (tmgpuo *TopMostGoodPosterUpdateOne) sqlSave(ctx context.Context) (_node *TopMostGoodPoster, err error) {
	_spec := sqlgraph.NewUpdateSpec(topmostgoodposter.Table, topmostgoodposter.Columns, sqlgraph.NewFieldSpec(topmostgoodposter.FieldID, field.TypeUint32))
	id, ok := tmgpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "TopMostGoodPoster.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tmgpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, topmostgoodposter.FieldID)
		for _, f := range fields {
			if !topmostgoodposter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != topmostgoodposter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tmgpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmgpuo.mutation.EntID(); ok {
		_spec.SetField(topmostgoodposter.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := tmgpuo.mutation.TopMostGoodID(); ok {
		_spec.SetField(topmostgoodposter.FieldTopMostGoodID, field.TypeUUID, value)
	}
	if tmgpuo.mutation.TopMostGoodIDCleared() {
		_spec.ClearField(topmostgoodposter.FieldTopMostGoodID, field.TypeUUID)
	}
	if value, ok := tmgpuo.mutation.Poster(); ok {
		_spec.SetField(topmostgoodposter.FieldPoster, field.TypeString, value)
	}
	if tmgpuo.mutation.PosterCleared() {
		_spec.ClearField(topmostgoodposter.FieldPoster, field.TypeString)
	}
	if value, ok := tmgpuo.mutation.Index(); ok {
		_spec.SetField(topmostgoodposter.FieldIndex, field.TypeUint8, value)
	}
	if value, ok := tmgpuo.mutation.AddedIndex(); ok {
		_spec.AddField(topmostgoodposter.FieldIndex, field.TypeUint8, value)
	}
	if tmgpuo.mutation.IndexCleared() {
		_spec.ClearField(topmostgoodposter.FieldIndex, field.TypeUint8)
	}
	_spec.AddModifiers(tmgpuo.modifiers...)
	_node = &TopMostGoodPoster{config: tmgpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tmgpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topmostgoodposter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tmgpuo.mutation.done = true
	return _node, nil
}

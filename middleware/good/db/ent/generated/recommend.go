// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/recommend"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// Recommend is the model entity for the Recommend schema.
type Recommend struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppGoodID holds the value of the "app_good_id" field.
	AppGoodID uuid.UUID `json:"app_good_id,omitempty"`
	// RecommenderID holds the value of the "recommender_id" field.
	RecommenderID uuid.UUID `json:"recommender_id,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// RecommendIndex holds the value of the "recommend_index" field.
	RecommendIndex decimal.Decimal `json:"recommend_index,omitempty"`
	// Hide holds the value of the "hide" field.
	Hide bool `json:"hide,omitempty"`
	// HideReason holds the value of the "hide_reason" field.
	HideReason   string `json:"hide_reason,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Recommend) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case recommend.FieldRecommendIndex:
			values[i] = new(decimal.Decimal)
		case recommend.FieldHide:
			values[i] = new(sql.NullBool)
		case recommend.FieldID:
			values[i] = new(sql.NullInt64)
		case recommend.FieldMessage, recommend.FieldHideReason:
			values[i] = new(sql.NullString)
		case recommend.FieldEntID, recommend.FieldAppGoodID, recommend.FieldRecommenderID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Recommend fields.
func (r *Recommend) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case recommend.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = uint32(value.Int64)
		case recommend.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				r.EntID = *value
			}
		case recommend.FieldAppGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_good_id", values[i])
			} else if value != nil {
				r.AppGoodID = *value
			}
		case recommend.FieldRecommenderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field recommender_id", values[i])
			} else if value != nil {
				r.RecommenderID = *value
			}
		case recommend.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				r.Message = value.String
			}
		case recommend.FieldRecommendIndex:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field recommend_index", values[i])
			} else if value != nil {
				r.RecommendIndex = *value
			}
		case recommend.FieldHide:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field hide", values[i])
			} else if value.Valid {
				r.Hide = value.Bool
			}
		case recommend.FieldHideReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hide_reason", values[i])
			} else if value.Valid {
				r.HideReason = value.String
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Recommend.
// This includes values selected through modifiers, order, etc.
func (r *Recommend) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// Update returns a builder for updating this Recommend.
// Note that you need to call Recommend.Unwrap() before calling this method if this Recommend
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Recommend) Update() *RecommendUpdateOne {
	return NewRecommendClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Recommend entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Recommend) Unwrap() *Recommend {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("generated: Recommend is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Recommend) String() string {
	var builder strings.Builder
	builder.WriteString("Recommend(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", r.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_good_id=")
	builder.WriteString(fmt.Sprintf("%v", r.AppGoodID))
	builder.WriteString(", ")
	builder.WriteString("recommender_id=")
	builder.WriteString(fmt.Sprintf("%v", r.RecommenderID))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(r.Message)
	builder.WriteString(", ")
	builder.WriteString("recommend_index=")
	builder.WriteString(fmt.Sprintf("%v", r.RecommendIndex))
	builder.WriteString(", ")
	builder.WriteString("hide=")
	builder.WriteString(fmt.Sprintf("%v", r.Hide))
	builder.WriteString(", ")
	builder.WriteString("hide_reason=")
	builder.WriteString(r.HideReason)
	builder.WriteByte(')')
	return builder.String()
}

// Recommends is a parsable slice of Recommend.
type Recommends []*Recommend

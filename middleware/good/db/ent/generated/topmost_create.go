// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/topmost"
	"github.com/google/uuid"
)

// TopMostCreate is the builder for creating a TopMost entity.
type TopMostCreate struct {
	config
	mutation *TopMostMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (tmc *TopMostCreate) SetEntID(u uuid.UUID) *TopMostCreate {
	tmc.mutation.SetEntID(u)
	return tmc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tmc *TopMostCreate) SetNillableEntID(u *uuid.UUID) *TopMostCreate {
	if u != nil {
		tmc.SetEntID(*u)
	}
	return tmc
}

// SetCreatedAt sets the "created_at" field.
func (tmc *TopMostCreate) SetCreatedAt(u uint32) *TopMostCreate {
	tmc.mutation.SetCreatedAt(u)
	return tmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tmc *TopMostCreate) SetNillableCreatedAt(u *uint32) *TopMostCreate {
	if u != nil {
		tmc.SetCreatedAt(*u)
	}
	return tmc
}

// SetUpdatedAt sets the "updated_at" field.
func (tmc *TopMostCreate) SetUpdatedAt(u uint32) *TopMostCreate {
	tmc.mutation.SetUpdatedAt(u)
	return tmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tmc *TopMostCreate) SetNillableUpdatedAt(u *uint32) *TopMostCreate {
	if u != nil {
		tmc.SetUpdatedAt(*u)
	}
	return tmc
}

// SetDeletedAt sets the "deleted_at" field.
func (tmc *TopMostCreate) SetDeletedAt(u uint32) *TopMostCreate {
	tmc.mutation.SetDeletedAt(u)
	return tmc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tmc *TopMostCreate) SetNillableDeletedAt(u *uint32) *TopMostCreate {
	if u != nil {
		tmc.SetDeletedAt(*u)
	}
	return tmc
}

// SetAppID sets the "app_id" field.
func (tmc *TopMostCreate) SetAppID(u uuid.UUID) *TopMostCreate {
	tmc.mutation.SetAppID(u)
	return tmc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (tmc *TopMostCreate) SetNillableAppID(u *uuid.UUID) *TopMostCreate {
	if u != nil {
		tmc.SetAppID(*u)
	}
	return tmc
}

// SetTopMostType sets the "top_most_type" field.
func (tmc *TopMostCreate) SetTopMostType(s string) *TopMostCreate {
	tmc.mutation.SetTopMostType(s)
	return tmc
}

// SetNillableTopMostType sets the "top_most_type" field if the given value is not nil.
func (tmc *TopMostCreate) SetNillableTopMostType(s *string) *TopMostCreate {
	if s != nil {
		tmc.SetTopMostType(*s)
	}
	return tmc
}

// SetTitle sets the "title" field.
func (tmc *TopMostCreate) SetTitle(s string) *TopMostCreate {
	tmc.mutation.SetTitle(s)
	return tmc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tmc *TopMostCreate) SetNillableTitle(s *string) *TopMostCreate {
	if s != nil {
		tmc.SetTitle(*s)
	}
	return tmc
}

// SetMessage sets the "message" field.
func (tmc *TopMostCreate) SetMessage(s string) *TopMostCreate {
	tmc.mutation.SetMessage(s)
	return tmc
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (tmc *TopMostCreate) SetNillableMessage(s *string) *TopMostCreate {
	if s != nil {
		tmc.SetMessage(*s)
	}
	return tmc
}

// SetTargetURL sets the "target_url" field.
func (tmc *TopMostCreate) SetTargetURL(s string) *TopMostCreate {
	tmc.mutation.SetTargetURL(s)
	return tmc
}

// SetNillableTargetURL sets the "target_url" field if the given value is not nil.
func (tmc *TopMostCreate) SetNillableTargetURL(s *string) *TopMostCreate {
	if s != nil {
		tmc.SetTargetURL(*s)
	}
	return tmc
}

// SetStartAt sets the "start_at" field.
func (tmc *TopMostCreate) SetStartAt(u uint32) *TopMostCreate {
	tmc.mutation.SetStartAt(u)
	return tmc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (tmc *TopMostCreate) SetNillableStartAt(u *uint32) *TopMostCreate {
	if u != nil {
		tmc.SetStartAt(*u)
	}
	return tmc
}

// SetEndAt sets the "end_at" field.
func (tmc *TopMostCreate) SetEndAt(u uint32) *TopMostCreate {
	tmc.mutation.SetEndAt(u)
	return tmc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (tmc *TopMostCreate) SetNillableEndAt(u *uint32) *TopMostCreate {
	if u != nil {
		tmc.SetEndAt(*u)
	}
	return tmc
}

// SetID sets the "id" field.
func (tmc *TopMostCreate) SetID(u uint32) *TopMostCreate {
	tmc.mutation.SetID(u)
	return tmc
}

// Mutation returns the TopMostMutation object of the builder.
func (tmc *TopMostCreate) Mutation() *TopMostMutation {
	return tmc.mutation
}

// Save creates the TopMost in the database.
func (tmc *TopMostCreate) Save(ctx context.Context) (*TopMost, error) {
	tmc.defaults()
	return withHooks(ctx, tmc.sqlSave, tmc.mutation, tmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tmc *TopMostCreate) SaveX(ctx context.Context) *TopMost {
	v, err := tmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmc *TopMostCreate) Exec(ctx context.Context) error {
	_, err := tmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmc *TopMostCreate) ExecX(ctx context.Context) {
	if err := tmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmc *TopMostCreate) defaults() {
	if _, ok := tmc.mutation.EntID(); !ok {
		v := topmost.DefaultEntID()
		tmc.mutation.SetEntID(v)
	}
	if _, ok := tmc.mutation.CreatedAt(); !ok {
		v := topmost.DefaultCreatedAt()
		tmc.mutation.SetCreatedAt(v)
	}
	if _, ok := tmc.mutation.UpdatedAt(); !ok {
		v := topmost.DefaultUpdatedAt()
		tmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tmc.mutation.DeletedAt(); !ok {
		v := topmost.DefaultDeletedAt()
		tmc.mutation.SetDeletedAt(v)
	}
	if _, ok := tmc.mutation.AppID(); !ok {
		v := topmost.DefaultAppID()
		tmc.mutation.SetAppID(v)
	}
	if _, ok := tmc.mutation.TopMostType(); !ok {
		v := topmost.DefaultTopMostType
		tmc.mutation.SetTopMostType(v)
	}
	if _, ok := tmc.mutation.Title(); !ok {
		v := topmost.DefaultTitle
		tmc.mutation.SetTitle(v)
	}
	if _, ok := tmc.mutation.Message(); !ok {
		v := topmost.DefaultMessage
		tmc.mutation.SetMessage(v)
	}
	if _, ok := tmc.mutation.TargetURL(); !ok {
		v := topmost.DefaultTargetURL
		tmc.mutation.SetTargetURL(v)
	}
	if _, ok := tmc.mutation.StartAt(); !ok {
		v := topmost.DefaultStartAt
		tmc.mutation.SetStartAt(v)
	}
	if _, ok := tmc.mutation.EndAt(); !ok {
		v := topmost.DefaultEndAt
		tmc.mutation.SetEndAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tmc *TopMostCreate) check() error {
	if _, ok := tmc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "TopMost.ent_id"`)}
	}
	if _, ok := tmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "TopMost.created_at"`)}
	}
	if _, ok := tmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "TopMost.updated_at"`)}
	}
	if _, ok := tmc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "TopMost.deleted_at"`)}
	}
	return nil
}

func (tmc *TopMostCreate) sqlSave(ctx context.Context) (*TopMost, error) {
	if err := tmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	tmc.mutation.id = &_node.ID
	tmc.mutation.done = true
	return _node, nil
}

func (tmc *TopMostCreate) createSpec() (*TopMost, *sqlgraph.CreateSpec) {
	var (
		_node = &TopMost{config: tmc.config}
		_spec = sqlgraph.NewCreateSpec(topmost.Table, sqlgraph.NewFieldSpec(topmost.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = tmc.conflict
	if id, ok := tmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tmc.mutation.EntID(); ok {
		_spec.SetField(topmost.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := tmc.mutation.CreatedAt(); ok {
		_spec.SetField(topmost.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := tmc.mutation.UpdatedAt(); ok {
		_spec.SetField(topmost.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := tmc.mutation.DeletedAt(); ok {
		_spec.SetField(topmost.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := tmc.mutation.AppID(); ok {
		_spec.SetField(topmost.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := tmc.mutation.TopMostType(); ok {
		_spec.SetField(topmost.FieldTopMostType, field.TypeString, value)
		_node.TopMostType = value
	}
	if value, ok := tmc.mutation.Title(); ok {
		_spec.SetField(topmost.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := tmc.mutation.Message(); ok {
		_spec.SetField(topmost.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := tmc.mutation.TargetURL(); ok {
		_spec.SetField(topmost.FieldTargetURL, field.TypeString, value)
		_node.TargetURL = value
	}
	if value, ok := tmc.mutation.StartAt(); ok {
		_spec.SetField(topmost.FieldStartAt, field.TypeUint32, value)
		_node.StartAt = value
	}
	if value, ok := tmc.mutation.EndAt(); ok {
		_spec.SetField(topmost.FieldEndAt, field.TypeUint32, value)
		_node.EndAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TopMost.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TopMostUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (tmc *TopMostCreate) OnConflict(opts ...sql.ConflictOption) *TopMostUpsertOne {
	tmc.conflict = opts
	return &TopMostUpsertOne{
		create: tmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TopMost.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tmc *TopMostCreate) OnConflictColumns(columns ...string) *TopMostUpsertOne {
	tmc.conflict = append(tmc.conflict, sql.ConflictColumns(columns...))
	return &TopMostUpsertOne{
		create: tmc,
	}
}

type (
	// TopMostUpsertOne is the builder for "upsert"-ing
	//  one TopMost node.
	TopMostUpsertOne struct {
		create *TopMostCreate
	}

	// TopMostUpsert is the "OnConflict" setter.
	TopMostUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *TopMostUpsert) SetEntID(v uuid.UUID) *TopMostUpsert {
	u.Set(topmost.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TopMostUpsert) UpdateEntID() *TopMostUpsert {
	u.SetExcluded(topmost.FieldEntID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TopMostUpsert) SetCreatedAt(v uint32) *TopMostUpsert {
	u.Set(topmost.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TopMostUpsert) UpdateCreatedAt() *TopMostUpsert {
	u.SetExcluded(topmost.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TopMostUpsert) AddCreatedAt(v uint32) *TopMostUpsert {
	u.Add(topmost.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TopMostUpsert) SetUpdatedAt(v uint32) *TopMostUpsert {
	u.Set(topmost.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TopMostUpsert) UpdateUpdatedAt() *TopMostUpsert {
	u.SetExcluded(topmost.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TopMostUpsert) AddUpdatedAt(v uint32) *TopMostUpsert {
	u.Add(topmost.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TopMostUpsert) SetDeletedAt(v uint32) *TopMostUpsert {
	u.Set(topmost.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TopMostUpsert) UpdateDeletedAt() *TopMostUpsert {
	u.SetExcluded(topmost.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TopMostUpsert) AddDeletedAt(v uint32) *TopMostUpsert {
	u.Add(topmost.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *TopMostUpsert) SetAppID(v uuid.UUID) *TopMostUpsert {
	u.Set(topmost.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *TopMostUpsert) UpdateAppID() *TopMostUpsert {
	u.SetExcluded(topmost.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *TopMostUpsert) ClearAppID() *TopMostUpsert {
	u.SetNull(topmost.FieldAppID)
	return u
}

// SetTopMostType sets the "top_most_type" field.
func (u *TopMostUpsert) SetTopMostType(v string) *TopMostUpsert {
	u.Set(topmost.FieldTopMostType, v)
	return u
}

// UpdateTopMostType sets the "top_most_type" field to the value that was provided on create.
func (u *TopMostUpsert) UpdateTopMostType() *TopMostUpsert {
	u.SetExcluded(topmost.FieldTopMostType)
	return u
}

// ClearTopMostType clears the value of the "top_most_type" field.
func (u *TopMostUpsert) ClearTopMostType() *TopMostUpsert {
	u.SetNull(topmost.FieldTopMostType)
	return u
}

// SetTitle sets the "title" field.
func (u *TopMostUpsert) SetTitle(v string) *TopMostUpsert {
	u.Set(topmost.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TopMostUpsert) UpdateTitle() *TopMostUpsert {
	u.SetExcluded(topmost.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *TopMostUpsert) ClearTitle() *TopMostUpsert {
	u.SetNull(topmost.FieldTitle)
	return u
}

// SetMessage sets the "message" field.
func (u *TopMostUpsert) SetMessage(v string) *TopMostUpsert {
	u.Set(topmost.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *TopMostUpsert) UpdateMessage() *TopMostUpsert {
	u.SetExcluded(topmost.FieldMessage)
	return u
}

// ClearMessage clears the value of the "message" field.
func (u *TopMostUpsert) ClearMessage() *TopMostUpsert {
	u.SetNull(topmost.FieldMessage)
	return u
}

// SetTargetURL sets the "target_url" field.
func (u *TopMostUpsert) SetTargetURL(v string) *TopMostUpsert {
	u.Set(topmost.FieldTargetURL, v)
	return u
}

// UpdateTargetURL sets the "target_url" field to the value that was provided on create.
func (u *TopMostUpsert) UpdateTargetURL() *TopMostUpsert {
	u.SetExcluded(topmost.FieldTargetURL)
	return u
}

// ClearTargetURL clears the value of the "target_url" field.
func (u *TopMostUpsert) ClearTargetURL() *TopMostUpsert {
	u.SetNull(topmost.FieldTargetURL)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *TopMostUpsert) SetStartAt(v uint32) *TopMostUpsert {
	u.Set(topmost.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *TopMostUpsert) UpdateStartAt() *TopMostUpsert {
	u.SetExcluded(topmost.FieldStartAt)
	return u
}

// AddStartAt adds v to the "start_at" field.
func (u *TopMostUpsert) AddStartAt(v uint32) *TopMostUpsert {
	u.Add(topmost.FieldStartAt, v)
	return u
}

// ClearStartAt clears the value of the "start_at" field.
func (u *TopMostUpsert) ClearStartAt() *TopMostUpsert {
	u.SetNull(topmost.FieldStartAt)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *TopMostUpsert) SetEndAt(v uint32) *TopMostUpsert {
	u.Set(topmost.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *TopMostUpsert) UpdateEndAt() *TopMostUpsert {
	u.SetExcluded(topmost.FieldEndAt)
	return u
}

// AddEndAt adds v to the "end_at" field.
func (u *TopMostUpsert) AddEndAt(v uint32) *TopMostUpsert {
	u.Add(topmost.FieldEndAt, v)
	return u
}

// ClearEndAt clears the value of the "end_at" field.
func (u *TopMostUpsert) ClearEndAt() *TopMostUpsert {
	u.SetNull(topmost.FieldEndAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TopMost.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(topmost.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TopMostUpsertOne) UpdateNewValues() *TopMostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(topmost.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TopMost.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TopMostUpsertOne) Ignore() *TopMostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TopMostUpsertOne) DoNothing() *TopMostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TopMostCreate.OnConflict
// documentation for more info.
func (u *TopMostUpsertOne) Update(set func(*TopMostUpsert)) *TopMostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TopMostUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *TopMostUpsertOne) SetEntID(v uuid.UUID) *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TopMostUpsertOne) UpdateEntID() *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TopMostUpsertOne) SetCreatedAt(v uint32) *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TopMostUpsertOne) AddCreatedAt(v uint32) *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TopMostUpsertOne) UpdateCreatedAt() *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TopMostUpsertOne) SetUpdatedAt(v uint32) *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TopMostUpsertOne) AddUpdatedAt(v uint32) *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TopMostUpsertOne) UpdateUpdatedAt() *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TopMostUpsertOne) SetDeletedAt(v uint32) *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TopMostUpsertOne) AddDeletedAt(v uint32) *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TopMostUpsertOne) UpdateDeletedAt() *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *TopMostUpsertOne) SetAppID(v uuid.UUID) *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *TopMostUpsertOne) UpdateAppID() *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *TopMostUpsertOne) ClearAppID() *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.ClearAppID()
	})
}

// SetTopMostType sets the "top_most_type" field.
func (u *TopMostUpsertOne) SetTopMostType(v string) *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.SetTopMostType(v)
	})
}

// UpdateTopMostType sets the "top_most_type" field to the value that was provided on create.
func (u *TopMostUpsertOne) UpdateTopMostType() *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.UpdateTopMostType()
	})
}

// ClearTopMostType clears the value of the "top_most_type" field.
func (u *TopMostUpsertOne) ClearTopMostType() *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.ClearTopMostType()
	})
}

// SetTitle sets the "title" field.
func (u *TopMostUpsertOne) SetTitle(v string) *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TopMostUpsertOne) UpdateTitle() *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *TopMostUpsertOne) ClearTitle() *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.ClearTitle()
	})
}

// SetMessage sets the "message" field.
func (u *TopMostUpsertOne) SetMessage(v string) *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *TopMostUpsertOne) UpdateMessage() *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *TopMostUpsertOne) ClearMessage() *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.ClearMessage()
	})
}

// SetTargetURL sets the "target_url" field.
func (u *TopMostUpsertOne) SetTargetURL(v string) *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.SetTargetURL(v)
	})
}

// UpdateTargetURL sets the "target_url" field to the value that was provided on create.
func (u *TopMostUpsertOne) UpdateTargetURL() *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.UpdateTargetURL()
	})
}

// ClearTargetURL clears the value of the "target_url" field.
func (u *TopMostUpsertOne) ClearTargetURL() *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.ClearTargetURL()
	})
}

// SetStartAt sets the "start_at" field.
func (u *TopMostUpsertOne) SetStartAt(v uint32) *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *TopMostUpsertOne) AddStartAt(v uint32) *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *TopMostUpsertOne) UpdateStartAt() *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *TopMostUpsertOne) ClearStartAt() *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *TopMostUpsertOne) SetEndAt(v uint32) *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *TopMostUpsertOne) AddEndAt(v uint32) *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *TopMostUpsertOne) UpdateEndAt() *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *TopMostUpsertOne) ClearEndAt() *TopMostUpsertOne {
	return u.Update(func(s *TopMostUpsert) {
		s.ClearEndAt()
	})
}

// Exec executes the query.
func (u *TopMostUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for TopMostCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TopMostUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TopMostUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TopMostUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TopMostCreateBulk is the builder for creating many TopMost entities in bulk.
type TopMostCreateBulk struct {
	config
	err      error
	builders []*TopMostCreate
	conflict []sql.ConflictOption
}

// Save creates the TopMost entities in the database.
func (tmcb *TopMostCreateBulk) Save(ctx context.Context) ([]*TopMost, error) {
	if tmcb.err != nil {
		return nil, tmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tmcb.builders))
	nodes := make([]*TopMost, len(tmcb.builders))
	mutators := make([]Mutator, len(tmcb.builders))
	for i := range tmcb.builders {
		func(i int, root context.Context) {
			builder := tmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TopMostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tmcb *TopMostCreateBulk) SaveX(ctx context.Context) []*TopMost {
	v, err := tmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmcb *TopMostCreateBulk) Exec(ctx context.Context) error {
	_, err := tmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmcb *TopMostCreateBulk) ExecX(ctx context.Context) {
	if err := tmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TopMost.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TopMostUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (tmcb *TopMostCreateBulk) OnConflict(opts ...sql.ConflictOption) *TopMostUpsertBulk {
	tmcb.conflict = opts
	return &TopMostUpsertBulk{
		create: tmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TopMost.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tmcb *TopMostCreateBulk) OnConflictColumns(columns ...string) *TopMostUpsertBulk {
	tmcb.conflict = append(tmcb.conflict, sql.ConflictColumns(columns...))
	return &TopMostUpsertBulk{
		create: tmcb,
	}
}

// TopMostUpsertBulk is the builder for "upsert"-ing
// a bulk of TopMost nodes.
type TopMostUpsertBulk struct {
	create *TopMostCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TopMost.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(topmost.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TopMostUpsertBulk) UpdateNewValues() *TopMostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(topmost.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TopMost.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TopMostUpsertBulk) Ignore() *TopMostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TopMostUpsertBulk) DoNothing() *TopMostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TopMostCreateBulk.OnConflict
// documentation for more info.
func (u *TopMostUpsertBulk) Update(set func(*TopMostUpsert)) *TopMostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TopMostUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *TopMostUpsertBulk) SetEntID(v uuid.UUID) *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TopMostUpsertBulk) UpdateEntID() *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TopMostUpsertBulk) SetCreatedAt(v uint32) *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TopMostUpsertBulk) AddCreatedAt(v uint32) *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TopMostUpsertBulk) UpdateCreatedAt() *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TopMostUpsertBulk) SetUpdatedAt(v uint32) *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TopMostUpsertBulk) AddUpdatedAt(v uint32) *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TopMostUpsertBulk) UpdateUpdatedAt() *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TopMostUpsertBulk) SetDeletedAt(v uint32) *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TopMostUpsertBulk) AddDeletedAt(v uint32) *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TopMostUpsertBulk) UpdateDeletedAt() *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *TopMostUpsertBulk) SetAppID(v uuid.UUID) *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *TopMostUpsertBulk) UpdateAppID() *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *TopMostUpsertBulk) ClearAppID() *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.ClearAppID()
	})
}

// SetTopMostType sets the "top_most_type" field.
func (u *TopMostUpsertBulk) SetTopMostType(v string) *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.SetTopMostType(v)
	})
}

// UpdateTopMostType sets the "top_most_type" field to the value that was provided on create.
func (u *TopMostUpsertBulk) UpdateTopMostType() *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.UpdateTopMostType()
	})
}

// ClearTopMostType clears the value of the "top_most_type" field.
func (u *TopMostUpsertBulk) ClearTopMostType() *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.ClearTopMostType()
	})
}

// SetTitle sets the "title" field.
func (u *TopMostUpsertBulk) SetTitle(v string) *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TopMostUpsertBulk) UpdateTitle() *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *TopMostUpsertBulk) ClearTitle() *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.ClearTitle()
	})
}

// SetMessage sets the "message" field.
func (u *TopMostUpsertBulk) SetMessage(v string) *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *TopMostUpsertBulk) UpdateMessage() *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *TopMostUpsertBulk) ClearMessage() *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.ClearMessage()
	})
}

// SetTargetURL sets the "target_url" field.
func (u *TopMostUpsertBulk) SetTargetURL(v string) *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.SetTargetURL(v)
	})
}

// UpdateTargetURL sets the "target_url" field to the value that was provided on create.
func (u *TopMostUpsertBulk) UpdateTargetURL() *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.UpdateTargetURL()
	})
}

// ClearTargetURL clears the value of the "target_url" field.
func (u *TopMostUpsertBulk) ClearTargetURL() *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.ClearTargetURL()
	})
}

// SetStartAt sets the "start_at" field.
func (u *TopMostUpsertBulk) SetStartAt(v uint32) *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *TopMostUpsertBulk) AddStartAt(v uint32) *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *TopMostUpsertBulk) UpdateStartAt() *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *TopMostUpsertBulk) ClearStartAt() *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *TopMostUpsertBulk) SetEndAt(v uint32) *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *TopMostUpsertBulk) AddEndAt(v uint32) *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *TopMostUpsertBulk) UpdateEndAt() *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *TopMostUpsertBulk) ClearEndAt() *TopMostUpsertBulk {
	return u.Update(func(s *TopMostUpsert) {
		s.ClearEndAt()
	})
}

// Exec executes the query.
func (u *TopMostUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the TopMostCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for TopMostCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TopMostUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

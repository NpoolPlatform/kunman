// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appgooddescription"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
)

// AppGoodDescriptionDelete is the builder for deleting a AppGoodDescription entity.
type AppGoodDescriptionDelete struct {
	config
	hooks    []Hook
	mutation *AppGoodDescriptionMutation
}

// Where appends a list predicates to the AppGoodDescriptionDelete builder.
func (agdd *AppGoodDescriptionDelete) Where(ps ...predicate.AppGoodDescription) *AppGoodDescriptionDelete {
	agdd.mutation.Where(ps...)
	return agdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (agdd *AppGoodDescriptionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, agdd.sqlExec, agdd.mutation, agdd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (agdd *AppGoodDescriptionDelete) ExecX(ctx context.Context) int {
	n, err := agdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (agdd *AppGoodDescriptionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(appgooddescription.Table, sqlgraph.NewFieldSpec(appgooddescription.FieldID, field.TypeUint32))
	if ps := agdd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, agdd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	agdd.mutation.done = true
	return affected, err
}

// AppGoodDescriptionDeleteOne is the builder for deleting a single AppGoodDescription entity.
type AppGoodDescriptionDeleteOne struct {
	agdd *AppGoodDescriptionDelete
}

// Where appends a list predicates to the AppGoodDescriptionDelete builder.
func (agddo *AppGoodDescriptionDeleteOne) Where(ps ...predicate.AppGoodDescription) *AppGoodDescriptionDeleteOne {
	agddo.agdd.mutation.Where(ps...)
	return agddo
}

// Exec executes the deletion query.
func (agddo *AppGoodDescriptionDeleteOne) Exec(ctx context.Context) error {
	n, err := agddo.agdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{appgooddescription.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (agddo *AppGoodDescriptionDeleteOne) ExecX(ctx context.Context) {
	if err := agddo.Exec(ctx); err != nil {
		panic(err)
	}
}

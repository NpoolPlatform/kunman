// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/comment"
	"github.com/google/uuid"
)

// CommentCreate is the builder for creating a Comment entity.
type CommentCreate struct {
	config
	mutation *CommentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (cc *CommentCreate) SetEntID(u uuid.UUID) *CommentCreate {
	cc.mutation.SetEntID(u)
	return cc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cc *CommentCreate) SetNillableEntID(u *uuid.UUID) *CommentCreate {
	if u != nil {
		cc.SetEntID(*u)
	}
	return cc
}

// SetUserID sets the "user_id" field.
func (cc *CommentCreate) SetUserID(u uuid.UUID) *CommentCreate {
	cc.mutation.SetUserID(u)
	return cc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cc *CommentCreate) SetNillableUserID(u *uuid.UUID) *CommentCreate {
	if u != nil {
		cc.SetUserID(*u)
	}
	return cc
}

// SetAppGoodID sets the "app_good_id" field.
func (cc *CommentCreate) SetAppGoodID(u uuid.UUID) *CommentCreate {
	cc.mutation.SetAppGoodID(u)
	return cc
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (cc *CommentCreate) SetNillableAppGoodID(u *uuid.UUID) *CommentCreate {
	if u != nil {
		cc.SetAppGoodID(*u)
	}
	return cc
}

// SetOrderID sets the "order_id" field.
func (cc *CommentCreate) SetOrderID(u uuid.UUID) *CommentCreate {
	cc.mutation.SetOrderID(u)
	return cc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (cc *CommentCreate) SetNillableOrderID(u *uuid.UUID) *CommentCreate {
	if u != nil {
		cc.SetOrderID(*u)
	}
	return cc
}

// SetContent sets the "content" field.
func (cc *CommentCreate) SetContent(s string) *CommentCreate {
	cc.mutation.SetContent(s)
	return cc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cc *CommentCreate) SetNillableContent(s *string) *CommentCreate {
	if s != nil {
		cc.SetContent(*s)
	}
	return cc
}

// SetReplyToID sets the "reply_to_id" field.
func (cc *CommentCreate) SetReplyToID(u uuid.UUID) *CommentCreate {
	cc.mutation.SetReplyToID(u)
	return cc
}

// SetNillableReplyToID sets the "reply_to_id" field if the given value is not nil.
func (cc *CommentCreate) SetNillableReplyToID(u *uuid.UUID) *CommentCreate {
	if u != nil {
		cc.SetReplyToID(*u)
	}
	return cc
}

// SetAnonymous sets the "anonymous" field.
func (cc *CommentCreate) SetAnonymous(b bool) *CommentCreate {
	cc.mutation.SetAnonymous(b)
	return cc
}

// SetNillableAnonymous sets the "anonymous" field if the given value is not nil.
func (cc *CommentCreate) SetNillableAnonymous(b *bool) *CommentCreate {
	if b != nil {
		cc.SetAnonymous(*b)
	}
	return cc
}

// SetTrialUser sets the "trial_user" field.
func (cc *CommentCreate) SetTrialUser(b bool) *CommentCreate {
	cc.mutation.SetTrialUser(b)
	return cc
}

// SetNillableTrialUser sets the "trial_user" field if the given value is not nil.
func (cc *CommentCreate) SetNillableTrialUser(b *bool) *CommentCreate {
	if b != nil {
		cc.SetTrialUser(*b)
	}
	return cc
}

// SetPurchasedUser sets the "purchased_user" field.
func (cc *CommentCreate) SetPurchasedUser(b bool) *CommentCreate {
	cc.mutation.SetPurchasedUser(b)
	return cc
}

// SetNillablePurchasedUser sets the "purchased_user" field if the given value is not nil.
func (cc *CommentCreate) SetNillablePurchasedUser(b *bool) *CommentCreate {
	if b != nil {
		cc.SetPurchasedUser(*b)
	}
	return cc
}

// SetHide sets the "hide" field.
func (cc *CommentCreate) SetHide(b bool) *CommentCreate {
	cc.mutation.SetHide(b)
	return cc
}

// SetNillableHide sets the "hide" field if the given value is not nil.
func (cc *CommentCreate) SetNillableHide(b *bool) *CommentCreate {
	if b != nil {
		cc.SetHide(*b)
	}
	return cc
}

// SetHideReason sets the "hide_reason" field.
func (cc *CommentCreate) SetHideReason(s string) *CommentCreate {
	cc.mutation.SetHideReason(s)
	return cc
}

// SetNillableHideReason sets the "hide_reason" field if the given value is not nil.
func (cc *CommentCreate) SetNillableHideReason(s *string) *CommentCreate {
	if s != nil {
		cc.SetHideReason(*s)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CommentCreate) SetID(u uint32) *CommentCreate {
	cc.mutation.SetID(u)
	return cc
}

// Mutation returns the CommentMutation object of the builder.
func (cc *CommentCreate) Mutation() *CommentMutation {
	return cc.mutation
}

// Save creates the Comment in the database.
func (cc *CommentCreate) Save(ctx context.Context) (*Comment, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CommentCreate) SaveX(ctx context.Context) *Comment {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CommentCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CommentCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CommentCreate) defaults() {
	if _, ok := cc.mutation.EntID(); !ok {
		v := comment.DefaultEntID()
		cc.mutation.SetEntID(v)
	}
	if _, ok := cc.mutation.UserID(); !ok {
		v := comment.DefaultUserID()
		cc.mutation.SetUserID(v)
	}
	if _, ok := cc.mutation.AppGoodID(); !ok {
		v := comment.DefaultAppGoodID()
		cc.mutation.SetAppGoodID(v)
	}
	if _, ok := cc.mutation.OrderID(); !ok {
		v := comment.DefaultOrderID()
		cc.mutation.SetOrderID(v)
	}
	if _, ok := cc.mutation.Content(); !ok {
		v := comment.DefaultContent
		cc.mutation.SetContent(v)
	}
	if _, ok := cc.mutation.ReplyToID(); !ok {
		v := comment.DefaultReplyToID()
		cc.mutation.SetReplyToID(v)
	}
	if _, ok := cc.mutation.Anonymous(); !ok {
		v := comment.DefaultAnonymous
		cc.mutation.SetAnonymous(v)
	}
	if _, ok := cc.mutation.TrialUser(); !ok {
		v := comment.DefaultTrialUser
		cc.mutation.SetTrialUser(v)
	}
	if _, ok := cc.mutation.PurchasedUser(); !ok {
		v := comment.DefaultPurchasedUser
		cc.mutation.SetPurchasedUser(v)
	}
	if _, ok := cc.mutation.Hide(); !ok {
		v := comment.DefaultHide
		cc.mutation.SetHide(v)
	}
	if _, ok := cc.mutation.HideReason(); !ok {
		v := comment.DefaultHideReason
		cc.mutation.SetHideReason(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CommentCreate) check() error {
	if _, ok := cc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "Comment.ent_id"`)}
	}
	return nil
}

func (cc *CommentCreate) sqlSave(ctx context.Context) (*Comment, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CommentCreate) createSpec() (*Comment, *sqlgraph.CreateSpec) {
	var (
		_node = &Comment{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(comment.Table, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.EntID(); ok {
		_spec.SetField(comment.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := cc.mutation.UserID(); ok {
		_spec.SetField(comment.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := cc.mutation.AppGoodID(); ok {
		_spec.SetField(comment.FieldAppGoodID, field.TypeUUID, value)
		_node.AppGoodID = value
	}
	if value, ok := cc.mutation.OrderID(); ok {
		_spec.SetField(comment.FieldOrderID, field.TypeUUID, value)
		_node.OrderID = value
	}
	if value, ok := cc.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := cc.mutation.ReplyToID(); ok {
		_spec.SetField(comment.FieldReplyToID, field.TypeUUID, value)
		_node.ReplyToID = value
	}
	if value, ok := cc.mutation.Anonymous(); ok {
		_spec.SetField(comment.FieldAnonymous, field.TypeBool, value)
		_node.Anonymous = value
	}
	if value, ok := cc.mutation.TrialUser(); ok {
		_spec.SetField(comment.FieldTrialUser, field.TypeBool, value)
		_node.TrialUser = value
	}
	if value, ok := cc.mutation.PurchasedUser(); ok {
		_spec.SetField(comment.FieldPurchasedUser, field.TypeBool, value)
		_node.PurchasedUser = value
	}
	if value, ok := cc.mutation.Hide(); ok {
		_spec.SetField(comment.FieldHide, field.TypeBool, value)
		_node.Hide = value
	}
	if value, ok := cc.mutation.HideReason(); ok {
		_spec.SetField(comment.FieldHideReason, field.TypeString, value)
		_node.HideReason = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Comment.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CommentUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (cc *CommentCreate) OnConflict(opts ...sql.ConflictOption) *CommentUpsertOne {
	cc.conflict = opts
	return &CommentUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CommentCreate) OnConflictColumns(columns ...string) *CommentUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CommentUpsertOne{
		create: cc,
	}
}

type (
	// CommentUpsertOne is the builder for "upsert"-ing
	//  one Comment node.
	CommentUpsertOne struct {
		create *CommentCreate
	}

	// CommentUpsert is the "OnConflict" setter.
	CommentUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *CommentUpsert) SetEntID(v uuid.UUID) *CommentUpsert {
	u.Set(comment.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CommentUpsert) UpdateEntID() *CommentUpsert {
	u.SetExcluded(comment.FieldEntID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *CommentUpsert) SetUserID(v uuid.UUID) *CommentUpsert {
	u.Set(comment.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CommentUpsert) UpdateUserID() *CommentUpsert {
	u.SetExcluded(comment.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *CommentUpsert) ClearUserID() *CommentUpsert {
	u.SetNull(comment.FieldUserID)
	return u
}

// SetAppGoodID sets the "app_good_id" field.
func (u *CommentUpsert) SetAppGoodID(v uuid.UUID) *CommentUpsert {
	u.Set(comment.FieldAppGoodID, v)
	return u
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *CommentUpsert) UpdateAppGoodID() *CommentUpsert {
	u.SetExcluded(comment.FieldAppGoodID)
	return u
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *CommentUpsert) ClearAppGoodID() *CommentUpsert {
	u.SetNull(comment.FieldAppGoodID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *CommentUpsert) SetOrderID(v uuid.UUID) *CommentUpsert {
	u.Set(comment.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *CommentUpsert) UpdateOrderID() *CommentUpsert {
	u.SetExcluded(comment.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *CommentUpsert) ClearOrderID() *CommentUpsert {
	u.SetNull(comment.FieldOrderID)
	return u
}

// SetContent sets the "content" field.
func (u *CommentUpsert) SetContent(v string) *CommentUpsert {
	u.Set(comment.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *CommentUpsert) UpdateContent() *CommentUpsert {
	u.SetExcluded(comment.FieldContent)
	return u
}

// ClearContent clears the value of the "content" field.
func (u *CommentUpsert) ClearContent() *CommentUpsert {
	u.SetNull(comment.FieldContent)
	return u
}

// SetReplyToID sets the "reply_to_id" field.
func (u *CommentUpsert) SetReplyToID(v uuid.UUID) *CommentUpsert {
	u.Set(comment.FieldReplyToID, v)
	return u
}

// UpdateReplyToID sets the "reply_to_id" field to the value that was provided on create.
func (u *CommentUpsert) UpdateReplyToID() *CommentUpsert {
	u.SetExcluded(comment.FieldReplyToID)
	return u
}

// ClearReplyToID clears the value of the "reply_to_id" field.
func (u *CommentUpsert) ClearReplyToID() *CommentUpsert {
	u.SetNull(comment.FieldReplyToID)
	return u
}

// SetAnonymous sets the "anonymous" field.
func (u *CommentUpsert) SetAnonymous(v bool) *CommentUpsert {
	u.Set(comment.FieldAnonymous, v)
	return u
}

// UpdateAnonymous sets the "anonymous" field to the value that was provided on create.
func (u *CommentUpsert) UpdateAnonymous() *CommentUpsert {
	u.SetExcluded(comment.FieldAnonymous)
	return u
}

// ClearAnonymous clears the value of the "anonymous" field.
func (u *CommentUpsert) ClearAnonymous() *CommentUpsert {
	u.SetNull(comment.FieldAnonymous)
	return u
}

// SetTrialUser sets the "trial_user" field.
func (u *CommentUpsert) SetTrialUser(v bool) *CommentUpsert {
	u.Set(comment.FieldTrialUser, v)
	return u
}

// UpdateTrialUser sets the "trial_user" field to the value that was provided on create.
func (u *CommentUpsert) UpdateTrialUser() *CommentUpsert {
	u.SetExcluded(comment.FieldTrialUser)
	return u
}

// ClearTrialUser clears the value of the "trial_user" field.
func (u *CommentUpsert) ClearTrialUser() *CommentUpsert {
	u.SetNull(comment.FieldTrialUser)
	return u
}

// SetPurchasedUser sets the "purchased_user" field.
func (u *CommentUpsert) SetPurchasedUser(v bool) *CommentUpsert {
	u.Set(comment.FieldPurchasedUser, v)
	return u
}

// UpdatePurchasedUser sets the "purchased_user" field to the value that was provided on create.
func (u *CommentUpsert) UpdatePurchasedUser() *CommentUpsert {
	u.SetExcluded(comment.FieldPurchasedUser)
	return u
}

// ClearPurchasedUser clears the value of the "purchased_user" field.
func (u *CommentUpsert) ClearPurchasedUser() *CommentUpsert {
	u.SetNull(comment.FieldPurchasedUser)
	return u
}

// SetHide sets the "hide" field.
func (u *CommentUpsert) SetHide(v bool) *CommentUpsert {
	u.Set(comment.FieldHide, v)
	return u
}

// UpdateHide sets the "hide" field to the value that was provided on create.
func (u *CommentUpsert) UpdateHide() *CommentUpsert {
	u.SetExcluded(comment.FieldHide)
	return u
}

// ClearHide clears the value of the "hide" field.
func (u *CommentUpsert) ClearHide() *CommentUpsert {
	u.SetNull(comment.FieldHide)
	return u
}

// SetHideReason sets the "hide_reason" field.
func (u *CommentUpsert) SetHideReason(v string) *CommentUpsert {
	u.Set(comment.FieldHideReason, v)
	return u
}

// UpdateHideReason sets the "hide_reason" field to the value that was provided on create.
func (u *CommentUpsert) UpdateHideReason() *CommentUpsert {
	u.SetExcluded(comment.FieldHideReason)
	return u
}

// ClearHideReason clears the value of the "hide_reason" field.
func (u *CommentUpsert) ClearHideReason() *CommentUpsert {
	u.SetNull(comment.FieldHideReason)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(comment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CommentUpsertOne) UpdateNewValues() *CommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(comment.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Comment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CommentUpsertOne) Ignore() *CommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CommentUpsertOne) DoNothing() *CommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CommentCreate.OnConflict
// documentation for more info.
func (u *CommentUpsertOne) Update(set func(*CommentUpsert)) *CommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CommentUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *CommentUpsertOne) SetEntID(v uuid.UUID) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateEntID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateEntID()
	})
}

// SetUserID sets the "user_id" field.
func (u *CommentUpsertOne) SetUserID(v uuid.UUID) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateUserID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *CommentUpsertOne) ClearUserID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearUserID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *CommentUpsertOne) SetAppGoodID(v uuid.UUID) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateAppGoodID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *CommentUpsertOne) ClearAppGoodID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearAppGoodID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *CommentUpsertOne) SetOrderID(v uuid.UUID) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateOrderID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *CommentUpsertOne) ClearOrderID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearOrderID()
	})
}

// SetContent sets the "content" field.
func (u *CommentUpsertOne) SetContent(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateContent() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *CommentUpsertOne) ClearContent() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearContent()
	})
}

// SetReplyToID sets the "reply_to_id" field.
func (u *CommentUpsertOne) SetReplyToID(v uuid.UUID) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetReplyToID(v)
	})
}

// UpdateReplyToID sets the "reply_to_id" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateReplyToID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateReplyToID()
	})
}

// ClearReplyToID clears the value of the "reply_to_id" field.
func (u *CommentUpsertOne) ClearReplyToID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearReplyToID()
	})
}

// SetAnonymous sets the "anonymous" field.
func (u *CommentUpsertOne) SetAnonymous(v bool) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetAnonymous(v)
	})
}

// UpdateAnonymous sets the "anonymous" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateAnonymous() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateAnonymous()
	})
}

// ClearAnonymous clears the value of the "anonymous" field.
func (u *CommentUpsertOne) ClearAnonymous() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearAnonymous()
	})
}

// SetTrialUser sets the "trial_user" field.
func (u *CommentUpsertOne) SetTrialUser(v bool) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetTrialUser(v)
	})
}

// UpdateTrialUser sets the "trial_user" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateTrialUser() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateTrialUser()
	})
}

// ClearTrialUser clears the value of the "trial_user" field.
func (u *CommentUpsertOne) ClearTrialUser() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearTrialUser()
	})
}

// SetPurchasedUser sets the "purchased_user" field.
func (u *CommentUpsertOne) SetPurchasedUser(v bool) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetPurchasedUser(v)
	})
}

// UpdatePurchasedUser sets the "purchased_user" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdatePurchasedUser() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdatePurchasedUser()
	})
}

// ClearPurchasedUser clears the value of the "purchased_user" field.
func (u *CommentUpsertOne) ClearPurchasedUser() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearPurchasedUser()
	})
}

// SetHide sets the "hide" field.
func (u *CommentUpsertOne) SetHide(v bool) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetHide(v)
	})
}

// UpdateHide sets the "hide" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateHide() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateHide()
	})
}

// ClearHide clears the value of the "hide" field.
func (u *CommentUpsertOne) ClearHide() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearHide()
	})
}

// SetHideReason sets the "hide_reason" field.
func (u *CommentUpsertOne) SetHideReason(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetHideReason(v)
	})
}

// UpdateHideReason sets the "hide_reason" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateHideReason() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateHideReason()
	})
}

// ClearHideReason clears the value of the "hide_reason" field.
func (u *CommentUpsertOne) ClearHideReason() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearHideReason()
	})
}

// Exec executes the query.
func (u *CommentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CommentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CommentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CommentUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CommentUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CommentCreateBulk is the builder for creating many Comment entities in bulk.
type CommentCreateBulk struct {
	config
	err      error
	builders []*CommentCreate
	conflict []sql.ConflictOption
}

// Save creates the Comment entities in the database.
func (ccb *CommentCreateBulk) Save(ctx context.Context) ([]*Comment, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Comment, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CommentCreateBulk) SaveX(ctx context.Context) []*Comment {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CommentCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CommentCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Comment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CommentUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (ccb *CommentCreateBulk) OnConflict(opts ...sql.ConflictOption) *CommentUpsertBulk {
	ccb.conflict = opts
	return &CommentUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CommentCreateBulk) OnConflictColumns(columns ...string) *CommentUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CommentUpsertBulk{
		create: ccb,
	}
}

// CommentUpsertBulk is the builder for "upsert"-ing
// a bulk of Comment nodes.
type CommentUpsertBulk struct {
	create *CommentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(comment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CommentUpsertBulk) UpdateNewValues() *CommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(comment.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CommentUpsertBulk) Ignore() *CommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CommentUpsertBulk) DoNothing() *CommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CommentCreateBulk.OnConflict
// documentation for more info.
func (u *CommentUpsertBulk) Update(set func(*CommentUpsert)) *CommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CommentUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *CommentUpsertBulk) SetEntID(v uuid.UUID) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateEntID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateEntID()
	})
}

// SetUserID sets the "user_id" field.
func (u *CommentUpsertBulk) SetUserID(v uuid.UUID) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateUserID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *CommentUpsertBulk) ClearUserID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearUserID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *CommentUpsertBulk) SetAppGoodID(v uuid.UUID) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateAppGoodID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *CommentUpsertBulk) ClearAppGoodID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearAppGoodID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *CommentUpsertBulk) SetOrderID(v uuid.UUID) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateOrderID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *CommentUpsertBulk) ClearOrderID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearOrderID()
	})
}

// SetContent sets the "content" field.
func (u *CommentUpsertBulk) SetContent(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateContent() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *CommentUpsertBulk) ClearContent() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearContent()
	})
}

// SetReplyToID sets the "reply_to_id" field.
func (u *CommentUpsertBulk) SetReplyToID(v uuid.UUID) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetReplyToID(v)
	})
}

// UpdateReplyToID sets the "reply_to_id" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateReplyToID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateReplyToID()
	})
}

// ClearReplyToID clears the value of the "reply_to_id" field.
func (u *CommentUpsertBulk) ClearReplyToID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearReplyToID()
	})
}

// SetAnonymous sets the "anonymous" field.
func (u *CommentUpsertBulk) SetAnonymous(v bool) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetAnonymous(v)
	})
}

// UpdateAnonymous sets the "anonymous" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateAnonymous() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateAnonymous()
	})
}

// ClearAnonymous clears the value of the "anonymous" field.
func (u *CommentUpsertBulk) ClearAnonymous() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearAnonymous()
	})
}

// SetTrialUser sets the "trial_user" field.
func (u *CommentUpsertBulk) SetTrialUser(v bool) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetTrialUser(v)
	})
}

// UpdateTrialUser sets the "trial_user" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateTrialUser() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateTrialUser()
	})
}

// ClearTrialUser clears the value of the "trial_user" field.
func (u *CommentUpsertBulk) ClearTrialUser() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearTrialUser()
	})
}

// SetPurchasedUser sets the "purchased_user" field.
func (u *CommentUpsertBulk) SetPurchasedUser(v bool) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetPurchasedUser(v)
	})
}

// UpdatePurchasedUser sets the "purchased_user" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdatePurchasedUser() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdatePurchasedUser()
	})
}

// ClearPurchasedUser clears the value of the "purchased_user" field.
func (u *CommentUpsertBulk) ClearPurchasedUser() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearPurchasedUser()
	})
}

// SetHide sets the "hide" field.
func (u *CommentUpsertBulk) SetHide(v bool) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetHide(v)
	})
}

// UpdateHide sets the "hide" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateHide() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateHide()
	})
}

// ClearHide clears the value of the "hide" field.
func (u *CommentUpsertBulk) ClearHide() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearHide()
	})
}

// SetHideReason sets the "hide_reason" field.
func (u *CommentUpsertBulk) SetHideReason(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetHideReason(v)
	})
}

// UpdateHideReason sets the "hide_reason" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateHideReason() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateHideReason()
	})
}

// ClearHideReason clears the value of the "hide_reason" field.
func (u *CommentUpsertBulk) ClearHideReason() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearHideReason()
	})
}

// Exec executes the query.
func (u *CommentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the CommentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CommentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CommentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

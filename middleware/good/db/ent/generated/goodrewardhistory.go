// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/goodrewardhistory"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// GoodRewardHistory is the model entity for the GoodRewardHistory schema.
type GoodRewardHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
	// RewardDate holds the value of the "reward_date" field.
	RewardDate uint32 `json:"reward_date,omitempty"`
	// Tid holds the value of the "tid" field.
	Tid uuid.UUID `json:"tid,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount decimal.Decimal `json:"amount,omitempty"`
	// UnitAmount holds the value of the "unit_amount" field.
	UnitAmount decimal.Decimal `json:"unit_amount,omitempty"`
	// UnitNetAmount holds the value of the "unit_net_amount" field.
	UnitNetAmount decimal.Decimal `json:"unit_net_amount,omitempty"`
	selectValues  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoodRewardHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case goodrewardhistory.FieldAmount, goodrewardhistory.FieldUnitAmount, goodrewardhistory.FieldUnitNetAmount:
			values[i] = new(decimal.Decimal)
		case goodrewardhistory.FieldID, goodrewardhistory.FieldRewardDate:
			values[i] = new(sql.NullInt64)
		case goodrewardhistory.FieldEntID, goodrewardhistory.FieldGoodID, goodrewardhistory.FieldCoinTypeID, goodrewardhistory.FieldTid:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoodRewardHistory fields.
func (grh *GoodRewardHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goodrewardhistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			grh.ID = uint32(value.Int64)
		case goodrewardhistory.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				grh.EntID = *value
			}
		case goodrewardhistory.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				grh.GoodID = *value
			}
		case goodrewardhistory.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				grh.CoinTypeID = *value
			}
		case goodrewardhistory.FieldRewardDate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reward_date", values[i])
			} else if value.Valid {
				grh.RewardDate = uint32(value.Int64)
			}
		case goodrewardhistory.FieldTid:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tid", values[i])
			} else if value != nil {
				grh.Tid = *value
			}
		case goodrewardhistory.FieldAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				grh.Amount = *value
			}
		case goodrewardhistory.FieldUnitAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field unit_amount", values[i])
			} else if value != nil {
				grh.UnitAmount = *value
			}
		case goodrewardhistory.FieldUnitNetAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field unit_net_amount", values[i])
			} else if value != nil {
				grh.UnitNetAmount = *value
			}
		default:
			grh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GoodRewardHistory.
// This includes values selected through modifiers, order, etc.
func (grh *GoodRewardHistory) Value(name string) (ent.Value, error) {
	return grh.selectValues.Get(name)
}

// Update returns a builder for updating this GoodRewardHistory.
// Note that you need to call GoodRewardHistory.Unwrap() before calling this method if this GoodRewardHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (grh *GoodRewardHistory) Update() *GoodRewardHistoryUpdateOne {
	return NewGoodRewardHistoryClient(grh.config).UpdateOne(grh)
}

// Unwrap unwraps the GoodRewardHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (grh *GoodRewardHistory) Unwrap() *GoodRewardHistory {
	_tx, ok := grh.config.driver.(*txDriver)
	if !ok {
		panic("generated: GoodRewardHistory is not a transactional entity")
	}
	grh.config.driver = _tx.drv
	return grh
}

// String implements the fmt.Stringer.
func (grh *GoodRewardHistory) String() string {
	var builder strings.Builder
	builder.WriteString("GoodRewardHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", grh.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", grh.EntID))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", grh.GoodID))
	builder.WriteString(", ")
	builder.WriteString("coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", grh.CoinTypeID))
	builder.WriteString(", ")
	builder.WriteString("reward_date=")
	builder.WriteString(fmt.Sprintf("%v", grh.RewardDate))
	builder.WriteString(", ")
	builder.WriteString("tid=")
	builder.WriteString(fmt.Sprintf("%v", grh.Tid))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", grh.Amount))
	builder.WriteString(", ")
	builder.WriteString("unit_amount=")
	builder.WriteString(fmt.Sprintf("%v", grh.UnitAmount))
	builder.WriteString(", ")
	builder.WriteString("unit_net_amount=")
	builder.WriteString(fmt.Sprintf("%v", grh.UnitNetAmount))
	builder.WriteByte(')')
	return builder.String()
}

// GoodRewardHistories is a parsable slice of GoodRewardHistory.
type GoodRewardHistories []*GoodRewardHistory

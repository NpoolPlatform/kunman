// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/topmostconstraint"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// TopMostConstraint is the model entity for the TopMostConstraint schema.
type TopMostConstraint struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// TopMostID holds the value of the "top_most_id" field.
	TopMostID uuid.UUID `json:"top_most_id,omitempty"`
	// Constraint holds the value of the "constraint" field.
	Constraint string `json:"constraint,omitempty"`
	// TargetValue holds the value of the "target_value" field.
	TargetValue decimal.Decimal `json:"target_value,omitempty"`
	// Index holds the value of the "index" field.
	Index        uint8 `json:"index,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TopMostConstraint) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case topmostconstraint.FieldTargetValue:
			values[i] = new(decimal.Decimal)
		case topmostconstraint.FieldID, topmostconstraint.FieldIndex:
			values[i] = new(sql.NullInt64)
		case topmostconstraint.FieldConstraint:
			values[i] = new(sql.NullString)
		case topmostconstraint.FieldEntID, topmostconstraint.FieldTopMostID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TopMostConstraint fields.
func (tmc *TopMostConstraint) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case topmostconstraint.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tmc.ID = uint32(value.Int64)
		case topmostconstraint.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				tmc.EntID = *value
			}
		case topmostconstraint.FieldTopMostID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field top_most_id", values[i])
			} else if value != nil {
				tmc.TopMostID = *value
			}
		case topmostconstraint.FieldConstraint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field constraint", values[i])
			} else if value.Valid {
				tmc.Constraint = value.String
			}
		case topmostconstraint.FieldTargetValue:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field target_value", values[i])
			} else if value != nil {
				tmc.TargetValue = *value
			}
		case topmostconstraint.FieldIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field index", values[i])
			} else if value.Valid {
				tmc.Index = uint8(value.Int64)
			}
		default:
			tmc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TopMostConstraint.
// This includes values selected through modifiers, order, etc.
func (tmc *TopMostConstraint) Value(name string) (ent.Value, error) {
	return tmc.selectValues.Get(name)
}

// Update returns a builder for updating this TopMostConstraint.
// Note that you need to call TopMostConstraint.Unwrap() before calling this method if this TopMostConstraint
// was returned from a transaction, and the transaction was committed or rolled back.
func (tmc *TopMostConstraint) Update() *TopMostConstraintUpdateOne {
	return NewTopMostConstraintClient(tmc.config).UpdateOne(tmc)
}

// Unwrap unwraps the TopMostConstraint entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tmc *TopMostConstraint) Unwrap() *TopMostConstraint {
	_tx, ok := tmc.config.driver.(*txDriver)
	if !ok {
		panic("generated: TopMostConstraint is not a transactional entity")
	}
	tmc.config.driver = _tx.drv
	return tmc
}

// String implements the fmt.Stringer.
func (tmc *TopMostConstraint) String() string {
	var builder strings.Builder
	builder.WriteString("TopMostConstraint(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tmc.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", tmc.EntID))
	builder.WriteString(", ")
	builder.WriteString("top_most_id=")
	builder.WriteString(fmt.Sprintf("%v", tmc.TopMostID))
	builder.WriteString(", ")
	builder.WriteString("constraint=")
	builder.WriteString(tmc.Constraint)
	builder.WriteString(", ")
	builder.WriteString("target_value=")
	builder.WriteString(fmt.Sprintf("%v", tmc.TargetValue))
	builder.WriteString(", ")
	builder.WriteString("index=")
	builder.WriteString(fmt.Sprintf("%v", tmc.Index))
	builder.WriteByte(')')
	return builder.String()
}

// TopMostConstraints is a parsable slice of TopMostConstraint.
type TopMostConstraints []*TopMostConstraint

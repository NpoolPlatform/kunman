// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/topmostgood"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// TopMostGoodUpdate is the builder for updating TopMostGood entities.
type TopMostGoodUpdate struct {
	config
	hooks     []Hook
	mutation  *TopMostGoodMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TopMostGoodUpdate builder.
func (tmgu *TopMostGoodUpdate) Where(ps ...predicate.TopMostGood) *TopMostGoodUpdate {
	tmgu.mutation.Where(ps...)
	return tmgu
}

// SetEntID sets the "ent_id" field.
func (tmgu *TopMostGoodUpdate) SetEntID(u uuid.UUID) *TopMostGoodUpdate {
	tmgu.mutation.SetEntID(u)
	return tmgu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tmgu *TopMostGoodUpdate) SetNillableEntID(u *uuid.UUID) *TopMostGoodUpdate {
	if u != nil {
		tmgu.SetEntID(*u)
	}
	return tmgu
}

// SetAppGoodID sets the "app_good_id" field.
func (tmgu *TopMostGoodUpdate) SetAppGoodID(u uuid.UUID) *TopMostGoodUpdate {
	tmgu.mutation.SetAppGoodID(u)
	return tmgu
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (tmgu *TopMostGoodUpdate) SetNillableAppGoodID(u *uuid.UUID) *TopMostGoodUpdate {
	if u != nil {
		tmgu.SetAppGoodID(*u)
	}
	return tmgu
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (tmgu *TopMostGoodUpdate) ClearAppGoodID() *TopMostGoodUpdate {
	tmgu.mutation.ClearAppGoodID()
	return tmgu
}

// SetTopMostID sets the "top_most_id" field.
func (tmgu *TopMostGoodUpdate) SetTopMostID(u uuid.UUID) *TopMostGoodUpdate {
	tmgu.mutation.SetTopMostID(u)
	return tmgu
}

// SetNillableTopMostID sets the "top_most_id" field if the given value is not nil.
func (tmgu *TopMostGoodUpdate) SetNillableTopMostID(u *uuid.UUID) *TopMostGoodUpdate {
	if u != nil {
		tmgu.SetTopMostID(*u)
	}
	return tmgu
}

// ClearTopMostID clears the value of the "top_most_id" field.
func (tmgu *TopMostGoodUpdate) ClearTopMostID() *TopMostGoodUpdate {
	tmgu.mutation.ClearTopMostID()
	return tmgu
}

// SetDisplayIndex sets the "display_index" field.
func (tmgu *TopMostGoodUpdate) SetDisplayIndex(u uint32) *TopMostGoodUpdate {
	tmgu.mutation.ResetDisplayIndex()
	tmgu.mutation.SetDisplayIndex(u)
	return tmgu
}

// SetNillableDisplayIndex sets the "display_index" field if the given value is not nil.
func (tmgu *TopMostGoodUpdate) SetNillableDisplayIndex(u *uint32) *TopMostGoodUpdate {
	if u != nil {
		tmgu.SetDisplayIndex(*u)
	}
	return tmgu
}

// AddDisplayIndex adds u to the "display_index" field.
func (tmgu *TopMostGoodUpdate) AddDisplayIndex(u int32) *TopMostGoodUpdate {
	tmgu.mutation.AddDisplayIndex(u)
	return tmgu
}

// ClearDisplayIndex clears the value of the "display_index" field.
func (tmgu *TopMostGoodUpdate) ClearDisplayIndex() *TopMostGoodUpdate {
	tmgu.mutation.ClearDisplayIndex()
	return tmgu
}

// SetUnitPrice sets the "unit_price" field.
func (tmgu *TopMostGoodUpdate) SetUnitPrice(d decimal.Decimal) *TopMostGoodUpdate {
	tmgu.mutation.SetUnitPrice(d)
	return tmgu
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (tmgu *TopMostGoodUpdate) SetNillableUnitPrice(d *decimal.Decimal) *TopMostGoodUpdate {
	if d != nil {
		tmgu.SetUnitPrice(*d)
	}
	return tmgu
}

// ClearUnitPrice clears the value of the "unit_price" field.
func (tmgu *TopMostGoodUpdate) ClearUnitPrice() *TopMostGoodUpdate {
	tmgu.mutation.ClearUnitPrice()
	return tmgu
}

// Mutation returns the TopMostGoodMutation object of the builder.
func (tmgu *TopMostGoodUpdate) Mutation() *TopMostGoodMutation {
	return tmgu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tmgu *TopMostGoodUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tmgu.sqlSave, tmgu.mutation, tmgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tmgu *TopMostGoodUpdate) SaveX(ctx context.Context) int {
	affected, err := tmgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tmgu *TopMostGoodUpdate) Exec(ctx context.Context) error {
	_, err := tmgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmgu *TopMostGoodUpdate) ExecX(ctx context.Context) {
	if err := tmgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tmgu *TopMostGoodUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TopMostGoodUpdate {
	tmgu.modifiers = append(tmgu.modifiers, modifiers...)
	return tmgu
}

func (tmgu *TopMostGoodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(topmostgood.Table, topmostgood.Columns, sqlgraph.NewFieldSpec(topmostgood.FieldID, field.TypeUint32))
	if ps := tmgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmgu.mutation.EntID(); ok {
		_spec.SetField(topmostgood.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := tmgu.mutation.AppGoodID(); ok {
		_spec.SetField(topmostgood.FieldAppGoodID, field.TypeUUID, value)
	}
	if tmgu.mutation.AppGoodIDCleared() {
		_spec.ClearField(topmostgood.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := tmgu.mutation.TopMostID(); ok {
		_spec.SetField(topmostgood.FieldTopMostID, field.TypeUUID, value)
	}
	if tmgu.mutation.TopMostIDCleared() {
		_spec.ClearField(topmostgood.FieldTopMostID, field.TypeUUID)
	}
	if value, ok := tmgu.mutation.DisplayIndex(); ok {
		_spec.SetField(topmostgood.FieldDisplayIndex, field.TypeUint32, value)
	}
	if value, ok := tmgu.mutation.AddedDisplayIndex(); ok {
		_spec.AddField(topmostgood.FieldDisplayIndex, field.TypeUint32, value)
	}
	if tmgu.mutation.DisplayIndexCleared() {
		_spec.ClearField(topmostgood.FieldDisplayIndex, field.TypeUint32)
	}
	if value, ok := tmgu.mutation.UnitPrice(); ok {
		_spec.SetField(topmostgood.FieldUnitPrice, field.TypeOther, value)
	}
	if tmgu.mutation.UnitPriceCleared() {
		_spec.ClearField(topmostgood.FieldUnitPrice, field.TypeOther)
	}
	_spec.AddModifiers(tmgu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tmgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topmostgood.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tmgu.mutation.done = true
	return n, nil
}

// TopMostGoodUpdateOne is the builder for updating a single TopMostGood entity.
type TopMostGoodUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TopMostGoodMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (tmguo *TopMostGoodUpdateOne) SetEntID(u uuid.UUID) *TopMostGoodUpdateOne {
	tmguo.mutation.SetEntID(u)
	return tmguo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tmguo *TopMostGoodUpdateOne) SetNillableEntID(u *uuid.UUID) *TopMostGoodUpdateOne {
	if u != nil {
		tmguo.SetEntID(*u)
	}
	return tmguo
}

// SetAppGoodID sets the "app_good_id" field.
func (tmguo *TopMostGoodUpdateOne) SetAppGoodID(u uuid.UUID) *TopMostGoodUpdateOne {
	tmguo.mutation.SetAppGoodID(u)
	return tmguo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (tmguo *TopMostGoodUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *TopMostGoodUpdateOne {
	if u != nil {
		tmguo.SetAppGoodID(*u)
	}
	return tmguo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (tmguo *TopMostGoodUpdateOne) ClearAppGoodID() *TopMostGoodUpdateOne {
	tmguo.mutation.ClearAppGoodID()
	return tmguo
}

// SetTopMostID sets the "top_most_id" field.
func (tmguo *TopMostGoodUpdateOne) SetTopMostID(u uuid.UUID) *TopMostGoodUpdateOne {
	tmguo.mutation.SetTopMostID(u)
	return tmguo
}

// SetNillableTopMostID sets the "top_most_id" field if the given value is not nil.
func (tmguo *TopMostGoodUpdateOne) SetNillableTopMostID(u *uuid.UUID) *TopMostGoodUpdateOne {
	if u != nil {
		tmguo.SetTopMostID(*u)
	}
	return tmguo
}

// ClearTopMostID clears the value of the "top_most_id" field.
func (tmguo *TopMostGoodUpdateOne) ClearTopMostID() *TopMostGoodUpdateOne {
	tmguo.mutation.ClearTopMostID()
	return tmguo
}

// SetDisplayIndex sets the "display_index" field.
func (tmguo *TopMostGoodUpdateOne) SetDisplayIndex(u uint32) *TopMostGoodUpdateOne {
	tmguo.mutation.ResetDisplayIndex()
	tmguo.mutation.SetDisplayIndex(u)
	return tmguo
}

// SetNillableDisplayIndex sets the "display_index" field if the given value is not nil.
func (tmguo *TopMostGoodUpdateOne) SetNillableDisplayIndex(u *uint32) *TopMostGoodUpdateOne {
	if u != nil {
		tmguo.SetDisplayIndex(*u)
	}
	return tmguo
}

// AddDisplayIndex adds u to the "display_index" field.
func (tmguo *TopMostGoodUpdateOne) AddDisplayIndex(u int32) *TopMostGoodUpdateOne {
	tmguo.mutation.AddDisplayIndex(u)
	return tmguo
}

// ClearDisplayIndex clears the value of the "display_index" field.
func (tmguo *TopMostGoodUpdateOne) ClearDisplayIndex() *TopMostGoodUpdateOne {
	tmguo.mutation.ClearDisplayIndex()
	return tmguo
}

// SetUnitPrice sets the "unit_price" field.
func (tmguo *TopMostGoodUpdateOne) SetUnitPrice(d decimal.Decimal) *TopMostGoodUpdateOne {
	tmguo.mutation.SetUnitPrice(d)
	return tmguo
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (tmguo *TopMostGoodUpdateOne) SetNillableUnitPrice(d *decimal.Decimal) *TopMostGoodUpdateOne {
	if d != nil {
		tmguo.SetUnitPrice(*d)
	}
	return tmguo
}

// ClearUnitPrice clears the value of the "unit_price" field.
func (tmguo *TopMostGoodUpdateOne) ClearUnitPrice() *TopMostGoodUpdateOne {
	tmguo.mutation.ClearUnitPrice()
	return tmguo
}

// Mutation returns the TopMostGoodMutation object of the builder.
func (tmguo *TopMostGoodUpdateOne) Mutation() *TopMostGoodMutation {
	return tmguo.mutation
}

// Where appends a list predicates to the TopMostGoodUpdate builder.
func (tmguo *TopMostGoodUpdateOne) Where(ps ...predicate.TopMostGood) *TopMostGoodUpdateOne {
	tmguo.mutation.Where(ps...)
	return tmguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tmguo *TopMostGoodUpdateOne) Select(field string, fields ...string) *TopMostGoodUpdateOne {
	tmguo.fields = append([]string{field}, fields...)
	return tmguo
}

// Save executes the query and returns the updated TopMostGood entity.
func (tmguo *TopMostGoodUpdateOne) Save(ctx context.Context) (*TopMostGood, error) {
	return withHooks(ctx, tmguo.sqlSave, tmguo.mutation, tmguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tmguo *TopMostGoodUpdateOne) SaveX(ctx context.Context) *TopMostGood {
	node, err := tmguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tmguo *TopMostGoodUpdateOne) Exec(ctx context.Context) error {
	_, err := tmguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmguo *TopMostGoodUpdateOne) ExecX(ctx context.Context) {
	if err := tmguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tmguo *TopMostGoodUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TopMostGoodUpdateOne {
	tmguo.modifiers = append(tmguo.modifiers, modifiers...)
	return tmguo
}

func (tmguo *TopMostGoodUpdateOne) sqlSave(ctx context.Context) (_node *TopMostGood, err error) {
	_spec := sqlgraph.NewUpdateSpec(topmostgood.Table, topmostgood.Columns, sqlgraph.NewFieldSpec(topmostgood.FieldID, field.TypeUint32))
	id, ok := tmguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "TopMostGood.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tmguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, topmostgood.FieldID)
		for _, f := range fields {
			if !topmostgood.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != topmostgood.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tmguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmguo.mutation.EntID(); ok {
		_spec.SetField(topmostgood.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := tmguo.mutation.AppGoodID(); ok {
		_spec.SetField(topmostgood.FieldAppGoodID, field.TypeUUID, value)
	}
	if tmguo.mutation.AppGoodIDCleared() {
		_spec.ClearField(topmostgood.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := tmguo.mutation.TopMostID(); ok {
		_spec.SetField(topmostgood.FieldTopMostID, field.TypeUUID, value)
	}
	if tmguo.mutation.TopMostIDCleared() {
		_spec.ClearField(topmostgood.FieldTopMostID, field.TypeUUID)
	}
	if value, ok := tmguo.mutation.DisplayIndex(); ok {
		_spec.SetField(topmostgood.FieldDisplayIndex, field.TypeUint32, value)
	}
	if value, ok := tmguo.mutation.AddedDisplayIndex(); ok {
		_spec.AddField(topmostgood.FieldDisplayIndex, field.TypeUint32, value)
	}
	if tmguo.mutation.DisplayIndexCleared() {
		_spec.ClearField(topmostgood.FieldDisplayIndex, field.TypeUint32)
	}
	if value, ok := tmguo.mutation.UnitPrice(); ok {
		_spec.SetField(topmostgood.FieldUnitPrice, field.TypeOther, value)
	}
	if tmguo.mutation.UnitPriceCleared() {
		_spec.ClearField(topmostgood.FieldUnitPrice, field.TypeOther)
	}
	_spec.AddModifiers(tmguo.modifiers...)
	_node = &TopMostGood{config: tmguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tmguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topmostgood.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tmguo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appgooddisplaycolor"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
)

// AppGoodDisplayColorDelete is the builder for deleting a AppGoodDisplayColor entity.
type AppGoodDisplayColorDelete struct {
	config
	hooks    []Hook
	mutation *AppGoodDisplayColorMutation
}

// Where appends a list predicates to the AppGoodDisplayColorDelete builder.
func (agdcd *AppGoodDisplayColorDelete) Where(ps ...predicate.AppGoodDisplayColor) *AppGoodDisplayColorDelete {
	agdcd.mutation.Where(ps...)
	return agdcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (agdcd *AppGoodDisplayColorDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, agdcd.sqlExec, agdcd.mutation, agdcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (agdcd *AppGoodDisplayColorDelete) ExecX(ctx context.Context) int {
	n, err := agdcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (agdcd *AppGoodDisplayColorDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(appgooddisplaycolor.Table, sqlgraph.NewFieldSpec(appgooddisplaycolor.FieldID, field.TypeUint32))
	if ps := agdcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, agdcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	agdcd.mutation.done = true
	return affected, err
}

// AppGoodDisplayColorDeleteOne is the builder for deleting a single AppGoodDisplayColor entity.
type AppGoodDisplayColorDeleteOne struct {
	agdcd *AppGoodDisplayColorDelete
}

// Where appends a list predicates to the AppGoodDisplayColorDelete builder.
func (agdcdo *AppGoodDisplayColorDeleteOne) Where(ps ...predicate.AppGoodDisplayColor) *AppGoodDisplayColorDeleteOne {
	agdcdo.agdcd.mutation.Where(ps...)
	return agdcdo
}

// Exec executes the deletion query.
func (agdcdo *AppGoodDisplayColorDeleteOne) Exec(ctx context.Context) error {
	n, err := agdcdo.agdcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{appgooddisplaycolor.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (agdcdo *AppGoodDisplayColorDeleteOne) ExecX(ctx context.Context) {
	if err := agdcdo.Exec(ctx); err != nil {
		panic(err)
	}
}

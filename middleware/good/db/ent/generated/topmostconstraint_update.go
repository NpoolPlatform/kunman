// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/topmostconstraint"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// TopMostConstraintUpdate is the builder for updating TopMostConstraint entities.
type TopMostConstraintUpdate struct {
	config
	hooks     []Hook
	mutation  *TopMostConstraintMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TopMostConstraintUpdate builder.
func (tmcu *TopMostConstraintUpdate) Where(ps ...predicate.TopMostConstraint) *TopMostConstraintUpdate {
	tmcu.mutation.Where(ps...)
	return tmcu
}

// SetEntID sets the "ent_id" field.
func (tmcu *TopMostConstraintUpdate) SetEntID(u uuid.UUID) *TopMostConstraintUpdate {
	tmcu.mutation.SetEntID(u)
	return tmcu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tmcu *TopMostConstraintUpdate) SetNillableEntID(u *uuid.UUID) *TopMostConstraintUpdate {
	if u != nil {
		tmcu.SetEntID(*u)
	}
	return tmcu
}

// SetCreatedAt sets the "created_at" field.
func (tmcu *TopMostConstraintUpdate) SetCreatedAt(u uint32) *TopMostConstraintUpdate {
	tmcu.mutation.ResetCreatedAt()
	tmcu.mutation.SetCreatedAt(u)
	return tmcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tmcu *TopMostConstraintUpdate) SetNillableCreatedAt(u *uint32) *TopMostConstraintUpdate {
	if u != nil {
		tmcu.SetCreatedAt(*u)
	}
	return tmcu
}

// AddCreatedAt adds u to the "created_at" field.
func (tmcu *TopMostConstraintUpdate) AddCreatedAt(u int32) *TopMostConstraintUpdate {
	tmcu.mutation.AddCreatedAt(u)
	return tmcu
}

// SetUpdatedAt sets the "updated_at" field.
func (tmcu *TopMostConstraintUpdate) SetUpdatedAt(u uint32) *TopMostConstraintUpdate {
	tmcu.mutation.ResetUpdatedAt()
	tmcu.mutation.SetUpdatedAt(u)
	return tmcu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tmcu *TopMostConstraintUpdate) AddUpdatedAt(u int32) *TopMostConstraintUpdate {
	tmcu.mutation.AddUpdatedAt(u)
	return tmcu
}

// SetDeletedAt sets the "deleted_at" field.
func (tmcu *TopMostConstraintUpdate) SetDeletedAt(u uint32) *TopMostConstraintUpdate {
	tmcu.mutation.ResetDeletedAt()
	tmcu.mutation.SetDeletedAt(u)
	return tmcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tmcu *TopMostConstraintUpdate) SetNillableDeletedAt(u *uint32) *TopMostConstraintUpdate {
	if u != nil {
		tmcu.SetDeletedAt(*u)
	}
	return tmcu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tmcu *TopMostConstraintUpdate) AddDeletedAt(u int32) *TopMostConstraintUpdate {
	tmcu.mutation.AddDeletedAt(u)
	return tmcu
}

// SetTopMostID sets the "top_most_id" field.
func (tmcu *TopMostConstraintUpdate) SetTopMostID(u uuid.UUID) *TopMostConstraintUpdate {
	tmcu.mutation.SetTopMostID(u)
	return tmcu
}

// SetNillableTopMostID sets the "top_most_id" field if the given value is not nil.
func (tmcu *TopMostConstraintUpdate) SetNillableTopMostID(u *uuid.UUID) *TopMostConstraintUpdate {
	if u != nil {
		tmcu.SetTopMostID(*u)
	}
	return tmcu
}

// ClearTopMostID clears the value of the "top_most_id" field.
func (tmcu *TopMostConstraintUpdate) ClearTopMostID() *TopMostConstraintUpdate {
	tmcu.mutation.ClearTopMostID()
	return tmcu
}

// SetConstraint sets the "constraint" field.
func (tmcu *TopMostConstraintUpdate) SetConstraint(s string) *TopMostConstraintUpdate {
	tmcu.mutation.SetConstraint(s)
	return tmcu
}

// SetNillableConstraint sets the "constraint" field if the given value is not nil.
func (tmcu *TopMostConstraintUpdate) SetNillableConstraint(s *string) *TopMostConstraintUpdate {
	if s != nil {
		tmcu.SetConstraint(*s)
	}
	return tmcu
}

// ClearConstraint clears the value of the "constraint" field.
func (tmcu *TopMostConstraintUpdate) ClearConstraint() *TopMostConstraintUpdate {
	tmcu.mutation.ClearConstraint()
	return tmcu
}

// SetTargetValue sets the "target_value" field.
func (tmcu *TopMostConstraintUpdate) SetTargetValue(d decimal.Decimal) *TopMostConstraintUpdate {
	tmcu.mutation.SetTargetValue(d)
	return tmcu
}

// SetNillableTargetValue sets the "target_value" field if the given value is not nil.
func (tmcu *TopMostConstraintUpdate) SetNillableTargetValue(d *decimal.Decimal) *TopMostConstraintUpdate {
	if d != nil {
		tmcu.SetTargetValue(*d)
	}
	return tmcu
}

// ClearTargetValue clears the value of the "target_value" field.
func (tmcu *TopMostConstraintUpdate) ClearTargetValue() *TopMostConstraintUpdate {
	tmcu.mutation.ClearTargetValue()
	return tmcu
}

// SetIndex sets the "index" field.
func (tmcu *TopMostConstraintUpdate) SetIndex(u uint8) *TopMostConstraintUpdate {
	tmcu.mutation.ResetIndex()
	tmcu.mutation.SetIndex(u)
	return tmcu
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (tmcu *TopMostConstraintUpdate) SetNillableIndex(u *uint8) *TopMostConstraintUpdate {
	if u != nil {
		tmcu.SetIndex(*u)
	}
	return tmcu
}

// AddIndex adds u to the "index" field.
func (tmcu *TopMostConstraintUpdate) AddIndex(u int8) *TopMostConstraintUpdate {
	tmcu.mutation.AddIndex(u)
	return tmcu
}

// ClearIndex clears the value of the "index" field.
func (tmcu *TopMostConstraintUpdate) ClearIndex() *TopMostConstraintUpdate {
	tmcu.mutation.ClearIndex()
	return tmcu
}

// Mutation returns the TopMostConstraintMutation object of the builder.
func (tmcu *TopMostConstraintUpdate) Mutation() *TopMostConstraintMutation {
	return tmcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tmcu *TopMostConstraintUpdate) Save(ctx context.Context) (int, error) {
	tmcu.defaults()
	return withHooks(ctx, tmcu.sqlSave, tmcu.mutation, tmcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tmcu *TopMostConstraintUpdate) SaveX(ctx context.Context) int {
	affected, err := tmcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tmcu *TopMostConstraintUpdate) Exec(ctx context.Context) error {
	_, err := tmcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmcu *TopMostConstraintUpdate) ExecX(ctx context.Context) {
	if err := tmcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmcu *TopMostConstraintUpdate) defaults() {
	if _, ok := tmcu.mutation.UpdatedAt(); !ok {
		v := topmostconstraint.UpdateDefaultUpdatedAt()
		tmcu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tmcu *TopMostConstraintUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TopMostConstraintUpdate {
	tmcu.modifiers = append(tmcu.modifiers, modifiers...)
	return tmcu
}

func (tmcu *TopMostConstraintUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(topmostconstraint.Table, topmostconstraint.Columns, sqlgraph.NewFieldSpec(topmostconstraint.FieldID, field.TypeUint32))
	if ps := tmcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmcu.mutation.EntID(); ok {
		_spec.SetField(topmostconstraint.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := tmcu.mutation.CreatedAt(); ok {
		_spec.SetField(topmostconstraint.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := tmcu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(topmostconstraint.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := tmcu.mutation.UpdatedAt(); ok {
		_spec.SetField(topmostconstraint.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := tmcu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(topmostconstraint.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := tmcu.mutation.DeletedAt(); ok {
		_spec.SetField(topmostconstraint.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := tmcu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(topmostconstraint.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := tmcu.mutation.TopMostID(); ok {
		_spec.SetField(topmostconstraint.FieldTopMostID, field.TypeUUID, value)
	}
	if tmcu.mutation.TopMostIDCleared() {
		_spec.ClearField(topmostconstraint.FieldTopMostID, field.TypeUUID)
	}
	if value, ok := tmcu.mutation.Constraint(); ok {
		_spec.SetField(topmostconstraint.FieldConstraint, field.TypeString, value)
	}
	if tmcu.mutation.ConstraintCleared() {
		_spec.ClearField(topmostconstraint.FieldConstraint, field.TypeString)
	}
	if value, ok := tmcu.mutation.TargetValue(); ok {
		_spec.SetField(topmostconstraint.FieldTargetValue, field.TypeOther, value)
	}
	if tmcu.mutation.TargetValueCleared() {
		_spec.ClearField(topmostconstraint.FieldTargetValue, field.TypeOther)
	}
	if value, ok := tmcu.mutation.Index(); ok {
		_spec.SetField(topmostconstraint.FieldIndex, field.TypeUint8, value)
	}
	if value, ok := tmcu.mutation.AddedIndex(); ok {
		_spec.AddField(topmostconstraint.FieldIndex, field.TypeUint8, value)
	}
	if tmcu.mutation.IndexCleared() {
		_spec.ClearField(topmostconstraint.FieldIndex, field.TypeUint8)
	}
	_spec.AddModifiers(tmcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tmcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topmostconstraint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tmcu.mutation.done = true
	return n, nil
}

// TopMostConstraintUpdateOne is the builder for updating a single TopMostConstraint entity.
type TopMostConstraintUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TopMostConstraintMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (tmcuo *TopMostConstraintUpdateOne) SetEntID(u uuid.UUID) *TopMostConstraintUpdateOne {
	tmcuo.mutation.SetEntID(u)
	return tmcuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tmcuo *TopMostConstraintUpdateOne) SetNillableEntID(u *uuid.UUID) *TopMostConstraintUpdateOne {
	if u != nil {
		tmcuo.SetEntID(*u)
	}
	return tmcuo
}

// SetCreatedAt sets the "created_at" field.
func (tmcuo *TopMostConstraintUpdateOne) SetCreatedAt(u uint32) *TopMostConstraintUpdateOne {
	tmcuo.mutation.ResetCreatedAt()
	tmcuo.mutation.SetCreatedAt(u)
	return tmcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tmcuo *TopMostConstraintUpdateOne) SetNillableCreatedAt(u *uint32) *TopMostConstraintUpdateOne {
	if u != nil {
		tmcuo.SetCreatedAt(*u)
	}
	return tmcuo
}

// AddCreatedAt adds u to the "created_at" field.
func (tmcuo *TopMostConstraintUpdateOne) AddCreatedAt(u int32) *TopMostConstraintUpdateOne {
	tmcuo.mutation.AddCreatedAt(u)
	return tmcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tmcuo *TopMostConstraintUpdateOne) SetUpdatedAt(u uint32) *TopMostConstraintUpdateOne {
	tmcuo.mutation.ResetUpdatedAt()
	tmcuo.mutation.SetUpdatedAt(u)
	return tmcuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tmcuo *TopMostConstraintUpdateOne) AddUpdatedAt(u int32) *TopMostConstraintUpdateOne {
	tmcuo.mutation.AddUpdatedAt(u)
	return tmcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tmcuo *TopMostConstraintUpdateOne) SetDeletedAt(u uint32) *TopMostConstraintUpdateOne {
	tmcuo.mutation.ResetDeletedAt()
	tmcuo.mutation.SetDeletedAt(u)
	return tmcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tmcuo *TopMostConstraintUpdateOne) SetNillableDeletedAt(u *uint32) *TopMostConstraintUpdateOne {
	if u != nil {
		tmcuo.SetDeletedAt(*u)
	}
	return tmcuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tmcuo *TopMostConstraintUpdateOne) AddDeletedAt(u int32) *TopMostConstraintUpdateOne {
	tmcuo.mutation.AddDeletedAt(u)
	return tmcuo
}

// SetTopMostID sets the "top_most_id" field.
func (tmcuo *TopMostConstraintUpdateOne) SetTopMostID(u uuid.UUID) *TopMostConstraintUpdateOne {
	tmcuo.mutation.SetTopMostID(u)
	return tmcuo
}

// SetNillableTopMostID sets the "top_most_id" field if the given value is not nil.
func (tmcuo *TopMostConstraintUpdateOne) SetNillableTopMostID(u *uuid.UUID) *TopMostConstraintUpdateOne {
	if u != nil {
		tmcuo.SetTopMostID(*u)
	}
	return tmcuo
}

// ClearTopMostID clears the value of the "top_most_id" field.
func (tmcuo *TopMostConstraintUpdateOne) ClearTopMostID() *TopMostConstraintUpdateOne {
	tmcuo.mutation.ClearTopMostID()
	return tmcuo
}

// SetConstraint sets the "constraint" field.
func (tmcuo *TopMostConstraintUpdateOne) SetConstraint(s string) *TopMostConstraintUpdateOne {
	tmcuo.mutation.SetConstraint(s)
	return tmcuo
}

// SetNillableConstraint sets the "constraint" field if the given value is not nil.
func (tmcuo *TopMostConstraintUpdateOne) SetNillableConstraint(s *string) *TopMostConstraintUpdateOne {
	if s != nil {
		tmcuo.SetConstraint(*s)
	}
	return tmcuo
}

// ClearConstraint clears the value of the "constraint" field.
func (tmcuo *TopMostConstraintUpdateOne) ClearConstraint() *TopMostConstraintUpdateOne {
	tmcuo.mutation.ClearConstraint()
	return tmcuo
}

// SetTargetValue sets the "target_value" field.
func (tmcuo *TopMostConstraintUpdateOne) SetTargetValue(d decimal.Decimal) *TopMostConstraintUpdateOne {
	tmcuo.mutation.SetTargetValue(d)
	return tmcuo
}

// SetNillableTargetValue sets the "target_value" field if the given value is not nil.
func (tmcuo *TopMostConstraintUpdateOne) SetNillableTargetValue(d *decimal.Decimal) *TopMostConstraintUpdateOne {
	if d != nil {
		tmcuo.SetTargetValue(*d)
	}
	return tmcuo
}

// ClearTargetValue clears the value of the "target_value" field.
func (tmcuo *TopMostConstraintUpdateOne) ClearTargetValue() *TopMostConstraintUpdateOne {
	tmcuo.mutation.ClearTargetValue()
	return tmcuo
}

// SetIndex sets the "index" field.
func (tmcuo *TopMostConstraintUpdateOne) SetIndex(u uint8) *TopMostConstraintUpdateOne {
	tmcuo.mutation.ResetIndex()
	tmcuo.mutation.SetIndex(u)
	return tmcuo
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (tmcuo *TopMostConstraintUpdateOne) SetNillableIndex(u *uint8) *TopMostConstraintUpdateOne {
	if u != nil {
		tmcuo.SetIndex(*u)
	}
	return tmcuo
}

// AddIndex adds u to the "index" field.
func (tmcuo *TopMostConstraintUpdateOne) AddIndex(u int8) *TopMostConstraintUpdateOne {
	tmcuo.mutation.AddIndex(u)
	return tmcuo
}

// ClearIndex clears the value of the "index" field.
func (tmcuo *TopMostConstraintUpdateOne) ClearIndex() *TopMostConstraintUpdateOne {
	tmcuo.mutation.ClearIndex()
	return tmcuo
}

// Mutation returns the TopMostConstraintMutation object of the builder.
func (tmcuo *TopMostConstraintUpdateOne) Mutation() *TopMostConstraintMutation {
	return tmcuo.mutation
}

// Where appends a list predicates to the TopMostConstraintUpdate builder.
func (tmcuo *TopMostConstraintUpdateOne) Where(ps ...predicate.TopMostConstraint) *TopMostConstraintUpdateOne {
	tmcuo.mutation.Where(ps...)
	return tmcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tmcuo *TopMostConstraintUpdateOne) Select(field string, fields ...string) *TopMostConstraintUpdateOne {
	tmcuo.fields = append([]string{field}, fields...)
	return tmcuo
}

// Save executes the query and returns the updated TopMostConstraint entity.
func (tmcuo *TopMostConstraintUpdateOne) Save(ctx context.Context) (*TopMostConstraint, error) {
	tmcuo.defaults()
	return withHooks(ctx, tmcuo.sqlSave, tmcuo.mutation, tmcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tmcuo *TopMostConstraintUpdateOne) SaveX(ctx context.Context) *TopMostConstraint {
	node, err := tmcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tmcuo *TopMostConstraintUpdateOne) Exec(ctx context.Context) error {
	_, err := tmcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmcuo *TopMostConstraintUpdateOne) ExecX(ctx context.Context) {
	if err := tmcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmcuo *TopMostConstraintUpdateOne) defaults() {
	if _, ok := tmcuo.mutation.UpdatedAt(); !ok {
		v := topmostconstraint.UpdateDefaultUpdatedAt()
		tmcuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tmcuo *TopMostConstraintUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TopMostConstraintUpdateOne {
	tmcuo.modifiers = append(tmcuo.modifiers, modifiers...)
	return tmcuo
}

func (tmcuo *TopMostConstraintUpdateOne) sqlSave(ctx context.Context) (_node *TopMostConstraint, err error) {
	_spec := sqlgraph.NewUpdateSpec(topmostconstraint.Table, topmostconstraint.Columns, sqlgraph.NewFieldSpec(topmostconstraint.FieldID, field.TypeUint32))
	id, ok := tmcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "TopMostConstraint.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tmcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, topmostconstraint.FieldID)
		for _, f := range fields {
			if !topmostconstraint.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != topmostconstraint.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tmcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmcuo.mutation.EntID(); ok {
		_spec.SetField(topmostconstraint.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := tmcuo.mutation.CreatedAt(); ok {
		_spec.SetField(topmostconstraint.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := tmcuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(topmostconstraint.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := tmcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(topmostconstraint.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := tmcuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(topmostconstraint.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := tmcuo.mutation.DeletedAt(); ok {
		_spec.SetField(topmostconstraint.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := tmcuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(topmostconstraint.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := tmcuo.mutation.TopMostID(); ok {
		_spec.SetField(topmostconstraint.FieldTopMostID, field.TypeUUID, value)
	}
	if tmcuo.mutation.TopMostIDCleared() {
		_spec.ClearField(topmostconstraint.FieldTopMostID, field.TypeUUID)
	}
	if value, ok := tmcuo.mutation.Constraint(); ok {
		_spec.SetField(topmostconstraint.FieldConstraint, field.TypeString, value)
	}
	if tmcuo.mutation.ConstraintCleared() {
		_spec.ClearField(topmostconstraint.FieldConstraint, field.TypeString)
	}
	if value, ok := tmcuo.mutation.TargetValue(); ok {
		_spec.SetField(topmostconstraint.FieldTargetValue, field.TypeOther, value)
	}
	if tmcuo.mutation.TargetValueCleared() {
		_spec.ClearField(topmostconstraint.FieldTargetValue, field.TypeOther)
	}
	if value, ok := tmcuo.mutation.Index(); ok {
		_spec.SetField(topmostconstraint.FieldIndex, field.TypeUint8, value)
	}
	if value, ok := tmcuo.mutation.AddedIndex(); ok {
		_spec.AddField(topmostconstraint.FieldIndex, field.TypeUint8, value)
	}
	if tmcuo.mutation.IndexCleared() {
		_spec.ClearField(topmostconstraint.FieldIndex, field.TypeUint8)
	}
	_spec.AddModifiers(tmcuo.modifiers...)
	_node = &TopMostConstraint{config: tmcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tmcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topmostconstraint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tmcuo.mutation.done = true
	return _node, nil
}

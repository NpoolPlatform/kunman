// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/goodbase"
	"github.com/google/uuid"
)

// GoodBase is the model entity for the GoodBase schema.
type GoodBase struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// GoodType holds the value of the "good_type" field.
	GoodType string `json:"good_type,omitempty"`
	// BenefitType holds the value of the "benefit_type" field.
	BenefitType string `json:"benefit_type,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ServiceStartAt holds the value of the "service_start_at" field.
	ServiceStartAt uint32 `json:"service_start_at,omitempty"`
	// StartMode holds the value of the "start_mode" field.
	StartMode string `json:"start_mode,omitempty"`
	// TestOnly holds the value of the "test_only" field.
	TestOnly bool `json:"test_only,omitempty"`
	// BenefitIntervalHours holds the value of the "benefit_interval_hours" field.
	BenefitIntervalHours uint32 `json:"benefit_interval_hours,omitempty"`
	// Purchasable holds the value of the "purchasable" field.
	Purchasable bool `json:"purchasable,omitempty"`
	// Online holds the value of the "online" field.
	Online bool `json:"online,omitempty"`
	// State holds the value of the "state" field.
	State        string `json:"state,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoodBase) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case goodbase.FieldTestOnly, goodbase.FieldPurchasable, goodbase.FieldOnline:
			values[i] = new(sql.NullBool)
		case goodbase.FieldID, goodbase.FieldServiceStartAt, goodbase.FieldBenefitIntervalHours:
			values[i] = new(sql.NullInt64)
		case goodbase.FieldGoodType, goodbase.FieldBenefitType, goodbase.FieldName, goodbase.FieldStartMode, goodbase.FieldState:
			values[i] = new(sql.NullString)
		case goodbase.FieldEntID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoodBase fields.
func (gb *GoodBase) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goodbase.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gb.ID = uint32(value.Int64)
		case goodbase.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				gb.EntID = *value
			}
		case goodbase.FieldGoodType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field good_type", values[i])
			} else if value.Valid {
				gb.GoodType = value.String
			}
		case goodbase.FieldBenefitType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field benefit_type", values[i])
			} else if value.Valid {
				gb.BenefitType = value.String
			}
		case goodbase.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				gb.Name = value.String
			}
		case goodbase.FieldServiceStartAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field service_start_at", values[i])
			} else if value.Valid {
				gb.ServiceStartAt = uint32(value.Int64)
			}
		case goodbase.FieldStartMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field start_mode", values[i])
			} else if value.Valid {
				gb.StartMode = value.String
			}
		case goodbase.FieldTestOnly:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field test_only", values[i])
			} else if value.Valid {
				gb.TestOnly = value.Bool
			}
		case goodbase.FieldBenefitIntervalHours:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field benefit_interval_hours", values[i])
			} else if value.Valid {
				gb.BenefitIntervalHours = uint32(value.Int64)
			}
		case goodbase.FieldPurchasable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field purchasable", values[i])
			} else if value.Valid {
				gb.Purchasable = value.Bool
			}
		case goodbase.FieldOnline:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field online", values[i])
			} else if value.Valid {
				gb.Online = value.Bool
			}
		case goodbase.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				gb.State = value.String
			}
		default:
			gb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GoodBase.
// This includes values selected through modifiers, order, etc.
func (gb *GoodBase) Value(name string) (ent.Value, error) {
	return gb.selectValues.Get(name)
}

// Update returns a builder for updating this GoodBase.
// Note that you need to call GoodBase.Unwrap() before calling this method if this GoodBase
// was returned from a transaction, and the transaction was committed or rolled back.
func (gb *GoodBase) Update() *GoodBaseUpdateOne {
	return NewGoodBaseClient(gb.config).UpdateOne(gb)
}

// Unwrap unwraps the GoodBase entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gb *GoodBase) Unwrap() *GoodBase {
	_tx, ok := gb.config.driver.(*txDriver)
	if !ok {
		panic("generated: GoodBase is not a transactional entity")
	}
	gb.config.driver = _tx.drv
	return gb
}

// String implements the fmt.Stringer.
func (gb *GoodBase) String() string {
	var builder strings.Builder
	builder.WriteString("GoodBase(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gb.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", gb.EntID))
	builder.WriteString(", ")
	builder.WriteString("good_type=")
	builder.WriteString(gb.GoodType)
	builder.WriteString(", ")
	builder.WriteString("benefit_type=")
	builder.WriteString(gb.BenefitType)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(gb.Name)
	builder.WriteString(", ")
	builder.WriteString("service_start_at=")
	builder.WriteString(fmt.Sprintf("%v", gb.ServiceStartAt))
	builder.WriteString(", ")
	builder.WriteString("start_mode=")
	builder.WriteString(gb.StartMode)
	builder.WriteString(", ")
	builder.WriteString("test_only=")
	builder.WriteString(fmt.Sprintf("%v", gb.TestOnly))
	builder.WriteString(", ")
	builder.WriteString("benefit_interval_hours=")
	builder.WriteString(fmt.Sprintf("%v", gb.BenefitIntervalHours))
	builder.WriteString(", ")
	builder.WriteString("purchasable=")
	builder.WriteString(fmt.Sprintf("%v", gb.Purchasable))
	builder.WriteString(", ")
	builder.WriteString("online=")
	builder.WriteString(fmt.Sprintf("%v", gb.Online))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(gb.State)
	builder.WriteByte(')')
	return builder.String()
}

// GoodBases is a parsable slice of GoodBase.
type GoodBases []*GoodBase

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/requiredappgood"
	"github.com/google/uuid"
)

// RequiredAppGood is the model entity for the RequiredAppGood schema.
type RequiredAppGood struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// MainAppGoodID holds the value of the "main_app_good_id" field.
	MainAppGoodID uuid.UUID `json:"main_app_good_id,omitempty"`
	// RequiredAppGoodID holds the value of the "required_app_good_id" field.
	RequiredAppGoodID uuid.UUID `json:"required_app_good_id,omitempty"`
	// Must holds the value of the "must" field.
	Must         bool `json:"must,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RequiredAppGood) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case requiredappgood.FieldMust:
			values[i] = new(sql.NullBool)
		case requiredappgood.FieldID:
			values[i] = new(sql.NullInt64)
		case requiredappgood.FieldEntID, requiredappgood.FieldMainAppGoodID, requiredappgood.FieldRequiredAppGoodID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RequiredAppGood fields.
func (rag *RequiredAppGood) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case requiredappgood.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rag.ID = uint32(value.Int64)
		case requiredappgood.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				rag.EntID = *value
			}
		case requiredappgood.FieldMainAppGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field main_app_good_id", values[i])
			} else if value != nil {
				rag.MainAppGoodID = *value
			}
		case requiredappgood.FieldRequiredAppGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field required_app_good_id", values[i])
			} else if value != nil {
				rag.RequiredAppGoodID = *value
			}
		case requiredappgood.FieldMust:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field must", values[i])
			} else if value.Valid {
				rag.Must = value.Bool
			}
		default:
			rag.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RequiredAppGood.
// This includes values selected through modifiers, order, etc.
func (rag *RequiredAppGood) Value(name string) (ent.Value, error) {
	return rag.selectValues.Get(name)
}

// Update returns a builder for updating this RequiredAppGood.
// Note that you need to call RequiredAppGood.Unwrap() before calling this method if this RequiredAppGood
// was returned from a transaction, and the transaction was committed or rolled back.
func (rag *RequiredAppGood) Update() *RequiredAppGoodUpdateOne {
	return NewRequiredAppGoodClient(rag.config).UpdateOne(rag)
}

// Unwrap unwraps the RequiredAppGood entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rag *RequiredAppGood) Unwrap() *RequiredAppGood {
	_tx, ok := rag.config.driver.(*txDriver)
	if !ok {
		panic("generated: RequiredAppGood is not a transactional entity")
	}
	rag.config.driver = _tx.drv
	return rag
}

// String implements the fmt.Stringer.
func (rag *RequiredAppGood) String() string {
	var builder strings.Builder
	builder.WriteString("RequiredAppGood(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rag.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", rag.EntID))
	builder.WriteString(", ")
	builder.WriteString("main_app_good_id=")
	builder.WriteString(fmt.Sprintf("%v", rag.MainAppGoodID))
	builder.WriteString(", ")
	builder.WriteString("required_app_good_id=")
	builder.WriteString(fmt.Sprintf("%v", rag.RequiredAppGoodID))
	builder.WriteString(", ")
	builder.WriteString("must=")
	builder.WriteString(fmt.Sprintf("%v", rag.Must))
	builder.WriteByte(')')
	return builder.String()
}

// RequiredAppGoods is a parsable slice of RequiredAppGood.
type RequiredAppGoods []*RequiredAppGood

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/requiredappgood"
)

// RequiredAppGoodDelete is the builder for deleting a RequiredAppGood entity.
type RequiredAppGoodDelete struct {
	config
	hooks    []Hook
	mutation *RequiredAppGoodMutation
}

// Where appends a list predicates to the RequiredAppGoodDelete builder.
func (ragd *RequiredAppGoodDelete) Where(ps ...predicate.RequiredAppGood) *RequiredAppGoodDelete {
	ragd.mutation.Where(ps...)
	return ragd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ragd *RequiredAppGoodDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ragd.sqlExec, ragd.mutation, ragd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ragd *RequiredAppGoodDelete) ExecX(ctx context.Context) int {
	n, err := ragd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ragd *RequiredAppGoodDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(requiredappgood.Table, sqlgraph.NewFieldSpec(requiredappgood.FieldID, field.TypeUint32))
	if ps := ragd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ragd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ragd.mutation.done = true
	return affected, err
}

// RequiredAppGoodDeleteOne is the builder for deleting a single RequiredAppGood entity.
type RequiredAppGoodDeleteOne struct {
	ragd *RequiredAppGoodDelete
}

// Where appends a list predicates to the RequiredAppGoodDelete builder.
func (ragdo *RequiredAppGoodDeleteOne) Where(ps ...predicate.RequiredAppGood) *RequiredAppGoodDeleteOne {
	ragdo.ragd.mutation.Where(ps...)
	return ragdo
}

// Exec executes the deletion query.
func (ragdo *RequiredAppGoodDeleteOne) Exec(ctx context.Context) error {
	n, err := ragdo.ragd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{requiredappgood.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ragdo *RequiredAppGoodDeleteOne) ExecX(ctx context.Context) {
	if err := ragdo.Exec(ctx); err != nil {
		panic(err)
	}
}

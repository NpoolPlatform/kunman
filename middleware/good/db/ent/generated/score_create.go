// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/score"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ScoreCreate is the builder for creating a Score entity.
type ScoreCreate struct {
	config
	mutation *ScoreMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (sc *ScoreCreate) SetEntID(u uuid.UUID) *ScoreCreate {
	sc.mutation.SetEntID(u)
	return sc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (sc *ScoreCreate) SetNillableEntID(u *uuid.UUID) *ScoreCreate {
	if u != nil {
		sc.SetEntID(*u)
	}
	return sc
}

// SetUserID sets the "user_id" field.
func (sc *ScoreCreate) SetUserID(u uuid.UUID) *ScoreCreate {
	sc.mutation.SetUserID(u)
	return sc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sc *ScoreCreate) SetNillableUserID(u *uuid.UUID) *ScoreCreate {
	if u != nil {
		sc.SetUserID(*u)
	}
	return sc
}

// SetAppGoodID sets the "app_good_id" field.
func (sc *ScoreCreate) SetAppGoodID(u uuid.UUID) *ScoreCreate {
	sc.mutation.SetAppGoodID(u)
	return sc
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (sc *ScoreCreate) SetNillableAppGoodID(u *uuid.UUID) *ScoreCreate {
	if u != nil {
		sc.SetAppGoodID(*u)
	}
	return sc
}

// SetScore sets the "score" field.
func (sc *ScoreCreate) SetScore(d decimal.Decimal) *ScoreCreate {
	sc.mutation.SetScore(d)
	return sc
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (sc *ScoreCreate) SetNillableScore(d *decimal.Decimal) *ScoreCreate {
	if d != nil {
		sc.SetScore(*d)
	}
	return sc
}

// SetCommentID sets the "comment_id" field.
func (sc *ScoreCreate) SetCommentID(u uuid.UUID) *ScoreCreate {
	sc.mutation.SetCommentID(u)
	return sc
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (sc *ScoreCreate) SetNillableCommentID(u *uuid.UUID) *ScoreCreate {
	if u != nil {
		sc.SetCommentID(*u)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *ScoreCreate) SetID(u uint32) *ScoreCreate {
	sc.mutation.SetID(u)
	return sc
}

// Mutation returns the ScoreMutation object of the builder.
func (sc *ScoreCreate) Mutation() *ScoreMutation {
	return sc.mutation
}

// Save creates the Score in the database.
func (sc *ScoreCreate) Save(ctx context.Context) (*Score, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ScoreCreate) SaveX(ctx context.Context) *Score {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ScoreCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ScoreCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ScoreCreate) defaults() {
	if _, ok := sc.mutation.EntID(); !ok {
		v := score.DefaultEntID()
		sc.mutation.SetEntID(v)
	}
	if _, ok := sc.mutation.UserID(); !ok {
		v := score.DefaultUserID()
		sc.mutation.SetUserID(v)
	}
	if _, ok := sc.mutation.AppGoodID(); !ok {
		v := score.DefaultAppGoodID()
		sc.mutation.SetAppGoodID(v)
	}
	if _, ok := sc.mutation.Score(); !ok {
		v := score.DefaultScore
		sc.mutation.SetScore(v)
	}
	if _, ok := sc.mutation.CommentID(); !ok {
		v := score.DefaultCommentID()
		sc.mutation.SetCommentID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ScoreCreate) check() error {
	if _, ok := sc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "Score.ent_id"`)}
	}
	return nil
}

func (sc *ScoreCreate) sqlSave(ctx context.Context) (*Score, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ScoreCreate) createSpec() (*Score, *sqlgraph.CreateSpec) {
	var (
		_node = &Score{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(score.Table, sqlgraph.NewFieldSpec(score.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.EntID(); ok {
		_spec.SetField(score.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := sc.mutation.UserID(); ok {
		_spec.SetField(score.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := sc.mutation.AppGoodID(); ok {
		_spec.SetField(score.FieldAppGoodID, field.TypeUUID, value)
		_node.AppGoodID = value
	}
	if value, ok := sc.mutation.Score(); ok {
		_spec.SetField(score.FieldScore, field.TypeOther, value)
		_node.Score = value
	}
	if value, ok := sc.mutation.CommentID(); ok {
		_spec.SetField(score.FieldCommentID, field.TypeUUID, value)
		_node.CommentID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Score.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScoreUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (sc *ScoreCreate) OnConflict(opts ...sql.ConflictOption) *ScoreUpsertOne {
	sc.conflict = opts
	return &ScoreUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Score.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *ScoreCreate) OnConflictColumns(columns ...string) *ScoreUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &ScoreUpsertOne{
		create: sc,
	}
}

type (
	// ScoreUpsertOne is the builder for "upsert"-ing
	//  one Score node.
	ScoreUpsertOne struct {
		create *ScoreCreate
	}

	// ScoreUpsert is the "OnConflict" setter.
	ScoreUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *ScoreUpsert) SetEntID(v uuid.UUID) *ScoreUpsert {
	u.Set(score.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *ScoreUpsert) UpdateEntID() *ScoreUpsert {
	u.SetExcluded(score.FieldEntID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *ScoreUpsert) SetUserID(v uuid.UUID) *ScoreUpsert {
	u.Set(score.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ScoreUpsert) UpdateUserID() *ScoreUpsert {
	u.SetExcluded(score.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *ScoreUpsert) ClearUserID() *ScoreUpsert {
	u.SetNull(score.FieldUserID)
	return u
}

// SetAppGoodID sets the "app_good_id" field.
func (u *ScoreUpsert) SetAppGoodID(v uuid.UUID) *ScoreUpsert {
	u.Set(score.FieldAppGoodID, v)
	return u
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *ScoreUpsert) UpdateAppGoodID() *ScoreUpsert {
	u.SetExcluded(score.FieldAppGoodID)
	return u
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *ScoreUpsert) ClearAppGoodID() *ScoreUpsert {
	u.SetNull(score.FieldAppGoodID)
	return u
}

// SetScore sets the "score" field.
func (u *ScoreUpsert) SetScore(v decimal.Decimal) *ScoreUpsert {
	u.Set(score.FieldScore, v)
	return u
}

// UpdateScore sets the "score" field to the value that was provided on create.
func (u *ScoreUpsert) UpdateScore() *ScoreUpsert {
	u.SetExcluded(score.FieldScore)
	return u
}

// ClearScore clears the value of the "score" field.
func (u *ScoreUpsert) ClearScore() *ScoreUpsert {
	u.SetNull(score.FieldScore)
	return u
}

// SetCommentID sets the "comment_id" field.
func (u *ScoreUpsert) SetCommentID(v uuid.UUID) *ScoreUpsert {
	u.Set(score.FieldCommentID, v)
	return u
}

// UpdateCommentID sets the "comment_id" field to the value that was provided on create.
func (u *ScoreUpsert) UpdateCommentID() *ScoreUpsert {
	u.SetExcluded(score.FieldCommentID)
	return u
}

// ClearCommentID clears the value of the "comment_id" field.
func (u *ScoreUpsert) ClearCommentID() *ScoreUpsert {
	u.SetNull(score.FieldCommentID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Score.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(score.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScoreUpsertOne) UpdateNewValues() *ScoreUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(score.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Score.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ScoreUpsertOne) Ignore() *ScoreUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScoreUpsertOne) DoNothing() *ScoreUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScoreCreate.OnConflict
// documentation for more info.
func (u *ScoreUpsertOne) Update(set func(*ScoreUpsert)) *ScoreUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScoreUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *ScoreUpsertOne) SetEntID(v uuid.UUID) *ScoreUpsertOne {
	return u.Update(func(s *ScoreUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *ScoreUpsertOne) UpdateEntID() *ScoreUpsertOne {
	return u.Update(func(s *ScoreUpsert) {
		s.UpdateEntID()
	})
}

// SetUserID sets the "user_id" field.
func (u *ScoreUpsertOne) SetUserID(v uuid.UUID) *ScoreUpsertOne {
	return u.Update(func(s *ScoreUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ScoreUpsertOne) UpdateUserID() *ScoreUpsertOne {
	return u.Update(func(s *ScoreUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *ScoreUpsertOne) ClearUserID() *ScoreUpsertOne {
	return u.Update(func(s *ScoreUpsert) {
		s.ClearUserID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *ScoreUpsertOne) SetAppGoodID(v uuid.UUID) *ScoreUpsertOne {
	return u.Update(func(s *ScoreUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *ScoreUpsertOne) UpdateAppGoodID() *ScoreUpsertOne {
	return u.Update(func(s *ScoreUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *ScoreUpsertOne) ClearAppGoodID() *ScoreUpsertOne {
	return u.Update(func(s *ScoreUpsert) {
		s.ClearAppGoodID()
	})
}

// SetScore sets the "score" field.
func (u *ScoreUpsertOne) SetScore(v decimal.Decimal) *ScoreUpsertOne {
	return u.Update(func(s *ScoreUpsert) {
		s.SetScore(v)
	})
}

// UpdateScore sets the "score" field to the value that was provided on create.
func (u *ScoreUpsertOne) UpdateScore() *ScoreUpsertOne {
	return u.Update(func(s *ScoreUpsert) {
		s.UpdateScore()
	})
}

// ClearScore clears the value of the "score" field.
func (u *ScoreUpsertOne) ClearScore() *ScoreUpsertOne {
	return u.Update(func(s *ScoreUpsert) {
		s.ClearScore()
	})
}

// SetCommentID sets the "comment_id" field.
func (u *ScoreUpsertOne) SetCommentID(v uuid.UUID) *ScoreUpsertOne {
	return u.Update(func(s *ScoreUpsert) {
		s.SetCommentID(v)
	})
}

// UpdateCommentID sets the "comment_id" field to the value that was provided on create.
func (u *ScoreUpsertOne) UpdateCommentID() *ScoreUpsertOne {
	return u.Update(func(s *ScoreUpsert) {
		s.UpdateCommentID()
	})
}

// ClearCommentID clears the value of the "comment_id" field.
func (u *ScoreUpsertOne) ClearCommentID() *ScoreUpsertOne {
	return u.Update(func(s *ScoreUpsert) {
		s.ClearCommentID()
	})
}

// Exec executes the query.
func (u *ScoreUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for ScoreCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScoreUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ScoreUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ScoreUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ScoreCreateBulk is the builder for creating many Score entities in bulk.
type ScoreCreateBulk struct {
	config
	err      error
	builders []*ScoreCreate
	conflict []sql.ConflictOption
}

// Save creates the Score entities in the database.
func (scb *ScoreCreateBulk) Save(ctx context.Context) ([]*Score, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Score, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScoreMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ScoreCreateBulk) SaveX(ctx context.Context) []*Score {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ScoreCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ScoreCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Score.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScoreUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (scb *ScoreCreateBulk) OnConflict(opts ...sql.ConflictOption) *ScoreUpsertBulk {
	scb.conflict = opts
	return &ScoreUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Score.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *ScoreCreateBulk) OnConflictColumns(columns ...string) *ScoreUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &ScoreUpsertBulk{
		create: scb,
	}
}

// ScoreUpsertBulk is the builder for "upsert"-ing
// a bulk of Score nodes.
type ScoreUpsertBulk struct {
	create *ScoreCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Score.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(score.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScoreUpsertBulk) UpdateNewValues() *ScoreUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(score.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Score.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ScoreUpsertBulk) Ignore() *ScoreUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScoreUpsertBulk) DoNothing() *ScoreUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScoreCreateBulk.OnConflict
// documentation for more info.
func (u *ScoreUpsertBulk) Update(set func(*ScoreUpsert)) *ScoreUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScoreUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *ScoreUpsertBulk) SetEntID(v uuid.UUID) *ScoreUpsertBulk {
	return u.Update(func(s *ScoreUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *ScoreUpsertBulk) UpdateEntID() *ScoreUpsertBulk {
	return u.Update(func(s *ScoreUpsert) {
		s.UpdateEntID()
	})
}

// SetUserID sets the "user_id" field.
func (u *ScoreUpsertBulk) SetUserID(v uuid.UUID) *ScoreUpsertBulk {
	return u.Update(func(s *ScoreUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ScoreUpsertBulk) UpdateUserID() *ScoreUpsertBulk {
	return u.Update(func(s *ScoreUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *ScoreUpsertBulk) ClearUserID() *ScoreUpsertBulk {
	return u.Update(func(s *ScoreUpsert) {
		s.ClearUserID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *ScoreUpsertBulk) SetAppGoodID(v uuid.UUID) *ScoreUpsertBulk {
	return u.Update(func(s *ScoreUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *ScoreUpsertBulk) UpdateAppGoodID() *ScoreUpsertBulk {
	return u.Update(func(s *ScoreUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *ScoreUpsertBulk) ClearAppGoodID() *ScoreUpsertBulk {
	return u.Update(func(s *ScoreUpsert) {
		s.ClearAppGoodID()
	})
}

// SetScore sets the "score" field.
func (u *ScoreUpsertBulk) SetScore(v decimal.Decimal) *ScoreUpsertBulk {
	return u.Update(func(s *ScoreUpsert) {
		s.SetScore(v)
	})
}

// UpdateScore sets the "score" field to the value that was provided on create.
func (u *ScoreUpsertBulk) UpdateScore() *ScoreUpsertBulk {
	return u.Update(func(s *ScoreUpsert) {
		s.UpdateScore()
	})
}

// ClearScore clears the value of the "score" field.
func (u *ScoreUpsertBulk) ClearScore() *ScoreUpsertBulk {
	return u.Update(func(s *ScoreUpsert) {
		s.ClearScore()
	})
}

// SetCommentID sets the "comment_id" field.
func (u *ScoreUpsertBulk) SetCommentID(v uuid.UUID) *ScoreUpsertBulk {
	return u.Update(func(s *ScoreUpsert) {
		s.SetCommentID(v)
	})
}

// UpdateCommentID sets the "comment_id" field to the value that was provided on create.
func (u *ScoreUpsertBulk) UpdateCommentID() *ScoreUpsertBulk {
	return u.Update(func(s *ScoreUpsert) {
		s.UpdateCommentID()
	})
}

// ClearCommentID clears the value of the "comment_id" field.
func (u *ScoreUpsertBulk) ClearCommentID() *ScoreUpsertBulk {
	return u.Update(func(s *ScoreUpsert) {
		s.ClearCommentID()
	})
}

// Exec executes the query.
func (u *ScoreUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the ScoreCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for ScoreCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScoreUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

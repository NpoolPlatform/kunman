// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appstocklock"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppStockLockCreate is the builder for creating a AppStockLock entity.
type AppStockLockCreate struct {
	config
	mutation *AppStockLockMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (aslc *AppStockLockCreate) SetEntID(u uuid.UUID) *AppStockLockCreate {
	aslc.mutation.SetEntID(u)
	return aslc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (aslc *AppStockLockCreate) SetNillableEntID(u *uuid.UUID) *AppStockLockCreate {
	if u != nil {
		aslc.SetEntID(*u)
	}
	return aslc
}

// SetCreatedAt sets the "created_at" field.
func (aslc *AppStockLockCreate) SetCreatedAt(u uint32) *AppStockLockCreate {
	aslc.mutation.SetCreatedAt(u)
	return aslc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aslc *AppStockLockCreate) SetNillableCreatedAt(u *uint32) *AppStockLockCreate {
	if u != nil {
		aslc.SetCreatedAt(*u)
	}
	return aslc
}

// SetUpdatedAt sets the "updated_at" field.
func (aslc *AppStockLockCreate) SetUpdatedAt(u uint32) *AppStockLockCreate {
	aslc.mutation.SetUpdatedAt(u)
	return aslc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aslc *AppStockLockCreate) SetNillableUpdatedAt(u *uint32) *AppStockLockCreate {
	if u != nil {
		aslc.SetUpdatedAt(*u)
	}
	return aslc
}

// SetDeletedAt sets the "deleted_at" field.
func (aslc *AppStockLockCreate) SetDeletedAt(u uint32) *AppStockLockCreate {
	aslc.mutation.SetDeletedAt(u)
	return aslc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aslc *AppStockLockCreate) SetNillableDeletedAt(u *uint32) *AppStockLockCreate {
	if u != nil {
		aslc.SetDeletedAt(*u)
	}
	return aslc
}

// SetAppStockID sets the "app_stock_id" field.
func (aslc *AppStockLockCreate) SetAppStockID(u uuid.UUID) *AppStockLockCreate {
	aslc.mutation.SetAppStockID(u)
	return aslc
}

// SetNillableAppStockID sets the "app_stock_id" field if the given value is not nil.
func (aslc *AppStockLockCreate) SetNillableAppStockID(u *uuid.UUID) *AppStockLockCreate {
	if u != nil {
		aslc.SetAppStockID(*u)
	}
	return aslc
}

// SetAppGoodID sets the "app_good_id" field.
func (aslc *AppStockLockCreate) SetAppGoodID(u uuid.UUID) *AppStockLockCreate {
	aslc.mutation.SetAppGoodID(u)
	return aslc
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (aslc *AppStockLockCreate) SetNillableAppGoodID(u *uuid.UUID) *AppStockLockCreate {
	if u != nil {
		aslc.SetAppGoodID(*u)
	}
	return aslc
}

// SetUnits sets the "units" field.
func (aslc *AppStockLockCreate) SetUnits(d decimal.Decimal) *AppStockLockCreate {
	aslc.mutation.SetUnits(d)
	return aslc
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (aslc *AppStockLockCreate) SetNillableUnits(d *decimal.Decimal) *AppStockLockCreate {
	if d != nil {
		aslc.SetUnits(*d)
	}
	return aslc
}

// SetAppSpotUnits sets the "app_spot_units" field.
func (aslc *AppStockLockCreate) SetAppSpotUnits(d decimal.Decimal) *AppStockLockCreate {
	aslc.mutation.SetAppSpotUnits(d)
	return aslc
}

// SetNillableAppSpotUnits sets the "app_spot_units" field if the given value is not nil.
func (aslc *AppStockLockCreate) SetNillableAppSpotUnits(d *decimal.Decimal) *AppStockLockCreate {
	if d != nil {
		aslc.SetAppSpotUnits(*d)
	}
	return aslc
}

// SetLockState sets the "lock_state" field.
func (aslc *AppStockLockCreate) SetLockState(s string) *AppStockLockCreate {
	aslc.mutation.SetLockState(s)
	return aslc
}

// SetNillableLockState sets the "lock_state" field if the given value is not nil.
func (aslc *AppStockLockCreate) SetNillableLockState(s *string) *AppStockLockCreate {
	if s != nil {
		aslc.SetLockState(*s)
	}
	return aslc
}

// SetChargeBackState sets the "charge_back_state" field.
func (aslc *AppStockLockCreate) SetChargeBackState(s string) *AppStockLockCreate {
	aslc.mutation.SetChargeBackState(s)
	return aslc
}

// SetNillableChargeBackState sets the "charge_back_state" field if the given value is not nil.
func (aslc *AppStockLockCreate) SetNillableChargeBackState(s *string) *AppStockLockCreate {
	if s != nil {
		aslc.SetChargeBackState(*s)
	}
	return aslc
}

// SetExLockID sets the "ex_lock_id" field.
func (aslc *AppStockLockCreate) SetExLockID(u uuid.UUID) *AppStockLockCreate {
	aslc.mutation.SetExLockID(u)
	return aslc
}

// SetNillableExLockID sets the "ex_lock_id" field if the given value is not nil.
func (aslc *AppStockLockCreate) SetNillableExLockID(u *uuid.UUID) *AppStockLockCreate {
	if u != nil {
		aslc.SetExLockID(*u)
	}
	return aslc
}

// SetID sets the "id" field.
func (aslc *AppStockLockCreate) SetID(u uint32) *AppStockLockCreate {
	aslc.mutation.SetID(u)
	return aslc
}

// Mutation returns the AppStockLockMutation object of the builder.
func (aslc *AppStockLockCreate) Mutation() *AppStockLockMutation {
	return aslc.mutation
}

// Save creates the AppStockLock in the database.
func (aslc *AppStockLockCreate) Save(ctx context.Context) (*AppStockLock, error) {
	aslc.defaults()
	return withHooks(ctx, aslc.sqlSave, aslc.mutation, aslc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aslc *AppStockLockCreate) SaveX(ctx context.Context) *AppStockLock {
	v, err := aslc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aslc *AppStockLockCreate) Exec(ctx context.Context) error {
	_, err := aslc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aslc *AppStockLockCreate) ExecX(ctx context.Context) {
	if err := aslc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aslc *AppStockLockCreate) defaults() {
	if _, ok := aslc.mutation.EntID(); !ok {
		v := appstocklock.DefaultEntID()
		aslc.mutation.SetEntID(v)
	}
	if _, ok := aslc.mutation.CreatedAt(); !ok {
		v := appstocklock.DefaultCreatedAt()
		aslc.mutation.SetCreatedAt(v)
	}
	if _, ok := aslc.mutation.UpdatedAt(); !ok {
		v := appstocklock.DefaultUpdatedAt()
		aslc.mutation.SetUpdatedAt(v)
	}
	if _, ok := aslc.mutation.DeletedAt(); !ok {
		v := appstocklock.DefaultDeletedAt()
		aslc.mutation.SetDeletedAt(v)
	}
	if _, ok := aslc.mutation.AppStockID(); !ok {
		v := appstocklock.DefaultAppStockID()
		aslc.mutation.SetAppStockID(v)
	}
	if _, ok := aslc.mutation.AppGoodID(); !ok {
		v := appstocklock.DefaultAppGoodID()
		aslc.mutation.SetAppGoodID(v)
	}
	if _, ok := aslc.mutation.Units(); !ok {
		v := appstocklock.DefaultUnits
		aslc.mutation.SetUnits(v)
	}
	if _, ok := aslc.mutation.AppSpotUnits(); !ok {
		v := appstocklock.DefaultAppSpotUnits
		aslc.mutation.SetAppSpotUnits(v)
	}
	if _, ok := aslc.mutation.LockState(); !ok {
		v := appstocklock.DefaultLockState
		aslc.mutation.SetLockState(v)
	}
	if _, ok := aslc.mutation.ChargeBackState(); !ok {
		v := appstocklock.DefaultChargeBackState
		aslc.mutation.SetChargeBackState(v)
	}
	if _, ok := aslc.mutation.ExLockID(); !ok {
		v := appstocklock.DefaultExLockID()
		aslc.mutation.SetExLockID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aslc *AppStockLockCreate) check() error {
	if _, ok := aslc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "AppStockLock.ent_id"`)}
	}
	if _, ok := aslc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "AppStockLock.created_at"`)}
	}
	if _, ok := aslc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "AppStockLock.updated_at"`)}
	}
	if _, ok := aslc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "AppStockLock.deleted_at"`)}
	}
	return nil
}

func (aslc *AppStockLockCreate) sqlSave(ctx context.Context) (*AppStockLock, error) {
	if err := aslc.check(); err != nil {
		return nil, err
	}
	_node, _spec := aslc.createSpec()
	if err := sqlgraph.CreateNode(ctx, aslc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	aslc.mutation.id = &_node.ID
	aslc.mutation.done = true
	return _node, nil
}

func (aslc *AppStockLockCreate) createSpec() (*AppStockLock, *sqlgraph.CreateSpec) {
	var (
		_node = &AppStockLock{config: aslc.config}
		_spec = sqlgraph.NewCreateSpec(appstocklock.Table, sqlgraph.NewFieldSpec(appstocklock.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = aslc.conflict
	if id, ok := aslc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := aslc.mutation.EntID(); ok {
		_spec.SetField(appstocklock.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := aslc.mutation.CreatedAt(); ok {
		_spec.SetField(appstocklock.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := aslc.mutation.UpdatedAt(); ok {
		_spec.SetField(appstocklock.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := aslc.mutation.DeletedAt(); ok {
		_spec.SetField(appstocklock.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := aslc.mutation.AppStockID(); ok {
		_spec.SetField(appstocklock.FieldAppStockID, field.TypeUUID, value)
		_node.AppStockID = value
	}
	if value, ok := aslc.mutation.AppGoodID(); ok {
		_spec.SetField(appstocklock.FieldAppGoodID, field.TypeUUID, value)
		_node.AppGoodID = value
	}
	if value, ok := aslc.mutation.Units(); ok {
		_spec.SetField(appstocklock.FieldUnits, field.TypeOther, value)
		_node.Units = value
	}
	if value, ok := aslc.mutation.AppSpotUnits(); ok {
		_spec.SetField(appstocklock.FieldAppSpotUnits, field.TypeOther, value)
		_node.AppSpotUnits = value
	}
	if value, ok := aslc.mutation.LockState(); ok {
		_spec.SetField(appstocklock.FieldLockState, field.TypeString, value)
		_node.LockState = value
	}
	if value, ok := aslc.mutation.ChargeBackState(); ok {
		_spec.SetField(appstocklock.FieldChargeBackState, field.TypeString, value)
		_node.ChargeBackState = value
	}
	if value, ok := aslc.mutation.ExLockID(); ok {
		_spec.SetField(appstocklock.FieldExLockID, field.TypeUUID, value)
		_node.ExLockID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppStockLock.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppStockLockUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (aslc *AppStockLockCreate) OnConflict(opts ...sql.ConflictOption) *AppStockLockUpsertOne {
	aslc.conflict = opts
	return &AppStockLockUpsertOne{
		create: aslc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppStockLock.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aslc *AppStockLockCreate) OnConflictColumns(columns ...string) *AppStockLockUpsertOne {
	aslc.conflict = append(aslc.conflict, sql.ConflictColumns(columns...))
	return &AppStockLockUpsertOne{
		create: aslc,
	}
}

type (
	// AppStockLockUpsertOne is the builder for "upsert"-ing
	//  one AppStockLock node.
	AppStockLockUpsertOne struct {
		create *AppStockLockCreate
	}

	// AppStockLockUpsert is the "OnConflict" setter.
	AppStockLockUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *AppStockLockUpsert) SetEntID(v uuid.UUID) *AppStockLockUpsert {
	u.Set(appstocklock.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppStockLockUpsert) UpdateEntID() *AppStockLockUpsert {
	u.SetExcluded(appstocklock.FieldEntID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppStockLockUpsert) SetCreatedAt(v uint32) *AppStockLockUpsert {
	u.Set(appstocklock.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppStockLockUpsert) UpdateCreatedAt() *AppStockLockUpsert {
	u.SetExcluded(appstocklock.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppStockLockUpsert) AddCreatedAt(v uint32) *AppStockLockUpsert {
	u.Add(appstocklock.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppStockLockUpsert) SetUpdatedAt(v uint32) *AppStockLockUpsert {
	u.Set(appstocklock.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppStockLockUpsert) UpdateUpdatedAt() *AppStockLockUpsert {
	u.SetExcluded(appstocklock.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppStockLockUpsert) AddUpdatedAt(v uint32) *AppStockLockUpsert {
	u.Add(appstocklock.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppStockLockUpsert) SetDeletedAt(v uint32) *AppStockLockUpsert {
	u.Set(appstocklock.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppStockLockUpsert) UpdateDeletedAt() *AppStockLockUpsert {
	u.SetExcluded(appstocklock.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppStockLockUpsert) AddDeletedAt(v uint32) *AppStockLockUpsert {
	u.Add(appstocklock.FieldDeletedAt, v)
	return u
}

// SetAppStockID sets the "app_stock_id" field.
func (u *AppStockLockUpsert) SetAppStockID(v uuid.UUID) *AppStockLockUpsert {
	u.Set(appstocklock.FieldAppStockID, v)
	return u
}

// UpdateAppStockID sets the "app_stock_id" field to the value that was provided on create.
func (u *AppStockLockUpsert) UpdateAppStockID() *AppStockLockUpsert {
	u.SetExcluded(appstocklock.FieldAppStockID)
	return u
}

// ClearAppStockID clears the value of the "app_stock_id" field.
func (u *AppStockLockUpsert) ClearAppStockID() *AppStockLockUpsert {
	u.SetNull(appstocklock.FieldAppStockID)
	return u
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppStockLockUpsert) SetAppGoodID(v uuid.UUID) *AppStockLockUpsert {
	u.Set(appstocklock.FieldAppGoodID, v)
	return u
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppStockLockUpsert) UpdateAppGoodID() *AppStockLockUpsert {
	u.SetExcluded(appstocklock.FieldAppGoodID)
	return u
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppStockLockUpsert) ClearAppGoodID() *AppStockLockUpsert {
	u.SetNull(appstocklock.FieldAppGoodID)
	return u
}

// SetUnits sets the "units" field.
func (u *AppStockLockUpsert) SetUnits(v decimal.Decimal) *AppStockLockUpsert {
	u.Set(appstocklock.FieldUnits, v)
	return u
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *AppStockLockUpsert) UpdateUnits() *AppStockLockUpsert {
	u.SetExcluded(appstocklock.FieldUnits)
	return u
}

// ClearUnits clears the value of the "units" field.
func (u *AppStockLockUpsert) ClearUnits() *AppStockLockUpsert {
	u.SetNull(appstocklock.FieldUnits)
	return u
}

// SetAppSpotUnits sets the "app_spot_units" field.
func (u *AppStockLockUpsert) SetAppSpotUnits(v decimal.Decimal) *AppStockLockUpsert {
	u.Set(appstocklock.FieldAppSpotUnits, v)
	return u
}

// UpdateAppSpotUnits sets the "app_spot_units" field to the value that was provided on create.
func (u *AppStockLockUpsert) UpdateAppSpotUnits() *AppStockLockUpsert {
	u.SetExcluded(appstocklock.FieldAppSpotUnits)
	return u
}

// ClearAppSpotUnits clears the value of the "app_spot_units" field.
func (u *AppStockLockUpsert) ClearAppSpotUnits() *AppStockLockUpsert {
	u.SetNull(appstocklock.FieldAppSpotUnits)
	return u
}

// SetLockState sets the "lock_state" field.
func (u *AppStockLockUpsert) SetLockState(v string) *AppStockLockUpsert {
	u.Set(appstocklock.FieldLockState, v)
	return u
}

// UpdateLockState sets the "lock_state" field to the value that was provided on create.
func (u *AppStockLockUpsert) UpdateLockState() *AppStockLockUpsert {
	u.SetExcluded(appstocklock.FieldLockState)
	return u
}

// ClearLockState clears the value of the "lock_state" field.
func (u *AppStockLockUpsert) ClearLockState() *AppStockLockUpsert {
	u.SetNull(appstocklock.FieldLockState)
	return u
}

// SetChargeBackState sets the "charge_back_state" field.
func (u *AppStockLockUpsert) SetChargeBackState(v string) *AppStockLockUpsert {
	u.Set(appstocklock.FieldChargeBackState, v)
	return u
}

// UpdateChargeBackState sets the "charge_back_state" field to the value that was provided on create.
func (u *AppStockLockUpsert) UpdateChargeBackState() *AppStockLockUpsert {
	u.SetExcluded(appstocklock.FieldChargeBackState)
	return u
}

// ClearChargeBackState clears the value of the "charge_back_state" field.
func (u *AppStockLockUpsert) ClearChargeBackState() *AppStockLockUpsert {
	u.SetNull(appstocklock.FieldChargeBackState)
	return u
}

// SetExLockID sets the "ex_lock_id" field.
func (u *AppStockLockUpsert) SetExLockID(v uuid.UUID) *AppStockLockUpsert {
	u.Set(appstocklock.FieldExLockID, v)
	return u
}

// UpdateExLockID sets the "ex_lock_id" field to the value that was provided on create.
func (u *AppStockLockUpsert) UpdateExLockID() *AppStockLockUpsert {
	u.SetExcluded(appstocklock.FieldExLockID)
	return u
}

// ClearExLockID clears the value of the "ex_lock_id" field.
func (u *AppStockLockUpsert) ClearExLockID() *AppStockLockUpsert {
	u.SetNull(appstocklock.FieldExLockID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppStockLock.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appstocklock.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppStockLockUpsertOne) UpdateNewValues() *AppStockLockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appstocklock.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppStockLock.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppStockLockUpsertOne) Ignore() *AppStockLockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppStockLockUpsertOne) DoNothing() *AppStockLockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppStockLockCreate.OnConflict
// documentation for more info.
func (u *AppStockLockUpsertOne) Update(set func(*AppStockLockUpsert)) *AppStockLockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppStockLockUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppStockLockUpsertOne) SetEntID(v uuid.UUID) *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppStockLockUpsertOne) UpdateEntID() *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AppStockLockUpsertOne) SetCreatedAt(v uint32) *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppStockLockUpsertOne) AddCreatedAt(v uint32) *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppStockLockUpsertOne) UpdateCreatedAt() *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppStockLockUpsertOne) SetUpdatedAt(v uint32) *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppStockLockUpsertOne) AddUpdatedAt(v uint32) *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppStockLockUpsertOne) UpdateUpdatedAt() *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppStockLockUpsertOne) SetDeletedAt(v uint32) *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppStockLockUpsertOne) AddDeletedAt(v uint32) *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppStockLockUpsertOne) UpdateDeletedAt() *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppStockID sets the "app_stock_id" field.
func (u *AppStockLockUpsertOne) SetAppStockID(v uuid.UUID) *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.SetAppStockID(v)
	})
}

// UpdateAppStockID sets the "app_stock_id" field to the value that was provided on create.
func (u *AppStockLockUpsertOne) UpdateAppStockID() *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.UpdateAppStockID()
	})
}

// ClearAppStockID clears the value of the "app_stock_id" field.
func (u *AppStockLockUpsertOne) ClearAppStockID() *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.ClearAppStockID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppStockLockUpsertOne) SetAppGoodID(v uuid.UUID) *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppStockLockUpsertOne) UpdateAppGoodID() *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppStockLockUpsertOne) ClearAppGoodID() *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.ClearAppGoodID()
	})
}

// SetUnits sets the "units" field.
func (u *AppStockLockUpsertOne) SetUnits(v decimal.Decimal) *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.SetUnits(v)
	})
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *AppStockLockUpsertOne) UpdateUnits() *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.UpdateUnits()
	})
}

// ClearUnits clears the value of the "units" field.
func (u *AppStockLockUpsertOne) ClearUnits() *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.ClearUnits()
	})
}

// SetAppSpotUnits sets the "app_spot_units" field.
func (u *AppStockLockUpsertOne) SetAppSpotUnits(v decimal.Decimal) *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.SetAppSpotUnits(v)
	})
}

// UpdateAppSpotUnits sets the "app_spot_units" field to the value that was provided on create.
func (u *AppStockLockUpsertOne) UpdateAppSpotUnits() *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.UpdateAppSpotUnits()
	})
}

// ClearAppSpotUnits clears the value of the "app_spot_units" field.
func (u *AppStockLockUpsertOne) ClearAppSpotUnits() *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.ClearAppSpotUnits()
	})
}

// SetLockState sets the "lock_state" field.
func (u *AppStockLockUpsertOne) SetLockState(v string) *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.SetLockState(v)
	})
}

// UpdateLockState sets the "lock_state" field to the value that was provided on create.
func (u *AppStockLockUpsertOne) UpdateLockState() *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.UpdateLockState()
	})
}

// ClearLockState clears the value of the "lock_state" field.
func (u *AppStockLockUpsertOne) ClearLockState() *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.ClearLockState()
	})
}

// SetChargeBackState sets the "charge_back_state" field.
func (u *AppStockLockUpsertOne) SetChargeBackState(v string) *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.SetChargeBackState(v)
	})
}

// UpdateChargeBackState sets the "charge_back_state" field to the value that was provided on create.
func (u *AppStockLockUpsertOne) UpdateChargeBackState() *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.UpdateChargeBackState()
	})
}

// ClearChargeBackState clears the value of the "charge_back_state" field.
func (u *AppStockLockUpsertOne) ClearChargeBackState() *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.ClearChargeBackState()
	})
}

// SetExLockID sets the "ex_lock_id" field.
func (u *AppStockLockUpsertOne) SetExLockID(v uuid.UUID) *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.SetExLockID(v)
	})
}

// UpdateExLockID sets the "ex_lock_id" field to the value that was provided on create.
func (u *AppStockLockUpsertOne) UpdateExLockID() *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.UpdateExLockID()
	})
}

// ClearExLockID clears the value of the "ex_lock_id" field.
func (u *AppStockLockUpsertOne) ClearExLockID() *AppStockLockUpsertOne {
	return u.Update(func(s *AppStockLockUpsert) {
		s.ClearExLockID()
	})
}

// Exec executes the query.
func (u *AppStockLockUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppStockLockCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppStockLockUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppStockLockUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppStockLockUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppStockLockCreateBulk is the builder for creating many AppStockLock entities in bulk.
type AppStockLockCreateBulk struct {
	config
	err      error
	builders []*AppStockLockCreate
	conflict []sql.ConflictOption
}

// Save creates the AppStockLock entities in the database.
func (aslcb *AppStockLockCreateBulk) Save(ctx context.Context) ([]*AppStockLock, error) {
	if aslcb.err != nil {
		return nil, aslcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aslcb.builders))
	nodes := make([]*AppStockLock, len(aslcb.builders))
	mutators := make([]Mutator, len(aslcb.builders))
	for i := range aslcb.builders {
		func(i int, root context.Context) {
			builder := aslcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppStockLockMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aslcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aslcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aslcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aslcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aslcb *AppStockLockCreateBulk) SaveX(ctx context.Context) []*AppStockLock {
	v, err := aslcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aslcb *AppStockLockCreateBulk) Exec(ctx context.Context) error {
	_, err := aslcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aslcb *AppStockLockCreateBulk) ExecX(ctx context.Context) {
	if err := aslcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppStockLock.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppStockLockUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (aslcb *AppStockLockCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppStockLockUpsertBulk {
	aslcb.conflict = opts
	return &AppStockLockUpsertBulk{
		create: aslcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppStockLock.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aslcb *AppStockLockCreateBulk) OnConflictColumns(columns ...string) *AppStockLockUpsertBulk {
	aslcb.conflict = append(aslcb.conflict, sql.ConflictColumns(columns...))
	return &AppStockLockUpsertBulk{
		create: aslcb,
	}
}

// AppStockLockUpsertBulk is the builder for "upsert"-ing
// a bulk of AppStockLock nodes.
type AppStockLockUpsertBulk struct {
	create *AppStockLockCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppStockLock.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appstocklock.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppStockLockUpsertBulk) UpdateNewValues() *AppStockLockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appstocklock.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppStockLock.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppStockLockUpsertBulk) Ignore() *AppStockLockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppStockLockUpsertBulk) DoNothing() *AppStockLockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppStockLockCreateBulk.OnConflict
// documentation for more info.
func (u *AppStockLockUpsertBulk) Update(set func(*AppStockLockUpsert)) *AppStockLockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppStockLockUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppStockLockUpsertBulk) SetEntID(v uuid.UUID) *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppStockLockUpsertBulk) UpdateEntID() *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AppStockLockUpsertBulk) SetCreatedAt(v uint32) *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppStockLockUpsertBulk) AddCreatedAt(v uint32) *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppStockLockUpsertBulk) UpdateCreatedAt() *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppStockLockUpsertBulk) SetUpdatedAt(v uint32) *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppStockLockUpsertBulk) AddUpdatedAt(v uint32) *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppStockLockUpsertBulk) UpdateUpdatedAt() *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppStockLockUpsertBulk) SetDeletedAt(v uint32) *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppStockLockUpsertBulk) AddDeletedAt(v uint32) *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppStockLockUpsertBulk) UpdateDeletedAt() *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppStockID sets the "app_stock_id" field.
func (u *AppStockLockUpsertBulk) SetAppStockID(v uuid.UUID) *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.SetAppStockID(v)
	})
}

// UpdateAppStockID sets the "app_stock_id" field to the value that was provided on create.
func (u *AppStockLockUpsertBulk) UpdateAppStockID() *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.UpdateAppStockID()
	})
}

// ClearAppStockID clears the value of the "app_stock_id" field.
func (u *AppStockLockUpsertBulk) ClearAppStockID() *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.ClearAppStockID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppStockLockUpsertBulk) SetAppGoodID(v uuid.UUID) *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppStockLockUpsertBulk) UpdateAppGoodID() *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppStockLockUpsertBulk) ClearAppGoodID() *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.ClearAppGoodID()
	})
}

// SetUnits sets the "units" field.
func (u *AppStockLockUpsertBulk) SetUnits(v decimal.Decimal) *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.SetUnits(v)
	})
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *AppStockLockUpsertBulk) UpdateUnits() *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.UpdateUnits()
	})
}

// ClearUnits clears the value of the "units" field.
func (u *AppStockLockUpsertBulk) ClearUnits() *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.ClearUnits()
	})
}

// SetAppSpotUnits sets the "app_spot_units" field.
func (u *AppStockLockUpsertBulk) SetAppSpotUnits(v decimal.Decimal) *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.SetAppSpotUnits(v)
	})
}

// UpdateAppSpotUnits sets the "app_spot_units" field to the value that was provided on create.
func (u *AppStockLockUpsertBulk) UpdateAppSpotUnits() *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.UpdateAppSpotUnits()
	})
}

// ClearAppSpotUnits clears the value of the "app_spot_units" field.
func (u *AppStockLockUpsertBulk) ClearAppSpotUnits() *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.ClearAppSpotUnits()
	})
}

// SetLockState sets the "lock_state" field.
func (u *AppStockLockUpsertBulk) SetLockState(v string) *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.SetLockState(v)
	})
}

// UpdateLockState sets the "lock_state" field to the value that was provided on create.
func (u *AppStockLockUpsertBulk) UpdateLockState() *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.UpdateLockState()
	})
}

// ClearLockState clears the value of the "lock_state" field.
func (u *AppStockLockUpsertBulk) ClearLockState() *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.ClearLockState()
	})
}

// SetChargeBackState sets the "charge_back_state" field.
func (u *AppStockLockUpsertBulk) SetChargeBackState(v string) *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.SetChargeBackState(v)
	})
}

// UpdateChargeBackState sets the "charge_back_state" field to the value that was provided on create.
func (u *AppStockLockUpsertBulk) UpdateChargeBackState() *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.UpdateChargeBackState()
	})
}

// ClearChargeBackState clears the value of the "charge_back_state" field.
func (u *AppStockLockUpsertBulk) ClearChargeBackState() *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.ClearChargeBackState()
	})
}

// SetExLockID sets the "ex_lock_id" field.
func (u *AppStockLockUpsertBulk) SetExLockID(v uuid.UUID) *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.SetExLockID(v)
	})
}

// UpdateExLockID sets the "ex_lock_id" field to the value that was provided on create.
func (u *AppStockLockUpsertBulk) UpdateExLockID() *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.UpdateExLockID()
	})
}

// ClearExLockID clears the value of the "ex_lock_id" field.
func (u *AppStockLockUpsertBulk) ClearExLockID() *AppStockLockUpsertBulk {
	return u.Update(func(s *AppStockLockUpsert) {
		s.ClearExLockID()
	})
}

// Exec executes the query.
func (u *AppStockLockUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the AppStockLockCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppStockLockCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppStockLockUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

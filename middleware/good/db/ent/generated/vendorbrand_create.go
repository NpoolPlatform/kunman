// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/vendorbrand"
	"github.com/google/uuid"
)

// VendorBrandCreate is the builder for creating a VendorBrand entity.
type VendorBrandCreate struct {
	config
	mutation *VendorBrandMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (vbc *VendorBrandCreate) SetEntID(u uuid.UUID) *VendorBrandCreate {
	vbc.mutation.SetEntID(u)
	return vbc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (vbc *VendorBrandCreate) SetNillableEntID(u *uuid.UUID) *VendorBrandCreate {
	if u != nil {
		vbc.SetEntID(*u)
	}
	return vbc
}

// SetCreatedAt sets the "created_at" field.
func (vbc *VendorBrandCreate) SetCreatedAt(u uint32) *VendorBrandCreate {
	vbc.mutation.SetCreatedAt(u)
	return vbc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vbc *VendorBrandCreate) SetNillableCreatedAt(u *uint32) *VendorBrandCreate {
	if u != nil {
		vbc.SetCreatedAt(*u)
	}
	return vbc
}

// SetUpdatedAt sets the "updated_at" field.
func (vbc *VendorBrandCreate) SetUpdatedAt(u uint32) *VendorBrandCreate {
	vbc.mutation.SetUpdatedAt(u)
	return vbc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vbc *VendorBrandCreate) SetNillableUpdatedAt(u *uint32) *VendorBrandCreate {
	if u != nil {
		vbc.SetUpdatedAt(*u)
	}
	return vbc
}

// SetDeletedAt sets the "deleted_at" field.
func (vbc *VendorBrandCreate) SetDeletedAt(u uint32) *VendorBrandCreate {
	vbc.mutation.SetDeletedAt(u)
	return vbc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vbc *VendorBrandCreate) SetNillableDeletedAt(u *uint32) *VendorBrandCreate {
	if u != nil {
		vbc.SetDeletedAt(*u)
	}
	return vbc
}

// SetName sets the "name" field.
func (vbc *VendorBrandCreate) SetName(s string) *VendorBrandCreate {
	vbc.mutation.SetName(s)
	return vbc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vbc *VendorBrandCreate) SetNillableName(s *string) *VendorBrandCreate {
	if s != nil {
		vbc.SetName(*s)
	}
	return vbc
}

// SetLogo sets the "logo" field.
func (vbc *VendorBrandCreate) SetLogo(s string) *VendorBrandCreate {
	vbc.mutation.SetLogo(s)
	return vbc
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (vbc *VendorBrandCreate) SetNillableLogo(s *string) *VendorBrandCreate {
	if s != nil {
		vbc.SetLogo(*s)
	}
	return vbc
}

// SetID sets the "id" field.
func (vbc *VendorBrandCreate) SetID(u uint32) *VendorBrandCreate {
	vbc.mutation.SetID(u)
	return vbc
}

// Mutation returns the VendorBrandMutation object of the builder.
func (vbc *VendorBrandCreate) Mutation() *VendorBrandMutation {
	return vbc.mutation
}

// Save creates the VendorBrand in the database.
func (vbc *VendorBrandCreate) Save(ctx context.Context) (*VendorBrand, error) {
	vbc.defaults()
	return withHooks(ctx, vbc.sqlSave, vbc.mutation, vbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vbc *VendorBrandCreate) SaveX(ctx context.Context) *VendorBrand {
	v, err := vbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vbc *VendorBrandCreate) Exec(ctx context.Context) error {
	_, err := vbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vbc *VendorBrandCreate) ExecX(ctx context.Context) {
	if err := vbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vbc *VendorBrandCreate) defaults() {
	if _, ok := vbc.mutation.EntID(); !ok {
		v := vendorbrand.DefaultEntID()
		vbc.mutation.SetEntID(v)
	}
	if _, ok := vbc.mutation.CreatedAt(); !ok {
		v := vendorbrand.DefaultCreatedAt()
		vbc.mutation.SetCreatedAt(v)
	}
	if _, ok := vbc.mutation.UpdatedAt(); !ok {
		v := vendorbrand.DefaultUpdatedAt()
		vbc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vbc.mutation.DeletedAt(); !ok {
		v := vendorbrand.DefaultDeletedAt()
		vbc.mutation.SetDeletedAt(v)
	}
	if _, ok := vbc.mutation.Name(); !ok {
		v := vendorbrand.DefaultName
		vbc.mutation.SetName(v)
	}
	if _, ok := vbc.mutation.Logo(); !ok {
		v := vendorbrand.DefaultLogo
		vbc.mutation.SetLogo(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vbc *VendorBrandCreate) check() error {
	if _, ok := vbc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "VendorBrand.ent_id"`)}
	}
	if _, ok := vbc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "VendorBrand.created_at"`)}
	}
	if _, ok := vbc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "VendorBrand.updated_at"`)}
	}
	if _, ok := vbc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "VendorBrand.deleted_at"`)}
	}
	if v, ok := vbc.mutation.Name(); ok {
		if err := vendorbrand.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "VendorBrand.name": %w`, err)}
		}
	}
	if v, ok := vbc.mutation.Logo(); ok {
		if err := vendorbrand.LogoValidator(v); err != nil {
			return &ValidationError{Name: "logo", err: fmt.Errorf(`generated: validator failed for field "VendorBrand.logo": %w`, err)}
		}
	}
	return nil
}

func (vbc *VendorBrandCreate) sqlSave(ctx context.Context) (*VendorBrand, error) {
	if err := vbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	vbc.mutation.id = &_node.ID
	vbc.mutation.done = true
	return _node, nil
}

func (vbc *VendorBrandCreate) createSpec() (*VendorBrand, *sqlgraph.CreateSpec) {
	var (
		_node = &VendorBrand{config: vbc.config}
		_spec = sqlgraph.NewCreateSpec(vendorbrand.Table, sqlgraph.NewFieldSpec(vendorbrand.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = vbc.conflict
	if id, ok := vbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vbc.mutation.EntID(); ok {
		_spec.SetField(vendorbrand.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := vbc.mutation.CreatedAt(); ok {
		_spec.SetField(vendorbrand.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := vbc.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorbrand.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := vbc.mutation.DeletedAt(); ok {
		_spec.SetField(vendorbrand.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := vbc.mutation.Name(); ok {
		_spec.SetField(vendorbrand.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := vbc.mutation.Logo(); ok {
		_spec.SetField(vendorbrand.FieldLogo, field.TypeString, value)
		_node.Logo = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VendorBrand.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VendorBrandUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (vbc *VendorBrandCreate) OnConflict(opts ...sql.ConflictOption) *VendorBrandUpsertOne {
	vbc.conflict = opts
	return &VendorBrandUpsertOne{
		create: vbc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VendorBrand.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vbc *VendorBrandCreate) OnConflictColumns(columns ...string) *VendorBrandUpsertOne {
	vbc.conflict = append(vbc.conflict, sql.ConflictColumns(columns...))
	return &VendorBrandUpsertOne{
		create: vbc,
	}
}

type (
	// VendorBrandUpsertOne is the builder for "upsert"-ing
	//  one VendorBrand node.
	VendorBrandUpsertOne struct {
		create *VendorBrandCreate
	}

	// VendorBrandUpsert is the "OnConflict" setter.
	VendorBrandUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *VendorBrandUpsert) SetEntID(v uuid.UUID) *VendorBrandUpsert {
	u.Set(vendorbrand.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *VendorBrandUpsert) UpdateEntID() *VendorBrandUpsert {
	u.SetExcluded(vendorbrand.FieldEntID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *VendorBrandUpsert) SetCreatedAt(v uint32) *VendorBrandUpsert {
	u.Set(vendorbrand.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *VendorBrandUpsert) UpdateCreatedAt() *VendorBrandUpsert {
	u.SetExcluded(vendorbrand.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *VendorBrandUpsert) AddCreatedAt(v uint32) *VendorBrandUpsert {
	u.Add(vendorbrand.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VendorBrandUpsert) SetUpdatedAt(v uint32) *VendorBrandUpsert {
	u.Set(vendorbrand.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VendorBrandUpsert) UpdateUpdatedAt() *VendorBrandUpsert {
	u.SetExcluded(vendorbrand.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *VendorBrandUpsert) AddUpdatedAt(v uint32) *VendorBrandUpsert {
	u.Add(vendorbrand.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *VendorBrandUpsert) SetDeletedAt(v uint32) *VendorBrandUpsert {
	u.Set(vendorbrand.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *VendorBrandUpsert) UpdateDeletedAt() *VendorBrandUpsert {
	u.SetExcluded(vendorbrand.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *VendorBrandUpsert) AddDeletedAt(v uint32) *VendorBrandUpsert {
	u.Add(vendorbrand.FieldDeletedAt, v)
	return u
}

// SetName sets the "name" field.
func (u *VendorBrandUpsert) SetName(v string) *VendorBrandUpsert {
	u.Set(vendorbrand.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *VendorBrandUpsert) UpdateName() *VendorBrandUpsert {
	u.SetExcluded(vendorbrand.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *VendorBrandUpsert) ClearName() *VendorBrandUpsert {
	u.SetNull(vendorbrand.FieldName)
	return u
}

// SetLogo sets the "logo" field.
func (u *VendorBrandUpsert) SetLogo(v string) *VendorBrandUpsert {
	u.Set(vendorbrand.FieldLogo, v)
	return u
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *VendorBrandUpsert) UpdateLogo() *VendorBrandUpsert {
	u.SetExcluded(vendorbrand.FieldLogo)
	return u
}

// ClearLogo clears the value of the "logo" field.
func (u *VendorBrandUpsert) ClearLogo() *VendorBrandUpsert {
	u.SetNull(vendorbrand.FieldLogo)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.VendorBrand.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(vendorbrand.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *VendorBrandUpsertOne) UpdateNewValues() *VendorBrandUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(vendorbrand.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VendorBrand.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VendorBrandUpsertOne) Ignore() *VendorBrandUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VendorBrandUpsertOne) DoNothing() *VendorBrandUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VendorBrandCreate.OnConflict
// documentation for more info.
func (u *VendorBrandUpsertOne) Update(set func(*VendorBrandUpsert)) *VendorBrandUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VendorBrandUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *VendorBrandUpsertOne) SetEntID(v uuid.UUID) *VendorBrandUpsertOne {
	return u.Update(func(s *VendorBrandUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *VendorBrandUpsertOne) UpdateEntID() *VendorBrandUpsertOne {
	return u.Update(func(s *VendorBrandUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *VendorBrandUpsertOne) SetCreatedAt(v uint32) *VendorBrandUpsertOne {
	return u.Update(func(s *VendorBrandUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *VendorBrandUpsertOne) AddCreatedAt(v uint32) *VendorBrandUpsertOne {
	return u.Update(func(s *VendorBrandUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *VendorBrandUpsertOne) UpdateCreatedAt() *VendorBrandUpsertOne {
	return u.Update(func(s *VendorBrandUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VendorBrandUpsertOne) SetUpdatedAt(v uint32) *VendorBrandUpsertOne {
	return u.Update(func(s *VendorBrandUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *VendorBrandUpsertOne) AddUpdatedAt(v uint32) *VendorBrandUpsertOne {
	return u.Update(func(s *VendorBrandUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VendorBrandUpsertOne) UpdateUpdatedAt() *VendorBrandUpsertOne {
	return u.Update(func(s *VendorBrandUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *VendorBrandUpsertOne) SetDeletedAt(v uint32) *VendorBrandUpsertOne {
	return u.Update(func(s *VendorBrandUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *VendorBrandUpsertOne) AddDeletedAt(v uint32) *VendorBrandUpsertOne {
	return u.Update(func(s *VendorBrandUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *VendorBrandUpsertOne) UpdateDeletedAt() *VendorBrandUpsertOne {
	return u.Update(func(s *VendorBrandUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *VendorBrandUpsertOne) SetName(v string) *VendorBrandUpsertOne {
	return u.Update(func(s *VendorBrandUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *VendorBrandUpsertOne) UpdateName() *VendorBrandUpsertOne {
	return u.Update(func(s *VendorBrandUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *VendorBrandUpsertOne) ClearName() *VendorBrandUpsertOne {
	return u.Update(func(s *VendorBrandUpsert) {
		s.ClearName()
	})
}

// SetLogo sets the "logo" field.
func (u *VendorBrandUpsertOne) SetLogo(v string) *VendorBrandUpsertOne {
	return u.Update(func(s *VendorBrandUpsert) {
		s.SetLogo(v)
	})
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *VendorBrandUpsertOne) UpdateLogo() *VendorBrandUpsertOne {
	return u.Update(func(s *VendorBrandUpsert) {
		s.UpdateLogo()
	})
}

// ClearLogo clears the value of the "logo" field.
func (u *VendorBrandUpsertOne) ClearLogo() *VendorBrandUpsertOne {
	return u.Update(func(s *VendorBrandUpsert) {
		s.ClearLogo()
	})
}

// Exec executes the query.
func (u *VendorBrandUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for VendorBrandCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VendorBrandUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VendorBrandUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VendorBrandUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VendorBrandCreateBulk is the builder for creating many VendorBrand entities in bulk.
type VendorBrandCreateBulk struct {
	config
	err      error
	builders []*VendorBrandCreate
	conflict []sql.ConflictOption
}

// Save creates the VendorBrand entities in the database.
func (vbcb *VendorBrandCreateBulk) Save(ctx context.Context) ([]*VendorBrand, error) {
	if vbcb.err != nil {
		return nil, vbcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vbcb.builders))
	nodes := make([]*VendorBrand, len(vbcb.builders))
	mutators := make([]Mutator, len(vbcb.builders))
	for i := range vbcb.builders {
		func(i int, root context.Context) {
			builder := vbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VendorBrandMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vbcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vbcb *VendorBrandCreateBulk) SaveX(ctx context.Context) []*VendorBrand {
	v, err := vbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vbcb *VendorBrandCreateBulk) Exec(ctx context.Context) error {
	_, err := vbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vbcb *VendorBrandCreateBulk) ExecX(ctx context.Context) {
	if err := vbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VendorBrand.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VendorBrandUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (vbcb *VendorBrandCreateBulk) OnConflict(opts ...sql.ConflictOption) *VendorBrandUpsertBulk {
	vbcb.conflict = opts
	return &VendorBrandUpsertBulk{
		create: vbcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VendorBrand.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vbcb *VendorBrandCreateBulk) OnConflictColumns(columns ...string) *VendorBrandUpsertBulk {
	vbcb.conflict = append(vbcb.conflict, sql.ConflictColumns(columns...))
	return &VendorBrandUpsertBulk{
		create: vbcb,
	}
}

// VendorBrandUpsertBulk is the builder for "upsert"-ing
// a bulk of VendorBrand nodes.
type VendorBrandUpsertBulk struct {
	create *VendorBrandCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.VendorBrand.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(vendorbrand.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *VendorBrandUpsertBulk) UpdateNewValues() *VendorBrandUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(vendorbrand.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VendorBrand.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VendorBrandUpsertBulk) Ignore() *VendorBrandUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VendorBrandUpsertBulk) DoNothing() *VendorBrandUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VendorBrandCreateBulk.OnConflict
// documentation for more info.
func (u *VendorBrandUpsertBulk) Update(set func(*VendorBrandUpsert)) *VendorBrandUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VendorBrandUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *VendorBrandUpsertBulk) SetEntID(v uuid.UUID) *VendorBrandUpsertBulk {
	return u.Update(func(s *VendorBrandUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *VendorBrandUpsertBulk) UpdateEntID() *VendorBrandUpsertBulk {
	return u.Update(func(s *VendorBrandUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *VendorBrandUpsertBulk) SetCreatedAt(v uint32) *VendorBrandUpsertBulk {
	return u.Update(func(s *VendorBrandUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *VendorBrandUpsertBulk) AddCreatedAt(v uint32) *VendorBrandUpsertBulk {
	return u.Update(func(s *VendorBrandUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *VendorBrandUpsertBulk) UpdateCreatedAt() *VendorBrandUpsertBulk {
	return u.Update(func(s *VendorBrandUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VendorBrandUpsertBulk) SetUpdatedAt(v uint32) *VendorBrandUpsertBulk {
	return u.Update(func(s *VendorBrandUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *VendorBrandUpsertBulk) AddUpdatedAt(v uint32) *VendorBrandUpsertBulk {
	return u.Update(func(s *VendorBrandUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VendorBrandUpsertBulk) UpdateUpdatedAt() *VendorBrandUpsertBulk {
	return u.Update(func(s *VendorBrandUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *VendorBrandUpsertBulk) SetDeletedAt(v uint32) *VendorBrandUpsertBulk {
	return u.Update(func(s *VendorBrandUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *VendorBrandUpsertBulk) AddDeletedAt(v uint32) *VendorBrandUpsertBulk {
	return u.Update(func(s *VendorBrandUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *VendorBrandUpsertBulk) UpdateDeletedAt() *VendorBrandUpsertBulk {
	return u.Update(func(s *VendorBrandUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *VendorBrandUpsertBulk) SetName(v string) *VendorBrandUpsertBulk {
	return u.Update(func(s *VendorBrandUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *VendorBrandUpsertBulk) UpdateName() *VendorBrandUpsertBulk {
	return u.Update(func(s *VendorBrandUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *VendorBrandUpsertBulk) ClearName() *VendorBrandUpsertBulk {
	return u.Update(func(s *VendorBrandUpsert) {
		s.ClearName()
	})
}

// SetLogo sets the "logo" field.
func (u *VendorBrandUpsertBulk) SetLogo(v string) *VendorBrandUpsertBulk {
	return u.Update(func(s *VendorBrandUpsert) {
		s.SetLogo(v)
	})
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *VendorBrandUpsertBulk) UpdateLogo() *VendorBrandUpsertBulk {
	return u.Update(func(s *VendorBrandUpsert) {
		s.UpdateLogo()
	})
}

// ClearLogo clears the value of the "logo" field.
func (u *VendorBrandUpsertBulk) ClearLogo() *VendorBrandUpsertBulk {
	return u.Update(func(s *VendorBrandUpsert) {
		s.ClearLogo()
	})
}

// Exec executes the query.
func (u *VendorBrandUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the VendorBrandCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for VendorBrandCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VendorBrandUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

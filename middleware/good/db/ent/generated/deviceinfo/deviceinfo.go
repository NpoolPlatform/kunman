// Code generated by ent, DO NOT EDIT.

package deviceinfo

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the deviceinfo type in the database.
	Label = "device_info"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldManufacturerID holds the string denoting the manufacturer_id field in the database.
	FieldManufacturerID = "manufacturer_id"
	// FieldPowerConsumption holds the string denoting the power_consumption field in the database.
	FieldPowerConsumption = "power_consumption"
	// FieldShipmentAt holds the string denoting the shipment_at field in the database.
	FieldShipmentAt = "shipment_at"
	// Table holds the table name of the deviceinfo in the database.
	Table = "device_infos"
)

// Columns holds all SQL columns for deviceinfo fields.
var Columns = []string{
	FieldID,
	FieldEntID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldType,
	FieldManufacturerID,
	FieldPowerConsumption,
	FieldShipmentAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() uint32
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() uint32
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() uint32
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt func() uint32
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType string
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// DefaultManufacturerID holds the default value on creation for the "manufacturer_id" field.
	DefaultManufacturerID func() uuid.UUID
	// DefaultPowerConsumption holds the default value on creation for the "power_consumption" field.
	DefaultPowerConsumption uint32
	// DefaultShipmentAt holds the default value on creation for the "shipment_at" field.
	DefaultShipmentAt uint32
)

// OrderOption defines the ordering options for the DeviceInfo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByManufacturerID orders the results by the manufacturer_id field.
func ByManufacturerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldManufacturerID, opts...).ToFunc()
}

// ByPowerConsumption orders the results by the power_consumption field.
func ByPowerConsumption(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPowerConsumption, opts...).ToFunc()
}

// ByShipmentAt orders the results by the shipment_at field.
func ByShipmentAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShipmentAt, opts...).ToFunc()
}

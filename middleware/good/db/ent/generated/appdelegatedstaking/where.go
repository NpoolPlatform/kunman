// Code generated by ent, DO NOT EDIT.

package appdelegatedstaking

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldEQ(FieldEntID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldEQ(FieldDeletedAt, v))
}

// AppGoodID applies equality check predicate on the "app_good_id" field. It's identical to AppGoodIDEQ.
func AppGoodID(v uuid.UUID) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldEQ(FieldAppGoodID, v))
}

// ServiceStartAt applies equality check predicate on the "service_start_at" field. It's identical to ServiceStartAtEQ.
func ServiceStartAt(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldEQ(FieldServiceStartAt, v))
}

// StartMode applies equality check predicate on the "start_mode" field. It's identical to StartModeEQ.
func StartMode(v string) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldEQ(FieldStartMode, v))
}

// EnableSetCommission applies equality check predicate on the "enable_set_commission" field. It's identical to EnableSetCommissionEQ.
func EnableSetCommission(v bool) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldEQ(FieldEnableSetCommission, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldLTE(FieldEntID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldLTE(FieldDeletedAt, v))
}

// AppGoodIDEQ applies the EQ predicate on the "app_good_id" field.
func AppGoodIDEQ(v uuid.UUID) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldEQ(FieldAppGoodID, v))
}

// AppGoodIDNEQ applies the NEQ predicate on the "app_good_id" field.
func AppGoodIDNEQ(v uuid.UUID) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldNEQ(FieldAppGoodID, v))
}

// AppGoodIDIn applies the In predicate on the "app_good_id" field.
func AppGoodIDIn(vs ...uuid.UUID) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldIn(FieldAppGoodID, vs...))
}

// AppGoodIDNotIn applies the NotIn predicate on the "app_good_id" field.
func AppGoodIDNotIn(vs ...uuid.UUID) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldNotIn(FieldAppGoodID, vs...))
}

// AppGoodIDGT applies the GT predicate on the "app_good_id" field.
func AppGoodIDGT(v uuid.UUID) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldGT(FieldAppGoodID, v))
}

// AppGoodIDGTE applies the GTE predicate on the "app_good_id" field.
func AppGoodIDGTE(v uuid.UUID) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldGTE(FieldAppGoodID, v))
}

// AppGoodIDLT applies the LT predicate on the "app_good_id" field.
func AppGoodIDLT(v uuid.UUID) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldLT(FieldAppGoodID, v))
}

// AppGoodIDLTE applies the LTE predicate on the "app_good_id" field.
func AppGoodIDLTE(v uuid.UUID) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldLTE(FieldAppGoodID, v))
}

// AppGoodIDIsNil applies the IsNil predicate on the "app_good_id" field.
func AppGoodIDIsNil() predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldIsNull(FieldAppGoodID))
}

// AppGoodIDNotNil applies the NotNil predicate on the "app_good_id" field.
func AppGoodIDNotNil() predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldNotNull(FieldAppGoodID))
}

// ServiceStartAtEQ applies the EQ predicate on the "service_start_at" field.
func ServiceStartAtEQ(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldEQ(FieldServiceStartAt, v))
}

// ServiceStartAtNEQ applies the NEQ predicate on the "service_start_at" field.
func ServiceStartAtNEQ(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldNEQ(FieldServiceStartAt, v))
}

// ServiceStartAtIn applies the In predicate on the "service_start_at" field.
func ServiceStartAtIn(vs ...uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldIn(FieldServiceStartAt, vs...))
}

// ServiceStartAtNotIn applies the NotIn predicate on the "service_start_at" field.
func ServiceStartAtNotIn(vs ...uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldNotIn(FieldServiceStartAt, vs...))
}

// ServiceStartAtGT applies the GT predicate on the "service_start_at" field.
func ServiceStartAtGT(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldGT(FieldServiceStartAt, v))
}

// ServiceStartAtGTE applies the GTE predicate on the "service_start_at" field.
func ServiceStartAtGTE(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldGTE(FieldServiceStartAt, v))
}

// ServiceStartAtLT applies the LT predicate on the "service_start_at" field.
func ServiceStartAtLT(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldLT(FieldServiceStartAt, v))
}

// ServiceStartAtLTE applies the LTE predicate on the "service_start_at" field.
func ServiceStartAtLTE(v uint32) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldLTE(FieldServiceStartAt, v))
}

// ServiceStartAtIsNil applies the IsNil predicate on the "service_start_at" field.
func ServiceStartAtIsNil() predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldIsNull(FieldServiceStartAt))
}

// ServiceStartAtNotNil applies the NotNil predicate on the "service_start_at" field.
func ServiceStartAtNotNil() predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldNotNull(FieldServiceStartAt))
}

// StartModeEQ applies the EQ predicate on the "start_mode" field.
func StartModeEQ(v string) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldEQ(FieldStartMode, v))
}

// StartModeNEQ applies the NEQ predicate on the "start_mode" field.
func StartModeNEQ(v string) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldNEQ(FieldStartMode, v))
}

// StartModeIn applies the In predicate on the "start_mode" field.
func StartModeIn(vs ...string) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldIn(FieldStartMode, vs...))
}

// StartModeNotIn applies the NotIn predicate on the "start_mode" field.
func StartModeNotIn(vs ...string) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldNotIn(FieldStartMode, vs...))
}

// StartModeGT applies the GT predicate on the "start_mode" field.
func StartModeGT(v string) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldGT(FieldStartMode, v))
}

// StartModeGTE applies the GTE predicate on the "start_mode" field.
func StartModeGTE(v string) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldGTE(FieldStartMode, v))
}

// StartModeLT applies the LT predicate on the "start_mode" field.
func StartModeLT(v string) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldLT(FieldStartMode, v))
}

// StartModeLTE applies the LTE predicate on the "start_mode" field.
func StartModeLTE(v string) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldLTE(FieldStartMode, v))
}

// StartModeContains applies the Contains predicate on the "start_mode" field.
func StartModeContains(v string) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldContains(FieldStartMode, v))
}

// StartModeHasPrefix applies the HasPrefix predicate on the "start_mode" field.
func StartModeHasPrefix(v string) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldHasPrefix(FieldStartMode, v))
}

// StartModeHasSuffix applies the HasSuffix predicate on the "start_mode" field.
func StartModeHasSuffix(v string) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldHasSuffix(FieldStartMode, v))
}

// StartModeIsNil applies the IsNil predicate on the "start_mode" field.
func StartModeIsNil() predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldIsNull(FieldStartMode))
}

// StartModeNotNil applies the NotNil predicate on the "start_mode" field.
func StartModeNotNil() predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldNotNull(FieldStartMode))
}

// StartModeEqualFold applies the EqualFold predicate on the "start_mode" field.
func StartModeEqualFold(v string) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldEqualFold(FieldStartMode, v))
}

// StartModeContainsFold applies the ContainsFold predicate on the "start_mode" field.
func StartModeContainsFold(v string) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldContainsFold(FieldStartMode, v))
}

// EnableSetCommissionEQ applies the EQ predicate on the "enable_set_commission" field.
func EnableSetCommissionEQ(v bool) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldEQ(FieldEnableSetCommission, v))
}

// EnableSetCommissionNEQ applies the NEQ predicate on the "enable_set_commission" field.
func EnableSetCommissionNEQ(v bool) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldNEQ(FieldEnableSetCommission, v))
}

// EnableSetCommissionIsNil applies the IsNil predicate on the "enable_set_commission" field.
func EnableSetCommissionIsNil() predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldIsNull(FieldEnableSetCommission))
}

// EnableSetCommissionNotNil applies the NotNil predicate on the "enable_set_commission" field.
func EnableSetCommissionNotNil() predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.FieldNotNull(FieldEnableSetCommission))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppDelegatedStaking) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppDelegatedStaking) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppDelegatedStaking) predicate.AppDelegatedStaking {
	return predicate.AppDelegatedStaking(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package good

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the good type in the database.
	Label = "good"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldDeviceInfoID holds the string denoting the device_info_id field in the database.
	FieldDeviceInfoID = "device_info_id"
	// FieldCoinTypeID holds the string denoting the coin_type_id field in the database.
	FieldCoinTypeID = "coin_type_id"
	// FieldInheritFromGoodID holds the string denoting the inherit_from_good_id field in the database.
	FieldInheritFromGoodID = "inherit_from_good_id"
	// FieldVendorLocationID holds the string denoting the vendor_location_id field in the database.
	FieldVendorLocationID = "vendor_location_id"
	// FieldUnitPrice holds the string denoting the unit_price field in the database.
	FieldUnitPrice = "unit_price"
	// FieldBenefitType holds the string denoting the benefit_type field in the database.
	FieldBenefitType = "benefit_type"
	// FieldGoodType holds the string denoting the good_type field in the database.
	FieldGoodType = "good_type"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldUnit holds the string denoting the unit field in the database.
	FieldUnit = "unit"
	// FieldQuantityUnit holds the string denoting the quantity_unit field in the database.
	FieldQuantityUnit = "quantity_unit"
	// FieldUnitAmount holds the string denoting the unit_amount field in the database.
	FieldUnitAmount = "unit_amount"
	// FieldQuantityUnitAmount holds the string denoting the quantity_unit_amount field in the database.
	FieldQuantityUnitAmount = "quantity_unit_amount"
	// FieldDeliveryAt holds the string denoting the delivery_at field in the database.
	FieldDeliveryAt = "delivery_at"
	// FieldStartAt holds the string denoting the start_at field in the database.
	FieldStartAt = "start_at"
	// FieldStartMode holds the string denoting the start_mode field in the database.
	FieldStartMode = "start_mode"
	// FieldTestOnly holds the string denoting the test_only field in the database.
	FieldTestOnly = "test_only"
	// FieldBenefitIntervalHours holds the string denoting the benefit_interval_hours field in the database.
	FieldBenefitIntervalHours = "benefit_interval_hours"
	// FieldUnitLockDeposit holds the string denoting the unit_lock_deposit field in the database.
	FieldUnitLockDeposit = "unit_lock_deposit"
	// FieldUnitType holds the string denoting the unit_type field in the database.
	FieldUnitType = "unit_type"
	// FieldQuantityCalculateType holds the string denoting the quantity_calculate_type field in the database.
	FieldQuantityCalculateType = "quantity_calculate_type"
	// FieldDurationType holds the string denoting the duration_type field in the database.
	FieldDurationType = "duration_type"
	// FieldDurationCalculateType holds the string denoting the duration_calculate_type field in the database.
	FieldDurationCalculateType = "duration_calculate_type"
	// FieldSettlementType holds the string denoting the settlement_type field in the database.
	FieldSettlementType = "settlement_type"
	// Table holds the table name of the good in the database.
	Table = "goods"
)

// Columns holds all SQL columns for good fields.
var Columns = []string{
	FieldID,
	FieldEntID,
	FieldDeviceInfoID,
	FieldCoinTypeID,
	FieldInheritFromGoodID,
	FieldVendorLocationID,
	FieldUnitPrice,
	FieldBenefitType,
	FieldGoodType,
	FieldTitle,
	FieldUnit,
	FieldQuantityUnit,
	FieldUnitAmount,
	FieldQuantityUnitAmount,
	FieldDeliveryAt,
	FieldStartAt,
	FieldStartMode,
	FieldTestOnly,
	FieldBenefitIntervalHours,
	FieldUnitLockDeposit,
	FieldUnitType,
	FieldQuantityCalculateType,
	FieldDurationType,
	FieldDurationCalculateType,
	FieldSettlementType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultInheritFromGoodID holds the default value on creation for the "inherit_from_good_id" field.
	DefaultInheritFromGoodID func() uuid.UUID
	// DefaultUnitPrice holds the default value on creation for the "unit_price" field.
	DefaultUnitPrice decimal.Decimal
	// DefaultBenefitType holds the default value on creation for the "benefit_type" field.
	DefaultBenefitType string
	// DefaultGoodType holds the default value on creation for the "good_type" field.
	DefaultGoodType string
	// DefaultTitle holds the default value on creation for the "title" field.
	DefaultTitle string
	// DefaultUnit holds the default value on creation for the "unit" field.
	DefaultUnit string
	// DefaultQuantityUnit holds the default value on creation for the "quantity_unit" field.
	DefaultQuantityUnit string
	// DefaultUnitAmount holds the default value on creation for the "unit_amount" field.
	DefaultUnitAmount int32
	// DefaultQuantityUnitAmount holds the default value on creation for the "quantity_unit_amount" field.
	DefaultQuantityUnitAmount decimal.Decimal
	// DefaultDeliveryAt holds the default value on creation for the "delivery_at" field.
	DefaultDeliveryAt uint32
	// DefaultStartAt holds the default value on creation for the "start_at" field.
	DefaultStartAt uint32
	// DefaultStartMode holds the default value on creation for the "start_mode" field.
	DefaultStartMode string
	// DefaultTestOnly holds the default value on creation for the "test_only" field.
	DefaultTestOnly bool
	// DefaultBenefitIntervalHours holds the default value on creation for the "benefit_interval_hours" field.
	DefaultBenefitIntervalHours uint32
	// DefaultUnitLockDeposit holds the default value on creation for the "unit_lock_deposit" field.
	DefaultUnitLockDeposit decimal.Decimal
	// DefaultUnitType holds the default value on creation for the "unit_type" field.
	DefaultUnitType string
	// DefaultQuantityCalculateType holds the default value on creation for the "quantity_calculate_type" field.
	DefaultQuantityCalculateType string
	// DefaultDurationType holds the default value on creation for the "duration_type" field.
	DefaultDurationType string
	// DefaultDurationCalculateType holds the default value on creation for the "duration_calculate_type" field.
	DefaultDurationCalculateType string
	// DefaultSettlementType holds the default value on creation for the "settlement_type" field.
	DefaultSettlementType string
)

// OrderOption defines the ordering options for the Good queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByDeviceInfoID orders the results by the device_info_id field.
func ByDeviceInfoID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceInfoID, opts...).ToFunc()
}

// ByCoinTypeID orders the results by the coin_type_id field.
func ByCoinTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoinTypeID, opts...).ToFunc()
}

// ByInheritFromGoodID orders the results by the inherit_from_good_id field.
func ByInheritFromGoodID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInheritFromGoodID, opts...).ToFunc()
}

// ByVendorLocationID orders the results by the vendor_location_id field.
func ByVendorLocationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVendorLocationID, opts...).ToFunc()
}

// ByUnitPrice orders the results by the unit_price field.
func ByUnitPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitPrice, opts...).ToFunc()
}

// ByBenefitType orders the results by the benefit_type field.
func ByBenefitType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBenefitType, opts...).ToFunc()
}

// ByGoodType orders the results by the good_type field.
func ByGoodType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodType, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByUnit orders the results by the unit field.
func ByUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnit, opts...).ToFunc()
}

// ByQuantityUnit orders the results by the quantity_unit field.
func ByQuantityUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantityUnit, opts...).ToFunc()
}

// ByUnitAmount orders the results by the unit_amount field.
func ByUnitAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitAmount, opts...).ToFunc()
}

// ByQuantityUnitAmount orders the results by the quantity_unit_amount field.
func ByQuantityUnitAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantityUnitAmount, opts...).ToFunc()
}

// ByDeliveryAt orders the results by the delivery_at field.
func ByDeliveryAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeliveryAt, opts...).ToFunc()
}

// ByStartAt orders the results by the start_at field.
func ByStartAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartAt, opts...).ToFunc()
}

// ByStartMode orders the results by the start_mode field.
func ByStartMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartMode, opts...).ToFunc()
}

// ByTestOnly orders the results by the test_only field.
func ByTestOnly(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTestOnly, opts...).ToFunc()
}

// ByBenefitIntervalHours orders the results by the benefit_interval_hours field.
func ByBenefitIntervalHours(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBenefitIntervalHours, opts...).ToFunc()
}

// ByUnitLockDeposit orders the results by the unit_lock_deposit field.
func ByUnitLockDeposit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitLockDeposit, opts...).ToFunc()
}

// ByUnitType orders the results by the unit_type field.
func ByUnitType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitType, opts...).ToFunc()
}

// ByQuantityCalculateType orders the results by the quantity_calculate_type field.
func ByQuantityCalculateType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantityCalculateType, opts...).ToFunc()
}

// ByDurationType orders the results by the duration_type field.
func ByDurationType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDurationType, opts...).ToFunc()
}

// ByDurationCalculateType orders the results by the duration_calculate_type field.
func ByDurationCalculateType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDurationCalculateType, opts...).ToFunc()
}

// BySettlementType orders the results by the settlement_type field.
func BySettlementType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSettlementType, opts...).ToFunc()
}

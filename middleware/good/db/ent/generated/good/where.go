// Code generated by ent, DO NOT EDIT.

package good

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Good {
	return predicate.Good(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Good {
	return predicate.Good(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Good {
	return predicate.Good(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Good {
	return predicate.Good(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Good {
	return predicate.Good(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Good {
	return predicate.Good(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Good {
	return predicate.Good(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldEntID, v))
}

// DeviceInfoID applies equality check predicate on the "device_info_id" field. It's identical to DeviceInfoIDEQ.
func DeviceInfoID(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldDeviceInfoID, v))
}

// CoinTypeID applies equality check predicate on the "coin_type_id" field. It's identical to CoinTypeIDEQ.
func CoinTypeID(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldCoinTypeID, v))
}

// InheritFromGoodID applies equality check predicate on the "inherit_from_good_id" field. It's identical to InheritFromGoodIDEQ.
func InheritFromGoodID(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldInheritFromGoodID, v))
}

// VendorLocationID applies equality check predicate on the "vendor_location_id" field. It's identical to VendorLocationIDEQ.
func VendorLocationID(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldVendorLocationID, v))
}

// UnitPrice applies equality check predicate on the "unit_price" field. It's identical to UnitPriceEQ.
func UnitPrice(v decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldUnitPrice, v))
}

// BenefitType applies equality check predicate on the "benefit_type" field. It's identical to BenefitTypeEQ.
func BenefitType(v string) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldBenefitType, v))
}

// GoodType applies equality check predicate on the "good_type" field. It's identical to GoodTypeEQ.
func GoodType(v string) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldGoodType, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldTitle, v))
}

// Unit applies equality check predicate on the "unit" field. It's identical to UnitEQ.
func Unit(v string) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldUnit, v))
}

// QuantityUnit applies equality check predicate on the "quantity_unit" field. It's identical to QuantityUnitEQ.
func QuantityUnit(v string) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldQuantityUnit, v))
}

// UnitAmount applies equality check predicate on the "unit_amount" field. It's identical to UnitAmountEQ.
func UnitAmount(v int32) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldUnitAmount, v))
}

// QuantityUnitAmount applies equality check predicate on the "quantity_unit_amount" field. It's identical to QuantityUnitAmountEQ.
func QuantityUnitAmount(v decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldQuantityUnitAmount, v))
}

// DeliveryAt applies equality check predicate on the "delivery_at" field. It's identical to DeliveryAtEQ.
func DeliveryAt(v uint32) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldDeliveryAt, v))
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v uint32) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldStartAt, v))
}

// StartMode applies equality check predicate on the "start_mode" field. It's identical to StartModeEQ.
func StartMode(v string) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldStartMode, v))
}

// TestOnly applies equality check predicate on the "test_only" field. It's identical to TestOnlyEQ.
func TestOnly(v bool) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldTestOnly, v))
}

// BenefitIntervalHours applies equality check predicate on the "benefit_interval_hours" field. It's identical to BenefitIntervalHoursEQ.
func BenefitIntervalHours(v uint32) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldBenefitIntervalHours, v))
}

// UnitLockDeposit applies equality check predicate on the "unit_lock_deposit" field. It's identical to UnitLockDepositEQ.
func UnitLockDeposit(v decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldUnitLockDeposit, v))
}

// UnitType applies equality check predicate on the "unit_type" field. It's identical to UnitTypeEQ.
func UnitType(v string) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldUnitType, v))
}

// QuantityCalculateType applies equality check predicate on the "quantity_calculate_type" field. It's identical to QuantityCalculateTypeEQ.
func QuantityCalculateType(v string) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldQuantityCalculateType, v))
}

// DurationType applies equality check predicate on the "duration_type" field. It's identical to DurationTypeEQ.
func DurationType(v string) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldDurationType, v))
}

// DurationCalculateType applies equality check predicate on the "duration_calculate_type" field. It's identical to DurationCalculateTypeEQ.
func DurationCalculateType(v string) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldDurationCalculateType, v))
}

// SettlementType applies equality check predicate on the "settlement_type" field. It's identical to SettlementTypeEQ.
func SettlementType(v string) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldSettlementType, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldLTE(FieldEntID, v))
}

// DeviceInfoIDEQ applies the EQ predicate on the "device_info_id" field.
func DeviceInfoIDEQ(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldDeviceInfoID, v))
}

// DeviceInfoIDNEQ applies the NEQ predicate on the "device_info_id" field.
func DeviceInfoIDNEQ(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldNEQ(FieldDeviceInfoID, v))
}

// DeviceInfoIDIn applies the In predicate on the "device_info_id" field.
func DeviceInfoIDIn(vs ...uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldIn(FieldDeviceInfoID, vs...))
}

// DeviceInfoIDNotIn applies the NotIn predicate on the "device_info_id" field.
func DeviceInfoIDNotIn(vs ...uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldNotIn(FieldDeviceInfoID, vs...))
}

// DeviceInfoIDGT applies the GT predicate on the "device_info_id" field.
func DeviceInfoIDGT(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldGT(FieldDeviceInfoID, v))
}

// DeviceInfoIDGTE applies the GTE predicate on the "device_info_id" field.
func DeviceInfoIDGTE(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldGTE(FieldDeviceInfoID, v))
}

// DeviceInfoIDLT applies the LT predicate on the "device_info_id" field.
func DeviceInfoIDLT(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldLT(FieldDeviceInfoID, v))
}

// DeviceInfoIDLTE applies the LTE predicate on the "device_info_id" field.
func DeviceInfoIDLTE(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldLTE(FieldDeviceInfoID, v))
}

// CoinTypeIDEQ applies the EQ predicate on the "coin_type_id" field.
func CoinTypeIDEQ(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldCoinTypeID, v))
}

// CoinTypeIDNEQ applies the NEQ predicate on the "coin_type_id" field.
func CoinTypeIDNEQ(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldNEQ(FieldCoinTypeID, v))
}

// CoinTypeIDIn applies the In predicate on the "coin_type_id" field.
func CoinTypeIDIn(vs ...uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldIn(FieldCoinTypeID, vs...))
}

// CoinTypeIDNotIn applies the NotIn predicate on the "coin_type_id" field.
func CoinTypeIDNotIn(vs ...uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldNotIn(FieldCoinTypeID, vs...))
}

// CoinTypeIDGT applies the GT predicate on the "coin_type_id" field.
func CoinTypeIDGT(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldGT(FieldCoinTypeID, v))
}

// CoinTypeIDGTE applies the GTE predicate on the "coin_type_id" field.
func CoinTypeIDGTE(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldGTE(FieldCoinTypeID, v))
}

// CoinTypeIDLT applies the LT predicate on the "coin_type_id" field.
func CoinTypeIDLT(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldLT(FieldCoinTypeID, v))
}

// CoinTypeIDLTE applies the LTE predicate on the "coin_type_id" field.
func CoinTypeIDLTE(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldLTE(FieldCoinTypeID, v))
}

// InheritFromGoodIDEQ applies the EQ predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDEQ(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldInheritFromGoodID, v))
}

// InheritFromGoodIDNEQ applies the NEQ predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDNEQ(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldNEQ(FieldInheritFromGoodID, v))
}

// InheritFromGoodIDIn applies the In predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDIn(vs ...uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldIn(FieldInheritFromGoodID, vs...))
}

// InheritFromGoodIDNotIn applies the NotIn predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDNotIn(vs ...uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldNotIn(FieldInheritFromGoodID, vs...))
}

// InheritFromGoodIDGT applies the GT predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDGT(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldGT(FieldInheritFromGoodID, v))
}

// InheritFromGoodIDGTE applies the GTE predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDGTE(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldGTE(FieldInheritFromGoodID, v))
}

// InheritFromGoodIDLT applies the LT predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDLT(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldLT(FieldInheritFromGoodID, v))
}

// InheritFromGoodIDLTE applies the LTE predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDLTE(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldLTE(FieldInheritFromGoodID, v))
}

// InheritFromGoodIDIsNil applies the IsNil predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDIsNil() predicate.Good {
	return predicate.Good(sql.FieldIsNull(FieldInheritFromGoodID))
}

// InheritFromGoodIDNotNil applies the NotNil predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDNotNil() predicate.Good {
	return predicate.Good(sql.FieldNotNull(FieldInheritFromGoodID))
}

// VendorLocationIDEQ applies the EQ predicate on the "vendor_location_id" field.
func VendorLocationIDEQ(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldVendorLocationID, v))
}

// VendorLocationIDNEQ applies the NEQ predicate on the "vendor_location_id" field.
func VendorLocationIDNEQ(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldNEQ(FieldVendorLocationID, v))
}

// VendorLocationIDIn applies the In predicate on the "vendor_location_id" field.
func VendorLocationIDIn(vs ...uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldIn(FieldVendorLocationID, vs...))
}

// VendorLocationIDNotIn applies the NotIn predicate on the "vendor_location_id" field.
func VendorLocationIDNotIn(vs ...uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldNotIn(FieldVendorLocationID, vs...))
}

// VendorLocationIDGT applies the GT predicate on the "vendor_location_id" field.
func VendorLocationIDGT(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldGT(FieldVendorLocationID, v))
}

// VendorLocationIDGTE applies the GTE predicate on the "vendor_location_id" field.
func VendorLocationIDGTE(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldGTE(FieldVendorLocationID, v))
}

// VendorLocationIDLT applies the LT predicate on the "vendor_location_id" field.
func VendorLocationIDLT(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldLT(FieldVendorLocationID, v))
}

// VendorLocationIDLTE applies the LTE predicate on the "vendor_location_id" field.
func VendorLocationIDLTE(v uuid.UUID) predicate.Good {
	return predicate.Good(sql.FieldLTE(FieldVendorLocationID, v))
}

// UnitPriceEQ applies the EQ predicate on the "unit_price" field.
func UnitPriceEQ(v decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldUnitPrice, v))
}

// UnitPriceNEQ applies the NEQ predicate on the "unit_price" field.
func UnitPriceNEQ(v decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldNEQ(FieldUnitPrice, v))
}

// UnitPriceIn applies the In predicate on the "unit_price" field.
func UnitPriceIn(vs ...decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldIn(FieldUnitPrice, vs...))
}

// UnitPriceNotIn applies the NotIn predicate on the "unit_price" field.
func UnitPriceNotIn(vs ...decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldNotIn(FieldUnitPrice, vs...))
}

// UnitPriceGT applies the GT predicate on the "unit_price" field.
func UnitPriceGT(v decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldGT(FieldUnitPrice, v))
}

// UnitPriceGTE applies the GTE predicate on the "unit_price" field.
func UnitPriceGTE(v decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldGTE(FieldUnitPrice, v))
}

// UnitPriceLT applies the LT predicate on the "unit_price" field.
func UnitPriceLT(v decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldLT(FieldUnitPrice, v))
}

// UnitPriceLTE applies the LTE predicate on the "unit_price" field.
func UnitPriceLTE(v decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldLTE(FieldUnitPrice, v))
}

// UnitPriceIsNil applies the IsNil predicate on the "unit_price" field.
func UnitPriceIsNil() predicate.Good {
	return predicate.Good(sql.FieldIsNull(FieldUnitPrice))
}

// UnitPriceNotNil applies the NotNil predicate on the "unit_price" field.
func UnitPriceNotNil() predicate.Good {
	return predicate.Good(sql.FieldNotNull(FieldUnitPrice))
}

// BenefitTypeEQ applies the EQ predicate on the "benefit_type" field.
func BenefitTypeEQ(v string) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldBenefitType, v))
}

// BenefitTypeNEQ applies the NEQ predicate on the "benefit_type" field.
func BenefitTypeNEQ(v string) predicate.Good {
	return predicate.Good(sql.FieldNEQ(FieldBenefitType, v))
}

// BenefitTypeIn applies the In predicate on the "benefit_type" field.
func BenefitTypeIn(vs ...string) predicate.Good {
	return predicate.Good(sql.FieldIn(FieldBenefitType, vs...))
}

// BenefitTypeNotIn applies the NotIn predicate on the "benefit_type" field.
func BenefitTypeNotIn(vs ...string) predicate.Good {
	return predicate.Good(sql.FieldNotIn(FieldBenefitType, vs...))
}

// BenefitTypeGT applies the GT predicate on the "benefit_type" field.
func BenefitTypeGT(v string) predicate.Good {
	return predicate.Good(sql.FieldGT(FieldBenefitType, v))
}

// BenefitTypeGTE applies the GTE predicate on the "benefit_type" field.
func BenefitTypeGTE(v string) predicate.Good {
	return predicate.Good(sql.FieldGTE(FieldBenefitType, v))
}

// BenefitTypeLT applies the LT predicate on the "benefit_type" field.
func BenefitTypeLT(v string) predicate.Good {
	return predicate.Good(sql.FieldLT(FieldBenefitType, v))
}

// BenefitTypeLTE applies the LTE predicate on the "benefit_type" field.
func BenefitTypeLTE(v string) predicate.Good {
	return predicate.Good(sql.FieldLTE(FieldBenefitType, v))
}

// BenefitTypeContains applies the Contains predicate on the "benefit_type" field.
func BenefitTypeContains(v string) predicate.Good {
	return predicate.Good(sql.FieldContains(FieldBenefitType, v))
}

// BenefitTypeHasPrefix applies the HasPrefix predicate on the "benefit_type" field.
func BenefitTypeHasPrefix(v string) predicate.Good {
	return predicate.Good(sql.FieldHasPrefix(FieldBenefitType, v))
}

// BenefitTypeHasSuffix applies the HasSuffix predicate on the "benefit_type" field.
func BenefitTypeHasSuffix(v string) predicate.Good {
	return predicate.Good(sql.FieldHasSuffix(FieldBenefitType, v))
}

// BenefitTypeIsNil applies the IsNil predicate on the "benefit_type" field.
func BenefitTypeIsNil() predicate.Good {
	return predicate.Good(sql.FieldIsNull(FieldBenefitType))
}

// BenefitTypeNotNil applies the NotNil predicate on the "benefit_type" field.
func BenefitTypeNotNil() predicate.Good {
	return predicate.Good(sql.FieldNotNull(FieldBenefitType))
}

// BenefitTypeEqualFold applies the EqualFold predicate on the "benefit_type" field.
func BenefitTypeEqualFold(v string) predicate.Good {
	return predicate.Good(sql.FieldEqualFold(FieldBenefitType, v))
}

// BenefitTypeContainsFold applies the ContainsFold predicate on the "benefit_type" field.
func BenefitTypeContainsFold(v string) predicate.Good {
	return predicate.Good(sql.FieldContainsFold(FieldBenefitType, v))
}

// GoodTypeEQ applies the EQ predicate on the "good_type" field.
func GoodTypeEQ(v string) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldGoodType, v))
}

// GoodTypeNEQ applies the NEQ predicate on the "good_type" field.
func GoodTypeNEQ(v string) predicate.Good {
	return predicate.Good(sql.FieldNEQ(FieldGoodType, v))
}

// GoodTypeIn applies the In predicate on the "good_type" field.
func GoodTypeIn(vs ...string) predicate.Good {
	return predicate.Good(sql.FieldIn(FieldGoodType, vs...))
}

// GoodTypeNotIn applies the NotIn predicate on the "good_type" field.
func GoodTypeNotIn(vs ...string) predicate.Good {
	return predicate.Good(sql.FieldNotIn(FieldGoodType, vs...))
}

// GoodTypeGT applies the GT predicate on the "good_type" field.
func GoodTypeGT(v string) predicate.Good {
	return predicate.Good(sql.FieldGT(FieldGoodType, v))
}

// GoodTypeGTE applies the GTE predicate on the "good_type" field.
func GoodTypeGTE(v string) predicate.Good {
	return predicate.Good(sql.FieldGTE(FieldGoodType, v))
}

// GoodTypeLT applies the LT predicate on the "good_type" field.
func GoodTypeLT(v string) predicate.Good {
	return predicate.Good(sql.FieldLT(FieldGoodType, v))
}

// GoodTypeLTE applies the LTE predicate on the "good_type" field.
func GoodTypeLTE(v string) predicate.Good {
	return predicate.Good(sql.FieldLTE(FieldGoodType, v))
}

// GoodTypeContains applies the Contains predicate on the "good_type" field.
func GoodTypeContains(v string) predicate.Good {
	return predicate.Good(sql.FieldContains(FieldGoodType, v))
}

// GoodTypeHasPrefix applies the HasPrefix predicate on the "good_type" field.
func GoodTypeHasPrefix(v string) predicate.Good {
	return predicate.Good(sql.FieldHasPrefix(FieldGoodType, v))
}

// GoodTypeHasSuffix applies the HasSuffix predicate on the "good_type" field.
func GoodTypeHasSuffix(v string) predicate.Good {
	return predicate.Good(sql.FieldHasSuffix(FieldGoodType, v))
}

// GoodTypeIsNil applies the IsNil predicate on the "good_type" field.
func GoodTypeIsNil() predicate.Good {
	return predicate.Good(sql.FieldIsNull(FieldGoodType))
}

// GoodTypeNotNil applies the NotNil predicate on the "good_type" field.
func GoodTypeNotNil() predicate.Good {
	return predicate.Good(sql.FieldNotNull(FieldGoodType))
}

// GoodTypeEqualFold applies the EqualFold predicate on the "good_type" field.
func GoodTypeEqualFold(v string) predicate.Good {
	return predicate.Good(sql.FieldEqualFold(FieldGoodType, v))
}

// GoodTypeContainsFold applies the ContainsFold predicate on the "good_type" field.
func GoodTypeContainsFold(v string) predicate.Good {
	return predicate.Good(sql.FieldContainsFold(FieldGoodType, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Good {
	return predicate.Good(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Good {
	return predicate.Good(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Good {
	return predicate.Good(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Good {
	return predicate.Good(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Good {
	return predicate.Good(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Good {
	return predicate.Good(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Good {
	return predicate.Good(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Good {
	return predicate.Good(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Good {
	return predicate.Good(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Good {
	return predicate.Good(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.Good {
	return predicate.Good(sql.FieldIsNull(FieldTitle))
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.Good {
	return predicate.Good(sql.FieldNotNull(FieldTitle))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Good {
	return predicate.Good(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Good {
	return predicate.Good(sql.FieldContainsFold(FieldTitle, v))
}

// UnitEQ applies the EQ predicate on the "unit" field.
func UnitEQ(v string) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldUnit, v))
}

// UnitNEQ applies the NEQ predicate on the "unit" field.
func UnitNEQ(v string) predicate.Good {
	return predicate.Good(sql.FieldNEQ(FieldUnit, v))
}

// UnitIn applies the In predicate on the "unit" field.
func UnitIn(vs ...string) predicate.Good {
	return predicate.Good(sql.FieldIn(FieldUnit, vs...))
}

// UnitNotIn applies the NotIn predicate on the "unit" field.
func UnitNotIn(vs ...string) predicate.Good {
	return predicate.Good(sql.FieldNotIn(FieldUnit, vs...))
}

// UnitGT applies the GT predicate on the "unit" field.
func UnitGT(v string) predicate.Good {
	return predicate.Good(sql.FieldGT(FieldUnit, v))
}

// UnitGTE applies the GTE predicate on the "unit" field.
func UnitGTE(v string) predicate.Good {
	return predicate.Good(sql.FieldGTE(FieldUnit, v))
}

// UnitLT applies the LT predicate on the "unit" field.
func UnitLT(v string) predicate.Good {
	return predicate.Good(sql.FieldLT(FieldUnit, v))
}

// UnitLTE applies the LTE predicate on the "unit" field.
func UnitLTE(v string) predicate.Good {
	return predicate.Good(sql.FieldLTE(FieldUnit, v))
}

// UnitContains applies the Contains predicate on the "unit" field.
func UnitContains(v string) predicate.Good {
	return predicate.Good(sql.FieldContains(FieldUnit, v))
}

// UnitHasPrefix applies the HasPrefix predicate on the "unit" field.
func UnitHasPrefix(v string) predicate.Good {
	return predicate.Good(sql.FieldHasPrefix(FieldUnit, v))
}

// UnitHasSuffix applies the HasSuffix predicate on the "unit" field.
func UnitHasSuffix(v string) predicate.Good {
	return predicate.Good(sql.FieldHasSuffix(FieldUnit, v))
}

// UnitIsNil applies the IsNil predicate on the "unit" field.
func UnitIsNil() predicate.Good {
	return predicate.Good(sql.FieldIsNull(FieldUnit))
}

// UnitNotNil applies the NotNil predicate on the "unit" field.
func UnitNotNil() predicate.Good {
	return predicate.Good(sql.FieldNotNull(FieldUnit))
}

// UnitEqualFold applies the EqualFold predicate on the "unit" field.
func UnitEqualFold(v string) predicate.Good {
	return predicate.Good(sql.FieldEqualFold(FieldUnit, v))
}

// UnitContainsFold applies the ContainsFold predicate on the "unit" field.
func UnitContainsFold(v string) predicate.Good {
	return predicate.Good(sql.FieldContainsFold(FieldUnit, v))
}

// QuantityUnitEQ applies the EQ predicate on the "quantity_unit" field.
func QuantityUnitEQ(v string) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldQuantityUnit, v))
}

// QuantityUnitNEQ applies the NEQ predicate on the "quantity_unit" field.
func QuantityUnitNEQ(v string) predicate.Good {
	return predicate.Good(sql.FieldNEQ(FieldQuantityUnit, v))
}

// QuantityUnitIn applies the In predicate on the "quantity_unit" field.
func QuantityUnitIn(vs ...string) predicate.Good {
	return predicate.Good(sql.FieldIn(FieldQuantityUnit, vs...))
}

// QuantityUnitNotIn applies the NotIn predicate on the "quantity_unit" field.
func QuantityUnitNotIn(vs ...string) predicate.Good {
	return predicate.Good(sql.FieldNotIn(FieldQuantityUnit, vs...))
}

// QuantityUnitGT applies the GT predicate on the "quantity_unit" field.
func QuantityUnitGT(v string) predicate.Good {
	return predicate.Good(sql.FieldGT(FieldQuantityUnit, v))
}

// QuantityUnitGTE applies the GTE predicate on the "quantity_unit" field.
func QuantityUnitGTE(v string) predicate.Good {
	return predicate.Good(sql.FieldGTE(FieldQuantityUnit, v))
}

// QuantityUnitLT applies the LT predicate on the "quantity_unit" field.
func QuantityUnitLT(v string) predicate.Good {
	return predicate.Good(sql.FieldLT(FieldQuantityUnit, v))
}

// QuantityUnitLTE applies the LTE predicate on the "quantity_unit" field.
func QuantityUnitLTE(v string) predicate.Good {
	return predicate.Good(sql.FieldLTE(FieldQuantityUnit, v))
}

// QuantityUnitContains applies the Contains predicate on the "quantity_unit" field.
func QuantityUnitContains(v string) predicate.Good {
	return predicate.Good(sql.FieldContains(FieldQuantityUnit, v))
}

// QuantityUnitHasPrefix applies the HasPrefix predicate on the "quantity_unit" field.
func QuantityUnitHasPrefix(v string) predicate.Good {
	return predicate.Good(sql.FieldHasPrefix(FieldQuantityUnit, v))
}

// QuantityUnitHasSuffix applies the HasSuffix predicate on the "quantity_unit" field.
func QuantityUnitHasSuffix(v string) predicate.Good {
	return predicate.Good(sql.FieldHasSuffix(FieldQuantityUnit, v))
}

// QuantityUnitIsNil applies the IsNil predicate on the "quantity_unit" field.
func QuantityUnitIsNil() predicate.Good {
	return predicate.Good(sql.FieldIsNull(FieldQuantityUnit))
}

// QuantityUnitNotNil applies the NotNil predicate on the "quantity_unit" field.
func QuantityUnitNotNil() predicate.Good {
	return predicate.Good(sql.FieldNotNull(FieldQuantityUnit))
}

// QuantityUnitEqualFold applies the EqualFold predicate on the "quantity_unit" field.
func QuantityUnitEqualFold(v string) predicate.Good {
	return predicate.Good(sql.FieldEqualFold(FieldQuantityUnit, v))
}

// QuantityUnitContainsFold applies the ContainsFold predicate on the "quantity_unit" field.
func QuantityUnitContainsFold(v string) predicate.Good {
	return predicate.Good(sql.FieldContainsFold(FieldQuantityUnit, v))
}

// UnitAmountEQ applies the EQ predicate on the "unit_amount" field.
func UnitAmountEQ(v int32) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldUnitAmount, v))
}

// UnitAmountNEQ applies the NEQ predicate on the "unit_amount" field.
func UnitAmountNEQ(v int32) predicate.Good {
	return predicate.Good(sql.FieldNEQ(FieldUnitAmount, v))
}

// UnitAmountIn applies the In predicate on the "unit_amount" field.
func UnitAmountIn(vs ...int32) predicate.Good {
	return predicate.Good(sql.FieldIn(FieldUnitAmount, vs...))
}

// UnitAmountNotIn applies the NotIn predicate on the "unit_amount" field.
func UnitAmountNotIn(vs ...int32) predicate.Good {
	return predicate.Good(sql.FieldNotIn(FieldUnitAmount, vs...))
}

// UnitAmountGT applies the GT predicate on the "unit_amount" field.
func UnitAmountGT(v int32) predicate.Good {
	return predicate.Good(sql.FieldGT(FieldUnitAmount, v))
}

// UnitAmountGTE applies the GTE predicate on the "unit_amount" field.
func UnitAmountGTE(v int32) predicate.Good {
	return predicate.Good(sql.FieldGTE(FieldUnitAmount, v))
}

// UnitAmountLT applies the LT predicate on the "unit_amount" field.
func UnitAmountLT(v int32) predicate.Good {
	return predicate.Good(sql.FieldLT(FieldUnitAmount, v))
}

// UnitAmountLTE applies the LTE predicate on the "unit_amount" field.
func UnitAmountLTE(v int32) predicate.Good {
	return predicate.Good(sql.FieldLTE(FieldUnitAmount, v))
}

// UnitAmountIsNil applies the IsNil predicate on the "unit_amount" field.
func UnitAmountIsNil() predicate.Good {
	return predicate.Good(sql.FieldIsNull(FieldUnitAmount))
}

// UnitAmountNotNil applies the NotNil predicate on the "unit_amount" field.
func UnitAmountNotNil() predicate.Good {
	return predicate.Good(sql.FieldNotNull(FieldUnitAmount))
}

// QuantityUnitAmountEQ applies the EQ predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountEQ(v decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldQuantityUnitAmount, v))
}

// QuantityUnitAmountNEQ applies the NEQ predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountNEQ(v decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldNEQ(FieldQuantityUnitAmount, v))
}

// QuantityUnitAmountIn applies the In predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountIn(vs ...decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldIn(FieldQuantityUnitAmount, vs...))
}

// QuantityUnitAmountNotIn applies the NotIn predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountNotIn(vs ...decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldNotIn(FieldQuantityUnitAmount, vs...))
}

// QuantityUnitAmountGT applies the GT predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountGT(v decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldGT(FieldQuantityUnitAmount, v))
}

// QuantityUnitAmountGTE applies the GTE predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountGTE(v decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldGTE(FieldQuantityUnitAmount, v))
}

// QuantityUnitAmountLT applies the LT predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountLT(v decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldLT(FieldQuantityUnitAmount, v))
}

// QuantityUnitAmountLTE applies the LTE predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountLTE(v decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldLTE(FieldQuantityUnitAmount, v))
}

// QuantityUnitAmountIsNil applies the IsNil predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountIsNil() predicate.Good {
	return predicate.Good(sql.FieldIsNull(FieldQuantityUnitAmount))
}

// QuantityUnitAmountNotNil applies the NotNil predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountNotNil() predicate.Good {
	return predicate.Good(sql.FieldNotNull(FieldQuantityUnitAmount))
}

// DeliveryAtEQ applies the EQ predicate on the "delivery_at" field.
func DeliveryAtEQ(v uint32) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldDeliveryAt, v))
}

// DeliveryAtNEQ applies the NEQ predicate on the "delivery_at" field.
func DeliveryAtNEQ(v uint32) predicate.Good {
	return predicate.Good(sql.FieldNEQ(FieldDeliveryAt, v))
}

// DeliveryAtIn applies the In predicate on the "delivery_at" field.
func DeliveryAtIn(vs ...uint32) predicate.Good {
	return predicate.Good(sql.FieldIn(FieldDeliveryAt, vs...))
}

// DeliveryAtNotIn applies the NotIn predicate on the "delivery_at" field.
func DeliveryAtNotIn(vs ...uint32) predicate.Good {
	return predicate.Good(sql.FieldNotIn(FieldDeliveryAt, vs...))
}

// DeliveryAtGT applies the GT predicate on the "delivery_at" field.
func DeliveryAtGT(v uint32) predicate.Good {
	return predicate.Good(sql.FieldGT(FieldDeliveryAt, v))
}

// DeliveryAtGTE applies the GTE predicate on the "delivery_at" field.
func DeliveryAtGTE(v uint32) predicate.Good {
	return predicate.Good(sql.FieldGTE(FieldDeliveryAt, v))
}

// DeliveryAtLT applies the LT predicate on the "delivery_at" field.
func DeliveryAtLT(v uint32) predicate.Good {
	return predicate.Good(sql.FieldLT(FieldDeliveryAt, v))
}

// DeliveryAtLTE applies the LTE predicate on the "delivery_at" field.
func DeliveryAtLTE(v uint32) predicate.Good {
	return predicate.Good(sql.FieldLTE(FieldDeliveryAt, v))
}

// DeliveryAtIsNil applies the IsNil predicate on the "delivery_at" field.
func DeliveryAtIsNil() predicate.Good {
	return predicate.Good(sql.FieldIsNull(FieldDeliveryAt))
}

// DeliveryAtNotNil applies the NotNil predicate on the "delivery_at" field.
func DeliveryAtNotNil() predicate.Good {
	return predicate.Good(sql.FieldNotNull(FieldDeliveryAt))
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v uint32) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldStartAt, v))
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v uint32) predicate.Good {
	return predicate.Good(sql.FieldNEQ(FieldStartAt, v))
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...uint32) predicate.Good {
	return predicate.Good(sql.FieldIn(FieldStartAt, vs...))
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...uint32) predicate.Good {
	return predicate.Good(sql.FieldNotIn(FieldStartAt, vs...))
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v uint32) predicate.Good {
	return predicate.Good(sql.FieldGT(FieldStartAt, v))
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v uint32) predicate.Good {
	return predicate.Good(sql.FieldGTE(FieldStartAt, v))
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v uint32) predicate.Good {
	return predicate.Good(sql.FieldLT(FieldStartAt, v))
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v uint32) predicate.Good {
	return predicate.Good(sql.FieldLTE(FieldStartAt, v))
}

// StartAtIsNil applies the IsNil predicate on the "start_at" field.
func StartAtIsNil() predicate.Good {
	return predicate.Good(sql.FieldIsNull(FieldStartAt))
}

// StartAtNotNil applies the NotNil predicate on the "start_at" field.
func StartAtNotNil() predicate.Good {
	return predicate.Good(sql.FieldNotNull(FieldStartAt))
}

// StartModeEQ applies the EQ predicate on the "start_mode" field.
func StartModeEQ(v string) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldStartMode, v))
}

// StartModeNEQ applies the NEQ predicate on the "start_mode" field.
func StartModeNEQ(v string) predicate.Good {
	return predicate.Good(sql.FieldNEQ(FieldStartMode, v))
}

// StartModeIn applies the In predicate on the "start_mode" field.
func StartModeIn(vs ...string) predicate.Good {
	return predicate.Good(sql.FieldIn(FieldStartMode, vs...))
}

// StartModeNotIn applies the NotIn predicate on the "start_mode" field.
func StartModeNotIn(vs ...string) predicate.Good {
	return predicate.Good(sql.FieldNotIn(FieldStartMode, vs...))
}

// StartModeGT applies the GT predicate on the "start_mode" field.
func StartModeGT(v string) predicate.Good {
	return predicate.Good(sql.FieldGT(FieldStartMode, v))
}

// StartModeGTE applies the GTE predicate on the "start_mode" field.
func StartModeGTE(v string) predicate.Good {
	return predicate.Good(sql.FieldGTE(FieldStartMode, v))
}

// StartModeLT applies the LT predicate on the "start_mode" field.
func StartModeLT(v string) predicate.Good {
	return predicate.Good(sql.FieldLT(FieldStartMode, v))
}

// StartModeLTE applies the LTE predicate on the "start_mode" field.
func StartModeLTE(v string) predicate.Good {
	return predicate.Good(sql.FieldLTE(FieldStartMode, v))
}

// StartModeContains applies the Contains predicate on the "start_mode" field.
func StartModeContains(v string) predicate.Good {
	return predicate.Good(sql.FieldContains(FieldStartMode, v))
}

// StartModeHasPrefix applies the HasPrefix predicate on the "start_mode" field.
func StartModeHasPrefix(v string) predicate.Good {
	return predicate.Good(sql.FieldHasPrefix(FieldStartMode, v))
}

// StartModeHasSuffix applies the HasSuffix predicate on the "start_mode" field.
func StartModeHasSuffix(v string) predicate.Good {
	return predicate.Good(sql.FieldHasSuffix(FieldStartMode, v))
}

// StartModeIsNil applies the IsNil predicate on the "start_mode" field.
func StartModeIsNil() predicate.Good {
	return predicate.Good(sql.FieldIsNull(FieldStartMode))
}

// StartModeNotNil applies the NotNil predicate on the "start_mode" field.
func StartModeNotNil() predicate.Good {
	return predicate.Good(sql.FieldNotNull(FieldStartMode))
}

// StartModeEqualFold applies the EqualFold predicate on the "start_mode" field.
func StartModeEqualFold(v string) predicate.Good {
	return predicate.Good(sql.FieldEqualFold(FieldStartMode, v))
}

// StartModeContainsFold applies the ContainsFold predicate on the "start_mode" field.
func StartModeContainsFold(v string) predicate.Good {
	return predicate.Good(sql.FieldContainsFold(FieldStartMode, v))
}

// TestOnlyEQ applies the EQ predicate on the "test_only" field.
func TestOnlyEQ(v bool) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldTestOnly, v))
}

// TestOnlyNEQ applies the NEQ predicate on the "test_only" field.
func TestOnlyNEQ(v bool) predicate.Good {
	return predicate.Good(sql.FieldNEQ(FieldTestOnly, v))
}

// TestOnlyIsNil applies the IsNil predicate on the "test_only" field.
func TestOnlyIsNil() predicate.Good {
	return predicate.Good(sql.FieldIsNull(FieldTestOnly))
}

// TestOnlyNotNil applies the NotNil predicate on the "test_only" field.
func TestOnlyNotNil() predicate.Good {
	return predicate.Good(sql.FieldNotNull(FieldTestOnly))
}

// BenefitIntervalHoursEQ applies the EQ predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursEQ(v uint32) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldBenefitIntervalHours, v))
}

// BenefitIntervalHoursNEQ applies the NEQ predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursNEQ(v uint32) predicate.Good {
	return predicate.Good(sql.FieldNEQ(FieldBenefitIntervalHours, v))
}

// BenefitIntervalHoursIn applies the In predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursIn(vs ...uint32) predicate.Good {
	return predicate.Good(sql.FieldIn(FieldBenefitIntervalHours, vs...))
}

// BenefitIntervalHoursNotIn applies the NotIn predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursNotIn(vs ...uint32) predicate.Good {
	return predicate.Good(sql.FieldNotIn(FieldBenefitIntervalHours, vs...))
}

// BenefitIntervalHoursGT applies the GT predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursGT(v uint32) predicate.Good {
	return predicate.Good(sql.FieldGT(FieldBenefitIntervalHours, v))
}

// BenefitIntervalHoursGTE applies the GTE predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursGTE(v uint32) predicate.Good {
	return predicate.Good(sql.FieldGTE(FieldBenefitIntervalHours, v))
}

// BenefitIntervalHoursLT applies the LT predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursLT(v uint32) predicate.Good {
	return predicate.Good(sql.FieldLT(FieldBenefitIntervalHours, v))
}

// BenefitIntervalHoursLTE applies the LTE predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursLTE(v uint32) predicate.Good {
	return predicate.Good(sql.FieldLTE(FieldBenefitIntervalHours, v))
}

// BenefitIntervalHoursIsNil applies the IsNil predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursIsNil() predicate.Good {
	return predicate.Good(sql.FieldIsNull(FieldBenefitIntervalHours))
}

// BenefitIntervalHoursNotNil applies the NotNil predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursNotNil() predicate.Good {
	return predicate.Good(sql.FieldNotNull(FieldBenefitIntervalHours))
}

// UnitLockDepositEQ applies the EQ predicate on the "unit_lock_deposit" field.
func UnitLockDepositEQ(v decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldUnitLockDeposit, v))
}

// UnitLockDepositNEQ applies the NEQ predicate on the "unit_lock_deposit" field.
func UnitLockDepositNEQ(v decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldNEQ(FieldUnitLockDeposit, v))
}

// UnitLockDepositIn applies the In predicate on the "unit_lock_deposit" field.
func UnitLockDepositIn(vs ...decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldIn(FieldUnitLockDeposit, vs...))
}

// UnitLockDepositNotIn applies the NotIn predicate on the "unit_lock_deposit" field.
func UnitLockDepositNotIn(vs ...decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldNotIn(FieldUnitLockDeposit, vs...))
}

// UnitLockDepositGT applies the GT predicate on the "unit_lock_deposit" field.
func UnitLockDepositGT(v decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldGT(FieldUnitLockDeposit, v))
}

// UnitLockDepositGTE applies the GTE predicate on the "unit_lock_deposit" field.
func UnitLockDepositGTE(v decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldGTE(FieldUnitLockDeposit, v))
}

// UnitLockDepositLT applies the LT predicate on the "unit_lock_deposit" field.
func UnitLockDepositLT(v decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldLT(FieldUnitLockDeposit, v))
}

// UnitLockDepositLTE applies the LTE predicate on the "unit_lock_deposit" field.
func UnitLockDepositLTE(v decimal.Decimal) predicate.Good {
	return predicate.Good(sql.FieldLTE(FieldUnitLockDeposit, v))
}

// UnitLockDepositIsNil applies the IsNil predicate on the "unit_lock_deposit" field.
func UnitLockDepositIsNil() predicate.Good {
	return predicate.Good(sql.FieldIsNull(FieldUnitLockDeposit))
}

// UnitLockDepositNotNil applies the NotNil predicate on the "unit_lock_deposit" field.
func UnitLockDepositNotNil() predicate.Good {
	return predicate.Good(sql.FieldNotNull(FieldUnitLockDeposit))
}

// UnitTypeEQ applies the EQ predicate on the "unit_type" field.
func UnitTypeEQ(v string) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldUnitType, v))
}

// UnitTypeNEQ applies the NEQ predicate on the "unit_type" field.
func UnitTypeNEQ(v string) predicate.Good {
	return predicate.Good(sql.FieldNEQ(FieldUnitType, v))
}

// UnitTypeIn applies the In predicate on the "unit_type" field.
func UnitTypeIn(vs ...string) predicate.Good {
	return predicate.Good(sql.FieldIn(FieldUnitType, vs...))
}

// UnitTypeNotIn applies the NotIn predicate on the "unit_type" field.
func UnitTypeNotIn(vs ...string) predicate.Good {
	return predicate.Good(sql.FieldNotIn(FieldUnitType, vs...))
}

// UnitTypeGT applies the GT predicate on the "unit_type" field.
func UnitTypeGT(v string) predicate.Good {
	return predicate.Good(sql.FieldGT(FieldUnitType, v))
}

// UnitTypeGTE applies the GTE predicate on the "unit_type" field.
func UnitTypeGTE(v string) predicate.Good {
	return predicate.Good(sql.FieldGTE(FieldUnitType, v))
}

// UnitTypeLT applies the LT predicate on the "unit_type" field.
func UnitTypeLT(v string) predicate.Good {
	return predicate.Good(sql.FieldLT(FieldUnitType, v))
}

// UnitTypeLTE applies the LTE predicate on the "unit_type" field.
func UnitTypeLTE(v string) predicate.Good {
	return predicate.Good(sql.FieldLTE(FieldUnitType, v))
}

// UnitTypeContains applies the Contains predicate on the "unit_type" field.
func UnitTypeContains(v string) predicate.Good {
	return predicate.Good(sql.FieldContains(FieldUnitType, v))
}

// UnitTypeHasPrefix applies the HasPrefix predicate on the "unit_type" field.
func UnitTypeHasPrefix(v string) predicate.Good {
	return predicate.Good(sql.FieldHasPrefix(FieldUnitType, v))
}

// UnitTypeHasSuffix applies the HasSuffix predicate on the "unit_type" field.
func UnitTypeHasSuffix(v string) predicate.Good {
	return predicate.Good(sql.FieldHasSuffix(FieldUnitType, v))
}

// UnitTypeIsNil applies the IsNil predicate on the "unit_type" field.
func UnitTypeIsNil() predicate.Good {
	return predicate.Good(sql.FieldIsNull(FieldUnitType))
}

// UnitTypeNotNil applies the NotNil predicate on the "unit_type" field.
func UnitTypeNotNil() predicate.Good {
	return predicate.Good(sql.FieldNotNull(FieldUnitType))
}

// UnitTypeEqualFold applies the EqualFold predicate on the "unit_type" field.
func UnitTypeEqualFold(v string) predicate.Good {
	return predicate.Good(sql.FieldEqualFold(FieldUnitType, v))
}

// UnitTypeContainsFold applies the ContainsFold predicate on the "unit_type" field.
func UnitTypeContainsFold(v string) predicate.Good {
	return predicate.Good(sql.FieldContainsFold(FieldUnitType, v))
}

// QuantityCalculateTypeEQ applies the EQ predicate on the "quantity_calculate_type" field.
func QuantityCalculateTypeEQ(v string) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldQuantityCalculateType, v))
}

// QuantityCalculateTypeNEQ applies the NEQ predicate on the "quantity_calculate_type" field.
func QuantityCalculateTypeNEQ(v string) predicate.Good {
	return predicate.Good(sql.FieldNEQ(FieldQuantityCalculateType, v))
}

// QuantityCalculateTypeIn applies the In predicate on the "quantity_calculate_type" field.
func QuantityCalculateTypeIn(vs ...string) predicate.Good {
	return predicate.Good(sql.FieldIn(FieldQuantityCalculateType, vs...))
}

// QuantityCalculateTypeNotIn applies the NotIn predicate on the "quantity_calculate_type" field.
func QuantityCalculateTypeNotIn(vs ...string) predicate.Good {
	return predicate.Good(sql.FieldNotIn(FieldQuantityCalculateType, vs...))
}

// QuantityCalculateTypeGT applies the GT predicate on the "quantity_calculate_type" field.
func QuantityCalculateTypeGT(v string) predicate.Good {
	return predicate.Good(sql.FieldGT(FieldQuantityCalculateType, v))
}

// QuantityCalculateTypeGTE applies the GTE predicate on the "quantity_calculate_type" field.
func QuantityCalculateTypeGTE(v string) predicate.Good {
	return predicate.Good(sql.FieldGTE(FieldQuantityCalculateType, v))
}

// QuantityCalculateTypeLT applies the LT predicate on the "quantity_calculate_type" field.
func QuantityCalculateTypeLT(v string) predicate.Good {
	return predicate.Good(sql.FieldLT(FieldQuantityCalculateType, v))
}

// QuantityCalculateTypeLTE applies the LTE predicate on the "quantity_calculate_type" field.
func QuantityCalculateTypeLTE(v string) predicate.Good {
	return predicate.Good(sql.FieldLTE(FieldQuantityCalculateType, v))
}

// QuantityCalculateTypeContains applies the Contains predicate on the "quantity_calculate_type" field.
func QuantityCalculateTypeContains(v string) predicate.Good {
	return predicate.Good(sql.FieldContains(FieldQuantityCalculateType, v))
}

// QuantityCalculateTypeHasPrefix applies the HasPrefix predicate on the "quantity_calculate_type" field.
func QuantityCalculateTypeHasPrefix(v string) predicate.Good {
	return predicate.Good(sql.FieldHasPrefix(FieldQuantityCalculateType, v))
}

// QuantityCalculateTypeHasSuffix applies the HasSuffix predicate on the "quantity_calculate_type" field.
func QuantityCalculateTypeHasSuffix(v string) predicate.Good {
	return predicate.Good(sql.FieldHasSuffix(FieldQuantityCalculateType, v))
}

// QuantityCalculateTypeIsNil applies the IsNil predicate on the "quantity_calculate_type" field.
func QuantityCalculateTypeIsNil() predicate.Good {
	return predicate.Good(sql.FieldIsNull(FieldQuantityCalculateType))
}

// QuantityCalculateTypeNotNil applies the NotNil predicate on the "quantity_calculate_type" field.
func QuantityCalculateTypeNotNil() predicate.Good {
	return predicate.Good(sql.FieldNotNull(FieldQuantityCalculateType))
}

// QuantityCalculateTypeEqualFold applies the EqualFold predicate on the "quantity_calculate_type" field.
func QuantityCalculateTypeEqualFold(v string) predicate.Good {
	return predicate.Good(sql.FieldEqualFold(FieldQuantityCalculateType, v))
}

// QuantityCalculateTypeContainsFold applies the ContainsFold predicate on the "quantity_calculate_type" field.
func QuantityCalculateTypeContainsFold(v string) predicate.Good {
	return predicate.Good(sql.FieldContainsFold(FieldQuantityCalculateType, v))
}

// DurationTypeEQ applies the EQ predicate on the "duration_type" field.
func DurationTypeEQ(v string) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldDurationType, v))
}

// DurationTypeNEQ applies the NEQ predicate on the "duration_type" field.
func DurationTypeNEQ(v string) predicate.Good {
	return predicate.Good(sql.FieldNEQ(FieldDurationType, v))
}

// DurationTypeIn applies the In predicate on the "duration_type" field.
func DurationTypeIn(vs ...string) predicate.Good {
	return predicate.Good(sql.FieldIn(FieldDurationType, vs...))
}

// DurationTypeNotIn applies the NotIn predicate on the "duration_type" field.
func DurationTypeNotIn(vs ...string) predicate.Good {
	return predicate.Good(sql.FieldNotIn(FieldDurationType, vs...))
}

// DurationTypeGT applies the GT predicate on the "duration_type" field.
func DurationTypeGT(v string) predicate.Good {
	return predicate.Good(sql.FieldGT(FieldDurationType, v))
}

// DurationTypeGTE applies the GTE predicate on the "duration_type" field.
func DurationTypeGTE(v string) predicate.Good {
	return predicate.Good(sql.FieldGTE(FieldDurationType, v))
}

// DurationTypeLT applies the LT predicate on the "duration_type" field.
func DurationTypeLT(v string) predicate.Good {
	return predicate.Good(sql.FieldLT(FieldDurationType, v))
}

// DurationTypeLTE applies the LTE predicate on the "duration_type" field.
func DurationTypeLTE(v string) predicate.Good {
	return predicate.Good(sql.FieldLTE(FieldDurationType, v))
}

// DurationTypeContains applies the Contains predicate on the "duration_type" field.
func DurationTypeContains(v string) predicate.Good {
	return predicate.Good(sql.FieldContains(FieldDurationType, v))
}

// DurationTypeHasPrefix applies the HasPrefix predicate on the "duration_type" field.
func DurationTypeHasPrefix(v string) predicate.Good {
	return predicate.Good(sql.FieldHasPrefix(FieldDurationType, v))
}

// DurationTypeHasSuffix applies the HasSuffix predicate on the "duration_type" field.
func DurationTypeHasSuffix(v string) predicate.Good {
	return predicate.Good(sql.FieldHasSuffix(FieldDurationType, v))
}

// DurationTypeIsNil applies the IsNil predicate on the "duration_type" field.
func DurationTypeIsNil() predicate.Good {
	return predicate.Good(sql.FieldIsNull(FieldDurationType))
}

// DurationTypeNotNil applies the NotNil predicate on the "duration_type" field.
func DurationTypeNotNil() predicate.Good {
	return predicate.Good(sql.FieldNotNull(FieldDurationType))
}

// DurationTypeEqualFold applies the EqualFold predicate on the "duration_type" field.
func DurationTypeEqualFold(v string) predicate.Good {
	return predicate.Good(sql.FieldEqualFold(FieldDurationType, v))
}

// DurationTypeContainsFold applies the ContainsFold predicate on the "duration_type" field.
func DurationTypeContainsFold(v string) predicate.Good {
	return predicate.Good(sql.FieldContainsFold(FieldDurationType, v))
}

// DurationCalculateTypeEQ applies the EQ predicate on the "duration_calculate_type" field.
func DurationCalculateTypeEQ(v string) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldDurationCalculateType, v))
}

// DurationCalculateTypeNEQ applies the NEQ predicate on the "duration_calculate_type" field.
func DurationCalculateTypeNEQ(v string) predicate.Good {
	return predicate.Good(sql.FieldNEQ(FieldDurationCalculateType, v))
}

// DurationCalculateTypeIn applies the In predicate on the "duration_calculate_type" field.
func DurationCalculateTypeIn(vs ...string) predicate.Good {
	return predicate.Good(sql.FieldIn(FieldDurationCalculateType, vs...))
}

// DurationCalculateTypeNotIn applies the NotIn predicate on the "duration_calculate_type" field.
func DurationCalculateTypeNotIn(vs ...string) predicate.Good {
	return predicate.Good(sql.FieldNotIn(FieldDurationCalculateType, vs...))
}

// DurationCalculateTypeGT applies the GT predicate on the "duration_calculate_type" field.
func DurationCalculateTypeGT(v string) predicate.Good {
	return predicate.Good(sql.FieldGT(FieldDurationCalculateType, v))
}

// DurationCalculateTypeGTE applies the GTE predicate on the "duration_calculate_type" field.
func DurationCalculateTypeGTE(v string) predicate.Good {
	return predicate.Good(sql.FieldGTE(FieldDurationCalculateType, v))
}

// DurationCalculateTypeLT applies the LT predicate on the "duration_calculate_type" field.
func DurationCalculateTypeLT(v string) predicate.Good {
	return predicate.Good(sql.FieldLT(FieldDurationCalculateType, v))
}

// DurationCalculateTypeLTE applies the LTE predicate on the "duration_calculate_type" field.
func DurationCalculateTypeLTE(v string) predicate.Good {
	return predicate.Good(sql.FieldLTE(FieldDurationCalculateType, v))
}

// DurationCalculateTypeContains applies the Contains predicate on the "duration_calculate_type" field.
func DurationCalculateTypeContains(v string) predicate.Good {
	return predicate.Good(sql.FieldContains(FieldDurationCalculateType, v))
}

// DurationCalculateTypeHasPrefix applies the HasPrefix predicate on the "duration_calculate_type" field.
func DurationCalculateTypeHasPrefix(v string) predicate.Good {
	return predicate.Good(sql.FieldHasPrefix(FieldDurationCalculateType, v))
}

// DurationCalculateTypeHasSuffix applies the HasSuffix predicate on the "duration_calculate_type" field.
func DurationCalculateTypeHasSuffix(v string) predicate.Good {
	return predicate.Good(sql.FieldHasSuffix(FieldDurationCalculateType, v))
}

// DurationCalculateTypeIsNil applies the IsNil predicate on the "duration_calculate_type" field.
func DurationCalculateTypeIsNil() predicate.Good {
	return predicate.Good(sql.FieldIsNull(FieldDurationCalculateType))
}

// DurationCalculateTypeNotNil applies the NotNil predicate on the "duration_calculate_type" field.
func DurationCalculateTypeNotNil() predicate.Good {
	return predicate.Good(sql.FieldNotNull(FieldDurationCalculateType))
}

// DurationCalculateTypeEqualFold applies the EqualFold predicate on the "duration_calculate_type" field.
func DurationCalculateTypeEqualFold(v string) predicate.Good {
	return predicate.Good(sql.FieldEqualFold(FieldDurationCalculateType, v))
}

// DurationCalculateTypeContainsFold applies the ContainsFold predicate on the "duration_calculate_type" field.
func DurationCalculateTypeContainsFold(v string) predicate.Good {
	return predicate.Good(sql.FieldContainsFold(FieldDurationCalculateType, v))
}

// SettlementTypeEQ applies the EQ predicate on the "settlement_type" field.
func SettlementTypeEQ(v string) predicate.Good {
	return predicate.Good(sql.FieldEQ(FieldSettlementType, v))
}

// SettlementTypeNEQ applies the NEQ predicate on the "settlement_type" field.
func SettlementTypeNEQ(v string) predicate.Good {
	return predicate.Good(sql.FieldNEQ(FieldSettlementType, v))
}

// SettlementTypeIn applies the In predicate on the "settlement_type" field.
func SettlementTypeIn(vs ...string) predicate.Good {
	return predicate.Good(sql.FieldIn(FieldSettlementType, vs...))
}

// SettlementTypeNotIn applies the NotIn predicate on the "settlement_type" field.
func SettlementTypeNotIn(vs ...string) predicate.Good {
	return predicate.Good(sql.FieldNotIn(FieldSettlementType, vs...))
}

// SettlementTypeGT applies the GT predicate on the "settlement_type" field.
func SettlementTypeGT(v string) predicate.Good {
	return predicate.Good(sql.FieldGT(FieldSettlementType, v))
}

// SettlementTypeGTE applies the GTE predicate on the "settlement_type" field.
func SettlementTypeGTE(v string) predicate.Good {
	return predicate.Good(sql.FieldGTE(FieldSettlementType, v))
}

// SettlementTypeLT applies the LT predicate on the "settlement_type" field.
func SettlementTypeLT(v string) predicate.Good {
	return predicate.Good(sql.FieldLT(FieldSettlementType, v))
}

// SettlementTypeLTE applies the LTE predicate on the "settlement_type" field.
func SettlementTypeLTE(v string) predicate.Good {
	return predicate.Good(sql.FieldLTE(FieldSettlementType, v))
}

// SettlementTypeContains applies the Contains predicate on the "settlement_type" field.
func SettlementTypeContains(v string) predicate.Good {
	return predicate.Good(sql.FieldContains(FieldSettlementType, v))
}

// SettlementTypeHasPrefix applies the HasPrefix predicate on the "settlement_type" field.
func SettlementTypeHasPrefix(v string) predicate.Good {
	return predicate.Good(sql.FieldHasPrefix(FieldSettlementType, v))
}

// SettlementTypeHasSuffix applies the HasSuffix predicate on the "settlement_type" field.
func SettlementTypeHasSuffix(v string) predicate.Good {
	return predicate.Good(sql.FieldHasSuffix(FieldSettlementType, v))
}

// SettlementTypeIsNil applies the IsNil predicate on the "settlement_type" field.
func SettlementTypeIsNil() predicate.Good {
	return predicate.Good(sql.FieldIsNull(FieldSettlementType))
}

// SettlementTypeNotNil applies the NotNil predicate on the "settlement_type" field.
func SettlementTypeNotNil() predicate.Good {
	return predicate.Good(sql.FieldNotNull(FieldSettlementType))
}

// SettlementTypeEqualFold applies the EqualFold predicate on the "settlement_type" field.
func SettlementTypeEqualFold(v string) predicate.Good {
	return predicate.Good(sql.FieldEqualFold(FieldSettlementType, v))
}

// SettlementTypeContainsFold applies the ContainsFold predicate on the "settlement_type" field.
func SettlementTypeContainsFold(v string) predicate.Good {
	return predicate.Good(sql.FieldContainsFold(FieldSettlementType, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Good) predicate.Good {
	return predicate.Good(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Good) predicate.Good {
	return predicate.Good(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Good) predicate.Good {
	return predicate.Good(sql.NotPredicates(p))
}

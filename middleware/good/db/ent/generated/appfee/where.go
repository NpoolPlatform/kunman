// Code generated by ent, DO NOT EDIT.

package appfee

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.AppFee {
	return predicate.AppFee(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.AppFee {
	return predicate.AppFee(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.AppFee {
	return predicate.AppFee(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.AppFee {
	return predicate.AppFee(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.AppFee {
	return predicate.AppFee(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.AppFee {
	return predicate.AppFee(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.AppFee {
	return predicate.AppFee(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.AppFee {
	return predicate.AppFee(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.AppFee {
	return predicate.AppFee(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.AppFee {
	return predicate.AppFee(sql.FieldEQ(FieldEntID, v))
}

// AppGoodID applies equality check predicate on the "app_good_id" field. It's identical to AppGoodIDEQ.
func AppGoodID(v uuid.UUID) predicate.AppFee {
	return predicate.AppFee(sql.FieldEQ(FieldAppGoodID, v))
}

// UnitValue applies equality check predicate on the "unit_value" field. It's identical to UnitValueEQ.
func UnitValue(v decimal.Decimal) predicate.AppFee {
	return predicate.AppFee(sql.FieldEQ(FieldUnitValue, v))
}

// CancelMode applies equality check predicate on the "cancel_mode" field. It's identical to CancelModeEQ.
func CancelMode(v string) predicate.AppFee {
	return predicate.AppFee(sql.FieldEQ(FieldCancelMode, v))
}

// MinOrderDurationSeconds applies equality check predicate on the "min_order_duration_seconds" field. It's identical to MinOrderDurationSecondsEQ.
func MinOrderDurationSeconds(v uint32) predicate.AppFee {
	return predicate.AppFee(sql.FieldEQ(FieldMinOrderDurationSeconds, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.AppFee {
	return predicate.AppFee(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.AppFee {
	return predicate.AppFee(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.AppFee {
	return predicate.AppFee(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.AppFee {
	return predicate.AppFee(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.AppFee {
	return predicate.AppFee(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.AppFee {
	return predicate.AppFee(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.AppFee {
	return predicate.AppFee(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.AppFee {
	return predicate.AppFee(sql.FieldLTE(FieldEntID, v))
}

// AppGoodIDEQ applies the EQ predicate on the "app_good_id" field.
func AppGoodIDEQ(v uuid.UUID) predicate.AppFee {
	return predicate.AppFee(sql.FieldEQ(FieldAppGoodID, v))
}

// AppGoodIDNEQ applies the NEQ predicate on the "app_good_id" field.
func AppGoodIDNEQ(v uuid.UUID) predicate.AppFee {
	return predicate.AppFee(sql.FieldNEQ(FieldAppGoodID, v))
}

// AppGoodIDIn applies the In predicate on the "app_good_id" field.
func AppGoodIDIn(vs ...uuid.UUID) predicate.AppFee {
	return predicate.AppFee(sql.FieldIn(FieldAppGoodID, vs...))
}

// AppGoodIDNotIn applies the NotIn predicate on the "app_good_id" field.
func AppGoodIDNotIn(vs ...uuid.UUID) predicate.AppFee {
	return predicate.AppFee(sql.FieldNotIn(FieldAppGoodID, vs...))
}

// AppGoodIDGT applies the GT predicate on the "app_good_id" field.
func AppGoodIDGT(v uuid.UUID) predicate.AppFee {
	return predicate.AppFee(sql.FieldGT(FieldAppGoodID, v))
}

// AppGoodIDGTE applies the GTE predicate on the "app_good_id" field.
func AppGoodIDGTE(v uuid.UUID) predicate.AppFee {
	return predicate.AppFee(sql.FieldGTE(FieldAppGoodID, v))
}

// AppGoodIDLT applies the LT predicate on the "app_good_id" field.
func AppGoodIDLT(v uuid.UUID) predicate.AppFee {
	return predicate.AppFee(sql.FieldLT(FieldAppGoodID, v))
}

// AppGoodIDLTE applies the LTE predicate on the "app_good_id" field.
func AppGoodIDLTE(v uuid.UUID) predicate.AppFee {
	return predicate.AppFee(sql.FieldLTE(FieldAppGoodID, v))
}

// AppGoodIDIsNil applies the IsNil predicate on the "app_good_id" field.
func AppGoodIDIsNil() predicate.AppFee {
	return predicate.AppFee(sql.FieldIsNull(FieldAppGoodID))
}

// AppGoodIDNotNil applies the NotNil predicate on the "app_good_id" field.
func AppGoodIDNotNil() predicate.AppFee {
	return predicate.AppFee(sql.FieldNotNull(FieldAppGoodID))
}

// UnitValueEQ applies the EQ predicate on the "unit_value" field.
func UnitValueEQ(v decimal.Decimal) predicate.AppFee {
	return predicate.AppFee(sql.FieldEQ(FieldUnitValue, v))
}

// UnitValueNEQ applies the NEQ predicate on the "unit_value" field.
func UnitValueNEQ(v decimal.Decimal) predicate.AppFee {
	return predicate.AppFee(sql.FieldNEQ(FieldUnitValue, v))
}

// UnitValueIn applies the In predicate on the "unit_value" field.
func UnitValueIn(vs ...decimal.Decimal) predicate.AppFee {
	return predicate.AppFee(sql.FieldIn(FieldUnitValue, vs...))
}

// UnitValueNotIn applies the NotIn predicate on the "unit_value" field.
func UnitValueNotIn(vs ...decimal.Decimal) predicate.AppFee {
	return predicate.AppFee(sql.FieldNotIn(FieldUnitValue, vs...))
}

// UnitValueGT applies the GT predicate on the "unit_value" field.
func UnitValueGT(v decimal.Decimal) predicate.AppFee {
	return predicate.AppFee(sql.FieldGT(FieldUnitValue, v))
}

// UnitValueGTE applies the GTE predicate on the "unit_value" field.
func UnitValueGTE(v decimal.Decimal) predicate.AppFee {
	return predicate.AppFee(sql.FieldGTE(FieldUnitValue, v))
}

// UnitValueLT applies the LT predicate on the "unit_value" field.
func UnitValueLT(v decimal.Decimal) predicate.AppFee {
	return predicate.AppFee(sql.FieldLT(FieldUnitValue, v))
}

// UnitValueLTE applies the LTE predicate on the "unit_value" field.
func UnitValueLTE(v decimal.Decimal) predicate.AppFee {
	return predicate.AppFee(sql.FieldLTE(FieldUnitValue, v))
}

// UnitValueIsNil applies the IsNil predicate on the "unit_value" field.
func UnitValueIsNil() predicate.AppFee {
	return predicate.AppFee(sql.FieldIsNull(FieldUnitValue))
}

// UnitValueNotNil applies the NotNil predicate on the "unit_value" field.
func UnitValueNotNil() predicate.AppFee {
	return predicate.AppFee(sql.FieldNotNull(FieldUnitValue))
}

// CancelModeEQ applies the EQ predicate on the "cancel_mode" field.
func CancelModeEQ(v string) predicate.AppFee {
	return predicate.AppFee(sql.FieldEQ(FieldCancelMode, v))
}

// CancelModeNEQ applies the NEQ predicate on the "cancel_mode" field.
func CancelModeNEQ(v string) predicate.AppFee {
	return predicate.AppFee(sql.FieldNEQ(FieldCancelMode, v))
}

// CancelModeIn applies the In predicate on the "cancel_mode" field.
func CancelModeIn(vs ...string) predicate.AppFee {
	return predicate.AppFee(sql.FieldIn(FieldCancelMode, vs...))
}

// CancelModeNotIn applies the NotIn predicate on the "cancel_mode" field.
func CancelModeNotIn(vs ...string) predicate.AppFee {
	return predicate.AppFee(sql.FieldNotIn(FieldCancelMode, vs...))
}

// CancelModeGT applies the GT predicate on the "cancel_mode" field.
func CancelModeGT(v string) predicate.AppFee {
	return predicate.AppFee(sql.FieldGT(FieldCancelMode, v))
}

// CancelModeGTE applies the GTE predicate on the "cancel_mode" field.
func CancelModeGTE(v string) predicate.AppFee {
	return predicate.AppFee(sql.FieldGTE(FieldCancelMode, v))
}

// CancelModeLT applies the LT predicate on the "cancel_mode" field.
func CancelModeLT(v string) predicate.AppFee {
	return predicate.AppFee(sql.FieldLT(FieldCancelMode, v))
}

// CancelModeLTE applies the LTE predicate on the "cancel_mode" field.
func CancelModeLTE(v string) predicate.AppFee {
	return predicate.AppFee(sql.FieldLTE(FieldCancelMode, v))
}

// CancelModeContains applies the Contains predicate on the "cancel_mode" field.
func CancelModeContains(v string) predicate.AppFee {
	return predicate.AppFee(sql.FieldContains(FieldCancelMode, v))
}

// CancelModeHasPrefix applies the HasPrefix predicate on the "cancel_mode" field.
func CancelModeHasPrefix(v string) predicate.AppFee {
	return predicate.AppFee(sql.FieldHasPrefix(FieldCancelMode, v))
}

// CancelModeHasSuffix applies the HasSuffix predicate on the "cancel_mode" field.
func CancelModeHasSuffix(v string) predicate.AppFee {
	return predicate.AppFee(sql.FieldHasSuffix(FieldCancelMode, v))
}

// CancelModeIsNil applies the IsNil predicate on the "cancel_mode" field.
func CancelModeIsNil() predicate.AppFee {
	return predicate.AppFee(sql.FieldIsNull(FieldCancelMode))
}

// CancelModeNotNil applies the NotNil predicate on the "cancel_mode" field.
func CancelModeNotNil() predicate.AppFee {
	return predicate.AppFee(sql.FieldNotNull(FieldCancelMode))
}

// CancelModeEqualFold applies the EqualFold predicate on the "cancel_mode" field.
func CancelModeEqualFold(v string) predicate.AppFee {
	return predicate.AppFee(sql.FieldEqualFold(FieldCancelMode, v))
}

// CancelModeContainsFold applies the ContainsFold predicate on the "cancel_mode" field.
func CancelModeContainsFold(v string) predicate.AppFee {
	return predicate.AppFee(sql.FieldContainsFold(FieldCancelMode, v))
}

// MinOrderDurationSecondsEQ applies the EQ predicate on the "min_order_duration_seconds" field.
func MinOrderDurationSecondsEQ(v uint32) predicate.AppFee {
	return predicate.AppFee(sql.FieldEQ(FieldMinOrderDurationSeconds, v))
}

// MinOrderDurationSecondsNEQ applies the NEQ predicate on the "min_order_duration_seconds" field.
func MinOrderDurationSecondsNEQ(v uint32) predicate.AppFee {
	return predicate.AppFee(sql.FieldNEQ(FieldMinOrderDurationSeconds, v))
}

// MinOrderDurationSecondsIn applies the In predicate on the "min_order_duration_seconds" field.
func MinOrderDurationSecondsIn(vs ...uint32) predicate.AppFee {
	return predicate.AppFee(sql.FieldIn(FieldMinOrderDurationSeconds, vs...))
}

// MinOrderDurationSecondsNotIn applies the NotIn predicate on the "min_order_duration_seconds" field.
func MinOrderDurationSecondsNotIn(vs ...uint32) predicate.AppFee {
	return predicate.AppFee(sql.FieldNotIn(FieldMinOrderDurationSeconds, vs...))
}

// MinOrderDurationSecondsGT applies the GT predicate on the "min_order_duration_seconds" field.
func MinOrderDurationSecondsGT(v uint32) predicate.AppFee {
	return predicate.AppFee(sql.FieldGT(FieldMinOrderDurationSeconds, v))
}

// MinOrderDurationSecondsGTE applies the GTE predicate on the "min_order_duration_seconds" field.
func MinOrderDurationSecondsGTE(v uint32) predicate.AppFee {
	return predicate.AppFee(sql.FieldGTE(FieldMinOrderDurationSeconds, v))
}

// MinOrderDurationSecondsLT applies the LT predicate on the "min_order_duration_seconds" field.
func MinOrderDurationSecondsLT(v uint32) predicate.AppFee {
	return predicate.AppFee(sql.FieldLT(FieldMinOrderDurationSeconds, v))
}

// MinOrderDurationSecondsLTE applies the LTE predicate on the "min_order_duration_seconds" field.
func MinOrderDurationSecondsLTE(v uint32) predicate.AppFee {
	return predicate.AppFee(sql.FieldLTE(FieldMinOrderDurationSeconds, v))
}

// MinOrderDurationSecondsIsNil applies the IsNil predicate on the "min_order_duration_seconds" field.
func MinOrderDurationSecondsIsNil() predicate.AppFee {
	return predicate.AppFee(sql.FieldIsNull(FieldMinOrderDurationSeconds))
}

// MinOrderDurationSecondsNotNil applies the NotNil predicate on the "min_order_duration_seconds" field.
func MinOrderDurationSecondsNotNil() predicate.AppFee {
	return predicate.AppFee(sql.FieldNotNull(FieldMinOrderDurationSeconds))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppFee) predicate.AppFee {
	return predicate.AppFee(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppFee) predicate.AppFee {
	return predicate.AppFee(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppFee) predicate.AppFee {
	return predicate.AppFee(sql.NotPredicates(p))
}

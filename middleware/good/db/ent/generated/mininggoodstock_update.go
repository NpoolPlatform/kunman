// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/mininggoodstock"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// MiningGoodStockUpdate is the builder for updating MiningGoodStock entities.
type MiningGoodStockUpdate struct {
	config
	hooks     []Hook
	mutation  *MiningGoodStockMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MiningGoodStockUpdate builder.
func (mgsu *MiningGoodStockUpdate) Where(ps ...predicate.MiningGoodStock) *MiningGoodStockUpdate {
	mgsu.mutation.Where(ps...)
	return mgsu
}

// SetEntID sets the "ent_id" field.
func (mgsu *MiningGoodStockUpdate) SetEntID(u uuid.UUID) *MiningGoodStockUpdate {
	mgsu.mutation.SetEntID(u)
	return mgsu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (mgsu *MiningGoodStockUpdate) SetNillableEntID(u *uuid.UUID) *MiningGoodStockUpdate {
	if u != nil {
		mgsu.SetEntID(*u)
	}
	return mgsu
}

// SetGoodStockID sets the "good_stock_id" field.
func (mgsu *MiningGoodStockUpdate) SetGoodStockID(u uuid.UUID) *MiningGoodStockUpdate {
	mgsu.mutation.SetGoodStockID(u)
	return mgsu
}

// SetNillableGoodStockID sets the "good_stock_id" field if the given value is not nil.
func (mgsu *MiningGoodStockUpdate) SetNillableGoodStockID(u *uuid.UUID) *MiningGoodStockUpdate {
	if u != nil {
		mgsu.SetGoodStockID(*u)
	}
	return mgsu
}

// ClearGoodStockID clears the value of the "good_stock_id" field.
func (mgsu *MiningGoodStockUpdate) ClearGoodStockID() *MiningGoodStockUpdate {
	mgsu.mutation.ClearGoodStockID()
	return mgsu
}

// SetPoolRootUserID sets the "pool_root_user_id" field.
func (mgsu *MiningGoodStockUpdate) SetPoolRootUserID(u uuid.UUID) *MiningGoodStockUpdate {
	mgsu.mutation.SetPoolRootUserID(u)
	return mgsu
}

// SetNillablePoolRootUserID sets the "pool_root_user_id" field if the given value is not nil.
func (mgsu *MiningGoodStockUpdate) SetNillablePoolRootUserID(u *uuid.UUID) *MiningGoodStockUpdate {
	if u != nil {
		mgsu.SetPoolRootUserID(*u)
	}
	return mgsu
}

// ClearPoolRootUserID clears the value of the "pool_root_user_id" field.
func (mgsu *MiningGoodStockUpdate) ClearPoolRootUserID() *MiningGoodStockUpdate {
	mgsu.mutation.ClearPoolRootUserID()
	return mgsu
}

// SetPoolGoodUserID sets the "pool_good_user_id" field.
func (mgsu *MiningGoodStockUpdate) SetPoolGoodUserID(u uuid.UUID) *MiningGoodStockUpdate {
	mgsu.mutation.SetPoolGoodUserID(u)
	return mgsu
}

// SetNillablePoolGoodUserID sets the "pool_good_user_id" field if the given value is not nil.
func (mgsu *MiningGoodStockUpdate) SetNillablePoolGoodUserID(u *uuid.UUID) *MiningGoodStockUpdate {
	if u != nil {
		mgsu.SetPoolGoodUserID(*u)
	}
	return mgsu
}

// ClearPoolGoodUserID clears the value of the "pool_good_user_id" field.
func (mgsu *MiningGoodStockUpdate) ClearPoolGoodUserID() *MiningGoodStockUpdate {
	mgsu.mutation.ClearPoolGoodUserID()
	return mgsu
}

// SetTotal sets the "total" field.
func (mgsu *MiningGoodStockUpdate) SetTotal(d decimal.Decimal) *MiningGoodStockUpdate {
	mgsu.mutation.SetTotal(d)
	return mgsu
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (mgsu *MiningGoodStockUpdate) SetNillableTotal(d *decimal.Decimal) *MiningGoodStockUpdate {
	if d != nil {
		mgsu.SetTotal(*d)
	}
	return mgsu
}

// ClearTotal clears the value of the "total" field.
func (mgsu *MiningGoodStockUpdate) ClearTotal() *MiningGoodStockUpdate {
	mgsu.mutation.ClearTotal()
	return mgsu
}

// SetSpotQuantity sets the "spot_quantity" field.
func (mgsu *MiningGoodStockUpdate) SetSpotQuantity(d decimal.Decimal) *MiningGoodStockUpdate {
	mgsu.mutation.SetSpotQuantity(d)
	return mgsu
}

// SetNillableSpotQuantity sets the "spot_quantity" field if the given value is not nil.
func (mgsu *MiningGoodStockUpdate) SetNillableSpotQuantity(d *decimal.Decimal) *MiningGoodStockUpdate {
	if d != nil {
		mgsu.SetSpotQuantity(*d)
	}
	return mgsu
}

// ClearSpotQuantity clears the value of the "spot_quantity" field.
func (mgsu *MiningGoodStockUpdate) ClearSpotQuantity() *MiningGoodStockUpdate {
	mgsu.mutation.ClearSpotQuantity()
	return mgsu
}

// SetLocked sets the "locked" field.
func (mgsu *MiningGoodStockUpdate) SetLocked(d decimal.Decimal) *MiningGoodStockUpdate {
	mgsu.mutation.SetLocked(d)
	return mgsu
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (mgsu *MiningGoodStockUpdate) SetNillableLocked(d *decimal.Decimal) *MiningGoodStockUpdate {
	if d != nil {
		mgsu.SetLocked(*d)
	}
	return mgsu
}

// ClearLocked clears the value of the "locked" field.
func (mgsu *MiningGoodStockUpdate) ClearLocked() *MiningGoodStockUpdate {
	mgsu.mutation.ClearLocked()
	return mgsu
}

// SetInService sets the "in_service" field.
func (mgsu *MiningGoodStockUpdate) SetInService(d decimal.Decimal) *MiningGoodStockUpdate {
	mgsu.mutation.SetInService(d)
	return mgsu
}

// SetNillableInService sets the "in_service" field if the given value is not nil.
func (mgsu *MiningGoodStockUpdate) SetNillableInService(d *decimal.Decimal) *MiningGoodStockUpdate {
	if d != nil {
		mgsu.SetInService(*d)
	}
	return mgsu
}

// ClearInService clears the value of the "in_service" field.
func (mgsu *MiningGoodStockUpdate) ClearInService() *MiningGoodStockUpdate {
	mgsu.mutation.ClearInService()
	return mgsu
}

// SetWaitStart sets the "wait_start" field.
func (mgsu *MiningGoodStockUpdate) SetWaitStart(d decimal.Decimal) *MiningGoodStockUpdate {
	mgsu.mutation.SetWaitStart(d)
	return mgsu
}

// SetNillableWaitStart sets the "wait_start" field if the given value is not nil.
func (mgsu *MiningGoodStockUpdate) SetNillableWaitStart(d *decimal.Decimal) *MiningGoodStockUpdate {
	if d != nil {
		mgsu.SetWaitStart(*d)
	}
	return mgsu
}

// ClearWaitStart clears the value of the "wait_start" field.
func (mgsu *MiningGoodStockUpdate) ClearWaitStart() *MiningGoodStockUpdate {
	mgsu.mutation.ClearWaitStart()
	return mgsu
}

// SetSold sets the "sold" field.
func (mgsu *MiningGoodStockUpdate) SetSold(d decimal.Decimal) *MiningGoodStockUpdate {
	mgsu.mutation.SetSold(d)
	return mgsu
}

// SetNillableSold sets the "sold" field if the given value is not nil.
func (mgsu *MiningGoodStockUpdate) SetNillableSold(d *decimal.Decimal) *MiningGoodStockUpdate {
	if d != nil {
		mgsu.SetSold(*d)
	}
	return mgsu
}

// ClearSold clears the value of the "sold" field.
func (mgsu *MiningGoodStockUpdate) ClearSold() *MiningGoodStockUpdate {
	mgsu.mutation.ClearSold()
	return mgsu
}

// SetAppReserved sets the "app_reserved" field.
func (mgsu *MiningGoodStockUpdate) SetAppReserved(d decimal.Decimal) *MiningGoodStockUpdate {
	mgsu.mutation.SetAppReserved(d)
	return mgsu
}

// SetNillableAppReserved sets the "app_reserved" field if the given value is not nil.
func (mgsu *MiningGoodStockUpdate) SetNillableAppReserved(d *decimal.Decimal) *MiningGoodStockUpdate {
	if d != nil {
		mgsu.SetAppReserved(*d)
	}
	return mgsu
}

// ClearAppReserved clears the value of the "app_reserved" field.
func (mgsu *MiningGoodStockUpdate) ClearAppReserved() *MiningGoodStockUpdate {
	mgsu.mutation.ClearAppReserved()
	return mgsu
}

// SetState sets the "state" field.
func (mgsu *MiningGoodStockUpdate) SetState(s string) *MiningGoodStockUpdate {
	mgsu.mutation.SetState(s)
	return mgsu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (mgsu *MiningGoodStockUpdate) SetNillableState(s *string) *MiningGoodStockUpdate {
	if s != nil {
		mgsu.SetState(*s)
	}
	return mgsu
}

// ClearState clears the value of the "state" field.
func (mgsu *MiningGoodStockUpdate) ClearState() *MiningGoodStockUpdate {
	mgsu.mutation.ClearState()
	return mgsu
}

// Mutation returns the MiningGoodStockMutation object of the builder.
func (mgsu *MiningGoodStockUpdate) Mutation() *MiningGoodStockMutation {
	return mgsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mgsu *MiningGoodStockUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mgsu.sqlSave, mgsu.mutation, mgsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mgsu *MiningGoodStockUpdate) SaveX(ctx context.Context) int {
	affected, err := mgsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mgsu *MiningGoodStockUpdate) Exec(ctx context.Context) error {
	_, err := mgsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mgsu *MiningGoodStockUpdate) ExecX(ctx context.Context) {
	if err := mgsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mgsu *MiningGoodStockUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MiningGoodStockUpdate {
	mgsu.modifiers = append(mgsu.modifiers, modifiers...)
	return mgsu
}

func (mgsu *MiningGoodStockUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(mininggoodstock.Table, mininggoodstock.Columns, sqlgraph.NewFieldSpec(mininggoodstock.FieldID, field.TypeUint32))
	if ps := mgsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mgsu.mutation.EntID(); ok {
		_spec.SetField(mininggoodstock.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := mgsu.mutation.GoodStockID(); ok {
		_spec.SetField(mininggoodstock.FieldGoodStockID, field.TypeUUID, value)
	}
	if mgsu.mutation.GoodStockIDCleared() {
		_spec.ClearField(mininggoodstock.FieldGoodStockID, field.TypeUUID)
	}
	if value, ok := mgsu.mutation.PoolRootUserID(); ok {
		_spec.SetField(mininggoodstock.FieldPoolRootUserID, field.TypeUUID, value)
	}
	if mgsu.mutation.PoolRootUserIDCleared() {
		_spec.ClearField(mininggoodstock.FieldPoolRootUserID, field.TypeUUID)
	}
	if value, ok := mgsu.mutation.PoolGoodUserID(); ok {
		_spec.SetField(mininggoodstock.FieldPoolGoodUserID, field.TypeUUID, value)
	}
	if mgsu.mutation.PoolGoodUserIDCleared() {
		_spec.ClearField(mininggoodstock.FieldPoolGoodUserID, field.TypeUUID)
	}
	if value, ok := mgsu.mutation.Total(); ok {
		_spec.SetField(mininggoodstock.FieldTotal, field.TypeOther, value)
	}
	if mgsu.mutation.TotalCleared() {
		_spec.ClearField(mininggoodstock.FieldTotal, field.TypeOther)
	}
	if value, ok := mgsu.mutation.SpotQuantity(); ok {
		_spec.SetField(mininggoodstock.FieldSpotQuantity, field.TypeOther, value)
	}
	if mgsu.mutation.SpotQuantityCleared() {
		_spec.ClearField(mininggoodstock.FieldSpotQuantity, field.TypeOther)
	}
	if value, ok := mgsu.mutation.Locked(); ok {
		_spec.SetField(mininggoodstock.FieldLocked, field.TypeOther, value)
	}
	if mgsu.mutation.LockedCleared() {
		_spec.ClearField(mininggoodstock.FieldLocked, field.TypeOther)
	}
	if value, ok := mgsu.mutation.InService(); ok {
		_spec.SetField(mininggoodstock.FieldInService, field.TypeOther, value)
	}
	if mgsu.mutation.InServiceCleared() {
		_spec.ClearField(mininggoodstock.FieldInService, field.TypeOther)
	}
	if value, ok := mgsu.mutation.WaitStart(); ok {
		_spec.SetField(mininggoodstock.FieldWaitStart, field.TypeOther, value)
	}
	if mgsu.mutation.WaitStartCleared() {
		_spec.ClearField(mininggoodstock.FieldWaitStart, field.TypeOther)
	}
	if value, ok := mgsu.mutation.Sold(); ok {
		_spec.SetField(mininggoodstock.FieldSold, field.TypeOther, value)
	}
	if mgsu.mutation.SoldCleared() {
		_spec.ClearField(mininggoodstock.FieldSold, field.TypeOther)
	}
	if value, ok := mgsu.mutation.AppReserved(); ok {
		_spec.SetField(mininggoodstock.FieldAppReserved, field.TypeOther, value)
	}
	if mgsu.mutation.AppReservedCleared() {
		_spec.ClearField(mininggoodstock.FieldAppReserved, field.TypeOther)
	}
	if value, ok := mgsu.mutation.State(); ok {
		_spec.SetField(mininggoodstock.FieldState, field.TypeString, value)
	}
	if mgsu.mutation.StateCleared() {
		_spec.ClearField(mininggoodstock.FieldState, field.TypeString)
	}
	_spec.AddModifiers(mgsu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mgsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mininggoodstock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mgsu.mutation.done = true
	return n, nil
}

// MiningGoodStockUpdateOne is the builder for updating a single MiningGoodStock entity.
type MiningGoodStockUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MiningGoodStockMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (mgsuo *MiningGoodStockUpdateOne) SetEntID(u uuid.UUID) *MiningGoodStockUpdateOne {
	mgsuo.mutation.SetEntID(u)
	return mgsuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (mgsuo *MiningGoodStockUpdateOne) SetNillableEntID(u *uuid.UUID) *MiningGoodStockUpdateOne {
	if u != nil {
		mgsuo.SetEntID(*u)
	}
	return mgsuo
}

// SetGoodStockID sets the "good_stock_id" field.
func (mgsuo *MiningGoodStockUpdateOne) SetGoodStockID(u uuid.UUID) *MiningGoodStockUpdateOne {
	mgsuo.mutation.SetGoodStockID(u)
	return mgsuo
}

// SetNillableGoodStockID sets the "good_stock_id" field if the given value is not nil.
func (mgsuo *MiningGoodStockUpdateOne) SetNillableGoodStockID(u *uuid.UUID) *MiningGoodStockUpdateOne {
	if u != nil {
		mgsuo.SetGoodStockID(*u)
	}
	return mgsuo
}

// ClearGoodStockID clears the value of the "good_stock_id" field.
func (mgsuo *MiningGoodStockUpdateOne) ClearGoodStockID() *MiningGoodStockUpdateOne {
	mgsuo.mutation.ClearGoodStockID()
	return mgsuo
}

// SetPoolRootUserID sets the "pool_root_user_id" field.
func (mgsuo *MiningGoodStockUpdateOne) SetPoolRootUserID(u uuid.UUID) *MiningGoodStockUpdateOne {
	mgsuo.mutation.SetPoolRootUserID(u)
	return mgsuo
}

// SetNillablePoolRootUserID sets the "pool_root_user_id" field if the given value is not nil.
func (mgsuo *MiningGoodStockUpdateOne) SetNillablePoolRootUserID(u *uuid.UUID) *MiningGoodStockUpdateOne {
	if u != nil {
		mgsuo.SetPoolRootUserID(*u)
	}
	return mgsuo
}

// ClearPoolRootUserID clears the value of the "pool_root_user_id" field.
func (mgsuo *MiningGoodStockUpdateOne) ClearPoolRootUserID() *MiningGoodStockUpdateOne {
	mgsuo.mutation.ClearPoolRootUserID()
	return mgsuo
}

// SetPoolGoodUserID sets the "pool_good_user_id" field.
func (mgsuo *MiningGoodStockUpdateOne) SetPoolGoodUserID(u uuid.UUID) *MiningGoodStockUpdateOne {
	mgsuo.mutation.SetPoolGoodUserID(u)
	return mgsuo
}

// SetNillablePoolGoodUserID sets the "pool_good_user_id" field if the given value is not nil.
func (mgsuo *MiningGoodStockUpdateOne) SetNillablePoolGoodUserID(u *uuid.UUID) *MiningGoodStockUpdateOne {
	if u != nil {
		mgsuo.SetPoolGoodUserID(*u)
	}
	return mgsuo
}

// ClearPoolGoodUserID clears the value of the "pool_good_user_id" field.
func (mgsuo *MiningGoodStockUpdateOne) ClearPoolGoodUserID() *MiningGoodStockUpdateOne {
	mgsuo.mutation.ClearPoolGoodUserID()
	return mgsuo
}

// SetTotal sets the "total" field.
func (mgsuo *MiningGoodStockUpdateOne) SetTotal(d decimal.Decimal) *MiningGoodStockUpdateOne {
	mgsuo.mutation.SetTotal(d)
	return mgsuo
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (mgsuo *MiningGoodStockUpdateOne) SetNillableTotal(d *decimal.Decimal) *MiningGoodStockUpdateOne {
	if d != nil {
		mgsuo.SetTotal(*d)
	}
	return mgsuo
}

// ClearTotal clears the value of the "total" field.
func (mgsuo *MiningGoodStockUpdateOne) ClearTotal() *MiningGoodStockUpdateOne {
	mgsuo.mutation.ClearTotal()
	return mgsuo
}

// SetSpotQuantity sets the "spot_quantity" field.
func (mgsuo *MiningGoodStockUpdateOne) SetSpotQuantity(d decimal.Decimal) *MiningGoodStockUpdateOne {
	mgsuo.mutation.SetSpotQuantity(d)
	return mgsuo
}

// SetNillableSpotQuantity sets the "spot_quantity" field if the given value is not nil.
func (mgsuo *MiningGoodStockUpdateOne) SetNillableSpotQuantity(d *decimal.Decimal) *MiningGoodStockUpdateOne {
	if d != nil {
		mgsuo.SetSpotQuantity(*d)
	}
	return mgsuo
}

// ClearSpotQuantity clears the value of the "spot_quantity" field.
func (mgsuo *MiningGoodStockUpdateOne) ClearSpotQuantity() *MiningGoodStockUpdateOne {
	mgsuo.mutation.ClearSpotQuantity()
	return mgsuo
}

// SetLocked sets the "locked" field.
func (mgsuo *MiningGoodStockUpdateOne) SetLocked(d decimal.Decimal) *MiningGoodStockUpdateOne {
	mgsuo.mutation.SetLocked(d)
	return mgsuo
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (mgsuo *MiningGoodStockUpdateOne) SetNillableLocked(d *decimal.Decimal) *MiningGoodStockUpdateOne {
	if d != nil {
		mgsuo.SetLocked(*d)
	}
	return mgsuo
}

// ClearLocked clears the value of the "locked" field.
func (mgsuo *MiningGoodStockUpdateOne) ClearLocked() *MiningGoodStockUpdateOne {
	mgsuo.mutation.ClearLocked()
	return mgsuo
}

// SetInService sets the "in_service" field.
func (mgsuo *MiningGoodStockUpdateOne) SetInService(d decimal.Decimal) *MiningGoodStockUpdateOne {
	mgsuo.mutation.SetInService(d)
	return mgsuo
}

// SetNillableInService sets the "in_service" field if the given value is not nil.
func (mgsuo *MiningGoodStockUpdateOne) SetNillableInService(d *decimal.Decimal) *MiningGoodStockUpdateOne {
	if d != nil {
		mgsuo.SetInService(*d)
	}
	return mgsuo
}

// ClearInService clears the value of the "in_service" field.
func (mgsuo *MiningGoodStockUpdateOne) ClearInService() *MiningGoodStockUpdateOne {
	mgsuo.mutation.ClearInService()
	return mgsuo
}

// SetWaitStart sets the "wait_start" field.
func (mgsuo *MiningGoodStockUpdateOne) SetWaitStart(d decimal.Decimal) *MiningGoodStockUpdateOne {
	mgsuo.mutation.SetWaitStart(d)
	return mgsuo
}

// SetNillableWaitStart sets the "wait_start" field if the given value is not nil.
func (mgsuo *MiningGoodStockUpdateOne) SetNillableWaitStart(d *decimal.Decimal) *MiningGoodStockUpdateOne {
	if d != nil {
		mgsuo.SetWaitStart(*d)
	}
	return mgsuo
}

// ClearWaitStart clears the value of the "wait_start" field.
func (mgsuo *MiningGoodStockUpdateOne) ClearWaitStart() *MiningGoodStockUpdateOne {
	mgsuo.mutation.ClearWaitStart()
	return mgsuo
}

// SetSold sets the "sold" field.
func (mgsuo *MiningGoodStockUpdateOne) SetSold(d decimal.Decimal) *MiningGoodStockUpdateOne {
	mgsuo.mutation.SetSold(d)
	return mgsuo
}

// SetNillableSold sets the "sold" field if the given value is not nil.
func (mgsuo *MiningGoodStockUpdateOne) SetNillableSold(d *decimal.Decimal) *MiningGoodStockUpdateOne {
	if d != nil {
		mgsuo.SetSold(*d)
	}
	return mgsuo
}

// ClearSold clears the value of the "sold" field.
func (mgsuo *MiningGoodStockUpdateOne) ClearSold() *MiningGoodStockUpdateOne {
	mgsuo.mutation.ClearSold()
	return mgsuo
}

// SetAppReserved sets the "app_reserved" field.
func (mgsuo *MiningGoodStockUpdateOne) SetAppReserved(d decimal.Decimal) *MiningGoodStockUpdateOne {
	mgsuo.mutation.SetAppReserved(d)
	return mgsuo
}

// SetNillableAppReserved sets the "app_reserved" field if the given value is not nil.
func (mgsuo *MiningGoodStockUpdateOne) SetNillableAppReserved(d *decimal.Decimal) *MiningGoodStockUpdateOne {
	if d != nil {
		mgsuo.SetAppReserved(*d)
	}
	return mgsuo
}

// ClearAppReserved clears the value of the "app_reserved" field.
func (mgsuo *MiningGoodStockUpdateOne) ClearAppReserved() *MiningGoodStockUpdateOne {
	mgsuo.mutation.ClearAppReserved()
	return mgsuo
}

// SetState sets the "state" field.
func (mgsuo *MiningGoodStockUpdateOne) SetState(s string) *MiningGoodStockUpdateOne {
	mgsuo.mutation.SetState(s)
	return mgsuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (mgsuo *MiningGoodStockUpdateOne) SetNillableState(s *string) *MiningGoodStockUpdateOne {
	if s != nil {
		mgsuo.SetState(*s)
	}
	return mgsuo
}

// ClearState clears the value of the "state" field.
func (mgsuo *MiningGoodStockUpdateOne) ClearState() *MiningGoodStockUpdateOne {
	mgsuo.mutation.ClearState()
	return mgsuo
}

// Mutation returns the MiningGoodStockMutation object of the builder.
func (mgsuo *MiningGoodStockUpdateOne) Mutation() *MiningGoodStockMutation {
	return mgsuo.mutation
}

// Where appends a list predicates to the MiningGoodStockUpdate builder.
func (mgsuo *MiningGoodStockUpdateOne) Where(ps ...predicate.MiningGoodStock) *MiningGoodStockUpdateOne {
	mgsuo.mutation.Where(ps...)
	return mgsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mgsuo *MiningGoodStockUpdateOne) Select(field string, fields ...string) *MiningGoodStockUpdateOne {
	mgsuo.fields = append([]string{field}, fields...)
	return mgsuo
}

// Save executes the query and returns the updated MiningGoodStock entity.
func (mgsuo *MiningGoodStockUpdateOne) Save(ctx context.Context) (*MiningGoodStock, error) {
	return withHooks(ctx, mgsuo.sqlSave, mgsuo.mutation, mgsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mgsuo *MiningGoodStockUpdateOne) SaveX(ctx context.Context) *MiningGoodStock {
	node, err := mgsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mgsuo *MiningGoodStockUpdateOne) Exec(ctx context.Context) error {
	_, err := mgsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mgsuo *MiningGoodStockUpdateOne) ExecX(ctx context.Context) {
	if err := mgsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mgsuo *MiningGoodStockUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MiningGoodStockUpdateOne {
	mgsuo.modifiers = append(mgsuo.modifiers, modifiers...)
	return mgsuo
}

func (mgsuo *MiningGoodStockUpdateOne) sqlSave(ctx context.Context) (_node *MiningGoodStock, err error) {
	_spec := sqlgraph.NewUpdateSpec(mininggoodstock.Table, mininggoodstock.Columns, sqlgraph.NewFieldSpec(mininggoodstock.FieldID, field.TypeUint32))
	id, ok := mgsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "MiningGoodStock.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mgsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mininggoodstock.FieldID)
		for _, f := range fields {
			if !mininggoodstock.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != mininggoodstock.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mgsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mgsuo.mutation.EntID(); ok {
		_spec.SetField(mininggoodstock.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := mgsuo.mutation.GoodStockID(); ok {
		_spec.SetField(mininggoodstock.FieldGoodStockID, field.TypeUUID, value)
	}
	if mgsuo.mutation.GoodStockIDCleared() {
		_spec.ClearField(mininggoodstock.FieldGoodStockID, field.TypeUUID)
	}
	if value, ok := mgsuo.mutation.PoolRootUserID(); ok {
		_spec.SetField(mininggoodstock.FieldPoolRootUserID, field.TypeUUID, value)
	}
	if mgsuo.mutation.PoolRootUserIDCleared() {
		_spec.ClearField(mininggoodstock.FieldPoolRootUserID, field.TypeUUID)
	}
	if value, ok := mgsuo.mutation.PoolGoodUserID(); ok {
		_spec.SetField(mininggoodstock.FieldPoolGoodUserID, field.TypeUUID, value)
	}
	if mgsuo.mutation.PoolGoodUserIDCleared() {
		_spec.ClearField(mininggoodstock.FieldPoolGoodUserID, field.TypeUUID)
	}
	if value, ok := mgsuo.mutation.Total(); ok {
		_spec.SetField(mininggoodstock.FieldTotal, field.TypeOther, value)
	}
	if mgsuo.mutation.TotalCleared() {
		_spec.ClearField(mininggoodstock.FieldTotal, field.TypeOther)
	}
	if value, ok := mgsuo.mutation.SpotQuantity(); ok {
		_spec.SetField(mininggoodstock.FieldSpotQuantity, field.TypeOther, value)
	}
	if mgsuo.mutation.SpotQuantityCleared() {
		_spec.ClearField(mininggoodstock.FieldSpotQuantity, field.TypeOther)
	}
	if value, ok := mgsuo.mutation.Locked(); ok {
		_spec.SetField(mininggoodstock.FieldLocked, field.TypeOther, value)
	}
	if mgsuo.mutation.LockedCleared() {
		_spec.ClearField(mininggoodstock.FieldLocked, field.TypeOther)
	}
	if value, ok := mgsuo.mutation.InService(); ok {
		_spec.SetField(mininggoodstock.FieldInService, field.TypeOther, value)
	}
	if mgsuo.mutation.InServiceCleared() {
		_spec.ClearField(mininggoodstock.FieldInService, field.TypeOther)
	}
	if value, ok := mgsuo.mutation.WaitStart(); ok {
		_spec.SetField(mininggoodstock.FieldWaitStart, field.TypeOther, value)
	}
	if mgsuo.mutation.WaitStartCleared() {
		_spec.ClearField(mininggoodstock.FieldWaitStart, field.TypeOther)
	}
	if value, ok := mgsuo.mutation.Sold(); ok {
		_spec.SetField(mininggoodstock.FieldSold, field.TypeOther, value)
	}
	if mgsuo.mutation.SoldCleared() {
		_spec.ClearField(mininggoodstock.FieldSold, field.TypeOther)
	}
	if value, ok := mgsuo.mutation.AppReserved(); ok {
		_spec.SetField(mininggoodstock.FieldAppReserved, field.TypeOther, value)
	}
	if mgsuo.mutation.AppReservedCleared() {
		_spec.ClearField(mininggoodstock.FieldAppReserved, field.TypeOther)
	}
	if value, ok := mgsuo.mutation.State(); ok {
		_spec.SetField(mininggoodstock.FieldState, field.TypeString, value)
	}
	if mgsuo.mutation.StateCleared() {
		_spec.ClearField(mininggoodstock.FieldState, field.TypeString)
	}
	_spec.AddModifiers(mgsuo.modifiers...)
	_node = &MiningGoodStock{config: mgsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mgsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mininggoodstock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mgsuo.mutation.done = true
	return _node, nil
}

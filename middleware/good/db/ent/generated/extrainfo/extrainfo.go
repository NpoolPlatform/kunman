// Code generated by ent, DO NOT EDIT.

package extrainfo

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the extrainfo type in the database.
	Label = "extra_info"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldAppGoodID holds the string denoting the app_good_id field in the database.
	FieldAppGoodID = "app_good_id"
	// FieldLikes holds the string denoting the likes field in the database.
	FieldLikes = "likes"
	// FieldDislikes holds the string denoting the dislikes field in the database.
	FieldDislikes = "dislikes"
	// FieldRecommendCount holds the string denoting the recommend_count field in the database.
	FieldRecommendCount = "recommend_count"
	// FieldCommentCount holds the string denoting the comment_count field in the database.
	FieldCommentCount = "comment_count"
	// FieldScoreCount holds the string denoting the score_count field in the database.
	FieldScoreCount = "score_count"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// Table holds the table name of the extrainfo in the database.
	Table = "extra_infos"
)

// Columns holds all SQL columns for extrainfo fields.
var Columns = []string{
	FieldID,
	FieldEntID,
	FieldAppGoodID,
	FieldLikes,
	FieldDislikes,
	FieldRecommendCount,
	FieldCommentCount,
	FieldScoreCount,
	FieldScore,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultAppGoodID holds the default value on creation for the "app_good_id" field.
	DefaultAppGoodID func() uuid.UUID
	// DefaultLikes holds the default value on creation for the "likes" field.
	DefaultLikes uint32
	// DefaultDislikes holds the default value on creation for the "dislikes" field.
	DefaultDislikes uint32
	// DefaultRecommendCount holds the default value on creation for the "recommend_count" field.
	DefaultRecommendCount uint32
	// DefaultCommentCount holds the default value on creation for the "comment_count" field.
	DefaultCommentCount uint32
	// DefaultScoreCount holds the default value on creation for the "score_count" field.
	DefaultScoreCount uint32
	// DefaultScore holds the default value on creation for the "score" field.
	DefaultScore decimal.Decimal
)

// OrderOption defines the ordering options for the ExtraInfo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByAppGoodID orders the results by the app_good_id field.
func ByAppGoodID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppGoodID, opts...).ToFunc()
}

// ByLikes orders the results by the likes field.
func ByLikes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLikes, opts...).ToFunc()
}

// ByDislikes orders the results by the dislikes field.
func ByDislikes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDislikes, opts...).ToFunc()
}

// ByRecommendCount orders the results by the recommend_count field.
func ByRecommendCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecommendCount, opts...).ToFunc()
}

// ByCommentCount orders the results by the comment_count field.
func ByCommentCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommentCount, opts...).ToFunc()
}

// ByScoreCount orders the results by the score_count field.
func ByScoreCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScoreCount, opts...).ToFunc()
}

// ByScore orders the results by the score field.
func ByScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScore, opts...).ToFunc()
}

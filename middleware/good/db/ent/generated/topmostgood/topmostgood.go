// Code generated by ent, DO NOT EDIT.

package topmostgood

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the topmostgood type in the database.
	Label = "top_most_good"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldAppGoodID holds the string denoting the app_good_id field in the database.
	FieldAppGoodID = "app_good_id"
	// FieldTopMostID holds the string denoting the top_most_id field in the database.
	FieldTopMostID = "top_most_id"
	// FieldDisplayIndex holds the string denoting the display_index field in the database.
	FieldDisplayIndex = "display_index"
	// FieldUnitPrice holds the string denoting the unit_price field in the database.
	FieldUnitPrice = "unit_price"
	// Table holds the table name of the topmostgood in the database.
	Table = "top_most_goods"
)

// Columns holds all SQL columns for topmostgood fields.
var Columns = []string{
	FieldID,
	FieldEntID,
	FieldAppGoodID,
	FieldTopMostID,
	FieldDisplayIndex,
	FieldUnitPrice,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultAppGoodID holds the default value on creation for the "app_good_id" field.
	DefaultAppGoodID func() uuid.UUID
	// DefaultTopMostID holds the default value on creation for the "top_most_id" field.
	DefaultTopMostID func() uuid.UUID
	// DefaultDisplayIndex holds the default value on creation for the "display_index" field.
	DefaultDisplayIndex uint32
	// DefaultUnitPrice holds the default value on creation for the "unit_price" field.
	DefaultUnitPrice decimal.Decimal
)

// OrderOption defines the ordering options for the TopMostGood queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByAppGoodID orders the results by the app_good_id field.
func ByAppGoodID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppGoodID, opts...).ToFunc()
}

// ByTopMostID orders the results by the top_most_id field.
func ByTopMostID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopMostID, opts...).ToFunc()
}

// ByDisplayIndex orders the results by the display_index field.
func ByDisplayIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayIndex, opts...).ToFunc()
}

// ByUnitPrice orders the results by the unit_price field.
func ByUnitPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitPrice, opts...).ToFunc()
}

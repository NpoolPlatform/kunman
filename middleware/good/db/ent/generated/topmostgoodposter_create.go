// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/topmostgoodposter"
	"github.com/google/uuid"
)

// TopMostGoodPosterCreate is the builder for creating a TopMostGoodPoster entity.
type TopMostGoodPosterCreate struct {
	config
	mutation *TopMostGoodPosterMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (tmgpc *TopMostGoodPosterCreate) SetEntID(u uuid.UUID) *TopMostGoodPosterCreate {
	tmgpc.mutation.SetEntID(u)
	return tmgpc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tmgpc *TopMostGoodPosterCreate) SetNillableEntID(u *uuid.UUID) *TopMostGoodPosterCreate {
	if u != nil {
		tmgpc.SetEntID(*u)
	}
	return tmgpc
}

// SetTopMostGoodID sets the "top_most_good_id" field.
func (tmgpc *TopMostGoodPosterCreate) SetTopMostGoodID(u uuid.UUID) *TopMostGoodPosterCreate {
	tmgpc.mutation.SetTopMostGoodID(u)
	return tmgpc
}

// SetNillableTopMostGoodID sets the "top_most_good_id" field if the given value is not nil.
func (tmgpc *TopMostGoodPosterCreate) SetNillableTopMostGoodID(u *uuid.UUID) *TopMostGoodPosterCreate {
	if u != nil {
		tmgpc.SetTopMostGoodID(*u)
	}
	return tmgpc
}

// SetPoster sets the "poster" field.
func (tmgpc *TopMostGoodPosterCreate) SetPoster(s string) *TopMostGoodPosterCreate {
	tmgpc.mutation.SetPoster(s)
	return tmgpc
}

// SetNillablePoster sets the "poster" field if the given value is not nil.
func (tmgpc *TopMostGoodPosterCreate) SetNillablePoster(s *string) *TopMostGoodPosterCreate {
	if s != nil {
		tmgpc.SetPoster(*s)
	}
	return tmgpc
}

// SetIndex sets the "index" field.
func (tmgpc *TopMostGoodPosterCreate) SetIndex(u uint8) *TopMostGoodPosterCreate {
	tmgpc.mutation.SetIndex(u)
	return tmgpc
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (tmgpc *TopMostGoodPosterCreate) SetNillableIndex(u *uint8) *TopMostGoodPosterCreate {
	if u != nil {
		tmgpc.SetIndex(*u)
	}
	return tmgpc
}

// SetID sets the "id" field.
func (tmgpc *TopMostGoodPosterCreate) SetID(u uint32) *TopMostGoodPosterCreate {
	tmgpc.mutation.SetID(u)
	return tmgpc
}

// Mutation returns the TopMostGoodPosterMutation object of the builder.
func (tmgpc *TopMostGoodPosterCreate) Mutation() *TopMostGoodPosterMutation {
	return tmgpc.mutation
}

// Save creates the TopMostGoodPoster in the database.
func (tmgpc *TopMostGoodPosterCreate) Save(ctx context.Context) (*TopMostGoodPoster, error) {
	tmgpc.defaults()
	return withHooks(ctx, tmgpc.sqlSave, tmgpc.mutation, tmgpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tmgpc *TopMostGoodPosterCreate) SaveX(ctx context.Context) *TopMostGoodPoster {
	v, err := tmgpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmgpc *TopMostGoodPosterCreate) Exec(ctx context.Context) error {
	_, err := tmgpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmgpc *TopMostGoodPosterCreate) ExecX(ctx context.Context) {
	if err := tmgpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmgpc *TopMostGoodPosterCreate) defaults() {
	if _, ok := tmgpc.mutation.EntID(); !ok {
		v := topmostgoodposter.DefaultEntID()
		tmgpc.mutation.SetEntID(v)
	}
	if _, ok := tmgpc.mutation.TopMostGoodID(); !ok {
		v := topmostgoodposter.DefaultTopMostGoodID()
		tmgpc.mutation.SetTopMostGoodID(v)
	}
	if _, ok := tmgpc.mutation.Poster(); !ok {
		v := topmostgoodposter.DefaultPoster
		tmgpc.mutation.SetPoster(v)
	}
	if _, ok := tmgpc.mutation.Index(); !ok {
		v := topmostgoodposter.DefaultIndex
		tmgpc.mutation.SetIndex(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tmgpc *TopMostGoodPosterCreate) check() error {
	if _, ok := tmgpc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "TopMostGoodPoster.ent_id"`)}
	}
	return nil
}

func (tmgpc *TopMostGoodPosterCreate) sqlSave(ctx context.Context) (*TopMostGoodPoster, error) {
	if err := tmgpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tmgpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tmgpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	tmgpc.mutation.id = &_node.ID
	tmgpc.mutation.done = true
	return _node, nil
}

func (tmgpc *TopMostGoodPosterCreate) createSpec() (*TopMostGoodPoster, *sqlgraph.CreateSpec) {
	var (
		_node = &TopMostGoodPoster{config: tmgpc.config}
		_spec = sqlgraph.NewCreateSpec(topmostgoodposter.Table, sqlgraph.NewFieldSpec(topmostgoodposter.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = tmgpc.conflict
	if id, ok := tmgpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tmgpc.mutation.EntID(); ok {
		_spec.SetField(topmostgoodposter.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := tmgpc.mutation.TopMostGoodID(); ok {
		_spec.SetField(topmostgoodposter.FieldTopMostGoodID, field.TypeUUID, value)
		_node.TopMostGoodID = value
	}
	if value, ok := tmgpc.mutation.Poster(); ok {
		_spec.SetField(topmostgoodposter.FieldPoster, field.TypeString, value)
		_node.Poster = value
	}
	if value, ok := tmgpc.mutation.Index(); ok {
		_spec.SetField(topmostgoodposter.FieldIndex, field.TypeUint8, value)
		_node.Index = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TopMostGoodPoster.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TopMostGoodPosterUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (tmgpc *TopMostGoodPosterCreate) OnConflict(opts ...sql.ConflictOption) *TopMostGoodPosterUpsertOne {
	tmgpc.conflict = opts
	return &TopMostGoodPosterUpsertOne{
		create: tmgpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TopMostGoodPoster.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tmgpc *TopMostGoodPosterCreate) OnConflictColumns(columns ...string) *TopMostGoodPosterUpsertOne {
	tmgpc.conflict = append(tmgpc.conflict, sql.ConflictColumns(columns...))
	return &TopMostGoodPosterUpsertOne{
		create: tmgpc,
	}
}

type (
	// TopMostGoodPosterUpsertOne is the builder for "upsert"-ing
	//  one TopMostGoodPoster node.
	TopMostGoodPosterUpsertOne struct {
		create *TopMostGoodPosterCreate
	}

	// TopMostGoodPosterUpsert is the "OnConflict" setter.
	TopMostGoodPosterUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *TopMostGoodPosterUpsert) SetEntID(v uuid.UUID) *TopMostGoodPosterUpsert {
	u.Set(topmostgoodposter.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TopMostGoodPosterUpsert) UpdateEntID() *TopMostGoodPosterUpsert {
	u.SetExcluded(topmostgoodposter.FieldEntID)
	return u
}

// SetTopMostGoodID sets the "top_most_good_id" field.
func (u *TopMostGoodPosterUpsert) SetTopMostGoodID(v uuid.UUID) *TopMostGoodPosterUpsert {
	u.Set(topmostgoodposter.FieldTopMostGoodID, v)
	return u
}

// UpdateTopMostGoodID sets the "top_most_good_id" field to the value that was provided on create.
func (u *TopMostGoodPosterUpsert) UpdateTopMostGoodID() *TopMostGoodPosterUpsert {
	u.SetExcluded(topmostgoodposter.FieldTopMostGoodID)
	return u
}

// ClearTopMostGoodID clears the value of the "top_most_good_id" field.
func (u *TopMostGoodPosterUpsert) ClearTopMostGoodID() *TopMostGoodPosterUpsert {
	u.SetNull(topmostgoodposter.FieldTopMostGoodID)
	return u
}

// SetPoster sets the "poster" field.
func (u *TopMostGoodPosterUpsert) SetPoster(v string) *TopMostGoodPosterUpsert {
	u.Set(topmostgoodposter.FieldPoster, v)
	return u
}

// UpdatePoster sets the "poster" field to the value that was provided on create.
func (u *TopMostGoodPosterUpsert) UpdatePoster() *TopMostGoodPosterUpsert {
	u.SetExcluded(topmostgoodposter.FieldPoster)
	return u
}

// ClearPoster clears the value of the "poster" field.
func (u *TopMostGoodPosterUpsert) ClearPoster() *TopMostGoodPosterUpsert {
	u.SetNull(topmostgoodposter.FieldPoster)
	return u
}

// SetIndex sets the "index" field.
func (u *TopMostGoodPosterUpsert) SetIndex(v uint8) *TopMostGoodPosterUpsert {
	u.Set(topmostgoodposter.FieldIndex, v)
	return u
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *TopMostGoodPosterUpsert) UpdateIndex() *TopMostGoodPosterUpsert {
	u.SetExcluded(topmostgoodposter.FieldIndex)
	return u
}

// AddIndex adds v to the "index" field.
func (u *TopMostGoodPosterUpsert) AddIndex(v uint8) *TopMostGoodPosterUpsert {
	u.Add(topmostgoodposter.FieldIndex, v)
	return u
}

// ClearIndex clears the value of the "index" field.
func (u *TopMostGoodPosterUpsert) ClearIndex() *TopMostGoodPosterUpsert {
	u.SetNull(topmostgoodposter.FieldIndex)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TopMostGoodPoster.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(topmostgoodposter.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TopMostGoodPosterUpsertOne) UpdateNewValues() *TopMostGoodPosterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(topmostgoodposter.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TopMostGoodPoster.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TopMostGoodPosterUpsertOne) Ignore() *TopMostGoodPosterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TopMostGoodPosterUpsertOne) DoNothing() *TopMostGoodPosterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TopMostGoodPosterCreate.OnConflict
// documentation for more info.
func (u *TopMostGoodPosterUpsertOne) Update(set func(*TopMostGoodPosterUpsert)) *TopMostGoodPosterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TopMostGoodPosterUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *TopMostGoodPosterUpsertOne) SetEntID(v uuid.UUID) *TopMostGoodPosterUpsertOne {
	return u.Update(func(s *TopMostGoodPosterUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TopMostGoodPosterUpsertOne) UpdateEntID() *TopMostGoodPosterUpsertOne {
	return u.Update(func(s *TopMostGoodPosterUpsert) {
		s.UpdateEntID()
	})
}

// SetTopMostGoodID sets the "top_most_good_id" field.
func (u *TopMostGoodPosterUpsertOne) SetTopMostGoodID(v uuid.UUID) *TopMostGoodPosterUpsertOne {
	return u.Update(func(s *TopMostGoodPosterUpsert) {
		s.SetTopMostGoodID(v)
	})
}

// UpdateTopMostGoodID sets the "top_most_good_id" field to the value that was provided on create.
func (u *TopMostGoodPosterUpsertOne) UpdateTopMostGoodID() *TopMostGoodPosterUpsertOne {
	return u.Update(func(s *TopMostGoodPosterUpsert) {
		s.UpdateTopMostGoodID()
	})
}

// ClearTopMostGoodID clears the value of the "top_most_good_id" field.
func (u *TopMostGoodPosterUpsertOne) ClearTopMostGoodID() *TopMostGoodPosterUpsertOne {
	return u.Update(func(s *TopMostGoodPosterUpsert) {
		s.ClearTopMostGoodID()
	})
}

// SetPoster sets the "poster" field.
func (u *TopMostGoodPosterUpsertOne) SetPoster(v string) *TopMostGoodPosterUpsertOne {
	return u.Update(func(s *TopMostGoodPosterUpsert) {
		s.SetPoster(v)
	})
}

// UpdatePoster sets the "poster" field to the value that was provided on create.
func (u *TopMostGoodPosterUpsertOne) UpdatePoster() *TopMostGoodPosterUpsertOne {
	return u.Update(func(s *TopMostGoodPosterUpsert) {
		s.UpdatePoster()
	})
}

// ClearPoster clears the value of the "poster" field.
func (u *TopMostGoodPosterUpsertOne) ClearPoster() *TopMostGoodPosterUpsertOne {
	return u.Update(func(s *TopMostGoodPosterUpsert) {
		s.ClearPoster()
	})
}

// SetIndex sets the "index" field.
func (u *TopMostGoodPosterUpsertOne) SetIndex(v uint8) *TopMostGoodPosterUpsertOne {
	return u.Update(func(s *TopMostGoodPosterUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *TopMostGoodPosterUpsertOne) AddIndex(v uint8) *TopMostGoodPosterUpsertOne {
	return u.Update(func(s *TopMostGoodPosterUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *TopMostGoodPosterUpsertOne) UpdateIndex() *TopMostGoodPosterUpsertOne {
	return u.Update(func(s *TopMostGoodPosterUpsert) {
		s.UpdateIndex()
	})
}

// ClearIndex clears the value of the "index" field.
func (u *TopMostGoodPosterUpsertOne) ClearIndex() *TopMostGoodPosterUpsertOne {
	return u.Update(func(s *TopMostGoodPosterUpsert) {
		s.ClearIndex()
	})
}

// Exec executes the query.
func (u *TopMostGoodPosterUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for TopMostGoodPosterCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TopMostGoodPosterUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TopMostGoodPosterUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TopMostGoodPosterUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TopMostGoodPosterCreateBulk is the builder for creating many TopMostGoodPoster entities in bulk.
type TopMostGoodPosterCreateBulk struct {
	config
	err      error
	builders []*TopMostGoodPosterCreate
	conflict []sql.ConflictOption
}

// Save creates the TopMostGoodPoster entities in the database.
func (tmgpcb *TopMostGoodPosterCreateBulk) Save(ctx context.Context) ([]*TopMostGoodPoster, error) {
	if tmgpcb.err != nil {
		return nil, tmgpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tmgpcb.builders))
	nodes := make([]*TopMostGoodPoster, len(tmgpcb.builders))
	mutators := make([]Mutator, len(tmgpcb.builders))
	for i := range tmgpcb.builders {
		func(i int, root context.Context) {
			builder := tmgpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TopMostGoodPosterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tmgpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tmgpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tmgpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tmgpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tmgpcb *TopMostGoodPosterCreateBulk) SaveX(ctx context.Context) []*TopMostGoodPoster {
	v, err := tmgpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmgpcb *TopMostGoodPosterCreateBulk) Exec(ctx context.Context) error {
	_, err := tmgpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmgpcb *TopMostGoodPosterCreateBulk) ExecX(ctx context.Context) {
	if err := tmgpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TopMostGoodPoster.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TopMostGoodPosterUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (tmgpcb *TopMostGoodPosterCreateBulk) OnConflict(opts ...sql.ConflictOption) *TopMostGoodPosterUpsertBulk {
	tmgpcb.conflict = opts
	return &TopMostGoodPosterUpsertBulk{
		create: tmgpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TopMostGoodPoster.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tmgpcb *TopMostGoodPosterCreateBulk) OnConflictColumns(columns ...string) *TopMostGoodPosterUpsertBulk {
	tmgpcb.conflict = append(tmgpcb.conflict, sql.ConflictColumns(columns...))
	return &TopMostGoodPosterUpsertBulk{
		create: tmgpcb,
	}
}

// TopMostGoodPosterUpsertBulk is the builder for "upsert"-ing
// a bulk of TopMostGoodPoster nodes.
type TopMostGoodPosterUpsertBulk struct {
	create *TopMostGoodPosterCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TopMostGoodPoster.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(topmostgoodposter.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TopMostGoodPosterUpsertBulk) UpdateNewValues() *TopMostGoodPosterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(topmostgoodposter.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TopMostGoodPoster.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TopMostGoodPosterUpsertBulk) Ignore() *TopMostGoodPosterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TopMostGoodPosterUpsertBulk) DoNothing() *TopMostGoodPosterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TopMostGoodPosterCreateBulk.OnConflict
// documentation for more info.
func (u *TopMostGoodPosterUpsertBulk) Update(set func(*TopMostGoodPosterUpsert)) *TopMostGoodPosterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TopMostGoodPosterUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *TopMostGoodPosterUpsertBulk) SetEntID(v uuid.UUID) *TopMostGoodPosterUpsertBulk {
	return u.Update(func(s *TopMostGoodPosterUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TopMostGoodPosterUpsertBulk) UpdateEntID() *TopMostGoodPosterUpsertBulk {
	return u.Update(func(s *TopMostGoodPosterUpsert) {
		s.UpdateEntID()
	})
}

// SetTopMostGoodID sets the "top_most_good_id" field.
func (u *TopMostGoodPosterUpsertBulk) SetTopMostGoodID(v uuid.UUID) *TopMostGoodPosterUpsertBulk {
	return u.Update(func(s *TopMostGoodPosterUpsert) {
		s.SetTopMostGoodID(v)
	})
}

// UpdateTopMostGoodID sets the "top_most_good_id" field to the value that was provided on create.
func (u *TopMostGoodPosterUpsertBulk) UpdateTopMostGoodID() *TopMostGoodPosterUpsertBulk {
	return u.Update(func(s *TopMostGoodPosterUpsert) {
		s.UpdateTopMostGoodID()
	})
}

// ClearTopMostGoodID clears the value of the "top_most_good_id" field.
func (u *TopMostGoodPosterUpsertBulk) ClearTopMostGoodID() *TopMostGoodPosterUpsertBulk {
	return u.Update(func(s *TopMostGoodPosterUpsert) {
		s.ClearTopMostGoodID()
	})
}

// SetPoster sets the "poster" field.
func (u *TopMostGoodPosterUpsertBulk) SetPoster(v string) *TopMostGoodPosterUpsertBulk {
	return u.Update(func(s *TopMostGoodPosterUpsert) {
		s.SetPoster(v)
	})
}

// UpdatePoster sets the "poster" field to the value that was provided on create.
func (u *TopMostGoodPosterUpsertBulk) UpdatePoster() *TopMostGoodPosterUpsertBulk {
	return u.Update(func(s *TopMostGoodPosterUpsert) {
		s.UpdatePoster()
	})
}

// ClearPoster clears the value of the "poster" field.
func (u *TopMostGoodPosterUpsertBulk) ClearPoster() *TopMostGoodPosterUpsertBulk {
	return u.Update(func(s *TopMostGoodPosterUpsert) {
		s.ClearPoster()
	})
}

// SetIndex sets the "index" field.
func (u *TopMostGoodPosterUpsertBulk) SetIndex(v uint8) *TopMostGoodPosterUpsertBulk {
	return u.Update(func(s *TopMostGoodPosterUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *TopMostGoodPosterUpsertBulk) AddIndex(v uint8) *TopMostGoodPosterUpsertBulk {
	return u.Update(func(s *TopMostGoodPosterUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *TopMostGoodPosterUpsertBulk) UpdateIndex() *TopMostGoodPosterUpsertBulk {
	return u.Update(func(s *TopMostGoodPosterUpsert) {
		s.UpdateIndex()
	})
}

// ClearIndex clears the value of the "index" field.
func (u *TopMostGoodPosterUpsertBulk) ClearIndex() *TopMostGoodPosterUpsertBulk {
	return u.Update(func(s *TopMostGoodPosterUpsert) {
		s.ClearIndex()
	})
}

// Exec executes the query.
func (u *TopMostGoodPosterUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the TopMostGoodPosterCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for TopMostGoodPosterCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TopMostGoodPosterUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

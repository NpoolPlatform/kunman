// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/subscriptiononeshot"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// SubscriptionOneShot is the model entity for the SubscriptionOneShot schema.
type SubscriptionOneShot struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// Quota holds the value of the "quota" field.
	Quota uint32 `json:"quota,omitempty"`
	// UsdPrice holds the value of the "usd_price" field.
	UsdPrice     decimal.Decimal `json:"usd_price,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubscriptionOneShot) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscriptiononeshot.FieldUsdPrice:
			values[i] = new(decimal.Decimal)
		case subscriptiononeshot.FieldID, subscriptiononeshot.FieldCreatedAt, subscriptiononeshot.FieldUpdatedAt, subscriptiononeshot.FieldDeletedAt, subscriptiononeshot.FieldQuota:
			values[i] = new(sql.NullInt64)
		case subscriptiononeshot.FieldEntID, subscriptiononeshot.FieldGoodID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubscriptionOneShot fields.
func (sos *SubscriptionOneShot) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscriptiononeshot.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sos.ID = uint32(value.Int64)
		case subscriptiononeshot.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				sos.EntID = *value
			}
		case subscriptiononeshot.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sos.CreatedAt = uint32(value.Int64)
			}
		case subscriptiononeshot.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sos.UpdatedAt = uint32(value.Int64)
			}
		case subscriptiononeshot.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sos.DeletedAt = uint32(value.Int64)
			}
		case subscriptiononeshot.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				sos.GoodID = *value
			}
		case subscriptiononeshot.FieldQuota:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quota", values[i])
			} else if value.Valid {
				sos.Quota = uint32(value.Int64)
			}
		case subscriptiononeshot.FieldUsdPrice:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field usd_price", values[i])
			} else if value != nil {
				sos.UsdPrice = *value
			}
		default:
			sos.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubscriptionOneShot.
// This includes values selected through modifiers, order, etc.
func (sos *SubscriptionOneShot) Value(name string) (ent.Value, error) {
	return sos.selectValues.Get(name)
}

// Update returns a builder for updating this SubscriptionOneShot.
// Note that you need to call SubscriptionOneShot.Unwrap() before calling this method if this SubscriptionOneShot
// was returned from a transaction, and the transaction was committed or rolled back.
func (sos *SubscriptionOneShot) Update() *SubscriptionOneShotUpdateOne {
	return NewSubscriptionOneShotClient(sos.config).UpdateOne(sos)
}

// Unwrap unwraps the SubscriptionOneShot entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sos *SubscriptionOneShot) Unwrap() *SubscriptionOneShot {
	_tx, ok := sos.config.driver.(*txDriver)
	if !ok {
		panic("generated: SubscriptionOneShot is not a transactional entity")
	}
	sos.config.driver = _tx.drv
	return sos
}

// String implements the fmt.Stringer.
func (sos *SubscriptionOneShot) String() string {
	var builder strings.Builder
	builder.WriteString("SubscriptionOneShot(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sos.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", sos.EntID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", sos.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", sos.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", sos.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", sos.GoodID))
	builder.WriteString(", ")
	builder.WriteString("quota=")
	builder.WriteString(fmt.Sprintf("%v", sos.Quota))
	builder.WriteString(", ")
	builder.WriteString("usd_price=")
	builder.WriteString(fmt.Sprintf("%v", sos.UsdPrice))
	builder.WriteByte(')')
	return builder.String()
}

// SubscriptionOneShots is a parsable slice of SubscriptionOneShot.
type SubscriptionOneShots []*SubscriptionOneShot

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/subscription"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// SubscriptionUpdate is the builder for updating Subscription entities.
type SubscriptionUpdate struct {
	config
	hooks     []Hook
	mutation  *SubscriptionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SubscriptionUpdate builder.
func (su *SubscriptionUpdate) Where(ps ...predicate.Subscription) *SubscriptionUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetEntID sets the "ent_id" field.
func (su *SubscriptionUpdate) SetEntID(u uuid.UUID) *SubscriptionUpdate {
	su.mutation.SetEntID(u)
	return su
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableEntID(u *uuid.UUID) *SubscriptionUpdate {
	if u != nil {
		su.SetEntID(*u)
	}
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *SubscriptionUpdate) SetCreatedAt(u uint32) *SubscriptionUpdate {
	su.mutation.ResetCreatedAt()
	su.mutation.SetCreatedAt(u)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableCreatedAt(u *uint32) *SubscriptionUpdate {
	if u != nil {
		su.SetCreatedAt(*u)
	}
	return su
}

// AddCreatedAt adds u to the "created_at" field.
func (su *SubscriptionUpdate) AddCreatedAt(u int32) *SubscriptionUpdate {
	su.mutation.AddCreatedAt(u)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SubscriptionUpdate) SetUpdatedAt(u uint32) *SubscriptionUpdate {
	su.mutation.ResetUpdatedAt()
	su.mutation.SetUpdatedAt(u)
	return su
}

// AddUpdatedAt adds u to the "updated_at" field.
func (su *SubscriptionUpdate) AddUpdatedAt(u int32) *SubscriptionUpdate {
	su.mutation.AddUpdatedAt(u)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *SubscriptionUpdate) SetDeletedAt(u uint32) *SubscriptionUpdate {
	su.mutation.ResetDeletedAt()
	su.mutation.SetDeletedAt(u)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableDeletedAt(u *uint32) *SubscriptionUpdate {
	if u != nil {
		su.SetDeletedAt(*u)
	}
	return su
}

// AddDeletedAt adds u to the "deleted_at" field.
func (su *SubscriptionUpdate) AddDeletedAt(u int32) *SubscriptionUpdate {
	su.mutation.AddDeletedAt(u)
	return su
}

// SetGoodID sets the "good_id" field.
func (su *SubscriptionUpdate) SetGoodID(u uuid.UUID) *SubscriptionUpdate {
	su.mutation.SetGoodID(u)
	return su
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableGoodID(u *uuid.UUID) *SubscriptionUpdate {
	if u != nil {
		su.SetGoodID(*u)
	}
	return su
}

// ClearGoodID clears the value of the "good_id" field.
func (su *SubscriptionUpdate) ClearGoodID() *SubscriptionUpdate {
	su.mutation.ClearGoodID()
	return su
}

// SetGoodType sets the "good_type" field.
func (su *SubscriptionUpdate) SetGoodType(s string) *SubscriptionUpdate {
	su.mutation.SetGoodType(s)
	return su
}

// SetNillableGoodType sets the "good_type" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableGoodType(s *string) *SubscriptionUpdate {
	if s != nil {
		su.SetGoodType(*s)
	}
	return su
}

// ClearGoodType clears the value of the "good_type" field.
func (su *SubscriptionUpdate) ClearGoodType() *SubscriptionUpdate {
	su.mutation.ClearGoodType()
	return su
}

// SetName sets the "name" field.
func (su *SubscriptionUpdate) SetName(s string) *SubscriptionUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableName(s *string) *SubscriptionUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// ClearName clears the value of the "name" field.
func (su *SubscriptionUpdate) ClearName() *SubscriptionUpdate {
	su.mutation.ClearName()
	return su
}

// SetDurationDisplayType sets the "duration_display_type" field.
func (su *SubscriptionUpdate) SetDurationDisplayType(s string) *SubscriptionUpdate {
	su.mutation.SetDurationDisplayType(s)
	return su
}

// SetNillableDurationDisplayType sets the "duration_display_type" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableDurationDisplayType(s *string) *SubscriptionUpdate {
	if s != nil {
		su.SetDurationDisplayType(*s)
	}
	return su
}

// ClearDurationDisplayType clears the value of the "duration_display_type" field.
func (su *SubscriptionUpdate) ClearDurationDisplayType() *SubscriptionUpdate {
	su.mutation.ClearDurationDisplayType()
	return su
}

// SetDurationUnits sets the "duration_units" field.
func (su *SubscriptionUpdate) SetDurationUnits(u uint32) *SubscriptionUpdate {
	su.mutation.ResetDurationUnits()
	su.mutation.SetDurationUnits(u)
	return su
}

// SetNillableDurationUnits sets the "duration_units" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableDurationUnits(u *uint32) *SubscriptionUpdate {
	if u != nil {
		su.SetDurationUnits(*u)
	}
	return su
}

// AddDurationUnits adds u to the "duration_units" field.
func (su *SubscriptionUpdate) AddDurationUnits(u int32) *SubscriptionUpdate {
	su.mutation.AddDurationUnits(u)
	return su
}

// ClearDurationUnits clears the value of the "duration_units" field.
func (su *SubscriptionUpdate) ClearDurationUnits() *SubscriptionUpdate {
	su.mutation.ClearDurationUnits()
	return su
}

// SetDurationQuota sets the "duration_quota" field.
func (su *SubscriptionUpdate) SetDurationQuota(u uint32) *SubscriptionUpdate {
	su.mutation.ResetDurationQuota()
	su.mutation.SetDurationQuota(u)
	return su
}

// SetNillableDurationQuota sets the "duration_quota" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableDurationQuota(u *uint32) *SubscriptionUpdate {
	if u != nil {
		su.SetDurationQuota(*u)
	}
	return su
}

// AddDurationQuota adds u to the "duration_quota" field.
func (su *SubscriptionUpdate) AddDurationQuota(u int32) *SubscriptionUpdate {
	su.mutation.AddDurationQuota(u)
	return su
}

// ClearDurationQuota clears the value of the "duration_quota" field.
func (su *SubscriptionUpdate) ClearDurationQuota() *SubscriptionUpdate {
	su.mutation.ClearDurationQuota()
	return su
}

// SetDailyBonusQuota sets the "daily_bonus_quota" field.
func (su *SubscriptionUpdate) SetDailyBonusQuota(u uint32) *SubscriptionUpdate {
	su.mutation.ResetDailyBonusQuota()
	su.mutation.SetDailyBonusQuota(u)
	return su
}

// SetNillableDailyBonusQuota sets the "daily_bonus_quota" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableDailyBonusQuota(u *uint32) *SubscriptionUpdate {
	if u != nil {
		su.SetDailyBonusQuota(*u)
	}
	return su
}

// AddDailyBonusQuota adds u to the "daily_bonus_quota" field.
func (su *SubscriptionUpdate) AddDailyBonusQuota(u int32) *SubscriptionUpdate {
	su.mutation.AddDailyBonusQuota(u)
	return su
}

// ClearDailyBonusQuota clears the value of the "daily_bonus_quota" field.
func (su *SubscriptionUpdate) ClearDailyBonusQuota() *SubscriptionUpdate {
	su.mutation.ClearDailyBonusQuota()
	return su
}

// SetUsdPrice sets the "usd_price" field.
func (su *SubscriptionUpdate) SetUsdPrice(d decimal.Decimal) *SubscriptionUpdate {
	su.mutation.SetUsdPrice(d)
	return su
}

// SetNillableUsdPrice sets the "usd_price" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableUsdPrice(d *decimal.Decimal) *SubscriptionUpdate {
	if d != nil {
		su.SetUsdPrice(*d)
	}
	return su
}

// ClearUsdPrice clears the value of the "usd_price" field.
func (su *SubscriptionUpdate) ClearUsdPrice() *SubscriptionUpdate {
	su.mutation.ClearUsdPrice()
	return su
}

// Mutation returns the SubscriptionMutation object of the builder.
func (su *SubscriptionUpdate) Mutation() *SubscriptionMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubscriptionUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubscriptionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubscriptionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SubscriptionUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := subscription.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *SubscriptionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubscriptionUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *SubscriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(subscription.Table, subscription.Columns, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUint32))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.EntID(); ok {
		_spec.SetField(subscription.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(subscription.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedCreatedAt(); ok {
		_spec.AddField(subscription.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(subscription.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(subscription.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(subscription.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedDeletedAt(); ok {
		_spec.AddField(subscription.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.GoodID(); ok {
		_spec.SetField(subscription.FieldGoodID, field.TypeUUID, value)
	}
	if su.mutation.GoodIDCleared() {
		_spec.ClearField(subscription.FieldGoodID, field.TypeUUID)
	}
	if value, ok := su.mutation.GoodType(); ok {
		_spec.SetField(subscription.FieldGoodType, field.TypeString, value)
	}
	if su.mutation.GoodTypeCleared() {
		_spec.ClearField(subscription.FieldGoodType, field.TypeString)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(subscription.FieldName, field.TypeString, value)
	}
	if su.mutation.NameCleared() {
		_spec.ClearField(subscription.FieldName, field.TypeString)
	}
	if value, ok := su.mutation.DurationDisplayType(); ok {
		_spec.SetField(subscription.FieldDurationDisplayType, field.TypeString, value)
	}
	if su.mutation.DurationDisplayTypeCleared() {
		_spec.ClearField(subscription.FieldDurationDisplayType, field.TypeString)
	}
	if value, ok := su.mutation.DurationUnits(); ok {
		_spec.SetField(subscription.FieldDurationUnits, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedDurationUnits(); ok {
		_spec.AddField(subscription.FieldDurationUnits, field.TypeUint32, value)
	}
	if su.mutation.DurationUnitsCleared() {
		_spec.ClearField(subscription.FieldDurationUnits, field.TypeUint32)
	}
	if value, ok := su.mutation.DurationQuota(); ok {
		_spec.SetField(subscription.FieldDurationQuota, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedDurationQuota(); ok {
		_spec.AddField(subscription.FieldDurationQuota, field.TypeUint32, value)
	}
	if su.mutation.DurationQuotaCleared() {
		_spec.ClearField(subscription.FieldDurationQuota, field.TypeUint32)
	}
	if value, ok := su.mutation.DailyBonusQuota(); ok {
		_spec.SetField(subscription.FieldDailyBonusQuota, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedDailyBonusQuota(); ok {
		_spec.AddField(subscription.FieldDailyBonusQuota, field.TypeUint32, value)
	}
	if su.mutation.DailyBonusQuotaCleared() {
		_spec.ClearField(subscription.FieldDailyBonusQuota, field.TypeUint32)
	}
	if value, ok := su.mutation.UsdPrice(); ok {
		_spec.SetField(subscription.FieldUsdPrice, field.TypeOther, value)
	}
	if su.mutation.UsdPriceCleared() {
		_spec.ClearField(subscription.FieldUsdPrice, field.TypeOther)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubscriptionUpdateOne is the builder for updating a single Subscription entity.
type SubscriptionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SubscriptionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (suo *SubscriptionUpdateOne) SetEntID(u uuid.UUID) *SubscriptionUpdateOne {
	suo.mutation.SetEntID(u)
	return suo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableEntID(u *uuid.UUID) *SubscriptionUpdateOne {
	if u != nil {
		suo.SetEntID(*u)
	}
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *SubscriptionUpdateOne) SetCreatedAt(u uint32) *SubscriptionUpdateOne {
	suo.mutation.ResetCreatedAt()
	suo.mutation.SetCreatedAt(u)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableCreatedAt(u *uint32) *SubscriptionUpdateOne {
	if u != nil {
		suo.SetCreatedAt(*u)
	}
	return suo
}

// AddCreatedAt adds u to the "created_at" field.
func (suo *SubscriptionUpdateOne) AddCreatedAt(u int32) *SubscriptionUpdateOne {
	suo.mutation.AddCreatedAt(u)
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SubscriptionUpdateOne) SetUpdatedAt(u uint32) *SubscriptionUpdateOne {
	suo.mutation.ResetUpdatedAt()
	suo.mutation.SetUpdatedAt(u)
	return suo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (suo *SubscriptionUpdateOne) AddUpdatedAt(u int32) *SubscriptionUpdateOne {
	suo.mutation.AddUpdatedAt(u)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *SubscriptionUpdateOne) SetDeletedAt(u uint32) *SubscriptionUpdateOne {
	suo.mutation.ResetDeletedAt()
	suo.mutation.SetDeletedAt(u)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableDeletedAt(u *uint32) *SubscriptionUpdateOne {
	if u != nil {
		suo.SetDeletedAt(*u)
	}
	return suo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (suo *SubscriptionUpdateOne) AddDeletedAt(u int32) *SubscriptionUpdateOne {
	suo.mutation.AddDeletedAt(u)
	return suo
}

// SetGoodID sets the "good_id" field.
func (suo *SubscriptionUpdateOne) SetGoodID(u uuid.UUID) *SubscriptionUpdateOne {
	suo.mutation.SetGoodID(u)
	return suo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableGoodID(u *uuid.UUID) *SubscriptionUpdateOne {
	if u != nil {
		suo.SetGoodID(*u)
	}
	return suo
}

// ClearGoodID clears the value of the "good_id" field.
func (suo *SubscriptionUpdateOne) ClearGoodID() *SubscriptionUpdateOne {
	suo.mutation.ClearGoodID()
	return suo
}

// SetGoodType sets the "good_type" field.
func (suo *SubscriptionUpdateOne) SetGoodType(s string) *SubscriptionUpdateOne {
	suo.mutation.SetGoodType(s)
	return suo
}

// SetNillableGoodType sets the "good_type" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableGoodType(s *string) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetGoodType(*s)
	}
	return suo
}

// ClearGoodType clears the value of the "good_type" field.
func (suo *SubscriptionUpdateOne) ClearGoodType() *SubscriptionUpdateOne {
	suo.mutation.ClearGoodType()
	return suo
}

// SetName sets the "name" field.
func (suo *SubscriptionUpdateOne) SetName(s string) *SubscriptionUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableName(s *string) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// ClearName clears the value of the "name" field.
func (suo *SubscriptionUpdateOne) ClearName() *SubscriptionUpdateOne {
	suo.mutation.ClearName()
	return suo
}

// SetDurationDisplayType sets the "duration_display_type" field.
func (suo *SubscriptionUpdateOne) SetDurationDisplayType(s string) *SubscriptionUpdateOne {
	suo.mutation.SetDurationDisplayType(s)
	return suo
}

// SetNillableDurationDisplayType sets the "duration_display_type" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableDurationDisplayType(s *string) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetDurationDisplayType(*s)
	}
	return suo
}

// ClearDurationDisplayType clears the value of the "duration_display_type" field.
func (suo *SubscriptionUpdateOne) ClearDurationDisplayType() *SubscriptionUpdateOne {
	suo.mutation.ClearDurationDisplayType()
	return suo
}

// SetDurationUnits sets the "duration_units" field.
func (suo *SubscriptionUpdateOne) SetDurationUnits(u uint32) *SubscriptionUpdateOne {
	suo.mutation.ResetDurationUnits()
	suo.mutation.SetDurationUnits(u)
	return suo
}

// SetNillableDurationUnits sets the "duration_units" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableDurationUnits(u *uint32) *SubscriptionUpdateOne {
	if u != nil {
		suo.SetDurationUnits(*u)
	}
	return suo
}

// AddDurationUnits adds u to the "duration_units" field.
func (suo *SubscriptionUpdateOne) AddDurationUnits(u int32) *SubscriptionUpdateOne {
	suo.mutation.AddDurationUnits(u)
	return suo
}

// ClearDurationUnits clears the value of the "duration_units" field.
func (suo *SubscriptionUpdateOne) ClearDurationUnits() *SubscriptionUpdateOne {
	suo.mutation.ClearDurationUnits()
	return suo
}

// SetDurationQuota sets the "duration_quota" field.
func (suo *SubscriptionUpdateOne) SetDurationQuota(u uint32) *SubscriptionUpdateOne {
	suo.mutation.ResetDurationQuota()
	suo.mutation.SetDurationQuota(u)
	return suo
}

// SetNillableDurationQuota sets the "duration_quota" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableDurationQuota(u *uint32) *SubscriptionUpdateOne {
	if u != nil {
		suo.SetDurationQuota(*u)
	}
	return suo
}

// AddDurationQuota adds u to the "duration_quota" field.
func (suo *SubscriptionUpdateOne) AddDurationQuota(u int32) *SubscriptionUpdateOne {
	suo.mutation.AddDurationQuota(u)
	return suo
}

// ClearDurationQuota clears the value of the "duration_quota" field.
func (suo *SubscriptionUpdateOne) ClearDurationQuota() *SubscriptionUpdateOne {
	suo.mutation.ClearDurationQuota()
	return suo
}

// SetDailyBonusQuota sets the "daily_bonus_quota" field.
func (suo *SubscriptionUpdateOne) SetDailyBonusQuota(u uint32) *SubscriptionUpdateOne {
	suo.mutation.ResetDailyBonusQuota()
	suo.mutation.SetDailyBonusQuota(u)
	return suo
}

// SetNillableDailyBonusQuota sets the "daily_bonus_quota" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableDailyBonusQuota(u *uint32) *SubscriptionUpdateOne {
	if u != nil {
		suo.SetDailyBonusQuota(*u)
	}
	return suo
}

// AddDailyBonusQuota adds u to the "daily_bonus_quota" field.
func (suo *SubscriptionUpdateOne) AddDailyBonusQuota(u int32) *SubscriptionUpdateOne {
	suo.mutation.AddDailyBonusQuota(u)
	return suo
}

// ClearDailyBonusQuota clears the value of the "daily_bonus_quota" field.
func (suo *SubscriptionUpdateOne) ClearDailyBonusQuota() *SubscriptionUpdateOne {
	suo.mutation.ClearDailyBonusQuota()
	return suo
}

// SetUsdPrice sets the "usd_price" field.
func (suo *SubscriptionUpdateOne) SetUsdPrice(d decimal.Decimal) *SubscriptionUpdateOne {
	suo.mutation.SetUsdPrice(d)
	return suo
}

// SetNillableUsdPrice sets the "usd_price" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableUsdPrice(d *decimal.Decimal) *SubscriptionUpdateOne {
	if d != nil {
		suo.SetUsdPrice(*d)
	}
	return suo
}

// ClearUsdPrice clears the value of the "usd_price" field.
func (suo *SubscriptionUpdateOne) ClearUsdPrice() *SubscriptionUpdateOne {
	suo.mutation.ClearUsdPrice()
	return suo
}

// Mutation returns the SubscriptionMutation object of the builder.
func (suo *SubscriptionUpdateOne) Mutation() *SubscriptionMutation {
	return suo.mutation
}

// Where appends a list predicates to the SubscriptionUpdate builder.
func (suo *SubscriptionUpdateOne) Where(ps ...predicate.Subscription) *SubscriptionUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubscriptionUpdateOne) Select(field string, fields ...string) *SubscriptionUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subscription entity.
func (suo *SubscriptionUpdateOne) Save(ctx context.Context) (*Subscription, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubscriptionUpdateOne) SaveX(ctx context.Context) *Subscription {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SubscriptionUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := subscription.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *SubscriptionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubscriptionUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *SubscriptionUpdateOne) sqlSave(ctx context.Context) (_node *Subscription, err error) {
	_spec := sqlgraph.NewUpdateSpec(subscription.Table, subscription.Columns, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUint32))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Subscription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscription.FieldID)
		for _, f := range fields {
			if !subscription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != subscription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.EntID(); ok {
		_spec.SetField(subscription.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(subscription.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(subscription.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(subscription.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(subscription.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(subscription.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(subscription.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.GoodID(); ok {
		_spec.SetField(subscription.FieldGoodID, field.TypeUUID, value)
	}
	if suo.mutation.GoodIDCleared() {
		_spec.ClearField(subscription.FieldGoodID, field.TypeUUID)
	}
	if value, ok := suo.mutation.GoodType(); ok {
		_spec.SetField(subscription.FieldGoodType, field.TypeString, value)
	}
	if suo.mutation.GoodTypeCleared() {
		_spec.ClearField(subscription.FieldGoodType, field.TypeString)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(subscription.FieldName, field.TypeString, value)
	}
	if suo.mutation.NameCleared() {
		_spec.ClearField(subscription.FieldName, field.TypeString)
	}
	if value, ok := suo.mutation.DurationDisplayType(); ok {
		_spec.SetField(subscription.FieldDurationDisplayType, field.TypeString, value)
	}
	if suo.mutation.DurationDisplayTypeCleared() {
		_spec.ClearField(subscription.FieldDurationDisplayType, field.TypeString)
	}
	if value, ok := suo.mutation.DurationUnits(); ok {
		_spec.SetField(subscription.FieldDurationUnits, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedDurationUnits(); ok {
		_spec.AddField(subscription.FieldDurationUnits, field.TypeUint32, value)
	}
	if suo.mutation.DurationUnitsCleared() {
		_spec.ClearField(subscription.FieldDurationUnits, field.TypeUint32)
	}
	if value, ok := suo.mutation.DurationQuota(); ok {
		_spec.SetField(subscription.FieldDurationQuota, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedDurationQuota(); ok {
		_spec.AddField(subscription.FieldDurationQuota, field.TypeUint32, value)
	}
	if suo.mutation.DurationQuotaCleared() {
		_spec.ClearField(subscription.FieldDurationQuota, field.TypeUint32)
	}
	if value, ok := suo.mutation.DailyBonusQuota(); ok {
		_spec.SetField(subscription.FieldDailyBonusQuota, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedDailyBonusQuota(); ok {
		_spec.AddField(subscription.FieldDailyBonusQuota, field.TypeUint32, value)
	}
	if suo.mutation.DailyBonusQuotaCleared() {
		_spec.ClearField(subscription.FieldDailyBonusQuota, field.TypeUint32)
	}
	if value, ok := suo.mutation.UsdPrice(); ok {
		_spec.SetField(subscription.FieldUsdPrice, field.TypeOther, value)
	}
	if suo.mutation.UsdPriceCleared() {
		_spec.ClearField(subscription.FieldUsdPrice, field.TypeOther)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Subscription{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}

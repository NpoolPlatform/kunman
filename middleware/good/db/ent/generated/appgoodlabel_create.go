// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appgoodlabel"
	"github.com/google/uuid"
)

// AppGoodLabelCreate is the builder for creating a AppGoodLabel entity.
type AppGoodLabelCreate struct {
	config
	mutation *AppGoodLabelMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (aglc *AppGoodLabelCreate) SetEntID(u uuid.UUID) *AppGoodLabelCreate {
	aglc.mutation.SetEntID(u)
	return aglc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (aglc *AppGoodLabelCreate) SetNillableEntID(u *uuid.UUID) *AppGoodLabelCreate {
	if u != nil {
		aglc.SetEntID(*u)
	}
	return aglc
}

// SetAppGoodID sets the "app_good_id" field.
func (aglc *AppGoodLabelCreate) SetAppGoodID(u uuid.UUID) *AppGoodLabelCreate {
	aglc.mutation.SetAppGoodID(u)
	return aglc
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (aglc *AppGoodLabelCreate) SetNillableAppGoodID(u *uuid.UUID) *AppGoodLabelCreate {
	if u != nil {
		aglc.SetAppGoodID(*u)
	}
	return aglc
}

// SetIcon sets the "icon" field.
func (aglc *AppGoodLabelCreate) SetIcon(s string) *AppGoodLabelCreate {
	aglc.mutation.SetIcon(s)
	return aglc
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (aglc *AppGoodLabelCreate) SetNillableIcon(s *string) *AppGoodLabelCreate {
	if s != nil {
		aglc.SetIcon(*s)
	}
	return aglc
}

// SetIconBgColor sets the "icon_bg_color" field.
func (aglc *AppGoodLabelCreate) SetIconBgColor(s string) *AppGoodLabelCreate {
	aglc.mutation.SetIconBgColor(s)
	return aglc
}

// SetNillableIconBgColor sets the "icon_bg_color" field if the given value is not nil.
func (aglc *AppGoodLabelCreate) SetNillableIconBgColor(s *string) *AppGoodLabelCreate {
	if s != nil {
		aglc.SetIconBgColor(*s)
	}
	return aglc
}

// SetLabel sets the "label" field.
func (aglc *AppGoodLabelCreate) SetLabel(s string) *AppGoodLabelCreate {
	aglc.mutation.SetLabel(s)
	return aglc
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (aglc *AppGoodLabelCreate) SetNillableLabel(s *string) *AppGoodLabelCreate {
	if s != nil {
		aglc.SetLabel(*s)
	}
	return aglc
}

// SetLabelBgColor sets the "label_bg_color" field.
func (aglc *AppGoodLabelCreate) SetLabelBgColor(s string) *AppGoodLabelCreate {
	aglc.mutation.SetLabelBgColor(s)
	return aglc
}

// SetNillableLabelBgColor sets the "label_bg_color" field if the given value is not nil.
func (aglc *AppGoodLabelCreate) SetNillableLabelBgColor(s *string) *AppGoodLabelCreate {
	if s != nil {
		aglc.SetLabelBgColor(*s)
	}
	return aglc
}

// SetIndex sets the "index" field.
func (aglc *AppGoodLabelCreate) SetIndex(u uint8) *AppGoodLabelCreate {
	aglc.mutation.SetIndex(u)
	return aglc
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (aglc *AppGoodLabelCreate) SetNillableIndex(u *uint8) *AppGoodLabelCreate {
	if u != nil {
		aglc.SetIndex(*u)
	}
	return aglc
}

// SetID sets the "id" field.
func (aglc *AppGoodLabelCreate) SetID(u uint32) *AppGoodLabelCreate {
	aglc.mutation.SetID(u)
	return aglc
}

// Mutation returns the AppGoodLabelMutation object of the builder.
func (aglc *AppGoodLabelCreate) Mutation() *AppGoodLabelMutation {
	return aglc.mutation
}

// Save creates the AppGoodLabel in the database.
func (aglc *AppGoodLabelCreate) Save(ctx context.Context) (*AppGoodLabel, error) {
	aglc.defaults()
	return withHooks(ctx, aglc.sqlSave, aglc.mutation, aglc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aglc *AppGoodLabelCreate) SaveX(ctx context.Context) *AppGoodLabel {
	v, err := aglc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aglc *AppGoodLabelCreate) Exec(ctx context.Context) error {
	_, err := aglc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aglc *AppGoodLabelCreate) ExecX(ctx context.Context) {
	if err := aglc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aglc *AppGoodLabelCreate) defaults() {
	if _, ok := aglc.mutation.EntID(); !ok {
		v := appgoodlabel.DefaultEntID()
		aglc.mutation.SetEntID(v)
	}
	if _, ok := aglc.mutation.AppGoodID(); !ok {
		v := appgoodlabel.DefaultAppGoodID()
		aglc.mutation.SetAppGoodID(v)
	}
	if _, ok := aglc.mutation.Icon(); !ok {
		v := appgoodlabel.DefaultIcon
		aglc.mutation.SetIcon(v)
	}
	if _, ok := aglc.mutation.IconBgColor(); !ok {
		v := appgoodlabel.DefaultIconBgColor
		aglc.mutation.SetIconBgColor(v)
	}
	if _, ok := aglc.mutation.Label(); !ok {
		v := appgoodlabel.DefaultLabel
		aglc.mutation.SetLabel(v)
	}
	if _, ok := aglc.mutation.LabelBgColor(); !ok {
		v := appgoodlabel.DefaultLabelBgColor
		aglc.mutation.SetLabelBgColor(v)
	}
	if _, ok := aglc.mutation.Index(); !ok {
		v := appgoodlabel.DefaultIndex
		aglc.mutation.SetIndex(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aglc *AppGoodLabelCreate) check() error {
	if _, ok := aglc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "AppGoodLabel.ent_id"`)}
	}
	return nil
}

func (aglc *AppGoodLabelCreate) sqlSave(ctx context.Context) (*AppGoodLabel, error) {
	if err := aglc.check(); err != nil {
		return nil, err
	}
	_node, _spec := aglc.createSpec()
	if err := sqlgraph.CreateNode(ctx, aglc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	aglc.mutation.id = &_node.ID
	aglc.mutation.done = true
	return _node, nil
}

func (aglc *AppGoodLabelCreate) createSpec() (*AppGoodLabel, *sqlgraph.CreateSpec) {
	var (
		_node = &AppGoodLabel{config: aglc.config}
		_spec = sqlgraph.NewCreateSpec(appgoodlabel.Table, sqlgraph.NewFieldSpec(appgoodlabel.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = aglc.conflict
	if id, ok := aglc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := aglc.mutation.EntID(); ok {
		_spec.SetField(appgoodlabel.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := aglc.mutation.AppGoodID(); ok {
		_spec.SetField(appgoodlabel.FieldAppGoodID, field.TypeUUID, value)
		_node.AppGoodID = value
	}
	if value, ok := aglc.mutation.Icon(); ok {
		_spec.SetField(appgoodlabel.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := aglc.mutation.IconBgColor(); ok {
		_spec.SetField(appgoodlabel.FieldIconBgColor, field.TypeString, value)
		_node.IconBgColor = value
	}
	if value, ok := aglc.mutation.Label(); ok {
		_spec.SetField(appgoodlabel.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := aglc.mutation.LabelBgColor(); ok {
		_spec.SetField(appgoodlabel.FieldLabelBgColor, field.TypeString, value)
		_node.LabelBgColor = value
	}
	if value, ok := aglc.mutation.Index(); ok {
		_spec.SetField(appgoodlabel.FieldIndex, field.TypeUint8, value)
		_node.Index = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppGoodLabel.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppGoodLabelUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (aglc *AppGoodLabelCreate) OnConflict(opts ...sql.ConflictOption) *AppGoodLabelUpsertOne {
	aglc.conflict = opts
	return &AppGoodLabelUpsertOne{
		create: aglc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppGoodLabel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aglc *AppGoodLabelCreate) OnConflictColumns(columns ...string) *AppGoodLabelUpsertOne {
	aglc.conflict = append(aglc.conflict, sql.ConflictColumns(columns...))
	return &AppGoodLabelUpsertOne{
		create: aglc,
	}
}

type (
	// AppGoodLabelUpsertOne is the builder for "upsert"-ing
	//  one AppGoodLabel node.
	AppGoodLabelUpsertOne struct {
		create *AppGoodLabelCreate
	}

	// AppGoodLabelUpsert is the "OnConflict" setter.
	AppGoodLabelUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *AppGoodLabelUpsert) SetEntID(v uuid.UUID) *AppGoodLabelUpsert {
	u.Set(appgoodlabel.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppGoodLabelUpsert) UpdateEntID() *AppGoodLabelUpsert {
	u.SetExcluded(appgoodlabel.FieldEntID)
	return u
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppGoodLabelUpsert) SetAppGoodID(v uuid.UUID) *AppGoodLabelUpsert {
	u.Set(appgoodlabel.FieldAppGoodID, v)
	return u
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppGoodLabelUpsert) UpdateAppGoodID() *AppGoodLabelUpsert {
	u.SetExcluded(appgoodlabel.FieldAppGoodID)
	return u
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppGoodLabelUpsert) ClearAppGoodID() *AppGoodLabelUpsert {
	u.SetNull(appgoodlabel.FieldAppGoodID)
	return u
}

// SetIcon sets the "icon" field.
func (u *AppGoodLabelUpsert) SetIcon(v string) *AppGoodLabelUpsert {
	u.Set(appgoodlabel.FieldIcon, v)
	return u
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *AppGoodLabelUpsert) UpdateIcon() *AppGoodLabelUpsert {
	u.SetExcluded(appgoodlabel.FieldIcon)
	return u
}

// ClearIcon clears the value of the "icon" field.
func (u *AppGoodLabelUpsert) ClearIcon() *AppGoodLabelUpsert {
	u.SetNull(appgoodlabel.FieldIcon)
	return u
}

// SetIconBgColor sets the "icon_bg_color" field.
func (u *AppGoodLabelUpsert) SetIconBgColor(v string) *AppGoodLabelUpsert {
	u.Set(appgoodlabel.FieldIconBgColor, v)
	return u
}

// UpdateIconBgColor sets the "icon_bg_color" field to the value that was provided on create.
func (u *AppGoodLabelUpsert) UpdateIconBgColor() *AppGoodLabelUpsert {
	u.SetExcluded(appgoodlabel.FieldIconBgColor)
	return u
}

// ClearIconBgColor clears the value of the "icon_bg_color" field.
func (u *AppGoodLabelUpsert) ClearIconBgColor() *AppGoodLabelUpsert {
	u.SetNull(appgoodlabel.FieldIconBgColor)
	return u
}

// SetLabel sets the "label" field.
func (u *AppGoodLabelUpsert) SetLabel(v string) *AppGoodLabelUpsert {
	u.Set(appgoodlabel.FieldLabel, v)
	return u
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *AppGoodLabelUpsert) UpdateLabel() *AppGoodLabelUpsert {
	u.SetExcluded(appgoodlabel.FieldLabel)
	return u
}

// ClearLabel clears the value of the "label" field.
func (u *AppGoodLabelUpsert) ClearLabel() *AppGoodLabelUpsert {
	u.SetNull(appgoodlabel.FieldLabel)
	return u
}

// SetLabelBgColor sets the "label_bg_color" field.
func (u *AppGoodLabelUpsert) SetLabelBgColor(v string) *AppGoodLabelUpsert {
	u.Set(appgoodlabel.FieldLabelBgColor, v)
	return u
}

// UpdateLabelBgColor sets the "label_bg_color" field to the value that was provided on create.
func (u *AppGoodLabelUpsert) UpdateLabelBgColor() *AppGoodLabelUpsert {
	u.SetExcluded(appgoodlabel.FieldLabelBgColor)
	return u
}

// ClearLabelBgColor clears the value of the "label_bg_color" field.
func (u *AppGoodLabelUpsert) ClearLabelBgColor() *AppGoodLabelUpsert {
	u.SetNull(appgoodlabel.FieldLabelBgColor)
	return u
}

// SetIndex sets the "index" field.
func (u *AppGoodLabelUpsert) SetIndex(v uint8) *AppGoodLabelUpsert {
	u.Set(appgoodlabel.FieldIndex, v)
	return u
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *AppGoodLabelUpsert) UpdateIndex() *AppGoodLabelUpsert {
	u.SetExcluded(appgoodlabel.FieldIndex)
	return u
}

// AddIndex adds v to the "index" field.
func (u *AppGoodLabelUpsert) AddIndex(v uint8) *AppGoodLabelUpsert {
	u.Add(appgoodlabel.FieldIndex, v)
	return u
}

// ClearIndex clears the value of the "index" field.
func (u *AppGoodLabelUpsert) ClearIndex() *AppGoodLabelUpsert {
	u.SetNull(appgoodlabel.FieldIndex)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppGoodLabel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appgoodlabel.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppGoodLabelUpsertOne) UpdateNewValues() *AppGoodLabelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appgoodlabel.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppGoodLabel.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppGoodLabelUpsertOne) Ignore() *AppGoodLabelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppGoodLabelUpsertOne) DoNothing() *AppGoodLabelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppGoodLabelCreate.OnConflict
// documentation for more info.
func (u *AppGoodLabelUpsertOne) Update(set func(*AppGoodLabelUpsert)) *AppGoodLabelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppGoodLabelUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppGoodLabelUpsertOne) SetEntID(v uuid.UUID) *AppGoodLabelUpsertOne {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppGoodLabelUpsertOne) UpdateEntID() *AppGoodLabelUpsertOne {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.UpdateEntID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppGoodLabelUpsertOne) SetAppGoodID(v uuid.UUID) *AppGoodLabelUpsertOne {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppGoodLabelUpsertOne) UpdateAppGoodID() *AppGoodLabelUpsertOne {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppGoodLabelUpsertOne) ClearAppGoodID() *AppGoodLabelUpsertOne {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.ClearAppGoodID()
	})
}

// SetIcon sets the "icon" field.
func (u *AppGoodLabelUpsertOne) SetIcon(v string) *AppGoodLabelUpsertOne {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *AppGoodLabelUpsertOne) UpdateIcon() *AppGoodLabelUpsertOne {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.UpdateIcon()
	})
}

// ClearIcon clears the value of the "icon" field.
func (u *AppGoodLabelUpsertOne) ClearIcon() *AppGoodLabelUpsertOne {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.ClearIcon()
	})
}

// SetIconBgColor sets the "icon_bg_color" field.
func (u *AppGoodLabelUpsertOne) SetIconBgColor(v string) *AppGoodLabelUpsertOne {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.SetIconBgColor(v)
	})
}

// UpdateIconBgColor sets the "icon_bg_color" field to the value that was provided on create.
func (u *AppGoodLabelUpsertOne) UpdateIconBgColor() *AppGoodLabelUpsertOne {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.UpdateIconBgColor()
	})
}

// ClearIconBgColor clears the value of the "icon_bg_color" field.
func (u *AppGoodLabelUpsertOne) ClearIconBgColor() *AppGoodLabelUpsertOne {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.ClearIconBgColor()
	})
}

// SetLabel sets the "label" field.
func (u *AppGoodLabelUpsertOne) SetLabel(v string) *AppGoodLabelUpsertOne {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *AppGoodLabelUpsertOne) UpdateLabel() *AppGoodLabelUpsertOne {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.UpdateLabel()
	})
}

// ClearLabel clears the value of the "label" field.
func (u *AppGoodLabelUpsertOne) ClearLabel() *AppGoodLabelUpsertOne {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.ClearLabel()
	})
}

// SetLabelBgColor sets the "label_bg_color" field.
func (u *AppGoodLabelUpsertOne) SetLabelBgColor(v string) *AppGoodLabelUpsertOne {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.SetLabelBgColor(v)
	})
}

// UpdateLabelBgColor sets the "label_bg_color" field to the value that was provided on create.
func (u *AppGoodLabelUpsertOne) UpdateLabelBgColor() *AppGoodLabelUpsertOne {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.UpdateLabelBgColor()
	})
}

// ClearLabelBgColor clears the value of the "label_bg_color" field.
func (u *AppGoodLabelUpsertOne) ClearLabelBgColor() *AppGoodLabelUpsertOne {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.ClearLabelBgColor()
	})
}

// SetIndex sets the "index" field.
func (u *AppGoodLabelUpsertOne) SetIndex(v uint8) *AppGoodLabelUpsertOne {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *AppGoodLabelUpsertOne) AddIndex(v uint8) *AppGoodLabelUpsertOne {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *AppGoodLabelUpsertOne) UpdateIndex() *AppGoodLabelUpsertOne {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.UpdateIndex()
	})
}

// ClearIndex clears the value of the "index" field.
func (u *AppGoodLabelUpsertOne) ClearIndex() *AppGoodLabelUpsertOne {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.ClearIndex()
	})
}

// Exec executes the query.
func (u *AppGoodLabelUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppGoodLabelCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppGoodLabelUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppGoodLabelUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppGoodLabelUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppGoodLabelCreateBulk is the builder for creating many AppGoodLabel entities in bulk.
type AppGoodLabelCreateBulk struct {
	config
	err      error
	builders []*AppGoodLabelCreate
	conflict []sql.ConflictOption
}

// Save creates the AppGoodLabel entities in the database.
func (aglcb *AppGoodLabelCreateBulk) Save(ctx context.Context) ([]*AppGoodLabel, error) {
	if aglcb.err != nil {
		return nil, aglcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aglcb.builders))
	nodes := make([]*AppGoodLabel, len(aglcb.builders))
	mutators := make([]Mutator, len(aglcb.builders))
	for i := range aglcb.builders {
		func(i int, root context.Context) {
			builder := aglcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppGoodLabelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aglcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aglcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aglcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aglcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aglcb *AppGoodLabelCreateBulk) SaveX(ctx context.Context) []*AppGoodLabel {
	v, err := aglcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aglcb *AppGoodLabelCreateBulk) Exec(ctx context.Context) error {
	_, err := aglcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aglcb *AppGoodLabelCreateBulk) ExecX(ctx context.Context) {
	if err := aglcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppGoodLabel.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppGoodLabelUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (aglcb *AppGoodLabelCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppGoodLabelUpsertBulk {
	aglcb.conflict = opts
	return &AppGoodLabelUpsertBulk{
		create: aglcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppGoodLabel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aglcb *AppGoodLabelCreateBulk) OnConflictColumns(columns ...string) *AppGoodLabelUpsertBulk {
	aglcb.conflict = append(aglcb.conflict, sql.ConflictColumns(columns...))
	return &AppGoodLabelUpsertBulk{
		create: aglcb,
	}
}

// AppGoodLabelUpsertBulk is the builder for "upsert"-ing
// a bulk of AppGoodLabel nodes.
type AppGoodLabelUpsertBulk struct {
	create *AppGoodLabelCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppGoodLabel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appgoodlabel.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppGoodLabelUpsertBulk) UpdateNewValues() *AppGoodLabelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appgoodlabel.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppGoodLabel.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppGoodLabelUpsertBulk) Ignore() *AppGoodLabelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppGoodLabelUpsertBulk) DoNothing() *AppGoodLabelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppGoodLabelCreateBulk.OnConflict
// documentation for more info.
func (u *AppGoodLabelUpsertBulk) Update(set func(*AppGoodLabelUpsert)) *AppGoodLabelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppGoodLabelUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppGoodLabelUpsertBulk) SetEntID(v uuid.UUID) *AppGoodLabelUpsertBulk {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppGoodLabelUpsertBulk) UpdateEntID() *AppGoodLabelUpsertBulk {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.UpdateEntID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppGoodLabelUpsertBulk) SetAppGoodID(v uuid.UUID) *AppGoodLabelUpsertBulk {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppGoodLabelUpsertBulk) UpdateAppGoodID() *AppGoodLabelUpsertBulk {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppGoodLabelUpsertBulk) ClearAppGoodID() *AppGoodLabelUpsertBulk {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.ClearAppGoodID()
	})
}

// SetIcon sets the "icon" field.
func (u *AppGoodLabelUpsertBulk) SetIcon(v string) *AppGoodLabelUpsertBulk {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *AppGoodLabelUpsertBulk) UpdateIcon() *AppGoodLabelUpsertBulk {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.UpdateIcon()
	})
}

// ClearIcon clears the value of the "icon" field.
func (u *AppGoodLabelUpsertBulk) ClearIcon() *AppGoodLabelUpsertBulk {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.ClearIcon()
	})
}

// SetIconBgColor sets the "icon_bg_color" field.
func (u *AppGoodLabelUpsertBulk) SetIconBgColor(v string) *AppGoodLabelUpsertBulk {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.SetIconBgColor(v)
	})
}

// UpdateIconBgColor sets the "icon_bg_color" field to the value that was provided on create.
func (u *AppGoodLabelUpsertBulk) UpdateIconBgColor() *AppGoodLabelUpsertBulk {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.UpdateIconBgColor()
	})
}

// ClearIconBgColor clears the value of the "icon_bg_color" field.
func (u *AppGoodLabelUpsertBulk) ClearIconBgColor() *AppGoodLabelUpsertBulk {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.ClearIconBgColor()
	})
}

// SetLabel sets the "label" field.
func (u *AppGoodLabelUpsertBulk) SetLabel(v string) *AppGoodLabelUpsertBulk {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *AppGoodLabelUpsertBulk) UpdateLabel() *AppGoodLabelUpsertBulk {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.UpdateLabel()
	})
}

// ClearLabel clears the value of the "label" field.
func (u *AppGoodLabelUpsertBulk) ClearLabel() *AppGoodLabelUpsertBulk {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.ClearLabel()
	})
}

// SetLabelBgColor sets the "label_bg_color" field.
func (u *AppGoodLabelUpsertBulk) SetLabelBgColor(v string) *AppGoodLabelUpsertBulk {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.SetLabelBgColor(v)
	})
}

// UpdateLabelBgColor sets the "label_bg_color" field to the value that was provided on create.
func (u *AppGoodLabelUpsertBulk) UpdateLabelBgColor() *AppGoodLabelUpsertBulk {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.UpdateLabelBgColor()
	})
}

// ClearLabelBgColor clears the value of the "label_bg_color" field.
func (u *AppGoodLabelUpsertBulk) ClearLabelBgColor() *AppGoodLabelUpsertBulk {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.ClearLabelBgColor()
	})
}

// SetIndex sets the "index" field.
func (u *AppGoodLabelUpsertBulk) SetIndex(v uint8) *AppGoodLabelUpsertBulk {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *AppGoodLabelUpsertBulk) AddIndex(v uint8) *AppGoodLabelUpsertBulk {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *AppGoodLabelUpsertBulk) UpdateIndex() *AppGoodLabelUpsertBulk {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.UpdateIndex()
	})
}

// ClearIndex clears the value of the "index" field.
func (u *AppGoodLabelUpsertBulk) ClearIndex() *AppGoodLabelUpsertBulk {
	return u.Update(func(s *AppGoodLabelUpsert) {
		s.ClearIndex()
	})
}

// Exec executes the query.
func (u *AppGoodLabelUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the AppGoodLabelCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppGoodLabelCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppGoodLabelUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

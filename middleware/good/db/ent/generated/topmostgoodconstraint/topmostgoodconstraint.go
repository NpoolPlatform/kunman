// Code generated by ent, DO NOT EDIT.

package topmostgoodconstraint

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the topmostgoodconstraint type in the database.
	Label = "top_most_good_constraint"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldTopMostGoodID holds the string denoting the top_most_good_id field in the database.
	FieldTopMostGoodID = "top_most_good_id"
	// FieldConstraint holds the string denoting the constraint field in the database.
	FieldConstraint = "constraint"
	// FieldTargetValue holds the string denoting the target_value field in the database.
	FieldTargetValue = "target_value"
	// FieldIndex holds the string denoting the index field in the database.
	FieldIndex = "index"
	// Table holds the table name of the topmostgoodconstraint in the database.
	Table = "top_most_good_constraints"
)

// Columns holds all SQL columns for topmostgoodconstraint fields.
var Columns = []string{
	FieldID,
	FieldEntID,
	FieldTopMostGoodID,
	FieldConstraint,
	FieldTargetValue,
	FieldIndex,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultTopMostGoodID holds the default value on creation for the "top_most_good_id" field.
	DefaultTopMostGoodID func() uuid.UUID
	// DefaultConstraint holds the default value on creation for the "constraint" field.
	DefaultConstraint string
	// DefaultTargetValue holds the default value on creation for the "target_value" field.
	DefaultTargetValue decimal.Decimal
	// DefaultIndex holds the default value on creation for the "index" field.
	DefaultIndex uint8
)

// OrderOption defines the ordering options for the TopMostGoodConstraint queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByTopMostGoodID orders the results by the top_most_good_id field.
func ByTopMostGoodID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopMostGoodID, opts...).ToFunc()
}

// ByConstraint orders the results by the constraint field.
func ByConstraint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConstraint, opts...).ToFunc()
}

// ByTargetValue orders the results by the target_value field.
func ByTargetValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetValue, opts...).ToFunc()
}

// ByIndex orders the results by the index field.
func ByIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndex, opts...).ToFunc()
}

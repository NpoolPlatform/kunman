// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/appgooddescription"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// AppGoodDescriptionUpdate is the builder for updating AppGoodDescription entities.
type AppGoodDescriptionUpdate struct {
	config
	hooks     []Hook
	mutation  *AppGoodDescriptionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppGoodDescriptionUpdate builder.
func (agdu *AppGoodDescriptionUpdate) Where(ps ...predicate.AppGoodDescription) *AppGoodDescriptionUpdate {
	agdu.mutation.Where(ps...)
	return agdu
}

// SetEntID sets the "ent_id" field.
func (agdu *AppGoodDescriptionUpdate) SetEntID(u uuid.UUID) *AppGoodDescriptionUpdate {
	agdu.mutation.SetEntID(u)
	return agdu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (agdu *AppGoodDescriptionUpdate) SetNillableEntID(u *uuid.UUID) *AppGoodDescriptionUpdate {
	if u != nil {
		agdu.SetEntID(*u)
	}
	return agdu
}

// SetAppGoodID sets the "app_good_id" field.
func (agdu *AppGoodDescriptionUpdate) SetAppGoodID(u uuid.UUID) *AppGoodDescriptionUpdate {
	agdu.mutation.SetAppGoodID(u)
	return agdu
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (agdu *AppGoodDescriptionUpdate) SetNillableAppGoodID(u *uuid.UUID) *AppGoodDescriptionUpdate {
	if u != nil {
		agdu.SetAppGoodID(*u)
	}
	return agdu
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (agdu *AppGoodDescriptionUpdate) ClearAppGoodID() *AppGoodDescriptionUpdate {
	agdu.mutation.ClearAppGoodID()
	return agdu
}

// SetDescription sets the "description" field.
func (agdu *AppGoodDescriptionUpdate) SetDescription(s string) *AppGoodDescriptionUpdate {
	agdu.mutation.SetDescription(s)
	return agdu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (agdu *AppGoodDescriptionUpdate) SetNillableDescription(s *string) *AppGoodDescriptionUpdate {
	if s != nil {
		agdu.SetDescription(*s)
	}
	return agdu
}

// ClearDescription clears the value of the "description" field.
func (agdu *AppGoodDescriptionUpdate) ClearDescription() *AppGoodDescriptionUpdate {
	agdu.mutation.ClearDescription()
	return agdu
}

// SetIndex sets the "index" field.
func (agdu *AppGoodDescriptionUpdate) SetIndex(u uint8) *AppGoodDescriptionUpdate {
	agdu.mutation.ResetIndex()
	agdu.mutation.SetIndex(u)
	return agdu
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (agdu *AppGoodDescriptionUpdate) SetNillableIndex(u *uint8) *AppGoodDescriptionUpdate {
	if u != nil {
		agdu.SetIndex(*u)
	}
	return agdu
}

// AddIndex adds u to the "index" field.
func (agdu *AppGoodDescriptionUpdate) AddIndex(u int8) *AppGoodDescriptionUpdate {
	agdu.mutation.AddIndex(u)
	return agdu
}

// ClearIndex clears the value of the "index" field.
func (agdu *AppGoodDescriptionUpdate) ClearIndex() *AppGoodDescriptionUpdate {
	agdu.mutation.ClearIndex()
	return agdu
}

// Mutation returns the AppGoodDescriptionMutation object of the builder.
func (agdu *AppGoodDescriptionUpdate) Mutation() *AppGoodDescriptionMutation {
	return agdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (agdu *AppGoodDescriptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, agdu.sqlSave, agdu.mutation, agdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (agdu *AppGoodDescriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := agdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (agdu *AppGoodDescriptionUpdate) Exec(ctx context.Context) error {
	_, err := agdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agdu *AppGoodDescriptionUpdate) ExecX(ctx context.Context) {
	if err := agdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (agdu *AppGoodDescriptionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppGoodDescriptionUpdate {
	agdu.modifiers = append(agdu.modifiers, modifiers...)
	return agdu
}

func (agdu *AppGoodDescriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appgooddescription.Table, appgooddescription.Columns, sqlgraph.NewFieldSpec(appgooddescription.FieldID, field.TypeUint32))
	if ps := agdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agdu.mutation.EntID(); ok {
		_spec.SetField(appgooddescription.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := agdu.mutation.AppGoodID(); ok {
		_spec.SetField(appgooddescription.FieldAppGoodID, field.TypeUUID, value)
	}
	if agdu.mutation.AppGoodIDCleared() {
		_spec.ClearField(appgooddescription.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := agdu.mutation.Description(); ok {
		_spec.SetField(appgooddescription.FieldDescription, field.TypeString, value)
	}
	if agdu.mutation.DescriptionCleared() {
		_spec.ClearField(appgooddescription.FieldDescription, field.TypeString)
	}
	if value, ok := agdu.mutation.Index(); ok {
		_spec.SetField(appgooddescription.FieldIndex, field.TypeUint8, value)
	}
	if value, ok := agdu.mutation.AddedIndex(); ok {
		_spec.AddField(appgooddescription.FieldIndex, field.TypeUint8, value)
	}
	if agdu.mutation.IndexCleared() {
		_spec.ClearField(appgooddescription.FieldIndex, field.TypeUint8)
	}
	_spec.AddModifiers(agdu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, agdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appgooddescription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	agdu.mutation.done = true
	return n, nil
}

// AppGoodDescriptionUpdateOne is the builder for updating a single AppGoodDescription entity.
type AppGoodDescriptionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppGoodDescriptionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (agduo *AppGoodDescriptionUpdateOne) SetEntID(u uuid.UUID) *AppGoodDescriptionUpdateOne {
	agduo.mutation.SetEntID(u)
	return agduo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (agduo *AppGoodDescriptionUpdateOne) SetNillableEntID(u *uuid.UUID) *AppGoodDescriptionUpdateOne {
	if u != nil {
		agduo.SetEntID(*u)
	}
	return agduo
}

// SetAppGoodID sets the "app_good_id" field.
func (agduo *AppGoodDescriptionUpdateOne) SetAppGoodID(u uuid.UUID) *AppGoodDescriptionUpdateOne {
	agduo.mutation.SetAppGoodID(u)
	return agduo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (agduo *AppGoodDescriptionUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *AppGoodDescriptionUpdateOne {
	if u != nil {
		agduo.SetAppGoodID(*u)
	}
	return agduo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (agduo *AppGoodDescriptionUpdateOne) ClearAppGoodID() *AppGoodDescriptionUpdateOne {
	agduo.mutation.ClearAppGoodID()
	return agduo
}

// SetDescription sets the "description" field.
func (agduo *AppGoodDescriptionUpdateOne) SetDescription(s string) *AppGoodDescriptionUpdateOne {
	agduo.mutation.SetDescription(s)
	return agduo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (agduo *AppGoodDescriptionUpdateOne) SetNillableDescription(s *string) *AppGoodDescriptionUpdateOne {
	if s != nil {
		agduo.SetDescription(*s)
	}
	return agduo
}

// ClearDescription clears the value of the "description" field.
func (agduo *AppGoodDescriptionUpdateOne) ClearDescription() *AppGoodDescriptionUpdateOne {
	agduo.mutation.ClearDescription()
	return agduo
}

// SetIndex sets the "index" field.
func (agduo *AppGoodDescriptionUpdateOne) SetIndex(u uint8) *AppGoodDescriptionUpdateOne {
	agduo.mutation.ResetIndex()
	agduo.mutation.SetIndex(u)
	return agduo
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (agduo *AppGoodDescriptionUpdateOne) SetNillableIndex(u *uint8) *AppGoodDescriptionUpdateOne {
	if u != nil {
		agduo.SetIndex(*u)
	}
	return agduo
}

// AddIndex adds u to the "index" field.
func (agduo *AppGoodDescriptionUpdateOne) AddIndex(u int8) *AppGoodDescriptionUpdateOne {
	agduo.mutation.AddIndex(u)
	return agduo
}

// ClearIndex clears the value of the "index" field.
func (agduo *AppGoodDescriptionUpdateOne) ClearIndex() *AppGoodDescriptionUpdateOne {
	agduo.mutation.ClearIndex()
	return agduo
}

// Mutation returns the AppGoodDescriptionMutation object of the builder.
func (agduo *AppGoodDescriptionUpdateOne) Mutation() *AppGoodDescriptionMutation {
	return agduo.mutation
}

// Where appends a list predicates to the AppGoodDescriptionUpdate builder.
func (agduo *AppGoodDescriptionUpdateOne) Where(ps ...predicate.AppGoodDescription) *AppGoodDescriptionUpdateOne {
	agduo.mutation.Where(ps...)
	return agduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (agduo *AppGoodDescriptionUpdateOne) Select(field string, fields ...string) *AppGoodDescriptionUpdateOne {
	agduo.fields = append([]string{field}, fields...)
	return agduo
}

// Save executes the query and returns the updated AppGoodDescription entity.
func (agduo *AppGoodDescriptionUpdateOne) Save(ctx context.Context) (*AppGoodDescription, error) {
	return withHooks(ctx, agduo.sqlSave, agduo.mutation, agduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (agduo *AppGoodDescriptionUpdateOne) SaveX(ctx context.Context) *AppGoodDescription {
	node, err := agduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (agduo *AppGoodDescriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := agduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agduo *AppGoodDescriptionUpdateOne) ExecX(ctx context.Context) {
	if err := agduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (agduo *AppGoodDescriptionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppGoodDescriptionUpdateOne {
	agduo.modifiers = append(agduo.modifiers, modifiers...)
	return agduo
}

func (agduo *AppGoodDescriptionUpdateOne) sqlSave(ctx context.Context) (_node *AppGoodDescription, err error) {
	_spec := sqlgraph.NewUpdateSpec(appgooddescription.Table, appgooddescription.Columns, sqlgraph.NewFieldSpec(appgooddescription.FieldID, field.TypeUint32))
	id, ok := agduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AppGoodDescription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := agduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appgooddescription.FieldID)
		for _, f := range fields {
			if !appgooddescription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != appgooddescription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := agduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agduo.mutation.EntID(); ok {
		_spec.SetField(appgooddescription.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := agduo.mutation.AppGoodID(); ok {
		_spec.SetField(appgooddescription.FieldAppGoodID, field.TypeUUID, value)
	}
	if agduo.mutation.AppGoodIDCleared() {
		_spec.ClearField(appgooddescription.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := agduo.mutation.Description(); ok {
		_spec.SetField(appgooddescription.FieldDescription, field.TypeString, value)
	}
	if agduo.mutation.DescriptionCleared() {
		_spec.ClearField(appgooddescription.FieldDescription, field.TypeString)
	}
	if value, ok := agduo.mutation.Index(); ok {
		_spec.SetField(appgooddescription.FieldIndex, field.TypeUint8, value)
	}
	if value, ok := agduo.mutation.AddedIndex(); ok {
		_spec.AddField(appgooddescription.FieldIndex, field.TypeUint8, value)
	}
	if agduo.mutation.IndexCleared() {
		_spec.ClearField(appgooddescription.FieldIndex, field.TypeUint8)
	}
	_spec.AddModifiers(agduo.modifiers...)
	_node = &AppGoodDescription{config: agduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, agduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appgooddescription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	agduo.mutation.done = true
	return _node, nil
}

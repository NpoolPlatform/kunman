// Code generated by ent, DO NOT EDIT.

package comment

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the comment type in the database.
	Label = "comment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldAppGoodID holds the string denoting the app_good_id field in the database.
	FieldAppGoodID = "app_good_id"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldReplyToID holds the string denoting the reply_to_id field in the database.
	FieldReplyToID = "reply_to_id"
	// FieldAnonymous holds the string denoting the anonymous field in the database.
	FieldAnonymous = "anonymous"
	// FieldTrialUser holds the string denoting the trial_user field in the database.
	FieldTrialUser = "trial_user"
	// FieldPurchasedUser holds the string denoting the purchased_user field in the database.
	FieldPurchasedUser = "purchased_user"
	// FieldHide holds the string denoting the hide field in the database.
	FieldHide = "hide"
	// FieldHideReason holds the string denoting the hide_reason field in the database.
	FieldHideReason = "hide_reason"
	// Table holds the table name of the comment in the database.
	Table = "app_good_comments"
)

// Columns holds all SQL columns for comment fields.
var Columns = []string{
	FieldID,
	FieldEntID,
	FieldUserID,
	FieldAppGoodID,
	FieldOrderID,
	FieldContent,
	FieldReplyToID,
	FieldAnonymous,
	FieldTrialUser,
	FieldPurchasedUser,
	FieldHide,
	FieldHideReason,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultUserID holds the default value on creation for the "user_id" field.
	DefaultUserID func() uuid.UUID
	// DefaultAppGoodID holds the default value on creation for the "app_good_id" field.
	DefaultAppGoodID func() uuid.UUID
	// DefaultOrderID holds the default value on creation for the "order_id" field.
	DefaultOrderID func() uuid.UUID
	// DefaultContent holds the default value on creation for the "content" field.
	DefaultContent string
	// DefaultReplyToID holds the default value on creation for the "reply_to_id" field.
	DefaultReplyToID func() uuid.UUID
	// DefaultAnonymous holds the default value on creation for the "anonymous" field.
	DefaultAnonymous bool
	// DefaultTrialUser holds the default value on creation for the "trial_user" field.
	DefaultTrialUser bool
	// DefaultPurchasedUser holds the default value on creation for the "purchased_user" field.
	DefaultPurchasedUser bool
	// DefaultHide holds the default value on creation for the "hide" field.
	DefaultHide bool
	// DefaultHideReason holds the default value on creation for the "hide_reason" field.
	DefaultHideReason string
)

// OrderOption defines the ordering options for the Comment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByAppGoodID orders the results by the app_good_id field.
func ByAppGoodID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppGoodID, opts...).ToFunc()
}

// ByOrderID orders the results by the order_id field.
func ByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderID, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByReplyToID orders the results by the reply_to_id field.
func ByReplyToID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReplyToID, opts...).ToFunc()
}

// ByAnonymous orders the results by the anonymous field.
func ByAnonymous(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnonymous, opts...).ToFunc()
}

// ByTrialUser orders the results by the trial_user field.
func ByTrialUser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrialUser, opts...).ToFunc()
}

// ByPurchasedUser orders the results by the purchased_user field.
func ByPurchasedUser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPurchasedUser, opts...).ToFunc()
}

// ByHide orders the results by the hide field.
func ByHide(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHide, opts...).ToFunc()
}

// ByHideReason orders the results by the hide_reason field.
func ByHideReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHideReason, opts...).ToFunc()
}

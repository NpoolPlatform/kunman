// Code generated by ent, DO NOT EDIT.

package delegatedstaking

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/good/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldEQ(FieldEntID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldEQ(FieldDeletedAt, v))
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldEQ(FieldGoodID, v))
}

// ContractCodeURL applies equality check predicate on the "contract_code_url" field. It's identical to ContractCodeURLEQ.
func ContractCodeURL(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldEQ(FieldContractCodeURL, v))
}

// ContractCodeBranch applies equality check predicate on the "contract_code_branch" field. It's identical to ContractCodeBranchEQ.
func ContractCodeBranch(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldEQ(FieldContractCodeBranch, v))
}

// ContractState applies equality check predicate on the "contract_state" field. It's identical to ContractStateEQ.
func ContractState(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldEQ(FieldContractState, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldLTE(FieldEntID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldLTE(FieldDeletedAt, v))
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldEQ(FieldGoodID, v))
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldNEQ(FieldGoodID, v))
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldIn(FieldGoodID, vs...))
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldNotIn(FieldGoodID, vs...))
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldGT(FieldGoodID, v))
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldGTE(FieldGoodID, v))
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldLT(FieldGoodID, v))
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldLTE(FieldGoodID, v))
}

// GoodIDIsNil applies the IsNil predicate on the "good_id" field.
func GoodIDIsNil() predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldIsNull(FieldGoodID))
}

// GoodIDNotNil applies the NotNil predicate on the "good_id" field.
func GoodIDNotNil() predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldNotNull(FieldGoodID))
}

// ContractCodeURLEQ applies the EQ predicate on the "contract_code_url" field.
func ContractCodeURLEQ(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldEQ(FieldContractCodeURL, v))
}

// ContractCodeURLNEQ applies the NEQ predicate on the "contract_code_url" field.
func ContractCodeURLNEQ(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldNEQ(FieldContractCodeURL, v))
}

// ContractCodeURLIn applies the In predicate on the "contract_code_url" field.
func ContractCodeURLIn(vs ...string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldIn(FieldContractCodeURL, vs...))
}

// ContractCodeURLNotIn applies the NotIn predicate on the "contract_code_url" field.
func ContractCodeURLNotIn(vs ...string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldNotIn(FieldContractCodeURL, vs...))
}

// ContractCodeURLGT applies the GT predicate on the "contract_code_url" field.
func ContractCodeURLGT(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldGT(FieldContractCodeURL, v))
}

// ContractCodeURLGTE applies the GTE predicate on the "contract_code_url" field.
func ContractCodeURLGTE(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldGTE(FieldContractCodeURL, v))
}

// ContractCodeURLLT applies the LT predicate on the "contract_code_url" field.
func ContractCodeURLLT(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldLT(FieldContractCodeURL, v))
}

// ContractCodeURLLTE applies the LTE predicate on the "contract_code_url" field.
func ContractCodeURLLTE(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldLTE(FieldContractCodeURL, v))
}

// ContractCodeURLContains applies the Contains predicate on the "contract_code_url" field.
func ContractCodeURLContains(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldContains(FieldContractCodeURL, v))
}

// ContractCodeURLHasPrefix applies the HasPrefix predicate on the "contract_code_url" field.
func ContractCodeURLHasPrefix(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldHasPrefix(FieldContractCodeURL, v))
}

// ContractCodeURLHasSuffix applies the HasSuffix predicate on the "contract_code_url" field.
func ContractCodeURLHasSuffix(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldHasSuffix(FieldContractCodeURL, v))
}

// ContractCodeURLIsNil applies the IsNil predicate on the "contract_code_url" field.
func ContractCodeURLIsNil() predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldIsNull(FieldContractCodeURL))
}

// ContractCodeURLNotNil applies the NotNil predicate on the "contract_code_url" field.
func ContractCodeURLNotNil() predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldNotNull(FieldContractCodeURL))
}

// ContractCodeURLEqualFold applies the EqualFold predicate on the "contract_code_url" field.
func ContractCodeURLEqualFold(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldEqualFold(FieldContractCodeURL, v))
}

// ContractCodeURLContainsFold applies the ContainsFold predicate on the "contract_code_url" field.
func ContractCodeURLContainsFold(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldContainsFold(FieldContractCodeURL, v))
}

// ContractCodeBranchEQ applies the EQ predicate on the "contract_code_branch" field.
func ContractCodeBranchEQ(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldEQ(FieldContractCodeBranch, v))
}

// ContractCodeBranchNEQ applies the NEQ predicate on the "contract_code_branch" field.
func ContractCodeBranchNEQ(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldNEQ(FieldContractCodeBranch, v))
}

// ContractCodeBranchIn applies the In predicate on the "contract_code_branch" field.
func ContractCodeBranchIn(vs ...string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldIn(FieldContractCodeBranch, vs...))
}

// ContractCodeBranchNotIn applies the NotIn predicate on the "contract_code_branch" field.
func ContractCodeBranchNotIn(vs ...string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldNotIn(FieldContractCodeBranch, vs...))
}

// ContractCodeBranchGT applies the GT predicate on the "contract_code_branch" field.
func ContractCodeBranchGT(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldGT(FieldContractCodeBranch, v))
}

// ContractCodeBranchGTE applies the GTE predicate on the "contract_code_branch" field.
func ContractCodeBranchGTE(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldGTE(FieldContractCodeBranch, v))
}

// ContractCodeBranchLT applies the LT predicate on the "contract_code_branch" field.
func ContractCodeBranchLT(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldLT(FieldContractCodeBranch, v))
}

// ContractCodeBranchLTE applies the LTE predicate on the "contract_code_branch" field.
func ContractCodeBranchLTE(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldLTE(FieldContractCodeBranch, v))
}

// ContractCodeBranchContains applies the Contains predicate on the "contract_code_branch" field.
func ContractCodeBranchContains(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldContains(FieldContractCodeBranch, v))
}

// ContractCodeBranchHasPrefix applies the HasPrefix predicate on the "contract_code_branch" field.
func ContractCodeBranchHasPrefix(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldHasPrefix(FieldContractCodeBranch, v))
}

// ContractCodeBranchHasSuffix applies the HasSuffix predicate on the "contract_code_branch" field.
func ContractCodeBranchHasSuffix(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldHasSuffix(FieldContractCodeBranch, v))
}

// ContractCodeBranchIsNil applies the IsNil predicate on the "contract_code_branch" field.
func ContractCodeBranchIsNil() predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldIsNull(FieldContractCodeBranch))
}

// ContractCodeBranchNotNil applies the NotNil predicate on the "contract_code_branch" field.
func ContractCodeBranchNotNil() predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldNotNull(FieldContractCodeBranch))
}

// ContractCodeBranchEqualFold applies the EqualFold predicate on the "contract_code_branch" field.
func ContractCodeBranchEqualFold(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldEqualFold(FieldContractCodeBranch, v))
}

// ContractCodeBranchContainsFold applies the ContainsFold predicate on the "contract_code_branch" field.
func ContractCodeBranchContainsFold(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldContainsFold(FieldContractCodeBranch, v))
}

// ContractStateEQ applies the EQ predicate on the "contract_state" field.
func ContractStateEQ(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldEQ(FieldContractState, v))
}

// ContractStateNEQ applies the NEQ predicate on the "contract_state" field.
func ContractStateNEQ(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldNEQ(FieldContractState, v))
}

// ContractStateIn applies the In predicate on the "contract_state" field.
func ContractStateIn(vs ...string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldIn(FieldContractState, vs...))
}

// ContractStateNotIn applies the NotIn predicate on the "contract_state" field.
func ContractStateNotIn(vs ...string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldNotIn(FieldContractState, vs...))
}

// ContractStateGT applies the GT predicate on the "contract_state" field.
func ContractStateGT(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldGT(FieldContractState, v))
}

// ContractStateGTE applies the GTE predicate on the "contract_state" field.
func ContractStateGTE(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldGTE(FieldContractState, v))
}

// ContractStateLT applies the LT predicate on the "contract_state" field.
func ContractStateLT(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldLT(FieldContractState, v))
}

// ContractStateLTE applies the LTE predicate on the "contract_state" field.
func ContractStateLTE(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldLTE(FieldContractState, v))
}

// ContractStateContains applies the Contains predicate on the "contract_state" field.
func ContractStateContains(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldContains(FieldContractState, v))
}

// ContractStateHasPrefix applies the HasPrefix predicate on the "contract_state" field.
func ContractStateHasPrefix(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldHasPrefix(FieldContractState, v))
}

// ContractStateHasSuffix applies the HasSuffix predicate on the "contract_state" field.
func ContractStateHasSuffix(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldHasSuffix(FieldContractState, v))
}

// ContractStateIsNil applies the IsNil predicate on the "contract_state" field.
func ContractStateIsNil() predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldIsNull(FieldContractState))
}

// ContractStateNotNil applies the NotNil predicate on the "contract_state" field.
func ContractStateNotNil() predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldNotNull(FieldContractState))
}

// ContractStateEqualFold applies the EqualFold predicate on the "contract_state" field.
func ContractStateEqualFold(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldEqualFold(FieldContractState, v))
}

// ContractStateContainsFold applies the ContainsFold predicate on the "contract_state" field.
func ContractStateContainsFold(v string) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.FieldContainsFold(FieldContractState, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DelegatedStaking) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DelegatedStaking) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DelegatedStaking) predicate.DelegatedStaking {
	return predicate.DelegatedStaking(sql.NotPredicates(p))
}

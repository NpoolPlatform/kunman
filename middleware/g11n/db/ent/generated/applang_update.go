// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/g11n/db/ent/generated/applang"
	"github.com/NpoolPlatform/kunman/middleware/g11n/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// AppLangUpdate is the builder for updating AppLang entities.
type AppLangUpdate struct {
	config
	hooks     []Hook
	mutation  *AppLangMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppLangUpdate builder.
func (alu *AppLangUpdate) Where(ps ...predicate.AppLang) *AppLangUpdate {
	alu.mutation.Where(ps...)
	return alu
}

// SetCreatedAt sets the "created_at" field.
func (alu *AppLangUpdate) SetCreatedAt(u uint32) *AppLangUpdate {
	alu.mutation.ResetCreatedAt()
	alu.mutation.SetCreatedAt(u)
	return alu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (alu *AppLangUpdate) SetNillableCreatedAt(u *uint32) *AppLangUpdate {
	if u != nil {
		alu.SetCreatedAt(*u)
	}
	return alu
}

// AddCreatedAt adds u to the "created_at" field.
func (alu *AppLangUpdate) AddCreatedAt(u int32) *AppLangUpdate {
	alu.mutation.AddCreatedAt(u)
	return alu
}

// SetUpdatedAt sets the "updated_at" field.
func (alu *AppLangUpdate) SetUpdatedAt(u uint32) *AppLangUpdate {
	alu.mutation.ResetUpdatedAt()
	alu.mutation.SetUpdatedAt(u)
	return alu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (alu *AppLangUpdate) AddUpdatedAt(u int32) *AppLangUpdate {
	alu.mutation.AddUpdatedAt(u)
	return alu
}

// SetDeletedAt sets the "deleted_at" field.
func (alu *AppLangUpdate) SetDeletedAt(u uint32) *AppLangUpdate {
	alu.mutation.ResetDeletedAt()
	alu.mutation.SetDeletedAt(u)
	return alu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (alu *AppLangUpdate) SetNillableDeletedAt(u *uint32) *AppLangUpdate {
	if u != nil {
		alu.SetDeletedAt(*u)
	}
	return alu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (alu *AppLangUpdate) AddDeletedAt(u int32) *AppLangUpdate {
	alu.mutation.AddDeletedAt(u)
	return alu
}

// SetEntID sets the "ent_id" field.
func (alu *AppLangUpdate) SetEntID(u uuid.UUID) *AppLangUpdate {
	alu.mutation.SetEntID(u)
	return alu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (alu *AppLangUpdate) SetNillableEntID(u *uuid.UUID) *AppLangUpdate {
	if u != nil {
		alu.SetEntID(*u)
	}
	return alu
}

// SetAppID sets the "app_id" field.
func (alu *AppLangUpdate) SetAppID(u uuid.UUID) *AppLangUpdate {
	alu.mutation.SetAppID(u)
	return alu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (alu *AppLangUpdate) SetNillableAppID(u *uuid.UUID) *AppLangUpdate {
	if u != nil {
		alu.SetAppID(*u)
	}
	return alu
}

// ClearAppID clears the value of the "app_id" field.
func (alu *AppLangUpdate) ClearAppID() *AppLangUpdate {
	alu.mutation.ClearAppID()
	return alu
}

// SetLangID sets the "lang_id" field.
func (alu *AppLangUpdate) SetLangID(u uuid.UUID) *AppLangUpdate {
	alu.mutation.SetLangID(u)
	return alu
}

// SetNillableLangID sets the "lang_id" field if the given value is not nil.
func (alu *AppLangUpdate) SetNillableLangID(u *uuid.UUID) *AppLangUpdate {
	if u != nil {
		alu.SetLangID(*u)
	}
	return alu
}

// ClearLangID clears the value of the "lang_id" field.
func (alu *AppLangUpdate) ClearLangID() *AppLangUpdate {
	alu.mutation.ClearLangID()
	return alu
}

// SetMain sets the "main" field.
func (alu *AppLangUpdate) SetMain(b bool) *AppLangUpdate {
	alu.mutation.SetMain(b)
	return alu
}

// SetNillableMain sets the "main" field if the given value is not nil.
func (alu *AppLangUpdate) SetNillableMain(b *bool) *AppLangUpdate {
	if b != nil {
		alu.SetMain(*b)
	}
	return alu
}

// ClearMain clears the value of the "main" field.
func (alu *AppLangUpdate) ClearMain() *AppLangUpdate {
	alu.mutation.ClearMain()
	return alu
}

// Mutation returns the AppLangMutation object of the builder.
func (alu *AppLangUpdate) Mutation() *AppLangMutation {
	return alu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (alu *AppLangUpdate) Save(ctx context.Context) (int, error) {
	alu.defaults()
	return withHooks(ctx, alu.sqlSave, alu.mutation, alu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (alu *AppLangUpdate) SaveX(ctx context.Context) int {
	affected, err := alu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (alu *AppLangUpdate) Exec(ctx context.Context) error {
	_, err := alu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alu *AppLangUpdate) ExecX(ctx context.Context) {
	if err := alu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (alu *AppLangUpdate) defaults() {
	if _, ok := alu.mutation.UpdatedAt(); !ok {
		v := applang.UpdateDefaultUpdatedAt()
		alu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (alu *AppLangUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppLangUpdate {
	alu.modifiers = append(alu.modifiers, modifiers...)
	return alu
}

func (alu *AppLangUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(applang.Table, applang.Columns, sqlgraph.NewFieldSpec(applang.FieldID, field.TypeUint32))
	if ps := alu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := alu.mutation.CreatedAt(); ok {
		_spec.SetField(applang.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := alu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(applang.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := alu.mutation.UpdatedAt(); ok {
		_spec.SetField(applang.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := alu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(applang.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := alu.mutation.DeletedAt(); ok {
		_spec.SetField(applang.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := alu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(applang.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := alu.mutation.EntID(); ok {
		_spec.SetField(applang.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := alu.mutation.AppID(); ok {
		_spec.SetField(applang.FieldAppID, field.TypeUUID, value)
	}
	if alu.mutation.AppIDCleared() {
		_spec.ClearField(applang.FieldAppID, field.TypeUUID)
	}
	if value, ok := alu.mutation.LangID(); ok {
		_spec.SetField(applang.FieldLangID, field.TypeUUID, value)
	}
	if alu.mutation.LangIDCleared() {
		_spec.ClearField(applang.FieldLangID, field.TypeUUID)
	}
	if value, ok := alu.mutation.Main(); ok {
		_spec.SetField(applang.FieldMain, field.TypeBool, value)
	}
	if alu.mutation.MainCleared() {
		_spec.ClearField(applang.FieldMain, field.TypeBool)
	}
	_spec.AddModifiers(alu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, alu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{applang.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	alu.mutation.done = true
	return n, nil
}

// AppLangUpdateOne is the builder for updating a single AppLang entity.
type AppLangUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppLangMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (aluo *AppLangUpdateOne) SetCreatedAt(u uint32) *AppLangUpdateOne {
	aluo.mutation.ResetCreatedAt()
	aluo.mutation.SetCreatedAt(u)
	return aluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aluo *AppLangUpdateOne) SetNillableCreatedAt(u *uint32) *AppLangUpdateOne {
	if u != nil {
		aluo.SetCreatedAt(*u)
	}
	return aluo
}

// AddCreatedAt adds u to the "created_at" field.
func (aluo *AppLangUpdateOne) AddCreatedAt(u int32) *AppLangUpdateOne {
	aluo.mutation.AddCreatedAt(u)
	return aluo
}

// SetUpdatedAt sets the "updated_at" field.
func (aluo *AppLangUpdateOne) SetUpdatedAt(u uint32) *AppLangUpdateOne {
	aluo.mutation.ResetUpdatedAt()
	aluo.mutation.SetUpdatedAt(u)
	return aluo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (aluo *AppLangUpdateOne) AddUpdatedAt(u int32) *AppLangUpdateOne {
	aluo.mutation.AddUpdatedAt(u)
	return aluo
}

// SetDeletedAt sets the "deleted_at" field.
func (aluo *AppLangUpdateOne) SetDeletedAt(u uint32) *AppLangUpdateOne {
	aluo.mutation.ResetDeletedAt()
	aluo.mutation.SetDeletedAt(u)
	return aluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aluo *AppLangUpdateOne) SetNillableDeletedAt(u *uint32) *AppLangUpdateOne {
	if u != nil {
		aluo.SetDeletedAt(*u)
	}
	return aluo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (aluo *AppLangUpdateOne) AddDeletedAt(u int32) *AppLangUpdateOne {
	aluo.mutation.AddDeletedAt(u)
	return aluo
}

// SetEntID sets the "ent_id" field.
func (aluo *AppLangUpdateOne) SetEntID(u uuid.UUID) *AppLangUpdateOne {
	aluo.mutation.SetEntID(u)
	return aluo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (aluo *AppLangUpdateOne) SetNillableEntID(u *uuid.UUID) *AppLangUpdateOne {
	if u != nil {
		aluo.SetEntID(*u)
	}
	return aluo
}

// SetAppID sets the "app_id" field.
func (aluo *AppLangUpdateOne) SetAppID(u uuid.UUID) *AppLangUpdateOne {
	aluo.mutation.SetAppID(u)
	return aluo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (aluo *AppLangUpdateOne) SetNillableAppID(u *uuid.UUID) *AppLangUpdateOne {
	if u != nil {
		aluo.SetAppID(*u)
	}
	return aluo
}

// ClearAppID clears the value of the "app_id" field.
func (aluo *AppLangUpdateOne) ClearAppID() *AppLangUpdateOne {
	aluo.mutation.ClearAppID()
	return aluo
}

// SetLangID sets the "lang_id" field.
func (aluo *AppLangUpdateOne) SetLangID(u uuid.UUID) *AppLangUpdateOne {
	aluo.mutation.SetLangID(u)
	return aluo
}

// SetNillableLangID sets the "lang_id" field if the given value is not nil.
func (aluo *AppLangUpdateOne) SetNillableLangID(u *uuid.UUID) *AppLangUpdateOne {
	if u != nil {
		aluo.SetLangID(*u)
	}
	return aluo
}

// ClearLangID clears the value of the "lang_id" field.
func (aluo *AppLangUpdateOne) ClearLangID() *AppLangUpdateOne {
	aluo.mutation.ClearLangID()
	return aluo
}

// SetMain sets the "main" field.
func (aluo *AppLangUpdateOne) SetMain(b bool) *AppLangUpdateOne {
	aluo.mutation.SetMain(b)
	return aluo
}

// SetNillableMain sets the "main" field if the given value is not nil.
func (aluo *AppLangUpdateOne) SetNillableMain(b *bool) *AppLangUpdateOne {
	if b != nil {
		aluo.SetMain(*b)
	}
	return aluo
}

// ClearMain clears the value of the "main" field.
func (aluo *AppLangUpdateOne) ClearMain() *AppLangUpdateOne {
	aluo.mutation.ClearMain()
	return aluo
}

// Mutation returns the AppLangMutation object of the builder.
func (aluo *AppLangUpdateOne) Mutation() *AppLangMutation {
	return aluo.mutation
}

// Where appends a list predicates to the AppLangUpdate builder.
func (aluo *AppLangUpdateOne) Where(ps ...predicate.AppLang) *AppLangUpdateOne {
	aluo.mutation.Where(ps...)
	return aluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aluo *AppLangUpdateOne) Select(field string, fields ...string) *AppLangUpdateOne {
	aluo.fields = append([]string{field}, fields...)
	return aluo
}

// Save executes the query and returns the updated AppLang entity.
func (aluo *AppLangUpdateOne) Save(ctx context.Context) (*AppLang, error) {
	aluo.defaults()
	return withHooks(ctx, aluo.sqlSave, aluo.mutation, aluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aluo *AppLangUpdateOne) SaveX(ctx context.Context) *AppLang {
	node, err := aluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aluo *AppLangUpdateOne) Exec(ctx context.Context) error {
	_, err := aluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aluo *AppLangUpdateOne) ExecX(ctx context.Context) {
	if err := aluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aluo *AppLangUpdateOne) defaults() {
	if _, ok := aluo.mutation.UpdatedAt(); !ok {
		v := applang.UpdateDefaultUpdatedAt()
		aluo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aluo *AppLangUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppLangUpdateOne {
	aluo.modifiers = append(aluo.modifiers, modifiers...)
	return aluo
}

func (aluo *AppLangUpdateOne) sqlSave(ctx context.Context) (_node *AppLang, err error) {
	_spec := sqlgraph.NewUpdateSpec(applang.Table, applang.Columns, sqlgraph.NewFieldSpec(applang.FieldID, field.TypeUint32))
	id, ok := aluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AppLang.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, applang.FieldID)
		for _, f := range fields {
			if !applang.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != applang.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aluo.mutation.CreatedAt(); ok {
		_spec.SetField(applang.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := aluo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(applang.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := aluo.mutation.UpdatedAt(); ok {
		_spec.SetField(applang.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := aluo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(applang.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := aluo.mutation.DeletedAt(); ok {
		_spec.SetField(applang.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := aluo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(applang.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := aluo.mutation.EntID(); ok {
		_spec.SetField(applang.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := aluo.mutation.AppID(); ok {
		_spec.SetField(applang.FieldAppID, field.TypeUUID, value)
	}
	if aluo.mutation.AppIDCleared() {
		_spec.ClearField(applang.FieldAppID, field.TypeUUID)
	}
	if value, ok := aluo.mutation.LangID(); ok {
		_spec.SetField(applang.FieldLangID, field.TypeUUID, value)
	}
	if aluo.mutation.LangIDCleared() {
		_spec.ClearField(applang.FieldLangID, field.TypeUUID)
	}
	if value, ok := aluo.mutation.Main(); ok {
		_spec.SetField(applang.FieldMain, field.TypeBool, value)
	}
	if aluo.mutation.MainCleared() {
		_spec.ClearField(applang.FieldMain, field.TypeBool)
	}
	_spec.AddModifiers(aluo.modifiers...)
	_node = &AppLang{config: aluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{applang.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aluo.mutation.done = true
	return _node, nil
}

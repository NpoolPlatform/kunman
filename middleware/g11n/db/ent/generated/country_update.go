// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/g11n/db/ent/generated/country"
	"github.com/NpoolPlatform/kunman/middleware/g11n/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// CountryUpdate is the builder for updating Country entities.
type CountryUpdate struct {
	config
	hooks     []Hook
	mutation  *CountryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CountryUpdate builder.
func (cu *CountryUpdate) Where(ps ...predicate.Country) *CountryUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CountryUpdate) SetCreatedAt(u uint32) *CountryUpdate {
	cu.mutation.ResetCreatedAt()
	cu.mutation.SetCreatedAt(u)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *CountryUpdate) SetNillableCreatedAt(u *uint32) *CountryUpdate {
	if u != nil {
		cu.SetCreatedAt(*u)
	}
	return cu
}

// AddCreatedAt adds u to the "created_at" field.
func (cu *CountryUpdate) AddCreatedAt(u int32) *CountryUpdate {
	cu.mutation.AddCreatedAt(u)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CountryUpdate) SetUpdatedAt(u uint32) *CountryUpdate {
	cu.mutation.ResetUpdatedAt()
	cu.mutation.SetUpdatedAt(u)
	return cu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cu *CountryUpdate) AddUpdatedAt(u int32) *CountryUpdate {
	cu.mutation.AddUpdatedAt(u)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CountryUpdate) SetDeletedAt(u uint32) *CountryUpdate {
	cu.mutation.ResetDeletedAt()
	cu.mutation.SetDeletedAt(u)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CountryUpdate) SetNillableDeletedAt(u *uint32) *CountryUpdate {
	if u != nil {
		cu.SetDeletedAt(*u)
	}
	return cu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cu *CountryUpdate) AddDeletedAt(u int32) *CountryUpdate {
	cu.mutation.AddDeletedAt(u)
	return cu
}

// SetEntID sets the "ent_id" field.
func (cu *CountryUpdate) SetEntID(u uuid.UUID) *CountryUpdate {
	cu.mutation.SetEntID(u)
	return cu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cu *CountryUpdate) SetNillableEntID(u *uuid.UUID) *CountryUpdate {
	if u != nil {
		cu.SetEntID(*u)
	}
	return cu
}

// SetCountry sets the "country" field.
func (cu *CountryUpdate) SetCountry(s string) *CountryUpdate {
	cu.mutation.SetCountry(s)
	return cu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (cu *CountryUpdate) SetNillableCountry(s *string) *CountryUpdate {
	if s != nil {
		cu.SetCountry(*s)
	}
	return cu
}

// ClearCountry clears the value of the "country" field.
func (cu *CountryUpdate) ClearCountry() *CountryUpdate {
	cu.mutation.ClearCountry()
	return cu
}

// SetFlag sets the "flag" field.
func (cu *CountryUpdate) SetFlag(s string) *CountryUpdate {
	cu.mutation.SetFlag(s)
	return cu
}

// SetNillableFlag sets the "flag" field if the given value is not nil.
func (cu *CountryUpdate) SetNillableFlag(s *string) *CountryUpdate {
	if s != nil {
		cu.SetFlag(*s)
	}
	return cu
}

// ClearFlag clears the value of the "flag" field.
func (cu *CountryUpdate) ClearFlag() *CountryUpdate {
	cu.mutation.ClearFlag()
	return cu
}

// SetCode sets the "code" field.
func (cu *CountryUpdate) SetCode(s string) *CountryUpdate {
	cu.mutation.SetCode(s)
	return cu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cu *CountryUpdate) SetNillableCode(s *string) *CountryUpdate {
	if s != nil {
		cu.SetCode(*s)
	}
	return cu
}

// ClearCode clears the value of the "code" field.
func (cu *CountryUpdate) ClearCode() *CountryUpdate {
	cu.mutation.ClearCode()
	return cu
}

// SetShort sets the "short" field.
func (cu *CountryUpdate) SetShort(s string) *CountryUpdate {
	cu.mutation.SetShort(s)
	return cu
}

// SetNillableShort sets the "short" field if the given value is not nil.
func (cu *CountryUpdate) SetNillableShort(s *string) *CountryUpdate {
	if s != nil {
		cu.SetShort(*s)
	}
	return cu
}

// ClearShort clears the value of the "short" field.
func (cu *CountryUpdate) ClearShort() *CountryUpdate {
	cu.mutation.ClearShort()
	return cu
}

// Mutation returns the CountryMutation object of the builder.
func (cu *CountryUpdate) Mutation() *CountryMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CountryUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CountryUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CountryUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CountryUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CountryUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := country.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CountryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CountryUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CountryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(country.Table, country.Columns, sqlgraph.NewFieldSpec(country.FieldID, field.TypeUint32))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(country.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(country.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(country.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(country.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(country.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(country.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.EntID(); ok {
		_spec.SetField(country.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := cu.mutation.Country(); ok {
		_spec.SetField(country.FieldCountry, field.TypeString, value)
	}
	if cu.mutation.CountryCleared() {
		_spec.ClearField(country.FieldCountry, field.TypeString)
	}
	if value, ok := cu.mutation.Flag(); ok {
		_spec.SetField(country.FieldFlag, field.TypeString, value)
	}
	if cu.mutation.FlagCleared() {
		_spec.ClearField(country.FieldFlag, field.TypeString)
	}
	if value, ok := cu.mutation.Code(); ok {
		_spec.SetField(country.FieldCode, field.TypeString, value)
	}
	if cu.mutation.CodeCleared() {
		_spec.ClearField(country.FieldCode, field.TypeString)
	}
	if value, ok := cu.mutation.Short(); ok {
		_spec.SetField(country.FieldShort, field.TypeString, value)
	}
	if cu.mutation.ShortCleared() {
		_spec.ClearField(country.FieldShort, field.TypeString)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{country.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CountryUpdateOne is the builder for updating a single Country entity.
type CountryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CountryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CountryUpdateOne) SetCreatedAt(u uint32) *CountryUpdateOne {
	cuo.mutation.ResetCreatedAt()
	cuo.mutation.SetCreatedAt(u)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *CountryUpdateOne) SetNillableCreatedAt(u *uint32) *CountryUpdateOne {
	if u != nil {
		cuo.SetCreatedAt(*u)
	}
	return cuo
}

// AddCreatedAt adds u to the "created_at" field.
func (cuo *CountryUpdateOne) AddCreatedAt(u int32) *CountryUpdateOne {
	cuo.mutation.AddCreatedAt(u)
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CountryUpdateOne) SetUpdatedAt(u uint32) *CountryUpdateOne {
	cuo.mutation.ResetUpdatedAt()
	cuo.mutation.SetUpdatedAt(u)
	return cuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cuo *CountryUpdateOne) AddUpdatedAt(u int32) *CountryUpdateOne {
	cuo.mutation.AddUpdatedAt(u)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CountryUpdateOne) SetDeletedAt(u uint32) *CountryUpdateOne {
	cuo.mutation.ResetDeletedAt()
	cuo.mutation.SetDeletedAt(u)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CountryUpdateOne) SetNillableDeletedAt(u *uint32) *CountryUpdateOne {
	if u != nil {
		cuo.SetDeletedAt(*u)
	}
	return cuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cuo *CountryUpdateOne) AddDeletedAt(u int32) *CountryUpdateOne {
	cuo.mutation.AddDeletedAt(u)
	return cuo
}

// SetEntID sets the "ent_id" field.
func (cuo *CountryUpdateOne) SetEntID(u uuid.UUID) *CountryUpdateOne {
	cuo.mutation.SetEntID(u)
	return cuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cuo *CountryUpdateOne) SetNillableEntID(u *uuid.UUID) *CountryUpdateOne {
	if u != nil {
		cuo.SetEntID(*u)
	}
	return cuo
}

// SetCountry sets the "country" field.
func (cuo *CountryUpdateOne) SetCountry(s string) *CountryUpdateOne {
	cuo.mutation.SetCountry(s)
	return cuo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (cuo *CountryUpdateOne) SetNillableCountry(s *string) *CountryUpdateOne {
	if s != nil {
		cuo.SetCountry(*s)
	}
	return cuo
}

// ClearCountry clears the value of the "country" field.
func (cuo *CountryUpdateOne) ClearCountry() *CountryUpdateOne {
	cuo.mutation.ClearCountry()
	return cuo
}

// SetFlag sets the "flag" field.
func (cuo *CountryUpdateOne) SetFlag(s string) *CountryUpdateOne {
	cuo.mutation.SetFlag(s)
	return cuo
}

// SetNillableFlag sets the "flag" field if the given value is not nil.
func (cuo *CountryUpdateOne) SetNillableFlag(s *string) *CountryUpdateOne {
	if s != nil {
		cuo.SetFlag(*s)
	}
	return cuo
}

// ClearFlag clears the value of the "flag" field.
func (cuo *CountryUpdateOne) ClearFlag() *CountryUpdateOne {
	cuo.mutation.ClearFlag()
	return cuo
}

// SetCode sets the "code" field.
func (cuo *CountryUpdateOne) SetCode(s string) *CountryUpdateOne {
	cuo.mutation.SetCode(s)
	return cuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cuo *CountryUpdateOne) SetNillableCode(s *string) *CountryUpdateOne {
	if s != nil {
		cuo.SetCode(*s)
	}
	return cuo
}

// ClearCode clears the value of the "code" field.
func (cuo *CountryUpdateOne) ClearCode() *CountryUpdateOne {
	cuo.mutation.ClearCode()
	return cuo
}

// SetShort sets the "short" field.
func (cuo *CountryUpdateOne) SetShort(s string) *CountryUpdateOne {
	cuo.mutation.SetShort(s)
	return cuo
}

// SetNillableShort sets the "short" field if the given value is not nil.
func (cuo *CountryUpdateOne) SetNillableShort(s *string) *CountryUpdateOne {
	if s != nil {
		cuo.SetShort(*s)
	}
	return cuo
}

// ClearShort clears the value of the "short" field.
func (cuo *CountryUpdateOne) ClearShort() *CountryUpdateOne {
	cuo.mutation.ClearShort()
	return cuo
}

// Mutation returns the CountryMutation object of the builder.
func (cuo *CountryUpdateOne) Mutation() *CountryMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CountryUpdate builder.
func (cuo *CountryUpdateOne) Where(ps ...predicate.Country) *CountryUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CountryUpdateOne) Select(field string, fields ...string) *CountryUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Country entity.
func (cuo *CountryUpdateOne) Save(ctx context.Context) (*Country, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CountryUpdateOne) SaveX(ctx context.Context) *Country {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CountryUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CountryUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CountryUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := country.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CountryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CountryUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CountryUpdateOne) sqlSave(ctx context.Context) (_node *Country, err error) {
	_spec := sqlgraph.NewUpdateSpec(country.Table, country.Columns, sqlgraph.NewFieldSpec(country.FieldID, field.TypeUint32))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Country.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, country.FieldID)
		for _, f := range fields {
			if !country.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != country.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(country.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(country.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(country.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(country.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(country.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(country.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.EntID(); ok {
		_spec.SetField(country.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := cuo.mutation.Country(); ok {
		_spec.SetField(country.FieldCountry, field.TypeString, value)
	}
	if cuo.mutation.CountryCleared() {
		_spec.ClearField(country.FieldCountry, field.TypeString)
	}
	if value, ok := cuo.mutation.Flag(); ok {
		_spec.SetField(country.FieldFlag, field.TypeString, value)
	}
	if cuo.mutation.FlagCleared() {
		_spec.ClearField(country.FieldFlag, field.TypeString)
	}
	if value, ok := cuo.mutation.Code(); ok {
		_spec.SetField(country.FieldCode, field.TypeString, value)
	}
	if cuo.mutation.CodeCleared() {
		_spec.ClearField(country.FieldCode, field.TypeString)
	}
	if value, ok := cuo.mutation.Short(); ok {
		_spec.SetField(country.FieldShort, field.TypeString, value)
	}
	if cuo.mutation.ShortCleared() {
		_spec.ClearField(country.FieldShort, field.TypeString)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Country{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{country.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}

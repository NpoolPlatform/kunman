// Code generated by ent, DO NOT EDIT.

package generated

import (
	"github.com/NpoolPlatform/kunman/middleware/g11n/db/ent/generated/appcountry"
	"github.com/NpoolPlatform/kunman/middleware/g11n/db/ent/generated/applang"
	"github.com/NpoolPlatform/kunman/middleware/g11n/db/ent/generated/country"
	"github.com/NpoolPlatform/kunman/middleware/g11n/db/ent/generated/lang"
	"github.com/NpoolPlatform/kunman/middleware/g11n/db/ent/generated/message"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 5)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appcountry.Table,
			Columns: appcountry.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appcountry.FieldID,
			},
		},
		Type: "AppCountry",
		Fields: map[string]*sqlgraph.FieldSpec{
			appcountry.FieldCreatedAt: {Type: field.TypeUint32, Column: appcountry.FieldCreatedAt},
			appcountry.FieldUpdatedAt: {Type: field.TypeUint32, Column: appcountry.FieldUpdatedAt},
			appcountry.FieldDeletedAt: {Type: field.TypeUint32, Column: appcountry.FieldDeletedAt},
			appcountry.FieldEntID:     {Type: field.TypeUUID, Column: appcountry.FieldEntID},
			appcountry.FieldAppID:     {Type: field.TypeUUID, Column: appcountry.FieldAppID},
			appcountry.FieldCountryID: {Type: field.TypeUUID, Column: appcountry.FieldCountryID},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   applang.Table,
			Columns: applang.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: applang.FieldID,
			},
		},
		Type: "AppLang",
		Fields: map[string]*sqlgraph.FieldSpec{
			applang.FieldCreatedAt: {Type: field.TypeUint32, Column: applang.FieldCreatedAt},
			applang.FieldUpdatedAt: {Type: field.TypeUint32, Column: applang.FieldUpdatedAt},
			applang.FieldDeletedAt: {Type: field.TypeUint32, Column: applang.FieldDeletedAt},
			applang.FieldEntID:     {Type: field.TypeUUID, Column: applang.FieldEntID},
			applang.FieldAppID:     {Type: field.TypeUUID, Column: applang.FieldAppID},
			applang.FieldLangID:    {Type: field.TypeUUID, Column: applang.FieldLangID},
			applang.FieldMain:      {Type: field.TypeBool, Column: applang.FieldMain},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   country.Table,
			Columns: country.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: country.FieldID,
			},
		},
		Type: "Country",
		Fields: map[string]*sqlgraph.FieldSpec{
			country.FieldCreatedAt: {Type: field.TypeUint32, Column: country.FieldCreatedAt},
			country.FieldUpdatedAt: {Type: field.TypeUint32, Column: country.FieldUpdatedAt},
			country.FieldDeletedAt: {Type: field.TypeUint32, Column: country.FieldDeletedAt},
			country.FieldEntID:     {Type: field.TypeUUID, Column: country.FieldEntID},
			country.FieldCountry:   {Type: field.TypeString, Column: country.FieldCountry},
			country.FieldFlag:      {Type: field.TypeString, Column: country.FieldFlag},
			country.FieldCode:      {Type: field.TypeString, Column: country.FieldCode},
			country.FieldShort:     {Type: field.TypeString, Column: country.FieldShort},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   lang.Table,
			Columns: lang.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: lang.FieldID,
			},
		},
		Type: "Lang",
		Fields: map[string]*sqlgraph.FieldSpec{
			lang.FieldCreatedAt: {Type: field.TypeUint32, Column: lang.FieldCreatedAt},
			lang.FieldUpdatedAt: {Type: field.TypeUint32, Column: lang.FieldUpdatedAt},
			lang.FieldDeletedAt: {Type: field.TypeUint32, Column: lang.FieldDeletedAt},
			lang.FieldEntID:     {Type: field.TypeUUID, Column: lang.FieldEntID},
			lang.FieldLang:      {Type: field.TypeString, Column: lang.FieldLang},
			lang.FieldLogo:      {Type: field.TypeString, Column: lang.FieldLogo},
			lang.FieldName:      {Type: field.TypeString, Column: lang.FieldName},
			lang.FieldShort:     {Type: field.TypeString, Column: lang.FieldShort},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   message.Table,
			Columns: message.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: message.FieldID,
			},
		},
		Type: "Message",
		Fields: map[string]*sqlgraph.FieldSpec{
			message.FieldCreatedAt: {Type: field.TypeUint32, Column: message.FieldCreatedAt},
			message.FieldUpdatedAt: {Type: field.TypeUint32, Column: message.FieldUpdatedAt},
			message.FieldDeletedAt: {Type: field.TypeUint32, Column: message.FieldDeletedAt},
			message.FieldEntID:     {Type: field.TypeUUID, Column: message.FieldEntID},
			message.FieldAppID:     {Type: field.TypeUUID, Column: message.FieldAppID},
			message.FieldLangID:    {Type: field.TypeUUID, Column: message.FieldLangID},
			message.FieldMessageID: {Type: field.TypeString, Column: message.FieldMessageID},
			message.FieldMessage:   {Type: field.TypeString, Column: message.FieldMessage},
			message.FieldGetIndex:  {Type: field.TypeUint32, Column: message.FieldGetIndex},
			message.FieldDisabled:  {Type: field.TypeBool, Column: message.FieldDisabled},
			message.FieldShort:     {Type: field.TypeString, Column: message.FieldShort},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (acq *AppCountryQuery) addPredicate(pred func(s *sql.Selector)) {
	acq.predicates = append(acq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppCountryQuery builder.
func (acq *AppCountryQuery) Filter() *AppCountryFilter {
	return &AppCountryFilter{config: acq.config, predicateAdder: acq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppCountryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppCountryMutation builder.
func (m *AppCountryMutation) Filter() *AppCountryFilter {
	return &AppCountryFilter{config: m.config, predicateAdder: m}
}

// AppCountryFilter provides a generic filtering capability at runtime for AppCountryQuery.
type AppCountryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppCountryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppCountryFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appcountry.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppCountryFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appcountry.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppCountryFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appcountry.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppCountryFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appcountry.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppCountryFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appcountry.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppCountryFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appcountry.FieldAppID))
}

// WhereCountryID applies the entql [16]byte predicate on the country_id field.
func (f *AppCountryFilter) WhereCountryID(p entql.ValueP) {
	f.Where(p.Field(appcountry.FieldCountryID))
}

// addPredicate implements the predicateAdder interface.
func (alq *AppLangQuery) addPredicate(pred func(s *sql.Selector)) {
	alq.predicates = append(alq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppLangQuery builder.
func (alq *AppLangQuery) Filter() *AppLangFilter {
	return &AppLangFilter{config: alq.config, predicateAdder: alq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppLangMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppLangMutation builder.
func (m *AppLangMutation) Filter() *AppLangFilter {
	return &AppLangFilter{config: m.config, predicateAdder: m}
}

// AppLangFilter provides a generic filtering capability at runtime for AppLangQuery.
type AppLangFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppLangFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppLangFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(applang.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppLangFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(applang.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppLangFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(applang.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppLangFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(applang.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppLangFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(applang.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppLangFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(applang.FieldAppID))
}

// WhereLangID applies the entql [16]byte predicate on the lang_id field.
func (f *AppLangFilter) WhereLangID(p entql.ValueP) {
	f.Where(p.Field(applang.FieldLangID))
}

// WhereMain applies the entql bool predicate on the main field.
func (f *AppLangFilter) WhereMain(p entql.BoolP) {
	f.Where(p.Field(applang.FieldMain))
}

// addPredicate implements the predicateAdder interface.
func (cq *CountryQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CountryQuery builder.
func (cq *CountryQuery) Filter() *CountryFilter {
	return &CountryFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CountryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CountryMutation builder.
func (m *CountryMutation) Filter() *CountryFilter {
	return &CountryFilter{config: m.config, predicateAdder: m}
}

// CountryFilter provides a generic filtering capability at runtime for CountryQuery.
type CountryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CountryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *CountryFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(country.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CountryFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(country.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CountryFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(country.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CountryFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(country.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *CountryFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(country.FieldEntID))
}

// WhereCountry applies the entql string predicate on the country field.
func (f *CountryFilter) WhereCountry(p entql.StringP) {
	f.Where(p.Field(country.FieldCountry))
}

// WhereFlag applies the entql string predicate on the flag field.
func (f *CountryFilter) WhereFlag(p entql.StringP) {
	f.Where(p.Field(country.FieldFlag))
}

// WhereCode applies the entql string predicate on the code field.
func (f *CountryFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(country.FieldCode))
}

// WhereShort applies the entql string predicate on the short field.
func (f *CountryFilter) WhereShort(p entql.StringP) {
	f.Where(p.Field(country.FieldShort))
}

// addPredicate implements the predicateAdder interface.
func (lq *LangQuery) addPredicate(pred func(s *sql.Selector)) {
	lq.predicates = append(lq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the LangQuery builder.
func (lq *LangQuery) Filter() *LangFilter {
	return &LangFilter{config: lq.config, predicateAdder: lq}
}

// addPredicate implements the predicateAdder interface.
func (m *LangMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the LangMutation builder.
func (m *LangMutation) Filter() *LangFilter {
	return &LangFilter{config: m.config, predicateAdder: m}
}

// LangFilter provides a generic filtering capability at runtime for LangQuery.
type LangFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *LangFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *LangFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(lang.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *LangFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(lang.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *LangFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(lang.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *LangFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(lang.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *LangFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(lang.FieldEntID))
}

// WhereLang applies the entql string predicate on the lang field.
func (f *LangFilter) WhereLang(p entql.StringP) {
	f.Where(p.Field(lang.FieldLang))
}

// WhereLogo applies the entql string predicate on the logo field.
func (f *LangFilter) WhereLogo(p entql.StringP) {
	f.Where(p.Field(lang.FieldLogo))
}

// WhereName applies the entql string predicate on the name field.
func (f *LangFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(lang.FieldName))
}

// WhereShort applies the entql string predicate on the short field.
func (f *LangFilter) WhereShort(p entql.StringP) {
	f.Where(p.Field(lang.FieldShort))
}

// addPredicate implements the predicateAdder interface.
func (mq *MessageQuery) addPredicate(pred func(s *sql.Selector)) {
	mq.predicates = append(mq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MessageQuery builder.
func (mq *MessageQuery) Filter() *MessageFilter {
	return &MessageFilter{config: mq.config, predicateAdder: mq}
}

// addPredicate implements the predicateAdder interface.
func (m *MessageMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MessageMutation builder.
func (m *MessageMutation) Filter() *MessageFilter {
	return &MessageFilter{config: m.config, predicateAdder: m}
}

// MessageFilter provides a generic filtering capability at runtime for MessageQuery.
type MessageFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MessageFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *MessageFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(message.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *MessageFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(message.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *MessageFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(message.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *MessageFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(message.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *MessageFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(message.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *MessageFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(message.FieldAppID))
}

// WhereLangID applies the entql [16]byte predicate on the lang_id field.
func (f *MessageFilter) WhereLangID(p entql.ValueP) {
	f.Where(p.Field(message.FieldLangID))
}

// WhereMessageID applies the entql string predicate on the message_id field.
func (f *MessageFilter) WhereMessageID(p entql.StringP) {
	f.Where(p.Field(message.FieldMessageID))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *MessageFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(message.FieldMessage))
}

// WhereGetIndex applies the entql uint32 predicate on the get_index field.
func (f *MessageFilter) WhereGetIndex(p entql.Uint32P) {
	f.Where(p.Field(message.FieldGetIndex))
}

// WhereDisabled applies the entql bool predicate on the disabled field.
func (f *MessageFilter) WhereDisabled(p entql.BoolP) {
	f.Where(p.Field(message.FieldDisabled))
}

// WhereShort applies the entql string predicate on the short field.
func (f *MessageFilter) WhereShort(p entql.StringP) {
	f.Where(p.Field(message.FieldShort))
}

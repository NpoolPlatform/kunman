// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/sphinx/proxy/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldEntID, v))
}

// CoinType applies equality check predicate on the "coin_type" field. It's identical to CoinTypeEQ.
func CoinType(v int32) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCoinType, v))
}

// Nonce applies equality check predicate on the "nonce" field. It's identical to NonceEQ.
func Nonce(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldNonce, v))
}

// TransactionType applies equality check predicate on the "transaction_type" field. It's identical to TransactionTypeEQ.
func TransactionType(v int8) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTransactionType, v))
}

// RecentBhash applies equality check predicate on the "recent_bhash" field. It's identical to RecentBhashEQ.
func RecentBhash(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldRecentBhash, v))
}

// TxData applies equality check predicate on the "tx_data" field. It's identical to TxDataEQ.
func TxData(v []byte) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTxData, v))
}

// TransactionID applies equality check predicate on the "transaction_id" field. It's identical to TransactionIDEQ.
func TransactionID(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTransactionID, v))
}

// Cid applies equality check predicate on the "cid" field. It's identical to CidEQ.
func Cid(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCid, v))
}

// ExitCode applies equality check predicate on the "exit_code" field. It's identical to ExitCodeEQ.
func ExitCode(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldExitCode, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldName, v))
}

// From applies equality check predicate on the "from" field. It's identical to FromEQ.
func From(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldFrom, v))
}

// To applies equality check predicate on the "to" field. It's identical to ToEQ.
func To(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTo, v))
}

// Memo applies equality check predicate on the "memo" field. It's identical to MemoEQ.
func Memo(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldMemo, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldAmount, v))
}

// Payload applies equality check predicate on the "payload" field. It's identical to PayloadEQ.
func Payload(v []byte) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPayload, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v uint8) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldState, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldEntID, v))
}

// CoinTypeEQ applies the EQ predicate on the "coin_type" field.
func CoinTypeEQ(v int32) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCoinType, v))
}

// CoinTypeNEQ applies the NEQ predicate on the "coin_type" field.
func CoinTypeNEQ(v int32) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldCoinType, v))
}

// CoinTypeIn applies the In predicate on the "coin_type" field.
func CoinTypeIn(vs ...int32) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldCoinType, vs...))
}

// CoinTypeNotIn applies the NotIn predicate on the "coin_type" field.
func CoinTypeNotIn(vs ...int32) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldCoinType, vs...))
}

// CoinTypeGT applies the GT predicate on the "coin_type" field.
func CoinTypeGT(v int32) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldCoinType, v))
}

// CoinTypeGTE applies the GTE predicate on the "coin_type" field.
func CoinTypeGTE(v int32) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldCoinType, v))
}

// CoinTypeLT applies the LT predicate on the "coin_type" field.
func CoinTypeLT(v int32) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldCoinType, v))
}

// CoinTypeLTE applies the LTE predicate on the "coin_type" field.
func CoinTypeLTE(v int32) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldCoinType, v))
}

// CoinTypeIsNil applies the IsNil predicate on the "coin_type" field.
func CoinTypeIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldCoinType))
}

// CoinTypeNotNil applies the NotNil predicate on the "coin_type" field.
func CoinTypeNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldCoinType))
}

// NonceEQ applies the EQ predicate on the "nonce" field.
func NonceEQ(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldNonce, v))
}

// NonceNEQ applies the NEQ predicate on the "nonce" field.
func NonceNEQ(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldNonce, v))
}

// NonceIn applies the In predicate on the "nonce" field.
func NonceIn(vs ...uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldNonce, vs...))
}

// NonceNotIn applies the NotIn predicate on the "nonce" field.
func NonceNotIn(vs ...uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldNonce, vs...))
}

// NonceGT applies the GT predicate on the "nonce" field.
func NonceGT(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldNonce, v))
}

// NonceGTE applies the GTE predicate on the "nonce" field.
func NonceGTE(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldNonce, v))
}

// NonceLT applies the LT predicate on the "nonce" field.
func NonceLT(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldNonce, v))
}

// NonceLTE applies the LTE predicate on the "nonce" field.
func NonceLTE(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldNonce, v))
}

// NonceIsNil applies the IsNil predicate on the "nonce" field.
func NonceIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldNonce))
}

// NonceNotNil applies the NotNil predicate on the "nonce" field.
func NonceNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldNonce))
}

// UtxoIsNil applies the IsNil predicate on the "utxo" field.
func UtxoIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldUtxo))
}

// UtxoNotNil applies the NotNil predicate on the "utxo" field.
func UtxoNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldUtxo))
}

// PreIsNil applies the IsNil predicate on the "pre" field.
func PreIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldPre))
}

// PreNotNil applies the NotNil predicate on the "pre" field.
func PreNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldPre))
}

// TransactionTypeEQ applies the EQ predicate on the "transaction_type" field.
func TransactionTypeEQ(v int8) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTransactionType, v))
}

// TransactionTypeNEQ applies the NEQ predicate on the "transaction_type" field.
func TransactionTypeNEQ(v int8) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldTransactionType, v))
}

// TransactionTypeIn applies the In predicate on the "transaction_type" field.
func TransactionTypeIn(vs ...int8) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldTransactionType, vs...))
}

// TransactionTypeNotIn applies the NotIn predicate on the "transaction_type" field.
func TransactionTypeNotIn(vs ...int8) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldTransactionType, vs...))
}

// TransactionTypeGT applies the GT predicate on the "transaction_type" field.
func TransactionTypeGT(v int8) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldTransactionType, v))
}

// TransactionTypeGTE applies the GTE predicate on the "transaction_type" field.
func TransactionTypeGTE(v int8) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldTransactionType, v))
}

// TransactionTypeLT applies the LT predicate on the "transaction_type" field.
func TransactionTypeLT(v int8) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldTransactionType, v))
}

// TransactionTypeLTE applies the LTE predicate on the "transaction_type" field.
func TransactionTypeLTE(v int8) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldTransactionType, v))
}

// TransactionTypeIsNil applies the IsNil predicate on the "transaction_type" field.
func TransactionTypeIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldTransactionType))
}

// TransactionTypeNotNil applies the NotNil predicate on the "transaction_type" field.
func TransactionTypeNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldTransactionType))
}

// RecentBhashEQ applies the EQ predicate on the "recent_bhash" field.
func RecentBhashEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldRecentBhash, v))
}

// RecentBhashNEQ applies the NEQ predicate on the "recent_bhash" field.
func RecentBhashNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldRecentBhash, v))
}

// RecentBhashIn applies the In predicate on the "recent_bhash" field.
func RecentBhashIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldRecentBhash, vs...))
}

// RecentBhashNotIn applies the NotIn predicate on the "recent_bhash" field.
func RecentBhashNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldRecentBhash, vs...))
}

// RecentBhashGT applies the GT predicate on the "recent_bhash" field.
func RecentBhashGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldRecentBhash, v))
}

// RecentBhashGTE applies the GTE predicate on the "recent_bhash" field.
func RecentBhashGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldRecentBhash, v))
}

// RecentBhashLT applies the LT predicate on the "recent_bhash" field.
func RecentBhashLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldRecentBhash, v))
}

// RecentBhashLTE applies the LTE predicate on the "recent_bhash" field.
func RecentBhashLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldRecentBhash, v))
}

// RecentBhashContains applies the Contains predicate on the "recent_bhash" field.
func RecentBhashContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldRecentBhash, v))
}

// RecentBhashHasPrefix applies the HasPrefix predicate on the "recent_bhash" field.
func RecentBhashHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldRecentBhash, v))
}

// RecentBhashHasSuffix applies the HasSuffix predicate on the "recent_bhash" field.
func RecentBhashHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldRecentBhash, v))
}

// RecentBhashIsNil applies the IsNil predicate on the "recent_bhash" field.
func RecentBhashIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldRecentBhash))
}

// RecentBhashNotNil applies the NotNil predicate on the "recent_bhash" field.
func RecentBhashNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldRecentBhash))
}

// RecentBhashEqualFold applies the EqualFold predicate on the "recent_bhash" field.
func RecentBhashEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldRecentBhash, v))
}

// RecentBhashContainsFold applies the ContainsFold predicate on the "recent_bhash" field.
func RecentBhashContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldRecentBhash, v))
}

// TxDataEQ applies the EQ predicate on the "tx_data" field.
func TxDataEQ(v []byte) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTxData, v))
}

// TxDataNEQ applies the NEQ predicate on the "tx_data" field.
func TxDataNEQ(v []byte) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldTxData, v))
}

// TxDataIn applies the In predicate on the "tx_data" field.
func TxDataIn(vs ...[]byte) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldTxData, vs...))
}

// TxDataNotIn applies the NotIn predicate on the "tx_data" field.
func TxDataNotIn(vs ...[]byte) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldTxData, vs...))
}

// TxDataGT applies the GT predicate on the "tx_data" field.
func TxDataGT(v []byte) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldTxData, v))
}

// TxDataGTE applies the GTE predicate on the "tx_data" field.
func TxDataGTE(v []byte) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldTxData, v))
}

// TxDataLT applies the LT predicate on the "tx_data" field.
func TxDataLT(v []byte) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldTxData, v))
}

// TxDataLTE applies the LTE predicate on the "tx_data" field.
func TxDataLTE(v []byte) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldTxData, v))
}

// TxDataIsNil applies the IsNil predicate on the "tx_data" field.
func TxDataIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldTxData))
}

// TxDataNotNil applies the NotNil predicate on the "tx_data" field.
func TxDataNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldTxData))
}

// TransactionIDEQ applies the EQ predicate on the "transaction_id" field.
func TransactionIDEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTransactionID, v))
}

// TransactionIDNEQ applies the NEQ predicate on the "transaction_id" field.
func TransactionIDNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldTransactionID, v))
}

// TransactionIDIn applies the In predicate on the "transaction_id" field.
func TransactionIDIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldTransactionID, vs...))
}

// TransactionIDNotIn applies the NotIn predicate on the "transaction_id" field.
func TransactionIDNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldTransactionID, vs...))
}

// TransactionIDGT applies the GT predicate on the "transaction_id" field.
func TransactionIDGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldTransactionID, v))
}

// TransactionIDGTE applies the GTE predicate on the "transaction_id" field.
func TransactionIDGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldTransactionID, v))
}

// TransactionIDLT applies the LT predicate on the "transaction_id" field.
func TransactionIDLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldTransactionID, v))
}

// TransactionIDLTE applies the LTE predicate on the "transaction_id" field.
func TransactionIDLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldTransactionID, v))
}

// TransactionIDContains applies the Contains predicate on the "transaction_id" field.
func TransactionIDContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldTransactionID, v))
}

// TransactionIDHasPrefix applies the HasPrefix predicate on the "transaction_id" field.
func TransactionIDHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldTransactionID, v))
}

// TransactionIDHasSuffix applies the HasSuffix predicate on the "transaction_id" field.
func TransactionIDHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldTransactionID, v))
}

// TransactionIDEqualFold applies the EqualFold predicate on the "transaction_id" field.
func TransactionIDEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldTransactionID, v))
}

// TransactionIDContainsFold applies the ContainsFold predicate on the "transaction_id" field.
func TransactionIDContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldTransactionID, v))
}

// CidEQ applies the EQ predicate on the "cid" field.
func CidEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCid, v))
}

// CidNEQ applies the NEQ predicate on the "cid" field.
func CidNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldCid, v))
}

// CidIn applies the In predicate on the "cid" field.
func CidIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldCid, vs...))
}

// CidNotIn applies the NotIn predicate on the "cid" field.
func CidNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldCid, vs...))
}

// CidGT applies the GT predicate on the "cid" field.
func CidGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldCid, v))
}

// CidGTE applies the GTE predicate on the "cid" field.
func CidGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldCid, v))
}

// CidLT applies the LT predicate on the "cid" field.
func CidLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldCid, v))
}

// CidLTE applies the LTE predicate on the "cid" field.
func CidLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldCid, v))
}

// CidContains applies the Contains predicate on the "cid" field.
func CidContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldCid, v))
}

// CidHasPrefix applies the HasPrefix predicate on the "cid" field.
func CidHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldCid, v))
}

// CidHasSuffix applies the HasSuffix predicate on the "cid" field.
func CidHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldCid, v))
}

// CidIsNil applies the IsNil predicate on the "cid" field.
func CidIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldCid))
}

// CidNotNil applies the NotNil predicate on the "cid" field.
func CidNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldCid))
}

// CidEqualFold applies the EqualFold predicate on the "cid" field.
func CidEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldCid, v))
}

// CidContainsFold applies the ContainsFold predicate on the "cid" field.
func CidContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldCid, v))
}

// ExitCodeEQ applies the EQ predicate on the "exit_code" field.
func ExitCodeEQ(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldExitCode, v))
}

// ExitCodeNEQ applies the NEQ predicate on the "exit_code" field.
func ExitCodeNEQ(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldExitCode, v))
}

// ExitCodeIn applies the In predicate on the "exit_code" field.
func ExitCodeIn(vs ...int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldExitCode, vs...))
}

// ExitCodeNotIn applies the NotIn predicate on the "exit_code" field.
func ExitCodeNotIn(vs ...int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldExitCode, vs...))
}

// ExitCodeGT applies the GT predicate on the "exit_code" field.
func ExitCodeGT(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldExitCode, v))
}

// ExitCodeGTE applies the GTE predicate on the "exit_code" field.
func ExitCodeGTE(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldExitCode, v))
}

// ExitCodeLT applies the LT predicate on the "exit_code" field.
func ExitCodeLT(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldExitCode, v))
}

// ExitCodeLTE applies the LTE predicate on the "exit_code" field.
func ExitCodeLTE(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldExitCode, v))
}

// ExitCodeIsNil applies the IsNil predicate on the "exit_code" field.
func ExitCodeIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldExitCode))
}

// ExitCodeNotNil applies the NotNil predicate on the "exit_code" field.
func ExitCodeNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldExitCode))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldName, v))
}

// FromEQ applies the EQ predicate on the "from" field.
func FromEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldFrom, v))
}

// FromNEQ applies the NEQ predicate on the "from" field.
func FromNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldFrom, v))
}

// FromIn applies the In predicate on the "from" field.
func FromIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldFrom, vs...))
}

// FromNotIn applies the NotIn predicate on the "from" field.
func FromNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldFrom, vs...))
}

// FromGT applies the GT predicate on the "from" field.
func FromGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldFrom, v))
}

// FromGTE applies the GTE predicate on the "from" field.
func FromGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldFrom, v))
}

// FromLT applies the LT predicate on the "from" field.
func FromLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldFrom, v))
}

// FromLTE applies the LTE predicate on the "from" field.
func FromLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldFrom, v))
}

// FromContains applies the Contains predicate on the "from" field.
func FromContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldFrom, v))
}

// FromHasPrefix applies the HasPrefix predicate on the "from" field.
func FromHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldFrom, v))
}

// FromHasSuffix applies the HasSuffix predicate on the "from" field.
func FromHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldFrom, v))
}

// FromIsNil applies the IsNil predicate on the "from" field.
func FromIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldFrom))
}

// FromNotNil applies the NotNil predicate on the "from" field.
func FromNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldFrom))
}

// FromEqualFold applies the EqualFold predicate on the "from" field.
func FromEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldFrom, v))
}

// FromContainsFold applies the ContainsFold predicate on the "from" field.
func FromContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldFrom, v))
}

// ToEQ applies the EQ predicate on the "to" field.
func ToEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTo, v))
}

// ToNEQ applies the NEQ predicate on the "to" field.
func ToNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldTo, v))
}

// ToIn applies the In predicate on the "to" field.
func ToIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldTo, vs...))
}

// ToNotIn applies the NotIn predicate on the "to" field.
func ToNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldTo, vs...))
}

// ToGT applies the GT predicate on the "to" field.
func ToGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldTo, v))
}

// ToGTE applies the GTE predicate on the "to" field.
func ToGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldTo, v))
}

// ToLT applies the LT predicate on the "to" field.
func ToLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldTo, v))
}

// ToLTE applies the LTE predicate on the "to" field.
func ToLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldTo, v))
}

// ToContains applies the Contains predicate on the "to" field.
func ToContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldTo, v))
}

// ToHasPrefix applies the HasPrefix predicate on the "to" field.
func ToHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldTo, v))
}

// ToHasSuffix applies the HasSuffix predicate on the "to" field.
func ToHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldTo, v))
}

// ToIsNil applies the IsNil predicate on the "to" field.
func ToIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldTo))
}

// ToNotNil applies the NotNil predicate on the "to" field.
func ToNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldTo))
}

// ToEqualFold applies the EqualFold predicate on the "to" field.
func ToEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldTo, v))
}

// ToContainsFold applies the ContainsFold predicate on the "to" field.
func ToContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldTo, v))
}

// MemoEQ applies the EQ predicate on the "memo" field.
func MemoEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldMemo, v))
}

// MemoNEQ applies the NEQ predicate on the "memo" field.
func MemoNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldMemo, v))
}

// MemoIn applies the In predicate on the "memo" field.
func MemoIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldMemo, vs...))
}

// MemoNotIn applies the NotIn predicate on the "memo" field.
func MemoNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldMemo, vs...))
}

// MemoGT applies the GT predicate on the "memo" field.
func MemoGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldMemo, v))
}

// MemoGTE applies the GTE predicate on the "memo" field.
func MemoGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldMemo, v))
}

// MemoLT applies the LT predicate on the "memo" field.
func MemoLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldMemo, v))
}

// MemoLTE applies the LTE predicate on the "memo" field.
func MemoLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldMemo, v))
}

// MemoContains applies the Contains predicate on the "memo" field.
func MemoContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldMemo, v))
}

// MemoHasPrefix applies the HasPrefix predicate on the "memo" field.
func MemoHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldMemo, v))
}

// MemoHasSuffix applies the HasSuffix predicate on the "memo" field.
func MemoHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldMemo, v))
}

// MemoIsNil applies the IsNil predicate on the "memo" field.
func MemoIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldMemo))
}

// MemoNotNil applies the NotNil predicate on the "memo" field.
func MemoNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldMemo))
}

// MemoEqualFold applies the EqualFold predicate on the "memo" field.
func MemoEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldMemo, v))
}

// MemoContainsFold applies the ContainsFold predicate on the "memo" field.
func MemoContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldMemo, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldAmount, v))
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldAmount))
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldAmount))
}

// PayloadEQ applies the EQ predicate on the "payload" field.
func PayloadEQ(v []byte) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPayload, v))
}

// PayloadNEQ applies the NEQ predicate on the "payload" field.
func PayloadNEQ(v []byte) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPayload, v))
}

// PayloadIn applies the In predicate on the "payload" field.
func PayloadIn(vs ...[]byte) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPayload, vs...))
}

// PayloadNotIn applies the NotIn predicate on the "payload" field.
func PayloadNotIn(vs ...[]byte) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPayload, vs...))
}

// PayloadGT applies the GT predicate on the "payload" field.
func PayloadGT(v []byte) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPayload, v))
}

// PayloadGTE applies the GTE predicate on the "payload" field.
func PayloadGTE(v []byte) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPayload, v))
}

// PayloadLT applies the LT predicate on the "payload" field.
func PayloadLT(v []byte) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPayload, v))
}

// PayloadLTE applies the LTE predicate on the "payload" field.
func PayloadLTE(v []byte) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPayload, v))
}

// PayloadIsNil applies the IsNil predicate on the "payload" field.
func PayloadIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldPayload))
}

// PayloadNotNil applies the NotNil predicate on the "payload" field.
func PayloadNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldPayload))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v uint8) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v uint8) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...uint8) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...uint8) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v uint8) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v uint8) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v uint8) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v uint8) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldState, v))
}

// StateIsNil applies the IsNil predicate on the "state" field.
func StateIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldState))
}

// StateNotNil applies the NotNil predicate on the "state" field.
func StateNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldState))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldDeletedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/sphinx/proxy/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/sphinx/proxy/db/ent/generated/transaction"
	"github.com/NpoolPlatform/message/npool/sphinxplugin"
	"github.com/google/uuid"
)

// TransactionUpdate is the builder for updating Transaction entities.
type TransactionUpdate struct {
	config
	hooks     []Hook
	mutation  *TransactionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tu *TransactionUpdate) Where(ps ...predicate.Transaction) *TransactionUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetEntID sets the "ent_id" field.
func (tu *TransactionUpdate) SetEntID(u uuid.UUID) *TransactionUpdate {
	tu.mutation.SetEntID(u)
	return tu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableEntID(u *uuid.UUID) *TransactionUpdate {
	if u != nil {
		tu.SetEntID(*u)
	}
	return tu
}

// SetCoinType sets the "coin_type" field.
func (tu *TransactionUpdate) SetCoinType(i int32) *TransactionUpdate {
	tu.mutation.ResetCoinType()
	tu.mutation.SetCoinType(i)
	return tu
}

// SetNillableCoinType sets the "coin_type" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableCoinType(i *int32) *TransactionUpdate {
	if i != nil {
		tu.SetCoinType(*i)
	}
	return tu
}

// AddCoinType adds i to the "coin_type" field.
func (tu *TransactionUpdate) AddCoinType(i int32) *TransactionUpdate {
	tu.mutation.AddCoinType(i)
	return tu
}

// ClearCoinType clears the value of the "coin_type" field.
func (tu *TransactionUpdate) ClearCoinType() *TransactionUpdate {
	tu.mutation.ClearCoinType()
	return tu
}

// SetNonce sets the "nonce" field.
func (tu *TransactionUpdate) SetNonce(u uint64) *TransactionUpdate {
	tu.mutation.ResetNonce()
	tu.mutation.SetNonce(u)
	return tu
}

// SetNillableNonce sets the "nonce" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableNonce(u *uint64) *TransactionUpdate {
	if u != nil {
		tu.SetNonce(*u)
	}
	return tu
}

// AddNonce adds u to the "nonce" field.
func (tu *TransactionUpdate) AddNonce(u int64) *TransactionUpdate {
	tu.mutation.AddNonce(u)
	return tu
}

// ClearNonce clears the value of the "nonce" field.
func (tu *TransactionUpdate) ClearNonce() *TransactionUpdate {
	tu.mutation.ClearNonce()
	return tu
}

// SetUtxo sets the "utxo" field.
func (tu *TransactionUpdate) SetUtxo(s []*sphinxplugin.Unspent) *TransactionUpdate {
	tu.mutation.SetUtxo(s)
	return tu
}

// AppendUtxo appends s to the "utxo" field.
func (tu *TransactionUpdate) AppendUtxo(s []*sphinxplugin.Unspent) *TransactionUpdate {
	tu.mutation.AppendUtxo(s)
	return tu
}

// ClearUtxo clears the value of the "utxo" field.
func (tu *TransactionUpdate) ClearUtxo() *TransactionUpdate {
	tu.mutation.ClearUtxo()
	return tu
}

// SetPre sets the "pre" field.
func (tu *TransactionUpdate) SetPre(s *sphinxplugin.Unspent) *TransactionUpdate {
	tu.mutation.SetPre(s)
	return tu
}

// ClearPre clears the value of the "pre" field.
func (tu *TransactionUpdate) ClearPre() *TransactionUpdate {
	tu.mutation.ClearPre()
	return tu
}

// SetTransactionType sets the "transaction_type" field.
func (tu *TransactionUpdate) SetTransactionType(i int8) *TransactionUpdate {
	tu.mutation.ResetTransactionType()
	tu.mutation.SetTransactionType(i)
	return tu
}

// SetNillableTransactionType sets the "transaction_type" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableTransactionType(i *int8) *TransactionUpdate {
	if i != nil {
		tu.SetTransactionType(*i)
	}
	return tu
}

// AddTransactionType adds i to the "transaction_type" field.
func (tu *TransactionUpdate) AddTransactionType(i int8) *TransactionUpdate {
	tu.mutation.AddTransactionType(i)
	return tu
}

// ClearTransactionType clears the value of the "transaction_type" field.
func (tu *TransactionUpdate) ClearTransactionType() *TransactionUpdate {
	tu.mutation.ClearTransactionType()
	return tu
}

// SetRecentBhash sets the "recent_bhash" field.
func (tu *TransactionUpdate) SetRecentBhash(s string) *TransactionUpdate {
	tu.mutation.SetRecentBhash(s)
	return tu
}

// SetNillableRecentBhash sets the "recent_bhash" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableRecentBhash(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetRecentBhash(*s)
	}
	return tu
}

// ClearRecentBhash clears the value of the "recent_bhash" field.
func (tu *TransactionUpdate) ClearRecentBhash() *TransactionUpdate {
	tu.mutation.ClearRecentBhash()
	return tu
}

// SetTxData sets the "tx_data" field.
func (tu *TransactionUpdate) SetTxData(b []byte) *TransactionUpdate {
	tu.mutation.SetTxData(b)
	return tu
}

// ClearTxData clears the value of the "tx_data" field.
func (tu *TransactionUpdate) ClearTxData() *TransactionUpdate {
	tu.mutation.ClearTxData()
	return tu
}

// SetTransactionID sets the "transaction_id" field.
func (tu *TransactionUpdate) SetTransactionID(s string) *TransactionUpdate {
	tu.mutation.SetTransactionID(s)
	return tu
}

// SetNillableTransactionID sets the "transaction_id" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableTransactionID(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetTransactionID(*s)
	}
	return tu
}

// SetCid sets the "cid" field.
func (tu *TransactionUpdate) SetCid(s string) *TransactionUpdate {
	tu.mutation.SetCid(s)
	return tu
}

// SetNillableCid sets the "cid" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableCid(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetCid(*s)
	}
	return tu
}

// ClearCid clears the value of the "cid" field.
func (tu *TransactionUpdate) ClearCid() *TransactionUpdate {
	tu.mutation.ClearCid()
	return tu
}

// SetExitCode sets the "exit_code" field.
func (tu *TransactionUpdate) SetExitCode(i int64) *TransactionUpdate {
	tu.mutation.ResetExitCode()
	tu.mutation.SetExitCode(i)
	return tu
}

// SetNillableExitCode sets the "exit_code" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableExitCode(i *int64) *TransactionUpdate {
	if i != nil {
		tu.SetExitCode(*i)
	}
	return tu
}

// AddExitCode adds i to the "exit_code" field.
func (tu *TransactionUpdate) AddExitCode(i int64) *TransactionUpdate {
	tu.mutation.AddExitCode(i)
	return tu
}

// ClearExitCode clears the value of the "exit_code" field.
func (tu *TransactionUpdate) ClearExitCode() *TransactionUpdate {
	tu.mutation.ClearExitCode()
	return tu
}

// SetName sets the "name" field.
func (tu *TransactionUpdate) SetName(s string) *TransactionUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableName(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// ClearName clears the value of the "name" field.
func (tu *TransactionUpdate) ClearName() *TransactionUpdate {
	tu.mutation.ClearName()
	return tu
}

// SetFrom sets the "from" field.
func (tu *TransactionUpdate) SetFrom(s string) *TransactionUpdate {
	tu.mutation.SetFrom(s)
	return tu
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableFrom(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetFrom(*s)
	}
	return tu
}

// ClearFrom clears the value of the "from" field.
func (tu *TransactionUpdate) ClearFrom() *TransactionUpdate {
	tu.mutation.ClearFrom()
	return tu
}

// SetTo sets the "to" field.
func (tu *TransactionUpdate) SetTo(s string) *TransactionUpdate {
	tu.mutation.SetTo(s)
	return tu
}

// SetNillableTo sets the "to" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableTo(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetTo(*s)
	}
	return tu
}

// ClearTo clears the value of the "to" field.
func (tu *TransactionUpdate) ClearTo() *TransactionUpdate {
	tu.mutation.ClearTo()
	return tu
}

// SetMemo sets the "memo" field.
func (tu *TransactionUpdate) SetMemo(s string) *TransactionUpdate {
	tu.mutation.SetMemo(s)
	return tu
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableMemo(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetMemo(*s)
	}
	return tu
}

// ClearMemo clears the value of the "memo" field.
func (tu *TransactionUpdate) ClearMemo() *TransactionUpdate {
	tu.mutation.ClearMemo()
	return tu
}

// SetAmount sets the "amount" field.
func (tu *TransactionUpdate) SetAmount(u uint64) *TransactionUpdate {
	tu.mutation.ResetAmount()
	tu.mutation.SetAmount(u)
	return tu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableAmount(u *uint64) *TransactionUpdate {
	if u != nil {
		tu.SetAmount(*u)
	}
	return tu
}

// AddAmount adds u to the "amount" field.
func (tu *TransactionUpdate) AddAmount(u int64) *TransactionUpdate {
	tu.mutation.AddAmount(u)
	return tu
}

// ClearAmount clears the value of the "amount" field.
func (tu *TransactionUpdate) ClearAmount() *TransactionUpdate {
	tu.mutation.ClearAmount()
	return tu
}

// SetPayload sets the "payload" field.
func (tu *TransactionUpdate) SetPayload(b []byte) *TransactionUpdate {
	tu.mutation.SetPayload(b)
	return tu
}

// ClearPayload clears the value of the "payload" field.
func (tu *TransactionUpdate) ClearPayload() *TransactionUpdate {
	tu.mutation.ClearPayload()
	return tu
}

// SetState sets the "state" field.
func (tu *TransactionUpdate) SetState(u uint8) *TransactionUpdate {
	tu.mutation.ResetState()
	tu.mutation.SetState(u)
	return tu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableState(u *uint8) *TransactionUpdate {
	if u != nil {
		tu.SetState(*u)
	}
	return tu
}

// AddState adds u to the "state" field.
func (tu *TransactionUpdate) AddState(u int8) *TransactionUpdate {
	tu.mutation.AddState(u)
	return tu
}

// ClearState clears the value of the "state" field.
func (tu *TransactionUpdate) ClearState() *TransactionUpdate {
	tu.mutation.ClearState()
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TransactionUpdate) SetCreatedAt(u uint32) *TransactionUpdate {
	tu.mutation.ResetCreatedAt()
	tu.mutation.SetCreatedAt(u)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableCreatedAt(u *uint32) *TransactionUpdate {
	if u != nil {
		tu.SetCreatedAt(*u)
	}
	return tu
}

// AddCreatedAt adds u to the "created_at" field.
func (tu *TransactionUpdate) AddCreatedAt(u int32) *TransactionUpdate {
	tu.mutation.AddCreatedAt(u)
	return tu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (tu *TransactionUpdate) ClearCreatedAt() *TransactionUpdate {
	tu.mutation.ClearCreatedAt()
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TransactionUpdate) SetUpdatedAt(u uint32) *TransactionUpdate {
	tu.mutation.ResetUpdatedAt()
	tu.mutation.SetUpdatedAt(u)
	return tu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tu *TransactionUpdate) AddUpdatedAt(u int32) *TransactionUpdate {
	tu.mutation.AddUpdatedAt(u)
	return tu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tu *TransactionUpdate) ClearUpdatedAt() *TransactionUpdate {
	tu.mutation.ClearUpdatedAt()
	return tu
}

// SetDeletedAt sets the "deleted_at" field.
func (tu *TransactionUpdate) SetDeletedAt(u uint32) *TransactionUpdate {
	tu.mutation.ResetDeletedAt()
	tu.mutation.SetDeletedAt(u)
	return tu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableDeletedAt(u *uint32) *TransactionUpdate {
	if u != nil {
		tu.SetDeletedAt(*u)
	}
	return tu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tu *TransactionUpdate) AddDeletedAt(u int32) *TransactionUpdate {
	tu.mutation.AddDeletedAt(u)
	return tu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tu *TransactionUpdate) ClearDeletedAt() *TransactionUpdate {
	tu.mutation.ClearDeletedAt()
	return tu
}

// Mutation returns the TransactionMutation object of the builder.
func (tu *TransactionUpdate) Mutation() *TransactionMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransactionUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransactionUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransactionUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TransactionUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok && !tu.mutation.UpdatedAtCleared() {
		v := transaction.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TransactionUpdate) check() error {
	if v, ok := tu.mutation.Payload(); ok {
		if err := transaction.PayloadValidator(v); err != nil {
			return &ValidationError{Name: "payload", err: fmt.Errorf(`generated: validator failed for field "Transaction.payload": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TransactionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TransactionUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUint32))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.EntID(); ok {
		_spec.SetField(transaction.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := tu.mutation.CoinType(); ok {
		_spec.SetField(transaction.FieldCoinType, field.TypeInt32, value)
	}
	if value, ok := tu.mutation.AddedCoinType(); ok {
		_spec.AddField(transaction.FieldCoinType, field.TypeInt32, value)
	}
	if tu.mutation.CoinTypeCleared() {
		_spec.ClearField(transaction.FieldCoinType, field.TypeInt32)
	}
	if value, ok := tu.mutation.Nonce(); ok {
		_spec.SetField(transaction.FieldNonce, field.TypeUint64, value)
	}
	if value, ok := tu.mutation.AddedNonce(); ok {
		_spec.AddField(transaction.FieldNonce, field.TypeUint64, value)
	}
	if tu.mutation.NonceCleared() {
		_spec.ClearField(transaction.FieldNonce, field.TypeUint64)
	}
	if value, ok := tu.mutation.Utxo(); ok {
		_spec.SetField(transaction.FieldUtxo, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedUtxo(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, transaction.FieldUtxo, value)
		})
	}
	if tu.mutation.UtxoCleared() {
		_spec.ClearField(transaction.FieldUtxo, field.TypeJSON)
	}
	if value, ok := tu.mutation.Pre(); ok {
		_spec.SetField(transaction.FieldPre, field.TypeJSON, value)
	}
	if tu.mutation.PreCleared() {
		_spec.ClearField(transaction.FieldPre, field.TypeJSON)
	}
	if value, ok := tu.mutation.TransactionType(); ok {
		_spec.SetField(transaction.FieldTransactionType, field.TypeInt8, value)
	}
	if value, ok := tu.mutation.AddedTransactionType(); ok {
		_spec.AddField(transaction.FieldTransactionType, field.TypeInt8, value)
	}
	if tu.mutation.TransactionTypeCleared() {
		_spec.ClearField(transaction.FieldTransactionType, field.TypeInt8)
	}
	if value, ok := tu.mutation.RecentBhash(); ok {
		_spec.SetField(transaction.FieldRecentBhash, field.TypeString, value)
	}
	if tu.mutation.RecentBhashCleared() {
		_spec.ClearField(transaction.FieldRecentBhash, field.TypeString)
	}
	if value, ok := tu.mutation.TxData(); ok {
		_spec.SetField(transaction.FieldTxData, field.TypeBytes, value)
	}
	if tu.mutation.TxDataCleared() {
		_spec.ClearField(transaction.FieldTxData, field.TypeBytes)
	}
	if value, ok := tu.mutation.TransactionID(); ok {
		_spec.SetField(transaction.FieldTransactionID, field.TypeString, value)
	}
	if value, ok := tu.mutation.Cid(); ok {
		_spec.SetField(transaction.FieldCid, field.TypeString, value)
	}
	if tu.mutation.CidCleared() {
		_spec.ClearField(transaction.FieldCid, field.TypeString)
	}
	if value, ok := tu.mutation.ExitCode(); ok {
		_spec.SetField(transaction.FieldExitCode, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedExitCode(); ok {
		_spec.AddField(transaction.FieldExitCode, field.TypeInt64, value)
	}
	if tu.mutation.ExitCodeCleared() {
		_spec.ClearField(transaction.FieldExitCode, field.TypeInt64)
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(transaction.FieldName, field.TypeString, value)
	}
	if tu.mutation.NameCleared() {
		_spec.ClearField(transaction.FieldName, field.TypeString)
	}
	if value, ok := tu.mutation.From(); ok {
		_spec.SetField(transaction.FieldFrom, field.TypeString, value)
	}
	if tu.mutation.FromCleared() {
		_spec.ClearField(transaction.FieldFrom, field.TypeString)
	}
	if value, ok := tu.mutation.To(); ok {
		_spec.SetField(transaction.FieldTo, field.TypeString, value)
	}
	if tu.mutation.ToCleared() {
		_spec.ClearField(transaction.FieldTo, field.TypeString)
	}
	if value, ok := tu.mutation.Memo(); ok {
		_spec.SetField(transaction.FieldMemo, field.TypeString, value)
	}
	if tu.mutation.MemoCleared() {
		_spec.ClearField(transaction.FieldMemo, field.TypeString)
	}
	if value, ok := tu.mutation.Amount(); ok {
		_spec.SetField(transaction.FieldAmount, field.TypeUint64, value)
	}
	if value, ok := tu.mutation.AddedAmount(); ok {
		_spec.AddField(transaction.FieldAmount, field.TypeUint64, value)
	}
	if tu.mutation.AmountCleared() {
		_spec.ClearField(transaction.FieldAmount, field.TypeUint64)
	}
	if value, ok := tu.mutation.Payload(); ok {
		_spec.SetField(transaction.FieldPayload, field.TypeBytes, value)
	}
	if tu.mutation.PayloadCleared() {
		_spec.ClearField(transaction.FieldPayload, field.TypeBytes)
	}
	if value, ok := tu.mutation.State(); ok {
		_spec.SetField(transaction.FieldState, field.TypeUint8, value)
	}
	if value, ok := tu.mutation.AddedState(); ok {
		_spec.AddField(transaction.FieldState, field.TypeUint8, value)
	}
	if tu.mutation.StateCleared() {
		_spec.ClearField(transaction.FieldState, field.TypeUint8)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(transaction.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := tu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(transaction.FieldCreatedAt, field.TypeUint32, value)
	}
	if tu.mutation.CreatedAtCleared() {
		_spec.ClearField(transaction.FieldCreatedAt, field.TypeUint32)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(transaction.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := tu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(transaction.FieldUpdatedAt, field.TypeUint32, value)
	}
	if tu.mutation.UpdatedAtCleared() {
		_spec.ClearField(transaction.FieldUpdatedAt, field.TypeUint32)
	}
	if value, ok := tu.mutation.DeletedAt(); ok {
		_spec.SetField(transaction.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := tu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(transaction.FieldDeletedAt, field.TypeUint32, value)
	}
	if tu.mutation.DeletedAtCleared() {
		_spec.ClearField(transaction.FieldDeletedAt, field.TypeUint32)
	}
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TransactionUpdateOne is the builder for updating a single Transaction entity.
type TransactionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TransactionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (tuo *TransactionUpdateOne) SetEntID(u uuid.UUID) *TransactionUpdateOne {
	tuo.mutation.SetEntID(u)
	return tuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableEntID(u *uuid.UUID) *TransactionUpdateOne {
	if u != nil {
		tuo.SetEntID(*u)
	}
	return tuo
}

// SetCoinType sets the "coin_type" field.
func (tuo *TransactionUpdateOne) SetCoinType(i int32) *TransactionUpdateOne {
	tuo.mutation.ResetCoinType()
	tuo.mutation.SetCoinType(i)
	return tuo
}

// SetNillableCoinType sets the "coin_type" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableCoinType(i *int32) *TransactionUpdateOne {
	if i != nil {
		tuo.SetCoinType(*i)
	}
	return tuo
}

// AddCoinType adds i to the "coin_type" field.
func (tuo *TransactionUpdateOne) AddCoinType(i int32) *TransactionUpdateOne {
	tuo.mutation.AddCoinType(i)
	return tuo
}

// ClearCoinType clears the value of the "coin_type" field.
func (tuo *TransactionUpdateOne) ClearCoinType() *TransactionUpdateOne {
	tuo.mutation.ClearCoinType()
	return tuo
}

// SetNonce sets the "nonce" field.
func (tuo *TransactionUpdateOne) SetNonce(u uint64) *TransactionUpdateOne {
	tuo.mutation.ResetNonce()
	tuo.mutation.SetNonce(u)
	return tuo
}

// SetNillableNonce sets the "nonce" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableNonce(u *uint64) *TransactionUpdateOne {
	if u != nil {
		tuo.SetNonce(*u)
	}
	return tuo
}

// AddNonce adds u to the "nonce" field.
func (tuo *TransactionUpdateOne) AddNonce(u int64) *TransactionUpdateOne {
	tuo.mutation.AddNonce(u)
	return tuo
}

// ClearNonce clears the value of the "nonce" field.
func (tuo *TransactionUpdateOne) ClearNonce() *TransactionUpdateOne {
	tuo.mutation.ClearNonce()
	return tuo
}

// SetUtxo sets the "utxo" field.
func (tuo *TransactionUpdateOne) SetUtxo(s []*sphinxplugin.Unspent) *TransactionUpdateOne {
	tuo.mutation.SetUtxo(s)
	return tuo
}

// AppendUtxo appends s to the "utxo" field.
func (tuo *TransactionUpdateOne) AppendUtxo(s []*sphinxplugin.Unspent) *TransactionUpdateOne {
	tuo.mutation.AppendUtxo(s)
	return tuo
}

// ClearUtxo clears the value of the "utxo" field.
func (tuo *TransactionUpdateOne) ClearUtxo() *TransactionUpdateOne {
	tuo.mutation.ClearUtxo()
	return tuo
}

// SetPre sets the "pre" field.
func (tuo *TransactionUpdateOne) SetPre(s *sphinxplugin.Unspent) *TransactionUpdateOne {
	tuo.mutation.SetPre(s)
	return tuo
}

// ClearPre clears the value of the "pre" field.
func (tuo *TransactionUpdateOne) ClearPre() *TransactionUpdateOne {
	tuo.mutation.ClearPre()
	return tuo
}

// SetTransactionType sets the "transaction_type" field.
func (tuo *TransactionUpdateOne) SetTransactionType(i int8) *TransactionUpdateOne {
	tuo.mutation.ResetTransactionType()
	tuo.mutation.SetTransactionType(i)
	return tuo
}

// SetNillableTransactionType sets the "transaction_type" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableTransactionType(i *int8) *TransactionUpdateOne {
	if i != nil {
		tuo.SetTransactionType(*i)
	}
	return tuo
}

// AddTransactionType adds i to the "transaction_type" field.
func (tuo *TransactionUpdateOne) AddTransactionType(i int8) *TransactionUpdateOne {
	tuo.mutation.AddTransactionType(i)
	return tuo
}

// ClearTransactionType clears the value of the "transaction_type" field.
func (tuo *TransactionUpdateOne) ClearTransactionType() *TransactionUpdateOne {
	tuo.mutation.ClearTransactionType()
	return tuo
}

// SetRecentBhash sets the "recent_bhash" field.
func (tuo *TransactionUpdateOne) SetRecentBhash(s string) *TransactionUpdateOne {
	tuo.mutation.SetRecentBhash(s)
	return tuo
}

// SetNillableRecentBhash sets the "recent_bhash" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableRecentBhash(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetRecentBhash(*s)
	}
	return tuo
}

// ClearRecentBhash clears the value of the "recent_bhash" field.
func (tuo *TransactionUpdateOne) ClearRecentBhash() *TransactionUpdateOne {
	tuo.mutation.ClearRecentBhash()
	return tuo
}

// SetTxData sets the "tx_data" field.
func (tuo *TransactionUpdateOne) SetTxData(b []byte) *TransactionUpdateOne {
	tuo.mutation.SetTxData(b)
	return tuo
}

// ClearTxData clears the value of the "tx_data" field.
func (tuo *TransactionUpdateOne) ClearTxData() *TransactionUpdateOne {
	tuo.mutation.ClearTxData()
	return tuo
}

// SetTransactionID sets the "transaction_id" field.
func (tuo *TransactionUpdateOne) SetTransactionID(s string) *TransactionUpdateOne {
	tuo.mutation.SetTransactionID(s)
	return tuo
}

// SetNillableTransactionID sets the "transaction_id" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableTransactionID(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetTransactionID(*s)
	}
	return tuo
}

// SetCid sets the "cid" field.
func (tuo *TransactionUpdateOne) SetCid(s string) *TransactionUpdateOne {
	tuo.mutation.SetCid(s)
	return tuo
}

// SetNillableCid sets the "cid" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableCid(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetCid(*s)
	}
	return tuo
}

// ClearCid clears the value of the "cid" field.
func (tuo *TransactionUpdateOne) ClearCid() *TransactionUpdateOne {
	tuo.mutation.ClearCid()
	return tuo
}

// SetExitCode sets the "exit_code" field.
func (tuo *TransactionUpdateOne) SetExitCode(i int64) *TransactionUpdateOne {
	tuo.mutation.ResetExitCode()
	tuo.mutation.SetExitCode(i)
	return tuo
}

// SetNillableExitCode sets the "exit_code" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableExitCode(i *int64) *TransactionUpdateOne {
	if i != nil {
		tuo.SetExitCode(*i)
	}
	return tuo
}

// AddExitCode adds i to the "exit_code" field.
func (tuo *TransactionUpdateOne) AddExitCode(i int64) *TransactionUpdateOne {
	tuo.mutation.AddExitCode(i)
	return tuo
}

// ClearExitCode clears the value of the "exit_code" field.
func (tuo *TransactionUpdateOne) ClearExitCode() *TransactionUpdateOne {
	tuo.mutation.ClearExitCode()
	return tuo
}

// SetName sets the "name" field.
func (tuo *TransactionUpdateOne) SetName(s string) *TransactionUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableName(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// ClearName clears the value of the "name" field.
func (tuo *TransactionUpdateOne) ClearName() *TransactionUpdateOne {
	tuo.mutation.ClearName()
	return tuo
}

// SetFrom sets the "from" field.
func (tuo *TransactionUpdateOne) SetFrom(s string) *TransactionUpdateOne {
	tuo.mutation.SetFrom(s)
	return tuo
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableFrom(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetFrom(*s)
	}
	return tuo
}

// ClearFrom clears the value of the "from" field.
func (tuo *TransactionUpdateOne) ClearFrom() *TransactionUpdateOne {
	tuo.mutation.ClearFrom()
	return tuo
}

// SetTo sets the "to" field.
func (tuo *TransactionUpdateOne) SetTo(s string) *TransactionUpdateOne {
	tuo.mutation.SetTo(s)
	return tuo
}

// SetNillableTo sets the "to" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableTo(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetTo(*s)
	}
	return tuo
}

// ClearTo clears the value of the "to" field.
func (tuo *TransactionUpdateOne) ClearTo() *TransactionUpdateOne {
	tuo.mutation.ClearTo()
	return tuo
}

// SetMemo sets the "memo" field.
func (tuo *TransactionUpdateOne) SetMemo(s string) *TransactionUpdateOne {
	tuo.mutation.SetMemo(s)
	return tuo
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableMemo(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetMemo(*s)
	}
	return tuo
}

// ClearMemo clears the value of the "memo" field.
func (tuo *TransactionUpdateOne) ClearMemo() *TransactionUpdateOne {
	tuo.mutation.ClearMemo()
	return tuo
}

// SetAmount sets the "amount" field.
func (tuo *TransactionUpdateOne) SetAmount(u uint64) *TransactionUpdateOne {
	tuo.mutation.ResetAmount()
	tuo.mutation.SetAmount(u)
	return tuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableAmount(u *uint64) *TransactionUpdateOne {
	if u != nil {
		tuo.SetAmount(*u)
	}
	return tuo
}

// AddAmount adds u to the "amount" field.
func (tuo *TransactionUpdateOne) AddAmount(u int64) *TransactionUpdateOne {
	tuo.mutation.AddAmount(u)
	return tuo
}

// ClearAmount clears the value of the "amount" field.
func (tuo *TransactionUpdateOne) ClearAmount() *TransactionUpdateOne {
	tuo.mutation.ClearAmount()
	return tuo
}

// SetPayload sets the "payload" field.
func (tuo *TransactionUpdateOne) SetPayload(b []byte) *TransactionUpdateOne {
	tuo.mutation.SetPayload(b)
	return tuo
}

// ClearPayload clears the value of the "payload" field.
func (tuo *TransactionUpdateOne) ClearPayload() *TransactionUpdateOne {
	tuo.mutation.ClearPayload()
	return tuo
}

// SetState sets the "state" field.
func (tuo *TransactionUpdateOne) SetState(u uint8) *TransactionUpdateOne {
	tuo.mutation.ResetState()
	tuo.mutation.SetState(u)
	return tuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableState(u *uint8) *TransactionUpdateOne {
	if u != nil {
		tuo.SetState(*u)
	}
	return tuo
}

// AddState adds u to the "state" field.
func (tuo *TransactionUpdateOne) AddState(u int8) *TransactionUpdateOne {
	tuo.mutation.AddState(u)
	return tuo
}

// ClearState clears the value of the "state" field.
func (tuo *TransactionUpdateOne) ClearState() *TransactionUpdateOne {
	tuo.mutation.ClearState()
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TransactionUpdateOne) SetCreatedAt(u uint32) *TransactionUpdateOne {
	tuo.mutation.ResetCreatedAt()
	tuo.mutation.SetCreatedAt(u)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableCreatedAt(u *uint32) *TransactionUpdateOne {
	if u != nil {
		tuo.SetCreatedAt(*u)
	}
	return tuo
}

// AddCreatedAt adds u to the "created_at" field.
func (tuo *TransactionUpdateOne) AddCreatedAt(u int32) *TransactionUpdateOne {
	tuo.mutation.AddCreatedAt(u)
	return tuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (tuo *TransactionUpdateOne) ClearCreatedAt() *TransactionUpdateOne {
	tuo.mutation.ClearCreatedAt()
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TransactionUpdateOne) SetUpdatedAt(u uint32) *TransactionUpdateOne {
	tuo.mutation.ResetUpdatedAt()
	tuo.mutation.SetUpdatedAt(u)
	return tuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tuo *TransactionUpdateOne) AddUpdatedAt(u int32) *TransactionUpdateOne {
	tuo.mutation.AddUpdatedAt(u)
	return tuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuo *TransactionUpdateOne) ClearUpdatedAt() *TransactionUpdateOne {
	tuo.mutation.ClearUpdatedAt()
	return tuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tuo *TransactionUpdateOne) SetDeletedAt(u uint32) *TransactionUpdateOne {
	tuo.mutation.ResetDeletedAt()
	tuo.mutation.SetDeletedAt(u)
	return tuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableDeletedAt(u *uint32) *TransactionUpdateOne {
	if u != nil {
		tuo.SetDeletedAt(*u)
	}
	return tuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tuo *TransactionUpdateOne) AddDeletedAt(u int32) *TransactionUpdateOne {
	tuo.mutation.AddDeletedAt(u)
	return tuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tuo *TransactionUpdateOne) ClearDeletedAt() *TransactionUpdateOne {
	tuo.mutation.ClearDeletedAt()
	return tuo
}

// Mutation returns the TransactionMutation object of the builder.
func (tuo *TransactionUpdateOne) Mutation() *TransactionMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tuo *TransactionUpdateOne) Where(ps ...predicate.Transaction) *TransactionUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransactionUpdateOne) Select(field string, fields ...string) *TransactionUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transaction entity.
func (tuo *TransactionUpdateOne) Save(ctx context.Context) (*Transaction, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransactionUpdateOne) SaveX(ctx context.Context) *Transaction {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransactionUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TransactionUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok && !tuo.mutation.UpdatedAtCleared() {
		v := transaction.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TransactionUpdateOne) check() error {
	if v, ok := tuo.mutation.Payload(); ok {
		if err := transaction.PayloadValidator(v); err != nil {
			return &ValidationError{Name: "payload", err: fmt.Errorf(`generated: validator failed for field "Transaction.payload": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TransactionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TransactionUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TransactionUpdateOne) sqlSave(ctx context.Context) (_node *Transaction, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUint32))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Transaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transaction.FieldID)
		for _, f := range fields {
			if !transaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != transaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.EntID(); ok {
		_spec.SetField(transaction.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := tuo.mutation.CoinType(); ok {
		_spec.SetField(transaction.FieldCoinType, field.TypeInt32, value)
	}
	if value, ok := tuo.mutation.AddedCoinType(); ok {
		_spec.AddField(transaction.FieldCoinType, field.TypeInt32, value)
	}
	if tuo.mutation.CoinTypeCleared() {
		_spec.ClearField(transaction.FieldCoinType, field.TypeInt32)
	}
	if value, ok := tuo.mutation.Nonce(); ok {
		_spec.SetField(transaction.FieldNonce, field.TypeUint64, value)
	}
	if value, ok := tuo.mutation.AddedNonce(); ok {
		_spec.AddField(transaction.FieldNonce, field.TypeUint64, value)
	}
	if tuo.mutation.NonceCleared() {
		_spec.ClearField(transaction.FieldNonce, field.TypeUint64)
	}
	if value, ok := tuo.mutation.Utxo(); ok {
		_spec.SetField(transaction.FieldUtxo, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedUtxo(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, transaction.FieldUtxo, value)
		})
	}
	if tuo.mutation.UtxoCleared() {
		_spec.ClearField(transaction.FieldUtxo, field.TypeJSON)
	}
	if value, ok := tuo.mutation.Pre(); ok {
		_spec.SetField(transaction.FieldPre, field.TypeJSON, value)
	}
	if tuo.mutation.PreCleared() {
		_spec.ClearField(transaction.FieldPre, field.TypeJSON)
	}
	if value, ok := tuo.mutation.TransactionType(); ok {
		_spec.SetField(transaction.FieldTransactionType, field.TypeInt8, value)
	}
	if value, ok := tuo.mutation.AddedTransactionType(); ok {
		_spec.AddField(transaction.FieldTransactionType, field.TypeInt8, value)
	}
	if tuo.mutation.TransactionTypeCleared() {
		_spec.ClearField(transaction.FieldTransactionType, field.TypeInt8)
	}
	if value, ok := tuo.mutation.RecentBhash(); ok {
		_spec.SetField(transaction.FieldRecentBhash, field.TypeString, value)
	}
	if tuo.mutation.RecentBhashCleared() {
		_spec.ClearField(transaction.FieldRecentBhash, field.TypeString)
	}
	if value, ok := tuo.mutation.TxData(); ok {
		_spec.SetField(transaction.FieldTxData, field.TypeBytes, value)
	}
	if tuo.mutation.TxDataCleared() {
		_spec.ClearField(transaction.FieldTxData, field.TypeBytes)
	}
	if value, ok := tuo.mutation.TransactionID(); ok {
		_spec.SetField(transaction.FieldTransactionID, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Cid(); ok {
		_spec.SetField(transaction.FieldCid, field.TypeString, value)
	}
	if tuo.mutation.CidCleared() {
		_spec.ClearField(transaction.FieldCid, field.TypeString)
	}
	if value, ok := tuo.mutation.ExitCode(); ok {
		_spec.SetField(transaction.FieldExitCode, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedExitCode(); ok {
		_spec.AddField(transaction.FieldExitCode, field.TypeInt64, value)
	}
	if tuo.mutation.ExitCodeCleared() {
		_spec.ClearField(transaction.FieldExitCode, field.TypeInt64)
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(transaction.FieldName, field.TypeString, value)
	}
	if tuo.mutation.NameCleared() {
		_spec.ClearField(transaction.FieldName, field.TypeString)
	}
	if value, ok := tuo.mutation.From(); ok {
		_spec.SetField(transaction.FieldFrom, field.TypeString, value)
	}
	if tuo.mutation.FromCleared() {
		_spec.ClearField(transaction.FieldFrom, field.TypeString)
	}
	if value, ok := tuo.mutation.To(); ok {
		_spec.SetField(transaction.FieldTo, field.TypeString, value)
	}
	if tuo.mutation.ToCleared() {
		_spec.ClearField(transaction.FieldTo, field.TypeString)
	}
	if value, ok := tuo.mutation.Memo(); ok {
		_spec.SetField(transaction.FieldMemo, field.TypeString, value)
	}
	if tuo.mutation.MemoCleared() {
		_spec.ClearField(transaction.FieldMemo, field.TypeString)
	}
	if value, ok := tuo.mutation.Amount(); ok {
		_spec.SetField(transaction.FieldAmount, field.TypeUint64, value)
	}
	if value, ok := tuo.mutation.AddedAmount(); ok {
		_spec.AddField(transaction.FieldAmount, field.TypeUint64, value)
	}
	if tuo.mutation.AmountCleared() {
		_spec.ClearField(transaction.FieldAmount, field.TypeUint64)
	}
	if value, ok := tuo.mutation.Payload(); ok {
		_spec.SetField(transaction.FieldPayload, field.TypeBytes, value)
	}
	if tuo.mutation.PayloadCleared() {
		_spec.ClearField(transaction.FieldPayload, field.TypeBytes)
	}
	if value, ok := tuo.mutation.State(); ok {
		_spec.SetField(transaction.FieldState, field.TypeUint8, value)
	}
	if value, ok := tuo.mutation.AddedState(); ok {
		_spec.AddField(transaction.FieldState, field.TypeUint8, value)
	}
	if tuo.mutation.StateCleared() {
		_spec.ClearField(transaction.FieldState, field.TypeUint8)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(transaction.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := tuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(transaction.FieldCreatedAt, field.TypeUint32, value)
	}
	if tuo.mutation.CreatedAtCleared() {
		_spec.ClearField(transaction.FieldCreatedAt, field.TypeUint32)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(transaction.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := tuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(transaction.FieldUpdatedAt, field.TypeUint32, value)
	}
	if tuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(transaction.FieldUpdatedAt, field.TypeUint32)
	}
	if value, ok := tuo.mutation.DeletedAt(); ok {
		_spec.SetField(transaction.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := tuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(transaction.FieldDeletedAt, field.TypeUint32, value)
	}
	if tuo.mutation.DeletedAtCleared() {
		_spec.ClearField(transaction.FieldDeletedAt, field.TypeUint32)
	}
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Transaction{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}

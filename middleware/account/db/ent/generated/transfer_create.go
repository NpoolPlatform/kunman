// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/transfer"
	"github.com/google/uuid"
)

// TransferCreate is the builder for creating a Transfer entity.
type TransferCreate struct {
	config
	mutation *TransferMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tc *TransferCreate) SetCreatedAt(u uint32) *TransferCreate {
	tc.mutation.SetCreatedAt(u)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TransferCreate) SetNillableCreatedAt(u *uint32) *TransferCreate {
	if u != nil {
		tc.SetCreatedAt(*u)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TransferCreate) SetUpdatedAt(u uint32) *TransferCreate {
	tc.mutation.SetUpdatedAt(u)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TransferCreate) SetNillableUpdatedAt(u *uint32) *TransferCreate {
	if u != nil {
		tc.SetUpdatedAt(*u)
	}
	return tc
}

// SetDeletedAt sets the "deleted_at" field.
func (tc *TransferCreate) SetDeletedAt(u uint32) *TransferCreate {
	tc.mutation.SetDeletedAt(u)
	return tc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tc *TransferCreate) SetNillableDeletedAt(u *uint32) *TransferCreate {
	if u != nil {
		tc.SetDeletedAt(*u)
	}
	return tc
}

// SetEntID sets the "ent_id" field.
func (tc *TransferCreate) SetEntID(u uuid.UUID) *TransferCreate {
	tc.mutation.SetEntID(u)
	return tc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tc *TransferCreate) SetNillableEntID(u *uuid.UUID) *TransferCreate {
	if u != nil {
		tc.SetEntID(*u)
	}
	return tc
}

// SetAppID sets the "app_id" field.
func (tc *TransferCreate) SetAppID(u uuid.UUID) *TransferCreate {
	tc.mutation.SetAppID(u)
	return tc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (tc *TransferCreate) SetNillableAppID(u *uuid.UUID) *TransferCreate {
	if u != nil {
		tc.SetAppID(*u)
	}
	return tc
}

// SetUserID sets the "user_id" field.
func (tc *TransferCreate) SetUserID(u uuid.UUID) *TransferCreate {
	tc.mutation.SetUserID(u)
	return tc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tc *TransferCreate) SetNillableUserID(u *uuid.UUID) *TransferCreate {
	if u != nil {
		tc.SetUserID(*u)
	}
	return tc
}

// SetTargetUserID sets the "target_user_id" field.
func (tc *TransferCreate) SetTargetUserID(u uuid.UUID) *TransferCreate {
	tc.mutation.SetTargetUserID(u)
	return tc
}

// SetNillableTargetUserID sets the "target_user_id" field if the given value is not nil.
func (tc *TransferCreate) SetNillableTargetUserID(u *uuid.UUID) *TransferCreate {
	if u != nil {
		tc.SetTargetUserID(*u)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TransferCreate) SetID(u uint32) *TransferCreate {
	tc.mutation.SetID(u)
	return tc
}

// Mutation returns the TransferMutation object of the builder.
func (tc *TransferCreate) Mutation() *TransferMutation {
	return tc.mutation
}

// Save creates the Transfer in the database.
func (tc *TransferCreate) Save(ctx context.Context) (*Transfer, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TransferCreate) SaveX(ctx context.Context) *Transfer {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TransferCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TransferCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TransferCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := transfer.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := transfer.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.DeletedAt(); !ok {
		v := transfer.DefaultDeletedAt()
		tc.mutation.SetDeletedAt(v)
	}
	if _, ok := tc.mutation.EntID(); !ok {
		v := transfer.DefaultEntID()
		tc.mutation.SetEntID(v)
	}
	if _, ok := tc.mutation.AppID(); !ok {
		v := transfer.DefaultAppID()
		tc.mutation.SetAppID(v)
	}
	if _, ok := tc.mutation.UserID(); !ok {
		v := transfer.DefaultUserID()
		tc.mutation.SetUserID(v)
	}
	if _, ok := tc.mutation.TargetUserID(); !ok {
		v := transfer.DefaultTargetUserID()
		tc.mutation.SetTargetUserID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TransferCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Transfer.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Transfer.updated_at"`)}
	}
	if _, ok := tc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "Transfer.deleted_at"`)}
	}
	if _, ok := tc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "Transfer.ent_id"`)}
	}
	if _, ok := tc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`generated: missing required field "Transfer.app_id"`)}
	}
	if _, ok := tc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`generated: missing required field "Transfer.user_id"`)}
	}
	if _, ok := tc.mutation.TargetUserID(); !ok {
		return &ValidationError{Name: "target_user_id", err: errors.New(`generated: missing required field "Transfer.target_user_id"`)}
	}
	return nil
}

func (tc *TransferCreate) sqlSave(ctx context.Context) (*Transfer, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TransferCreate) createSpec() (*Transfer, *sqlgraph.CreateSpec) {
	var (
		_node = &Transfer{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(transfer.Table, sqlgraph.NewFieldSpec(transfer.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(transfer.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(transfer.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.DeletedAt(); ok {
		_spec.SetField(transfer.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := tc.mutation.EntID(); ok {
		_spec.SetField(transfer.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := tc.mutation.AppID(); ok {
		_spec.SetField(transfer.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := tc.mutation.UserID(); ok {
		_spec.SetField(transfer.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := tc.mutation.TargetUserID(); ok {
		_spec.SetField(transfer.FieldTargetUserID, field.TypeUUID, value)
		_node.TargetUserID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Transfer.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TransferUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tc *TransferCreate) OnConflict(opts ...sql.ConflictOption) *TransferUpsertOne {
	tc.conflict = opts
	return &TransferUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Transfer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TransferCreate) OnConflictColumns(columns ...string) *TransferUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TransferUpsertOne{
		create: tc,
	}
}

type (
	// TransferUpsertOne is the builder for "upsert"-ing
	//  one Transfer node.
	TransferUpsertOne struct {
		create *TransferCreate
	}

	// TransferUpsert is the "OnConflict" setter.
	TransferUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *TransferUpsert) SetCreatedAt(v uint32) *TransferUpsert {
	u.Set(transfer.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TransferUpsert) UpdateCreatedAt() *TransferUpsert {
	u.SetExcluded(transfer.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TransferUpsert) AddCreatedAt(v uint32) *TransferUpsert {
	u.Add(transfer.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TransferUpsert) SetUpdatedAt(v uint32) *TransferUpsert {
	u.Set(transfer.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransferUpsert) UpdateUpdatedAt() *TransferUpsert {
	u.SetExcluded(transfer.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TransferUpsert) AddUpdatedAt(v uint32) *TransferUpsert {
	u.Add(transfer.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TransferUpsert) SetDeletedAt(v uint32) *TransferUpsert {
	u.Set(transfer.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TransferUpsert) UpdateDeletedAt() *TransferUpsert {
	u.SetExcluded(transfer.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TransferUpsert) AddDeletedAt(v uint32) *TransferUpsert {
	u.Add(transfer.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *TransferUpsert) SetEntID(v uuid.UUID) *TransferUpsert {
	u.Set(transfer.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TransferUpsert) UpdateEntID() *TransferUpsert {
	u.SetExcluded(transfer.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *TransferUpsert) SetAppID(v uuid.UUID) *TransferUpsert {
	u.Set(transfer.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *TransferUpsert) UpdateAppID() *TransferUpsert {
	u.SetExcluded(transfer.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *TransferUpsert) SetUserID(v uuid.UUID) *TransferUpsert {
	u.Set(transfer.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TransferUpsert) UpdateUserID() *TransferUpsert {
	u.SetExcluded(transfer.FieldUserID)
	return u
}

// SetTargetUserID sets the "target_user_id" field.
func (u *TransferUpsert) SetTargetUserID(v uuid.UUID) *TransferUpsert {
	u.Set(transfer.FieldTargetUserID, v)
	return u
}

// UpdateTargetUserID sets the "target_user_id" field to the value that was provided on create.
func (u *TransferUpsert) UpdateTargetUserID() *TransferUpsert {
	u.SetExcluded(transfer.FieldTargetUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Transfer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(transfer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TransferUpsertOne) UpdateNewValues() *TransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(transfer.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Transfer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TransferUpsertOne) Ignore() *TransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TransferUpsertOne) DoNothing() *TransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TransferCreate.OnConflict
// documentation for more info.
func (u *TransferUpsertOne) Update(set func(*TransferUpsert)) *TransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TransferUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TransferUpsertOne) SetCreatedAt(v uint32) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TransferUpsertOne) AddCreatedAt(v uint32) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateCreatedAt() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TransferUpsertOne) SetUpdatedAt(v uint32) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TransferUpsertOne) AddUpdatedAt(v uint32) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateUpdatedAt() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TransferUpsertOne) SetDeletedAt(v uint32) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TransferUpsertOne) AddDeletedAt(v uint32) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateDeletedAt() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *TransferUpsertOne) SetEntID(v uuid.UUID) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateEntID() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *TransferUpsertOne) SetAppID(v uuid.UUID) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateAppID() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *TransferUpsertOne) SetUserID(v uuid.UUID) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateUserID() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateUserID()
	})
}

// SetTargetUserID sets the "target_user_id" field.
func (u *TransferUpsertOne) SetTargetUserID(v uuid.UUID) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetTargetUserID(v)
	})
}

// UpdateTargetUserID sets the "target_user_id" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateTargetUserID() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateTargetUserID()
	})
}

// Exec executes the query.
func (u *TransferUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for TransferCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TransferUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TransferUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TransferUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TransferCreateBulk is the builder for creating many Transfer entities in bulk.
type TransferCreateBulk struct {
	config
	err      error
	builders []*TransferCreate
	conflict []sql.ConflictOption
}

// Save creates the Transfer entities in the database.
func (tcb *TransferCreateBulk) Save(ctx context.Context) ([]*Transfer, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Transfer, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransferMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TransferCreateBulk) SaveX(ctx context.Context) []*Transfer {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TransferCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TransferCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Transfer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TransferUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tcb *TransferCreateBulk) OnConflict(opts ...sql.ConflictOption) *TransferUpsertBulk {
	tcb.conflict = opts
	return &TransferUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Transfer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TransferCreateBulk) OnConflictColumns(columns ...string) *TransferUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TransferUpsertBulk{
		create: tcb,
	}
}

// TransferUpsertBulk is the builder for "upsert"-ing
// a bulk of Transfer nodes.
type TransferUpsertBulk struct {
	create *TransferCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Transfer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(transfer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TransferUpsertBulk) UpdateNewValues() *TransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(transfer.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Transfer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TransferUpsertBulk) Ignore() *TransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TransferUpsertBulk) DoNothing() *TransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TransferCreateBulk.OnConflict
// documentation for more info.
func (u *TransferUpsertBulk) Update(set func(*TransferUpsert)) *TransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TransferUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TransferUpsertBulk) SetCreatedAt(v uint32) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TransferUpsertBulk) AddCreatedAt(v uint32) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateCreatedAt() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TransferUpsertBulk) SetUpdatedAt(v uint32) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TransferUpsertBulk) AddUpdatedAt(v uint32) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateUpdatedAt() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TransferUpsertBulk) SetDeletedAt(v uint32) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TransferUpsertBulk) AddDeletedAt(v uint32) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateDeletedAt() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *TransferUpsertBulk) SetEntID(v uuid.UUID) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateEntID() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *TransferUpsertBulk) SetAppID(v uuid.UUID) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateAppID() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *TransferUpsertBulk) SetUserID(v uuid.UUID) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateUserID() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateUserID()
	})
}

// SetTargetUserID sets the "target_user_id" field.
func (u *TransferUpsertBulk) SetTargetUserID(v uuid.UUID) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetTargetUserID(v)
	})
}

// UpdateTargetUserID sets the "target_user_id" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateTargetUserID() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateTargetUserID()
	})
}

// Exec executes the query.
func (u *TransferUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the TransferCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for TransferCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TransferUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

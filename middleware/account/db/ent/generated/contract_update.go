// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/contract"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ContractUpdate is the builder for updating Contract entities.
type ContractUpdate struct {
	config
	hooks     []Hook
	mutation  *ContractMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ContractUpdate builder.
func (cu *ContractUpdate) Where(ps ...predicate.Contract) *ContractUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *ContractUpdate) SetCreatedAt(u uint32) *ContractUpdate {
	cu.mutation.ResetCreatedAt()
	cu.mutation.SetCreatedAt(u)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableCreatedAt(u *uint32) *ContractUpdate {
	if u != nil {
		cu.SetCreatedAt(*u)
	}
	return cu
}

// AddCreatedAt adds u to the "created_at" field.
func (cu *ContractUpdate) AddCreatedAt(u int32) *ContractUpdate {
	cu.mutation.AddCreatedAt(u)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ContractUpdate) SetUpdatedAt(u uint32) *ContractUpdate {
	cu.mutation.ResetUpdatedAt()
	cu.mutation.SetUpdatedAt(u)
	return cu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cu *ContractUpdate) AddUpdatedAt(u int32) *ContractUpdate {
	cu.mutation.AddUpdatedAt(u)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *ContractUpdate) SetDeletedAt(u uint32) *ContractUpdate {
	cu.mutation.ResetDeletedAt()
	cu.mutation.SetDeletedAt(u)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableDeletedAt(u *uint32) *ContractUpdate {
	if u != nil {
		cu.SetDeletedAt(*u)
	}
	return cu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cu *ContractUpdate) AddDeletedAt(u int32) *ContractUpdate {
	cu.mutation.AddDeletedAt(u)
	return cu
}

// SetEntID sets the "ent_id" field.
func (cu *ContractUpdate) SetEntID(u uuid.UUID) *ContractUpdate {
	cu.mutation.SetEntID(u)
	return cu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableEntID(u *uuid.UUID) *ContractUpdate {
	if u != nil {
		cu.SetEntID(*u)
	}
	return cu
}

// SetGoodID sets the "good_id" field.
func (cu *ContractUpdate) SetGoodID(u uuid.UUID) *ContractUpdate {
	cu.mutation.SetGoodID(u)
	return cu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableGoodID(u *uuid.UUID) *ContractUpdate {
	if u != nil {
		cu.SetGoodID(*u)
	}
	return cu
}

// ClearGoodID clears the value of the "good_id" field.
func (cu *ContractUpdate) ClearGoodID() *ContractUpdate {
	cu.mutation.ClearGoodID()
	return cu
}

// SetDelegatedStakingID sets the "delegated_staking_id" field.
func (cu *ContractUpdate) SetDelegatedStakingID(u uuid.UUID) *ContractUpdate {
	cu.mutation.SetDelegatedStakingID(u)
	return cu
}

// SetNillableDelegatedStakingID sets the "delegated_staking_id" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableDelegatedStakingID(u *uuid.UUID) *ContractUpdate {
	if u != nil {
		cu.SetDelegatedStakingID(*u)
	}
	return cu
}

// ClearDelegatedStakingID clears the value of the "delegated_staking_id" field.
func (cu *ContractUpdate) ClearDelegatedStakingID() *ContractUpdate {
	cu.mutation.ClearDelegatedStakingID()
	return cu
}

// SetAccountID sets the "account_id" field.
func (cu *ContractUpdate) SetAccountID(u uuid.UUID) *ContractUpdate {
	cu.mutation.SetAccountID(u)
	return cu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableAccountID(u *uuid.UUID) *ContractUpdate {
	if u != nil {
		cu.SetAccountID(*u)
	}
	return cu
}

// ClearAccountID clears the value of the "account_id" field.
func (cu *ContractUpdate) ClearAccountID() *ContractUpdate {
	cu.mutation.ClearAccountID()
	return cu
}

// SetBackup sets the "backup" field.
func (cu *ContractUpdate) SetBackup(b bool) *ContractUpdate {
	cu.mutation.SetBackup(b)
	return cu
}

// SetNillableBackup sets the "backup" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableBackup(b *bool) *ContractUpdate {
	if b != nil {
		cu.SetBackup(*b)
	}
	return cu
}

// ClearBackup clears the value of the "backup" field.
func (cu *ContractUpdate) ClearBackup() *ContractUpdate {
	cu.mutation.ClearBackup()
	return cu
}

// SetContractOperatorType sets the "contract_operator_type" field.
func (cu *ContractUpdate) SetContractOperatorType(s string) *ContractUpdate {
	cu.mutation.SetContractOperatorType(s)
	return cu
}

// SetNillableContractOperatorType sets the "contract_operator_type" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableContractOperatorType(s *string) *ContractUpdate {
	if s != nil {
		cu.SetContractOperatorType(*s)
	}
	return cu
}

// ClearContractOperatorType clears the value of the "contract_operator_type" field.
func (cu *ContractUpdate) ClearContractOperatorType() *ContractUpdate {
	cu.mutation.ClearContractOperatorType()
	return cu
}

// Mutation returns the ContractMutation object of the builder.
func (cu *ContractUpdate) Mutation() *ContractMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ContractUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ContractUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ContractUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ContractUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ContractUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := contract.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *ContractUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ContractUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *ContractUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(contract.Table, contract.Columns, sqlgraph.NewFieldSpec(contract.FieldID, field.TypeUint32))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(contract.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(contract.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(contract.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(contract.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(contract.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(contract.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.EntID(); ok {
		_spec.SetField(contract.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := cu.mutation.GoodID(); ok {
		_spec.SetField(contract.FieldGoodID, field.TypeUUID, value)
	}
	if cu.mutation.GoodIDCleared() {
		_spec.ClearField(contract.FieldGoodID, field.TypeUUID)
	}
	if value, ok := cu.mutation.DelegatedStakingID(); ok {
		_spec.SetField(contract.FieldDelegatedStakingID, field.TypeUUID, value)
	}
	if cu.mutation.DelegatedStakingIDCleared() {
		_spec.ClearField(contract.FieldDelegatedStakingID, field.TypeUUID)
	}
	if value, ok := cu.mutation.AccountID(); ok {
		_spec.SetField(contract.FieldAccountID, field.TypeUUID, value)
	}
	if cu.mutation.AccountIDCleared() {
		_spec.ClearField(contract.FieldAccountID, field.TypeUUID)
	}
	if value, ok := cu.mutation.Backup(); ok {
		_spec.SetField(contract.FieldBackup, field.TypeBool, value)
	}
	if cu.mutation.BackupCleared() {
		_spec.ClearField(contract.FieldBackup, field.TypeBool)
	}
	if value, ok := cu.mutation.ContractOperatorType(); ok {
		_spec.SetField(contract.FieldContractOperatorType, field.TypeString, value)
	}
	if cu.mutation.ContractOperatorTypeCleared() {
		_spec.ClearField(contract.FieldContractOperatorType, field.TypeString)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contract.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ContractUpdateOne is the builder for updating a single Contract entity.
type ContractUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ContractMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (cuo *ContractUpdateOne) SetCreatedAt(u uint32) *ContractUpdateOne {
	cuo.mutation.ResetCreatedAt()
	cuo.mutation.SetCreatedAt(u)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableCreatedAt(u *uint32) *ContractUpdateOne {
	if u != nil {
		cuo.SetCreatedAt(*u)
	}
	return cuo
}

// AddCreatedAt adds u to the "created_at" field.
func (cuo *ContractUpdateOne) AddCreatedAt(u int32) *ContractUpdateOne {
	cuo.mutation.AddCreatedAt(u)
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ContractUpdateOne) SetUpdatedAt(u uint32) *ContractUpdateOne {
	cuo.mutation.ResetUpdatedAt()
	cuo.mutation.SetUpdatedAt(u)
	return cuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cuo *ContractUpdateOne) AddUpdatedAt(u int32) *ContractUpdateOne {
	cuo.mutation.AddUpdatedAt(u)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *ContractUpdateOne) SetDeletedAt(u uint32) *ContractUpdateOne {
	cuo.mutation.ResetDeletedAt()
	cuo.mutation.SetDeletedAt(u)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableDeletedAt(u *uint32) *ContractUpdateOne {
	if u != nil {
		cuo.SetDeletedAt(*u)
	}
	return cuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cuo *ContractUpdateOne) AddDeletedAt(u int32) *ContractUpdateOne {
	cuo.mutation.AddDeletedAt(u)
	return cuo
}

// SetEntID sets the "ent_id" field.
func (cuo *ContractUpdateOne) SetEntID(u uuid.UUID) *ContractUpdateOne {
	cuo.mutation.SetEntID(u)
	return cuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableEntID(u *uuid.UUID) *ContractUpdateOne {
	if u != nil {
		cuo.SetEntID(*u)
	}
	return cuo
}

// SetGoodID sets the "good_id" field.
func (cuo *ContractUpdateOne) SetGoodID(u uuid.UUID) *ContractUpdateOne {
	cuo.mutation.SetGoodID(u)
	return cuo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableGoodID(u *uuid.UUID) *ContractUpdateOne {
	if u != nil {
		cuo.SetGoodID(*u)
	}
	return cuo
}

// ClearGoodID clears the value of the "good_id" field.
func (cuo *ContractUpdateOne) ClearGoodID() *ContractUpdateOne {
	cuo.mutation.ClearGoodID()
	return cuo
}

// SetDelegatedStakingID sets the "delegated_staking_id" field.
func (cuo *ContractUpdateOne) SetDelegatedStakingID(u uuid.UUID) *ContractUpdateOne {
	cuo.mutation.SetDelegatedStakingID(u)
	return cuo
}

// SetNillableDelegatedStakingID sets the "delegated_staking_id" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableDelegatedStakingID(u *uuid.UUID) *ContractUpdateOne {
	if u != nil {
		cuo.SetDelegatedStakingID(*u)
	}
	return cuo
}

// ClearDelegatedStakingID clears the value of the "delegated_staking_id" field.
func (cuo *ContractUpdateOne) ClearDelegatedStakingID() *ContractUpdateOne {
	cuo.mutation.ClearDelegatedStakingID()
	return cuo
}

// SetAccountID sets the "account_id" field.
func (cuo *ContractUpdateOne) SetAccountID(u uuid.UUID) *ContractUpdateOne {
	cuo.mutation.SetAccountID(u)
	return cuo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableAccountID(u *uuid.UUID) *ContractUpdateOne {
	if u != nil {
		cuo.SetAccountID(*u)
	}
	return cuo
}

// ClearAccountID clears the value of the "account_id" field.
func (cuo *ContractUpdateOne) ClearAccountID() *ContractUpdateOne {
	cuo.mutation.ClearAccountID()
	return cuo
}

// SetBackup sets the "backup" field.
func (cuo *ContractUpdateOne) SetBackup(b bool) *ContractUpdateOne {
	cuo.mutation.SetBackup(b)
	return cuo
}

// SetNillableBackup sets the "backup" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableBackup(b *bool) *ContractUpdateOne {
	if b != nil {
		cuo.SetBackup(*b)
	}
	return cuo
}

// ClearBackup clears the value of the "backup" field.
func (cuo *ContractUpdateOne) ClearBackup() *ContractUpdateOne {
	cuo.mutation.ClearBackup()
	return cuo
}

// SetContractOperatorType sets the "contract_operator_type" field.
func (cuo *ContractUpdateOne) SetContractOperatorType(s string) *ContractUpdateOne {
	cuo.mutation.SetContractOperatorType(s)
	return cuo
}

// SetNillableContractOperatorType sets the "contract_operator_type" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableContractOperatorType(s *string) *ContractUpdateOne {
	if s != nil {
		cuo.SetContractOperatorType(*s)
	}
	return cuo
}

// ClearContractOperatorType clears the value of the "contract_operator_type" field.
func (cuo *ContractUpdateOne) ClearContractOperatorType() *ContractUpdateOne {
	cuo.mutation.ClearContractOperatorType()
	return cuo
}

// Mutation returns the ContractMutation object of the builder.
func (cuo *ContractUpdateOne) Mutation() *ContractMutation {
	return cuo.mutation
}

// Where appends a list predicates to the ContractUpdate builder.
func (cuo *ContractUpdateOne) Where(ps ...predicate.Contract) *ContractUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ContractUpdateOne) Select(field string, fields ...string) *ContractUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Contract entity.
func (cuo *ContractUpdateOne) Save(ctx context.Context) (*Contract, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ContractUpdateOne) SaveX(ctx context.Context) *Contract {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ContractUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ContractUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ContractUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := contract.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *ContractUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ContractUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *ContractUpdateOne) sqlSave(ctx context.Context) (_node *Contract, err error) {
	_spec := sqlgraph.NewUpdateSpec(contract.Table, contract.Columns, sqlgraph.NewFieldSpec(contract.FieldID, field.TypeUint32))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Contract.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contract.FieldID)
		for _, f := range fields {
			if !contract.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != contract.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(contract.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(contract.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(contract.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(contract.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(contract.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(contract.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.EntID(); ok {
		_spec.SetField(contract.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := cuo.mutation.GoodID(); ok {
		_spec.SetField(contract.FieldGoodID, field.TypeUUID, value)
	}
	if cuo.mutation.GoodIDCleared() {
		_spec.ClearField(contract.FieldGoodID, field.TypeUUID)
	}
	if value, ok := cuo.mutation.DelegatedStakingID(); ok {
		_spec.SetField(contract.FieldDelegatedStakingID, field.TypeUUID, value)
	}
	if cuo.mutation.DelegatedStakingIDCleared() {
		_spec.ClearField(contract.FieldDelegatedStakingID, field.TypeUUID)
	}
	if value, ok := cuo.mutation.AccountID(); ok {
		_spec.SetField(contract.FieldAccountID, field.TypeUUID, value)
	}
	if cuo.mutation.AccountIDCleared() {
		_spec.ClearField(contract.FieldAccountID, field.TypeUUID)
	}
	if value, ok := cuo.mutation.Backup(); ok {
		_spec.SetField(contract.FieldBackup, field.TypeBool, value)
	}
	if cuo.mutation.BackupCleared() {
		_spec.ClearField(contract.FieldBackup, field.TypeBool)
	}
	if value, ok := cuo.mutation.ContractOperatorType(); ok {
		_spec.SetField(contract.FieldContractOperatorType, field.TypeString, value)
	}
	if cuo.mutation.ContractOperatorTypeCleared() {
		_spec.ClearField(contract.FieldContractOperatorType, field.TypeString)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Contract{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contract.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/user"
	"github.com/google/uuid"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(u uint32) *UserCreate {
	uc.mutation.SetCreatedAt(u)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(u *uint32) *UserCreate {
	if u != nil {
		uc.SetCreatedAt(*u)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UserCreate) SetUpdatedAt(u uint32) *UserCreate {
	uc.mutation.SetUpdatedAt(u)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedAt(u *uint32) *UserCreate {
	if u != nil {
		uc.SetUpdatedAt(*u)
	}
	return uc
}

// SetDeletedAt sets the "deleted_at" field.
func (uc *UserCreate) SetDeletedAt(u uint32) *UserCreate {
	uc.mutation.SetDeletedAt(u)
	return uc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableDeletedAt(u *uint32) *UserCreate {
	if u != nil {
		uc.SetDeletedAt(*u)
	}
	return uc
}

// SetEntID sets the "ent_id" field.
func (uc *UserCreate) SetEntID(u uuid.UUID) *UserCreate {
	uc.mutation.SetEntID(u)
	return uc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableEntID(u *uuid.UUID) *UserCreate {
	if u != nil {
		uc.SetEntID(*u)
	}
	return uc
}

// SetAppID sets the "app_id" field.
func (uc *UserCreate) SetAppID(u uuid.UUID) *UserCreate {
	uc.mutation.SetAppID(u)
	return uc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableAppID(u *uuid.UUID) *UserCreate {
	if u != nil {
		uc.SetAppID(*u)
	}
	return uc
}

// SetUserID sets the "user_id" field.
func (uc *UserCreate) SetUserID(u uuid.UUID) *UserCreate {
	uc.mutation.SetUserID(u)
	return uc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableUserID(u *uuid.UUID) *UserCreate {
	if u != nil {
		uc.SetUserID(*u)
	}
	return uc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (uc *UserCreate) SetCoinTypeID(u uuid.UUID) *UserCreate {
	uc.mutation.SetCoinTypeID(u)
	return uc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableCoinTypeID(u *uuid.UUID) *UserCreate {
	if u != nil {
		uc.SetCoinTypeID(*u)
	}
	return uc
}

// SetAccountID sets the "account_id" field.
func (uc *UserCreate) SetAccountID(u uuid.UUID) *UserCreate {
	uc.mutation.SetAccountID(u)
	return uc
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableAccountID(u *uuid.UUID) *UserCreate {
	if u != nil {
		uc.SetAccountID(*u)
	}
	return uc
}

// SetUsedFor sets the "used_for" field.
func (uc *UserCreate) SetUsedFor(s string) *UserCreate {
	uc.mutation.SetUsedFor(s)
	return uc
}

// SetNillableUsedFor sets the "used_for" field if the given value is not nil.
func (uc *UserCreate) SetNillableUsedFor(s *string) *UserCreate {
	if s != nil {
		uc.SetUsedFor(*s)
	}
	return uc
}

// SetLabels sets the "labels" field.
func (uc *UserCreate) SetLabels(s []string) *UserCreate {
	uc.mutation.SetLabels(s)
	return uc
}

// SetMemo sets the "memo" field.
func (uc *UserCreate) SetMemo(s string) *UserCreate {
	uc.mutation.SetMemo(s)
	return uc
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (uc *UserCreate) SetNillableMemo(s *string) *UserCreate {
	if s != nil {
		uc.SetMemo(*s)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(u uint32) *UserCreate {
	uc.mutation.SetID(u)
	return uc
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		v := user.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uc.mutation.DeletedAt(); !ok {
		v := user.DefaultDeletedAt()
		uc.mutation.SetDeletedAt(v)
	}
	if _, ok := uc.mutation.EntID(); !ok {
		v := user.DefaultEntID()
		uc.mutation.SetEntID(v)
	}
	if _, ok := uc.mutation.AppID(); !ok {
		v := user.DefaultAppID()
		uc.mutation.SetAppID(v)
	}
	if _, ok := uc.mutation.UserID(); !ok {
		v := user.DefaultUserID()
		uc.mutation.SetUserID(v)
	}
	if _, ok := uc.mutation.CoinTypeID(); !ok {
		v := user.DefaultCoinTypeID()
		uc.mutation.SetCoinTypeID(v)
	}
	if _, ok := uc.mutation.AccountID(); !ok {
		v := user.DefaultAccountID()
		uc.mutation.SetAccountID(v)
	}
	if _, ok := uc.mutation.UsedFor(); !ok {
		v := user.DefaultUsedFor
		uc.mutation.SetUsedFor(v)
	}
	if _, ok := uc.mutation.Labels(); !ok {
		v := user.DefaultLabels
		uc.mutation.SetLabels(v)
	}
	if _, ok := uc.mutation.Memo(); !ok {
		v := user.DefaultMemo
		uc.mutation.SetMemo(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "User.created_at"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "User.updated_at"`)}
	}
	if _, ok := uc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "User.deleted_at"`)}
	}
	if _, ok := uc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "User.ent_id"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = uc.conflict
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := uc.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := uc.mutation.EntID(); ok {
		_spec.SetField(user.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := uc.mutation.AppID(); ok {
		_spec.SetField(user.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := uc.mutation.UserID(); ok {
		_spec.SetField(user.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := uc.mutation.CoinTypeID(); ok {
		_spec.SetField(user.FieldCoinTypeID, field.TypeUUID, value)
		_node.CoinTypeID = value
	}
	if value, ok := uc.mutation.AccountID(); ok {
		_spec.SetField(user.FieldAccountID, field.TypeUUID, value)
		_node.AccountID = value
	}
	if value, ok := uc.mutation.UsedFor(); ok {
		_spec.SetField(user.FieldUsedFor, field.TypeString, value)
		_node.UsedFor = value
	}
	if value, ok := uc.mutation.Labels(); ok {
		_spec.SetField(user.FieldLabels, field.TypeJSON, value)
		_node.Labels = value
	}
	if value, ok := uc.mutation.Memo(); ok {
		_spec.SetField(user.FieldMemo, field.TypeString, value)
		_node.Memo = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (uc *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	uc.conflict = opts
	return &UserUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: uc,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *UserUpsert) SetCreatedAt(v uint32) *UserUpsert {
	u.Set(user.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateCreatedAt() *UserUpsert {
	u.SetExcluded(user.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *UserUpsert) AddCreatedAt(v uint32) *UserUpsert {
	u.Add(user.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsert) SetUpdatedAt(v uint32) *UserUpsert {
	u.Set(user.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateUpdatedAt() *UserUpsert {
	u.SetExcluded(user.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *UserUpsert) AddUpdatedAt(v uint32) *UserUpsert {
	u.Add(user.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserUpsert) SetDeletedAt(v uint32) *UserUpsert {
	u.Set(user.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateDeletedAt() *UserUpsert {
	u.SetExcluded(user.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *UserUpsert) AddDeletedAt(v uint32) *UserUpsert {
	u.Add(user.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *UserUpsert) SetEntID(v uuid.UUID) *UserUpsert {
	u.Set(user.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateEntID() *UserUpsert {
	u.SetExcluded(user.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *UserUpsert) SetAppID(v uuid.UUID) *UserUpsert {
	u.Set(user.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateAppID() *UserUpsert {
	u.SetExcluded(user.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *UserUpsert) ClearAppID() *UserUpsert {
	u.SetNull(user.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserUpsert) SetUserID(v uuid.UUID) *UserUpsert {
	u.Set(user.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateUserID() *UserUpsert {
	u.SetExcluded(user.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *UserUpsert) ClearUserID() *UserUpsert {
	u.SetNull(user.FieldUserID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *UserUpsert) SetCoinTypeID(v uuid.UUID) *UserUpsert {
	u.Set(user.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateCoinTypeID() *UserUpsert {
	u.SetExcluded(user.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *UserUpsert) ClearCoinTypeID() *UserUpsert {
	u.SetNull(user.FieldCoinTypeID)
	return u
}

// SetAccountID sets the "account_id" field.
func (u *UserUpsert) SetAccountID(v uuid.UUID) *UserUpsert {
	u.Set(user.FieldAccountID, v)
	return u
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateAccountID() *UserUpsert {
	u.SetExcluded(user.FieldAccountID)
	return u
}

// ClearAccountID clears the value of the "account_id" field.
func (u *UserUpsert) ClearAccountID() *UserUpsert {
	u.SetNull(user.FieldAccountID)
	return u
}

// SetUsedFor sets the "used_for" field.
func (u *UserUpsert) SetUsedFor(v string) *UserUpsert {
	u.Set(user.FieldUsedFor, v)
	return u
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *UserUpsert) UpdateUsedFor() *UserUpsert {
	u.SetExcluded(user.FieldUsedFor)
	return u
}

// ClearUsedFor clears the value of the "used_for" field.
func (u *UserUpsert) ClearUsedFor() *UserUpsert {
	u.SetNull(user.FieldUsedFor)
	return u
}

// SetLabels sets the "labels" field.
func (u *UserUpsert) SetLabels(v []string) *UserUpsert {
	u.Set(user.FieldLabels, v)
	return u
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *UserUpsert) UpdateLabels() *UserUpsert {
	u.SetExcluded(user.FieldLabels)
	return u
}

// ClearLabels clears the value of the "labels" field.
func (u *UserUpsert) ClearLabels() *UserUpsert {
	u.SetNull(user.FieldLabels)
	return u
}

// SetMemo sets the "memo" field.
func (u *UserUpsert) SetMemo(v string) *UserUpsert {
	u.Set(user.FieldMemo, v)
	return u
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *UserUpsert) UpdateMemo() *UserUpsert {
	u.SetExcluded(user.FieldMemo)
	return u
}

// ClearMemo clears the value of the "memo" field.
func (u *UserUpsert) ClearMemo() *UserUpsert {
	u.SetNull(user.FieldMemo)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(user.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *UserUpsertOne) SetCreatedAt(v uint32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *UserUpsertOne) AddCreatedAt(v uint32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateCreatedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertOne) SetUpdatedAt(v uint32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *UserUpsertOne) AddUpdatedAt(v uint32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUpdatedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserUpsertOne) SetDeletedAt(v uint32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *UserUpsertOne) AddDeletedAt(v uint32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateDeletedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *UserUpsertOne) SetEntID(v uuid.UUID) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEntID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *UserUpsertOne) SetAppID(v uuid.UUID) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateAppID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *UserUpsertOne) ClearAppID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserUpsertOne) SetUserID(v uuid.UUID) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUserID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *UserUpsertOne) ClearUserID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearUserID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *UserUpsertOne) SetCoinTypeID(v uuid.UUID) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateCoinTypeID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *UserUpsertOne) ClearCoinTypeID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *UserUpsertOne) SetAccountID(v uuid.UUID) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateAccountID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAccountID()
	})
}

// ClearAccountID clears the value of the "account_id" field.
func (u *UserUpsertOne) ClearAccountID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearAccountID()
	})
}

// SetUsedFor sets the "used_for" field.
func (u *UserUpsertOne) SetUsedFor(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUsedFor(v)
	})
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUsedFor() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUsedFor()
	})
}

// ClearUsedFor clears the value of the "used_for" field.
func (u *UserUpsertOne) ClearUsedFor() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearUsedFor()
	})
}

// SetLabels sets the "labels" field.
func (u *UserUpsertOne) SetLabels(v []string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLabels() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *UserUpsertOne) ClearLabels() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLabels()
	})
}

// SetMemo sets the "memo" field.
func (u *UserUpsertOne) SetMemo(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateMemo() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateMemo()
	})
}

// ClearMemo clears the value of the "memo" field.
func (u *UserUpsertOne) ClearMemo() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearMemo()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	ucb.conflict = opts
	return &UserUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: ucb,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(user.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *UserUpsertBulk) SetCreatedAt(v uint32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *UserUpsertBulk) AddCreatedAt(v uint32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateCreatedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertBulk) SetUpdatedAt(v uint32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *UserUpsertBulk) AddUpdatedAt(v uint32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUpdatedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserUpsertBulk) SetDeletedAt(v uint32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *UserUpsertBulk) AddDeletedAt(v uint32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateDeletedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *UserUpsertBulk) SetEntID(v uuid.UUID) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEntID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *UserUpsertBulk) SetAppID(v uuid.UUID) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateAppID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *UserUpsertBulk) ClearAppID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserUpsertBulk) SetUserID(v uuid.UUID) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUserID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *UserUpsertBulk) ClearUserID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearUserID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *UserUpsertBulk) SetCoinTypeID(v uuid.UUID) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateCoinTypeID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *UserUpsertBulk) ClearCoinTypeID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *UserUpsertBulk) SetAccountID(v uuid.UUID) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateAccountID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAccountID()
	})
}

// ClearAccountID clears the value of the "account_id" field.
func (u *UserUpsertBulk) ClearAccountID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearAccountID()
	})
}

// SetUsedFor sets the "used_for" field.
func (u *UserUpsertBulk) SetUsedFor(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUsedFor(v)
	})
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUsedFor() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUsedFor()
	})
}

// ClearUsedFor clears the value of the "used_for" field.
func (u *UserUpsertBulk) ClearUsedFor() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearUsedFor()
	})
}

// SetLabels sets the "labels" field.
func (u *UserUpsertBulk) SetLabels(v []string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLabels() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *UserUpsertBulk) ClearLabels() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLabels()
	})
}

// SetMemo sets the "memo" field.
func (u *UserUpsertBulk) SetMemo(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateMemo() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateMemo()
	})
}

// ClearMemo clears the value of the "memo" field.
func (u *UserUpsertBulk) ClearMemo() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearMemo()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/account"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/contract"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/deposit"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/goodbenefit"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/orderbenefit"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/payment"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/platform"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/transfer"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/user"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Account is the client for interacting with the Account builders.
	Account *AccountClient
	// Contract is the client for interacting with the Contract builders.
	Contract *ContractClient
	// Deposit is the client for interacting with the Deposit builders.
	Deposit *DepositClient
	// GoodBenefit is the client for interacting with the GoodBenefit builders.
	GoodBenefit *GoodBenefitClient
	// OrderBenefit is the client for interacting with the OrderBenefit builders.
	OrderBenefit *OrderBenefitClient
	// Payment is the client for interacting with the Payment builders.
	Payment *PaymentClient
	// Platform is the client for interacting with the Platform builders.
	Platform *PlatformClient
	// Transfer is the client for interacting with the Transfer builders.
	Transfer *TransferClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Account = NewAccountClient(c.config)
	c.Contract = NewContractClient(c.config)
	c.Deposit = NewDepositClient(c.config)
	c.GoodBenefit = NewGoodBenefitClient(c.config)
	c.OrderBenefit = NewOrderBenefitClient(c.config)
	c.Payment = NewPaymentClient(c.config)
	c.Platform = NewPlatformClient(c.config)
	c.Transfer = NewTransferClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("generated: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("generated: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Account:      NewAccountClient(cfg),
		Contract:     NewContractClient(cfg),
		Deposit:      NewDepositClient(cfg),
		GoodBenefit:  NewGoodBenefitClient(cfg),
		OrderBenefit: NewOrderBenefitClient(cfg),
		Payment:      NewPaymentClient(cfg),
		Platform:     NewPlatformClient(cfg),
		Transfer:     NewTransferClient(cfg),
		User:         NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Account:      NewAccountClient(cfg),
		Contract:     NewContractClient(cfg),
		Deposit:      NewDepositClient(cfg),
		GoodBenefit:  NewGoodBenefitClient(cfg),
		OrderBenefit: NewOrderBenefitClient(cfg),
		Payment:      NewPaymentClient(cfg),
		Platform:     NewPlatformClient(cfg),
		Transfer:     NewTransferClient(cfg),
		User:         NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Account.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Account, c.Contract, c.Deposit, c.GoodBenefit, c.OrderBenefit, c.Payment,
		c.Platform, c.Transfer, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Account, c.Contract, c.Deposit, c.GoodBenefit, c.OrderBenefit, c.Payment,
		c.Platform, c.Transfer, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AccountMutation:
		return c.Account.mutate(ctx, m)
	case *ContractMutation:
		return c.Contract.mutate(ctx, m)
	case *DepositMutation:
		return c.Deposit.mutate(ctx, m)
	case *GoodBenefitMutation:
		return c.GoodBenefit.mutate(ctx, m)
	case *OrderBenefitMutation:
		return c.OrderBenefit.mutate(ctx, m)
	case *PaymentMutation:
		return c.Payment.mutate(ctx, m)
	case *PlatformMutation:
		return c.Platform.mutate(ctx, m)
	case *TransferMutation:
		return c.Transfer.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("generated: unknown mutation type %T", m)
	}
}

// AccountClient is a client for the Account schema.
type AccountClient struct {
	config
}

// NewAccountClient returns a client for the Account from the given config.
func NewAccountClient(c config) *AccountClient {
	return &AccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `account.Hooks(f(g(h())))`.
func (c *AccountClient) Use(hooks ...Hook) {
	c.hooks.Account = append(c.hooks.Account, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `account.Intercept(f(g(h())))`.
func (c *AccountClient) Intercept(interceptors ...Interceptor) {
	c.inters.Account = append(c.inters.Account, interceptors...)
}

// Create returns a builder for creating a Account entity.
func (c *AccountClient) Create() *AccountCreate {
	mutation := newAccountMutation(c.config, OpCreate)
	return &AccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Account entities.
func (c *AccountClient) CreateBulk(builders ...*AccountCreate) *AccountCreateBulk {
	return &AccountCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AccountClient) MapCreateBulk(slice any, setFunc func(*AccountCreate, int)) *AccountCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AccountCreateBulk{err: fmt.Errorf("calling to AccountClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AccountCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Account.
func (c *AccountClient) Update() *AccountUpdate {
	mutation := newAccountMutation(c.config, OpUpdate)
	return &AccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccountClient) UpdateOne(a *Account) *AccountUpdateOne {
	mutation := newAccountMutation(c.config, OpUpdateOne, withAccount(a))
	return &AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccountClient) UpdateOneID(id uint32) *AccountUpdateOne {
	mutation := newAccountMutation(c.config, OpUpdateOne, withAccountID(id))
	return &AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Account.
func (c *AccountClient) Delete() *AccountDelete {
	mutation := newAccountMutation(c.config, OpDelete)
	return &AccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AccountClient) DeleteOne(a *Account) *AccountDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AccountClient) DeleteOneID(id uint32) *AccountDeleteOne {
	builder := c.Delete().Where(account.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccountDeleteOne{builder}
}

// Query returns a query builder for Account.
func (c *AccountClient) Query() *AccountQuery {
	return &AccountQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAccount},
		inters: c.Interceptors(),
	}
}

// Get returns a Account entity by its id.
func (c *AccountClient) Get(ctx context.Context, id uint32) (*Account, error) {
	return c.Query().Where(account.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccountClient) GetX(ctx context.Context, id uint32) *Account {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AccountClient) Hooks() []Hook {
	return c.hooks.Account
}

// Interceptors returns the client interceptors.
func (c *AccountClient) Interceptors() []Interceptor {
	return c.inters.Account
}

func (c *AccountClient) mutate(ctx context.Context, m *AccountMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AccountCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AccountUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AccountDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Account mutation op: %q", m.Op())
	}
}

// ContractClient is a client for the Contract schema.
type ContractClient struct {
	config
}

// NewContractClient returns a client for the Contract from the given config.
func NewContractClient(c config) *ContractClient {
	return &ContractClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `contract.Hooks(f(g(h())))`.
func (c *ContractClient) Use(hooks ...Hook) {
	c.hooks.Contract = append(c.hooks.Contract, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `contract.Intercept(f(g(h())))`.
func (c *ContractClient) Intercept(interceptors ...Interceptor) {
	c.inters.Contract = append(c.inters.Contract, interceptors...)
}

// Create returns a builder for creating a Contract entity.
func (c *ContractClient) Create() *ContractCreate {
	mutation := newContractMutation(c.config, OpCreate)
	return &ContractCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Contract entities.
func (c *ContractClient) CreateBulk(builders ...*ContractCreate) *ContractCreateBulk {
	return &ContractCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ContractClient) MapCreateBulk(slice any, setFunc func(*ContractCreate, int)) *ContractCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ContractCreateBulk{err: fmt.Errorf("calling to ContractClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ContractCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ContractCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Contract.
func (c *ContractClient) Update() *ContractUpdate {
	mutation := newContractMutation(c.config, OpUpdate)
	return &ContractUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContractClient) UpdateOne(co *Contract) *ContractUpdateOne {
	mutation := newContractMutation(c.config, OpUpdateOne, withContract(co))
	return &ContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContractClient) UpdateOneID(id uint32) *ContractUpdateOne {
	mutation := newContractMutation(c.config, OpUpdateOne, withContractID(id))
	return &ContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Contract.
func (c *ContractClient) Delete() *ContractDelete {
	mutation := newContractMutation(c.config, OpDelete)
	return &ContractDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ContractClient) DeleteOne(co *Contract) *ContractDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ContractClient) DeleteOneID(id uint32) *ContractDeleteOne {
	builder := c.Delete().Where(contract.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContractDeleteOne{builder}
}

// Query returns a query builder for Contract.
func (c *ContractClient) Query() *ContractQuery {
	return &ContractQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeContract},
		inters: c.Interceptors(),
	}
}

// Get returns a Contract entity by its id.
func (c *ContractClient) Get(ctx context.Context, id uint32) (*Contract, error) {
	return c.Query().Where(contract.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContractClient) GetX(ctx context.Context, id uint32) *Contract {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ContractClient) Hooks() []Hook {
	return c.hooks.Contract
}

// Interceptors returns the client interceptors.
func (c *ContractClient) Interceptors() []Interceptor {
	return c.inters.Contract
}

func (c *ContractClient) mutate(ctx context.Context, m *ContractMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ContractCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ContractUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ContractDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Contract mutation op: %q", m.Op())
	}
}

// DepositClient is a client for the Deposit schema.
type DepositClient struct {
	config
}

// NewDepositClient returns a client for the Deposit from the given config.
func NewDepositClient(c config) *DepositClient {
	return &DepositClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deposit.Hooks(f(g(h())))`.
func (c *DepositClient) Use(hooks ...Hook) {
	c.hooks.Deposit = append(c.hooks.Deposit, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deposit.Intercept(f(g(h())))`.
func (c *DepositClient) Intercept(interceptors ...Interceptor) {
	c.inters.Deposit = append(c.inters.Deposit, interceptors...)
}

// Create returns a builder for creating a Deposit entity.
func (c *DepositClient) Create() *DepositCreate {
	mutation := newDepositMutation(c.config, OpCreate)
	return &DepositCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Deposit entities.
func (c *DepositClient) CreateBulk(builders ...*DepositCreate) *DepositCreateBulk {
	return &DepositCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DepositClient) MapCreateBulk(slice any, setFunc func(*DepositCreate, int)) *DepositCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DepositCreateBulk{err: fmt.Errorf("calling to DepositClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DepositCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DepositCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Deposit.
func (c *DepositClient) Update() *DepositUpdate {
	mutation := newDepositMutation(c.config, OpUpdate)
	return &DepositUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DepositClient) UpdateOne(d *Deposit) *DepositUpdateOne {
	mutation := newDepositMutation(c.config, OpUpdateOne, withDeposit(d))
	return &DepositUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DepositClient) UpdateOneID(id uint32) *DepositUpdateOne {
	mutation := newDepositMutation(c.config, OpUpdateOne, withDepositID(id))
	return &DepositUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Deposit.
func (c *DepositClient) Delete() *DepositDelete {
	mutation := newDepositMutation(c.config, OpDelete)
	return &DepositDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DepositClient) DeleteOne(d *Deposit) *DepositDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DepositClient) DeleteOneID(id uint32) *DepositDeleteOne {
	builder := c.Delete().Where(deposit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DepositDeleteOne{builder}
}

// Query returns a query builder for Deposit.
func (c *DepositClient) Query() *DepositQuery {
	return &DepositQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeposit},
		inters: c.Interceptors(),
	}
}

// Get returns a Deposit entity by its id.
func (c *DepositClient) Get(ctx context.Context, id uint32) (*Deposit, error) {
	return c.Query().Where(deposit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DepositClient) GetX(ctx context.Context, id uint32) *Deposit {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DepositClient) Hooks() []Hook {
	return c.hooks.Deposit
}

// Interceptors returns the client interceptors.
func (c *DepositClient) Interceptors() []Interceptor {
	return c.inters.Deposit
}

func (c *DepositClient) mutate(ctx context.Context, m *DepositMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DepositCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DepositUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DepositUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DepositDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Deposit mutation op: %q", m.Op())
	}
}

// GoodBenefitClient is a client for the GoodBenefit schema.
type GoodBenefitClient struct {
	config
}

// NewGoodBenefitClient returns a client for the GoodBenefit from the given config.
func NewGoodBenefitClient(c config) *GoodBenefitClient {
	return &GoodBenefitClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goodbenefit.Hooks(f(g(h())))`.
func (c *GoodBenefitClient) Use(hooks ...Hook) {
	c.hooks.GoodBenefit = append(c.hooks.GoodBenefit, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `goodbenefit.Intercept(f(g(h())))`.
func (c *GoodBenefitClient) Intercept(interceptors ...Interceptor) {
	c.inters.GoodBenefit = append(c.inters.GoodBenefit, interceptors...)
}

// Create returns a builder for creating a GoodBenefit entity.
func (c *GoodBenefitClient) Create() *GoodBenefitCreate {
	mutation := newGoodBenefitMutation(c.config, OpCreate)
	return &GoodBenefitCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoodBenefit entities.
func (c *GoodBenefitClient) CreateBulk(builders ...*GoodBenefitCreate) *GoodBenefitCreateBulk {
	return &GoodBenefitCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GoodBenefitClient) MapCreateBulk(slice any, setFunc func(*GoodBenefitCreate, int)) *GoodBenefitCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GoodBenefitCreateBulk{err: fmt.Errorf("calling to GoodBenefitClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GoodBenefitCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GoodBenefitCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoodBenefit.
func (c *GoodBenefitClient) Update() *GoodBenefitUpdate {
	mutation := newGoodBenefitMutation(c.config, OpUpdate)
	return &GoodBenefitUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodBenefitClient) UpdateOne(gb *GoodBenefit) *GoodBenefitUpdateOne {
	mutation := newGoodBenefitMutation(c.config, OpUpdateOne, withGoodBenefit(gb))
	return &GoodBenefitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodBenefitClient) UpdateOneID(id uint32) *GoodBenefitUpdateOne {
	mutation := newGoodBenefitMutation(c.config, OpUpdateOne, withGoodBenefitID(id))
	return &GoodBenefitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoodBenefit.
func (c *GoodBenefitClient) Delete() *GoodBenefitDelete {
	mutation := newGoodBenefitMutation(c.config, OpDelete)
	return &GoodBenefitDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GoodBenefitClient) DeleteOne(gb *GoodBenefit) *GoodBenefitDeleteOne {
	return c.DeleteOneID(gb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GoodBenefitClient) DeleteOneID(id uint32) *GoodBenefitDeleteOne {
	builder := c.Delete().Where(goodbenefit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodBenefitDeleteOne{builder}
}

// Query returns a query builder for GoodBenefit.
func (c *GoodBenefitClient) Query() *GoodBenefitQuery {
	return &GoodBenefitQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGoodBenefit},
		inters: c.Interceptors(),
	}
}

// Get returns a GoodBenefit entity by its id.
func (c *GoodBenefitClient) Get(ctx context.Context, id uint32) (*GoodBenefit, error) {
	return c.Query().Where(goodbenefit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodBenefitClient) GetX(ctx context.Context, id uint32) *GoodBenefit {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GoodBenefitClient) Hooks() []Hook {
	return c.hooks.GoodBenefit
}

// Interceptors returns the client interceptors.
func (c *GoodBenefitClient) Interceptors() []Interceptor {
	return c.inters.GoodBenefit
}

func (c *GoodBenefitClient) mutate(ctx context.Context, m *GoodBenefitMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GoodBenefitCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GoodBenefitUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GoodBenefitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GoodBenefitDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown GoodBenefit mutation op: %q", m.Op())
	}
}

// OrderBenefitClient is a client for the OrderBenefit schema.
type OrderBenefitClient struct {
	config
}

// NewOrderBenefitClient returns a client for the OrderBenefit from the given config.
func NewOrderBenefitClient(c config) *OrderBenefitClient {
	return &OrderBenefitClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderbenefit.Hooks(f(g(h())))`.
func (c *OrderBenefitClient) Use(hooks ...Hook) {
	c.hooks.OrderBenefit = append(c.hooks.OrderBenefit, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `orderbenefit.Intercept(f(g(h())))`.
func (c *OrderBenefitClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderBenefit = append(c.inters.OrderBenefit, interceptors...)
}

// Create returns a builder for creating a OrderBenefit entity.
func (c *OrderBenefitClient) Create() *OrderBenefitCreate {
	mutation := newOrderBenefitMutation(c.config, OpCreate)
	return &OrderBenefitCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderBenefit entities.
func (c *OrderBenefitClient) CreateBulk(builders ...*OrderBenefitCreate) *OrderBenefitCreateBulk {
	return &OrderBenefitCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderBenefitClient) MapCreateBulk(slice any, setFunc func(*OrderBenefitCreate, int)) *OrderBenefitCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderBenefitCreateBulk{err: fmt.Errorf("calling to OrderBenefitClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderBenefitCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderBenefitCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderBenefit.
func (c *OrderBenefitClient) Update() *OrderBenefitUpdate {
	mutation := newOrderBenefitMutation(c.config, OpUpdate)
	return &OrderBenefitUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderBenefitClient) UpdateOne(ob *OrderBenefit) *OrderBenefitUpdateOne {
	mutation := newOrderBenefitMutation(c.config, OpUpdateOne, withOrderBenefit(ob))
	return &OrderBenefitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderBenefitClient) UpdateOneID(id uint32) *OrderBenefitUpdateOne {
	mutation := newOrderBenefitMutation(c.config, OpUpdateOne, withOrderBenefitID(id))
	return &OrderBenefitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderBenefit.
func (c *OrderBenefitClient) Delete() *OrderBenefitDelete {
	mutation := newOrderBenefitMutation(c.config, OpDelete)
	return &OrderBenefitDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderBenefitClient) DeleteOne(ob *OrderBenefit) *OrderBenefitDeleteOne {
	return c.DeleteOneID(ob.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderBenefitClient) DeleteOneID(id uint32) *OrderBenefitDeleteOne {
	builder := c.Delete().Where(orderbenefit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderBenefitDeleteOne{builder}
}

// Query returns a query builder for OrderBenefit.
func (c *OrderBenefitClient) Query() *OrderBenefitQuery {
	return &OrderBenefitQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderBenefit},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderBenefit entity by its id.
func (c *OrderBenefitClient) Get(ctx context.Context, id uint32) (*OrderBenefit, error) {
	return c.Query().Where(orderbenefit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderBenefitClient) GetX(ctx context.Context, id uint32) *OrderBenefit {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderBenefitClient) Hooks() []Hook {
	return c.hooks.OrderBenefit
}

// Interceptors returns the client interceptors.
func (c *OrderBenefitClient) Interceptors() []Interceptor {
	return c.inters.OrderBenefit
}

func (c *OrderBenefitClient) mutate(ctx context.Context, m *OrderBenefitMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderBenefitCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderBenefitUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderBenefitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderBenefitDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown OrderBenefit mutation op: %q", m.Op())
	}
}

// PaymentClient is a client for the Payment schema.
type PaymentClient struct {
	config
}

// NewPaymentClient returns a client for the Payment from the given config.
func NewPaymentClient(c config) *PaymentClient {
	return &PaymentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `payment.Hooks(f(g(h())))`.
func (c *PaymentClient) Use(hooks ...Hook) {
	c.hooks.Payment = append(c.hooks.Payment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `payment.Intercept(f(g(h())))`.
func (c *PaymentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Payment = append(c.inters.Payment, interceptors...)
}

// Create returns a builder for creating a Payment entity.
func (c *PaymentClient) Create() *PaymentCreate {
	mutation := newPaymentMutation(c.config, OpCreate)
	return &PaymentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Payment entities.
func (c *PaymentClient) CreateBulk(builders ...*PaymentCreate) *PaymentCreateBulk {
	return &PaymentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PaymentClient) MapCreateBulk(slice any, setFunc func(*PaymentCreate, int)) *PaymentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PaymentCreateBulk{err: fmt.Errorf("calling to PaymentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PaymentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PaymentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Payment.
func (c *PaymentClient) Update() *PaymentUpdate {
	mutation := newPaymentMutation(c.config, OpUpdate)
	return &PaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentClient) UpdateOne(pa *Payment) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPayment(pa))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentClient) UpdateOneID(id uint32) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPaymentID(id))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Payment.
func (c *PaymentClient) Delete() *PaymentDelete {
	mutation := newPaymentMutation(c.config, OpDelete)
	return &PaymentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentClient) DeleteOne(pa *Payment) *PaymentDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentClient) DeleteOneID(id uint32) *PaymentDeleteOne {
	builder := c.Delete().Where(payment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentDeleteOne{builder}
}

// Query returns a query builder for Payment.
func (c *PaymentClient) Query() *PaymentQuery {
	return &PaymentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePayment},
		inters: c.Interceptors(),
	}
}

// Get returns a Payment entity by its id.
func (c *PaymentClient) Get(ctx context.Context, id uint32) (*Payment, error) {
	return c.Query().Where(payment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentClient) GetX(ctx context.Context, id uint32) *Payment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PaymentClient) Hooks() []Hook {
	return c.hooks.Payment
}

// Interceptors returns the client interceptors.
func (c *PaymentClient) Interceptors() []Interceptor {
	return c.inters.Payment
}

func (c *PaymentClient) mutate(ctx context.Context, m *PaymentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Payment mutation op: %q", m.Op())
	}
}

// PlatformClient is a client for the Platform schema.
type PlatformClient struct {
	config
}

// NewPlatformClient returns a client for the Platform from the given config.
func NewPlatformClient(c config) *PlatformClient {
	return &PlatformClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `platform.Hooks(f(g(h())))`.
func (c *PlatformClient) Use(hooks ...Hook) {
	c.hooks.Platform = append(c.hooks.Platform, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `platform.Intercept(f(g(h())))`.
func (c *PlatformClient) Intercept(interceptors ...Interceptor) {
	c.inters.Platform = append(c.inters.Platform, interceptors...)
}

// Create returns a builder for creating a Platform entity.
func (c *PlatformClient) Create() *PlatformCreate {
	mutation := newPlatformMutation(c.config, OpCreate)
	return &PlatformCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Platform entities.
func (c *PlatformClient) CreateBulk(builders ...*PlatformCreate) *PlatformCreateBulk {
	return &PlatformCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PlatformClient) MapCreateBulk(slice any, setFunc func(*PlatformCreate, int)) *PlatformCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PlatformCreateBulk{err: fmt.Errorf("calling to PlatformClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PlatformCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PlatformCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Platform.
func (c *PlatformClient) Update() *PlatformUpdate {
	mutation := newPlatformMutation(c.config, OpUpdate)
	return &PlatformUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlatformClient) UpdateOne(pl *Platform) *PlatformUpdateOne {
	mutation := newPlatformMutation(c.config, OpUpdateOne, withPlatform(pl))
	return &PlatformUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlatformClient) UpdateOneID(id uint32) *PlatformUpdateOne {
	mutation := newPlatformMutation(c.config, OpUpdateOne, withPlatformID(id))
	return &PlatformUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Platform.
func (c *PlatformClient) Delete() *PlatformDelete {
	mutation := newPlatformMutation(c.config, OpDelete)
	return &PlatformDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlatformClient) DeleteOne(pl *Platform) *PlatformDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlatformClient) DeleteOneID(id uint32) *PlatformDeleteOne {
	builder := c.Delete().Where(platform.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlatformDeleteOne{builder}
}

// Query returns a query builder for Platform.
func (c *PlatformClient) Query() *PlatformQuery {
	return &PlatformQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePlatform},
		inters: c.Interceptors(),
	}
}

// Get returns a Platform entity by its id.
func (c *PlatformClient) Get(ctx context.Context, id uint32) (*Platform, error) {
	return c.Query().Where(platform.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlatformClient) GetX(ctx context.Context, id uint32) *Platform {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PlatformClient) Hooks() []Hook {
	return c.hooks.Platform
}

// Interceptors returns the client interceptors.
func (c *PlatformClient) Interceptors() []Interceptor {
	return c.inters.Platform
}

func (c *PlatformClient) mutate(ctx context.Context, m *PlatformMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PlatformCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PlatformUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PlatformUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PlatformDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Platform mutation op: %q", m.Op())
	}
}

// TransferClient is a client for the Transfer schema.
type TransferClient struct {
	config
}

// NewTransferClient returns a client for the Transfer from the given config.
func NewTransferClient(c config) *TransferClient {
	return &TransferClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transfer.Hooks(f(g(h())))`.
func (c *TransferClient) Use(hooks ...Hook) {
	c.hooks.Transfer = append(c.hooks.Transfer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `transfer.Intercept(f(g(h())))`.
func (c *TransferClient) Intercept(interceptors ...Interceptor) {
	c.inters.Transfer = append(c.inters.Transfer, interceptors...)
}

// Create returns a builder for creating a Transfer entity.
func (c *TransferClient) Create() *TransferCreate {
	mutation := newTransferMutation(c.config, OpCreate)
	return &TransferCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Transfer entities.
func (c *TransferClient) CreateBulk(builders ...*TransferCreate) *TransferCreateBulk {
	return &TransferCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TransferClient) MapCreateBulk(slice any, setFunc func(*TransferCreate, int)) *TransferCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TransferCreateBulk{err: fmt.Errorf("calling to TransferClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TransferCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TransferCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Transfer.
func (c *TransferClient) Update() *TransferUpdate {
	mutation := newTransferMutation(c.config, OpUpdate)
	return &TransferUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransferClient) UpdateOne(t *Transfer) *TransferUpdateOne {
	mutation := newTransferMutation(c.config, OpUpdateOne, withTransfer(t))
	return &TransferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransferClient) UpdateOneID(id uint32) *TransferUpdateOne {
	mutation := newTransferMutation(c.config, OpUpdateOne, withTransferID(id))
	return &TransferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Transfer.
func (c *TransferClient) Delete() *TransferDelete {
	mutation := newTransferMutation(c.config, OpDelete)
	return &TransferDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TransferClient) DeleteOne(t *Transfer) *TransferDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TransferClient) DeleteOneID(id uint32) *TransferDeleteOne {
	builder := c.Delete().Where(transfer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransferDeleteOne{builder}
}

// Query returns a query builder for Transfer.
func (c *TransferClient) Query() *TransferQuery {
	return &TransferQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTransfer},
		inters: c.Interceptors(),
	}
}

// Get returns a Transfer entity by its id.
func (c *TransferClient) Get(ctx context.Context, id uint32) (*Transfer, error) {
	return c.Query().Where(transfer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransferClient) GetX(ctx context.Context, id uint32) *Transfer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TransferClient) Hooks() []Hook {
	return c.hooks.Transfer
}

// Interceptors returns the client interceptors.
func (c *TransferClient) Interceptors() []Interceptor {
	return c.inters.Transfer
}

func (c *TransferClient) mutate(ctx context.Context, m *TransferMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TransferCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TransferUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TransferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TransferDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Transfer mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uint32) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uint32) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uint32) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uint32) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Account, Contract, Deposit, GoodBenefit, OrderBenefit, Payment, Platform,
		Transfer, User []ent.Hook
	}
	inters struct {
		Account, Contract, Deposit, GoodBenefit, OrderBenefit, Payment, Platform,
		Transfer, User []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/payment"
	"github.com/google/uuid"
)

// PaymentCreate is the builder for creating a Payment entity.
type PaymentCreate struct {
	config
	mutation *PaymentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PaymentCreate) SetCreatedAt(u uint32) *PaymentCreate {
	pc.mutation.SetCreatedAt(u)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableCreatedAt(u *uint32) *PaymentCreate {
	if u != nil {
		pc.SetCreatedAt(*u)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PaymentCreate) SetUpdatedAt(u uint32) *PaymentCreate {
	pc.mutation.SetUpdatedAt(u)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableUpdatedAt(u *uint32) *PaymentCreate {
	if u != nil {
		pc.SetUpdatedAt(*u)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PaymentCreate) SetDeletedAt(u uint32) *PaymentCreate {
	pc.mutation.SetDeletedAt(u)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableDeletedAt(u *uint32) *PaymentCreate {
	if u != nil {
		pc.SetDeletedAt(*u)
	}
	return pc
}

// SetEntID sets the "ent_id" field.
func (pc *PaymentCreate) SetEntID(u uuid.UUID) *PaymentCreate {
	pc.mutation.SetEntID(u)
	return pc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableEntID(u *uuid.UUID) *PaymentCreate {
	if u != nil {
		pc.SetEntID(*u)
	}
	return pc
}

// SetAccountID sets the "account_id" field.
func (pc *PaymentCreate) SetAccountID(u uuid.UUID) *PaymentCreate {
	pc.mutation.SetAccountID(u)
	return pc
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableAccountID(u *uuid.UUID) *PaymentCreate {
	if u != nil {
		pc.SetAccountID(*u)
	}
	return pc
}

// SetCollectingTid sets the "collecting_tid" field.
func (pc *PaymentCreate) SetCollectingTid(u uuid.UUID) *PaymentCreate {
	pc.mutation.SetCollectingTid(u)
	return pc
}

// SetNillableCollectingTid sets the "collecting_tid" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableCollectingTid(u *uuid.UUID) *PaymentCreate {
	if u != nil {
		pc.SetCollectingTid(*u)
	}
	return pc
}

// SetAvailableAt sets the "available_at" field.
func (pc *PaymentCreate) SetAvailableAt(u uint32) *PaymentCreate {
	pc.mutation.SetAvailableAt(u)
	return pc
}

// SetNillableAvailableAt sets the "available_at" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableAvailableAt(u *uint32) *PaymentCreate {
	if u != nil {
		pc.SetAvailableAt(*u)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PaymentCreate) SetID(u uint32) *PaymentCreate {
	pc.mutation.SetID(u)
	return pc
}

// Mutation returns the PaymentMutation object of the builder.
func (pc *PaymentCreate) Mutation() *PaymentMutation {
	return pc.mutation
}

// Save creates the Payment in the database.
func (pc *PaymentCreate) Save(ctx context.Context) (*Payment, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PaymentCreate) SaveX(ctx context.Context) *Payment {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PaymentCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PaymentCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PaymentCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := payment.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := payment.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.DeletedAt(); !ok {
		v := payment.DefaultDeletedAt()
		pc.mutation.SetDeletedAt(v)
	}
	if _, ok := pc.mutation.EntID(); !ok {
		v := payment.DefaultEntID()
		pc.mutation.SetEntID(v)
	}
	if _, ok := pc.mutation.AccountID(); !ok {
		v := payment.DefaultAccountID()
		pc.mutation.SetAccountID(v)
	}
	if _, ok := pc.mutation.CollectingTid(); !ok {
		v := payment.DefaultCollectingTid()
		pc.mutation.SetCollectingTid(v)
	}
	if _, ok := pc.mutation.AvailableAt(); !ok {
		v := payment.DefaultAvailableAt()
		pc.mutation.SetAvailableAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PaymentCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Payment.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Payment.updated_at"`)}
	}
	if _, ok := pc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "Payment.deleted_at"`)}
	}
	if _, ok := pc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "Payment.ent_id"`)}
	}
	return nil
}

func (pc *PaymentCreate) sqlSave(ctx context.Context) (*Payment, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PaymentCreate) createSpec() (*Payment, *sqlgraph.CreateSpec) {
	var (
		_node = &Payment{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(payment.Table, sqlgraph.NewFieldSpec(payment.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(payment.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(payment.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(payment.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := pc.mutation.EntID(); ok {
		_spec.SetField(payment.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := pc.mutation.AccountID(); ok {
		_spec.SetField(payment.FieldAccountID, field.TypeUUID, value)
		_node.AccountID = value
	}
	if value, ok := pc.mutation.CollectingTid(); ok {
		_spec.SetField(payment.FieldCollectingTid, field.TypeUUID, value)
		_node.CollectingTid = value
	}
	if value, ok := pc.mutation.AvailableAt(); ok {
		_spec.SetField(payment.FieldAvailableAt, field.TypeUint32, value)
		_node.AvailableAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Payment.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaymentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *PaymentCreate) OnConflict(opts ...sql.ConflictOption) *PaymentUpsertOne {
	pc.conflict = opts
	return &PaymentUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Payment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PaymentCreate) OnConflictColumns(columns ...string) *PaymentUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PaymentUpsertOne{
		create: pc,
	}
}

type (
	// PaymentUpsertOne is the builder for "upsert"-ing
	//  one Payment node.
	PaymentUpsertOne struct {
		create *PaymentCreate
	}

	// PaymentUpsert is the "OnConflict" setter.
	PaymentUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *PaymentUpsert) SetCreatedAt(v uint32) *PaymentUpsert {
	u.Set(payment.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateCreatedAt() *PaymentUpsert {
	u.SetExcluded(payment.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PaymentUpsert) AddCreatedAt(v uint32) *PaymentUpsert {
	u.Add(payment.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentUpsert) SetUpdatedAt(v uint32) *PaymentUpsert {
	u.Set(payment.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateUpdatedAt() *PaymentUpsert {
	u.SetExcluded(payment.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PaymentUpsert) AddUpdatedAt(v uint32) *PaymentUpsert {
	u.Add(payment.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PaymentUpsert) SetDeletedAt(v uint32) *PaymentUpsert {
	u.Set(payment.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateDeletedAt() *PaymentUpsert {
	u.SetExcluded(payment.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PaymentUpsert) AddDeletedAt(v uint32) *PaymentUpsert {
	u.Add(payment.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *PaymentUpsert) SetEntID(v uuid.UUID) *PaymentUpsert {
	u.Set(payment.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateEntID() *PaymentUpsert {
	u.SetExcluded(payment.FieldEntID)
	return u
}

// SetAccountID sets the "account_id" field.
func (u *PaymentUpsert) SetAccountID(v uuid.UUID) *PaymentUpsert {
	u.Set(payment.FieldAccountID, v)
	return u
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateAccountID() *PaymentUpsert {
	u.SetExcluded(payment.FieldAccountID)
	return u
}

// ClearAccountID clears the value of the "account_id" field.
func (u *PaymentUpsert) ClearAccountID() *PaymentUpsert {
	u.SetNull(payment.FieldAccountID)
	return u
}

// SetCollectingTid sets the "collecting_tid" field.
func (u *PaymentUpsert) SetCollectingTid(v uuid.UUID) *PaymentUpsert {
	u.Set(payment.FieldCollectingTid, v)
	return u
}

// UpdateCollectingTid sets the "collecting_tid" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateCollectingTid() *PaymentUpsert {
	u.SetExcluded(payment.FieldCollectingTid)
	return u
}

// ClearCollectingTid clears the value of the "collecting_tid" field.
func (u *PaymentUpsert) ClearCollectingTid() *PaymentUpsert {
	u.SetNull(payment.FieldCollectingTid)
	return u
}

// SetAvailableAt sets the "available_at" field.
func (u *PaymentUpsert) SetAvailableAt(v uint32) *PaymentUpsert {
	u.Set(payment.FieldAvailableAt, v)
	return u
}

// UpdateAvailableAt sets the "available_at" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateAvailableAt() *PaymentUpsert {
	u.SetExcluded(payment.FieldAvailableAt)
	return u
}

// AddAvailableAt adds v to the "available_at" field.
func (u *PaymentUpsert) AddAvailableAt(v uint32) *PaymentUpsert {
	u.Add(payment.FieldAvailableAt, v)
	return u
}

// ClearAvailableAt clears the value of the "available_at" field.
func (u *PaymentUpsert) ClearAvailableAt() *PaymentUpsert {
	u.SetNull(payment.FieldAvailableAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Payment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(payment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PaymentUpsertOne) UpdateNewValues() *PaymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(payment.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Payment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PaymentUpsertOne) Ignore() *PaymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaymentUpsertOne) DoNothing() *PaymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaymentCreate.OnConflict
// documentation for more info.
func (u *PaymentUpsertOne) Update(set func(*PaymentUpsert)) *PaymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaymentUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PaymentUpsertOne) SetCreatedAt(v uint32) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PaymentUpsertOne) AddCreatedAt(v uint32) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateCreatedAt() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentUpsertOne) SetUpdatedAt(v uint32) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PaymentUpsertOne) AddUpdatedAt(v uint32) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateUpdatedAt() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PaymentUpsertOne) SetDeletedAt(v uint32) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PaymentUpsertOne) AddDeletedAt(v uint32) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateDeletedAt() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *PaymentUpsertOne) SetEntID(v uuid.UUID) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateEntID() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateEntID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *PaymentUpsertOne) SetAccountID(v uuid.UUID) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateAccountID() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateAccountID()
	})
}

// ClearAccountID clears the value of the "account_id" field.
func (u *PaymentUpsertOne) ClearAccountID() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.ClearAccountID()
	})
}

// SetCollectingTid sets the "collecting_tid" field.
func (u *PaymentUpsertOne) SetCollectingTid(v uuid.UUID) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetCollectingTid(v)
	})
}

// UpdateCollectingTid sets the "collecting_tid" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateCollectingTid() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateCollectingTid()
	})
}

// ClearCollectingTid clears the value of the "collecting_tid" field.
func (u *PaymentUpsertOne) ClearCollectingTid() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.ClearCollectingTid()
	})
}

// SetAvailableAt sets the "available_at" field.
func (u *PaymentUpsertOne) SetAvailableAt(v uint32) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetAvailableAt(v)
	})
}

// AddAvailableAt adds v to the "available_at" field.
func (u *PaymentUpsertOne) AddAvailableAt(v uint32) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.AddAvailableAt(v)
	})
}

// UpdateAvailableAt sets the "available_at" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateAvailableAt() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateAvailableAt()
	})
}

// ClearAvailableAt clears the value of the "available_at" field.
func (u *PaymentUpsertOne) ClearAvailableAt() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.ClearAvailableAt()
	})
}

// Exec executes the query.
func (u *PaymentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for PaymentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PaymentUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PaymentUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PaymentCreateBulk is the builder for creating many Payment entities in bulk.
type PaymentCreateBulk struct {
	config
	err      error
	builders []*PaymentCreate
	conflict []sql.ConflictOption
}

// Save creates the Payment entities in the database.
func (pcb *PaymentCreateBulk) Save(ctx context.Context) ([]*Payment, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Payment, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PaymentCreateBulk) SaveX(ctx context.Context) []*Payment {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PaymentCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PaymentCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Payment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaymentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *PaymentCreateBulk) OnConflict(opts ...sql.ConflictOption) *PaymentUpsertBulk {
	pcb.conflict = opts
	return &PaymentUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Payment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PaymentCreateBulk) OnConflictColumns(columns ...string) *PaymentUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PaymentUpsertBulk{
		create: pcb,
	}
}

// PaymentUpsertBulk is the builder for "upsert"-ing
// a bulk of Payment nodes.
type PaymentUpsertBulk struct {
	create *PaymentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Payment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(payment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PaymentUpsertBulk) UpdateNewValues() *PaymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(payment.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Payment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PaymentUpsertBulk) Ignore() *PaymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaymentUpsertBulk) DoNothing() *PaymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaymentCreateBulk.OnConflict
// documentation for more info.
func (u *PaymentUpsertBulk) Update(set func(*PaymentUpsert)) *PaymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaymentUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PaymentUpsertBulk) SetCreatedAt(v uint32) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PaymentUpsertBulk) AddCreatedAt(v uint32) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateCreatedAt() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentUpsertBulk) SetUpdatedAt(v uint32) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PaymentUpsertBulk) AddUpdatedAt(v uint32) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateUpdatedAt() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PaymentUpsertBulk) SetDeletedAt(v uint32) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PaymentUpsertBulk) AddDeletedAt(v uint32) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateDeletedAt() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *PaymentUpsertBulk) SetEntID(v uuid.UUID) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateEntID() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateEntID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *PaymentUpsertBulk) SetAccountID(v uuid.UUID) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateAccountID() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateAccountID()
	})
}

// ClearAccountID clears the value of the "account_id" field.
func (u *PaymentUpsertBulk) ClearAccountID() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.ClearAccountID()
	})
}

// SetCollectingTid sets the "collecting_tid" field.
func (u *PaymentUpsertBulk) SetCollectingTid(v uuid.UUID) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetCollectingTid(v)
	})
}

// UpdateCollectingTid sets the "collecting_tid" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateCollectingTid() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateCollectingTid()
	})
}

// ClearCollectingTid clears the value of the "collecting_tid" field.
func (u *PaymentUpsertBulk) ClearCollectingTid() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.ClearCollectingTid()
	})
}

// SetAvailableAt sets the "available_at" field.
func (u *PaymentUpsertBulk) SetAvailableAt(v uint32) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetAvailableAt(v)
	})
}

// AddAvailableAt adds v to the "available_at" field.
func (u *PaymentUpsertBulk) AddAvailableAt(v uint32) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.AddAvailableAt(v)
	})
}

// UpdateAvailableAt sets the "available_at" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateAvailableAt() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateAvailableAt()
	})
}

// ClearAvailableAt clears the value of the "available_at" field.
func (u *PaymentUpsertBulk) ClearAvailableAt() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.ClearAvailableAt()
	})
}

// Exec executes the query.
func (u *PaymentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the PaymentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for PaymentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

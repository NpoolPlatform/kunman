// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/platform"
	"github.com/google/uuid"
)

// PlatformCreate is the builder for creating a Platform entity.
type PlatformCreate struct {
	config
	mutation *PlatformMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PlatformCreate) SetCreatedAt(u uint32) *PlatformCreate {
	pc.mutation.SetCreatedAt(u)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PlatformCreate) SetNillableCreatedAt(u *uint32) *PlatformCreate {
	if u != nil {
		pc.SetCreatedAt(*u)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PlatformCreate) SetUpdatedAt(u uint32) *PlatformCreate {
	pc.mutation.SetUpdatedAt(u)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PlatformCreate) SetNillableUpdatedAt(u *uint32) *PlatformCreate {
	if u != nil {
		pc.SetUpdatedAt(*u)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PlatformCreate) SetDeletedAt(u uint32) *PlatformCreate {
	pc.mutation.SetDeletedAt(u)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *PlatformCreate) SetNillableDeletedAt(u *uint32) *PlatformCreate {
	if u != nil {
		pc.SetDeletedAt(*u)
	}
	return pc
}

// SetEntID sets the "ent_id" field.
func (pc *PlatformCreate) SetEntID(u uuid.UUID) *PlatformCreate {
	pc.mutation.SetEntID(u)
	return pc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (pc *PlatformCreate) SetNillableEntID(u *uuid.UUID) *PlatformCreate {
	if u != nil {
		pc.SetEntID(*u)
	}
	return pc
}

// SetAccountID sets the "account_id" field.
func (pc *PlatformCreate) SetAccountID(u uuid.UUID) *PlatformCreate {
	pc.mutation.SetAccountID(u)
	return pc
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (pc *PlatformCreate) SetNillableAccountID(u *uuid.UUID) *PlatformCreate {
	if u != nil {
		pc.SetAccountID(*u)
	}
	return pc
}

// SetUsedFor sets the "used_for" field.
func (pc *PlatformCreate) SetUsedFor(s string) *PlatformCreate {
	pc.mutation.SetUsedFor(s)
	return pc
}

// SetNillableUsedFor sets the "used_for" field if the given value is not nil.
func (pc *PlatformCreate) SetNillableUsedFor(s *string) *PlatformCreate {
	if s != nil {
		pc.SetUsedFor(*s)
	}
	return pc
}

// SetBackup sets the "backup" field.
func (pc *PlatformCreate) SetBackup(b bool) *PlatformCreate {
	pc.mutation.SetBackup(b)
	return pc
}

// SetNillableBackup sets the "backup" field if the given value is not nil.
func (pc *PlatformCreate) SetNillableBackup(b *bool) *PlatformCreate {
	if b != nil {
		pc.SetBackup(*b)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PlatformCreate) SetID(u uint32) *PlatformCreate {
	pc.mutation.SetID(u)
	return pc
}

// Mutation returns the PlatformMutation object of the builder.
func (pc *PlatformCreate) Mutation() *PlatformMutation {
	return pc.mutation
}

// Save creates the Platform in the database.
func (pc *PlatformCreate) Save(ctx context.Context) (*Platform, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PlatformCreate) SaveX(ctx context.Context) *Platform {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PlatformCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PlatformCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PlatformCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := platform.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := platform.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.DeletedAt(); !ok {
		v := platform.DefaultDeletedAt()
		pc.mutation.SetDeletedAt(v)
	}
	if _, ok := pc.mutation.EntID(); !ok {
		v := platform.DefaultEntID()
		pc.mutation.SetEntID(v)
	}
	if _, ok := pc.mutation.AccountID(); !ok {
		v := platform.DefaultAccountID()
		pc.mutation.SetAccountID(v)
	}
	if _, ok := pc.mutation.UsedFor(); !ok {
		v := platform.DefaultUsedFor
		pc.mutation.SetUsedFor(v)
	}
	if _, ok := pc.mutation.Backup(); !ok {
		v := platform.DefaultBackup
		pc.mutation.SetBackup(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PlatformCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Platform.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Platform.updated_at"`)}
	}
	if _, ok := pc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "Platform.deleted_at"`)}
	}
	if _, ok := pc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "Platform.ent_id"`)}
	}
	return nil
}

func (pc *PlatformCreate) sqlSave(ctx context.Context) (*Platform, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PlatformCreate) createSpec() (*Platform, *sqlgraph.CreateSpec) {
	var (
		_node = &Platform{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(platform.Table, sqlgraph.NewFieldSpec(platform.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(platform.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(platform.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(platform.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := pc.mutation.EntID(); ok {
		_spec.SetField(platform.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := pc.mutation.AccountID(); ok {
		_spec.SetField(platform.FieldAccountID, field.TypeUUID, value)
		_node.AccountID = value
	}
	if value, ok := pc.mutation.UsedFor(); ok {
		_spec.SetField(platform.FieldUsedFor, field.TypeString, value)
		_node.UsedFor = value
	}
	if value, ok := pc.mutation.Backup(); ok {
		_spec.SetField(platform.FieldBackup, field.TypeBool, value)
		_node.Backup = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Platform.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlatformUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *PlatformCreate) OnConflict(opts ...sql.ConflictOption) *PlatformUpsertOne {
	pc.conflict = opts
	return &PlatformUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Platform.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PlatformCreate) OnConflictColumns(columns ...string) *PlatformUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PlatformUpsertOne{
		create: pc,
	}
}

type (
	// PlatformUpsertOne is the builder for "upsert"-ing
	//  one Platform node.
	PlatformUpsertOne struct {
		create *PlatformCreate
	}

	// PlatformUpsert is the "OnConflict" setter.
	PlatformUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *PlatformUpsert) SetCreatedAt(v uint32) *PlatformUpsert {
	u.Set(platform.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PlatformUpsert) UpdateCreatedAt() *PlatformUpsert {
	u.SetExcluded(platform.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PlatformUpsert) AddCreatedAt(v uint32) *PlatformUpsert {
	u.Add(platform.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlatformUpsert) SetUpdatedAt(v uint32) *PlatformUpsert {
	u.Set(platform.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlatformUpsert) UpdateUpdatedAt() *PlatformUpsert {
	u.SetExcluded(platform.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PlatformUpsert) AddUpdatedAt(v uint32) *PlatformUpsert {
	u.Add(platform.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlatformUpsert) SetDeletedAt(v uint32) *PlatformUpsert {
	u.Set(platform.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlatformUpsert) UpdateDeletedAt() *PlatformUpsert {
	u.SetExcluded(platform.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PlatformUpsert) AddDeletedAt(v uint32) *PlatformUpsert {
	u.Add(platform.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *PlatformUpsert) SetEntID(v uuid.UUID) *PlatformUpsert {
	u.Set(platform.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PlatformUpsert) UpdateEntID() *PlatformUpsert {
	u.SetExcluded(platform.FieldEntID)
	return u
}

// SetAccountID sets the "account_id" field.
func (u *PlatformUpsert) SetAccountID(v uuid.UUID) *PlatformUpsert {
	u.Set(platform.FieldAccountID, v)
	return u
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *PlatformUpsert) UpdateAccountID() *PlatformUpsert {
	u.SetExcluded(platform.FieldAccountID)
	return u
}

// ClearAccountID clears the value of the "account_id" field.
func (u *PlatformUpsert) ClearAccountID() *PlatformUpsert {
	u.SetNull(platform.FieldAccountID)
	return u
}

// SetUsedFor sets the "used_for" field.
func (u *PlatformUpsert) SetUsedFor(v string) *PlatformUpsert {
	u.Set(platform.FieldUsedFor, v)
	return u
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *PlatformUpsert) UpdateUsedFor() *PlatformUpsert {
	u.SetExcluded(platform.FieldUsedFor)
	return u
}

// ClearUsedFor clears the value of the "used_for" field.
func (u *PlatformUpsert) ClearUsedFor() *PlatformUpsert {
	u.SetNull(platform.FieldUsedFor)
	return u
}

// SetBackup sets the "backup" field.
func (u *PlatformUpsert) SetBackup(v bool) *PlatformUpsert {
	u.Set(platform.FieldBackup, v)
	return u
}

// UpdateBackup sets the "backup" field to the value that was provided on create.
func (u *PlatformUpsert) UpdateBackup() *PlatformUpsert {
	u.SetExcluded(platform.FieldBackup)
	return u
}

// ClearBackup clears the value of the "backup" field.
func (u *PlatformUpsert) ClearBackup() *PlatformUpsert {
	u.SetNull(platform.FieldBackup)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Platform.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(platform.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PlatformUpsertOne) UpdateNewValues() *PlatformUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(platform.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Platform.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PlatformUpsertOne) Ignore() *PlatformUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlatformUpsertOne) DoNothing() *PlatformUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlatformCreate.OnConflict
// documentation for more info.
func (u *PlatformUpsertOne) Update(set func(*PlatformUpsert)) *PlatformUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlatformUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PlatformUpsertOne) SetCreatedAt(v uint32) *PlatformUpsertOne {
	return u.Update(func(s *PlatformUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PlatformUpsertOne) AddCreatedAt(v uint32) *PlatformUpsertOne {
	return u.Update(func(s *PlatformUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PlatformUpsertOne) UpdateCreatedAt() *PlatformUpsertOne {
	return u.Update(func(s *PlatformUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlatformUpsertOne) SetUpdatedAt(v uint32) *PlatformUpsertOne {
	return u.Update(func(s *PlatformUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PlatformUpsertOne) AddUpdatedAt(v uint32) *PlatformUpsertOne {
	return u.Update(func(s *PlatformUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlatformUpsertOne) UpdateUpdatedAt() *PlatformUpsertOne {
	return u.Update(func(s *PlatformUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlatformUpsertOne) SetDeletedAt(v uint32) *PlatformUpsertOne {
	return u.Update(func(s *PlatformUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PlatformUpsertOne) AddDeletedAt(v uint32) *PlatformUpsertOne {
	return u.Update(func(s *PlatformUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlatformUpsertOne) UpdateDeletedAt() *PlatformUpsertOne {
	return u.Update(func(s *PlatformUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *PlatformUpsertOne) SetEntID(v uuid.UUID) *PlatformUpsertOne {
	return u.Update(func(s *PlatformUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PlatformUpsertOne) UpdateEntID() *PlatformUpsertOne {
	return u.Update(func(s *PlatformUpsert) {
		s.UpdateEntID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *PlatformUpsertOne) SetAccountID(v uuid.UUID) *PlatformUpsertOne {
	return u.Update(func(s *PlatformUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *PlatformUpsertOne) UpdateAccountID() *PlatformUpsertOne {
	return u.Update(func(s *PlatformUpsert) {
		s.UpdateAccountID()
	})
}

// ClearAccountID clears the value of the "account_id" field.
func (u *PlatformUpsertOne) ClearAccountID() *PlatformUpsertOne {
	return u.Update(func(s *PlatformUpsert) {
		s.ClearAccountID()
	})
}

// SetUsedFor sets the "used_for" field.
func (u *PlatformUpsertOne) SetUsedFor(v string) *PlatformUpsertOne {
	return u.Update(func(s *PlatformUpsert) {
		s.SetUsedFor(v)
	})
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *PlatformUpsertOne) UpdateUsedFor() *PlatformUpsertOne {
	return u.Update(func(s *PlatformUpsert) {
		s.UpdateUsedFor()
	})
}

// ClearUsedFor clears the value of the "used_for" field.
func (u *PlatformUpsertOne) ClearUsedFor() *PlatformUpsertOne {
	return u.Update(func(s *PlatformUpsert) {
		s.ClearUsedFor()
	})
}

// SetBackup sets the "backup" field.
func (u *PlatformUpsertOne) SetBackup(v bool) *PlatformUpsertOne {
	return u.Update(func(s *PlatformUpsert) {
		s.SetBackup(v)
	})
}

// UpdateBackup sets the "backup" field to the value that was provided on create.
func (u *PlatformUpsertOne) UpdateBackup() *PlatformUpsertOne {
	return u.Update(func(s *PlatformUpsert) {
		s.UpdateBackup()
	})
}

// ClearBackup clears the value of the "backup" field.
func (u *PlatformUpsertOne) ClearBackup() *PlatformUpsertOne {
	return u.Update(func(s *PlatformUpsert) {
		s.ClearBackup()
	})
}

// Exec executes the query.
func (u *PlatformUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for PlatformCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlatformUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PlatformUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PlatformUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PlatformCreateBulk is the builder for creating many Platform entities in bulk.
type PlatformCreateBulk struct {
	config
	err      error
	builders []*PlatformCreate
	conflict []sql.ConflictOption
}

// Save creates the Platform entities in the database.
func (pcb *PlatformCreateBulk) Save(ctx context.Context) ([]*Platform, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Platform, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlatformMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PlatformCreateBulk) SaveX(ctx context.Context) []*Platform {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PlatformCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PlatformCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Platform.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlatformUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *PlatformCreateBulk) OnConflict(opts ...sql.ConflictOption) *PlatformUpsertBulk {
	pcb.conflict = opts
	return &PlatformUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Platform.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PlatformCreateBulk) OnConflictColumns(columns ...string) *PlatformUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PlatformUpsertBulk{
		create: pcb,
	}
}

// PlatformUpsertBulk is the builder for "upsert"-ing
// a bulk of Platform nodes.
type PlatformUpsertBulk struct {
	create *PlatformCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Platform.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(platform.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PlatformUpsertBulk) UpdateNewValues() *PlatformUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(platform.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Platform.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PlatformUpsertBulk) Ignore() *PlatformUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlatformUpsertBulk) DoNothing() *PlatformUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlatformCreateBulk.OnConflict
// documentation for more info.
func (u *PlatformUpsertBulk) Update(set func(*PlatformUpsert)) *PlatformUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlatformUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PlatformUpsertBulk) SetCreatedAt(v uint32) *PlatformUpsertBulk {
	return u.Update(func(s *PlatformUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PlatformUpsertBulk) AddCreatedAt(v uint32) *PlatformUpsertBulk {
	return u.Update(func(s *PlatformUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PlatformUpsertBulk) UpdateCreatedAt() *PlatformUpsertBulk {
	return u.Update(func(s *PlatformUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlatformUpsertBulk) SetUpdatedAt(v uint32) *PlatformUpsertBulk {
	return u.Update(func(s *PlatformUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PlatformUpsertBulk) AddUpdatedAt(v uint32) *PlatformUpsertBulk {
	return u.Update(func(s *PlatformUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlatformUpsertBulk) UpdateUpdatedAt() *PlatformUpsertBulk {
	return u.Update(func(s *PlatformUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlatformUpsertBulk) SetDeletedAt(v uint32) *PlatformUpsertBulk {
	return u.Update(func(s *PlatformUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PlatformUpsertBulk) AddDeletedAt(v uint32) *PlatformUpsertBulk {
	return u.Update(func(s *PlatformUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlatformUpsertBulk) UpdateDeletedAt() *PlatformUpsertBulk {
	return u.Update(func(s *PlatformUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *PlatformUpsertBulk) SetEntID(v uuid.UUID) *PlatformUpsertBulk {
	return u.Update(func(s *PlatformUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PlatformUpsertBulk) UpdateEntID() *PlatformUpsertBulk {
	return u.Update(func(s *PlatformUpsert) {
		s.UpdateEntID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *PlatformUpsertBulk) SetAccountID(v uuid.UUID) *PlatformUpsertBulk {
	return u.Update(func(s *PlatformUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *PlatformUpsertBulk) UpdateAccountID() *PlatformUpsertBulk {
	return u.Update(func(s *PlatformUpsert) {
		s.UpdateAccountID()
	})
}

// ClearAccountID clears the value of the "account_id" field.
func (u *PlatformUpsertBulk) ClearAccountID() *PlatformUpsertBulk {
	return u.Update(func(s *PlatformUpsert) {
		s.ClearAccountID()
	})
}

// SetUsedFor sets the "used_for" field.
func (u *PlatformUpsertBulk) SetUsedFor(v string) *PlatformUpsertBulk {
	return u.Update(func(s *PlatformUpsert) {
		s.SetUsedFor(v)
	})
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *PlatformUpsertBulk) UpdateUsedFor() *PlatformUpsertBulk {
	return u.Update(func(s *PlatformUpsert) {
		s.UpdateUsedFor()
	})
}

// ClearUsedFor clears the value of the "used_for" field.
func (u *PlatformUpsertBulk) ClearUsedFor() *PlatformUpsertBulk {
	return u.Update(func(s *PlatformUpsert) {
		s.ClearUsedFor()
	})
}

// SetBackup sets the "backup" field.
func (u *PlatformUpsertBulk) SetBackup(v bool) *PlatformUpsertBulk {
	return u.Update(func(s *PlatformUpsert) {
		s.SetBackup(v)
	})
}

// UpdateBackup sets the "backup" field to the value that was provided on create.
func (u *PlatformUpsertBulk) UpdateBackup() *PlatformUpsertBulk {
	return u.Update(func(s *PlatformUpsert) {
		s.UpdateBackup()
	})
}

// ClearBackup clears the value of the "backup" field.
func (u *PlatformUpsertBulk) ClearBackup() *PlatformUpsertBulk {
	return u.Update(func(s *PlatformUpsert) {
		s.ClearBackup()
	})
}

// Exec executes the query.
func (u *PlatformUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the PlatformCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for PlatformCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlatformUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

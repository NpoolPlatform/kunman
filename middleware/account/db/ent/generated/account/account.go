// Code generated by ent, DO NOT EDIT.

package account

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the account type in the database.
	Label = "account"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldCoinTypeID holds the string denoting the coin_type_id field in the database.
	FieldCoinTypeID = "coin_type_id"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldUsedFor holds the string denoting the used_for field in the database.
	FieldUsedFor = "used_for"
	// FieldPlatformHoldPrivateKey holds the string denoting the platform_hold_private_key field in the database.
	FieldPlatformHoldPrivateKey = "platform_hold_private_key"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldLocked holds the string denoting the locked field in the database.
	FieldLocked = "locked"
	// FieldLockedBy holds the string denoting the locked_by field in the database.
	FieldLockedBy = "locked_by"
	// FieldBlocked holds the string denoting the blocked field in the database.
	FieldBlocked = "blocked"
	// Table holds the table name of the account in the database.
	Table = "accounts"
)

// Columns holds all SQL columns for account fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldEntID,
	FieldCoinTypeID,
	FieldAddress,
	FieldUsedFor,
	FieldPlatformHoldPrivateKey,
	FieldActive,
	FieldLocked,
	FieldLockedBy,
	FieldBlocked,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() uint32
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() uint32
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() uint32
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt func() uint32
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultCoinTypeID holds the default value on creation for the "coin_type_id" field.
	DefaultCoinTypeID func() uuid.UUID
	// DefaultAddress holds the default value on creation for the "address" field.
	DefaultAddress string
	// DefaultUsedFor holds the default value on creation for the "used_for" field.
	DefaultUsedFor string
	// DefaultPlatformHoldPrivateKey holds the default value on creation for the "platform_hold_private_key" field.
	DefaultPlatformHoldPrivateKey bool
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultLocked holds the default value on creation for the "locked" field.
	DefaultLocked bool
	// DefaultLockedBy holds the default value on creation for the "locked_by" field.
	DefaultLockedBy string
	// DefaultBlocked holds the default value on creation for the "blocked" field.
	DefaultBlocked bool
)

// OrderOption defines the ordering options for the Account queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByCoinTypeID orders the results by the coin_type_id field.
func ByCoinTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoinTypeID, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByUsedFor orders the results by the used_for field.
func ByUsedFor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsedFor, opts...).ToFunc()
}

// ByPlatformHoldPrivateKey orders the results by the platform_hold_private_key field.
func ByPlatformHoldPrivateKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatformHoldPrivateKey, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByLocked orders the results by the locked field.
func ByLocked(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocked, opts...).ToFunc()
}

// ByLockedBy orders the results by the locked_by field.
func ByLockedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLockedBy, opts...).ToFunc()
}

// ByBlocked orders the results by the blocked field.
func ByBlocked(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlocked, opts...).ToFunc()
}

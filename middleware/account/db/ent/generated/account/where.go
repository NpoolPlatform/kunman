// Code generated by ent, DO NOT EDIT.

package account

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldDeletedAt, v))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldEntID, v))
}

// CoinTypeID applies equality check predicate on the "coin_type_id" field. It's identical to CoinTypeIDEQ.
func CoinTypeID(v uuid.UUID) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldCoinTypeID, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldAddress, v))
}

// UsedFor applies equality check predicate on the "used_for" field. It's identical to UsedForEQ.
func UsedFor(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldUsedFor, v))
}

// PlatformHoldPrivateKey applies equality check predicate on the "platform_hold_private_key" field. It's identical to PlatformHoldPrivateKeyEQ.
func PlatformHoldPrivateKey(v bool) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldPlatformHoldPrivateKey, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldActive, v))
}

// Locked applies equality check predicate on the "locked" field. It's identical to LockedEQ.
func Locked(v bool) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldLocked, v))
}

// LockedBy applies equality check predicate on the "locked_by" field. It's identical to LockedByEQ.
func LockedBy(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldLockedBy, v))
}

// Blocked applies equality check predicate on the "blocked" field. It's identical to BlockedEQ.
func Blocked(v bool) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldBlocked, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldEntID, v))
}

// CoinTypeIDEQ applies the EQ predicate on the "coin_type_id" field.
func CoinTypeIDEQ(v uuid.UUID) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldCoinTypeID, v))
}

// CoinTypeIDNEQ applies the NEQ predicate on the "coin_type_id" field.
func CoinTypeIDNEQ(v uuid.UUID) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldCoinTypeID, v))
}

// CoinTypeIDIn applies the In predicate on the "coin_type_id" field.
func CoinTypeIDIn(vs ...uuid.UUID) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldCoinTypeID, vs...))
}

// CoinTypeIDNotIn applies the NotIn predicate on the "coin_type_id" field.
func CoinTypeIDNotIn(vs ...uuid.UUID) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldCoinTypeID, vs...))
}

// CoinTypeIDGT applies the GT predicate on the "coin_type_id" field.
func CoinTypeIDGT(v uuid.UUID) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldCoinTypeID, v))
}

// CoinTypeIDGTE applies the GTE predicate on the "coin_type_id" field.
func CoinTypeIDGTE(v uuid.UUID) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldCoinTypeID, v))
}

// CoinTypeIDLT applies the LT predicate on the "coin_type_id" field.
func CoinTypeIDLT(v uuid.UUID) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldCoinTypeID, v))
}

// CoinTypeIDLTE applies the LTE predicate on the "coin_type_id" field.
func CoinTypeIDLTE(v uuid.UUID) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldCoinTypeID, v))
}

// CoinTypeIDIsNil applies the IsNil predicate on the "coin_type_id" field.
func CoinTypeIDIsNil() predicate.Account {
	return predicate.Account(sql.FieldIsNull(FieldCoinTypeID))
}

// CoinTypeIDNotNil applies the NotNil predicate on the "coin_type_id" field.
func CoinTypeIDNotNil() predicate.Account {
	return predicate.Account(sql.FieldNotNull(FieldCoinTypeID))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "address" field.
func AddressIsNil() predicate.Account {
	return predicate.Account(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "address" field.
func AddressNotNil() predicate.Account {
	return predicate.Account(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldAddress, v))
}

// UsedForEQ applies the EQ predicate on the "used_for" field.
func UsedForEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldUsedFor, v))
}

// UsedForNEQ applies the NEQ predicate on the "used_for" field.
func UsedForNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldUsedFor, v))
}

// UsedForIn applies the In predicate on the "used_for" field.
func UsedForIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldUsedFor, vs...))
}

// UsedForNotIn applies the NotIn predicate on the "used_for" field.
func UsedForNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldUsedFor, vs...))
}

// UsedForGT applies the GT predicate on the "used_for" field.
func UsedForGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldUsedFor, v))
}

// UsedForGTE applies the GTE predicate on the "used_for" field.
func UsedForGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldUsedFor, v))
}

// UsedForLT applies the LT predicate on the "used_for" field.
func UsedForLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldUsedFor, v))
}

// UsedForLTE applies the LTE predicate on the "used_for" field.
func UsedForLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldUsedFor, v))
}

// UsedForContains applies the Contains predicate on the "used_for" field.
func UsedForContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldUsedFor, v))
}

// UsedForHasPrefix applies the HasPrefix predicate on the "used_for" field.
func UsedForHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldUsedFor, v))
}

// UsedForHasSuffix applies the HasSuffix predicate on the "used_for" field.
func UsedForHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldUsedFor, v))
}

// UsedForIsNil applies the IsNil predicate on the "used_for" field.
func UsedForIsNil() predicate.Account {
	return predicate.Account(sql.FieldIsNull(FieldUsedFor))
}

// UsedForNotNil applies the NotNil predicate on the "used_for" field.
func UsedForNotNil() predicate.Account {
	return predicate.Account(sql.FieldNotNull(FieldUsedFor))
}

// UsedForEqualFold applies the EqualFold predicate on the "used_for" field.
func UsedForEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldUsedFor, v))
}

// UsedForContainsFold applies the ContainsFold predicate on the "used_for" field.
func UsedForContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldUsedFor, v))
}

// PlatformHoldPrivateKeyEQ applies the EQ predicate on the "platform_hold_private_key" field.
func PlatformHoldPrivateKeyEQ(v bool) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldPlatformHoldPrivateKey, v))
}

// PlatformHoldPrivateKeyNEQ applies the NEQ predicate on the "platform_hold_private_key" field.
func PlatformHoldPrivateKeyNEQ(v bool) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldPlatformHoldPrivateKey, v))
}

// PlatformHoldPrivateKeyIsNil applies the IsNil predicate on the "platform_hold_private_key" field.
func PlatformHoldPrivateKeyIsNil() predicate.Account {
	return predicate.Account(sql.FieldIsNull(FieldPlatformHoldPrivateKey))
}

// PlatformHoldPrivateKeyNotNil applies the NotNil predicate on the "platform_hold_private_key" field.
func PlatformHoldPrivateKeyNotNil() predicate.Account {
	return predicate.Account(sql.FieldNotNull(FieldPlatformHoldPrivateKey))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldActive, v))
}

// ActiveIsNil applies the IsNil predicate on the "active" field.
func ActiveIsNil() predicate.Account {
	return predicate.Account(sql.FieldIsNull(FieldActive))
}

// ActiveNotNil applies the NotNil predicate on the "active" field.
func ActiveNotNil() predicate.Account {
	return predicate.Account(sql.FieldNotNull(FieldActive))
}

// LockedEQ applies the EQ predicate on the "locked" field.
func LockedEQ(v bool) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldLocked, v))
}

// LockedNEQ applies the NEQ predicate on the "locked" field.
func LockedNEQ(v bool) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldLocked, v))
}

// LockedIsNil applies the IsNil predicate on the "locked" field.
func LockedIsNil() predicate.Account {
	return predicate.Account(sql.FieldIsNull(FieldLocked))
}

// LockedNotNil applies the NotNil predicate on the "locked" field.
func LockedNotNil() predicate.Account {
	return predicate.Account(sql.FieldNotNull(FieldLocked))
}

// LockedByEQ applies the EQ predicate on the "locked_by" field.
func LockedByEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldLockedBy, v))
}

// LockedByNEQ applies the NEQ predicate on the "locked_by" field.
func LockedByNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldLockedBy, v))
}

// LockedByIn applies the In predicate on the "locked_by" field.
func LockedByIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldLockedBy, vs...))
}

// LockedByNotIn applies the NotIn predicate on the "locked_by" field.
func LockedByNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldLockedBy, vs...))
}

// LockedByGT applies the GT predicate on the "locked_by" field.
func LockedByGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldLockedBy, v))
}

// LockedByGTE applies the GTE predicate on the "locked_by" field.
func LockedByGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldLockedBy, v))
}

// LockedByLT applies the LT predicate on the "locked_by" field.
func LockedByLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldLockedBy, v))
}

// LockedByLTE applies the LTE predicate on the "locked_by" field.
func LockedByLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldLockedBy, v))
}

// LockedByContains applies the Contains predicate on the "locked_by" field.
func LockedByContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldLockedBy, v))
}

// LockedByHasPrefix applies the HasPrefix predicate on the "locked_by" field.
func LockedByHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldLockedBy, v))
}

// LockedByHasSuffix applies the HasSuffix predicate on the "locked_by" field.
func LockedByHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldLockedBy, v))
}

// LockedByIsNil applies the IsNil predicate on the "locked_by" field.
func LockedByIsNil() predicate.Account {
	return predicate.Account(sql.FieldIsNull(FieldLockedBy))
}

// LockedByNotNil applies the NotNil predicate on the "locked_by" field.
func LockedByNotNil() predicate.Account {
	return predicate.Account(sql.FieldNotNull(FieldLockedBy))
}

// LockedByEqualFold applies the EqualFold predicate on the "locked_by" field.
func LockedByEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldLockedBy, v))
}

// LockedByContainsFold applies the ContainsFold predicate on the "locked_by" field.
func LockedByContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldLockedBy, v))
}

// BlockedEQ applies the EQ predicate on the "blocked" field.
func BlockedEQ(v bool) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldBlocked, v))
}

// BlockedNEQ applies the NEQ predicate on the "blocked" field.
func BlockedNEQ(v bool) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldBlocked, v))
}

// BlockedIsNil applies the IsNil predicate on the "blocked" field.
func BlockedIsNil() predicate.Account {
	return predicate.Account(sql.FieldIsNull(FieldBlocked))
}

// BlockedNotNil applies the NotNil predicate on the "blocked" field.
func BlockedNotNil() predicate.Account {
	return predicate.Account(sql.FieldNotNull(FieldBlocked))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Account) predicate.Account {
	return predicate.Account(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Account) predicate.Account {
	return predicate.Account(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Account) predicate.Account {
	return predicate.Account(sql.NotPredicates(p))
}

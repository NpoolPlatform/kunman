// Code generated by ent, DO NOT EDIT.

package contract

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldDeletedAt, v))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldEntID, v))
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldGoodID, v))
}

// DelegatedStakingID applies equality check predicate on the "delegated_staking_id" field. It's identical to DelegatedStakingIDEQ.
func DelegatedStakingID(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldDelegatedStakingID, v))
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldAccountID, v))
}

// Backup applies equality check predicate on the "backup" field. It's identical to BackupEQ.
func Backup(v bool) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldBackup, v))
}

// ContractOperatorType applies equality check predicate on the "contract_operator_type" field. It's identical to ContractOperatorTypeEQ.
func ContractOperatorType(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldContractOperatorType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldEntID, v))
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldGoodID, v))
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldGoodID, v))
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldGoodID, vs...))
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldGoodID, vs...))
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldGoodID, v))
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldGoodID, v))
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldGoodID, v))
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldGoodID, v))
}

// GoodIDIsNil applies the IsNil predicate on the "good_id" field.
func GoodIDIsNil() predicate.Contract {
	return predicate.Contract(sql.FieldIsNull(FieldGoodID))
}

// GoodIDNotNil applies the NotNil predicate on the "good_id" field.
func GoodIDNotNil() predicate.Contract {
	return predicate.Contract(sql.FieldNotNull(FieldGoodID))
}

// DelegatedStakingIDEQ applies the EQ predicate on the "delegated_staking_id" field.
func DelegatedStakingIDEQ(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldDelegatedStakingID, v))
}

// DelegatedStakingIDNEQ applies the NEQ predicate on the "delegated_staking_id" field.
func DelegatedStakingIDNEQ(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldDelegatedStakingID, v))
}

// DelegatedStakingIDIn applies the In predicate on the "delegated_staking_id" field.
func DelegatedStakingIDIn(vs ...uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldDelegatedStakingID, vs...))
}

// DelegatedStakingIDNotIn applies the NotIn predicate on the "delegated_staking_id" field.
func DelegatedStakingIDNotIn(vs ...uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldDelegatedStakingID, vs...))
}

// DelegatedStakingIDGT applies the GT predicate on the "delegated_staking_id" field.
func DelegatedStakingIDGT(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldDelegatedStakingID, v))
}

// DelegatedStakingIDGTE applies the GTE predicate on the "delegated_staking_id" field.
func DelegatedStakingIDGTE(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldDelegatedStakingID, v))
}

// DelegatedStakingIDLT applies the LT predicate on the "delegated_staking_id" field.
func DelegatedStakingIDLT(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldDelegatedStakingID, v))
}

// DelegatedStakingIDLTE applies the LTE predicate on the "delegated_staking_id" field.
func DelegatedStakingIDLTE(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldDelegatedStakingID, v))
}

// DelegatedStakingIDIsNil applies the IsNil predicate on the "delegated_staking_id" field.
func DelegatedStakingIDIsNil() predicate.Contract {
	return predicate.Contract(sql.FieldIsNull(FieldDelegatedStakingID))
}

// DelegatedStakingIDNotNil applies the NotNil predicate on the "delegated_staking_id" field.
func DelegatedStakingIDNotNil() predicate.Contract {
	return predicate.Contract(sql.FieldNotNull(FieldDelegatedStakingID))
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldAccountID, v))
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldAccountID, v))
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldAccountID, vs...))
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldAccountID, vs...))
}

// AccountIDGT applies the GT predicate on the "account_id" field.
func AccountIDGT(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldAccountID, v))
}

// AccountIDGTE applies the GTE predicate on the "account_id" field.
func AccountIDGTE(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldAccountID, v))
}

// AccountIDLT applies the LT predicate on the "account_id" field.
func AccountIDLT(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldAccountID, v))
}

// AccountIDLTE applies the LTE predicate on the "account_id" field.
func AccountIDLTE(v uuid.UUID) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldAccountID, v))
}

// AccountIDIsNil applies the IsNil predicate on the "account_id" field.
func AccountIDIsNil() predicate.Contract {
	return predicate.Contract(sql.FieldIsNull(FieldAccountID))
}

// AccountIDNotNil applies the NotNil predicate on the "account_id" field.
func AccountIDNotNil() predicate.Contract {
	return predicate.Contract(sql.FieldNotNull(FieldAccountID))
}

// BackupEQ applies the EQ predicate on the "backup" field.
func BackupEQ(v bool) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldBackup, v))
}

// BackupNEQ applies the NEQ predicate on the "backup" field.
func BackupNEQ(v bool) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldBackup, v))
}

// BackupIsNil applies the IsNil predicate on the "backup" field.
func BackupIsNil() predicate.Contract {
	return predicate.Contract(sql.FieldIsNull(FieldBackup))
}

// BackupNotNil applies the NotNil predicate on the "backup" field.
func BackupNotNil() predicate.Contract {
	return predicate.Contract(sql.FieldNotNull(FieldBackup))
}

// ContractOperatorTypeEQ applies the EQ predicate on the "contract_operator_type" field.
func ContractOperatorTypeEQ(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldContractOperatorType, v))
}

// ContractOperatorTypeNEQ applies the NEQ predicate on the "contract_operator_type" field.
func ContractOperatorTypeNEQ(v string) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldContractOperatorType, v))
}

// ContractOperatorTypeIn applies the In predicate on the "contract_operator_type" field.
func ContractOperatorTypeIn(vs ...string) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldContractOperatorType, vs...))
}

// ContractOperatorTypeNotIn applies the NotIn predicate on the "contract_operator_type" field.
func ContractOperatorTypeNotIn(vs ...string) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldContractOperatorType, vs...))
}

// ContractOperatorTypeGT applies the GT predicate on the "contract_operator_type" field.
func ContractOperatorTypeGT(v string) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldContractOperatorType, v))
}

// ContractOperatorTypeGTE applies the GTE predicate on the "contract_operator_type" field.
func ContractOperatorTypeGTE(v string) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldContractOperatorType, v))
}

// ContractOperatorTypeLT applies the LT predicate on the "contract_operator_type" field.
func ContractOperatorTypeLT(v string) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldContractOperatorType, v))
}

// ContractOperatorTypeLTE applies the LTE predicate on the "contract_operator_type" field.
func ContractOperatorTypeLTE(v string) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldContractOperatorType, v))
}

// ContractOperatorTypeContains applies the Contains predicate on the "contract_operator_type" field.
func ContractOperatorTypeContains(v string) predicate.Contract {
	return predicate.Contract(sql.FieldContains(FieldContractOperatorType, v))
}

// ContractOperatorTypeHasPrefix applies the HasPrefix predicate on the "contract_operator_type" field.
func ContractOperatorTypeHasPrefix(v string) predicate.Contract {
	return predicate.Contract(sql.FieldHasPrefix(FieldContractOperatorType, v))
}

// ContractOperatorTypeHasSuffix applies the HasSuffix predicate on the "contract_operator_type" field.
func ContractOperatorTypeHasSuffix(v string) predicate.Contract {
	return predicate.Contract(sql.FieldHasSuffix(FieldContractOperatorType, v))
}

// ContractOperatorTypeIsNil applies the IsNil predicate on the "contract_operator_type" field.
func ContractOperatorTypeIsNil() predicate.Contract {
	return predicate.Contract(sql.FieldIsNull(FieldContractOperatorType))
}

// ContractOperatorTypeNotNil applies the NotNil predicate on the "contract_operator_type" field.
func ContractOperatorTypeNotNil() predicate.Contract {
	return predicate.Contract(sql.FieldNotNull(FieldContractOperatorType))
}

// ContractOperatorTypeEqualFold applies the EqualFold predicate on the "contract_operator_type" field.
func ContractOperatorTypeEqualFold(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEqualFold(FieldContractOperatorType, v))
}

// ContractOperatorTypeContainsFold applies the ContainsFold predicate on the "contract_operator_type" field.
func ContractOperatorTypeContainsFold(v string) predicate.Contract {
	return predicate.Contract(sql.FieldContainsFold(FieldContractOperatorType, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Contract) predicate.Contract {
	return predicate.Contract(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Contract) predicate.Contract {
	return predicate.Contract(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Contract) predicate.Contract {
	return predicate.Contract(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/user"
	"github.com/google/uuid"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UserUpdate) SetCreatedAt(u uint32) *UserUpdate {
	uu.mutation.ResetCreatedAt()
	uu.mutation.SetCreatedAt(u)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(u *uint32) *UserUpdate {
	if u != nil {
		uu.SetCreatedAt(*u)
	}
	return uu
}

// AddCreatedAt adds u to the "created_at" field.
func (uu *UserUpdate) AddCreatedAt(u int32) *UserUpdate {
	uu.mutation.AddCreatedAt(u)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(u uint32) *UserUpdate {
	uu.mutation.ResetUpdatedAt()
	uu.mutation.SetUpdatedAt(u)
	return uu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (uu *UserUpdate) AddUpdatedAt(u int32) *UserUpdate {
	uu.mutation.AddUpdatedAt(u)
	return uu
}

// SetDeletedAt sets the "deleted_at" field.
func (uu *UserUpdate) SetDeletedAt(u uint32) *UserUpdate {
	uu.mutation.ResetDeletedAt()
	uu.mutation.SetDeletedAt(u)
	return uu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeletedAt(u *uint32) *UserUpdate {
	if u != nil {
		uu.SetDeletedAt(*u)
	}
	return uu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (uu *UserUpdate) AddDeletedAt(u int32) *UserUpdate {
	uu.mutation.AddDeletedAt(u)
	return uu
}

// SetEntID sets the "ent_id" field.
func (uu *UserUpdate) SetEntID(u uuid.UUID) *UserUpdate {
	uu.mutation.SetEntID(u)
	return uu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEntID(u *uuid.UUID) *UserUpdate {
	if u != nil {
		uu.SetEntID(*u)
	}
	return uu
}

// SetAppID sets the "app_id" field.
func (uu *UserUpdate) SetAppID(u uuid.UUID) *UserUpdate {
	uu.mutation.SetAppID(u)
	return uu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAppID(u *uuid.UUID) *UserUpdate {
	if u != nil {
		uu.SetAppID(*u)
	}
	return uu
}

// ClearAppID clears the value of the "app_id" field.
func (uu *UserUpdate) ClearAppID() *UserUpdate {
	uu.mutation.ClearAppID()
	return uu
}

// SetUserID sets the "user_id" field.
func (uu *UserUpdate) SetUserID(u uuid.UUID) *UserUpdate {
	uu.mutation.SetUserID(u)
	return uu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUserID(u *uuid.UUID) *UserUpdate {
	if u != nil {
		uu.SetUserID(*u)
	}
	return uu
}

// ClearUserID clears the value of the "user_id" field.
func (uu *UserUpdate) ClearUserID() *UserUpdate {
	uu.mutation.ClearUserID()
	return uu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (uu *UserUpdate) SetCoinTypeID(u uuid.UUID) *UserUpdate {
	uu.mutation.SetCoinTypeID(u)
	return uu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCoinTypeID(u *uuid.UUID) *UserUpdate {
	if u != nil {
		uu.SetCoinTypeID(*u)
	}
	return uu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (uu *UserUpdate) ClearCoinTypeID() *UserUpdate {
	uu.mutation.ClearCoinTypeID()
	return uu
}

// SetAccountID sets the "account_id" field.
func (uu *UserUpdate) SetAccountID(u uuid.UUID) *UserUpdate {
	uu.mutation.SetAccountID(u)
	return uu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAccountID(u *uuid.UUID) *UserUpdate {
	if u != nil {
		uu.SetAccountID(*u)
	}
	return uu
}

// ClearAccountID clears the value of the "account_id" field.
func (uu *UserUpdate) ClearAccountID() *UserUpdate {
	uu.mutation.ClearAccountID()
	return uu
}

// SetUsedFor sets the "used_for" field.
func (uu *UserUpdate) SetUsedFor(s string) *UserUpdate {
	uu.mutation.SetUsedFor(s)
	return uu
}

// SetNillableUsedFor sets the "used_for" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsedFor(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsedFor(*s)
	}
	return uu
}

// ClearUsedFor clears the value of the "used_for" field.
func (uu *UserUpdate) ClearUsedFor() *UserUpdate {
	uu.mutation.ClearUsedFor()
	return uu
}

// SetLabels sets the "labels" field.
func (uu *UserUpdate) SetLabels(s []string) *UserUpdate {
	uu.mutation.SetLabels(s)
	return uu
}

// AppendLabels appends s to the "labels" field.
func (uu *UserUpdate) AppendLabels(s []string) *UserUpdate {
	uu.mutation.AppendLabels(s)
	return uu
}

// ClearLabels clears the value of the "labels" field.
func (uu *UserUpdate) ClearLabels() *UserUpdate {
	uu.mutation.ClearLabels()
	return uu
}

// SetMemo sets the "memo" field.
func (uu *UserUpdate) SetMemo(s string) *UserUpdate {
	uu.mutation.SetMemo(s)
	return uu
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (uu *UserUpdate) SetNillableMemo(s *string) *UserUpdate {
	if s != nil {
		uu.SetMemo(*s)
	}
	return uu
}

// ClearMemo clears the value of the "memo" field.
func (uu *UserUpdate) ClearMemo() *UserUpdate {
	uu.mutation.ClearMemo()
	return uu
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uu *UserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdate {
	uu.modifiers = append(uu.modifiers, modifiers...)
	return uu
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := uu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(user.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := uu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(user.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := uu.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := uu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(user.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := uu.mutation.EntID(); ok {
		_spec.SetField(user.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := uu.mutation.AppID(); ok {
		_spec.SetField(user.FieldAppID, field.TypeUUID, value)
	}
	if uu.mutation.AppIDCleared() {
		_spec.ClearField(user.FieldAppID, field.TypeUUID)
	}
	if value, ok := uu.mutation.UserID(); ok {
		_spec.SetField(user.FieldUserID, field.TypeUUID, value)
	}
	if uu.mutation.UserIDCleared() {
		_spec.ClearField(user.FieldUserID, field.TypeUUID)
	}
	if value, ok := uu.mutation.CoinTypeID(); ok {
		_spec.SetField(user.FieldCoinTypeID, field.TypeUUID, value)
	}
	if uu.mutation.CoinTypeIDCleared() {
		_spec.ClearField(user.FieldCoinTypeID, field.TypeUUID)
	}
	if value, ok := uu.mutation.AccountID(); ok {
		_spec.SetField(user.FieldAccountID, field.TypeUUID, value)
	}
	if uu.mutation.AccountIDCleared() {
		_spec.ClearField(user.FieldAccountID, field.TypeUUID)
	}
	if value, ok := uu.mutation.UsedFor(); ok {
		_spec.SetField(user.FieldUsedFor, field.TypeString, value)
	}
	if uu.mutation.UsedForCleared() {
		_spec.ClearField(user.FieldUsedFor, field.TypeString)
	}
	if value, ok := uu.mutation.Labels(); ok {
		_spec.SetField(user.FieldLabels, field.TypeJSON, value)
	}
	if value, ok := uu.mutation.AppendedLabels(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldLabels, value)
		})
	}
	if uu.mutation.LabelsCleared() {
		_spec.ClearField(user.FieldLabels, field.TypeJSON)
	}
	if value, ok := uu.mutation.Memo(); ok {
		_spec.SetField(user.FieldMemo, field.TypeString, value)
	}
	if uu.mutation.MemoCleared() {
		_spec.ClearField(user.FieldMemo, field.TypeString)
	}
	_spec.AddModifiers(uu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UserUpdateOne) SetCreatedAt(u uint32) *UserUpdateOne {
	uuo.mutation.ResetCreatedAt()
	uuo.mutation.SetCreatedAt(u)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(u *uint32) *UserUpdateOne {
	if u != nil {
		uuo.SetCreatedAt(*u)
	}
	return uuo
}

// AddCreatedAt adds u to the "created_at" field.
func (uuo *UserUpdateOne) AddCreatedAt(u int32) *UserUpdateOne {
	uuo.mutation.AddCreatedAt(u)
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(u uint32) *UserUpdateOne {
	uuo.mutation.ResetUpdatedAt()
	uuo.mutation.SetUpdatedAt(u)
	return uuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (uuo *UserUpdateOne) AddUpdatedAt(u int32) *UserUpdateOne {
	uuo.mutation.AddUpdatedAt(u)
	return uuo
}

// SetDeletedAt sets the "deleted_at" field.
func (uuo *UserUpdateOne) SetDeletedAt(u uint32) *UserUpdateOne {
	uuo.mutation.ResetDeletedAt()
	uuo.mutation.SetDeletedAt(u)
	return uuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeletedAt(u *uint32) *UserUpdateOne {
	if u != nil {
		uuo.SetDeletedAt(*u)
	}
	return uuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (uuo *UserUpdateOne) AddDeletedAt(u int32) *UserUpdateOne {
	uuo.mutation.AddDeletedAt(u)
	return uuo
}

// SetEntID sets the "ent_id" field.
func (uuo *UserUpdateOne) SetEntID(u uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetEntID(u)
	return uuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEntID(u *uuid.UUID) *UserUpdateOne {
	if u != nil {
		uuo.SetEntID(*u)
	}
	return uuo
}

// SetAppID sets the "app_id" field.
func (uuo *UserUpdateOne) SetAppID(u uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetAppID(u)
	return uuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAppID(u *uuid.UUID) *UserUpdateOne {
	if u != nil {
		uuo.SetAppID(*u)
	}
	return uuo
}

// ClearAppID clears the value of the "app_id" field.
func (uuo *UserUpdateOne) ClearAppID() *UserUpdateOne {
	uuo.mutation.ClearAppID()
	return uuo
}

// SetUserID sets the "user_id" field.
func (uuo *UserUpdateOne) SetUserID(u uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetUserID(u)
	return uuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUserID(u *uuid.UUID) *UserUpdateOne {
	if u != nil {
		uuo.SetUserID(*u)
	}
	return uuo
}

// ClearUserID clears the value of the "user_id" field.
func (uuo *UserUpdateOne) ClearUserID() *UserUpdateOne {
	uuo.mutation.ClearUserID()
	return uuo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (uuo *UserUpdateOne) SetCoinTypeID(u uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetCoinTypeID(u)
	return uuo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *UserUpdateOne {
	if u != nil {
		uuo.SetCoinTypeID(*u)
	}
	return uuo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (uuo *UserUpdateOne) ClearCoinTypeID() *UserUpdateOne {
	uuo.mutation.ClearCoinTypeID()
	return uuo
}

// SetAccountID sets the "account_id" field.
func (uuo *UserUpdateOne) SetAccountID(u uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetAccountID(u)
	return uuo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAccountID(u *uuid.UUID) *UserUpdateOne {
	if u != nil {
		uuo.SetAccountID(*u)
	}
	return uuo
}

// ClearAccountID clears the value of the "account_id" field.
func (uuo *UserUpdateOne) ClearAccountID() *UserUpdateOne {
	uuo.mutation.ClearAccountID()
	return uuo
}

// SetUsedFor sets the "used_for" field.
func (uuo *UserUpdateOne) SetUsedFor(s string) *UserUpdateOne {
	uuo.mutation.SetUsedFor(s)
	return uuo
}

// SetNillableUsedFor sets the "used_for" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsedFor(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsedFor(*s)
	}
	return uuo
}

// ClearUsedFor clears the value of the "used_for" field.
func (uuo *UserUpdateOne) ClearUsedFor() *UserUpdateOne {
	uuo.mutation.ClearUsedFor()
	return uuo
}

// SetLabels sets the "labels" field.
func (uuo *UserUpdateOne) SetLabels(s []string) *UserUpdateOne {
	uuo.mutation.SetLabels(s)
	return uuo
}

// AppendLabels appends s to the "labels" field.
func (uuo *UserUpdateOne) AppendLabels(s []string) *UserUpdateOne {
	uuo.mutation.AppendLabels(s)
	return uuo
}

// ClearLabels clears the value of the "labels" field.
func (uuo *UserUpdateOne) ClearLabels() *UserUpdateOne {
	uuo.mutation.ClearLabels()
	return uuo
}

// SetMemo sets the "memo" field.
func (uuo *UserUpdateOne) SetMemo(s string) *UserUpdateOne {
	uuo.mutation.SetMemo(s)
	return uuo
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableMemo(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetMemo(*s)
	}
	return uuo
}

// ClearMemo clears the value of the "memo" field.
func (uuo *UserUpdateOne) ClearMemo() *UserUpdateOne {
	uuo.mutation.ClearMemo()
	return uuo
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uuo *UserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdateOne {
	uuo.modifiers = append(uuo.modifiers, modifiers...)
	return uuo
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := uuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(user.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := uuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(user.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := uuo.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := uuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(user.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := uuo.mutation.EntID(); ok {
		_spec.SetField(user.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := uuo.mutation.AppID(); ok {
		_spec.SetField(user.FieldAppID, field.TypeUUID, value)
	}
	if uuo.mutation.AppIDCleared() {
		_spec.ClearField(user.FieldAppID, field.TypeUUID)
	}
	if value, ok := uuo.mutation.UserID(); ok {
		_spec.SetField(user.FieldUserID, field.TypeUUID, value)
	}
	if uuo.mutation.UserIDCleared() {
		_spec.ClearField(user.FieldUserID, field.TypeUUID)
	}
	if value, ok := uuo.mutation.CoinTypeID(); ok {
		_spec.SetField(user.FieldCoinTypeID, field.TypeUUID, value)
	}
	if uuo.mutation.CoinTypeIDCleared() {
		_spec.ClearField(user.FieldCoinTypeID, field.TypeUUID)
	}
	if value, ok := uuo.mutation.AccountID(); ok {
		_spec.SetField(user.FieldAccountID, field.TypeUUID, value)
	}
	if uuo.mutation.AccountIDCleared() {
		_spec.ClearField(user.FieldAccountID, field.TypeUUID)
	}
	if value, ok := uuo.mutation.UsedFor(); ok {
		_spec.SetField(user.FieldUsedFor, field.TypeString, value)
	}
	if uuo.mutation.UsedForCleared() {
		_spec.ClearField(user.FieldUsedFor, field.TypeString)
	}
	if value, ok := uuo.mutation.Labels(); ok {
		_spec.SetField(user.FieldLabels, field.TypeJSON, value)
	}
	if value, ok := uuo.mutation.AppendedLabels(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldLabels, value)
		})
	}
	if uuo.mutation.LabelsCleared() {
		_spec.ClearField(user.FieldLabels, field.TypeJSON)
	}
	if value, ok := uuo.mutation.Memo(); ok {
		_spec.SetField(user.FieldMemo, field.TypeString, value)
	}
	if uuo.mutation.MemoCleared() {
		_spec.ClearField(user.FieldMemo, field.TypeString)
	}
	_spec.AddModifiers(uuo.modifiers...)
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}

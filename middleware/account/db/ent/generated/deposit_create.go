// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/deposit"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// DepositCreate is the builder for creating a Deposit entity.
type DepositCreate struct {
	config
	mutation *DepositMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (dc *DepositCreate) SetCreatedAt(u uint32) *DepositCreate {
	dc.mutation.SetCreatedAt(u)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DepositCreate) SetNillableCreatedAt(u *uint32) *DepositCreate {
	if u != nil {
		dc.SetCreatedAt(*u)
	}
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DepositCreate) SetUpdatedAt(u uint32) *DepositCreate {
	dc.mutation.SetUpdatedAt(u)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DepositCreate) SetNillableUpdatedAt(u *uint32) *DepositCreate {
	if u != nil {
		dc.SetUpdatedAt(*u)
	}
	return dc
}

// SetDeletedAt sets the "deleted_at" field.
func (dc *DepositCreate) SetDeletedAt(u uint32) *DepositCreate {
	dc.mutation.SetDeletedAt(u)
	return dc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dc *DepositCreate) SetNillableDeletedAt(u *uint32) *DepositCreate {
	if u != nil {
		dc.SetDeletedAt(*u)
	}
	return dc
}

// SetEntID sets the "ent_id" field.
func (dc *DepositCreate) SetEntID(u uuid.UUID) *DepositCreate {
	dc.mutation.SetEntID(u)
	return dc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (dc *DepositCreate) SetNillableEntID(u *uuid.UUID) *DepositCreate {
	if u != nil {
		dc.SetEntID(*u)
	}
	return dc
}

// SetAppID sets the "app_id" field.
func (dc *DepositCreate) SetAppID(u uuid.UUID) *DepositCreate {
	dc.mutation.SetAppID(u)
	return dc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (dc *DepositCreate) SetNillableAppID(u *uuid.UUID) *DepositCreate {
	if u != nil {
		dc.SetAppID(*u)
	}
	return dc
}

// SetUserID sets the "user_id" field.
func (dc *DepositCreate) SetUserID(u uuid.UUID) *DepositCreate {
	dc.mutation.SetUserID(u)
	return dc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (dc *DepositCreate) SetNillableUserID(u *uuid.UUID) *DepositCreate {
	if u != nil {
		dc.SetUserID(*u)
	}
	return dc
}

// SetAccountID sets the "account_id" field.
func (dc *DepositCreate) SetAccountID(u uuid.UUID) *DepositCreate {
	dc.mutation.SetAccountID(u)
	return dc
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (dc *DepositCreate) SetNillableAccountID(u *uuid.UUID) *DepositCreate {
	if u != nil {
		dc.SetAccountID(*u)
	}
	return dc
}

// SetIncoming sets the "incoming" field.
func (dc *DepositCreate) SetIncoming(d decimal.Decimal) *DepositCreate {
	dc.mutation.SetIncoming(d)
	return dc
}

// SetNillableIncoming sets the "incoming" field if the given value is not nil.
func (dc *DepositCreate) SetNillableIncoming(d *decimal.Decimal) *DepositCreate {
	if d != nil {
		dc.SetIncoming(*d)
	}
	return dc
}

// SetOutcoming sets the "outcoming" field.
func (dc *DepositCreate) SetOutcoming(d decimal.Decimal) *DepositCreate {
	dc.mutation.SetOutcoming(d)
	return dc
}

// SetNillableOutcoming sets the "outcoming" field if the given value is not nil.
func (dc *DepositCreate) SetNillableOutcoming(d *decimal.Decimal) *DepositCreate {
	if d != nil {
		dc.SetOutcoming(*d)
	}
	return dc
}

// SetCollectingTid sets the "collecting_tid" field.
func (dc *DepositCreate) SetCollectingTid(u uuid.UUID) *DepositCreate {
	dc.mutation.SetCollectingTid(u)
	return dc
}

// SetNillableCollectingTid sets the "collecting_tid" field if the given value is not nil.
func (dc *DepositCreate) SetNillableCollectingTid(u *uuid.UUID) *DepositCreate {
	if u != nil {
		dc.SetCollectingTid(*u)
	}
	return dc
}

// SetScannableAt sets the "scannable_at" field.
func (dc *DepositCreate) SetScannableAt(u uint32) *DepositCreate {
	dc.mutation.SetScannableAt(u)
	return dc
}

// SetNillableScannableAt sets the "scannable_at" field if the given value is not nil.
func (dc *DepositCreate) SetNillableScannableAt(u *uint32) *DepositCreate {
	if u != nil {
		dc.SetScannableAt(*u)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DepositCreate) SetID(u uint32) *DepositCreate {
	dc.mutation.SetID(u)
	return dc
}

// Mutation returns the DepositMutation object of the builder.
func (dc *DepositCreate) Mutation() *DepositMutation {
	return dc.mutation
}

// Save creates the Deposit in the database.
func (dc *DepositCreate) Save(ctx context.Context) (*Deposit, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DepositCreate) SaveX(ctx context.Context) *Deposit {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DepositCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DepositCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DepositCreate) defaults() {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := deposit.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		v := deposit.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dc.mutation.DeletedAt(); !ok {
		v := deposit.DefaultDeletedAt()
		dc.mutation.SetDeletedAt(v)
	}
	if _, ok := dc.mutation.EntID(); !ok {
		v := deposit.DefaultEntID()
		dc.mutation.SetEntID(v)
	}
	if _, ok := dc.mutation.AppID(); !ok {
		v := deposit.DefaultAppID()
		dc.mutation.SetAppID(v)
	}
	if _, ok := dc.mutation.UserID(); !ok {
		v := deposit.DefaultUserID()
		dc.mutation.SetUserID(v)
	}
	if _, ok := dc.mutation.AccountID(); !ok {
		v := deposit.DefaultAccountID()
		dc.mutation.SetAccountID(v)
	}
	if _, ok := dc.mutation.Incoming(); !ok {
		v := deposit.DefaultIncoming
		dc.mutation.SetIncoming(v)
	}
	if _, ok := dc.mutation.Outcoming(); !ok {
		v := deposit.DefaultOutcoming
		dc.mutation.SetOutcoming(v)
	}
	if _, ok := dc.mutation.CollectingTid(); !ok {
		v := deposit.DefaultCollectingTid()
		dc.mutation.SetCollectingTid(v)
	}
	if _, ok := dc.mutation.ScannableAt(); !ok {
		v := deposit.DefaultScannableAt()
		dc.mutation.SetScannableAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DepositCreate) check() error {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Deposit.created_at"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Deposit.updated_at"`)}
	}
	if _, ok := dc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "Deposit.deleted_at"`)}
	}
	if _, ok := dc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "Deposit.ent_id"`)}
	}
	return nil
}

func (dc *DepositCreate) sqlSave(ctx context.Context) (*Deposit, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DepositCreate) createSpec() (*Deposit, *sqlgraph.CreateSpec) {
	var (
		_node = &Deposit{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(deposit.Table, sqlgraph.NewFieldSpec(deposit.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = dc.conflict
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(deposit.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(deposit.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := dc.mutation.DeletedAt(); ok {
		_spec.SetField(deposit.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := dc.mutation.EntID(); ok {
		_spec.SetField(deposit.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := dc.mutation.AppID(); ok {
		_spec.SetField(deposit.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := dc.mutation.UserID(); ok {
		_spec.SetField(deposit.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := dc.mutation.AccountID(); ok {
		_spec.SetField(deposit.FieldAccountID, field.TypeUUID, value)
		_node.AccountID = value
	}
	if value, ok := dc.mutation.Incoming(); ok {
		_spec.SetField(deposit.FieldIncoming, field.TypeOther, value)
		_node.Incoming = value
	}
	if value, ok := dc.mutation.Outcoming(); ok {
		_spec.SetField(deposit.FieldOutcoming, field.TypeOther, value)
		_node.Outcoming = value
	}
	if value, ok := dc.mutation.CollectingTid(); ok {
		_spec.SetField(deposit.FieldCollectingTid, field.TypeUUID, value)
		_node.CollectingTid = value
	}
	if value, ok := dc.mutation.ScannableAt(); ok {
		_spec.SetField(deposit.FieldScannableAt, field.TypeUint32, value)
		_node.ScannableAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Deposit.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DepositUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (dc *DepositCreate) OnConflict(opts ...sql.ConflictOption) *DepositUpsertOne {
	dc.conflict = opts
	return &DepositUpsertOne{
		create: dc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Deposit.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dc *DepositCreate) OnConflictColumns(columns ...string) *DepositUpsertOne {
	dc.conflict = append(dc.conflict, sql.ConflictColumns(columns...))
	return &DepositUpsertOne{
		create: dc,
	}
}

type (
	// DepositUpsertOne is the builder for "upsert"-ing
	//  one Deposit node.
	DepositUpsertOne struct {
		create *DepositCreate
	}

	// DepositUpsert is the "OnConflict" setter.
	DepositUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *DepositUpsert) SetCreatedAt(v uint32) *DepositUpsert {
	u.Set(deposit.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DepositUpsert) UpdateCreatedAt() *DepositUpsert {
	u.SetExcluded(deposit.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *DepositUpsert) AddCreatedAt(v uint32) *DepositUpsert {
	u.Add(deposit.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DepositUpsert) SetUpdatedAt(v uint32) *DepositUpsert {
	u.Set(deposit.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DepositUpsert) UpdateUpdatedAt() *DepositUpsert {
	u.SetExcluded(deposit.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *DepositUpsert) AddUpdatedAt(v uint32) *DepositUpsert {
	u.Add(deposit.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DepositUpsert) SetDeletedAt(v uint32) *DepositUpsert {
	u.Set(deposit.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DepositUpsert) UpdateDeletedAt() *DepositUpsert {
	u.SetExcluded(deposit.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *DepositUpsert) AddDeletedAt(v uint32) *DepositUpsert {
	u.Add(deposit.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *DepositUpsert) SetEntID(v uuid.UUID) *DepositUpsert {
	u.Set(deposit.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *DepositUpsert) UpdateEntID() *DepositUpsert {
	u.SetExcluded(deposit.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *DepositUpsert) SetAppID(v uuid.UUID) *DepositUpsert {
	u.Set(deposit.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *DepositUpsert) UpdateAppID() *DepositUpsert {
	u.SetExcluded(deposit.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *DepositUpsert) ClearAppID() *DepositUpsert {
	u.SetNull(deposit.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *DepositUpsert) SetUserID(v uuid.UUID) *DepositUpsert {
	u.Set(deposit.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *DepositUpsert) UpdateUserID() *DepositUpsert {
	u.SetExcluded(deposit.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *DepositUpsert) ClearUserID() *DepositUpsert {
	u.SetNull(deposit.FieldUserID)
	return u
}

// SetAccountID sets the "account_id" field.
func (u *DepositUpsert) SetAccountID(v uuid.UUID) *DepositUpsert {
	u.Set(deposit.FieldAccountID, v)
	return u
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *DepositUpsert) UpdateAccountID() *DepositUpsert {
	u.SetExcluded(deposit.FieldAccountID)
	return u
}

// ClearAccountID clears the value of the "account_id" field.
func (u *DepositUpsert) ClearAccountID() *DepositUpsert {
	u.SetNull(deposit.FieldAccountID)
	return u
}

// SetIncoming sets the "incoming" field.
func (u *DepositUpsert) SetIncoming(v decimal.Decimal) *DepositUpsert {
	u.Set(deposit.FieldIncoming, v)
	return u
}

// UpdateIncoming sets the "incoming" field to the value that was provided on create.
func (u *DepositUpsert) UpdateIncoming() *DepositUpsert {
	u.SetExcluded(deposit.FieldIncoming)
	return u
}

// ClearIncoming clears the value of the "incoming" field.
func (u *DepositUpsert) ClearIncoming() *DepositUpsert {
	u.SetNull(deposit.FieldIncoming)
	return u
}

// SetOutcoming sets the "outcoming" field.
func (u *DepositUpsert) SetOutcoming(v decimal.Decimal) *DepositUpsert {
	u.Set(deposit.FieldOutcoming, v)
	return u
}

// UpdateOutcoming sets the "outcoming" field to the value that was provided on create.
func (u *DepositUpsert) UpdateOutcoming() *DepositUpsert {
	u.SetExcluded(deposit.FieldOutcoming)
	return u
}

// ClearOutcoming clears the value of the "outcoming" field.
func (u *DepositUpsert) ClearOutcoming() *DepositUpsert {
	u.SetNull(deposit.FieldOutcoming)
	return u
}

// SetCollectingTid sets the "collecting_tid" field.
func (u *DepositUpsert) SetCollectingTid(v uuid.UUID) *DepositUpsert {
	u.Set(deposit.FieldCollectingTid, v)
	return u
}

// UpdateCollectingTid sets the "collecting_tid" field to the value that was provided on create.
func (u *DepositUpsert) UpdateCollectingTid() *DepositUpsert {
	u.SetExcluded(deposit.FieldCollectingTid)
	return u
}

// ClearCollectingTid clears the value of the "collecting_tid" field.
func (u *DepositUpsert) ClearCollectingTid() *DepositUpsert {
	u.SetNull(deposit.FieldCollectingTid)
	return u
}

// SetScannableAt sets the "scannable_at" field.
func (u *DepositUpsert) SetScannableAt(v uint32) *DepositUpsert {
	u.Set(deposit.FieldScannableAt, v)
	return u
}

// UpdateScannableAt sets the "scannable_at" field to the value that was provided on create.
func (u *DepositUpsert) UpdateScannableAt() *DepositUpsert {
	u.SetExcluded(deposit.FieldScannableAt)
	return u
}

// AddScannableAt adds v to the "scannable_at" field.
func (u *DepositUpsert) AddScannableAt(v uint32) *DepositUpsert {
	u.Add(deposit.FieldScannableAt, v)
	return u
}

// ClearScannableAt clears the value of the "scannable_at" field.
func (u *DepositUpsert) ClearScannableAt() *DepositUpsert {
	u.SetNull(deposit.FieldScannableAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Deposit.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deposit.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DepositUpsertOne) UpdateNewValues() *DepositUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(deposit.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Deposit.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DepositUpsertOne) Ignore() *DepositUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DepositUpsertOne) DoNothing() *DepositUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DepositCreate.OnConflict
// documentation for more info.
func (u *DepositUpsertOne) Update(set func(*DepositUpsert)) *DepositUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DepositUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *DepositUpsertOne) SetCreatedAt(v uint32) *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *DepositUpsertOne) AddCreatedAt(v uint32) *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DepositUpsertOne) UpdateCreatedAt() *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DepositUpsertOne) SetUpdatedAt(v uint32) *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *DepositUpsertOne) AddUpdatedAt(v uint32) *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DepositUpsertOne) UpdateUpdatedAt() *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DepositUpsertOne) SetDeletedAt(v uint32) *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *DepositUpsertOne) AddDeletedAt(v uint32) *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DepositUpsertOne) UpdateDeletedAt() *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *DepositUpsertOne) SetEntID(v uuid.UUID) *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *DepositUpsertOne) UpdateEntID() *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *DepositUpsertOne) SetAppID(v uuid.UUID) *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *DepositUpsertOne) UpdateAppID() *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *DepositUpsertOne) ClearAppID() *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *DepositUpsertOne) SetUserID(v uuid.UUID) *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *DepositUpsertOne) UpdateUserID() *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *DepositUpsertOne) ClearUserID() *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.ClearUserID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *DepositUpsertOne) SetAccountID(v uuid.UUID) *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *DepositUpsertOne) UpdateAccountID() *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateAccountID()
	})
}

// ClearAccountID clears the value of the "account_id" field.
func (u *DepositUpsertOne) ClearAccountID() *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.ClearAccountID()
	})
}

// SetIncoming sets the "incoming" field.
func (u *DepositUpsertOne) SetIncoming(v decimal.Decimal) *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.SetIncoming(v)
	})
}

// UpdateIncoming sets the "incoming" field to the value that was provided on create.
func (u *DepositUpsertOne) UpdateIncoming() *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateIncoming()
	})
}

// ClearIncoming clears the value of the "incoming" field.
func (u *DepositUpsertOne) ClearIncoming() *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.ClearIncoming()
	})
}

// SetOutcoming sets the "outcoming" field.
func (u *DepositUpsertOne) SetOutcoming(v decimal.Decimal) *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.SetOutcoming(v)
	})
}

// UpdateOutcoming sets the "outcoming" field to the value that was provided on create.
func (u *DepositUpsertOne) UpdateOutcoming() *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateOutcoming()
	})
}

// ClearOutcoming clears the value of the "outcoming" field.
func (u *DepositUpsertOne) ClearOutcoming() *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.ClearOutcoming()
	})
}

// SetCollectingTid sets the "collecting_tid" field.
func (u *DepositUpsertOne) SetCollectingTid(v uuid.UUID) *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.SetCollectingTid(v)
	})
}

// UpdateCollectingTid sets the "collecting_tid" field to the value that was provided on create.
func (u *DepositUpsertOne) UpdateCollectingTid() *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateCollectingTid()
	})
}

// ClearCollectingTid clears the value of the "collecting_tid" field.
func (u *DepositUpsertOne) ClearCollectingTid() *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.ClearCollectingTid()
	})
}

// SetScannableAt sets the "scannable_at" field.
func (u *DepositUpsertOne) SetScannableAt(v uint32) *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.SetScannableAt(v)
	})
}

// AddScannableAt adds v to the "scannable_at" field.
func (u *DepositUpsertOne) AddScannableAt(v uint32) *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.AddScannableAt(v)
	})
}

// UpdateScannableAt sets the "scannable_at" field to the value that was provided on create.
func (u *DepositUpsertOne) UpdateScannableAt() *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateScannableAt()
	})
}

// ClearScannableAt clears the value of the "scannable_at" field.
func (u *DepositUpsertOne) ClearScannableAt() *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.ClearScannableAt()
	})
}

// Exec executes the query.
func (u *DepositUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for DepositCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DepositUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DepositUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DepositUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DepositCreateBulk is the builder for creating many Deposit entities in bulk.
type DepositCreateBulk struct {
	config
	err      error
	builders []*DepositCreate
	conflict []sql.ConflictOption
}

// Save creates the Deposit entities in the database.
func (dcb *DepositCreateBulk) Save(ctx context.Context) ([]*Deposit, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Deposit, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DepositMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DepositCreateBulk) SaveX(ctx context.Context) []*Deposit {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DepositCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DepositCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Deposit.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DepositUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (dcb *DepositCreateBulk) OnConflict(opts ...sql.ConflictOption) *DepositUpsertBulk {
	dcb.conflict = opts
	return &DepositUpsertBulk{
		create: dcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Deposit.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dcb *DepositCreateBulk) OnConflictColumns(columns ...string) *DepositUpsertBulk {
	dcb.conflict = append(dcb.conflict, sql.ConflictColumns(columns...))
	return &DepositUpsertBulk{
		create: dcb,
	}
}

// DepositUpsertBulk is the builder for "upsert"-ing
// a bulk of Deposit nodes.
type DepositUpsertBulk struct {
	create *DepositCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Deposit.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deposit.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DepositUpsertBulk) UpdateNewValues() *DepositUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(deposit.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Deposit.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DepositUpsertBulk) Ignore() *DepositUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DepositUpsertBulk) DoNothing() *DepositUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DepositCreateBulk.OnConflict
// documentation for more info.
func (u *DepositUpsertBulk) Update(set func(*DepositUpsert)) *DepositUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DepositUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *DepositUpsertBulk) SetCreatedAt(v uint32) *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *DepositUpsertBulk) AddCreatedAt(v uint32) *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DepositUpsertBulk) UpdateCreatedAt() *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DepositUpsertBulk) SetUpdatedAt(v uint32) *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *DepositUpsertBulk) AddUpdatedAt(v uint32) *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DepositUpsertBulk) UpdateUpdatedAt() *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DepositUpsertBulk) SetDeletedAt(v uint32) *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *DepositUpsertBulk) AddDeletedAt(v uint32) *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DepositUpsertBulk) UpdateDeletedAt() *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *DepositUpsertBulk) SetEntID(v uuid.UUID) *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *DepositUpsertBulk) UpdateEntID() *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *DepositUpsertBulk) SetAppID(v uuid.UUID) *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *DepositUpsertBulk) UpdateAppID() *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *DepositUpsertBulk) ClearAppID() *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *DepositUpsertBulk) SetUserID(v uuid.UUID) *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *DepositUpsertBulk) UpdateUserID() *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *DepositUpsertBulk) ClearUserID() *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.ClearUserID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *DepositUpsertBulk) SetAccountID(v uuid.UUID) *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *DepositUpsertBulk) UpdateAccountID() *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateAccountID()
	})
}

// ClearAccountID clears the value of the "account_id" field.
func (u *DepositUpsertBulk) ClearAccountID() *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.ClearAccountID()
	})
}

// SetIncoming sets the "incoming" field.
func (u *DepositUpsertBulk) SetIncoming(v decimal.Decimal) *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.SetIncoming(v)
	})
}

// UpdateIncoming sets the "incoming" field to the value that was provided on create.
func (u *DepositUpsertBulk) UpdateIncoming() *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateIncoming()
	})
}

// ClearIncoming clears the value of the "incoming" field.
func (u *DepositUpsertBulk) ClearIncoming() *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.ClearIncoming()
	})
}

// SetOutcoming sets the "outcoming" field.
func (u *DepositUpsertBulk) SetOutcoming(v decimal.Decimal) *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.SetOutcoming(v)
	})
}

// UpdateOutcoming sets the "outcoming" field to the value that was provided on create.
func (u *DepositUpsertBulk) UpdateOutcoming() *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateOutcoming()
	})
}

// ClearOutcoming clears the value of the "outcoming" field.
func (u *DepositUpsertBulk) ClearOutcoming() *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.ClearOutcoming()
	})
}

// SetCollectingTid sets the "collecting_tid" field.
func (u *DepositUpsertBulk) SetCollectingTid(v uuid.UUID) *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.SetCollectingTid(v)
	})
}

// UpdateCollectingTid sets the "collecting_tid" field to the value that was provided on create.
func (u *DepositUpsertBulk) UpdateCollectingTid() *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateCollectingTid()
	})
}

// ClearCollectingTid clears the value of the "collecting_tid" field.
func (u *DepositUpsertBulk) ClearCollectingTid() *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.ClearCollectingTid()
	})
}

// SetScannableAt sets the "scannable_at" field.
func (u *DepositUpsertBulk) SetScannableAt(v uint32) *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.SetScannableAt(v)
	})
}

// AddScannableAt adds v to the "scannable_at" field.
func (u *DepositUpsertBulk) AddScannableAt(v uint32) *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.AddScannableAt(v)
	})
}

// UpdateScannableAt sets the "scannable_at" field to the value that was provided on create.
func (u *DepositUpsertBulk) UpdateScannableAt() *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateScannableAt()
	})
}

// ClearScannableAt clears the value of the "scannable_at" field.
func (u *DepositUpsertBulk) ClearScannableAt() *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.ClearScannableAt()
	})
}

// Exec executes the query.
func (u *DepositUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the DepositCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for DepositCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DepositUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/account"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/contract"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/deposit"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/goodbenefit"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/orderbenefit"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/payment"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/platform"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/transfer"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 9)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   account.Table,
			Columns: account.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: account.FieldID,
			},
		},
		Type: "Account",
		Fields: map[string]*sqlgraph.FieldSpec{
			account.FieldCreatedAt:              {Type: field.TypeUint32, Column: account.FieldCreatedAt},
			account.FieldUpdatedAt:              {Type: field.TypeUint32, Column: account.FieldUpdatedAt},
			account.FieldDeletedAt:              {Type: field.TypeUint32, Column: account.FieldDeletedAt},
			account.FieldEntID:                  {Type: field.TypeUUID, Column: account.FieldEntID},
			account.FieldCoinTypeID:             {Type: field.TypeUUID, Column: account.FieldCoinTypeID},
			account.FieldAddress:                {Type: field.TypeString, Column: account.FieldAddress},
			account.FieldUsedFor:                {Type: field.TypeString, Column: account.FieldUsedFor},
			account.FieldPlatformHoldPrivateKey: {Type: field.TypeBool, Column: account.FieldPlatformHoldPrivateKey},
			account.FieldActive:                 {Type: field.TypeBool, Column: account.FieldActive},
			account.FieldLocked:                 {Type: field.TypeBool, Column: account.FieldLocked},
			account.FieldLockedBy:               {Type: field.TypeString, Column: account.FieldLockedBy},
			account.FieldBlocked:                {Type: field.TypeBool, Column: account.FieldBlocked},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   contract.Table,
			Columns: contract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: contract.FieldID,
			},
		},
		Type: "Contract",
		Fields: map[string]*sqlgraph.FieldSpec{
			contract.FieldCreatedAt:            {Type: field.TypeUint32, Column: contract.FieldCreatedAt},
			contract.FieldUpdatedAt:            {Type: field.TypeUint32, Column: contract.FieldUpdatedAt},
			contract.FieldDeletedAt:            {Type: field.TypeUint32, Column: contract.FieldDeletedAt},
			contract.FieldEntID:                {Type: field.TypeUUID, Column: contract.FieldEntID},
			contract.FieldGoodID:               {Type: field.TypeUUID, Column: contract.FieldGoodID},
			contract.FieldDelegatedStakingID:   {Type: field.TypeUUID, Column: contract.FieldDelegatedStakingID},
			contract.FieldAccountID:            {Type: field.TypeUUID, Column: contract.FieldAccountID},
			contract.FieldBackup:               {Type: field.TypeBool, Column: contract.FieldBackup},
			contract.FieldContractOperatorType: {Type: field.TypeString, Column: contract.FieldContractOperatorType},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   deposit.Table,
			Columns: deposit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: deposit.FieldID,
			},
		},
		Type: "Deposit",
		Fields: map[string]*sqlgraph.FieldSpec{
			deposit.FieldCreatedAt:     {Type: field.TypeUint32, Column: deposit.FieldCreatedAt},
			deposit.FieldUpdatedAt:     {Type: field.TypeUint32, Column: deposit.FieldUpdatedAt},
			deposit.FieldDeletedAt:     {Type: field.TypeUint32, Column: deposit.FieldDeletedAt},
			deposit.FieldEntID:         {Type: field.TypeUUID, Column: deposit.FieldEntID},
			deposit.FieldAppID:         {Type: field.TypeUUID, Column: deposit.FieldAppID},
			deposit.FieldUserID:        {Type: field.TypeUUID, Column: deposit.FieldUserID},
			deposit.FieldAccountID:     {Type: field.TypeUUID, Column: deposit.FieldAccountID},
			deposit.FieldIncoming:      {Type: field.TypeOther, Column: deposit.FieldIncoming},
			deposit.FieldOutcoming:     {Type: field.TypeOther, Column: deposit.FieldOutcoming},
			deposit.FieldCollectingTid: {Type: field.TypeUUID, Column: deposit.FieldCollectingTid},
			deposit.FieldScannableAt:   {Type: field.TypeUint32, Column: deposit.FieldScannableAt},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   goodbenefit.Table,
			Columns: goodbenefit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: goodbenefit.FieldID,
			},
		},
		Type: "GoodBenefit",
		Fields: map[string]*sqlgraph.FieldSpec{
			goodbenefit.FieldCreatedAt:     {Type: field.TypeUint32, Column: goodbenefit.FieldCreatedAt},
			goodbenefit.FieldUpdatedAt:     {Type: field.TypeUint32, Column: goodbenefit.FieldUpdatedAt},
			goodbenefit.FieldDeletedAt:     {Type: field.TypeUint32, Column: goodbenefit.FieldDeletedAt},
			goodbenefit.FieldEntID:         {Type: field.TypeUUID, Column: goodbenefit.FieldEntID},
			goodbenefit.FieldGoodID:        {Type: field.TypeUUID, Column: goodbenefit.FieldGoodID},
			goodbenefit.FieldAccountID:     {Type: field.TypeUUID, Column: goodbenefit.FieldAccountID},
			goodbenefit.FieldBackup:        {Type: field.TypeBool, Column: goodbenefit.FieldBackup},
			goodbenefit.FieldTransactionID: {Type: field.TypeUUID, Column: goodbenefit.FieldTransactionID},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orderbenefit.Table,
			Columns: orderbenefit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: orderbenefit.FieldID,
			},
		},
		Type: "OrderBenefit",
		Fields: map[string]*sqlgraph.FieldSpec{
			orderbenefit.FieldCreatedAt:  {Type: field.TypeUint32, Column: orderbenefit.FieldCreatedAt},
			orderbenefit.FieldUpdatedAt:  {Type: field.TypeUint32, Column: orderbenefit.FieldUpdatedAt},
			orderbenefit.FieldDeletedAt:  {Type: field.TypeUint32, Column: orderbenefit.FieldDeletedAt},
			orderbenefit.FieldEntID:      {Type: field.TypeUUID, Column: orderbenefit.FieldEntID},
			orderbenefit.FieldAppID:      {Type: field.TypeUUID, Column: orderbenefit.FieldAppID},
			orderbenefit.FieldUserID:     {Type: field.TypeUUID, Column: orderbenefit.FieldUserID},
			orderbenefit.FieldCoinTypeID: {Type: field.TypeUUID, Column: orderbenefit.FieldCoinTypeID},
			orderbenefit.FieldAccountID:  {Type: field.TypeUUID, Column: orderbenefit.FieldAccountID},
			orderbenefit.FieldOrderID:    {Type: field.TypeUUID, Column: orderbenefit.FieldOrderID},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   payment.Table,
			Columns: payment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: payment.FieldID,
			},
		},
		Type: "Payment",
		Fields: map[string]*sqlgraph.FieldSpec{
			payment.FieldCreatedAt:     {Type: field.TypeUint32, Column: payment.FieldCreatedAt},
			payment.FieldUpdatedAt:     {Type: field.TypeUint32, Column: payment.FieldUpdatedAt},
			payment.FieldDeletedAt:     {Type: field.TypeUint32, Column: payment.FieldDeletedAt},
			payment.FieldEntID:         {Type: field.TypeUUID, Column: payment.FieldEntID},
			payment.FieldAccountID:     {Type: field.TypeUUID, Column: payment.FieldAccountID},
			payment.FieldCollectingTid: {Type: field.TypeUUID, Column: payment.FieldCollectingTid},
			payment.FieldAvailableAt:   {Type: field.TypeUint32, Column: payment.FieldAvailableAt},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   platform.Table,
			Columns: platform.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: platform.FieldID,
			},
		},
		Type: "Platform",
		Fields: map[string]*sqlgraph.FieldSpec{
			platform.FieldCreatedAt: {Type: field.TypeUint32, Column: platform.FieldCreatedAt},
			platform.FieldUpdatedAt: {Type: field.TypeUint32, Column: platform.FieldUpdatedAt},
			platform.FieldDeletedAt: {Type: field.TypeUint32, Column: platform.FieldDeletedAt},
			platform.FieldEntID:     {Type: field.TypeUUID, Column: platform.FieldEntID},
			platform.FieldAccountID: {Type: field.TypeUUID, Column: platform.FieldAccountID},
			platform.FieldUsedFor:   {Type: field.TypeString, Column: platform.FieldUsedFor},
			platform.FieldBackup:    {Type: field.TypeBool, Column: platform.FieldBackup},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   transfer.Table,
			Columns: transfer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: transfer.FieldID,
			},
		},
		Type: "Transfer",
		Fields: map[string]*sqlgraph.FieldSpec{
			transfer.FieldCreatedAt:    {Type: field.TypeUint32, Column: transfer.FieldCreatedAt},
			transfer.FieldUpdatedAt:    {Type: field.TypeUint32, Column: transfer.FieldUpdatedAt},
			transfer.FieldDeletedAt:    {Type: field.TypeUint32, Column: transfer.FieldDeletedAt},
			transfer.FieldEntID:        {Type: field.TypeUUID, Column: transfer.FieldEntID},
			transfer.FieldAppID:        {Type: field.TypeUUID, Column: transfer.FieldAppID},
			transfer.FieldUserID:       {Type: field.TypeUUID, Column: transfer.FieldUserID},
			transfer.FieldTargetUserID: {Type: field.TypeUUID, Column: transfer.FieldTargetUserID},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreatedAt:  {Type: field.TypeUint32, Column: user.FieldCreatedAt},
			user.FieldUpdatedAt:  {Type: field.TypeUint32, Column: user.FieldUpdatedAt},
			user.FieldDeletedAt:  {Type: field.TypeUint32, Column: user.FieldDeletedAt},
			user.FieldEntID:      {Type: field.TypeUUID, Column: user.FieldEntID},
			user.FieldAppID:      {Type: field.TypeUUID, Column: user.FieldAppID},
			user.FieldUserID:     {Type: field.TypeUUID, Column: user.FieldUserID},
			user.FieldCoinTypeID: {Type: field.TypeUUID, Column: user.FieldCoinTypeID},
			user.FieldAccountID:  {Type: field.TypeUUID, Column: user.FieldAccountID},
			user.FieldUsedFor:    {Type: field.TypeString, Column: user.FieldUsedFor},
			user.FieldLabels:     {Type: field.TypeJSON, Column: user.FieldLabels},
			user.FieldMemo:       {Type: field.TypeString, Column: user.FieldMemo},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (aq *AccountQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AccountQuery builder.
func (aq *AccountQuery) Filter() *AccountFilter {
	return &AccountFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AccountMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AccountMutation builder.
func (m *AccountMutation) Filter() *AccountFilter {
	return &AccountFilter{config: m.config, predicateAdder: m}
}

// AccountFilter provides a generic filtering capability at runtime for AccountQuery.
type AccountFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AccountFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AccountFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(account.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AccountFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(account.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AccountFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(account.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AccountFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(account.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AccountFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(account.FieldEntID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *AccountFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(account.FieldCoinTypeID))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *AccountFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(account.FieldAddress))
}

// WhereUsedFor applies the entql string predicate on the used_for field.
func (f *AccountFilter) WhereUsedFor(p entql.StringP) {
	f.Where(p.Field(account.FieldUsedFor))
}

// WherePlatformHoldPrivateKey applies the entql bool predicate on the platform_hold_private_key field.
func (f *AccountFilter) WherePlatformHoldPrivateKey(p entql.BoolP) {
	f.Where(p.Field(account.FieldPlatformHoldPrivateKey))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *AccountFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(account.FieldActive))
}

// WhereLocked applies the entql bool predicate on the locked field.
func (f *AccountFilter) WhereLocked(p entql.BoolP) {
	f.Where(p.Field(account.FieldLocked))
}

// WhereLockedBy applies the entql string predicate on the locked_by field.
func (f *AccountFilter) WhereLockedBy(p entql.StringP) {
	f.Where(p.Field(account.FieldLockedBy))
}

// WhereBlocked applies the entql bool predicate on the blocked field.
func (f *AccountFilter) WhereBlocked(p entql.BoolP) {
	f.Where(p.Field(account.FieldBlocked))
}

// addPredicate implements the predicateAdder interface.
func (cq *ContractQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ContractQuery builder.
func (cq *ContractQuery) Filter() *ContractFilter {
	return &ContractFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *ContractMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ContractMutation builder.
func (m *ContractMutation) Filter() *ContractFilter {
	return &ContractFilter{config: m.config, predicateAdder: m}
}

// ContractFilter provides a generic filtering capability at runtime for ContractQuery.
type ContractFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ContractFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *ContractFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(contract.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *ContractFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(contract.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *ContractFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(contract.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *ContractFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(contract.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *ContractFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(contract.FieldEntID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *ContractFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(contract.FieldGoodID))
}

// WhereDelegatedStakingID applies the entql [16]byte predicate on the delegated_staking_id field.
func (f *ContractFilter) WhereDelegatedStakingID(p entql.ValueP) {
	f.Where(p.Field(contract.FieldDelegatedStakingID))
}

// WhereAccountID applies the entql [16]byte predicate on the account_id field.
func (f *ContractFilter) WhereAccountID(p entql.ValueP) {
	f.Where(p.Field(contract.FieldAccountID))
}

// WhereBackup applies the entql bool predicate on the backup field.
func (f *ContractFilter) WhereBackup(p entql.BoolP) {
	f.Where(p.Field(contract.FieldBackup))
}

// WhereContractOperatorType applies the entql string predicate on the contract_operator_type field.
func (f *ContractFilter) WhereContractOperatorType(p entql.StringP) {
	f.Where(p.Field(contract.FieldContractOperatorType))
}

// addPredicate implements the predicateAdder interface.
func (dq *DepositQuery) addPredicate(pred func(s *sql.Selector)) {
	dq.predicates = append(dq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DepositQuery builder.
func (dq *DepositQuery) Filter() *DepositFilter {
	return &DepositFilter{config: dq.config, predicateAdder: dq}
}

// addPredicate implements the predicateAdder interface.
func (m *DepositMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DepositMutation builder.
func (m *DepositMutation) Filter() *DepositFilter {
	return &DepositFilter{config: m.config, predicateAdder: m}
}

// DepositFilter provides a generic filtering capability at runtime for DepositQuery.
type DepositFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DepositFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *DepositFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(deposit.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *DepositFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(deposit.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *DepositFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(deposit.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *DepositFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(deposit.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *DepositFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(deposit.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *DepositFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(deposit.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *DepositFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(deposit.FieldUserID))
}

// WhereAccountID applies the entql [16]byte predicate on the account_id field.
func (f *DepositFilter) WhereAccountID(p entql.ValueP) {
	f.Where(p.Field(deposit.FieldAccountID))
}

// WhereIncoming applies the entql other predicate on the incoming field.
func (f *DepositFilter) WhereIncoming(p entql.OtherP) {
	f.Where(p.Field(deposit.FieldIncoming))
}

// WhereOutcoming applies the entql other predicate on the outcoming field.
func (f *DepositFilter) WhereOutcoming(p entql.OtherP) {
	f.Where(p.Field(deposit.FieldOutcoming))
}

// WhereCollectingTid applies the entql [16]byte predicate on the collecting_tid field.
func (f *DepositFilter) WhereCollectingTid(p entql.ValueP) {
	f.Where(p.Field(deposit.FieldCollectingTid))
}

// WhereScannableAt applies the entql uint32 predicate on the scannable_at field.
func (f *DepositFilter) WhereScannableAt(p entql.Uint32P) {
	f.Where(p.Field(deposit.FieldScannableAt))
}

// addPredicate implements the predicateAdder interface.
func (gbq *GoodBenefitQuery) addPredicate(pred func(s *sql.Selector)) {
	gbq.predicates = append(gbq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GoodBenefitQuery builder.
func (gbq *GoodBenefitQuery) Filter() *GoodBenefitFilter {
	return &GoodBenefitFilter{config: gbq.config, predicateAdder: gbq}
}

// addPredicate implements the predicateAdder interface.
func (m *GoodBenefitMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GoodBenefitMutation builder.
func (m *GoodBenefitMutation) Filter() *GoodBenefitFilter {
	return &GoodBenefitFilter{config: m.config, predicateAdder: m}
}

// GoodBenefitFilter provides a generic filtering capability at runtime for GoodBenefitQuery.
type GoodBenefitFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GoodBenefitFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *GoodBenefitFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(goodbenefit.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *GoodBenefitFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(goodbenefit.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *GoodBenefitFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(goodbenefit.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *GoodBenefitFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(goodbenefit.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *GoodBenefitFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(goodbenefit.FieldEntID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *GoodBenefitFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(goodbenefit.FieldGoodID))
}

// WhereAccountID applies the entql [16]byte predicate on the account_id field.
func (f *GoodBenefitFilter) WhereAccountID(p entql.ValueP) {
	f.Where(p.Field(goodbenefit.FieldAccountID))
}

// WhereBackup applies the entql bool predicate on the backup field.
func (f *GoodBenefitFilter) WhereBackup(p entql.BoolP) {
	f.Where(p.Field(goodbenefit.FieldBackup))
}

// WhereTransactionID applies the entql [16]byte predicate on the transaction_id field.
func (f *GoodBenefitFilter) WhereTransactionID(p entql.ValueP) {
	f.Where(p.Field(goodbenefit.FieldTransactionID))
}

// addPredicate implements the predicateAdder interface.
func (obq *OrderBenefitQuery) addPredicate(pred func(s *sql.Selector)) {
	obq.predicates = append(obq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderBenefitQuery builder.
func (obq *OrderBenefitQuery) Filter() *OrderBenefitFilter {
	return &OrderBenefitFilter{config: obq.config, predicateAdder: obq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderBenefitMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderBenefitMutation builder.
func (m *OrderBenefitMutation) Filter() *OrderBenefitFilter {
	return &OrderBenefitFilter{config: m.config, predicateAdder: m}
}

// OrderBenefitFilter provides a generic filtering capability at runtime for OrderBenefitQuery.
type OrderBenefitFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrderBenefitFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *OrderBenefitFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(orderbenefit.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *OrderBenefitFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(orderbenefit.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *OrderBenefitFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(orderbenefit.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *OrderBenefitFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(orderbenefit.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *OrderBenefitFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(orderbenefit.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *OrderBenefitFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(orderbenefit.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *OrderBenefitFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(orderbenefit.FieldUserID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *OrderBenefitFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(orderbenefit.FieldCoinTypeID))
}

// WhereAccountID applies the entql [16]byte predicate on the account_id field.
func (f *OrderBenefitFilter) WhereAccountID(p entql.ValueP) {
	f.Where(p.Field(orderbenefit.FieldAccountID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *OrderBenefitFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(orderbenefit.FieldOrderID))
}

// addPredicate implements the predicateAdder interface.
func (pq *PaymentQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PaymentQuery builder.
func (pq *PaymentQuery) Filter() *PaymentFilter {
	return &PaymentFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PaymentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PaymentMutation builder.
func (m *PaymentMutation) Filter() *PaymentFilter {
	return &PaymentFilter{config: m.config, predicateAdder: m}
}

// PaymentFilter provides a generic filtering capability at runtime for PaymentQuery.
type PaymentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PaymentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *PaymentFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(payment.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *PaymentFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(payment.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *PaymentFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(payment.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *PaymentFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(payment.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *PaymentFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(payment.FieldEntID))
}

// WhereAccountID applies the entql [16]byte predicate on the account_id field.
func (f *PaymentFilter) WhereAccountID(p entql.ValueP) {
	f.Where(p.Field(payment.FieldAccountID))
}

// WhereCollectingTid applies the entql [16]byte predicate on the collecting_tid field.
func (f *PaymentFilter) WhereCollectingTid(p entql.ValueP) {
	f.Where(p.Field(payment.FieldCollectingTid))
}

// WhereAvailableAt applies the entql uint32 predicate on the available_at field.
func (f *PaymentFilter) WhereAvailableAt(p entql.Uint32P) {
	f.Where(p.Field(payment.FieldAvailableAt))
}

// addPredicate implements the predicateAdder interface.
func (pq *PlatformQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PlatformQuery builder.
func (pq *PlatformQuery) Filter() *PlatformFilter {
	return &PlatformFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PlatformMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PlatformMutation builder.
func (m *PlatformMutation) Filter() *PlatformFilter {
	return &PlatformFilter{config: m.config, predicateAdder: m}
}

// PlatformFilter provides a generic filtering capability at runtime for PlatformQuery.
type PlatformFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PlatformFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *PlatformFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(platform.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *PlatformFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(platform.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *PlatformFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(platform.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *PlatformFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(platform.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *PlatformFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(platform.FieldEntID))
}

// WhereAccountID applies the entql [16]byte predicate on the account_id field.
func (f *PlatformFilter) WhereAccountID(p entql.ValueP) {
	f.Where(p.Field(platform.FieldAccountID))
}

// WhereUsedFor applies the entql string predicate on the used_for field.
func (f *PlatformFilter) WhereUsedFor(p entql.StringP) {
	f.Where(p.Field(platform.FieldUsedFor))
}

// WhereBackup applies the entql bool predicate on the backup field.
func (f *PlatformFilter) WhereBackup(p entql.BoolP) {
	f.Where(p.Field(platform.FieldBackup))
}

// addPredicate implements the predicateAdder interface.
func (tq *TransferQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TransferQuery builder.
func (tq *TransferQuery) Filter() *TransferFilter {
	return &TransferFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TransferMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TransferMutation builder.
func (m *TransferMutation) Filter() *TransferFilter {
	return &TransferFilter{config: m.config, predicateAdder: m}
}

// TransferFilter provides a generic filtering capability at runtime for TransferQuery.
type TransferFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TransferFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *TransferFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(transfer.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *TransferFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(transfer.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *TransferFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(transfer.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *TransferFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(transfer.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *TransferFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(transfer.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *TransferFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(transfer.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *TransferFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(transfer.FieldUserID))
}

// WhereTargetUserID applies the entql [16]byte predicate on the target_user_id field.
func (f *TransferFilter) WhereTargetUserID(p entql.ValueP) {
	f.Where(p.Field(transfer.FieldTargetUserID))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *UserFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *UserFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(user.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *UserFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(user.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *UserFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(user.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *UserFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(user.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *UserFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(user.FieldUserID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *UserFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(user.FieldCoinTypeID))
}

// WhereAccountID applies the entql [16]byte predicate on the account_id field.
func (f *UserFilter) WhereAccountID(p entql.ValueP) {
	f.Where(p.Field(user.FieldAccountID))
}

// WhereUsedFor applies the entql string predicate on the used_for field.
func (f *UserFilter) WhereUsedFor(p entql.StringP) {
	f.Where(p.Field(user.FieldUsedFor))
}

// WhereLabels applies the entql json.RawMessage predicate on the labels field.
func (f *UserFilter) WhereLabels(p entql.BytesP) {
	f.Where(p.Field(user.FieldLabels))
}

// WhereMemo applies the entql string predicate on the memo field.
func (f *UserFilter) WhereMemo(p entql.StringP) {
	f.Where(p.Field(user.FieldMemo))
}

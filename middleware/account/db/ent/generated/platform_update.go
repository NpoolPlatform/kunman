// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/platform"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// PlatformUpdate is the builder for updating Platform entities.
type PlatformUpdate struct {
	config
	hooks     []Hook
	mutation  *PlatformMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PlatformUpdate builder.
func (pu *PlatformUpdate) Where(ps ...predicate.Platform) *PlatformUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PlatformUpdate) SetCreatedAt(u uint32) *PlatformUpdate {
	pu.mutation.ResetCreatedAt()
	pu.mutation.SetCreatedAt(u)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PlatformUpdate) SetNillableCreatedAt(u *uint32) *PlatformUpdate {
	if u != nil {
		pu.SetCreatedAt(*u)
	}
	return pu
}

// AddCreatedAt adds u to the "created_at" field.
func (pu *PlatformUpdate) AddCreatedAt(u int32) *PlatformUpdate {
	pu.mutation.AddCreatedAt(u)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PlatformUpdate) SetUpdatedAt(u uint32) *PlatformUpdate {
	pu.mutation.ResetUpdatedAt()
	pu.mutation.SetUpdatedAt(u)
	return pu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (pu *PlatformUpdate) AddUpdatedAt(u int32) *PlatformUpdate {
	pu.mutation.AddUpdatedAt(u)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PlatformUpdate) SetDeletedAt(u uint32) *PlatformUpdate {
	pu.mutation.ResetDeletedAt()
	pu.mutation.SetDeletedAt(u)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PlatformUpdate) SetNillableDeletedAt(u *uint32) *PlatformUpdate {
	if u != nil {
		pu.SetDeletedAt(*u)
	}
	return pu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (pu *PlatformUpdate) AddDeletedAt(u int32) *PlatformUpdate {
	pu.mutation.AddDeletedAt(u)
	return pu
}

// SetEntID sets the "ent_id" field.
func (pu *PlatformUpdate) SetEntID(u uuid.UUID) *PlatformUpdate {
	pu.mutation.SetEntID(u)
	return pu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (pu *PlatformUpdate) SetNillableEntID(u *uuid.UUID) *PlatformUpdate {
	if u != nil {
		pu.SetEntID(*u)
	}
	return pu
}

// SetAccountID sets the "account_id" field.
func (pu *PlatformUpdate) SetAccountID(u uuid.UUID) *PlatformUpdate {
	pu.mutation.SetAccountID(u)
	return pu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (pu *PlatformUpdate) SetNillableAccountID(u *uuid.UUID) *PlatformUpdate {
	if u != nil {
		pu.SetAccountID(*u)
	}
	return pu
}

// ClearAccountID clears the value of the "account_id" field.
func (pu *PlatformUpdate) ClearAccountID() *PlatformUpdate {
	pu.mutation.ClearAccountID()
	return pu
}

// SetUsedFor sets the "used_for" field.
func (pu *PlatformUpdate) SetUsedFor(s string) *PlatformUpdate {
	pu.mutation.SetUsedFor(s)
	return pu
}

// SetNillableUsedFor sets the "used_for" field if the given value is not nil.
func (pu *PlatformUpdate) SetNillableUsedFor(s *string) *PlatformUpdate {
	if s != nil {
		pu.SetUsedFor(*s)
	}
	return pu
}

// ClearUsedFor clears the value of the "used_for" field.
func (pu *PlatformUpdate) ClearUsedFor() *PlatformUpdate {
	pu.mutation.ClearUsedFor()
	return pu
}

// SetBackup sets the "backup" field.
func (pu *PlatformUpdate) SetBackup(b bool) *PlatformUpdate {
	pu.mutation.SetBackup(b)
	return pu
}

// SetNillableBackup sets the "backup" field if the given value is not nil.
func (pu *PlatformUpdate) SetNillableBackup(b *bool) *PlatformUpdate {
	if b != nil {
		pu.SetBackup(*b)
	}
	return pu
}

// ClearBackup clears the value of the "backup" field.
func (pu *PlatformUpdate) ClearBackup() *PlatformUpdate {
	pu.mutation.ClearBackup()
	return pu
}

// Mutation returns the PlatformMutation object of the builder.
func (pu *PlatformUpdate) Mutation() *PlatformMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlatformUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlatformUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlatformUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlatformUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PlatformUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := platform.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PlatformUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PlatformUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PlatformUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(platform.Table, platform.Columns, sqlgraph.NewFieldSpec(platform.FieldID, field.TypeUint32))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(platform.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := pu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(platform.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(platform.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := pu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(platform.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(platform.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := pu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(platform.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := pu.mutation.EntID(); ok {
		_spec.SetField(platform.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := pu.mutation.AccountID(); ok {
		_spec.SetField(platform.FieldAccountID, field.TypeUUID, value)
	}
	if pu.mutation.AccountIDCleared() {
		_spec.ClearField(platform.FieldAccountID, field.TypeUUID)
	}
	if value, ok := pu.mutation.UsedFor(); ok {
		_spec.SetField(platform.FieldUsedFor, field.TypeString, value)
	}
	if pu.mutation.UsedForCleared() {
		_spec.ClearField(platform.FieldUsedFor, field.TypeString)
	}
	if value, ok := pu.mutation.Backup(); ok {
		_spec.SetField(platform.FieldBackup, field.TypeBool, value)
	}
	if pu.mutation.BackupCleared() {
		_spec.ClearField(platform.FieldBackup, field.TypeBool)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{platform.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PlatformUpdateOne is the builder for updating a single Platform entity.
type PlatformUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PlatformMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (puo *PlatformUpdateOne) SetCreatedAt(u uint32) *PlatformUpdateOne {
	puo.mutation.ResetCreatedAt()
	puo.mutation.SetCreatedAt(u)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PlatformUpdateOne) SetNillableCreatedAt(u *uint32) *PlatformUpdateOne {
	if u != nil {
		puo.SetCreatedAt(*u)
	}
	return puo
}

// AddCreatedAt adds u to the "created_at" field.
func (puo *PlatformUpdateOne) AddCreatedAt(u int32) *PlatformUpdateOne {
	puo.mutation.AddCreatedAt(u)
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PlatformUpdateOne) SetUpdatedAt(u uint32) *PlatformUpdateOne {
	puo.mutation.ResetUpdatedAt()
	puo.mutation.SetUpdatedAt(u)
	return puo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (puo *PlatformUpdateOne) AddUpdatedAt(u int32) *PlatformUpdateOne {
	puo.mutation.AddUpdatedAt(u)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PlatformUpdateOne) SetDeletedAt(u uint32) *PlatformUpdateOne {
	puo.mutation.ResetDeletedAt()
	puo.mutation.SetDeletedAt(u)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PlatformUpdateOne) SetNillableDeletedAt(u *uint32) *PlatformUpdateOne {
	if u != nil {
		puo.SetDeletedAt(*u)
	}
	return puo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (puo *PlatformUpdateOne) AddDeletedAt(u int32) *PlatformUpdateOne {
	puo.mutation.AddDeletedAt(u)
	return puo
}

// SetEntID sets the "ent_id" field.
func (puo *PlatformUpdateOne) SetEntID(u uuid.UUID) *PlatformUpdateOne {
	puo.mutation.SetEntID(u)
	return puo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (puo *PlatformUpdateOne) SetNillableEntID(u *uuid.UUID) *PlatformUpdateOne {
	if u != nil {
		puo.SetEntID(*u)
	}
	return puo
}

// SetAccountID sets the "account_id" field.
func (puo *PlatformUpdateOne) SetAccountID(u uuid.UUID) *PlatformUpdateOne {
	puo.mutation.SetAccountID(u)
	return puo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (puo *PlatformUpdateOne) SetNillableAccountID(u *uuid.UUID) *PlatformUpdateOne {
	if u != nil {
		puo.SetAccountID(*u)
	}
	return puo
}

// ClearAccountID clears the value of the "account_id" field.
func (puo *PlatformUpdateOne) ClearAccountID() *PlatformUpdateOne {
	puo.mutation.ClearAccountID()
	return puo
}

// SetUsedFor sets the "used_for" field.
func (puo *PlatformUpdateOne) SetUsedFor(s string) *PlatformUpdateOne {
	puo.mutation.SetUsedFor(s)
	return puo
}

// SetNillableUsedFor sets the "used_for" field if the given value is not nil.
func (puo *PlatformUpdateOne) SetNillableUsedFor(s *string) *PlatformUpdateOne {
	if s != nil {
		puo.SetUsedFor(*s)
	}
	return puo
}

// ClearUsedFor clears the value of the "used_for" field.
func (puo *PlatformUpdateOne) ClearUsedFor() *PlatformUpdateOne {
	puo.mutation.ClearUsedFor()
	return puo
}

// SetBackup sets the "backup" field.
func (puo *PlatformUpdateOne) SetBackup(b bool) *PlatformUpdateOne {
	puo.mutation.SetBackup(b)
	return puo
}

// SetNillableBackup sets the "backup" field if the given value is not nil.
func (puo *PlatformUpdateOne) SetNillableBackup(b *bool) *PlatformUpdateOne {
	if b != nil {
		puo.SetBackup(*b)
	}
	return puo
}

// ClearBackup clears the value of the "backup" field.
func (puo *PlatformUpdateOne) ClearBackup() *PlatformUpdateOne {
	puo.mutation.ClearBackup()
	return puo
}

// Mutation returns the PlatformMutation object of the builder.
func (puo *PlatformUpdateOne) Mutation() *PlatformMutation {
	return puo.mutation
}

// Where appends a list predicates to the PlatformUpdate builder.
func (puo *PlatformUpdateOne) Where(ps ...predicate.Platform) *PlatformUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlatformUpdateOne) Select(field string, fields ...string) *PlatformUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Platform entity.
func (puo *PlatformUpdateOne) Save(ctx context.Context) (*Platform, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlatformUpdateOne) SaveX(ctx context.Context) *Platform {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlatformUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlatformUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PlatformUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := platform.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PlatformUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PlatformUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PlatformUpdateOne) sqlSave(ctx context.Context) (_node *Platform, err error) {
	_spec := sqlgraph.NewUpdateSpec(platform.Table, platform.Columns, sqlgraph.NewFieldSpec(platform.FieldID, field.TypeUint32))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Platform.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, platform.FieldID)
		for _, f := range fields {
			if !platform.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != platform.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(platform.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := puo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(platform.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(platform.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := puo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(platform.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(platform.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := puo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(platform.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := puo.mutation.EntID(); ok {
		_spec.SetField(platform.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := puo.mutation.AccountID(); ok {
		_spec.SetField(platform.FieldAccountID, field.TypeUUID, value)
	}
	if puo.mutation.AccountIDCleared() {
		_spec.ClearField(platform.FieldAccountID, field.TypeUUID)
	}
	if value, ok := puo.mutation.UsedFor(); ok {
		_spec.SetField(platform.FieldUsedFor, field.TypeString, value)
	}
	if puo.mutation.UsedForCleared() {
		_spec.ClearField(platform.FieldUsedFor, field.TypeString)
	}
	if value, ok := puo.mutation.Backup(); ok {
		_spec.SetField(platform.FieldBackup, field.TypeBool, value)
	}
	if puo.mutation.BackupCleared() {
		_spec.ClearField(platform.FieldBackup, field.TypeBool)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Platform{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{platform.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}

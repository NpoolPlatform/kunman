// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/orderbenefit"
	"github.com/google/uuid"
)

// OrderBenefitCreate is the builder for creating a OrderBenefit entity.
type OrderBenefitCreate struct {
	config
	mutation *OrderBenefitMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (obc *OrderBenefitCreate) SetCreatedAt(u uint32) *OrderBenefitCreate {
	obc.mutation.SetCreatedAt(u)
	return obc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (obc *OrderBenefitCreate) SetNillableCreatedAt(u *uint32) *OrderBenefitCreate {
	if u != nil {
		obc.SetCreatedAt(*u)
	}
	return obc
}

// SetUpdatedAt sets the "updated_at" field.
func (obc *OrderBenefitCreate) SetUpdatedAt(u uint32) *OrderBenefitCreate {
	obc.mutation.SetUpdatedAt(u)
	return obc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (obc *OrderBenefitCreate) SetNillableUpdatedAt(u *uint32) *OrderBenefitCreate {
	if u != nil {
		obc.SetUpdatedAt(*u)
	}
	return obc
}

// SetDeletedAt sets the "deleted_at" field.
func (obc *OrderBenefitCreate) SetDeletedAt(u uint32) *OrderBenefitCreate {
	obc.mutation.SetDeletedAt(u)
	return obc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (obc *OrderBenefitCreate) SetNillableDeletedAt(u *uint32) *OrderBenefitCreate {
	if u != nil {
		obc.SetDeletedAt(*u)
	}
	return obc
}

// SetEntID sets the "ent_id" field.
func (obc *OrderBenefitCreate) SetEntID(u uuid.UUID) *OrderBenefitCreate {
	obc.mutation.SetEntID(u)
	return obc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (obc *OrderBenefitCreate) SetNillableEntID(u *uuid.UUID) *OrderBenefitCreate {
	if u != nil {
		obc.SetEntID(*u)
	}
	return obc
}

// SetAppID sets the "app_id" field.
func (obc *OrderBenefitCreate) SetAppID(u uuid.UUID) *OrderBenefitCreate {
	obc.mutation.SetAppID(u)
	return obc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (obc *OrderBenefitCreate) SetNillableAppID(u *uuid.UUID) *OrderBenefitCreate {
	if u != nil {
		obc.SetAppID(*u)
	}
	return obc
}

// SetUserID sets the "user_id" field.
func (obc *OrderBenefitCreate) SetUserID(u uuid.UUID) *OrderBenefitCreate {
	obc.mutation.SetUserID(u)
	return obc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (obc *OrderBenefitCreate) SetNillableUserID(u *uuid.UUID) *OrderBenefitCreate {
	if u != nil {
		obc.SetUserID(*u)
	}
	return obc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (obc *OrderBenefitCreate) SetCoinTypeID(u uuid.UUID) *OrderBenefitCreate {
	obc.mutation.SetCoinTypeID(u)
	return obc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (obc *OrderBenefitCreate) SetNillableCoinTypeID(u *uuid.UUID) *OrderBenefitCreate {
	if u != nil {
		obc.SetCoinTypeID(*u)
	}
	return obc
}

// SetAccountID sets the "account_id" field.
func (obc *OrderBenefitCreate) SetAccountID(u uuid.UUID) *OrderBenefitCreate {
	obc.mutation.SetAccountID(u)
	return obc
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (obc *OrderBenefitCreate) SetNillableAccountID(u *uuid.UUID) *OrderBenefitCreate {
	if u != nil {
		obc.SetAccountID(*u)
	}
	return obc
}

// SetOrderID sets the "order_id" field.
func (obc *OrderBenefitCreate) SetOrderID(u uuid.UUID) *OrderBenefitCreate {
	obc.mutation.SetOrderID(u)
	return obc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (obc *OrderBenefitCreate) SetNillableOrderID(u *uuid.UUID) *OrderBenefitCreate {
	if u != nil {
		obc.SetOrderID(*u)
	}
	return obc
}

// SetID sets the "id" field.
func (obc *OrderBenefitCreate) SetID(u uint32) *OrderBenefitCreate {
	obc.mutation.SetID(u)
	return obc
}

// Mutation returns the OrderBenefitMutation object of the builder.
func (obc *OrderBenefitCreate) Mutation() *OrderBenefitMutation {
	return obc.mutation
}

// Save creates the OrderBenefit in the database.
func (obc *OrderBenefitCreate) Save(ctx context.Context) (*OrderBenefit, error) {
	obc.defaults()
	return withHooks(ctx, obc.sqlSave, obc.mutation, obc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (obc *OrderBenefitCreate) SaveX(ctx context.Context) *OrderBenefit {
	v, err := obc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (obc *OrderBenefitCreate) Exec(ctx context.Context) error {
	_, err := obc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (obc *OrderBenefitCreate) ExecX(ctx context.Context) {
	if err := obc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (obc *OrderBenefitCreate) defaults() {
	if _, ok := obc.mutation.CreatedAt(); !ok {
		v := orderbenefit.DefaultCreatedAt()
		obc.mutation.SetCreatedAt(v)
	}
	if _, ok := obc.mutation.UpdatedAt(); !ok {
		v := orderbenefit.DefaultUpdatedAt()
		obc.mutation.SetUpdatedAt(v)
	}
	if _, ok := obc.mutation.DeletedAt(); !ok {
		v := orderbenefit.DefaultDeletedAt()
		obc.mutation.SetDeletedAt(v)
	}
	if _, ok := obc.mutation.EntID(); !ok {
		v := orderbenefit.DefaultEntID()
		obc.mutation.SetEntID(v)
	}
	if _, ok := obc.mutation.AppID(); !ok {
		v := orderbenefit.DefaultAppID()
		obc.mutation.SetAppID(v)
	}
	if _, ok := obc.mutation.UserID(); !ok {
		v := orderbenefit.DefaultUserID()
		obc.mutation.SetUserID(v)
	}
	if _, ok := obc.mutation.CoinTypeID(); !ok {
		v := orderbenefit.DefaultCoinTypeID()
		obc.mutation.SetCoinTypeID(v)
	}
	if _, ok := obc.mutation.AccountID(); !ok {
		v := orderbenefit.DefaultAccountID()
		obc.mutation.SetAccountID(v)
	}
	if _, ok := obc.mutation.OrderID(); !ok {
		v := orderbenefit.DefaultOrderID()
		obc.mutation.SetOrderID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (obc *OrderBenefitCreate) check() error {
	if _, ok := obc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "OrderBenefit.created_at"`)}
	}
	if _, ok := obc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "OrderBenefit.updated_at"`)}
	}
	if _, ok := obc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "OrderBenefit.deleted_at"`)}
	}
	if _, ok := obc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "OrderBenefit.ent_id"`)}
	}
	return nil
}

func (obc *OrderBenefitCreate) sqlSave(ctx context.Context) (*OrderBenefit, error) {
	if err := obc.check(); err != nil {
		return nil, err
	}
	_node, _spec := obc.createSpec()
	if err := sqlgraph.CreateNode(ctx, obc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	obc.mutation.id = &_node.ID
	obc.mutation.done = true
	return _node, nil
}

func (obc *OrderBenefitCreate) createSpec() (*OrderBenefit, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderBenefit{config: obc.config}
		_spec = sqlgraph.NewCreateSpec(orderbenefit.Table, sqlgraph.NewFieldSpec(orderbenefit.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = obc.conflict
	if id, ok := obc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := obc.mutation.CreatedAt(); ok {
		_spec.SetField(orderbenefit.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := obc.mutation.UpdatedAt(); ok {
		_spec.SetField(orderbenefit.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := obc.mutation.DeletedAt(); ok {
		_spec.SetField(orderbenefit.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := obc.mutation.EntID(); ok {
		_spec.SetField(orderbenefit.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := obc.mutation.AppID(); ok {
		_spec.SetField(orderbenefit.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := obc.mutation.UserID(); ok {
		_spec.SetField(orderbenefit.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := obc.mutation.CoinTypeID(); ok {
		_spec.SetField(orderbenefit.FieldCoinTypeID, field.TypeUUID, value)
		_node.CoinTypeID = value
	}
	if value, ok := obc.mutation.AccountID(); ok {
		_spec.SetField(orderbenefit.FieldAccountID, field.TypeUUID, value)
		_node.AccountID = value
	}
	if value, ok := obc.mutation.OrderID(); ok {
		_spec.SetField(orderbenefit.FieldOrderID, field.TypeUUID, value)
		_node.OrderID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderBenefit.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderBenefitUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (obc *OrderBenefitCreate) OnConflict(opts ...sql.ConflictOption) *OrderBenefitUpsertOne {
	obc.conflict = opts
	return &OrderBenefitUpsertOne{
		create: obc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderBenefit.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (obc *OrderBenefitCreate) OnConflictColumns(columns ...string) *OrderBenefitUpsertOne {
	obc.conflict = append(obc.conflict, sql.ConflictColumns(columns...))
	return &OrderBenefitUpsertOne{
		create: obc,
	}
}

type (
	// OrderBenefitUpsertOne is the builder for "upsert"-ing
	//  one OrderBenefit node.
	OrderBenefitUpsertOne struct {
		create *OrderBenefitCreate
	}

	// OrderBenefitUpsert is the "OnConflict" setter.
	OrderBenefitUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *OrderBenefitUpsert) SetCreatedAt(v uint32) *OrderBenefitUpsert {
	u.Set(orderbenefit.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderBenefitUpsert) UpdateCreatedAt() *OrderBenefitUpsert {
	u.SetExcluded(orderbenefit.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderBenefitUpsert) AddCreatedAt(v uint32) *OrderBenefitUpsert {
	u.Add(orderbenefit.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderBenefitUpsert) SetUpdatedAt(v uint32) *OrderBenefitUpsert {
	u.Set(orderbenefit.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderBenefitUpsert) UpdateUpdatedAt() *OrderBenefitUpsert {
	u.SetExcluded(orderbenefit.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderBenefitUpsert) AddUpdatedAt(v uint32) *OrderBenefitUpsert {
	u.Add(orderbenefit.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderBenefitUpsert) SetDeletedAt(v uint32) *OrderBenefitUpsert {
	u.Set(orderbenefit.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderBenefitUpsert) UpdateDeletedAt() *OrderBenefitUpsert {
	u.SetExcluded(orderbenefit.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderBenefitUpsert) AddDeletedAt(v uint32) *OrderBenefitUpsert {
	u.Add(orderbenefit.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *OrderBenefitUpsert) SetEntID(v uuid.UUID) *OrderBenefitUpsert {
	u.Set(orderbenefit.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderBenefitUpsert) UpdateEntID() *OrderBenefitUpsert {
	u.SetExcluded(orderbenefit.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *OrderBenefitUpsert) SetAppID(v uuid.UUID) *OrderBenefitUpsert {
	u.Set(orderbenefit.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *OrderBenefitUpsert) UpdateAppID() *OrderBenefitUpsert {
	u.SetExcluded(orderbenefit.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *OrderBenefitUpsert) ClearAppID() *OrderBenefitUpsert {
	u.SetNull(orderbenefit.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *OrderBenefitUpsert) SetUserID(v uuid.UUID) *OrderBenefitUpsert {
	u.Set(orderbenefit.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrderBenefitUpsert) UpdateUserID() *OrderBenefitUpsert {
	u.SetExcluded(orderbenefit.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *OrderBenefitUpsert) ClearUserID() *OrderBenefitUpsert {
	u.SetNull(orderbenefit.FieldUserID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *OrderBenefitUpsert) SetCoinTypeID(v uuid.UUID) *OrderBenefitUpsert {
	u.Set(orderbenefit.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *OrderBenefitUpsert) UpdateCoinTypeID() *OrderBenefitUpsert {
	u.SetExcluded(orderbenefit.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *OrderBenefitUpsert) ClearCoinTypeID() *OrderBenefitUpsert {
	u.SetNull(orderbenefit.FieldCoinTypeID)
	return u
}

// SetAccountID sets the "account_id" field.
func (u *OrderBenefitUpsert) SetAccountID(v uuid.UUID) *OrderBenefitUpsert {
	u.Set(orderbenefit.FieldAccountID, v)
	return u
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *OrderBenefitUpsert) UpdateAccountID() *OrderBenefitUpsert {
	u.SetExcluded(orderbenefit.FieldAccountID)
	return u
}

// ClearAccountID clears the value of the "account_id" field.
func (u *OrderBenefitUpsert) ClearAccountID() *OrderBenefitUpsert {
	u.SetNull(orderbenefit.FieldAccountID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *OrderBenefitUpsert) SetOrderID(v uuid.UUID) *OrderBenefitUpsert {
	u.Set(orderbenefit.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderBenefitUpsert) UpdateOrderID() *OrderBenefitUpsert {
	u.SetExcluded(orderbenefit.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderBenefitUpsert) ClearOrderID() *OrderBenefitUpsert {
	u.SetNull(orderbenefit.FieldOrderID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrderBenefit.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderbenefit.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderBenefitUpsertOne) UpdateNewValues() *OrderBenefitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(orderbenefit.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderBenefit.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrderBenefitUpsertOne) Ignore() *OrderBenefitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderBenefitUpsertOne) DoNothing() *OrderBenefitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderBenefitCreate.OnConflict
// documentation for more info.
func (u *OrderBenefitUpsertOne) Update(set func(*OrderBenefitUpsert)) *OrderBenefitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderBenefitUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderBenefitUpsertOne) SetCreatedAt(v uint32) *OrderBenefitUpsertOne {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderBenefitUpsertOne) AddCreatedAt(v uint32) *OrderBenefitUpsertOne {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderBenefitUpsertOne) UpdateCreatedAt() *OrderBenefitUpsertOne {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderBenefitUpsertOne) SetUpdatedAt(v uint32) *OrderBenefitUpsertOne {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderBenefitUpsertOne) AddUpdatedAt(v uint32) *OrderBenefitUpsertOne {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderBenefitUpsertOne) UpdateUpdatedAt() *OrderBenefitUpsertOne {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderBenefitUpsertOne) SetDeletedAt(v uint32) *OrderBenefitUpsertOne {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderBenefitUpsertOne) AddDeletedAt(v uint32) *OrderBenefitUpsertOne {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderBenefitUpsertOne) UpdateDeletedAt() *OrderBenefitUpsertOne {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *OrderBenefitUpsertOne) SetEntID(v uuid.UUID) *OrderBenefitUpsertOne {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderBenefitUpsertOne) UpdateEntID() *OrderBenefitUpsertOne {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *OrderBenefitUpsertOne) SetAppID(v uuid.UUID) *OrderBenefitUpsertOne {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *OrderBenefitUpsertOne) UpdateAppID() *OrderBenefitUpsertOne {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *OrderBenefitUpsertOne) ClearAppID() *OrderBenefitUpsertOne {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *OrderBenefitUpsertOne) SetUserID(v uuid.UUID) *OrderBenefitUpsertOne {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrderBenefitUpsertOne) UpdateUserID() *OrderBenefitUpsertOne {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *OrderBenefitUpsertOne) ClearUserID() *OrderBenefitUpsertOne {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.ClearUserID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *OrderBenefitUpsertOne) SetCoinTypeID(v uuid.UUID) *OrderBenefitUpsertOne {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *OrderBenefitUpsertOne) UpdateCoinTypeID() *OrderBenefitUpsertOne {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *OrderBenefitUpsertOne) ClearCoinTypeID() *OrderBenefitUpsertOne {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *OrderBenefitUpsertOne) SetAccountID(v uuid.UUID) *OrderBenefitUpsertOne {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *OrderBenefitUpsertOne) UpdateAccountID() *OrderBenefitUpsertOne {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.UpdateAccountID()
	})
}

// ClearAccountID clears the value of the "account_id" field.
func (u *OrderBenefitUpsertOne) ClearAccountID() *OrderBenefitUpsertOne {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.ClearAccountID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderBenefitUpsertOne) SetOrderID(v uuid.UUID) *OrderBenefitUpsertOne {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderBenefitUpsertOne) UpdateOrderID() *OrderBenefitUpsertOne {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderBenefitUpsertOne) ClearOrderID() *OrderBenefitUpsertOne {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.ClearOrderID()
	})
}

// Exec executes the query.
func (u *OrderBenefitUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for OrderBenefitCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderBenefitUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderBenefitUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderBenefitUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderBenefitCreateBulk is the builder for creating many OrderBenefit entities in bulk.
type OrderBenefitCreateBulk struct {
	config
	err      error
	builders []*OrderBenefitCreate
	conflict []sql.ConflictOption
}

// Save creates the OrderBenefit entities in the database.
func (obcb *OrderBenefitCreateBulk) Save(ctx context.Context) ([]*OrderBenefit, error) {
	if obcb.err != nil {
		return nil, obcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(obcb.builders))
	nodes := make([]*OrderBenefit, len(obcb.builders))
	mutators := make([]Mutator, len(obcb.builders))
	for i := range obcb.builders {
		func(i int, root context.Context) {
			builder := obcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderBenefitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, obcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = obcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, obcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, obcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (obcb *OrderBenefitCreateBulk) SaveX(ctx context.Context) []*OrderBenefit {
	v, err := obcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (obcb *OrderBenefitCreateBulk) Exec(ctx context.Context) error {
	_, err := obcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (obcb *OrderBenefitCreateBulk) ExecX(ctx context.Context) {
	if err := obcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderBenefit.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderBenefitUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (obcb *OrderBenefitCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderBenefitUpsertBulk {
	obcb.conflict = opts
	return &OrderBenefitUpsertBulk{
		create: obcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderBenefit.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (obcb *OrderBenefitCreateBulk) OnConflictColumns(columns ...string) *OrderBenefitUpsertBulk {
	obcb.conflict = append(obcb.conflict, sql.ConflictColumns(columns...))
	return &OrderBenefitUpsertBulk{
		create: obcb,
	}
}

// OrderBenefitUpsertBulk is the builder for "upsert"-ing
// a bulk of OrderBenefit nodes.
type OrderBenefitUpsertBulk struct {
	create *OrderBenefitCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrderBenefit.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderbenefit.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderBenefitUpsertBulk) UpdateNewValues() *OrderBenefitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(orderbenefit.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderBenefit.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrderBenefitUpsertBulk) Ignore() *OrderBenefitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderBenefitUpsertBulk) DoNothing() *OrderBenefitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderBenefitCreateBulk.OnConflict
// documentation for more info.
func (u *OrderBenefitUpsertBulk) Update(set func(*OrderBenefitUpsert)) *OrderBenefitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderBenefitUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderBenefitUpsertBulk) SetCreatedAt(v uint32) *OrderBenefitUpsertBulk {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderBenefitUpsertBulk) AddCreatedAt(v uint32) *OrderBenefitUpsertBulk {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderBenefitUpsertBulk) UpdateCreatedAt() *OrderBenefitUpsertBulk {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderBenefitUpsertBulk) SetUpdatedAt(v uint32) *OrderBenefitUpsertBulk {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderBenefitUpsertBulk) AddUpdatedAt(v uint32) *OrderBenefitUpsertBulk {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderBenefitUpsertBulk) UpdateUpdatedAt() *OrderBenefitUpsertBulk {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderBenefitUpsertBulk) SetDeletedAt(v uint32) *OrderBenefitUpsertBulk {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderBenefitUpsertBulk) AddDeletedAt(v uint32) *OrderBenefitUpsertBulk {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderBenefitUpsertBulk) UpdateDeletedAt() *OrderBenefitUpsertBulk {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *OrderBenefitUpsertBulk) SetEntID(v uuid.UUID) *OrderBenefitUpsertBulk {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderBenefitUpsertBulk) UpdateEntID() *OrderBenefitUpsertBulk {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *OrderBenefitUpsertBulk) SetAppID(v uuid.UUID) *OrderBenefitUpsertBulk {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *OrderBenefitUpsertBulk) UpdateAppID() *OrderBenefitUpsertBulk {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *OrderBenefitUpsertBulk) ClearAppID() *OrderBenefitUpsertBulk {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *OrderBenefitUpsertBulk) SetUserID(v uuid.UUID) *OrderBenefitUpsertBulk {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrderBenefitUpsertBulk) UpdateUserID() *OrderBenefitUpsertBulk {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *OrderBenefitUpsertBulk) ClearUserID() *OrderBenefitUpsertBulk {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.ClearUserID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *OrderBenefitUpsertBulk) SetCoinTypeID(v uuid.UUID) *OrderBenefitUpsertBulk {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *OrderBenefitUpsertBulk) UpdateCoinTypeID() *OrderBenefitUpsertBulk {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *OrderBenefitUpsertBulk) ClearCoinTypeID() *OrderBenefitUpsertBulk {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *OrderBenefitUpsertBulk) SetAccountID(v uuid.UUID) *OrderBenefitUpsertBulk {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *OrderBenefitUpsertBulk) UpdateAccountID() *OrderBenefitUpsertBulk {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.UpdateAccountID()
	})
}

// ClearAccountID clears the value of the "account_id" field.
func (u *OrderBenefitUpsertBulk) ClearAccountID() *OrderBenefitUpsertBulk {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.ClearAccountID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderBenefitUpsertBulk) SetOrderID(v uuid.UUID) *OrderBenefitUpsertBulk {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderBenefitUpsertBulk) UpdateOrderID() *OrderBenefitUpsertBulk {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderBenefitUpsertBulk) ClearOrderID() *OrderBenefitUpsertBulk {
	return u.Update(func(s *OrderBenefitUpsert) {
		s.ClearOrderID()
	})
}

// Exec executes the query.
func (u *OrderBenefitUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the OrderBenefitCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for OrderBenefitCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderBenefitUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

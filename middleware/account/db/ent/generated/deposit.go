// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/deposit"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// Deposit is the model entity for the Deposit schema.
type Deposit struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID uuid.UUID `json:"account_id,omitempty"`
	// Incoming holds the value of the "incoming" field.
	Incoming decimal.Decimal `json:"incoming,omitempty"`
	// Outcoming holds the value of the "outcoming" field.
	Outcoming decimal.Decimal `json:"outcoming,omitempty"`
	// CollectingTid holds the value of the "collecting_tid" field.
	CollectingTid uuid.UUID `json:"collecting_tid,omitempty"`
	// ScannableAt holds the value of the "scannable_at" field.
	ScannableAt  uint32 `json:"scannable_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Deposit) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deposit.FieldIncoming, deposit.FieldOutcoming:
			values[i] = new(decimal.Decimal)
		case deposit.FieldID, deposit.FieldCreatedAt, deposit.FieldUpdatedAt, deposit.FieldDeletedAt, deposit.FieldScannableAt:
			values[i] = new(sql.NullInt64)
		case deposit.FieldEntID, deposit.FieldAppID, deposit.FieldUserID, deposit.FieldAccountID, deposit.FieldCollectingTid:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Deposit fields.
func (d *Deposit) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deposit.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = uint32(value.Int64)
		case deposit.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = uint32(value.Int64)
			}
		case deposit.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				d.UpdatedAt = uint32(value.Int64)
			}
		case deposit.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				d.DeletedAt = uint32(value.Int64)
			}
		case deposit.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				d.EntID = *value
			}
		case deposit.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				d.AppID = *value
			}
		case deposit.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				d.UserID = *value
			}
		case deposit.FieldAccountID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value != nil {
				d.AccountID = *value
			}
		case deposit.FieldIncoming:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field incoming", values[i])
			} else if value != nil {
				d.Incoming = *value
			}
		case deposit.FieldOutcoming:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field outcoming", values[i])
			} else if value != nil {
				d.Outcoming = *value
			}
		case deposit.FieldCollectingTid:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field collecting_tid", values[i])
			} else if value != nil {
				d.CollectingTid = *value
			}
		case deposit.FieldScannableAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scannable_at", values[i])
			} else if value.Valid {
				d.ScannableAt = uint32(value.Int64)
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Deposit.
// This includes values selected through modifiers, order, etc.
func (d *Deposit) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// Update returns a builder for updating this Deposit.
// Note that you need to call Deposit.Unwrap() before calling this method if this Deposit
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Deposit) Update() *DepositUpdateOne {
	return NewDepositClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Deposit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Deposit) Unwrap() *Deposit {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("generated: Deposit is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Deposit) String() string {
	var builder strings.Builder
	builder.WriteString("Deposit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", d.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", d.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", d.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", d.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", d.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", d.UserID))
	builder.WriteString(", ")
	builder.WriteString("account_id=")
	builder.WriteString(fmt.Sprintf("%v", d.AccountID))
	builder.WriteString(", ")
	builder.WriteString("incoming=")
	builder.WriteString(fmt.Sprintf("%v", d.Incoming))
	builder.WriteString(", ")
	builder.WriteString("outcoming=")
	builder.WriteString(fmt.Sprintf("%v", d.Outcoming))
	builder.WriteString(", ")
	builder.WriteString("collecting_tid=")
	builder.WriteString(fmt.Sprintf("%v", d.CollectingTid))
	builder.WriteString(", ")
	builder.WriteString("scannable_at=")
	builder.WriteString(fmt.Sprintf("%v", d.ScannableAt))
	builder.WriteByte(')')
	return builder.String()
}

// Deposits is a parsable slice of Deposit.
type Deposits []*Deposit

// Code generated by ent, DO NOT EDIT.

package deposit

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the deposit type in the database.
	Label = "deposit"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldAccountID holds the string denoting the account_id field in the database.
	FieldAccountID = "account_id"
	// FieldIncoming holds the string denoting the incoming field in the database.
	FieldIncoming = "incoming"
	// FieldOutcoming holds the string denoting the outcoming field in the database.
	FieldOutcoming = "outcoming"
	// FieldCollectingTid holds the string denoting the collecting_tid field in the database.
	FieldCollectingTid = "collecting_tid"
	// FieldScannableAt holds the string denoting the scannable_at field in the database.
	FieldScannableAt = "scannable_at"
	// Table holds the table name of the deposit in the database.
	Table = "deposits"
)

// Columns holds all SQL columns for deposit fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldEntID,
	FieldAppID,
	FieldUserID,
	FieldAccountID,
	FieldIncoming,
	FieldOutcoming,
	FieldCollectingTid,
	FieldScannableAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() uint32
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() uint32
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() uint32
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt func() uint32
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultAppID holds the default value on creation for the "app_id" field.
	DefaultAppID func() uuid.UUID
	// DefaultUserID holds the default value on creation for the "user_id" field.
	DefaultUserID func() uuid.UUID
	// DefaultAccountID holds the default value on creation for the "account_id" field.
	DefaultAccountID func() uuid.UUID
	// DefaultIncoming holds the default value on creation for the "incoming" field.
	DefaultIncoming decimal.Decimal
	// DefaultOutcoming holds the default value on creation for the "outcoming" field.
	DefaultOutcoming decimal.Decimal
	// DefaultCollectingTid holds the default value on creation for the "collecting_tid" field.
	DefaultCollectingTid func() uuid.UUID
	// DefaultScannableAt holds the default value on creation for the "scannable_at" field.
	DefaultScannableAt func() uint32
)

// OrderOption defines the ordering options for the Deposit queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByAppID orders the results by the app_id field.
func ByAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByAccountID orders the results by the account_id field.
func ByAccountID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountID, opts...).ToFunc()
}

// ByIncoming orders the results by the incoming field.
func ByIncoming(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIncoming, opts...).ToFunc()
}

// ByOutcoming orders the results by the outcoming field.
func ByOutcoming(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutcoming, opts...).ToFunc()
}

// ByCollectingTid orders the results by the collecting_tid field.
func ByCollectingTid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollectingTid, opts...).ToFunc()
}

// ByScannableAt orders the results by the scannable_at field.
func ByScannableAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScannableAt, opts...).ToFunc()
}

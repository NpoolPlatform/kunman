// Code generated by ent, DO NOT EDIT.

package deposit

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldEQ(FieldDeletedAt, v))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldEQ(FieldEntID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldEQ(FieldAppID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldEQ(FieldUserID, v))
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldEQ(FieldAccountID, v))
}

// Incoming applies equality check predicate on the "incoming" field. It's identical to IncomingEQ.
func Incoming(v decimal.Decimal) predicate.Deposit {
	return predicate.Deposit(sql.FieldEQ(FieldIncoming, v))
}

// Outcoming applies equality check predicate on the "outcoming" field. It's identical to OutcomingEQ.
func Outcoming(v decimal.Decimal) predicate.Deposit {
	return predicate.Deposit(sql.FieldEQ(FieldOutcoming, v))
}

// CollectingTid applies equality check predicate on the "collecting_tid" field. It's identical to CollectingTidEQ.
func CollectingTid(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldEQ(FieldCollectingTid, v))
}

// ScannableAt applies equality check predicate on the "scannable_at" field. It's identical to ScannableAtEQ.
func ScannableAt(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldEQ(FieldScannableAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldLTE(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldLTE(FieldEntID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldLTE(FieldAppID, v))
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.Deposit {
	return predicate.Deposit(sql.FieldIsNull(FieldAppID))
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.Deposit {
	return predicate.Deposit(sql.FieldNotNull(FieldAppID))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldLTE(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Deposit {
	return predicate.Deposit(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Deposit {
	return predicate.Deposit(sql.FieldNotNull(FieldUserID))
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldEQ(FieldAccountID, v))
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldNEQ(FieldAccountID, v))
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldIn(FieldAccountID, vs...))
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldNotIn(FieldAccountID, vs...))
}

// AccountIDGT applies the GT predicate on the "account_id" field.
func AccountIDGT(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldGT(FieldAccountID, v))
}

// AccountIDGTE applies the GTE predicate on the "account_id" field.
func AccountIDGTE(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldGTE(FieldAccountID, v))
}

// AccountIDLT applies the LT predicate on the "account_id" field.
func AccountIDLT(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldLT(FieldAccountID, v))
}

// AccountIDLTE applies the LTE predicate on the "account_id" field.
func AccountIDLTE(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldLTE(FieldAccountID, v))
}

// AccountIDIsNil applies the IsNil predicate on the "account_id" field.
func AccountIDIsNil() predicate.Deposit {
	return predicate.Deposit(sql.FieldIsNull(FieldAccountID))
}

// AccountIDNotNil applies the NotNil predicate on the "account_id" field.
func AccountIDNotNil() predicate.Deposit {
	return predicate.Deposit(sql.FieldNotNull(FieldAccountID))
}

// IncomingEQ applies the EQ predicate on the "incoming" field.
func IncomingEQ(v decimal.Decimal) predicate.Deposit {
	return predicate.Deposit(sql.FieldEQ(FieldIncoming, v))
}

// IncomingNEQ applies the NEQ predicate on the "incoming" field.
func IncomingNEQ(v decimal.Decimal) predicate.Deposit {
	return predicate.Deposit(sql.FieldNEQ(FieldIncoming, v))
}

// IncomingIn applies the In predicate on the "incoming" field.
func IncomingIn(vs ...decimal.Decimal) predicate.Deposit {
	return predicate.Deposit(sql.FieldIn(FieldIncoming, vs...))
}

// IncomingNotIn applies the NotIn predicate on the "incoming" field.
func IncomingNotIn(vs ...decimal.Decimal) predicate.Deposit {
	return predicate.Deposit(sql.FieldNotIn(FieldIncoming, vs...))
}

// IncomingGT applies the GT predicate on the "incoming" field.
func IncomingGT(v decimal.Decimal) predicate.Deposit {
	return predicate.Deposit(sql.FieldGT(FieldIncoming, v))
}

// IncomingGTE applies the GTE predicate on the "incoming" field.
func IncomingGTE(v decimal.Decimal) predicate.Deposit {
	return predicate.Deposit(sql.FieldGTE(FieldIncoming, v))
}

// IncomingLT applies the LT predicate on the "incoming" field.
func IncomingLT(v decimal.Decimal) predicate.Deposit {
	return predicate.Deposit(sql.FieldLT(FieldIncoming, v))
}

// IncomingLTE applies the LTE predicate on the "incoming" field.
func IncomingLTE(v decimal.Decimal) predicate.Deposit {
	return predicate.Deposit(sql.FieldLTE(FieldIncoming, v))
}

// IncomingIsNil applies the IsNil predicate on the "incoming" field.
func IncomingIsNil() predicate.Deposit {
	return predicate.Deposit(sql.FieldIsNull(FieldIncoming))
}

// IncomingNotNil applies the NotNil predicate on the "incoming" field.
func IncomingNotNil() predicate.Deposit {
	return predicate.Deposit(sql.FieldNotNull(FieldIncoming))
}

// OutcomingEQ applies the EQ predicate on the "outcoming" field.
func OutcomingEQ(v decimal.Decimal) predicate.Deposit {
	return predicate.Deposit(sql.FieldEQ(FieldOutcoming, v))
}

// OutcomingNEQ applies the NEQ predicate on the "outcoming" field.
func OutcomingNEQ(v decimal.Decimal) predicate.Deposit {
	return predicate.Deposit(sql.FieldNEQ(FieldOutcoming, v))
}

// OutcomingIn applies the In predicate on the "outcoming" field.
func OutcomingIn(vs ...decimal.Decimal) predicate.Deposit {
	return predicate.Deposit(sql.FieldIn(FieldOutcoming, vs...))
}

// OutcomingNotIn applies the NotIn predicate on the "outcoming" field.
func OutcomingNotIn(vs ...decimal.Decimal) predicate.Deposit {
	return predicate.Deposit(sql.FieldNotIn(FieldOutcoming, vs...))
}

// OutcomingGT applies the GT predicate on the "outcoming" field.
func OutcomingGT(v decimal.Decimal) predicate.Deposit {
	return predicate.Deposit(sql.FieldGT(FieldOutcoming, v))
}

// OutcomingGTE applies the GTE predicate on the "outcoming" field.
func OutcomingGTE(v decimal.Decimal) predicate.Deposit {
	return predicate.Deposit(sql.FieldGTE(FieldOutcoming, v))
}

// OutcomingLT applies the LT predicate on the "outcoming" field.
func OutcomingLT(v decimal.Decimal) predicate.Deposit {
	return predicate.Deposit(sql.FieldLT(FieldOutcoming, v))
}

// OutcomingLTE applies the LTE predicate on the "outcoming" field.
func OutcomingLTE(v decimal.Decimal) predicate.Deposit {
	return predicate.Deposit(sql.FieldLTE(FieldOutcoming, v))
}

// OutcomingIsNil applies the IsNil predicate on the "outcoming" field.
func OutcomingIsNil() predicate.Deposit {
	return predicate.Deposit(sql.FieldIsNull(FieldOutcoming))
}

// OutcomingNotNil applies the NotNil predicate on the "outcoming" field.
func OutcomingNotNil() predicate.Deposit {
	return predicate.Deposit(sql.FieldNotNull(FieldOutcoming))
}

// CollectingTidEQ applies the EQ predicate on the "collecting_tid" field.
func CollectingTidEQ(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldEQ(FieldCollectingTid, v))
}

// CollectingTidNEQ applies the NEQ predicate on the "collecting_tid" field.
func CollectingTidNEQ(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldNEQ(FieldCollectingTid, v))
}

// CollectingTidIn applies the In predicate on the "collecting_tid" field.
func CollectingTidIn(vs ...uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldIn(FieldCollectingTid, vs...))
}

// CollectingTidNotIn applies the NotIn predicate on the "collecting_tid" field.
func CollectingTidNotIn(vs ...uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldNotIn(FieldCollectingTid, vs...))
}

// CollectingTidGT applies the GT predicate on the "collecting_tid" field.
func CollectingTidGT(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldGT(FieldCollectingTid, v))
}

// CollectingTidGTE applies the GTE predicate on the "collecting_tid" field.
func CollectingTidGTE(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldGTE(FieldCollectingTid, v))
}

// CollectingTidLT applies the LT predicate on the "collecting_tid" field.
func CollectingTidLT(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldLT(FieldCollectingTid, v))
}

// CollectingTidLTE applies the LTE predicate on the "collecting_tid" field.
func CollectingTidLTE(v uuid.UUID) predicate.Deposit {
	return predicate.Deposit(sql.FieldLTE(FieldCollectingTid, v))
}

// CollectingTidIsNil applies the IsNil predicate on the "collecting_tid" field.
func CollectingTidIsNil() predicate.Deposit {
	return predicate.Deposit(sql.FieldIsNull(FieldCollectingTid))
}

// CollectingTidNotNil applies the NotNil predicate on the "collecting_tid" field.
func CollectingTidNotNil() predicate.Deposit {
	return predicate.Deposit(sql.FieldNotNull(FieldCollectingTid))
}

// ScannableAtEQ applies the EQ predicate on the "scannable_at" field.
func ScannableAtEQ(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldEQ(FieldScannableAt, v))
}

// ScannableAtNEQ applies the NEQ predicate on the "scannable_at" field.
func ScannableAtNEQ(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldNEQ(FieldScannableAt, v))
}

// ScannableAtIn applies the In predicate on the "scannable_at" field.
func ScannableAtIn(vs ...uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldIn(FieldScannableAt, vs...))
}

// ScannableAtNotIn applies the NotIn predicate on the "scannable_at" field.
func ScannableAtNotIn(vs ...uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldNotIn(FieldScannableAt, vs...))
}

// ScannableAtGT applies the GT predicate on the "scannable_at" field.
func ScannableAtGT(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldGT(FieldScannableAt, v))
}

// ScannableAtGTE applies the GTE predicate on the "scannable_at" field.
func ScannableAtGTE(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldGTE(FieldScannableAt, v))
}

// ScannableAtLT applies the LT predicate on the "scannable_at" field.
func ScannableAtLT(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldLT(FieldScannableAt, v))
}

// ScannableAtLTE applies the LTE predicate on the "scannable_at" field.
func ScannableAtLTE(v uint32) predicate.Deposit {
	return predicate.Deposit(sql.FieldLTE(FieldScannableAt, v))
}

// ScannableAtIsNil applies the IsNil predicate on the "scannable_at" field.
func ScannableAtIsNil() predicate.Deposit {
	return predicate.Deposit(sql.FieldIsNull(FieldScannableAt))
}

// ScannableAtNotNil applies the NotNil predicate on the "scannable_at" field.
func ScannableAtNotNil() predicate.Deposit {
	return predicate.Deposit(sql.FieldNotNull(FieldScannableAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Deposit) predicate.Deposit {
	return predicate.Deposit(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Deposit) predicate.Deposit {
	return predicate.Deposit(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Deposit) predicate.Deposit {
	return predicate.Deposit(sql.NotPredicates(p))
}

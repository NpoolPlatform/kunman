// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/account/db/ent/generated/account"
	"github.com/google/uuid"
)

// AccountCreate is the builder for creating a Account entity.
type AccountCreate struct {
	config
	mutation *AccountMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ac *AccountCreate) SetCreatedAt(u uint32) *AccountCreate {
	ac.mutation.SetCreatedAt(u)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AccountCreate) SetNillableCreatedAt(u *uint32) *AccountCreate {
	if u != nil {
		ac.SetCreatedAt(*u)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AccountCreate) SetUpdatedAt(u uint32) *AccountCreate {
	ac.mutation.SetUpdatedAt(u)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AccountCreate) SetNillableUpdatedAt(u *uint32) *AccountCreate {
	if u != nil {
		ac.SetUpdatedAt(*u)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AccountCreate) SetDeletedAt(u uint32) *AccountCreate {
	ac.mutation.SetDeletedAt(u)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AccountCreate) SetNillableDeletedAt(u *uint32) *AccountCreate {
	if u != nil {
		ac.SetDeletedAt(*u)
	}
	return ac
}

// SetEntID sets the "ent_id" field.
func (ac *AccountCreate) SetEntID(u uuid.UUID) *AccountCreate {
	ac.mutation.SetEntID(u)
	return ac
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ac *AccountCreate) SetNillableEntID(u *uuid.UUID) *AccountCreate {
	if u != nil {
		ac.SetEntID(*u)
	}
	return ac
}

// SetCoinTypeID sets the "coin_type_id" field.
func (ac *AccountCreate) SetCoinTypeID(u uuid.UUID) *AccountCreate {
	ac.mutation.SetCoinTypeID(u)
	return ac
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (ac *AccountCreate) SetNillableCoinTypeID(u *uuid.UUID) *AccountCreate {
	if u != nil {
		ac.SetCoinTypeID(*u)
	}
	return ac
}

// SetAddress sets the "address" field.
func (ac *AccountCreate) SetAddress(s string) *AccountCreate {
	ac.mutation.SetAddress(s)
	return ac
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (ac *AccountCreate) SetNillableAddress(s *string) *AccountCreate {
	if s != nil {
		ac.SetAddress(*s)
	}
	return ac
}

// SetUsedFor sets the "used_for" field.
func (ac *AccountCreate) SetUsedFor(s string) *AccountCreate {
	ac.mutation.SetUsedFor(s)
	return ac
}

// SetNillableUsedFor sets the "used_for" field if the given value is not nil.
func (ac *AccountCreate) SetNillableUsedFor(s *string) *AccountCreate {
	if s != nil {
		ac.SetUsedFor(*s)
	}
	return ac
}

// SetPlatformHoldPrivateKey sets the "platform_hold_private_key" field.
func (ac *AccountCreate) SetPlatformHoldPrivateKey(b bool) *AccountCreate {
	ac.mutation.SetPlatformHoldPrivateKey(b)
	return ac
}

// SetNillablePlatformHoldPrivateKey sets the "platform_hold_private_key" field if the given value is not nil.
func (ac *AccountCreate) SetNillablePlatformHoldPrivateKey(b *bool) *AccountCreate {
	if b != nil {
		ac.SetPlatformHoldPrivateKey(*b)
	}
	return ac
}

// SetActive sets the "active" field.
func (ac *AccountCreate) SetActive(b bool) *AccountCreate {
	ac.mutation.SetActive(b)
	return ac
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (ac *AccountCreate) SetNillableActive(b *bool) *AccountCreate {
	if b != nil {
		ac.SetActive(*b)
	}
	return ac
}

// SetLocked sets the "locked" field.
func (ac *AccountCreate) SetLocked(b bool) *AccountCreate {
	ac.mutation.SetLocked(b)
	return ac
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (ac *AccountCreate) SetNillableLocked(b *bool) *AccountCreate {
	if b != nil {
		ac.SetLocked(*b)
	}
	return ac
}

// SetLockedBy sets the "locked_by" field.
func (ac *AccountCreate) SetLockedBy(s string) *AccountCreate {
	ac.mutation.SetLockedBy(s)
	return ac
}

// SetNillableLockedBy sets the "locked_by" field if the given value is not nil.
func (ac *AccountCreate) SetNillableLockedBy(s *string) *AccountCreate {
	if s != nil {
		ac.SetLockedBy(*s)
	}
	return ac
}

// SetBlocked sets the "blocked" field.
func (ac *AccountCreate) SetBlocked(b bool) *AccountCreate {
	ac.mutation.SetBlocked(b)
	return ac
}

// SetNillableBlocked sets the "blocked" field if the given value is not nil.
func (ac *AccountCreate) SetNillableBlocked(b *bool) *AccountCreate {
	if b != nil {
		ac.SetBlocked(*b)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AccountCreate) SetID(u uint32) *AccountCreate {
	ac.mutation.SetID(u)
	return ac
}

// Mutation returns the AccountMutation object of the builder.
func (ac *AccountCreate) Mutation() *AccountMutation {
	return ac.mutation
}

// Save creates the Account in the database.
func (ac *AccountCreate) Save(ctx context.Context) (*Account, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AccountCreate) SaveX(ctx context.Context) *Account {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AccountCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AccountCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AccountCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := account.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := account.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.DeletedAt(); !ok {
		v := account.DefaultDeletedAt()
		ac.mutation.SetDeletedAt(v)
	}
	if _, ok := ac.mutation.EntID(); !ok {
		v := account.DefaultEntID()
		ac.mutation.SetEntID(v)
	}
	if _, ok := ac.mutation.CoinTypeID(); !ok {
		v := account.DefaultCoinTypeID()
		ac.mutation.SetCoinTypeID(v)
	}
	if _, ok := ac.mutation.Address(); !ok {
		v := account.DefaultAddress
		ac.mutation.SetAddress(v)
	}
	if _, ok := ac.mutation.UsedFor(); !ok {
		v := account.DefaultUsedFor
		ac.mutation.SetUsedFor(v)
	}
	if _, ok := ac.mutation.PlatformHoldPrivateKey(); !ok {
		v := account.DefaultPlatformHoldPrivateKey
		ac.mutation.SetPlatformHoldPrivateKey(v)
	}
	if _, ok := ac.mutation.Active(); !ok {
		v := account.DefaultActive
		ac.mutation.SetActive(v)
	}
	if _, ok := ac.mutation.Locked(); !ok {
		v := account.DefaultLocked
		ac.mutation.SetLocked(v)
	}
	if _, ok := ac.mutation.LockedBy(); !ok {
		v := account.DefaultLockedBy
		ac.mutation.SetLockedBy(v)
	}
	if _, ok := ac.mutation.Blocked(); !ok {
		v := account.DefaultBlocked
		ac.mutation.SetBlocked(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AccountCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Account.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Account.updated_at"`)}
	}
	if _, ok := ac.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "Account.deleted_at"`)}
	}
	if _, ok := ac.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "Account.ent_id"`)}
	}
	return nil
}

func (ac *AccountCreate) sqlSave(ctx context.Context) (*Account, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AccountCreate) createSpec() (*Account, *sqlgraph.CreateSpec) {
	var (
		_node = &Account{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(account.Table, sqlgraph.NewFieldSpec(account.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(account.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(account.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.SetField(account.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := ac.mutation.EntID(); ok {
		_spec.SetField(account.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := ac.mutation.CoinTypeID(); ok {
		_spec.SetField(account.FieldCoinTypeID, field.TypeUUID, value)
		_node.CoinTypeID = value
	}
	if value, ok := ac.mutation.Address(); ok {
		_spec.SetField(account.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := ac.mutation.UsedFor(); ok {
		_spec.SetField(account.FieldUsedFor, field.TypeString, value)
		_node.UsedFor = value
	}
	if value, ok := ac.mutation.PlatformHoldPrivateKey(); ok {
		_spec.SetField(account.FieldPlatformHoldPrivateKey, field.TypeBool, value)
		_node.PlatformHoldPrivateKey = value
	}
	if value, ok := ac.mutation.Active(); ok {
		_spec.SetField(account.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := ac.mutation.Locked(); ok {
		_spec.SetField(account.FieldLocked, field.TypeBool, value)
		_node.Locked = value
	}
	if value, ok := ac.mutation.LockedBy(); ok {
		_spec.SetField(account.FieldLockedBy, field.TypeString, value)
		_node.LockedBy = value
	}
	if value, ok := ac.mutation.Blocked(); ok {
		_spec.SetField(account.FieldBlocked, field.TypeBool, value)
		_node.Blocked = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Account.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccountUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ac *AccountCreate) OnConflict(opts ...sql.ConflictOption) *AccountUpsertOne {
	ac.conflict = opts
	return &AccountUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AccountCreate) OnConflictColumns(columns ...string) *AccountUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AccountUpsertOne{
		create: ac,
	}
}

type (
	// AccountUpsertOne is the builder for "upsert"-ing
	//  one Account node.
	AccountUpsertOne struct {
		create *AccountCreate
	}

	// AccountUpsert is the "OnConflict" setter.
	AccountUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *AccountUpsert) SetCreatedAt(v uint32) *AccountUpsert {
	u.Set(account.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AccountUpsert) UpdateCreatedAt() *AccountUpsert {
	u.SetExcluded(account.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AccountUpsert) AddCreatedAt(v uint32) *AccountUpsert {
	u.Add(account.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AccountUpsert) SetUpdatedAt(v uint32) *AccountUpsert {
	u.Set(account.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AccountUpsert) UpdateUpdatedAt() *AccountUpsert {
	u.SetExcluded(account.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AccountUpsert) AddUpdatedAt(v uint32) *AccountUpsert {
	u.Add(account.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AccountUpsert) SetDeletedAt(v uint32) *AccountUpsert {
	u.Set(account.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AccountUpsert) UpdateDeletedAt() *AccountUpsert {
	u.SetExcluded(account.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AccountUpsert) AddDeletedAt(v uint32) *AccountUpsert {
	u.Add(account.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AccountUpsert) SetEntID(v uuid.UUID) *AccountUpsert {
	u.Set(account.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AccountUpsert) UpdateEntID() *AccountUpsert {
	u.SetExcluded(account.FieldEntID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *AccountUpsert) SetCoinTypeID(v uuid.UUID) *AccountUpsert {
	u.Set(account.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *AccountUpsert) UpdateCoinTypeID() *AccountUpsert {
	u.SetExcluded(account.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *AccountUpsert) ClearCoinTypeID() *AccountUpsert {
	u.SetNull(account.FieldCoinTypeID)
	return u
}

// SetAddress sets the "address" field.
func (u *AccountUpsert) SetAddress(v string) *AccountUpsert {
	u.Set(account.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AccountUpsert) UpdateAddress() *AccountUpsert {
	u.SetExcluded(account.FieldAddress)
	return u
}

// ClearAddress clears the value of the "address" field.
func (u *AccountUpsert) ClearAddress() *AccountUpsert {
	u.SetNull(account.FieldAddress)
	return u
}

// SetUsedFor sets the "used_for" field.
func (u *AccountUpsert) SetUsedFor(v string) *AccountUpsert {
	u.Set(account.FieldUsedFor, v)
	return u
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *AccountUpsert) UpdateUsedFor() *AccountUpsert {
	u.SetExcluded(account.FieldUsedFor)
	return u
}

// ClearUsedFor clears the value of the "used_for" field.
func (u *AccountUpsert) ClearUsedFor() *AccountUpsert {
	u.SetNull(account.FieldUsedFor)
	return u
}

// SetPlatformHoldPrivateKey sets the "platform_hold_private_key" field.
func (u *AccountUpsert) SetPlatformHoldPrivateKey(v bool) *AccountUpsert {
	u.Set(account.FieldPlatformHoldPrivateKey, v)
	return u
}

// UpdatePlatformHoldPrivateKey sets the "platform_hold_private_key" field to the value that was provided on create.
func (u *AccountUpsert) UpdatePlatformHoldPrivateKey() *AccountUpsert {
	u.SetExcluded(account.FieldPlatformHoldPrivateKey)
	return u
}

// ClearPlatformHoldPrivateKey clears the value of the "platform_hold_private_key" field.
func (u *AccountUpsert) ClearPlatformHoldPrivateKey() *AccountUpsert {
	u.SetNull(account.FieldPlatformHoldPrivateKey)
	return u
}

// SetActive sets the "active" field.
func (u *AccountUpsert) SetActive(v bool) *AccountUpsert {
	u.Set(account.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *AccountUpsert) UpdateActive() *AccountUpsert {
	u.SetExcluded(account.FieldActive)
	return u
}

// ClearActive clears the value of the "active" field.
func (u *AccountUpsert) ClearActive() *AccountUpsert {
	u.SetNull(account.FieldActive)
	return u
}

// SetLocked sets the "locked" field.
func (u *AccountUpsert) SetLocked(v bool) *AccountUpsert {
	u.Set(account.FieldLocked, v)
	return u
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *AccountUpsert) UpdateLocked() *AccountUpsert {
	u.SetExcluded(account.FieldLocked)
	return u
}

// ClearLocked clears the value of the "locked" field.
func (u *AccountUpsert) ClearLocked() *AccountUpsert {
	u.SetNull(account.FieldLocked)
	return u
}

// SetLockedBy sets the "locked_by" field.
func (u *AccountUpsert) SetLockedBy(v string) *AccountUpsert {
	u.Set(account.FieldLockedBy, v)
	return u
}

// UpdateLockedBy sets the "locked_by" field to the value that was provided on create.
func (u *AccountUpsert) UpdateLockedBy() *AccountUpsert {
	u.SetExcluded(account.FieldLockedBy)
	return u
}

// ClearLockedBy clears the value of the "locked_by" field.
func (u *AccountUpsert) ClearLockedBy() *AccountUpsert {
	u.SetNull(account.FieldLockedBy)
	return u
}

// SetBlocked sets the "blocked" field.
func (u *AccountUpsert) SetBlocked(v bool) *AccountUpsert {
	u.Set(account.FieldBlocked, v)
	return u
}

// UpdateBlocked sets the "blocked" field to the value that was provided on create.
func (u *AccountUpsert) UpdateBlocked() *AccountUpsert {
	u.SetExcluded(account.FieldBlocked)
	return u
}

// ClearBlocked clears the value of the "blocked" field.
func (u *AccountUpsert) ClearBlocked() *AccountUpsert {
	u.SetNull(account.FieldBlocked)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(account.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AccountUpsertOne) UpdateNewValues() *AccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(account.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Account.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AccountUpsertOne) Ignore() *AccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccountUpsertOne) DoNothing() *AccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccountCreate.OnConflict
// documentation for more info.
func (u *AccountUpsertOne) Update(set func(*AccountUpsert)) *AccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AccountUpsertOne) SetCreatedAt(v uint32) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AccountUpsertOne) AddCreatedAt(v uint32) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateCreatedAt() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AccountUpsertOne) SetUpdatedAt(v uint32) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AccountUpsertOne) AddUpdatedAt(v uint32) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateUpdatedAt() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AccountUpsertOne) SetDeletedAt(v uint32) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AccountUpsertOne) AddDeletedAt(v uint32) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateDeletedAt() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *AccountUpsertOne) SetEntID(v uuid.UUID) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateEntID() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateEntID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *AccountUpsertOne) SetCoinTypeID(v uuid.UUID) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateCoinTypeID() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *AccountUpsertOne) ClearCoinTypeID() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAddress sets the "address" field.
func (u *AccountUpsertOne) SetAddress(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateAddress() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *AccountUpsertOne) ClearAddress() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.ClearAddress()
	})
}

// SetUsedFor sets the "used_for" field.
func (u *AccountUpsertOne) SetUsedFor(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetUsedFor(v)
	})
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateUsedFor() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateUsedFor()
	})
}

// ClearUsedFor clears the value of the "used_for" field.
func (u *AccountUpsertOne) ClearUsedFor() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.ClearUsedFor()
	})
}

// SetPlatformHoldPrivateKey sets the "platform_hold_private_key" field.
func (u *AccountUpsertOne) SetPlatformHoldPrivateKey(v bool) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetPlatformHoldPrivateKey(v)
	})
}

// UpdatePlatformHoldPrivateKey sets the "platform_hold_private_key" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdatePlatformHoldPrivateKey() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdatePlatformHoldPrivateKey()
	})
}

// ClearPlatformHoldPrivateKey clears the value of the "platform_hold_private_key" field.
func (u *AccountUpsertOne) ClearPlatformHoldPrivateKey() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.ClearPlatformHoldPrivateKey()
	})
}

// SetActive sets the "active" field.
func (u *AccountUpsertOne) SetActive(v bool) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateActive() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateActive()
	})
}

// ClearActive clears the value of the "active" field.
func (u *AccountUpsertOne) ClearActive() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.ClearActive()
	})
}

// SetLocked sets the "locked" field.
func (u *AccountUpsertOne) SetLocked(v bool) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetLocked(v)
	})
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateLocked() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateLocked()
	})
}

// ClearLocked clears the value of the "locked" field.
func (u *AccountUpsertOne) ClearLocked() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.ClearLocked()
	})
}

// SetLockedBy sets the "locked_by" field.
func (u *AccountUpsertOne) SetLockedBy(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetLockedBy(v)
	})
}

// UpdateLockedBy sets the "locked_by" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateLockedBy() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateLockedBy()
	})
}

// ClearLockedBy clears the value of the "locked_by" field.
func (u *AccountUpsertOne) ClearLockedBy() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.ClearLockedBy()
	})
}

// SetBlocked sets the "blocked" field.
func (u *AccountUpsertOne) SetBlocked(v bool) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetBlocked(v)
	})
}

// UpdateBlocked sets the "blocked" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateBlocked() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateBlocked()
	})
}

// ClearBlocked clears the value of the "blocked" field.
func (u *AccountUpsertOne) ClearBlocked() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.ClearBlocked()
	})
}

// Exec executes the query.
func (u *AccountUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AccountCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccountUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AccountUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AccountUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AccountCreateBulk is the builder for creating many Account entities in bulk.
type AccountCreateBulk struct {
	config
	err      error
	builders []*AccountCreate
	conflict []sql.ConflictOption
}

// Save creates the Account entities in the database.
func (acb *AccountCreateBulk) Save(ctx context.Context) ([]*Account, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Account, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AccountCreateBulk) SaveX(ctx context.Context) []*Account {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AccountCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AccountCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Account.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccountUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (acb *AccountCreateBulk) OnConflict(opts ...sql.ConflictOption) *AccountUpsertBulk {
	acb.conflict = opts
	return &AccountUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AccountCreateBulk) OnConflictColumns(columns ...string) *AccountUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AccountUpsertBulk{
		create: acb,
	}
}

// AccountUpsertBulk is the builder for "upsert"-ing
// a bulk of Account nodes.
type AccountUpsertBulk struct {
	create *AccountCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(account.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AccountUpsertBulk) UpdateNewValues() *AccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(account.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AccountUpsertBulk) Ignore() *AccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccountUpsertBulk) DoNothing() *AccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccountCreateBulk.OnConflict
// documentation for more info.
func (u *AccountUpsertBulk) Update(set func(*AccountUpsert)) *AccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AccountUpsertBulk) SetCreatedAt(v uint32) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AccountUpsertBulk) AddCreatedAt(v uint32) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateCreatedAt() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AccountUpsertBulk) SetUpdatedAt(v uint32) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AccountUpsertBulk) AddUpdatedAt(v uint32) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateUpdatedAt() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AccountUpsertBulk) SetDeletedAt(v uint32) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AccountUpsertBulk) AddDeletedAt(v uint32) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateDeletedAt() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *AccountUpsertBulk) SetEntID(v uuid.UUID) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateEntID() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateEntID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *AccountUpsertBulk) SetCoinTypeID(v uuid.UUID) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateCoinTypeID() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *AccountUpsertBulk) ClearCoinTypeID() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAddress sets the "address" field.
func (u *AccountUpsertBulk) SetAddress(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateAddress() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *AccountUpsertBulk) ClearAddress() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.ClearAddress()
	})
}

// SetUsedFor sets the "used_for" field.
func (u *AccountUpsertBulk) SetUsedFor(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetUsedFor(v)
	})
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateUsedFor() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateUsedFor()
	})
}

// ClearUsedFor clears the value of the "used_for" field.
func (u *AccountUpsertBulk) ClearUsedFor() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.ClearUsedFor()
	})
}

// SetPlatformHoldPrivateKey sets the "platform_hold_private_key" field.
func (u *AccountUpsertBulk) SetPlatformHoldPrivateKey(v bool) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetPlatformHoldPrivateKey(v)
	})
}

// UpdatePlatformHoldPrivateKey sets the "platform_hold_private_key" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdatePlatformHoldPrivateKey() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdatePlatformHoldPrivateKey()
	})
}

// ClearPlatformHoldPrivateKey clears the value of the "platform_hold_private_key" field.
func (u *AccountUpsertBulk) ClearPlatformHoldPrivateKey() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.ClearPlatformHoldPrivateKey()
	})
}

// SetActive sets the "active" field.
func (u *AccountUpsertBulk) SetActive(v bool) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateActive() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateActive()
	})
}

// ClearActive clears the value of the "active" field.
func (u *AccountUpsertBulk) ClearActive() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.ClearActive()
	})
}

// SetLocked sets the "locked" field.
func (u *AccountUpsertBulk) SetLocked(v bool) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetLocked(v)
	})
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateLocked() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateLocked()
	})
}

// ClearLocked clears the value of the "locked" field.
func (u *AccountUpsertBulk) ClearLocked() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.ClearLocked()
	})
}

// SetLockedBy sets the "locked_by" field.
func (u *AccountUpsertBulk) SetLockedBy(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetLockedBy(v)
	})
}

// UpdateLockedBy sets the "locked_by" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateLockedBy() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateLockedBy()
	})
}

// ClearLockedBy clears the value of the "locked_by" field.
func (u *AccountUpsertBulk) ClearLockedBy() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.ClearLockedBy()
	})
}

// SetBlocked sets the "blocked" field.
func (u *AccountUpsertBulk) SetBlocked(v bool) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetBlocked(v)
	})
}

// UpdateBlocked sets the "blocked" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateBlocked() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateBlocked()
	})
}

// ClearBlocked clears the value of the "blocked" field.
func (u *AccountUpsertBulk) ClearBlocked() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.ClearBlocked()
	})
}

// Exec executes the query.
func (u *AccountUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the AccountCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AccountCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccountUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

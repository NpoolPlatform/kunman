// Code generated by ent, DO NOT EDIT.

package api

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the api type in the database.
	Label = "api"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldProtocol holds the string denoting the protocol field in the database.
	FieldProtocol = "protocol"
	// FieldServiceName holds the string denoting the service_name field in the database.
	FieldServiceName = "service_name"
	// FieldMethod holds the string denoting the method field in the database.
	FieldMethod = "method"
	// FieldMethodName holds the string denoting the method_name field in the database.
	FieldMethodName = "method_name"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldExported holds the string denoting the exported field in the database.
	FieldExported = "exported"
	// FieldPathPrefix holds the string denoting the path_prefix field in the database.
	FieldPathPrefix = "path_prefix"
	// FieldDomains holds the string denoting the domains field in the database.
	FieldDomains = "domains"
	// FieldDeprecated holds the string denoting the deprecated field in the database.
	FieldDeprecated = "deprecated"
	// Table holds the table name of the api in the database.
	Table = "apis"
)

// Columns holds all SQL columns for api fields.
var Columns = []string{
	FieldID,
	FieldEntID,
	FieldProtocol,
	FieldServiceName,
	FieldMethod,
	FieldMethodName,
	FieldPath,
	FieldExported,
	FieldPathPrefix,
	FieldDomains,
	FieldDeprecated,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultProtocol holds the default value on creation for the "protocol" field.
	DefaultProtocol string
	// DefaultServiceName holds the default value on creation for the "service_name" field.
	DefaultServiceName string
	// DefaultMethod holds the default value on creation for the "method" field.
	DefaultMethod string
	// DefaultMethodName holds the default value on creation for the "method_name" field.
	DefaultMethodName string
	// DefaultPath holds the default value on creation for the "path" field.
	DefaultPath string
	// DefaultExported holds the default value on creation for the "exported" field.
	DefaultExported bool
	// DefaultPathPrefix holds the default value on creation for the "path_prefix" field.
	DefaultPathPrefix string
	// DefaultDomains holds the default value on creation for the "domains" field.
	DefaultDomains []string
	// DefaultDeprecated holds the default value on creation for the "deprecated" field.
	DefaultDeprecated bool
)

// OrderOption defines the ordering options for the API queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByProtocol orders the results by the protocol field.
func ByProtocol(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProtocol, opts...).ToFunc()
}

// ByServiceName orders the results by the service_name field.
func ByServiceName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServiceName, opts...).ToFunc()
}

// ByMethod orders the results by the method field.
func ByMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMethod, opts...).ToFunc()
}

// ByMethodName orders the results by the method_name field.
func ByMethodName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMethodName, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// ByExported orders the results by the exported field.
func ByExported(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExported, opts...).ToFunc()
}

// ByPathPrefix orders the results by the path_prefix field.
func ByPathPrefix(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPathPrefix, opts...).ToFunc()
}

// ByDeprecated orders the results by the deprecated field.
func ByDeprecated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeprecated, opts...).ToFunc()
}

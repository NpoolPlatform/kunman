// Code generated by ent, DO NOT EDIT.

package api

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/basal/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.API {
	return predicate.API(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.API {
	return predicate.API(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.API {
	return predicate.API(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.API {
	return predicate.API(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.API {
	return predicate.API(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.API {
	return predicate.API(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.API {
	return predicate.API(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.API {
	return predicate.API(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.API {
	return predicate.API(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.API {
	return predicate.API(sql.FieldEQ(FieldEntID, v))
}

// Protocol applies equality check predicate on the "protocol" field. It's identical to ProtocolEQ.
func Protocol(v string) predicate.API {
	return predicate.API(sql.FieldEQ(FieldProtocol, v))
}

// ServiceName applies equality check predicate on the "service_name" field. It's identical to ServiceNameEQ.
func ServiceName(v string) predicate.API {
	return predicate.API(sql.FieldEQ(FieldServiceName, v))
}

// Method applies equality check predicate on the "method" field. It's identical to MethodEQ.
func Method(v string) predicate.API {
	return predicate.API(sql.FieldEQ(FieldMethod, v))
}

// MethodName applies equality check predicate on the "method_name" field. It's identical to MethodNameEQ.
func MethodName(v string) predicate.API {
	return predicate.API(sql.FieldEQ(FieldMethodName, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.API {
	return predicate.API(sql.FieldEQ(FieldPath, v))
}

// Exported applies equality check predicate on the "exported" field. It's identical to ExportedEQ.
func Exported(v bool) predicate.API {
	return predicate.API(sql.FieldEQ(FieldExported, v))
}

// PathPrefix applies equality check predicate on the "path_prefix" field. It's identical to PathPrefixEQ.
func PathPrefix(v string) predicate.API {
	return predicate.API(sql.FieldEQ(FieldPathPrefix, v))
}

// Deprecated applies equality check predicate on the "deprecated" field. It's identical to DeprecatedEQ.
func Deprecated(v bool) predicate.API {
	return predicate.API(sql.FieldEQ(FieldDeprecated, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.API {
	return predicate.API(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.API {
	return predicate.API(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.API {
	return predicate.API(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.API {
	return predicate.API(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.API {
	return predicate.API(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.API {
	return predicate.API(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.API {
	return predicate.API(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.API {
	return predicate.API(sql.FieldLTE(FieldEntID, v))
}

// ProtocolEQ applies the EQ predicate on the "protocol" field.
func ProtocolEQ(v string) predicate.API {
	return predicate.API(sql.FieldEQ(FieldProtocol, v))
}

// ProtocolNEQ applies the NEQ predicate on the "protocol" field.
func ProtocolNEQ(v string) predicate.API {
	return predicate.API(sql.FieldNEQ(FieldProtocol, v))
}

// ProtocolIn applies the In predicate on the "protocol" field.
func ProtocolIn(vs ...string) predicate.API {
	return predicate.API(sql.FieldIn(FieldProtocol, vs...))
}

// ProtocolNotIn applies the NotIn predicate on the "protocol" field.
func ProtocolNotIn(vs ...string) predicate.API {
	return predicate.API(sql.FieldNotIn(FieldProtocol, vs...))
}

// ProtocolGT applies the GT predicate on the "protocol" field.
func ProtocolGT(v string) predicate.API {
	return predicate.API(sql.FieldGT(FieldProtocol, v))
}

// ProtocolGTE applies the GTE predicate on the "protocol" field.
func ProtocolGTE(v string) predicate.API {
	return predicate.API(sql.FieldGTE(FieldProtocol, v))
}

// ProtocolLT applies the LT predicate on the "protocol" field.
func ProtocolLT(v string) predicate.API {
	return predicate.API(sql.FieldLT(FieldProtocol, v))
}

// ProtocolLTE applies the LTE predicate on the "protocol" field.
func ProtocolLTE(v string) predicate.API {
	return predicate.API(sql.FieldLTE(FieldProtocol, v))
}

// ProtocolContains applies the Contains predicate on the "protocol" field.
func ProtocolContains(v string) predicate.API {
	return predicate.API(sql.FieldContains(FieldProtocol, v))
}

// ProtocolHasPrefix applies the HasPrefix predicate on the "protocol" field.
func ProtocolHasPrefix(v string) predicate.API {
	return predicate.API(sql.FieldHasPrefix(FieldProtocol, v))
}

// ProtocolHasSuffix applies the HasSuffix predicate on the "protocol" field.
func ProtocolHasSuffix(v string) predicate.API {
	return predicate.API(sql.FieldHasSuffix(FieldProtocol, v))
}

// ProtocolIsNil applies the IsNil predicate on the "protocol" field.
func ProtocolIsNil() predicate.API {
	return predicate.API(sql.FieldIsNull(FieldProtocol))
}

// ProtocolNotNil applies the NotNil predicate on the "protocol" field.
func ProtocolNotNil() predicate.API {
	return predicate.API(sql.FieldNotNull(FieldProtocol))
}

// ProtocolEqualFold applies the EqualFold predicate on the "protocol" field.
func ProtocolEqualFold(v string) predicate.API {
	return predicate.API(sql.FieldEqualFold(FieldProtocol, v))
}

// ProtocolContainsFold applies the ContainsFold predicate on the "protocol" field.
func ProtocolContainsFold(v string) predicate.API {
	return predicate.API(sql.FieldContainsFold(FieldProtocol, v))
}

// ServiceNameEQ applies the EQ predicate on the "service_name" field.
func ServiceNameEQ(v string) predicate.API {
	return predicate.API(sql.FieldEQ(FieldServiceName, v))
}

// ServiceNameNEQ applies the NEQ predicate on the "service_name" field.
func ServiceNameNEQ(v string) predicate.API {
	return predicate.API(sql.FieldNEQ(FieldServiceName, v))
}

// ServiceNameIn applies the In predicate on the "service_name" field.
func ServiceNameIn(vs ...string) predicate.API {
	return predicate.API(sql.FieldIn(FieldServiceName, vs...))
}

// ServiceNameNotIn applies the NotIn predicate on the "service_name" field.
func ServiceNameNotIn(vs ...string) predicate.API {
	return predicate.API(sql.FieldNotIn(FieldServiceName, vs...))
}

// ServiceNameGT applies the GT predicate on the "service_name" field.
func ServiceNameGT(v string) predicate.API {
	return predicate.API(sql.FieldGT(FieldServiceName, v))
}

// ServiceNameGTE applies the GTE predicate on the "service_name" field.
func ServiceNameGTE(v string) predicate.API {
	return predicate.API(sql.FieldGTE(FieldServiceName, v))
}

// ServiceNameLT applies the LT predicate on the "service_name" field.
func ServiceNameLT(v string) predicate.API {
	return predicate.API(sql.FieldLT(FieldServiceName, v))
}

// ServiceNameLTE applies the LTE predicate on the "service_name" field.
func ServiceNameLTE(v string) predicate.API {
	return predicate.API(sql.FieldLTE(FieldServiceName, v))
}

// ServiceNameContains applies the Contains predicate on the "service_name" field.
func ServiceNameContains(v string) predicate.API {
	return predicate.API(sql.FieldContains(FieldServiceName, v))
}

// ServiceNameHasPrefix applies the HasPrefix predicate on the "service_name" field.
func ServiceNameHasPrefix(v string) predicate.API {
	return predicate.API(sql.FieldHasPrefix(FieldServiceName, v))
}

// ServiceNameHasSuffix applies the HasSuffix predicate on the "service_name" field.
func ServiceNameHasSuffix(v string) predicate.API {
	return predicate.API(sql.FieldHasSuffix(FieldServiceName, v))
}

// ServiceNameIsNil applies the IsNil predicate on the "service_name" field.
func ServiceNameIsNil() predicate.API {
	return predicate.API(sql.FieldIsNull(FieldServiceName))
}

// ServiceNameNotNil applies the NotNil predicate on the "service_name" field.
func ServiceNameNotNil() predicate.API {
	return predicate.API(sql.FieldNotNull(FieldServiceName))
}

// ServiceNameEqualFold applies the EqualFold predicate on the "service_name" field.
func ServiceNameEqualFold(v string) predicate.API {
	return predicate.API(sql.FieldEqualFold(FieldServiceName, v))
}

// ServiceNameContainsFold applies the ContainsFold predicate on the "service_name" field.
func ServiceNameContainsFold(v string) predicate.API {
	return predicate.API(sql.FieldContainsFold(FieldServiceName, v))
}

// MethodEQ applies the EQ predicate on the "method" field.
func MethodEQ(v string) predicate.API {
	return predicate.API(sql.FieldEQ(FieldMethod, v))
}

// MethodNEQ applies the NEQ predicate on the "method" field.
func MethodNEQ(v string) predicate.API {
	return predicate.API(sql.FieldNEQ(FieldMethod, v))
}

// MethodIn applies the In predicate on the "method" field.
func MethodIn(vs ...string) predicate.API {
	return predicate.API(sql.FieldIn(FieldMethod, vs...))
}

// MethodNotIn applies the NotIn predicate on the "method" field.
func MethodNotIn(vs ...string) predicate.API {
	return predicate.API(sql.FieldNotIn(FieldMethod, vs...))
}

// MethodGT applies the GT predicate on the "method" field.
func MethodGT(v string) predicate.API {
	return predicate.API(sql.FieldGT(FieldMethod, v))
}

// MethodGTE applies the GTE predicate on the "method" field.
func MethodGTE(v string) predicate.API {
	return predicate.API(sql.FieldGTE(FieldMethod, v))
}

// MethodLT applies the LT predicate on the "method" field.
func MethodLT(v string) predicate.API {
	return predicate.API(sql.FieldLT(FieldMethod, v))
}

// MethodLTE applies the LTE predicate on the "method" field.
func MethodLTE(v string) predicate.API {
	return predicate.API(sql.FieldLTE(FieldMethod, v))
}

// MethodContains applies the Contains predicate on the "method" field.
func MethodContains(v string) predicate.API {
	return predicate.API(sql.FieldContains(FieldMethod, v))
}

// MethodHasPrefix applies the HasPrefix predicate on the "method" field.
func MethodHasPrefix(v string) predicate.API {
	return predicate.API(sql.FieldHasPrefix(FieldMethod, v))
}

// MethodHasSuffix applies the HasSuffix predicate on the "method" field.
func MethodHasSuffix(v string) predicate.API {
	return predicate.API(sql.FieldHasSuffix(FieldMethod, v))
}

// MethodIsNil applies the IsNil predicate on the "method" field.
func MethodIsNil() predicate.API {
	return predicate.API(sql.FieldIsNull(FieldMethod))
}

// MethodNotNil applies the NotNil predicate on the "method" field.
func MethodNotNil() predicate.API {
	return predicate.API(sql.FieldNotNull(FieldMethod))
}

// MethodEqualFold applies the EqualFold predicate on the "method" field.
func MethodEqualFold(v string) predicate.API {
	return predicate.API(sql.FieldEqualFold(FieldMethod, v))
}

// MethodContainsFold applies the ContainsFold predicate on the "method" field.
func MethodContainsFold(v string) predicate.API {
	return predicate.API(sql.FieldContainsFold(FieldMethod, v))
}

// MethodNameEQ applies the EQ predicate on the "method_name" field.
func MethodNameEQ(v string) predicate.API {
	return predicate.API(sql.FieldEQ(FieldMethodName, v))
}

// MethodNameNEQ applies the NEQ predicate on the "method_name" field.
func MethodNameNEQ(v string) predicate.API {
	return predicate.API(sql.FieldNEQ(FieldMethodName, v))
}

// MethodNameIn applies the In predicate on the "method_name" field.
func MethodNameIn(vs ...string) predicate.API {
	return predicate.API(sql.FieldIn(FieldMethodName, vs...))
}

// MethodNameNotIn applies the NotIn predicate on the "method_name" field.
func MethodNameNotIn(vs ...string) predicate.API {
	return predicate.API(sql.FieldNotIn(FieldMethodName, vs...))
}

// MethodNameGT applies the GT predicate on the "method_name" field.
func MethodNameGT(v string) predicate.API {
	return predicate.API(sql.FieldGT(FieldMethodName, v))
}

// MethodNameGTE applies the GTE predicate on the "method_name" field.
func MethodNameGTE(v string) predicate.API {
	return predicate.API(sql.FieldGTE(FieldMethodName, v))
}

// MethodNameLT applies the LT predicate on the "method_name" field.
func MethodNameLT(v string) predicate.API {
	return predicate.API(sql.FieldLT(FieldMethodName, v))
}

// MethodNameLTE applies the LTE predicate on the "method_name" field.
func MethodNameLTE(v string) predicate.API {
	return predicate.API(sql.FieldLTE(FieldMethodName, v))
}

// MethodNameContains applies the Contains predicate on the "method_name" field.
func MethodNameContains(v string) predicate.API {
	return predicate.API(sql.FieldContains(FieldMethodName, v))
}

// MethodNameHasPrefix applies the HasPrefix predicate on the "method_name" field.
func MethodNameHasPrefix(v string) predicate.API {
	return predicate.API(sql.FieldHasPrefix(FieldMethodName, v))
}

// MethodNameHasSuffix applies the HasSuffix predicate on the "method_name" field.
func MethodNameHasSuffix(v string) predicate.API {
	return predicate.API(sql.FieldHasSuffix(FieldMethodName, v))
}

// MethodNameIsNil applies the IsNil predicate on the "method_name" field.
func MethodNameIsNil() predicate.API {
	return predicate.API(sql.FieldIsNull(FieldMethodName))
}

// MethodNameNotNil applies the NotNil predicate on the "method_name" field.
func MethodNameNotNil() predicate.API {
	return predicate.API(sql.FieldNotNull(FieldMethodName))
}

// MethodNameEqualFold applies the EqualFold predicate on the "method_name" field.
func MethodNameEqualFold(v string) predicate.API {
	return predicate.API(sql.FieldEqualFold(FieldMethodName, v))
}

// MethodNameContainsFold applies the ContainsFold predicate on the "method_name" field.
func MethodNameContainsFold(v string) predicate.API {
	return predicate.API(sql.FieldContainsFold(FieldMethodName, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.API {
	return predicate.API(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.API {
	return predicate.API(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.API {
	return predicate.API(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.API {
	return predicate.API(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.API {
	return predicate.API(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.API {
	return predicate.API(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.API {
	return predicate.API(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.API {
	return predicate.API(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.API {
	return predicate.API(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.API {
	return predicate.API(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.API {
	return predicate.API(sql.FieldHasSuffix(FieldPath, v))
}

// PathIsNil applies the IsNil predicate on the "path" field.
func PathIsNil() predicate.API {
	return predicate.API(sql.FieldIsNull(FieldPath))
}

// PathNotNil applies the NotNil predicate on the "path" field.
func PathNotNil() predicate.API {
	return predicate.API(sql.FieldNotNull(FieldPath))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.API {
	return predicate.API(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.API {
	return predicate.API(sql.FieldContainsFold(FieldPath, v))
}

// ExportedEQ applies the EQ predicate on the "exported" field.
func ExportedEQ(v bool) predicate.API {
	return predicate.API(sql.FieldEQ(FieldExported, v))
}

// ExportedNEQ applies the NEQ predicate on the "exported" field.
func ExportedNEQ(v bool) predicate.API {
	return predicate.API(sql.FieldNEQ(FieldExported, v))
}

// ExportedIsNil applies the IsNil predicate on the "exported" field.
func ExportedIsNil() predicate.API {
	return predicate.API(sql.FieldIsNull(FieldExported))
}

// ExportedNotNil applies the NotNil predicate on the "exported" field.
func ExportedNotNil() predicate.API {
	return predicate.API(sql.FieldNotNull(FieldExported))
}

// PathPrefixEQ applies the EQ predicate on the "path_prefix" field.
func PathPrefixEQ(v string) predicate.API {
	return predicate.API(sql.FieldEQ(FieldPathPrefix, v))
}

// PathPrefixNEQ applies the NEQ predicate on the "path_prefix" field.
func PathPrefixNEQ(v string) predicate.API {
	return predicate.API(sql.FieldNEQ(FieldPathPrefix, v))
}

// PathPrefixIn applies the In predicate on the "path_prefix" field.
func PathPrefixIn(vs ...string) predicate.API {
	return predicate.API(sql.FieldIn(FieldPathPrefix, vs...))
}

// PathPrefixNotIn applies the NotIn predicate on the "path_prefix" field.
func PathPrefixNotIn(vs ...string) predicate.API {
	return predicate.API(sql.FieldNotIn(FieldPathPrefix, vs...))
}

// PathPrefixGT applies the GT predicate on the "path_prefix" field.
func PathPrefixGT(v string) predicate.API {
	return predicate.API(sql.FieldGT(FieldPathPrefix, v))
}

// PathPrefixGTE applies the GTE predicate on the "path_prefix" field.
func PathPrefixGTE(v string) predicate.API {
	return predicate.API(sql.FieldGTE(FieldPathPrefix, v))
}

// PathPrefixLT applies the LT predicate on the "path_prefix" field.
func PathPrefixLT(v string) predicate.API {
	return predicate.API(sql.FieldLT(FieldPathPrefix, v))
}

// PathPrefixLTE applies the LTE predicate on the "path_prefix" field.
func PathPrefixLTE(v string) predicate.API {
	return predicate.API(sql.FieldLTE(FieldPathPrefix, v))
}

// PathPrefixContains applies the Contains predicate on the "path_prefix" field.
func PathPrefixContains(v string) predicate.API {
	return predicate.API(sql.FieldContains(FieldPathPrefix, v))
}

// PathPrefixHasPrefix applies the HasPrefix predicate on the "path_prefix" field.
func PathPrefixHasPrefix(v string) predicate.API {
	return predicate.API(sql.FieldHasPrefix(FieldPathPrefix, v))
}

// PathPrefixHasSuffix applies the HasSuffix predicate on the "path_prefix" field.
func PathPrefixHasSuffix(v string) predicate.API {
	return predicate.API(sql.FieldHasSuffix(FieldPathPrefix, v))
}

// PathPrefixIsNil applies the IsNil predicate on the "path_prefix" field.
func PathPrefixIsNil() predicate.API {
	return predicate.API(sql.FieldIsNull(FieldPathPrefix))
}

// PathPrefixNotNil applies the NotNil predicate on the "path_prefix" field.
func PathPrefixNotNil() predicate.API {
	return predicate.API(sql.FieldNotNull(FieldPathPrefix))
}

// PathPrefixEqualFold applies the EqualFold predicate on the "path_prefix" field.
func PathPrefixEqualFold(v string) predicate.API {
	return predicate.API(sql.FieldEqualFold(FieldPathPrefix, v))
}

// PathPrefixContainsFold applies the ContainsFold predicate on the "path_prefix" field.
func PathPrefixContainsFold(v string) predicate.API {
	return predicate.API(sql.FieldContainsFold(FieldPathPrefix, v))
}

// DomainsIsNil applies the IsNil predicate on the "domains" field.
func DomainsIsNil() predicate.API {
	return predicate.API(sql.FieldIsNull(FieldDomains))
}

// DomainsNotNil applies the NotNil predicate on the "domains" field.
func DomainsNotNil() predicate.API {
	return predicate.API(sql.FieldNotNull(FieldDomains))
}

// DeprecatedEQ applies the EQ predicate on the "deprecated" field.
func DeprecatedEQ(v bool) predicate.API {
	return predicate.API(sql.FieldEQ(FieldDeprecated, v))
}

// DeprecatedNEQ applies the NEQ predicate on the "deprecated" field.
func DeprecatedNEQ(v bool) predicate.API {
	return predicate.API(sql.FieldNEQ(FieldDeprecated, v))
}

// DeprecatedIsNil applies the IsNil predicate on the "deprecated" field.
func DeprecatedIsNil() predicate.API {
	return predicate.API(sql.FieldIsNull(FieldDeprecated))
}

// DeprecatedNotNil applies the NotNil predicate on the "deprecated" field.
func DeprecatedNotNil() predicate.API {
	return predicate.API(sql.FieldNotNull(FieldDeprecated))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.API) predicate.API {
	return predicate.API(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.API) predicate.API {
	return predicate.API(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.API) predicate.API {
	return predicate.API(sql.NotPredicates(p))
}

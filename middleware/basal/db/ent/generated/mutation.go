// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/basal/db/ent/generated/api"
	"github.com/NpoolPlatform/kunman/middleware/basal/db/ent/generated/predicate"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAPI = "API"
)

// APIMutation represents an operation that mutates the API nodes in the graph.
type APIMutation struct {
	config
	op            Op
	typ           string
	id            *uint32
	ent_id        *uuid.UUID
	protocol      *string
	service_name  *string
	method        *string
	method_name   *string
	_path         *string
	exported      *bool
	path_prefix   *string
	domains       *[]string
	appenddomains []string
	deprecated    *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*API, error)
	predicates    []predicate.API
}

var _ ent.Mutation = (*APIMutation)(nil)

// apiOption allows management of the mutation configuration using functional options.
type apiOption func(*APIMutation)

// newAPIMutation creates new mutation for the API entity.
func newAPIMutation(c config, op Op, opts ...apiOption) *APIMutation {
	m := &APIMutation{
		config:        c,
		op:            op,
		typ:           TypeAPI,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAPIID sets the ID field of the mutation.
func withAPIID(id uint32) apiOption {
	return func(m *APIMutation) {
		var (
			err   error
			once  sync.Once
			value *API
		)
		m.oldValue = func(ctx context.Context) (*API, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().API.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAPI sets the old API of the mutation.
func withAPI(node *API) apiOption {
	return func(m *APIMutation) {
		m.oldValue = func(context.Context) (*API, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m APIMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m APIMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of API entities.
func (m *APIMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *APIMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *APIMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().API.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEntID sets the "ent_id" field.
func (m *APIMutation) SetEntID(u uuid.UUID) {
	m.ent_id = &u
}

// EntID returns the value of the "ent_id" field in the mutation.
func (m *APIMutation) EntID() (r uuid.UUID, exists bool) {
	v := m.ent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEntID returns the old "ent_id" field's value of the API entity.
// If the API object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIMutation) OldEntID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntID: %w", err)
	}
	return oldValue.EntID, nil
}

// ResetEntID resets all changes to the "ent_id" field.
func (m *APIMutation) ResetEntID() {
	m.ent_id = nil
}

// SetProtocol sets the "protocol" field.
func (m *APIMutation) SetProtocol(s string) {
	m.protocol = &s
}

// Protocol returns the value of the "protocol" field in the mutation.
func (m *APIMutation) Protocol() (r string, exists bool) {
	v := m.protocol
	if v == nil {
		return
	}
	return *v, true
}

// OldProtocol returns the old "protocol" field's value of the API entity.
// If the API object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIMutation) OldProtocol(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProtocol is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProtocol requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProtocol: %w", err)
	}
	return oldValue.Protocol, nil
}

// ClearProtocol clears the value of the "protocol" field.
func (m *APIMutation) ClearProtocol() {
	m.protocol = nil
	m.clearedFields[api.FieldProtocol] = struct{}{}
}

// ProtocolCleared returns if the "protocol" field was cleared in this mutation.
func (m *APIMutation) ProtocolCleared() bool {
	_, ok := m.clearedFields[api.FieldProtocol]
	return ok
}

// ResetProtocol resets all changes to the "protocol" field.
func (m *APIMutation) ResetProtocol() {
	m.protocol = nil
	delete(m.clearedFields, api.FieldProtocol)
}

// SetServiceName sets the "service_name" field.
func (m *APIMutation) SetServiceName(s string) {
	m.service_name = &s
}

// ServiceName returns the value of the "service_name" field in the mutation.
func (m *APIMutation) ServiceName() (r string, exists bool) {
	v := m.service_name
	if v == nil {
		return
	}
	return *v, true
}

// OldServiceName returns the old "service_name" field's value of the API entity.
// If the API object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIMutation) OldServiceName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldServiceName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldServiceName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldServiceName: %w", err)
	}
	return oldValue.ServiceName, nil
}

// ClearServiceName clears the value of the "service_name" field.
func (m *APIMutation) ClearServiceName() {
	m.service_name = nil
	m.clearedFields[api.FieldServiceName] = struct{}{}
}

// ServiceNameCleared returns if the "service_name" field was cleared in this mutation.
func (m *APIMutation) ServiceNameCleared() bool {
	_, ok := m.clearedFields[api.FieldServiceName]
	return ok
}

// ResetServiceName resets all changes to the "service_name" field.
func (m *APIMutation) ResetServiceName() {
	m.service_name = nil
	delete(m.clearedFields, api.FieldServiceName)
}

// SetMethod sets the "method" field.
func (m *APIMutation) SetMethod(s string) {
	m.method = &s
}

// Method returns the value of the "method" field in the mutation.
func (m *APIMutation) Method() (r string, exists bool) {
	v := m.method
	if v == nil {
		return
	}
	return *v, true
}

// OldMethod returns the old "method" field's value of the API entity.
// If the API object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIMutation) OldMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMethod: %w", err)
	}
	return oldValue.Method, nil
}

// ClearMethod clears the value of the "method" field.
func (m *APIMutation) ClearMethod() {
	m.method = nil
	m.clearedFields[api.FieldMethod] = struct{}{}
}

// MethodCleared returns if the "method" field was cleared in this mutation.
func (m *APIMutation) MethodCleared() bool {
	_, ok := m.clearedFields[api.FieldMethod]
	return ok
}

// ResetMethod resets all changes to the "method" field.
func (m *APIMutation) ResetMethod() {
	m.method = nil
	delete(m.clearedFields, api.FieldMethod)
}

// SetMethodName sets the "method_name" field.
func (m *APIMutation) SetMethodName(s string) {
	m.method_name = &s
}

// MethodName returns the value of the "method_name" field in the mutation.
func (m *APIMutation) MethodName() (r string, exists bool) {
	v := m.method_name
	if v == nil {
		return
	}
	return *v, true
}

// OldMethodName returns the old "method_name" field's value of the API entity.
// If the API object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIMutation) OldMethodName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMethodName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMethodName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMethodName: %w", err)
	}
	return oldValue.MethodName, nil
}

// ClearMethodName clears the value of the "method_name" field.
func (m *APIMutation) ClearMethodName() {
	m.method_name = nil
	m.clearedFields[api.FieldMethodName] = struct{}{}
}

// MethodNameCleared returns if the "method_name" field was cleared in this mutation.
func (m *APIMutation) MethodNameCleared() bool {
	_, ok := m.clearedFields[api.FieldMethodName]
	return ok
}

// ResetMethodName resets all changes to the "method_name" field.
func (m *APIMutation) ResetMethodName() {
	m.method_name = nil
	delete(m.clearedFields, api.FieldMethodName)
}

// SetPath sets the "path" field.
func (m *APIMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *APIMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the API entity.
// If the API object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ClearPath clears the value of the "path" field.
func (m *APIMutation) ClearPath() {
	m._path = nil
	m.clearedFields[api.FieldPath] = struct{}{}
}

// PathCleared returns if the "path" field was cleared in this mutation.
func (m *APIMutation) PathCleared() bool {
	_, ok := m.clearedFields[api.FieldPath]
	return ok
}

// ResetPath resets all changes to the "path" field.
func (m *APIMutation) ResetPath() {
	m._path = nil
	delete(m.clearedFields, api.FieldPath)
}

// SetExported sets the "exported" field.
func (m *APIMutation) SetExported(b bool) {
	m.exported = &b
}

// Exported returns the value of the "exported" field in the mutation.
func (m *APIMutation) Exported() (r bool, exists bool) {
	v := m.exported
	if v == nil {
		return
	}
	return *v, true
}

// OldExported returns the old "exported" field's value of the API entity.
// If the API object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIMutation) OldExported(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExported is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExported requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExported: %w", err)
	}
	return oldValue.Exported, nil
}

// ClearExported clears the value of the "exported" field.
func (m *APIMutation) ClearExported() {
	m.exported = nil
	m.clearedFields[api.FieldExported] = struct{}{}
}

// ExportedCleared returns if the "exported" field was cleared in this mutation.
func (m *APIMutation) ExportedCleared() bool {
	_, ok := m.clearedFields[api.FieldExported]
	return ok
}

// ResetExported resets all changes to the "exported" field.
func (m *APIMutation) ResetExported() {
	m.exported = nil
	delete(m.clearedFields, api.FieldExported)
}

// SetPathPrefix sets the "path_prefix" field.
func (m *APIMutation) SetPathPrefix(s string) {
	m.path_prefix = &s
}

// PathPrefix returns the value of the "path_prefix" field in the mutation.
func (m *APIMutation) PathPrefix() (r string, exists bool) {
	v := m.path_prefix
	if v == nil {
		return
	}
	return *v, true
}

// OldPathPrefix returns the old "path_prefix" field's value of the API entity.
// If the API object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIMutation) OldPathPrefix(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPathPrefix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPathPrefix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPathPrefix: %w", err)
	}
	return oldValue.PathPrefix, nil
}

// ClearPathPrefix clears the value of the "path_prefix" field.
func (m *APIMutation) ClearPathPrefix() {
	m.path_prefix = nil
	m.clearedFields[api.FieldPathPrefix] = struct{}{}
}

// PathPrefixCleared returns if the "path_prefix" field was cleared in this mutation.
func (m *APIMutation) PathPrefixCleared() bool {
	_, ok := m.clearedFields[api.FieldPathPrefix]
	return ok
}

// ResetPathPrefix resets all changes to the "path_prefix" field.
func (m *APIMutation) ResetPathPrefix() {
	m.path_prefix = nil
	delete(m.clearedFields, api.FieldPathPrefix)
}

// SetDomains sets the "domains" field.
func (m *APIMutation) SetDomains(s []string) {
	m.domains = &s
	m.appenddomains = nil
}

// Domains returns the value of the "domains" field in the mutation.
func (m *APIMutation) Domains() (r []string, exists bool) {
	v := m.domains
	if v == nil {
		return
	}
	return *v, true
}

// OldDomains returns the old "domains" field's value of the API entity.
// If the API object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIMutation) OldDomains(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDomains is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDomains requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomains: %w", err)
	}
	return oldValue.Domains, nil
}

// AppendDomains adds s to the "domains" field.
func (m *APIMutation) AppendDomains(s []string) {
	m.appenddomains = append(m.appenddomains, s...)
}

// AppendedDomains returns the list of values that were appended to the "domains" field in this mutation.
func (m *APIMutation) AppendedDomains() ([]string, bool) {
	if len(m.appenddomains) == 0 {
		return nil, false
	}
	return m.appenddomains, true
}

// ClearDomains clears the value of the "domains" field.
func (m *APIMutation) ClearDomains() {
	m.domains = nil
	m.appenddomains = nil
	m.clearedFields[api.FieldDomains] = struct{}{}
}

// DomainsCleared returns if the "domains" field was cleared in this mutation.
func (m *APIMutation) DomainsCleared() bool {
	_, ok := m.clearedFields[api.FieldDomains]
	return ok
}

// ResetDomains resets all changes to the "domains" field.
func (m *APIMutation) ResetDomains() {
	m.domains = nil
	m.appenddomains = nil
	delete(m.clearedFields, api.FieldDomains)
}

// SetDeprecated sets the "deprecated" field.
func (m *APIMutation) SetDeprecated(b bool) {
	m.deprecated = &b
}

// Deprecated returns the value of the "deprecated" field in the mutation.
func (m *APIMutation) Deprecated() (r bool, exists bool) {
	v := m.deprecated
	if v == nil {
		return
	}
	return *v, true
}

// OldDeprecated returns the old "deprecated" field's value of the API entity.
// If the API object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIMutation) OldDeprecated(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeprecated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeprecated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeprecated: %w", err)
	}
	return oldValue.Deprecated, nil
}

// ClearDeprecated clears the value of the "deprecated" field.
func (m *APIMutation) ClearDeprecated() {
	m.deprecated = nil
	m.clearedFields[api.FieldDeprecated] = struct{}{}
}

// DeprecatedCleared returns if the "deprecated" field was cleared in this mutation.
func (m *APIMutation) DeprecatedCleared() bool {
	_, ok := m.clearedFields[api.FieldDeprecated]
	return ok
}

// ResetDeprecated resets all changes to the "deprecated" field.
func (m *APIMutation) ResetDeprecated() {
	m.deprecated = nil
	delete(m.clearedFields, api.FieldDeprecated)
}

// Where appends a list predicates to the APIMutation builder.
func (m *APIMutation) Where(ps ...predicate.API) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the APIMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *APIMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.API, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *APIMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *APIMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (API).
func (m *APIMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *APIMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.ent_id != nil {
		fields = append(fields, api.FieldEntID)
	}
	if m.protocol != nil {
		fields = append(fields, api.FieldProtocol)
	}
	if m.service_name != nil {
		fields = append(fields, api.FieldServiceName)
	}
	if m.method != nil {
		fields = append(fields, api.FieldMethod)
	}
	if m.method_name != nil {
		fields = append(fields, api.FieldMethodName)
	}
	if m._path != nil {
		fields = append(fields, api.FieldPath)
	}
	if m.exported != nil {
		fields = append(fields, api.FieldExported)
	}
	if m.path_prefix != nil {
		fields = append(fields, api.FieldPathPrefix)
	}
	if m.domains != nil {
		fields = append(fields, api.FieldDomains)
	}
	if m.deprecated != nil {
		fields = append(fields, api.FieldDeprecated)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *APIMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case api.FieldEntID:
		return m.EntID()
	case api.FieldProtocol:
		return m.Protocol()
	case api.FieldServiceName:
		return m.ServiceName()
	case api.FieldMethod:
		return m.Method()
	case api.FieldMethodName:
		return m.MethodName()
	case api.FieldPath:
		return m.Path()
	case api.FieldExported:
		return m.Exported()
	case api.FieldPathPrefix:
		return m.PathPrefix()
	case api.FieldDomains:
		return m.Domains()
	case api.FieldDeprecated:
		return m.Deprecated()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *APIMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case api.FieldEntID:
		return m.OldEntID(ctx)
	case api.FieldProtocol:
		return m.OldProtocol(ctx)
	case api.FieldServiceName:
		return m.OldServiceName(ctx)
	case api.FieldMethod:
		return m.OldMethod(ctx)
	case api.FieldMethodName:
		return m.OldMethodName(ctx)
	case api.FieldPath:
		return m.OldPath(ctx)
	case api.FieldExported:
		return m.OldExported(ctx)
	case api.FieldPathPrefix:
		return m.OldPathPrefix(ctx)
	case api.FieldDomains:
		return m.OldDomains(ctx)
	case api.FieldDeprecated:
		return m.OldDeprecated(ctx)
	}
	return nil, fmt.Errorf("unknown API field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *APIMutation) SetField(name string, value ent.Value) error {
	switch name {
	case api.FieldEntID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntID(v)
		return nil
	case api.FieldProtocol:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProtocol(v)
		return nil
	case api.FieldServiceName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetServiceName(v)
		return nil
	case api.FieldMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMethod(v)
		return nil
	case api.FieldMethodName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMethodName(v)
		return nil
	case api.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case api.FieldExported:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExported(v)
		return nil
	case api.FieldPathPrefix:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPathPrefix(v)
		return nil
	case api.FieldDomains:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomains(v)
		return nil
	case api.FieldDeprecated:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeprecated(v)
		return nil
	}
	return fmt.Errorf("unknown API field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *APIMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *APIMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *APIMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown API numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *APIMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(api.FieldProtocol) {
		fields = append(fields, api.FieldProtocol)
	}
	if m.FieldCleared(api.FieldServiceName) {
		fields = append(fields, api.FieldServiceName)
	}
	if m.FieldCleared(api.FieldMethod) {
		fields = append(fields, api.FieldMethod)
	}
	if m.FieldCleared(api.FieldMethodName) {
		fields = append(fields, api.FieldMethodName)
	}
	if m.FieldCleared(api.FieldPath) {
		fields = append(fields, api.FieldPath)
	}
	if m.FieldCleared(api.FieldExported) {
		fields = append(fields, api.FieldExported)
	}
	if m.FieldCleared(api.FieldPathPrefix) {
		fields = append(fields, api.FieldPathPrefix)
	}
	if m.FieldCleared(api.FieldDomains) {
		fields = append(fields, api.FieldDomains)
	}
	if m.FieldCleared(api.FieldDeprecated) {
		fields = append(fields, api.FieldDeprecated)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *APIMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *APIMutation) ClearField(name string) error {
	switch name {
	case api.FieldProtocol:
		m.ClearProtocol()
		return nil
	case api.FieldServiceName:
		m.ClearServiceName()
		return nil
	case api.FieldMethod:
		m.ClearMethod()
		return nil
	case api.FieldMethodName:
		m.ClearMethodName()
		return nil
	case api.FieldPath:
		m.ClearPath()
		return nil
	case api.FieldExported:
		m.ClearExported()
		return nil
	case api.FieldPathPrefix:
		m.ClearPathPrefix()
		return nil
	case api.FieldDomains:
		m.ClearDomains()
		return nil
	case api.FieldDeprecated:
		m.ClearDeprecated()
		return nil
	}
	return fmt.Errorf("unknown API nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *APIMutation) ResetField(name string) error {
	switch name {
	case api.FieldEntID:
		m.ResetEntID()
		return nil
	case api.FieldProtocol:
		m.ResetProtocol()
		return nil
	case api.FieldServiceName:
		m.ResetServiceName()
		return nil
	case api.FieldMethod:
		m.ResetMethod()
		return nil
	case api.FieldMethodName:
		m.ResetMethodName()
		return nil
	case api.FieldPath:
		m.ResetPath()
		return nil
	case api.FieldExported:
		m.ResetExported()
		return nil
	case api.FieldPathPrefix:
		m.ResetPathPrefix()
		return nil
	case api.FieldDomains:
		m.ResetDomains()
		return nil
	case api.FieldDeprecated:
		m.ResetDeprecated()
		return nil
	}
	return fmt.Errorf("unknown API field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *APIMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *APIMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *APIMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *APIMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *APIMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *APIMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *APIMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown API unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *APIMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown API edge %s", name)
}

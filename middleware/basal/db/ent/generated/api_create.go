// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/basal/db/ent/generated/api"
	"github.com/google/uuid"
)

// APICreate is the builder for creating a API entity.
type APICreate struct {
	config
	mutation *APIMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (ac *APICreate) SetEntID(u uuid.UUID) *APICreate {
	ac.mutation.SetEntID(u)
	return ac
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ac *APICreate) SetNillableEntID(u *uuid.UUID) *APICreate {
	if u != nil {
		ac.SetEntID(*u)
	}
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *APICreate) SetCreatedAt(u uint32) *APICreate {
	ac.mutation.SetCreatedAt(u)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *APICreate) SetNillableCreatedAt(u *uint32) *APICreate {
	if u != nil {
		ac.SetCreatedAt(*u)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *APICreate) SetUpdatedAt(u uint32) *APICreate {
	ac.mutation.SetUpdatedAt(u)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *APICreate) SetNillableUpdatedAt(u *uint32) *APICreate {
	if u != nil {
		ac.SetUpdatedAt(*u)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *APICreate) SetDeletedAt(u uint32) *APICreate {
	ac.mutation.SetDeletedAt(u)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *APICreate) SetNillableDeletedAt(u *uint32) *APICreate {
	if u != nil {
		ac.SetDeletedAt(*u)
	}
	return ac
}

// SetProtocol sets the "protocol" field.
func (ac *APICreate) SetProtocol(s string) *APICreate {
	ac.mutation.SetProtocol(s)
	return ac
}

// SetNillableProtocol sets the "protocol" field if the given value is not nil.
func (ac *APICreate) SetNillableProtocol(s *string) *APICreate {
	if s != nil {
		ac.SetProtocol(*s)
	}
	return ac
}

// SetServiceName sets the "service_name" field.
func (ac *APICreate) SetServiceName(s string) *APICreate {
	ac.mutation.SetServiceName(s)
	return ac
}

// SetNillableServiceName sets the "service_name" field if the given value is not nil.
func (ac *APICreate) SetNillableServiceName(s *string) *APICreate {
	if s != nil {
		ac.SetServiceName(*s)
	}
	return ac
}

// SetMethod sets the "method" field.
func (ac *APICreate) SetMethod(s string) *APICreate {
	ac.mutation.SetMethod(s)
	return ac
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (ac *APICreate) SetNillableMethod(s *string) *APICreate {
	if s != nil {
		ac.SetMethod(*s)
	}
	return ac
}

// SetMethodName sets the "method_name" field.
func (ac *APICreate) SetMethodName(s string) *APICreate {
	ac.mutation.SetMethodName(s)
	return ac
}

// SetNillableMethodName sets the "method_name" field if the given value is not nil.
func (ac *APICreate) SetNillableMethodName(s *string) *APICreate {
	if s != nil {
		ac.SetMethodName(*s)
	}
	return ac
}

// SetPath sets the "path" field.
func (ac *APICreate) SetPath(s string) *APICreate {
	ac.mutation.SetPath(s)
	return ac
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (ac *APICreate) SetNillablePath(s *string) *APICreate {
	if s != nil {
		ac.SetPath(*s)
	}
	return ac
}

// SetExported sets the "exported" field.
func (ac *APICreate) SetExported(b bool) *APICreate {
	ac.mutation.SetExported(b)
	return ac
}

// SetNillableExported sets the "exported" field if the given value is not nil.
func (ac *APICreate) SetNillableExported(b *bool) *APICreate {
	if b != nil {
		ac.SetExported(*b)
	}
	return ac
}

// SetPathPrefix sets the "path_prefix" field.
func (ac *APICreate) SetPathPrefix(s string) *APICreate {
	ac.mutation.SetPathPrefix(s)
	return ac
}

// SetNillablePathPrefix sets the "path_prefix" field if the given value is not nil.
func (ac *APICreate) SetNillablePathPrefix(s *string) *APICreate {
	if s != nil {
		ac.SetPathPrefix(*s)
	}
	return ac
}

// SetDomains sets the "domains" field.
func (ac *APICreate) SetDomains(s []string) *APICreate {
	ac.mutation.SetDomains(s)
	return ac
}

// SetDeprecated sets the "deprecated" field.
func (ac *APICreate) SetDeprecated(b bool) *APICreate {
	ac.mutation.SetDeprecated(b)
	return ac
}

// SetNillableDeprecated sets the "deprecated" field if the given value is not nil.
func (ac *APICreate) SetNillableDeprecated(b *bool) *APICreate {
	if b != nil {
		ac.SetDeprecated(*b)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *APICreate) SetID(u uint32) *APICreate {
	ac.mutation.SetID(u)
	return ac
}

// Mutation returns the APIMutation object of the builder.
func (ac *APICreate) Mutation() *APIMutation {
	return ac.mutation
}

// Save creates the API in the database.
func (ac *APICreate) Save(ctx context.Context) (*API, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *APICreate) SaveX(ctx context.Context) *API {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *APICreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *APICreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *APICreate) defaults() {
	if _, ok := ac.mutation.EntID(); !ok {
		v := api.DefaultEntID()
		ac.mutation.SetEntID(v)
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := api.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := api.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.DeletedAt(); !ok {
		v := api.DefaultDeletedAt()
		ac.mutation.SetDeletedAt(v)
	}
	if _, ok := ac.mutation.Protocol(); !ok {
		v := api.DefaultProtocol
		ac.mutation.SetProtocol(v)
	}
	if _, ok := ac.mutation.ServiceName(); !ok {
		v := api.DefaultServiceName
		ac.mutation.SetServiceName(v)
	}
	if _, ok := ac.mutation.Method(); !ok {
		v := api.DefaultMethod
		ac.mutation.SetMethod(v)
	}
	if _, ok := ac.mutation.MethodName(); !ok {
		v := api.DefaultMethodName
		ac.mutation.SetMethodName(v)
	}
	if _, ok := ac.mutation.Path(); !ok {
		v := api.DefaultPath
		ac.mutation.SetPath(v)
	}
	if _, ok := ac.mutation.Exported(); !ok {
		v := api.DefaultExported
		ac.mutation.SetExported(v)
	}
	if _, ok := ac.mutation.PathPrefix(); !ok {
		v := api.DefaultPathPrefix
		ac.mutation.SetPathPrefix(v)
	}
	if _, ok := ac.mutation.Domains(); !ok {
		v := api.DefaultDomains
		ac.mutation.SetDomains(v)
	}
	if _, ok := ac.mutation.Deprecated(); !ok {
		v := api.DefaultDeprecated
		ac.mutation.SetDeprecated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *APICreate) check() error {
	if _, ok := ac.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "API.ent_id"`)}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "API.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "API.updated_at"`)}
	}
	if _, ok := ac.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "API.deleted_at"`)}
	}
	return nil
}

func (ac *APICreate) sqlSave(ctx context.Context) (*API, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *APICreate) createSpec() (*API, *sqlgraph.CreateSpec) {
	var (
		_node = &API{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(api.Table, sqlgraph.NewFieldSpec(api.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.EntID(); ok {
		_spec.SetField(api.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(api.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(api.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.SetField(api.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := ac.mutation.Protocol(); ok {
		_spec.SetField(api.FieldProtocol, field.TypeString, value)
		_node.Protocol = value
	}
	if value, ok := ac.mutation.ServiceName(); ok {
		_spec.SetField(api.FieldServiceName, field.TypeString, value)
		_node.ServiceName = value
	}
	if value, ok := ac.mutation.Method(); ok {
		_spec.SetField(api.FieldMethod, field.TypeString, value)
		_node.Method = value
	}
	if value, ok := ac.mutation.MethodName(); ok {
		_spec.SetField(api.FieldMethodName, field.TypeString, value)
		_node.MethodName = value
	}
	if value, ok := ac.mutation.Path(); ok {
		_spec.SetField(api.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := ac.mutation.Exported(); ok {
		_spec.SetField(api.FieldExported, field.TypeBool, value)
		_node.Exported = value
	}
	if value, ok := ac.mutation.PathPrefix(); ok {
		_spec.SetField(api.FieldPathPrefix, field.TypeString, value)
		_node.PathPrefix = value
	}
	if value, ok := ac.mutation.Domains(); ok {
		_spec.SetField(api.FieldDomains, field.TypeJSON, value)
		_node.Domains = value
	}
	if value, ok := ac.mutation.Deprecated(); ok {
		_spec.SetField(api.FieldDeprecated, field.TypeBool, value)
		_node.Deprecated = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.API.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.APIUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (ac *APICreate) OnConflict(opts ...sql.ConflictOption) *APIUpsertOne {
	ac.conflict = opts
	return &APIUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.API.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *APICreate) OnConflictColumns(columns ...string) *APIUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &APIUpsertOne{
		create: ac,
	}
}

type (
	// APIUpsertOne is the builder for "upsert"-ing
	//  one API node.
	APIUpsertOne struct {
		create *APICreate
	}

	// APIUpsert is the "OnConflict" setter.
	APIUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *APIUpsert) SetEntID(v uuid.UUID) *APIUpsert {
	u.Set(api.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *APIUpsert) UpdateEntID() *APIUpsert {
	u.SetExcluded(api.FieldEntID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *APIUpsert) SetCreatedAt(v uint32) *APIUpsert {
	u.Set(api.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *APIUpsert) UpdateCreatedAt() *APIUpsert {
	u.SetExcluded(api.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *APIUpsert) AddCreatedAt(v uint32) *APIUpsert {
	u.Add(api.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *APIUpsert) SetUpdatedAt(v uint32) *APIUpsert {
	u.Set(api.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *APIUpsert) UpdateUpdatedAt() *APIUpsert {
	u.SetExcluded(api.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *APIUpsert) AddUpdatedAt(v uint32) *APIUpsert {
	u.Add(api.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *APIUpsert) SetDeletedAt(v uint32) *APIUpsert {
	u.Set(api.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *APIUpsert) UpdateDeletedAt() *APIUpsert {
	u.SetExcluded(api.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *APIUpsert) AddDeletedAt(v uint32) *APIUpsert {
	u.Add(api.FieldDeletedAt, v)
	return u
}

// SetProtocol sets the "protocol" field.
func (u *APIUpsert) SetProtocol(v string) *APIUpsert {
	u.Set(api.FieldProtocol, v)
	return u
}

// UpdateProtocol sets the "protocol" field to the value that was provided on create.
func (u *APIUpsert) UpdateProtocol() *APIUpsert {
	u.SetExcluded(api.FieldProtocol)
	return u
}

// ClearProtocol clears the value of the "protocol" field.
func (u *APIUpsert) ClearProtocol() *APIUpsert {
	u.SetNull(api.FieldProtocol)
	return u
}

// SetServiceName sets the "service_name" field.
func (u *APIUpsert) SetServiceName(v string) *APIUpsert {
	u.Set(api.FieldServiceName, v)
	return u
}

// UpdateServiceName sets the "service_name" field to the value that was provided on create.
func (u *APIUpsert) UpdateServiceName() *APIUpsert {
	u.SetExcluded(api.FieldServiceName)
	return u
}

// ClearServiceName clears the value of the "service_name" field.
func (u *APIUpsert) ClearServiceName() *APIUpsert {
	u.SetNull(api.FieldServiceName)
	return u
}

// SetMethod sets the "method" field.
func (u *APIUpsert) SetMethod(v string) *APIUpsert {
	u.Set(api.FieldMethod, v)
	return u
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *APIUpsert) UpdateMethod() *APIUpsert {
	u.SetExcluded(api.FieldMethod)
	return u
}

// ClearMethod clears the value of the "method" field.
func (u *APIUpsert) ClearMethod() *APIUpsert {
	u.SetNull(api.FieldMethod)
	return u
}

// SetMethodName sets the "method_name" field.
func (u *APIUpsert) SetMethodName(v string) *APIUpsert {
	u.Set(api.FieldMethodName, v)
	return u
}

// UpdateMethodName sets the "method_name" field to the value that was provided on create.
func (u *APIUpsert) UpdateMethodName() *APIUpsert {
	u.SetExcluded(api.FieldMethodName)
	return u
}

// ClearMethodName clears the value of the "method_name" field.
func (u *APIUpsert) ClearMethodName() *APIUpsert {
	u.SetNull(api.FieldMethodName)
	return u
}

// SetPath sets the "path" field.
func (u *APIUpsert) SetPath(v string) *APIUpsert {
	u.Set(api.FieldPath, v)
	return u
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *APIUpsert) UpdatePath() *APIUpsert {
	u.SetExcluded(api.FieldPath)
	return u
}

// ClearPath clears the value of the "path" field.
func (u *APIUpsert) ClearPath() *APIUpsert {
	u.SetNull(api.FieldPath)
	return u
}

// SetExported sets the "exported" field.
func (u *APIUpsert) SetExported(v bool) *APIUpsert {
	u.Set(api.FieldExported, v)
	return u
}

// UpdateExported sets the "exported" field to the value that was provided on create.
func (u *APIUpsert) UpdateExported() *APIUpsert {
	u.SetExcluded(api.FieldExported)
	return u
}

// ClearExported clears the value of the "exported" field.
func (u *APIUpsert) ClearExported() *APIUpsert {
	u.SetNull(api.FieldExported)
	return u
}

// SetPathPrefix sets the "path_prefix" field.
func (u *APIUpsert) SetPathPrefix(v string) *APIUpsert {
	u.Set(api.FieldPathPrefix, v)
	return u
}

// UpdatePathPrefix sets the "path_prefix" field to the value that was provided on create.
func (u *APIUpsert) UpdatePathPrefix() *APIUpsert {
	u.SetExcluded(api.FieldPathPrefix)
	return u
}

// ClearPathPrefix clears the value of the "path_prefix" field.
func (u *APIUpsert) ClearPathPrefix() *APIUpsert {
	u.SetNull(api.FieldPathPrefix)
	return u
}

// SetDomains sets the "domains" field.
func (u *APIUpsert) SetDomains(v []string) *APIUpsert {
	u.Set(api.FieldDomains, v)
	return u
}

// UpdateDomains sets the "domains" field to the value that was provided on create.
func (u *APIUpsert) UpdateDomains() *APIUpsert {
	u.SetExcluded(api.FieldDomains)
	return u
}

// ClearDomains clears the value of the "domains" field.
func (u *APIUpsert) ClearDomains() *APIUpsert {
	u.SetNull(api.FieldDomains)
	return u
}

// SetDeprecated sets the "deprecated" field.
func (u *APIUpsert) SetDeprecated(v bool) *APIUpsert {
	u.Set(api.FieldDeprecated, v)
	return u
}

// UpdateDeprecated sets the "deprecated" field to the value that was provided on create.
func (u *APIUpsert) UpdateDeprecated() *APIUpsert {
	u.SetExcluded(api.FieldDeprecated)
	return u
}

// ClearDeprecated clears the value of the "deprecated" field.
func (u *APIUpsert) ClearDeprecated() *APIUpsert {
	u.SetNull(api.FieldDeprecated)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.API.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(api.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *APIUpsertOne) UpdateNewValues() *APIUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(api.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.API.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *APIUpsertOne) Ignore() *APIUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *APIUpsertOne) DoNothing() *APIUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the APICreate.OnConflict
// documentation for more info.
func (u *APIUpsertOne) Update(set func(*APIUpsert)) *APIUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&APIUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *APIUpsertOne) SetEntID(v uuid.UUID) *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *APIUpsertOne) UpdateEntID() *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *APIUpsertOne) SetCreatedAt(v uint32) *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *APIUpsertOne) AddCreatedAt(v uint32) *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *APIUpsertOne) UpdateCreatedAt() *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *APIUpsertOne) SetUpdatedAt(v uint32) *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *APIUpsertOne) AddUpdatedAt(v uint32) *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *APIUpsertOne) UpdateUpdatedAt() *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *APIUpsertOne) SetDeletedAt(v uint32) *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *APIUpsertOne) AddDeletedAt(v uint32) *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *APIUpsertOne) UpdateDeletedAt() *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetProtocol sets the "protocol" field.
func (u *APIUpsertOne) SetProtocol(v string) *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.SetProtocol(v)
	})
}

// UpdateProtocol sets the "protocol" field to the value that was provided on create.
func (u *APIUpsertOne) UpdateProtocol() *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.UpdateProtocol()
	})
}

// ClearProtocol clears the value of the "protocol" field.
func (u *APIUpsertOne) ClearProtocol() *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.ClearProtocol()
	})
}

// SetServiceName sets the "service_name" field.
func (u *APIUpsertOne) SetServiceName(v string) *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.SetServiceName(v)
	})
}

// UpdateServiceName sets the "service_name" field to the value that was provided on create.
func (u *APIUpsertOne) UpdateServiceName() *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.UpdateServiceName()
	})
}

// ClearServiceName clears the value of the "service_name" field.
func (u *APIUpsertOne) ClearServiceName() *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.ClearServiceName()
	})
}

// SetMethod sets the "method" field.
func (u *APIUpsertOne) SetMethod(v string) *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.SetMethod(v)
	})
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *APIUpsertOne) UpdateMethod() *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.UpdateMethod()
	})
}

// ClearMethod clears the value of the "method" field.
func (u *APIUpsertOne) ClearMethod() *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.ClearMethod()
	})
}

// SetMethodName sets the "method_name" field.
func (u *APIUpsertOne) SetMethodName(v string) *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.SetMethodName(v)
	})
}

// UpdateMethodName sets the "method_name" field to the value that was provided on create.
func (u *APIUpsertOne) UpdateMethodName() *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.UpdateMethodName()
	})
}

// ClearMethodName clears the value of the "method_name" field.
func (u *APIUpsertOne) ClearMethodName() *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.ClearMethodName()
	})
}

// SetPath sets the "path" field.
func (u *APIUpsertOne) SetPath(v string) *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *APIUpsertOne) UpdatePath() *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.UpdatePath()
	})
}

// ClearPath clears the value of the "path" field.
func (u *APIUpsertOne) ClearPath() *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.ClearPath()
	})
}

// SetExported sets the "exported" field.
func (u *APIUpsertOne) SetExported(v bool) *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.SetExported(v)
	})
}

// UpdateExported sets the "exported" field to the value that was provided on create.
func (u *APIUpsertOne) UpdateExported() *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.UpdateExported()
	})
}

// ClearExported clears the value of the "exported" field.
func (u *APIUpsertOne) ClearExported() *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.ClearExported()
	})
}

// SetPathPrefix sets the "path_prefix" field.
func (u *APIUpsertOne) SetPathPrefix(v string) *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.SetPathPrefix(v)
	})
}

// UpdatePathPrefix sets the "path_prefix" field to the value that was provided on create.
func (u *APIUpsertOne) UpdatePathPrefix() *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.UpdatePathPrefix()
	})
}

// ClearPathPrefix clears the value of the "path_prefix" field.
func (u *APIUpsertOne) ClearPathPrefix() *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.ClearPathPrefix()
	})
}

// SetDomains sets the "domains" field.
func (u *APIUpsertOne) SetDomains(v []string) *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.SetDomains(v)
	})
}

// UpdateDomains sets the "domains" field to the value that was provided on create.
func (u *APIUpsertOne) UpdateDomains() *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.UpdateDomains()
	})
}

// ClearDomains clears the value of the "domains" field.
func (u *APIUpsertOne) ClearDomains() *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.ClearDomains()
	})
}

// SetDeprecated sets the "deprecated" field.
func (u *APIUpsertOne) SetDeprecated(v bool) *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.SetDeprecated(v)
	})
}

// UpdateDeprecated sets the "deprecated" field to the value that was provided on create.
func (u *APIUpsertOne) UpdateDeprecated() *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.UpdateDeprecated()
	})
}

// ClearDeprecated clears the value of the "deprecated" field.
func (u *APIUpsertOne) ClearDeprecated() *APIUpsertOne {
	return u.Update(func(s *APIUpsert) {
		s.ClearDeprecated()
	})
}

// Exec executes the query.
func (u *APIUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for APICreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *APIUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *APIUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *APIUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// APICreateBulk is the builder for creating many API entities in bulk.
type APICreateBulk struct {
	config
	err      error
	builders []*APICreate
	conflict []sql.ConflictOption
}

// Save creates the API entities in the database.
func (acb *APICreateBulk) Save(ctx context.Context) ([]*API, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*API, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*APIMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *APICreateBulk) SaveX(ctx context.Context) []*API {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *APICreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *APICreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.API.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.APIUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (acb *APICreateBulk) OnConflict(opts ...sql.ConflictOption) *APIUpsertBulk {
	acb.conflict = opts
	return &APIUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.API.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *APICreateBulk) OnConflictColumns(columns ...string) *APIUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &APIUpsertBulk{
		create: acb,
	}
}

// APIUpsertBulk is the builder for "upsert"-ing
// a bulk of API nodes.
type APIUpsertBulk struct {
	create *APICreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.API.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(api.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *APIUpsertBulk) UpdateNewValues() *APIUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(api.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.API.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *APIUpsertBulk) Ignore() *APIUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *APIUpsertBulk) DoNothing() *APIUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the APICreateBulk.OnConflict
// documentation for more info.
func (u *APIUpsertBulk) Update(set func(*APIUpsert)) *APIUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&APIUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *APIUpsertBulk) SetEntID(v uuid.UUID) *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *APIUpsertBulk) UpdateEntID() *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *APIUpsertBulk) SetCreatedAt(v uint32) *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *APIUpsertBulk) AddCreatedAt(v uint32) *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *APIUpsertBulk) UpdateCreatedAt() *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *APIUpsertBulk) SetUpdatedAt(v uint32) *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *APIUpsertBulk) AddUpdatedAt(v uint32) *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *APIUpsertBulk) UpdateUpdatedAt() *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *APIUpsertBulk) SetDeletedAt(v uint32) *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *APIUpsertBulk) AddDeletedAt(v uint32) *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *APIUpsertBulk) UpdateDeletedAt() *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetProtocol sets the "protocol" field.
func (u *APIUpsertBulk) SetProtocol(v string) *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.SetProtocol(v)
	})
}

// UpdateProtocol sets the "protocol" field to the value that was provided on create.
func (u *APIUpsertBulk) UpdateProtocol() *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.UpdateProtocol()
	})
}

// ClearProtocol clears the value of the "protocol" field.
func (u *APIUpsertBulk) ClearProtocol() *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.ClearProtocol()
	})
}

// SetServiceName sets the "service_name" field.
func (u *APIUpsertBulk) SetServiceName(v string) *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.SetServiceName(v)
	})
}

// UpdateServiceName sets the "service_name" field to the value that was provided on create.
func (u *APIUpsertBulk) UpdateServiceName() *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.UpdateServiceName()
	})
}

// ClearServiceName clears the value of the "service_name" field.
func (u *APIUpsertBulk) ClearServiceName() *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.ClearServiceName()
	})
}

// SetMethod sets the "method" field.
func (u *APIUpsertBulk) SetMethod(v string) *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.SetMethod(v)
	})
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *APIUpsertBulk) UpdateMethod() *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.UpdateMethod()
	})
}

// ClearMethod clears the value of the "method" field.
func (u *APIUpsertBulk) ClearMethod() *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.ClearMethod()
	})
}

// SetMethodName sets the "method_name" field.
func (u *APIUpsertBulk) SetMethodName(v string) *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.SetMethodName(v)
	})
}

// UpdateMethodName sets the "method_name" field to the value that was provided on create.
func (u *APIUpsertBulk) UpdateMethodName() *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.UpdateMethodName()
	})
}

// ClearMethodName clears the value of the "method_name" field.
func (u *APIUpsertBulk) ClearMethodName() *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.ClearMethodName()
	})
}

// SetPath sets the "path" field.
func (u *APIUpsertBulk) SetPath(v string) *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *APIUpsertBulk) UpdatePath() *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.UpdatePath()
	})
}

// ClearPath clears the value of the "path" field.
func (u *APIUpsertBulk) ClearPath() *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.ClearPath()
	})
}

// SetExported sets the "exported" field.
func (u *APIUpsertBulk) SetExported(v bool) *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.SetExported(v)
	})
}

// UpdateExported sets the "exported" field to the value that was provided on create.
func (u *APIUpsertBulk) UpdateExported() *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.UpdateExported()
	})
}

// ClearExported clears the value of the "exported" field.
func (u *APIUpsertBulk) ClearExported() *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.ClearExported()
	})
}

// SetPathPrefix sets the "path_prefix" field.
func (u *APIUpsertBulk) SetPathPrefix(v string) *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.SetPathPrefix(v)
	})
}

// UpdatePathPrefix sets the "path_prefix" field to the value that was provided on create.
func (u *APIUpsertBulk) UpdatePathPrefix() *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.UpdatePathPrefix()
	})
}

// ClearPathPrefix clears the value of the "path_prefix" field.
func (u *APIUpsertBulk) ClearPathPrefix() *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.ClearPathPrefix()
	})
}

// SetDomains sets the "domains" field.
func (u *APIUpsertBulk) SetDomains(v []string) *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.SetDomains(v)
	})
}

// UpdateDomains sets the "domains" field to the value that was provided on create.
func (u *APIUpsertBulk) UpdateDomains() *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.UpdateDomains()
	})
}

// ClearDomains clears the value of the "domains" field.
func (u *APIUpsertBulk) ClearDomains() *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.ClearDomains()
	})
}

// SetDeprecated sets the "deprecated" field.
func (u *APIUpsertBulk) SetDeprecated(v bool) *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.SetDeprecated(v)
	})
}

// UpdateDeprecated sets the "deprecated" field to the value that was provided on create.
func (u *APIUpsertBulk) UpdateDeprecated() *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.UpdateDeprecated()
	})
}

// ClearDeprecated clears the value of the "deprecated" field.
func (u *APIUpsertBulk) ClearDeprecated() *APIUpsertBulk {
	return u.Update(func(s *APIUpsert) {
		s.ClearDeprecated()
	})
}

// Exec executes the query.
func (u *APIUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the APICreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for APICreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *APIUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/basal/db/ent/generated/api"
	"github.com/NpoolPlatform/kunman/middleware/basal/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// APIUpdate is the builder for updating API entities.
type APIUpdate struct {
	config
	hooks     []Hook
	mutation  *APIMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the APIUpdate builder.
func (au *APIUpdate) Where(ps ...predicate.API) *APIUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetEntID sets the "ent_id" field.
func (au *APIUpdate) SetEntID(u uuid.UUID) *APIUpdate {
	au.mutation.SetEntID(u)
	return au
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (au *APIUpdate) SetNillableEntID(u *uuid.UUID) *APIUpdate {
	if u != nil {
		au.SetEntID(*u)
	}
	return au
}

// SetProtocol sets the "protocol" field.
func (au *APIUpdate) SetProtocol(s string) *APIUpdate {
	au.mutation.SetProtocol(s)
	return au
}

// SetNillableProtocol sets the "protocol" field if the given value is not nil.
func (au *APIUpdate) SetNillableProtocol(s *string) *APIUpdate {
	if s != nil {
		au.SetProtocol(*s)
	}
	return au
}

// ClearProtocol clears the value of the "protocol" field.
func (au *APIUpdate) ClearProtocol() *APIUpdate {
	au.mutation.ClearProtocol()
	return au
}

// SetServiceName sets the "service_name" field.
func (au *APIUpdate) SetServiceName(s string) *APIUpdate {
	au.mutation.SetServiceName(s)
	return au
}

// SetNillableServiceName sets the "service_name" field if the given value is not nil.
func (au *APIUpdate) SetNillableServiceName(s *string) *APIUpdate {
	if s != nil {
		au.SetServiceName(*s)
	}
	return au
}

// ClearServiceName clears the value of the "service_name" field.
func (au *APIUpdate) ClearServiceName() *APIUpdate {
	au.mutation.ClearServiceName()
	return au
}

// SetMethod sets the "method" field.
func (au *APIUpdate) SetMethod(s string) *APIUpdate {
	au.mutation.SetMethod(s)
	return au
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (au *APIUpdate) SetNillableMethod(s *string) *APIUpdate {
	if s != nil {
		au.SetMethod(*s)
	}
	return au
}

// ClearMethod clears the value of the "method" field.
func (au *APIUpdate) ClearMethod() *APIUpdate {
	au.mutation.ClearMethod()
	return au
}

// SetMethodName sets the "method_name" field.
func (au *APIUpdate) SetMethodName(s string) *APIUpdate {
	au.mutation.SetMethodName(s)
	return au
}

// SetNillableMethodName sets the "method_name" field if the given value is not nil.
func (au *APIUpdate) SetNillableMethodName(s *string) *APIUpdate {
	if s != nil {
		au.SetMethodName(*s)
	}
	return au
}

// ClearMethodName clears the value of the "method_name" field.
func (au *APIUpdate) ClearMethodName() *APIUpdate {
	au.mutation.ClearMethodName()
	return au
}

// SetPath sets the "path" field.
func (au *APIUpdate) SetPath(s string) *APIUpdate {
	au.mutation.SetPath(s)
	return au
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (au *APIUpdate) SetNillablePath(s *string) *APIUpdate {
	if s != nil {
		au.SetPath(*s)
	}
	return au
}

// ClearPath clears the value of the "path" field.
func (au *APIUpdate) ClearPath() *APIUpdate {
	au.mutation.ClearPath()
	return au
}

// SetExported sets the "exported" field.
func (au *APIUpdate) SetExported(b bool) *APIUpdate {
	au.mutation.SetExported(b)
	return au
}

// SetNillableExported sets the "exported" field if the given value is not nil.
func (au *APIUpdate) SetNillableExported(b *bool) *APIUpdate {
	if b != nil {
		au.SetExported(*b)
	}
	return au
}

// ClearExported clears the value of the "exported" field.
func (au *APIUpdate) ClearExported() *APIUpdate {
	au.mutation.ClearExported()
	return au
}

// SetPathPrefix sets the "path_prefix" field.
func (au *APIUpdate) SetPathPrefix(s string) *APIUpdate {
	au.mutation.SetPathPrefix(s)
	return au
}

// SetNillablePathPrefix sets the "path_prefix" field if the given value is not nil.
func (au *APIUpdate) SetNillablePathPrefix(s *string) *APIUpdate {
	if s != nil {
		au.SetPathPrefix(*s)
	}
	return au
}

// ClearPathPrefix clears the value of the "path_prefix" field.
func (au *APIUpdate) ClearPathPrefix() *APIUpdate {
	au.mutation.ClearPathPrefix()
	return au
}

// SetDomains sets the "domains" field.
func (au *APIUpdate) SetDomains(s []string) *APIUpdate {
	au.mutation.SetDomains(s)
	return au
}

// AppendDomains appends s to the "domains" field.
func (au *APIUpdate) AppendDomains(s []string) *APIUpdate {
	au.mutation.AppendDomains(s)
	return au
}

// ClearDomains clears the value of the "domains" field.
func (au *APIUpdate) ClearDomains() *APIUpdate {
	au.mutation.ClearDomains()
	return au
}

// SetDeprecated sets the "deprecated" field.
func (au *APIUpdate) SetDeprecated(b bool) *APIUpdate {
	au.mutation.SetDeprecated(b)
	return au
}

// SetNillableDeprecated sets the "deprecated" field if the given value is not nil.
func (au *APIUpdate) SetNillableDeprecated(b *bool) *APIUpdate {
	if b != nil {
		au.SetDeprecated(*b)
	}
	return au
}

// ClearDeprecated clears the value of the "deprecated" field.
func (au *APIUpdate) ClearDeprecated() *APIUpdate {
	au.mutation.ClearDeprecated()
	return au
}

// Mutation returns the APIMutation object of the builder.
func (au *APIUpdate) Mutation() *APIMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *APIUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *APIUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *APIUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *APIUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *APIUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *APIUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *APIUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(api.Table, api.Columns, sqlgraph.NewFieldSpec(api.FieldID, field.TypeUint32))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.EntID(); ok {
		_spec.SetField(api.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := au.mutation.Protocol(); ok {
		_spec.SetField(api.FieldProtocol, field.TypeString, value)
	}
	if au.mutation.ProtocolCleared() {
		_spec.ClearField(api.FieldProtocol, field.TypeString)
	}
	if value, ok := au.mutation.ServiceName(); ok {
		_spec.SetField(api.FieldServiceName, field.TypeString, value)
	}
	if au.mutation.ServiceNameCleared() {
		_spec.ClearField(api.FieldServiceName, field.TypeString)
	}
	if value, ok := au.mutation.Method(); ok {
		_spec.SetField(api.FieldMethod, field.TypeString, value)
	}
	if au.mutation.MethodCleared() {
		_spec.ClearField(api.FieldMethod, field.TypeString)
	}
	if value, ok := au.mutation.MethodName(); ok {
		_spec.SetField(api.FieldMethodName, field.TypeString, value)
	}
	if au.mutation.MethodNameCleared() {
		_spec.ClearField(api.FieldMethodName, field.TypeString)
	}
	if value, ok := au.mutation.Path(); ok {
		_spec.SetField(api.FieldPath, field.TypeString, value)
	}
	if au.mutation.PathCleared() {
		_spec.ClearField(api.FieldPath, field.TypeString)
	}
	if value, ok := au.mutation.Exported(); ok {
		_spec.SetField(api.FieldExported, field.TypeBool, value)
	}
	if au.mutation.ExportedCleared() {
		_spec.ClearField(api.FieldExported, field.TypeBool)
	}
	if value, ok := au.mutation.PathPrefix(); ok {
		_spec.SetField(api.FieldPathPrefix, field.TypeString, value)
	}
	if au.mutation.PathPrefixCleared() {
		_spec.ClearField(api.FieldPathPrefix, field.TypeString)
	}
	if value, ok := au.mutation.Domains(); ok {
		_spec.SetField(api.FieldDomains, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, api.FieldDomains, value)
		})
	}
	if au.mutation.DomainsCleared() {
		_spec.ClearField(api.FieldDomains, field.TypeJSON)
	}
	if value, ok := au.mutation.Deprecated(); ok {
		_spec.SetField(api.FieldDeprecated, field.TypeBool, value)
	}
	if au.mutation.DeprecatedCleared() {
		_spec.ClearField(api.FieldDeprecated, field.TypeBool)
	}
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{api.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// APIUpdateOne is the builder for updating a single API entity.
type APIUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *APIMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (auo *APIUpdateOne) SetEntID(u uuid.UUID) *APIUpdateOne {
	auo.mutation.SetEntID(u)
	return auo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillableEntID(u *uuid.UUID) *APIUpdateOne {
	if u != nil {
		auo.SetEntID(*u)
	}
	return auo
}

// SetProtocol sets the "protocol" field.
func (auo *APIUpdateOne) SetProtocol(s string) *APIUpdateOne {
	auo.mutation.SetProtocol(s)
	return auo
}

// SetNillableProtocol sets the "protocol" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillableProtocol(s *string) *APIUpdateOne {
	if s != nil {
		auo.SetProtocol(*s)
	}
	return auo
}

// ClearProtocol clears the value of the "protocol" field.
func (auo *APIUpdateOne) ClearProtocol() *APIUpdateOne {
	auo.mutation.ClearProtocol()
	return auo
}

// SetServiceName sets the "service_name" field.
func (auo *APIUpdateOne) SetServiceName(s string) *APIUpdateOne {
	auo.mutation.SetServiceName(s)
	return auo
}

// SetNillableServiceName sets the "service_name" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillableServiceName(s *string) *APIUpdateOne {
	if s != nil {
		auo.SetServiceName(*s)
	}
	return auo
}

// ClearServiceName clears the value of the "service_name" field.
func (auo *APIUpdateOne) ClearServiceName() *APIUpdateOne {
	auo.mutation.ClearServiceName()
	return auo
}

// SetMethod sets the "method" field.
func (auo *APIUpdateOne) SetMethod(s string) *APIUpdateOne {
	auo.mutation.SetMethod(s)
	return auo
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillableMethod(s *string) *APIUpdateOne {
	if s != nil {
		auo.SetMethod(*s)
	}
	return auo
}

// ClearMethod clears the value of the "method" field.
func (auo *APIUpdateOne) ClearMethod() *APIUpdateOne {
	auo.mutation.ClearMethod()
	return auo
}

// SetMethodName sets the "method_name" field.
func (auo *APIUpdateOne) SetMethodName(s string) *APIUpdateOne {
	auo.mutation.SetMethodName(s)
	return auo
}

// SetNillableMethodName sets the "method_name" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillableMethodName(s *string) *APIUpdateOne {
	if s != nil {
		auo.SetMethodName(*s)
	}
	return auo
}

// ClearMethodName clears the value of the "method_name" field.
func (auo *APIUpdateOne) ClearMethodName() *APIUpdateOne {
	auo.mutation.ClearMethodName()
	return auo
}

// SetPath sets the "path" field.
func (auo *APIUpdateOne) SetPath(s string) *APIUpdateOne {
	auo.mutation.SetPath(s)
	return auo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillablePath(s *string) *APIUpdateOne {
	if s != nil {
		auo.SetPath(*s)
	}
	return auo
}

// ClearPath clears the value of the "path" field.
func (auo *APIUpdateOne) ClearPath() *APIUpdateOne {
	auo.mutation.ClearPath()
	return auo
}

// SetExported sets the "exported" field.
func (auo *APIUpdateOne) SetExported(b bool) *APIUpdateOne {
	auo.mutation.SetExported(b)
	return auo
}

// SetNillableExported sets the "exported" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillableExported(b *bool) *APIUpdateOne {
	if b != nil {
		auo.SetExported(*b)
	}
	return auo
}

// ClearExported clears the value of the "exported" field.
func (auo *APIUpdateOne) ClearExported() *APIUpdateOne {
	auo.mutation.ClearExported()
	return auo
}

// SetPathPrefix sets the "path_prefix" field.
func (auo *APIUpdateOne) SetPathPrefix(s string) *APIUpdateOne {
	auo.mutation.SetPathPrefix(s)
	return auo
}

// SetNillablePathPrefix sets the "path_prefix" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillablePathPrefix(s *string) *APIUpdateOne {
	if s != nil {
		auo.SetPathPrefix(*s)
	}
	return auo
}

// ClearPathPrefix clears the value of the "path_prefix" field.
func (auo *APIUpdateOne) ClearPathPrefix() *APIUpdateOne {
	auo.mutation.ClearPathPrefix()
	return auo
}

// SetDomains sets the "domains" field.
func (auo *APIUpdateOne) SetDomains(s []string) *APIUpdateOne {
	auo.mutation.SetDomains(s)
	return auo
}

// AppendDomains appends s to the "domains" field.
func (auo *APIUpdateOne) AppendDomains(s []string) *APIUpdateOne {
	auo.mutation.AppendDomains(s)
	return auo
}

// ClearDomains clears the value of the "domains" field.
func (auo *APIUpdateOne) ClearDomains() *APIUpdateOne {
	auo.mutation.ClearDomains()
	return auo
}

// SetDeprecated sets the "deprecated" field.
func (auo *APIUpdateOne) SetDeprecated(b bool) *APIUpdateOne {
	auo.mutation.SetDeprecated(b)
	return auo
}

// SetNillableDeprecated sets the "deprecated" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillableDeprecated(b *bool) *APIUpdateOne {
	if b != nil {
		auo.SetDeprecated(*b)
	}
	return auo
}

// ClearDeprecated clears the value of the "deprecated" field.
func (auo *APIUpdateOne) ClearDeprecated() *APIUpdateOne {
	auo.mutation.ClearDeprecated()
	return auo
}

// Mutation returns the APIMutation object of the builder.
func (auo *APIUpdateOne) Mutation() *APIMutation {
	return auo.mutation
}

// Where appends a list predicates to the APIUpdate builder.
func (auo *APIUpdateOne) Where(ps ...predicate.API) *APIUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *APIUpdateOne) Select(field string, fields ...string) *APIUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated API entity.
func (auo *APIUpdateOne) Save(ctx context.Context) (*API, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *APIUpdateOne) SaveX(ctx context.Context) *API {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *APIUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *APIUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *APIUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *APIUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *APIUpdateOne) sqlSave(ctx context.Context) (_node *API, err error) {
	_spec := sqlgraph.NewUpdateSpec(api.Table, api.Columns, sqlgraph.NewFieldSpec(api.FieldID, field.TypeUint32))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "API.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, api.FieldID)
		for _, f := range fields {
			if !api.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != api.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.EntID(); ok {
		_spec.SetField(api.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := auo.mutation.Protocol(); ok {
		_spec.SetField(api.FieldProtocol, field.TypeString, value)
	}
	if auo.mutation.ProtocolCleared() {
		_spec.ClearField(api.FieldProtocol, field.TypeString)
	}
	if value, ok := auo.mutation.ServiceName(); ok {
		_spec.SetField(api.FieldServiceName, field.TypeString, value)
	}
	if auo.mutation.ServiceNameCleared() {
		_spec.ClearField(api.FieldServiceName, field.TypeString)
	}
	if value, ok := auo.mutation.Method(); ok {
		_spec.SetField(api.FieldMethod, field.TypeString, value)
	}
	if auo.mutation.MethodCleared() {
		_spec.ClearField(api.FieldMethod, field.TypeString)
	}
	if value, ok := auo.mutation.MethodName(); ok {
		_spec.SetField(api.FieldMethodName, field.TypeString, value)
	}
	if auo.mutation.MethodNameCleared() {
		_spec.ClearField(api.FieldMethodName, field.TypeString)
	}
	if value, ok := auo.mutation.Path(); ok {
		_spec.SetField(api.FieldPath, field.TypeString, value)
	}
	if auo.mutation.PathCleared() {
		_spec.ClearField(api.FieldPath, field.TypeString)
	}
	if value, ok := auo.mutation.Exported(); ok {
		_spec.SetField(api.FieldExported, field.TypeBool, value)
	}
	if auo.mutation.ExportedCleared() {
		_spec.ClearField(api.FieldExported, field.TypeBool)
	}
	if value, ok := auo.mutation.PathPrefix(); ok {
		_spec.SetField(api.FieldPathPrefix, field.TypeString, value)
	}
	if auo.mutation.PathPrefixCleared() {
		_spec.ClearField(api.FieldPathPrefix, field.TypeString)
	}
	if value, ok := auo.mutation.Domains(); ok {
		_spec.SetField(api.FieldDomains, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, api.FieldDomains, value)
		})
	}
	if auo.mutation.DomainsCleared() {
		_spec.ClearField(api.FieldDomains, field.TypeJSON)
	}
	if value, ok := auo.mutation.Deprecated(); ok {
		_spec.SetField(api.FieldDeprecated, field.TypeBool, value)
	}
	if auo.mutation.DeprecatedCleared() {
		_spec.ClearField(api.FieldDeprecated, field.TypeBool)
	}
	_spec.AddModifiers(auo.modifiers...)
	_node = &API{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{api.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}

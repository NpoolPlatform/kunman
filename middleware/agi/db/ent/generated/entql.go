// Code generated by ent, DO NOT EDIT.

package generated

import (
	"github.com/NpoolPlatform/kunman/middleware/agi/db/ent/generated/capacity"
	"github.com/NpoolPlatform/kunman/middleware/agi/db/ent/generated/quota"
	"github.com/NpoolPlatform/kunman/middleware/agi/db/ent/generated/subscription"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 3)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   capacity.Table,
			Columns: capacity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: capacity.FieldID,
			},
		},
		Type: "Capacity",
		Fields: map[string]*sqlgraph.FieldSpec{
			capacity.FieldEntID:       {Type: field.TypeUUID, Column: capacity.FieldEntID},
			capacity.FieldAppGoodID:   {Type: field.TypeUUID, Column: capacity.FieldAppGoodID},
			capacity.FieldCapacityKey: {Type: field.TypeString, Column: capacity.FieldCapacityKey},
			capacity.FieldValue:       {Type: field.TypeString, Column: capacity.FieldValue},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   quota.Table,
			Columns: quota.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: quota.FieldID,
			},
		},
		Type: "Quota",
		Fields: map[string]*sqlgraph.FieldSpec{
			quota.FieldEntID:         {Type: field.TypeUUID, Column: quota.FieldEntID},
			quota.FieldAppID:         {Type: field.TypeUUID, Column: quota.FieldAppID},
			quota.FieldUserID:        {Type: field.TypeUUID, Column: quota.FieldUserID},
			quota.FieldQuota:         {Type: field.TypeUint32, Column: quota.FieldQuota},
			quota.FieldConsumedQuota: {Type: field.TypeUint32, Column: quota.FieldConsumedQuota},
			quota.FieldExpiredAt:     {Type: field.TypeUint32, Column: quota.FieldExpiredAt},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   subscription.Table,
			Columns: subscription.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: subscription.FieldID,
			},
		},
		Type: "Subscription",
		Fields: map[string]*sqlgraph.FieldSpec{
			subscription.FieldEntID:          {Type: field.TypeUUID, Column: subscription.FieldEntID},
			subscription.FieldAppID:          {Type: field.TypeUUID, Column: subscription.FieldAppID},
			subscription.FieldUserID:         {Type: field.TypeUUID, Column: subscription.FieldUserID},
			subscription.FieldAppGoodID:      {Type: field.TypeUUID, Column: subscription.FieldAppGoodID},
			subscription.FieldNextExtendAt:   {Type: field.TypeUint32, Column: subscription.FieldNextExtendAt},
			subscription.FieldPermanentQuota: {Type: field.TypeUint32, Column: subscription.FieldPermanentQuota},
			subscription.FieldConsumedQuota:  {Type: field.TypeUint32, Column: subscription.FieldConsumedQuota},
			subscription.FieldAutoExtend:     {Type: field.TypeBool, Column: subscription.FieldAutoExtend},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (cq *CapacityQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CapacityQuery builder.
func (cq *CapacityQuery) Filter() *CapacityFilter {
	return &CapacityFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CapacityMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CapacityMutation builder.
func (m *CapacityMutation) Filter() *CapacityFilter {
	return &CapacityFilter{config: m.config, predicateAdder: m}
}

// CapacityFilter provides a generic filtering capability at runtime for CapacityQuery.
type CapacityFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CapacityFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *CapacityFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(capacity.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *CapacityFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(capacity.FieldEntID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *CapacityFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(capacity.FieldAppGoodID))
}

// WhereCapacityKey applies the entql string predicate on the capacity_key field.
func (f *CapacityFilter) WhereCapacityKey(p entql.StringP) {
	f.Where(p.Field(capacity.FieldCapacityKey))
}

// WhereValue applies the entql string predicate on the value field.
func (f *CapacityFilter) WhereValue(p entql.StringP) {
	f.Where(p.Field(capacity.FieldValue))
}

// addPredicate implements the predicateAdder interface.
func (qq *QuotaQuery) addPredicate(pred func(s *sql.Selector)) {
	qq.predicates = append(qq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the QuotaQuery builder.
func (qq *QuotaQuery) Filter() *QuotaFilter {
	return &QuotaFilter{config: qq.config, predicateAdder: qq}
}

// addPredicate implements the predicateAdder interface.
func (m *QuotaMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the QuotaMutation builder.
func (m *QuotaMutation) Filter() *QuotaFilter {
	return &QuotaFilter{config: m.config, predicateAdder: m}
}

// QuotaFilter provides a generic filtering capability at runtime for QuotaQuery.
type QuotaFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *QuotaFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *QuotaFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(quota.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *QuotaFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(quota.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *QuotaFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(quota.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *QuotaFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(quota.FieldUserID))
}

// WhereQuota applies the entql uint32 predicate on the quota field.
func (f *QuotaFilter) WhereQuota(p entql.Uint32P) {
	f.Where(p.Field(quota.FieldQuota))
}

// WhereConsumedQuota applies the entql uint32 predicate on the consumed_quota field.
func (f *QuotaFilter) WhereConsumedQuota(p entql.Uint32P) {
	f.Where(p.Field(quota.FieldConsumedQuota))
}

// WhereExpiredAt applies the entql uint32 predicate on the expired_at field.
func (f *QuotaFilter) WhereExpiredAt(p entql.Uint32P) {
	f.Where(p.Field(quota.FieldExpiredAt))
}

// addPredicate implements the predicateAdder interface.
func (sq *SubscriptionQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SubscriptionQuery builder.
func (sq *SubscriptionQuery) Filter() *SubscriptionFilter {
	return &SubscriptionFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SubscriptionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SubscriptionMutation builder.
func (m *SubscriptionMutation) Filter() *SubscriptionFilter {
	return &SubscriptionFilter{config: m.config, predicateAdder: m}
}

// SubscriptionFilter provides a generic filtering capability at runtime for SubscriptionQuery.
type SubscriptionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SubscriptionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *SubscriptionFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(subscription.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *SubscriptionFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(subscription.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *SubscriptionFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(subscription.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *SubscriptionFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(subscription.FieldUserID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *SubscriptionFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(subscription.FieldAppGoodID))
}

// WhereNextExtendAt applies the entql uint32 predicate on the next_extend_at field.
func (f *SubscriptionFilter) WhereNextExtendAt(p entql.Uint32P) {
	f.Where(p.Field(subscription.FieldNextExtendAt))
}

// WherePermanentQuota applies the entql uint32 predicate on the permanent_quota field.
func (f *SubscriptionFilter) WherePermanentQuota(p entql.Uint32P) {
	f.Where(p.Field(subscription.FieldPermanentQuota))
}

// WhereConsumedQuota applies the entql uint32 predicate on the consumed_quota field.
func (f *SubscriptionFilter) WhereConsumedQuota(p entql.Uint32P) {
	f.Where(p.Field(subscription.FieldConsumedQuota))
}

// WhereAutoExtend applies the entql bool predicate on the auto_extend field.
func (f *SubscriptionFilter) WhereAutoExtend(p entql.BoolP) {
	f.Where(p.Field(subscription.FieldAutoExtend))
}

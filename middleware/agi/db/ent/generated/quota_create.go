// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/agi/db/ent/generated/quota"
	"github.com/google/uuid"
)

// QuotaCreate is the builder for creating a Quota entity.
type QuotaCreate struct {
	config
	mutation *QuotaMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (qc *QuotaCreate) SetEntID(u uuid.UUID) *QuotaCreate {
	qc.mutation.SetEntID(u)
	return qc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (qc *QuotaCreate) SetNillableEntID(u *uuid.UUID) *QuotaCreate {
	if u != nil {
		qc.SetEntID(*u)
	}
	return qc
}

// SetAppID sets the "app_id" field.
func (qc *QuotaCreate) SetAppID(u uuid.UUID) *QuotaCreate {
	qc.mutation.SetAppID(u)
	return qc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (qc *QuotaCreate) SetNillableAppID(u *uuid.UUID) *QuotaCreate {
	if u != nil {
		qc.SetAppID(*u)
	}
	return qc
}

// SetUserID sets the "user_id" field.
func (qc *QuotaCreate) SetUserID(u uuid.UUID) *QuotaCreate {
	qc.mutation.SetUserID(u)
	return qc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (qc *QuotaCreate) SetNillableUserID(u *uuid.UUID) *QuotaCreate {
	if u != nil {
		qc.SetUserID(*u)
	}
	return qc
}

// SetQuota sets the "quota" field.
func (qc *QuotaCreate) SetQuota(u uint32) *QuotaCreate {
	qc.mutation.SetQuota(u)
	return qc
}

// SetNillableQuota sets the "quota" field if the given value is not nil.
func (qc *QuotaCreate) SetNillableQuota(u *uint32) *QuotaCreate {
	if u != nil {
		qc.SetQuota(*u)
	}
	return qc
}

// SetConsumedQuota sets the "consumed_quota" field.
func (qc *QuotaCreate) SetConsumedQuota(u uint32) *QuotaCreate {
	qc.mutation.SetConsumedQuota(u)
	return qc
}

// SetNillableConsumedQuota sets the "consumed_quota" field if the given value is not nil.
func (qc *QuotaCreate) SetNillableConsumedQuota(u *uint32) *QuotaCreate {
	if u != nil {
		qc.SetConsumedQuota(*u)
	}
	return qc
}

// SetExpiredAt sets the "expired_at" field.
func (qc *QuotaCreate) SetExpiredAt(u uint32) *QuotaCreate {
	qc.mutation.SetExpiredAt(u)
	return qc
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (qc *QuotaCreate) SetNillableExpiredAt(u *uint32) *QuotaCreate {
	if u != nil {
		qc.SetExpiredAt(*u)
	}
	return qc
}

// SetID sets the "id" field.
func (qc *QuotaCreate) SetID(u uint32) *QuotaCreate {
	qc.mutation.SetID(u)
	return qc
}

// Mutation returns the QuotaMutation object of the builder.
func (qc *QuotaCreate) Mutation() *QuotaMutation {
	return qc.mutation
}

// Save creates the Quota in the database.
func (qc *QuotaCreate) Save(ctx context.Context) (*Quota, error) {
	qc.defaults()
	return withHooks(ctx, qc.sqlSave, qc.mutation, qc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (qc *QuotaCreate) SaveX(ctx context.Context) *Quota {
	v, err := qc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qc *QuotaCreate) Exec(ctx context.Context) error {
	_, err := qc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qc *QuotaCreate) ExecX(ctx context.Context) {
	if err := qc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qc *QuotaCreate) defaults() {
	if _, ok := qc.mutation.EntID(); !ok {
		v := quota.DefaultEntID()
		qc.mutation.SetEntID(v)
	}
	if _, ok := qc.mutation.AppID(); !ok {
		v := quota.DefaultAppID()
		qc.mutation.SetAppID(v)
	}
	if _, ok := qc.mutation.UserID(); !ok {
		v := quota.DefaultUserID()
		qc.mutation.SetUserID(v)
	}
	if _, ok := qc.mutation.Quota(); !ok {
		v := quota.DefaultQuota
		qc.mutation.SetQuota(v)
	}
	if _, ok := qc.mutation.ConsumedQuota(); !ok {
		v := quota.DefaultConsumedQuota
		qc.mutation.SetConsumedQuota(v)
	}
	if _, ok := qc.mutation.ExpiredAt(); !ok {
		v := quota.DefaultExpiredAt
		qc.mutation.SetExpiredAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qc *QuotaCreate) check() error {
	if _, ok := qc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "Quota.ent_id"`)}
	}
	return nil
}

func (qc *QuotaCreate) sqlSave(ctx context.Context) (*Quota, error) {
	if err := qc.check(); err != nil {
		return nil, err
	}
	_node, _spec := qc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	qc.mutation.id = &_node.ID
	qc.mutation.done = true
	return _node, nil
}

func (qc *QuotaCreate) createSpec() (*Quota, *sqlgraph.CreateSpec) {
	var (
		_node = &Quota{config: qc.config}
		_spec = sqlgraph.NewCreateSpec(quota.Table, sqlgraph.NewFieldSpec(quota.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = qc.conflict
	if id, ok := qc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := qc.mutation.EntID(); ok {
		_spec.SetField(quota.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := qc.mutation.AppID(); ok {
		_spec.SetField(quota.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := qc.mutation.UserID(); ok {
		_spec.SetField(quota.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := qc.mutation.Quota(); ok {
		_spec.SetField(quota.FieldQuota, field.TypeUint32, value)
		_node.Quota = value
	}
	if value, ok := qc.mutation.ConsumedQuota(); ok {
		_spec.SetField(quota.FieldConsumedQuota, field.TypeUint32, value)
		_node.ConsumedQuota = value
	}
	if value, ok := qc.mutation.ExpiredAt(); ok {
		_spec.SetField(quota.FieldExpiredAt, field.TypeUint32, value)
		_node.ExpiredAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Quota.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.QuotaUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (qc *QuotaCreate) OnConflict(opts ...sql.ConflictOption) *QuotaUpsertOne {
	qc.conflict = opts
	return &QuotaUpsertOne{
		create: qc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Quota.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (qc *QuotaCreate) OnConflictColumns(columns ...string) *QuotaUpsertOne {
	qc.conflict = append(qc.conflict, sql.ConflictColumns(columns...))
	return &QuotaUpsertOne{
		create: qc,
	}
}

type (
	// QuotaUpsertOne is the builder for "upsert"-ing
	//  one Quota node.
	QuotaUpsertOne struct {
		create *QuotaCreate
	}

	// QuotaUpsert is the "OnConflict" setter.
	QuotaUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *QuotaUpsert) SetEntID(v uuid.UUID) *QuotaUpsert {
	u.Set(quota.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *QuotaUpsert) UpdateEntID() *QuotaUpsert {
	u.SetExcluded(quota.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *QuotaUpsert) SetAppID(v uuid.UUID) *QuotaUpsert {
	u.Set(quota.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *QuotaUpsert) UpdateAppID() *QuotaUpsert {
	u.SetExcluded(quota.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *QuotaUpsert) ClearAppID() *QuotaUpsert {
	u.SetNull(quota.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *QuotaUpsert) SetUserID(v uuid.UUID) *QuotaUpsert {
	u.Set(quota.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *QuotaUpsert) UpdateUserID() *QuotaUpsert {
	u.SetExcluded(quota.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *QuotaUpsert) ClearUserID() *QuotaUpsert {
	u.SetNull(quota.FieldUserID)
	return u
}

// SetQuota sets the "quota" field.
func (u *QuotaUpsert) SetQuota(v uint32) *QuotaUpsert {
	u.Set(quota.FieldQuota, v)
	return u
}

// UpdateQuota sets the "quota" field to the value that was provided on create.
func (u *QuotaUpsert) UpdateQuota() *QuotaUpsert {
	u.SetExcluded(quota.FieldQuota)
	return u
}

// AddQuota adds v to the "quota" field.
func (u *QuotaUpsert) AddQuota(v uint32) *QuotaUpsert {
	u.Add(quota.FieldQuota, v)
	return u
}

// ClearQuota clears the value of the "quota" field.
func (u *QuotaUpsert) ClearQuota() *QuotaUpsert {
	u.SetNull(quota.FieldQuota)
	return u
}

// SetConsumedQuota sets the "consumed_quota" field.
func (u *QuotaUpsert) SetConsumedQuota(v uint32) *QuotaUpsert {
	u.Set(quota.FieldConsumedQuota, v)
	return u
}

// UpdateConsumedQuota sets the "consumed_quota" field to the value that was provided on create.
func (u *QuotaUpsert) UpdateConsumedQuota() *QuotaUpsert {
	u.SetExcluded(quota.FieldConsumedQuota)
	return u
}

// AddConsumedQuota adds v to the "consumed_quota" field.
func (u *QuotaUpsert) AddConsumedQuota(v uint32) *QuotaUpsert {
	u.Add(quota.FieldConsumedQuota, v)
	return u
}

// ClearConsumedQuota clears the value of the "consumed_quota" field.
func (u *QuotaUpsert) ClearConsumedQuota() *QuotaUpsert {
	u.SetNull(quota.FieldConsumedQuota)
	return u
}

// SetExpiredAt sets the "expired_at" field.
func (u *QuotaUpsert) SetExpiredAt(v uint32) *QuotaUpsert {
	u.Set(quota.FieldExpiredAt, v)
	return u
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *QuotaUpsert) UpdateExpiredAt() *QuotaUpsert {
	u.SetExcluded(quota.FieldExpiredAt)
	return u
}

// AddExpiredAt adds v to the "expired_at" field.
func (u *QuotaUpsert) AddExpiredAt(v uint32) *QuotaUpsert {
	u.Add(quota.FieldExpiredAt, v)
	return u
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (u *QuotaUpsert) ClearExpiredAt() *QuotaUpsert {
	u.SetNull(quota.FieldExpiredAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Quota.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(quota.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *QuotaUpsertOne) UpdateNewValues() *QuotaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(quota.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Quota.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *QuotaUpsertOne) Ignore() *QuotaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *QuotaUpsertOne) DoNothing() *QuotaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the QuotaCreate.OnConflict
// documentation for more info.
func (u *QuotaUpsertOne) Update(set func(*QuotaUpsert)) *QuotaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&QuotaUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *QuotaUpsertOne) SetEntID(v uuid.UUID) *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *QuotaUpsertOne) UpdateEntID() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *QuotaUpsertOne) SetAppID(v uuid.UUID) *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *QuotaUpsertOne) UpdateAppID() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *QuotaUpsertOne) ClearAppID() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *QuotaUpsertOne) SetUserID(v uuid.UUID) *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *QuotaUpsertOne) UpdateUserID() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *QuotaUpsertOne) ClearUserID() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.ClearUserID()
	})
}

// SetQuota sets the "quota" field.
func (u *QuotaUpsertOne) SetQuota(v uint32) *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.SetQuota(v)
	})
}

// AddQuota adds v to the "quota" field.
func (u *QuotaUpsertOne) AddQuota(v uint32) *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.AddQuota(v)
	})
}

// UpdateQuota sets the "quota" field to the value that was provided on create.
func (u *QuotaUpsertOne) UpdateQuota() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateQuota()
	})
}

// ClearQuota clears the value of the "quota" field.
func (u *QuotaUpsertOne) ClearQuota() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.ClearQuota()
	})
}

// SetConsumedQuota sets the "consumed_quota" field.
func (u *QuotaUpsertOne) SetConsumedQuota(v uint32) *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.SetConsumedQuota(v)
	})
}

// AddConsumedQuota adds v to the "consumed_quota" field.
func (u *QuotaUpsertOne) AddConsumedQuota(v uint32) *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.AddConsumedQuota(v)
	})
}

// UpdateConsumedQuota sets the "consumed_quota" field to the value that was provided on create.
func (u *QuotaUpsertOne) UpdateConsumedQuota() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateConsumedQuota()
	})
}

// ClearConsumedQuota clears the value of the "consumed_quota" field.
func (u *QuotaUpsertOne) ClearConsumedQuota() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.ClearConsumedQuota()
	})
}

// SetExpiredAt sets the "expired_at" field.
func (u *QuotaUpsertOne) SetExpiredAt(v uint32) *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.SetExpiredAt(v)
	})
}

// AddExpiredAt adds v to the "expired_at" field.
func (u *QuotaUpsertOne) AddExpiredAt(v uint32) *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.AddExpiredAt(v)
	})
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *QuotaUpsertOne) UpdateExpiredAt() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateExpiredAt()
	})
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (u *QuotaUpsertOne) ClearExpiredAt() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.ClearExpiredAt()
	})
}

// Exec executes the query.
func (u *QuotaUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for QuotaCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *QuotaUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *QuotaUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *QuotaUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// QuotaCreateBulk is the builder for creating many Quota entities in bulk.
type QuotaCreateBulk struct {
	config
	err      error
	builders []*QuotaCreate
	conflict []sql.ConflictOption
}

// Save creates the Quota entities in the database.
func (qcb *QuotaCreateBulk) Save(ctx context.Context) ([]*Quota, error) {
	if qcb.err != nil {
		return nil, qcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(qcb.builders))
	nodes := make([]*Quota, len(qcb.builders))
	mutators := make([]Mutator, len(qcb.builders))
	for i := range qcb.builders {
		func(i int, root context.Context) {
			builder := qcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QuotaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = qcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qcb *QuotaCreateBulk) SaveX(ctx context.Context) []*Quota {
	v, err := qcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qcb *QuotaCreateBulk) Exec(ctx context.Context) error {
	_, err := qcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcb *QuotaCreateBulk) ExecX(ctx context.Context) {
	if err := qcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Quota.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.QuotaUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (qcb *QuotaCreateBulk) OnConflict(opts ...sql.ConflictOption) *QuotaUpsertBulk {
	qcb.conflict = opts
	return &QuotaUpsertBulk{
		create: qcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Quota.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (qcb *QuotaCreateBulk) OnConflictColumns(columns ...string) *QuotaUpsertBulk {
	qcb.conflict = append(qcb.conflict, sql.ConflictColumns(columns...))
	return &QuotaUpsertBulk{
		create: qcb,
	}
}

// QuotaUpsertBulk is the builder for "upsert"-ing
// a bulk of Quota nodes.
type QuotaUpsertBulk struct {
	create *QuotaCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Quota.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(quota.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *QuotaUpsertBulk) UpdateNewValues() *QuotaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(quota.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Quota.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *QuotaUpsertBulk) Ignore() *QuotaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *QuotaUpsertBulk) DoNothing() *QuotaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the QuotaCreateBulk.OnConflict
// documentation for more info.
func (u *QuotaUpsertBulk) Update(set func(*QuotaUpsert)) *QuotaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&QuotaUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *QuotaUpsertBulk) SetEntID(v uuid.UUID) *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *QuotaUpsertBulk) UpdateEntID() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *QuotaUpsertBulk) SetAppID(v uuid.UUID) *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *QuotaUpsertBulk) UpdateAppID() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *QuotaUpsertBulk) ClearAppID() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *QuotaUpsertBulk) SetUserID(v uuid.UUID) *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *QuotaUpsertBulk) UpdateUserID() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *QuotaUpsertBulk) ClearUserID() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.ClearUserID()
	})
}

// SetQuota sets the "quota" field.
func (u *QuotaUpsertBulk) SetQuota(v uint32) *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.SetQuota(v)
	})
}

// AddQuota adds v to the "quota" field.
func (u *QuotaUpsertBulk) AddQuota(v uint32) *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.AddQuota(v)
	})
}

// UpdateQuota sets the "quota" field to the value that was provided on create.
func (u *QuotaUpsertBulk) UpdateQuota() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateQuota()
	})
}

// ClearQuota clears the value of the "quota" field.
func (u *QuotaUpsertBulk) ClearQuota() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.ClearQuota()
	})
}

// SetConsumedQuota sets the "consumed_quota" field.
func (u *QuotaUpsertBulk) SetConsumedQuota(v uint32) *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.SetConsumedQuota(v)
	})
}

// AddConsumedQuota adds v to the "consumed_quota" field.
func (u *QuotaUpsertBulk) AddConsumedQuota(v uint32) *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.AddConsumedQuota(v)
	})
}

// UpdateConsumedQuota sets the "consumed_quota" field to the value that was provided on create.
func (u *QuotaUpsertBulk) UpdateConsumedQuota() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateConsumedQuota()
	})
}

// ClearConsumedQuota clears the value of the "consumed_quota" field.
func (u *QuotaUpsertBulk) ClearConsumedQuota() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.ClearConsumedQuota()
	})
}

// SetExpiredAt sets the "expired_at" field.
func (u *QuotaUpsertBulk) SetExpiredAt(v uint32) *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.SetExpiredAt(v)
	})
}

// AddExpiredAt adds v to the "expired_at" field.
func (u *QuotaUpsertBulk) AddExpiredAt(v uint32) *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.AddExpiredAt(v)
	})
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *QuotaUpsertBulk) UpdateExpiredAt() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateExpiredAt()
	})
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (u *QuotaUpsertBulk) ClearExpiredAt() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.ClearExpiredAt()
	})
}

// Exec executes the query.
func (u *QuotaUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the QuotaCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for QuotaCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *QuotaUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

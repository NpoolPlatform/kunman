// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/agi/db/ent/generated/capacity"
	"github.com/google/uuid"
)

// CapacityCreate is the builder for creating a Capacity entity.
type CapacityCreate struct {
	config
	mutation *CapacityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (cc *CapacityCreate) SetEntID(u uuid.UUID) *CapacityCreate {
	cc.mutation.SetEntID(u)
	return cc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cc *CapacityCreate) SetNillableEntID(u *uuid.UUID) *CapacityCreate {
	if u != nil {
		cc.SetEntID(*u)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CapacityCreate) SetCreatedAt(u uint32) *CapacityCreate {
	cc.mutation.SetCreatedAt(u)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CapacityCreate) SetNillableCreatedAt(u *uint32) *CapacityCreate {
	if u != nil {
		cc.SetCreatedAt(*u)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CapacityCreate) SetUpdatedAt(u uint32) *CapacityCreate {
	cc.mutation.SetUpdatedAt(u)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CapacityCreate) SetNillableUpdatedAt(u *uint32) *CapacityCreate {
	if u != nil {
		cc.SetUpdatedAt(*u)
	}
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *CapacityCreate) SetDeletedAt(u uint32) *CapacityCreate {
	cc.mutation.SetDeletedAt(u)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *CapacityCreate) SetNillableDeletedAt(u *uint32) *CapacityCreate {
	if u != nil {
		cc.SetDeletedAt(*u)
	}
	return cc
}

// SetAppGoodID sets the "app_good_id" field.
func (cc *CapacityCreate) SetAppGoodID(u uuid.UUID) *CapacityCreate {
	cc.mutation.SetAppGoodID(u)
	return cc
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (cc *CapacityCreate) SetNillableAppGoodID(u *uuid.UUID) *CapacityCreate {
	if u != nil {
		cc.SetAppGoodID(*u)
	}
	return cc
}

// SetCapacityKey sets the "capacity_key" field.
func (cc *CapacityCreate) SetCapacityKey(s string) *CapacityCreate {
	cc.mutation.SetCapacityKey(s)
	return cc
}

// SetNillableCapacityKey sets the "capacity_key" field if the given value is not nil.
func (cc *CapacityCreate) SetNillableCapacityKey(s *string) *CapacityCreate {
	if s != nil {
		cc.SetCapacityKey(*s)
	}
	return cc
}

// SetCapacityValue sets the "capacity_value" field.
func (cc *CapacityCreate) SetCapacityValue(s string) *CapacityCreate {
	cc.mutation.SetCapacityValue(s)
	return cc
}

// SetNillableCapacityValue sets the "capacity_value" field if the given value is not nil.
func (cc *CapacityCreate) SetNillableCapacityValue(s *string) *CapacityCreate {
	if s != nil {
		cc.SetCapacityValue(*s)
	}
	return cc
}

// SetDescription sets the "description" field.
func (cc *CapacityCreate) SetDescription(s string) *CapacityCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cc *CapacityCreate) SetNillableDescription(s *string) *CapacityCreate {
	if s != nil {
		cc.SetDescription(*s)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CapacityCreate) SetID(u uint32) *CapacityCreate {
	cc.mutation.SetID(u)
	return cc
}

// Mutation returns the CapacityMutation object of the builder.
func (cc *CapacityCreate) Mutation() *CapacityMutation {
	return cc.mutation
}

// Save creates the Capacity in the database.
func (cc *CapacityCreate) Save(ctx context.Context) (*Capacity, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CapacityCreate) SaveX(ctx context.Context) *Capacity {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CapacityCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CapacityCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CapacityCreate) defaults() {
	if _, ok := cc.mutation.EntID(); !ok {
		v := capacity.DefaultEntID()
		cc.mutation.SetEntID(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := capacity.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := capacity.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.DeletedAt(); !ok {
		v := capacity.DefaultDeletedAt()
		cc.mutation.SetDeletedAt(v)
	}
	if _, ok := cc.mutation.AppGoodID(); !ok {
		v := capacity.DefaultAppGoodID()
		cc.mutation.SetAppGoodID(v)
	}
	if _, ok := cc.mutation.CapacityKey(); !ok {
		v := capacity.DefaultCapacityKey
		cc.mutation.SetCapacityKey(v)
	}
	if _, ok := cc.mutation.CapacityValue(); !ok {
		v := capacity.DefaultCapacityValue
		cc.mutation.SetCapacityValue(v)
	}
	if _, ok := cc.mutation.Description(); !ok {
		v := capacity.DefaultDescription
		cc.mutation.SetDescription(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CapacityCreate) check() error {
	if _, ok := cc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "Capacity.ent_id"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Capacity.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Capacity.updated_at"`)}
	}
	if _, ok := cc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "Capacity.deleted_at"`)}
	}
	return nil
}

func (cc *CapacityCreate) sqlSave(ctx context.Context) (*Capacity, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CapacityCreate) createSpec() (*Capacity, *sqlgraph.CreateSpec) {
	var (
		_node = &Capacity{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(capacity.Table, sqlgraph.NewFieldSpec(capacity.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.EntID(); ok {
		_spec.SetField(capacity.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(capacity.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(capacity.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.SetField(capacity.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := cc.mutation.AppGoodID(); ok {
		_spec.SetField(capacity.FieldAppGoodID, field.TypeUUID, value)
		_node.AppGoodID = value
	}
	if value, ok := cc.mutation.CapacityKey(); ok {
		_spec.SetField(capacity.FieldCapacityKey, field.TypeString, value)
		_node.CapacityKey = value
	}
	if value, ok := cc.mutation.CapacityValue(); ok {
		_spec.SetField(capacity.FieldCapacityValue, field.TypeString, value)
		_node.CapacityValue = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(capacity.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Capacity.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CapacityUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (cc *CapacityCreate) OnConflict(opts ...sql.ConflictOption) *CapacityUpsertOne {
	cc.conflict = opts
	return &CapacityUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Capacity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CapacityCreate) OnConflictColumns(columns ...string) *CapacityUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CapacityUpsertOne{
		create: cc,
	}
}

type (
	// CapacityUpsertOne is the builder for "upsert"-ing
	//  one Capacity node.
	CapacityUpsertOne struct {
		create *CapacityCreate
	}

	// CapacityUpsert is the "OnConflict" setter.
	CapacityUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *CapacityUpsert) SetEntID(v uuid.UUID) *CapacityUpsert {
	u.Set(capacity.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CapacityUpsert) UpdateEntID() *CapacityUpsert {
	u.SetExcluded(capacity.FieldEntID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CapacityUpsert) SetCreatedAt(v uint32) *CapacityUpsert {
	u.Set(capacity.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CapacityUpsert) UpdateCreatedAt() *CapacityUpsert {
	u.SetExcluded(capacity.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CapacityUpsert) AddCreatedAt(v uint32) *CapacityUpsert {
	u.Add(capacity.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CapacityUpsert) SetUpdatedAt(v uint32) *CapacityUpsert {
	u.Set(capacity.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CapacityUpsert) UpdateUpdatedAt() *CapacityUpsert {
	u.SetExcluded(capacity.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CapacityUpsert) AddUpdatedAt(v uint32) *CapacityUpsert {
	u.Add(capacity.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CapacityUpsert) SetDeletedAt(v uint32) *CapacityUpsert {
	u.Set(capacity.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CapacityUpsert) UpdateDeletedAt() *CapacityUpsert {
	u.SetExcluded(capacity.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CapacityUpsert) AddDeletedAt(v uint32) *CapacityUpsert {
	u.Add(capacity.FieldDeletedAt, v)
	return u
}

// SetAppGoodID sets the "app_good_id" field.
func (u *CapacityUpsert) SetAppGoodID(v uuid.UUID) *CapacityUpsert {
	u.Set(capacity.FieldAppGoodID, v)
	return u
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *CapacityUpsert) UpdateAppGoodID() *CapacityUpsert {
	u.SetExcluded(capacity.FieldAppGoodID)
	return u
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *CapacityUpsert) ClearAppGoodID() *CapacityUpsert {
	u.SetNull(capacity.FieldAppGoodID)
	return u
}

// SetCapacityKey sets the "capacity_key" field.
func (u *CapacityUpsert) SetCapacityKey(v string) *CapacityUpsert {
	u.Set(capacity.FieldCapacityKey, v)
	return u
}

// UpdateCapacityKey sets the "capacity_key" field to the value that was provided on create.
func (u *CapacityUpsert) UpdateCapacityKey() *CapacityUpsert {
	u.SetExcluded(capacity.FieldCapacityKey)
	return u
}

// ClearCapacityKey clears the value of the "capacity_key" field.
func (u *CapacityUpsert) ClearCapacityKey() *CapacityUpsert {
	u.SetNull(capacity.FieldCapacityKey)
	return u
}

// SetCapacityValue sets the "capacity_value" field.
func (u *CapacityUpsert) SetCapacityValue(v string) *CapacityUpsert {
	u.Set(capacity.FieldCapacityValue, v)
	return u
}

// UpdateCapacityValue sets the "capacity_value" field to the value that was provided on create.
func (u *CapacityUpsert) UpdateCapacityValue() *CapacityUpsert {
	u.SetExcluded(capacity.FieldCapacityValue)
	return u
}

// ClearCapacityValue clears the value of the "capacity_value" field.
func (u *CapacityUpsert) ClearCapacityValue() *CapacityUpsert {
	u.SetNull(capacity.FieldCapacityValue)
	return u
}

// SetDescription sets the "description" field.
func (u *CapacityUpsert) SetDescription(v string) *CapacityUpsert {
	u.Set(capacity.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CapacityUpsert) UpdateDescription() *CapacityUpsert {
	u.SetExcluded(capacity.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *CapacityUpsert) ClearDescription() *CapacityUpsert {
	u.SetNull(capacity.FieldDescription)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Capacity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(capacity.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CapacityUpsertOne) UpdateNewValues() *CapacityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(capacity.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Capacity.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CapacityUpsertOne) Ignore() *CapacityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CapacityUpsertOne) DoNothing() *CapacityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CapacityCreate.OnConflict
// documentation for more info.
func (u *CapacityUpsertOne) Update(set func(*CapacityUpsert)) *CapacityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CapacityUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *CapacityUpsertOne) SetEntID(v uuid.UUID) *CapacityUpsertOne {
	return u.Update(func(s *CapacityUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CapacityUpsertOne) UpdateEntID() *CapacityUpsertOne {
	return u.Update(func(s *CapacityUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *CapacityUpsertOne) SetCreatedAt(v uint32) *CapacityUpsertOne {
	return u.Update(func(s *CapacityUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CapacityUpsertOne) AddCreatedAt(v uint32) *CapacityUpsertOne {
	return u.Update(func(s *CapacityUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CapacityUpsertOne) UpdateCreatedAt() *CapacityUpsertOne {
	return u.Update(func(s *CapacityUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CapacityUpsertOne) SetUpdatedAt(v uint32) *CapacityUpsertOne {
	return u.Update(func(s *CapacityUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CapacityUpsertOne) AddUpdatedAt(v uint32) *CapacityUpsertOne {
	return u.Update(func(s *CapacityUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CapacityUpsertOne) UpdateUpdatedAt() *CapacityUpsertOne {
	return u.Update(func(s *CapacityUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CapacityUpsertOne) SetDeletedAt(v uint32) *CapacityUpsertOne {
	return u.Update(func(s *CapacityUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CapacityUpsertOne) AddDeletedAt(v uint32) *CapacityUpsertOne {
	return u.Update(func(s *CapacityUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CapacityUpsertOne) UpdateDeletedAt() *CapacityUpsertOne {
	return u.Update(func(s *CapacityUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *CapacityUpsertOne) SetAppGoodID(v uuid.UUID) *CapacityUpsertOne {
	return u.Update(func(s *CapacityUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *CapacityUpsertOne) UpdateAppGoodID() *CapacityUpsertOne {
	return u.Update(func(s *CapacityUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *CapacityUpsertOne) ClearAppGoodID() *CapacityUpsertOne {
	return u.Update(func(s *CapacityUpsert) {
		s.ClearAppGoodID()
	})
}

// SetCapacityKey sets the "capacity_key" field.
func (u *CapacityUpsertOne) SetCapacityKey(v string) *CapacityUpsertOne {
	return u.Update(func(s *CapacityUpsert) {
		s.SetCapacityKey(v)
	})
}

// UpdateCapacityKey sets the "capacity_key" field to the value that was provided on create.
func (u *CapacityUpsertOne) UpdateCapacityKey() *CapacityUpsertOne {
	return u.Update(func(s *CapacityUpsert) {
		s.UpdateCapacityKey()
	})
}

// ClearCapacityKey clears the value of the "capacity_key" field.
func (u *CapacityUpsertOne) ClearCapacityKey() *CapacityUpsertOne {
	return u.Update(func(s *CapacityUpsert) {
		s.ClearCapacityKey()
	})
}

// SetCapacityValue sets the "capacity_value" field.
func (u *CapacityUpsertOne) SetCapacityValue(v string) *CapacityUpsertOne {
	return u.Update(func(s *CapacityUpsert) {
		s.SetCapacityValue(v)
	})
}

// UpdateCapacityValue sets the "capacity_value" field to the value that was provided on create.
func (u *CapacityUpsertOne) UpdateCapacityValue() *CapacityUpsertOne {
	return u.Update(func(s *CapacityUpsert) {
		s.UpdateCapacityValue()
	})
}

// ClearCapacityValue clears the value of the "capacity_value" field.
func (u *CapacityUpsertOne) ClearCapacityValue() *CapacityUpsertOne {
	return u.Update(func(s *CapacityUpsert) {
		s.ClearCapacityValue()
	})
}

// SetDescription sets the "description" field.
func (u *CapacityUpsertOne) SetDescription(v string) *CapacityUpsertOne {
	return u.Update(func(s *CapacityUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CapacityUpsertOne) UpdateDescription() *CapacityUpsertOne {
	return u.Update(func(s *CapacityUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *CapacityUpsertOne) ClearDescription() *CapacityUpsertOne {
	return u.Update(func(s *CapacityUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *CapacityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CapacityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CapacityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CapacityUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CapacityUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CapacityCreateBulk is the builder for creating many Capacity entities in bulk.
type CapacityCreateBulk struct {
	config
	err      error
	builders []*CapacityCreate
	conflict []sql.ConflictOption
}

// Save creates the Capacity entities in the database.
func (ccb *CapacityCreateBulk) Save(ctx context.Context) ([]*Capacity, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Capacity, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CapacityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CapacityCreateBulk) SaveX(ctx context.Context) []*Capacity {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CapacityCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CapacityCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Capacity.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CapacityUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (ccb *CapacityCreateBulk) OnConflict(opts ...sql.ConflictOption) *CapacityUpsertBulk {
	ccb.conflict = opts
	return &CapacityUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Capacity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CapacityCreateBulk) OnConflictColumns(columns ...string) *CapacityUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CapacityUpsertBulk{
		create: ccb,
	}
}

// CapacityUpsertBulk is the builder for "upsert"-ing
// a bulk of Capacity nodes.
type CapacityUpsertBulk struct {
	create *CapacityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Capacity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(capacity.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CapacityUpsertBulk) UpdateNewValues() *CapacityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(capacity.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Capacity.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CapacityUpsertBulk) Ignore() *CapacityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CapacityUpsertBulk) DoNothing() *CapacityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CapacityCreateBulk.OnConflict
// documentation for more info.
func (u *CapacityUpsertBulk) Update(set func(*CapacityUpsert)) *CapacityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CapacityUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *CapacityUpsertBulk) SetEntID(v uuid.UUID) *CapacityUpsertBulk {
	return u.Update(func(s *CapacityUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CapacityUpsertBulk) UpdateEntID() *CapacityUpsertBulk {
	return u.Update(func(s *CapacityUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *CapacityUpsertBulk) SetCreatedAt(v uint32) *CapacityUpsertBulk {
	return u.Update(func(s *CapacityUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CapacityUpsertBulk) AddCreatedAt(v uint32) *CapacityUpsertBulk {
	return u.Update(func(s *CapacityUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CapacityUpsertBulk) UpdateCreatedAt() *CapacityUpsertBulk {
	return u.Update(func(s *CapacityUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CapacityUpsertBulk) SetUpdatedAt(v uint32) *CapacityUpsertBulk {
	return u.Update(func(s *CapacityUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CapacityUpsertBulk) AddUpdatedAt(v uint32) *CapacityUpsertBulk {
	return u.Update(func(s *CapacityUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CapacityUpsertBulk) UpdateUpdatedAt() *CapacityUpsertBulk {
	return u.Update(func(s *CapacityUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CapacityUpsertBulk) SetDeletedAt(v uint32) *CapacityUpsertBulk {
	return u.Update(func(s *CapacityUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CapacityUpsertBulk) AddDeletedAt(v uint32) *CapacityUpsertBulk {
	return u.Update(func(s *CapacityUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CapacityUpsertBulk) UpdateDeletedAt() *CapacityUpsertBulk {
	return u.Update(func(s *CapacityUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *CapacityUpsertBulk) SetAppGoodID(v uuid.UUID) *CapacityUpsertBulk {
	return u.Update(func(s *CapacityUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *CapacityUpsertBulk) UpdateAppGoodID() *CapacityUpsertBulk {
	return u.Update(func(s *CapacityUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *CapacityUpsertBulk) ClearAppGoodID() *CapacityUpsertBulk {
	return u.Update(func(s *CapacityUpsert) {
		s.ClearAppGoodID()
	})
}

// SetCapacityKey sets the "capacity_key" field.
func (u *CapacityUpsertBulk) SetCapacityKey(v string) *CapacityUpsertBulk {
	return u.Update(func(s *CapacityUpsert) {
		s.SetCapacityKey(v)
	})
}

// UpdateCapacityKey sets the "capacity_key" field to the value that was provided on create.
func (u *CapacityUpsertBulk) UpdateCapacityKey() *CapacityUpsertBulk {
	return u.Update(func(s *CapacityUpsert) {
		s.UpdateCapacityKey()
	})
}

// ClearCapacityKey clears the value of the "capacity_key" field.
func (u *CapacityUpsertBulk) ClearCapacityKey() *CapacityUpsertBulk {
	return u.Update(func(s *CapacityUpsert) {
		s.ClearCapacityKey()
	})
}

// SetCapacityValue sets the "capacity_value" field.
func (u *CapacityUpsertBulk) SetCapacityValue(v string) *CapacityUpsertBulk {
	return u.Update(func(s *CapacityUpsert) {
		s.SetCapacityValue(v)
	})
}

// UpdateCapacityValue sets the "capacity_value" field to the value that was provided on create.
func (u *CapacityUpsertBulk) UpdateCapacityValue() *CapacityUpsertBulk {
	return u.Update(func(s *CapacityUpsert) {
		s.UpdateCapacityValue()
	})
}

// ClearCapacityValue clears the value of the "capacity_value" field.
func (u *CapacityUpsertBulk) ClearCapacityValue() *CapacityUpsertBulk {
	return u.Update(func(s *CapacityUpsert) {
		s.ClearCapacityValue()
	})
}

// SetDescription sets the "description" field.
func (u *CapacityUpsertBulk) SetDescription(v string) *CapacityUpsertBulk {
	return u.Update(func(s *CapacityUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CapacityUpsertBulk) UpdateDescription() *CapacityUpsertBulk {
	return u.Update(func(s *CapacityUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *CapacityUpsertBulk) ClearDescription() *CapacityUpsertBulk {
	return u.Update(func(s *CapacityUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *CapacityUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the CapacityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CapacityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CapacityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

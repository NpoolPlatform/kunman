// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/agi/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/agi/db/ent/generated/subscription"
	"github.com/google/uuid"
)

// SubscriptionUpdate is the builder for updating Subscription entities.
type SubscriptionUpdate struct {
	config
	hooks     []Hook
	mutation  *SubscriptionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SubscriptionUpdate builder.
func (su *SubscriptionUpdate) Where(ps ...predicate.Subscription) *SubscriptionUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetEntID sets the "ent_id" field.
func (su *SubscriptionUpdate) SetEntID(u uuid.UUID) *SubscriptionUpdate {
	su.mutation.SetEntID(u)
	return su
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableEntID(u *uuid.UUID) *SubscriptionUpdate {
	if u != nil {
		su.SetEntID(*u)
	}
	return su
}

// SetAppID sets the "app_id" field.
func (su *SubscriptionUpdate) SetAppID(u uuid.UUID) *SubscriptionUpdate {
	su.mutation.SetAppID(u)
	return su
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableAppID(u *uuid.UUID) *SubscriptionUpdate {
	if u != nil {
		su.SetAppID(*u)
	}
	return su
}

// ClearAppID clears the value of the "app_id" field.
func (su *SubscriptionUpdate) ClearAppID() *SubscriptionUpdate {
	su.mutation.ClearAppID()
	return su
}

// SetUserID sets the "user_id" field.
func (su *SubscriptionUpdate) SetUserID(u uuid.UUID) *SubscriptionUpdate {
	su.mutation.SetUserID(u)
	return su
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableUserID(u *uuid.UUID) *SubscriptionUpdate {
	if u != nil {
		su.SetUserID(*u)
	}
	return su
}

// ClearUserID clears the value of the "user_id" field.
func (su *SubscriptionUpdate) ClearUserID() *SubscriptionUpdate {
	su.mutation.ClearUserID()
	return su
}

// SetAppGoodID sets the "app_good_id" field.
func (su *SubscriptionUpdate) SetAppGoodID(u uuid.UUID) *SubscriptionUpdate {
	su.mutation.SetAppGoodID(u)
	return su
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableAppGoodID(u *uuid.UUID) *SubscriptionUpdate {
	if u != nil {
		su.SetAppGoodID(*u)
	}
	return su
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (su *SubscriptionUpdate) ClearAppGoodID() *SubscriptionUpdate {
	su.mutation.ClearAppGoodID()
	return su
}

// SetNextExtendAt sets the "next_extend_at" field.
func (su *SubscriptionUpdate) SetNextExtendAt(u uint32) *SubscriptionUpdate {
	su.mutation.ResetNextExtendAt()
	su.mutation.SetNextExtendAt(u)
	return su
}

// SetNillableNextExtendAt sets the "next_extend_at" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableNextExtendAt(u *uint32) *SubscriptionUpdate {
	if u != nil {
		su.SetNextExtendAt(*u)
	}
	return su
}

// AddNextExtendAt adds u to the "next_extend_at" field.
func (su *SubscriptionUpdate) AddNextExtendAt(u int32) *SubscriptionUpdate {
	su.mutation.AddNextExtendAt(u)
	return su
}

// ClearNextExtendAt clears the value of the "next_extend_at" field.
func (su *SubscriptionUpdate) ClearNextExtendAt() *SubscriptionUpdate {
	su.mutation.ClearNextExtendAt()
	return su
}

// SetPermanentQuota sets the "permanent_quota" field.
func (su *SubscriptionUpdate) SetPermanentQuota(u uint32) *SubscriptionUpdate {
	su.mutation.ResetPermanentQuota()
	su.mutation.SetPermanentQuota(u)
	return su
}

// SetNillablePermanentQuota sets the "permanent_quota" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillablePermanentQuota(u *uint32) *SubscriptionUpdate {
	if u != nil {
		su.SetPermanentQuota(*u)
	}
	return su
}

// AddPermanentQuota adds u to the "permanent_quota" field.
func (su *SubscriptionUpdate) AddPermanentQuota(u int32) *SubscriptionUpdate {
	su.mutation.AddPermanentQuota(u)
	return su
}

// ClearPermanentQuota clears the value of the "permanent_quota" field.
func (su *SubscriptionUpdate) ClearPermanentQuota() *SubscriptionUpdate {
	su.mutation.ClearPermanentQuota()
	return su
}

// SetConsumedQuota sets the "consumed_quota" field.
func (su *SubscriptionUpdate) SetConsumedQuota(u uint32) *SubscriptionUpdate {
	su.mutation.ResetConsumedQuota()
	su.mutation.SetConsumedQuota(u)
	return su
}

// SetNillableConsumedQuota sets the "consumed_quota" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableConsumedQuota(u *uint32) *SubscriptionUpdate {
	if u != nil {
		su.SetConsumedQuota(*u)
	}
	return su
}

// AddConsumedQuota adds u to the "consumed_quota" field.
func (su *SubscriptionUpdate) AddConsumedQuota(u int32) *SubscriptionUpdate {
	su.mutation.AddConsumedQuota(u)
	return su
}

// ClearConsumedQuota clears the value of the "consumed_quota" field.
func (su *SubscriptionUpdate) ClearConsumedQuota() *SubscriptionUpdate {
	su.mutation.ClearConsumedQuota()
	return su
}

// SetAutoExtend sets the "auto_extend" field.
func (su *SubscriptionUpdate) SetAutoExtend(b bool) *SubscriptionUpdate {
	su.mutation.SetAutoExtend(b)
	return su
}

// SetNillableAutoExtend sets the "auto_extend" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableAutoExtend(b *bool) *SubscriptionUpdate {
	if b != nil {
		su.SetAutoExtend(*b)
	}
	return su
}

// ClearAutoExtend clears the value of the "auto_extend" field.
func (su *SubscriptionUpdate) ClearAutoExtend() *SubscriptionUpdate {
	su.mutation.ClearAutoExtend()
	return su
}

// Mutation returns the SubscriptionMutation object of the builder.
func (su *SubscriptionUpdate) Mutation() *SubscriptionMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubscriptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubscriptionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubscriptionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *SubscriptionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubscriptionUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *SubscriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(subscription.Table, subscription.Columns, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUint32))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.EntID(); ok {
		_spec.SetField(subscription.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := su.mutation.AppID(); ok {
		_spec.SetField(subscription.FieldAppID, field.TypeUUID, value)
	}
	if su.mutation.AppIDCleared() {
		_spec.ClearField(subscription.FieldAppID, field.TypeUUID)
	}
	if value, ok := su.mutation.UserID(); ok {
		_spec.SetField(subscription.FieldUserID, field.TypeUUID, value)
	}
	if su.mutation.UserIDCleared() {
		_spec.ClearField(subscription.FieldUserID, field.TypeUUID)
	}
	if value, ok := su.mutation.AppGoodID(); ok {
		_spec.SetField(subscription.FieldAppGoodID, field.TypeUUID, value)
	}
	if su.mutation.AppGoodIDCleared() {
		_spec.ClearField(subscription.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := su.mutation.NextExtendAt(); ok {
		_spec.SetField(subscription.FieldNextExtendAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedNextExtendAt(); ok {
		_spec.AddField(subscription.FieldNextExtendAt, field.TypeUint32, value)
	}
	if su.mutation.NextExtendAtCleared() {
		_spec.ClearField(subscription.FieldNextExtendAt, field.TypeUint32)
	}
	if value, ok := su.mutation.PermanentQuota(); ok {
		_spec.SetField(subscription.FieldPermanentQuota, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedPermanentQuota(); ok {
		_spec.AddField(subscription.FieldPermanentQuota, field.TypeUint32, value)
	}
	if su.mutation.PermanentQuotaCleared() {
		_spec.ClearField(subscription.FieldPermanentQuota, field.TypeUint32)
	}
	if value, ok := su.mutation.ConsumedQuota(); ok {
		_spec.SetField(subscription.FieldConsumedQuota, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedConsumedQuota(); ok {
		_spec.AddField(subscription.FieldConsumedQuota, field.TypeUint32, value)
	}
	if su.mutation.ConsumedQuotaCleared() {
		_spec.ClearField(subscription.FieldConsumedQuota, field.TypeUint32)
	}
	if value, ok := su.mutation.AutoExtend(); ok {
		_spec.SetField(subscription.FieldAutoExtend, field.TypeBool, value)
	}
	if su.mutation.AutoExtendCleared() {
		_spec.ClearField(subscription.FieldAutoExtend, field.TypeBool)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubscriptionUpdateOne is the builder for updating a single Subscription entity.
type SubscriptionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SubscriptionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (suo *SubscriptionUpdateOne) SetEntID(u uuid.UUID) *SubscriptionUpdateOne {
	suo.mutation.SetEntID(u)
	return suo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableEntID(u *uuid.UUID) *SubscriptionUpdateOne {
	if u != nil {
		suo.SetEntID(*u)
	}
	return suo
}

// SetAppID sets the "app_id" field.
func (suo *SubscriptionUpdateOne) SetAppID(u uuid.UUID) *SubscriptionUpdateOne {
	suo.mutation.SetAppID(u)
	return suo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableAppID(u *uuid.UUID) *SubscriptionUpdateOne {
	if u != nil {
		suo.SetAppID(*u)
	}
	return suo
}

// ClearAppID clears the value of the "app_id" field.
func (suo *SubscriptionUpdateOne) ClearAppID() *SubscriptionUpdateOne {
	suo.mutation.ClearAppID()
	return suo
}

// SetUserID sets the "user_id" field.
func (suo *SubscriptionUpdateOne) SetUserID(u uuid.UUID) *SubscriptionUpdateOne {
	suo.mutation.SetUserID(u)
	return suo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableUserID(u *uuid.UUID) *SubscriptionUpdateOne {
	if u != nil {
		suo.SetUserID(*u)
	}
	return suo
}

// ClearUserID clears the value of the "user_id" field.
func (suo *SubscriptionUpdateOne) ClearUserID() *SubscriptionUpdateOne {
	suo.mutation.ClearUserID()
	return suo
}

// SetAppGoodID sets the "app_good_id" field.
func (suo *SubscriptionUpdateOne) SetAppGoodID(u uuid.UUID) *SubscriptionUpdateOne {
	suo.mutation.SetAppGoodID(u)
	return suo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *SubscriptionUpdateOne {
	if u != nil {
		suo.SetAppGoodID(*u)
	}
	return suo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (suo *SubscriptionUpdateOne) ClearAppGoodID() *SubscriptionUpdateOne {
	suo.mutation.ClearAppGoodID()
	return suo
}

// SetNextExtendAt sets the "next_extend_at" field.
func (suo *SubscriptionUpdateOne) SetNextExtendAt(u uint32) *SubscriptionUpdateOne {
	suo.mutation.ResetNextExtendAt()
	suo.mutation.SetNextExtendAt(u)
	return suo
}

// SetNillableNextExtendAt sets the "next_extend_at" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableNextExtendAt(u *uint32) *SubscriptionUpdateOne {
	if u != nil {
		suo.SetNextExtendAt(*u)
	}
	return suo
}

// AddNextExtendAt adds u to the "next_extend_at" field.
func (suo *SubscriptionUpdateOne) AddNextExtendAt(u int32) *SubscriptionUpdateOne {
	suo.mutation.AddNextExtendAt(u)
	return suo
}

// ClearNextExtendAt clears the value of the "next_extend_at" field.
func (suo *SubscriptionUpdateOne) ClearNextExtendAt() *SubscriptionUpdateOne {
	suo.mutation.ClearNextExtendAt()
	return suo
}

// SetPermanentQuota sets the "permanent_quota" field.
func (suo *SubscriptionUpdateOne) SetPermanentQuota(u uint32) *SubscriptionUpdateOne {
	suo.mutation.ResetPermanentQuota()
	suo.mutation.SetPermanentQuota(u)
	return suo
}

// SetNillablePermanentQuota sets the "permanent_quota" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillablePermanentQuota(u *uint32) *SubscriptionUpdateOne {
	if u != nil {
		suo.SetPermanentQuota(*u)
	}
	return suo
}

// AddPermanentQuota adds u to the "permanent_quota" field.
func (suo *SubscriptionUpdateOne) AddPermanentQuota(u int32) *SubscriptionUpdateOne {
	suo.mutation.AddPermanentQuota(u)
	return suo
}

// ClearPermanentQuota clears the value of the "permanent_quota" field.
func (suo *SubscriptionUpdateOne) ClearPermanentQuota() *SubscriptionUpdateOne {
	suo.mutation.ClearPermanentQuota()
	return suo
}

// SetConsumedQuota sets the "consumed_quota" field.
func (suo *SubscriptionUpdateOne) SetConsumedQuota(u uint32) *SubscriptionUpdateOne {
	suo.mutation.ResetConsumedQuota()
	suo.mutation.SetConsumedQuota(u)
	return suo
}

// SetNillableConsumedQuota sets the "consumed_quota" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableConsumedQuota(u *uint32) *SubscriptionUpdateOne {
	if u != nil {
		suo.SetConsumedQuota(*u)
	}
	return suo
}

// AddConsumedQuota adds u to the "consumed_quota" field.
func (suo *SubscriptionUpdateOne) AddConsumedQuota(u int32) *SubscriptionUpdateOne {
	suo.mutation.AddConsumedQuota(u)
	return suo
}

// ClearConsumedQuota clears the value of the "consumed_quota" field.
func (suo *SubscriptionUpdateOne) ClearConsumedQuota() *SubscriptionUpdateOne {
	suo.mutation.ClearConsumedQuota()
	return suo
}

// SetAutoExtend sets the "auto_extend" field.
func (suo *SubscriptionUpdateOne) SetAutoExtend(b bool) *SubscriptionUpdateOne {
	suo.mutation.SetAutoExtend(b)
	return suo
}

// SetNillableAutoExtend sets the "auto_extend" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableAutoExtend(b *bool) *SubscriptionUpdateOne {
	if b != nil {
		suo.SetAutoExtend(*b)
	}
	return suo
}

// ClearAutoExtend clears the value of the "auto_extend" field.
func (suo *SubscriptionUpdateOne) ClearAutoExtend() *SubscriptionUpdateOne {
	suo.mutation.ClearAutoExtend()
	return suo
}

// Mutation returns the SubscriptionMutation object of the builder.
func (suo *SubscriptionUpdateOne) Mutation() *SubscriptionMutation {
	return suo.mutation
}

// Where appends a list predicates to the SubscriptionUpdate builder.
func (suo *SubscriptionUpdateOne) Where(ps ...predicate.Subscription) *SubscriptionUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubscriptionUpdateOne) Select(field string, fields ...string) *SubscriptionUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subscription entity.
func (suo *SubscriptionUpdateOne) Save(ctx context.Context) (*Subscription, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubscriptionUpdateOne) SaveX(ctx context.Context) *Subscription {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *SubscriptionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubscriptionUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *SubscriptionUpdateOne) sqlSave(ctx context.Context) (_node *Subscription, err error) {
	_spec := sqlgraph.NewUpdateSpec(subscription.Table, subscription.Columns, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUint32))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Subscription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscription.FieldID)
		for _, f := range fields {
			if !subscription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != subscription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.EntID(); ok {
		_spec.SetField(subscription.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := suo.mutation.AppID(); ok {
		_spec.SetField(subscription.FieldAppID, field.TypeUUID, value)
	}
	if suo.mutation.AppIDCleared() {
		_spec.ClearField(subscription.FieldAppID, field.TypeUUID)
	}
	if value, ok := suo.mutation.UserID(); ok {
		_spec.SetField(subscription.FieldUserID, field.TypeUUID, value)
	}
	if suo.mutation.UserIDCleared() {
		_spec.ClearField(subscription.FieldUserID, field.TypeUUID)
	}
	if value, ok := suo.mutation.AppGoodID(); ok {
		_spec.SetField(subscription.FieldAppGoodID, field.TypeUUID, value)
	}
	if suo.mutation.AppGoodIDCleared() {
		_spec.ClearField(subscription.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := suo.mutation.NextExtendAt(); ok {
		_spec.SetField(subscription.FieldNextExtendAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedNextExtendAt(); ok {
		_spec.AddField(subscription.FieldNextExtendAt, field.TypeUint32, value)
	}
	if suo.mutation.NextExtendAtCleared() {
		_spec.ClearField(subscription.FieldNextExtendAt, field.TypeUint32)
	}
	if value, ok := suo.mutation.PermanentQuota(); ok {
		_spec.SetField(subscription.FieldPermanentQuota, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedPermanentQuota(); ok {
		_spec.AddField(subscription.FieldPermanentQuota, field.TypeUint32, value)
	}
	if suo.mutation.PermanentQuotaCleared() {
		_spec.ClearField(subscription.FieldPermanentQuota, field.TypeUint32)
	}
	if value, ok := suo.mutation.ConsumedQuota(); ok {
		_spec.SetField(subscription.FieldConsumedQuota, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedConsumedQuota(); ok {
		_spec.AddField(subscription.FieldConsumedQuota, field.TypeUint32, value)
	}
	if suo.mutation.ConsumedQuotaCleared() {
		_spec.ClearField(subscription.FieldConsumedQuota, field.TypeUint32)
	}
	if value, ok := suo.mutation.AutoExtend(); ok {
		_spec.SetField(subscription.FieldAutoExtend, field.TypeBool, value)
	}
	if suo.mutation.AutoExtendCleared() {
		_spec.ClearField(subscription.FieldAutoExtend, field.TypeBool)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Subscription{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/agi/db/ent/generated/subscription"
	"github.com/google/uuid"
)

// Subscription is the model entity for the Subscription schema.
type Subscription struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// AppGoodID holds the value of the "app_good_id" field.
	AppGoodID uuid.UUID `json:"app_good_id,omitempty"`
	// NextExtendAt holds the value of the "next_extend_at" field.
	NextExtendAt uint32 `json:"next_extend_at,omitempty"`
	// PermanentQuota holds the value of the "permanent_quota" field.
	PermanentQuota uint32 `json:"permanent_quota,omitempty"`
	// ConsumedQuota holds the value of the "consumed_quota" field.
	ConsumedQuota uint32 `json:"consumed_quota,omitempty"`
	// PayWithCoinBalance holds the value of the "pay_with_coin_balance" field.
	PayWithCoinBalance bool `json:"pay_with_coin_balance,omitempty"`
	// SubscriptionID holds the value of the "subscription_id" field.
	SubscriptionID string `json:"subscription_id,omitempty"`
	// FiatPaymentChannel holds the value of the "fiat_payment_channel" field.
	FiatPaymentChannel string `json:"fiat_payment_channel,omitempty"`
	// LastPaymentAt holds the value of the "last_payment_at" field.
	LastPaymentAt uint32 `json:"last_payment_at,omitempty"`
	// LastUpdatedEventID holds the value of the "last_updated_event_id" field.
	LastUpdatedEventID string `json:"last_updated_event_id,omitempty"`
	// ActivatedAt holds the value of the "activated_at" field.
	ActivatedAt uint32 `json:"activated_at,omitempty"`
	// ActivatedEventID holds the value of the "activated_event_id" field.
	ActivatedEventID string `json:"activated_event_id,omitempty"`
	selectValues     sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Subscription) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscription.FieldPayWithCoinBalance:
			values[i] = new(sql.NullBool)
		case subscription.FieldID, subscription.FieldCreatedAt, subscription.FieldUpdatedAt, subscription.FieldDeletedAt, subscription.FieldNextExtendAt, subscription.FieldPermanentQuota, subscription.FieldConsumedQuota, subscription.FieldLastPaymentAt, subscription.FieldActivatedAt:
			values[i] = new(sql.NullInt64)
		case subscription.FieldSubscriptionID, subscription.FieldFiatPaymentChannel, subscription.FieldLastUpdatedEventID, subscription.FieldActivatedEventID:
			values[i] = new(sql.NullString)
		case subscription.FieldEntID, subscription.FieldAppID, subscription.FieldUserID, subscription.FieldAppGoodID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Subscription fields.
func (s *Subscription) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscription.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = uint32(value.Int64)
		case subscription.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = uint32(value.Int64)
			}
		case subscription.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = uint32(value.Int64)
			}
		case subscription.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				s.DeletedAt = uint32(value.Int64)
			}
		case subscription.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				s.EntID = *value
			}
		case subscription.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				s.AppID = *value
			}
		case subscription.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				s.UserID = *value
			}
		case subscription.FieldAppGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_good_id", values[i])
			} else if value != nil {
				s.AppGoodID = *value
			}
		case subscription.FieldNextExtendAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field next_extend_at", values[i])
			} else if value.Valid {
				s.NextExtendAt = uint32(value.Int64)
			}
		case subscription.FieldPermanentQuota:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field permanent_quota", values[i])
			} else if value.Valid {
				s.PermanentQuota = uint32(value.Int64)
			}
		case subscription.FieldConsumedQuota:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field consumed_quota", values[i])
			} else if value.Valid {
				s.ConsumedQuota = uint32(value.Int64)
			}
		case subscription.FieldPayWithCoinBalance:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field pay_with_coin_balance", values[i])
			} else if value.Valid {
				s.PayWithCoinBalance = value.Bool
			}
		case subscription.FieldSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_id", values[i])
			} else if value.Valid {
				s.SubscriptionID = value.String
			}
		case subscription.FieldFiatPaymentChannel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fiat_payment_channel", values[i])
			} else if value.Valid {
				s.FiatPaymentChannel = value.String
			}
		case subscription.FieldLastPaymentAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_payment_at", values[i])
			} else if value.Valid {
				s.LastPaymentAt = uint32(value.Int64)
			}
		case subscription.FieldLastUpdatedEventID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_updated_event_id", values[i])
			} else if value.Valid {
				s.LastUpdatedEventID = value.String
			}
		case subscription.FieldActivatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field activated_at", values[i])
			} else if value.Valid {
				s.ActivatedAt = uint32(value.Int64)
			}
		case subscription.FieldActivatedEventID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activated_event_id", values[i])
			} else if value.Valid {
				s.ActivatedEventID = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Subscription.
// This includes values selected through modifiers, order, etc.
func (s *Subscription) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Subscription.
// Note that you need to call Subscription.Unwrap() before calling this method if this Subscription
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Subscription) Update() *SubscriptionUpdateOne {
	return NewSubscriptionClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Subscription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Subscription) Unwrap() *Subscription {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("generated: Subscription is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Subscription) String() string {
	var builder strings.Builder
	builder.WriteString("Subscription(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", s.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", s.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", s.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", s.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", s.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", s.UserID))
	builder.WriteString(", ")
	builder.WriteString("app_good_id=")
	builder.WriteString(fmt.Sprintf("%v", s.AppGoodID))
	builder.WriteString(", ")
	builder.WriteString("next_extend_at=")
	builder.WriteString(fmt.Sprintf("%v", s.NextExtendAt))
	builder.WriteString(", ")
	builder.WriteString("permanent_quota=")
	builder.WriteString(fmt.Sprintf("%v", s.PermanentQuota))
	builder.WriteString(", ")
	builder.WriteString("consumed_quota=")
	builder.WriteString(fmt.Sprintf("%v", s.ConsumedQuota))
	builder.WriteString(", ")
	builder.WriteString("pay_with_coin_balance=")
	builder.WriteString(fmt.Sprintf("%v", s.PayWithCoinBalance))
	builder.WriteString(", ")
	builder.WriteString("subscription_id=")
	builder.WriteString(s.SubscriptionID)
	builder.WriteString(", ")
	builder.WriteString("fiat_payment_channel=")
	builder.WriteString(s.FiatPaymentChannel)
	builder.WriteString(", ")
	builder.WriteString("last_payment_at=")
	builder.WriteString(fmt.Sprintf("%v", s.LastPaymentAt))
	builder.WriteString(", ")
	builder.WriteString("last_updated_event_id=")
	builder.WriteString(s.LastUpdatedEventID)
	builder.WriteString(", ")
	builder.WriteString("activated_at=")
	builder.WriteString(fmt.Sprintf("%v", s.ActivatedAt))
	builder.WriteString(", ")
	builder.WriteString("activated_event_id=")
	builder.WriteString(s.ActivatedEventID)
	builder.WriteByte(')')
	return builder.String()
}

// Subscriptions is a parsable slice of Subscription.
type Subscriptions []*Subscription

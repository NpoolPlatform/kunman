// Code generated by ent, DO NOT EDIT.

package subscription

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the subscription type in the database.
	Label = "subscription"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldAppGoodID holds the string denoting the app_good_id field in the database.
	FieldAppGoodID = "app_good_id"
	// FieldNextExtendAt holds the string denoting the next_extend_at field in the database.
	FieldNextExtendAt = "next_extend_at"
	// FieldPermanentQuota holds the string denoting the permanent_quota field in the database.
	FieldPermanentQuota = "permanent_quota"
	// FieldConsumedQuota holds the string denoting the consumed_quota field in the database.
	FieldConsumedQuota = "consumed_quota"
	// FieldPayWithCoinBalance holds the string denoting the pay_with_coin_balance field in the database.
	FieldPayWithCoinBalance = "pay_with_coin_balance"
	// FieldSubscriptionID holds the string denoting the subscription_id field in the database.
	FieldSubscriptionID = "subscription_id"
	// FieldFiatPaymentChannel holds the string denoting the fiat_payment_channel field in the database.
	FieldFiatPaymentChannel = "fiat_payment_channel"
	// FieldLastPaymentAt holds the string denoting the last_payment_at field in the database.
	FieldLastPaymentAt = "last_payment_at"
	// FieldLastUpdatedEventID holds the string denoting the last_updated_event_id field in the database.
	FieldLastUpdatedEventID = "last_updated_event_id"
	// FieldActivatedAt holds the string denoting the activated_at field in the database.
	FieldActivatedAt = "activated_at"
	// FieldActivatedEventID holds the string denoting the activated_event_id field in the database.
	FieldActivatedEventID = "activated_event_id"
	// Table holds the table name of the subscription in the database.
	Table = "subscriptions"
)

// Columns holds all SQL columns for subscription fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldEntID,
	FieldAppID,
	FieldUserID,
	FieldAppGoodID,
	FieldNextExtendAt,
	FieldPermanentQuota,
	FieldConsumedQuota,
	FieldPayWithCoinBalance,
	FieldSubscriptionID,
	FieldFiatPaymentChannel,
	FieldLastPaymentAt,
	FieldLastUpdatedEventID,
	FieldActivatedAt,
	FieldActivatedEventID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() uint32
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() uint32
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() uint32
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt func() uint32
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultAppID holds the default value on creation for the "app_id" field.
	DefaultAppID func() uuid.UUID
	// DefaultUserID holds the default value on creation for the "user_id" field.
	DefaultUserID func() uuid.UUID
	// DefaultAppGoodID holds the default value on creation for the "app_good_id" field.
	DefaultAppGoodID func() uuid.UUID
	// DefaultNextExtendAt holds the default value on creation for the "next_extend_at" field.
	DefaultNextExtendAt uint32
	// DefaultPermanentQuota holds the default value on creation for the "permanent_quota" field.
	DefaultPermanentQuota uint32
	// DefaultConsumedQuota holds the default value on creation for the "consumed_quota" field.
	DefaultConsumedQuota uint32
	// DefaultPayWithCoinBalance holds the default value on creation for the "pay_with_coin_balance" field.
	DefaultPayWithCoinBalance bool
	// DefaultSubscriptionID holds the default value on creation for the "subscription_id" field.
	DefaultSubscriptionID string
	// DefaultFiatPaymentChannel holds the default value on creation for the "fiat_payment_channel" field.
	DefaultFiatPaymentChannel string
	// DefaultLastPaymentAt holds the default value on creation for the "last_payment_at" field.
	DefaultLastPaymentAt uint32
	// DefaultLastUpdatedEventID holds the default value on creation for the "last_updated_event_id" field.
	DefaultLastUpdatedEventID string
	// DefaultActivatedAt holds the default value on creation for the "activated_at" field.
	DefaultActivatedAt uint32
	// DefaultActivatedEventID holds the default value on creation for the "activated_event_id" field.
	DefaultActivatedEventID string
)

// OrderOption defines the ordering options for the Subscription queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByAppID orders the results by the app_id field.
func ByAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByAppGoodID orders the results by the app_good_id field.
func ByAppGoodID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppGoodID, opts...).ToFunc()
}

// ByNextExtendAt orders the results by the next_extend_at field.
func ByNextExtendAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextExtendAt, opts...).ToFunc()
}

// ByPermanentQuota orders the results by the permanent_quota field.
func ByPermanentQuota(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPermanentQuota, opts...).ToFunc()
}

// ByConsumedQuota orders the results by the consumed_quota field.
func ByConsumedQuota(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConsumedQuota, opts...).ToFunc()
}

// ByPayWithCoinBalance orders the results by the pay_with_coin_balance field.
func ByPayWithCoinBalance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayWithCoinBalance, opts...).ToFunc()
}

// BySubscriptionID orders the results by the subscription_id field.
func BySubscriptionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscriptionID, opts...).ToFunc()
}

// ByFiatPaymentChannel orders the results by the fiat_payment_channel field.
func ByFiatPaymentChannel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFiatPaymentChannel, opts...).ToFunc()
}

// ByLastPaymentAt orders the results by the last_payment_at field.
func ByLastPaymentAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastPaymentAt, opts...).ToFunc()
}

// ByLastUpdatedEventID orders the results by the last_updated_event_id field.
func ByLastUpdatedEventID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUpdatedEventID, opts...).ToFunc()
}

// ByActivatedAt orders the results by the activated_at field.
func ByActivatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivatedAt, opts...).ToFunc()
}

// ByActivatedEventID orders the results by the activated_event_id field.
func ByActivatedEventID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivatedEventID, opts...).ToFunc()
}

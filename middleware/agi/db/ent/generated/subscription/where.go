// Code generated by ent, DO NOT EDIT.

package subscription

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/agi/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldDeletedAt, v))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldEntID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldAppID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldUserID, v))
}

// AppGoodID applies equality check predicate on the "app_good_id" field. It's identical to AppGoodIDEQ.
func AppGoodID(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldAppGoodID, v))
}

// NextExtendAt applies equality check predicate on the "next_extend_at" field. It's identical to NextExtendAtEQ.
func NextExtendAt(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldNextExtendAt, v))
}

// PermanentQuota applies equality check predicate on the "permanent_quota" field. It's identical to PermanentQuotaEQ.
func PermanentQuota(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldPermanentQuota, v))
}

// ConsumedQuota applies equality check predicate on the "consumed_quota" field. It's identical to ConsumedQuotaEQ.
func ConsumedQuota(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldConsumedQuota, v))
}

// PayWithCoinBalance applies equality check predicate on the "pay_with_coin_balance" field. It's identical to PayWithCoinBalanceEQ.
func PayWithCoinBalance(v bool) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldPayWithCoinBalance, v))
}

// SubscriptionID applies equality check predicate on the "subscription_id" field. It's identical to SubscriptionIDEQ.
func SubscriptionID(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldSubscriptionID, v))
}

// FiatPaymentChannel applies equality check predicate on the "fiat_payment_channel" field. It's identical to FiatPaymentChannelEQ.
func FiatPaymentChannel(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldFiatPaymentChannel, v))
}

// LastPaymentAt applies equality check predicate on the "last_payment_at" field. It's identical to LastPaymentAtEQ.
func LastPaymentAt(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldLastPaymentAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldEntID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldAppID, v))
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldAppID))
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldAppID))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldUserID))
}

// AppGoodIDEQ applies the EQ predicate on the "app_good_id" field.
func AppGoodIDEQ(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldAppGoodID, v))
}

// AppGoodIDNEQ applies the NEQ predicate on the "app_good_id" field.
func AppGoodIDNEQ(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldAppGoodID, v))
}

// AppGoodIDIn applies the In predicate on the "app_good_id" field.
func AppGoodIDIn(vs ...uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldAppGoodID, vs...))
}

// AppGoodIDNotIn applies the NotIn predicate on the "app_good_id" field.
func AppGoodIDNotIn(vs ...uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldAppGoodID, vs...))
}

// AppGoodIDGT applies the GT predicate on the "app_good_id" field.
func AppGoodIDGT(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldAppGoodID, v))
}

// AppGoodIDGTE applies the GTE predicate on the "app_good_id" field.
func AppGoodIDGTE(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldAppGoodID, v))
}

// AppGoodIDLT applies the LT predicate on the "app_good_id" field.
func AppGoodIDLT(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldAppGoodID, v))
}

// AppGoodIDLTE applies the LTE predicate on the "app_good_id" field.
func AppGoodIDLTE(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldAppGoodID, v))
}

// AppGoodIDIsNil applies the IsNil predicate on the "app_good_id" field.
func AppGoodIDIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldAppGoodID))
}

// AppGoodIDNotNil applies the NotNil predicate on the "app_good_id" field.
func AppGoodIDNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldAppGoodID))
}

// NextExtendAtEQ applies the EQ predicate on the "next_extend_at" field.
func NextExtendAtEQ(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldNextExtendAt, v))
}

// NextExtendAtNEQ applies the NEQ predicate on the "next_extend_at" field.
func NextExtendAtNEQ(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldNextExtendAt, v))
}

// NextExtendAtIn applies the In predicate on the "next_extend_at" field.
func NextExtendAtIn(vs ...uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldNextExtendAt, vs...))
}

// NextExtendAtNotIn applies the NotIn predicate on the "next_extend_at" field.
func NextExtendAtNotIn(vs ...uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldNextExtendAt, vs...))
}

// NextExtendAtGT applies the GT predicate on the "next_extend_at" field.
func NextExtendAtGT(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldNextExtendAt, v))
}

// NextExtendAtGTE applies the GTE predicate on the "next_extend_at" field.
func NextExtendAtGTE(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldNextExtendAt, v))
}

// NextExtendAtLT applies the LT predicate on the "next_extend_at" field.
func NextExtendAtLT(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldNextExtendAt, v))
}

// NextExtendAtLTE applies the LTE predicate on the "next_extend_at" field.
func NextExtendAtLTE(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldNextExtendAt, v))
}

// NextExtendAtIsNil applies the IsNil predicate on the "next_extend_at" field.
func NextExtendAtIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldNextExtendAt))
}

// NextExtendAtNotNil applies the NotNil predicate on the "next_extend_at" field.
func NextExtendAtNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldNextExtendAt))
}

// PermanentQuotaEQ applies the EQ predicate on the "permanent_quota" field.
func PermanentQuotaEQ(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldPermanentQuota, v))
}

// PermanentQuotaNEQ applies the NEQ predicate on the "permanent_quota" field.
func PermanentQuotaNEQ(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldPermanentQuota, v))
}

// PermanentQuotaIn applies the In predicate on the "permanent_quota" field.
func PermanentQuotaIn(vs ...uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldPermanentQuota, vs...))
}

// PermanentQuotaNotIn applies the NotIn predicate on the "permanent_quota" field.
func PermanentQuotaNotIn(vs ...uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldPermanentQuota, vs...))
}

// PermanentQuotaGT applies the GT predicate on the "permanent_quota" field.
func PermanentQuotaGT(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldPermanentQuota, v))
}

// PermanentQuotaGTE applies the GTE predicate on the "permanent_quota" field.
func PermanentQuotaGTE(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldPermanentQuota, v))
}

// PermanentQuotaLT applies the LT predicate on the "permanent_quota" field.
func PermanentQuotaLT(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldPermanentQuota, v))
}

// PermanentQuotaLTE applies the LTE predicate on the "permanent_quota" field.
func PermanentQuotaLTE(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldPermanentQuota, v))
}

// PermanentQuotaIsNil applies the IsNil predicate on the "permanent_quota" field.
func PermanentQuotaIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldPermanentQuota))
}

// PermanentQuotaNotNil applies the NotNil predicate on the "permanent_quota" field.
func PermanentQuotaNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldPermanentQuota))
}

// ConsumedQuotaEQ applies the EQ predicate on the "consumed_quota" field.
func ConsumedQuotaEQ(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldConsumedQuota, v))
}

// ConsumedQuotaNEQ applies the NEQ predicate on the "consumed_quota" field.
func ConsumedQuotaNEQ(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldConsumedQuota, v))
}

// ConsumedQuotaIn applies the In predicate on the "consumed_quota" field.
func ConsumedQuotaIn(vs ...uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldConsumedQuota, vs...))
}

// ConsumedQuotaNotIn applies the NotIn predicate on the "consumed_quota" field.
func ConsumedQuotaNotIn(vs ...uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldConsumedQuota, vs...))
}

// ConsumedQuotaGT applies the GT predicate on the "consumed_quota" field.
func ConsumedQuotaGT(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldConsumedQuota, v))
}

// ConsumedQuotaGTE applies the GTE predicate on the "consumed_quota" field.
func ConsumedQuotaGTE(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldConsumedQuota, v))
}

// ConsumedQuotaLT applies the LT predicate on the "consumed_quota" field.
func ConsumedQuotaLT(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldConsumedQuota, v))
}

// ConsumedQuotaLTE applies the LTE predicate on the "consumed_quota" field.
func ConsumedQuotaLTE(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldConsumedQuota, v))
}

// ConsumedQuotaIsNil applies the IsNil predicate on the "consumed_quota" field.
func ConsumedQuotaIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldConsumedQuota))
}

// ConsumedQuotaNotNil applies the NotNil predicate on the "consumed_quota" field.
func ConsumedQuotaNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldConsumedQuota))
}

// PayWithCoinBalanceEQ applies the EQ predicate on the "pay_with_coin_balance" field.
func PayWithCoinBalanceEQ(v bool) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldPayWithCoinBalance, v))
}

// PayWithCoinBalanceNEQ applies the NEQ predicate on the "pay_with_coin_balance" field.
func PayWithCoinBalanceNEQ(v bool) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldPayWithCoinBalance, v))
}

// PayWithCoinBalanceIsNil applies the IsNil predicate on the "pay_with_coin_balance" field.
func PayWithCoinBalanceIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldPayWithCoinBalance))
}

// PayWithCoinBalanceNotNil applies the NotNil predicate on the "pay_with_coin_balance" field.
func PayWithCoinBalanceNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldPayWithCoinBalance))
}

// SubscriptionIDEQ applies the EQ predicate on the "subscription_id" field.
func SubscriptionIDEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldSubscriptionID, v))
}

// SubscriptionIDNEQ applies the NEQ predicate on the "subscription_id" field.
func SubscriptionIDNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldSubscriptionID, v))
}

// SubscriptionIDIn applies the In predicate on the "subscription_id" field.
func SubscriptionIDIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDNotIn applies the NotIn predicate on the "subscription_id" field.
func SubscriptionIDNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDGT applies the GT predicate on the "subscription_id" field.
func SubscriptionIDGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldSubscriptionID, v))
}

// SubscriptionIDGTE applies the GTE predicate on the "subscription_id" field.
func SubscriptionIDGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldSubscriptionID, v))
}

// SubscriptionIDLT applies the LT predicate on the "subscription_id" field.
func SubscriptionIDLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldSubscriptionID, v))
}

// SubscriptionIDLTE applies the LTE predicate on the "subscription_id" field.
func SubscriptionIDLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldSubscriptionID, v))
}

// SubscriptionIDContains applies the Contains predicate on the "subscription_id" field.
func SubscriptionIDContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldSubscriptionID, v))
}

// SubscriptionIDHasPrefix applies the HasPrefix predicate on the "subscription_id" field.
func SubscriptionIDHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldSubscriptionID, v))
}

// SubscriptionIDHasSuffix applies the HasSuffix predicate on the "subscription_id" field.
func SubscriptionIDHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldSubscriptionID, v))
}

// SubscriptionIDIsNil applies the IsNil predicate on the "subscription_id" field.
func SubscriptionIDIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldSubscriptionID))
}

// SubscriptionIDNotNil applies the NotNil predicate on the "subscription_id" field.
func SubscriptionIDNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldSubscriptionID))
}

// SubscriptionIDEqualFold applies the EqualFold predicate on the "subscription_id" field.
func SubscriptionIDEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldSubscriptionID, v))
}

// SubscriptionIDContainsFold applies the ContainsFold predicate on the "subscription_id" field.
func SubscriptionIDContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldSubscriptionID, v))
}

// FiatPaymentChannelEQ applies the EQ predicate on the "fiat_payment_channel" field.
func FiatPaymentChannelEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldFiatPaymentChannel, v))
}

// FiatPaymentChannelNEQ applies the NEQ predicate on the "fiat_payment_channel" field.
func FiatPaymentChannelNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldFiatPaymentChannel, v))
}

// FiatPaymentChannelIn applies the In predicate on the "fiat_payment_channel" field.
func FiatPaymentChannelIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldFiatPaymentChannel, vs...))
}

// FiatPaymentChannelNotIn applies the NotIn predicate on the "fiat_payment_channel" field.
func FiatPaymentChannelNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldFiatPaymentChannel, vs...))
}

// FiatPaymentChannelGT applies the GT predicate on the "fiat_payment_channel" field.
func FiatPaymentChannelGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldFiatPaymentChannel, v))
}

// FiatPaymentChannelGTE applies the GTE predicate on the "fiat_payment_channel" field.
func FiatPaymentChannelGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldFiatPaymentChannel, v))
}

// FiatPaymentChannelLT applies the LT predicate on the "fiat_payment_channel" field.
func FiatPaymentChannelLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldFiatPaymentChannel, v))
}

// FiatPaymentChannelLTE applies the LTE predicate on the "fiat_payment_channel" field.
func FiatPaymentChannelLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldFiatPaymentChannel, v))
}

// FiatPaymentChannelContains applies the Contains predicate on the "fiat_payment_channel" field.
func FiatPaymentChannelContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldFiatPaymentChannel, v))
}

// FiatPaymentChannelHasPrefix applies the HasPrefix predicate on the "fiat_payment_channel" field.
func FiatPaymentChannelHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldFiatPaymentChannel, v))
}

// FiatPaymentChannelHasSuffix applies the HasSuffix predicate on the "fiat_payment_channel" field.
func FiatPaymentChannelHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldFiatPaymentChannel, v))
}

// FiatPaymentChannelIsNil applies the IsNil predicate on the "fiat_payment_channel" field.
func FiatPaymentChannelIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldFiatPaymentChannel))
}

// FiatPaymentChannelNotNil applies the NotNil predicate on the "fiat_payment_channel" field.
func FiatPaymentChannelNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldFiatPaymentChannel))
}

// FiatPaymentChannelEqualFold applies the EqualFold predicate on the "fiat_payment_channel" field.
func FiatPaymentChannelEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldFiatPaymentChannel, v))
}

// FiatPaymentChannelContainsFold applies the ContainsFold predicate on the "fiat_payment_channel" field.
func FiatPaymentChannelContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldFiatPaymentChannel, v))
}

// LastPaymentAtEQ applies the EQ predicate on the "last_payment_at" field.
func LastPaymentAtEQ(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldLastPaymentAt, v))
}

// LastPaymentAtNEQ applies the NEQ predicate on the "last_payment_at" field.
func LastPaymentAtNEQ(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldLastPaymentAt, v))
}

// LastPaymentAtIn applies the In predicate on the "last_payment_at" field.
func LastPaymentAtIn(vs ...uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldLastPaymentAt, vs...))
}

// LastPaymentAtNotIn applies the NotIn predicate on the "last_payment_at" field.
func LastPaymentAtNotIn(vs ...uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldLastPaymentAt, vs...))
}

// LastPaymentAtGT applies the GT predicate on the "last_payment_at" field.
func LastPaymentAtGT(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldLastPaymentAt, v))
}

// LastPaymentAtGTE applies the GTE predicate on the "last_payment_at" field.
func LastPaymentAtGTE(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldLastPaymentAt, v))
}

// LastPaymentAtLT applies the LT predicate on the "last_payment_at" field.
func LastPaymentAtLT(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldLastPaymentAt, v))
}

// LastPaymentAtLTE applies the LTE predicate on the "last_payment_at" field.
func LastPaymentAtLTE(v uint32) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldLastPaymentAt, v))
}

// LastPaymentAtIsNil applies the IsNil predicate on the "last_payment_at" field.
func LastPaymentAtIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldLastPaymentAt))
}

// LastPaymentAtNotNil applies the NotNil predicate on the "last_payment_at" field.
func LastPaymentAtNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldLastPaymentAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/agi/db/ent/generated/quota"
	"github.com/google/uuid"
)

// Quota is the model entity for the Quota schema.
type Quota struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Quota holds the value of the "quota" field.
	Quota uint32 `json:"quota,omitempty"`
	// ConsumedQuota holds the value of the "consumed_quota" field.
	ConsumedQuota uint32 `json:"consumed_quota,omitempty"`
	// ExpiredAt holds the value of the "expired_at" field.
	ExpiredAt    uint32 `json:"expired_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Quota) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case quota.FieldID, quota.FieldQuota, quota.FieldConsumedQuota, quota.FieldExpiredAt:
			values[i] = new(sql.NullInt64)
		case quota.FieldEntID, quota.FieldAppID, quota.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Quota fields.
func (q *Quota) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case quota.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			q.ID = uint32(value.Int64)
		case quota.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				q.EntID = *value
			}
		case quota.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				q.AppID = *value
			}
		case quota.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				q.UserID = *value
			}
		case quota.FieldQuota:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quota", values[i])
			} else if value.Valid {
				q.Quota = uint32(value.Int64)
			}
		case quota.FieldConsumedQuota:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field consumed_quota", values[i])
			} else if value.Valid {
				q.ConsumedQuota = uint32(value.Int64)
			}
		case quota.FieldExpiredAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expired_at", values[i])
			} else if value.Valid {
				q.ExpiredAt = uint32(value.Int64)
			}
		default:
			q.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Quota.
// This includes values selected through modifiers, order, etc.
func (q *Quota) Value(name string) (ent.Value, error) {
	return q.selectValues.Get(name)
}

// Update returns a builder for updating this Quota.
// Note that you need to call Quota.Unwrap() before calling this method if this Quota
// was returned from a transaction, and the transaction was committed or rolled back.
func (q *Quota) Update() *QuotaUpdateOne {
	return NewQuotaClient(q.config).UpdateOne(q)
}

// Unwrap unwraps the Quota entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (q *Quota) Unwrap() *Quota {
	_tx, ok := q.config.driver.(*txDriver)
	if !ok {
		panic("generated: Quota is not a transactional entity")
	}
	q.config.driver = _tx.drv
	return q
}

// String implements the fmt.Stringer.
func (q *Quota) String() string {
	var builder strings.Builder
	builder.WriteString("Quota(")
	builder.WriteString(fmt.Sprintf("id=%v, ", q.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", q.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", q.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", q.UserID))
	builder.WriteString(", ")
	builder.WriteString("quota=")
	builder.WriteString(fmt.Sprintf("%v", q.Quota))
	builder.WriteString(", ")
	builder.WriteString("consumed_quota=")
	builder.WriteString(fmt.Sprintf("%v", q.ConsumedQuota))
	builder.WriteString(", ")
	builder.WriteString("expired_at=")
	builder.WriteString(fmt.Sprintf("%v", q.ExpiredAt))
	builder.WriteByte(')')
	return builder.String()
}

// QuotaSlice is a parsable slice of Quota.
type QuotaSlice []*Quota

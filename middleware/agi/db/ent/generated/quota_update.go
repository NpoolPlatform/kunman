// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/agi/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/agi/db/ent/generated/quota"
	"github.com/google/uuid"
)

// QuotaUpdate is the builder for updating Quota entities.
type QuotaUpdate struct {
	config
	hooks     []Hook
	mutation  *QuotaMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the QuotaUpdate builder.
func (qu *QuotaUpdate) Where(ps ...predicate.Quota) *QuotaUpdate {
	qu.mutation.Where(ps...)
	return qu
}

// SetEntID sets the "ent_id" field.
func (qu *QuotaUpdate) SetEntID(u uuid.UUID) *QuotaUpdate {
	qu.mutation.SetEntID(u)
	return qu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (qu *QuotaUpdate) SetNillableEntID(u *uuid.UUID) *QuotaUpdate {
	if u != nil {
		qu.SetEntID(*u)
	}
	return qu
}

// SetAppID sets the "app_id" field.
func (qu *QuotaUpdate) SetAppID(u uuid.UUID) *QuotaUpdate {
	qu.mutation.SetAppID(u)
	return qu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (qu *QuotaUpdate) SetNillableAppID(u *uuid.UUID) *QuotaUpdate {
	if u != nil {
		qu.SetAppID(*u)
	}
	return qu
}

// ClearAppID clears the value of the "app_id" field.
func (qu *QuotaUpdate) ClearAppID() *QuotaUpdate {
	qu.mutation.ClearAppID()
	return qu
}

// SetUserID sets the "user_id" field.
func (qu *QuotaUpdate) SetUserID(u uuid.UUID) *QuotaUpdate {
	qu.mutation.SetUserID(u)
	return qu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (qu *QuotaUpdate) SetNillableUserID(u *uuid.UUID) *QuotaUpdate {
	if u != nil {
		qu.SetUserID(*u)
	}
	return qu
}

// ClearUserID clears the value of the "user_id" field.
func (qu *QuotaUpdate) ClearUserID() *QuotaUpdate {
	qu.mutation.ClearUserID()
	return qu
}

// SetQuota sets the "quota" field.
func (qu *QuotaUpdate) SetQuota(u uint32) *QuotaUpdate {
	qu.mutation.ResetQuota()
	qu.mutation.SetQuota(u)
	return qu
}

// SetNillableQuota sets the "quota" field if the given value is not nil.
func (qu *QuotaUpdate) SetNillableQuota(u *uint32) *QuotaUpdate {
	if u != nil {
		qu.SetQuota(*u)
	}
	return qu
}

// AddQuota adds u to the "quota" field.
func (qu *QuotaUpdate) AddQuota(u int32) *QuotaUpdate {
	qu.mutation.AddQuota(u)
	return qu
}

// ClearQuota clears the value of the "quota" field.
func (qu *QuotaUpdate) ClearQuota() *QuotaUpdate {
	qu.mutation.ClearQuota()
	return qu
}

// SetConsumedQuota sets the "consumed_quota" field.
func (qu *QuotaUpdate) SetConsumedQuota(u uint32) *QuotaUpdate {
	qu.mutation.ResetConsumedQuota()
	qu.mutation.SetConsumedQuota(u)
	return qu
}

// SetNillableConsumedQuota sets the "consumed_quota" field if the given value is not nil.
func (qu *QuotaUpdate) SetNillableConsumedQuota(u *uint32) *QuotaUpdate {
	if u != nil {
		qu.SetConsumedQuota(*u)
	}
	return qu
}

// AddConsumedQuota adds u to the "consumed_quota" field.
func (qu *QuotaUpdate) AddConsumedQuota(u int32) *QuotaUpdate {
	qu.mutation.AddConsumedQuota(u)
	return qu
}

// ClearConsumedQuota clears the value of the "consumed_quota" field.
func (qu *QuotaUpdate) ClearConsumedQuota() *QuotaUpdate {
	qu.mutation.ClearConsumedQuota()
	return qu
}

// SetExpiredAt sets the "expired_at" field.
func (qu *QuotaUpdate) SetExpiredAt(u uint32) *QuotaUpdate {
	qu.mutation.ResetExpiredAt()
	qu.mutation.SetExpiredAt(u)
	return qu
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (qu *QuotaUpdate) SetNillableExpiredAt(u *uint32) *QuotaUpdate {
	if u != nil {
		qu.SetExpiredAt(*u)
	}
	return qu
}

// AddExpiredAt adds u to the "expired_at" field.
func (qu *QuotaUpdate) AddExpiredAt(u int32) *QuotaUpdate {
	qu.mutation.AddExpiredAt(u)
	return qu
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (qu *QuotaUpdate) ClearExpiredAt() *QuotaUpdate {
	qu.mutation.ClearExpiredAt()
	return qu
}

// Mutation returns the QuotaMutation object of the builder.
func (qu *QuotaUpdate) Mutation() *QuotaMutation {
	return qu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qu *QuotaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, qu.sqlSave, qu.mutation, qu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QuotaUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QuotaUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QuotaUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (qu *QuotaUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *QuotaUpdate {
	qu.modifiers = append(qu.modifiers, modifiers...)
	return qu
}

func (qu *QuotaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(quota.Table, quota.Columns, sqlgraph.NewFieldSpec(quota.FieldID, field.TypeUint32))
	if ps := qu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.EntID(); ok {
		_spec.SetField(quota.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := qu.mutation.AppID(); ok {
		_spec.SetField(quota.FieldAppID, field.TypeUUID, value)
	}
	if qu.mutation.AppIDCleared() {
		_spec.ClearField(quota.FieldAppID, field.TypeUUID)
	}
	if value, ok := qu.mutation.UserID(); ok {
		_spec.SetField(quota.FieldUserID, field.TypeUUID, value)
	}
	if qu.mutation.UserIDCleared() {
		_spec.ClearField(quota.FieldUserID, field.TypeUUID)
	}
	if value, ok := qu.mutation.Quota(); ok {
		_spec.SetField(quota.FieldQuota, field.TypeUint32, value)
	}
	if value, ok := qu.mutation.AddedQuota(); ok {
		_spec.AddField(quota.FieldQuota, field.TypeUint32, value)
	}
	if qu.mutation.QuotaCleared() {
		_spec.ClearField(quota.FieldQuota, field.TypeUint32)
	}
	if value, ok := qu.mutation.ConsumedQuota(); ok {
		_spec.SetField(quota.FieldConsumedQuota, field.TypeUint32, value)
	}
	if value, ok := qu.mutation.AddedConsumedQuota(); ok {
		_spec.AddField(quota.FieldConsumedQuota, field.TypeUint32, value)
	}
	if qu.mutation.ConsumedQuotaCleared() {
		_spec.ClearField(quota.FieldConsumedQuota, field.TypeUint32)
	}
	if value, ok := qu.mutation.ExpiredAt(); ok {
		_spec.SetField(quota.FieldExpiredAt, field.TypeUint32, value)
	}
	if value, ok := qu.mutation.AddedExpiredAt(); ok {
		_spec.AddField(quota.FieldExpiredAt, field.TypeUint32, value)
	}
	if qu.mutation.ExpiredAtCleared() {
		_spec.ClearField(quota.FieldExpiredAt, field.TypeUint32)
	}
	_spec.AddModifiers(qu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{quota.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qu.mutation.done = true
	return n, nil
}

// QuotaUpdateOne is the builder for updating a single Quota entity.
type QuotaUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *QuotaMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (quo *QuotaUpdateOne) SetEntID(u uuid.UUID) *QuotaUpdateOne {
	quo.mutation.SetEntID(u)
	return quo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (quo *QuotaUpdateOne) SetNillableEntID(u *uuid.UUID) *QuotaUpdateOne {
	if u != nil {
		quo.SetEntID(*u)
	}
	return quo
}

// SetAppID sets the "app_id" field.
func (quo *QuotaUpdateOne) SetAppID(u uuid.UUID) *QuotaUpdateOne {
	quo.mutation.SetAppID(u)
	return quo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (quo *QuotaUpdateOne) SetNillableAppID(u *uuid.UUID) *QuotaUpdateOne {
	if u != nil {
		quo.SetAppID(*u)
	}
	return quo
}

// ClearAppID clears the value of the "app_id" field.
func (quo *QuotaUpdateOne) ClearAppID() *QuotaUpdateOne {
	quo.mutation.ClearAppID()
	return quo
}

// SetUserID sets the "user_id" field.
func (quo *QuotaUpdateOne) SetUserID(u uuid.UUID) *QuotaUpdateOne {
	quo.mutation.SetUserID(u)
	return quo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (quo *QuotaUpdateOne) SetNillableUserID(u *uuid.UUID) *QuotaUpdateOne {
	if u != nil {
		quo.SetUserID(*u)
	}
	return quo
}

// ClearUserID clears the value of the "user_id" field.
func (quo *QuotaUpdateOne) ClearUserID() *QuotaUpdateOne {
	quo.mutation.ClearUserID()
	return quo
}

// SetQuota sets the "quota" field.
func (quo *QuotaUpdateOne) SetQuota(u uint32) *QuotaUpdateOne {
	quo.mutation.ResetQuota()
	quo.mutation.SetQuota(u)
	return quo
}

// SetNillableQuota sets the "quota" field if the given value is not nil.
func (quo *QuotaUpdateOne) SetNillableQuota(u *uint32) *QuotaUpdateOne {
	if u != nil {
		quo.SetQuota(*u)
	}
	return quo
}

// AddQuota adds u to the "quota" field.
func (quo *QuotaUpdateOne) AddQuota(u int32) *QuotaUpdateOne {
	quo.mutation.AddQuota(u)
	return quo
}

// ClearQuota clears the value of the "quota" field.
func (quo *QuotaUpdateOne) ClearQuota() *QuotaUpdateOne {
	quo.mutation.ClearQuota()
	return quo
}

// SetConsumedQuota sets the "consumed_quota" field.
func (quo *QuotaUpdateOne) SetConsumedQuota(u uint32) *QuotaUpdateOne {
	quo.mutation.ResetConsumedQuota()
	quo.mutation.SetConsumedQuota(u)
	return quo
}

// SetNillableConsumedQuota sets the "consumed_quota" field if the given value is not nil.
func (quo *QuotaUpdateOne) SetNillableConsumedQuota(u *uint32) *QuotaUpdateOne {
	if u != nil {
		quo.SetConsumedQuota(*u)
	}
	return quo
}

// AddConsumedQuota adds u to the "consumed_quota" field.
func (quo *QuotaUpdateOne) AddConsumedQuota(u int32) *QuotaUpdateOne {
	quo.mutation.AddConsumedQuota(u)
	return quo
}

// ClearConsumedQuota clears the value of the "consumed_quota" field.
func (quo *QuotaUpdateOne) ClearConsumedQuota() *QuotaUpdateOne {
	quo.mutation.ClearConsumedQuota()
	return quo
}

// SetExpiredAt sets the "expired_at" field.
func (quo *QuotaUpdateOne) SetExpiredAt(u uint32) *QuotaUpdateOne {
	quo.mutation.ResetExpiredAt()
	quo.mutation.SetExpiredAt(u)
	return quo
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (quo *QuotaUpdateOne) SetNillableExpiredAt(u *uint32) *QuotaUpdateOne {
	if u != nil {
		quo.SetExpiredAt(*u)
	}
	return quo
}

// AddExpiredAt adds u to the "expired_at" field.
func (quo *QuotaUpdateOne) AddExpiredAt(u int32) *QuotaUpdateOne {
	quo.mutation.AddExpiredAt(u)
	return quo
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (quo *QuotaUpdateOne) ClearExpiredAt() *QuotaUpdateOne {
	quo.mutation.ClearExpiredAt()
	return quo
}

// Mutation returns the QuotaMutation object of the builder.
func (quo *QuotaUpdateOne) Mutation() *QuotaMutation {
	return quo.mutation
}

// Where appends a list predicates to the QuotaUpdate builder.
func (quo *QuotaUpdateOne) Where(ps ...predicate.Quota) *QuotaUpdateOne {
	quo.mutation.Where(ps...)
	return quo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (quo *QuotaUpdateOne) Select(field string, fields ...string) *QuotaUpdateOne {
	quo.fields = append([]string{field}, fields...)
	return quo
}

// Save executes the query and returns the updated Quota entity.
func (quo *QuotaUpdateOne) Save(ctx context.Context) (*Quota, error) {
	return withHooks(ctx, quo.sqlSave, quo.mutation, quo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QuotaUpdateOne) SaveX(ctx context.Context) *Quota {
	node, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (quo *QuotaUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QuotaUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (quo *QuotaUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *QuotaUpdateOne {
	quo.modifiers = append(quo.modifiers, modifiers...)
	return quo
}

func (quo *QuotaUpdateOne) sqlSave(ctx context.Context) (_node *Quota, err error) {
	_spec := sqlgraph.NewUpdateSpec(quota.Table, quota.Columns, sqlgraph.NewFieldSpec(quota.FieldID, field.TypeUint32))
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Quota.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := quo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, quota.FieldID)
		for _, f := range fields {
			if !quota.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != quota.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := quo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := quo.mutation.EntID(); ok {
		_spec.SetField(quota.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := quo.mutation.AppID(); ok {
		_spec.SetField(quota.FieldAppID, field.TypeUUID, value)
	}
	if quo.mutation.AppIDCleared() {
		_spec.ClearField(quota.FieldAppID, field.TypeUUID)
	}
	if value, ok := quo.mutation.UserID(); ok {
		_spec.SetField(quota.FieldUserID, field.TypeUUID, value)
	}
	if quo.mutation.UserIDCleared() {
		_spec.ClearField(quota.FieldUserID, field.TypeUUID)
	}
	if value, ok := quo.mutation.Quota(); ok {
		_spec.SetField(quota.FieldQuota, field.TypeUint32, value)
	}
	if value, ok := quo.mutation.AddedQuota(); ok {
		_spec.AddField(quota.FieldQuota, field.TypeUint32, value)
	}
	if quo.mutation.QuotaCleared() {
		_spec.ClearField(quota.FieldQuota, field.TypeUint32)
	}
	if value, ok := quo.mutation.ConsumedQuota(); ok {
		_spec.SetField(quota.FieldConsumedQuota, field.TypeUint32, value)
	}
	if value, ok := quo.mutation.AddedConsumedQuota(); ok {
		_spec.AddField(quota.FieldConsumedQuota, field.TypeUint32, value)
	}
	if quo.mutation.ConsumedQuotaCleared() {
		_spec.ClearField(quota.FieldConsumedQuota, field.TypeUint32)
	}
	if value, ok := quo.mutation.ExpiredAt(); ok {
		_spec.SetField(quota.FieldExpiredAt, field.TypeUint32, value)
	}
	if value, ok := quo.mutation.AddedExpiredAt(); ok {
		_spec.AddField(quota.FieldExpiredAt, field.TypeUint32, value)
	}
	if quo.mutation.ExpiredAtCleared() {
		_spec.ClearField(quota.FieldExpiredAt, field.TypeUint32)
	}
	_spec.AddModifiers(quo.modifiers...)
	_node = &Quota{config: quo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{quota.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	quo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/agi/db/ent/generated/capacity"
	"github.com/NpoolPlatform/kunman/middleware/agi/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// CapacityUpdate is the builder for updating Capacity entities.
type CapacityUpdate struct {
	config
	hooks     []Hook
	mutation  *CapacityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CapacityUpdate builder.
func (cu *CapacityUpdate) Where(ps ...predicate.Capacity) *CapacityUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetEntID sets the "ent_id" field.
func (cu *CapacityUpdate) SetEntID(u uuid.UUID) *CapacityUpdate {
	cu.mutation.SetEntID(u)
	return cu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cu *CapacityUpdate) SetNillableEntID(u *uuid.UUID) *CapacityUpdate {
	if u != nil {
		cu.SetEntID(*u)
	}
	return cu
}

// SetAppGoodID sets the "app_good_id" field.
func (cu *CapacityUpdate) SetAppGoodID(u uuid.UUID) *CapacityUpdate {
	cu.mutation.SetAppGoodID(u)
	return cu
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (cu *CapacityUpdate) SetNillableAppGoodID(u *uuid.UUID) *CapacityUpdate {
	if u != nil {
		cu.SetAppGoodID(*u)
	}
	return cu
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (cu *CapacityUpdate) ClearAppGoodID() *CapacityUpdate {
	cu.mutation.ClearAppGoodID()
	return cu
}

// SetCapacityKey sets the "capacity_key" field.
func (cu *CapacityUpdate) SetCapacityKey(s string) *CapacityUpdate {
	cu.mutation.SetCapacityKey(s)
	return cu
}

// SetNillableCapacityKey sets the "capacity_key" field if the given value is not nil.
func (cu *CapacityUpdate) SetNillableCapacityKey(s *string) *CapacityUpdate {
	if s != nil {
		cu.SetCapacityKey(*s)
	}
	return cu
}

// ClearCapacityKey clears the value of the "capacity_key" field.
func (cu *CapacityUpdate) ClearCapacityKey() *CapacityUpdate {
	cu.mutation.ClearCapacityKey()
	return cu
}

// SetValue sets the "value" field.
func (cu *CapacityUpdate) SetValue(s string) *CapacityUpdate {
	cu.mutation.SetValue(s)
	return cu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (cu *CapacityUpdate) SetNillableValue(s *string) *CapacityUpdate {
	if s != nil {
		cu.SetValue(*s)
	}
	return cu
}

// ClearValue clears the value of the "value" field.
func (cu *CapacityUpdate) ClearValue() *CapacityUpdate {
	cu.mutation.ClearValue()
	return cu
}

// Mutation returns the CapacityMutation object of the builder.
func (cu *CapacityUpdate) Mutation() *CapacityMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CapacityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CapacityUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CapacityUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CapacityUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CapacityUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CapacityUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CapacityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(capacity.Table, capacity.Columns, sqlgraph.NewFieldSpec(capacity.FieldID, field.TypeUint32))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.EntID(); ok {
		_spec.SetField(capacity.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := cu.mutation.AppGoodID(); ok {
		_spec.SetField(capacity.FieldAppGoodID, field.TypeUUID, value)
	}
	if cu.mutation.AppGoodIDCleared() {
		_spec.ClearField(capacity.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := cu.mutation.CapacityKey(); ok {
		_spec.SetField(capacity.FieldCapacityKey, field.TypeString, value)
	}
	if cu.mutation.CapacityKeyCleared() {
		_spec.ClearField(capacity.FieldCapacityKey, field.TypeString)
	}
	if value, ok := cu.mutation.Value(); ok {
		_spec.SetField(capacity.FieldValue, field.TypeString, value)
	}
	if cu.mutation.ValueCleared() {
		_spec.ClearField(capacity.FieldValue, field.TypeString)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{capacity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CapacityUpdateOne is the builder for updating a single Capacity entity.
type CapacityUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CapacityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (cuo *CapacityUpdateOne) SetEntID(u uuid.UUID) *CapacityUpdateOne {
	cuo.mutation.SetEntID(u)
	return cuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cuo *CapacityUpdateOne) SetNillableEntID(u *uuid.UUID) *CapacityUpdateOne {
	if u != nil {
		cuo.SetEntID(*u)
	}
	return cuo
}

// SetAppGoodID sets the "app_good_id" field.
func (cuo *CapacityUpdateOne) SetAppGoodID(u uuid.UUID) *CapacityUpdateOne {
	cuo.mutation.SetAppGoodID(u)
	return cuo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (cuo *CapacityUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *CapacityUpdateOne {
	if u != nil {
		cuo.SetAppGoodID(*u)
	}
	return cuo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (cuo *CapacityUpdateOne) ClearAppGoodID() *CapacityUpdateOne {
	cuo.mutation.ClearAppGoodID()
	return cuo
}

// SetCapacityKey sets the "capacity_key" field.
func (cuo *CapacityUpdateOne) SetCapacityKey(s string) *CapacityUpdateOne {
	cuo.mutation.SetCapacityKey(s)
	return cuo
}

// SetNillableCapacityKey sets the "capacity_key" field if the given value is not nil.
func (cuo *CapacityUpdateOne) SetNillableCapacityKey(s *string) *CapacityUpdateOne {
	if s != nil {
		cuo.SetCapacityKey(*s)
	}
	return cuo
}

// ClearCapacityKey clears the value of the "capacity_key" field.
func (cuo *CapacityUpdateOne) ClearCapacityKey() *CapacityUpdateOne {
	cuo.mutation.ClearCapacityKey()
	return cuo
}

// SetValue sets the "value" field.
func (cuo *CapacityUpdateOne) SetValue(s string) *CapacityUpdateOne {
	cuo.mutation.SetValue(s)
	return cuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (cuo *CapacityUpdateOne) SetNillableValue(s *string) *CapacityUpdateOne {
	if s != nil {
		cuo.SetValue(*s)
	}
	return cuo
}

// ClearValue clears the value of the "value" field.
func (cuo *CapacityUpdateOne) ClearValue() *CapacityUpdateOne {
	cuo.mutation.ClearValue()
	return cuo
}

// Mutation returns the CapacityMutation object of the builder.
func (cuo *CapacityUpdateOne) Mutation() *CapacityMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CapacityUpdate builder.
func (cuo *CapacityUpdateOne) Where(ps ...predicate.Capacity) *CapacityUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CapacityUpdateOne) Select(field string, fields ...string) *CapacityUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Capacity entity.
func (cuo *CapacityUpdateOne) Save(ctx context.Context) (*Capacity, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CapacityUpdateOne) SaveX(ctx context.Context) *Capacity {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CapacityUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CapacityUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CapacityUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CapacityUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CapacityUpdateOne) sqlSave(ctx context.Context) (_node *Capacity, err error) {
	_spec := sqlgraph.NewUpdateSpec(capacity.Table, capacity.Columns, sqlgraph.NewFieldSpec(capacity.FieldID, field.TypeUint32))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Capacity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, capacity.FieldID)
		for _, f := range fields {
			if !capacity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != capacity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.EntID(); ok {
		_spec.SetField(capacity.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := cuo.mutation.AppGoodID(); ok {
		_spec.SetField(capacity.FieldAppGoodID, field.TypeUUID, value)
	}
	if cuo.mutation.AppGoodIDCleared() {
		_spec.ClearField(capacity.FieldAppGoodID, field.TypeUUID)
	}
	if value, ok := cuo.mutation.CapacityKey(); ok {
		_spec.SetField(capacity.FieldCapacityKey, field.TypeString, value)
	}
	if cuo.mutation.CapacityKeyCleared() {
		_spec.ClearField(capacity.FieldCapacityKey, field.TypeString)
	}
	if value, ok := cuo.mutation.Value(); ok {
		_spec.SetField(capacity.FieldValue, field.TypeString, value)
	}
	if cuo.mutation.ValueCleared() {
		_spec.ClearField(capacity.FieldValue, field.TypeString)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Capacity{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{capacity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/agi/db/ent/generated/capacity"
	"github.com/NpoolPlatform/kunman/middleware/agi/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/agi/db/ent/generated/quota"
	"github.com/NpoolPlatform/kunman/middleware/agi/db/ent/generated/subscription"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCapacity     = "Capacity"
	TypeQuota        = "Quota"
	TypeSubscription = "Subscription"
)

// CapacityMutation represents an operation that mutates the Capacity nodes in the graph.
type CapacityMutation struct {
	config
	op            Op
	typ           string
	id            *uint32
	ent_id        *uuid.UUID
	app_good_id   *uuid.UUID
	capacity_key  *string
	value         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Capacity, error)
	predicates    []predicate.Capacity
}

var _ ent.Mutation = (*CapacityMutation)(nil)

// capacityOption allows management of the mutation configuration using functional options.
type capacityOption func(*CapacityMutation)

// newCapacityMutation creates new mutation for the Capacity entity.
func newCapacityMutation(c config, op Op, opts ...capacityOption) *CapacityMutation {
	m := &CapacityMutation{
		config:        c,
		op:            op,
		typ:           TypeCapacity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCapacityID sets the ID field of the mutation.
func withCapacityID(id uint32) capacityOption {
	return func(m *CapacityMutation) {
		var (
			err   error
			once  sync.Once
			value *Capacity
		)
		m.oldValue = func(ctx context.Context) (*Capacity, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Capacity.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCapacity sets the old Capacity of the mutation.
func withCapacity(node *Capacity) capacityOption {
	return func(m *CapacityMutation) {
		m.oldValue = func(context.Context) (*Capacity, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CapacityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CapacityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Capacity entities.
func (m *CapacityMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CapacityMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CapacityMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Capacity.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEntID sets the "ent_id" field.
func (m *CapacityMutation) SetEntID(u uuid.UUID) {
	m.ent_id = &u
}

// EntID returns the value of the "ent_id" field in the mutation.
func (m *CapacityMutation) EntID() (r uuid.UUID, exists bool) {
	v := m.ent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEntID returns the old "ent_id" field's value of the Capacity entity.
// If the Capacity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CapacityMutation) OldEntID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntID: %w", err)
	}
	return oldValue.EntID, nil
}

// ResetEntID resets all changes to the "ent_id" field.
func (m *CapacityMutation) ResetEntID() {
	m.ent_id = nil
}

// SetAppGoodID sets the "app_good_id" field.
func (m *CapacityMutation) SetAppGoodID(u uuid.UUID) {
	m.app_good_id = &u
}

// AppGoodID returns the value of the "app_good_id" field in the mutation.
func (m *CapacityMutation) AppGoodID() (r uuid.UUID, exists bool) {
	v := m.app_good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppGoodID returns the old "app_good_id" field's value of the Capacity entity.
// If the Capacity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CapacityMutation) OldAppGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppGoodID: %w", err)
	}
	return oldValue.AppGoodID, nil
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (m *CapacityMutation) ClearAppGoodID() {
	m.app_good_id = nil
	m.clearedFields[capacity.FieldAppGoodID] = struct{}{}
}

// AppGoodIDCleared returns if the "app_good_id" field was cleared in this mutation.
func (m *CapacityMutation) AppGoodIDCleared() bool {
	_, ok := m.clearedFields[capacity.FieldAppGoodID]
	return ok
}

// ResetAppGoodID resets all changes to the "app_good_id" field.
func (m *CapacityMutation) ResetAppGoodID() {
	m.app_good_id = nil
	delete(m.clearedFields, capacity.FieldAppGoodID)
}

// SetCapacityKey sets the "capacity_key" field.
func (m *CapacityMutation) SetCapacityKey(s string) {
	m.capacity_key = &s
}

// CapacityKey returns the value of the "capacity_key" field in the mutation.
func (m *CapacityMutation) CapacityKey() (r string, exists bool) {
	v := m.capacity_key
	if v == nil {
		return
	}
	return *v, true
}

// OldCapacityKey returns the old "capacity_key" field's value of the Capacity entity.
// If the Capacity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CapacityMutation) OldCapacityKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCapacityKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCapacityKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCapacityKey: %w", err)
	}
	return oldValue.CapacityKey, nil
}

// ClearCapacityKey clears the value of the "capacity_key" field.
func (m *CapacityMutation) ClearCapacityKey() {
	m.capacity_key = nil
	m.clearedFields[capacity.FieldCapacityKey] = struct{}{}
}

// CapacityKeyCleared returns if the "capacity_key" field was cleared in this mutation.
func (m *CapacityMutation) CapacityKeyCleared() bool {
	_, ok := m.clearedFields[capacity.FieldCapacityKey]
	return ok
}

// ResetCapacityKey resets all changes to the "capacity_key" field.
func (m *CapacityMutation) ResetCapacityKey() {
	m.capacity_key = nil
	delete(m.clearedFields, capacity.FieldCapacityKey)
}

// SetValue sets the "value" field.
func (m *CapacityMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *CapacityMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Capacity entity.
// If the Capacity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CapacityMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ClearValue clears the value of the "value" field.
func (m *CapacityMutation) ClearValue() {
	m.value = nil
	m.clearedFields[capacity.FieldValue] = struct{}{}
}

// ValueCleared returns if the "value" field was cleared in this mutation.
func (m *CapacityMutation) ValueCleared() bool {
	_, ok := m.clearedFields[capacity.FieldValue]
	return ok
}

// ResetValue resets all changes to the "value" field.
func (m *CapacityMutation) ResetValue() {
	m.value = nil
	delete(m.clearedFields, capacity.FieldValue)
}

// Where appends a list predicates to the CapacityMutation builder.
func (m *CapacityMutation) Where(ps ...predicate.Capacity) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CapacityMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CapacityMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Capacity, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CapacityMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CapacityMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Capacity).
func (m *CapacityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CapacityMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.ent_id != nil {
		fields = append(fields, capacity.FieldEntID)
	}
	if m.app_good_id != nil {
		fields = append(fields, capacity.FieldAppGoodID)
	}
	if m.capacity_key != nil {
		fields = append(fields, capacity.FieldCapacityKey)
	}
	if m.value != nil {
		fields = append(fields, capacity.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CapacityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case capacity.FieldEntID:
		return m.EntID()
	case capacity.FieldAppGoodID:
		return m.AppGoodID()
	case capacity.FieldCapacityKey:
		return m.CapacityKey()
	case capacity.FieldValue:
		return m.Value()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CapacityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case capacity.FieldEntID:
		return m.OldEntID(ctx)
	case capacity.FieldAppGoodID:
		return m.OldAppGoodID(ctx)
	case capacity.FieldCapacityKey:
		return m.OldCapacityKey(ctx)
	case capacity.FieldValue:
		return m.OldValue(ctx)
	}
	return nil, fmt.Errorf("unknown Capacity field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CapacityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case capacity.FieldEntID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntID(v)
		return nil
	case capacity.FieldAppGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppGoodID(v)
		return nil
	case capacity.FieldCapacityKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCapacityKey(v)
		return nil
	case capacity.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown Capacity field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CapacityMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CapacityMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CapacityMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Capacity numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CapacityMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(capacity.FieldAppGoodID) {
		fields = append(fields, capacity.FieldAppGoodID)
	}
	if m.FieldCleared(capacity.FieldCapacityKey) {
		fields = append(fields, capacity.FieldCapacityKey)
	}
	if m.FieldCleared(capacity.FieldValue) {
		fields = append(fields, capacity.FieldValue)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CapacityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CapacityMutation) ClearField(name string) error {
	switch name {
	case capacity.FieldAppGoodID:
		m.ClearAppGoodID()
		return nil
	case capacity.FieldCapacityKey:
		m.ClearCapacityKey()
		return nil
	case capacity.FieldValue:
		m.ClearValue()
		return nil
	}
	return fmt.Errorf("unknown Capacity nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CapacityMutation) ResetField(name string) error {
	switch name {
	case capacity.FieldEntID:
		m.ResetEntID()
		return nil
	case capacity.FieldAppGoodID:
		m.ResetAppGoodID()
		return nil
	case capacity.FieldCapacityKey:
		m.ResetCapacityKey()
		return nil
	case capacity.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown Capacity field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CapacityMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CapacityMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CapacityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CapacityMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CapacityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CapacityMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CapacityMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Capacity unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CapacityMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Capacity edge %s", name)
}

// QuotaMutation represents an operation that mutates the Quota nodes in the graph.
type QuotaMutation struct {
	config
	op                Op
	typ               string
	id                *uint32
	ent_id            *uuid.UUID
	created_at        *uint32
	addcreated_at     *int32
	updated_at        *uint32
	addupdated_at     *int32
	deleted_at        *uint32
	adddeleted_at     *int32
	app_id            *uuid.UUID
	user_id           *uuid.UUID
	quota             *uint32
	addquota          *int32
	consumed_quota    *uint32
	addconsumed_quota *int32
	expired_at        *uint32
	addexpired_at     *int32
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Quota, error)
	predicates        []predicate.Quota
}

var _ ent.Mutation = (*QuotaMutation)(nil)

// quotaOption allows management of the mutation configuration using functional options.
type quotaOption func(*QuotaMutation)

// newQuotaMutation creates new mutation for the Quota entity.
func newQuotaMutation(c config, op Op, opts ...quotaOption) *QuotaMutation {
	m := &QuotaMutation{
		config:        c,
		op:            op,
		typ:           TypeQuota,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQuotaID sets the ID field of the mutation.
func withQuotaID(id uint32) quotaOption {
	return func(m *QuotaMutation) {
		var (
			err   error
			once  sync.Once
			value *Quota
		)
		m.oldValue = func(ctx context.Context) (*Quota, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Quota.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQuota sets the old Quota of the mutation.
func withQuota(node *Quota) quotaOption {
	return func(m *QuotaMutation) {
		m.oldValue = func(context.Context) (*Quota, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QuotaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QuotaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Quota entities.
func (m *QuotaMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QuotaMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QuotaMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Quota.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEntID sets the "ent_id" field.
func (m *QuotaMutation) SetEntID(u uuid.UUID) {
	m.ent_id = &u
}

// EntID returns the value of the "ent_id" field in the mutation.
func (m *QuotaMutation) EntID() (r uuid.UUID, exists bool) {
	v := m.ent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEntID returns the old "ent_id" field's value of the Quota entity.
// If the Quota object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuotaMutation) OldEntID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntID: %w", err)
	}
	return oldValue.EntID, nil
}

// ResetEntID resets all changes to the "ent_id" field.
func (m *QuotaMutation) ResetEntID() {
	m.ent_id = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *QuotaMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *QuotaMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Quota entity.
// If the Quota object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuotaMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *QuotaMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *QuotaMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *QuotaMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *QuotaMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *QuotaMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Quota entity.
// If the Quota object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuotaMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *QuotaMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *QuotaMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *QuotaMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *QuotaMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *QuotaMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Quota entity.
// If the Quota object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuotaMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *QuotaMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *QuotaMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *QuotaMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *QuotaMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *QuotaMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the Quota entity.
// If the Quota object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuotaMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *QuotaMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[quota.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *QuotaMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[quota.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *QuotaMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, quota.FieldAppID)
}

// SetUserID sets the "user_id" field.
func (m *QuotaMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *QuotaMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Quota entity.
// If the Quota object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuotaMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *QuotaMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[quota.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *QuotaMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[quota.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *QuotaMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, quota.FieldUserID)
}

// SetQuota sets the "quota" field.
func (m *QuotaMutation) SetQuota(u uint32) {
	m.quota = &u
	m.addquota = nil
}

// Quota returns the value of the "quota" field in the mutation.
func (m *QuotaMutation) Quota() (r uint32, exists bool) {
	v := m.quota
	if v == nil {
		return
	}
	return *v, true
}

// OldQuota returns the old "quota" field's value of the Quota entity.
// If the Quota object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuotaMutation) OldQuota(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuota is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuota requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuota: %w", err)
	}
	return oldValue.Quota, nil
}

// AddQuota adds u to the "quota" field.
func (m *QuotaMutation) AddQuota(u int32) {
	if m.addquota != nil {
		*m.addquota += u
	} else {
		m.addquota = &u
	}
}

// AddedQuota returns the value that was added to the "quota" field in this mutation.
func (m *QuotaMutation) AddedQuota() (r int32, exists bool) {
	v := m.addquota
	if v == nil {
		return
	}
	return *v, true
}

// ClearQuota clears the value of the "quota" field.
func (m *QuotaMutation) ClearQuota() {
	m.quota = nil
	m.addquota = nil
	m.clearedFields[quota.FieldQuota] = struct{}{}
}

// QuotaCleared returns if the "quota" field was cleared in this mutation.
func (m *QuotaMutation) QuotaCleared() bool {
	_, ok := m.clearedFields[quota.FieldQuota]
	return ok
}

// ResetQuota resets all changes to the "quota" field.
func (m *QuotaMutation) ResetQuota() {
	m.quota = nil
	m.addquota = nil
	delete(m.clearedFields, quota.FieldQuota)
}

// SetConsumedQuota sets the "consumed_quota" field.
func (m *QuotaMutation) SetConsumedQuota(u uint32) {
	m.consumed_quota = &u
	m.addconsumed_quota = nil
}

// ConsumedQuota returns the value of the "consumed_quota" field in the mutation.
func (m *QuotaMutation) ConsumedQuota() (r uint32, exists bool) {
	v := m.consumed_quota
	if v == nil {
		return
	}
	return *v, true
}

// OldConsumedQuota returns the old "consumed_quota" field's value of the Quota entity.
// If the Quota object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuotaMutation) OldConsumedQuota(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConsumedQuota is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConsumedQuota requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConsumedQuota: %w", err)
	}
	return oldValue.ConsumedQuota, nil
}

// AddConsumedQuota adds u to the "consumed_quota" field.
func (m *QuotaMutation) AddConsumedQuota(u int32) {
	if m.addconsumed_quota != nil {
		*m.addconsumed_quota += u
	} else {
		m.addconsumed_quota = &u
	}
}

// AddedConsumedQuota returns the value that was added to the "consumed_quota" field in this mutation.
func (m *QuotaMutation) AddedConsumedQuota() (r int32, exists bool) {
	v := m.addconsumed_quota
	if v == nil {
		return
	}
	return *v, true
}

// ClearConsumedQuota clears the value of the "consumed_quota" field.
func (m *QuotaMutation) ClearConsumedQuota() {
	m.consumed_quota = nil
	m.addconsumed_quota = nil
	m.clearedFields[quota.FieldConsumedQuota] = struct{}{}
}

// ConsumedQuotaCleared returns if the "consumed_quota" field was cleared in this mutation.
func (m *QuotaMutation) ConsumedQuotaCleared() bool {
	_, ok := m.clearedFields[quota.FieldConsumedQuota]
	return ok
}

// ResetConsumedQuota resets all changes to the "consumed_quota" field.
func (m *QuotaMutation) ResetConsumedQuota() {
	m.consumed_quota = nil
	m.addconsumed_quota = nil
	delete(m.clearedFields, quota.FieldConsumedQuota)
}

// SetExpiredAt sets the "expired_at" field.
func (m *QuotaMutation) SetExpiredAt(u uint32) {
	m.expired_at = &u
	m.addexpired_at = nil
}

// ExpiredAt returns the value of the "expired_at" field in the mutation.
func (m *QuotaMutation) ExpiredAt() (r uint32, exists bool) {
	v := m.expired_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiredAt returns the old "expired_at" field's value of the Quota entity.
// If the Quota object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuotaMutation) OldExpiredAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiredAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiredAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiredAt: %w", err)
	}
	return oldValue.ExpiredAt, nil
}

// AddExpiredAt adds u to the "expired_at" field.
func (m *QuotaMutation) AddExpiredAt(u int32) {
	if m.addexpired_at != nil {
		*m.addexpired_at += u
	} else {
		m.addexpired_at = &u
	}
}

// AddedExpiredAt returns the value that was added to the "expired_at" field in this mutation.
func (m *QuotaMutation) AddedExpiredAt() (r int32, exists bool) {
	v := m.addexpired_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (m *QuotaMutation) ClearExpiredAt() {
	m.expired_at = nil
	m.addexpired_at = nil
	m.clearedFields[quota.FieldExpiredAt] = struct{}{}
}

// ExpiredAtCleared returns if the "expired_at" field was cleared in this mutation.
func (m *QuotaMutation) ExpiredAtCleared() bool {
	_, ok := m.clearedFields[quota.FieldExpiredAt]
	return ok
}

// ResetExpiredAt resets all changes to the "expired_at" field.
func (m *QuotaMutation) ResetExpiredAt() {
	m.expired_at = nil
	m.addexpired_at = nil
	delete(m.clearedFields, quota.FieldExpiredAt)
}

// Where appends a list predicates to the QuotaMutation builder.
func (m *QuotaMutation) Where(ps ...predicate.Quota) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the QuotaMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *QuotaMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Quota, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *QuotaMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *QuotaMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Quota).
func (m *QuotaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QuotaMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.ent_id != nil {
		fields = append(fields, quota.FieldEntID)
	}
	if m.created_at != nil {
		fields = append(fields, quota.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, quota.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, quota.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, quota.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, quota.FieldUserID)
	}
	if m.quota != nil {
		fields = append(fields, quota.FieldQuota)
	}
	if m.consumed_quota != nil {
		fields = append(fields, quota.FieldConsumedQuota)
	}
	if m.expired_at != nil {
		fields = append(fields, quota.FieldExpiredAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QuotaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case quota.FieldEntID:
		return m.EntID()
	case quota.FieldCreatedAt:
		return m.CreatedAt()
	case quota.FieldUpdatedAt:
		return m.UpdatedAt()
	case quota.FieldDeletedAt:
		return m.DeletedAt()
	case quota.FieldAppID:
		return m.AppID()
	case quota.FieldUserID:
		return m.UserID()
	case quota.FieldQuota:
		return m.Quota()
	case quota.FieldConsumedQuota:
		return m.ConsumedQuota()
	case quota.FieldExpiredAt:
		return m.ExpiredAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QuotaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case quota.FieldEntID:
		return m.OldEntID(ctx)
	case quota.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case quota.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case quota.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case quota.FieldAppID:
		return m.OldAppID(ctx)
	case quota.FieldUserID:
		return m.OldUserID(ctx)
	case quota.FieldQuota:
		return m.OldQuota(ctx)
	case quota.FieldConsumedQuota:
		return m.OldConsumedQuota(ctx)
	case quota.FieldExpiredAt:
		return m.OldExpiredAt(ctx)
	}
	return nil, fmt.Errorf("unknown Quota field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuotaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case quota.FieldEntID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntID(v)
		return nil
	case quota.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case quota.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case quota.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case quota.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case quota.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case quota.FieldQuota:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuota(v)
		return nil
	case quota.FieldConsumedQuota:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConsumedQuota(v)
		return nil
	case quota.FieldExpiredAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiredAt(v)
		return nil
	}
	return fmt.Errorf("unknown Quota field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QuotaMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, quota.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, quota.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, quota.FieldDeletedAt)
	}
	if m.addquota != nil {
		fields = append(fields, quota.FieldQuota)
	}
	if m.addconsumed_quota != nil {
		fields = append(fields, quota.FieldConsumedQuota)
	}
	if m.addexpired_at != nil {
		fields = append(fields, quota.FieldExpiredAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QuotaMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case quota.FieldCreatedAt:
		return m.AddedCreatedAt()
	case quota.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case quota.FieldDeletedAt:
		return m.AddedDeletedAt()
	case quota.FieldQuota:
		return m.AddedQuota()
	case quota.FieldConsumedQuota:
		return m.AddedConsumedQuota()
	case quota.FieldExpiredAt:
		return m.AddedExpiredAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuotaMutation) AddField(name string, value ent.Value) error {
	switch name {
	case quota.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case quota.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case quota.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case quota.FieldQuota:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuota(v)
		return nil
	case quota.FieldConsumedQuota:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddConsumedQuota(v)
		return nil
	case quota.FieldExpiredAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExpiredAt(v)
		return nil
	}
	return fmt.Errorf("unknown Quota numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QuotaMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(quota.FieldAppID) {
		fields = append(fields, quota.FieldAppID)
	}
	if m.FieldCleared(quota.FieldUserID) {
		fields = append(fields, quota.FieldUserID)
	}
	if m.FieldCleared(quota.FieldQuota) {
		fields = append(fields, quota.FieldQuota)
	}
	if m.FieldCleared(quota.FieldConsumedQuota) {
		fields = append(fields, quota.FieldConsumedQuota)
	}
	if m.FieldCleared(quota.FieldExpiredAt) {
		fields = append(fields, quota.FieldExpiredAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QuotaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QuotaMutation) ClearField(name string) error {
	switch name {
	case quota.FieldAppID:
		m.ClearAppID()
		return nil
	case quota.FieldUserID:
		m.ClearUserID()
		return nil
	case quota.FieldQuota:
		m.ClearQuota()
		return nil
	case quota.FieldConsumedQuota:
		m.ClearConsumedQuota()
		return nil
	case quota.FieldExpiredAt:
		m.ClearExpiredAt()
		return nil
	}
	return fmt.Errorf("unknown Quota nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QuotaMutation) ResetField(name string) error {
	switch name {
	case quota.FieldEntID:
		m.ResetEntID()
		return nil
	case quota.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case quota.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case quota.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case quota.FieldAppID:
		m.ResetAppID()
		return nil
	case quota.FieldUserID:
		m.ResetUserID()
		return nil
	case quota.FieldQuota:
		m.ResetQuota()
		return nil
	case quota.FieldConsumedQuota:
		m.ResetConsumedQuota()
		return nil
	case quota.FieldExpiredAt:
		m.ResetExpiredAt()
		return nil
	}
	return fmt.Errorf("unknown Quota field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QuotaMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QuotaMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QuotaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QuotaMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QuotaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QuotaMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QuotaMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Quota unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QuotaMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Quota edge %s", name)
}

// SubscriptionMutation represents an operation that mutates the Subscription nodes in the graph.
type SubscriptionMutation struct {
	config
	op                 Op
	typ                string
	id                 *uint32
	created_at         *uint32
	addcreated_at      *int32
	updated_at         *uint32
	addupdated_at      *int32
	deleted_at         *uint32
	adddeleted_at      *int32
	ent_id             *uuid.UUID
	app_id             *uuid.UUID
	user_id            *uuid.UUID
	app_good_id        *uuid.UUID
	next_extend_at     *uint32
	addnext_extend_at  *int32
	permanent_quota    *uint32
	addpermanent_quota *int32
	consumed_quota     *uint32
	addconsumed_quota  *int32
	auto_extend        *bool
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*Subscription, error)
	predicates         []predicate.Subscription
}

var _ ent.Mutation = (*SubscriptionMutation)(nil)

// subscriptionOption allows management of the mutation configuration using functional options.
type subscriptionOption func(*SubscriptionMutation)

// newSubscriptionMutation creates new mutation for the Subscription entity.
func newSubscriptionMutation(c config, op Op, opts ...subscriptionOption) *SubscriptionMutation {
	m := &SubscriptionMutation{
		config:        c,
		op:            op,
		typ:           TypeSubscription,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubscriptionID sets the ID field of the mutation.
func withSubscriptionID(id uint32) subscriptionOption {
	return func(m *SubscriptionMutation) {
		var (
			err   error
			once  sync.Once
			value *Subscription
		)
		m.oldValue = func(ctx context.Context) (*Subscription, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Subscription.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubscription sets the old Subscription of the mutation.
func withSubscription(node *Subscription) subscriptionOption {
	return func(m *SubscriptionMutation) {
		m.oldValue = func(context.Context) (*Subscription, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubscriptionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubscriptionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Subscription entities.
func (m *SubscriptionMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubscriptionMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubscriptionMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Subscription.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SubscriptionMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SubscriptionMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *SubscriptionMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *SubscriptionMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SubscriptionMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SubscriptionMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SubscriptionMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *SubscriptionMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *SubscriptionMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SubscriptionMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SubscriptionMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SubscriptionMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *SubscriptionMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *SubscriptionMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SubscriptionMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetEntID sets the "ent_id" field.
func (m *SubscriptionMutation) SetEntID(u uuid.UUID) {
	m.ent_id = &u
}

// EntID returns the value of the "ent_id" field in the mutation.
func (m *SubscriptionMutation) EntID() (r uuid.UUID, exists bool) {
	v := m.ent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEntID returns the old "ent_id" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldEntID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntID: %w", err)
	}
	return oldValue.EntID, nil
}

// ResetEntID resets all changes to the "ent_id" field.
func (m *SubscriptionMutation) ResetEntID() {
	m.ent_id = nil
}

// SetAppID sets the "app_id" field.
func (m *SubscriptionMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *SubscriptionMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *SubscriptionMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[subscription.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *SubscriptionMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[subscription.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *SubscriptionMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, subscription.FieldAppID)
}

// SetUserID sets the "user_id" field.
func (m *SubscriptionMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *SubscriptionMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *SubscriptionMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[subscription.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *SubscriptionMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[subscription.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *SubscriptionMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, subscription.FieldUserID)
}

// SetAppGoodID sets the "app_good_id" field.
func (m *SubscriptionMutation) SetAppGoodID(u uuid.UUID) {
	m.app_good_id = &u
}

// AppGoodID returns the value of the "app_good_id" field in the mutation.
func (m *SubscriptionMutation) AppGoodID() (r uuid.UUID, exists bool) {
	v := m.app_good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppGoodID returns the old "app_good_id" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldAppGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppGoodID: %w", err)
	}
	return oldValue.AppGoodID, nil
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (m *SubscriptionMutation) ClearAppGoodID() {
	m.app_good_id = nil
	m.clearedFields[subscription.FieldAppGoodID] = struct{}{}
}

// AppGoodIDCleared returns if the "app_good_id" field was cleared in this mutation.
func (m *SubscriptionMutation) AppGoodIDCleared() bool {
	_, ok := m.clearedFields[subscription.FieldAppGoodID]
	return ok
}

// ResetAppGoodID resets all changes to the "app_good_id" field.
func (m *SubscriptionMutation) ResetAppGoodID() {
	m.app_good_id = nil
	delete(m.clearedFields, subscription.FieldAppGoodID)
}

// SetNextExtendAt sets the "next_extend_at" field.
func (m *SubscriptionMutation) SetNextExtendAt(u uint32) {
	m.next_extend_at = &u
	m.addnext_extend_at = nil
}

// NextExtendAt returns the value of the "next_extend_at" field in the mutation.
func (m *SubscriptionMutation) NextExtendAt() (r uint32, exists bool) {
	v := m.next_extend_at
	if v == nil {
		return
	}
	return *v, true
}

// OldNextExtendAt returns the old "next_extend_at" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldNextExtendAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNextExtendAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNextExtendAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNextExtendAt: %w", err)
	}
	return oldValue.NextExtendAt, nil
}

// AddNextExtendAt adds u to the "next_extend_at" field.
func (m *SubscriptionMutation) AddNextExtendAt(u int32) {
	if m.addnext_extend_at != nil {
		*m.addnext_extend_at += u
	} else {
		m.addnext_extend_at = &u
	}
}

// AddedNextExtendAt returns the value that was added to the "next_extend_at" field in this mutation.
func (m *SubscriptionMutation) AddedNextExtendAt() (r int32, exists bool) {
	v := m.addnext_extend_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearNextExtendAt clears the value of the "next_extend_at" field.
func (m *SubscriptionMutation) ClearNextExtendAt() {
	m.next_extend_at = nil
	m.addnext_extend_at = nil
	m.clearedFields[subscription.FieldNextExtendAt] = struct{}{}
}

// NextExtendAtCleared returns if the "next_extend_at" field was cleared in this mutation.
func (m *SubscriptionMutation) NextExtendAtCleared() bool {
	_, ok := m.clearedFields[subscription.FieldNextExtendAt]
	return ok
}

// ResetNextExtendAt resets all changes to the "next_extend_at" field.
func (m *SubscriptionMutation) ResetNextExtendAt() {
	m.next_extend_at = nil
	m.addnext_extend_at = nil
	delete(m.clearedFields, subscription.FieldNextExtendAt)
}

// SetPermanentQuota sets the "permanent_quota" field.
func (m *SubscriptionMutation) SetPermanentQuota(u uint32) {
	m.permanent_quota = &u
	m.addpermanent_quota = nil
}

// PermanentQuota returns the value of the "permanent_quota" field in the mutation.
func (m *SubscriptionMutation) PermanentQuota() (r uint32, exists bool) {
	v := m.permanent_quota
	if v == nil {
		return
	}
	return *v, true
}

// OldPermanentQuota returns the old "permanent_quota" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldPermanentQuota(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPermanentQuota is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPermanentQuota requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPermanentQuota: %w", err)
	}
	return oldValue.PermanentQuota, nil
}

// AddPermanentQuota adds u to the "permanent_quota" field.
func (m *SubscriptionMutation) AddPermanentQuota(u int32) {
	if m.addpermanent_quota != nil {
		*m.addpermanent_quota += u
	} else {
		m.addpermanent_quota = &u
	}
}

// AddedPermanentQuota returns the value that was added to the "permanent_quota" field in this mutation.
func (m *SubscriptionMutation) AddedPermanentQuota() (r int32, exists bool) {
	v := m.addpermanent_quota
	if v == nil {
		return
	}
	return *v, true
}

// ClearPermanentQuota clears the value of the "permanent_quota" field.
func (m *SubscriptionMutation) ClearPermanentQuota() {
	m.permanent_quota = nil
	m.addpermanent_quota = nil
	m.clearedFields[subscription.FieldPermanentQuota] = struct{}{}
}

// PermanentQuotaCleared returns if the "permanent_quota" field was cleared in this mutation.
func (m *SubscriptionMutation) PermanentQuotaCleared() bool {
	_, ok := m.clearedFields[subscription.FieldPermanentQuota]
	return ok
}

// ResetPermanentQuota resets all changes to the "permanent_quota" field.
func (m *SubscriptionMutation) ResetPermanentQuota() {
	m.permanent_quota = nil
	m.addpermanent_quota = nil
	delete(m.clearedFields, subscription.FieldPermanentQuota)
}

// SetConsumedQuota sets the "consumed_quota" field.
func (m *SubscriptionMutation) SetConsumedQuota(u uint32) {
	m.consumed_quota = &u
	m.addconsumed_quota = nil
}

// ConsumedQuota returns the value of the "consumed_quota" field in the mutation.
func (m *SubscriptionMutation) ConsumedQuota() (r uint32, exists bool) {
	v := m.consumed_quota
	if v == nil {
		return
	}
	return *v, true
}

// OldConsumedQuota returns the old "consumed_quota" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldConsumedQuota(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConsumedQuota is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConsumedQuota requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConsumedQuota: %w", err)
	}
	return oldValue.ConsumedQuota, nil
}

// AddConsumedQuota adds u to the "consumed_quota" field.
func (m *SubscriptionMutation) AddConsumedQuota(u int32) {
	if m.addconsumed_quota != nil {
		*m.addconsumed_quota += u
	} else {
		m.addconsumed_quota = &u
	}
}

// AddedConsumedQuota returns the value that was added to the "consumed_quota" field in this mutation.
func (m *SubscriptionMutation) AddedConsumedQuota() (r int32, exists bool) {
	v := m.addconsumed_quota
	if v == nil {
		return
	}
	return *v, true
}

// ClearConsumedQuota clears the value of the "consumed_quota" field.
func (m *SubscriptionMutation) ClearConsumedQuota() {
	m.consumed_quota = nil
	m.addconsumed_quota = nil
	m.clearedFields[subscription.FieldConsumedQuota] = struct{}{}
}

// ConsumedQuotaCleared returns if the "consumed_quota" field was cleared in this mutation.
func (m *SubscriptionMutation) ConsumedQuotaCleared() bool {
	_, ok := m.clearedFields[subscription.FieldConsumedQuota]
	return ok
}

// ResetConsumedQuota resets all changes to the "consumed_quota" field.
func (m *SubscriptionMutation) ResetConsumedQuota() {
	m.consumed_quota = nil
	m.addconsumed_quota = nil
	delete(m.clearedFields, subscription.FieldConsumedQuota)
}

// SetAutoExtend sets the "auto_extend" field.
func (m *SubscriptionMutation) SetAutoExtend(b bool) {
	m.auto_extend = &b
}

// AutoExtend returns the value of the "auto_extend" field in the mutation.
func (m *SubscriptionMutation) AutoExtend() (r bool, exists bool) {
	v := m.auto_extend
	if v == nil {
		return
	}
	return *v, true
}

// OldAutoExtend returns the old "auto_extend" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldAutoExtend(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAutoExtend is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAutoExtend requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAutoExtend: %w", err)
	}
	return oldValue.AutoExtend, nil
}

// ClearAutoExtend clears the value of the "auto_extend" field.
func (m *SubscriptionMutation) ClearAutoExtend() {
	m.auto_extend = nil
	m.clearedFields[subscription.FieldAutoExtend] = struct{}{}
}

// AutoExtendCleared returns if the "auto_extend" field was cleared in this mutation.
func (m *SubscriptionMutation) AutoExtendCleared() bool {
	_, ok := m.clearedFields[subscription.FieldAutoExtend]
	return ok
}

// ResetAutoExtend resets all changes to the "auto_extend" field.
func (m *SubscriptionMutation) ResetAutoExtend() {
	m.auto_extend = nil
	delete(m.clearedFields, subscription.FieldAutoExtend)
}

// Where appends a list predicates to the SubscriptionMutation builder.
func (m *SubscriptionMutation) Where(ps ...predicate.Subscription) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SubscriptionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SubscriptionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Subscription, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SubscriptionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SubscriptionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Subscription).
func (m *SubscriptionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubscriptionMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, subscription.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, subscription.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, subscription.FieldDeletedAt)
	}
	if m.ent_id != nil {
		fields = append(fields, subscription.FieldEntID)
	}
	if m.app_id != nil {
		fields = append(fields, subscription.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, subscription.FieldUserID)
	}
	if m.app_good_id != nil {
		fields = append(fields, subscription.FieldAppGoodID)
	}
	if m.next_extend_at != nil {
		fields = append(fields, subscription.FieldNextExtendAt)
	}
	if m.permanent_quota != nil {
		fields = append(fields, subscription.FieldPermanentQuota)
	}
	if m.consumed_quota != nil {
		fields = append(fields, subscription.FieldConsumedQuota)
	}
	if m.auto_extend != nil {
		fields = append(fields, subscription.FieldAutoExtend)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubscriptionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case subscription.FieldCreatedAt:
		return m.CreatedAt()
	case subscription.FieldUpdatedAt:
		return m.UpdatedAt()
	case subscription.FieldDeletedAt:
		return m.DeletedAt()
	case subscription.FieldEntID:
		return m.EntID()
	case subscription.FieldAppID:
		return m.AppID()
	case subscription.FieldUserID:
		return m.UserID()
	case subscription.FieldAppGoodID:
		return m.AppGoodID()
	case subscription.FieldNextExtendAt:
		return m.NextExtendAt()
	case subscription.FieldPermanentQuota:
		return m.PermanentQuota()
	case subscription.FieldConsumedQuota:
		return m.ConsumedQuota()
	case subscription.FieldAutoExtend:
		return m.AutoExtend()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubscriptionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case subscription.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case subscription.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case subscription.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case subscription.FieldEntID:
		return m.OldEntID(ctx)
	case subscription.FieldAppID:
		return m.OldAppID(ctx)
	case subscription.FieldUserID:
		return m.OldUserID(ctx)
	case subscription.FieldAppGoodID:
		return m.OldAppGoodID(ctx)
	case subscription.FieldNextExtendAt:
		return m.OldNextExtendAt(ctx)
	case subscription.FieldPermanentQuota:
		return m.OldPermanentQuota(ctx)
	case subscription.FieldConsumedQuota:
		return m.OldConsumedQuota(ctx)
	case subscription.FieldAutoExtend:
		return m.OldAutoExtend(ctx)
	}
	return nil, fmt.Errorf("unknown Subscription field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscriptionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case subscription.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case subscription.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case subscription.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case subscription.FieldEntID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntID(v)
		return nil
	case subscription.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case subscription.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case subscription.FieldAppGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppGoodID(v)
		return nil
	case subscription.FieldNextExtendAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNextExtendAt(v)
		return nil
	case subscription.FieldPermanentQuota:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPermanentQuota(v)
		return nil
	case subscription.FieldConsumedQuota:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConsumedQuota(v)
		return nil
	case subscription.FieldAutoExtend:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAutoExtend(v)
		return nil
	}
	return fmt.Errorf("unknown Subscription field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubscriptionMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, subscription.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, subscription.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, subscription.FieldDeletedAt)
	}
	if m.addnext_extend_at != nil {
		fields = append(fields, subscription.FieldNextExtendAt)
	}
	if m.addpermanent_quota != nil {
		fields = append(fields, subscription.FieldPermanentQuota)
	}
	if m.addconsumed_quota != nil {
		fields = append(fields, subscription.FieldConsumedQuota)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubscriptionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case subscription.FieldCreatedAt:
		return m.AddedCreatedAt()
	case subscription.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case subscription.FieldDeletedAt:
		return m.AddedDeletedAt()
	case subscription.FieldNextExtendAt:
		return m.AddedNextExtendAt()
	case subscription.FieldPermanentQuota:
		return m.AddedPermanentQuota()
	case subscription.FieldConsumedQuota:
		return m.AddedConsumedQuota()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscriptionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case subscription.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case subscription.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case subscription.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case subscription.FieldNextExtendAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNextExtendAt(v)
		return nil
	case subscription.FieldPermanentQuota:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPermanentQuota(v)
		return nil
	case subscription.FieldConsumedQuota:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddConsumedQuota(v)
		return nil
	}
	return fmt.Errorf("unknown Subscription numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubscriptionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(subscription.FieldAppID) {
		fields = append(fields, subscription.FieldAppID)
	}
	if m.FieldCleared(subscription.FieldUserID) {
		fields = append(fields, subscription.FieldUserID)
	}
	if m.FieldCleared(subscription.FieldAppGoodID) {
		fields = append(fields, subscription.FieldAppGoodID)
	}
	if m.FieldCleared(subscription.FieldNextExtendAt) {
		fields = append(fields, subscription.FieldNextExtendAt)
	}
	if m.FieldCleared(subscription.FieldPermanentQuota) {
		fields = append(fields, subscription.FieldPermanentQuota)
	}
	if m.FieldCleared(subscription.FieldConsumedQuota) {
		fields = append(fields, subscription.FieldConsumedQuota)
	}
	if m.FieldCleared(subscription.FieldAutoExtend) {
		fields = append(fields, subscription.FieldAutoExtend)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubscriptionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubscriptionMutation) ClearField(name string) error {
	switch name {
	case subscription.FieldAppID:
		m.ClearAppID()
		return nil
	case subscription.FieldUserID:
		m.ClearUserID()
		return nil
	case subscription.FieldAppGoodID:
		m.ClearAppGoodID()
		return nil
	case subscription.FieldNextExtendAt:
		m.ClearNextExtendAt()
		return nil
	case subscription.FieldPermanentQuota:
		m.ClearPermanentQuota()
		return nil
	case subscription.FieldConsumedQuota:
		m.ClearConsumedQuota()
		return nil
	case subscription.FieldAutoExtend:
		m.ClearAutoExtend()
		return nil
	}
	return fmt.Errorf("unknown Subscription nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubscriptionMutation) ResetField(name string) error {
	switch name {
	case subscription.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case subscription.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case subscription.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case subscription.FieldEntID:
		m.ResetEntID()
		return nil
	case subscription.FieldAppID:
		m.ResetAppID()
		return nil
	case subscription.FieldUserID:
		m.ResetUserID()
		return nil
	case subscription.FieldAppGoodID:
		m.ResetAppGoodID()
		return nil
	case subscription.FieldNextExtendAt:
		m.ResetNextExtendAt()
		return nil
	case subscription.FieldPermanentQuota:
		m.ResetPermanentQuota()
		return nil
	case subscription.FieldConsumedQuota:
		m.ResetConsumedQuota()
		return nil
	case subscription.FieldAutoExtend:
		m.ResetAutoExtend()
		return nil
	}
	return fmt.Errorf("unknown Subscription field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubscriptionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubscriptionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubscriptionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubscriptionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubscriptionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubscriptionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubscriptionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Subscription unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubscriptionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Subscription edge %s", name)
}

// Code generated by ent, DO NOT EDIT.

package capacity

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/agi/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Capacity {
	return predicate.Capacity(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Capacity {
	return predicate.Capacity(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Capacity {
	return predicate.Capacity(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Capacity {
	return predicate.Capacity(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Capacity {
	return predicate.Capacity(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Capacity {
	return predicate.Capacity(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Capacity {
	return predicate.Capacity(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Capacity {
	return predicate.Capacity(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Capacity {
	return predicate.Capacity(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.Capacity {
	return predicate.Capacity(sql.FieldEQ(FieldEntID, v))
}

// AppGoodID applies equality check predicate on the "app_good_id" field. It's identical to AppGoodIDEQ.
func AppGoodID(v uuid.UUID) predicate.Capacity {
	return predicate.Capacity(sql.FieldEQ(FieldAppGoodID, v))
}

// CapacityKey applies equality check predicate on the "capacity_key" field. It's identical to CapacityKeyEQ.
func CapacityKey(v string) predicate.Capacity {
	return predicate.Capacity(sql.FieldEQ(FieldCapacityKey, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.Capacity {
	return predicate.Capacity(sql.FieldEQ(FieldValue, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.Capacity {
	return predicate.Capacity(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.Capacity {
	return predicate.Capacity(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.Capacity {
	return predicate.Capacity(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.Capacity {
	return predicate.Capacity(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.Capacity {
	return predicate.Capacity(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.Capacity {
	return predicate.Capacity(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.Capacity {
	return predicate.Capacity(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.Capacity {
	return predicate.Capacity(sql.FieldLTE(FieldEntID, v))
}

// AppGoodIDEQ applies the EQ predicate on the "app_good_id" field.
func AppGoodIDEQ(v uuid.UUID) predicate.Capacity {
	return predicate.Capacity(sql.FieldEQ(FieldAppGoodID, v))
}

// AppGoodIDNEQ applies the NEQ predicate on the "app_good_id" field.
func AppGoodIDNEQ(v uuid.UUID) predicate.Capacity {
	return predicate.Capacity(sql.FieldNEQ(FieldAppGoodID, v))
}

// AppGoodIDIn applies the In predicate on the "app_good_id" field.
func AppGoodIDIn(vs ...uuid.UUID) predicate.Capacity {
	return predicate.Capacity(sql.FieldIn(FieldAppGoodID, vs...))
}

// AppGoodIDNotIn applies the NotIn predicate on the "app_good_id" field.
func AppGoodIDNotIn(vs ...uuid.UUID) predicate.Capacity {
	return predicate.Capacity(sql.FieldNotIn(FieldAppGoodID, vs...))
}

// AppGoodIDGT applies the GT predicate on the "app_good_id" field.
func AppGoodIDGT(v uuid.UUID) predicate.Capacity {
	return predicate.Capacity(sql.FieldGT(FieldAppGoodID, v))
}

// AppGoodIDGTE applies the GTE predicate on the "app_good_id" field.
func AppGoodIDGTE(v uuid.UUID) predicate.Capacity {
	return predicate.Capacity(sql.FieldGTE(FieldAppGoodID, v))
}

// AppGoodIDLT applies the LT predicate on the "app_good_id" field.
func AppGoodIDLT(v uuid.UUID) predicate.Capacity {
	return predicate.Capacity(sql.FieldLT(FieldAppGoodID, v))
}

// AppGoodIDLTE applies the LTE predicate on the "app_good_id" field.
func AppGoodIDLTE(v uuid.UUID) predicate.Capacity {
	return predicate.Capacity(sql.FieldLTE(FieldAppGoodID, v))
}

// AppGoodIDIsNil applies the IsNil predicate on the "app_good_id" field.
func AppGoodIDIsNil() predicate.Capacity {
	return predicate.Capacity(sql.FieldIsNull(FieldAppGoodID))
}

// AppGoodIDNotNil applies the NotNil predicate on the "app_good_id" field.
func AppGoodIDNotNil() predicate.Capacity {
	return predicate.Capacity(sql.FieldNotNull(FieldAppGoodID))
}

// CapacityKeyEQ applies the EQ predicate on the "capacity_key" field.
func CapacityKeyEQ(v string) predicate.Capacity {
	return predicate.Capacity(sql.FieldEQ(FieldCapacityKey, v))
}

// CapacityKeyNEQ applies the NEQ predicate on the "capacity_key" field.
func CapacityKeyNEQ(v string) predicate.Capacity {
	return predicate.Capacity(sql.FieldNEQ(FieldCapacityKey, v))
}

// CapacityKeyIn applies the In predicate on the "capacity_key" field.
func CapacityKeyIn(vs ...string) predicate.Capacity {
	return predicate.Capacity(sql.FieldIn(FieldCapacityKey, vs...))
}

// CapacityKeyNotIn applies the NotIn predicate on the "capacity_key" field.
func CapacityKeyNotIn(vs ...string) predicate.Capacity {
	return predicate.Capacity(sql.FieldNotIn(FieldCapacityKey, vs...))
}

// CapacityKeyGT applies the GT predicate on the "capacity_key" field.
func CapacityKeyGT(v string) predicate.Capacity {
	return predicate.Capacity(sql.FieldGT(FieldCapacityKey, v))
}

// CapacityKeyGTE applies the GTE predicate on the "capacity_key" field.
func CapacityKeyGTE(v string) predicate.Capacity {
	return predicate.Capacity(sql.FieldGTE(FieldCapacityKey, v))
}

// CapacityKeyLT applies the LT predicate on the "capacity_key" field.
func CapacityKeyLT(v string) predicate.Capacity {
	return predicate.Capacity(sql.FieldLT(FieldCapacityKey, v))
}

// CapacityKeyLTE applies the LTE predicate on the "capacity_key" field.
func CapacityKeyLTE(v string) predicate.Capacity {
	return predicate.Capacity(sql.FieldLTE(FieldCapacityKey, v))
}

// CapacityKeyContains applies the Contains predicate on the "capacity_key" field.
func CapacityKeyContains(v string) predicate.Capacity {
	return predicate.Capacity(sql.FieldContains(FieldCapacityKey, v))
}

// CapacityKeyHasPrefix applies the HasPrefix predicate on the "capacity_key" field.
func CapacityKeyHasPrefix(v string) predicate.Capacity {
	return predicate.Capacity(sql.FieldHasPrefix(FieldCapacityKey, v))
}

// CapacityKeyHasSuffix applies the HasSuffix predicate on the "capacity_key" field.
func CapacityKeyHasSuffix(v string) predicate.Capacity {
	return predicate.Capacity(sql.FieldHasSuffix(FieldCapacityKey, v))
}

// CapacityKeyIsNil applies the IsNil predicate on the "capacity_key" field.
func CapacityKeyIsNil() predicate.Capacity {
	return predicate.Capacity(sql.FieldIsNull(FieldCapacityKey))
}

// CapacityKeyNotNil applies the NotNil predicate on the "capacity_key" field.
func CapacityKeyNotNil() predicate.Capacity {
	return predicate.Capacity(sql.FieldNotNull(FieldCapacityKey))
}

// CapacityKeyEqualFold applies the EqualFold predicate on the "capacity_key" field.
func CapacityKeyEqualFold(v string) predicate.Capacity {
	return predicate.Capacity(sql.FieldEqualFold(FieldCapacityKey, v))
}

// CapacityKeyContainsFold applies the ContainsFold predicate on the "capacity_key" field.
func CapacityKeyContainsFold(v string) predicate.Capacity {
	return predicate.Capacity(sql.FieldContainsFold(FieldCapacityKey, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.Capacity {
	return predicate.Capacity(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.Capacity {
	return predicate.Capacity(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.Capacity {
	return predicate.Capacity(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.Capacity {
	return predicate.Capacity(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.Capacity {
	return predicate.Capacity(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.Capacity {
	return predicate.Capacity(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.Capacity {
	return predicate.Capacity(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.Capacity {
	return predicate.Capacity(sql.FieldLTE(FieldValue, v))
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.Capacity {
	return predicate.Capacity(sql.FieldContains(FieldValue, v))
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.Capacity {
	return predicate.Capacity(sql.FieldHasPrefix(FieldValue, v))
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.Capacity {
	return predicate.Capacity(sql.FieldHasSuffix(FieldValue, v))
}

// ValueIsNil applies the IsNil predicate on the "value" field.
func ValueIsNil() predicate.Capacity {
	return predicate.Capacity(sql.FieldIsNull(FieldValue))
}

// ValueNotNil applies the NotNil predicate on the "value" field.
func ValueNotNil() predicate.Capacity {
	return predicate.Capacity(sql.FieldNotNull(FieldValue))
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.Capacity {
	return predicate.Capacity(sql.FieldEqualFold(FieldValue, v))
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.Capacity {
	return predicate.Capacity(sql.FieldContainsFold(FieldValue, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Capacity) predicate.Capacity {
	return predicate.Capacity(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Capacity) predicate.Capacity {
	return predicate.Capacity(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Capacity) predicate.Capacity {
	return predicate.Capacity(sql.NotPredicates(p))
}

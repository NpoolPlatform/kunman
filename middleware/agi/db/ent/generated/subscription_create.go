// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/agi/db/ent/generated/subscription"
	"github.com/google/uuid"
)

// SubscriptionCreate is the builder for creating a Subscription entity.
type SubscriptionCreate struct {
	config
	mutation *SubscriptionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sc *SubscriptionCreate) SetCreatedAt(u uint32) *SubscriptionCreate {
	sc.mutation.SetCreatedAt(u)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableCreatedAt(u *uint32) *SubscriptionCreate {
	if u != nil {
		sc.SetCreatedAt(*u)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SubscriptionCreate) SetUpdatedAt(u uint32) *SubscriptionCreate {
	sc.mutation.SetUpdatedAt(u)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableUpdatedAt(u *uint32) *SubscriptionCreate {
	if u != nil {
		sc.SetUpdatedAt(*u)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *SubscriptionCreate) SetDeletedAt(u uint32) *SubscriptionCreate {
	sc.mutation.SetDeletedAt(u)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableDeletedAt(u *uint32) *SubscriptionCreate {
	if u != nil {
		sc.SetDeletedAt(*u)
	}
	return sc
}

// SetEntID sets the "ent_id" field.
func (sc *SubscriptionCreate) SetEntID(u uuid.UUID) *SubscriptionCreate {
	sc.mutation.SetEntID(u)
	return sc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableEntID(u *uuid.UUID) *SubscriptionCreate {
	if u != nil {
		sc.SetEntID(*u)
	}
	return sc
}

// SetAppID sets the "app_id" field.
func (sc *SubscriptionCreate) SetAppID(u uuid.UUID) *SubscriptionCreate {
	sc.mutation.SetAppID(u)
	return sc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableAppID(u *uuid.UUID) *SubscriptionCreate {
	if u != nil {
		sc.SetAppID(*u)
	}
	return sc
}

// SetUserID sets the "user_id" field.
func (sc *SubscriptionCreate) SetUserID(u uuid.UUID) *SubscriptionCreate {
	sc.mutation.SetUserID(u)
	return sc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableUserID(u *uuid.UUID) *SubscriptionCreate {
	if u != nil {
		sc.SetUserID(*u)
	}
	return sc
}

// SetAppGoodID sets the "app_good_id" field.
func (sc *SubscriptionCreate) SetAppGoodID(u uuid.UUID) *SubscriptionCreate {
	sc.mutation.SetAppGoodID(u)
	return sc
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableAppGoodID(u *uuid.UUID) *SubscriptionCreate {
	if u != nil {
		sc.SetAppGoodID(*u)
	}
	return sc
}

// SetNextExtendAt sets the "next_extend_at" field.
func (sc *SubscriptionCreate) SetNextExtendAt(u uint32) *SubscriptionCreate {
	sc.mutation.SetNextExtendAt(u)
	return sc
}

// SetNillableNextExtendAt sets the "next_extend_at" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableNextExtendAt(u *uint32) *SubscriptionCreate {
	if u != nil {
		sc.SetNextExtendAt(*u)
	}
	return sc
}

// SetPermanentQuota sets the "permanent_quota" field.
func (sc *SubscriptionCreate) SetPermanentQuota(u uint32) *SubscriptionCreate {
	sc.mutation.SetPermanentQuota(u)
	return sc
}

// SetNillablePermanentQuota sets the "permanent_quota" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillablePermanentQuota(u *uint32) *SubscriptionCreate {
	if u != nil {
		sc.SetPermanentQuota(*u)
	}
	return sc
}

// SetConsumedQuota sets the "consumed_quota" field.
func (sc *SubscriptionCreate) SetConsumedQuota(u uint32) *SubscriptionCreate {
	sc.mutation.SetConsumedQuota(u)
	return sc
}

// SetNillableConsumedQuota sets the "consumed_quota" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableConsumedQuota(u *uint32) *SubscriptionCreate {
	if u != nil {
		sc.SetConsumedQuota(*u)
	}
	return sc
}

// SetAutoExtend sets the "auto_extend" field.
func (sc *SubscriptionCreate) SetAutoExtend(b bool) *SubscriptionCreate {
	sc.mutation.SetAutoExtend(b)
	return sc
}

// SetNillableAutoExtend sets the "auto_extend" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableAutoExtend(b *bool) *SubscriptionCreate {
	if b != nil {
		sc.SetAutoExtend(*b)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SubscriptionCreate) SetID(u uint32) *SubscriptionCreate {
	sc.mutation.SetID(u)
	return sc
}

// Mutation returns the SubscriptionMutation object of the builder.
func (sc *SubscriptionCreate) Mutation() *SubscriptionMutation {
	return sc.mutation
}

// Save creates the Subscription in the database.
func (sc *SubscriptionCreate) Save(ctx context.Context) (*Subscription, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SubscriptionCreate) SaveX(ctx context.Context) *Subscription {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SubscriptionCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SubscriptionCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SubscriptionCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := subscription.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := subscription.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.DeletedAt(); !ok {
		v := subscription.DefaultDeletedAt()
		sc.mutation.SetDeletedAt(v)
	}
	if _, ok := sc.mutation.EntID(); !ok {
		v := subscription.DefaultEntID()
		sc.mutation.SetEntID(v)
	}
	if _, ok := sc.mutation.AppID(); !ok {
		v := subscription.DefaultAppID()
		sc.mutation.SetAppID(v)
	}
	if _, ok := sc.mutation.UserID(); !ok {
		v := subscription.DefaultUserID()
		sc.mutation.SetUserID(v)
	}
	if _, ok := sc.mutation.AppGoodID(); !ok {
		v := subscription.DefaultAppGoodID()
		sc.mutation.SetAppGoodID(v)
	}
	if _, ok := sc.mutation.NextExtendAt(); !ok {
		v := subscription.DefaultNextExtendAt
		sc.mutation.SetNextExtendAt(v)
	}
	if _, ok := sc.mutation.PermanentQuota(); !ok {
		v := subscription.DefaultPermanentQuota
		sc.mutation.SetPermanentQuota(v)
	}
	if _, ok := sc.mutation.ConsumedQuota(); !ok {
		v := subscription.DefaultConsumedQuota
		sc.mutation.SetConsumedQuota(v)
	}
	if _, ok := sc.mutation.AutoExtend(); !ok {
		v := subscription.DefaultAutoExtend
		sc.mutation.SetAutoExtend(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SubscriptionCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Subscription.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Subscription.updated_at"`)}
	}
	if _, ok := sc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "Subscription.deleted_at"`)}
	}
	if _, ok := sc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "Subscription.ent_id"`)}
	}
	return nil
}

func (sc *SubscriptionCreate) sqlSave(ctx context.Context) (*Subscription, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SubscriptionCreate) createSpec() (*Subscription, *sqlgraph.CreateSpec) {
	var (
		_node = &Subscription{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(subscription.Table, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(subscription.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(subscription.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.SetField(subscription.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := sc.mutation.EntID(); ok {
		_spec.SetField(subscription.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := sc.mutation.AppID(); ok {
		_spec.SetField(subscription.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := sc.mutation.UserID(); ok {
		_spec.SetField(subscription.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := sc.mutation.AppGoodID(); ok {
		_spec.SetField(subscription.FieldAppGoodID, field.TypeUUID, value)
		_node.AppGoodID = value
	}
	if value, ok := sc.mutation.NextExtendAt(); ok {
		_spec.SetField(subscription.FieldNextExtendAt, field.TypeUint32, value)
		_node.NextExtendAt = value
	}
	if value, ok := sc.mutation.PermanentQuota(); ok {
		_spec.SetField(subscription.FieldPermanentQuota, field.TypeUint32, value)
		_node.PermanentQuota = value
	}
	if value, ok := sc.mutation.ConsumedQuota(); ok {
		_spec.SetField(subscription.FieldConsumedQuota, field.TypeUint32, value)
		_node.ConsumedQuota = value
	}
	if value, ok := sc.mutation.AutoExtend(); ok {
		_spec.SetField(subscription.FieldAutoExtend, field.TypeBool, value)
		_node.AutoExtend = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Subscription.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sc *SubscriptionCreate) OnConflict(opts ...sql.ConflictOption) *SubscriptionUpsertOne {
	sc.conflict = opts
	return &SubscriptionUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Subscription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SubscriptionCreate) OnConflictColumns(columns ...string) *SubscriptionUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionUpsertOne{
		create: sc,
	}
}

type (
	// SubscriptionUpsertOne is the builder for "upsert"-ing
	//  one Subscription node.
	SubscriptionUpsertOne struct {
		create *SubscriptionCreate
	}

	// SubscriptionUpsert is the "OnConflict" setter.
	SubscriptionUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *SubscriptionUpsert) SetCreatedAt(v uint32) *SubscriptionUpsert {
	u.Set(subscription.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateCreatedAt() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SubscriptionUpsert) AddCreatedAt(v uint32) *SubscriptionUpsert {
	u.Add(subscription.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionUpsert) SetUpdatedAt(v uint32) *SubscriptionUpsert {
	u.Set(subscription.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateUpdatedAt() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SubscriptionUpsert) AddUpdatedAt(v uint32) *SubscriptionUpsert {
	u.Add(subscription.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionUpsert) SetDeletedAt(v uint32) *SubscriptionUpsert {
	u.Set(subscription.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateDeletedAt() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SubscriptionUpsert) AddDeletedAt(v uint32) *SubscriptionUpsert {
	u.Add(subscription.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *SubscriptionUpsert) SetEntID(v uuid.UUID) *SubscriptionUpsert {
	u.Set(subscription.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateEntID() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *SubscriptionUpsert) SetAppID(v uuid.UUID) *SubscriptionUpsert {
	u.Set(subscription.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateAppID() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *SubscriptionUpsert) ClearAppID() *SubscriptionUpsert {
	u.SetNull(subscription.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *SubscriptionUpsert) SetUserID(v uuid.UUID) *SubscriptionUpsert {
	u.Set(subscription.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateUserID() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *SubscriptionUpsert) ClearUserID() *SubscriptionUpsert {
	u.SetNull(subscription.FieldUserID)
	return u
}

// SetAppGoodID sets the "app_good_id" field.
func (u *SubscriptionUpsert) SetAppGoodID(v uuid.UUID) *SubscriptionUpsert {
	u.Set(subscription.FieldAppGoodID, v)
	return u
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateAppGoodID() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldAppGoodID)
	return u
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *SubscriptionUpsert) ClearAppGoodID() *SubscriptionUpsert {
	u.SetNull(subscription.FieldAppGoodID)
	return u
}

// SetNextExtendAt sets the "next_extend_at" field.
func (u *SubscriptionUpsert) SetNextExtendAt(v uint32) *SubscriptionUpsert {
	u.Set(subscription.FieldNextExtendAt, v)
	return u
}

// UpdateNextExtendAt sets the "next_extend_at" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateNextExtendAt() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldNextExtendAt)
	return u
}

// AddNextExtendAt adds v to the "next_extend_at" field.
func (u *SubscriptionUpsert) AddNextExtendAt(v uint32) *SubscriptionUpsert {
	u.Add(subscription.FieldNextExtendAt, v)
	return u
}

// ClearNextExtendAt clears the value of the "next_extend_at" field.
func (u *SubscriptionUpsert) ClearNextExtendAt() *SubscriptionUpsert {
	u.SetNull(subscription.FieldNextExtendAt)
	return u
}

// SetPermanentQuota sets the "permanent_quota" field.
func (u *SubscriptionUpsert) SetPermanentQuota(v uint32) *SubscriptionUpsert {
	u.Set(subscription.FieldPermanentQuota, v)
	return u
}

// UpdatePermanentQuota sets the "permanent_quota" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdatePermanentQuota() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldPermanentQuota)
	return u
}

// AddPermanentQuota adds v to the "permanent_quota" field.
func (u *SubscriptionUpsert) AddPermanentQuota(v uint32) *SubscriptionUpsert {
	u.Add(subscription.FieldPermanentQuota, v)
	return u
}

// ClearPermanentQuota clears the value of the "permanent_quota" field.
func (u *SubscriptionUpsert) ClearPermanentQuota() *SubscriptionUpsert {
	u.SetNull(subscription.FieldPermanentQuota)
	return u
}

// SetConsumedQuota sets the "consumed_quota" field.
func (u *SubscriptionUpsert) SetConsumedQuota(v uint32) *SubscriptionUpsert {
	u.Set(subscription.FieldConsumedQuota, v)
	return u
}

// UpdateConsumedQuota sets the "consumed_quota" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateConsumedQuota() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldConsumedQuota)
	return u
}

// AddConsumedQuota adds v to the "consumed_quota" field.
func (u *SubscriptionUpsert) AddConsumedQuota(v uint32) *SubscriptionUpsert {
	u.Add(subscription.FieldConsumedQuota, v)
	return u
}

// ClearConsumedQuota clears the value of the "consumed_quota" field.
func (u *SubscriptionUpsert) ClearConsumedQuota() *SubscriptionUpsert {
	u.SetNull(subscription.FieldConsumedQuota)
	return u
}

// SetAutoExtend sets the "auto_extend" field.
func (u *SubscriptionUpsert) SetAutoExtend(v bool) *SubscriptionUpsert {
	u.Set(subscription.FieldAutoExtend, v)
	return u
}

// UpdateAutoExtend sets the "auto_extend" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateAutoExtend() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldAutoExtend)
	return u
}

// ClearAutoExtend clears the value of the "auto_extend" field.
func (u *SubscriptionUpsert) ClearAutoExtend() *SubscriptionUpsert {
	u.SetNull(subscription.FieldAutoExtend)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Subscription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscription.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionUpsertOne) UpdateNewValues() *SubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(subscription.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Subscription.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SubscriptionUpsertOne) Ignore() *SubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionUpsertOne) DoNothing() *SubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionCreate.OnConflict
// documentation for more info.
func (u *SubscriptionUpsertOne) Update(set func(*SubscriptionUpsert)) *SubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SubscriptionUpsertOne) SetCreatedAt(v uint32) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SubscriptionUpsertOne) AddCreatedAt(v uint32) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateCreatedAt() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionUpsertOne) SetUpdatedAt(v uint32) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SubscriptionUpsertOne) AddUpdatedAt(v uint32) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateUpdatedAt() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionUpsertOne) SetDeletedAt(v uint32) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SubscriptionUpsertOne) AddDeletedAt(v uint32) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateDeletedAt() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *SubscriptionUpsertOne) SetEntID(v uuid.UUID) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateEntID() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *SubscriptionUpsertOne) SetAppID(v uuid.UUID) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateAppID() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *SubscriptionUpsertOne) ClearAppID() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *SubscriptionUpsertOne) SetUserID(v uuid.UUID) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateUserID() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *SubscriptionUpsertOne) ClearUserID() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearUserID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *SubscriptionUpsertOne) SetAppGoodID(v uuid.UUID) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateAppGoodID() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *SubscriptionUpsertOne) ClearAppGoodID() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearAppGoodID()
	})
}

// SetNextExtendAt sets the "next_extend_at" field.
func (u *SubscriptionUpsertOne) SetNextExtendAt(v uint32) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetNextExtendAt(v)
	})
}

// AddNextExtendAt adds v to the "next_extend_at" field.
func (u *SubscriptionUpsertOne) AddNextExtendAt(v uint32) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.AddNextExtendAt(v)
	})
}

// UpdateNextExtendAt sets the "next_extend_at" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateNextExtendAt() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateNextExtendAt()
	})
}

// ClearNextExtendAt clears the value of the "next_extend_at" field.
func (u *SubscriptionUpsertOne) ClearNextExtendAt() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearNextExtendAt()
	})
}

// SetPermanentQuota sets the "permanent_quota" field.
func (u *SubscriptionUpsertOne) SetPermanentQuota(v uint32) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetPermanentQuota(v)
	})
}

// AddPermanentQuota adds v to the "permanent_quota" field.
func (u *SubscriptionUpsertOne) AddPermanentQuota(v uint32) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.AddPermanentQuota(v)
	})
}

// UpdatePermanentQuota sets the "permanent_quota" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdatePermanentQuota() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdatePermanentQuota()
	})
}

// ClearPermanentQuota clears the value of the "permanent_quota" field.
func (u *SubscriptionUpsertOne) ClearPermanentQuota() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearPermanentQuota()
	})
}

// SetConsumedQuota sets the "consumed_quota" field.
func (u *SubscriptionUpsertOne) SetConsumedQuota(v uint32) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetConsumedQuota(v)
	})
}

// AddConsumedQuota adds v to the "consumed_quota" field.
func (u *SubscriptionUpsertOne) AddConsumedQuota(v uint32) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.AddConsumedQuota(v)
	})
}

// UpdateConsumedQuota sets the "consumed_quota" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateConsumedQuota() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateConsumedQuota()
	})
}

// ClearConsumedQuota clears the value of the "consumed_quota" field.
func (u *SubscriptionUpsertOne) ClearConsumedQuota() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearConsumedQuota()
	})
}

// SetAutoExtend sets the "auto_extend" field.
func (u *SubscriptionUpsertOne) SetAutoExtend(v bool) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetAutoExtend(v)
	})
}

// UpdateAutoExtend sets the "auto_extend" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateAutoExtend() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateAutoExtend()
	})
}

// ClearAutoExtend clears the value of the "auto_extend" field.
func (u *SubscriptionUpsertOne) ClearAutoExtend() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearAutoExtend()
	})
}

// Exec executes the query.
func (u *SubscriptionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for SubscriptionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubscriptionUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubscriptionUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubscriptionCreateBulk is the builder for creating many Subscription entities in bulk.
type SubscriptionCreateBulk struct {
	config
	err      error
	builders []*SubscriptionCreate
	conflict []sql.ConflictOption
}

// Save creates the Subscription entities in the database.
func (scb *SubscriptionCreateBulk) Save(ctx context.Context) ([]*Subscription, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Subscription, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SubscriptionCreateBulk) SaveX(ctx context.Context) []*Subscription {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SubscriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SubscriptionCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Subscription.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (scb *SubscriptionCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubscriptionUpsertBulk {
	scb.conflict = opts
	return &SubscriptionUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Subscription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SubscriptionCreateBulk) OnConflictColumns(columns ...string) *SubscriptionUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionUpsertBulk{
		create: scb,
	}
}

// SubscriptionUpsertBulk is the builder for "upsert"-ing
// a bulk of Subscription nodes.
type SubscriptionUpsertBulk struct {
	create *SubscriptionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Subscription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscription.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionUpsertBulk) UpdateNewValues() *SubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(subscription.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Subscription.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SubscriptionUpsertBulk) Ignore() *SubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionUpsertBulk) DoNothing() *SubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionCreateBulk.OnConflict
// documentation for more info.
func (u *SubscriptionUpsertBulk) Update(set func(*SubscriptionUpsert)) *SubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SubscriptionUpsertBulk) SetCreatedAt(v uint32) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SubscriptionUpsertBulk) AddCreatedAt(v uint32) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateCreatedAt() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionUpsertBulk) SetUpdatedAt(v uint32) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SubscriptionUpsertBulk) AddUpdatedAt(v uint32) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateUpdatedAt() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionUpsertBulk) SetDeletedAt(v uint32) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SubscriptionUpsertBulk) AddDeletedAt(v uint32) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateDeletedAt() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *SubscriptionUpsertBulk) SetEntID(v uuid.UUID) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateEntID() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *SubscriptionUpsertBulk) SetAppID(v uuid.UUID) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateAppID() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *SubscriptionUpsertBulk) ClearAppID() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *SubscriptionUpsertBulk) SetUserID(v uuid.UUID) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateUserID() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *SubscriptionUpsertBulk) ClearUserID() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearUserID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *SubscriptionUpsertBulk) SetAppGoodID(v uuid.UUID) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateAppGoodID() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *SubscriptionUpsertBulk) ClearAppGoodID() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearAppGoodID()
	})
}

// SetNextExtendAt sets the "next_extend_at" field.
func (u *SubscriptionUpsertBulk) SetNextExtendAt(v uint32) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetNextExtendAt(v)
	})
}

// AddNextExtendAt adds v to the "next_extend_at" field.
func (u *SubscriptionUpsertBulk) AddNextExtendAt(v uint32) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.AddNextExtendAt(v)
	})
}

// UpdateNextExtendAt sets the "next_extend_at" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateNextExtendAt() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateNextExtendAt()
	})
}

// ClearNextExtendAt clears the value of the "next_extend_at" field.
func (u *SubscriptionUpsertBulk) ClearNextExtendAt() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearNextExtendAt()
	})
}

// SetPermanentQuota sets the "permanent_quota" field.
func (u *SubscriptionUpsertBulk) SetPermanentQuota(v uint32) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetPermanentQuota(v)
	})
}

// AddPermanentQuota adds v to the "permanent_quota" field.
func (u *SubscriptionUpsertBulk) AddPermanentQuota(v uint32) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.AddPermanentQuota(v)
	})
}

// UpdatePermanentQuota sets the "permanent_quota" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdatePermanentQuota() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdatePermanentQuota()
	})
}

// ClearPermanentQuota clears the value of the "permanent_quota" field.
func (u *SubscriptionUpsertBulk) ClearPermanentQuota() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearPermanentQuota()
	})
}

// SetConsumedQuota sets the "consumed_quota" field.
func (u *SubscriptionUpsertBulk) SetConsumedQuota(v uint32) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetConsumedQuota(v)
	})
}

// AddConsumedQuota adds v to the "consumed_quota" field.
func (u *SubscriptionUpsertBulk) AddConsumedQuota(v uint32) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.AddConsumedQuota(v)
	})
}

// UpdateConsumedQuota sets the "consumed_quota" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateConsumedQuota() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateConsumedQuota()
	})
}

// ClearConsumedQuota clears the value of the "consumed_quota" field.
func (u *SubscriptionUpsertBulk) ClearConsumedQuota() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearConsumedQuota()
	})
}

// SetAutoExtend sets the "auto_extend" field.
func (u *SubscriptionUpsertBulk) SetAutoExtend(v bool) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetAutoExtend(v)
	})
}

// UpdateAutoExtend sets the "auto_extend" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateAutoExtend() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateAutoExtend()
	})
}

// ClearAutoExtend clears the value of the "auto_extend" field.
func (u *SubscriptionUpsertBulk) ClearAutoExtend() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearAutoExtend()
	})
}

// Exec executes the query.
func (u *SubscriptionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the SubscriptionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for SubscriptionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

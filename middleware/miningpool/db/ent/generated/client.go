// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/NpoolPlatform/kunman/middleware/miningpool/db/ent/generated/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/miningpool/db/ent/generated/apppool"
	"github.com/NpoolPlatform/kunman/middleware/miningpool/db/ent/generated/coin"
	"github.com/NpoolPlatform/kunman/middleware/miningpool/db/ent/generated/fractionwithdrawal"
	"github.com/NpoolPlatform/kunman/middleware/miningpool/db/ent/generated/fractionwithdrawalrule"
	"github.com/NpoolPlatform/kunman/middleware/miningpool/db/ent/generated/gooduser"
	"github.com/NpoolPlatform/kunman/middleware/miningpool/db/ent/generated/orderuser"
	"github.com/NpoolPlatform/kunman/middleware/miningpool/db/ent/generated/pool"
	"github.com/NpoolPlatform/kunman/middleware/miningpool/db/ent/generated/rootuser"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AppPool is the client for interacting with the AppPool builders.
	AppPool *AppPoolClient
	// Coin is the client for interacting with the Coin builders.
	Coin *CoinClient
	// FractionWithdrawal is the client for interacting with the FractionWithdrawal builders.
	FractionWithdrawal *FractionWithdrawalClient
	// FractionWithdrawalRule is the client for interacting with the FractionWithdrawalRule builders.
	FractionWithdrawalRule *FractionWithdrawalRuleClient
	// GoodUser is the client for interacting with the GoodUser builders.
	GoodUser *GoodUserClient
	// OrderUser is the client for interacting with the OrderUser builders.
	OrderUser *OrderUserClient
	// Pool is the client for interacting with the Pool builders.
	Pool *PoolClient
	// RootUser is the client for interacting with the RootUser builders.
	RootUser *RootUserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AppPool = NewAppPoolClient(c.config)
	c.Coin = NewCoinClient(c.config)
	c.FractionWithdrawal = NewFractionWithdrawalClient(c.config)
	c.FractionWithdrawalRule = NewFractionWithdrawalRuleClient(c.config)
	c.GoodUser = NewGoodUserClient(c.config)
	c.OrderUser = NewOrderUserClient(c.config)
	c.Pool = NewPoolClient(c.config)
	c.RootUser = NewRootUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("generated: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("generated: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                    ctx,
		config:                 cfg,
		AppPool:                NewAppPoolClient(cfg),
		Coin:                   NewCoinClient(cfg),
		FractionWithdrawal:     NewFractionWithdrawalClient(cfg),
		FractionWithdrawalRule: NewFractionWithdrawalRuleClient(cfg),
		GoodUser:               NewGoodUserClient(cfg),
		OrderUser:              NewOrderUserClient(cfg),
		Pool:                   NewPoolClient(cfg),
		RootUser:               NewRootUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                    ctx,
		config:                 cfg,
		AppPool:                NewAppPoolClient(cfg),
		Coin:                   NewCoinClient(cfg),
		FractionWithdrawal:     NewFractionWithdrawalClient(cfg),
		FractionWithdrawalRule: NewFractionWithdrawalRuleClient(cfg),
		GoodUser:               NewGoodUserClient(cfg),
		OrderUser:              NewOrderUserClient(cfg),
		Pool:                   NewPoolClient(cfg),
		RootUser:               NewRootUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AppPool.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AppPool, c.Coin, c.FractionWithdrawal, c.FractionWithdrawalRule, c.GoodUser,
		c.OrderUser, c.Pool, c.RootUser,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AppPool, c.Coin, c.FractionWithdrawal, c.FractionWithdrawalRule, c.GoodUser,
		c.OrderUser, c.Pool, c.RootUser,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AppPoolMutation:
		return c.AppPool.mutate(ctx, m)
	case *CoinMutation:
		return c.Coin.mutate(ctx, m)
	case *FractionWithdrawalMutation:
		return c.FractionWithdrawal.mutate(ctx, m)
	case *FractionWithdrawalRuleMutation:
		return c.FractionWithdrawalRule.mutate(ctx, m)
	case *GoodUserMutation:
		return c.GoodUser.mutate(ctx, m)
	case *OrderUserMutation:
		return c.OrderUser.mutate(ctx, m)
	case *PoolMutation:
		return c.Pool.mutate(ctx, m)
	case *RootUserMutation:
		return c.RootUser.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("generated: unknown mutation type %T", m)
	}
}

// AppPoolClient is a client for the AppPool schema.
type AppPoolClient struct {
	config
}

// NewAppPoolClient returns a client for the AppPool from the given config.
func NewAppPoolClient(c config) *AppPoolClient {
	return &AppPoolClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apppool.Hooks(f(g(h())))`.
func (c *AppPoolClient) Use(hooks ...Hook) {
	c.hooks.AppPool = append(c.hooks.AppPool, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `apppool.Intercept(f(g(h())))`.
func (c *AppPoolClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppPool = append(c.inters.AppPool, interceptors...)
}

// Create returns a builder for creating a AppPool entity.
func (c *AppPoolClient) Create() *AppPoolCreate {
	mutation := newAppPoolMutation(c.config, OpCreate)
	return &AppPoolCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppPool entities.
func (c *AppPoolClient) CreateBulk(builders ...*AppPoolCreate) *AppPoolCreateBulk {
	return &AppPoolCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AppPoolClient) MapCreateBulk(slice any, setFunc func(*AppPoolCreate, int)) *AppPoolCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AppPoolCreateBulk{err: fmt.Errorf("calling to AppPoolClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AppPoolCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AppPoolCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppPool.
func (c *AppPoolClient) Update() *AppPoolUpdate {
	mutation := newAppPoolMutation(c.config, OpUpdate)
	return &AppPoolUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppPoolClient) UpdateOne(ap *AppPool) *AppPoolUpdateOne {
	mutation := newAppPoolMutation(c.config, OpUpdateOne, withAppPool(ap))
	return &AppPoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppPoolClient) UpdateOneID(id uint32) *AppPoolUpdateOne {
	mutation := newAppPoolMutation(c.config, OpUpdateOne, withAppPoolID(id))
	return &AppPoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppPool.
func (c *AppPoolClient) Delete() *AppPoolDelete {
	mutation := newAppPoolMutation(c.config, OpDelete)
	return &AppPoolDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppPoolClient) DeleteOne(ap *AppPool) *AppPoolDeleteOne {
	return c.DeleteOneID(ap.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppPoolClient) DeleteOneID(id uint32) *AppPoolDeleteOne {
	builder := c.Delete().Where(apppool.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppPoolDeleteOne{builder}
}

// Query returns a query builder for AppPool.
func (c *AppPoolClient) Query() *AppPoolQuery {
	return &AppPoolQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppPool},
		inters: c.Interceptors(),
	}
}

// Get returns a AppPool entity by its id.
func (c *AppPoolClient) Get(ctx context.Context, id uint32) (*AppPool, error) {
	return c.Query().Where(apppool.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppPoolClient) GetX(ctx context.Context, id uint32) *AppPool {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppPoolClient) Hooks() []Hook {
	return c.hooks.AppPool
}

// Interceptors returns the client interceptors.
func (c *AppPoolClient) Interceptors() []Interceptor {
	return c.inters.AppPool
}

func (c *AppPoolClient) mutate(ctx context.Context, m *AppPoolMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppPoolCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppPoolUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppPoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppPoolDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown AppPool mutation op: %q", m.Op())
	}
}

// CoinClient is a client for the Coin schema.
type CoinClient struct {
	config
}

// NewCoinClient returns a client for the Coin from the given config.
func NewCoinClient(c config) *CoinClient {
	return &CoinClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coin.Hooks(f(g(h())))`.
func (c *CoinClient) Use(hooks ...Hook) {
	c.hooks.Coin = append(c.hooks.Coin, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `coin.Intercept(f(g(h())))`.
func (c *CoinClient) Intercept(interceptors ...Interceptor) {
	c.inters.Coin = append(c.inters.Coin, interceptors...)
}

// Create returns a builder for creating a Coin entity.
func (c *CoinClient) Create() *CoinCreate {
	mutation := newCoinMutation(c.config, OpCreate)
	return &CoinCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Coin entities.
func (c *CoinClient) CreateBulk(builders ...*CoinCreate) *CoinCreateBulk {
	return &CoinCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CoinClient) MapCreateBulk(slice any, setFunc func(*CoinCreate, int)) *CoinCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CoinCreateBulk{err: fmt.Errorf("calling to CoinClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CoinCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CoinCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Coin.
func (c *CoinClient) Update() *CoinUpdate {
	mutation := newCoinMutation(c.config, OpUpdate)
	return &CoinUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CoinClient) UpdateOne(co *Coin) *CoinUpdateOne {
	mutation := newCoinMutation(c.config, OpUpdateOne, withCoin(co))
	return &CoinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CoinClient) UpdateOneID(id uint32) *CoinUpdateOne {
	mutation := newCoinMutation(c.config, OpUpdateOne, withCoinID(id))
	return &CoinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Coin.
func (c *CoinClient) Delete() *CoinDelete {
	mutation := newCoinMutation(c.config, OpDelete)
	return &CoinDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CoinClient) DeleteOne(co *Coin) *CoinDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CoinClient) DeleteOneID(id uint32) *CoinDeleteOne {
	builder := c.Delete().Where(coin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CoinDeleteOne{builder}
}

// Query returns a query builder for Coin.
func (c *CoinClient) Query() *CoinQuery {
	return &CoinQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCoin},
		inters: c.Interceptors(),
	}
}

// Get returns a Coin entity by its id.
func (c *CoinClient) Get(ctx context.Context, id uint32) (*Coin, error) {
	return c.Query().Where(coin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CoinClient) GetX(ctx context.Context, id uint32) *Coin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CoinClient) Hooks() []Hook {
	return c.hooks.Coin
}

// Interceptors returns the client interceptors.
func (c *CoinClient) Interceptors() []Interceptor {
	return c.inters.Coin
}

func (c *CoinClient) mutate(ctx context.Context, m *CoinMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CoinCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CoinUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CoinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CoinDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Coin mutation op: %q", m.Op())
	}
}

// FractionWithdrawalClient is a client for the FractionWithdrawal schema.
type FractionWithdrawalClient struct {
	config
}

// NewFractionWithdrawalClient returns a client for the FractionWithdrawal from the given config.
func NewFractionWithdrawalClient(c config) *FractionWithdrawalClient {
	return &FractionWithdrawalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fractionwithdrawal.Hooks(f(g(h())))`.
func (c *FractionWithdrawalClient) Use(hooks ...Hook) {
	c.hooks.FractionWithdrawal = append(c.hooks.FractionWithdrawal, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `fractionwithdrawal.Intercept(f(g(h())))`.
func (c *FractionWithdrawalClient) Intercept(interceptors ...Interceptor) {
	c.inters.FractionWithdrawal = append(c.inters.FractionWithdrawal, interceptors...)
}

// Create returns a builder for creating a FractionWithdrawal entity.
func (c *FractionWithdrawalClient) Create() *FractionWithdrawalCreate {
	mutation := newFractionWithdrawalMutation(c.config, OpCreate)
	return &FractionWithdrawalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FractionWithdrawal entities.
func (c *FractionWithdrawalClient) CreateBulk(builders ...*FractionWithdrawalCreate) *FractionWithdrawalCreateBulk {
	return &FractionWithdrawalCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FractionWithdrawalClient) MapCreateBulk(slice any, setFunc func(*FractionWithdrawalCreate, int)) *FractionWithdrawalCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FractionWithdrawalCreateBulk{err: fmt.Errorf("calling to FractionWithdrawalClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FractionWithdrawalCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FractionWithdrawalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FractionWithdrawal.
func (c *FractionWithdrawalClient) Update() *FractionWithdrawalUpdate {
	mutation := newFractionWithdrawalMutation(c.config, OpUpdate)
	return &FractionWithdrawalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FractionWithdrawalClient) UpdateOne(fw *FractionWithdrawal) *FractionWithdrawalUpdateOne {
	mutation := newFractionWithdrawalMutation(c.config, OpUpdateOne, withFractionWithdrawal(fw))
	return &FractionWithdrawalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FractionWithdrawalClient) UpdateOneID(id uint32) *FractionWithdrawalUpdateOne {
	mutation := newFractionWithdrawalMutation(c.config, OpUpdateOne, withFractionWithdrawalID(id))
	return &FractionWithdrawalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FractionWithdrawal.
func (c *FractionWithdrawalClient) Delete() *FractionWithdrawalDelete {
	mutation := newFractionWithdrawalMutation(c.config, OpDelete)
	return &FractionWithdrawalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FractionWithdrawalClient) DeleteOne(fw *FractionWithdrawal) *FractionWithdrawalDeleteOne {
	return c.DeleteOneID(fw.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FractionWithdrawalClient) DeleteOneID(id uint32) *FractionWithdrawalDeleteOne {
	builder := c.Delete().Where(fractionwithdrawal.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FractionWithdrawalDeleteOne{builder}
}

// Query returns a query builder for FractionWithdrawal.
func (c *FractionWithdrawalClient) Query() *FractionWithdrawalQuery {
	return &FractionWithdrawalQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFractionWithdrawal},
		inters: c.Interceptors(),
	}
}

// Get returns a FractionWithdrawal entity by its id.
func (c *FractionWithdrawalClient) Get(ctx context.Context, id uint32) (*FractionWithdrawal, error) {
	return c.Query().Where(fractionwithdrawal.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FractionWithdrawalClient) GetX(ctx context.Context, id uint32) *FractionWithdrawal {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FractionWithdrawalClient) Hooks() []Hook {
	return c.hooks.FractionWithdrawal
}

// Interceptors returns the client interceptors.
func (c *FractionWithdrawalClient) Interceptors() []Interceptor {
	return c.inters.FractionWithdrawal
}

func (c *FractionWithdrawalClient) mutate(ctx context.Context, m *FractionWithdrawalMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FractionWithdrawalCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FractionWithdrawalUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FractionWithdrawalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FractionWithdrawalDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown FractionWithdrawal mutation op: %q", m.Op())
	}
}

// FractionWithdrawalRuleClient is a client for the FractionWithdrawalRule schema.
type FractionWithdrawalRuleClient struct {
	config
}

// NewFractionWithdrawalRuleClient returns a client for the FractionWithdrawalRule from the given config.
func NewFractionWithdrawalRuleClient(c config) *FractionWithdrawalRuleClient {
	return &FractionWithdrawalRuleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fractionwithdrawalrule.Hooks(f(g(h())))`.
func (c *FractionWithdrawalRuleClient) Use(hooks ...Hook) {
	c.hooks.FractionWithdrawalRule = append(c.hooks.FractionWithdrawalRule, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `fractionwithdrawalrule.Intercept(f(g(h())))`.
func (c *FractionWithdrawalRuleClient) Intercept(interceptors ...Interceptor) {
	c.inters.FractionWithdrawalRule = append(c.inters.FractionWithdrawalRule, interceptors...)
}

// Create returns a builder for creating a FractionWithdrawalRule entity.
func (c *FractionWithdrawalRuleClient) Create() *FractionWithdrawalRuleCreate {
	mutation := newFractionWithdrawalRuleMutation(c.config, OpCreate)
	return &FractionWithdrawalRuleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FractionWithdrawalRule entities.
func (c *FractionWithdrawalRuleClient) CreateBulk(builders ...*FractionWithdrawalRuleCreate) *FractionWithdrawalRuleCreateBulk {
	return &FractionWithdrawalRuleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FractionWithdrawalRuleClient) MapCreateBulk(slice any, setFunc func(*FractionWithdrawalRuleCreate, int)) *FractionWithdrawalRuleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FractionWithdrawalRuleCreateBulk{err: fmt.Errorf("calling to FractionWithdrawalRuleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FractionWithdrawalRuleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FractionWithdrawalRuleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FractionWithdrawalRule.
func (c *FractionWithdrawalRuleClient) Update() *FractionWithdrawalRuleUpdate {
	mutation := newFractionWithdrawalRuleMutation(c.config, OpUpdate)
	return &FractionWithdrawalRuleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FractionWithdrawalRuleClient) UpdateOne(fwr *FractionWithdrawalRule) *FractionWithdrawalRuleUpdateOne {
	mutation := newFractionWithdrawalRuleMutation(c.config, OpUpdateOne, withFractionWithdrawalRule(fwr))
	return &FractionWithdrawalRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FractionWithdrawalRuleClient) UpdateOneID(id uint32) *FractionWithdrawalRuleUpdateOne {
	mutation := newFractionWithdrawalRuleMutation(c.config, OpUpdateOne, withFractionWithdrawalRuleID(id))
	return &FractionWithdrawalRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FractionWithdrawalRule.
func (c *FractionWithdrawalRuleClient) Delete() *FractionWithdrawalRuleDelete {
	mutation := newFractionWithdrawalRuleMutation(c.config, OpDelete)
	return &FractionWithdrawalRuleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FractionWithdrawalRuleClient) DeleteOne(fwr *FractionWithdrawalRule) *FractionWithdrawalRuleDeleteOne {
	return c.DeleteOneID(fwr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FractionWithdrawalRuleClient) DeleteOneID(id uint32) *FractionWithdrawalRuleDeleteOne {
	builder := c.Delete().Where(fractionwithdrawalrule.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FractionWithdrawalRuleDeleteOne{builder}
}

// Query returns a query builder for FractionWithdrawalRule.
func (c *FractionWithdrawalRuleClient) Query() *FractionWithdrawalRuleQuery {
	return &FractionWithdrawalRuleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFractionWithdrawalRule},
		inters: c.Interceptors(),
	}
}

// Get returns a FractionWithdrawalRule entity by its id.
func (c *FractionWithdrawalRuleClient) Get(ctx context.Context, id uint32) (*FractionWithdrawalRule, error) {
	return c.Query().Where(fractionwithdrawalrule.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FractionWithdrawalRuleClient) GetX(ctx context.Context, id uint32) *FractionWithdrawalRule {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FractionWithdrawalRuleClient) Hooks() []Hook {
	return c.hooks.FractionWithdrawalRule
}

// Interceptors returns the client interceptors.
func (c *FractionWithdrawalRuleClient) Interceptors() []Interceptor {
	return c.inters.FractionWithdrawalRule
}

func (c *FractionWithdrawalRuleClient) mutate(ctx context.Context, m *FractionWithdrawalRuleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FractionWithdrawalRuleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FractionWithdrawalRuleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FractionWithdrawalRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FractionWithdrawalRuleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown FractionWithdrawalRule mutation op: %q", m.Op())
	}
}

// GoodUserClient is a client for the GoodUser schema.
type GoodUserClient struct {
	config
}

// NewGoodUserClient returns a client for the GoodUser from the given config.
func NewGoodUserClient(c config) *GoodUserClient {
	return &GoodUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gooduser.Hooks(f(g(h())))`.
func (c *GoodUserClient) Use(hooks ...Hook) {
	c.hooks.GoodUser = append(c.hooks.GoodUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `gooduser.Intercept(f(g(h())))`.
func (c *GoodUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.GoodUser = append(c.inters.GoodUser, interceptors...)
}

// Create returns a builder for creating a GoodUser entity.
func (c *GoodUserClient) Create() *GoodUserCreate {
	mutation := newGoodUserMutation(c.config, OpCreate)
	return &GoodUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoodUser entities.
func (c *GoodUserClient) CreateBulk(builders ...*GoodUserCreate) *GoodUserCreateBulk {
	return &GoodUserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GoodUserClient) MapCreateBulk(slice any, setFunc func(*GoodUserCreate, int)) *GoodUserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GoodUserCreateBulk{err: fmt.Errorf("calling to GoodUserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GoodUserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GoodUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoodUser.
func (c *GoodUserClient) Update() *GoodUserUpdate {
	mutation := newGoodUserMutation(c.config, OpUpdate)
	return &GoodUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodUserClient) UpdateOne(gu *GoodUser) *GoodUserUpdateOne {
	mutation := newGoodUserMutation(c.config, OpUpdateOne, withGoodUser(gu))
	return &GoodUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodUserClient) UpdateOneID(id uint32) *GoodUserUpdateOne {
	mutation := newGoodUserMutation(c.config, OpUpdateOne, withGoodUserID(id))
	return &GoodUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoodUser.
func (c *GoodUserClient) Delete() *GoodUserDelete {
	mutation := newGoodUserMutation(c.config, OpDelete)
	return &GoodUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GoodUserClient) DeleteOne(gu *GoodUser) *GoodUserDeleteOne {
	return c.DeleteOneID(gu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GoodUserClient) DeleteOneID(id uint32) *GoodUserDeleteOne {
	builder := c.Delete().Where(gooduser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodUserDeleteOne{builder}
}

// Query returns a query builder for GoodUser.
func (c *GoodUserClient) Query() *GoodUserQuery {
	return &GoodUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGoodUser},
		inters: c.Interceptors(),
	}
}

// Get returns a GoodUser entity by its id.
func (c *GoodUserClient) Get(ctx context.Context, id uint32) (*GoodUser, error) {
	return c.Query().Where(gooduser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodUserClient) GetX(ctx context.Context, id uint32) *GoodUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GoodUserClient) Hooks() []Hook {
	return c.hooks.GoodUser
}

// Interceptors returns the client interceptors.
func (c *GoodUserClient) Interceptors() []Interceptor {
	return c.inters.GoodUser
}

func (c *GoodUserClient) mutate(ctx context.Context, m *GoodUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GoodUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GoodUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GoodUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GoodUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown GoodUser mutation op: %q", m.Op())
	}
}

// OrderUserClient is a client for the OrderUser schema.
type OrderUserClient struct {
	config
}

// NewOrderUserClient returns a client for the OrderUser from the given config.
func NewOrderUserClient(c config) *OrderUserClient {
	return &OrderUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderuser.Hooks(f(g(h())))`.
func (c *OrderUserClient) Use(hooks ...Hook) {
	c.hooks.OrderUser = append(c.hooks.OrderUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `orderuser.Intercept(f(g(h())))`.
func (c *OrderUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderUser = append(c.inters.OrderUser, interceptors...)
}

// Create returns a builder for creating a OrderUser entity.
func (c *OrderUserClient) Create() *OrderUserCreate {
	mutation := newOrderUserMutation(c.config, OpCreate)
	return &OrderUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderUser entities.
func (c *OrderUserClient) CreateBulk(builders ...*OrderUserCreate) *OrderUserCreateBulk {
	return &OrderUserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderUserClient) MapCreateBulk(slice any, setFunc func(*OrderUserCreate, int)) *OrderUserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderUserCreateBulk{err: fmt.Errorf("calling to OrderUserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderUserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderUser.
func (c *OrderUserClient) Update() *OrderUserUpdate {
	mutation := newOrderUserMutation(c.config, OpUpdate)
	return &OrderUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderUserClient) UpdateOne(ou *OrderUser) *OrderUserUpdateOne {
	mutation := newOrderUserMutation(c.config, OpUpdateOne, withOrderUser(ou))
	return &OrderUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderUserClient) UpdateOneID(id uint32) *OrderUserUpdateOne {
	mutation := newOrderUserMutation(c.config, OpUpdateOne, withOrderUserID(id))
	return &OrderUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderUser.
func (c *OrderUserClient) Delete() *OrderUserDelete {
	mutation := newOrderUserMutation(c.config, OpDelete)
	return &OrderUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderUserClient) DeleteOne(ou *OrderUser) *OrderUserDeleteOne {
	return c.DeleteOneID(ou.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderUserClient) DeleteOneID(id uint32) *OrderUserDeleteOne {
	builder := c.Delete().Where(orderuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderUserDeleteOne{builder}
}

// Query returns a query builder for OrderUser.
func (c *OrderUserClient) Query() *OrderUserQuery {
	return &OrderUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderUser},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderUser entity by its id.
func (c *OrderUserClient) Get(ctx context.Context, id uint32) (*OrderUser, error) {
	return c.Query().Where(orderuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderUserClient) GetX(ctx context.Context, id uint32) *OrderUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderUserClient) Hooks() []Hook {
	return c.hooks.OrderUser
}

// Interceptors returns the client interceptors.
func (c *OrderUserClient) Interceptors() []Interceptor {
	return c.inters.OrderUser
}

func (c *OrderUserClient) mutate(ctx context.Context, m *OrderUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown OrderUser mutation op: %q", m.Op())
	}
}

// PoolClient is a client for the Pool schema.
type PoolClient struct {
	config
}

// NewPoolClient returns a client for the Pool from the given config.
func NewPoolClient(c config) *PoolClient {
	return &PoolClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pool.Hooks(f(g(h())))`.
func (c *PoolClient) Use(hooks ...Hook) {
	c.hooks.Pool = append(c.hooks.Pool, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `pool.Intercept(f(g(h())))`.
func (c *PoolClient) Intercept(interceptors ...Interceptor) {
	c.inters.Pool = append(c.inters.Pool, interceptors...)
}

// Create returns a builder for creating a Pool entity.
func (c *PoolClient) Create() *PoolCreate {
	mutation := newPoolMutation(c.config, OpCreate)
	return &PoolCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Pool entities.
func (c *PoolClient) CreateBulk(builders ...*PoolCreate) *PoolCreateBulk {
	return &PoolCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PoolClient) MapCreateBulk(slice any, setFunc func(*PoolCreate, int)) *PoolCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PoolCreateBulk{err: fmt.Errorf("calling to PoolClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PoolCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PoolCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Pool.
func (c *PoolClient) Update() *PoolUpdate {
	mutation := newPoolMutation(c.config, OpUpdate)
	return &PoolUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PoolClient) UpdateOne(po *Pool) *PoolUpdateOne {
	mutation := newPoolMutation(c.config, OpUpdateOne, withPool(po))
	return &PoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PoolClient) UpdateOneID(id uint32) *PoolUpdateOne {
	mutation := newPoolMutation(c.config, OpUpdateOne, withPoolID(id))
	return &PoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Pool.
func (c *PoolClient) Delete() *PoolDelete {
	mutation := newPoolMutation(c.config, OpDelete)
	return &PoolDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PoolClient) DeleteOne(po *Pool) *PoolDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PoolClient) DeleteOneID(id uint32) *PoolDeleteOne {
	builder := c.Delete().Where(pool.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PoolDeleteOne{builder}
}

// Query returns a query builder for Pool.
func (c *PoolClient) Query() *PoolQuery {
	return &PoolQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePool},
		inters: c.Interceptors(),
	}
}

// Get returns a Pool entity by its id.
func (c *PoolClient) Get(ctx context.Context, id uint32) (*Pool, error) {
	return c.Query().Where(pool.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PoolClient) GetX(ctx context.Context, id uint32) *Pool {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PoolClient) Hooks() []Hook {
	return c.hooks.Pool
}

// Interceptors returns the client interceptors.
func (c *PoolClient) Interceptors() []Interceptor {
	return c.inters.Pool
}

func (c *PoolClient) mutate(ctx context.Context, m *PoolMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PoolCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PoolUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PoolDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Pool mutation op: %q", m.Op())
	}
}

// RootUserClient is a client for the RootUser schema.
type RootUserClient struct {
	config
}

// NewRootUserClient returns a client for the RootUser from the given config.
func NewRootUserClient(c config) *RootUserClient {
	return &RootUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rootuser.Hooks(f(g(h())))`.
func (c *RootUserClient) Use(hooks ...Hook) {
	c.hooks.RootUser = append(c.hooks.RootUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rootuser.Intercept(f(g(h())))`.
func (c *RootUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.RootUser = append(c.inters.RootUser, interceptors...)
}

// Create returns a builder for creating a RootUser entity.
func (c *RootUserClient) Create() *RootUserCreate {
	mutation := newRootUserMutation(c.config, OpCreate)
	return &RootUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RootUser entities.
func (c *RootUserClient) CreateBulk(builders ...*RootUserCreate) *RootUserCreateBulk {
	return &RootUserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RootUserClient) MapCreateBulk(slice any, setFunc func(*RootUserCreate, int)) *RootUserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RootUserCreateBulk{err: fmt.Errorf("calling to RootUserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RootUserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RootUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RootUser.
func (c *RootUserClient) Update() *RootUserUpdate {
	mutation := newRootUserMutation(c.config, OpUpdate)
	return &RootUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RootUserClient) UpdateOne(ru *RootUser) *RootUserUpdateOne {
	mutation := newRootUserMutation(c.config, OpUpdateOne, withRootUser(ru))
	return &RootUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RootUserClient) UpdateOneID(id uint32) *RootUserUpdateOne {
	mutation := newRootUserMutation(c.config, OpUpdateOne, withRootUserID(id))
	return &RootUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RootUser.
func (c *RootUserClient) Delete() *RootUserDelete {
	mutation := newRootUserMutation(c.config, OpDelete)
	return &RootUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RootUserClient) DeleteOne(ru *RootUser) *RootUserDeleteOne {
	return c.DeleteOneID(ru.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RootUserClient) DeleteOneID(id uint32) *RootUserDeleteOne {
	builder := c.Delete().Where(rootuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RootUserDeleteOne{builder}
}

// Query returns a query builder for RootUser.
func (c *RootUserClient) Query() *RootUserQuery {
	return &RootUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRootUser},
		inters: c.Interceptors(),
	}
}

// Get returns a RootUser entity by its id.
func (c *RootUserClient) Get(ctx context.Context, id uint32) (*RootUser, error) {
	return c.Query().Where(rootuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RootUserClient) GetX(ctx context.Context, id uint32) *RootUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RootUserClient) Hooks() []Hook {
	return c.hooks.RootUser
}

// Interceptors returns the client interceptors.
func (c *RootUserClient) Interceptors() []Interceptor {
	return c.inters.RootUser
}

func (c *RootUserClient) mutate(ctx context.Context, m *RootUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RootUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RootUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RootUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RootUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown RootUser mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AppPool, Coin, FractionWithdrawal, FractionWithdrawalRule, GoodUser, OrderUser,
		Pool, RootUser []ent.Hook
	}
	inters struct {
		AppPool, Coin, FractionWithdrawal, FractionWithdrawalRule, GoodUser, OrderUser,
		Pool, RootUser []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}

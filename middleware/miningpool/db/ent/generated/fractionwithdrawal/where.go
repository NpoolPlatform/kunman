// Code generated by ent, DO NOT EDIT.

package fractionwithdrawal

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/miningpool/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEQ(FieldDeletedAt, v))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEQ(FieldEntID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEQ(FieldAppID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEQ(FieldUserID, v))
}

// OrderUserID applies equality check predicate on the "order_user_id" field. It's identical to OrderUserIDEQ.
func OrderUserID(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEQ(FieldOrderUserID, v))
}

// CoinTypeID applies equality check predicate on the "coin_type_id" field. It's identical to CoinTypeIDEQ.
func CoinTypeID(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEQ(FieldCoinTypeID, v))
}

// FractionWithdrawState applies equality check predicate on the "fraction_withdraw_state" field. It's identical to FractionWithdrawStateEQ.
func FractionWithdrawState(v string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEQ(FieldFractionWithdrawState, v))
}

// WithdrawAt applies equality check predicate on the "withdraw_at" field. It's identical to WithdrawAtEQ.
func WithdrawAt(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEQ(FieldWithdrawAt, v))
}

// PromisePayAt applies equality check predicate on the "promise_pay_at" field. It's identical to PromisePayAtEQ.
func PromisePayAt(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEQ(FieldPromisePayAt, v))
}

// Msg applies equality check predicate on the "msg" field. It's identical to MsgEQ.
func Msg(v string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEQ(FieldMsg, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldLTE(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldLTE(FieldEntID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldLTE(FieldAppID, v))
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldIsNull(FieldAppID))
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNotNull(FieldAppID))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldLTE(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNotNull(FieldUserID))
}

// OrderUserIDEQ applies the EQ predicate on the "order_user_id" field.
func OrderUserIDEQ(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEQ(FieldOrderUserID, v))
}

// OrderUserIDNEQ applies the NEQ predicate on the "order_user_id" field.
func OrderUserIDNEQ(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNEQ(FieldOrderUserID, v))
}

// OrderUserIDIn applies the In predicate on the "order_user_id" field.
func OrderUserIDIn(vs ...uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldIn(FieldOrderUserID, vs...))
}

// OrderUserIDNotIn applies the NotIn predicate on the "order_user_id" field.
func OrderUserIDNotIn(vs ...uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNotIn(FieldOrderUserID, vs...))
}

// OrderUserIDGT applies the GT predicate on the "order_user_id" field.
func OrderUserIDGT(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldGT(FieldOrderUserID, v))
}

// OrderUserIDGTE applies the GTE predicate on the "order_user_id" field.
func OrderUserIDGTE(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldGTE(FieldOrderUserID, v))
}

// OrderUserIDLT applies the LT predicate on the "order_user_id" field.
func OrderUserIDLT(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldLT(FieldOrderUserID, v))
}

// OrderUserIDLTE applies the LTE predicate on the "order_user_id" field.
func OrderUserIDLTE(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldLTE(FieldOrderUserID, v))
}

// OrderUserIDIsNil applies the IsNil predicate on the "order_user_id" field.
func OrderUserIDIsNil() predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldIsNull(FieldOrderUserID))
}

// OrderUserIDNotNil applies the NotNil predicate on the "order_user_id" field.
func OrderUserIDNotNil() predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNotNull(FieldOrderUserID))
}

// CoinTypeIDEQ applies the EQ predicate on the "coin_type_id" field.
func CoinTypeIDEQ(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEQ(FieldCoinTypeID, v))
}

// CoinTypeIDNEQ applies the NEQ predicate on the "coin_type_id" field.
func CoinTypeIDNEQ(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNEQ(FieldCoinTypeID, v))
}

// CoinTypeIDIn applies the In predicate on the "coin_type_id" field.
func CoinTypeIDIn(vs ...uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldIn(FieldCoinTypeID, vs...))
}

// CoinTypeIDNotIn applies the NotIn predicate on the "coin_type_id" field.
func CoinTypeIDNotIn(vs ...uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNotIn(FieldCoinTypeID, vs...))
}

// CoinTypeIDGT applies the GT predicate on the "coin_type_id" field.
func CoinTypeIDGT(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldGT(FieldCoinTypeID, v))
}

// CoinTypeIDGTE applies the GTE predicate on the "coin_type_id" field.
func CoinTypeIDGTE(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldGTE(FieldCoinTypeID, v))
}

// CoinTypeIDLT applies the LT predicate on the "coin_type_id" field.
func CoinTypeIDLT(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldLT(FieldCoinTypeID, v))
}

// CoinTypeIDLTE applies the LTE predicate on the "coin_type_id" field.
func CoinTypeIDLTE(v uuid.UUID) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldLTE(FieldCoinTypeID, v))
}

// CoinTypeIDIsNil applies the IsNil predicate on the "coin_type_id" field.
func CoinTypeIDIsNil() predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldIsNull(FieldCoinTypeID))
}

// CoinTypeIDNotNil applies the NotNil predicate on the "coin_type_id" field.
func CoinTypeIDNotNil() predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNotNull(FieldCoinTypeID))
}

// FractionWithdrawStateEQ applies the EQ predicate on the "fraction_withdraw_state" field.
func FractionWithdrawStateEQ(v string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEQ(FieldFractionWithdrawState, v))
}

// FractionWithdrawStateNEQ applies the NEQ predicate on the "fraction_withdraw_state" field.
func FractionWithdrawStateNEQ(v string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNEQ(FieldFractionWithdrawState, v))
}

// FractionWithdrawStateIn applies the In predicate on the "fraction_withdraw_state" field.
func FractionWithdrawStateIn(vs ...string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldIn(FieldFractionWithdrawState, vs...))
}

// FractionWithdrawStateNotIn applies the NotIn predicate on the "fraction_withdraw_state" field.
func FractionWithdrawStateNotIn(vs ...string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNotIn(FieldFractionWithdrawState, vs...))
}

// FractionWithdrawStateGT applies the GT predicate on the "fraction_withdraw_state" field.
func FractionWithdrawStateGT(v string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldGT(FieldFractionWithdrawState, v))
}

// FractionWithdrawStateGTE applies the GTE predicate on the "fraction_withdraw_state" field.
func FractionWithdrawStateGTE(v string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldGTE(FieldFractionWithdrawState, v))
}

// FractionWithdrawStateLT applies the LT predicate on the "fraction_withdraw_state" field.
func FractionWithdrawStateLT(v string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldLT(FieldFractionWithdrawState, v))
}

// FractionWithdrawStateLTE applies the LTE predicate on the "fraction_withdraw_state" field.
func FractionWithdrawStateLTE(v string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldLTE(FieldFractionWithdrawState, v))
}

// FractionWithdrawStateContains applies the Contains predicate on the "fraction_withdraw_state" field.
func FractionWithdrawStateContains(v string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldContains(FieldFractionWithdrawState, v))
}

// FractionWithdrawStateHasPrefix applies the HasPrefix predicate on the "fraction_withdraw_state" field.
func FractionWithdrawStateHasPrefix(v string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldHasPrefix(FieldFractionWithdrawState, v))
}

// FractionWithdrawStateHasSuffix applies the HasSuffix predicate on the "fraction_withdraw_state" field.
func FractionWithdrawStateHasSuffix(v string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldHasSuffix(FieldFractionWithdrawState, v))
}

// FractionWithdrawStateIsNil applies the IsNil predicate on the "fraction_withdraw_state" field.
func FractionWithdrawStateIsNil() predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldIsNull(FieldFractionWithdrawState))
}

// FractionWithdrawStateNotNil applies the NotNil predicate on the "fraction_withdraw_state" field.
func FractionWithdrawStateNotNil() predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNotNull(FieldFractionWithdrawState))
}

// FractionWithdrawStateEqualFold applies the EqualFold predicate on the "fraction_withdraw_state" field.
func FractionWithdrawStateEqualFold(v string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEqualFold(FieldFractionWithdrawState, v))
}

// FractionWithdrawStateContainsFold applies the ContainsFold predicate on the "fraction_withdraw_state" field.
func FractionWithdrawStateContainsFold(v string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldContainsFold(FieldFractionWithdrawState, v))
}

// WithdrawAtEQ applies the EQ predicate on the "withdraw_at" field.
func WithdrawAtEQ(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEQ(FieldWithdrawAt, v))
}

// WithdrawAtNEQ applies the NEQ predicate on the "withdraw_at" field.
func WithdrawAtNEQ(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNEQ(FieldWithdrawAt, v))
}

// WithdrawAtIn applies the In predicate on the "withdraw_at" field.
func WithdrawAtIn(vs ...uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldIn(FieldWithdrawAt, vs...))
}

// WithdrawAtNotIn applies the NotIn predicate on the "withdraw_at" field.
func WithdrawAtNotIn(vs ...uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNotIn(FieldWithdrawAt, vs...))
}

// WithdrawAtGT applies the GT predicate on the "withdraw_at" field.
func WithdrawAtGT(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldGT(FieldWithdrawAt, v))
}

// WithdrawAtGTE applies the GTE predicate on the "withdraw_at" field.
func WithdrawAtGTE(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldGTE(FieldWithdrawAt, v))
}

// WithdrawAtLT applies the LT predicate on the "withdraw_at" field.
func WithdrawAtLT(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldLT(FieldWithdrawAt, v))
}

// WithdrawAtLTE applies the LTE predicate on the "withdraw_at" field.
func WithdrawAtLTE(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldLTE(FieldWithdrawAt, v))
}

// WithdrawAtIsNil applies the IsNil predicate on the "withdraw_at" field.
func WithdrawAtIsNil() predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldIsNull(FieldWithdrawAt))
}

// WithdrawAtNotNil applies the NotNil predicate on the "withdraw_at" field.
func WithdrawAtNotNil() predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNotNull(FieldWithdrawAt))
}

// PromisePayAtEQ applies the EQ predicate on the "promise_pay_at" field.
func PromisePayAtEQ(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEQ(FieldPromisePayAt, v))
}

// PromisePayAtNEQ applies the NEQ predicate on the "promise_pay_at" field.
func PromisePayAtNEQ(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNEQ(FieldPromisePayAt, v))
}

// PromisePayAtIn applies the In predicate on the "promise_pay_at" field.
func PromisePayAtIn(vs ...uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldIn(FieldPromisePayAt, vs...))
}

// PromisePayAtNotIn applies the NotIn predicate on the "promise_pay_at" field.
func PromisePayAtNotIn(vs ...uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNotIn(FieldPromisePayAt, vs...))
}

// PromisePayAtGT applies the GT predicate on the "promise_pay_at" field.
func PromisePayAtGT(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldGT(FieldPromisePayAt, v))
}

// PromisePayAtGTE applies the GTE predicate on the "promise_pay_at" field.
func PromisePayAtGTE(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldGTE(FieldPromisePayAt, v))
}

// PromisePayAtLT applies the LT predicate on the "promise_pay_at" field.
func PromisePayAtLT(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldLT(FieldPromisePayAt, v))
}

// PromisePayAtLTE applies the LTE predicate on the "promise_pay_at" field.
func PromisePayAtLTE(v uint32) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldLTE(FieldPromisePayAt, v))
}

// PromisePayAtIsNil applies the IsNil predicate on the "promise_pay_at" field.
func PromisePayAtIsNil() predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldIsNull(FieldPromisePayAt))
}

// PromisePayAtNotNil applies the NotNil predicate on the "promise_pay_at" field.
func PromisePayAtNotNil() predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNotNull(FieldPromisePayAt))
}

// MsgEQ applies the EQ predicate on the "msg" field.
func MsgEQ(v string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEQ(FieldMsg, v))
}

// MsgNEQ applies the NEQ predicate on the "msg" field.
func MsgNEQ(v string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNEQ(FieldMsg, v))
}

// MsgIn applies the In predicate on the "msg" field.
func MsgIn(vs ...string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldIn(FieldMsg, vs...))
}

// MsgNotIn applies the NotIn predicate on the "msg" field.
func MsgNotIn(vs ...string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNotIn(FieldMsg, vs...))
}

// MsgGT applies the GT predicate on the "msg" field.
func MsgGT(v string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldGT(FieldMsg, v))
}

// MsgGTE applies the GTE predicate on the "msg" field.
func MsgGTE(v string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldGTE(FieldMsg, v))
}

// MsgLT applies the LT predicate on the "msg" field.
func MsgLT(v string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldLT(FieldMsg, v))
}

// MsgLTE applies the LTE predicate on the "msg" field.
func MsgLTE(v string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldLTE(FieldMsg, v))
}

// MsgContains applies the Contains predicate on the "msg" field.
func MsgContains(v string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldContains(FieldMsg, v))
}

// MsgHasPrefix applies the HasPrefix predicate on the "msg" field.
func MsgHasPrefix(v string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldHasPrefix(FieldMsg, v))
}

// MsgHasSuffix applies the HasSuffix predicate on the "msg" field.
func MsgHasSuffix(v string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldHasSuffix(FieldMsg, v))
}

// MsgIsNil applies the IsNil predicate on the "msg" field.
func MsgIsNil() predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldIsNull(FieldMsg))
}

// MsgNotNil applies the NotNil predicate on the "msg" field.
func MsgNotNil() predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldNotNull(FieldMsg))
}

// MsgEqualFold applies the EqualFold predicate on the "msg" field.
func MsgEqualFold(v string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldEqualFold(FieldMsg, v))
}

// MsgContainsFold applies the ContainsFold predicate on the "msg" field.
func MsgContainsFold(v string) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.FieldContainsFold(FieldMsg, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FractionWithdrawal) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FractionWithdrawal) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FractionWithdrawal) predicate.FractionWithdrawal {
	return predicate.FractionWithdrawal(sql.NotPredicates(p))
}

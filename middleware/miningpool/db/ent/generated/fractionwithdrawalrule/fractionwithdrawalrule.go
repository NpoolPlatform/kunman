// Code generated by ent, DO NOT EDIT.

package fractionwithdrawalrule

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the fractionwithdrawalrule type in the database.
	Label = "fraction_withdrawal_rule"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldPoolCoinTypeID holds the string denoting the pool_coin_type_id field in the database.
	FieldPoolCoinTypeID = "pool_coin_type_id"
	// FieldWithdrawInterval holds the string denoting the withdraw_interval field in the database.
	FieldWithdrawInterval = "withdraw_interval"
	// FieldLeastWithdrawalAmount holds the string denoting the least_withdrawal_amount field in the database.
	FieldLeastWithdrawalAmount = "least_withdrawal_amount"
	// FieldPayoutThreshold holds the string denoting the payout_threshold field in the database.
	FieldPayoutThreshold = "payout_threshold"
	// FieldWithdrawFee holds the string denoting the withdraw_fee field in the database.
	FieldWithdrawFee = "withdraw_fee"
	// Table holds the table name of the fractionwithdrawalrule in the database.
	Table = "fraction_withdrawal_rules"
)

// Columns holds all SQL columns for fractionwithdrawalrule fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldEntID,
	FieldPoolCoinTypeID,
	FieldWithdrawInterval,
	FieldLeastWithdrawalAmount,
	FieldPayoutThreshold,
	FieldWithdrawFee,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() uint32
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() uint32
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() uint32
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt func() uint32
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultPoolCoinTypeID holds the default value on creation for the "pool_coin_type_id" field.
	DefaultPoolCoinTypeID func() uuid.UUID
	// DefaultWithdrawInterval holds the default value on creation for the "withdraw_interval" field.
	DefaultWithdrawInterval uint32
	// DefaultLeastWithdrawalAmount holds the default value on creation for the "least_withdrawal_amount" field.
	DefaultLeastWithdrawalAmount decimal.Decimal
	// DefaultPayoutThreshold holds the default value on creation for the "payout_threshold" field.
	DefaultPayoutThreshold decimal.Decimal
	// DefaultWithdrawFee holds the default value on creation for the "withdraw_fee" field.
	DefaultWithdrawFee decimal.Decimal
)

// OrderOption defines the ordering options for the FractionWithdrawalRule queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByPoolCoinTypeID orders the results by the pool_coin_type_id field.
func ByPoolCoinTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPoolCoinTypeID, opts...).ToFunc()
}

// ByWithdrawInterval orders the results by the withdraw_interval field.
func ByWithdrawInterval(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWithdrawInterval, opts...).ToFunc()
}

// ByLeastWithdrawalAmount orders the results by the least_withdrawal_amount field.
func ByLeastWithdrawalAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLeastWithdrawalAmount, opts...).ToFunc()
}

// ByPayoutThreshold orders the results by the payout_threshold field.
func ByPayoutThreshold(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayoutThreshold, opts...).ToFunc()
}

// ByWithdrawFee orders the results by the withdraw_fee field.
func ByWithdrawFee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWithdrawFee, opts...).ToFunc()
}

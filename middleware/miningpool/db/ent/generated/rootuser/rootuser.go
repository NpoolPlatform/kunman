// Code generated by ent, DO NOT EDIT.

package rootuser

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the rootuser type in the database.
	Label = "root_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPoolID holds the string denoting the pool_id field in the database.
	FieldPoolID = "pool_id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldAuthToken holds the string denoting the auth_token field in the database.
	FieldAuthToken = "auth_token"
	// FieldAuthTokenSalt holds the string denoting the auth_token_salt field in the database.
	FieldAuthTokenSalt = "auth_token_salt"
	// FieldAuthed holds the string denoting the authed field in the database.
	FieldAuthed = "authed"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// Table holds the table name of the rootuser in the database.
	Table = "root_users"
)

// Columns holds all SQL columns for rootuser fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldEntID,
	FieldName,
	FieldPoolID,
	FieldEmail,
	FieldAuthToken,
	FieldAuthTokenSalt,
	FieldAuthed,
	FieldRemark,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() uint32
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() uint32
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() uint32
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt func() uint32
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultPoolID holds the default value on creation for the "pool_id" field.
	DefaultPoolID func() uuid.UUID
	// DefaultEmail holds the default value on creation for the "email" field.
	DefaultEmail string
	// DefaultAuthToken holds the default value on creation for the "auth_token" field.
	DefaultAuthToken string
	// DefaultAuthTokenSalt holds the default value on creation for the "auth_token_salt" field.
	DefaultAuthTokenSalt string
	// DefaultAuthed holds the default value on creation for the "authed" field.
	DefaultAuthed bool
	// DefaultRemark holds the default value on creation for the "remark" field.
	DefaultRemark string
)

// OrderOption defines the ordering options for the RootUser queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPoolID orders the results by the pool_id field.
func ByPoolID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPoolID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByAuthToken orders the results by the auth_token field.
func ByAuthToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthToken, opts...).ToFunc()
}

// ByAuthTokenSalt orders the results by the auth_token_salt field.
func ByAuthTokenSalt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthTokenSalt, opts...).ToFunc()
}

// ByAuthed orders the results by the authed field.
func ByAuthed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthed, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

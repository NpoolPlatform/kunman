// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"

	"github.com/NpoolPlatform/kunman/middleware/miningpool/db/ent/generated"

	"entgo.io/ent/entql"
	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns a formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return privacy.Allowf(format, a...)
}

// Denyf returns a formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return privacy.Denyf(format, a...)
}

// Skipf returns a formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return privacy.Skipf(format, a...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
	// MutationRuleFunc type is an adapter which allows the use of
	// ordinary functions as mutation rules.
	MutationRuleFunc = privacy.MutationRuleFunc

	// QueryMutationRule is an interface which groups query and mutation rules.
	QueryMutationRule = privacy.QueryMutationRule
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, generated.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	return f(ctx, q)
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return privacy.AlwaysAllowRule()
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return privacy.AlwaysDenyRule()
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return privacy.ContextQueryMutationRule(eval)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op generated.Op) MutationRule {
	return privacy.OnMutationOperation(rule, op)
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op generated.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m generated.Mutation) error {
		return Denyf("generated/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The AppPoolQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppPoolQueryRuleFunc func(context.Context, *generated.AppPoolQuery) error

// EvalQuery return f(ctx, q).
func (f AppPoolQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppPoolQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppPoolQuery", q)
}

// The AppPoolMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppPoolMutationRuleFunc func(context.Context, *generated.AppPoolMutation) error

// EvalMutation calls f(ctx, m).
func (f AppPoolMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppPoolMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppPoolMutation", m)
}

// The CoinQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CoinQueryRuleFunc func(context.Context, *generated.CoinQuery) error

// EvalQuery return f(ctx, q).
func (f CoinQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.CoinQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.CoinQuery", q)
}

// The CoinMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CoinMutationRuleFunc func(context.Context, *generated.CoinMutation) error

// EvalMutation calls f(ctx, m).
func (f CoinMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.CoinMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.CoinMutation", m)
}

// The FractionWithdrawalQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FractionWithdrawalQueryRuleFunc func(context.Context, *generated.FractionWithdrawalQuery) error

// EvalQuery return f(ctx, q).
func (f FractionWithdrawalQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.FractionWithdrawalQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.FractionWithdrawalQuery", q)
}

// The FractionWithdrawalMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FractionWithdrawalMutationRuleFunc func(context.Context, *generated.FractionWithdrawalMutation) error

// EvalMutation calls f(ctx, m).
func (f FractionWithdrawalMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.FractionWithdrawalMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.FractionWithdrawalMutation", m)
}

// The FractionWithdrawalRuleQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FractionWithdrawalRuleQueryRuleFunc func(context.Context, *generated.FractionWithdrawalRuleQuery) error

// EvalQuery return f(ctx, q).
func (f FractionWithdrawalRuleQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.FractionWithdrawalRuleQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.FractionWithdrawalRuleQuery", q)
}

// The FractionWithdrawalRuleMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FractionWithdrawalRuleMutationRuleFunc func(context.Context, *generated.FractionWithdrawalRuleMutation) error

// EvalMutation calls f(ctx, m).
func (f FractionWithdrawalRuleMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.FractionWithdrawalRuleMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.FractionWithdrawalRuleMutation", m)
}

// The GoodUserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GoodUserQueryRuleFunc func(context.Context, *generated.GoodUserQuery) error

// EvalQuery return f(ctx, q).
func (f GoodUserQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.GoodUserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.GoodUserQuery", q)
}

// The GoodUserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GoodUserMutationRuleFunc func(context.Context, *generated.GoodUserMutation) error

// EvalMutation calls f(ctx, m).
func (f GoodUserMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.GoodUserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.GoodUserMutation", m)
}

// The OrderUserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrderUserQueryRuleFunc func(context.Context, *generated.OrderUserQuery) error

// EvalQuery return f(ctx, q).
func (f OrderUserQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OrderUserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.OrderUserQuery", q)
}

// The OrderUserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrderUserMutationRuleFunc func(context.Context, *generated.OrderUserMutation) error

// EvalMutation calls f(ctx, m).
func (f OrderUserMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.OrderUserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.OrderUserMutation", m)
}

// The PoolQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PoolQueryRuleFunc func(context.Context, *generated.PoolQuery) error

// EvalQuery return f(ctx, q).
func (f PoolQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.PoolQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.PoolQuery", q)
}

// The PoolMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PoolMutationRuleFunc func(context.Context, *generated.PoolMutation) error

// EvalMutation calls f(ctx, m).
func (f PoolMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.PoolMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.PoolMutation", m)
}

// The RootUserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RootUserQueryRuleFunc func(context.Context, *generated.RootUserQuery) error

// EvalQuery return f(ctx, q).
func (f RootUserQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.RootUserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.RootUserQuery", q)
}

// The RootUserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RootUserMutationRuleFunc func(context.Context, *generated.RootUserMutation) error

// EvalMutation calls f(ctx, m).
func (f RootUserMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.RootUserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.RootUserMutation", m)
}

type (
	// Filter is the interface that wraps the Where function
	// for filtering nodes in queries and mutations.
	Filter interface {
		// Where applies a filter on the executed query/mutation.
		Where(entql.P)
	}

	// The FilterFunc type is an adapter that allows the use of ordinary
	// functions as filters for query and mutation types.
	FilterFunc func(context.Context, Filter) error
)

// EvalQuery calls f(ctx, q) if the query implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	fr, err := queryFilter(q)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

// EvalMutation calls f(ctx, q) if the mutation implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	fr, err := mutationFilter(m)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

var _ QueryMutationRule = FilterFunc(nil)

func queryFilter(q generated.Query) (Filter, error) {
	switch q := q.(type) {
	case *generated.AppPoolQuery:
		return q.Filter(), nil
	case *generated.CoinQuery:
		return q.Filter(), nil
	case *generated.FractionWithdrawalQuery:
		return q.Filter(), nil
	case *generated.FractionWithdrawalRuleQuery:
		return q.Filter(), nil
	case *generated.GoodUserQuery:
		return q.Filter(), nil
	case *generated.OrderUserQuery:
		return q.Filter(), nil
	case *generated.PoolQuery:
		return q.Filter(), nil
	case *generated.RootUserQuery:
		return q.Filter(), nil
	default:
		return nil, Denyf("generated/privacy: unexpected query type %T for query filter", q)
	}
}

func mutationFilter(m generated.Mutation) (Filter, error) {
	switch m := m.(type) {
	case *generated.AppPoolMutation:
		return m.Filter(), nil
	case *generated.CoinMutation:
		return m.Filter(), nil
	case *generated.FractionWithdrawalMutation:
		return m.Filter(), nil
	case *generated.FractionWithdrawalRuleMutation:
		return m.Filter(), nil
	case *generated.GoodUserMutation:
		return m.Filter(), nil
	case *generated.OrderUserMutation:
		return m.Filter(), nil
	case *generated.PoolMutation:
		return m.Filter(), nil
	case *generated.RootUserMutation:
		return m.Filter(), nil
	default:
		return nil, Denyf("generated/privacy: unexpected mutation type %T for mutation filter", m)
	}
}

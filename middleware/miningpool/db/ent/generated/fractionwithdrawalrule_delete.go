// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/miningpool/db/ent/generated/fractionwithdrawalrule"
	"github.com/NpoolPlatform/kunman/middleware/miningpool/db/ent/generated/predicate"
)

// FractionWithdrawalRuleDelete is the builder for deleting a FractionWithdrawalRule entity.
type FractionWithdrawalRuleDelete struct {
	config
	hooks    []Hook
	mutation *FractionWithdrawalRuleMutation
}

// Where appends a list predicates to the FractionWithdrawalRuleDelete builder.
func (fwrd *FractionWithdrawalRuleDelete) Where(ps ...predicate.FractionWithdrawalRule) *FractionWithdrawalRuleDelete {
	fwrd.mutation.Where(ps...)
	return fwrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fwrd *FractionWithdrawalRuleDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, fwrd.sqlExec, fwrd.mutation, fwrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fwrd *FractionWithdrawalRuleDelete) ExecX(ctx context.Context) int {
	n, err := fwrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fwrd *FractionWithdrawalRuleDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(fractionwithdrawalrule.Table, sqlgraph.NewFieldSpec(fractionwithdrawalrule.FieldID, field.TypeUint32))
	if ps := fwrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fwrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fwrd.mutation.done = true
	return affected, err
}

// FractionWithdrawalRuleDeleteOne is the builder for deleting a single FractionWithdrawalRule entity.
type FractionWithdrawalRuleDeleteOne struct {
	fwrd *FractionWithdrawalRuleDelete
}

// Where appends a list predicates to the FractionWithdrawalRuleDelete builder.
func (fwrdo *FractionWithdrawalRuleDeleteOne) Where(ps ...predicate.FractionWithdrawalRule) *FractionWithdrawalRuleDeleteOne {
	fwrdo.fwrd.mutation.Where(ps...)
	return fwrdo
}

// Exec executes the deletion query.
func (fwrdo *FractionWithdrawalRuleDeleteOne) Exec(ctx context.Context) error {
	n, err := fwrdo.fwrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{fractionwithdrawalrule.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fwrdo *FractionWithdrawalRuleDeleteOne) ExecX(ctx context.Context) {
	if err := fwrdo.Exec(ctx); err != nil {
		panic(err)
	}
}

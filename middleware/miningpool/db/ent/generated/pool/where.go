// Code generated by ent, DO NOT EDIT.

package pool

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/miningpool/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Pool {
	return predicate.Pool(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Pool {
	return predicate.Pool(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Pool {
	return predicate.Pool(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Pool {
	return predicate.Pool(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Pool {
	return predicate.Pool(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Pool {
	return predicate.Pool(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Pool {
	return predicate.Pool(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Pool {
	return predicate.Pool(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Pool {
	return predicate.Pool(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Pool {
	return predicate.Pool(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Pool {
	return predicate.Pool(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Pool {
	return predicate.Pool(sql.FieldEQ(FieldDeletedAt, v))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.Pool {
	return predicate.Pool(sql.FieldEQ(FieldEntID, v))
}

// MiningPoolType applies equality check predicate on the "mining_pool_type" field. It's identical to MiningPoolTypeEQ.
func MiningPoolType(v string) predicate.Pool {
	return predicate.Pool(sql.FieldEQ(FieldMiningPoolType, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Pool {
	return predicate.Pool(sql.FieldEQ(FieldName, v))
}

// Site applies equality check predicate on the "site" field. It's identical to SiteEQ.
func Site(v string) predicate.Pool {
	return predicate.Pool(sql.FieldEQ(FieldSite, v))
}

// Logo applies equality check predicate on the "logo" field. It's identical to LogoEQ.
func Logo(v string) predicate.Pool {
	return predicate.Pool(sql.FieldEQ(FieldLogo, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Pool {
	return predicate.Pool(sql.FieldEQ(FieldDescription, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Pool {
	return predicate.Pool(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Pool {
	return predicate.Pool(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Pool {
	return predicate.Pool(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Pool {
	return predicate.Pool(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Pool {
	return predicate.Pool(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Pool {
	return predicate.Pool(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Pool {
	return predicate.Pool(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Pool {
	return predicate.Pool(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Pool {
	return predicate.Pool(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Pool {
	return predicate.Pool(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Pool {
	return predicate.Pool(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Pool {
	return predicate.Pool(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Pool {
	return predicate.Pool(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Pool {
	return predicate.Pool(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Pool {
	return predicate.Pool(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Pool {
	return predicate.Pool(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Pool {
	return predicate.Pool(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Pool {
	return predicate.Pool(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Pool {
	return predicate.Pool(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Pool {
	return predicate.Pool(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Pool {
	return predicate.Pool(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Pool {
	return predicate.Pool(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Pool {
	return predicate.Pool(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Pool {
	return predicate.Pool(sql.FieldLTE(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.Pool {
	return predicate.Pool(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.Pool {
	return predicate.Pool(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.Pool {
	return predicate.Pool(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.Pool {
	return predicate.Pool(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.Pool {
	return predicate.Pool(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.Pool {
	return predicate.Pool(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.Pool {
	return predicate.Pool(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.Pool {
	return predicate.Pool(sql.FieldLTE(FieldEntID, v))
}

// MiningPoolTypeEQ applies the EQ predicate on the "mining_pool_type" field.
func MiningPoolTypeEQ(v string) predicate.Pool {
	return predicate.Pool(sql.FieldEQ(FieldMiningPoolType, v))
}

// MiningPoolTypeNEQ applies the NEQ predicate on the "mining_pool_type" field.
func MiningPoolTypeNEQ(v string) predicate.Pool {
	return predicate.Pool(sql.FieldNEQ(FieldMiningPoolType, v))
}

// MiningPoolTypeIn applies the In predicate on the "mining_pool_type" field.
func MiningPoolTypeIn(vs ...string) predicate.Pool {
	return predicate.Pool(sql.FieldIn(FieldMiningPoolType, vs...))
}

// MiningPoolTypeNotIn applies the NotIn predicate on the "mining_pool_type" field.
func MiningPoolTypeNotIn(vs ...string) predicate.Pool {
	return predicate.Pool(sql.FieldNotIn(FieldMiningPoolType, vs...))
}

// MiningPoolTypeGT applies the GT predicate on the "mining_pool_type" field.
func MiningPoolTypeGT(v string) predicate.Pool {
	return predicate.Pool(sql.FieldGT(FieldMiningPoolType, v))
}

// MiningPoolTypeGTE applies the GTE predicate on the "mining_pool_type" field.
func MiningPoolTypeGTE(v string) predicate.Pool {
	return predicate.Pool(sql.FieldGTE(FieldMiningPoolType, v))
}

// MiningPoolTypeLT applies the LT predicate on the "mining_pool_type" field.
func MiningPoolTypeLT(v string) predicate.Pool {
	return predicate.Pool(sql.FieldLT(FieldMiningPoolType, v))
}

// MiningPoolTypeLTE applies the LTE predicate on the "mining_pool_type" field.
func MiningPoolTypeLTE(v string) predicate.Pool {
	return predicate.Pool(sql.FieldLTE(FieldMiningPoolType, v))
}

// MiningPoolTypeContains applies the Contains predicate on the "mining_pool_type" field.
func MiningPoolTypeContains(v string) predicate.Pool {
	return predicate.Pool(sql.FieldContains(FieldMiningPoolType, v))
}

// MiningPoolTypeHasPrefix applies the HasPrefix predicate on the "mining_pool_type" field.
func MiningPoolTypeHasPrefix(v string) predicate.Pool {
	return predicate.Pool(sql.FieldHasPrefix(FieldMiningPoolType, v))
}

// MiningPoolTypeHasSuffix applies the HasSuffix predicate on the "mining_pool_type" field.
func MiningPoolTypeHasSuffix(v string) predicate.Pool {
	return predicate.Pool(sql.FieldHasSuffix(FieldMiningPoolType, v))
}

// MiningPoolTypeIsNil applies the IsNil predicate on the "mining_pool_type" field.
func MiningPoolTypeIsNil() predicate.Pool {
	return predicate.Pool(sql.FieldIsNull(FieldMiningPoolType))
}

// MiningPoolTypeNotNil applies the NotNil predicate on the "mining_pool_type" field.
func MiningPoolTypeNotNil() predicate.Pool {
	return predicate.Pool(sql.FieldNotNull(FieldMiningPoolType))
}

// MiningPoolTypeEqualFold applies the EqualFold predicate on the "mining_pool_type" field.
func MiningPoolTypeEqualFold(v string) predicate.Pool {
	return predicate.Pool(sql.FieldEqualFold(FieldMiningPoolType, v))
}

// MiningPoolTypeContainsFold applies the ContainsFold predicate on the "mining_pool_type" field.
func MiningPoolTypeContainsFold(v string) predicate.Pool {
	return predicate.Pool(sql.FieldContainsFold(FieldMiningPoolType, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Pool {
	return predicate.Pool(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Pool {
	return predicate.Pool(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Pool {
	return predicate.Pool(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Pool {
	return predicate.Pool(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Pool {
	return predicate.Pool(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Pool {
	return predicate.Pool(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Pool {
	return predicate.Pool(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Pool {
	return predicate.Pool(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Pool {
	return predicate.Pool(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Pool {
	return predicate.Pool(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Pool {
	return predicate.Pool(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Pool {
	return predicate.Pool(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Pool {
	return predicate.Pool(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Pool {
	return predicate.Pool(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Pool {
	return predicate.Pool(sql.FieldContainsFold(FieldName, v))
}

// SiteEQ applies the EQ predicate on the "site" field.
func SiteEQ(v string) predicate.Pool {
	return predicate.Pool(sql.FieldEQ(FieldSite, v))
}

// SiteNEQ applies the NEQ predicate on the "site" field.
func SiteNEQ(v string) predicate.Pool {
	return predicate.Pool(sql.FieldNEQ(FieldSite, v))
}

// SiteIn applies the In predicate on the "site" field.
func SiteIn(vs ...string) predicate.Pool {
	return predicate.Pool(sql.FieldIn(FieldSite, vs...))
}

// SiteNotIn applies the NotIn predicate on the "site" field.
func SiteNotIn(vs ...string) predicate.Pool {
	return predicate.Pool(sql.FieldNotIn(FieldSite, vs...))
}

// SiteGT applies the GT predicate on the "site" field.
func SiteGT(v string) predicate.Pool {
	return predicate.Pool(sql.FieldGT(FieldSite, v))
}

// SiteGTE applies the GTE predicate on the "site" field.
func SiteGTE(v string) predicate.Pool {
	return predicate.Pool(sql.FieldGTE(FieldSite, v))
}

// SiteLT applies the LT predicate on the "site" field.
func SiteLT(v string) predicate.Pool {
	return predicate.Pool(sql.FieldLT(FieldSite, v))
}

// SiteLTE applies the LTE predicate on the "site" field.
func SiteLTE(v string) predicate.Pool {
	return predicate.Pool(sql.FieldLTE(FieldSite, v))
}

// SiteContains applies the Contains predicate on the "site" field.
func SiteContains(v string) predicate.Pool {
	return predicate.Pool(sql.FieldContains(FieldSite, v))
}

// SiteHasPrefix applies the HasPrefix predicate on the "site" field.
func SiteHasPrefix(v string) predicate.Pool {
	return predicate.Pool(sql.FieldHasPrefix(FieldSite, v))
}

// SiteHasSuffix applies the HasSuffix predicate on the "site" field.
func SiteHasSuffix(v string) predicate.Pool {
	return predicate.Pool(sql.FieldHasSuffix(FieldSite, v))
}

// SiteIsNil applies the IsNil predicate on the "site" field.
func SiteIsNil() predicate.Pool {
	return predicate.Pool(sql.FieldIsNull(FieldSite))
}

// SiteNotNil applies the NotNil predicate on the "site" field.
func SiteNotNil() predicate.Pool {
	return predicate.Pool(sql.FieldNotNull(FieldSite))
}

// SiteEqualFold applies the EqualFold predicate on the "site" field.
func SiteEqualFold(v string) predicate.Pool {
	return predicate.Pool(sql.FieldEqualFold(FieldSite, v))
}

// SiteContainsFold applies the ContainsFold predicate on the "site" field.
func SiteContainsFold(v string) predicate.Pool {
	return predicate.Pool(sql.FieldContainsFold(FieldSite, v))
}

// LogoEQ applies the EQ predicate on the "logo" field.
func LogoEQ(v string) predicate.Pool {
	return predicate.Pool(sql.FieldEQ(FieldLogo, v))
}

// LogoNEQ applies the NEQ predicate on the "logo" field.
func LogoNEQ(v string) predicate.Pool {
	return predicate.Pool(sql.FieldNEQ(FieldLogo, v))
}

// LogoIn applies the In predicate on the "logo" field.
func LogoIn(vs ...string) predicate.Pool {
	return predicate.Pool(sql.FieldIn(FieldLogo, vs...))
}

// LogoNotIn applies the NotIn predicate on the "logo" field.
func LogoNotIn(vs ...string) predicate.Pool {
	return predicate.Pool(sql.FieldNotIn(FieldLogo, vs...))
}

// LogoGT applies the GT predicate on the "logo" field.
func LogoGT(v string) predicate.Pool {
	return predicate.Pool(sql.FieldGT(FieldLogo, v))
}

// LogoGTE applies the GTE predicate on the "logo" field.
func LogoGTE(v string) predicate.Pool {
	return predicate.Pool(sql.FieldGTE(FieldLogo, v))
}

// LogoLT applies the LT predicate on the "logo" field.
func LogoLT(v string) predicate.Pool {
	return predicate.Pool(sql.FieldLT(FieldLogo, v))
}

// LogoLTE applies the LTE predicate on the "logo" field.
func LogoLTE(v string) predicate.Pool {
	return predicate.Pool(sql.FieldLTE(FieldLogo, v))
}

// LogoContains applies the Contains predicate on the "logo" field.
func LogoContains(v string) predicate.Pool {
	return predicate.Pool(sql.FieldContains(FieldLogo, v))
}

// LogoHasPrefix applies the HasPrefix predicate on the "logo" field.
func LogoHasPrefix(v string) predicate.Pool {
	return predicate.Pool(sql.FieldHasPrefix(FieldLogo, v))
}

// LogoHasSuffix applies the HasSuffix predicate on the "logo" field.
func LogoHasSuffix(v string) predicate.Pool {
	return predicate.Pool(sql.FieldHasSuffix(FieldLogo, v))
}

// LogoIsNil applies the IsNil predicate on the "logo" field.
func LogoIsNil() predicate.Pool {
	return predicate.Pool(sql.FieldIsNull(FieldLogo))
}

// LogoNotNil applies the NotNil predicate on the "logo" field.
func LogoNotNil() predicate.Pool {
	return predicate.Pool(sql.FieldNotNull(FieldLogo))
}

// LogoEqualFold applies the EqualFold predicate on the "logo" field.
func LogoEqualFold(v string) predicate.Pool {
	return predicate.Pool(sql.FieldEqualFold(FieldLogo, v))
}

// LogoContainsFold applies the ContainsFold predicate on the "logo" field.
func LogoContainsFold(v string) predicate.Pool {
	return predicate.Pool(sql.FieldContainsFold(FieldLogo, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Pool {
	return predicate.Pool(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Pool {
	return predicate.Pool(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Pool {
	return predicate.Pool(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Pool {
	return predicate.Pool(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Pool {
	return predicate.Pool(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Pool {
	return predicate.Pool(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Pool {
	return predicate.Pool(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Pool {
	return predicate.Pool(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Pool {
	return predicate.Pool(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Pool {
	return predicate.Pool(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Pool {
	return predicate.Pool(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Pool {
	return predicate.Pool(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Pool {
	return predicate.Pool(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Pool {
	return predicate.Pool(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Pool {
	return predicate.Pool(sql.FieldContainsFold(FieldDescription, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Pool) predicate.Pool {
	return predicate.Pool(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Pool) predicate.Pool {
	return predicate.Pool(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Pool) predicate.Pool {
	return predicate.Pool(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/miningpool/db/ent/generated/gooduser"
	"github.com/NpoolPlatform/kunman/middleware/miningpool/db/ent/generated/predicate"
)

// GoodUserDelete is the builder for deleting a GoodUser entity.
type GoodUserDelete struct {
	config
	hooks    []Hook
	mutation *GoodUserMutation
}

// Where appends a list predicates to the GoodUserDelete builder.
func (gud *GoodUserDelete) Where(ps ...predicate.GoodUser) *GoodUserDelete {
	gud.mutation.Where(ps...)
	return gud
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (gud *GoodUserDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, gud.sqlExec, gud.mutation, gud.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (gud *GoodUserDelete) ExecX(ctx context.Context) int {
	n, err := gud.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (gud *GoodUserDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(gooduser.Table, sqlgraph.NewFieldSpec(gooduser.FieldID, field.TypeUint32))
	if ps := gud.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, gud.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	gud.mutation.done = true
	return affected, err
}

// GoodUserDeleteOne is the builder for deleting a single GoodUser entity.
type GoodUserDeleteOne struct {
	gud *GoodUserDelete
}

// Where appends a list predicates to the GoodUserDelete builder.
func (gudo *GoodUserDeleteOne) Where(ps ...predicate.GoodUser) *GoodUserDeleteOne {
	gudo.gud.mutation.Where(ps...)
	return gudo
}

// Exec executes the deletion query.
func (gudo *GoodUserDeleteOne) Exec(ctx context.Context) error {
	n, err := gudo.gud.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{gooduser.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (gudo *GoodUserDeleteOne) ExecX(ctx context.Context) {
	if err := gudo.Exec(ctx); err != nil {
		panic(err)
	}
}

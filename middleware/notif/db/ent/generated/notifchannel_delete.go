// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/notif/db/ent/generated/notifchannel"
	"github.com/NpoolPlatform/kunman/middleware/notif/db/ent/generated/predicate"
)

// NotifChannelDelete is the builder for deleting a NotifChannel entity.
type NotifChannelDelete struct {
	config
	hooks    []Hook
	mutation *NotifChannelMutation
}

// Where appends a list predicates to the NotifChannelDelete builder.
func (ncd *NotifChannelDelete) Where(ps ...predicate.NotifChannel) *NotifChannelDelete {
	ncd.mutation.Where(ps...)
	return ncd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ncd *NotifChannelDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ncd.sqlExec, ncd.mutation, ncd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ncd *NotifChannelDelete) ExecX(ctx context.Context) int {
	n, err := ncd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ncd *NotifChannelDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(notifchannel.Table, sqlgraph.NewFieldSpec(notifchannel.FieldID, field.TypeUint32))
	if ps := ncd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ncd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ncd.mutation.done = true
	return affected, err
}

// NotifChannelDeleteOne is the builder for deleting a single NotifChannel entity.
type NotifChannelDeleteOne struct {
	ncd *NotifChannelDelete
}

// Where appends a list predicates to the NotifChannelDelete builder.
func (ncdo *NotifChannelDeleteOne) Where(ps ...predicate.NotifChannel) *NotifChannelDeleteOne {
	ncdo.ncd.mutation.Where(ps...)
	return ncdo
}

// Exec executes the deletion query.
func (ncdo *NotifChannelDeleteOne) Exec(ctx context.Context) error {
	n, err := ncdo.ncd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{notifchannel.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ncdo *NotifChannelDeleteOne) ExecX(ctx context.Context) {
	if err := ncdo.Exec(ctx); err != nil {
		panic(err)
	}
}

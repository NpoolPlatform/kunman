// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/notif/db/ent/generated/contact"
	"github.com/NpoolPlatform/kunman/middleware/notif/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ContactUpdate is the builder for updating Contact entities.
type ContactUpdate struct {
	config
	hooks     []Hook
	mutation  *ContactMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ContactUpdate builder.
func (cu *ContactUpdate) Where(ps ...predicate.Contact) *ContactUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *ContactUpdate) SetCreatedAt(u uint32) *ContactUpdate {
	cu.mutation.ResetCreatedAt()
	cu.mutation.SetCreatedAt(u)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableCreatedAt(u *uint32) *ContactUpdate {
	if u != nil {
		cu.SetCreatedAt(*u)
	}
	return cu
}

// AddCreatedAt adds u to the "created_at" field.
func (cu *ContactUpdate) AddCreatedAt(u int32) *ContactUpdate {
	cu.mutation.AddCreatedAt(u)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ContactUpdate) SetUpdatedAt(u uint32) *ContactUpdate {
	cu.mutation.ResetUpdatedAt()
	cu.mutation.SetUpdatedAt(u)
	return cu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cu *ContactUpdate) AddUpdatedAt(u int32) *ContactUpdate {
	cu.mutation.AddUpdatedAt(u)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *ContactUpdate) SetDeletedAt(u uint32) *ContactUpdate {
	cu.mutation.ResetDeletedAt()
	cu.mutation.SetDeletedAt(u)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableDeletedAt(u *uint32) *ContactUpdate {
	if u != nil {
		cu.SetDeletedAt(*u)
	}
	return cu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cu *ContactUpdate) AddDeletedAt(u int32) *ContactUpdate {
	cu.mutation.AddDeletedAt(u)
	return cu
}

// SetEntID sets the "ent_id" field.
func (cu *ContactUpdate) SetEntID(u uuid.UUID) *ContactUpdate {
	cu.mutation.SetEntID(u)
	return cu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableEntID(u *uuid.UUID) *ContactUpdate {
	if u != nil {
		cu.SetEntID(*u)
	}
	return cu
}

// SetAppID sets the "app_id" field.
func (cu *ContactUpdate) SetAppID(u uuid.UUID) *ContactUpdate {
	cu.mutation.SetAppID(u)
	return cu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableAppID(u *uuid.UUID) *ContactUpdate {
	if u != nil {
		cu.SetAppID(*u)
	}
	return cu
}

// SetUsedFor sets the "used_for" field.
func (cu *ContactUpdate) SetUsedFor(s string) *ContactUpdate {
	cu.mutation.SetUsedFor(s)
	return cu
}

// SetNillableUsedFor sets the "used_for" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableUsedFor(s *string) *ContactUpdate {
	if s != nil {
		cu.SetUsedFor(*s)
	}
	return cu
}

// ClearUsedFor clears the value of the "used_for" field.
func (cu *ContactUpdate) ClearUsedFor() *ContactUpdate {
	cu.mutation.ClearUsedFor()
	return cu
}

// SetSender sets the "sender" field.
func (cu *ContactUpdate) SetSender(s string) *ContactUpdate {
	cu.mutation.SetSender(s)
	return cu
}

// SetNillableSender sets the "sender" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableSender(s *string) *ContactUpdate {
	if s != nil {
		cu.SetSender(*s)
	}
	return cu
}

// ClearSender clears the value of the "sender" field.
func (cu *ContactUpdate) ClearSender() *ContactUpdate {
	cu.mutation.ClearSender()
	return cu
}

// SetAccount sets the "account" field.
func (cu *ContactUpdate) SetAccount(s string) *ContactUpdate {
	cu.mutation.SetAccount(s)
	return cu
}

// SetNillableAccount sets the "account" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableAccount(s *string) *ContactUpdate {
	if s != nil {
		cu.SetAccount(*s)
	}
	return cu
}

// ClearAccount clears the value of the "account" field.
func (cu *ContactUpdate) ClearAccount() *ContactUpdate {
	cu.mutation.ClearAccount()
	return cu
}

// SetAccountType sets the "account_type" field.
func (cu *ContactUpdate) SetAccountType(s string) *ContactUpdate {
	cu.mutation.SetAccountType(s)
	return cu
}

// SetNillableAccountType sets the "account_type" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableAccountType(s *string) *ContactUpdate {
	if s != nil {
		cu.SetAccountType(*s)
	}
	return cu
}

// ClearAccountType clears the value of the "account_type" field.
func (cu *ContactUpdate) ClearAccountType() *ContactUpdate {
	cu.mutation.ClearAccountType()
	return cu
}

// Mutation returns the ContactMutation object of the builder.
func (cu *ContactUpdate) Mutation() *ContactMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ContactUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ContactUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ContactUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ContactUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ContactUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := contact.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *ContactUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ContactUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *ContactUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(contact.Table, contact.Columns, sqlgraph.NewFieldSpec(contact.FieldID, field.TypeUint32))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(contact.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(contact.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(contact.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(contact.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(contact.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(contact.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.EntID(); ok {
		_spec.SetField(contact.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := cu.mutation.AppID(); ok {
		_spec.SetField(contact.FieldAppID, field.TypeUUID, value)
	}
	if value, ok := cu.mutation.UsedFor(); ok {
		_spec.SetField(contact.FieldUsedFor, field.TypeString, value)
	}
	if cu.mutation.UsedForCleared() {
		_spec.ClearField(contact.FieldUsedFor, field.TypeString)
	}
	if value, ok := cu.mutation.Sender(); ok {
		_spec.SetField(contact.FieldSender, field.TypeString, value)
	}
	if cu.mutation.SenderCleared() {
		_spec.ClearField(contact.FieldSender, field.TypeString)
	}
	if value, ok := cu.mutation.Account(); ok {
		_spec.SetField(contact.FieldAccount, field.TypeString, value)
	}
	if cu.mutation.AccountCleared() {
		_spec.ClearField(contact.FieldAccount, field.TypeString)
	}
	if value, ok := cu.mutation.AccountType(); ok {
		_spec.SetField(contact.FieldAccountType, field.TypeString, value)
	}
	if cu.mutation.AccountTypeCleared() {
		_spec.ClearField(contact.FieldAccountType, field.TypeString)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ContactUpdateOne is the builder for updating a single Contact entity.
type ContactUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ContactMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (cuo *ContactUpdateOne) SetCreatedAt(u uint32) *ContactUpdateOne {
	cuo.mutation.ResetCreatedAt()
	cuo.mutation.SetCreatedAt(u)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableCreatedAt(u *uint32) *ContactUpdateOne {
	if u != nil {
		cuo.SetCreatedAt(*u)
	}
	return cuo
}

// AddCreatedAt adds u to the "created_at" field.
func (cuo *ContactUpdateOne) AddCreatedAt(u int32) *ContactUpdateOne {
	cuo.mutation.AddCreatedAt(u)
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ContactUpdateOne) SetUpdatedAt(u uint32) *ContactUpdateOne {
	cuo.mutation.ResetUpdatedAt()
	cuo.mutation.SetUpdatedAt(u)
	return cuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cuo *ContactUpdateOne) AddUpdatedAt(u int32) *ContactUpdateOne {
	cuo.mutation.AddUpdatedAt(u)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *ContactUpdateOne) SetDeletedAt(u uint32) *ContactUpdateOne {
	cuo.mutation.ResetDeletedAt()
	cuo.mutation.SetDeletedAt(u)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableDeletedAt(u *uint32) *ContactUpdateOne {
	if u != nil {
		cuo.SetDeletedAt(*u)
	}
	return cuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cuo *ContactUpdateOne) AddDeletedAt(u int32) *ContactUpdateOne {
	cuo.mutation.AddDeletedAt(u)
	return cuo
}

// SetEntID sets the "ent_id" field.
func (cuo *ContactUpdateOne) SetEntID(u uuid.UUID) *ContactUpdateOne {
	cuo.mutation.SetEntID(u)
	return cuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableEntID(u *uuid.UUID) *ContactUpdateOne {
	if u != nil {
		cuo.SetEntID(*u)
	}
	return cuo
}

// SetAppID sets the "app_id" field.
func (cuo *ContactUpdateOne) SetAppID(u uuid.UUID) *ContactUpdateOne {
	cuo.mutation.SetAppID(u)
	return cuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableAppID(u *uuid.UUID) *ContactUpdateOne {
	if u != nil {
		cuo.SetAppID(*u)
	}
	return cuo
}

// SetUsedFor sets the "used_for" field.
func (cuo *ContactUpdateOne) SetUsedFor(s string) *ContactUpdateOne {
	cuo.mutation.SetUsedFor(s)
	return cuo
}

// SetNillableUsedFor sets the "used_for" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableUsedFor(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetUsedFor(*s)
	}
	return cuo
}

// ClearUsedFor clears the value of the "used_for" field.
func (cuo *ContactUpdateOne) ClearUsedFor() *ContactUpdateOne {
	cuo.mutation.ClearUsedFor()
	return cuo
}

// SetSender sets the "sender" field.
func (cuo *ContactUpdateOne) SetSender(s string) *ContactUpdateOne {
	cuo.mutation.SetSender(s)
	return cuo
}

// SetNillableSender sets the "sender" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableSender(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetSender(*s)
	}
	return cuo
}

// ClearSender clears the value of the "sender" field.
func (cuo *ContactUpdateOne) ClearSender() *ContactUpdateOne {
	cuo.mutation.ClearSender()
	return cuo
}

// SetAccount sets the "account" field.
func (cuo *ContactUpdateOne) SetAccount(s string) *ContactUpdateOne {
	cuo.mutation.SetAccount(s)
	return cuo
}

// SetNillableAccount sets the "account" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableAccount(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetAccount(*s)
	}
	return cuo
}

// ClearAccount clears the value of the "account" field.
func (cuo *ContactUpdateOne) ClearAccount() *ContactUpdateOne {
	cuo.mutation.ClearAccount()
	return cuo
}

// SetAccountType sets the "account_type" field.
func (cuo *ContactUpdateOne) SetAccountType(s string) *ContactUpdateOne {
	cuo.mutation.SetAccountType(s)
	return cuo
}

// SetNillableAccountType sets the "account_type" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableAccountType(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetAccountType(*s)
	}
	return cuo
}

// ClearAccountType clears the value of the "account_type" field.
func (cuo *ContactUpdateOne) ClearAccountType() *ContactUpdateOne {
	cuo.mutation.ClearAccountType()
	return cuo
}

// Mutation returns the ContactMutation object of the builder.
func (cuo *ContactUpdateOne) Mutation() *ContactMutation {
	return cuo.mutation
}

// Where appends a list predicates to the ContactUpdate builder.
func (cuo *ContactUpdateOne) Where(ps ...predicate.Contact) *ContactUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ContactUpdateOne) Select(field string, fields ...string) *ContactUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Contact entity.
func (cuo *ContactUpdateOne) Save(ctx context.Context) (*Contact, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ContactUpdateOne) SaveX(ctx context.Context) *Contact {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ContactUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ContactUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ContactUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := contact.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *ContactUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ContactUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *ContactUpdateOne) sqlSave(ctx context.Context) (_node *Contact, err error) {
	_spec := sqlgraph.NewUpdateSpec(contact.Table, contact.Columns, sqlgraph.NewFieldSpec(contact.FieldID, field.TypeUint32))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Contact.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contact.FieldID)
		for _, f := range fields {
			if !contact.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != contact.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(contact.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(contact.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(contact.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(contact.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(contact.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(contact.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.EntID(); ok {
		_spec.SetField(contact.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := cuo.mutation.AppID(); ok {
		_spec.SetField(contact.FieldAppID, field.TypeUUID, value)
	}
	if value, ok := cuo.mutation.UsedFor(); ok {
		_spec.SetField(contact.FieldUsedFor, field.TypeString, value)
	}
	if cuo.mutation.UsedForCleared() {
		_spec.ClearField(contact.FieldUsedFor, field.TypeString)
	}
	if value, ok := cuo.mutation.Sender(); ok {
		_spec.SetField(contact.FieldSender, field.TypeString, value)
	}
	if cuo.mutation.SenderCleared() {
		_spec.ClearField(contact.FieldSender, field.TypeString)
	}
	if value, ok := cuo.mutation.Account(); ok {
		_spec.SetField(contact.FieldAccount, field.TypeString, value)
	}
	if cuo.mutation.AccountCleared() {
		_spec.ClearField(contact.FieldAccount, field.TypeString)
	}
	if value, ok := cuo.mutation.AccountType(); ok {
		_spec.SetField(contact.FieldAccountType, field.TypeString, value)
	}
	if cuo.mutation.AccountTypeCleared() {
		_spec.ClearField(contact.FieldAccountType, field.TypeString)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Contact{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}

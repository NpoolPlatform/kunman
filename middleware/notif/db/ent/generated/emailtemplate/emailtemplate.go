// Code generated by ent, DO NOT EDIT.

package emailtemplate

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the emailtemplate type in the database.
	Label = "email_template"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldLangID holds the string denoting the lang_id field in the database.
	FieldLangID = "lang_id"
	// FieldDefaultToUsername holds the string denoting the default_to_username field in the database.
	FieldDefaultToUsername = "default_to_username"
	// FieldUsedFor holds the string denoting the used_for field in the database.
	FieldUsedFor = "used_for"
	// FieldSender holds the string denoting the sender field in the database.
	FieldSender = "sender"
	// FieldReplyTos holds the string denoting the reply_tos field in the database.
	FieldReplyTos = "reply_tos"
	// FieldCcTos holds the string denoting the cc_tos field in the database.
	FieldCcTos = "cc_tos"
	// FieldSubject holds the string denoting the subject field in the database.
	FieldSubject = "subject"
	// FieldBody holds the string denoting the body field in the database.
	FieldBody = "body"
	// Table holds the table name of the emailtemplate in the database.
	Table = "email_templates"
)

// Columns holds all SQL columns for emailtemplate fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldEntID,
	FieldAppID,
	FieldLangID,
	FieldDefaultToUsername,
	FieldUsedFor,
	FieldSender,
	FieldReplyTos,
	FieldCcTos,
	FieldSubject,
	FieldBody,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() uint32
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() uint32
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() uint32
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt func() uint32
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultUsedFor holds the default value on creation for the "used_for" field.
	DefaultUsedFor string
	// DefaultSender holds the default value on creation for the "sender" field.
	DefaultSender string
	// DefaultReplyTos holds the default value on creation for the "reply_tos" field.
	DefaultReplyTos []string
	// DefaultCcTos holds the default value on creation for the "cc_tos" field.
	DefaultCcTos []string
	// DefaultSubject holds the default value on creation for the "subject" field.
	DefaultSubject string
	// DefaultBody holds the default value on creation for the "body" field.
	DefaultBody string
)

// OrderOption defines the ordering options for the EmailTemplate queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByAppID orders the results by the app_id field.
func ByAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppID, opts...).ToFunc()
}

// ByLangID orders the results by the lang_id field.
func ByLangID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLangID, opts...).ToFunc()
}

// ByDefaultToUsername orders the results by the default_to_username field.
func ByDefaultToUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDefaultToUsername, opts...).ToFunc()
}

// ByUsedFor orders the results by the used_for field.
func ByUsedFor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsedFor, opts...).ToFunc()
}

// BySender orders the results by the sender field.
func BySender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSender, opts...).ToFunc()
}

// BySubject orders the results by the subject field.
func BySubject(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubject, opts...).ToFunc()
}

// ByBody orders the results by the body field.
func ByBody(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBody, opts...).ToFunc()
}

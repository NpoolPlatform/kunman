// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/notif/db/ent/generated/notifchannel"
	"github.com/NpoolPlatform/kunman/middleware/notif/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// NotifChannelUpdate is the builder for updating NotifChannel entities.
type NotifChannelUpdate struct {
	config
	hooks     []Hook
	mutation  *NotifChannelMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the NotifChannelUpdate builder.
func (ncu *NotifChannelUpdate) Where(ps ...predicate.NotifChannel) *NotifChannelUpdate {
	ncu.mutation.Where(ps...)
	return ncu
}

// SetCreatedAt sets the "created_at" field.
func (ncu *NotifChannelUpdate) SetCreatedAt(u uint32) *NotifChannelUpdate {
	ncu.mutation.ResetCreatedAt()
	ncu.mutation.SetCreatedAt(u)
	return ncu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ncu *NotifChannelUpdate) SetNillableCreatedAt(u *uint32) *NotifChannelUpdate {
	if u != nil {
		ncu.SetCreatedAt(*u)
	}
	return ncu
}

// AddCreatedAt adds u to the "created_at" field.
func (ncu *NotifChannelUpdate) AddCreatedAt(u int32) *NotifChannelUpdate {
	ncu.mutation.AddCreatedAt(u)
	return ncu
}

// SetUpdatedAt sets the "updated_at" field.
func (ncu *NotifChannelUpdate) SetUpdatedAt(u uint32) *NotifChannelUpdate {
	ncu.mutation.ResetUpdatedAt()
	ncu.mutation.SetUpdatedAt(u)
	return ncu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ncu *NotifChannelUpdate) AddUpdatedAt(u int32) *NotifChannelUpdate {
	ncu.mutation.AddUpdatedAt(u)
	return ncu
}

// SetDeletedAt sets the "deleted_at" field.
func (ncu *NotifChannelUpdate) SetDeletedAt(u uint32) *NotifChannelUpdate {
	ncu.mutation.ResetDeletedAt()
	ncu.mutation.SetDeletedAt(u)
	return ncu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ncu *NotifChannelUpdate) SetNillableDeletedAt(u *uint32) *NotifChannelUpdate {
	if u != nil {
		ncu.SetDeletedAt(*u)
	}
	return ncu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ncu *NotifChannelUpdate) AddDeletedAt(u int32) *NotifChannelUpdate {
	ncu.mutation.AddDeletedAt(u)
	return ncu
}

// SetEntID sets the "ent_id" field.
func (ncu *NotifChannelUpdate) SetEntID(u uuid.UUID) *NotifChannelUpdate {
	ncu.mutation.SetEntID(u)
	return ncu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ncu *NotifChannelUpdate) SetNillableEntID(u *uuid.UUID) *NotifChannelUpdate {
	if u != nil {
		ncu.SetEntID(*u)
	}
	return ncu
}

// SetAppID sets the "app_id" field.
func (ncu *NotifChannelUpdate) SetAppID(u uuid.UUID) *NotifChannelUpdate {
	ncu.mutation.SetAppID(u)
	return ncu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ncu *NotifChannelUpdate) SetNillableAppID(u *uuid.UUID) *NotifChannelUpdate {
	if u != nil {
		ncu.SetAppID(*u)
	}
	return ncu
}

// ClearAppID clears the value of the "app_id" field.
func (ncu *NotifChannelUpdate) ClearAppID() *NotifChannelUpdate {
	ncu.mutation.ClearAppID()
	return ncu
}

// SetEventType sets the "event_type" field.
func (ncu *NotifChannelUpdate) SetEventType(s string) *NotifChannelUpdate {
	ncu.mutation.SetEventType(s)
	return ncu
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (ncu *NotifChannelUpdate) SetNillableEventType(s *string) *NotifChannelUpdate {
	if s != nil {
		ncu.SetEventType(*s)
	}
	return ncu
}

// ClearEventType clears the value of the "event_type" field.
func (ncu *NotifChannelUpdate) ClearEventType() *NotifChannelUpdate {
	ncu.mutation.ClearEventType()
	return ncu
}

// SetChannel sets the "channel" field.
func (ncu *NotifChannelUpdate) SetChannel(s string) *NotifChannelUpdate {
	ncu.mutation.SetChannel(s)
	return ncu
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (ncu *NotifChannelUpdate) SetNillableChannel(s *string) *NotifChannelUpdate {
	if s != nil {
		ncu.SetChannel(*s)
	}
	return ncu
}

// ClearChannel clears the value of the "channel" field.
func (ncu *NotifChannelUpdate) ClearChannel() *NotifChannelUpdate {
	ncu.mutation.ClearChannel()
	return ncu
}

// Mutation returns the NotifChannelMutation object of the builder.
func (ncu *NotifChannelUpdate) Mutation() *NotifChannelMutation {
	return ncu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ncu *NotifChannelUpdate) Save(ctx context.Context) (int, error) {
	ncu.defaults()
	return withHooks(ctx, ncu.sqlSave, ncu.mutation, ncu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ncu *NotifChannelUpdate) SaveX(ctx context.Context) int {
	affected, err := ncu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ncu *NotifChannelUpdate) Exec(ctx context.Context) error {
	_, err := ncu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncu *NotifChannelUpdate) ExecX(ctx context.Context) {
	if err := ncu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ncu *NotifChannelUpdate) defaults() {
	if _, ok := ncu.mutation.UpdatedAt(); !ok {
		v := notifchannel.UpdateDefaultUpdatedAt()
		ncu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ncu *NotifChannelUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NotifChannelUpdate {
	ncu.modifiers = append(ncu.modifiers, modifiers...)
	return ncu
}

func (ncu *NotifChannelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(notifchannel.Table, notifchannel.Columns, sqlgraph.NewFieldSpec(notifchannel.FieldID, field.TypeUint32))
	if ps := ncu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ncu.mutation.CreatedAt(); ok {
		_spec.SetField(notifchannel.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ncu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(notifchannel.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ncu.mutation.UpdatedAt(); ok {
		_spec.SetField(notifchannel.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ncu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(notifchannel.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ncu.mutation.DeletedAt(); ok {
		_spec.SetField(notifchannel.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ncu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(notifchannel.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ncu.mutation.EntID(); ok {
		_spec.SetField(notifchannel.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := ncu.mutation.AppID(); ok {
		_spec.SetField(notifchannel.FieldAppID, field.TypeUUID, value)
	}
	if ncu.mutation.AppIDCleared() {
		_spec.ClearField(notifchannel.FieldAppID, field.TypeUUID)
	}
	if value, ok := ncu.mutation.EventType(); ok {
		_spec.SetField(notifchannel.FieldEventType, field.TypeString, value)
	}
	if ncu.mutation.EventTypeCleared() {
		_spec.ClearField(notifchannel.FieldEventType, field.TypeString)
	}
	if value, ok := ncu.mutation.Channel(); ok {
		_spec.SetField(notifchannel.FieldChannel, field.TypeString, value)
	}
	if ncu.mutation.ChannelCleared() {
		_spec.ClearField(notifchannel.FieldChannel, field.TypeString)
	}
	_spec.AddModifiers(ncu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ncu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notifchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ncu.mutation.done = true
	return n, nil
}

// NotifChannelUpdateOne is the builder for updating a single NotifChannel entity.
type NotifChannelUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *NotifChannelMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (ncuo *NotifChannelUpdateOne) SetCreatedAt(u uint32) *NotifChannelUpdateOne {
	ncuo.mutation.ResetCreatedAt()
	ncuo.mutation.SetCreatedAt(u)
	return ncuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ncuo *NotifChannelUpdateOne) SetNillableCreatedAt(u *uint32) *NotifChannelUpdateOne {
	if u != nil {
		ncuo.SetCreatedAt(*u)
	}
	return ncuo
}

// AddCreatedAt adds u to the "created_at" field.
func (ncuo *NotifChannelUpdateOne) AddCreatedAt(u int32) *NotifChannelUpdateOne {
	ncuo.mutation.AddCreatedAt(u)
	return ncuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ncuo *NotifChannelUpdateOne) SetUpdatedAt(u uint32) *NotifChannelUpdateOne {
	ncuo.mutation.ResetUpdatedAt()
	ncuo.mutation.SetUpdatedAt(u)
	return ncuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ncuo *NotifChannelUpdateOne) AddUpdatedAt(u int32) *NotifChannelUpdateOne {
	ncuo.mutation.AddUpdatedAt(u)
	return ncuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ncuo *NotifChannelUpdateOne) SetDeletedAt(u uint32) *NotifChannelUpdateOne {
	ncuo.mutation.ResetDeletedAt()
	ncuo.mutation.SetDeletedAt(u)
	return ncuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ncuo *NotifChannelUpdateOne) SetNillableDeletedAt(u *uint32) *NotifChannelUpdateOne {
	if u != nil {
		ncuo.SetDeletedAt(*u)
	}
	return ncuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ncuo *NotifChannelUpdateOne) AddDeletedAt(u int32) *NotifChannelUpdateOne {
	ncuo.mutation.AddDeletedAt(u)
	return ncuo
}

// SetEntID sets the "ent_id" field.
func (ncuo *NotifChannelUpdateOne) SetEntID(u uuid.UUID) *NotifChannelUpdateOne {
	ncuo.mutation.SetEntID(u)
	return ncuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ncuo *NotifChannelUpdateOne) SetNillableEntID(u *uuid.UUID) *NotifChannelUpdateOne {
	if u != nil {
		ncuo.SetEntID(*u)
	}
	return ncuo
}

// SetAppID sets the "app_id" field.
func (ncuo *NotifChannelUpdateOne) SetAppID(u uuid.UUID) *NotifChannelUpdateOne {
	ncuo.mutation.SetAppID(u)
	return ncuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ncuo *NotifChannelUpdateOne) SetNillableAppID(u *uuid.UUID) *NotifChannelUpdateOne {
	if u != nil {
		ncuo.SetAppID(*u)
	}
	return ncuo
}

// ClearAppID clears the value of the "app_id" field.
func (ncuo *NotifChannelUpdateOne) ClearAppID() *NotifChannelUpdateOne {
	ncuo.mutation.ClearAppID()
	return ncuo
}

// SetEventType sets the "event_type" field.
func (ncuo *NotifChannelUpdateOne) SetEventType(s string) *NotifChannelUpdateOne {
	ncuo.mutation.SetEventType(s)
	return ncuo
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (ncuo *NotifChannelUpdateOne) SetNillableEventType(s *string) *NotifChannelUpdateOne {
	if s != nil {
		ncuo.SetEventType(*s)
	}
	return ncuo
}

// ClearEventType clears the value of the "event_type" field.
func (ncuo *NotifChannelUpdateOne) ClearEventType() *NotifChannelUpdateOne {
	ncuo.mutation.ClearEventType()
	return ncuo
}

// SetChannel sets the "channel" field.
func (ncuo *NotifChannelUpdateOne) SetChannel(s string) *NotifChannelUpdateOne {
	ncuo.mutation.SetChannel(s)
	return ncuo
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (ncuo *NotifChannelUpdateOne) SetNillableChannel(s *string) *NotifChannelUpdateOne {
	if s != nil {
		ncuo.SetChannel(*s)
	}
	return ncuo
}

// ClearChannel clears the value of the "channel" field.
func (ncuo *NotifChannelUpdateOne) ClearChannel() *NotifChannelUpdateOne {
	ncuo.mutation.ClearChannel()
	return ncuo
}

// Mutation returns the NotifChannelMutation object of the builder.
func (ncuo *NotifChannelUpdateOne) Mutation() *NotifChannelMutation {
	return ncuo.mutation
}

// Where appends a list predicates to the NotifChannelUpdate builder.
func (ncuo *NotifChannelUpdateOne) Where(ps ...predicate.NotifChannel) *NotifChannelUpdateOne {
	ncuo.mutation.Where(ps...)
	return ncuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ncuo *NotifChannelUpdateOne) Select(field string, fields ...string) *NotifChannelUpdateOne {
	ncuo.fields = append([]string{field}, fields...)
	return ncuo
}

// Save executes the query and returns the updated NotifChannel entity.
func (ncuo *NotifChannelUpdateOne) Save(ctx context.Context) (*NotifChannel, error) {
	ncuo.defaults()
	return withHooks(ctx, ncuo.sqlSave, ncuo.mutation, ncuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ncuo *NotifChannelUpdateOne) SaveX(ctx context.Context) *NotifChannel {
	node, err := ncuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ncuo *NotifChannelUpdateOne) Exec(ctx context.Context) error {
	_, err := ncuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncuo *NotifChannelUpdateOne) ExecX(ctx context.Context) {
	if err := ncuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ncuo *NotifChannelUpdateOne) defaults() {
	if _, ok := ncuo.mutation.UpdatedAt(); !ok {
		v := notifchannel.UpdateDefaultUpdatedAt()
		ncuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ncuo *NotifChannelUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NotifChannelUpdateOne {
	ncuo.modifiers = append(ncuo.modifiers, modifiers...)
	return ncuo
}

func (ncuo *NotifChannelUpdateOne) sqlSave(ctx context.Context) (_node *NotifChannel, err error) {
	_spec := sqlgraph.NewUpdateSpec(notifchannel.Table, notifchannel.Columns, sqlgraph.NewFieldSpec(notifchannel.FieldID, field.TypeUint32))
	id, ok := ncuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "NotifChannel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ncuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notifchannel.FieldID)
		for _, f := range fields {
			if !notifchannel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != notifchannel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ncuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ncuo.mutation.CreatedAt(); ok {
		_spec.SetField(notifchannel.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ncuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(notifchannel.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ncuo.mutation.UpdatedAt(); ok {
		_spec.SetField(notifchannel.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ncuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(notifchannel.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ncuo.mutation.DeletedAt(); ok {
		_spec.SetField(notifchannel.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ncuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(notifchannel.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ncuo.mutation.EntID(); ok {
		_spec.SetField(notifchannel.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := ncuo.mutation.AppID(); ok {
		_spec.SetField(notifchannel.FieldAppID, field.TypeUUID, value)
	}
	if ncuo.mutation.AppIDCleared() {
		_spec.ClearField(notifchannel.FieldAppID, field.TypeUUID)
	}
	if value, ok := ncuo.mutation.EventType(); ok {
		_spec.SetField(notifchannel.FieldEventType, field.TypeString, value)
	}
	if ncuo.mutation.EventTypeCleared() {
		_spec.ClearField(notifchannel.FieldEventType, field.TypeString)
	}
	if value, ok := ncuo.mutation.Channel(); ok {
		_spec.SetField(notifchannel.FieldChannel, field.TypeString, value)
	}
	if ncuo.mutation.ChannelCleared() {
		_spec.ClearField(notifchannel.FieldChannel, field.TypeString)
	}
	_spec.AddModifiers(ncuo.modifiers...)
	_node = &NotifChannel{config: ncuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ncuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notifchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ncuo.mutation.done = true
	return _node, nil
}

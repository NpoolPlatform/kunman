// Code generated by ent, DO NOT EDIT.

package userannouncement

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/notif/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldEQ(FieldDeletedAt, v))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldEQ(FieldEntID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldEQ(FieldAppID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldEQ(FieldUserID, v))
}

// AnnouncementID applies equality check predicate on the "announcement_id" field. It's identical to AnnouncementIDEQ.
func AnnouncementID(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldEQ(FieldAnnouncementID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldLTE(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldLTE(FieldEntID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldLTE(FieldAppID, v))
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldIsNull(FieldAppID))
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldNotNull(FieldAppID))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldLTE(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldNotNull(FieldUserID))
}

// AnnouncementIDEQ applies the EQ predicate on the "announcement_id" field.
func AnnouncementIDEQ(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldEQ(FieldAnnouncementID, v))
}

// AnnouncementIDNEQ applies the NEQ predicate on the "announcement_id" field.
func AnnouncementIDNEQ(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldNEQ(FieldAnnouncementID, v))
}

// AnnouncementIDIn applies the In predicate on the "announcement_id" field.
func AnnouncementIDIn(vs ...uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldIn(FieldAnnouncementID, vs...))
}

// AnnouncementIDNotIn applies the NotIn predicate on the "announcement_id" field.
func AnnouncementIDNotIn(vs ...uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldNotIn(FieldAnnouncementID, vs...))
}

// AnnouncementIDGT applies the GT predicate on the "announcement_id" field.
func AnnouncementIDGT(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldGT(FieldAnnouncementID, v))
}

// AnnouncementIDGTE applies the GTE predicate on the "announcement_id" field.
func AnnouncementIDGTE(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldGTE(FieldAnnouncementID, v))
}

// AnnouncementIDLT applies the LT predicate on the "announcement_id" field.
func AnnouncementIDLT(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldLT(FieldAnnouncementID, v))
}

// AnnouncementIDLTE applies the LTE predicate on the "announcement_id" field.
func AnnouncementIDLTE(v uuid.UUID) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldLTE(FieldAnnouncementID, v))
}

// AnnouncementIDIsNil applies the IsNil predicate on the "announcement_id" field.
func AnnouncementIDIsNil() predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldIsNull(FieldAnnouncementID))
}

// AnnouncementIDNotNil applies the NotNil predicate on the "announcement_id" field.
func AnnouncementIDNotNil() predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.FieldNotNull(FieldAnnouncementID))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserAnnouncement) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserAnnouncement) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserAnnouncement) predicate.UserAnnouncement {
	return predicate.UserAnnouncement(sql.NotPredicates(p))
}

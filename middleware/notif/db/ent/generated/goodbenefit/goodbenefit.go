// Code generated by ent, DO NOT EDIT.

package goodbenefit

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the goodbenefit type in the database.
	Label = "good_benefit"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldGoodID holds the string denoting the good_id field in the database.
	FieldGoodID = "good_id"
	// FieldGoodType holds the string denoting the good_type field in the database.
	FieldGoodType = "good_type"
	// FieldGoodName holds the string denoting the good_name field in the database.
	FieldGoodName = "good_name"
	// FieldCoinTypeID holds the string denoting the coin_type_id field in the database.
	FieldCoinTypeID = "coin_type_id"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldBenefitDate holds the string denoting the benefit_date field in the database.
	FieldBenefitDate = "benefit_date"
	// FieldTxID holds the string denoting the tx_id field in the database.
	FieldTxID = "tx_id"
	// FieldGenerated holds the string denoting the generated field in the database.
	FieldGenerated = "generated"
	// Table holds the table name of the goodbenefit in the database.
	Table = "good_benefits"
)

// Columns holds all SQL columns for goodbenefit fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldEntID,
	FieldGoodID,
	FieldGoodType,
	FieldGoodName,
	FieldCoinTypeID,
	FieldAmount,
	FieldState,
	FieldMessage,
	FieldBenefitDate,
	FieldTxID,
	FieldGenerated,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() uint32
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() uint32
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() uint32
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt func() uint32
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultGoodID holds the default value on creation for the "good_id" field.
	DefaultGoodID func() uuid.UUID
	// DefaultGoodType holds the default value on creation for the "good_type" field.
	DefaultGoodType string
	// DefaultGoodName holds the default value on creation for the "good_name" field.
	DefaultGoodName string
	// DefaultCoinTypeID holds the default value on creation for the "coin_type_id" field.
	DefaultCoinTypeID func() uuid.UUID
	// DefaultAmount holds the default value on creation for the "amount" field.
	DefaultAmount string
	// DefaultState holds the default value on creation for the "state" field.
	DefaultState string
	// DefaultMessage holds the default value on creation for the "message" field.
	DefaultMessage string
	// DefaultBenefitDate holds the default value on creation for the "benefit_date" field.
	DefaultBenefitDate uint32
	// DefaultTxID holds the default value on creation for the "tx_id" field.
	DefaultTxID func() uuid.UUID
	// DefaultGenerated holds the default value on creation for the "generated" field.
	DefaultGenerated bool
)

// OrderOption defines the ordering options for the GoodBenefit queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByGoodID orders the results by the good_id field.
func ByGoodID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodID, opts...).ToFunc()
}

// ByGoodType orders the results by the good_type field.
func ByGoodType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodType, opts...).ToFunc()
}

// ByGoodName orders the results by the good_name field.
func ByGoodName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodName, opts...).ToFunc()
}

// ByCoinTypeID orders the results by the coin_type_id field.
func ByCoinTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoinTypeID, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByMessage orders the results by the message field.
func ByMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessage, opts...).ToFunc()
}

// ByBenefitDate orders the results by the benefit_date field.
func ByBenefitDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBenefitDate, opts...).ToFunc()
}

// ByTxID orders the results by the tx_id field.
func ByTxID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTxID, opts...).ToFunc()
}

// ByGenerated orders the results by the generated field.
func ByGenerated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGenerated, opts...).ToFunc()
}

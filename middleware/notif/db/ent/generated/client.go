// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/NpoolPlatform/kunman/middleware/notif/db/ent/generated/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/notif/db/ent/generated/announcement"
	"github.com/NpoolPlatform/kunman/middleware/notif/db/ent/generated/contact"
	"github.com/NpoolPlatform/kunman/middleware/notif/db/ent/generated/emailtemplate"
	"github.com/NpoolPlatform/kunman/middleware/notif/db/ent/generated/frontendtemplate"
	"github.com/NpoolPlatform/kunman/middleware/notif/db/ent/generated/goodbenefit"
	"github.com/NpoolPlatform/kunman/middleware/notif/db/ent/generated/notif"
	"github.com/NpoolPlatform/kunman/middleware/notif/db/ent/generated/notifchannel"
	"github.com/NpoolPlatform/kunman/middleware/notif/db/ent/generated/notifuser"
	"github.com/NpoolPlatform/kunman/middleware/notif/db/ent/generated/readannouncement"
	"github.com/NpoolPlatform/kunman/middleware/notif/db/ent/generated/sendannouncement"
	"github.com/NpoolPlatform/kunman/middleware/notif/db/ent/generated/smstemplate"
	"github.com/NpoolPlatform/kunman/middleware/notif/db/ent/generated/userannouncement"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Announcement is the client for interacting with the Announcement builders.
	Announcement *AnnouncementClient
	// Contact is the client for interacting with the Contact builders.
	Contact *ContactClient
	// EmailTemplate is the client for interacting with the EmailTemplate builders.
	EmailTemplate *EmailTemplateClient
	// FrontendTemplate is the client for interacting with the FrontendTemplate builders.
	FrontendTemplate *FrontendTemplateClient
	// GoodBenefit is the client for interacting with the GoodBenefit builders.
	GoodBenefit *GoodBenefitClient
	// Notif is the client for interacting with the Notif builders.
	Notif *NotifClient
	// NotifChannel is the client for interacting with the NotifChannel builders.
	NotifChannel *NotifChannelClient
	// NotifUser is the client for interacting with the NotifUser builders.
	NotifUser *NotifUserClient
	// ReadAnnouncement is the client for interacting with the ReadAnnouncement builders.
	ReadAnnouncement *ReadAnnouncementClient
	// SMSTemplate is the client for interacting with the SMSTemplate builders.
	SMSTemplate *SMSTemplateClient
	// SendAnnouncement is the client for interacting with the SendAnnouncement builders.
	SendAnnouncement *SendAnnouncementClient
	// UserAnnouncement is the client for interacting with the UserAnnouncement builders.
	UserAnnouncement *UserAnnouncementClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Announcement = NewAnnouncementClient(c.config)
	c.Contact = NewContactClient(c.config)
	c.EmailTemplate = NewEmailTemplateClient(c.config)
	c.FrontendTemplate = NewFrontendTemplateClient(c.config)
	c.GoodBenefit = NewGoodBenefitClient(c.config)
	c.Notif = NewNotifClient(c.config)
	c.NotifChannel = NewNotifChannelClient(c.config)
	c.NotifUser = NewNotifUserClient(c.config)
	c.ReadAnnouncement = NewReadAnnouncementClient(c.config)
	c.SMSTemplate = NewSMSTemplateClient(c.config)
	c.SendAnnouncement = NewSendAnnouncementClient(c.config)
	c.UserAnnouncement = NewUserAnnouncementClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("generated: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("generated: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Announcement:     NewAnnouncementClient(cfg),
		Contact:          NewContactClient(cfg),
		EmailTemplate:    NewEmailTemplateClient(cfg),
		FrontendTemplate: NewFrontendTemplateClient(cfg),
		GoodBenefit:      NewGoodBenefitClient(cfg),
		Notif:            NewNotifClient(cfg),
		NotifChannel:     NewNotifChannelClient(cfg),
		NotifUser:        NewNotifUserClient(cfg),
		ReadAnnouncement: NewReadAnnouncementClient(cfg),
		SMSTemplate:      NewSMSTemplateClient(cfg),
		SendAnnouncement: NewSendAnnouncementClient(cfg),
		UserAnnouncement: NewUserAnnouncementClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Announcement:     NewAnnouncementClient(cfg),
		Contact:          NewContactClient(cfg),
		EmailTemplate:    NewEmailTemplateClient(cfg),
		FrontendTemplate: NewFrontendTemplateClient(cfg),
		GoodBenefit:      NewGoodBenefitClient(cfg),
		Notif:            NewNotifClient(cfg),
		NotifChannel:     NewNotifChannelClient(cfg),
		NotifUser:        NewNotifUserClient(cfg),
		ReadAnnouncement: NewReadAnnouncementClient(cfg),
		SMSTemplate:      NewSMSTemplateClient(cfg),
		SendAnnouncement: NewSendAnnouncementClient(cfg),
		UserAnnouncement: NewUserAnnouncementClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Announcement.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Announcement, c.Contact, c.EmailTemplate, c.FrontendTemplate, c.GoodBenefit,
		c.Notif, c.NotifChannel, c.NotifUser, c.ReadAnnouncement, c.SMSTemplate,
		c.SendAnnouncement, c.UserAnnouncement,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Announcement, c.Contact, c.EmailTemplate, c.FrontendTemplate, c.GoodBenefit,
		c.Notif, c.NotifChannel, c.NotifUser, c.ReadAnnouncement, c.SMSTemplate,
		c.SendAnnouncement, c.UserAnnouncement,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AnnouncementMutation:
		return c.Announcement.mutate(ctx, m)
	case *ContactMutation:
		return c.Contact.mutate(ctx, m)
	case *EmailTemplateMutation:
		return c.EmailTemplate.mutate(ctx, m)
	case *FrontendTemplateMutation:
		return c.FrontendTemplate.mutate(ctx, m)
	case *GoodBenefitMutation:
		return c.GoodBenefit.mutate(ctx, m)
	case *NotifMutation:
		return c.Notif.mutate(ctx, m)
	case *NotifChannelMutation:
		return c.NotifChannel.mutate(ctx, m)
	case *NotifUserMutation:
		return c.NotifUser.mutate(ctx, m)
	case *ReadAnnouncementMutation:
		return c.ReadAnnouncement.mutate(ctx, m)
	case *SMSTemplateMutation:
		return c.SMSTemplate.mutate(ctx, m)
	case *SendAnnouncementMutation:
		return c.SendAnnouncement.mutate(ctx, m)
	case *UserAnnouncementMutation:
		return c.UserAnnouncement.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("generated: unknown mutation type %T", m)
	}
}

// AnnouncementClient is a client for the Announcement schema.
type AnnouncementClient struct {
	config
}

// NewAnnouncementClient returns a client for the Announcement from the given config.
func NewAnnouncementClient(c config) *AnnouncementClient {
	return &AnnouncementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `announcement.Hooks(f(g(h())))`.
func (c *AnnouncementClient) Use(hooks ...Hook) {
	c.hooks.Announcement = append(c.hooks.Announcement, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `announcement.Intercept(f(g(h())))`.
func (c *AnnouncementClient) Intercept(interceptors ...Interceptor) {
	c.inters.Announcement = append(c.inters.Announcement, interceptors...)
}

// Create returns a builder for creating a Announcement entity.
func (c *AnnouncementClient) Create() *AnnouncementCreate {
	mutation := newAnnouncementMutation(c.config, OpCreate)
	return &AnnouncementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Announcement entities.
func (c *AnnouncementClient) CreateBulk(builders ...*AnnouncementCreate) *AnnouncementCreateBulk {
	return &AnnouncementCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AnnouncementClient) MapCreateBulk(slice any, setFunc func(*AnnouncementCreate, int)) *AnnouncementCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AnnouncementCreateBulk{err: fmt.Errorf("calling to AnnouncementClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AnnouncementCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AnnouncementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Announcement.
func (c *AnnouncementClient) Update() *AnnouncementUpdate {
	mutation := newAnnouncementMutation(c.config, OpUpdate)
	return &AnnouncementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AnnouncementClient) UpdateOne(a *Announcement) *AnnouncementUpdateOne {
	mutation := newAnnouncementMutation(c.config, OpUpdateOne, withAnnouncement(a))
	return &AnnouncementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AnnouncementClient) UpdateOneID(id uint32) *AnnouncementUpdateOne {
	mutation := newAnnouncementMutation(c.config, OpUpdateOne, withAnnouncementID(id))
	return &AnnouncementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Announcement.
func (c *AnnouncementClient) Delete() *AnnouncementDelete {
	mutation := newAnnouncementMutation(c.config, OpDelete)
	return &AnnouncementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AnnouncementClient) DeleteOne(a *Announcement) *AnnouncementDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AnnouncementClient) DeleteOneID(id uint32) *AnnouncementDeleteOne {
	builder := c.Delete().Where(announcement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AnnouncementDeleteOne{builder}
}

// Query returns a query builder for Announcement.
func (c *AnnouncementClient) Query() *AnnouncementQuery {
	return &AnnouncementQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAnnouncement},
		inters: c.Interceptors(),
	}
}

// Get returns a Announcement entity by its id.
func (c *AnnouncementClient) Get(ctx context.Context, id uint32) (*Announcement, error) {
	return c.Query().Where(announcement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AnnouncementClient) GetX(ctx context.Context, id uint32) *Announcement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AnnouncementClient) Hooks() []Hook {
	return c.hooks.Announcement
}

// Interceptors returns the client interceptors.
func (c *AnnouncementClient) Interceptors() []Interceptor {
	return c.inters.Announcement
}

func (c *AnnouncementClient) mutate(ctx context.Context, m *AnnouncementMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AnnouncementCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AnnouncementUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AnnouncementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AnnouncementDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Announcement mutation op: %q", m.Op())
	}
}

// ContactClient is a client for the Contact schema.
type ContactClient struct {
	config
}

// NewContactClient returns a client for the Contact from the given config.
func NewContactClient(c config) *ContactClient {
	return &ContactClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `contact.Hooks(f(g(h())))`.
func (c *ContactClient) Use(hooks ...Hook) {
	c.hooks.Contact = append(c.hooks.Contact, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `contact.Intercept(f(g(h())))`.
func (c *ContactClient) Intercept(interceptors ...Interceptor) {
	c.inters.Contact = append(c.inters.Contact, interceptors...)
}

// Create returns a builder for creating a Contact entity.
func (c *ContactClient) Create() *ContactCreate {
	mutation := newContactMutation(c.config, OpCreate)
	return &ContactCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Contact entities.
func (c *ContactClient) CreateBulk(builders ...*ContactCreate) *ContactCreateBulk {
	return &ContactCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ContactClient) MapCreateBulk(slice any, setFunc func(*ContactCreate, int)) *ContactCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ContactCreateBulk{err: fmt.Errorf("calling to ContactClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ContactCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ContactCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Contact.
func (c *ContactClient) Update() *ContactUpdate {
	mutation := newContactMutation(c.config, OpUpdate)
	return &ContactUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContactClient) UpdateOne(co *Contact) *ContactUpdateOne {
	mutation := newContactMutation(c.config, OpUpdateOne, withContact(co))
	return &ContactUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContactClient) UpdateOneID(id uint32) *ContactUpdateOne {
	mutation := newContactMutation(c.config, OpUpdateOne, withContactID(id))
	return &ContactUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Contact.
func (c *ContactClient) Delete() *ContactDelete {
	mutation := newContactMutation(c.config, OpDelete)
	return &ContactDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ContactClient) DeleteOne(co *Contact) *ContactDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ContactClient) DeleteOneID(id uint32) *ContactDeleteOne {
	builder := c.Delete().Where(contact.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContactDeleteOne{builder}
}

// Query returns a query builder for Contact.
func (c *ContactClient) Query() *ContactQuery {
	return &ContactQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeContact},
		inters: c.Interceptors(),
	}
}

// Get returns a Contact entity by its id.
func (c *ContactClient) Get(ctx context.Context, id uint32) (*Contact, error) {
	return c.Query().Where(contact.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContactClient) GetX(ctx context.Context, id uint32) *Contact {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ContactClient) Hooks() []Hook {
	return c.hooks.Contact
}

// Interceptors returns the client interceptors.
func (c *ContactClient) Interceptors() []Interceptor {
	return c.inters.Contact
}

func (c *ContactClient) mutate(ctx context.Context, m *ContactMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ContactCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ContactUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ContactUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ContactDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Contact mutation op: %q", m.Op())
	}
}

// EmailTemplateClient is a client for the EmailTemplate schema.
type EmailTemplateClient struct {
	config
}

// NewEmailTemplateClient returns a client for the EmailTemplate from the given config.
func NewEmailTemplateClient(c config) *EmailTemplateClient {
	return &EmailTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `emailtemplate.Hooks(f(g(h())))`.
func (c *EmailTemplateClient) Use(hooks ...Hook) {
	c.hooks.EmailTemplate = append(c.hooks.EmailTemplate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `emailtemplate.Intercept(f(g(h())))`.
func (c *EmailTemplateClient) Intercept(interceptors ...Interceptor) {
	c.inters.EmailTemplate = append(c.inters.EmailTemplate, interceptors...)
}

// Create returns a builder for creating a EmailTemplate entity.
func (c *EmailTemplateClient) Create() *EmailTemplateCreate {
	mutation := newEmailTemplateMutation(c.config, OpCreate)
	return &EmailTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmailTemplate entities.
func (c *EmailTemplateClient) CreateBulk(builders ...*EmailTemplateCreate) *EmailTemplateCreateBulk {
	return &EmailTemplateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EmailTemplateClient) MapCreateBulk(slice any, setFunc func(*EmailTemplateCreate, int)) *EmailTemplateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EmailTemplateCreateBulk{err: fmt.Errorf("calling to EmailTemplateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EmailTemplateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EmailTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmailTemplate.
func (c *EmailTemplateClient) Update() *EmailTemplateUpdate {
	mutation := newEmailTemplateMutation(c.config, OpUpdate)
	return &EmailTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmailTemplateClient) UpdateOne(et *EmailTemplate) *EmailTemplateUpdateOne {
	mutation := newEmailTemplateMutation(c.config, OpUpdateOne, withEmailTemplate(et))
	return &EmailTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmailTemplateClient) UpdateOneID(id uint32) *EmailTemplateUpdateOne {
	mutation := newEmailTemplateMutation(c.config, OpUpdateOne, withEmailTemplateID(id))
	return &EmailTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmailTemplate.
func (c *EmailTemplateClient) Delete() *EmailTemplateDelete {
	mutation := newEmailTemplateMutation(c.config, OpDelete)
	return &EmailTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmailTemplateClient) DeleteOne(et *EmailTemplate) *EmailTemplateDeleteOne {
	return c.DeleteOneID(et.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmailTemplateClient) DeleteOneID(id uint32) *EmailTemplateDeleteOne {
	builder := c.Delete().Where(emailtemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmailTemplateDeleteOne{builder}
}

// Query returns a query builder for EmailTemplate.
func (c *EmailTemplateClient) Query() *EmailTemplateQuery {
	return &EmailTemplateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmailTemplate},
		inters: c.Interceptors(),
	}
}

// Get returns a EmailTemplate entity by its id.
func (c *EmailTemplateClient) Get(ctx context.Context, id uint32) (*EmailTemplate, error) {
	return c.Query().Where(emailtemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmailTemplateClient) GetX(ctx context.Context, id uint32) *EmailTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EmailTemplateClient) Hooks() []Hook {
	return c.hooks.EmailTemplate
}

// Interceptors returns the client interceptors.
func (c *EmailTemplateClient) Interceptors() []Interceptor {
	return c.inters.EmailTemplate
}

func (c *EmailTemplateClient) mutate(ctx context.Context, m *EmailTemplateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmailTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmailTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmailTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmailTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown EmailTemplate mutation op: %q", m.Op())
	}
}

// FrontendTemplateClient is a client for the FrontendTemplate schema.
type FrontendTemplateClient struct {
	config
}

// NewFrontendTemplateClient returns a client for the FrontendTemplate from the given config.
func NewFrontendTemplateClient(c config) *FrontendTemplateClient {
	return &FrontendTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `frontendtemplate.Hooks(f(g(h())))`.
func (c *FrontendTemplateClient) Use(hooks ...Hook) {
	c.hooks.FrontendTemplate = append(c.hooks.FrontendTemplate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `frontendtemplate.Intercept(f(g(h())))`.
func (c *FrontendTemplateClient) Intercept(interceptors ...Interceptor) {
	c.inters.FrontendTemplate = append(c.inters.FrontendTemplate, interceptors...)
}

// Create returns a builder for creating a FrontendTemplate entity.
func (c *FrontendTemplateClient) Create() *FrontendTemplateCreate {
	mutation := newFrontendTemplateMutation(c.config, OpCreate)
	return &FrontendTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FrontendTemplate entities.
func (c *FrontendTemplateClient) CreateBulk(builders ...*FrontendTemplateCreate) *FrontendTemplateCreateBulk {
	return &FrontendTemplateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FrontendTemplateClient) MapCreateBulk(slice any, setFunc func(*FrontendTemplateCreate, int)) *FrontendTemplateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FrontendTemplateCreateBulk{err: fmt.Errorf("calling to FrontendTemplateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FrontendTemplateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FrontendTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FrontendTemplate.
func (c *FrontendTemplateClient) Update() *FrontendTemplateUpdate {
	mutation := newFrontendTemplateMutation(c.config, OpUpdate)
	return &FrontendTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FrontendTemplateClient) UpdateOne(ft *FrontendTemplate) *FrontendTemplateUpdateOne {
	mutation := newFrontendTemplateMutation(c.config, OpUpdateOne, withFrontendTemplate(ft))
	return &FrontendTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FrontendTemplateClient) UpdateOneID(id uint32) *FrontendTemplateUpdateOne {
	mutation := newFrontendTemplateMutation(c.config, OpUpdateOne, withFrontendTemplateID(id))
	return &FrontendTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FrontendTemplate.
func (c *FrontendTemplateClient) Delete() *FrontendTemplateDelete {
	mutation := newFrontendTemplateMutation(c.config, OpDelete)
	return &FrontendTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FrontendTemplateClient) DeleteOne(ft *FrontendTemplate) *FrontendTemplateDeleteOne {
	return c.DeleteOneID(ft.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FrontendTemplateClient) DeleteOneID(id uint32) *FrontendTemplateDeleteOne {
	builder := c.Delete().Where(frontendtemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FrontendTemplateDeleteOne{builder}
}

// Query returns a query builder for FrontendTemplate.
func (c *FrontendTemplateClient) Query() *FrontendTemplateQuery {
	return &FrontendTemplateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFrontendTemplate},
		inters: c.Interceptors(),
	}
}

// Get returns a FrontendTemplate entity by its id.
func (c *FrontendTemplateClient) Get(ctx context.Context, id uint32) (*FrontendTemplate, error) {
	return c.Query().Where(frontendtemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FrontendTemplateClient) GetX(ctx context.Context, id uint32) *FrontendTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FrontendTemplateClient) Hooks() []Hook {
	return c.hooks.FrontendTemplate
}

// Interceptors returns the client interceptors.
func (c *FrontendTemplateClient) Interceptors() []Interceptor {
	return c.inters.FrontendTemplate
}

func (c *FrontendTemplateClient) mutate(ctx context.Context, m *FrontendTemplateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FrontendTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FrontendTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FrontendTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FrontendTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown FrontendTemplate mutation op: %q", m.Op())
	}
}

// GoodBenefitClient is a client for the GoodBenefit schema.
type GoodBenefitClient struct {
	config
}

// NewGoodBenefitClient returns a client for the GoodBenefit from the given config.
func NewGoodBenefitClient(c config) *GoodBenefitClient {
	return &GoodBenefitClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goodbenefit.Hooks(f(g(h())))`.
func (c *GoodBenefitClient) Use(hooks ...Hook) {
	c.hooks.GoodBenefit = append(c.hooks.GoodBenefit, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `goodbenefit.Intercept(f(g(h())))`.
func (c *GoodBenefitClient) Intercept(interceptors ...Interceptor) {
	c.inters.GoodBenefit = append(c.inters.GoodBenefit, interceptors...)
}

// Create returns a builder for creating a GoodBenefit entity.
func (c *GoodBenefitClient) Create() *GoodBenefitCreate {
	mutation := newGoodBenefitMutation(c.config, OpCreate)
	return &GoodBenefitCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoodBenefit entities.
func (c *GoodBenefitClient) CreateBulk(builders ...*GoodBenefitCreate) *GoodBenefitCreateBulk {
	return &GoodBenefitCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GoodBenefitClient) MapCreateBulk(slice any, setFunc func(*GoodBenefitCreate, int)) *GoodBenefitCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GoodBenefitCreateBulk{err: fmt.Errorf("calling to GoodBenefitClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GoodBenefitCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GoodBenefitCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoodBenefit.
func (c *GoodBenefitClient) Update() *GoodBenefitUpdate {
	mutation := newGoodBenefitMutation(c.config, OpUpdate)
	return &GoodBenefitUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodBenefitClient) UpdateOne(gb *GoodBenefit) *GoodBenefitUpdateOne {
	mutation := newGoodBenefitMutation(c.config, OpUpdateOne, withGoodBenefit(gb))
	return &GoodBenefitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodBenefitClient) UpdateOneID(id uint32) *GoodBenefitUpdateOne {
	mutation := newGoodBenefitMutation(c.config, OpUpdateOne, withGoodBenefitID(id))
	return &GoodBenefitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoodBenefit.
func (c *GoodBenefitClient) Delete() *GoodBenefitDelete {
	mutation := newGoodBenefitMutation(c.config, OpDelete)
	return &GoodBenefitDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GoodBenefitClient) DeleteOne(gb *GoodBenefit) *GoodBenefitDeleteOne {
	return c.DeleteOneID(gb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GoodBenefitClient) DeleteOneID(id uint32) *GoodBenefitDeleteOne {
	builder := c.Delete().Where(goodbenefit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodBenefitDeleteOne{builder}
}

// Query returns a query builder for GoodBenefit.
func (c *GoodBenefitClient) Query() *GoodBenefitQuery {
	return &GoodBenefitQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGoodBenefit},
		inters: c.Interceptors(),
	}
}

// Get returns a GoodBenefit entity by its id.
func (c *GoodBenefitClient) Get(ctx context.Context, id uint32) (*GoodBenefit, error) {
	return c.Query().Where(goodbenefit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodBenefitClient) GetX(ctx context.Context, id uint32) *GoodBenefit {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GoodBenefitClient) Hooks() []Hook {
	return c.hooks.GoodBenefit
}

// Interceptors returns the client interceptors.
func (c *GoodBenefitClient) Interceptors() []Interceptor {
	return c.inters.GoodBenefit
}

func (c *GoodBenefitClient) mutate(ctx context.Context, m *GoodBenefitMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GoodBenefitCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GoodBenefitUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GoodBenefitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GoodBenefitDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown GoodBenefit mutation op: %q", m.Op())
	}
}

// NotifClient is a client for the Notif schema.
type NotifClient struct {
	config
}

// NewNotifClient returns a client for the Notif from the given config.
func NewNotifClient(c config) *NotifClient {
	return &NotifClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notif.Hooks(f(g(h())))`.
func (c *NotifClient) Use(hooks ...Hook) {
	c.hooks.Notif = append(c.hooks.Notif, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notif.Intercept(f(g(h())))`.
func (c *NotifClient) Intercept(interceptors ...Interceptor) {
	c.inters.Notif = append(c.inters.Notif, interceptors...)
}

// Create returns a builder for creating a Notif entity.
func (c *NotifClient) Create() *NotifCreate {
	mutation := newNotifMutation(c.config, OpCreate)
	return &NotifCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Notif entities.
func (c *NotifClient) CreateBulk(builders ...*NotifCreate) *NotifCreateBulk {
	return &NotifCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotifClient) MapCreateBulk(slice any, setFunc func(*NotifCreate, int)) *NotifCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotifCreateBulk{err: fmt.Errorf("calling to NotifClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotifCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotifCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Notif.
func (c *NotifClient) Update() *NotifUpdate {
	mutation := newNotifMutation(c.config, OpUpdate)
	return &NotifUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotifClient) UpdateOne(n *Notif) *NotifUpdateOne {
	mutation := newNotifMutation(c.config, OpUpdateOne, withNotif(n))
	return &NotifUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotifClient) UpdateOneID(id uint32) *NotifUpdateOne {
	mutation := newNotifMutation(c.config, OpUpdateOne, withNotifID(id))
	return &NotifUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Notif.
func (c *NotifClient) Delete() *NotifDelete {
	mutation := newNotifMutation(c.config, OpDelete)
	return &NotifDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotifClient) DeleteOne(n *Notif) *NotifDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotifClient) DeleteOneID(id uint32) *NotifDeleteOne {
	builder := c.Delete().Where(notif.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotifDeleteOne{builder}
}

// Query returns a query builder for Notif.
func (c *NotifClient) Query() *NotifQuery {
	return &NotifQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotif},
		inters: c.Interceptors(),
	}
}

// Get returns a Notif entity by its id.
func (c *NotifClient) Get(ctx context.Context, id uint32) (*Notif, error) {
	return c.Query().Where(notif.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotifClient) GetX(ctx context.Context, id uint32) *Notif {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NotifClient) Hooks() []Hook {
	return c.hooks.Notif
}

// Interceptors returns the client interceptors.
func (c *NotifClient) Interceptors() []Interceptor {
	return c.inters.Notif
}

func (c *NotifClient) mutate(ctx context.Context, m *NotifMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotifCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotifUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotifUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotifDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Notif mutation op: %q", m.Op())
	}
}

// NotifChannelClient is a client for the NotifChannel schema.
type NotifChannelClient struct {
	config
}

// NewNotifChannelClient returns a client for the NotifChannel from the given config.
func NewNotifChannelClient(c config) *NotifChannelClient {
	return &NotifChannelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notifchannel.Hooks(f(g(h())))`.
func (c *NotifChannelClient) Use(hooks ...Hook) {
	c.hooks.NotifChannel = append(c.hooks.NotifChannel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notifchannel.Intercept(f(g(h())))`.
func (c *NotifChannelClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotifChannel = append(c.inters.NotifChannel, interceptors...)
}

// Create returns a builder for creating a NotifChannel entity.
func (c *NotifChannelClient) Create() *NotifChannelCreate {
	mutation := newNotifChannelMutation(c.config, OpCreate)
	return &NotifChannelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotifChannel entities.
func (c *NotifChannelClient) CreateBulk(builders ...*NotifChannelCreate) *NotifChannelCreateBulk {
	return &NotifChannelCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotifChannelClient) MapCreateBulk(slice any, setFunc func(*NotifChannelCreate, int)) *NotifChannelCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotifChannelCreateBulk{err: fmt.Errorf("calling to NotifChannelClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotifChannelCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotifChannelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotifChannel.
func (c *NotifChannelClient) Update() *NotifChannelUpdate {
	mutation := newNotifChannelMutation(c.config, OpUpdate)
	return &NotifChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotifChannelClient) UpdateOne(nc *NotifChannel) *NotifChannelUpdateOne {
	mutation := newNotifChannelMutation(c.config, OpUpdateOne, withNotifChannel(nc))
	return &NotifChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotifChannelClient) UpdateOneID(id uint32) *NotifChannelUpdateOne {
	mutation := newNotifChannelMutation(c.config, OpUpdateOne, withNotifChannelID(id))
	return &NotifChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotifChannel.
func (c *NotifChannelClient) Delete() *NotifChannelDelete {
	mutation := newNotifChannelMutation(c.config, OpDelete)
	return &NotifChannelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotifChannelClient) DeleteOne(nc *NotifChannel) *NotifChannelDeleteOne {
	return c.DeleteOneID(nc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotifChannelClient) DeleteOneID(id uint32) *NotifChannelDeleteOne {
	builder := c.Delete().Where(notifchannel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotifChannelDeleteOne{builder}
}

// Query returns a query builder for NotifChannel.
func (c *NotifChannelClient) Query() *NotifChannelQuery {
	return &NotifChannelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotifChannel},
		inters: c.Interceptors(),
	}
}

// Get returns a NotifChannel entity by its id.
func (c *NotifChannelClient) Get(ctx context.Context, id uint32) (*NotifChannel, error) {
	return c.Query().Where(notifchannel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotifChannelClient) GetX(ctx context.Context, id uint32) *NotifChannel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NotifChannelClient) Hooks() []Hook {
	return c.hooks.NotifChannel
}

// Interceptors returns the client interceptors.
func (c *NotifChannelClient) Interceptors() []Interceptor {
	return c.inters.NotifChannel
}

func (c *NotifChannelClient) mutate(ctx context.Context, m *NotifChannelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotifChannelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotifChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotifChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotifChannelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown NotifChannel mutation op: %q", m.Op())
	}
}

// NotifUserClient is a client for the NotifUser schema.
type NotifUserClient struct {
	config
}

// NewNotifUserClient returns a client for the NotifUser from the given config.
func NewNotifUserClient(c config) *NotifUserClient {
	return &NotifUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notifuser.Hooks(f(g(h())))`.
func (c *NotifUserClient) Use(hooks ...Hook) {
	c.hooks.NotifUser = append(c.hooks.NotifUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notifuser.Intercept(f(g(h())))`.
func (c *NotifUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotifUser = append(c.inters.NotifUser, interceptors...)
}

// Create returns a builder for creating a NotifUser entity.
func (c *NotifUserClient) Create() *NotifUserCreate {
	mutation := newNotifUserMutation(c.config, OpCreate)
	return &NotifUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotifUser entities.
func (c *NotifUserClient) CreateBulk(builders ...*NotifUserCreate) *NotifUserCreateBulk {
	return &NotifUserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotifUserClient) MapCreateBulk(slice any, setFunc func(*NotifUserCreate, int)) *NotifUserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotifUserCreateBulk{err: fmt.Errorf("calling to NotifUserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotifUserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotifUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotifUser.
func (c *NotifUserClient) Update() *NotifUserUpdate {
	mutation := newNotifUserMutation(c.config, OpUpdate)
	return &NotifUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotifUserClient) UpdateOne(nu *NotifUser) *NotifUserUpdateOne {
	mutation := newNotifUserMutation(c.config, OpUpdateOne, withNotifUser(nu))
	return &NotifUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotifUserClient) UpdateOneID(id uint32) *NotifUserUpdateOne {
	mutation := newNotifUserMutation(c.config, OpUpdateOne, withNotifUserID(id))
	return &NotifUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotifUser.
func (c *NotifUserClient) Delete() *NotifUserDelete {
	mutation := newNotifUserMutation(c.config, OpDelete)
	return &NotifUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotifUserClient) DeleteOne(nu *NotifUser) *NotifUserDeleteOne {
	return c.DeleteOneID(nu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotifUserClient) DeleteOneID(id uint32) *NotifUserDeleteOne {
	builder := c.Delete().Where(notifuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotifUserDeleteOne{builder}
}

// Query returns a query builder for NotifUser.
func (c *NotifUserClient) Query() *NotifUserQuery {
	return &NotifUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotifUser},
		inters: c.Interceptors(),
	}
}

// Get returns a NotifUser entity by its id.
func (c *NotifUserClient) Get(ctx context.Context, id uint32) (*NotifUser, error) {
	return c.Query().Where(notifuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotifUserClient) GetX(ctx context.Context, id uint32) *NotifUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NotifUserClient) Hooks() []Hook {
	return c.hooks.NotifUser
}

// Interceptors returns the client interceptors.
func (c *NotifUserClient) Interceptors() []Interceptor {
	return c.inters.NotifUser
}

func (c *NotifUserClient) mutate(ctx context.Context, m *NotifUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotifUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotifUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotifUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotifUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown NotifUser mutation op: %q", m.Op())
	}
}

// ReadAnnouncementClient is a client for the ReadAnnouncement schema.
type ReadAnnouncementClient struct {
	config
}

// NewReadAnnouncementClient returns a client for the ReadAnnouncement from the given config.
func NewReadAnnouncementClient(c config) *ReadAnnouncementClient {
	return &ReadAnnouncementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `readannouncement.Hooks(f(g(h())))`.
func (c *ReadAnnouncementClient) Use(hooks ...Hook) {
	c.hooks.ReadAnnouncement = append(c.hooks.ReadAnnouncement, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `readannouncement.Intercept(f(g(h())))`.
func (c *ReadAnnouncementClient) Intercept(interceptors ...Interceptor) {
	c.inters.ReadAnnouncement = append(c.inters.ReadAnnouncement, interceptors...)
}

// Create returns a builder for creating a ReadAnnouncement entity.
func (c *ReadAnnouncementClient) Create() *ReadAnnouncementCreate {
	mutation := newReadAnnouncementMutation(c.config, OpCreate)
	return &ReadAnnouncementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ReadAnnouncement entities.
func (c *ReadAnnouncementClient) CreateBulk(builders ...*ReadAnnouncementCreate) *ReadAnnouncementCreateBulk {
	return &ReadAnnouncementCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ReadAnnouncementClient) MapCreateBulk(slice any, setFunc func(*ReadAnnouncementCreate, int)) *ReadAnnouncementCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ReadAnnouncementCreateBulk{err: fmt.Errorf("calling to ReadAnnouncementClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ReadAnnouncementCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ReadAnnouncementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ReadAnnouncement.
func (c *ReadAnnouncementClient) Update() *ReadAnnouncementUpdate {
	mutation := newReadAnnouncementMutation(c.config, OpUpdate)
	return &ReadAnnouncementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReadAnnouncementClient) UpdateOne(ra *ReadAnnouncement) *ReadAnnouncementUpdateOne {
	mutation := newReadAnnouncementMutation(c.config, OpUpdateOne, withReadAnnouncement(ra))
	return &ReadAnnouncementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReadAnnouncementClient) UpdateOneID(id uint32) *ReadAnnouncementUpdateOne {
	mutation := newReadAnnouncementMutation(c.config, OpUpdateOne, withReadAnnouncementID(id))
	return &ReadAnnouncementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ReadAnnouncement.
func (c *ReadAnnouncementClient) Delete() *ReadAnnouncementDelete {
	mutation := newReadAnnouncementMutation(c.config, OpDelete)
	return &ReadAnnouncementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReadAnnouncementClient) DeleteOne(ra *ReadAnnouncement) *ReadAnnouncementDeleteOne {
	return c.DeleteOneID(ra.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReadAnnouncementClient) DeleteOneID(id uint32) *ReadAnnouncementDeleteOne {
	builder := c.Delete().Where(readannouncement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReadAnnouncementDeleteOne{builder}
}

// Query returns a query builder for ReadAnnouncement.
func (c *ReadAnnouncementClient) Query() *ReadAnnouncementQuery {
	return &ReadAnnouncementQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReadAnnouncement},
		inters: c.Interceptors(),
	}
}

// Get returns a ReadAnnouncement entity by its id.
func (c *ReadAnnouncementClient) Get(ctx context.Context, id uint32) (*ReadAnnouncement, error) {
	return c.Query().Where(readannouncement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReadAnnouncementClient) GetX(ctx context.Context, id uint32) *ReadAnnouncement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ReadAnnouncementClient) Hooks() []Hook {
	return c.hooks.ReadAnnouncement
}

// Interceptors returns the client interceptors.
func (c *ReadAnnouncementClient) Interceptors() []Interceptor {
	return c.inters.ReadAnnouncement
}

func (c *ReadAnnouncementClient) mutate(ctx context.Context, m *ReadAnnouncementMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReadAnnouncementCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReadAnnouncementUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReadAnnouncementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReadAnnouncementDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown ReadAnnouncement mutation op: %q", m.Op())
	}
}

// SMSTemplateClient is a client for the SMSTemplate schema.
type SMSTemplateClient struct {
	config
}

// NewSMSTemplateClient returns a client for the SMSTemplate from the given config.
func NewSMSTemplateClient(c config) *SMSTemplateClient {
	return &SMSTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `smstemplate.Hooks(f(g(h())))`.
func (c *SMSTemplateClient) Use(hooks ...Hook) {
	c.hooks.SMSTemplate = append(c.hooks.SMSTemplate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `smstemplate.Intercept(f(g(h())))`.
func (c *SMSTemplateClient) Intercept(interceptors ...Interceptor) {
	c.inters.SMSTemplate = append(c.inters.SMSTemplate, interceptors...)
}

// Create returns a builder for creating a SMSTemplate entity.
func (c *SMSTemplateClient) Create() *SMSTemplateCreate {
	mutation := newSMSTemplateMutation(c.config, OpCreate)
	return &SMSTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SMSTemplate entities.
func (c *SMSTemplateClient) CreateBulk(builders ...*SMSTemplateCreate) *SMSTemplateCreateBulk {
	return &SMSTemplateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SMSTemplateClient) MapCreateBulk(slice any, setFunc func(*SMSTemplateCreate, int)) *SMSTemplateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SMSTemplateCreateBulk{err: fmt.Errorf("calling to SMSTemplateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SMSTemplateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SMSTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SMSTemplate.
func (c *SMSTemplateClient) Update() *SMSTemplateUpdate {
	mutation := newSMSTemplateMutation(c.config, OpUpdate)
	return &SMSTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SMSTemplateClient) UpdateOne(st *SMSTemplate) *SMSTemplateUpdateOne {
	mutation := newSMSTemplateMutation(c.config, OpUpdateOne, withSMSTemplate(st))
	return &SMSTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SMSTemplateClient) UpdateOneID(id uint32) *SMSTemplateUpdateOne {
	mutation := newSMSTemplateMutation(c.config, OpUpdateOne, withSMSTemplateID(id))
	return &SMSTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SMSTemplate.
func (c *SMSTemplateClient) Delete() *SMSTemplateDelete {
	mutation := newSMSTemplateMutation(c.config, OpDelete)
	return &SMSTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SMSTemplateClient) DeleteOne(st *SMSTemplate) *SMSTemplateDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SMSTemplateClient) DeleteOneID(id uint32) *SMSTemplateDeleteOne {
	builder := c.Delete().Where(smstemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SMSTemplateDeleteOne{builder}
}

// Query returns a query builder for SMSTemplate.
func (c *SMSTemplateClient) Query() *SMSTemplateQuery {
	return &SMSTemplateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSMSTemplate},
		inters: c.Interceptors(),
	}
}

// Get returns a SMSTemplate entity by its id.
func (c *SMSTemplateClient) Get(ctx context.Context, id uint32) (*SMSTemplate, error) {
	return c.Query().Where(smstemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SMSTemplateClient) GetX(ctx context.Context, id uint32) *SMSTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SMSTemplateClient) Hooks() []Hook {
	return c.hooks.SMSTemplate
}

// Interceptors returns the client interceptors.
func (c *SMSTemplateClient) Interceptors() []Interceptor {
	return c.inters.SMSTemplate
}

func (c *SMSTemplateClient) mutate(ctx context.Context, m *SMSTemplateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SMSTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SMSTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SMSTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SMSTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown SMSTemplate mutation op: %q", m.Op())
	}
}

// SendAnnouncementClient is a client for the SendAnnouncement schema.
type SendAnnouncementClient struct {
	config
}

// NewSendAnnouncementClient returns a client for the SendAnnouncement from the given config.
func NewSendAnnouncementClient(c config) *SendAnnouncementClient {
	return &SendAnnouncementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sendannouncement.Hooks(f(g(h())))`.
func (c *SendAnnouncementClient) Use(hooks ...Hook) {
	c.hooks.SendAnnouncement = append(c.hooks.SendAnnouncement, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sendannouncement.Intercept(f(g(h())))`.
func (c *SendAnnouncementClient) Intercept(interceptors ...Interceptor) {
	c.inters.SendAnnouncement = append(c.inters.SendAnnouncement, interceptors...)
}

// Create returns a builder for creating a SendAnnouncement entity.
func (c *SendAnnouncementClient) Create() *SendAnnouncementCreate {
	mutation := newSendAnnouncementMutation(c.config, OpCreate)
	return &SendAnnouncementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SendAnnouncement entities.
func (c *SendAnnouncementClient) CreateBulk(builders ...*SendAnnouncementCreate) *SendAnnouncementCreateBulk {
	return &SendAnnouncementCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SendAnnouncementClient) MapCreateBulk(slice any, setFunc func(*SendAnnouncementCreate, int)) *SendAnnouncementCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SendAnnouncementCreateBulk{err: fmt.Errorf("calling to SendAnnouncementClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SendAnnouncementCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SendAnnouncementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SendAnnouncement.
func (c *SendAnnouncementClient) Update() *SendAnnouncementUpdate {
	mutation := newSendAnnouncementMutation(c.config, OpUpdate)
	return &SendAnnouncementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SendAnnouncementClient) UpdateOne(sa *SendAnnouncement) *SendAnnouncementUpdateOne {
	mutation := newSendAnnouncementMutation(c.config, OpUpdateOne, withSendAnnouncement(sa))
	return &SendAnnouncementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SendAnnouncementClient) UpdateOneID(id uint32) *SendAnnouncementUpdateOne {
	mutation := newSendAnnouncementMutation(c.config, OpUpdateOne, withSendAnnouncementID(id))
	return &SendAnnouncementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SendAnnouncement.
func (c *SendAnnouncementClient) Delete() *SendAnnouncementDelete {
	mutation := newSendAnnouncementMutation(c.config, OpDelete)
	return &SendAnnouncementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SendAnnouncementClient) DeleteOne(sa *SendAnnouncement) *SendAnnouncementDeleteOne {
	return c.DeleteOneID(sa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SendAnnouncementClient) DeleteOneID(id uint32) *SendAnnouncementDeleteOne {
	builder := c.Delete().Where(sendannouncement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SendAnnouncementDeleteOne{builder}
}

// Query returns a query builder for SendAnnouncement.
func (c *SendAnnouncementClient) Query() *SendAnnouncementQuery {
	return &SendAnnouncementQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSendAnnouncement},
		inters: c.Interceptors(),
	}
}

// Get returns a SendAnnouncement entity by its id.
func (c *SendAnnouncementClient) Get(ctx context.Context, id uint32) (*SendAnnouncement, error) {
	return c.Query().Where(sendannouncement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SendAnnouncementClient) GetX(ctx context.Context, id uint32) *SendAnnouncement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SendAnnouncementClient) Hooks() []Hook {
	return c.hooks.SendAnnouncement
}

// Interceptors returns the client interceptors.
func (c *SendAnnouncementClient) Interceptors() []Interceptor {
	return c.inters.SendAnnouncement
}

func (c *SendAnnouncementClient) mutate(ctx context.Context, m *SendAnnouncementMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SendAnnouncementCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SendAnnouncementUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SendAnnouncementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SendAnnouncementDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown SendAnnouncement mutation op: %q", m.Op())
	}
}

// UserAnnouncementClient is a client for the UserAnnouncement schema.
type UserAnnouncementClient struct {
	config
}

// NewUserAnnouncementClient returns a client for the UserAnnouncement from the given config.
func NewUserAnnouncementClient(c config) *UserAnnouncementClient {
	return &UserAnnouncementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userannouncement.Hooks(f(g(h())))`.
func (c *UserAnnouncementClient) Use(hooks ...Hook) {
	c.hooks.UserAnnouncement = append(c.hooks.UserAnnouncement, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userannouncement.Intercept(f(g(h())))`.
func (c *UserAnnouncementClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserAnnouncement = append(c.inters.UserAnnouncement, interceptors...)
}

// Create returns a builder for creating a UserAnnouncement entity.
func (c *UserAnnouncementClient) Create() *UserAnnouncementCreate {
	mutation := newUserAnnouncementMutation(c.config, OpCreate)
	return &UserAnnouncementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserAnnouncement entities.
func (c *UserAnnouncementClient) CreateBulk(builders ...*UserAnnouncementCreate) *UserAnnouncementCreateBulk {
	return &UserAnnouncementCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserAnnouncementClient) MapCreateBulk(slice any, setFunc func(*UserAnnouncementCreate, int)) *UserAnnouncementCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserAnnouncementCreateBulk{err: fmt.Errorf("calling to UserAnnouncementClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserAnnouncementCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserAnnouncementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserAnnouncement.
func (c *UserAnnouncementClient) Update() *UserAnnouncementUpdate {
	mutation := newUserAnnouncementMutation(c.config, OpUpdate)
	return &UserAnnouncementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserAnnouncementClient) UpdateOne(ua *UserAnnouncement) *UserAnnouncementUpdateOne {
	mutation := newUserAnnouncementMutation(c.config, OpUpdateOne, withUserAnnouncement(ua))
	return &UserAnnouncementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserAnnouncementClient) UpdateOneID(id uint32) *UserAnnouncementUpdateOne {
	mutation := newUserAnnouncementMutation(c.config, OpUpdateOne, withUserAnnouncementID(id))
	return &UserAnnouncementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserAnnouncement.
func (c *UserAnnouncementClient) Delete() *UserAnnouncementDelete {
	mutation := newUserAnnouncementMutation(c.config, OpDelete)
	return &UserAnnouncementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserAnnouncementClient) DeleteOne(ua *UserAnnouncement) *UserAnnouncementDeleteOne {
	return c.DeleteOneID(ua.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserAnnouncementClient) DeleteOneID(id uint32) *UserAnnouncementDeleteOne {
	builder := c.Delete().Where(userannouncement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserAnnouncementDeleteOne{builder}
}

// Query returns a query builder for UserAnnouncement.
func (c *UserAnnouncementClient) Query() *UserAnnouncementQuery {
	return &UserAnnouncementQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserAnnouncement},
		inters: c.Interceptors(),
	}
}

// Get returns a UserAnnouncement entity by its id.
func (c *UserAnnouncementClient) Get(ctx context.Context, id uint32) (*UserAnnouncement, error) {
	return c.Query().Where(userannouncement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserAnnouncementClient) GetX(ctx context.Context, id uint32) *UserAnnouncement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserAnnouncementClient) Hooks() []Hook {
	return c.hooks.UserAnnouncement
}

// Interceptors returns the client interceptors.
func (c *UserAnnouncementClient) Interceptors() []Interceptor {
	return c.inters.UserAnnouncement
}

func (c *UserAnnouncementClient) mutate(ctx context.Context, m *UserAnnouncementMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserAnnouncementCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserAnnouncementUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserAnnouncementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserAnnouncementDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown UserAnnouncement mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Announcement, Contact, EmailTemplate, FrontendTemplate, GoodBenefit, Notif,
		NotifChannel, NotifUser, ReadAnnouncement, SMSTemplate, SendAnnouncement,
		UserAnnouncement []ent.Hook
	}
	inters struct {
		Announcement, Contact, EmailTemplate, FrontendTemplate, GoodBenefit, Notif,
		NotifChannel, NotifUser, ReadAnnouncement, SMSTemplate, SendAnnouncement,
		UserAnnouncement []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}

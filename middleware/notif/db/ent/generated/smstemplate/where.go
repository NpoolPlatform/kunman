// Code generated by ent, DO NOT EDIT.

package smstemplate

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/notif/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldDeletedAt, v))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldEntID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldAppID, v))
}

// LangID applies equality check predicate on the "lang_id" field. It's identical to LangIDEQ.
func LangID(v uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldLangID, v))
}

// UsedFor applies equality check predicate on the "used_for" field. It's identical to UsedForEQ.
func UsedFor(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldUsedFor, v))
}

// Subject applies equality check predicate on the "subject" field. It's identical to SubjectEQ.
func Subject(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldSubject, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldMessage, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLTE(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLTE(FieldEntID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLTE(FieldAppID, v))
}

// LangIDEQ applies the EQ predicate on the "lang_id" field.
func LangIDEQ(v uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldLangID, v))
}

// LangIDNEQ applies the NEQ predicate on the "lang_id" field.
func LangIDNEQ(v uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldLangID, v))
}

// LangIDIn applies the In predicate on the "lang_id" field.
func LangIDIn(vs ...uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIn(FieldLangID, vs...))
}

// LangIDNotIn applies the NotIn predicate on the "lang_id" field.
func LangIDNotIn(vs ...uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotIn(FieldLangID, vs...))
}

// LangIDGT applies the GT predicate on the "lang_id" field.
func LangIDGT(v uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGT(FieldLangID, v))
}

// LangIDGTE applies the GTE predicate on the "lang_id" field.
func LangIDGTE(v uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGTE(FieldLangID, v))
}

// LangIDLT applies the LT predicate on the "lang_id" field.
func LangIDLT(v uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLT(FieldLangID, v))
}

// LangIDLTE applies the LTE predicate on the "lang_id" field.
func LangIDLTE(v uuid.UUID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLTE(FieldLangID, v))
}

// UsedForEQ applies the EQ predicate on the "used_for" field.
func UsedForEQ(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldUsedFor, v))
}

// UsedForNEQ applies the NEQ predicate on the "used_for" field.
func UsedForNEQ(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldUsedFor, v))
}

// UsedForIn applies the In predicate on the "used_for" field.
func UsedForIn(vs ...string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIn(FieldUsedFor, vs...))
}

// UsedForNotIn applies the NotIn predicate on the "used_for" field.
func UsedForNotIn(vs ...string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotIn(FieldUsedFor, vs...))
}

// UsedForGT applies the GT predicate on the "used_for" field.
func UsedForGT(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGT(FieldUsedFor, v))
}

// UsedForGTE applies the GTE predicate on the "used_for" field.
func UsedForGTE(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGTE(FieldUsedFor, v))
}

// UsedForLT applies the LT predicate on the "used_for" field.
func UsedForLT(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLT(FieldUsedFor, v))
}

// UsedForLTE applies the LTE predicate on the "used_for" field.
func UsedForLTE(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLTE(FieldUsedFor, v))
}

// UsedForContains applies the Contains predicate on the "used_for" field.
func UsedForContains(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldContains(FieldUsedFor, v))
}

// UsedForHasPrefix applies the HasPrefix predicate on the "used_for" field.
func UsedForHasPrefix(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldHasPrefix(FieldUsedFor, v))
}

// UsedForHasSuffix applies the HasSuffix predicate on the "used_for" field.
func UsedForHasSuffix(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldHasSuffix(FieldUsedFor, v))
}

// UsedForIsNil applies the IsNil predicate on the "used_for" field.
func UsedForIsNil() predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIsNull(FieldUsedFor))
}

// UsedForNotNil applies the NotNil predicate on the "used_for" field.
func UsedForNotNil() predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotNull(FieldUsedFor))
}

// UsedForEqualFold applies the EqualFold predicate on the "used_for" field.
func UsedForEqualFold(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEqualFold(FieldUsedFor, v))
}

// UsedForContainsFold applies the ContainsFold predicate on the "used_for" field.
func UsedForContainsFold(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldContainsFold(FieldUsedFor, v))
}

// SubjectEQ applies the EQ predicate on the "subject" field.
func SubjectEQ(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldSubject, v))
}

// SubjectNEQ applies the NEQ predicate on the "subject" field.
func SubjectNEQ(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldSubject, v))
}

// SubjectIn applies the In predicate on the "subject" field.
func SubjectIn(vs ...string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIn(FieldSubject, vs...))
}

// SubjectNotIn applies the NotIn predicate on the "subject" field.
func SubjectNotIn(vs ...string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotIn(FieldSubject, vs...))
}

// SubjectGT applies the GT predicate on the "subject" field.
func SubjectGT(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGT(FieldSubject, v))
}

// SubjectGTE applies the GTE predicate on the "subject" field.
func SubjectGTE(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGTE(FieldSubject, v))
}

// SubjectLT applies the LT predicate on the "subject" field.
func SubjectLT(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLT(FieldSubject, v))
}

// SubjectLTE applies the LTE predicate on the "subject" field.
func SubjectLTE(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLTE(FieldSubject, v))
}

// SubjectContains applies the Contains predicate on the "subject" field.
func SubjectContains(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldContains(FieldSubject, v))
}

// SubjectHasPrefix applies the HasPrefix predicate on the "subject" field.
func SubjectHasPrefix(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldHasPrefix(FieldSubject, v))
}

// SubjectHasSuffix applies the HasSuffix predicate on the "subject" field.
func SubjectHasSuffix(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldHasSuffix(FieldSubject, v))
}

// SubjectIsNil applies the IsNil predicate on the "subject" field.
func SubjectIsNil() predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIsNull(FieldSubject))
}

// SubjectNotNil applies the NotNil predicate on the "subject" field.
func SubjectNotNil() predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotNull(FieldSubject))
}

// SubjectEqualFold applies the EqualFold predicate on the "subject" field.
func SubjectEqualFold(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEqualFold(FieldSubject, v))
}

// SubjectContainsFold applies the ContainsFold predicate on the "subject" field.
func SubjectContainsFold(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldContainsFold(FieldSubject, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageIsNil applies the IsNil predicate on the "message" field.
func MessageIsNil() predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIsNull(FieldMessage))
}

// MessageNotNil applies the NotNil predicate on the "message" field.
func MessageNotNil() predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotNull(FieldMessage))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldContainsFold(FieldMessage, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SMSTemplate) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SMSTemplate) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SMSTemplate) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.NotPredicates(p))
}

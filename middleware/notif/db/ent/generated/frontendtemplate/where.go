// Code generated by ent, DO NOT EDIT.

package frontendtemplate

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/notif/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldEQ(FieldDeletedAt, v))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldEQ(FieldEntID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldEQ(FieldAppID, v))
}

// LangID applies equality check predicate on the "lang_id" field. It's identical to LangIDEQ.
func LangID(v uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldEQ(FieldLangID, v))
}

// UsedFor applies equality check predicate on the "used_for" field. It's identical to UsedForEQ.
func UsedFor(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldEQ(FieldUsedFor, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldEQ(FieldTitle, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldEQ(FieldContent, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldLTE(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldLTE(FieldEntID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldLTE(FieldAppID, v))
}

// LangIDEQ applies the EQ predicate on the "lang_id" field.
func LangIDEQ(v uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldEQ(FieldLangID, v))
}

// LangIDNEQ applies the NEQ predicate on the "lang_id" field.
func LangIDNEQ(v uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldNEQ(FieldLangID, v))
}

// LangIDIn applies the In predicate on the "lang_id" field.
func LangIDIn(vs ...uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldIn(FieldLangID, vs...))
}

// LangIDNotIn applies the NotIn predicate on the "lang_id" field.
func LangIDNotIn(vs ...uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldNotIn(FieldLangID, vs...))
}

// LangIDGT applies the GT predicate on the "lang_id" field.
func LangIDGT(v uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldGT(FieldLangID, v))
}

// LangIDGTE applies the GTE predicate on the "lang_id" field.
func LangIDGTE(v uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldGTE(FieldLangID, v))
}

// LangIDLT applies the LT predicate on the "lang_id" field.
func LangIDLT(v uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldLT(FieldLangID, v))
}

// LangIDLTE applies the LTE predicate on the "lang_id" field.
func LangIDLTE(v uuid.UUID) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldLTE(FieldLangID, v))
}

// UsedForEQ applies the EQ predicate on the "used_for" field.
func UsedForEQ(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldEQ(FieldUsedFor, v))
}

// UsedForNEQ applies the NEQ predicate on the "used_for" field.
func UsedForNEQ(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldNEQ(FieldUsedFor, v))
}

// UsedForIn applies the In predicate on the "used_for" field.
func UsedForIn(vs ...string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldIn(FieldUsedFor, vs...))
}

// UsedForNotIn applies the NotIn predicate on the "used_for" field.
func UsedForNotIn(vs ...string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldNotIn(FieldUsedFor, vs...))
}

// UsedForGT applies the GT predicate on the "used_for" field.
func UsedForGT(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldGT(FieldUsedFor, v))
}

// UsedForGTE applies the GTE predicate on the "used_for" field.
func UsedForGTE(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldGTE(FieldUsedFor, v))
}

// UsedForLT applies the LT predicate on the "used_for" field.
func UsedForLT(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldLT(FieldUsedFor, v))
}

// UsedForLTE applies the LTE predicate on the "used_for" field.
func UsedForLTE(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldLTE(FieldUsedFor, v))
}

// UsedForContains applies the Contains predicate on the "used_for" field.
func UsedForContains(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldContains(FieldUsedFor, v))
}

// UsedForHasPrefix applies the HasPrefix predicate on the "used_for" field.
func UsedForHasPrefix(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldHasPrefix(FieldUsedFor, v))
}

// UsedForHasSuffix applies the HasSuffix predicate on the "used_for" field.
func UsedForHasSuffix(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldHasSuffix(FieldUsedFor, v))
}

// UsedForIsNil applies the IsNil predicate on the "used_for" field.
func UsedForIsNil() predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldIsNull(FieldUsedFor))
}

// UsedForNotNil applies the NotNil predicate on the "used_for" field.
func UsedForNotNil() predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldNotNull(FieldUsedFor))
}

// UsedForEqualFold applies the EqualFold predicate on the "used_for" field.
func UsedForEqualFold(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldEqualFold(FieldUsedFor, v))
}

// UsedForContainsFold applies the ContainsFold predicate on the "used_for" field.
func UsedForContainsFold(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldContainsFold(FieldUsedFor, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldIsNull(FieldTitle))
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldNotNull(FieldTitle))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldContainsFold(FieldTitle, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldHasSuffix(FieldContent, v))
}

// ContentIsNil applies the IsNil predicate on the "content" field.
func ContentIsNil() predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldIsNull(FieldContent))
}

// ContentNotNil applies the NotNil predicate on the "content" field.
func ContentNotNil() predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldNotNull(FieldContent))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.FieldContainsFold(FieldContent, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FrontendTemplate) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FrontendTemplate) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FrontendTemplate) predicate.FrontendTemplate {
	return predicate.FrontendTemplate(sql.NotPredicates(p))
}

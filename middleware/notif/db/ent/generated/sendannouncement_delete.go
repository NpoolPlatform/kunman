// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/notif/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/notif/db/ent/generated/sendannouncement"
)

// SendAnnouncementDelete is the builder for deleting a SendAnnouncement entity.
type SendAnnouncementDelete struct {
	config
	hooks    []Hook
	mutation *SendAnnouncementMutation
}

// Where appends a list predicates to the SendAnnouncementDelete builder.
func (sad *SendAnnouncementDelete) Where(ps ...predicate.SendAnnouncement) *SendAnnouncementDelete {
	sad.mutation.Where(ps...)
	return sad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sad *SendAnnouncementDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sad.sqlExec, sad.mutation, sad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sad *SendAnnouncementDelete) ExecX(ctx context.Context) int {
	n, err := sad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sad *SendAnnouncementDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(sendannouncement.Table, sqlgraph.NewFieldSpec(sendannouncement.FieldID, field.TypeUint32))
	if ps := sad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sad.mutation.done = true
	return affected, err
}

// SendAnnouncementDeleteOne is the builder for deleting a single SendAnnouncement entity.
type SendAnnouncementDeleteOne struct {
	sad *SendAnnouncementDelete
}

// Where appends a list predicates to the SendAnnouncementDelete builder.
func (sado *SendAnnouncementDeleteOne) Where(ps ...predicate.SendAnnouncement) *SendAnnouncementDeleteOne {
	sado.sad.mutation.Where(ps...)
	return sado
}

// Exec executes the deletion query.
func (sado *SendAnnouncementDeleteOne) Exec(ctx context.Context) error {
	n, err := sado.sad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{sendannouncement.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sado *SendAnnouncementDeleteOne) ExecX(ctx context.Context) {
	if err := sado.Exec(ctx); err != nil {
		panic(err)
	}
}

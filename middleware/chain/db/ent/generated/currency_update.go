// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/currency"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// CurrencyUpdate is the builder for updating Currency entities.
type CurrencyUpdate struct {
	config
	hooks     []Hook
	mutation  *CurrencyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CurrencyUpdate builder.
func (cu *CurrencyUpdate) Where(ps ...predicate.Currency) *CurrencyUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CurrencyUpdate) SetCreatedAt(u uint32) *CurrencyUpdate {
	cu.mutation.ResetCreatedAt()
	cu.mutation.SetCreatedAt(u)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *CurrencyUpdate) SetNillableCreatedAt(u *uint32) *CurrencyUpdate {
	if u != nil {
		cu.SetCreatedAt(*u)
	}
	return cu
}

// AddCreatedAt adds u to the "created_at" field.
func (cu *CurrencyUpdate) AddCreatedAt(u int32) *CurrencyUpdate {
	cu.mutation.AddCreatedAt(u)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CurrencyUpdate) SetUpdatedAt(u uint32) *CurrencyUpdate {
	cu.mutation.ResetUpdatedAt()
	cu.mutation.SetUpdatedAt(u)
	return cu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cu *CurrencyUpdate) AddUpdatedAt(u int32) *CurrencyUpdate {
	cu.mutation.AddUpdatedAt(u)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CurrencyUpdate) SetDeletedAt(u uint32) *CurrencyUpdate {
	cu.mutation.ResetDeletedAt()
	cu.mutation.SetDeletedAt(u)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CurrencyUpdate) SetNillableDeletedAt(u *uint32) *CurrencyUpdate {
	if u != nil {
		cu.SetDeletedAt(*u)
	}
	return cu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cu *CurrencyUpdate) AddDeletedAt(u int32) *CurrencyUpdate {
	cu.mutation.AddDeletedAt(u)
	return cu
}

// SetEntID sets the "ent_id" field.
func (cu *CurrencyUpdate) SetEntID(u uuid.UUID) *CurrencyUpdate {
	cu.mutation.SetEntID(u)
	return cu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cu *CurrencyUpdate) SetNillableEntID(u *uuid.UUID) *CurrencyUpdate {
	if u != nil {
		cu.SetEntID(*u)
	}
	return cu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (cu *CurrencyUpdate) SetCoinTypeID(u uuid.UUID) *CurrencyUpdate {
	cu.mutation.SetCoinTypeID(u)
	return cu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (cu *CurrencyUpdate) SetNillableCoinTypeID(u *uuid.UUID) *CurrencyUpdate {
	if u != nil {
		cu.SetCoinTypeID(*u)
	}
	return cu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (cu *CurrencyUpdate) ClearCoinTypeID() *CurrencyUpdate {
	cu.mutation.ClearCoinTypeID()
	return cu
}

// SetFeedType sets the "feed_type" field.
func (cu *CurrencyUpdate) SetFeedType(s string) *CurrencyUpdate {
	cu.mutation.SetFeedType(s)
	return cu
}

// SetNillableFeedType sets the "feed_type" field if the given value is not nil.
func (cu *CurrencyUpdate) SetNillableFeedType(s *string) *CurrencyUpdate {
	if s != nil {
		cu.SetFeedType(*s)
	}
	return cu
}

// ClearFeedType clears the value of the "feed_type" field.
func (cu *CurrencyUpdate) ClearFeedType() *CurrencyUpdate {
	cu.mutation.ClearFeedType()
	return cu
}

// SetMarketValueHigh sets the "market_value_high" field.
func (cu *CurrencyUpdate) SetMarketValueHigh(d decimal.Decimal) *CurrencyUpdate {
	cu.mutation.SetMarketValueHigh(d)
	return cu
}

// SetNillableMarketValueHigh sets the "market_value_high" field if the given value is not nil.
func (cu *CurrencyUpdate) SetNillableMarketValueHigh(d *decimal.Decimal) *CurrencyUpdate {
	if d != nil {
		cu.SetMarketValueHigh(*d)
	}
	return cu
}

// ClearMarketValueHigh clears the value of the "market_value_high" field.
func (cu *CurrencyUpdate) ClearMarketValueHigh() *CurrencyUpdate {
	cu.mutation.ClearMarketValueHigh()
	return cu
}

// SetMarketValueLow sets the "market_value_low" field.
func (cu *CurrencyUpdate) SetMarketValueLow(d decimal.Decimal) *CurrencyUpdate {
	cu.mutation.SetMarketValueLow(d)
	return cu
}

// SetNillableMarketValueLow sets the "market_value_low" field if the given value is not nil.
func (cu *CurrencyUpdate) SetNillableMarketValueLow(d *decimal.Decimal) *CurrencyUpdate {
	if d != nil {
		cu.SetMarketValueLow(*d)
	}
	return cu
}

// ClearMarketValueLow clears the value of the "market_value_low" field.
func (cu *CurrencyUpdate) ClearMarketValueLow() *CurrencyUpdate {
	cu.mutation.ClearMarketValueLow()
	return cu
}

// Mutation returns the CurrencyMutation object of the builder.
func (cu *CurrencyUpdate) Mutation() *CurrencyMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CurrencyUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CurrencyUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CurrencyUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CurrencyUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CurrencyUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := currency.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CurrencyUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CurrencyUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CurrencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(currency.Table, currency.Columns, sqlgraph.NewFieldSpec(currency.FieldID, field.TypeUint32))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(currency.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(currency.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(currency.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(currency.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(currency.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(currency.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.EntID(); ok {
		_spec.SetField(currency.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := cu.mutation.CoinTypeID(); ok {
		_spec.SetField(currency.FieldCoinTypeID, field.TypeUUID, value)
	}
	if cu.mutation.CoinTypeIDCleared() {
		_spec.ClearField(currency.FieldCoinTypeID, field.TypeUUID)
	}
	if value, ok := cu.mutation.FeedType(); ok {
		_spec.SetField(currency.FieldFeedType, field.TypeString, value)
	}
	if cu.mutation.FeedTypeCleared() {
		_spec.ClearField(currency.FieldFeedType, field.TypeString)
	}
	if value, ok := cu.mutation.MarketValueHigh(); ok {
		_spec.SetField(currency.FieldMarketValueHigh, field.TypeOther, value)
	}
	if cu.mutation.MarketValueHighCleared() {
		_spec.ClearField(currency.FieldMarketValueHigh, field.TypeOther)
	}
	if value, ok := cu.mutation.MarketValueLow(); ok {
		_spec.SetField(currency.FieldMarketValueLow, field.TypeOther, value)
	}
	if cu.mutation.MarketValueLowCleared() {
		_spec.ClearField(currency.FieldMarketValueLow, field.TypeOther)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{currency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CurrencyUpdateOne is the builder for updating a single Currency entity.
type CurrencyUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CurrencyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CurrencyUpdateOne) SetCreatedAt(u uint32) *CurrencyUpdateOne {
	cuo.mutation.ResetCreatedAt()
	cuo.mutation.SetCreatedAt(u)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *CurrencyUpdateOne) SetNillableCreatedAt(u *uint32) *CurrencyUpdateOne {
	if u != nil {
		cuo.SetCreatedAt(*u)
	}
	return cuo
}

// AddCreatedAt adds u to the "created_at" field.
func (cuo *CurrencyUpdateOne) AddCreatedAt(u int32) *CurrencyUpdateOne {
	cuo.mutation.AddCreatedAt(u)
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CurrencyUpdateOne) SetUpdatedAt(u uint32) *CurrencyUpdateOne {
	cuo.mutation.ResetUpdatedAt()
	cuo.mutation.SetUpdatedAt(u)
	return cuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cuo *CurrencyUpdateOne) AddUpdatedAt(u int32) *CurrencyUpdateOne {
	cuo.mutation.AddUpdatedAt(u)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CurrencyUpdateOne) SetDeletedAt(u uint32) *CurrencyUpdateOne {
	cuo.mutation.ResetDeletedAt()
	cuo.mutation.SetDeletedAt(u)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CurrencyUpdateOne) SetNillableDeletedAt(u *uint32) *CurrencyUpdateOne {
	if u != nil {
		cuo.SetDeletedAt(*u)
	}
	return cuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cuo *CurrencyUpdateOne) AddDeletedAt(u int32) *CurrencyUpdateOne {
	cuo.mutation.AddDeletedAt(u)
	return cuo
}

// SetEntID sets the "ent_id" field.
func (cuo *CurrencyUpdateOne) SetEntID(u uuid.UUID) *CurrencyUpdateOne {
	cuo.mutation.SetEntID(u)
	return cuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cuo *CurrencyUpdateOne) SetNillableEntID(u *uuid.UUID) *CurrencyUpdateOne {
	if u != nil {
		cuo.SetEntID(*u)
	}
	return cuo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (cuo *CurrencyUpdateOne) SetCoinTypeID(u uuid.UUID) *CurrencyUpdateOne {
	cuo.mutation.SetCoinTypeID(u)
	return cuo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (cuo *CurrencyUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *CurrencyUpdateOne {
	if u != nil {
		cuo.SetCoinTypeID(*u)
	}
	return cuo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (cuo *CurrencyUpdateOne) ClearCoinTypeID() *CurrencyUpdateOne {
	cuo.mutation.ClearCoinTypeID()
	return cuo
}

// SetFeedType sets the "feed_type" field.
func (cuo *CurrencyUpdateOne) SetFeedType(s string) *CurrencyUpdateOne {
	cuo.mutation.SetFeedType(s)
	return cuo
}

// SetNillableFeedType sets the "feed_type" field if the given value is not nil.
func (cuo *CurrencyUpdateOne) SetNillableFeedType(s *string) *CurrencyUpdateOne {
	if s != nil {
		cuo.SetFeedType(*s)
	}
	return cuo
}

// ClearFeedType clears the value of the "feed_type" field.
func (cuo *CurrencyUpdateOne) ClearFeedType() *CurrencyUpdateOne {
	cuo.mutation.ClearFeedType()
	return cuo
}

// SetMarketValueHigh sets the "market_value_high" field.
func (cuo *CurrencyUpdateOne) SetMarketValueHigh(d decimal.Decimal) *CurrencyUpdateOne {
	cuo.mutation.SetMarketValueHigh(d)
	return cuo
}

// SetNillableMarketValueHigh sets the "market_value_high" field if the given value is not nil.
func (cuo *CurrencyUpdateOne) SetNillableMarketValueHigh(d *decimal.Decimal) *CurrencyUpdateOne {
	if d != nil {
		cuo.SetMarketValueHigh(*d)
	}
	return cuo
}

// ClearMarketValueHigh clears the value of the "market_value_high" field.
func (cuo *CurrencyUpdateOne) ClearMarketValueHigh() *CurrencyUpdateOne {
	cuo.mutation.ClearMarketValueHigh()
	return cuo
}

// SetMarketValueLow sets the "market_value_low" field.
func (cuo *CurrencyUpdateOne) SetMarketValueLow(d decimal.Decimal) *CurrencyUpdateOne {
	cuo.mutation.SetMarketValueLow(d)
	return cuo
}

// SetNillableMarketValueLow sets the "market_value_low" field if the given value is not nil.
func (cuo *CurrencyUpdateOne) SetNillableMarketValueLow(d *decimal.Decimal) *CurrencyUpdateOne {
	if d != nil {
		cuo.SetMarketValueLow(*d)
	}
	return cuo
}

// ClearMarketValueLow clears the value of the "market_value_low" field.
func (cuo *CurrencyUpdateOne) ClearMarketValueLow() *CurrencyUpdateOne {
	cuo.mutation.ClearMarketValueLow()
	return cuo
}

// Mutation returns the CurrencyMutation object of the builder.
func (cuo *CurrencyUpdateOne) Mutation() *CurrencyMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CurrencyUpdate builder.
func (cuo *CurrencyUpdateOne) Where(ps ...predicate.Currency) *CurrencyUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CurrencyUpdateOne) Select(field string, fields ...string) *CurrencyUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Currency entity.
func (cuo *CurrencyUpdateOne) Save(ctx context.Context) (*Currency, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CurrencyUpdateOne) SaveX(ctx context.Context) *Currency {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CurrencyUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CurrencyUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CurrencyUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := currency.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CurrencyUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CurrencyUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CurrencyUpdateOne) sqlSave(ctx context.Context) (_node *Currency, err error) {
	_spec := sqlgraph.NewUpdateSpec(currency.Table, currency.Columns, sqlgraph.NewFieldSpec(currency.FieldID, field.TypeUint32))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Currency.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, currency.FieldID)
		for _, f := range fields {
			if !currency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != currency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(currency.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(currency.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(currency.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(currency.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(currency.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(currency.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.EntID(); ok {
		_spec.SetField(currency.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := cuo.mutation.CoinTypeID(); ok {
		_spec.SetField(currency.FieldCoinTypeID, field.TypeUUID, value)
	}
	if cuo.mutation.CoinTypeIDCleared() {
		_spec.ClearField(currency.FieldCoinTypeID, field.TypeUUID)
	}
	if value, ok := cuo.mutation.FeedType(); ok {
		_spec.SetField(currency.FieldFeedType, field.TypeString, value)
	}
	if cuo.mutation.FeedTypeCleared() {
		_spec.ClearField(currency.FieldFeedType, field.TypeString)
	}
	if value, ok := cuo.mutation.MarketValueHigh(); ok {
		_spec.SetField(currency.FieldMarketValueHigh, field.TypeOther, value)
	}
	if cuo.mutation.MarketValueHighCleared() {
		_spec.ClearField(currency.FieldMarketValueHigh, field.TypeOther)
	}
	if value, ok := cuo.mutation.MarketValueLow(); ok {
		_spec.SetField(currency.FieldMarketValueLow, field.TypeOther, value)
	}
	if cuo.mutation.MarketValueLowCleared() {
		_spec.ClearField(currency.FieldMarketValueLow, field.TypeOther)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Currency{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{currency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}

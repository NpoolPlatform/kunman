// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/appcoin"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/appfiat"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/chainbase"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/coinbase"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/coindescription"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/coinextra"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/coinfiat"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/coinfiatcurrency"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/coinfiatcurrencyhistory"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/coinusedfor"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/currency"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/currencyfeed"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/currencyhistory"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/exchangerate"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/fiat"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/fiatcurrency"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/fiatcurrencyfeed"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/fiatcurrencyhistory"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/setting"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/tran"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AppCoin is the client for interacting with the AppCoin builders.
	AppCoin *AppCoinClient
	// AppFiat is the client for interacting with the AppFiat builders.
	AppFiat *AppFiatClient
	// ChainBase is the client for interacting with the ChainBase builders.
	ChainBase *ChainBaseClient
	// CoinBase is the client for interacting with the CoinBase builders.
	CoinBase *CoinBaseClient
	// CoinDescription is the client for interacting with the CoinDescription builders.
	CoinDescription *CoinDescriptionClient
	// CoinExtra is the client for interacting with the CoinExtra builders.
	CoinExtra *CoinExtraClient
	// CoinFiat is the client for interacting with the CoinFiat builders.
	CoinFiat *CoinFiatClient
	// CoinFiatCurrency is the client for interacting with the CoinFiatCurrency builders.
	CoinFiatCurrency *CoinFiatCurrencyClient
	// CoinFiatCurrencyHistory is the client for interacting with the CoinFiatCurrencyHistory builders.
	CoinFiatCurrencyHistory *CoinFiatCurrencyHistoryClient
	// CoinUsedFor is the client for interacting with the CoinUsedFor builders.
	CoinUsedFor *CoinUsedForClient
	// Currency is the client for interacting with the Currency builders.
	Currency *CurrencyClient
	// CurrencyFeed is the client for interacting with the CurrencyFeed builders.
	CurrencyFeed *CurrencyFeedClient
	// CurrencyHistory is the client for interacting with the CurrencyHistory builders.
	CurrencyHistory *CurrencyHistoryClient
	// ExchangeRate is the client for interacting with the ExchangeRate builders.
	ExchangeRate *ExchangeRateClient
	// Fiat is the client for interacting with the Fiat builders.
	Fiat *FiatClient
	// FiatCurrency is the client for interacting with the FiatCurrency builders.
	FiatCurrency *FiatCurrencyClient
	// FiatCurrencyFeed is the client for interacting with the FiatCurrencyFeed builders.
	FiatCurrencyFeed *FiatCurrencyFeedClient
	// FiatCurrencyHistory is the client for interacting with the FiatCurrencyHistory builders.
	FiatCurrencyHistory *FiatCurrencyHistoryClient
	// Setting is the client for interacting with the Setting builders.
	Setting *SettingClient
	// Tran is the client for interacting with the Tran builders.
	Tran *TranClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AppCoin = NewAppCoinClient(c.config)
	c.AppFiat = NewAppFiatClient(c.config)
	c.ChainBase = NewChainBaseClient(c.config)
	c.CoinBase = NewCoinBaseClient(c.config)
	c.CoinDescription = NewCoinDescriptionClient(c.config)
	c.CoinExtra = NewCoinExtraClient(c.config)
	c.CoinFiat = NewCoinFiatClient(c.config)
	c.CoinFiatCurrency = NewCoinFiatCurrencyClient(c.config)
	c.CoinFiatCurrencyHistory = NewCoinFiatCurrencyHistoryClient(c.config)
	c.CoinUsedFor = NewCoinUsedForClient(c.config)
	c.Currency = NewCurrencyClient(c.config)
	c.CurrencyFeed = NewCurrencyFeedClient(c.config)
	c.CurrencyHistory = NewCurrencyHistoryClient(c.config)
	c.ExchangeRate = NewExchangeRateClient(c.config)
	c.Fiat = NewFiatClient(c.config)
	c.FiatCurrency = NewFiatCurrencyClient(c.config)
	c.FiatCurrencyFeed = NewFiatCurrencyFeedClient(c.config)
	c.FiatCurrencyHistory = NewFiatCurrencyHistoryClient(c.config)
	c.Setting = NewSettingClient(c.config)
	c.Tran = NewTranClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("generated: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("generated: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		AppCoin:                 NewAppCoinClient(cfg),
		AppFiat:                 NewAppFiatClient(cfg),
		ChainBase:               NewChainBaseClient(cfg),
		CoinBase:                NewCoinBaseClient(cfg),
		CoinDescription:         NewCoinDescriptionClient(cfg),
		CoinExtra:               NewCoinExtraClient(cfg),
		CoinFiat:                NewCoinFiatClient(cfg),
		CoinFiatCurrency:        NewCoinFiatCurrencyClient(cfg),
		CoinFiatCurrencyHistory: NewCoinFiatCurrencyHistoryClient(cfg),
		CoinUsedFor:             NewCoinUsedForClient(cfg),
		Currency:                NewCurrencyClient(cfg),
		CurrencyFeed:            NewCurrencyFeedClient(cfg),
		CurrencyHistory:         NewCurrencyHistoryClient(cfg),
		ExchangeRate:            NewExchangeRateClient(cfg),
		Fiat:                    NewFiatClient(cfg),
		FiatCurrency:            NewFiatCurrencyClient(cfg),
		FiatCurrencyFeed:        NewFiatCurrencyFeedClient(cfg),
		FiatCurrencyHistory:     NewFiatCurrencyHistoryClient(cfg),
		Setting:                 NewSettingClient(cfg),
		Tran:                    NewTranClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		AppCoin:                 NewAppCoinClient(cfg),
		AppFiat:                 NewAppFiatClient(cfg),
		ChainBase:               NewChainBaseClient(cfg),
		CoinBase:                NewCoinBaseClient(cfg),
		CoinDescription:         NewCoinDescriptionClient(cfg),
		CoinExtra:               NewCoinExtraClient(cfg),
		CoinFiat:                NewCoinFiatClient(cfg),
		CoinFiatCurrency:        NewCoinFiatCurrencyClient(cfg),
		CoinFiatCurrencyHistory: NewCoinFiatCurrencyHistoryClient(cfg),
		CoinUsedFor:             NewCoinUsedForClient(cfg),
		Currency:                NewCurrencyClient(cfg),
		CurrencyFeed:            NewCurrencyFeedClient(cfg),
		CurrencyHistory:         NewCurrencyHistoryClient(cfg),
		ExchangeRate:            NewExchangeRateClient(cfg),
		Fiat:                    NewFiatClient(cfg),
		FiatCurrency:            NewFiatCurrencyClient(cfg),
		FiatCurrencyFeed:        NewFiatCurrencyFeedClient(cfg),
		FiatCurrencyHistory:     NewFiatCurrencyHistoryClient(cfg),
		Setting:                 NewSettingClient(cfg),
		Tran:                    NewTranClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AppCoin.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AppCoin, c.AppFiat, c.ChainBase, c.CoinBase, c.CoinDescription, c.CoinExtra,
		c.CoinFiat, c.CoinFiatCurrency, c.CoinFiatCurrencyHistory, c.CoinUsedFor,
		c.Currency, c.CurrencyFeed, c.CurrencyHistory, c.ExchangeRate, c.Fiat,
		c.FiatCurrency, c.FiatCurrencyFeed, c.FiatCurrencyHistory, c.Setting, c.Tran,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AppCoin, c.AppFiat, c.ChainBase, c.CoinBase, c.CoinDescription, c.CoinExtra,
		c.CoinFiat, c.CoinFiatCurrency, c.CoinFiatCurrencyHistory, c.CoinUsedFor,
		c.Currency, c.CurrencyFeed, c.CurrencyHistory, c.ExchangeRate, c.Fiat,
		c.FiatCurrency, c.FiatCurrencyFeed, c.FiatCurrencyHistory, c.Setting, c.Tran,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AppCoinMutation:
		return c.AppCoin.mutate(ctx, m)
	case *AppFiatMutation:
		return c.AppFiat.mutate(ctx, m)
	case *ChainBaseMutation:
		return c.ChainBase.mutate(ctx, m)
	case *CoinBaseMutation:
		return c.CoinBase.mutate(ctx, m)
	case *CoinDescriptionMutation:
		return c.CoinDescription.mutate(ctx, m)
	case *CoinExtraMutation:
		return c.CoinExtra.mutate(ctx, m)
	case *CoinFiatMutation:
		return c.CoinFiat.mutate(ctx, m)
	case *CoinFiatCurrencyMutation:
		return c.CoinFiatCurrency.mutate(ctx, m)
	case *CoinFiatCurrencyHistoryMutation:
		return c.CoinFiatCurrencyHistory.mutate(ctx, m)
	case *CoinUsedForMutation:
		return c.CoinUsedFor.mutate(ctx, m)
	case *CurrencyMutation:
		return c.Currency.mutate(ctx, m)
	case *CurrencyFeedMutation:
		return c.CurrencyFeed.mutate(ctx, m)
	case *CurrencyHistoryMutation:
		return c.CurrencyHistory.mutate(ctx, m)
	case *ExchangeRateMutation:
		return c.ExchangeRate.mutate(ctx, m)
	case *FiatMutation:
		return c.Fiat.mutate(ctx, m)
	case *FiatCurrencyMutation:
		return c.FiatCurrency.mutate(ctx, m)
	case *FiatCurrencyFeedMutation:
		return c.FiatCurrencyFeed.mutate(ctx, m)
	case *FiatCurrencyHistoryMutation:
		return c.FiatCurrencyHistory.mutate(ctx, m)
	case *SettingMutation:
		return c.Setting.mutate(ctx, m)
	case *TranMutation:
		return c.Tran.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("generated: unknown mutation type %T", m)
	}
}

// AppCoinClient is a client for the AppCoin schema.
type AppCoinClient struct {
	config
}

// NewAppCoinClient returns a client for the AppCoin from the given config.
func NewAppCoinClient(c config) *AppCoinClient {
	return &AppCoinClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appcoin.Hooks(f(g(h())))`.
func (c *AppCoinClient) Use(hooks ...Hook) {
	c.hooks.AppCoin = append(c.hooks.AppCoin, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `appcoin.Intercept(f(g(h())))`.
func (c *AppCoinClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppCoin = append(c.inters.AppCoin, interceptors...)
}

// Create returns a builder for creating a AppCoin entity.
func (c *AppCoinClient) Create() *AppCoinCreate {
	mutation := newAppCoinMutation(c.config, OpCreate)
	return &AppCoinCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppCoin entities.
func (c *AppCoinClient) CreateBulk(builders ...*AppCoinCreate) *AppCoinCreateBulk {
	return &AppCoinCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AppCoinClient) MapCreateBulk(slice any, setFunc func(*AppCoinCreate, int)) *AppCoinCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AppCoinCreateBulk{err: fmt.Errorf("calling to AppCoinClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AppCoinCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AppCoinCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppCoin.
func (c *AppCoinClient) Update() *AppCoinUpdate {
	mutation := newAppCoinMutation(c.config, OpUpdate)
	return &AppCoinUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppCoinClient) UpdateOne(ac *AppCoin) *AppCoinUpdateOne {
	mutation := newAppCoinMutation(c.config, OpUpdateOne, withAppCoin(ac))
	return &AppCoinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppCoinClient) UpdateOneID(id uint32) *AppCoinUpdateOne {
	mutation := newAppCoinMutation(c.config, OpUpdateOne, withAppCoinID(id))
	return &AppCoinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppCoin.
func (c *AppCoinClient) Delete() *AppCoinDelete {
	mutation := newAppCoinMutation(c.config, OpDelete)
	return &AppCoinDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppCoinClient) DeleteOne(ac *AppCoin) *AppCoinDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppCoinClient) DeleteOneID(id uint32) *AppCoinDeleteOne {
	builder := c.Delete().Where(appcoin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppCoinDeleteOne{builder}
}

// Query returns a query builder for AppCoin.
func (c *AppCoinClient) Query() *AppCoinQuery {
	return &AppCoinQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppCoin},
		inters: c.Interceptors(),
	}
}

// Get returns a AppCoin entity by its id.
func (c *AppCoinClient) Get(ctx context.Context, id uint32) (*AppCoin, error) {
	return c.Query().Where(appcoin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppCoinClient) GetX(ctx context.Context, id uint32) *AppCoin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppCoinClient) Hooks() []Hook {
	return c.hooks.AppCoin
}

// Interceptors returns the client interceptors.
func (c *AppCoinClient) Interceptors() []Interceptor {
	return c.inters.AppCoin
}

func (c *AppCoinClient) mutate(ctx context.Context, m *AppCoinMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppCoinCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppCoinUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppCoinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppCoinDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown AppCoin mutation op: %q", m.Op())
	}
}

// AppFiatClient is a client for the AppFiat schema.
type AppFiatClient struct {
	config
}

// NewAppFiatClient returns a client for the AppFiat from the given config.
func NewAppFiatClient(c config) *AppFiatClient {
	return &AppFiatClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appfiat.Hooks(f(g(h())))`.
func (c *AppFiatClient) Use(hooks ...Hook) {
	c.hooks.AppFiat = append(c.hooks.AppFiat, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `appfiat.Intercept(f(g(h())))`.
func (c *AppFiatClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppFiat = append(c.inters.AppFiat, interceptors...)
}

// Create returns a builder for creating a AppFiat entity.
func (c *AppFiatClient) Create() *AppFiatCreate {
	mutation := newAppFiatMutation(c.config, OpCreate)
	return &AppFiatCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppFiat entities.
func (c *AppFiatClient) CreateBulk(builders ...*AppFiatCreate) *AppFiatCreateBulk {
	return &AppFiatCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AppFiatClient) MapCreateBulk(slice any, setFunc func(*AppFiatCreate, int)) *AppFiatCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AppFiatCreateBulk{err: fmt.Errorf("calling to AppFiatClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AppFiatCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AppFiatCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppFiat.
func (c *AppFiatClient) Update() *AppFiatUpdate {
	mutation := newAppFiatMutation(c.config, OpUpdate)
	return &AppFiatUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppFiatClient) UpdateOne(af *AppFiat) *AppFiatUpdateOne {
	mutation := newAppFiatMutation(c.config, OpUpdateOne, withAppFiat(af))
	return &AppFiatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppFiatClient) UpdateOneID(id uint32) *AppFiatUpdateOne {
	mutation := newAppFiatMutation(c.config, OpUpdateOne, withAppFiatID(id))
	return &AppFiatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppFiat.
func (c *AppFiatClient) Delete() *AppFiatDelete {
	mutation := newAppFiatMutation(c.config, OpDelete)
	return &AppFiatDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppFiatClient) DeleteOne(af *AppFiat) *AppFiatDeleteOne {
	return c.DeleteOneID(af.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppFiatClient) DeleteOneID(id uint32) *AppFiatDeleteOne {
	builder := c.Delete().Where(appfiat.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppFiatDeleteOne{builder}
}

// Query returns a query builder for AppFiat.
func (c *AppFiatClient) Query() *AppFiatQuery {
	return &AppFiatQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppFiat},
		inters: c.Interceptors(),
	}
}

// Get returns a AppFiat entity by its id.
func (c *AppFiatClient) Get(ctx context.Context, id uint32) (*AppFiat, error) {
	return c.Query().Where(appfiat.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppFiatClient) GetX(ctx context.Context, id uint32) *AppFiat {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppFiatClient) Hooks() []Hook {
	return c.hooks.AppFiat
}

// Interceptors returns the client interceptors.
func (c *AppFiatClient) Interceptors() []Interceptor {
	return c.inters.AppFiat
}

func (c *AppFiatClient) mutate(ctx context.Context, m *AppFiatMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppFiatCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppFiatUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppFiatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppFiatDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown AppFiat mutation op: %q", m.Op())
	}
}

// ChainBaseClient is a client for the ChainBase schema.
type ChainBaseClient struct {
	config
}

// NewChainBaseClient returns a client for the ChainBase from the given config.
func NewChainBaseClient(c config) *ChainBaseClient {
	return &ChainBaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `chainbase.Hooks(f(g(h())))`.
func (c *ChainBaseClient) Use(hooks ...Hook) {
	c.hooks.ChainBase = append(c.hooks.ChainBase, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `chainbase.Intercept(f(g(h())))`.
func (c *ChainBaseClient) Intercept(interceptors ...Interceptor) {
	c.inters.ChainBase = append(c.inters.ChainBase, interceptors...)
}

// Create returns a builder for creating a ChainBase entity.
func (c *ChainBaseClient) Create() *ChainBaseCreate {
	mutation := newChainBaseMutation(c.config, OpCreate)
	return &ChainBaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ChainBase entities.
func (c *ChainBaseClient) CreateBulk(builders ...*ChainBaseCreate) *ChainBaseCreateBulk {
	return &ChainBaseCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ChainBaseClient) MapCreateBulk(slice any, setFunc func(*ChainBaseCreate, int)) *ChainBaseCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ChainBaseCreateBulk{err: fmt.Errorf("calling to ChainBaseClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ChainBaseCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ChainBaseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ChainBase.
func (c *ChainBaseClient) Update() *ChainBaseUpdate {
	mutation := newChainBaseMutation(c.config, OpUpdate)
	return &ChainBaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChainBaseClient) UpdateOne(cb *ChainBase) *ChainBaseUpdateOne {
	mutation := newChainBaseMutation(c.config, OpUpdateOne, withChainBase(cb))
	return &ChainBaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChainBaseClient) UpdateOneID(id uint32) *ChainBaseUpdateOne {
	mutation := newChainBaseMutation(c.config, OpUpdateOne, withChainBaseID(id))
	return &ChainBaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ChainBase.
func (c *ChainBaseClient) Delete() *ChainBaseDelete {
	mutation := newChainBaseMutation(c.config, OpDelete)
	return &ChainBaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChainBaseClient) DeleteOne(cb *ChainBase) *ChainBaseDeleteOne {
	return c.DeleteOneID(cb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChainBaseClient) DeleteOneID(id uint32) *ChainBaseDeleteOne {
	builder := c.Delete().Where(chainbase.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChainBaseDeleteOne{builder}
}

// Query returns a query builder for ChainBase.
func (c *ChainBaseClient) Query() *ChainBaseQuery {
	return &ChainBaseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChainBase},
		inters: c.Interceptors(),
	}
}

// Get returns a ChainBase entity by its id.
func (c *ChainBaseClient) Get(ctx context.Context, id uint32) (*ChainBase, error) {
	return c.Query().Where(chainbase.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChainBaseClient) GetX(ctx context.Context, id uint32) *ChainBase {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ChainBaseClient) Hooks() []Hook {
	return c.hooks.ChainBase
}

// Interceptors returns the client interceptors.
func (c *ChainBaseClient) Interceptors() []Interceptor {
	return c.inters.ChainBase
}

func (c *ChainBaseClient) mutate(ctx context.Context, m *ChainBaseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChainBaseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChainBaseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChainBaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChainBaseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown ChainBase mutation op: %q", m.Op())
	}
}

// CoinBaseClient is a client for the CoinBase schema.
type CoinBaseClient struct {
	config
}

// NewCoinBaseClient returns a client for the CoinBase from the given config.
func NewCoinBaseClient(c config) *CoinBaseClient {
	return &CoinBaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coinbase.Hooks(f(g(h())))`.
func (c *CoinBaseClient) Use(hooks ...Hook) {
	c.hooks.CoinBase = append(c.hooks.CoinBase, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `coinbase.Intercept(f(g(h())))`.
func (c *CoinBaseClient) Intercept(interceptors ...Interceptor) {
	c.inters.CoinBase = append(c.inters.CoinBase, interceptors...)
}

// Create returns a builder for creating a CoinBase entity.
func (c *CoinBaseClient) Create() *CoinBaseCreate {
	mutation := newCoinBaseMutation(c.config, OpCreate)
	return &CoinBaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CoinBase entities.
func (c *CoinBaseClient) CreateBulk(builders ...*CoinBaseCreate) *CoinBaseCreateBulk {
	return &CoinBaseCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CoinBaseClient) MapCreateBulk(slice any, setFunc func(*CoinBaseCreate, int)) *CoinBaseCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CoinBaseCreateBulk{err: fmt.Errorf("calling to CoinBaseClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CoinBaseCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CoinBaseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CoinBase.
func (c *CoinBaseClient) Update() *CoinBaseUpdate {
	mutation := newCoinBaseMutation(c.config, OpUpdate)
	return &CoinBaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CoinBaseClient) UpdateOne(cb *CoinBase) *CoinBaseUpdateOne {
	mutation := newCoinBaseMutation(c.config, OpUpdateOne, withCoinBase(cb))
	return &CoinBaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CoinBaseClient) UpdateOneID(id uint32) *CoinBaseUpdateOne {
	mutation := newCoinBaseMutation(c.config, OpUpdateOne, withCoinBaseID(id))
	return &CoinBaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CoinBase.
func (c *CoinBaseClient) Delete() *CoinBaseDelete {
	mutation := newCoinBaseMutation(c.config, OpDelete)
	return &CoinBaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CoinBaseClient) DeleteOne(cb *CoinBase) *CoinBaseDeleteOne {
	return c.DeleteOneID(cb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CoinBaseClient) DeleteOneID(id uint32) *CoinBaseDeleteOne {
	builder := c.Delete().Where(coinbase.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CoinBaseDeleteOne{builder}
}

// Query returns a query builder for CoinBase.
func (c *CoinBaseClient) Query() *CoinBaseQuery {
	return &CoinBaseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCoinBase},
		inters: c.Interceptors(),
	}
}

// Get returns a CoinBase entity by its id.
func (c *CoinBaseClient) Get(ctx context.Context, id uint32) (*CoinBase, error) {
	return c.Query().Where(coinbase.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CoinBaseClient) GetX(ctx context.Context, id uint32) *CoinBase {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CoinBaseClient) Hooks() []Hook {
	return c.hooks.CoinBase
}

// Interceptors returns the client interceptors.
func (c *CoinBaseClient) Interceptors() []Interceptor {
	return c.inters.CoinBase
}

func (c *CoinBaseClient) mutate(ctx context.Context, m *CoinBaseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CoinBaseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CoinBaseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CoinBaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CoinBaseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown CoinBase mutation op: %q", m.Op())
	}
}

// CoinDescriptionClient is a client for the CoinDescription schema.
type CoinDescriptionClient struct {
	config
}

// NewCoinDescriptionClient returns a client for the CoinDescription from the given config.
func NewCoinDescriptionClient(c config) *CoinDescriptionClient {
	return &CoinDescriptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coindescription.Hooks(f(g(h())))`.
func (c *CoinDescriptionClient) Use(hooks ...Hook) {
	c.hooks.CoinDescription = append(c.hooks.CoinDescription, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `coindescription.Intercept(f(g(h())))`.
func (c *CoinDescriptionClient) Intercept(interceptors ...Interceptor) {
	c.inters.CoinDescription = append(c.inters.CoinDescription, interceptors...)
}

// Create returns a builder for creating a CoinDescription entity.
func (c *CoinDescriptionClient) Create() *CoinDescriptionCreate {
	mutation := newCoinDescriptionMutation(c.config, OpCreate)
	return &CoinDescriptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CoinDescription entities.
func (c *CoinDescriptionClient) CreateBulk(builders ...*CoinDescriptionCreate) *CoinDescriptionCreateBulk {
	return &CoinDescriptionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CoinDescriptionClient) MapCreateBulk(slice any, setFunc func(*CoinDescriptionCreate, int)) *CoinDescriptionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CoinDescriptionCreateBulk{err: fmt.Errorf("calling to CoinDescriptionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CoinDescriptionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CoinDescriptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CoinDescription.
func (c *CoinDescriptionClient) Update() *CoinDescriptionUpdate {
	mutation := newCoinDescriptionMutation(c.config, OpUpdate)
	return &CoinDescriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CoinDescriptionClient) UpdateOne(cd *CoinDescription) *CoinDescriptionUpdateOne {
	mutation := newCoinDescriptionMutation(c.config, OpUpdateOne, withCoinDescription(cd))
	return &CoinDescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CoinDescriptionClient) UpdateOneID(id uint32) *CoinDescriptionUpdateOne {
	mutation := newCoinDescriptionMutation(c.config, OpUpdateOne, withCoinDescriptionID(id))
	return &CoinDescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CoinDescription.
func (c *CoinDescriptionClient) Delete() *CoinDescriptionDelete {
	mutation := newCoinDescriptionMutation(c.config, OpDelete)
	return &CoinDescriptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CoinDescriptionClient) DeleteOne(cd *CoinDescription) *CoinDescriptionDeleteOne {
	return c.DeleteOneID(cd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CoinDescriptionClient) DeleteOneID(id uint32) *CoinDescriptionDeleteOne {
	builder := c.Delete().Where(coindescription.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CoinDescriptionDeleteOne{builder}
}

// Query returns a query builder for CoinDescription.
func (c *CoinDescriptionClient) Query() *CoinDescriptionQuery {
	return &CoinDescriptionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCoinDescription},
		inters: c.Interceptors(),
	}
}

// Get returns a CoinDescription entity by its id.
func (c *CoinDescriptionClient) Get(ctx context.Context, id uint32) (*CoinDescription, error) {
	return c.Query().Where(coindescription.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CoinDescriptionClient) GetX(ctx context.Context, id uint32) *CoinDescription {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CoinDescriptionClient) Hooks() []Hook {
	return c.hooks.CoinDescription
}

// Interceptors returns the client interceptors.
func (c *CoinDescriptionClient) Interceptors() []Interceptor {
	return c.inters.CoinDescription
}

func (c *CoinDescriptionClient) mutate(ctx context.Context, m *CoinDescriptionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CoinDescriptionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CoinDescriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CoinDescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CoinDescriptionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown CoinDescription mutation op: %q", m.Op())
	}
}

// CoinExtraClient is a client for the CoinExtra schema.
type CoinExtraClient struct {
	config
}

// NewCoinExtraClient returns a client for the CoinExtra from the given config.
func NewCoinExtraClient(c config) *CoinExtraClient {
	return &CoinExtraClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coinextra.Hooks(f(g(h())))`.
func (c *CoinExtraClient) Use(hooks ...Hook) {
	c.hooks.CoinExtra = append(c.hooks.CoinExtra, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `coinextra.Intercept(f(g(h())))`.
func (c *CoinExtraClient) Intercept(interceptors ...Interceptor) {
	c.inters.CoinExtra = append(c.inters.CoinExtra, interceptors...)
}

// Create returns a builder for creating a CoinExtra entity.
func (c *CoinExtraClient) Create() *CoinExtraCreate {
	mutation := newCoinExtraMutation(c.config, OpCreate)
	return &CoinExtraCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CoinExtra entities.
func (c *CoinExtraClient) CreateBulk(builders ...*CoinExtraCreate) *CoinExtraCreateBulk {
	return &CoinExtraCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CoinExtraClient) MapCreateBulk(slice any, setFunc func(*CoinExtraCreate, int)) *CoinExtraCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CoinExtraCreateBulk{err: fmt.Errorf("calling to CoinExtraClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CoinExtraCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CoinExtraCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CoinExtra.
func (c *CoinExtraClient) Update() *CoinExtraUpdate {
	mutation := newCoinExtraMutation(c.config, OpUpdate)
	return &CoinExtraUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CoinExtraClient) UpdateOne(ce *CoinExtra) *CoinExtraUpdateOne {
	mutation := newCoinExtraMutation(c.config, OpUpdateOne, withCoinExtra(ce))
	return &CoinExtraUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CoinExtraClient) UpdateOneID(id uint32) *CoinExtraUpdateOne {
	mutation := newCoinExtraMutation(c.config, OpUpdateOne, withCoinExtraID(id))
	return &CoinExtraUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CoinExtra.
func (c *CoinExtraClient) Delete() *CoinExtraDelete {
	mutation := newCoinExtraMutation(c.config, OpDelete)
	return &CoinExtraDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CoinExtraClient) DeleteOne(ce *CoinExtra) *CoinExtraDeleteOne {
	return c.DeleteOneID(ce.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CoinExtraClient) DeleteOneID(id uint32) *CoinExtraDeleteOne {
	builder := c.Delete().Where(coinextra.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CoinExtraDeleteOne{builder}
}

// Query returns a query builder for CoinExtra.
func (c *CoinExtraClient) Query() *CoinExtraQuery {
	return &CoinExtraQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCoinExtra},
		inters: c.Interceptors(),
	}
}

// Get returns a CoinExtra entity by its id.
func (c *CoinExtraClient) Get(ctx context.Context, id uint32) (*CoinExtra, error) {
	return c.Query().Where(coinextra.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CoinExtraClient) GetX(ctx context.Context, id uint32) *CoinExtra {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CoinExtraClient) Hooks() []Hook {
	return c.hooks.CoinExtra
}

// Interceptors returns the client interceptors.
func (c *CoinExtraClient) Interceptors() []Interceptor {
	return c.inters.CoinExtra
}

func (c *CoinExtraClient) mutate(ctx context.Context, m *CoinExtraMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CoinExtraCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CoinExtraUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CoinExtraUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CoinExtraDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown CoinExtra mutation op: %q", m.Op())
	}
}

// CoinFiatClient is a client for the CoinFiat schema.
type CoinFiatClient struct {
	config
}

// NewCoinFiatClient returns a client for the CoinFiat from the given config.
func NewCoinFiatClient(c config) *CoinFiatClient {
	return &CoinFiatClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coinfiat.Hooks(f(g(h())))`.
func (c *CoinFiatClient) Use(hooks ...Hook) {
	c.hooks.CoinFiat = append(c.hooks.CoinFiat, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `coinfiat.Intercept(f(g(h())))`.
func (c *CoinFiatClient) Intercept(interceptors ...Interceptor) {
	c.inters.CoinFiat = append(c.inters.CoinFiat, interceptors...)
}

// Create returns a builder for creating a CoinFiat entity.
func (c *CoinFiatClient) Create() *CoinFiatCreate {
	mutation := newCoinFiatMutation(c.config, OpCreate)
	return &CoinFiatCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CoinFiat entities.
func (c *CoinFiatClient) CreateBulk(builders ...*CoinFiatCreate) *CoinFiatCreateBulk {
	return &CoinFiatCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CoinFiatClient) MapCreateBulk(slice any, setFunc func(*CoinFiatCreate, int)) *CoinFiatCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CoinFiatCreateBulk{err: fmt.Errorf("calling to CoinFiatClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CoinFiatCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CoinFiatCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CoinFiat.
func (c *CoinFiatClient) Update() *CoinFiatUpdate {
	mutation := newCoinFiatMutation(c.config, OpUpdate)
	return &CoinFiatUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CoinFiatClient) UpdateOne(cf *CoinFiat) *CoinFiatUpdateOne {
	mutation := newCoinFiatMutation(c.config, OpUpdateOne, withCoinFiat(cf))
	return &CoinFiatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CoinFiatClient) UpdateOneID(id uint32) *CoinFiatUpdateOne {
	mutation := newCoinFiatMutation(c.config, OpUpdateOne, withCoinFiatID(id))
	return &CoinFiatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CoinFiat.
func (c *CoinFiatClient) Delete() *CoinFiatDelete {
	mutation := newCoinFiatMutation(c.config, OpDelete)
	return &CoinFiatDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CoinFiatClient) DeleteOne(cf *CoinFiat) *CoinFiatDeleteOne {
	return c.DeleteOneID(cf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CoinFiatClient) DeleteOneID(id uint32) *CoinFiatDeleteOne {
	builder := c.Delete().Where(coinfiat.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CoinFiatDeleteOne{builder}
}

// Query returns a query builder for CoinFiat.
func (c *CoinFiatClient) Query() *CoinFiatQuery {
	return &CoinFiatQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCoinFiat},
		inters: c.Interceptors(),
	}
}

// Get returns a CoinFiat entity by its id.
func (c *CoinFiatClient) Get(ctx context.Context, id uint32) (*CoinFiat, error) {
	return c.Query().Where(coinfiat.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CoinFiatClient) GetX(ctx context.Context, id uint32) *CoinFiat {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CoinFiatClient) Hooks() []Hook {
	return c.hooks.CoinFiat
}

// Interceptors returns the client interceptors.
func (c *CoinFiatClient) Interceptors() []Interceptor {
	return c.inters.CoinFiat
}

func (c *CoinFiatClient) mutate(ctx context.Context, m *CoinFiatMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CoinFiatCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CoinFiatUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CoinFiatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CoinFiatDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown CoinFiat mutation op: %q", m.Op())
	}
}

// CoinFiatCurrencyClient is a client for the CoinFiatCurrency schema.
type CoinFiatCurrencyClient struct {
	config
}

// NewCoinFiatCurrencyClient returns a client for the CoinFiatCurrency from the given config.
func NewCoinFiatCurrencyClient(c config) *CoinFiatCurrencyClient {
	return &CoinFiatCurrencyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coinfiatcurrency.Hooks(f(g(h())))`.
func (c *CoinFiatCurrencyClient) Use(hooks ...Hook) {
	c.hooks.CoinFiatCurrency = append(c.hooks.CoinFiatCurrency, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `coinfiatcurrency.Intercept(f(g(h())))`.
func (c *CoinFiatCurrencyClient) Intercept(interceptors ...Interceptor) {
	c.inters.CoinFiatCurrency = append(c.inters.CoinFiatCurrency, interceptors...)
}

// Create returns a builder for creating a CoinFiatCurrency entity.
func (c *CoinFiatCurrencyClient) Create() *CoinFiatCurrencyCreate {
	mutation := newCoinFiatCurrencyMutation(c.config, OpCreate)
	return &CoinFiatCurrencyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CoinFiatCurrency entities.
func (c *CoinFiatCurrencyClient) CreateBulk(builders ...*CoinFiatCurrencyCreate) *CoinFiatCurrencyCreateBulk {
	return &CoinFiatCurrencyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CoinFiatCurrencyClient) MapCreateBulk(slice any, setFunc func(*CoinFiatCurrencyCreate, int)) *CoinFiatCurrencyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CoinFiatCurrencyCreateBulk{err: fmt.Errorf("calling to CoinFiatCurrencyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CoinFiatCurrencyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CoinFiatCurrencyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CoinFiatCurrency.
func (c *CoinFiatCurrencyClient) Update() *CoinFiatCurrencyUpdate {
	mutation := newCoinFiatCurrencyMutation(c.config, OpUpdate)
	return &CoinFiatCurrencyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CoinFiatCurrencyClient) UpdateOne(cfc *CoinFiatCurrency) *CoinFiatCurrencyUpdateOne {
	mutation := newCoinFiatCurrencyMutation(c.config, OpUpdateOne, withCoinFiatCurrency(cfc))
	return &CoinFiatCurrencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CoinFiatCurrencyClient) UpdateOneID(id uint32) *CoinFiatCurrencyUpdateOne {
	mutation := newCoinFiatCurrencyMutation(c.config, OpUpdateOne, withCoinFiatCurrencyID(id))
	return &CoinFiatCurrencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CoinFiatCurrency.
func (c *CoinFiatCurrencyClient) Delete() *CoinFiatCurrencyDelete {
	mutation := newCoinFiatCurrencyMutation(c.config, OpDelete)
	return &CoinFiatCurrencyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CoinFiatCurrencyClient) DeleteOne(cfc *CoinFiatCurrency) *CoinFiatCurrencyDeleteOne {
	return c.DeleteOneID(cfc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CoinFiatCurrencyClient) DeleteOneID(id uint32) *CoinFiatCurrencyDeleteOne {
	builder := c.Delete().Where(coinfiatcurrency.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CoinFiatCurrencyDeleteOne{builder}
}

// Query returns a query builder for CoinFiatCurrency.
func (c *CoinFiatCurrencyClient) Query() *CoinFiatCurrencyQuery {
	return &CoinFiatCurrencyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCoinFiatCurrency},
		inters: c.Interceptors(),
	}
}

// Get returns a CoinFiatCurrency entity by its id.
func (c *CoinFiatCurrencyClient) Get(ctx context.Context, id uint32) (*CoinFiatCurrency, error) {
	return c.Query().Where(coinfiatcurrency.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CoinFiatCurrencyClient) GetX(ctx context.Context, id uint32) *CoinFiatCurrency {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CoinFiatCurrencyClient) Hooks() []Hook {
	return c.hooks.CoinFiatCurrency
}

// Interceptors returns the client interceptors.
func (c *CoinFiatCurrencyClient) Interceptors() []Interceptor {
	return c.inters.CoinFiatCurrency
}

func (c *CoinFiatCurrencyClient) mutate(ctx context.Context, m *CoinFiatCurrencyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CoinFiatCurrencyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CoinFiatCurrencyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CoinFiatCurrencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CoinFiatCurrencyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown CoinFiatCurrency mutation op: %q", m.Op())
	}
}

// CoinFiatCurrencyHistoryClient is a client for the CoinFiatCurrencyHistory schema.
type CoinFiatCurrencyHistoryClient struct {
	config
}

// NewCoinFiatCurrencyHistoryClient returns a client for the CoinFiatCurrencyHistory from the given config.
func NewCoinFiatCurrencyHistoryClient(c config) *CoinFiatCurrencyHistoryClient {
	return &CoinFiatCurrencyHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coinfiatcurrencyhistory.Hooks(f(g(h())))`.
func (c *CoinFiatCurrencyHistoryClient) Use(hooks ...Hook) {
	c.hooks.CoinFiatCurrencyHistory = append(c.hooks.CoinFiatCurrencyHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `coinfiatcurrencyhistory.Intercept(f(g(h())))`.
func (c *CoinFiatCurrencyHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.CoinFiatCurrencyHistory = append(c.inters.CoinFiatCurrencyHistory, interceptors...)
}

// Create returns a builder for creating a CoinFiatCurrencyHistory entity.
func (c *CoinFiatCurrencyHistoryClient) Create() *CoinFiatCurrencyHistoryCreate {
	mutation := newCoinFiatCurrencyHistoryMutation(c.config, OpCreate)
	return &CoinFiatCurrencyHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CoinFiatCurrencyHistory entities.
func (c *CoinFiatCurrencyHistoryClient) CreateBulk(builders ...*CoinFiatCurrencyHistoryCreate) *CoinFiatCurrencyHistoryCreateBulk {
	return &CoinFiatCurrencyHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CoinFiatCurrencyHistoryClient) MapCreateBulk(slice any, setFunc func(*CoinFiatCurrencyHistoryCreate, int)) *CoinFiatCurrencyHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CoinFiatCurrencyHistoryCreateBulk{err: fmt.Errorf("calling to CoinFiatCurrencyHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CoinFiatCurrencyHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CoinFiatCurrencyHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CoinFiatCurrencyHistory.
func (c *CoinFiatCurrencyHistoryClient) Update() *CoinFiatCurrencyHistoryUpdate {
	mutation := newCoinFiatCurrencyHistoryMutation(c.config, OpUpdate)
	return &CoinFiatCurrencyHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CoinFiatCurrencyHistoryClient) UpdateOne(cfch *CoinFiatCurrencyHistory) *CoinFiatCurrencyHistoryUpdateOne {
	mutation := newCoinFiatCurrencyHistoryMutation(c.config, OpUpdateOne, withCoinFiatCurrencyHistory(cfch))
	return &CoinFiatCurrencyHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CoinFiatCurrencyHistoryClient) UpdateOneID(id uint32) *CoinFiatCurrencyHistoryUpdateOne {
	mutation := newCoinFiatCurrencyHistoryMutation(c.config, OpUpdateOne, withCoinFiatCurrencyHistoryID(id))
	return &CoinFiatCurrencyHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CoinFiatCurrencyHistory.
func (c *CoinFiatCurrencyHistoryClient) Delete() *CoinFiatCurrencyHistoryDelete {
	mutation := newCoinFiatCurrencyHistoryMutation(c.config, OpDelete)
	return &CoinFiatCurrencyHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CoinFiatCurrencyHistoryClient) DeleteOne(cfch *CoinFiatCurrencyHistory) *CoinFiatCurrencyHistoryDeleteOne {
	return c.DeleteOneID(cfch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CoinFiatCurrencyHistoryClient) DeleteOneID(id uint32) *CoinFiatCurrencyHistoryDeleteOne {
	builder := c.Delete().Where(coinfiatcurrencyhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CoinFiatCurrencyHistoryDeleteOne{builder}
}

// Query returns a query builder for CoinFiatCurrencyHistory.
func (c *CoinFiatCurrencyHistoryClient) Query() *CoinFiatCurrencyHistoryQuery {
	return &CoinFiatCurrencyHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCoinFiatCurrencyHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a CoinFiatCurrencyHistory entity by its id.
func (c *CoinFiatCurrencyHistoryClient) Get(ctx context.Context, id uint32) (*CoinFiatCurrencyHistory, error) {
	return c.Query().Where(coinfiatcurrencyhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CoinFiatCurrencyHistoryClient) GetX(ctx context.Context, id uint32) *CoinFiatCurrencyHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CoinFiatCurrencyHistoryClient) Hooks() []Hook {
	return c.hooks.CoinFiatCurrencyHistory
}

// Interceptors returns the client interceptors.
func (c *CoinFiatCurrencyHistoryClient) Interceptors() []Interceptor {
	return c.inters.CoinFiatCurrencyHistory
}

func (c *CoinFiatCurrencyHistoryClient) mutate(ctx context.Context, m *CoinFiatCurrencyHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CoinFiatCurrencyHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CoinFiatCurrencyHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CoinFiatCurrencyHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CoinFiatCurrencyHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown CoinFiatCurrencyHistory mutation op: %q", m.Op())
	}
}

// CoinUsedForClient is a client for the CoinUsedFor schema.
type CoinUsedForClient struct {
	config
}

// NewCoinUsedForClient returns a client for the CoinUsedFor from the given config.
func NewCoinUsedForClient(c config) *CoinUsedForClient {
	return &CoinUsedForClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coinusedfor.Hooks(f(g(h())))`.
func (c *CoinUsedForClient) Use(hooks ...Hook) {
	c.hooks.CoinUsedFor = append(c.hooks.CoinUsedFor, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `coinusedfor.Intercept(f(g(h())))`.
func (c *CoinUsedForClient) Intercept(interceptors ...Interceptor) {
	c.inters.CoinUsedFor = append(c.inters.CoinUsedFor, interceptors...)
}

// Create returns a builder for creating a CoinUsedFor entity.
func (c *CoinUsedForClient) Create() *CoinUsedForCreate {
	mutation := newCoinUsedForMutation(c.config, OpCreate)
	return &CoinUsedForCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CoinUsedFor entities.
func (c *CoinUsedForClient) CreateBulk(builders ...*CoinUsedForCreate) *CoinUsedForCreateBulk {
	return &CoinUsedForCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CoinUsedForClient) MapCreateBulk(slice any, setFunc func(*CoinUsedForCreate, int)) *CoinUsedForCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CoinUsedForCreateBulk{err: fmt.Errorf("calling to CoinUsedForClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CoinUsedForCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CoinUsedForCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CoinUsedFor.
func (c *CoinUsedForClient) Update() *CoinUsedForUpdate {
	mutation := newCoinUsedForMutation(c.config, OpUpdate)
	return &CoinUsedForUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CoinUsedForClient) UpdateOne(cuf *CoinUsedFor) *CoinUsedForUpdateOne {
	mutation := newCoinUsedForMutation(c.config, OpUpdateOne, withCoinUsedFor(cuf))
	return &CoinUsedForUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CoinUsedForClient) UpdateOneID(id uint32) *CoinUsedForUpdateOne {
	mutation := newCoinUsedForMutation(c.config, OpUpdateOne, withCoinUsedForID(id))
	return &CoinUsedForUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CoinUsedFor.
func (c *CoinUsedForClient) Delete() *CoinUsedForDelete {
	mutation := newCoinUsedForMutation(c.config, OpDelete)
	return &CoinUsedForDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CoinUsedForClient) DeleteOne(cuf *CoinUsedFor) *CoinUsedForDeleteOne {
	return c.DeleteOneID(cuf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CoinUsedForClient) DeleteOneID(id uint32) *CoinUsedForDeleteOne {
	builder := c.Delete().Where(coinusedfor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CoinUsedForDeleteOne{builder}
}

// Query returns a query builder for CoinUsedFor.
func (c *CoinUsedForClient) Query() *CoinUsedForQuery {
	return &CoinUsedForQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCoinUsedFor},
		inters: c.Interceptors(),
	}
}

// Get returns a CoinUsedFor entity by its id.
func (c *CoinUsedForClient) Get(ctx context.Context, id uint32) (*CoinUsedFor, error) {
	return c.Query().Where(coinusedfor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CoinUsedForClient) GetX(ctx context.Context, id uint32) *CoinUsedFor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CoinUsedForClient) Hooks() []Hook {
	return c.hooks.CoinUsedFor
}

// Interceptors returns the client interceptors.
func (c *CoinUsedForClient) Interceptors() []Interceptor {
	return c.inters.CoinUsedFor
}

func (c *CoinUsedForClient) mutate(ctx context.Context, m *CoinUsedForMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CoinUsedForCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CoinUsedForUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CoinUsedForUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CoinUsedForDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown CoinUsedFor mutation op: %q", m.Op())
	}
}

// CurrencyClient is a client for the Currency schema.
type CurrencyClient struct {
	config
}

// NewCurrencyClient returns a client for the Currency from the given config.
func NewCurrencyClient(c config) *CurrencyClient {
	return &CurrencyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `currency.Hooks(f(g(h())))`.
func (c *CurrencyClient) Use(hooks ...Hook) {
	c.hooks.Currency = append(c.hooks.Currency, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `currency.Intercept(f(g(h())))`.
func (c *CurrencyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Currency = append(c.inters.Currency, interceptors...)
}

// Create returns a builder for creating a Currency entity.
func (c *CurrencyClient) Create() *CurrencyCreate {
	mutation := newCurrencyMutation(c.config, OpCreate)
	return &CurrencyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Currency entities.
func (c *CurrencyClient) CreateBulk(builders ...*CurrencyCreate) *CurrencyCreateBulk {
	return &CurrencyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CurrencyClient) MapCreateBulk(slice any, setFunc func(*CurrencyCreate, int)) *CurrencyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CurrencyCreateBulk{err: fmt.Errorf("calling to CurrencyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CurrencyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CurrencyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Currency.
func (c *CurrencyClient) Update() *CurrencyUpdate {
	mutation := newCurrencyMutation(c.config, OpUpdate)
	return &CurrencyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CurrencyClient) UpdateOne(cu *Currency) *CurrencyUpdateOne {
	mutation := newCurrencyMutation(c.config, OpUpdateOne, withCurrency(cu))
	return &CurrencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CurrencyClient) UpdateOneID(id uint32) *CurrencyUpdateOne {
	mutation := newCurrencyMutation(c.config, OpUpdateOne, withCurrencyID(id))
	return &CurrencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Currency.
func (c *CurrencyClient) Delete() *CurrencyDelete {
	mutation := newCurrencyMutation(c.config, OpDelete)
	return &CurrencyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CurrencyClient) DeleteOne(cu *Currency) *CurrencyDeleteOne {
	return c.DeleteOneID(cu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CurrencyClient) DeleteOneID(id uint32) *CurrencyDeleteOne {
	builder := c.Delete().Where(currency.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CurrencyDeleteOne{builder}
}

// Query returns a query builder for Currency.
func (c *CurrencyClient) Query() *CurrencyQuery {
	return &CurrencyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCurrency},
		inters: c.Interceptors(),
	}
}

// Get returns a Currency entity by its id.
func (c *CurrencyClient) Get(ctx context.Context, id uint32) (*Currency, error) {
	return c.Query().Where(currency.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CurrencyClient) GetX(ctx context.Context, id uint32) *Currency {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CurrencyClient) Hooks() []Hook {
	return c.hooks.Currency
}

// Interceptors returns the client interceptors.
func (c *CurrencyClient) Interceptors() []Interceptor {
	return c.inters.Currency
}

func (c *CurrencyClient) mutate(ctx context.Context, m *CurrencyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CurrencyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CurrencyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CurrencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CurrencyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Currency mutation op: %q", m.Op())
	}
}

// CurrencyFeedClient is a client for the CurrencyFeed schema.
type CurrencyFeedClient struct {
	config
}

// NewCurrencyFeedClient returns a client for the CurrencyFeed from the given config.
func NewCurrencyFeedClient(c config) *CurrencyFeedClient {
	return &CurrencyFeedClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `currencyfeed.Hooks(f(g(h())))`.
func (c *CurrencyFeedClient) Use(hooks ...Hook) {
	c.hooks.CurrencyFeed = append(c.hooks.CurrencyFeed, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `currencyfeed.Intercept(f(g(h())))`.
func (c *CurrencyFeedClient) Intercept(interceptors ...Interceptor) {
	c.inters.CurrencyFeed = append(c.inters.CurrencyFeed, interceptors...)
}

// Create returns a builder for creating a CurrencyFeed entity.
func (c *CurrencyFeedClient) Create() *CurrencyFeedCreate {
	mutation := newCurrencyFeedMutation(c.config, OpCreate)
	return &CurrencyFeedCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CurrencyFeed entities.
func (c *CurrencyFeedClient) CreateBulk(builders ...*CurrencyFeedCreate) *CurrencyFeedCreateBulk {
	return &CurrencyFeedCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CurrencyFeedClient) MapCreateBulk(slice any, setFunc func(*CurrencyFeedCreate, int)) *CurrencyFeedCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CurrencyFeedCreateBulk{err: fmt.Errorf("calling to CurrencyFeedClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CurrencyFeedCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CurrencyFeedCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CurrencyFeed.
func (c *CurrencyFeedClient) Update() *CurrencyFeedUpdate {
	mutation := newCurrencyFeedMutation(c.config, OpUpdate)
	return &CurrencyFeedUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CurrencyFeedClient) UpdateOne(cf *CurrencyFeed) *CurrencyFeedUpdateOne {
	mutation := newCurrencyFeedMutation(c.config, OpUpdateOne, withCurrencyFeed(cf))
	return &CurrencyFeedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CurrencyFeedClient) UpdateOneID(id uint32) *CurrencyFeedUpdateOne {
	mutation := newCurrencyFeedMutation(c.config, OpUpdateOne, withCurrencyFeedID(id))
	return &CurrencyFeedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CurrencyFeed.
func (c *CurrencyFeedClient) Delete() *CurrencyFeedDelete {
	mutation := newCurrencyFeedMutation(c.config, OpDelete)
	return &CurrencyFeedDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CurrencyFeedClient) DeleteOne(cf *CurrencyFeed) *CurrencyFeedDeleteOne {
	return c.DeleteOneID(cf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CurrencyFeedClient) DeleteOneID(id uint32) *CurrencyFeedDeleteOne {
	builder := c.Delete().Where(currencyfeed.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CurrencyFeedDeleteOne{builder}
}

// Query returns a query builder for CurrencyFeed.
func (c *CurrencyFeedClient) Query() *CurrencyFeedQuery {
	return &CurrencyFeedQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCurrencyFeed},
		inters: c.Interceptors(),
	}
}

// Get returns a CurrencyFeed entity by its id.
func (c *CurrencyFeedClient) Get(ctx context.Context, id uint32) (*CurrencyFeed, error) {
	return c.Query().Where(currencyfeed.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CurrencyFeedClient) GetX(ctx context.Context, id uint32) *CurrencyFeed {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CurrencyFeedClient) Hooks() []Hook {
	return c.hooks.CurrencyFeed
}

// Interceptors returns the client interceptors.
func (c *CurrencyFeedClient) Interceptors() []Interceptor {
	return c.inters.CurrencyFeed
}

func (c *CurrencyFeedClient) mutate(ctx context.Context, m *CurrencyFeedMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CurrencyFeedCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CurrencyFeedUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CurrencyFeedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CurrencyFeedDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown CurrencyFeed mutation op: %q", m.Op())
	}
}

// CurrencyHistoryClient is a client for the CurrencyHistory schema.
type CurrencyHistoryClient struct {
	config
}

// NewCurrencyHistoryClient returns a client for the CurrencyHistory from the given config.
func NewCurrencyHistoryClient(c config) *CurrencyHistoryClient {
	return &CurrencyHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `currencyhistory.Hooks(f(g(h())))`.
func (c *CurrencyHistoryClient) Use(hooks ...Hook) {
	c.hooks.CurrencyHistory = append(c.hooks.CurrencyHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `currencyhistory.Intercept(f(g(h())))`.
func (c *CurrencyHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.CurrencyHistory = append(c.inters.CurrencyHistory, interceptors...)
}

// Create returns a builder for creating a CurrencyHistory entity.
func (c *CurrencyHistoryClient) Create() *CurrencyHistoryCreate {
	mutation := newCurrencyHistoryMutation(c.config, OpCreate)
	return &CurrencyHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CurrencyHistory entities.
func (c *CurrencyHistoryClient) CreateBulk(builders ...*CurrencyHistoryCreate) *CurrencyHistoryCreateBulk {
	return &CurrencyHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CurrencyHistoryClient) MapCreateBulk(slice any, setFunc func(*CurrencyHistoryCreate, int)) *CurrencyHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CurrencyHistoryCreateBulk{err: fmt.Errorf("calling to CurrencyHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CurrencyHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CurrencyHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CurrencyHistory.
func (c *CurrencyHistoryClient) Update() *CurrencyHistoryUpdate {
	mutation := newCurrencyHistoryMutation(c.config, OpUpdate)
	return &CurrencyHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CurrencyHistoryClient) UpdateOne(ch *CurrencyHistory) *CurrencyHistoryUpdateOne {
	mutation := newCurrencyHistoryMutation(c.config, OpUpdateOne, withCurrencyHistory(ch))
	return &CurrencyHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CurrencyHistoryClient) UpdateOneID(id uint32) *CurrencyHistoryUpdateOne {
	mutation := newCurrencyHistoryMutation(c.config, OpUpdateOne, withCurrencyHistoryID(id))
	return &CurrencyHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CurrencyHistory.
func (c *CurrencyHistoryClient) Delete() *CurrencyHistoryDelete {
	mutation := newCurrencyHistoryMutation(c.config, OpDelete)
	return &CurrencyHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CurrencyHistoryClient) DeleteOne(ch *CurrencyHistory) *CurrencyHistoryDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CurrencyHistoryClient) DeleteOneID(id uint32) *CurrencyHistoryDeleteOne {
	builder := c.Delete().Where(currencyhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CurrencyHistoryDeleteOne{builder}
}

// Query returns a query builder for CurrencyHistory.
func (c *CurrencyHistoryClient) Query() *CurrencyHistoryQuery {
	return &CurrencyHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCurrencyHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a CurrencyHistory entity by its id.
func (c *CurrencyHistoryClient) Get(ctx context.Context, id uint32) (*CurrencyHistory, error) {
	return c.Query().Where(currencyhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CurrencyHistoryClient) GetX(ctx context.Context, id uint32) *CurrencyHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CurrencyHistoryClient) Hooks() []Hook {
	return c.hooks.CurrencyHistory
}

// Interceptors returns the client interceptors.
func (c *CurrencyHistoryClient) Interceptors() []Interceptor {
	return c.inters.CurrencyHistory
}

func (c *CurrencyHistoryClient) mutate(ctx context.Context, m *CurrencyHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CurrencyHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CurrencyHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CurrencyHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CurrencyHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown CurrencyHistory mutation op: %q", m.Op())
	}
}

// ExchangeRateClient is a client for the ExchangeRate schema.
type ExchangeRateClient struct {
	config
}

// NewExchangeRateClient returns a client for the ExchangeRate from the given config.
func NewExchangeRateClient(c config) *ExchangeRateClient {
	return &ExchangeRateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exchangerate.Hooks(f(g(h())))`.
func (c *ExchangeRateClient) Use(hooks ...Hook) {
	c.hooks.ExchangeRate = append(c.hooks.ExchangeRate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exchangerate.Intercept(f(g(h())))`.
func (c *ExchangeRateClient) Intercept(interceptors ...Interceptor) {
	c.inters.ExchangeRate = append(c.inters.ExchangeRate, interceptors...)
}

// Create returns a builder for creating a ExchangeRate entity.
func (c *ExchangeRateClient) Create() *ExchangeRateCreate {
	mutation := newExchangeRateMutation(c.config, OpCreate)
	return &ExchangeRateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExchangeRate entities.
func (c *ExchangeRateClient) CreateBulk(builders ...*ExchangeRateCreate) *ExchangeRateCreateBulk {
	return &ExchangeRateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ExchangeRateClient) MapCreateBulk(slice any, setFunc func(*ExchangeRateCreate, int)) *ExchangeRateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ExchangeRateCreateBulk{err: fmt.Errorf("calling to ExchangeRateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ExchangeRateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ExchangeRateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExchangeRate.
func (c *ExchangeRateClient) Update() *ExchangeRateUpdate {
	mutation := newExchangeRateMutation(c.config, OpUpdate)
	return &ExchangeRateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExchangeRateClient) UpdateOne(er *ExchangeRate) *ExchangeRateUpdateOne {
	mutation := newExchangeRateMutation(c.config, OpUpdateOne, withExchangeRate(er))
	return &ExchangeRateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExchangeRateClient) UpdateOneID(id uint32) *ExchangeRateUpdateOne {
	mutation := newExchangeRateMutation(c.config, OpUpdateOne, withExchangeRateID(id))
	return &ExchangeRateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExchangeRate.
func (c *ExchangeRateClient) Delete() *ExchangeRateDelete {
	mutation := newExchangeRateMutation(c.config, OpDelete)
	return &ExchangeRateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExchangeRateClient) DeleteOne(er *ExchangeRate) *ExchangeRateDeleteOne {
	return c.DeleteOneID(er.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExchangeRateClient) DeleteOneID(id uint32) *ExchangeRateDeleteOne {
	builder := c.Delete().Where(exchangerate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExchangeRateDeleteOne{builder}
}

// Query returns a query builder for ExchangeRate.
func (c *ExchangeRateClient) Query() *ExchangeRateQuery {
	return &ExchangeRateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExchangeRate},
		inters: c.Interceptors(),
	}
}

// Get returns a ExchangeRate entity by its id.
func (c *ExchangeRateClient) Get(ctx context.Context, id uint32) (*ExchangeRate, error) {
	return c.Query().Where(exchangerate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExchangeRateClient) GetX(ctx context.Context, id uint32) *ExchangeRate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ExchangeRateClient) Hooks() []Hook {
	return c.hooks.ExchangeRate
}

// Interceptors returns the client interceptors.
func (c *ExchangeRateClient) Interceptors() []Interceptor {
	return c.inters.ExchangeRate
}

func (c *ExchangeRateClient) mutate(ctx context.Context, m *ExchangeRateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExchangeRateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExchangeRateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExchangeRateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExchangeRateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown ExchangeRate mutation op: %q", m.Op())
	}
}

// FiatClient is a client for the Fiat schema.
type FiatClient struct {
	config
}

// NewFiatClient returns a client for the Fiat from the given config.
func NewFiatClient(c config) *FiatClient {
	return &FiatClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fiat.Hooks(f(g(h())))`.
func (c *FiatClient) Use(hooks ...Hook) {
	c.hooks.Fiat = append(c.hooks.Fiat, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `fiat.Intercept(f(g(h())))`.
func (c *FiatClient) Intercept(interceptors ...Interceptor) {
	c.inters.Fiat = append(c.inters.Fiat, interceptors...)
}

// Create returns a builder for creating a Fiat entity.
func (c *FiatClient) Create() *FiatCreate {
	mutation := newFiatMutation(c.config, OpCreate)
	return &FiatCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Fiat entities.
func (c *FiatClient) CreateBulk(builders ...*FiatCreate) *FiatCreateBulk {
	return &FiatCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FiatClient) MapCreateBulk(slice any, setFunc func(*FiatCreate, int)) *FiatCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FiatCreateBulk{err: fmt.Errorf("calling to FiatClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FiatCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FiatCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Fiat.
func (c *FiatClient) Update() *FiatUpdate {
	mutation := newFiatMutation(c.config, OpUpdate)
	return &FiatUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FiatClient) UpdateOne(f *Fiat) *FiatUpdateOne {
	mutation := newFiatMutation(c.config, OpUpdateOne, withFiat(f))
	return &FiatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FiatClient) UpdateOneID(id uint32) *FiatUpdateOne {
	mutation := newFiatMutation(c.config, OpUpdateOne, withFiatID(id))
	return &FiatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Fiat.
func (c *FiatClient) Delete() *FiatDelete {
	mutation := newFiatMutation(c.config, OpDelete)
	return &FiatDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FiatClient) DeleteOne(f *Fiat) *FiatDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FiatClient) DeleteOneID(id uint32) *FiatDeleteOne {
	builder := c.Delete().Where(fiat.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FiatDeleteOne{builder}
}

// Query returns a query builder for Fiat.
func (c *FiatClient) Query() *FiatQuery {
	return &FiatQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFiat},
		inters: c.Interceptors(),
	}
}

// Get returns a Fiat entity by its id.
func (c *FiatClient) Get(ctx context.Context, id uint32) (*Fiat, error) {
	return c.Query().Where(fiat.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FiatClient) GetX(ctx context.Context, id uint32) *Fiat {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FiatClient) Hooks() []Hook {
	return c.hooks.Fiat
}

// Interceptors returns the client interceptors.
func (c *FiatClient) Interceptors() []Interceptor {
	return c.inters.Fiat
}

func (c *FiatClient) mutate(ctx context.Context, m *FiatMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FiatCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FiatUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FiatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FiatDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Fiat mutation op: %q", m.Op())
	}
}

// FiatCurrencyClient is a client for the FiatCurrency schema.
type FiatCurrencyClient struct {
	config
}

// NewFiatCurrencyClient returns a client for the FiatCurrency from the given config.
func NewFiatCurrencyClient(c config) *FiatCurrencyClient {
	return &FiatCurrencyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fiatcurrency.Hooks(f(g(h())))`.
func (c *FiatCurrencyClient) Use(hooks ...Hook) {
	c.hooks.FiatCurrency = append(c.hooks.FiatCurrency, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `fiatcurrency.Intercept(f(g(h())))`.
func (c *FiatCurrencyClient) Intercept(interceptors ...Interceptor) {
	c.inters.FiatCurrency = append(c.inters.FiatCurrency, interceptors...)
}

// Create returns a builder for creating a FiatCurrency entity.
func (c *FiatCurrencyClient) Create() *FiatCurrencyCreate {
	mutation := newFiatCurrencyMutation(c.config, OpCreate)
	return &FiatCurrencyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FiatCurrency entities.
func (c *FiatCurrencyClient) CreateBulk(builders ...*FiatCurrencyCreate) *FiatCurrencyCreateBulk {
	return &FiatCurrencyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FiatCurrencyClient) MapCreateBulk(slice any, setFunc func(*FiatCurrencyCreate, int)) *FiatCurrencyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FiatCurrencyCreateBulk{err: fmt.Errorf("calling to FiatCurrencyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FiatCurrencyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FiatCurrencyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FiatCurrency.
func (c *FiatCurrencyClient) Update() *FiatCurrencyUpdate {
	mutation := newFiatCurrencyMutation(c.config, OpUpdate)
	return &FiatCurrencyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FiatCurrencyClient) UpdateOne(fc *FiatCurrency) *FiatCurrencyUpdateOne {
	mutation := newFiatCurrencyMutation(c.config, OpUpdateOne, withFiatCurrency(fc))
	return &FiatCurrencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FiatCurrencyClient) UpdateOneID(id uint32) *FiatCurrencyUpdateOne {
	mutation := newFiatCurrencyMutation(c.config, OpUpdateOne, withFiatCurrencyID(id))
	return &FiatCurrencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FiatCurrency.
func (c *FiatCurrencyClient) Delete() *FiatCurrencyDelete {
	mutation := newFiatCurrencyMutation(c.config, OpDelete)
	return &FiatCurrencyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FiatCurrencyClient) DeleteOne(fc *FiatCurrency) *FiatCurrencyDeleteOne {
	return c.DeleteOneID(fc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FiatCurrencyClient) DeleteOneID(id uint32) *FiatCurrencyDeleteOne {
	builder := c.Delete().Where(fiatcurrency.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FiatCurrencyDeleteOne{builder}
}

// Query returns a query builder for FiatCurrency.
func (c *FiatCurrencyClient) Query() *FiatCurrencyQuery {
	return &FiatCurrencyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFiatCurrency},
		inters: c.Interceptors(),
	}
}

// Get returns a FiatCurrency entity by its id.
func (c *FiatCurrencyClient) Get(ctx context.Context, id uint32) (*FiatCurrency, error) {
	return c.Query().Where(fiatcurrency.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FiatCurrencyClient) GetX(ctx context.Context, id uint32) *FiatCurrency {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FiatCurrencyClient) Hooks() []Hook {
	return c.hooks.FiatCurrency
}

// Interceptors returns the client interceptors.
func (c *FiatCurrencyClient) Interceptors() []Interceptor {
	return c.inters.FiatCurrency
}

func (c *FiatCurrencyClient) mutate(ctx context.Context, m *FiatCurrencyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FiatCurrencyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FiatCurrencyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FiatCurrencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FiatCurrencyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown FiatCurrency mutation op: %q", m.Op())
	}
}

// FiatCurrencyFeedClient is a client for the FiatCurrencyFeed schema.
type FiatCurrencyFeedClient struct {
	config
}

// NewFiatCurrencyFeedClient returns a client for the FiatCurrencyFeed from the given config.
func NewFiatCurrencyFeedClient(c config) *FiatCurrencyFeedClient {
	return &FiatCurrencyFeedClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fiatcurrencyfeed.Hooks(f(g(h())))`.
func (c *FiatCurrencyFeedClient) Use(hooks ...Hook) {
	c.hooks.FiatCurrencyFeed = append(c.hooks.FiatCurrencyFeed, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `fiatcurrencyfeed.Intercept(f(g(h())))`.
func (c *FiatCurrencyFeedClient) Intercept(interceptors ...Interceptor) {
	c.inters.FiatCurrencyFeed = append(c.inters.FiatCurrencyFeed, interceptors...)
}

// Create returns a builder for creating a FiatCurrencyFeed entity.
func (c *FiatCurrencyFeedClient) Create() *FiatCurrencyFeedCreate {
	mutation := newFiatCurrencyFeedMutation(c.config, OpCreate)
	return &FiatCurrencyFeedCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FiatCurrencyFeed entities.
func (c *FiatCurrencyFeedClient) CreateBulk(builders ...*FiatCurrencyFeedCreate) *FiatCurrencyFeedCreateBulk {
	return &FiatCurrencyFeedCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FiatCurrencyFeedClient) MapCreateBulk(slice any, setFunc func(*FiatCurrencyFeedCreate, int)) *FiatCurrencyFeedCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FiatCurrencyFeedCreateBulk{err: fmt.Errorf("calling to FiatCurrencyFeedClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FiatCurrencyFeedCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FiatCurrencyFeedCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FiatCurrencyFeed.
func (c *FiatCurrencyFeedClient) Update() *FiatCurrencyFeedUpdate {
	mutation := newFiatCurrencyFeedMutation(c.config, OpUpdate)
	return &FiatCurrencyFeedUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FiatCurrencyFeedClient) UpdateOne(fcf *FiatCurrencyFeed) *FiatCurrencyFeedUpdateOne {
	mutation := newFiatCurrencyFeedMutation(c.config, OpUpdateOne, withFiatCurrencyFeed(fcf))
	return &FiatCurrencyFeedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FiatCurrencyFeedClient) UpdateOneID(id uint32) *FiatCurrencyFeedUpdateOne {
	mutation := newFiatCurrencyFeedMutation(c.config, OpUpdateOne, withFiatCurrencyFeedID(id))
	return &FiatCurrencyFeedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FiatCurrencyFeed.
func (c *FiatCurrencyFeedClient) Delete() *FiatCurrencyFeedDelete {
	mutation := newFiatCurrencyFeedMutation(c.config, OpDelete)
	return &FiatCurrencyFeedDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FiatCurrencyFeedClient) DeleteOne(fcf *FiatCurrencyFeed) *FiatCurrencyFeedDeleteOne {
	return c.DeleteOneID(fcf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FiatCurrencyFeedClient) DeleteOneID(id uint32) *FiatCurrencyFeedDeleteOne {
	builder := c.Delete().Where(fiatcurrencyfeed.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FiatCurrencyFeedDeleteOne{builder}
}

// Query returns a query builder for FiatCurrencyFeed.
func (c *FiatCurrencyFeedClient) Query() *FiatCurrencyFeedQuery {
	return &FiatCurrencyFeedQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFiatCurrencyFeed},
		inters: c.Interceptors(),
	}
}

// Get returns a FiatCurrencyFeed entity by its id.
func (c *FiatCurrencyFeedClient) Get(ctx context.Context, id uint32) (*FiatCurrencyFeed, error) {
	return c.Query().Where(fiatcurrencyfeed.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FiatCurrencyFeedClient) GetX(ctx context.Context, id uint32) *FiatCurrencyFeed {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FiatCurrencyFeedClient) Hooks() []Hook {
	return c.hooks.FiatCurrencyFeed
}

// Interceptors returns the client interceptors.
func (c *FiatCurrencyFeedClient) Interceptors() []Interceptor {
	return c.inters.FiatCurrencyFeed
}

func (c *FiatCurrencyFeedClient) mutate(ctx context.Context, m *FiatCurrencyFeedMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FiatCurrencyFeedCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FiatCurrencyFeedUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FiatCurrencyFeedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FiatCurrencyFeedDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown FiatCurrencyFeed mutation op: %q", m.Op())
	}
}

// FiatCurrencyHistoryClient is a client for the FiatCurrencyHistory schema.
type FiatCurrencyHistoryClient struct {
	config
}

// NewFiatCurrencyHistoryClient returns a client for the FiatCurrencyHistory from the given config.
func NewFiatCurrencyHistoryClient(c config) *FiatCurrencyHistoryClient {
	return &FiatCurrencyHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fiatcurrencyhistory.Hooks(f(g(h())))`.
func (c *FiatCurrencyHistoryClient) Use(hooks ...Hook) {
	c.hooks.FiatCurrencyHistory = append(c.hooks.FiatCurrencyHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `fiatcurrencyhistory.Intercept(f(g(h())))`.
func (c *FiatCurrencyHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.FiatCurrencyHistory = append(c.inters.FiatCurrencyHistory, interceptors...)
}

// Create returns a builder for creating a FiatCurrencyHistory entity.
func (c *FiatCurrencyHistoryClient) Create() *FiatCurrencyHistoryCreate {
	mutation := newFiatCurrencyHistoryMutation(c.config, OpCreate)
	return &FiatCurrencyHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FiatCurrencyHistory entities.
func (c *FiatCurrencyHistoryClient) CreateBulk(builders ...*FiatCurrencyHistoryCreate) *FiatCurrencyHistoryCreateBulk {
	return &FiatCurrencyHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FiatCurrencyHistoryClient) MapCreateBulk(slice any, setFunc func(*FiatCurrencyHistoryCreate, int)) *FiatCurrencyHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FiatCurrencyHistoryCreateBulk{err: fmt.Errorf("calling to FiatCurrencyHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FiatCurrencyHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FiatCurrencyHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FiatCurrencyHistory.
func (c *FiatCurrencyHistoryClient) Update() *FiatCurrencyHistoryUpdate {
	mutation := newFiatCurrencyHistoryMutation(c.config, OpUpdate)
	return &FiatCurrencyHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FiatCurrencyHistoryClient) UpdateOne(fch *FiatCurrencyHistory) *FiatCurrencyHistoryUpdateOne {
	mutation := newFiatCurrencyHistoryMutation(c.config, OpUpdateOne, withFiatCurrencyHistory(fch))
	return &FiatCurrencyHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FiatCurrencyHistoryClient) UpdateOneID(id uint32) *FiatCurrencyHistoryUpdateOne {
	mutation := newFiatCurrencyHistoryMutation(c.config, OpUpdateOne, withFiatCurrencyHistoryID(id))
	return &FiatCurrencyHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FiatCurrencyHistory.
func (c *FiatCurrencyHistoryClient) Delete() *FiatCurrencyHistoryDelete {
	mutation := newFiatCurrencyHistoryMutation(c.config, OpDelete)
	return &FiatCurrencyHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FiatCurrencyHistoryClient) DeleteOne(fch *FiatCurrencyHistory) *FiatCurrencyHistoryDeleteOne {
	return c.DeleteOneID(fch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FiatCurrencyHistoryClient) DeleteOneID(id uint32) *FiatCurrencyHistoryDeleteOne {
	builder := c.Delete().Where(fiatcurrencyhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FiatCurrencyHistoryDeleteOne{builder}
}

// Query returns a query builder for FiatCurrencyHistory.
func (c *FiatCurrencyHistoryClient) Query() *FiatCurrencyHistoryQuery {
	return &FiatCurrencyHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFiatCurrencyHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a FiatCurrencyHistory entity by its id.
func (c *FiatCurrencyHistoryClient) Get(ctx context.Context, id uint32) (*FiatCurrencyHistory, error) {
	return c.Query().Where(fiatcurrencyhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FiatCurrencyHistoryClient) GetX(ctx context.Context, id uint32) *FiatCurrencyHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FiatCurrencyHistoryClient) Hooks() []Hook {
	return c.hooks.FiatCurrencyHistory
}

// Interceptors returns the client interceptors.
func (c *FiatCurrencyHistoryClient) Interceptors() []Interceptor {
	return c.inters.FiatCurrencyHistory
}

func (c *FiatCurrencyHistoryClient) mutate(ctx context.Context, m *FiatCurrencyHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FiatCurrencyHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FiatCurrencyHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FiatCurrencyHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FiatCurrencyHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown FiatCurrencyHistory mutation op: %q", m.Op())
	}
}

// SettingClient is a client for the Setting schema.
type SettingClient struct {
	config
}

// NewSettingClient returns a client for the Setting from the given config.
func NewSettingClient(c config) *SettingClient {
	return &SettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `setting.Hooks(f(g(h())))`.
func (c *SettingClient) Use(hooks ...Hook) {
	c.hooks.Setting = append(c.hooks.Setting, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `setting.Intercept(f(g(h())))`.
func (c *SettingClient) Intercept(interceptors ...Interceptor) {
	c.inters.Setting = append(c.inters.Setting, interceptors...)
}

// Create returns a builder for creating a Setting entity.
func (c *SettingClient) Create() *SettingCreate {
	mutation := newSettingMutation(c.config, OpCreate)
	return &SettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Setting entities.
func (c *SettingClient) CreateBulk(builders ...*SettingCreate) *SettingCreateBulk {
	return &SettingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SettingClient) MapCreateBulk(slice any, setFunc func(*SettingCreate, int)) *SettingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SettingCreateBulk{err: fmt.Errorf("calling to SettingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SettingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Setting.
func (c *SettingClient) Update() *SettingUpdate {
	mutation := newSettingMutation(c.config, OpUpdate)
	return &SettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SettingClient) UpdateOne(s *Setting) *SettingUpdateOne {
	mutation := newSettingMutation(c.config, OpUpdateOne, withSetting(s))
	return &SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SettingClient) UpdateOneID(id uint32) *SettingUpdateOne {
	mutation := newSettingMutation(c.config, OpUpdateOne, withSettingID(id))
	return &SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Setting.
func (c *SettingClient) Delete() *SettingDelete {
	mutation := newSettingMutation(c.config, OpDelete)
	return &SettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SettingClient) DeleteOne(s *Setting) *SettingDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SettingClient) DeleteOneID(id uint32) *SettingDeleteOne {
	builder := c.Delete().Where(setting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SettingDeleteOne{builder}
}

// Query returns a query builder for Setting.
func (c *SettingClient) Query() *SettingQuery {
	return &SettingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSetting},
		inters: c.Interceptors(),
	}
}

// Get returns a Setting entity by its id.
func (c *SettingClient) Get(ctx context.Context, id uint32) (*Setting, error) {
	return c.Query().Where(setting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SettingClient) GetX(ctx context.Context, id uint32) *Setting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SettingClient) Hooks() []Hook {
	return c.hooks.Setting
}

// Interceptors returns the client interceptors.
func (c *SettingClient) Interceptors() []Interceptor {
	return c.inters.Setting
}

func (c *SettingClient) mutate(ctx context.Context, m *SettingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SettingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SettingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SettingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Setting mutation op: %q", m.Op())
	}
}

// TranClient is a client for the Tran schema.
type TranClient struct {
	config
}

// NewTranClient returns a client for the Tran from the given config.
func NewTranClient(c config) *TranClient {
	return &TranClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tran.Hooks(f(g(h())))`.
func (c *TranClient) Use(hooks ...Hook) {
	c.hooks.Tran = append(c.hooks.Tran, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tran.Intercept(f(g(h())))`.
func (c *TranClient) Intercept(interceptors ...Interceptor) {
	c.inters.Tran = append(c.inters.Tran, interceptors...)
}

// Create returns a builder for creating a Tran entity.
func (c *TranClient) Create() *TranCreate {
	mutation := newTranMutation(c.config, OpCreate)
	return &TranCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tran entities.
func (c *TranClient) CreateBulk(builders ...*TranCreate) *TranCreateBulk {
	return &TranCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TranClient) MapCreateBulk(slice any, setFunc func(*TranCreate, int)) *TranCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TranCreateBulk{err: fmt.Errorf("calling to TranClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TranCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TranCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tran.
func (c *TranClient) Update() *TranUpdate {
	mutation := newTranMutation(c.config, OpUpdate)
	return &TranUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TranClient) UpdateOne(t *Tran) *TranUpdateOne {
	mutation := newTranMutation(c.config, OpUpdateOne, withTran(t))
	return &TranUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TranClient) UpdateOneID(id uint32) *TranUpdateOne {
	mutation := newTranMutation(c.config, OpUpdateOne, withTranID(id))
	return &TranUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tran.
func (c *TranClient) Delete() *TranDelete {
	mutation := newTranMutation(c.config, OpDelete)
	return &TranDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TranClient) DeleteOne(t *Tran) *TranDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TranClient) DeleteOneID(id uint32) *TranDeleteOne {
	builder := c.Delete().Where(tran.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TranDeleteOne{builder}
}

// Query returns a query builder for Tran.
func (c *TranClient) Query() *TranQuery {
	return &TranQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTran},
		inters: c.Interceptors(),
	}
}

// Get returns a Tran entity by its id.
func (c *TranClient) Get(ctx context.Context, id uint32) (*Tran, error) {
	return c.Query().Where(tran.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TranClient) GetX(ctx context.Context, id uint32) *Tran {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TranClient) Hooks() []Hook {
	return c.hooks.Tran
}

// Interceptors returns the client interceptors.
func (c *TranClient) Interceptors() []Interceptor {
	return c.inters.Tran
}

func (c *TranClient) mutate(ctx context.Context, m *TranMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TranCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TranUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TranUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TranDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Tran mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AppCoin, AppFiat, ChainBase, CoinBase, CoinDescription, CoinExtra, CoinFiat,
		CoinFiatCurrency, CoinFiatCurrencyHistory, CoinUsedFor, Currency, CurrencyFeed,
		CurrencyHistory, ExchangeRate, Fiat, FiatCurrency, FiatCurrencyFeed,
		FiatCurrencyHistory, Setting, Tran []ent.Hook
	}
	inters struct {
		AppCoin, AppFiat, ChainBase, CoinBase, CoinDescription, CoinExtra, CoinFiat,
		CoinFiatCurrency, CoinFiatCurrencyHistory, CoinUsedFor, Currency, CurrencyFeed,
		CurrencyHistory, ExchangeRate, Fiat, FiatCurrency, FiatCurrencyFeed,
		FiatCurrencyHistory, Setting, Tran []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}

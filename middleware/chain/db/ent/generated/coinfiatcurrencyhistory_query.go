// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/coinfiatcurrencyhistory"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/predicate"
)

// CoinFiatCurrencyHistoryQuery is the builder for querying CoinFiatCurrencyHistory entities.
type CoinFiatCurrencyHistoryQuery struct {
	config
	ctx        *QueryContext
	order      []coinfiatcurrencyhistory.OrderOption
	inters     []Interceptor
	predicates []predicate.CoinFiatCurrencyHistory
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CoinFiatCurrencyHistoryQuery builder.
func (cfchq *CoinFiatCurrencyHistoryQuery) Where(ps ...predicate.CoinFiatCurrencyHistory) *CoinFiatCurrencyHistoryQuery {
	cfchq.predicates = append(cfchq.predicates, ps...)
	return cfchq
}

// Limit the number of records to be returned by this query.
func (cfchq *CoinFiatCurrencyHistoryQuery) Limit(limit int) *CoinFiatCurrencyHistoryQuery {
	cfchq.ctx.Limit = &limit
	return cfchq
}

// Offset to start from.
func (cfchq *CoinFiatCurrencyHistoryQuery) Offset(offset int) *CoinFiatCurrencyHistoryQuery {
	cfchq.ctx.Offset = &offset
	return cfchq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cfchq *CoinFiatCurrencyHistoryQuery) Unique(unique bool) *CoinFiatCurrencyHistoryQuery {
	cfchq.ctx.Unique = &unique
	return cfchq
}

// Order specifies how the records should be ordered.
func (cfchq *CoinFiatCurrencyHistoryQuery) Order(o ...coinfiatcurrencyhistory.OrderOption) *CoinFiatCurrencyHistoryQuery {
	cfchq.order = append(cfchq.order, o...)
	return cfchq
}

// First returns the first CoinFiatCurrencyHistory entity from the query.
// Returns a *NotFoundError when no CoinFiatCurrencyHistory was found.
func (cfchq *CoinFiatCurrencyHistoryQuery) First(ctx context.Context) (*CoinFiatCurrencyHistory, error) {
	nodes, err := cfchq.Limit(1).All(setContextOp(ctx, cfchq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{coinfiatcurrencyhistory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cfchq *CoinFiatCurrencyHistoryQuery) FirstX(ctx context.Context) *CoinFiatCurrencyHistory {
	node, err := cfchq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CoinFiatCurrencyHistory ID from the query.
// Returns a *NotFoundError when no CoinFiatCurrencyHistory ID was found.
func (cfchq *CoinFiatCurrencyHistoryQuery) FirstID(ctx context.Context) (id uint32, err error) {
	var ids []uint32
	if ids, err = cfchq.Limit(1).IDs(setContextOp(ctx, cfchq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{coinfiatcurrencyhistory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cfchq *CoinFiatCurrencyHistoryQuery) FirstIDX(ctx context.Context) uint32 {
	id, err := cfchq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CoinFiatCurrencyHistory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CoinFiatCurrencyHistory entity is found.
// Returns a *NotFoundError when no CoinFiatCurrencyHistory entities are found.
func (cfchq *CoinFiatCurrencyHistoryQuery) Only(ctx context.Context) (*CoinFiatCurrencyHistory, error) {
	nodes, err := cfchq.Limit(2).All(setContextOp(ctx, cfchq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{coinfiatcurrencyhistory.Label}
	default:
		return nil, &NotSingularError{coinfiatcurrencyhistory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cfchq *CoinFiatCurrencyHistoryQuery) OnlyX(ctx context.Context) *CoinFiatCurrencyHistory {
	node, err := cfchq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CoinFiatCurrencyHistory ID in the query.
// Returns a *NotSingularError when more than one CoinFiatCurrencyHistory ID is found.
// Returns a *NotFoundError when no entities are found.
func (cfchq *CoinFiatCurrencyHistoryQuery) OnlyID(ctx context.Context) (id uint32, err error) {
	var ids []uint32
	if ids, err = cfchq.Limit(2).IDs(setContextOp(ctx, cfchq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{coinfiatcurrencyhistory.Label}
	default:
		err = &NotSingularError{coinfiatcurrencyhistory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cfchq *CoinFiatCurrencyHistoryQuery) OnlyIDX(ctx context.Context) uint32 {
	id, err := cfchq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CoinFiatCurrencyHistories.
func (cfchq *CoinFiatCurrencyHistoryQuery) All(ctx context.Context) ([]*CoinFiatCurrencyHistory, error) {
	ctx = setContextOp(ctx, cfchq.ctx, ent.OpQueryAll)
	if err := cfchq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CoinFiatCurrencyHistory, *CoinFiatCurrencyHistoryQuery]()
	return withInterceptors[[]*CoinFiatCurrencyHistory](ctx, cfchq, qr, cfchq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cfchq *CoinFiatCurrencyHistoryQuery) AllX(ctx context.Context) []*CoinFiatCurrencyHistory {
	nodes, err := cfchq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CoinFiatCurrencyHistory IDs.
func (cfchq *CoinFiatCurrencyHistoryQuery) IDs(ctx context.Context) (ids []uint32, err error) {
	if cfchq.ctx.Unique == nil && cfchq.path != nil {
		cfchq.Unique(true)
	}
	ctx = setContextOp(ctx, cfchq.ctx, ent.OpQueryIDs)
	if err = cfchq.Select(coinfiatcurrencyhistory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cfchq *CoinFiatCurrencyHistoryQuery) IDsX(ctx context.Context) []uint32 {
	ids, err := cfchq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cfchq *CoinFiatCurrencyHistoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cfchq.ctx, ent.OpQueryCount)
	if err := cfchq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cfchq, querierCount[*CoinFiatCurrencyHistoryQuery](), cfchq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cfchq *CoinFiatCurrencyHistoryQuery) CountX(ctx context.Context) int {
	count, err := cfchq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cfchq *CoinFiatCurrencyHistoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cfchq.ctx, ent.OpQueryExist)
	switch _, err := cfchq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cfchq *CoinFiatCurrencyHistoryQuery) ExistX(ctx context.Context) bool {
	exist, err := cfchq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CoinFiatCurrencyHistoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cfchq *CoinFiatCurrencyHistoryQuery) Clone() *CoinFiatCurrencyHistoryQuery {
	if cfchq == nil {
		return nil
	}
	return &CoinFiatCurrencyHistoryQuery{
		config:     cfchq.config,
		ctx:        cfchq.ctx.Clone(),
		order:      append([]coinfiatcurrencyhistory.OrderOption{}, cfchq.order...),
		inters:     append([]Interceptor{}, cfchq.inters...),
		predicates: append([]predicate.CoinFiatCurrencyHistory{}, cfchq.predicates...),
		// clone intermediate query.
		sql:       cfchq.sql.Clone(),
		path:      cfchq.path,
		modifiers: append([]func(*sql.Selector){}, cfchq.modifiers...),
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt uint32 `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CoinFiatCurrencyHistory.Query().
//		GroupBy(coinfiatcurrencyhistory.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (cfchq *CoinFiatCurrencyHistoryQuery) GroupBy(field string, fields ...string) *CoinFiatCurrencyHistoryGroupBy {
	cfchq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CoinFiatCurrencyHistoryGroupBy{build: cfchq}
	grbuild.flds = &cfchq.ctx.Fields
	grbuild.label = coinfiatcurrencyhistory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt uint32 `json:"created_at,omitempty"`
//	}
//
//	client.CoinFiatCurrencyHistory.Query().
//		Select(coinfiatcurrencyhistory.FieldCreatedAt).
//		Scan(ctx, &v)
func (cfchq *CoinFiatCurrencyHistoryQuery) Select(fields ...string) *CoinFiatCurrencyHistorySelect {
	cfchq.ctx.Fields = append(cfchq.ctx.Fields, fields...)
	sbuild := &CoinFiatCurrencyHistorySelect{CoinFiatCurrencyHistoryQuery: cfchq}
	sbuild.label = coinfiatcurrencyhistory.Label
	sbuild.flds, sbuild.scan = &cfchq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CoinFiatCurrencyHistorySelect configured with the given aggregations.
func (cfchq *CoinFiatCurrencyHistoryQuery) Aggregate(fns ...AggregateFunc) *CoinFiatCurrencyHistorySelect {
	return cfchq.Select().Aggregate(fns...)
}

func (cfchq *CoinFiatCurrencyHistoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cfchq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cfchq); err != nil {
				return err
			}
		}
	}
	for _, f := range cfchq.ctx.Fields {
		if !coinfiatcurrencyhistory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if cfchq.path != nil {
		prev, err := cfchq.path(ctx)
		if err != nil {
			return err
		}
		cfchq.sql = prev
	}
	return nil
}

func (cfchq *CoinFiatCurrencyHistoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CoinFiatCurrencyHistory, error) {
	var (
		nodes = []*CoinFiatCurrencyHistory{}
		_spec = cfchq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CoinFiatCurrencyHistory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CoinFiatCurrencyHistory{config: cfchq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(cfchq.modifiers) > 0 {
		_spec.Modifiers = cfchq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cfchq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (cfchq *CoinFiatCurrencyHistoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cfchq.querySpec()
	if len(cfchq.modifiers) > 0 {
		_spec.Modifiers = cfchq.modifiers
	}
	_spec.Node.Columns = cfchq.ctx.Fields
	if len(cfchq.ctx.Fields) > 0 {
		_spec.Unique = cfchq.ctx.Unique != nil && *cfchq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cfchq.driver, _spec)
}

func (cfchq *CoinFiatCurrencyHistoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(coinfiatcurrencyhistory.Table, coinfiatcurrencyhistory.Columns, sqlgraph.NewFieldSpec(coinfiatcurrencyhistory.FieldID, field.TypeUint32))
	_spec.From = cfchq.sql
	if unique := cfchq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cfchq.path != nil {
		_spec.Unique = true
	}
	if fields := cfchq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coinfiatcurrencyhistory.FieldID)
		for i := range fields {
			if fields[i] != coinfiatcurrencyhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cfchq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cfchq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cfchq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cfchq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cfchq *CoinFiatCurrencyHistoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cfchq.driver.Dialect())
	t1 := builder.Table(coinfiatcurrencyhistory.Table)
	columns := cfchq.ctx.Fields
	if len(columns) == 0 {
		columns = coinfiatcurrencyhistory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cfchq.sql != nil {
		selector = cfchq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cfchq.ctx.Unique != nil && *cfchq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range cfchq.modifiers {
		m(selector)
	}
	for _, p := range cfchq.predicates {
		p(selector)
	}
	for _, p := range cfchq.order {
		p(selector)
	}
	if offset := cfchq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cfchq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (cfchq *CoinFiatCurrencyHistoryQuery) ForUpdate(opts ...sql.LockOption) *CoinFiatCurrencyHistoryQuery {
	if cfchq.driver.Dialect() == dialect.Postgres {
		cfchq.Unique(false)
	}
	cfchq.modifiers = append(cfchq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return cfchq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (cfchq *CoinFiatCurrencyHistoryQuery) ForShare(opts ...sql.LockOption) *CoinFiatCurrencyHistoryQuery {
	if cfchq.driver.Dialect() == dialect.Postgres {
		cfchq.Unique(false)
	}
	cfchq.modifiers = append(cfchq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return cfchq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cfchq *CoinFiatCurrencyHistoryQuery) Modify(modifiers ...func(s *sql.Selector)) *CoinFiatCurrencyHistorySelect {
	cfchq.modifiers = append(cfchq.modifiers, modifiers...)
	return cfchq.Select()
}

// CoinFiatCurrencyHistoryGroupBy is the group-by builder for CoinFiatCurrencyHistory entities.
type CoinFiatCurrencyHistoryGroupBy struct {
	selector
	build *CoinFiatCurrencyHistoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cfchgb *CoinFiatCurrencyHistoryGroupBy) Aggregate(fns ...AggregateFunc) *CoinFiatCurrencyHistoryGroupBy {
	cfchgb.fns = append(cfchgb.fns, fns...)
	return cfchgb
}

// Scan applies the selector query and scans the result into the given value.
func (cfchgb *CoinFiatCurrencyHistoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cfchgb.build.ctx, ent.OpQueryGroupBy)
	if err := cfchgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CoinFiatCurrencyHistoryQuery, *CoinFiatCurrencyHistoryGroupBy](ctx, cfchgb.build, cfchgb, cfchgb.build.inters, v)
}

func (cfchgb *CoinFiatCurrencyHistoryGroupBy) sqlScan(ctx context.Context, root *CoinFiatCurrencyHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cfchgb.fns))
	for _, fn := range cfchgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cfchgb.flds)+len(cfchgb.fns))
		for _, f := range *cfchgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cfchgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cfchgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CoinFiatCurrencyHistorySelect is the builder for selecting fields of CoinFiatCurrencyHistory entities.
type CoinFiatCurrencyHistorySelect struct {
	*CoinFiatCurrencyHistoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cfchs *CoinFiatCurrencyHistorySelect) Aggregate(fns ...AggregateFunc) *CoinFiatCurrencyHistorySelect {
	cfchs.fns = append(cfchs.fns, fns...)
	return cfchs
}

// Scan applies the selector query and scans the result into the given value.
func (cfchs *CoinFiatCurrencyHistorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cfchs.ctx, ent.OpQuerySelect)
	if err := cfchs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CoinFiatCurrencyHistoryQuery, *CoinFiatCurrencyHistorySelect](ctx, cfchs.CoinFiatCurrencyHistoryQuery, cfchs, cfchs.inters, v)
}

func (cfchs *CoinFiatCurrencyHistorySelect) sqlScan(ctx context.Context, root *CoinFiatCurrencyHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cfchs.fns))
	for _, fn := range cfchs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cfchs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cfchs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cfchs *CoinFiatCurrencyHistorySelect) Modify(modifiers ...func(s *sql.Selector)) *CoinFiatCurrencyHistorySelect {
	cfchs.modifiers = append(cfchs.modifiers, modifiers...)
	return cfchs
}

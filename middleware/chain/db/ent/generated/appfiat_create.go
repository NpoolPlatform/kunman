// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/appfiat"
	"github.com/google/uuid"
)

// AppFiatCreate is the builder for creating a AppFiat entity.
type AppFiatCreate struct {
	config
	mutation *AppFiatMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (afc *AppFiatCreate) SetCreatedAt(u uint32) *AppFiatCreate {
	afc.mutation.SetCreatedAt(u)
	return afc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (afc *AppFiatCreate) SetNillableCreatedAt(u *uint32) *AppFiatCreate {
	if u != nil {
		afc.SetCreatedAt(*u)
	}
	return afc
}

// SetUpdatedAt sets the "updated_at" field.
func (afc *AppFiatCreate) SetUpdatedAt(u uint32) *AppFiatCreate {
	afc.mutation.SetUpdatedAt(u)
	return afc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (afc *AppFiatCreate) SetNillableUpdatedAt(u *uint32) *AppFiatCreate {
	if u != nil {
		afc.SetUpdatedAt(*u)
	}
	return afc
}

// SetDeletedAt sets the "deleted_at" field.
func (afc *AppFiatCreate) SetDeletedAt(u uint32) *AppFiatCreate {
	afc.mutation.SetDeletedAt(u)
	return afc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (afc *AppFiatCreate) SetNillableDeletedAt(u *uint32) *AppFiatCreate {
	if u != nil {
		afc.SetDeletedAt(*u)
	}
	return afc
}

// SetEntID sets the "ent_id" field.
func (afc *AppFiatCreate) SetEntID(u uuid.UUID) *AppFiatCreate {
	afc.mutation.SetEntID(u)
	return afc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (afc *AppFiatCreate) SetNillableEntID(u *uuid.UUID) *AppFiatCreate {
	if u != nil {
		afc.SetEntID(*u)
	}
	return afc
}

// SetAppID sets the "app_id" field.
func (afc *AppFiatCreate) SetAppID(u uuid.UUID) *AppFiatCreate {
	afc.mutation.SetAppID(u)
	return afc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (afc *AppFiatCreate) SetNillableAppID(u *uuid.UUID) *AppFiatCreate {
	if u != nil {
		afc.SetAppID(*u)
	}
	return afc
}

// SetFiatID sets the "fiat_id" field.
func (afc *AppFiatCreate) SetFiatID(u uuid.UUID) *AppFiatCreate {
	afc.mutation.SetFiatID(u)
	return afc
}

// SetNillableFiatID sets the "fiat_id" field if the given value is not nil.
func (afc *AppFiatCreate) SetNillableFiatID(u *uuid.UUID) *AppFiatCreate {
	if u != nil {
		afc.SetFiatID(*u)
	}
	return afc
}

// SetName sets the "name" field.
func (afc *AppFiatCreate) SetName(s string) *AppFiatCreate {
	afc.mutation.SetName(s)
	return afc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (afc *AppFiatCreate) SetNillableName(s *string) *AppFiatCreate {
	if s != nil {
		afc.SetName(*s)
	}
	return afc
}

// SetDisplayNames sets the "display_names" field.
func (afc *AppFiatCreate) SetDisplayNames(s []string) *AppFiatCreate {
	afc.mutation.SetDisplayNames(s)
	return afc
}

// SetLogo sets the "logo" field.
func (afc *AppFiatCreate) SetLogo(s string) *AppFiatCreate {
	afc.mutation.SetLogo(s)
	return afc
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (afc *AppFiatCreate) SetNillableLogo(s *string) *AppFiatCreate {
	if s != nil {
		afc.SetLogo(*s)
	}
	return afc
}

// SetDisabled sets the "disabled" field.
func (afc *AppFiatCreate) SetDisabled(b bool) *AppFiatCreate {
	afc.mutation.SetDisabled(b)
	return afc
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (afc *AppFiatCreate) SetNillableDisabled(b *bool) *AppFiatCreate {
	if b != nil {
		afc.SetDisabled(*b)
	}
	return afc
}

// SetDisplay sets the "display" field.
func (afc *AppFiatCreate) SetDisplay(b bool) *AppFiatCreate {
	afc.mutation.SetDisplay(b)
	return afc
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (afc *AppFiatCreate) SetNillableDisplay(b *bool) *AppFiatCreate {
	if b != nil {
		afc.SetDisplay(*b)
	}
	return afc
}

// SetDisplayIndex sets the "display_index" field.
func (afc *AppFiatCreate) SetDisplayIndex(u uint32) *AppFiatCreate {
	afc.mutation.SetDisplayIndex(u)
	return afc
}

// SetNillableDisplayIndex sets the "display_index" field if the given value is not nil.
func (afc *AppFiatCreate) SetNillableDisplayIndex(u *uint32) *AppFiatCreate {
	if u != nil {
		afc.SetDisplayIndex(*u)
	}
	return afc
}

// SetID sets the "id" field.
func (afc *AppFiatCreate) SetID(u uint32) *AppFiatCreate {
	afc.mutation.SetID(u)
	return afc
}

// Mutation returns the AppFiatMutation object of the builder.
func (afc *AppFiatCreate) Mutation() *AppFiatMutation {
	return afc.mutation
}

// Save creates the AppFiat in the database.
func (afc *AppFiatCreate) Save(ctx context.Context) (*AppFiat, error) {
	afc.defaults()
	return withHooks(ctx, afc.sqlSave, afc.mutation, afc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (afc *AppFiatCreate) SaveX(ctx context.Context) *AppFiat {
	v, err := afc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (afc *AppFiatCreate) Exec(ctx context.Context) error {
	_, err := afc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (afc *AppFiatCreate) ExecX(ctx context.Context) {
	if err := afc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (afc *AppFiatCreate) defaults() {
	if _, ok := afc.mutation.CreatedAt(); !ok {
		v := appfiat.DefaultCreatedAt()
		afc.mutation.SetCreatedAt(v)
	}
	if _, ok := afc.mutation.UpdatedAt(); !ok {
		v := appfiat.DefaultUpdatedAt()
		afc.mutation.SetUpdatedAt(v)
	}
	if _, ok := afc.mutation.DeletedAt(); !ok {
		v := appfiat.DefaultDeletedAt()
		afc.mutation.SetDeletedAt(v)
	}
	if _, ok := afc.mutation.EntID(); !ok {
		v := appfiat.DefaultEntID()
		afc.mutation.SetEntID(v)
	}
	if _, ok := afc.mutation.AppID(); !ok {
		v := appfiat.DefaultAppID()
		afc.mutation.SetAppID(v)
	}
	if _, ok := afc.mutation.FiatID(); !ok {
		v := appfiat.DefaultFiatID()
		afc.mutation.SetFiatID(v)
	}
	if _, ok := afc.mutation.Name(); !ok {
		v := appfiat.DefaultName
		afc.mutation.SetName(v)
	}
	if _, ok := afc.mutation.DisplayNames(); !ok {
		v := appfiat.DefaultDisplayNames
		afc.mutation.SetDisplayNames(v)
	}
	if _, ok := afc.mutation.Logo(); !ok {
		v := appfiat.DefaultLogo
		afc.mutation.SetLogo(v)
	}
	if _, ok := afc.mutation.Disabled(); !ok {
		v := appfiat.DefaultDisabled
		afc.mutation.SetDisabled(v)
	}
	if _, ok := afc.mutation.Display(); !ok {
		v := appfiat.DefaultDisplay
		afc.mutation.SetDisplay(v)
	}
	if _, ok := afc.mutation.DisplayIndex(); !ok {
		v := appfiat.DefaultDisplayIndex
		afc.mutation.SetDisplayIndex(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (afc *AppFiatCreate) check() error {
	if _, ok := afc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "AppFiat.created_at"`)}
	}
	if _, ok := afc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "AppFiat.updated_at"`)}
	}
	if _, ok := afc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "AppFiat.deleted_at"`)}
	}
	if _, ok := afc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "AppFiat.ent_id"`)}
	}
	return nil
}

func (afc *AppFiatCreate) sqlSave(ctx context.Context) (*AppFiat, error) {
	if err := afc.check(); err != nil {
		return nil, err
	}
	_node, _spec := afc.createSpec()
	if err := sqlgraph.CreateNode(ctx, afc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	afc.mutation.id = &_node.ID
	afc.mutation.done = true
	return _node, nil
}

func (afc *AppFiatCreate) createSpec() (*AppFiat, *sqlgraph.CreateSpec) {
	var (
		_node = &AppFiat{config: afc.config}
		_spec = sqlgraph.NewCreateSpec(appfiat.Table, sqlgraph.NewFieldSpec(appfiat.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = afc.conflict
	if id, ok := afc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := afc.mutation.CreatedAt(); ok {
		_spec.SetField(appfiat.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := afc.mutation.UpdatedAt(); ok {
		_spec.SetField(appfiat.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := afc.mutation.DeletedAt(); ok {
		_spec.SetField(appfiat.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := afc.mutation.EntID(); ok {
		_spec.SetField(appfiat.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := afc.mutation.AppID(); ok {
		_spec.SetField(appfiat.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := afc.mutation.FiatID(); ok {
		_spec.SetField(appfiat.FieldFiatID, field.TypeUUID, value)
		_node.FiatID = value
	}
	if value, ok := afc.mutation.Name(); ok {
		_spec.SetField(appfiat.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := afc.mutation.DisplayNames(); ok {
		_spec.SetField(appfiat.FieldDisplayNames, field.TypeJSON, value)
		_node.DisplayNames = value
	}
	if value, ok := afc.mutation.Logo(); ok {
		_spec.SetField(appfiat.FieldLogo, field.TypeString, value)
		_node.Logo = value
	}
	if value, ok := afc.mutation.Disabled(); ok {
		_spec.SetField(appfiat.FieldDisabled, field.TypeBool, value)
		_node.Disabled = value
	}
	if value, ok := afc.mutation.Display(); ok {
		_spec.SetField(appfiat.FieldDisplay, field.TypeBool, value)
		_node.Display = value
	}
	if value, ok := afc.mutation.DisplayIndex(); ok {
		_spec.SetField(appfiat.FieldDisplayIndex, field.TypeUint32, value)
		_node.DisplayIndex = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppFiat.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppFiatUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (afc *AppFiatCreate) OnConflict(opts ...sql.ConflictOption) *AppFiatUpsertOne {
	afc.conflict = opts
	return &AppFiatUpsertOne{
		create: afc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppFiat.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (afc *AppFiatCreate) OnConflictColumns(columns ...string) *AppFiatUpsertOne {
	afc.conflict = append(afc.conflict, sql.ConflictColumns(columns...))
	return &AppFiatUpsertOne{
		create: afc,
	}
}

type (
	// AppFiatUpsertOne is the builder for "upsert"-ing
	//  one AppFiat node.
	AppFiatUpsertOne struct {
		create *AppFiatCreate
	}

	// AppFiatUpsert is the "OnConflict" setter.
	AppFiatUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *AppFiatUpsert) SetCreatedAt(v uint32) *AppFiatUpsert {
	u.Set(appfiat.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppFiatUpsert) UpdateCreatedAt() *AppFiatUpsert {
	u.SetExcluded(appfiat.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppFiatUpsert) AddCreatedAt(v uint32) *AppFiatUpsert {
	u.Add(appfiat.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppFiatUpsert) SetUpdatedAt(v uint32) *AppFiatUpsert {
	u.Set(appfiat.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppFiatUpsert) UpdateUpdatedAt() *AppFiatUpsert {
	u.SetExcluded(appfiat.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppFiatUpsert) AddUpdatedAt(v uint32) *AppFiatUpsert {
	u.Add(appfiat.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppFiatUpsert) SetDeletedAt(v uint32) *AppFiatUpsert {
	u.Set(appfiat.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppFiatUpsert) UpdateDeletedAt() *AppFiatUpsert {
	u.SetExcluded(appfiat.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppFiatUpsert) AddDeletedAt(v uint32) *AppFiatUpsert {
	u.Add(appfiat.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppFiatUpsert) SetEntID(v uuid.UUID) *AppFiatUpsert {
	u.Set(appfiat.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppFiatUpsert) UpdateEntID() *AppFiatUpsert {
	u.SetExcluded(appfiat.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppFiatUpsert) SetAppID(v uuid.UUID) *AppFiatUpsert {
	u.Set(appfiat.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppFiatUpsert) UpdateAppID() *AppFiatUpsert {
	u.SetExcluded(appfiat.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppFiatUpsert) ClearAppID() *AppFiatUpsert {
	u.SetNull(appfiat.FieldAppID)
	return u
}

// SetFiatID sets the "fiat_id" field.
func (u *AppFiatUpsert) SetFiatID(v uuid.UUID) *AppFiatUpsert {
	u.Set(appfiat.FieldFiatID, v)
	return u
}

// UpdateFiatID sets the "fiat_id" field to the value that was provided on create.
func (u *AppFiatUpsert) UpdateFiatID() *AppFiatUpsert {
	u.SetExcluded(appfiat.FieldFiatID)
	return u
}

// ClearFiatID clears the value of the "fiat_id" field.
func (u *AppFiatUpsert) ClearFiatID() *AppFiatUpsert {
	u.SetNull(appfiat.FieldFiatID)
	return u
}

// SetName sets the "name" field.
func (u *AppFiatUpsert) SetName(v string) *AppFiatUpsert {
	u.Set(appfiat.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppFiatUpsert) UpdateName() *AppFiatUpsert {
	u.SetExcluded(appfiat.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *AppFiatUpsert) ClearName() *AppFiatUpsert {
	u.SetNull(appfiat.FieldName)
	return u
}

// SetDisplayNames sets the "display_names" field.
func (u *AppFiatUpsert) SetDisplayNames(v []string) *AppFiatUpsert {
	u.Set(appfiat.FieldDisplayNames, v)
	return u
}

// UpdateDisplayNames sets the "display_names" field to the value that was provided on create.
func (u *AppFiatUpsert) UpdateDisplayNames() *AppFiatUpsert {
	u.SetExcluded(appfiat.FieldDisplayNames)
	return u
}

// ClearDisplayNames clears the value of the "display_names" field.
func (u *AppFiatUpsert) ClearDisplayNames() *AppFiatUpsert {
	u.SetNull(appfiat.FieldDisplayNames)
	return u
}

// SetLogo sets the "logo" field.
func (u *AppFiatUpsert) SetLogo(v string) *AppFiatUpsert {
	u.Set(appfiat.FieldLogo, v)
	return u
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *AppFiatUpsert) UpdateLogo() *AppFiatUpsert {
	u.SetExcluded(appfiat.FieldLogo)
	return u
}

// ClearLogo clears the value of the "logo" field.
func (u *AppFiatUpsert) ClearLogo() *AppFiatUpsert {
	u.SetNull(appfiat.FieldLogo)
	return u
}

// SetDisabled sets the "disabled" field.
func (u *AppFiatUpsert) SetDisabled(v bool) *AppFiatUpsert {
	u.Set(appfiat.FieldDisabled, v)
	return u
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *AppFiatUpsert) UpdateDisabled() *AppFiatUpsert {
	u.SetExcluded(appfiat.FieldDisabled)
	return u
}

// ClearDisabled clears the value of the "disabled" field.
func (u *AppFiatUpsert) ClearDisabled() *AppFiatUpsert {
	u.SetNull(appfiat.FieldDisabled)
	return u
}

// SetDisplay sets the "display" field.
func (u *AppFiatUpsert) SetDisplay(v bool) *AppFiatUpsert {
	u.Set(appfiat.FieldDisplay, v)
	return u
}

// UpdateDisplay sets the "display" field to the value that was provided on create.
func (u *AppFiatUpsert) UpdateDisplay() *AppFiatUpsert {
	u.SetExcluded(appfiat.FieldDisplay)
	return u
}

// ClearDisplay clears the value of the "display" field.
func (u *AppFiatUpsert) ClearDisplay() *AppFiatUpsert {
	u.SetNull(appfiat.FieldDisplay)
	return u
}

// SetDisplayIndex sets the "display_index" field.
func (u *AppFiatUpsert) SetDisplayIndex(v uint32) *AppFiatUpsert {
	u.Set(appfiat.FieldDisplayIndex, v)
	return u
}

// UpdateDisplayIndex sets the "display_index" field to the value that was provided on create.
func (u *AppFiatUpsert) UpdateDisplayIndex() *AppFiatUpsert {
	u.SetExcluded(appfiat.FieldDisplayIndex)
	return u
}

// AddDisplayIndex adds v to the "display_index" field.
func (u *AppFiatUpsert) AddDisplayIndex(v uint32) *AppFiatUpsert {
	u.Add(appfiat.FieldDisplayIndex, v)
	return u
}

// ClearDisplayIndex clears the value of the "display_index" field.
func (u *AppFiatUpsert) ClearDisplayIndex() *AppFiatUpsert {
	u.SetNull(appfiat.FieldDisplayIndex)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppFiat.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appfiat.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppFiatUpsertOne) UpdateNewValues() *AppFiatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appfiat.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppFiat.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppFiatUpsertOne) Ignore() *AppFiatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppFiatUpsertOne) DoNothing() *AppFiatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppFiatCreate.OnConflict
// documentation for more info.
func (u *AppFiatUpsertOne) Update(set func(*AppFiatUpsert)) *AppFiatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppFiatUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppFiatUpsertOne) SetCreatedAt(v uint32) *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppFiatUpsertOne) AddCreatedAt(v uint32) *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppFiatUpsertOne) UpdateCreatedAt() *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppFiatUpsertOne) SetUpdatedAt(v uint32) *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppFiatUpsertOne) AddUpdatedAt(v uint32) *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppFiatUpsertOne) UpdateUpdatedAt() *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppFiatUpsertOne) SetDeletedAt(v uint32) *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppFiatUpsertOne) AddDeletedAt(v uint32) *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppFiatUpsertOne) UpdateDeletedAt() *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *AppFiatUpsertOne) SetEntID(v uuid.UUID) *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppFiatUpsertOne) UpdateEntID() *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppFiatUpsertOne) SetAppID(v uuid.UUID) *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppFiatUpsertOne) UpdateAppID() *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppFiatUpsertOne) ClearAppID() *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.ClearAppID()
	})
}

// SetFiatID sets the "fiat_id" field.
func (u *AppFiatUpsertOne) SetFiatID(v uuid.UUID) *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.SetFiatID(v)
	})
}

// UpdateFiatID sets the "fiat_id" field to the value that was provided on create.
func (u *AppFiatUpsertOne) UpdateFiatID() *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.UpdateFiatID()
	})
}

// ClearFiatID clears the value of the "fiat_id" field.
func (u *AppFiatUpsertOne) ClearFiatID() *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.ClearFiatID()
	})
}

// SetName sets the "name" field.
func (u *AppFiatUpsertOne) SetName(v string) *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppFiatUpsertOne) UpdateName() *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *AppFiatUpsertOne) ClearName() *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.ClearName()
	})
}

// SetDisplayNames sets the "display_names" field.
func (u *AppFiatUpsertOne) SetDisplayNames(v []string) *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.SetDisplayNames(v)
	})
}

// UpdateDisplayNames sets the "display_names" field to the value that was provided on create.
func (u *AppFiatUpsertOne) UpdateDisplayNames() *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.UpdateDisplayNames()
	})
}

// ClearDisplayNames clears the value of the "display_names" field.
func (u *AppFiatUpsertOne) ClearDisplayNames() *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.ClearDisplayNames()
	})
}

// SetLogo sets the "logo" field.
func (u *AppFiatUpsertOne) SetLogo(v string) *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.SetLogo(v)
	})
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *AppFiatUpsertOne) UpdateLogo() *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.UpdateLogo()
	})
}

// ClearLogo clears the value of the "logo" field.
func (u *AppFiatUpsertOne) ClearLogo() *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.ClearLogo()
	})
}

// SetDisabled sets the "disabled" field.
func (u *AppFiatUpsertOne) SetDisabled(v bool) *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.SetDisabled(v)
	})
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *AppFiatUpsertOne) UpdateDisabled() *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.UpdateDisabled()
	})
}

// ClearDisabled clears the value of the "disabled" field.
func (u *AppFiatUpsertOne) ClearDisabled() *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.ClearDisabled()
	})
}

// SetDisplay sets the "display" field.
func (u *AppFiatUpsertOne) SetDisplay(v bool) *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.SetDisplay(v)
	})
}

// UpdateDisplay sets the "display" field to the value that was provided on create.
func (u *AppFiatUpsertOne) UpdateDisplay() *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.UpdateDisplay()
	})
}

// ClearDisplay clears the value of the "display" field.
func (u *AppFiatUpsertOne) ClearDisplay() *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.ClearDisplay()
	})
}

// SetDisplayIndex sets the "display_index" field.
func (u *AppFiatUpsertOne) SetDisplayIndex(v uint32) *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.SetDisplayIndex(v)
	})
}

// AddDisplayIndex adds v to the "display_index" field.
func (u *AppFiatUpsertOne) AddDisplayIndex(v uint32) *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.AddDisplayIndex(v)
	})
}

// UpdateDisplayIndex sets the "display_index" field to the value that was provided on create.
func (u *AppFiatUpsertOne) UpdateDisplayIndex() *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.UpdateDisplayIndex()
	})
}

// ClearDisplayIndex clears the value of the "display_index" field.
func (u *AppFiatUpsertOne) ClearDisplayIndex() *AppFiatUpsertOne {
	return u.Update(func(s *AppFiatUpsert) {
		s.ClearDisplayIndex()
	})
}

// Exec executes the query.
func (u *AppFiatUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppFiatCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppFiatUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppFiatUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppFiatUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppFiatCreateBulk is the builder for creating many AppFiat entities in bulk.
type AppFiatCreateBulk struct {
	config
	err      error
	builders []*AppFiatCreate
	conflict []sql.ConflictOption
}

// Save creates the AppFiat entities in the database.
func (afcb *AppFiatCreateBulk) Save(ctx context.Context) ([]*AppFiat, error) {
	if afcb.err != nil {
		return nil, afcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(afcb.builders))
	nodes := make([]*AppFiat, len(afcb.builders))
	mutators := make([]Mutator, len(afcb.builders))
	for i := range afcb.builders {
		func(i int, root context.Context) {
			builder := afcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppFiatMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, afcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = afcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, afcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, afcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (afcb *AppFiatCreateBulk) SaveX(ctx context.Context) []*AppFiat {
	v, err := afcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (afcb *AppFiatCreateBulk) Exec(ctx context.Context) error {
	_, err := afcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (afcb *AppFiatCreateBulk) ExecX(ctx context.Context) {
	if err := afcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppFiat.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppFiatUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (afcb *AppFiatCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppFiatUpsertBulk {
	afcb.conflict = opts
	return &AppFiatUpsertBulk{
		create: afcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppFiat.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (afcb *AppFiatCreateBulk) OnConflictColumns(columns ...string) *AppFiatUpsertBulk {
	afcb.conflict = append(afcb.conflict, sql.ConflictColumns(columns...))
	return &AppFiatUpsertBulk{
		create: afcb,
	}
}

// AppFiatUpsertBulk is the builder for "upsert"-ing
// a bulk of AppFiat nodes.
type AppFiatUpsertBulk struct {
	create *AppFiatCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppFiat.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appfiat.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppFiatUpsertBulk) UpdateNewValues() *AppFiatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appfiat.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppFiat.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppFiatUpsertBulk) Ignore() *AppFiatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppFiatUpsertBulk) DoNothing() *AppFiatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppFiatCreateBulk.OnConflict
// documentation for more info.
func (u *AppFiatUpsertBulk) Update(set func(*AppFiatUpsert)) *AppFiatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppFiatUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppFiatUpsertBulk) SetCreatedAt(v uint32) *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppFiatUpsertBulk) AddCreatedAt(v uint32) *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppFiatUpsertBulk) UpdateCreatedAt() *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppFiatUpsertBulk) SetUpdatedAt(v uint32) *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppFiatUpsertBulk) AddUpdatedAt(v uint32) *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppFiatUpsertBulk) UpdateUpdatedAt() *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppFiatUpsertBulk) SetDeletedAt(v uint32) *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppFiatUpsertBulk) AddDeletedAt(v uint32) *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppFiatUpsertBulk) UpdateDeletedAt() *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *AppFiatUpsertBulk) SetEntID(v uuid.UUID) *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppFiatUpsertBulk) UpdateEntID() *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppFiatUpsertBulk) SetAppID(v uuid.UUID) *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppFiatUpsertBulk) UpdateAppID() *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppFiatUpsertBulk) ClearAppID() *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.ClearAppID()
	})
}

// SetFiatID sets the "fiat_id" field.
func (u *AppFiatUpsertBulk) SetFiatID(v uuid.UUID) *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.SetFiatID(v)
	})
}

// UpdateFiatID sets the "fiat_id" field to the value that was provided on create.
func (u *AppFiatUpsertBulk) UpdateFiatID() *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.UpdateFiatID()
	})
}

// ClearFiatID clears the value of the "fiat_id" field.
func (u *AppFiatUpsertBulk) ClearFiatID() *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.ClearFiatID()
	})
}

// SetName sets the "name" field.
func (u *AppFiatUpsertBulk) SetName(v string) *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppFiatUpsertBulk) UpdateName() *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *AppFiatUpsertBulk) ClearName() *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.ClearName()
	})
}

// SetDisplayNames sets the "display_names" field.
func (u *AppFiatUpsertBulk) SetDisplayNames(v []string) *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.SetDisplayNames(v)
	})
}

// UpdateDisplayNames sets the "display_names" field to the value that was provided on create.
func (u *AppFiatUpsertBulk) UpdateDisplayNames() *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.UpdateDisplayNames()
	})
}

// ClearDisplayNames clears the value of the "display_names" field.
func (u *AppFiatUpsertBulk) ClearDisplayNames() *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.ClearDisplayNames()
	})
}

// SetLogo sets the "logo" field.
func (u *AppFiatUpsertBulk) SetLogo(v string) *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.SetLogo(v)
	})
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *AppFiatUpsertBulk) UpdateLogo() *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.UpdateLogo()
	})
}

// ClearLogo clears the value of the "logo" field.
func (u *AppFiatUpsertBulk) ClearLogo() *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.ClearLogo()
	})
}

// SetDisabled sets the "disabled" field.
func (u *AppFiatUpsertBulk) SetDisabled(v bool) *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.SetDisabled(v)
	})
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *AppFiatUpsertBulk) UpdateDisabled() *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.UpdateDisabled()
	})
}

// ClearDisabled clears the value of the "disabled" field.
func (u *AppFiatUpsertBulk) ClearDisabled() *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.ClearDisabled()
	})
}

// SetDisplay sets the "display" field.
func (u *AppFiatUpsertBulk) SetDisplay(v bool) *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.SetDisplay(v)
	})
}

// UpdateDisplay sets the "display" field to the value that was provided on create.
func (u *AppFiatUpsertBulk) UpdateDisplay() *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.UpdateDisplay()
	})
}

// ClearDisplay clears the value of the "display" field.
func (u *AppFiatUpsertBulk) ClearDisplay() *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.ClearDisplay()
	})
}

// SetDisplayIndex sets the "display_index" field.
func (u *AppFiatUpsertBulk) SetDisplayIndex(v uint32) *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.SetDisplayIndex(v)
	})
}

// AddDisplayIndex adds v to the "display_index" field.
func (u *AppFiatUpsertBulk) AddDisplayIndex(v uint32) *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.AddDisplayIndex(v)
	})
}

// UpdateDisplayIndex sets the "display_index" field to the value that was provided on create.
func (u *AppFiatUpsertBulk) UpdateDisplayIndex() *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.UpdateDisplayIndex()
	})
}

// ClearDisplayIndex clears the value of the "display_index" field.
func (u *AppFiatUpsertBulk) ClearDisplayIndex() *AppFiatUpsertBulk {
	return u.Update(func(s *AppFiatUpsert) {
		s.ClearDisplayIndex()
	})
}

// Exec executes the query.
func (u *AppFiatUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the AppFiatCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppFiatCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppFiatUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated"
)

// The AppCoinFunc type is an adapter to allow the use of ordinary
// function as AppCoin mutator.
type AppCoinFunc func(context.Context, *generated.AppCoinMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f AppCoinFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.AppCoinMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.AppCoinMutation", m)
}

// The ChainBaseFunc type is an adapter to allow the use of ordinary
// function as ChainBase mutator.
type ChainBaseFunc func(context.Context, *generated.ChainBaseMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f ChainBaseFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.ChainBaseMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.ChainBaseMutation", m)
}

// The CoinBaseFunc type is an adapter to allow the use of ordinary
// function as CoinBase mutator.
type CoinBaseFunc func(context.Context, *generated.CoinBaseMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f CoinBaseFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.CoinBaseMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.CoinBaseMutation", m)
}

// The CoinDescriptionFunc type is an adapter to allow the use of ordinary
// function as CoinDescription mutator.
type CoinDescriptionFunc func(context.Context, *generated.CoinDescriptionMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f CoinDescriptionFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.CoinDescriptionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.CoinDescriptionMutation", m)
}

// The CoinExtraFunc type is an adapter to allow the use of ordinary
// function as CoinExtra mutator.
type CoinExtraFunc func(context.Context, *generated.CoinExtraMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f CoinExtraFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.CoinExtraMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.CoinExtraMutation", m)
}

// The CoinFiatFunc type is an adapter to allow the use of ordinary
// function as CoinFiat mutator.
type CoinFiatFunc func(context.Context, *generated.CoinFiatMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f CoinFiatFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.CoinFiatMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.CoinFiatMutation", m)
}

// The CoinFiatCurrencyFunc type is an adapter to allow the use of ordinary
// function as CoinFiatCurrency mutator.
type CoinFiatCurrencyFunc func(context.Context, *generated.CoinFiatCurrencyMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f CoinFiatCurrencyFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.CoinFiatCurrencyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.CoinFiatCurrencyMutation", m)
}

// The CoinFiatCurrencyHistoryFunc type is an adapter to allow the use of ordinary
// function as CoinFiatCurrencyHistory mutator.
type CoinFiatCurrencyHistoryFunc func(context.Context, *generated.CoinFiatCurrencyHistoryMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f CoinFiatCurrencyHistoryFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.CoinFiatCurrencyHistoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.CoinFiatCurrencyHistoryMutation", m)
}

// The CoinUsedForFunc type is an adapter to allow the use of ordinary
// function as CoinUsedFor mutator.
type CoinUsedForFunc func(context.Context, *generated.CoinUsedForMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f CoinUsedForFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.CoinUsedForMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.CoinUsedForMutation", m)
}

// The CurrencyFunc type is an adapter to allow the use of ordinary
// function as Currency mutator.
type CurrencyFunc func(context.Context, *generated.CurrencyMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f CurrencyFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.CurrencyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.CurrencyMutation", m)
}

// The CurrencyFeedFunc type is an adapter to allow the use of ordinary
// function as CurrencyFeed mutator.
type CurrencyFeedFunc func(context.Context, *generated.CurrencyFeedMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f CurrencyFeedFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.CurrencyFeedMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.CurrencyFeedMutation", m)
}

// The CurrencyHistoryFunc type is an adapter to allow the use of ordinary
// function as CurrencyHistory mutator.
type CurrencyHistoryFunc func(context.Context, *generated.CurrencyHistoryMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f CurrencyHistoryFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.CurrencyHistoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.CurrencyHistoryMutation", m)
}

// The ExchangeRateFunc type is an adapter to allow the use of ordinary
// function as ExchangeRate mutator.
type ExchangeRateFunc func(context.Context, *generated.ExchangeRateMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f ExchangeRateFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.ExchangeRateMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.ExchangeRateMutation", m)
}

// The FiatFunc type is an adapter to allow the use of ordinary
// function as Fiat mutator.
type FiatFunc func(context.Context, *generated.FiatMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f FiatFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.FiatMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.FiatMutation", m)
}

// The FiatCurrencyFunc type is an adapter to allow the use of ordinary
// function as FiatCurrency mutator.
type FiatCurrencyFunc func(context.Context, *generated.FiatCurrencyMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f FiatCurrencyFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.FiatCurrencyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.FiatCurrencyMutation", m)
}

// The FiatCurrencyFeedFunc type is an adapter to allow the use of ordinary
// function as FiatCurrencyFeed mutator.
type FiatCurrencyFeedFunc func(context.Context, *generated.FiatCurrencyFeedMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f FiatCurrencyFeedFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.FiatCurrencyFeedMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.FiatCurrencyFeedMutation", m)
}

// The FiatCurrencyHistoryFunc type is an adapter to allow the use of ordinary
// function as FiatCurrencyHistory mutator.
type FiatCurrencyHistoryFunc func(context.Context, *generated.FiatCurrencyHistoryMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f FiatCurrencyHistoryFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.FiatCurrencyHistoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.FiatCurrencyHistoryMutation", m)
}

// The SettingFunc type is an adapter to allow the use of ordinary
// function as Setting mutator.
type SettingFunc func(context.Context, *generated.SettingMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f SettingFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.SettingMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.SettingMutation", m)
}

// The TranFunc type is an adapter to allow the use of ordinary
// function as Tran mutator.
type TranFunc func(context.Context, *generated.TranMutation) (generated.Value, error)

// Mutate calls f(ctx, m).
func (f TranFunc) Mutate(ctx context.Context, m generated.Mutation) (generated.Value, error) {
	if mv, ok := m.(*generated.TranMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *generated.TranMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, generated.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m generated.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m generated.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m generated.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op generated.Op) Condition {
	return func(_ context.Context, m generated.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m generated.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m generated.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m generated.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk generated.Hook, cond Condition) generated.Hook {
	return func(next generated.Mutator) generated.Mutator {
		return generated.MutateFunc(func(ctx context.Context, m generated.Mutation) (generated.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, generated.Delete|generated.Create)
func On(hk generated.Hook, op generated.Op) generated.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, generated.Update|generated.UpdateOne)
func Unless(hk generated.Hook, op generated.Op) generated.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) generated.Hook {
	return func(generated.Mutator) generated.Mutator {
		return generated.MutateFunc(func(context.Context, generated.Mutation) (generated.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []generated.Hook {
//		return []generated.Hook{
//			Reject(generated.Delete|generated.Update),
//		}
//	}
func Reject(op generated.Op) generated.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []generated.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...generated.Hook) Chain {
	return Chain{append([]generated.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() generated.Hook {
	return func(mutator generated.Mutator) generated.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...generated.Hook) Chain {
	newHooks := make([]generated.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}

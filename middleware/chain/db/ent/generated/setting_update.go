// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/setting"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// SettingUpdate is the builder for updating Setting entities.
type SettingUpdate struct {
	config
	hooks     []Hook
	mutation  *SettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SettingUpdate builder.
func (su *SettingUpdate) Where(ps ...predicate.Setting) *SettingUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *SettingUpdate) SetCreatedAt(u uint32) *SettingUpdate {
	su.mutation.ResetCreatedAt()
	su.mutation.SetCreatedAt(u)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *SettingUpdate) SetNillableCreatedAt(u *uint32) *SettingUpdate {
	if u != nil {
		su.SetCreatedAt(*u)
	}
	return su
}

// AddCreatedAt adds u to the "created_at" field.
func (su *SettingUpdate) AddCreatedAt(u int32) *SettingUpdate {
	su.mutation.AddCreatedAt(u)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SettingUpdate) SetUpdatedAt(u uint32) *SettingUpdate {
	su.mutation.ResetUpdatedAt()
	su.mutation.SetUpdatedAt(u)
	return su
}

// AddUpdatedAt adds u to the "updated_at" field.
func (su *SettingUpdate) AddUpdatedAt(u int32) *SettingUpdate {
	su.mutation.AddUpdatedAt(u)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *SettingUpdate) SetDeletedAt(u uint32) *SettingUpdate {
	su.mutation.ResetDeletedAt()
	su.mutation.SetDeletedAt(u)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *SettingUpdate) SetNillableDeletedAt(u *uint32) *SettingUpdate {
	if u != nil {
		su.SetDeletedAt(*u)
	}
	return su
}

// AddDeletedAt adds u to the "deleted_at" field.
func (su *SettingUpdate) AddDeletedAt(u int32) *SettingUpdate {
	su.mutation.AddDeletedAt(u)
	return su
}

// SetEntID sets the "ent_id" field.
func (su *SettingUpdate) SetEntID(u uuid.UUID) *SettingUpdate {
	su.mutation.SetEntID(u)
	return su
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (su *SettingUpdate) SetNillableEntID(u *uuid.UUID) *SettingUpdate {
	if u != nil {
		su.SetEntID(*u)
	}
	return su
}

// SetCoinTypeID sets the "coin_type_id" field.
func (su *SettingUpdate) SetCoinTypeID(u uuid.UUID) *SettingUpdate {
	su.mutation.SetCoinTypeID(u)
	return su
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (su *SettingUpdate) SetNillableCoinTypeID(u *uuid.UUID) *SettingUpdate {
	if u != nil {
		su.SetCoinTypeID(*u)
	}
	return su
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (su *SettingUpdate) ClearCoinTypeID() *SettingUpdate {
	su.mutation.ClearCoinTypeID()
	return su
}

// SetFeeCoinTypeID sets the "fee_coin_type_id" field.
func (su *SettingUpdate) SetFeeCoinTypeID(u uuid.UUID) *SettingUpdate {
	su.mutation.SetFeeCoinTypeID(u)
	return su
}

// SetNillableFeeCoinTypeID sets the "fee_coin_type_id" field if the given value is not nil.
func (su *SettingUpdate) SetNillableFeeCoinTypeID(u *uuid.UUID) *SettingUpdate {
	if u != nil {
		su.SetFeeCoinTypeID(*u)
	}
	return su
}

// ClearFeeCoinTypeID clears the value of the "fee_coin_type_id" field.
func (su *SettingUpdate) ClearFeeCoinTypeID() *SettingUpdate {
	su.mutation.ClearFeeCoinTypeID()
	return su
}

// SetWithdrawFeeByStableUsd sets the "withdraw_fee_by_stable_usd" field.
func (su *SettingUpdate) SetWithdrawFeeByStableUsd(b bool) *SettingUpdate {
	su.mutation.SetWithdrawFeeByStableUsd(b)
	return su
}

// SetNillableWithdrawFeeByStableUsd sets the "withdraw_fee_by_stable_usd" field if the given value is not nil.
func (su *SettingUpdate) SetNillableWithdrawFeeByStableUsd(b *bool) *SettingUpdate {
	if b != nil {
		su.SetWithdrawFeeByStableUsd(*b)
	}
	return su
}

// ClearWithdrawFeeByStableUsd clears the value of the "withdraw_fee_by_stable_usd" field.
func (su *SettingUpdate) ClearWithdrawFeeByStableUsd() *SettingUpdate {
	su.mutation.ClearWithdrawFeeByStableUsd()
	return su
}

// SetWithdrawFeeAmount sets the "withdraw_fee_amount" field.
func (su *SettingUpdate) SetWithdrawFeeAmount(d decimal.Decimal) *SettingUpdate {
	su.mutation.SetWithdrawFeeAmount(d)
	return su
}

// SetNillableWithdrawFeeAmount sets the "withdraw_fee_amount" field if the given value is not nil.
func (su *SettingUpdate) SetNillableWithdrawFeeAmount(d *decimal.Decimal) *SettingUpdate {
	if d != nil {
		su.SetWithdrawFeeAmount(*d)
	}
	return su
}

// ClearWithdrawFeeAmount clears the value of the "withdraw_fee_amount" field.
func (su *SettingUpdate) ClearWithdrawFeeAmount() *SettingUpdate {
	su.mutation.ClearWithdrawFeeAmount()
	return su
}

// SetCollectFeeAmount sets the "collect_fee_amount" field.
func (su *SettingUpdate) SetCollectFeeAmount(d decimal.Decimal) *SettingUpdate {
	su.mutation.SetCollectFeeAmount(d)
	return su
}

// SetNillableCollectFeeAmount sets the "collect_fee_amount" field if the given value is not nil.
func (su *SettingUpdate) SetNillableCollectFeeAmount(d *decimal.Decimal) *SettingUpdate {
	if d != nil {
		su.SetCollectFeeAmount(*d)
	}
	return su
}

// ClearCollectFeeAmount clears the value of the "collect_fee_amount" field.
func (su *SettingUpdate) ClearCollectFeeAmount() *SettingUpdate {
	su.mutation.ClearCollectFeeAmount()
	return su
}

// SetHotWalletFeeAmount sets the "hot_wallet_fee_amount" field.
func (su *SettingUpdate) SetHotWalletFeeAmount(d decimal.Decimal) *SettingUpdate {
	su.mutation.SetHotWalletFeeAmount(d)
	return su
}

// SetNillableHotWalletFeeAmount sets the "hot_wallet_fee_amount" field if the given value is not nil.
func (su *SettingUpdate) SetNillableHotWalletFeeAmount(d *decimal.Decimal) *SettingUpdate {
	if d != nil {
		su.SetHotWalletFeeAmount(*d)
	}
	return su
}

// ClearHotWalletFeeAmount clears the value of the "hot_wallet_fee_amount" field.
func (su *SettingUpdate) ClearHotWalletFeeAmount() *SettingUpdate {
	su.mutation.ClearHotWalletFeeAmount()
	return su
}

// SetLowFeeAmount sets the "low_fee_amount" field.
func (su *SettingUpdate) SetLowFeeAmount(d decimal.Decimal) *SettingUpdate {
	su.mutation.SetLowFeeAmount(d)
	return su
}

// SetNillableLowFeeAmount sets the "low_fee_amount" field if the given value is not nil.
func (su *SettingUpdate) SetNillableLowFeeAmount(d *decimal.Decimal) *SettingUpdate {
	if d != nil {
		su.SetLowFeeAmount(*d)
	}
	return su
}

// ClearLowFeeAmount clears the value of the "low_fee_amount" field.
func (su *SettingUpdate) ClearLowFeeAmount() *SettingUpdate {
	su.mutation.ClearLowFeeAmount()
	return su
}

// SetHotLowFeeAmount sets the "hot_low_fee_amount" field.
func (su *SettingUpdate) SetHotLowFeeAmount(d decimal.Decimal) *SettingUpdate {
	su.mutation.SetHotLowFeeAmount(d)
	return su
}

// SetNillableHotLowFeeAmount sets the "hot_low_fee_amount" field if the given value is not nil.
func (su *SettingUpdate) SetNillableHotLowFeeAmount(d *decimal.Decimal) *SettingUpdate {
	if d != nil {
		su.SetHotLowFeeAmount(*d)
	}
	return su
}

// ClearHotLowFeeAmount clears the value of the "hot_low_fee_amount" field.
func (su *SettingUpdate) ClearHotLowFeeAmount() *SettingUpdate {
	su.mutation.ClearHotLowFeeAmount()
	return su
}

// SetHotWalletAccountAmount sets the "hot_wallet_account_amount" field.
func (su *SettingUpdate) SetHotWalletAccountAmount(d decimal.Decimal) *SettingUpdate {
	su.mutation.SetHotWalletAccountAmount(d)
	return su
}

// SetNillableHotWalletAccountAmount sets the "hot_wallet_account_amount" field if the given value is not nil.
func (su *SettingUpdate) SetNillableHotWalletAccountAmount(d *decimal.Decimal) *SettingUpdate {
	if d != nil {
		su.SetHotWalletAccountAmount(*d)
	}
	return su
}

// ClearHotWalletAccountAmount clears the value of the "hot_wallet_account_amount" field.
func (su *SettingUpdate) ClearHotWalletAccountAmount() *SettingUpdate {
	su.mutation.ClearHotWalletAccountAmount()
	return su
}

// SetPaymentAccountCollectAmount sets the "payment_account_collect_amount" field.
func (su *SettingUpdate) SetPaymentAccountCollectAmount(d decimal.Decimal) *SettingUpdate {
	su.mutation.SetPaymentAccountCollectAmount(d)
	return su
}

// SetNillablePaymentAccountCollectAmount sets the "payment_account_collect_amount" field if the given value is not nil.
func (su *SettingUpdate) SetNillablePaymentAccountCollectAmount(d *decimal.Decimal) *SettingUpdate {
	if d != nil {
		su.SetPaymentAccountCollectAmount(*d)
	}
	return su
}

// ClearPaymentAccountCollectAmount clears the value of the "payment_account_collect_amount" field.
func (su *SettingUpdate) ClearPaymentAccountCollectAmount() *SettingUpdate {
	su.mutation.ClearPaymentAccountCollectAmount()
	return su
}

// SetLeastTransferAmount sets the "least_transfer_amount" field.
func (su *SettingUpdate) SetLeastTransferAmount(d decimal.Decimal) *SettingUpdate {
	su.mutation.SetLeastTransferAmount(d)
	return su
}

// SetNillableLeastTransferAmount sets the "least_transfer_amount" field if the given value is not nil.
func (su *SettingUpdate) SetNillableLeastTransferAmount(d *decimal.Decimal) *SettingUpdate {
	if d != nil {
		su.SetLeastTransferAmount(*d)
	}
	return su
}

// ClearLeastTransferAmount clears the value of the "least_transfer_amount" field.
func (su *SettingUpdate) ClearLeastTransferAmount() *SettingUpdate {
	su.mutation.ClearLeastTransferAmount()
	return su
}

// SetNeedMemo sets the "need_memo" field.
func (su *SettingUpdate) SetNeedMemo(b bool) *SettingUpdate {
	su.mutation.SetNeedMemo(b)
	return su
}

// SetNillableNeedMemo sets the "need_memo" field if the given value is not nil.
func (su *SettingUpdate) SetNillableNeedMemo(b *bool) *SettingUpdate {
	if b != nil {
		su.SetNeedMemo(*b)
	}
	return su
}

// ClearNeedMemo clears the value of the "need_memo" field.
func (su *SettingUpdate) ClearNeedMemo() *SettingUpdate {
	su.mutation.ClearNeedMemo()
	return su
}

// SetRefreshCurrency sets the "refresh_currency" field.
func (su *SettingUpdate) SetRefreshCurrency(b bool) *SettingUpdate {
	su.mutation.SetRefreshCurrency(b)
	return su
}

// SetNillableRefreshCurrency sets the "refresh_currency" field if the given value is not nil.
func (su *SettingUpdate) SetNillableRefreshCurrency(b *bool) *SettingUpdate {
	if b != nil {
		su.SetRefreshCurrency(*b)
	}
	return su
}

// ClearRefreshCurrency clears the value of the "refresh_currency" field.
func (su *SettingUpdate) ClearRefreshCurrency() *SettingUpdate {
	su.mutation.ClearRefreshCurrency()
	return su
}

// SetCheckNewAddressBalance sets the "check_new_address_balance" field.
func (su *SettingUpdate) SetCheckNewAddressBalance(b bool) *SettingUpdate {
	su.mutation.SetCheckNewAddressBalance(b)
	return su
}

// SetNillableCheckNewAddressBalance sets the "check_new_address_balance" field if the given value is not nil.
func (su *SettingUpdate) SetNillableCheckNewAddressBalance(b *bool) *SettingUpdate {
	if b != nil {
		su.SetCheckNewAddressBalance(*b)
	}
	return su
}

// ClearCheckNewAddressBalance clears the value of the "check_new_address_balance" field.
func (su *SettingUpdate) ClearCheckNewAddressBalance() *SettingUpdate {
	su.mutation.ClearCheckNewAddressBalance()
	return su
}

// Mutation returns the SettingMutation object of the builder.
func (su *SettingUpdate) Mutation() *SettingMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SettingUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SettingUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SettingUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SettingUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SettingUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := setting.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *SettingUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SettingUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *SettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(setting.Table, setting.Columns, sqlgraph.NewFieldSpec(setting.FieldID, field.TypeUint32))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(setting.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedCreatedAt(); ok {
		_spec.AddField(setting.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(setting.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(setting.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(setting.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedDeletedAt(); ok {
		_spec.AddField(setting.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := su.mutation.EntID(); ok {
		_spec.SetField(setting.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := su.mutation.CoinTypeID(); ok {
		_spec.SetField(setting.FieldCoinTypeID, field.TypeUUID, value)
	}
	if su.mutation.CoinTypeIDCleared() {
		_spec.ClearField(setting.FieldCoinTypeID, field.TypeUUID)
	}
	if value, ok := su.mutation.FeeCoinTypeID(); ok {
		_spec.SetField(setting.FieldFeeCoinTypeID, field.TypeUUID, value)
	}
	if su.mutation.FeeCoinTypeIDCleared() {
		_spec.ClearField(setting.FieldFeeCoinTypeID, field.TypeUUID)
	}
	if value, ok := su.mutation.WithdrawFeeByStableUsd(); ok {
		_spec.SetField(setting.FieldWithdrawFeeByStableUsd, field.TypeBool, value)
	}
	if su.mutation.WithdrawFeeByStableUsdCleared() {
		_spec.ClearField(setting.FieldWithdrawFeeByStableUsd, field.TypeBool)
	}
	if value, ok := su.mutation.WithdrawFeeAmount(); ok {
		_spec.SetField(setting.FieldWithdrawFeeAmount, field.TypeOther, value)
	}
	if su.mutation.WithdrawFeeAmountCleared() {
		_spec.ClearField(setting.FieldWithdrawFeeAmount, field.TypeOther)
	}
	if value, ok := su.mutation.CollectFeeAmount(); ok {
		_spec.SetField(setting.FieldCollectFeeAmount, field.TypeOther, value)
	}
	if su.mutation.CollectFeeAmountCleared() {
		_spec.ClearField(setting.FieldCollectFeeAmount, field.TypeOther)
	}
	if value, ok := su.mutation.HotWalletFeeAmount(); ok {
		_spec.SetField(setting.FieldHotWalletFeeAmount, field.TypeOther, value)
	}
	if su.mutation.HotWalletFeeAmountCleared() {
		_spec.ClearField(setting.FieldHotWalletFeeAmount, field.TypeOther)
	}
	if value, ok := su.mutation.LowFeeAmount(); ok {
		_spec.SetField(setting.FieldLowFeeAmount, field.TypeOther, value)
	}
	if su.mutation.LowFeeAmountCleared() {
		_spec.ClearField(setting.FieldLowFeeAmount, field.TypeOther)
	}
	if value, ok := su.mutation.HotLowFeeAmount(); ok {
		_spec.SetField(setting.FieldHotLowFeeAmount, field.TypeOther, value)
	}
	if su.mutation.HotLowFeeAmountCleared() {
		_spec.ClearField(setting.FieldHotLowFeeAmount, field.TypeOther)
	}
	if value, ok := su.mutation.HotWalletAccountAmount(); ok {
		_spec.SetField(setting.FieldHotWalletAccountAmount, field.TypeOther, value)
	}
	if su.mutation.HotWalletAccountAmountCleared() {
		_spec.ClearField(setting.FieldHotWalletAccountAmount, field.TypeOther)
	}
	if value, ok := su.mutation.PaymentAccountCollectAmount(); ok {
		_spec.SetField(setting.FieldPaymentAccountCollectAmount, field.TypeOther, value)
	}
	if su.mutation.PaymentAccountCollectAmountCleared() {
		_spec.ClearField(setting.FieldPaymentAccountCollectAmount, field.TypeOther)
	}
	if value, ok := su.mutation.LeastTransferAmount(); ok {
		_spec.SetField(setting.FieldLeastTransferAmount, field.TypeOther, value)
	}
	if su.mutation.LeastTransferAmountCleared() {
		_spec.ClearField(setting.FieldLeastTransferAmount, field.TypeOther)
	}
	if value, ok := su.mutation.NeedMemo(); ok {
		_spec.SetField(setting.FieldNeedMemo, field.TypeBool, value)
	}
	if su.mutation.NeedMemoCleared() {
		_spec.ClearField(setting.FieldNeedMemo, field.TypeBool)
	}
	if value, ok := su.mutation.RefreshCurrency(); ok {
		_spec.SetField(setting.FieldRefreshCurrency, field.TypeBool, value)
	}
	if su.mutation.RefreshCurrencyCleared() {
		_spec.ClearField(setting.FieldRefreshCurrency, field.TypeBool)
	}
	if value, ok := su.mutation.CheckNewAddressBalance(); ok {
		_spec.SetField(setting.FieldCheckNewAddressBalance, field.TypeBool, value)
	}
	if su.mutation.CheckNewAddressBalanceCleared() {
		_spec.ClearField(setting.FieldCheckNewAddressBalance, field.TypeBool)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{setting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SettingUpdateOne is the builder for updating a single Setting entity.
type SettingUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (suo *SettingUpdateOne) SetCreatedAt(u uint32) *SettingUpdateOne {
	suo.mutation.ResetCreatedAt()
	suo.mutation.SetCreatedAt(u)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableCreatedAt(u *uint32) *SettingUpdateOne {
	if u != nil {
		suo.SetCreatedAt(*u)
	}
	return suo
}

// AddCreatedAt adds u to the "created_at" field.
func (suo *SettingUpdateOne) AddCreatedAt(u int32) *SettingUpdateOne {
	suo.mutation.AddCreatedAt(u)
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SettingUpdateOne) SetUpdatedAt(u uint32) *SettingUpdateOne {
	suo.mutation.ResetUpdatedAt()
	suo.mutation.SetUpdatedAt(u)
	return suo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (suo *SettingUpdateOne) AddUpdatedAt(u int32) *SettingUpdateOne {
	suo.mutation.AddUpdatedAt(u)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *SettingUpdateOne) SetDeletedAt(u uint32) *SettingUpdateOne {
	suo.mutation.ResetDeletedAt()
	suo.mutation.SetDeletedAt(u)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableDeletedAt(u *uint32) *SettingUpdateOne {
	if u != nil {
		suo.SetDeletedAt(*u)
	}
	return suo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (suo *SettingUpdateOne) AddDeletedAt(u int32) *SettingUpdateOne {
	suo.mutation.AddDeletedAt(u)
	return suo
}

// SetEntID sets the "ent_id" field.
func (suo *SettingUpdateOne) SetEntID(u uuid.UUID) *SettingUpdateOne {
	suo.mutation.SetEntID(u)
	return suo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableEntID(u *uuid.UUID) *SettingUpdateOne {
	if u != nil {
		suo.SetEntID(*u)
	}
	return suo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (suo *SettingUpdateOne) SetCoinTypeID(u uuid.UUID) *SettingUpdateOne {
	suo.mutation.SetCoinTypeID(u)
	return suo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *SettingUpdateOne {
	if u != nil {
		suo.SetCoinTypeID(*u)
	}
	return suo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (suo *SettingUpdateOne) ClearCoinTypeID() *SettingUpdateOne {
	suo.mutation.ClearCoinTypeID()
	return suo
}

// SetFeeCoinTypeID sets the "fee_coin_type_id" field.
func (suo *SettingUpdateOne) SetFeeCoinTypeID(u uuid.UUID) *SettingUpdateOne {
	suo.mutation.SetFeeCoinTypeID(u)
	return suo
}

// SetNillableFeeCoinTypeID sets the "fee_coin_type_id" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableFeeCoinTypeID(u *uuid.UUID) *SettingUpdateOne {
	if u != nil {
		suo.SetFeeCoinTypeID(*u)
	}
	return suo
}

// ClearFeeCoinTypeID clears the value of the "fee_coin_type_id" field.
func (suo *SettingUpdateOne) ClearFeeCoinTypeID() *SettingUpdateOne {
	suo.mutation.ClearFeeCoinTypeID()
	return suo
}

// SetWithdrawFeeByStableUsd sets the "withdraw_fee_by_stable_usd" field.
func (suo *SettingUpdateOne) SetWithdrawFeeByStableUsd(b bool) *SettingUpdateOne {
	suo.mutation.SetWithdrawFeeByStableUsd(b)
	return suo
}

// SetNillableWithdrawFeeByStableUsd sets the "withdraw_fee_by_stable_usd" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableWithdrawFeeByStableUsd(b *bool) *SettingUpdateOne {
	if b != nil {
		suo.SetWithdrawFeeByStableUsd(*b)
	}
	return suo
}

// ClearWithdrawFeeByStableUsd clears the value of the "withdraw_fee_by_stable_usd" field.
func (suo *SettingUpdateOne) ClearWithdrawFeeByStableUsd() *SettingUpdateOne {
	suo.mutation.ClearWithdrawFeeByStableUsd()
	return suo
}

// SetWithdrawFeeAmount sets the "withdraw_fee_amount" field.
func (suo *SettingUpdateOne) SetWithdrawFeeAmount(d decimal.Decimal) *SettingUpdateOne {
	suo.mutation.SetWithdrawFeeAmount(d)
	return suo
}

// SetNillableWithdrawFeeAmount sets the "withdraw_fee_amount" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableWithdrawFeeAmount(d *decimal.Decimal) *SettingUpdateOne {
	if d != nil {
		suo.SetWithdrawFeeAmount(*d)
	}
	return suo
}

// ClearWithdrawFeeAmount clears the value of the "withdraw_fee_amount" field.
func (suo *SettingUpdateOne) ClearWithdrawFeeAmount() *SettingUpdateOne {
	suo.mutation.ClearWithdrawFeeAmount()
	return suo
}

// SetCollectFeeAmount sets the "collect_fee_amount" field.
func (suo *SettingUpdateOne) SetCollectFeeAmount(d decimal.Decimal) *SettingUpdateOne {
	suo.mutation.SetCollectFeeAmount(d)
	return suo
}

// SetNillableCollectFeeAmount sets the "collect_fee_amount" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableCollectFeeAmount(d *decimal.Decimal) *SettingUpdateOne {
	if d != nil {
		suo.SetCollectFeeAmount(*d)
	}
	return suo
}

// ClearCollectFeeAmount clears the value of the "collect_fee_amount" field.
func (suo *SettingUpdateOne) ClearCollectFeeAmount() *SettingUpdateOne {
	suo.mutation.ClearCollectFeeAmount()
	return suo
}

// SetHotWalletFeeAmount sets the "hot_wallet_fee_amount" field.
func (suo *SettingUpdateOne) SetHotWalletFeeAmount(d decimal.Decimal) *SettingUpdateOne {
	suo.mutation.SetHotWalletFeeAmount(d)
	return suo
}

// SetNillableHotWalletFeeAmount sets the "hot_wallet_fee_amount" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableHotWalletFeeAmount(d *decimal.Decimal) *SettingUpdateOne {
	if d != nil {
		suo.SetHotWalletFeeAmount(*d)
	}
	return suo
}

// ClearHotWalletFeeAmount clears the value of the "hot_wallet_fee_amount" field.
func (suo *SettingUpdateOne) ClearHotWalletFeeAmount() *SettingUpdateOne {
	suo.mutation.ClearHotWalletFeeAmount()
	return suo
}

// SetLowFeeAmount sets the "low_fee_amount" field.
func (suo *SettingUpdateOne) SetLowFeeAmount(d decimal.Decimal) *SettingUpdateOne {
	suo.mutation.SetLowFeeAmount(d)
	return suo
}

// SetNillableLowFeeAmount sets the "low_fee_amount" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableLowFeeAmount(d *decimal.Decimal) *SettingUpdateOne {
	if d != nil {
		suo.SetLowFeeAmount(*d)
	}
	return suo
}

// ClearLowFeeAmount clears the value of the "low_fee_amount" field.
func (suo *SettingUpdateOne) ClearLowFeeAmount() *SettingUpdateOne {
	suo.mutation.ClearLowFeeAmount()
	return suo
}

// SetHotLowFeeAmount sets the "hot_low_fee_amount" field.
func (suo *SettingUpdateOne) SetHotLowFeeAmount(d decimal.Decimal) *SettingUpdateOne {
	suo.mutation.SetHotLowFeeAmount(d)
	return suo
}

// SetNillableHotLowFeeAmount sets the "hot_low_fee_amount" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableHotLowFeeAmount(d *decimal.Decimal) *SettingUpdateOne {
	if d != nil {
		suo.SetHotLowFeeAmount(*d)
	}
	return suo
}

// ClearHotLowFeeAmount clears the value of the "hot_low_fee_amount" field.
func (suo *SettingUpdateOne) ClearHotLowFeeAmount() *SettingUpdateOne {
	suo.mutation.ClearHotLowFeeAmount()
	return suo
}

// SetHotWalletAccountAmount sets the "hot_wallet_account_amount" field.
func (suo *SettingUpdateOne) SetHotWalletAccountAmount(d decimal.Decimal) *SettingUpdateOne {
	suo.mutation.SetHotWalletAccountAmount(d)
	return suo
}

// SetNillableHotWalletAccountAmount sets the "hot_wallet_account_amount" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableHotWalletAccountAmount(d *decimal.Decimal) *SettingUpdateOne {
	if d != nil {
		suo.SetHotWalletAccountAmount(*d)
	}
	return suo
}

// ClearHotWalletAccountAmount clears the value of the "hot_wallet_account_amount" field.
func (suo *SettingUpdateOne) ClearHotWalletAccountAmount() *SettingUpdateOne {
	suo.mutation.ClearHotWalletAccountAmount()
	return suo
}

// SetPaymentAccountCollectAmount sets the "payment_account_collect_amount" field.
func (suo *SettingUpdateOne) SetPaymentAccountCollectAmount(d decimal.Decimal) *SettingUpdateOne {
	suo.mutation.SetPaymentAccountCollectAmount(d)
	return suo
}

// SetNillablePaymentAccountCollectAmount sets the "payment_account_collect_amount" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillablePaymentAccountCollectAmount(d *decimal.Decimal) *SettingUpdateOne {
	if d != nil {
		suo.SetPaymentAccountCollectAmount(*d)
	}
	return suo
}

// ClearPaymentAccountCollectAmount clears the value of the "payment_account_collect_amount" field.
func (suo *SettingUpdateOne) ClearPaymentAccountCollectAmount() *SettingUpdateOne {
	suo.mutation.ClearPaymentAccountCollectAmount()
	return suo
}

// SetLeastTransferAmount sets the "least_transfer_amount" field.
func (suo *SettingUpdateOne) SetLeastTransferAmount(d decimal.Decimal) *SettingUpdateOne {
	suo.mutation.SetLeastTransferAmount(d)
	return suo
}

// SetNillableLeastTransferAmount sets the "least_transfer_amount" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableLeastTransferAmount(d *decimal.Decimal) *SettingUpdateOne {
	if d != nil {
		suo.SetLeastTransferAmount(*d)
	}
	return suo
}

// ClearLeastTransferAmount clears the value of the "least_transfer_amount" field.
func (suo *SettingUpdateOne) ClearLeastTransferAmount() *SettingUpdateOne {
	suo.mutation.ClearLeastTransferAmount()
	return suo
}

// SetNeedMemo sets the "need_memo" field.
func (suo *SettingUpdateOne) SetNeedMemo(b bool) *SettingUpdateOne {
	suo.mutation.SetNeedMemo(b)
	return suo
}

// SetNillableNeedMemo sets the "need_memo" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableNeedMemo(b *bool) *SettingUpdateOne {
	if b != nil {
		suo.SetNeedMemo(*b)
	}
	return suo
}

// ClearNeedMemo clears the value of the "need_memo" field.
func (suo *SettingUpdateOne) ClearNeedMemo() *SettingUpdateOne {
	suo.mutation.ClearNeedMemo()
	return suo
}

// SetRefreshCurrency sets the "refresh_currency" field.
func (suo *SettingUpdateOne) SetRefreshCurrency(b bool) *SettingUpdateOne {
	suo.mutation.SetRefreshCurrency(b)
	return suo
}

// SetNillableRefreshCurrency sets the "refresh_currency" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableRefreshCurrency(b *bool) *SettingUpdateOne {
	if b != nil {
		suo.SetRefreshCurrency(*b)
	}
	return suo
}

// ClearRefreshCurrency clears the value of the "refresh_currency" field.
func (suo *SettingUpdateOne) ClearRefreshCurrency() *SettingUpdateOne {
	suo.mutation.ClearRefreshCurrency()
	return suo
}

// SetCheckNewAddressBalance sets the "check_new_address_balance" field.
func (suo *SettingUpdateOne) SetCheckNewAddressBalance(b bool) *SettingUpdateOne {
	suo.mutation.SetCheckNewAddressBalance(b)
	return suo
}

// SetNillableCheckNewAddressBalance sets the "check_new_address_balance" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableCheckNewAddressBalance(b *bool) *SettingUpdateOne {
	if b != nil {
		suo.SetCheckNewAddressBalance(*b)
	}
	return suo
}

// ClearCheckNewAddressBalance clears the value of the "check_new_address_balance" field.
func (suo *SettingUpdateOne) ClearCheckNewAddressBalance() *SettingUpdateOne {
	suo.mutation.ClearCheckNewAddressBalance()
	return suo
}

// Mutation returns the SettingMutation object of the builder.
func (suo *SettingUpdateOne) Mutation() *SettingMutation {
	return suo.mutation
}

// Where appends a list predicates to the SettingUpdate builder.
func (suo *SettingUpdateOne) Where(ps ...predicate.Setting) *SettingUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SettingUpdateOne) Select(field string, fields ...string) *SettingUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Setting entity.
func (suo *SettingUpdateOne) Save(ctx context.Context) (*Setting, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SettingUpdateOne) SaveX(ctx context.Context) *Setting {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SettingUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SettingUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SettingUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := setting.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *SettingUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SettingUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *SettingUpdateOne) sqlSave(ctx context.Context) (_node *Setting, err error) {
	_spec := sqlgraph.NewUpdateSpec(setting.Table, setting.Columns, sqlgraph.NewFieldSpec(setting.FieldID, field.TypeUint32))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Setting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, setting.FieldID)
		for _, f := range fields {
			if !setting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != setting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(setting.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(setting.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(setting.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(setting.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(setting.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(setting.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.EntID(); ok {
		_spec.SetField(setting.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := suo.mutation.CoinTypeID(); ok {
		_spec.SetField(setting.FieldCoinTypeID, field.TypeUUID, value)
	}
	if suo.mutation.CoinTypeIDCleared() {
		_spec.ClearField(setting.FieldCoinTypeID, field.TypeUUID)
	}
	if value, ok := suo.mutation.FeeCoinTypeID(); ok {
		_spec.SetField(setting.FieldFeeCoinTypeID, field.TypeUUID, value)
	}
	if suo.mutation.FeeCoinTypeIDCleared() {
		_spec.ClearField(setting.FieldFeeCoinTypeID, field.TypeUUID)
	}
	if value, ok := suo.mutation.WithdrawFeeByStableUsd(); ok {
		_spec.SetField(setting.FieldWithdrawFeeByStableUsd, field.TypeBool, value)
	}
	if suo.mutation.WithdrawFeeByStableUsdCleared() {
		_spec.ClearField(setting.FieldWithdrawFeeByStableUsd, field.TypeBool)
	}
	if value, ok := suo.mutation.WithdrawFeeAmount(); ok {
		_spec.SetField(setting.FieldWithdrawFeeAmount, field.TypeOther, value)
	}
	if suo.mutation.WithdrawFeeAmountCleared() {
		_spec.ClearField(setting.FieldWithdrawFeeAmount, field.TypeOther)
	}
	if value, ok := suo.mutation.CollectFeeAmount(); ok {
		_spec.SetField(setting.FieldCollectFeeAmount, field.TypeOther, value)
	}
	if suo.mutation.CollectFeeAmountCleared() {
		_spec.ClearField(setting.FieldCollectFeeAmount, field.TypeOther)
	}
	if value, ok := suo.mutation.HotWalletFeeAmount(); ok {
		_spec.SetField(setting.FieldHotWalletFeeAmount, field.TypeOther, value)
	}
	if suo.mutation.HotWalletFeeAmountCleared() {
		_spec.ClearField(setting.FieldHotWalletFeeAmount, field.TypeOther)
	}
	if value, ok := suo.mutation.LowFeeAmount(); ok {
		_spec.SetField(setting.FieldLowFeeAmount, field.TypeOther, value)
	}
	if suo.mutation.LowFeeAmountCleared() {
		_spec.ClearField(setting.FieldLowFeeAmount, field.TypeOther)
	}
	if value, ok := suo.mutation.HotLowFeeAmount(); ok {
		_spec.SetField(setting.FieldHotLowFeeAmount, field.TypeOther, value)
	}
	if suo.mutation.HotLowFeeAmountCleared() {
		_spec.ClearField(setting.FieldHotLowFeeAmount, field.TypeOther)
	}
	if value, ok := suo.mutation.HotWalletAccountAmount(); ok {
		_spec.SetField(setting.FieldHotWalletAccountAmount, field.TypeOther, value)
	}
	if suo.mutation.HotWalletAccountAmountCleared() {
		_spec.ClearField(setting.FieldHotWalletAccountAmount, field.TypeOther)
	}
	if value, ok := suo.mutation.PaymentAccountCollectAmount(); ok {
		_spec.SetField(setting.FieldPaymentAccountCollectAmount, field.TypeOther, value)
	}
	if suo.mutation.PaymentAccountCollectAmountCleared() {
		_spec.ClearField(setting.FieldPaymentAccountCollectAmount, field.TypeOther)
	}
	if value, ok := suo.mutation.LeastTransferAmount(); ok {
		_spec.SetField(setting.FieldLeastTransferAmount, field.TypeOther, value)
	}
	if suo.mutation.LeastTransferAmountCleared() {
		_spec.ClearField(setting.FieldLeastTransferAmount, field.TypeOther)
	}
	if value, ok := suo.mutation.NeedMemo(); ok {
		_spec.SetField(setting.FieldNeedMemo, field.TypeBool, value)
	}
	if suo.mutation.NeedMemoCleared() {
		_spec.ClearField(setting.FieldNeedMemo, field.TypeBool)
	}
	if value, ok := suo.mutation.RefreshCurrency(); ok {
		_spec.SetField(setting.FieldRefreshCurrency, field.TypeBool, value)
	}
	if suo.mutation.RefreshCurrencyCleared() {
		_spec.ClearField(setting.FieldRefreshCurrency, field.TypeBool)
	}
	if value, ok := suo.mutation.CheckNewAddressBalance(); ok {
		_spec.SetField(setting.FieldCheckNewAddressBalance, field.TypeBool, value)
	}
	if suo.mutation.CheckNewAddressBalanceCleared() {
		_spec.ClearField(setting.FieldCheckNewAddressBalance, field.TypeBool)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Setting{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{setting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}

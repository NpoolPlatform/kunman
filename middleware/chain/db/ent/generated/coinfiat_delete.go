// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/coinfiat"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/predicate"
)

// CoinFiatDelete is the builder for deleting a CoinFiat entity.
type CoinFiatDelete struct {
	config
	hooks    []Hook
	mutation *CoinFiatMutation
}

// Where appends a list predicates to the CoinFiatDelete builder.
func (cfd *CoinFiatDelete) Where(ps ...predicate.CoinFiat) *CoinFiatDelete {
	cfd.mutation.Where(ps...)
	return cfd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cfd *CoinFiatDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cfd.sqlExec, cfd.mutation, cfd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cfd *CoinFiatDelete) ExecX(ctx context.Context) int {
	n, err := cfd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cfd *CoinFiatDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(coinfiat.Table, sqlgraph.NewFieldSpec(coinfiat.FieldID, field.TypeUint32))
	if ps := cfd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cfd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cfd.mutation.done = true
	return affected, err
}

// CoinFiatDeleteOne is the builder for deleting a single CoinFiat entity.
type CoinFiatDeleteOne struct {
	cfd *CoinFiatDelete
}

// Where appends a list predicates to the CoinFiatDelete builder.
func (cfdo *CoinFiatDeleteOne) Where(ps ...predicate.CoinFiat) *CoinFiatDeleteOne {
	cfdo.cfd.mutation.Where(ps...)
	return cfdo
}

// Exec executes the deletion query.
func (cfdo *CoinFiatDeleteOne) Exec(ctx context.Context) error {
	n, err := cfdo.cfd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{coinfiat.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cfdo *CoinFiatDeleteOne) ExecX(ctx context.Context) {
	if err := cfdo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/coinfiatcurrency"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/predicate"
)

// CoinFiatCurrencyDelete is the builder for deleting a CoinFiatCurrency entity.
type CoinFiatCurrencyDelete struct {
	config
	hooks    []Hook
	mutation *CoinFiatCurrencyMutation
}

// Where appends a list predicates to the CoinFiatCurrencyDelete builder.
func (cfcd *CoinFiatCurrencyDelete) Where(ps ...predicate.CoinFiatCurrency) *CoinFiatCurrencyDelete {
	cfcd.mutation.Where(ps...)
	return cfcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cfcd *CoinFiatCurrencyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cfcd.sqlExec, cfcd.mutation, cfcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cfcd *CoinFiatCurrencyDelete) ExecX(ctx context.Context) int {
	n, err := cfcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cfcd *CoinFiatCurrencyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(coinfiatcurrency.Table, sqlgraph.NewFieldSpec(coinfiatcurrency.FieldID, field.TypeUint32))
	if ps := cfcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cfcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cfcd.mutation.done = true
	return affected, err
}

// CoinFiatCurrencyDeleteOne is the builder for deleting a single CoinFiatCurrency entity.
type CoinFiatCurrencyDeleteOne struct {
	cfcd *CoinFiatCurrencyDelete
}

// Where appends a list predicates to the CoinFiatCurrencyDelete builder.
func (cfcdo *CoinFiatCurrencyDeleteOne) Where(ps ...predicate.CoinFiatCurrency) *CoinFiatCurrencyDeleteOne {
	cfcdo.cfcd.mutation.Where(ps...)
	return cfcdo
}

// Exec executes the deletion query.
func (cfcdo *CoinFiatCurrencyDeleteOne) Exec(ctx context.Context) error {
	n, err := cfcdo.cfcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{coinfiatcurrency.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cfcdo *CoinFiatCurrencyDeleteOne) ExecX(ctx context.Context) {
	if err := cfcdo.Exec(ctx); err != nil {
		panic(err)
	}
}

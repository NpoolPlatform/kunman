// Code generated by ent, DO NOT EDIT.

package setting

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldDeletedAt, v))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldEntID, v))
}

// CoinTypeID applies equality check predicate on the "coin_type_id" field. It's identical to CoinTypeIDEQ.
func CoinTypeID(v uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldCoinTypeID, v))
}

// FeeCoinTypeID applies equality check predicate on the "fee_coin_type_id" field. It's identical to FeeCoinTypeIDEQ.
func FeeCoinTypeID(v uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldFeeCoinTypeID, v))
}

// WithdrawFeeByStableUsd applies equality check predicate on the "withdraw_fee_by_stable_usd" field. It's identical to WithdrawFeeByStableUsdEQ.
func WithdrawFeeByStableUsd(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldWithdrawFeeByStableUsd, v))
}

// WithdrawFeeAmount applies equality check predicate on the "withdraw_fee_amount" field. It's identical to WithdrawFeeAmountEQ.
func WithdrawFeeAmount(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldWithdrawFeeAmount, v))
}

// CollectFeeAmount applies equality check predicate on the "collect_fee_amount" field. It's identical to CollectFeeAmountEQ.
func CollectFeeAmount(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldCollectFeeAmount, v))
}

// HotWalletFeeAmount applies equality check predicate on the "hot_wallet_fee_amount" field. It's identical to HotWalletFeeAmountEQ.
func HotWalletFeeAmount(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldHotWalletFeeAmount, v))
}

// LowFeeAmount applies equality check predicate on the "low_fee_amount" field. It's identical to LowFeeAmountEQ.
func LowFeeAmount(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldLowFeeAmount, v))
}

// HotLowFeeAmount applies equality check predicate on the "hot_low_fee_amount" field. It's identical to HotLowFeeAmountEQ.
func HotLowFeeAmount(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldHotLowFeeAmount, v))
}

// HotWalletAccountAmount applies equality check predicate on the "hot_wallet_account_amount" field. It's identical to HotWalletAccountAmountEQ.
func HotWalletAccountAmount(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldHotWalletAccountAmount, v))
}

// PaymentAccountCollectAmount applies equality check predicate on the "payment_account_collect_amount" field. It's identical to PaymentAccountCollectAmountEQ.
func PaymentAccountCollectAmount(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldPaymentAccountCollectAmount, v))
}

// LeastTransferAmount applies equality check predicate on the "least_transfer_amount" field. It's identical to LeastTransferAmountEQ.
func LeastTransferAmount(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldLeastTransferAmount, v))
}

// NeedMemo applies equality check predicate on the "need_memo" field. It's identical to NeedMemoEQ.
func NeedMemo(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldNeedMemo, v))
}

// RefreshCurrency applies equality check predicate on the "refresh_currency" field. It's identical to RefreshCurrencyEQ.
func RefreshCurrency(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldRefreshCurrency, v))
}

// CheckNewAddressBalance applies equality check predicate on the "check_new_address_balance" field. It's identical to CheckNewAddressBalanceEQ.
func CheckNewAddressBalance(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldCheckNewAddressBalance, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldEntID, v))
}

// CoinTypeIDEQ applies the EQ predicate on the "coin_type_id" field.
func CoinTypeIDEQ(v uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldCoinTypeID, v))
}

// CoinTypeIDNEQ applies the NEQ predicate on the "coin_type_id" field.
func CoinTypeIDNEQ(v uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldCoinTypeID, v))
}

// CoinTypeIDIn applies the In predicate on the "coin_type_id" field.
func CoinTypeIDIn(vs ...uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldCoinTypeID, vs...))
}

// CoinTypeIDNotIn applies the NotIn predicate on the "coin_type_id" field.
func CoinTypeIDNotIn(vs ...uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldCoinTypeID, vs...))
}

// CoinTypeIDGT applies the GT predicate on the "coin_type_id" field.
func CoinTypeIDGT(v uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldCoinTypeID, v))
}

// CoinTypeIDGTE applies the GTE predicate on the "coin_type_id" field.
func CoinTypeIDGTE(v uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldCoinTypeID, v))
}

// CoinTypeIDLT applies the LT predicate on the "coin_type_id" field.
func CoinTypeIDLT(v uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldCoinTypeID, v))
}

// CoinTypeIDLTE applies the LTE predicate on the "coin_type_id" field.
func CoinTypeIDLTE(v uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldCoinTypeID, v))
}

// CoinTypeIDIsNil applies the IsNil predicate on the "coin_type_id" field.
func CoinTypeIDIsNil() predicate.Setting {
	return predicate.Setting(sql.FieldIsNull(FieldCoinTypeID))
}

// CoinTypeIDNotNil applies the NotNil predicate on the "coin_type_id" field.
func CoinTypeIDNotNil() predicate.Setting {
	return predicate.Setting(sql.FieldNotNull(FieldCoinTypeID))
}

// FeeCoinTypeIDEQ applies the EQ predicate on the "fee_coin_type_id" field.
func FeeCoinTypeIDEQ(v uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldFeeCoinTypeID, v))
}

// FeeCoinTypeIDNEQ applies the NEQ predicate on the "fee_coin_type_id" field.
func FeeCoinTypeIDNEQ(v uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldFeeCoinTypeID, v))
}

// FeeCoinTypeIDIn applies the In predicate on the "fee_coin_type_id" field.
func FeeCoinTypeIDIn(vs ...uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldFeeCoinTypeID, vs...))
}

// FeeCoinTypeIDNotIn applies the NotIn predicate on the "fee_coin_type_id" field.
func FeeCoinTypeIDNotIn(vs ...uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldFeeCoinTypeID, vs...))
}

// FeeCoinTypeIDGT applies the GT predicate on the "fee_coin_type_id" field.
func FeeCoinTypeIDGT(v uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldFeeCoinTypeID, v))
}

// FeeCoinTypeIDGTE applies the GTE predicate on the "fee_coin_type_id" field.
func FeeCoinTypeIDGTE(v uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldFeeCoinTypeID, v))
}

// FeeCoinTypeIDLT applies the LT predicate on the "fee_coin_type_id" field.
func FeeCoinTypeIDLT(v uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldFeeCoinTypeID, v))
}

// FeeCoinTypeIDLTE applies the LTE predicate on the "fee_coin_type_id" field.
func FeeCoinTypeIDLTE(v uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldFeeCoinTypeID, v))
}

// FeeCoinTypeIDIsNil applies the IsNil predicate on the "fee_coin_type_id" field.
func FeeCoinTypeIDIsNil() predicate.Setting {
	return predicate.Setting(sql.FieldIsNull(FieldFeeCoinTypeID))
}

// FeeCoinTypeIDNotNil applies the NotNil predicate on the "fee_coin_type_id" field.
func FeeCoinTypeIDNotNil() predicate.Setting {
	return predicate.Setting(sql.FieldNotNull(FieldFeeCoinTypeID))
}

// WithdrawFeeByStableUsdEQ applies the EQ predicate on the "withdraw_fee_by_stable_usd" field.
func WithdrawFeeByStableUsdEQ(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldWithdrawFeeByStableUsd, v))
}

// WithdrawFeeByStableUsdNEQ applies the NEQ predicate on the "withdraw_fee_by_stable_usd" field.
func WithdrawFeeByStableUsdNEQ(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldWithdrawFeeByStableUsd, v))
}

// WithdrawFeeByStableUsdIsNil applies the IsNil predicate on the "withdraw_fee_by_stable_usd" field.
func WithdrawFeeByStableUsdIsNil() predicate.Setting {
	return predicate.Setting(sql.FieldIsNull(FieldWithdrawFeeByStableUsd))
}

// WithdrawFeeByStableUsdNotNil applies the NotNil predicate on the "withdraw_fee_by_stable_usd" field.
func WithdrawFeeByStableUsdNotNil() predicate.Setting {
	return predicate.Setting(sql.FieldNotNull(FieldWithdrawFeeByStableUsd))
}

// WithdrawFeeAmountEQ applies the EQ predicate on the "withdraw_fee_amount" field.
func WithdrawFeeAmountEQ(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldWithdrawFeeAmount, v))
}

// WithdrawFeeAmountNEQ applies the NEQ predicate on the "withdraw_fee_amount" field.
func WithdrawFeeAmountNEQ(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldWithdrawFeeAmount, v))
}

// WithdrawFeeAmountIn applies the In predicate on the "withdraw_fee_amount" field.
func WithdrawFeeAmountIn(vs ...decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldWithdrawFeeAmount, vs...))
}

// WithdrawFeeAmountNotIn applies the NotIn predicate on the "withdraw_fee_amount" field.
func WithdrawFeeAmountNotIn(vs ...decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldWithdrawFeeAmount, vs...))
}

// WithdrawFeeAmountGT applies the GT predicate on the "withdraw_fee_amount" field.
func WithdrawFeeAmountGT(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldWithdrawFeeAmount, v))
}

// WithdrawFeeAmountGTE applies the GTE predicate on the "withdraw_fee_amount" field.
func WithdrawFeeAmountGTE(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldWithdrawFeeAmount, v))
}

// WithdrawFeeAmountLT applies the LT predicate on the "withdraw_fee_amount" field.
func WithdrawFeeAmountLT(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldWithdrawFeeAmount, v))
}

// WithdrawFeeAmountLTE applies the LTE predicate on the "withdraw_fee_amount" field.
func WithdrawFeeAmountLTE(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldWithdrawFeeAmount, v))
}

// WithdrawFeeAmountIsNil applies the IsNil predicate on the "withdraw_fee_amount" field.
func WithdrawFeeAmountIsNil() predicate.Setting {
	return predicate.Setting(sql.FieldIsNull(FieldWithdrawFeeAmount))
}

// WithdrawFeeAmountNotNil applies the NotNil predicate on the "withdraw_fee_amount" field.
func WithdrawFeeAmountNotNil() predicate.Setting {
	return predicate.Setting(sql.FieldNotNull(FieldWithdrawFeeAmount))
}

// CollectFeeAmountEQ applies the EQ predicate on the "collect_fee_amount" field.
func CollectFeeAmountEQ(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldCollectFeeAmount, v))
}

// CollectFeeAmountNEQ applies the NEQ predicate on the "collect_fee_amount" field.
func CollectFeeAmountNEQ(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldCollectFeeAmount, v))
}

// CollectFeeAmountIn applies the In predicate on the "collect_fee_amount" field.
func CollectFeeAmountIn(vs ...decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldCollectFeeAmount, vs...))
}

// CollectFeeAmountNotIn applies the NotIn predicate on the "collect_fee_amount" field.
func CollectFeeAmountNotIn(vs ...decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldCollectFeeAmount, vs...))
}

// CollectFeeAmountGT applies the GT predicate on the "collect_fee_amount" field.
func CollectFeeAmountGT(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldCollectFeeAmount, v))
}

// CollectFeeAmountGTE applies the GTE predicate on the "collect_fee_amount" field.
func CollectFeeAmountGTE(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldCollectFeeAmount, v))
}

// CollectFeeAmountLT applies the LT predicate on the "collect_fee_amount" field.
func CollectFeeAmountLT(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldCollectFeeAmount, v))
}

// CollectFeeAmountLTE applies the LTE predicate on the "collect_fee_amount" field.
func CollectFeeAmountLTE(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldCollectFeeAmount, v))
}

// CollectFeeAmountIsNil applies the IsNil predicate on the "collect_fee_amount" field.
func CollectFeeAmountIsNil() predicate.Setting {
	return predicate.Setting(sql.FieldIsNull(FieldCollectFeeAmount))
}

// CollectFeeAmountNotNil applies the NotNil predicate on the "collect_fee_amount" field.
func CollectFeeAmountNotNil() predicate.Setting {
	return predicate.Setting(sql.FieldNotNull(FieldCollectFeeAmount))
}

// HotWalletFeeAmountEQ applies the EQ predicate on the "hot_wallet_fee_amount" field.
func HotWalletFeeAmountEQ(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldHotWalletFeeAmount, v))
}

// HotWalletFeeAmountNEQ applies the NEQ predicate on the "hot_wallet_fee_amount" field.
func HotWalletFeeAmountNEQ(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldHotWalletFeeAmount, v))
}

// HotWalletFeeAmountIn applies the In predicate on the "hot_wallet_fee_amount" field.
func HotWalletFeeAmountIn(vs ...decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldHotWalletFeeAmount, vs...))
}

// HotWalletFeeAmountNotIn applies the NotIn predicate on the "hot_wallet_fee_amount" field.
func HotWalletFeeAmountNotIn(vs ...decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldHotWalletFeeAmount, vs...))
}

// HotWalletFeeAmountGT applies the GT predicate on the "hot_wallet_fee_amount" field.
func HotWalletFeeAmountGT(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldHotWalletFeeAmount, v))
}

// HotWalletFeeAmountGTE applies the GTE predicate on the "hot_wallet_fee_amount" field.
func HotWalletFeeAmountGTE(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldHotWalletFeeAmount, v))
}

// HotWalletFeeAmountLT applies the LT predicate on the "hot_wallet_fee_amount" field.
func HotWalletFeeAmountLT(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldHotWalletFeeAmount, v))
}

// HotWalletFeeAmountLTE applies the LTE predicate on the "hot_wallet_fee_amount" field.
func HotWalletFeeAmountLTE(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldHotWalletFeeAmount, v))
}

// HotWalletFeeAmountIsNil applies the IsNil predicate on the "hot_wallet_fee_amount" field.
func HotWalletFeeAmountIsNil() predicate.Setting {
	return predicate.Setting(sql.FieldIsNull(FieldHotWalletFeeAmount))
}

// HotWalletFeeAmountNotNil applies the NotNil predicate on the "hot_wallet_fee_amount" field.
func HotWalletFeeAmountNotNil() predicate.Setting {
	return predicate.Setting(sql.FieldNotNull(FieldHotWalletFeeAmount))
}

// LowFeeAmountEQ applies the EQ predicate on the "low_fee_amount" field.
func LowFeeAmountEQ(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldLowFeeAmount, v))
}

// LowFeeAmountNEQ applies the NEQ predicate on the "low_fee_amount" field.
func LowFeeAmountNEQ(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldLowFeeAmount, v))
}

// LowFeeAmountIn applies the In predicate on the "low_fee_amount" field.
func LowFeeAmountIn(vs ...decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldLowFeeAmount, vs...))
}

// LowFeeAmountNotIn applies the NotIn predicate on the "low_fee_amount" field.
func LowFeeAmountNotIn(vs ...decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldLowFeeAmount, vs...))
}

// LowFeeAmountGT applies the GT predicate on the "low_fee_amount" field.
func LowFeeAmountGT(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldLowFeeAmount, v))
}

// LowFeeAmountGTE applies the GTE predicate on the "low_fee_amount" field.
func LowFeeAmountGTE(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldLowFeeAmount, v))
}

// LowFeeAmountLT applies the LT predicate on the "low_fee_amount" field.
func LowFeeAmountLT(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldLowFeeAmount, v))
}

// LowFeeAmountLTE applies the LTE predicate on the "low_fee_amount" field.
func LowFeeAmountLTE(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldLowFeeAmount, v))
}

// LowFeeAmountIsNil applies the IsNil predicate on the "low_fee_amount" field.
func LowFeeAmountIsNil() predicate.Setting {
	return predicate.Setting(sql.FieldIsNull(FieldLowFeeAmount))
}

// LowFeeAmountNotNil applies the NotNil predicate on the "low_fee_amount" field.
func LowFeeAmountNotNil() predicate.Setting {
	return predicate.Setting(sql.FieldNotNull(FieldLowFeeAmount))
}

// HotLowFeeAmountEQ applies the EQ predicate on the "hot_low_fee_amount" field.
func HotLowFeeAmountEQ(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldHotLowFeeAmount, v))
}

// HotLowFeeAmountNEQ applies the NEQ predicate on the "hot_low_fee_amount" field.
func HotLowFeeAmountNEQ(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldHotLowFeeAmount, v))
}

// HotLowFeeAmountIn applies the In predicate on the "hot_low_fee_amount" field.
func HotLowFeeAmountIn(vs ...decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldHotLowFeeAmount, vs...))
}

// HotLowFeeAmountNotIn applies the NotIn predicate on the "hot_low_fee_amount" field.
func HotLowFeeAmountNotIn(vs ...decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldHotLowFeeAmount, vs...))
}

// HotLowFeeAmountGT applies the GT predicate on the "hot_low_fee_amount" field.
func HotLowFeeAmountGT(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldHotLowFeeAmount, v))
}

// HotLowFeeAmountGTE applies the GTE predicate on the "hot_low_fee_amount" field.
func HotLowFeeAmountGTE(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldHotLowFeeAmount, v))
}

// HotLowFeeAmountLT applies the LT predicate on the "hot_low_fee_amount" field.
func HotLowFeeAmountLT(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldHotLowFeeAmount, v))
}

// HotLowFeeAmountLTE applies the LTE predicate on the "hot_low_fee_amount" field.
func HotLowFeeAmountLTE(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldHotLowFeeAmount, v))
}

// HotLowFeeAmountIsNil applies the IsNil predicate on the "hot_low_fee_amount" field.
func HotLowFeeAmountIsNil() predicate.Setting {
	return predicate.Setting(sql.FieldIsNull(FieldHotLowFeeAmount))
}

// HotLowFeeAmountNotNil applies the NotNil predicate on the "hot_low_fee_amount" field.
func HotLowFeeAmountNotNil() predicate.Setting {
	return predicate.Setting(sql.FieldNotNull(FieldHotLowFeeAmount))
}

// HotWalletAccountAmountEQ applies the EQ predicate on the "hot_wallet_account_amount" field.
func HotWalletAccountAmountEQ(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldHotWalletAccountAmount, v))
}

// HotWalletAccountAmountNEQ applies the NEQ predicate on the "hot_wallet_account_amount" field.
func HotWalletAccountAmountNEQ(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldHotWalletAccountAmount, v))
}

// HotWalletAccountAmountIn applies the In predicate on the "hot_wallet_account_amount" field.
func HotWalletAccountAmountIn(vs ...decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldHotWalletAccountAmount, vs...))
}

// HotWalletAccountAmountNotIn applies the NotIn predicate on the "hot_wallet_account_amount" field.
func HotWalletAccountAmountNotIn(vs ...decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldHotWalletAccountAmount, vs...))
}

// HotWalletAccountAmountGT applies the GT predicate on the "hot_wallet_account_amount" field.
func HotWalletAccountAmountGT(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldHotWalletAccountAmount, v))
}

// HotWalletAccountAmountGTE applies the GTE predicate on the "hot_wallet_account_amount" field.
func HotWalletAccountAmountGTE(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldHotWalletAccountAmount, v))
}

// HotWalletAccountAmountLT applies the LT predicate on the "hot_wallet_account_amount" field.
func HotWalletAccountAmountLT(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldHotWalletAccountAmount, v))
}

// HotWalletAccountAmountLTE applies the LTE predicate on the "hot_wallet_account_amount" field.
func HotWalletAccountAmountLTE(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldHotWalletAccountAmount, v))
}

// HotWalletAccountAmountIsNil applies the IsNil predicate on the "hot_wallet_account_amount" field.
func HotWalletAccountAmountIsNil() predicate.Setting {
	return predicate.Setting(sql.FieldIsNull(FieldHotWalletAccountAmount))
}

// HotWalletAccountAmountNotNil applies the NotNil predicate on the "hot_wallet_account_amount" field.
func HotWalletAccountAmountNotNil() predicate.Setting {
	return predicate.Setting(sql.FieldNotNull(FieldHotWalletAccountAmount))
}

// PaymentAccountCollectAmountEQ applies the EQ predicate on the "payment_account_collect_amount" field.
func PaymentAccountCollectAmountEQ(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldPaymentAccountCollectAmount, v))
}

// PaymentAccountCollectAmountNEQ applies the NEQ predicate on the "payment_account_collect_amount" field.
func PaymentAccountCollectAmountNEQ(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldPaymentAccountCollectAmount, v))
}

// PaymentAccountCollectAmountIn applies the In predicate on the "payment_account_collect_amount" field.
func PaymentAccountCollectAmountIn(vs ...decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldPaymentAccountCollectAmount, vs...))
}

// PaymentAccountCollectAmountNotIn applies the NotIn predicate on the "payment_account_collect_amount" field.
func PaymentAccountCollectAmountNotIn(vs ...decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldPaymentAccountCollectAmount, vs...))
}

// PaymentAccountCollectAmountGT applies the GT predicate on the "payment_account_collect_amount" field.
func PaymentAccountCollectAmountGT(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldPaymentAccountCollectAmount, v))
}

// PaymentAccountCollectAmountGTE applies the GTE predicate on the "payment_account_collect_amount" field.
func PaymentAccountCollectAmountGTE(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldPaymentAccountCollectAmount, v))
}

// PaymentAccountCollectAmountLT applies the LT predicate on the "payment_account_collect_amount" field.
func PaymentAccountCollectAmountLT(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldPaymentAccountCollectAmount, v))
}

// PaymentAccountCollectAmountLTE applies the LTE predicate on the "payment_account_collect_amount" field.
func PaymentAccountCollectAmountLTE(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldPaymentAccountCollectAmount, v))
}

// PaymentAccountCollectAmountIsNil applies the IsNil predicate on the "payment_account_collect_amount" field.
func PaymentAccountCollectAmountIsNil() predicate.Setting {
	return predicate.Setting(sql.FieldIsNull(FieldPaymentAccountCollectAmount))
}

// PaymentAccountCollectAmountNotNil applies the NotNil predicate on the "payment_account_collect_amount" field.
func PaymentAccountCollectAmountNotNil() predicate.Setting {
	return predicate.Setting(sql.FieldNotNull(FieldPaymentAccountCollectAmount))
}

// LeastTransferAmountEQ applies the EQ predicate on the "least_transfer_amount" field.
func LeastTransferAmountEQ(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldLeastTransferAmount, v))
}

// LeastTransferAmountNEQ applies the NEQ predicate on the "least_transfer_amount" field.
func LeastTransferAmountNEQ(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldLeastTransferAmount, v))
}

// LeastTransferAmountIn applies the In predicate on the "least_transfer_amount" field.
func LeastTransferAmountIn(vs ...decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldLeastTransferAmount, vs...))
}

// LeastTransferAmountNotIn applies the NotIn predicate on the "least_transfer_amount" field.
func LeastTransferAmountNotIn(vs ...decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldLeastTransferAmount, vs...))
}

// LeastTransferAmountGT applies the GT predicate on the "least_transfer_amount" field.
func LeastTransferAmountGT(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldLeastTransferAmount, v))
}

// LeastTransferAmountGTE applies the GTE predicate on the "least_transfer_amount" field.
func LeastTransferAmountGTE(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldLeastTransferAmount, v))
}

// LeastTransferAmountLT applies the LT predicate on the "least_transfer_amount" field.
func LeastTransferAmountLT(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldLeastTransferAmount, v))
}

// LeastTransferAmountLTE applies the LTE predicate on the "least_transfer_amount" field.
func LeastTransferAmountLTE(v decimal.Decimal) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldLeastTransferAmount, v))
}

// LeastTransferAmountIsNil applies the IsNil predicate on the "least_transfer_amount" field.
func LeastTransferAmountIsNil() predicate.Setting {
	return predicate.Setting(sql.FieldIsNull(FieldLeastTransferAmount))
}

// LeastTransferAmountNotNil applies the NotNil predicate on the "least_transfer_amount" field.
func LeastTransferAmountNotNil() predicate.Setting {
	return predicate.Setting(sql.FieldNotNull(FieldLeastTransferAmount))
}

// NeedMemoEQ applies the EQ predicate on the "need_memo" field.
func NeedMemoEQ(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldNeedMemo, v))
}

// NeedMemoNEQ applies the NEQ predicate on the "need_memo" field.
func NeedMemoNEQ(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldNeedMemo, v))
}

// NeedMemoIsNil applies the IsNil predicate on the "need_memo" field.
func NeedMemoIsNil() predicate.Setting {
	return predicate.Setting(sql.FieldIsNull(FieldNeedMemo))
}

// NeedMemoNotNil applies the NotNil predicate on the "need_memo" field.
func NeedMemoNotNil() predicate.Setting {
	return predicate.Setting(sql.FieldNotNull(FieldNeedMemo))
}

// RefreshCurrencyEQ applies the EQ predicate on the "refresh_currency" field.
func RefreshCurrencyEQ(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldRefreshCurrency, v))
}

// RefreshCurrencyNEQ applies the NEQ predicate on the "refresh_currency" field.
func RefreshCurrencyNEQ(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldRefreshCurrency, v))
}

// RefreshCurrencyIsNil applies the IsNil predicate on the "refresh_currency" field.
func RefreshCurrencyIsNil() predicate.Setting {
	return predicate.Setting(sql.FieldIsNull(FieldRefreshCurrency))
}

// RefreshCurrencyNotNil applies the NotNil predicate on the "refresh_currency" field.
func RefreshCurrencyNotNil() predicate.Setting {
	return predicate.Setting(sql.FieldNotNull(FieldRefreshCurrency))
}

// CheckNewAddressBalanceEQ applies the EQ predicate on the "check_new_address_balance" field.
func CheckNewAddressBalanceEQ(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldCheckNewAddressBalance, v))
}

// CheckNewAddressBalanceNEQ applies the NEQ predicate on the "check_new_address_balance" field.
func CheckNewAddressBalanceNEQ(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldCheckNewAddressBalance, v))
}

// CheckNewAddressBalanceIsNil applies the IsNil predicate on the "check_new_address_balance" field.
func CheckNewAddressBalanceIsNil() predicate.Setting {
	return predicate.Setting(sql.FieldIsNull(FieldCheckNewAddressBalance))
}

// CheckNewAddressBalanceNotNil applies the NotNil predicate on the "check_new_address_balance" field.
func CheckNewAddressBalanceNotNil() predicate.Setting {
	return predicate.Setting(sql.FieldNotNull(FieldCheckNewAddressBalance))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Setting) predicate.Setting {
	return predicate.Setting(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Setting) predicate.Setting {
	return predicate.Setting(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Setting) predicate.Setting {
	return predicate.Setting(sql.NotPredicates(p))
}

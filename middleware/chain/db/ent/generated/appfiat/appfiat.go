// Code generated by ent, DO NOT EDIT.

package appfiat

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the appfiat type in the database.
	Label = "app_fiat"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldFiatID holds the string denoting the fiat_id field in the database.
	FieldFiatID = "fiat_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDisplayNames holds the string denoting the display_names field in the database.
	FieldDisplayNames = "display_names"
	// FieldLogo holds the string denoting the logo field in the database.
	FieldLogo = "logo"
	// FieldDisabled holds the string denoting the disabled field in the database.
	FieldDisabled = "disabled"
	// FieldDisplay holds the string denoting the display field in the database.
	FieldDisplay = "display"
	// FieldDisplayIndex holds the string denoting the display_index field in the database.
	FieldDisplayIndex = "display_index"
	// Table holds the table name of the appfiat in the database.
	Table = "app_fiats"
)

// Columns holds all SQL columns for appfiat fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldEntID,
	FieldAppID,
	FieldFiatID,
	FieldName,
	FieldDisplayNames,
	FieldLogo,
	FieldDisabled,
	FieldDisplay,
	FieldDisplayIndex,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() uint32
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() uint32
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() uint32
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt func() uint32
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultAppID holds the default value on creation for the "app_id" field.
	DefaultAppID func() uuid.UUID
	// DefaultFiatID holds the default value on creation for the "fiat_id" field.
	DefaultFiatID func() uuid.UUID
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultDisplayNames holds the default value on creation for the "display_names" field.
	DefaultDisplayNames []string
	// DefaultLogo holds the default value on creation for the "logo" field.
	DefaultLogo string
	// DefaultDisabled holds the default value on creation for the "disabled" field.
	DefaultDisabled bool
	// DefaultDisplay holds the default value on creation for the "display" field.
	DefaultDisplay bool
	// DefaultDisplayIndex holds the default value on creation for the "display_index" field.
	DefaultDisplayIndex uint32
)

// OrderOption defines the ordering options for the AppFiat queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByAppID orders the results by the app_id field.
func ByAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppID, opts...).ToFunc()
}

// ByFiatID orders the results by the fiat_id field.
func ByFiatID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFiatID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByLogo orders the results by the logo field.
func ByLogo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogo, opts...).ToFunc()
}

// ByDisabled orders the results by the disabled field.
func ByDisabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabled, opts...).ToFunc()
}

// ByDisplay orders the results by the display field.
func ByDisplay(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplay, opts...).ToFunc()
}

// ByDisplayIndex orders the results by the display_index field.
func ByDisplayIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayIndex, opts...).ToFunc()
}

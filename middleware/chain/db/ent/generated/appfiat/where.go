// Code generated by ent, DO NOT EDIT.

package appfiat

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldEQ(FieldDeletedAt, v))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldEQ(FieldEntID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldEQ(FieldAppID, v))
}

// FiatID applies equality check predicate on the "fiat_id" field. It's identical to FiatIDEQ.
func FiatID(v uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldEQ(FieldFiatID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldEQ(FieldName, v))
}

// Logo applies equality check predicate on the "logo" field. It's identical to LogoEQ.
func Logo(v string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldEQ(FieldLogo, v))
}

// Disabled applies equality check predicate on the "disabled" field. It's identical to DisabledEQ.
func Disabled(v bool) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldEQ(FieldDisabled, v))
}

// Display applies equality check predicate on the "display" field. It's identical to DisplayEQ.
func Display(v bool) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldEQ(FieldDisplay, v))
}

// DisplayIndex applies equality check predicate on the "display_index" field. It's identical to DisplayIndexEQ.
func DisplayIndex(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldEQ(FieldDisplayIndex, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldLTE(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldLTE(FieldEntID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldLTE(FieldAppID, v))
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.AppFiat {
	return predicate.AppFiat(sql.FieldIsNull(FieldAppID))
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNotNull(FieldAppID))
}

// FiatIDEQ applies the EQ predicate on the "fiat_id" field.
func FiatIDEQ(v uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldEQ(FieldFiatID, v))
}

// FiatIDNEQ applies the NEQ predicate on the "fiat_id" field.
func FiatIDNEQ(v uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNEQ(FieldFiatID, v))
}

// FiatIDIn applies the In predicate on the "fiat_id" field.
func FiatIDIn(vs ...uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldIn(FieldFiatID, vs...))
}

// FiatIDNotIn applies the NotIn predicate on the "fiat_id" field.
func FiatIDNotIn(vs ...uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNotIn(FieldFiatID, vs...))
}

// FiatIDGT applies the GT predicate on the "fiat_id" field.
func FiatIDGT(v uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldGT(FieldFiatID, v))
}

// FiatIDGTE applies the GTE predicate on the "fiat_id" field.
func FiatIDGTE(v uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldGTE(FieldFiatID, v))
}

// FiatIDLT applies the LT predicate on the "fiat_id" field.
func FiatIDLT(v uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldLT(FieldFiatID, v))
}

// FiatIDLTE applies the LTE predicate on the "fiat_id" field.
func FiatIDLTE(v uuid.UUID) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldLTE(FieldFiatID, v))
}

// FiatIDIsNil applies the IsNil predicate on the "fiat_id" field.
func FiatIDIsNil() predicate.AppFiat {
	return predicate.AppFiat(sql.FieldIsNull(FieldFiatID))
}

// FiatIDNotNil applies the NotNil predicate on the "fiat_id" field.
func FiatIDNotNil() predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNotNull(FieldFiatID))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.AppFiat {
	return predicate.AppFiat(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldContainsFold(FieldName, v))
}

// DisplayNamesIsNil applies the IsNil predicate on the "display_names" field.
func DisplayNamesIsNil() predicate.AppFiat {
	return predicate.AppFiat(sql.FieldIsNull(FieldDisplayNames))
}

// DisplayNamesNotNil applies the NotNil predicate on the "display_names" field.
func DisplayNamesNotNil() predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNotNull(FieldDisplayNames))
}

// LogoEQ applies the EQ predicate on the "logo" field.
func LogoEQ(v string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldEQ(FieldLogo, v))
}

// LogoNEQ applies the NEQ predicate on the "logo" field.
func LogoNEQ(v string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNEQ(FieldLogo, v))
}

// LogoIn applies the In predicate on the "logo" field.
func LogoIn(vs ...string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldIn(FieldLogo, vs...))
}

// LogoNotIn applies the NotIn predicate on the "logo" field.
func LogoNotIn(vs ...string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNotIn(FieldLogo, vs...))
}

// LogoGT applies the GT predicate on the "logo" field.
func LogoGT(v string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldGT(FieldLogo, v))
}

// LogoGTE applies the GTE predicate on the "logo" field.
func LogoGTE(v string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldGTE(FieldLogo, v))
}

// LogoLT applies the LT predicate on the "logo" field.
func LogoLT(v string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldLT(FieldLogo, v))
}

// LogoLTE applies the LTE predicate on the "logo" field.
func LogoLTE(v string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldLTE(FieldLogo, v))
}

// LogoContains applies the Contains predicate on the "logo" field.
func LogoContains(v string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldContains(FieldLogo, v))
}

// LogoHasPrefix applies the HasPrefix predicate on the "logo" field.
func LogoHasPrefix(v string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldHasPrefix(FieldLogo, v))
}

// LogoHasSuffix applies the HasSuffix predicate on the "logo" field.
func LogoHasSuffix(v string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldHasSuffix(FieldLogo, v))
}

// LogoIsNil applies the IsNil predicate on the "logo" field.
func LogoIsNil() predicate.AppFiat {
	return predicate.AppFiat(sql.FieldIsNull(FieldLogo))
}

// LogoNotNil applies the NotNil predicate on the "logo" field.
func LogoNotNil() predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNotNull(FieldLogo))
}

// LogoEqualFold applies the EqualFold predicate on the "logo" field.
func LogoEqualFold(v string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldEqualFold(FieldLogo, v))
}

// LogoContainsFold applies the ContainsFold predicate on the "logo" field.
func LogoContainsFold(v string) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldContainsFold(FieldLogo, v))
}

// DisabledEQ applies the EQ predicate on the "disabled" field.
func DisabledEQ(v bool) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldEQ(FieldDisabled, v))
}

// DisabledNEQ applies the NEQ predicate on the "disabled" field.
func DisabledNEQ(v bool) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNEQ(FieldDisabled, v))
}

// DisabledIsNil applies the IsNil predicate on the "disabled" field.
func DisabledIsNil() predicate.AppFiat {
	return predicate.AppFiat(sql.FieldIsNull(FieldDisabled))
}

// DisabledNotNil applies the NotNil predicate on the "disabled" field.
func DisabledNotNil() predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNotNull(FieldDisabled))
}

// DisplayEQ applies the EQ predicate on the "display" field.
func DisplayEQ(v bool) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldEQ(FieldDisplay, v))
}

// DisplayNEQ applies the NEQ predicate on the "display" field.
func DisplayNEQ(v bool) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNEQ(FieldDisplay, v))
}

// DisplayIsNil applies the IsNil predicate on the "display" field.
func DisplayIsNil() predicate.AppFiat {
	return predicate.AppFiat(sql.FieldIsNull(FieldDisplay))
}

// DisplayNotNil applies the NotNil predicate on the "display" field.
func DisplayNotNil() predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNotNull(FieldDisplay))
}

// DisplayIndexEQ applies the EQ predicate on the "display_index" field.
func DisplayIndexEQ(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldEQ(FieldDisplayIndex, v))
}

// DisplayIndexNEQ applies the NEQ predicate on the "display_index" field.
func DisplayIndexNEQ(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNEQ(FieldDisplayIndex, v))
}

// DisplayIndexIn applies the In predicate on the "display_index" field.
func DisplayIndexIn(vs ...uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldIn(FieldDisplayIndex, vs...))
}

// DisplayIndexNotIn applies the NotIn predicate on the "display_index" field.
func DisplayIndexNotIn(vs ...uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNotIn(FieldDisplayIndex, vs...))
}

// DisplayIndexGT applies the GT predicate on the "display_index" field.
func DisplayIndexGT(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldGT(FieldDisplayIndex, v))
}

// DisplayIndexGTE applies the GTE predicate on the "display_index" field.
func DisplayIndexGTE(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldGTE(FieldDisplayIndex, v))
}

// DisplayIndexLT applies the LT predicate on the "display_index" field.
func DisplayIndexLT(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldLT(FieldDisplayIndex, v))
}

// DisplayIndexLTE applies the LTE predicate on the "display_index" field.
func DisplayIndexLTE(v uint32) predicate.AppFiat {
	return predicate.AppFiat(sql.FieldLTE(FieldDisplayIndex, v))
}

// DisplayIndexIsNil applies the IsNil predicate on the "display_index" field.
func DisplayIndexIsNil() predicate.AppFiat {
	return predicate.AppFiat(sql.FieldIsNull(FieldDisplayIndex))
}

// DisplayIndexNotNil applies the NotNil predicate on the "display_index" field.
func DisplayIndexNotNil() predicate.AppFiat {
	return predicate.AppFiat(sql.FieldNotNull(FieldDisplayIndex))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppFiat) predicate.AppFiat {
	return predicate.AppFiat(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppFiat) predicate.AppFiat {
	return predicate.AppFiat(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppFiat) predicate.AppFiat {
	return predicate.AppFiat(sql.NotPredicates(p))
}

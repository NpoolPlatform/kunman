// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/coinfiatcurrencyhistory"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/predicate"
)

// CoinFiatCurrencyHistoryDelete is the builder for deleting a CoinFiatCurrencyHistory entity.
type CoinFiatCurrencyHistoryDelete struct {
	config
	hooks    []Hook
	mutation *CoinFiatCurrencyHistoryMutation
}

// Where appends a list predicates to the CoinFiatCurrencyHistoryDelete builder.
func (cfchd *CoinFiatCurrencyHistoryDelete) Where(ps ...predicate.CoinFiatCurrencyHistory) *CoinFiatCurrencyHistoryDelete {
	cfchd.mutation.Where(ps...)
	return cfchd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cfchd *CoinFiatCurrencyHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cfchd.sqlExec, cfchd.mutation, cfchd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cfchd *CoinFiatCurrencyHistoryDelete) ExecX(ctx context.Context) int {
	n, err := cfchd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cfchd *CoinFiatCurrencyHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(coinfiatcurrencyhistory.Table, sqlgraph.NewFieldSpec(coinfiatcurrencyhistory.FieldID, field.TypeUint32))
	if ps := cfchd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cfchd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cfchd.mutation.done = true
	return affected, err
}

// CoinFiatCurrencyHistoryDeleteOne is the builder for deleting a single CoinFiatCurrencyHistory entity.
type CoinFiatCurrencyHistoryDeleteOne struct {
	cfchd *CoinFiatCurrencyHistoryDelete
}

// Where appends a list predicates to the CoinFiatCurrencyHistoryDelete builder.
func (cfchdo *CoinFiatCurrencyHistoryDeleteOne) Where(ps ...predicate.CoinFiatCurrencyHistory) *CoinFiatCurrencyHistoryDeleteOne {
	cfchdo.cfchd.mutation.Where(ps...)
	return cfchdo
}

// Exec executes the deletion query.
func (cfchdo *CoinFiatCurrencyHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := cfchdo.cfchd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{coinfiatcurrencyhistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cfchdo *CoinFiatCurrencyHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := cfchdo.Exec(ctx); err != nil {
		panic(err)
	}
}

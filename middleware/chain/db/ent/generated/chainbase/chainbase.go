// Code generated by ent, DO NOT EDIT.

package chainbase

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the chainbase type in the database.
	Label = "chain_base"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLogo holds the string denoting the logo field in the database.
	FieldLogo = "logo"
	// FieldNativeUnit holds the string denoting the native_unit field in the database.
	FieldNativeUnit = "native_unit"
	// FieldAtomicUnit holds the string denoting the atomic_unit field in the database.
	FieldAtomicUnit = "atomic_unit"
	// FieldUnitExp holds the string denoting the unit_exp field in the database.
	FieldUnitExp = "unit_exp"
	// FieldEnv holds the string denoting the env field in the database.
	FieldEnv = "env"
	// FieldChainID holds the string denoting the chain_id field in the database.
	FieldChainID = "chain_id"
	// FieldNickname holds the string denoting the nickname field in the database.
	FieldNickname = "nickname"
	// FieldGasType holds the string denoting the gas_type field in the database.
	FieldGasType = "gas_type"
	// Table holds the table name of the chainbase in the database.
	Table = "chain_bases"
)

// Columns holds all SQL columns for chainbase fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldEntID,
	FieldName,
	FieldLogo,
	FieldNativeUnit,
	FieldAtomicUnit,
	FieldUnitExp,
	FieldEnv,
	FieldChainID,
	FieldNickname,
	FieldGasType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() uint32
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() uint32
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() uint32
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt func() uint32
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultLogo holds the default value on creation for the "logo" field.
	DefaultLogo string
	// DefaultNativeUnit holds the default value on creation for the "native_unit" field.
	DefaultNativeUnit string
	// DefaultAtomicUnit holds the default value on creation for the "atomic_unit" field.
	DefaultAtomicUnit string
	// DefaultUnitExp holds the default value on creation for the "unit_exp" field.
	DefaultUnitExp uint32
	// DefaultEnv holds the default value on creation for the "env" field.
	DefaultEnv string
	// DefaultChainID holds the default value on creation for the "chain_id" field.
	DefaultChainID string
	// DefaultNickname holds the default value on creation for the "nickname" field.
	DefaultNickname string
	// DefaultGasType holds the default value on creation for the "gas_type" field.
	DefaultGasType string
)

// OrderOption defines the ordering options for the ChainBase queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByLogo orders the results by the logo field.
func ByLogo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogo, opts...).ToFunc()
}

// ByNativeUnit orders the results by the native_unit field.
func ByNativeUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNativeUnit, opts...).ToFunc()
}

// ByAtomicUnit orders the results by the atomic_unit field.
func ByAtomicUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAtomicUnit, opts...).ToFunc()
}

// ByUnitExp orders the results by the unit_exp field.
func ByUnitExp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitExp, opts...).ToFunc()
}

// ByEnv orders the results by the env field.
func ByEnv(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnv, opts...).ToFunc()
}

// ByChainID orders the results by the chain_id field.
func ByChainID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChainID, opts...).ToFunc()
}

// ByNickname orders the results by the nickname field.
func ByNickname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNickname, opts...).ToFunc()
}

// ByGasType orders the results by the gas_type field.
func ByGasType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGasType, opts...).ToFunc()
}

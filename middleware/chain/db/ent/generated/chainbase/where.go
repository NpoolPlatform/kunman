// Code generated by ent, DO NOT EDIT.

package chainbase

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldDeletedAt, v))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldEntID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldName, v))
}

// Logo applies equality check predicate on the "logo" field. It's identical to LogoEQ.
func Logo(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldLogo, v))
}

// NativeUnit applies equality check predicate on the "native_unit" field. It's identical to NativeUnitEQ.
func NativeUnit(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldNativeUnit, v))
}

// AtomicUnit applies equality check predicate on the "atomic_unit" field. It's identical to AtomicUnitEQ.
func AtomicUnit(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldAtomicUnit, v))
}

// UnitExp applies equality check predicate on the "unit_exp" field. It's identical to UnitExpEQ.
func UnitExp(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldUnitExp, v))
}

// Env applies equality check predicate on the "env" field. It's identical to EnvEQ.
func Env(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldEnv, v))
}

// ChainID applies equality check predicate on the "chain_id" field. It's identical to ChainIDEQ.
func ChainID(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldChainID, v))
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldNickname, v))
}

// GasType applies equality check predicate on the "gas_type" field. It's identical to GasTypeEQ.
func GasType(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldGasType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLTE(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLTE(FieldEntID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.ChainBase {
	return predicate.ChainBase(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldContainsFold(FieldName, v))
}

// LogoEQ applies the EQ predicate on the "logo" field.
func LogoEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldLogo, v))
}

// LogoNEQ applies the NEQ predicate on the "logo" field.
func LogoNEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNEQ(FieldLogo, v))
}

// LogoIn applies the In predicate on the "logo" field.
func LogoIn(vs ...string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldIn(FieldLogo, vs...))
}

// LogoNotIn applies the NotIn predicate on the "logo" field.
func LogoNotIn(vs ...string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNotIn(FieldLogo, vs...))
}

// LogoGT applies the GT predicate on the "logo" field.
func LogoGT(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGT(FieldLogo, v))
}

// LogoGTE applies the GTE predicate on the "logo" field.
func LogoGTE(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGTE(FieldLogo, v))
}

// LogoLT applies the LT predicate on the "logo" field.
func LogoLT(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLT(FieldLogo, v))
}

// LogoLTE applies the LTE predicate on the "logo" field.
func LogoLTE(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLTE(FieldLogo, v))
}

// LogoContains applies the Contains predicate on the "logo" field.
func LogoContains(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldContains(FieldLogo, v))
}

// LogoHasPrefix applies the HasPrefix predicate on the "logo" field.
func LogoHasPrefix(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldHasPrefix(FieldLogo, v))
}

// LogoHasSuffix applies the HasSuffix predicate on the "logo" field.
func LogoHasSuffix(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldHasSuffix(FieldLogo, v))
}

// LogoIsNil applies the IsNil predicate on the "logo" field.
func LogoIsNil() predicate.ChainBase {
	return predicate.ChainBase(sql.FieldIsNull(FieldLogo))
}

// LogoNotNil applies the NotNil predicate on the "logo" field.
func LogoNotNil() predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNotNull(FieldLogo))
}

// LogoEqualFold applies the EqualFold predicate on the "logo" field.
func LogoEqualFold(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEqualFold(FieldLogo, v))
}

// LogoContainsFold applies the ContainsFold predicate on the "logo" field.
func LogoContainsFold(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldContainsFold(FieldLogo, v))
}

// NativeUnitEQ applies the EQ predicate on the "native_unit" field.
func NativeUnitEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldNativeUnit, v))
}

// NativeUnitNEQ applies the NEQ predicate on the "native_unit" field.
func NativeUnitNEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNEQ(FieldNativeUnit, v))
}

// NativeUnitIn applies the In predicate on the "native_unit" field.
func NativeUnitIn(vs ...string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldIn(FieldNativeUnit, vs...))
}

// NativeUnitNotIn applies the NotIn predicate on the "native_unit" field.
func NativeUnitNotIn(vs ...string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNotIn(FieldNativeUnit, vs...))
}

// NativeUnitGT applies the GT predicate on the "native_unit" field.
func NativeUnitGT(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGT(FieldNativeUnit, v))
}

// NativeUnitGTE applies the GTE predicate on the "native_unit" field.
func NativeUnitGTE(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGTE(FieldNativeUnit, v))
}

// NativeUnitLT applies the LT predicate on the "native_unit" field.
func NativeUnitLT(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLT(FieldNativeUnit, v))
}

// NativeUnitLTE applies the LTE predicate on the "native_unit" field.
func NativeUnitLTE(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLTE(FieldNativeUnit, v))
}

// NativeUnitContains applies the Contains predicate on the "native_unit" field.
func NativeUnitContains(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldContains(FieldNativeUnit, v))
}

// NativeUnitHasPrefix applies the HasPrefix predicate on the "native_unit" field.
func NativeUnitHasPrefix(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldHasPrefix(FieldNativeUnit, v))
}

// NativeUnitHasSuffix applies the HasSuffix predicate on the "native_unit" field.
func NativeUnitHasSuffix(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldHasSuffix(FieldNativeUnit, v))
}

// NativeUnitIsNil applies the IsNil predicate on the "native_unit" field.
func NativeUnitIsNil() predicate.ChainBase {
	return predicate.ChainBase(sql.FieldIsNull(FieldNativeUnit))
}

// NativeUnitNotNil applies the NotNil predicate on the "native_unit" field.
func NativeUnitNotNil() predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNotNull(FieldNativeUnit))
}

// NativeUnitEqualFold applies the EqualFold predicate on the "native_unit" field.
func NativeUnitEqualFold(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEqualFold(FieldNativeUnit, v))
}

// NativeUnitContainsFold applies the ContainsFold predicate on the "native_unit" field.
func NativeUnitContainsFold(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldContainsFold(FieldNativeUnit, v))
}

// AtomicUnitEQ applies the EQ predicate on the "atomic_unit" field.
func AtomicUnitEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldAtomicUnit, v))
}

// AtomicUnitNEQ applies the NEQ predicate on the "atomic_unit" field.
func AtomicUnitNEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNEQ(FieldAtomicUnit, v))
}

// AtomicUnitIn applies the In predicate on the "atomic_unit" field.
func AtomicUnitIn(vs ...string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldIn(FieldAtomicUnit, vs...))
}

// AtomicUnitNotIn applies the NotIn predicate on the "atomic_unit" field.
func AtomicUnitNotIn(vs ...string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNotIn(FieldAtomicUnit, vs...))
}

// AtomicUnitGT applies the GT predicate on the "atomic_unit" field.
func AtomicUnitGT(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGT(FieldAtomicUnit, v))
}

// AtomicUnitGTE applies the GTE predicate on the "atomic_unit" field.
func AtomicUnitGTE(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGTE(FieldAtomicUnit, v))
}

// AtomicUnitLT applies the LT predicate on the "atomic_unit" field.
func AtomicUnitLT(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLT(FieldAtomicUnit, v))
}

// AtomicUnitLTE applies the LTE predicate on the "atomic_unit" field.
func AtomicUnitLTE(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLTE(FieldAtomicUnit, v))
}

// AtomicUnitContains applies the Contains predicate on the "atomic_unit" field.
func AtomicUnitContains(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldContains(FieldAtomicUnit, v))
}

// AtomicUnitHasPrefix applies the HasPrefix predicate on the "atomic_unit" field.
func AtomicUnitHasPrefix(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldHasPrefix(FieldAtomicUnit, v))
}

// AtomicUnitHasSuffix applies the HasSuffix predicate on the "atomic_unit" field.
func AtomicUnitHasSuffix(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldHasSuffix(FieldAtomicUnit, v))
}

// AtomicUnitIsNil applies the IsNil predicate on the "atomic_unit" field.
func AtomicUnitIsNil() predicate.ChainBase {
	return predicate.ChainBase(sql.FieldIsNull(FieldAtomicUnit))
}

// AtomicUnitNotNil applies the NotNil predicate on the "atomic_unit" field.
func AtomicUnitNotNil() predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNotNull(FieldAtomicUnit))
}

// AtomicUnitEqualFold applies the EqualFold predicate on the "atomic_unit" field.
func AtomicUnitEqualFold(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEqualFold(FieldAtomicUnit, v))
}

// AtomicUnitContainsFold applies the ContainsFold predicate on the "atomic_unit" field.
func AtomicUnitContainsFold(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldContainsFold(FieldAtomicUnit, v))
}

// UnitExpEQ applies the EQ predicate on the "unit_exp" field.
func UnitExpEQ(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldUnitExp, v))
}

// UnitExpNEQ applies the NEQ predicate on the "unit_exp" field.
func UnitExpNEQ(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNEQ(FieldUnitExp, v))
}

// UnitExpIn applies the In predicate on the "unit_exp" field.
func UnitExpIn(vs ...uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldIn(FieldUnitExp, vs...))
}

// UnitExpNotIn applies the NotIn predicate on the "unit_exp" field.
func UnitExpNotIn(vs ...uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNotIn(FieldUnitExp, vs...))
}

// UnitExpGT applies the GT predicate on the "unit_exp" field.
func UnitExpGT(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGT(FieldUnitExp, v))
}

// UnitExpGTE applies the GTE predicate on the "unit_exp" field.
func UnitExpGTE(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGTE(FieldUnitExp, v))
}

// UnitExpLT applies the LT predicate on the "unit_exp" field.
func UnitExpLT(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLT(FieldUnitExp, v))
}

// UnitExpLTE applies the LTE predicate on the "unit_exp" field.
func UnitExpLTE(v uint32) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLTE(FieldUnitExp, v))
}

// UnitExpIsNil applies the IsNil predicate on the "unit_exp" field.
func UnitExpIsNil() predicate.ChainBase {
	return predicate.ChainBase(sql.FieldIsNull(FieldUnitExp))
}

// UnitExpNotNil applies the NotNil predicate on the "unit_exp" field.
func UnitExpNotNil() predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNotNull(FieldUnitExp))
}

// EnvEQ applies the EQ predicate on the "env" field.
func EnvEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldEnv, v))
}

// EnvNEQ applies the NEQ predicate on the "env" field.
func EnvNEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNEQ(FieldEnv, v))
}

// EnvIn applies the In predicate on the "env" field.
func EnvIn(vs ...string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldIn(FieldEnv, vs...))
}

// EnvNotIn applies the NotIn predicate on the "env" field.
func EnvNotIn(vs ...string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNotIn(FieldEnv, vs...))
}

// EnvGT applies the GT predicate on the "env" field.
func EnvGT(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGT(FieldEnv, v))
}

// EnvGTE applies the GTE predicate on the "env" field.
func EnvGTE(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGTE(FieldEnv, v))
}

// EnvLT applies the LT predicate on the "env" field.
func EnvLT(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLT(FieldEnv, v))
}

// EnvLTE applies the LTE predicate on the "env" field.
func EnvLTE(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLTE(FieldEnv, v))
}

// EnvContains applies the Contains predicate on the "env" field.
func EnvContains(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldContains(FieldEnv, v))
}

// EnvHasPrefix applies the HasPrefix predicate on the "env" field.
func EnvHasPrefix(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldHasPrefix(FieldEnv, v))
}

// EnvHasSuffix applies the HasSuffix predicate on the "env" field.
func EnvHasSuffix(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldHasSuffix(FieldEnv, v))
}

// EnvIsNil applies the IsNil predicate on the "env" field.
func EnvIsNil() predicate.ChainBase {
	return predicate.ChainBase(sql.FieldIsNull(FieldEnv))
}

// EnvNotNil applies the NotNil predicate on the "env" field.
func EnvNotNil() predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNotNull(FieldEnv))
}

// EnvEqualFold applies the EqualFold predicate on the "env" field.
func EnvEqualFold(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEqualFold(FieldEnv, v))
}

// EnvContainsFold applies the ContainsFold predicate on the "env" field.
func EnvContainsFold(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldContainsFold(FieldEnv, v))
}

// ChainIDEQ applies the EQ predicate on the "chain_id" field.
func ChainIDEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldChainID, v))
}

// ChainIDNEQ applies the NEQ predicate on the "chain_id" field.
func ChainIDNEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNEQ(FieldChainID, v))
}

// ChainIDIn applies the In predicate on the "chain_id" field.
func ChainIDIn(vs ...string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldIn(FieldChainID, vs...))
}

// ChainIDNotIn applies the NotIn predicate on the "chain_id" field.
func ChainIDNotIn(vs ...string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNotIn(FieldChainID, vs...))
}

// ChainIDGT applies the GT predicate on the "chain_id" field.
func ChainIDGT(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGT(FieldChainID, v))
}

// ChainIDGTE applies the GTE predicate on the "chain_id" field.
func ChainIDGTE(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGTE(FieldChainID, v))
}

// ChainIDLT applies the LT predicate on the "chain_id" field.
func ChainIDLT(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLT(FieldChainID, v))
}

// ChainIDLTE applies the LTE predicate on the "chain_id" field.
func ChainIDLTE(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLTE(FieldChainID, v))
}

// ChainIDContains applies the Contains predicate on the "chain_id" field.
func ChainIDContains(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldContains(FieldChainID, v))
}

// ChainIDHasPrefix applies the HasPrefix predicate on the "chain_id" field.
func ChainIDHasPrefix(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldHasPrefix(FieldChainID, v))
}

// ChainIDHasSuffix applies the HasSuffix predicate on the "chain_id" field.
func ChainIDHasSuffix(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldHasSuffix(FieldChainID, v))
}

// ChainIDIsNil applies the IsNil predicate on the "chain_id" field.
func ChainIDIsNil() predicate.ChainBase {
	return predicate.ChainBase(sql.FieldIsNull(FieldChainID))
}

// ChainIDNotNil applies the NotNil predicate on the "chain_id" field.
func ChainIDNotNil() predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNotNull(FieldChainID))
}

// ChainIDEqualFold applies the EqualFold predicate on the "chain_id" field.
func ChainIDEqualFold(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEqualFold(FieldChainID, v))
}

// ChainIDContainsFold applies the ContainsFold predicate on the "chain_id" field.
func ChainIDContainsFold(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldContainsFold(FieldChainID, v))
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldNickname, v))
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNEQ(FieldNickname, v))
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldIn(FieldNickname, vs...))
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNotIn(FieldNickname, vs...))
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGT(FieldNickname, v))
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGTE(FieldNickname, v))
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLT(FieldNickname, v))
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLTE(FieldNickname, v))
}

// NicknameContains applies the Contains predicate on the "nickname" field.
func NicknameContains(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldContains(FieldNickname, v))
}

// NicknameHasPrefix applies the HasPrefix predicate on the "nickname" field.
func NicknameHasPrefix(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldHasPrefix(FieldNickname, v))
}

// NicknameHasSuffix applies the HasSuffix predicate on the "nickname" field.
func NicknameHasSuffix(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldHasSuffix(FieldNickname, v))
}

// NicknameIsNil applies the IsNil predicate on the "nickname" field.
func NicknameIsNil() predicate.ChainBase {
	return predicate.ChainBase(sql.FieldIsNull(FieldNickname))
}

// NicknameNotNil applies the NotNil predicate on the "nickname" field.
func NicknameNotNil() predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNotNull(FieldNickname))
}

// NicknameEqualFold applies the EqualFold predicate on the "nickname" field.
func NicknameEqualFold(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEqualFold(FieldNickname, v))
}

// NicknameContainsFold applies the ContainsFold predicate on the "nickname" field.
func NicknameContainsFold(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldContainsFold(FieldNickname, v))
}

// GasTypeEQ applies the EQ predicate on the "gas_type" field.
func GasTypeEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEQ(FieldGasType, v))
}

// GasTypeNEQ applies the NEQ predicate on the "gas_type" field.
func GasTypeNEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNEQ(FieldGasType, v))
}

// GasTypeIn applies the In predicate on the "gas_type" field.
func GasTypeIn(vs ...string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldIn(FieldGasType, vs...))
}

// GasTypeNotIn applies the NotIn predicate on the "gas_type" field.
func GasTypeNotIn(vs ...string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNotIn(FieldGasType, vs...))
}

// GasTypeGT applies the GT predicate on the "gas_type" field.
func GasTypeGT(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGT(FieldGasType, v))
}

// GasTypeGTE applies the GTE predicate on the "gas_type" field.
func GasTypeGTE(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldGTE(FieldGasType, v))
}

// GasTypeLT applies the LT predicate on the "gas_type" field.
func GasTypeLT(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLT(FieldGasType, v))
}

// GasTypeLTE applies the LTE predicate on the "gas_type" field.
func GasTypeLTE(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldLTE(FieldGasType, v))
}

// GasTypeContains applies the Contains predicate on the "gas_type" field.
func GasTypeContains(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldContains(FieldGasType, v))
}

// GasTypeHasPrefix applies the HasPrefix predicate on the "gas_type" field.
func GasTypeHasPrefix(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldHasPrefix(FieldGasType, v))
}

// GasTypeHasSuffix applies the HasSuffix predicate on the "gas_type" field.
func GasTypeHasSuffix(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldHasSuffix(FieldGasType, v))
}

// GasTypeIsNil applies the IsNil predicate on the "gas_type" field.
func GasTypeIsNil() predicate.ChainBase {
	return predicate.ChainBase(sql.FieldIsNull(FieldGasType))
}

// GasTypeNotNil applies the NotNil predicate on the "gas_type" field.
func GasTypeNotNil() predicate.ChainBase {
	return predicate.ChainBase(sql.FieldNotNull(FieldGasType))
}

// GasTypeEqualFold applies the EqualFold predicate on the "gas_type" field.
func GasTypeEqualFold(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldEqualFold(FieldGasType, v))
}

// GasTypeContainsFold applies the ContainsFold predicate on the "gas_type" field.
func GasTypeContainsFold(v string) predicate.ChainBase {
	return predicate.ChainBase(sql.FieldContainsFold(FieldGasType, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ChainBase) predicate.ChainBase {
	return predicate.ChainBase(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ChainBase) predicate.ChainBase {
	return predicate.ChainBase(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ChainBase) predicate.ChainBase {
	return predicate.ChainBase(sql.NotPredicates(p))
}

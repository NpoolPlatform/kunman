// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/fiatcurrencyfeed"
	"github.com/google/uuid"
)

// FiatCurrencyFeed is the model entity for the FiatCurrencyFeed schema.
type FiatCurrencyFeed struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// FiatID holds the value of the "fiat_id" field.
	FiatID uuid.UUID `json:"fiat_id,omitempty"`
	// FeedType holds the value of the "feed_type" field.
	FeedType string `json:"feed_type,omitempty"`
	// FeedFiatName holds the value of the "feed_fiat_name" field.
	FeedFiatName string `json:"feed_fiat_name,omitempty"`
	// Disabled holds the value of the "disabled" field.
	Disabled     bool `json:"disabled,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FiatCurrencyFeed) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fiatcurrencyfeed.FieldDisabled:
			values[i] = new(sql.NullBool)
		case fiatcurrencyfeed.FieldID, fiatcurrencyfeed.FieldCreatedAt, fiatcurrencyfeed.FieldUpdatedAt, fiatcurrencyfeed.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case fiatcurrencyfeed.FieldFeedType, fiatcurrencyfeed.FieldFeedFiatName:
			values[i] = new(sql.NullString)
		case fiatcurrencyfeed.FieldEntID, fiatcurrencyfeed.FieldFiatID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FiatCurrencyFeed fields.
func (fcf *FiatCurrencyFeed) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fiatcurrencyfeed.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fcf.ID = uint32(value.Int64)
		case fiatcurrencyfeed.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fcf.CreatedAt = uint32(value.Int64)
			}
		case fiatcurrencyfeed.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fcf.UpdatedAt = uint32(value.Int64)
			}
		case fiatcurrencyfeed.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				fcf.DeletedAt = uint32(value.Int64)
			}
		case fiatcurrencyfeed.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				fcf.EntID = *value
			}
		case fiatcurrencyfeed.FieldFiatID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field fiat_id", values[i])
			} else if value != nil {
				fcf.FiatID = *value
			}
		case fiatcurrencyfeed.FieldFeedType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field feed_type", values[i])
			} else if value.Valid {
				fcf.FeedType = value.String
			}
		case fiatcurrencyfeed.FieldFeedFiatName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field feed_fiat_name", values[i])
			} else if value.Valid {
				fcf.FeedFiatName = value.String
			}
		case fiatcurrencyfeed.FieldDisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field disabled", values[i])
			} else if value.Valid {
				fcf.Disabled = value.Bool
			}
		default:
			fcf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FiatCurrencyFeed.
// This includes values selected through modifiers, order, etc.
func (fcf *FiatCurrencyFeed) Value(name string) (ent.Value, error) {
	return fcf.selectValues.Get(name)
}

// Update returns a builder for updating this FiatCurrencyFeed.
// Note that you need to call FiatCurrencyFeed.Unwrap() before calling this method if this FiatCurrencyFeed
// was returned from a transaction, and the transaction was committed or rolled back.
func (fcf *FiatCurrencyFeed) Update() *FiatCurrencyFeedUpdateOne {
	return NewFiatCurrencyFeedClient(fcf.config).UpdateOne(fcf)
}

// Unwrap unwraps the FiatCurrencyFeed entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fcf *FiatCurrencyFeed) Unwrap() *FiatCurrencyFeed {
	_tx, ok := fcf.config.driver.(*txDriver)
	if !ok {
		panic("generated: FiatCurrencyFeed is not a transactional entity")
	}
	fcf.config.driver = _tx.drv
	return fcf
}

// String implements the fmt.Stringer.
func (fcf *FiatCurrencyFeed) String() string {
	var builder strings.Builder
	builder.WriteString("FiatCurrencyFeed(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fcf.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", fcf.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", fcf.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", fcf.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", fcf.EntID))
	builder.WriteString(", ")
	builder.WriteString("fiat_id=")
	builder.WriteString(fmt.Sprintf("%v", fcf.FiatID))
	builder.WriteString(", ")
	builder.WriteString("feed_type=")
	builder.WriteString(fcf.FeedType)
	builder.WriteString(", ")
	builder.WriteString("feed_fiat_name=")
	builder.WriteString(fcf.FeedFiatName)
	builder.WriteString(", ")
	builder.WriteString("disabled=")
	builder.WriteString(fmt.Sprintf("%v", fcf.Disabled))
	builder.WriteByte(')')
	return builder.String()
}

// FiatCurrencyFeeds is a parsable slice of FiatCurrencyFeed.
type FiatCurrencyFeeds []*FiatCurrencyFeed

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/fiatcurrency"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// FiatCurrencyUpdate is the builder for updating FiatCurrency entities.
type FiatCurrencyUpdate struct {
	config
	hooks     []Hook
	mutation  *FiatCurrencyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FiatCurrencyUpdate builder.
func (fcu *FiatCurrencyUpdate) Where(ps ...predicate.FiatCurrency) *FiatCurrencyUpdate {
	fcu.mutation.Where(ps...)
	return fcu
}

// SetCreatedAt sets the "created_at" field.
func (fcu *FiatCurrencyUpdate) SetCreatedAt(u uint32) *FiatCurrencyUpdate {
	fcu.mutation.ResetCreatedAt()
	fcu.mutation.SetCreatedAt(u)
	return fcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fcu *FiatCurrencyUpdate) SetNillableCreatedAt(u *uint32) *FiatCurrencyUpdate {
	if u != nil {
		fcu.SetCreatedAt(*u)
	}
	return fcu
}

// AddCreatedAt adds u to the "created_at" field.
func (fcu *FiatCurrencyUpdate) AddCreatedAt(u int32) *FiatCurrencyUpdate {
	fcu.mutation.AddCreatedAt(u)
	return fcu
}

// SetUpdatedAt sets the "updated_at" field.
func (fcu *FiatCurrencyUpdate) SetUpdatedAt(u uint32) *FiatCurrencyUpdate {
	fcu.mutation.ResetUpdatedAt()
	fcu.mutation.SetUpdatedAt(u)
	return fcu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (fcu *FiatCurrencyUpdate) AddUpdatedAt(u int32) *FiatCurrencyUpdate {
	fcu.mutation.AddUpdatedAt(u)
	return fcu
}

// SetDeletedAt sets the "deleted_at" field.
func (fcu *FiatCurrencyUpdate) SetDeletedAt(u uint32) *FiatCurrencyUpdate {
	fcu.mutation.ResetDeletedAt()
	fcu.mutation.SetDeletedAt(u)
	return fcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fcu *FiatCurrencyUpdate) SetNillableDeletedAt(u *uint32) *FiatCurrencyUpdate {
	if u != nil {
		fcu.SetDeletedAt(*u)
	}
	return fcu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (fcu *FiatCurrencyUpdate) AddDeletedAt(u int32) *FiatCurrencyUpdate {
	fcu.mutation.AddDeletedAt(u)
	return fcu
}

// SetEntID sets the "ent_id" field.
func (fcu *FiatCurrencyUpdate) SetEntID(u uuid.UUID) *FiatCurrencyUpdate {
	fcu.mutation.SetEntID(u)
	return fcu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (fcu *FiatCurrencyUpdate) SetNillableEntID(u *uuid.UUID) *FiatCurrencyUpdate {
	if u != nil {
		fcu.SetEntID(*u)
	}
	return fcu
}

// SetFiatID sets the "fiat_id" field.
func (fcu *FiatCurrencyUpdate) SetFiatID(u uuid.UUID) *FiatCurrencyUpdate {
	fcu.mutation.SetFiatID(u)
	return fcu
}

// SetNillableFiatID sets the "fiat_id" field if the given value is not nil.
func (fcu *FiatCurrencyUpdate) SetNillableFiatID(u *uuid.UUID) *FiatCurrencyUpdate {
	if u != nil {
		fcu.SetFiatID(*u)
	}
	return fcu
}

// ClearFiatID clears the value of the "fiat_id" field.
func (fcu *FiatCurrencyUpdate) ClearFiatID() *FiatCurrencyUpdate {
	fcu.mutation.ClearFiatID()
	return fcu
}

// SetFeedType sets the "feed_type" field.
func (fcu *FiatCurrencyUpdate) SetFeedType(s string) *FiatCurrencyUpdate {
	fcu.mutation.SetFeedType(s)
	return fcu
}

// SetNillableFeedType sets the "feed_type" field if the given value is not nil.
func (fcu *FiatCurrencyUpdate) SetNillableFeedType(s *string) *FiatCurrencyUpdate {
	if s != nil {
		fcu.SetFeedType(*s)
	}
	return fcu
}

// ClearFeedType clears the value of the "feed_type" field.
func (fcu *FiatCurrencyUpdate) ClearFeedType() *FiatCurrencyUpdate {
	fcu.mutation.ClearFeedType()
	return fcu
}

// SetMarketValueLow sets the "market_value_low" field.
func (fcu *FiatCurrencyUpdate) SetMarketValueLow(d decimal.Decimal) *FiatCurrencyUpdate {
	fcu.mutation.SetMarketValueLow(d)
	return fcu
}

// SetNillableMarketValueLow sets the "market_value_low" field if the given value is not nil.
func (fcu *FiatCurrencyUpdate) SetNillableMarketValueLow(d *decimal.Decimal) *FiatCurrencyUpdate {
	if d != nil {
		fcu.SetMarketValueLow(*d)
	}
	return fcu
}

// ClearMarketValueLow clears the value of the "market_value_low" field.
func (fcu *FiatCurrencyUpdate) ClearMarketValueLow() *FiatCurrencyUpdate {
	fcu.mutation.ClearMarketValueLow()
	return fcu
}

// SetMarketValueHigh sets the "market_value_high" field.
func (fcu *FiatCurrencyUpdate) SetMarketValueHigh(d decimal.Decimal) *FiatCurrencyUpdate {
	fcu.mutation.SetMarketValueHigh(d)
	return fcu
}

// SetNillableMarketValueHigh sets the "market_value_high" field if the given value is not nil.
func (fcu *FiatCurrencyUpdate) SetNillableMarketValueHigh(d *decimal.Decimal) *FiatCurrencyUpdate {
	if d != nil {
		fcu.SetMarketValueHigh(*d)
	}
	return fcu
}

// ClearMarketValueHigh clears the value of the "market_value_high" field.
func (fcu *FiatCurrencyUpdate) ClearMarketValueHigh() *FiatCurrencyUpdate {
	fcu.mutation.ClearMarketValueHigh()
	return fcu
}

// Mutation returns the FiatCurrencyMutation object of the builder.
func (fcu *FiatCurrencyUpdate) Mutation() *FiatCurrencyMutation {
	return fcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fcu *FiatCurrencyUpdate) Save(ctx context.Context) (int, error) {
	fcu.defaults()
	return withHooks(ctx, fcu.sqlSave, fcu.mutation, fcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fcu *FiatCurrencyUpdate) SaveX(ctx context.Context) int {
	affected, err := fcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fcu *FiatCurrencyUpdate) Exec(ctx context.Context) error {
	_, err := fcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcu *FiatCurrencyUpdate) ExecX(ctx context.Context) {
	if err := fcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fcu *FiatCurrencyUpdate) defaults() {
	if _, ok := fcu.mutation.UpdatedAt(); !ok {
		v := fiatcurrency.UpdateDefaultUpdatedAt()
		fcu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fcu *FiatCurrencyUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FiatCurrencyUpdate {
	fcu.modifiers = append(fcu.modifiers, modifiers...)
	return fcu
}

func (fcu *FiatCurrencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(fiatcurrency.Table, fiatcurrency.Columns, sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUint32))
	if ps := fcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fcu.mutation.CreatedAt(); ok {
		_spec.SetField(fiatcurrency.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := fcu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(fiatcurrency.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := fcu.mutation.UpdatedAt(); ok {
		_spec.SetField(fiatcurrency.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := fcu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(fiatcurrency.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := fcu.mutation.DeletedAt(); ok {
		_spec.SetField(fiatcurrency.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := fcu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(fiatcurrency.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := fcu.mutation.EntID(); ok {
		_spec.SetField(fiatcurrency.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := fcu.mutation.FiatID(); ok {
		_spec.SetField(fiatcurrency.FieldFiatID, field.TypeUUID, value)
	}
	if fcu.mutation.FiatIDCleared() {
		_spec.ClearField(fiatcurrency.FieldFiatID, field.TypeUUID)
	}
	if value, ok := fcu.mutation.FeedType(); ok {
		_spec.SetField(fiatcurrency.FieldFeedType, field.TypeString, value)
	}
	if fcu.mutation.FeedTypeCleared() {
		_spec.ClearField(fiatcurrency.FieldFeedType, field.TypeString)
	}
	if value, ok := fcu.mutation.MarketValueLow(); ok {
		_spec.SetField(fiatcurrency.FieldMarketValueLow, field.TypeOther, value)
	}
	if fcu.mutation.MarketValueLowCleared() {
		_spec.ClearField(fiatcurrency.FieldMarketValueLow, field.TypeOther)
	}
	if value, ok := fcu.mutation.MarketValueHigh(); ok {
		_spec.SetField(fiatcurrency.FieldMarketValueHigh, field.TypeOther, value)
	}
	if fcu.mutation.MarketValueHighCleared() {
		_spec.ClearField(fiatcurrency.FieldMarketValueHigh, field.TypeOther)
	}
	_spec.AddModifiers(fcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, fcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fiatcurrency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fcu.mutation.done = true
	return n, nil
}

// FiatCurrencyUpdateOne is the builder for updating a single FiatCurrency entity.
type FiatCurrencyUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FiatCurrencyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (fcuo *FiatCurrencyUpdateOne) SetCreatedAt(u uint32) *FiatCurrencyUpdateOne {
	fcuo.mutation.ResetCreatedAt()
	fcuo.mutation.SetCreatedAt(u)
	return fcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fcuo *FiatCurrencyUpdateOne) SetNillableCreatedAt(u *uint32) *FiatCurrencyUpdateOne {
	if u != nil {
		fcuo.SetCreatedAt(*u)
	}
	return fcuo
}

// AddCreatedAt adds u to the "created_at" field.
func (fcuo *FiatCurrencyUpdateOne) AddCreatedAt(u int32) *FiatCurrencyUpdateOne {
	fcuo.mutation.AddCreatedAt(u)
	return fcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fcuo *FiatCurrencyUpdateOne) SetUpdatedAt(u uint32) *FiatCurrencyUpdateOne {
	fcuo.mutation.ResetUpdatedAt()
	fcuo.mutation.SetUpdatedAt(u)
	return fcuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (fcuo *FiatCurrencyUpdateOne) AddUpdatedAt(u int32) *FiatCurrencyUpdateOne {
	fcuo.mutation.AddUpdatedAt(u)
	return fcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (fcuo *FiatCurrencyUpdateOne) SetDeletedAt(u uint32) *FiatCurrencyUpdateOne {
	fcuo.mutation.ResetDeletedAt()
	fcuo.mutation.SetDeletedAt(u)
	return fcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fcuo *FiatCurrencyUpdateOne) SetNillableDeletedAt(u *uint32) *FiatCurrencyUpdateOne {
	if u != nil {
		fcuo.SetDeletedAt(*u)
	}
	return fcuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (fcuo *FiatCurrencyUpdateOne) AddDeletedAt(u int32) *FiatCurrencyUpdateOne {
	fcuo.mutation.AddDeletedAt(u)
	return fcuo
}

// SetEntID sets the "ent_id" field.
func (fcuo *FiatCurrencyUpdateOne) SetEntID(u uuid.UUID) *FiatCurrencyUpdateOne {
	fcuo.mutation.SetEntID(u)
	return fcuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (fcuo *FiatCurrencyUpdateOne) SetNillableEntID(u *uuid.UUID) *FiatCurrencyUpdateOne {
	if u != nil {
		fcuo.SetEntID(*u)
	}
	return fcuo
}

// SetFiatID sets the "fiat_id" field.
func (fcuo *FiatCurrencyUpdateOne) SetFiatID(u uuid.UUID) *FiatCurrencyUpdateOne {
	fcuo.mutation.SetFiatID(u)
	return fcuo
}

// SetNillableFiatID sets the "fiat_id" field if the given value is not nil.
func (fcuo *FiatCurrencyUpdateOne) SetNillableFiatID(u *uuid.UUID) *FiatCurrencyUpdateOne {
	if u != nil {
		fcuo.SetFiatID(*u)
	}
	return fcuo
}

// ClearFiatID clears the value of the "fiat_id" field.
func (fcuo *FiatCurrencyUpdateOne) ClearFiatID() *FiatCurrencyUpdateOne {
	fcuo.mutation.ClearFiatID()
	return fcuo
}

// SetFeedType sets the "feed_type" field.
func (fcuo *FiatCurrencyUpdateOne) SetFeedType(s string) *FiatCurrencyUpdateOne {
	fcuo.mutation.SetFeedType(s)
	return fcuo
}

// SetNillableFeedType sets the "feed_type" field if the given value is not nil.
func (fcuo *FiatCurrencyUpdateOne) SetNillableFeedType(s *string) *FiatCurrencyUpdateOne {
	if s != nil {
		fcuo.SetFeedType(*s)
	}
	return fcuo
}

// ClearFeedType clears the value of the "feed_type" field.
func (fcuo *FiatCurrencyUpdateOne) ClearFeedType() *FiatCurrencyUpdateOne {
	fcuo.mutation.ClearFeedType()
	return fcuo
}

// SetMarketValueLow sets the "market_value_low" field.
func (fcuo *FiatCurrencyUpdateOne) SetMarketValueLow(d decimal.Decimal) *FiatCurrencyUpdateOne {
	fcuo.mutation.SetMarketValueLow(d)
	return fcuo
}

// SetNillableMarketValueLow sets the "market_value_low" field if the given value is not nil.
func (fcuo *FiatCurrencyUpdateOne) SetNillableMarketValueLow(d *decimal.Decimal) *FiatCurrencyUpdateOne {
	if d != nil {
		fcuo.SetMarketValueLow(*d)
	}
	return fcuo
}

// ClearMarketValueLow clears the value of the "market_value_low" field.
func (fcuo *FiatCurrencyUpdateOne) ClearMarketValueLow() *FiatCurrencyUpdateOne {
	fcuo.mutation.ClearMarketValueLow()
	return fcuo
}

// SetMarketValueHigh sets the "market_value_high" field.
func (fcuo *FiatCurrencyUpdateOne) SetMarketValueHigh(d decimal.Decimal) *FiatCurrencyUpdateOne {
	fcuo.mutation.SetMarketValueHigh(d)
	return fcuo
}

// SetNillableMarketValueHigh sets the "market_value_high" field if the given value is not nil.
func (fcuo *FiatCurrencyUpdateOne) SetNillableMarketValueHigh(d *decimal.Decimal) *FiatCurrencyUpdateOne {
	if d != nil {
		fcuo.SetMarketValueHigh(*d)
	}
	return fcuo
}

// ClearMarketValueHigh clears the value of the "market_value_high" field.
func (fcuo *FiatCurrencyUpdateOne) ClearMarketValueHigh() *FiatCurrencyUpdateOne {
	fcuo.mutation.ClearMarketValueHigh()
	return fcuo
}

// Mutation returns the FiatCurrencyMutation object of the builder.
func (fcuo *FiatCurrencyUpdateOne) Mutation() *FiatCurrencyMutation {
	return fcuo.mutation
}

// Where appends a list predicates to the FiatCurrencyUpdate builder.
func (fcuo *FiatCurrencyUpdateOne) Where(ps ...predicate.FiatCurrency) *FiatCurrencyUpdateOne {
	fcuo.mutation.Where(ps...)
	return fcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fcuo *FiatCurrencyUpdateOne) Select(field string, fields ...string) *FiatCurrencyUpdateOne {
	fcuo.fields = append([]string{field}, fields...)
	return fcuo
}

// Save executes the query and returns the updated FiatCurrency entity.
func (fcuo *FiatCurrencyUpdateOne) Save(ctx context.Context) (*FiatCurrency, error) {
	fcuo.defaults()
	return withHooks(ctx, fcuo.sqlSave, fcuo.mutation, fcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fcuo *FiatCurrencyUpdateOne) SaveX(ctx context.Context) *FiatCurrency {
	node, err := fcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fcuo *FiatCurrencyUpdateOne) Exec(ctx context.Context) error {
	_, err := fcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcuo *FiatCurrencyUpdateOne) ExecX(ctx context.Context) {
	if err := fcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fcuo *FiatCurrencyUpdateOne) defaults() {
	if _, ok := fcuo.mutation.UpdatedAt(); !ok {
		v := fiatcurrency.UpdateDefaultUpdatedAt()
		fcuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fcuo *FiatCurrencyUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FiatCurrencyUpdateOne {
	fcuo.modifiers = append(fcuo.modifiers, modifiers...)
	return fcuo
}

func (fcuo *FiatCurrencyUpdateOne) sqlSave(ctx context.Context) (_node *FiatCurrency, err error) {
	_spec := sqlgraph.NewUpdateSpec(fiatcurrency.Table, fiatcurrency.Columns, sqlgraph.NewFieldSpec(fiatcurrency.FieldID, field.TypeUint32))
	id, ok := fcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "FiatCurrency.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fiatcurrency.FieldID)
		for _, f := range fields {
			if !fiatcurrency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != fiatcurrency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fcuo.mutation.CreatedAt(); ok {
		_spec.SetField(fiatcurrency.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := fcuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(fiatcurrency.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := fcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(fiatcurrency.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := fcuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(fiatcurrency.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := fcuo.mutation.DeletedAt(); ok {
		_spec.SetField(fiatcurrency.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := fcuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(fiatcurrency.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := fcuo.mutation.EntID(); ok {
		_spec.SetField(fiatcurrency.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := fcuo.mutation.FiatID(); ok {
		_spec.SetField(fiatcurrency.FieldFiatID, field.TypeUUID, value)
	}
	if fcuo.mutation.FiatIDCleared() {
		_spec.ClearField(fiatcurrency.FieldFiatID, field.TypeUUID)
	}
	if value, ok := fcuo.mutation.FeedType(); ok {
		_spec.SetField(fiatcurrency.FieldFeedType, field.TypeString, value)
	}
	if fcuo.mutation.FeedTypeCleared() {
		_spec.ClearField(fiatcurrency.FieldFeedType, field.TypeString)
	}
	if value, ok := fcuo.mutation.MarketValueLow(); ok {
		_spec.SetField(fiatcurrency.FieldMarketValueLow, field.TypeOther, value)
	}
	if fcuo.mutation.MarketValueLowCleared() {
		_spec.ClearField(fiatcurrency.FieldMarketValueLow, field.TypeOther)
	}
	if value, ok := fcuo.mutation.MarketValueHigh(); ok {
		_spec.SetField(fiatcurrency.FieldMarketValueHigh, field.TypeOther, value)
	}
	if fcuo.mutation.MarketValueHighCleared() {
		_spec.ClearField(fiatcurrency.FieldMarketValueHigh, field.TypeOther)
	}
	_spec.AddModifiers(fcuo.modifiers...)
	_node = &FiatCurrency{config: fcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fiatcurrency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fcuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/exchangerate"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/predicate"
)

// ExchangeRateDelete is the builder for deleting a ExchangeRate entity.
type ExchangeRateDelete struct {
	config
	hooks    []Hook
	mutation *ExchangeRateMutation
}

// Where appends a list predicates to the ExchangeRateDelete builder.
func (erd *ExchangeRateDelete) Where(ps ...predicate.ExchangeRate) *ExchangeRateDelete {
	erd.mutation.Where(ps...)
	return erd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (erd *ExchangeRateDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, erd.sqlExec, erd.mutation, erd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (erd *ExchangeRateDelete) ExecX(ctx context.Context) int {
	n, err := erd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (erd *ExchangeRateDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(exchangerate.Table, sqlgraph.NewFieldSpec(exchangerate.FieldID, field.TypeUint32))
	if ps := erd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, erd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	erd.mutation.done = true
	return affected, err
}

// ExchangeRateDeleteOne is the builder for deleting a single ExchangeRate entity.
type ExchangeRateDeleteOne struct {
	erd *ExchangeRateDelete
}

// Where appends a list predicates to the ExchangeRateDelete builder.
func (erdo *ExchangeRateDeleteOne) Where(ps ...predicate.ExchangeRate) *ExchangeRateDeleteOne {
	erdo.erd.mutation.Where(ps...)
	return erdo
}

// Exec executes the deletion query.
func (erdo *ExchangeRateDeleteOne) Exec(ctx context.Context) error {
	n, err := erdo.erd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{exchangerate.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (erdo *ExchangeRateDeleteOne) ExecX(ctx context.Context) {
	if err := erdo.Exec(ctx); err != nil {
		panic(err)
	}
}

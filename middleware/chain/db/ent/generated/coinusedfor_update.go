// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/coinusedfor"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// CoinUsedForUpdate is the builder for updating CoinUsedFor entities.
type CoinUsedForUpdate struct {
	config
	hooks     []Hook
	mutation  *CoinUsedForMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CoinUsedForUpdate builder.
func (cufu *CoinUsedForUpdate) Where(ps ...predicate.CoinUsedFor) *CoinUsedForUpdate {
	cufu.mutation.Where(ps...)
	return cufu
}

// SetCreatedAt sets the "created_at" field.
func (cufu *CoinUsedForUpdate) SetCreatedAt(u uint32) *CoinUsedForUpdate {
	cufu.mutation.ResetCreatedAt()
	cufu.mutation.SetCreatedAt(u)
	return cufu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cufu *CoinUsedForUpdate) SetNillableCreatedAt(u *uint32) *CoinUsedForUpdate {
	if u != nil {
		cufu.SetCreatedAt(*u)
	}
	return cufu
}

// AddCreatedAt adds u to the "created_at" field.
func (cufu *CoinUsedForUpdate) AddCreatedAt(u int32) *CoinUsedForUpdate {
	cufu.mutation.AddCreatedAt(u)
	return cufu
}

// SetUpdatedAt sets the "updated_at" field.
func (cufu *CoinUsedForUpdate) SetUpdatedAt(u uint32) *CoinUsedForUpdate {
	cufu.mutation.ResetUpdatedAt()
	cufu.mutation.SetUpdatedAt(u)
	return cufu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cufu *CoinUsedForUpdate) AddUpdatedAt(u int32) *CoinUsedForUpdate {
	cufu.mutation.AddUpdatedAt(u)
	return cufu
}

// SetDeletedAt sets the "deleted_at" field.
func (cufu *CoinUsedForUpdate) SetDeletedAt(u uint32) *CoinUsedForUpdate {
	cufu.mutation.ResetDeletedAt()
	cufu.mutation.SetDeletedAt(u)
	return cufu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cufu *CoinUsedForUpdate) SetNillableDeletedAt(u *uint32) *CoinUsedForUpdate {
	if u != nil {
		cufu.SetDeletedAt(*u)
	}
	return cufu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cufu *CoinUsedForUpdate) AddDeletedAt(u int32) *CoinUsedForUpdate {
	cufu.mutation.AddDeletedAt(u)
	return cufu
}

// SetEntID sets the "ent_id" field.
func (cufu *CoinUsedForUpdate) SetEntID(u uuid.UUID) *CoinUsedForUpdate {
	cufu.mutation.SetEntID(u)
	return cufu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cufu *CoinUsedForUpdate) SetNillableEntID(u *uuid.UUID) *CoinUsedForUpdate {
	if u != nil {
		cufu.SetEntID(*u)
	}
	return cufu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (cufu *CoinUsedForUpdate) SetCoinTypeID(u uuid.UUID) *CoinUsedForUpdate {
	cufu.mutation.SetCoinTypeID(u)
	return cufu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (cufu *CoinUsedForUpdate) SetNillableCoinTypeID(u *uuid.UUID) *CoinUsedForUpdate {
	if u != nil {
		cufu.SetCoinTypeID(*u)
	}
	return cufu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (cufu *CoinUsedForUpdate) ClearCoinTypeID() *CoinUsedForUpdate {
	cufu.mutation.ClearCoinTypeID()
	return cufu
}

// SetUsedFor sets the "used_for" field.
func (cufu *CoinUsedForUpdate) SetUsedFor(s string) *CoinUsedForUpdate {
	cufu.mutation.SetUsedFor(s)
	return cufu
}

// SetNillableUsedFor sets the "used_for" field if the given value is not nil.
func (cufu *CoinUsedForUpdate) SetNillableUsedFor(s *string) *CoinUsedForUpdate {
	if s != nil {
		cufu.SetUsedFor(*s)
	}
	return cufu
}

// ClearUsedFor clears the value of the "used_for" field.
func (cufu *CoinUsedForUpdate) ClearUsedFor() *CoinUsedForUpdate {
	cufu.mutation.ClearUsedFor()
	return cufu
}

// SetPriority sets the "priority" field.
func (cufu *CoinUsedForUpdate) SetPriority(u uint32) *CoinUsedForUpdate {
	cufu.mutation.ResetPriority()
	cufu.mutation.SetPriority(u)
	return cufu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (cufu *CoinUsedForUpdate) SetNillablePriority(u *uint32) *CoinUsedForUpdate {
	if u != nil {
		cufu.SetPriority(*u)
	}
	return cufu
}

// AddPriority adds u to the "priority" field.
func (cufu *CoinUsedForUpdate) AddPriority(u int32) *CoinUsedForUpdate {
	cufu.mutation.AddPriority(u)
	return cufu
}

// ClearPriority clears the value of the "priority" field.
func (cufu *CoinUsedForUpdate) ClearPriority() *CoinUsedForUpdate {
	cufu.mutation.ClearPriority()
	return cufu
}

// Mutation returns the CoinUsedForMutation object of the builder.
func (cufu *CoinUsedForUpdate) Mutation() *CoinUsedForMutation {
	return cufu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cufu *CoinUsedForUpdate) Save(ctx context.Context) (int, error) {
	cufu.defaults()
	return withHooks(ctx, cufu.sqlSave, cufu.mutation, cufu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cufu *CoinUsedForUpdate) SaveX(ctx context.Context) int {
	affected, err := cufu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cufu *CoinUsedForUpdate) Exec(ctx context.Context) error {
	_, err := cufu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cufu *CoinUsedForUpdate) ExecX(ctx context.Context) {
	if err := cufu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cufu *CoinUsedForUpdate) defaults() {
	if _, ok := cufu.mutation.UpdatedAt(); !ok {
		v := coinusedfor.UpdateDefaultUpdatedAt()
		cufu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cufu *CoinUsedForUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CoinUsedForUpdate {
	cufu.modifiers = append(cufu.modifiers, modifiers...)
	return cufu
}

func (cufu *CoinUsedForUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(coinusedfor.Table, coinusedfor.Columns, sqlgraph.NewFieldSpec(coinusedfor.FieldID, field.TypeUint32))
	if ps := cufu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cufu.mutation.CreatedAt(); ok {
		_spec.SetField(coinusedfor.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cufu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(coinusedfor.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cufu.mutation.UpdatedAt(); ok {
		_spec.SetField(coinusedfor.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cufu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(coinusedfor.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cufu.mutation.DeletedAt(); ok {
		_spec.SetField(coinusedfor.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cufu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(coinusedfor.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cufu.mutation.EntID(); ok {
		_spec.SetField(coinusedfor.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := cufu.mutation.CoinTypeID(); ok {
		_spec.SetField(coinusedfor.FieldCoinTypeID, field.TypeUUID, value)
	}
	if cufu.mutation.CoinTypeIDCleared() {
		_spec.ClearField(coinusedfor.FieldCoinTypeID, field.TypeUUID)
	}
	if value, ok := cufu.mutation.UsedFor(); ok {
		_spec.SetField(coinusedfor.FieldUsedFor, field.TypeString, value)
	}
	if cufu.mutation.UsedForCleared() {
		_spec.ClearField(coinusedfor.FieldUsedFor, field.TypeString)
	}
	if value, ok := cufu.mutation.Priority(); ok {
		_spec.SetField(coinusedfor.FieldPriority, field.TypeUint32, value)
	}
	if value, ok := cufu.mutation.AddedPriority(); ok {
		_spec.AddField(coinusedfor.FieldPriority, field.TypeUint32, value)
	}
	if cufu.mutation.PriorityCleared() {
		_spec.ClearField(coinusedfor.FieldPriority, field.TypeUint32)
	}
	_spec.AddModifiers(cufu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cufu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coinusedfor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cufu.mutation.done = true
	return n, nil
}

// CoinUsedForUpdateOne is the builder for updating a single CoinUsedFor entity.
type CoinUsedForUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CoinUsedForMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (cufuo *CoinUsedForUpdateOne) SetCreatedAt(u uint32) *CoinUsedForUpdateOne {
	cufuo.mutation.ResetCreatedAt()
	cufuo.mutation.SetCreatedAt(u)
	return cufuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cufuo *CoinUsedForUpdateOne) SetNillableCreatedAt(u *uint32) *CoinUsedForUpdateOne {
	if u != nil {
		cufuo.SetCreatedAt(*u)
	}
	return cufuo
}

// AddCreatedAt adds u to the "created_at" field.
func (cufuo *CoinUsedForUpdateOne) AddCreatedAt(u int32) *CoinUsedForUpdateOne {
	cufuo.mutation.AddCreatedAt(u)
	return cufuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cufuo *CoinUsedForUpdateOne) SetUpdatedAt(u uint32) *CoinUsedForUpdateOne {
	cufuo.mutation.ResetUpdatedAt()
	cufuo.mutation.SetUpdatedAt(u)
	return cufuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cufuo *CoinUsedForUpdateOne) AddUpdatedAt(u int32) *CoinUsedForUpdateOne {
	cufuo.mutation.AddUpdatedAt(u)
	return cufuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cufuo *CoinUsedForUpdateOne) SetDeletedAt(u uint32) *CoinUsedForUpdateOne {
	cufuo.mutation.ResetDeletedAt()
	cufuo.mutation.SetDeletedAt(u)
	return cufuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cufuo *CoinUsedForUpdateOne) SetNillableDeletedAt(u *uint32) *CoinUsedForUpdateOne {
	if u != nil {
		cufuo.SetDeletedAt(*u)
	}
	return cufuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cufuo *CoinUsedForUpdateOne) AddDeletedAt(u int32) *CoinUsedForUpdateOne {
	cufuo.mutation.AddDeletedAt(u)
	return cufuo
}

// SetEntID sets the "ent_id" field.
func (cufuo *CoinUsedForUpdateOne) SetEntID(u uuid.UUID) *CoinUsedForUpdateOne {
	cufuo.mutation.SetEntID(u)
	return cufuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cufuo *CoinUsedForUpdateOne) SetNillableEntID(u *uuid.UUID) *CoinUsedForUpdateOne {
	if u != nil {
		cufuo.SetEntID(*u)
	}
	return cufuo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (cufuo *CoinUsedForUpdateOne) SetCoinTypeID(u uuid.UUID) *CoinUsedForUpdateOne {
	cufuo.mutation.SetCoinTypeID(u)
	return cufuo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (cufuo *CoinUsedForUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *CoinUsedForUpdateOne {
	if u != nil {
		cufuo.SetCoinTypeID(*u)
	}
	return cufuo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (cufuo *CoinUsedForUpdateOne) ClearCoinTypeID() *CoinUsedForUpdateOne {
	cufuo.mutation.ClearCoinTypeID()
	return cufuo
}

// SetUsedFor sets the "used_for" field.
func (cufuo *CoinUsedForUpdateOne) SetUsedFor(s string) *CoinUsedForUpdateOne {
	cufuo.mutation.SetUsedFor(s)
	return cufuo
}

// SetNillableUsedFor sets the "used_for" field if the given value is not nil.
func (cufuo *CoinUsedForUpdateOne) SetNillableUsedFor(s *string) *CoinUsedForUpdateOne {
	if s != nil {
		cufuo.SetUsedFor(*s)
	}
	return cufuo
}

// ClearUsedFor clears the value of the "used_for" field.
func (cufuo *CoinUsedForUpdateOne) ClearUsedFor() *CoinUsedForUpdateOne {
	cufuo.mutation.ClearUsedFor()
	return cufuo
}

// SetPriority sets the "priority" field.
func (cufuo *CoinUsedForUpdateOne) SetPriority(u uint32) *CoinUsedForUpdateOne {
	cufuo.mutation.ResetPriority()
	cufuo.mutation.SetPriority(u)
	return cufuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (cufuo *CoinUsedForUpdateOne) SetNillablePriority(u *uint32) *CoinUsedForUpdateOne {
	if u != nil {
		cufuo.SetPriority(*u)
	}
	return cufuo
}

// AddPriority adds u to the "priority" field.
func (cufuo *CoinUsedForUpdateOne) AddPriority(u int32) *CoinUsedForUpdateOne {
	cufuo.mutation.AddPriority(u)
	return cufuo
}

// ClearPriority clears the value of the "priority" field.
func (cufuo *CoinUsedForUpdateOne) ClearPriority() *CoinUsedForUpdateOne {
	cufuo.mutation.ClearPriority()
	return cufuo
}

// Mutation returns the CoinUsedForMutation object of the builder.
func (cufuo *CoinUsedForUpdateOne) Mutation() *CoinUsedForMutation {
	return cufuo.mutation
}

// Where appends a list predicates to the CoinUsedForUpdate builder.
func (cufuo *CoinUsedForUpdateOne) Where(ps ...predicate.CoinUsedFor) *CoinUsedForUpdateOne {
	cufuo.mutation.Where(ps...)
	return cufuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cufuo *CoinUsedForUpdateOne) Select(field string, fields ...string) *CoinUsedForUpdateOne {
	cufuo.fields = append([]string{field}, fields...)
	return cufuo
}

// Save executes the query and returns the updated CoinUsedFor entity.
func (cufuo *CoinUsedForUpdateOne) Save(ctx context.Context) (*CoinUsedFor, error) {
	cufuo.defaults()
	return withHooks(ctx, cufuo.sqlSave, cufuo.mutation, cufuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cufuo *CoinUsedForUpdateOne) SaveX(ctx context.Context) *CoinUsedFor {
	node, err := cufuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cufuo *CoinUsedForUpdateOne) Exec(ctx context.Context) error {
	_, err := cufuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cufuo *CoinUsedForUpdateOne) ExecX(ctx context.Context) {
	if err := cufuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cufuo *CoinUsedForUpdateOne) defaults() {
	if _, ok := cufuo.mutation.UpdatedAt(); !ok {
		v := coinusedfor.UpdateDefaultUpdatedAt()
		cufuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cufuo *CoinUsedForUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CoinUsedForUpdateOne {
	cufuo.modifiers = append(cufuo.modifiers, modifiers...)
	return cufuo
}

func (cufuo *CoinUsedForUpdateOne) sqlSave(ctx context.Context) (_node *CoinUsedFor, err error) {
	_spec := sqlgraph.NewUpdateSpec(coinusedfor.Table, coinusedfor.Columns, sqlgraph.NewFieldSpec(coinusedfor.FieldID, field.TypeUint32))
	id, ok := cufuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "CoinUsedFor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cufuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coinusedfor.FieldID)
		for _, f := range fields {
			if !coinusedfor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != coinusedfor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cufuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cufuo.mutation.CreatedAt(); ok {
		_spec.SetField(coinusedfor.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cufuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(coinusedfor.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := cufuo.mutation.UpdatedAt(); ok {
		_spec.SetField(coinusedfor.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cufuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(coinusedfor.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := cufuo.mutation.DeletedAt(); ok {
		_spec.SetField(coinusedfor.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cufuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(coinusedfor.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := cufuo.mutation.EntID(); ok {
		_spec.SetField(coinusedfor.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := cufuo.mutation.CoinTypeID(); ok {
		_spec.SetField(coinusedfor.FieldCoinTypeID, field.TypeUUID, value)
	}
	if cufuo.mutation.CoinTypeIDCleared() {
		_spec.ClearField(coinusedfor.FieldCoinTypeID, field.TypeUUID)
	}
	if value, ok := cufuo.mutation.UsedFor(); ok {
		_spec.SetField(coinusedfor.FieldUsedFor, field.TypeString, value)
	}
	if cufuo.mutation.UsedForCleared() {
		_spec.ClearField(coinusedfor.FieldUsedFor, field.TypeString)
	}
	if value, ok := cufuo.mutation.Priority(); ok {
		_spec.SetField(coinusedfor.FieldPriority, field.TypeUint32, value)
	}
	if value, ok := cufuo.mutation.AddedPriority(); ok {
		_spec.AddField(coinusedfor.FieldPriority, field.TypeUint32, value)
	}
	if cufuo.mutation.PriorityCleared() {
		_spec.ClearField(coinusedfor.FieldPriority, field.TypeUint32)
	}
	_spec.AddModifiers(cufuo.modifiers...)
	_node = &CoinUsedFor{config: cufuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cufuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coinusedfor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cufuo.mutation.done = true
	return _node, nil
}

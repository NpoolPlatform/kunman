// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/appfiat"
	"github.com/google/uuid"
)

// AppFiat is the model entity for the AppFiat schema.
type AppFiat struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// FiatID holds the value of the "fiat_id" field.
	FiatID uuid.UUID `json:"fiat_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DisplayNames holds the value of the "display_names" field.
	DisplayNames []string `json:"display_names,omitempty"`
	// Logo holds the value of the "logo" field.
	Logo string `json:"logo,omitempty"`
	// Disabled holds the value of the "disabled" field.
	Disabled bool `json:"disabled,omitempty"`
	// Display holds the value of the "display" field.
	Display bool `json:"display,omitempty"`
	// DisplayIndex holds the value of the "display_index" field.
	DisplayIndex uint32 `json:"display_index,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppFiat) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appfiat.FieldDisplayNames:
			values[i] = new([]byte)
		case appfiat.FieldDisabled, appfiat.FieldDisplay:
			values[i] = new(sql.NullBool)
		case appfiat.FieldID, appfiat.FieldCreatedAt, appfiat.FieldUpdatedAt, appfiat.FieldDeletedAt, appfiat.FieldDisplayIndex:
			values[i] = new(sql.NullInt64)
		case appfiat.FieldName, appfiat.FieldLogo:
			values[i] = new(sql.NullString)
		case appfiat.FieldEntID, appfiat.FieldAppID, appfiat.FieldFiatID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppFiat fields.
func (af *AppFiat) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appfiat.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			af.ID = uint32(value.Int64)
		case appfiat.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				af.CreatedAt = uint32(value.Int64)
			}
		case appfiat.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				af.UpdatedAt = uint32(value.Int64)
			}
		case appfiat.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				af.DeletedAt = uint32(value.Int64)
			}
		case appfiat.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				af.EntID = *value
			}
		case appfiat.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				af.AppID = *value
			}
		case appfiat.FieldFiatID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field fiat_id", values[i])
			} else if value != nil {
				af.FiatID = *value
			}
		case appfiat.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				af.Name = value.String
			}
		case appfiat.FieldDisplayNames:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field display_names", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &af.DisplayNames); err != nil {
					return fmt.Errorf("unmarshal field display_names: %w", err)
				}
			}
		case appfiat.FieldLogo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo", values[i])
			} else if value.Valid {
				af.Logo = value.String
			}
		case appfiat.FieldDisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field disabled", values[i])
			} else if value.Valid {
				af.Disabled = value.Bool
			}
		case appfiat.FieldDisplay:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field display", values[i])
			} else if value.Valid {
				af.Display = value.Bool
			}
		case appfiat.FieldDisplayIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field display_index", values[i])
			} else if value.Valid {
				af.DisplayIndex = uint32(value.Int64)
			}
		default:
			af.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppFiat.
// This includes values selected through modifiers, order, etc.
func (af *AppFiat) Value(name string) (ent.Value, error) {
	return af.selectValues.Get(name)
}

// Update returns a builder for updating this AppFiat.
// Note that you need to call AppFiat.Unwrap() before calling this method if this AppFiat
// was returned from a transaction, and the transaction was committed or rolled back.
func (af *AppFiat) Update() *AppFiatUpdateOne {
	return NewAppFiatClient(af.config).UpdateOne(af)
}

// Unwrap unwraps the AppFiat entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (af *AppFiat) Unwrap() *AppFiat {
	_tx, ok := af.config.driver.(*txDriver)
	if !ok {
		panic("generated: AppFiat is not a transactional entity")
	}
	af.config.driver = _tx.drv
	return af
}

// String implements the fmt.Stringer.
func (af *AppFiat) String() string {
	var builder strings.Builder
	builder.WriteString("AppFiat(")
	builder.WriteString(fmt.Sprintf("id=%v, ", af.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", af.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", af.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", af.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", af.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", af.AppID))
	builder.WriteString(", ")
	builder.WriteString("fiat_id=")
	builder.WriteString(fmt.Sprintf("%v", af.FiatID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(af.Name)
	builder.WriteString(", ")
	builder.WriteString("display_names=")
	builder.WriteString(fmt.Sprintf("%v", af.DisplayNames))
	builder.WriteString(", ")
	builder.WriteString("logo=")
	builder.WriteString(af.Logo)
	builder.WriteString(", ")
	builder.WriteString("disabled=")
	builder.WriteString(fmt.Sprintf("%v", af.Disabled))
	builder.WriteString(", ")
	builder.WriteString("display=")
	builder.WriteString(fmt.Sprintf("%v", af.Display))
	builder.WriteString(", ")
	builder.WriteString("display_index=")
	builder.WriteString(fmt.Sprintf("%v", af.DisplayIndex))
	builder.WriteByte(')')
	return builder.String()
}

// AppFiats is a parsable slice of AppFiat.
type AppFiats []*AppFiat

// Code generated by ent, DO NOT EDIT.

package tran

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Tran {
	return predicate.Tran(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Tran {
	return predicate.Tran(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Tran {
	return predicate.Tran(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Tran {
	return predicate.Tran(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Tran {
	return predicate.Tran(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Tran {
	return predicate.Tran(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Tran {
	return predicate.Tran(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldDeletedAt, v))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldEntID, v))
}

// CoinTypeID applies equality check predicate on the "coin_type_id" field. It's identical to CoinTypeIDEQ.
func CoinTypeID(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldCoinTypeID, v))
}

// FromAccountID applies equality check predicate on the "from_account_id" field. It's identical to FromAccountIDEQ.
func FromAccountID(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldFromAccountID, v))
}

// ToAccountID applies equality check predicate on the "to_account_id" field. It's identical to ToAccountIDEQ.
func ToAccountID(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldToAccountID, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v decimal.Decimal) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldAmount, v))
}

// FeeAmount applies equality check predicate on the "fee_amount" field. It's identical to FeeAmountEQ.
func FeeAmount(v decimal.Decimal) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldFeeAmount, v))
}

// ChainTxID applies equality check predicate on the "chain_tx_id" field. It's identical to ChainTxIDEQ.
func ChainTxID(v string) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldChainTxID, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldState, v))
}

// Extra applies equality check predicate on the "extra" field. It's identical to ExtraEQ.
func Extra(v string) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldExtra, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Tran {
	return predicate.Tran(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Tran {
	return predicate.Tran(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Tran {
	return predicate.Tran(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Tran {
	return predicate.Tran(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Tran {
	return predicate.Tran(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Tran {
	return predicate.Tran(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Tran {
	return predicate.Tran(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Tran {
	return predicate.Tran(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Tran {
	return predicate.Tran(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Tran {
	return predicate.Tran(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Tran {
	return predicate.Tran(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Tran {
	return predicate.Tran(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Tran {
	return predicate.Tran(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Tran {
	return predicate.Tran(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Tran {
	return predicate.Tran(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Tran {
	return predicate.Tran(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Tran {
	return predicate.Tran(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Tran {
	return predicate.Tran(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Tran {
	return predicate.Tran(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Tran {
	return predicate.Tran(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Tran {
	return predicate.Tran(sql.FieldLTE(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldLTE(FieldEntID, v))
}

// CoinTypeIDEQ applies the EQ predicate on the "coin_type_id" field.
func CoinTypeIDEQ(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldCoinTypeID, v))
}

// CoinTypeIDNEQ applies the NEQ predicate on the "coin_type_id" field.
func CoinTypeIDNEQ(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldNEQ(FieldCoinTypeID, v))
}

// CoinTypeIDIn applies the In predicate on the "coin_type_id" field.
func CoinTypeIDIn(vs ...uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldIn(FieldCoinTypeID, vs...))
}

// CoinTypeIDNotIn applies the NotIn predicate on the "coin_type_id" field.
func CoinTypeIDNotIn(vs ...uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldNotIn(FieldCoinTypeID, vs...))
}

// CoinTypeIDGT applies the GT predicate on the "coin_type_id" field.
func CoinTypeIDGT(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldGT(FieldCoinTypeID, v))
}

// CoinTypeIDGTE applies the GTE predicate on the "coin_type_id" field.
func CoinTypeIDGTE(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldGTE(FieldCoinTypeID, v))
}

// CoinTypeIDLT applies the LT predicate on the "coin_type_id" field.
func CoinTypeIDLT(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldLT(FieldCoinTypeID, v))
}

// CoinTypeIDLTE applies the LTE predicate on the "coin_type_id" field.
func CoinTypeIDLTE(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldLTE(FieldCoinTypeID, v))
}

// CoinTypeIDIsNil applies the IsNil predicate on the "coin_type_id" field.
func CoinTypeIDIsNil() predicate.Tran {
	return predicate.Tran(sql.FieldIsNull(FieldCoinTypeID))
}

// CoinTypeIDNotNil applies the NotNil predicate on the "coin_type_id" field.
func CoinTypeIDNotNil() predicate.Tran {
	return predicate.Tran(sql.FieldNotNull(FieldCoinTypeID))
}

// FromAccountIDEQ applies the EQ predicate on the "from_account_id" field.
func FromAccountIDEQ(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldFromAccountID, v))
}

// FromAccountIDNEQ applies the NEQ predicate on the "from_account_id" field.
func FromAccountIDNEQ(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldNEQ(FieldFromAccountID, v))
}

// FromAccountIDIn applies the In predicate on the "from_account_id" field.
func FromAccountIDIn(vs ...uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldIn(FieldFromAccountID, vs...))
}

// FromAccountIDNotIn applies the NotIn predicate on the "from_account_id" field.
func FromAccountIDNotIn(vs ...uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldNotIn(FieldFromAccountID, vs...))
}

// FromAccountIDGT applies the GT predicate on the "from_account_id" field.
func FromAccountIDGT(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldGT(FieldFromAccountID, v))
}

// FromAccountIDGTE applies the GTE predicate on the "from_account_id" field.
func FromAccountIDGTE(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldGTE(FieldFromAccountID, v))
}

// FromAccountIDLT applies the LT predicate on the "from_account_id" field.
func FromAccountIDLT(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldLT(FieldFromAccountID, v))
}

// FromAccountIDLTE applies the LTE predicate on the "from_account_id" field.
func FromAccountIDLTE(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldLTE(FieldFromAccountID, v))
}

// FromAccountIDIsNil applies the IsNil predicate on the "from_account_id" field.
func FromAccountIDIsNil() predicate.Tran {
	return predicate.Tran(sql.FieldIsNull(FieldFromAccountID))
}

// FromAccountIDNotNil applies the NotNil predicate on the "from_account_id" field.
func FromAccountIDNotNil() predicate.Tran {
	return predicate.Tran(sql.FieldNotNull(FieldFromAccountID))
}

// ToAccountIDEQ applies the EQ predicate on the "to_account_id" field.
func ToAccountIDEQ(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldToAccountID, v))
}

// ToAccountIDNEQ applies the NEQ predicate on the "to_account_id" field.
func ToAccountIDNEQ(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldNEQ(FieldToAccountID, v))
}

// ToAccountIDIn applies the In predicate on the "to_account_id" field.
func ToAccountIDIn(vs ...uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldIn(FieldToAccountID, vs...))
}

// ToAccountIDNotIn applies the NotIn predicate on the "to_account_id" field.
func ToAccountIDNotIn(vs ...uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldNotIn(FieldToAccountID, vs...))
}

// ToAccountIDGT applies the GT predicate on the "to_account_id" field.
func ToAccountIDGT(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldGT(FieldToAccountID, v))
}

// ToAccountIDGTE applies the GTE predicate on the "to_account_id" field.
func ToAccountIDGTE(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldGTE(FieldToAccountID, v))
}

// ToAccountIDLT applies the LT predicate on the "to_account_id" field.
func ToAccountIDLT(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldLT(FieldToAccountID, v))
}

// ToAccountIDLTE applies the LTE predicate on the "to_account_id" field.
func ToAccountIDLTE(v uuid.UUID) predicate.Tran {
	return predicate.Tran(sql.FieldLTE(FieldToAccountID, v))
}

// ToAccountIDIsNil applies the IsNil predicate on the "to_account_id" field.
func ToAccountIDIsNil() predicate.Tran {
	return predicate.Tran(sql.FieldIsNull(FieldToAccountID))
}

// ToAccountIDNotNil applies the NotNil predicate on the "to_account_id" field.
func ToAccountIDNotNil() predicate.Tran {
	return predicate.Tran(sql.FieldNotNull(FieldToAccountID))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v decimal.Decimal) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v decimal.Decimal) predicate.Tran {
	return predicate.Tran(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...decimal.Decimal) predicate.Tran {
	return predicate.Tran(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...decimal.Decimal) predicate.Tran {
	return predicate.Tran(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v decimal.Decimal) predicate.Tran {
	return predicate.Tran(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v decimal.Decimal) predicate.Tran {
	return predicate.Tran(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v decimal.Decimal) predicate.Tran {
	return predicate.Tran(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v decimal.Decimal) predicate.Tran {
	return predicate.Tran(sql.FieldLTE(FieldAmount, v))
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.Tran {
	return predicate.Tran(sql.FieldIsNull(FieldAmount))
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.Tran {
	return predicate.Tran(sql.FieldNotNull(FieldAmount))
}

// FeeAmountEQ applies the EQ predicate on the "fee_amount" field.
func FeeAmountEQ(v decimal.Decimal) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldFeeAmount, v))
}

// FeeAmountNEQ applies the NEQ predicate on the "fee_amount" field.
func FeeAmountNEQ(v decimal.Decimal) predicate.Tran {
	return predicate.Tran(sql.FieldNEQ(FieldFeeAmount, v))
}

// FeeAmountIn applies the In predicate on the "fee_amount" field.
func FeeAmountIn(vs ...decimal.Decimal) predicate.Tran {
	return predicate.Tran(sql.FieldIn(FieldFeeAmount, vs...))
}

// FeeAmountNotIn applies the NotIn predicate on the "fee_amount" field.
func FeeAmountNotIn(vs ...decimal.Decimal) predicate.Tran {
	return predicate.Tran(sql.FieldNotIn(FieldFeeAmount, vs...))
}

// FeeAmountGT applies the GT predicate on the "fee_amount" field.
func FeeAmountGT(v decimal.Decimal) predicate.Tran {
	return predicate.Tran(sql.FieldGT(FieldFeeAmount, v))
}

// FeeAmountGTE applies the GTE predicate on the "fee_amount" field.
func FeeAmountGTE(v decimal.Decimal) predicate.Tran {
	return predicate.Tran(sql.FieldGTE(FieldFeeAmount, v))
}

// FeeAmountLT applies the LT predicate on the "fee_amount" field.
func FeeAmountLT(v decimal.Decimal) predicate.Tran {
	return predicate.Tran(sql.FieldLT(FieldFeeAmount, v))
}

// FeeAmountLTE applies the LTE predicate on the "fee_amount" field.
func FeeAmountLTE(v decimal.Decimal) predicate.Tran {
	return predicate.Tran(sql.FieldLTE(FieldFeeAmount, v))
}

// FeeAmountIsNil applies the IsNil predicate on the "fee_amount" field.
func FeeAmountIsNil() predicate.Tran {
	return predicate.Tran(sql.FieldIsNull(FieldFeeAmount))
}

// FeeAmountNotNil applies the NotNil predicate on the "fee_amount" field.
func FeeAmountNotNil() predicate.Tran {
	return predicate.Tran(sql.FieldNotNull(FieldFeeAmount))
}

// ChainTxIDEQ applies the EQ predicate on the "chain_tx_id" field.
func ChainTxIDEQ(v string) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldChainTxID, v))
}

// ChainTxIDNEQ applies the NEQ predicate on the "chain_tx_id" field.
func ChainTxIDNEQ(v string) predicate.Tran {
	return predicate.Tran(sql.FieldNEQ(FieldChainTxID, v))
}

// ChainTxIDIn applies the In predicate on the "chain_tx_id" field.
func ChainTxIDIn(vs ...string) predicate.Tran {
	return predicate.Tran(sql.FieldIn(FieldChainTxID, vs...))
}

// ChainTxIDNotIn applies the NotIn predicate on the "chain_tx_id" field.
func ChainTxIDNotIn(vs ...string) predicate.Tran {
	return predicate.Tran(sql.FieldNotIn(FieldChainTxID, vs...))
}

// ChainTxIDGT applies the GT predicate on the "chain_tx_id" field.
func ChainTxIDGT(v string) predicate.Tran {
	return predicate.Tran(sql.FieldGT(FieldChainTxID, v))
}

// ChainTxIDGTE applies the GTE predicate on the "chain_tx_id" field.
func ChainTxIDGTE(v string) predicate.Tran {
	return predicate.Tran(sql.FieldGTE(FieldChainTxID, v))
}

// ChainTxIDLT applies the LT predicate on the "chain_tx_id" field.
func ChainTxIDLT(v string) predicate.Tran {
	return predicate.Tran(sql.FieldLT(FieldChainTxID, v))
}

// ChainTxIDLTE applies the LTE predicate on the "chain_tx_id" field.
func ChainTxIDLTE(v string) predicate.Tran {
	return predicate.Tran(sql.FieldLTE(FieldChainTxID, v))
}

// ChainTxIDContains applies the Contains predicate on the "chain_tx_id" field.
func ChainTxIDContains(v string) predicate.Tran {
	return predicate.Tran(sql.FieldContains(FieldChainTxID, v))
}

// ChainTxIDHasPrefix applies the HasPrefix predicate on the "chain_tx_id" field.
func ChainTxIDHasPrefix(v string) predicate.Tran {
	return predicate.Tran(sql.FieldHasPrefix(FieldChainTxID, v))
}

// ChainTxIDHasSuffix applies the HasSuffix predicate on the "chain_tx_id" field.
func ChainTxIDHasSuffix(v string) predicate.Tran {
	return predicate.Tran(sql.FieldHasSuffix(FieldChainTxID, v))
}

// ChainTxIDIsNil applies the IsNil predicate on the "chain_tx_id" field.
func ChainTxIDIsNil() predicate.Tran {
	return predicate.Tran(sql.FieldIsNull(FieldChainTxID))
}

// ChainTxIDNotNil applies the NotNil predicate on the "chain_tx_id" field.
func ChainTxIDNotNil() predicate.Tran {
	return predicate.Tran(sql.FieldNotNull(FieldChainTxID))
}

// ChainTxIDEqualFold applies the EqualFold predicate on the "chain_tx_id" field.
func ChainTxIDEqualFold(v string) predicate.Tran {
	return predicate.Tran(sql.FieldEqualFold(FieldChainTxID, v))
}

// ChainTxIDContainsFold applies the ContainsFold predicate on the "chain_tx_id" field.
func ChainTxIDContainsFold(v string) predicate.Tran {
	return predicate.Tran(sql.FieldContainsFold(FieldChainTxID, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.Tran {
	return predicate.Tran(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.Tran {
	return predicate.Tran(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.Tran {
	return predicate.Tran(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.Tran {
	return predicate.Tran(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.Tran {
	return predicate.Tran(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.Tran {
	return predicate.Tran(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.Tran {
	return predicate.Tran(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.Tran {
	return predicate.Tran(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.Tran {
	return predicate.Tran(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.Tran {
	return predicate.Tran(sql.FieldHasSuffix(FieldState, v))
}

// StateIsNil applies the IsNil predicate on the "state" field.
func StateIsNil() predicate.Tran {
	return predicate.Tran(sql.FieldIsNull(FieldState))
}

// StateNotNil applies the NotNil predicate on the "state" field.
func StateNotNil() predicate.Tran {
	return predicate.Tran(sql.FieldNotNull(FieldState))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.Tran {
	return predicate.Tran(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.Tran {
	return predicate.Tran(sql.FieldContainsFold(FieldState, v))
}

// ExtraEQ applies the EQ predicate on the "extra" field.
func ExtraEQ(v string) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldExtra, v))
}

// ExtraNEQ applies the NEQ predicate on the "extra" field.
func ExtraNEQ(v string) predicate.Tran {
	return predicate.Tran(sql.FieldNEQ(FieldExtra, v))
}

// ExtraIn applies the In predicate on the "extra" field.
func ExtraIn(vs ...string) predicate.Tran {
	return predicate.Tran(sql.FieldIn(FieldExtra, vs...))
}

// ExtraNotIn applies the NotIn predicate on the "extra" field.
func ExtraNotIn(vs ...string) predicate.Tran {
	return predicate.Tran(sql.FieldNotIn(FieldExtra, vs...))
}

// ExtraGT applies the GT predicate on the "extra" field.
func ExtraGT(v string) predicate.Tran {
	return predicate.Tran(sql.FieldGT(FieldExtra, v))
}

// ExtraGTE applies the GTE predicate on the "extra" field.
func ExtraGTE(v string) predicate.Tran {
	return predicate.Tran(sql.FieldGTE(FieldExtra, v))
}

// ExtraLT applies the LT predicate on the "extra" field.
func ExtraLT(v string) predicate.Tran {
	return predicate.Tran(sql.FieldLT(FieldExtra, v))
}

// ExtraLTE applies the LTE predicate on the "extra" field.
func ExtraLTE(v string) predicate.Tran {
	return predicate.Tran(sql.FieldLTE(FieldExtra, v))
}

// ExtraContains applies the Contains predicate on the "extra" field.
func ExtraContains(v string) predicate.Tran {
	return predicate.Tran(sql.FieldContains(FieldExtra, v))
}

// ExtraHasPrefix applies the HasPrefix predicate on the "extra" field.
func ExtraHasPrefix(v string) predicate.Tran {
	return predicate.Tran(sql.FieldHasPrefix(FieldExtra, v))
}

// ExtraHasSuffix applies the HasSuffix predicate on the "extra" field.
func ExtraHasSuffix(v string) predicate.Tran {
	return predicate.Tran(sql.FieldHasSuffix(FieldExtra, v))
}

// ExtraIsNil applies the IsNil predicate on the "extra" field.
func ExtraIsNil() predicate.Tran {
	return predicate.Tran(sql.FieldIsNull(FieldExtra))
}

// ExtraNotNil applies the NotNil predicate on the "extra" field.
func ExtraNotNil() predicate.Tran {
	return predicate.Tran(sql.FieldNotNull(FieldExtra))
}

// ExtraEqualFold applies the EqualFold predicate on the "extra" field.
func ExtraEqualFold(v string) predicate.Tran {
	return predicate.Tran(sql.FieldEqualFold(FieldExtra, v))
}

// ExtraContainsFold applies the ContainsFold predicate on the "extra" field.
func ExtraContainsFold(v string) predicate.Tran {
	return predicate.Tran(sql.FieldContainsFold(FieldExtra, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Tran {
	return predicate.Tran(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Tran {
	return predicate.Tran(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Tran {
	return predicate.Tran(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Tran {
	return predicate.Tran(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Tran {
	return predicate.Tran(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Tran {
	return predicate.Tran(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Tran {
	return predicate.Tran(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Tran {
	return predicate.Tran(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Tran {
	return predicate.Tran(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Tran {
	return predicate.Tran(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Tran {
	return predicate.Tran(sql.FieldHasSuffix(FieldType, v))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.Tran {
	return predicate.Tran(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.Tran {
	return predicate.Tran(sql.FieldNotNull(FieldType))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Tran {
	return predicate.Tran(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Tran {
	return predicate.Tran(sql.FieldContainsFold(FieldType, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Tran) predicate.Tran {
	return predicate.Tran(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Tran) predicate.Tran {
	return predicate.Tran(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Tran) predicate.Tran {
	return predicate.Tran(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/coinusedfor"
	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated/predicate"
)

// CoinUsedForDelete is the builder for deleting a CoinUsedFor entity.
type CoinUsedForDelete struct {
	config
	hooks    []Hook
	mutation *CoinUsedForMutation
}

// Where appends a list predicates to the CoinUsedForDelete builder.
func (cufd *CoinUsedForDelete) Where(ps ...predicate.CoinUsedFor) *CoinUsedForDelete {
	cufd.mutation.Where(ps...)
	return cufd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cufd *CoinUsedForDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cufd.sqlExec, cufd.mutation, cufd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cufd *CoinUsedForDelete) ExecX(ctx context.Context) int {
	n, err := cufd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cufd *CoinUsedForDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(coinusedfor.Table, sqlgraph.NewFieldSpec(coinusedfor.FieldID, field.TypeUint32))
	if ps := cufd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cufd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cufd.mutation.done = true
	return affected, err
}

// CoinUsedForDeleteOne is the builder for deleting a single CoinUsedFor entity.
type CoinUsedForDeleteOne struct {
	cufd *CoinUsedForDelete
}

// Where appends a list predicates to the CoinUsedForDelete builder.
func (cufdo *CoinUsedForDeleteOne) Where(ps ...predicate.CoinUsedFor) *CoinUsedForDeleteOne {
	cufdo.cufd.mutation.Where(ps...)
	return cufdo
}

// Exec executes the deletion query.
func (cufdo *CoinUsedForDeleteOne) Exec(ctx context.Context) error {
	n, err := cufdo.cufd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{coinusedfor.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cufdo *CoinUsedForDeleteOne) ExecX(ctx context.Context) {
	if err := cufdo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"

	"github.com/NpoolPlatform/kunman/middleware/chain/db/ent/generated"

	"entgo.io/ent/entql"
	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns a formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return privacy.Allowf(format, a...)
}

// Denyf returns a formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return privacy.Denyf(format, a...)
}

// Skipf returns a formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return privacy.Skipf(format, a...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
	// MutationRuleFunc type is an adapter which allows the use of
	// ordinary functions as mutation rules.
	MutationRuleFunc = privacy.MutationRuleFunc

	// QueryMutationRule is an interface which groups query and mutation rules.
	QueryMutationRule = privacy.QueryMutationRule
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, generated.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	return f(ctx, q)
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return privacy.AlwaysAllowRule()
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return privacy.AlwaysDenyRule()
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return privacy.ContextQueryMutationRule(eval)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op generated.Op) MutationRule {
	return privacy.OnMutationOperation(rule, op)
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op generated.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m generated.Mutation) error {
		return Denyf("generated/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The AppCoinQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppCoinQueryRuleFunc func(context.Context, *generated.AppCoinQuery) error

// EvalQuery return f(ctx, q).
func (f AppCoinQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppCoinQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppCoinQuery", q)
}

// The AppCoinMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppCoinMutationRuleFunc func(context.Context, *generated.AppCoinMutation) error

// EvalMutation calls f(ctx, m).
func (f AppCoinMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppCoinMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppCoinMutation", m)
}

// The AppFiatQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppFiatQueryRuleFunc func(context.Context, *generated.AppFiatQuery) error

// EvalQuery return f(ctx, q).
func (f AppFiatQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppFiatQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppFiatQuery", q)
}

// The AppFiatMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppFiatMutationRuleFunc func(context.Context, *generated.AppFiatMutation) error

// EvalMutation calls f(ctx, m).
func (f AppFiatMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppFiatMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppFiatMutation", m)
}

// The ChainBaseQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ChainBaseQueryRuleFunc func(context.Context, *generated.ChainBaseQuery) error

// EvalQuery return f(ctx, q).
func (f ChainBaseQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ChainBaseQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.ChainBaseQuery", q)
}

// The ChainBaseMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ChainBaseMutationRuleFunc func(context.Context, *generated.ChainBaseMutation) error

// EvalMutation calls f(ctx, m).
func (f ChainBaseMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.ChainBaseMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.ChainBaseMutation", m)
}

// The CoinBaseQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CoinBaseQueryRuleFunc func(context.Context, *generated.CoinBaseQuery) error

// EvalQuery return f(ctx, q).
func (f CoinBaseQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.CoinBaseQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.CoinBaseQuery", q)
}

// The CoinBaseMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CoinBaseMutationRuleFunc func(context.Context, *generated.CoinBaseMutation) error

// EvalMutation calls f(ctx, m).
func (f CoinBaseMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.CoinBaseMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.CoinBaseMutation", m)
}

// The CoinDescriptionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CoinDescriptionQueryRuleFunc func(context.Context, *generated.CoinDescriptionQuery) error

// EvalQuery return f(ctx, q).
func (f CoinDescriptionQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.CoinDescriptionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.CoinDescriptionQuery", q)
}

// The CoinDescriptionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CoinDescriptionMutationRuleFunc func(context.Context, *generated.CoinDescriptionMutation) error

// EvalMutation calls f(ctx, m).
func (f CoinDescriptionMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.CoinDescriptionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.CoinDescriptionMutation", m)
}

// The CoinExtraQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CoinExtraQueryRuleFunc func(context.Context, *generated.CoinExtraQuery) error

// EvalQuery return f(ctx, q).
func (f CoinExtraQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.CoinExtraQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.CoinExtraQuery", q)
}

// The CoinExtraMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CoinExtraMutationRuleFunc func(context.Context, *generated.CoinExtraMutation) error

// EvalMutation calls f(ctx, m).
func (f CoinExtraMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.CoinExtraMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.CoinExtraMutation", m)
}

// The CoinFiatQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CoinFiatQueryRuleFunc func(context.Context, *generated.CoinFiatQuery) error

// EvalQuery return f(ctx, q).
func (f CoinFiatQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.CoinFiatQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.CoinFiatQuery", q)
}

// The CoinFiatMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CoinFiatMutationRuleFunc func(context.Context, *generated.CoinFiatMutation) error

// EvalMutation calls f(ctx, m).
func (f CoinFiatMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.CoinFiatMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.CoinFiatMutation", m)
}

// The CoinFiatCurrencyQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CoinFiatCurrencyQueryRuleFunc func(context.Context, *generated.CoinFiatCurrencyQuery) error

// EvalQuery return f(ctx, q).
func (f CoinFiatCurrencyQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.CoinFiatCurrencyQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.CoinFiatCurrencyQuery", q)
}

// The CoinFiatCurrencyMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CoinFiatCurrencyMutationRuleFunc func(context.Context, *generated.CoinFiatCurrencyMutation) error

// EvalMutation calls f(ctx, m).
func (f CoinFiatCurrencyMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.CoinFiatCurrencyMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.CoinFiatCurrencyMutation", m)
}

// The CoinFiatCurrencyHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CoinFiatCurrencyHistoryQueryRuleFunc func(context.Context, *generated.CoinFiatCurrencyHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f CoinFiatCurrencyHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.CoinFiatCurrencyHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.CoinFiatCurrencyHistoryQuery", q)
}

// The CoinFiatCurrencyHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CoinFiatCurrencyHistoryMutationRuleFunc func(context.Context, *generated.CoinFiatCurrencyHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f CoinFiatCurrencyHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.CoinFiatCurrencyHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.CoinFiatCurrencyHistoryMutation", m)
}

// The CoinUsedForQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CoinUsedForQueryRuleFunc func(context.Context, *generated.CoinUsedForQuery) error

// EvalQuery return f(ctx, q).
func (f CoinUsedForQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.CoinUsedForQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.CoinUsedForQuery", q)
}

// The CoinUsedForMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CoinUsedForMutationRuleFunc func(context.Context, *generated.CoinUsedForMutation) error

// EvalMutation calls f(ctx, m).
func (f CoinUsedForMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.CoinUsedForMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.CoinUsedForMutation", m)
}

// The CurrencyQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CurrencyQueryRuleFunc func(context.Context, *generated.CurrencyQuery) error

// EvalQuery return f(ctx, q).
func (f CurrencyQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.CurrencyQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.CurrencyQuery", q)
}

// The CurrencyMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CurrencyMutationRuleFunc func(context.Context, *generated.CurrencyMutation) error

// EvalMutation calls f(ctx, m).
func (f CurrencyMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.CurrencyMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.CurrencyMutation", m)
}

// The CurrencyFeedQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CurrencyFeedQueryRuleFunc func(context.Context, *generated.CurrencyFeedQuery) error

// EvalQuery return f(ctx, q).
func (f CurrencyFeedQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.CurrencyFeedQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.CurrencyFeedQuery", q)
}

// The CurrencyFeedMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CurrencyFeedMutationRuleFunc func(context.Context, *generated.CurrencyFeedMutation) error

// EvalMutation calls f(ctx, m).
func (f CurrencyFeedMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.CurrencyFeedMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.CurrencyFeedMutation", m)
}

// The CurrencyHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CurrencyHistoryQueryRuleFunc func(context.Context, *generated.CurrencyHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f CurrencyHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.CurrencyHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.CurrencyHistoryQuery", q)
}

// The CurrencyHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CurrencyHistoryMutationRuleFunc func(context.Context, *generated.CurrencyHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f CurrencyHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.CurrencyHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.CurrencyHistoryMutation", m)
}

// The ExchangeRateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ExchangeRateQueryRuleFunc func(context.Context, *generated.ExchangeRateQuery) error

// EvalQuery return f(ctx, q).
func (f ExchangeRateQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ExchangeRateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.ExchangeRateQuery", q)
}

// The ExchangeRateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ExchangeRateMutationRuleFunc func(context.Context, *generated.ExchangeRateMutation) error

// EvalMutation calls f(ctx, m).
func (f ExchangeRateMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.ExchangeRateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.ExchangeRateMutation", m)
}

// The FiatQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FiatQueryRuleFunc func(context.Context, *generated.FiatQuery) error

// EvalQuery return f(ctx, q).
func (f FiatQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.FiatQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.FiatQuery", q)
}

// The FiatMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FiatMutationRuleFunc func(context.Context, *generated.FiatMutation) error

// EvalMutation calls f(ctx, m).
func (f FiatMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.FiatMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.FiatMutation", m)
}

// The FiatCurrencyQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FiatCurrencyQueryRuleFunc func(context.Context, *generated.FiatCurrencyQuery) error

// EvalQuery return f(ctx, q).
func (f FiatCurrencyQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.FiatCurrencyQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.FiatCurrencyQuery", q)
}

// The FiatCurrencyMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FiatCurrencyMutationRuleFunc func(context.Context, *generated.FiatCurrencyMutation) error

// EvalMutation calls f(ctx, m).
func (f FiatCurrencyMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.FiatCurrencyMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.FiatCurrencyMutation", m)
}

// The FiatCurrencyFeedQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FiatCurrencyFeedQueryRuleFunc func(context.Context, *generated.FiatCurrencyFeedQuery) error

// EvalQuery return f(ctx, q).
func (f FiatCurrencyFeedQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.FiatCurrencyFeedQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.FiatCurrencyFeedQuery", q)
}

// The FiatCurrencyFeedMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FiatCurrencyFeedMutationRuleFunc func(context.Context, *generated.FiatCurrencyFeedMutation) error

// EvalMutation calls f(ctx, m).
func (f FiatCurrencyFeedMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.FiatCurrencyFeedMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.FiatCurrencyFeedMutation", m)
}

// The FiatCurrencyHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FiatCurrencyHistoryQueryRuleFunc func(context.Context, *generated.FiatCurrencyHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f FiatCurrencyHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.FiatCurrencyHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.FiatCurrencyHistoryQuery", q)
}

// The FiatCurrencyHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FiatCurrencyHistoryMutationRuleFunc func(context.Context, *generated.FiatCurrencyHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f FiatCurrencyHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.FiatCurrencyHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.FiatCurrencyHistoryMutation", m)
}

// The SettingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SettingQueryRuleFunc func(context.Context, *generated.SettingQuery) error

// EvalQuery return f(ctx, q).
func (f SettingQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.SettingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.SettingQuery", q)
}

// The SettingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SettingMutationRuleFunc func(context.Context, *generated.SettingMutation) error

// EvalMutation calls f(ctx, m).
func (f SettingMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.SettingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.SettingMutation", m)
}

// The TranQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TranQueryRuleFunc func(context.Context, *generated.TranQuery) error

// EvalQuery return f(ctx, q).
func (f TranQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.TranQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.TranQuery", q)
}

// The TranMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TranMutationRuleFunc func(context.Context, *generated.TranMutation) error

// EvalMutation calls f(ctx, m).
func (f TranMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.TranMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.TranMutation", m)
}

type (
	// Filter is the interface that wraps the Where function
	// for filtering nodes in queries and mutations.
	Filter interface {
		// Where applies a filter on the executed query/mutation.
		Where(entql.P)
	}

	// The FilterFunc type is an adapter that allows the use of ordinary
	// functions as filters for query and mutation types.
	FilterFunc func(context.Context, Filter) error
)

// EvalQuery calls f(ctx, q) if the query implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	fr, err := queryFilter(q)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

// EvalMutation calls f(ctx, q) if the mutation implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	fr, err := mutationFilter(m)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

var _ QueryMutationRule = FilterFunc(nil)

func queryFilter(q generated.Query) (Filter, error) {
	switch q := q.(type) {
	case *generated.AppCoinQuery:
		return q.Filter(), nil
	case *generated.AppFiatQuery:
		return q.Filter(), nil
	case *generated.ChainBaseQuery:
		return q.Filter(), nil
	case *generated.CoinBaseQuery:
		return q.Filter(), nil
	case *generated.CoinDescriptionQuery:
		return q.Filter(), nil
	case *generated.CoinExtraQuery:
		return q.Filter(), nil
	case *generated.CoinFiatQuery:
		return q.Filter(), nil
	case *generated.CoinFiatCurrencyQuery:
		return q.Filter(), nil
	case *generated.CoinFiatCurrencyHistoryQuery:
		return q.Filter(), nil
	case *generated.CoinUsedForQuery:
		return q.Filter(), nil
	case *generated.CurrencyQuery:
		return q.Filter(), nil
	case *generated.CurrencyFeedQuery:
		return q.Filter(), nil
	case *generated.CurrencyHistoryQuery:
		return q.Filter(), nil
	case *generated.ExchangeRateQuery:
		return q.Filter(), nil
	case *generated.FiatQuery:
		return q.Filter(), nil
	case *generated.FiatCurrencyQuery:
		return q.Filter(), nil
	case *generated.FiatCurrencyFeedQuery:
		return q.Filter(), nil
	case *generated.FiatCurrencyHistoryQuery:
		return q.Filter(), nil
	case *generated.SettingQuery:
		return q.Filter(), nil
	case *generated.TranQuery:
		return q.Filter(), nil
	default:
		return nil, Denyf("generated/privacy: unexpected query type %T for query filter", q)
	}
}

func mutationFilter(m generated.Mutation) (Filter, error) {
	switch m := m.(type) {
	case *generated.AppCoinMutation:
		return m.Filter(), nil
	case *generated.AppFiatMutation:
		return m.Filter(), nil
	case *generated.ChainBaseMutation:
		return m.Filter(), nil
	case *generated.CoinBaseMutation:
		return m.Filter(), nil
	case *generated.CoinDescriptionMutation:
		return m.Filter(), nil
	case *generated.CoinExtraMutation:
		return m.Filter(), nil
	case *generated.CoinFiatMutation:
		return m.Filter(), nil
	case *generated.CoinFiatCurrencyMutation:
		return m.Filter(), nil
	case *generated.CoinFiatCurrencyHistoryMutation:
		return m.Filter(), nil
	case *generated.CoinUsedForMutation:
		return m.Filter(), nil
	case *generated.CurrencyMutation:
		return m.Filter(), nil
	case *generated.CurrencyFeedMutation:
		return m.Filter(), nil
	case *generated.CurrencyHistoryMutation:
		return m.Filter(), nil
	case *generated.ExchangeRateMutation:
		return m.Filter(), nil
	case *generated.FiatMutation:
		return m.Filter(), nil
	case *generated.FiatCurrencyMutation:
		return m.Filter(), nil
	case *generated.FiatCurrencyFeedMutation:
		return m.Filter(), nil
	case *generated.FiatCurrencyHistoryMutation:
		return m.Filter(), nil
	case *generated.SettingMutation:
		return m.Filter(), nil
	case *generated.TranMutation:
		return m.Filter(), nil
	default:
		return nil, Denyf("generated/privacy: unexpected mutation type %T for mutation filter", m)
	}
}

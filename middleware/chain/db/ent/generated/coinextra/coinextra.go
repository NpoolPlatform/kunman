// Code generated by ent, DO NOT EDIT.

package coinextra

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the coinextra type in the database.
	Label = "coin_extra"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldCoinTypeID holds the string denoting the coin_type_id field in the database.
	FieldCoinTypeID = "coin_type_id"
	// FieldHomePage holds the string denoting the home_page field in the database.
	FieldHomePage = "home_page"
	// FieldSpecs holds the string denoting the specs field in the database.
	FieldSpecs = "specs"
	// FieldStableUsd holds the string denoting the stable_usd field in the database.
	FieldStableUsd = "stable_usd"
	// Table holds the table name of the coinextra in the database.
	Table = "coin_extras"
)

// Columns holds all SQL columns for coinextra fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldEntID,
	FieldCoinTypeID,
	FieldHomePage,
	FieldSpecs,
	FieldStableUsd,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() uint32
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() uint32
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() uint32
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt func() uint32
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultCoinTypeID holds the default value on creation for the "coin_type_id" field.
	DefaultCoinTypeID func() uuid.UUID
	// DefaultHomePage holds the default value on creation for the "home_page" field.
	DefaultHomePage string
	// DefaultSpecs holds the default value on creation for the "specs" field.
	DefaultSpecs string
	// DefaultStableUsd holds the default value on creation for the "stable_usd" field.
	DefaultStableUsd bool
)

// OrderOption defines the ordering options for the CoinExtra queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByCoinTypeID orders the results by the coin_type_id field.
func ByCoinTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoinTypeID, opts...).ToFunc()
}

// ByHomePage orders the results by the home_page field.
func ByHomePage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHomePage, opts...).ToFunc()
}

// BySpecs orders the results by the specs field.
func BySpecs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpecs, opts...).ToFunc()
}

// ByStableUsd orders the results by the stable_usd field.
func ByStableUsd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStableUsd, opts...).ToFunc()
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/appuserthirdparty"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/predicate"
)

// AppUserThirdPartyDelete is the builder for deleting a AppUserThirdParty entity.
type AppUserThirdPartyDelete struct {
	config
	hooks    []Hook
	mutation *AppUserThirdPartyMutation
}

// Where appends a list predicates to the AppUserThirdPartyDelete builder.
func (autpd *AppUserThirdPartyDelete) Where(ps ...predicate.AppUserThirdParty) *AppUserThirdPartyDelete {
	autpd.mutation.Where(ps...)
	return autpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (autpd *AppUserThirdPartyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, autpd.sqlExec, autpd.mutation, autpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (autpd *AppUserThirdPartyDelete) ExecX(ctx context.Context) int {
	n, err := autpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (autpd *AppUserThirdPartyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(appuserthirdparty.Table, sqlgraph.NewFieldSpec(appuserthirdparty.FieldID, field.TypeUint32))
	if ps := autpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, autpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	autpd.mutation.done = true
	return affected, err
}

// AppUserThirdPartyDeleteOne is the builder for deleting a single AppUserThirdParty entity.
type AppUserThirdPartyDeleteOne struct {
	autpd *AppUserThirdPartyDelete
}

// Where appends a list predicates to the AppUserThirdPartyDelete builder.
func (autpdo *AppUserThirdPartyDeleteOne) Where(ps ...predicate.AppUserThirdParty) *AppUserThirdPartyDeleteOne {
	autpdo.autpd.mutation.Where(ps...)
	return autpdo
}

// Exec executes the deletion query.
func (autpdo *AppUserThirdPartyDeleteOne) Exec(ctx context.Context) error {
	n, err := autpdo.autpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{appuserthirdparty.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (autpdo *AppUserThirdPartyDeleteOne) ExecX(ctx context.Context) {
	if err := autpdo.Exec(ctx); err != nil {
		panic(err)
	}
}

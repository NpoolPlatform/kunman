// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/banappuser"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// BanAppUserUpdate is the builder for updating BanAppUser entities.
type BanAppUserUpdate struct {
	config
	hooks     []Hook
	mutation  *BanAppUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BanAppUserUpdate builder.
func (bauu *BanAppUserUpdate) Where(ps ...predicate.BanAppUser) *BanAppUserUpdate {
	bauu.mutation.Where(ps...)
	return bauu
}

// SetCreatedAt sets the "created_at" field.
func (bauu *BanAppUserUpdate) SetCreatedAt(u uint32) *BanAppUserUpdate {
	bauu.mutation.ResetCreatedAt()
	bauu.mutation.SetCreatedAt(u)
	return bauu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bauu *BanAppUserUpdate) SetNillableCreatedAt(u *uint32) *BanAppUserUpdate {
	if u != nil {
		bauu.SetCreatedAt(*u)
	}
	return bauu
}

// AddCreatedAt adds u to the "created_at" field.
func (bauu *BanAppUserUpdate) AddCreatedAt(u int32) *BanAppUserUpdate {
	bauu.mutation.AddCreatedAt(u)
	return bauu
}

// SetUpdatedAt sets the "updated_at" field.
func (bauu *BanAppUserUpdate) SetUpdatedAt(u uint32) *BanAppUserUpdate {
	bauu.mutation.ResetUpdatedAt()
	bauu.mutation.SetUpdatedAt(u)
	return bauu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (bauu *BanAppUserUpdate) AddUpdatedAt(u int32) *BanAppUserUpdate {
	bauu.mutation.AddUpdatedAt(u)
	return bauu
}

// SetDeletedAt sets the "deleted_at" field.
func (bauu *BanAppUserUpdate) SetDeletedAt(u uint32) *BanAppUserUpdate {
	bauu.mutation.ResetDeletedAt()
	bauu.mutation.SetDeletedAt(u)
	return bauu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bauu *BanAppUserUpdate) SetNillableDeletedAt(u *uint32) *BanAppUserUpdate {
	if u != nil {
		bauu.SetDeletedAt(*u)
	}
	return bauu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (bauu *BanAppUserUpdate) AddDeletedAt(u int32) *BanAppUserUpdate {
	bauu.mutation.AddDeletedAt(u)
	return bauu
}

// SetEntID sets the "ent_id" field.
func (bauu *BanAppUserUpdate) SetEntID(u uuid.UUID) *BanAppUserUpdate {
	bauu.mutation.SetEntID(u)
	return bauu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (bauu *BanAppUserUpdate) SetNillableEntID(u *uuid.UUID) *BanAppUserUpdate {
	if u != nil {
		bauu.SetEntID(*u)
	}
	return bauu
}

// SetAppID sets the "app_id" field.
func (bauu *BanAppUserUpdate) SetAppID(u uuid.UUID) *BanAppUserUpdate {
	bauu.mutation.SetAppID(u)
	return bauu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (bauu *BanAppUserUpdate) SetNillableAppID(u *uuid.UUID) *BanAppUserUpdate {
	if u != nil {
		bauu.SetAppID(*u)
	}
	return bauu
}

// SetUserID sets the "user_id" field.
func (bauu *BanAppUserUpdate) SetUserID(u uuid.UUID) *BanAppUserUpdate {
	bauu.mutation.SetUserID(u)
	return bauu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (bauu *BanAppUserUpdate) SetNillableUserID(u *uuid.UUID) *BanAppUserUpdate {
	if u != nil {
		bauu.SetUserID(*u)
	}
	return bauu
}

// SetMessage sets the "message" field.
func (bauu *BanAppUserUpdate) SetMessage(s string) *BanAppUserUpdate {
	bauu.mutation.SetMessage(s)
	return bauu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (bauu *BanAppUserUpdate) SetNillableMessage(s *string) *BanAppUserUpdate {
	if s != nil {
		bauu.SetMessage(*s)
	}
	return bauu
}

// Mutation returns the BanAppUserMutation object of the builder.
func (bauu *BanAppUserUpdate) Mutation() *BanAppUserMutation {
	return bauu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bauu *BanAppUserUpdate) Save(ctx context.Context) (int, error) {
	bauu.defaults()
	return withHooks(ctx, bauu.sqlSave, bauu.mutation, bauu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bauu *BanAppUserUpdate) SaveX(ctx context.Context) int {
	affected, err := bauu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bauu *BanAppUserUpdate) Exec(ctx context.Context) error {
	_, err := bauu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bauu *BanAppUserUpdate) ExecX(ctx context.Context) {
	if err := bauu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bauu *BanAppUserUpdate) defaults() {
	if _, ok := bauu.mutation.UpdatedAt(); !ok {
		v := banappuser.UpdateDefaultUpdatedAt()
		bauu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bauu *BanAppUserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BanAppUserUpdate {
	bauu.modifiers = append(bauu.modifiers, modifiers...)
	return bauu
}

func (bauu *BanAppUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(banappuser.Table, banappuser.Columns, sqlgraph.NewFieldSpec(banappuser.FieldID, field.TypeUint32))
	if ps := bauu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bauu.mutation.CreatedAt(); ok {
		_spec.SetField(banappuser.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := bauu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(banappuser.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := bauu.mutation.UpdatedAt(); ok {
		_spec.SetField(banappuser.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := bauu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(banappuser.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := bauu.mutation.DeletedAt(); ok {
		_spec.SetField(banappuser.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := bauu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(banappuser.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := bauu.mutation.EntID(); ok {
		_spec.SetField(banappuser.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := bauu.mutation.AppID(); ok {
		_spec.SetField(banappuser.FieldAppID, field.TypeUUID, value)
	}
	if value, ok := bauu.mutation.UserID(); ok {
		_spec.SetField(banappuser.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := bauu.mutation.Message(); ok {
		_spec.SetField(banappuser.FieldMessage, field.TypeString, value)
	}
	_spec.AddModifiers(bauu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, bauu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{banappuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bauu.mutation.done = true
	return n, nil
}

// BanAppUserUpdateOne is the builder for updating a single BanAppUser entity.
type BanAppUserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BanAppUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (bauuo *BanAppUserUpdateOne) SetCreatedAt(u uint32) *BanAppUserUpdateOne {
	bauuo.mutation.ResetCreatedAt()
	bauuo.mutation.SetCreatedAt(u)
	return bauuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bauuo *BanAppUserUpdateOne) SetNillableCreatedAt(u *uint32) *BanAppUserUpdateOne {
	if u != nil {
		bauuo.SetCreatedAt(*u)
	}
	return bauuo
}

// AddCreatedAt adds u to the "created_at" field.
func (bauuo *BanAppUserUpdateOne) AddCreatedAt(u int32) *BanAppUserUpdateOne {
	bauuo.mutation.AddCreatedAt(u)
	return bauuo
}

// SetUpdatedAt sets the "updated_at" field.
func (bauuo *BanAppUserUpdateOne) SetUpdatedAt(u uint32) *BanAppUserUpdateOne {
	bauuo.mutation.ResetUpdatedAt()
	bauuo.mutation.SetUpdatedAt(u)
	return bauuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (bauuo *BanAppUserUpdateOne) AddUpdatedAt(u int32) *BanAppUserUpdateOne {
	bauuo.mutation.AddUpdatedAt(u)
	return bauuo
}

// SetDeletedAt sets the "deleted_at" field.
func (bauuo *BanAppUserUpdateOne) SetDeletedAt(u uint32) *BanAppUserUpdateOne {
	bauuo.mutation.ResetDeletedAt()
	bauuo.mutation.SetDeletedAt(u)
	return bauuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bauuo *BanAppUserUpdateOne) SetNillableDeletedAt(u *uint32) *BanAppUserUpdateOne {
	if u != nil {
		bauuo.SetDeletedAt(*u)
	}
	return bauuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (bauuo *BanAppUserUpdateOne) AddDeletedAt(u int32) *BanAppUserUpdateOne {
	bauuo.mutation.AddDeletedAt(u)
	return bauuo
}

// SetEntID sets the "ent_id" field.
func (bauuo *BanAppUserUpdateOne) SetEntID(u uuid.UUID) *BanAppUserUpdateOne {
	bauuo.mutation.SetEntID(u)
	return bauuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (bauuo *BanAppUserUpdateOne) SetNillableEntID(u *uuid.UUID) *BanAppUserUpdateOne {
	if u != nil {
		bauuo.SetEntID(*u)
	}
	return bauuo
}

// SetAppID sets the "app_id" field.
func (bauuo *BanAppUserUpdateOne) SetAppID(u uuid.UUID) *BanAppUserUpdateOne {
	bauuo.mutation.SetAppID(u)
	return bauuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (bauuo *BanAppUserUpdateOne) SetNillableAppID(u *uuid.UUID) *BanAppUserUpdateOne {
	if u != nil {
		bauuo.SetAppID(*u)
	}
	return bauuo
}

// SetUserID sets the "user_id" field.
func (bauuo *BanAppUserUpdateOne) SetUserID(u uuid.UUID) *BanAppUserUpdateOne {
	bauuo.mutation.SetUserID(u)
	return bauuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (bauuo *BanAppUserUpdateOne) SetNillableUserID(u *uuid.UUID) *BanAppUserUpdateOne {
	if u != nil {
		bauuo.SetUserID(*u)
	}
	return bauuo
}

// SetMessage sets the "message" field.
func (bauuo *BanAppUserUpdateOne) SetMessage(s string) *BanAppUserUpdateOne {
	bauuo.mutation.SetMessage(s)
	return bauuo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (bauuo *BanAppUserUpdateOne) SetNillableMessage(s *string) *BanAppUserUpdateOne {
	if s != nil {
		bauuo.SetMessage(*s)
	}
	return bauuo
}

// Mutation returns the BanAppUserMutation object of the builder.
func (bauuo *BanAppUserUpdateOne) Mutation() *BanAppUserMutation {
	return bauuo.mutation
}

// Where appends a list predicates to the BanAppUserUpdate builder.
func (bauuo *BanAppUserUpdateOne) Where(ps ...predicate.BanAppUser) *BanAppUserUpdateOne {
	bauuo.mutation.Where(ps...)
	return bauuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bauuo *BanAppUserUpdateOne) Select(field string, fields ...string) *BanAppUserUpdateOne {
	bauuo.fields = append([]string{field}, fields...)
	return bauuo
}

// Save executes the query and returns the updated BanAppUser entity.
func (bauuo *BanAppUserUpdateOne) Save(ctx context.Context) (*BanAppUser, error) {
	bauuo.defaults()
	return withHooks(ctx, bauuo.sqlSave, bauuo.mutation, bauuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bauuo *BanAppUserUpdateOne) SaveX(ctx context.Context) *BanAppUser {
	node, err := bauuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bauuo *BanAppUserUpdateOne) Exec(ctx context.Context) error {
	_, err := bauuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bauuo *BanAppUserUpdateOne) ExecX(ctx context.Context) {
	if err := bauuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bauuo *BanAppUserUpdateOne) defaults() {
	if _, ok := bauuo.mutation.UpdatedAt(); !ok {
		v := banappuser.UpdateDefaultUpdatedAt()
		bauuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bauuo *BanAppUserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BanAppUserUpdateOne {
	bauuo.modifiers = append(bauuo.modifiers, modifiers...)
	return bauuo
}

func (bauuo *BanAppUserUpdateOne) sqlSave(ctx context.Context) (_node *BanAppUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(banappuser.Table, banappuser.Columns, sqlgraph.NewFieldSpec(banappuser.FieldID, field.TypeUint32))
	id, ok := bauuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "BanAppUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bauuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, banappuser.FieldID)
		for _, f := range fields {
			if !banappuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != banappuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bauuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bauuo.mutation.CreatedAt(); ok {
		_spec.SetField(banappuser.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := bauuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(banappuser.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := bauuo.mutation.UpdatedAt(); ok {
		_spec.SetField(banappuser.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := bauuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(banappuser.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := bauuo.mutation.DeletedAt(); ok {
		_spec.SetField(banappuser.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := bauuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(banappuser.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := bauuo.mutation.EntID(); ok {
		_spec.SetField(banappuser.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := bauuo.mutation.AppID(); ok {
		_spec.SetField(banappuser.FieldAppID, field.TypeUUID, value)
	}
	if value, ok := bauuo.mutation.UserID(); ok {
		_spec.SetField(banappuser.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := bauuo.mutation.Message(); ok {
		_spec.SetField(banappuser.FieldMessage, field.TypeString, value)
	}
	_spec.AddModifiers(bauuo.modifiers...)
	_node = &BanAppUser{config: bauuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bauuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{banappuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bauuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/app"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/appcontrol"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/appoauththirdparty"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/approle"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/approleuser"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/appsubscribe"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/appuser"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/appusercontrol"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/appuserextra"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/appusersecret"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/appuserthirdparty"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/auth"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/authhistory"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/banapp"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/banappuser"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/kyc"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/loginhistory"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/oauththirdparty"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/recoverycode"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/subscriber"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 20)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   app.Table,
			Columns: app.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: app.FieldID,
			},
		},
		Type: "App",
		Fields: map[string]*sqlgraph.FieldSpec{
			app.FieldCreatedAt:   {Type: field.TypeUint32, Column: app.FieldCreatedAt},
			app.FieldUpdatedAt:   {Type: field.TypeUint32, Column: app.FieldUpdatedAt},
			app.FieldDeletedAt:   {Type: field.TypeUint32, Column: app.FieldDeletedAt},
			app.FieldEntID:       {Type: field.TypeUUID, Column: app.FieldEntID},
			app.FieldCreatedBy:   {Type: field.TypeUUID, Column: app.FieldCreatedBy},
			app.FieldName:        {Type: field.TypeString, Column: app.FieldName},
			app.FieldLogo:        {Type: field.TypeString, Column: app.FieldLogo},
			app.FieldDescription: {Type: field.TypeString, Column: app.FieldDescription},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appcontrol.Table,
			Columns: appcontrol.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appcontrol.FieldID,
			},
		},
		Type: "AppControl",
		Fields: map[string]*sqlgraph.FieldSpec{
			appcontrol.FieldCreatedAt:                {Type: field.TypeUint32, Column: appcontrol.FieldCreatedAt},
			appcontrol.FieldUpdatedAt:                {Type: field.TypeUint32, Column: appcontrol.FieldUpdatedAt},
			appcontrol.FieldDeletedAt:                {Type: field.TypeUint32, Column: appcontrol.FieldDeletedAt},
			appcontrol.FieldEntID:                    {Type: field.TypeUUID, Column: appcontrol.FieldEntID},
			appcontrol.FieldAppID:                    {Type: field.TypeUUID, Column: appcontrol.FieldAppID},
			appcontrol.FieldSignupMethods:            {Type: field.TypeJSON, Column: appcontrol.FieldSignupMethods},
			appcontrol.FieldExternSigninMethods:      {Type: field.TypeJSON, Column: appcontrol.FieldExternSigninMethods},
			appcontrol.FieldRecaptchaMethod:          {Type: field.TypeString, Column: appcontrol.FieldRecaptchaMethod},
			appcontrol.FieldKycEnable:                {Type: field.TypeBool, Column: appcontrol.FieldKycEnable},
			appcontrol.FieldSigninVerifyEnable:       {Type: field.TypeBool, Column: appcontrol.FieldSigninVerifyEnable},
			appcontrol.FieldInvitationCodeMust:       {Type: field.TypeBool, Column: appcontrol.FieldInvitationCodeMust},
			appcontrol.FieldCreateInvitationCodeWhen: {Type: field.TypeString, Column: appcontrol.FieldCreateInvitationCodeWhen},
			appcontrol.FieldMaxTypedCouponsPerOrder:  {Type: field.TypeUint32, Column: appcontrol.FieldMaxTypedCouponsPerOrder},
			appcontrol.FieldMaintaining:              {Type: field.TypeBool, Column: appcontrol.FieldMaintaining},
			appcontrol.FieldCouponWithdrawEnable:     {Type: field.TypeBool, Column: appcontrol.FieldCouponWithdrawEnable},
			appcontrol.FieldCommitButtonTargets:      {Type: field.TypeJSON, Column: appcontrol.FieldCommitButtonTargets},
			appcontrol.FieldResetUserMethod:          {Type: field.TypeString, Column: appcontrol.FieldResetUserMethod},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appoauththirdparty.Table,
			Columns: appoauththirdparty.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appoauththirdparty.FieldID,
			},
		},
		Type: "AppOAuthThirdParty",
		Fields: map[string]*sqlgraph.FieldSpec{
			appoauththirdparty.FieldCreatedAt:    {Type: field.TypeUint32, Column: appoauththirdparty.FieldCreatedAt},
			appoauththirdparty.FieldUpdatedAt:    {Type: field.TypeUint32, Column: appoauththirdparty.FieldUpdatedAt},
			appoauththirdparty.FieldDeletedAt:    {Type: field.TypeUint32, Column: appoauththirdparty.FieldDeletedAt},
			appoauththirdparty.FieldEntID:        {Type: field.TypeUUID, Column: appoauththirdparty.FieldEntID},
			appoauththirdparty.FieldAppID:        {Type: field.TypeUUID, Column: appoauththirdparty.FieldAppID},
			appoauththirdparty.FieldThirdPartyID: {Type: field.TypeUUID, Column: appoauththirdparty.FieldThirdPartyID},
			appoauththirdparty.FieldClientID:     {Type: field.TypeString, Column: appoauththirdparty.FieldClientID},
			appoauththirdparty.FieldClientSecret: {Type: field.TypeString, Column: appoauththirdparty.FieldClientSecret},
			appoauththirdparty.FieldCallbackURL:  {Type: field.TypeString, Column: appoauththirdparty.FieldCallbackURL},
			appoauththirdparty.FieldSalt:         {Type: field.TypeString, Column: appoauththirdparty.FieldSalt},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   approle.Table,
			Columns: approle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: approle.FieldID,
			},
		},
		Type: "AppRole",
		Fields: map[string]*sqlgraph.FieldSpec{
			approle.FieldCreatedAt:   {Type: field.TypeUint32, Column: approle.FieldCreatedAt},
			approle.FieldUpdatedAt:   {Type: field.TypeUint32, Column: approle.FieldUpdatedAt},
			approle.FieldDeletedAt:   {Type: field.TypeUint32, Column: approle.FieldDeletedAt},
			approle.FieldEntID:       {Type: field.TypeUUID, Column: approle.FieldEntID},
			approle.FieldCreatedBy:   {Type: field.TypeUUID, Column: approle.FieldCreatedBy},
			approle.FieldRole:        {Type: field.TypeString, Column: approle.FieldRole},
			approle.FieldDescription: {Type: field.TypeString, Column: approle.FieldDescription},
			approle.FieldAppID:       {Type: field.TypeUUID, Column: approle.FieldAppID},
			approle.FieldDefault:     {Type: field.TypeBool, Column: approle.FieldDefault},
			approle.FieldGenesis:     {Type: field.TypeBool, Column: approle.FieldGenesis},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   approleuser.Table,
			Columns: approleuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: approleuser.FieldID,
			},
		},
		Type: "AppRoleUser",
		Fields: map[string]*sqlgraph.FieldSpec{
			approleuser.FieldCreatedAt: {Type: field.TypeUint32, Column: approleuser.FieldCreatedAt},
			approleuser.FieldUpdatedAt: {Type: field.TypeUint32, Column: approleuser.FieldUpdatedAt},
			approleuser.FieldDeletedAt: {Type: field.TypeUint32, Column: approleuser.FieldDeletedAt},
			approleuser.FieldEntID:     {Type: field.TypeUUID, Column: approleuser.FieldEntID},
			approleuser.FieldAppID:     {Type: field.TypeUUID, Column: approleuser.FieldAppID},
			approleuser.FieldRoleID:    {Type: field.TypeUUID, Column: approleuser.FieldRoleID},
			approleuser.FieldUserID:    {Type: field.TypeUUID, Column: approleuser.FieldUserID},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appsubscribe.Table,
			Columns: appsubscribe.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appsubscribe.FieldID,
			},
		},
		Type: "AppSubscribe",
		Fields: map[string]*sqlgraph.FieldSpec{
			appsubscribe.FieldCreatedAt:      {Type: field.TypeUint32, Column: appsubscribe.FieldCreatedAt},
			appsubscribe.FieldUpdatedAt:      {Type: field.TypeUint32, Column: appsubscribe.FieldUpdatedAt},
			appsubscribe.FieldDeletedAt:      {Type: field.TypeUint32, Column: appsubscribe.FieldDeletedAt},
			appsubscribe.FieldEntID:          {Type: field.TypeUUID, Column: appsubscribe.FieldEntID},
			appsubscribe.FieldAppID:          {Type: field.TypeUUID, Column: appsubscribe.FieldAppID},
			appsubscribe.FieldSubscribeAppID: {Type: field.TypeUUID, Column: appsubscribe.FieldSubscribeAppID},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appuser.Table,
			Columns: appuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appuser.FieldID,
			},
		},
		Type: "AppUser",
		Fields: map[string]*sqlgraph.FieldSpec{
			appuser.FieldCreatedAt:     {Type: field.TypeUint32, Column: appuser.FieldCreatedAt},
			appuser.FieldUpdatedAt:     {Type: field.TypeUint32, Column: appuser.FieldUpdatedAt},
			appuser.FieldDeletedAt:     {Type: field.TypeUint32, Column: appuser.FieldDeletedAt},
			appuser.FieldEntID:         {Type: field.TypeUUID, Column: appuser.FieldEntID},
			appuser.FieldAppID:         {Type: field.TypeUUID, Column: appuser.FieldAppID},
			appuser.FieldEmailAddress:  {Type: field.TypeString, Column: appuser.FieldEmailAddress},
			appuser.FieldPhoneNo:       {Type: field.TypeString, Column: appuser.FieldPhoneNo},
			appuser.FieldImportFromApp: {Type: field.TypeUUID, Column: appuser.FieldImportFromApp},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appusercontrol.Table,
			Columns: appusercontrol.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appusercontrol.FieldID,
			},
		},
		Type: "AppUserControl",
		Fields: map[string]*sqlgraph.FieldSpec{
			appusercontrol.FieldCreatedAt:                          {Type: field.TypeUint32, Column: appusercontrol.FieldCreatedAt},
			appusercontrol.FieldUpdatedAt:                          {Type: field.TypeUint32, Column: appusercontrol.FieldUpdatedAt},
			appusercontrol.FieldDeletedAt:                          {Type: field.TypeUint32, Column: appusercontrol.FieldDeletedAt},
			appusercontrol.FieldEntID:                              {Type: field.TypeUUID, Column: appusercontrol.FieldEntID},
			appusercontrol.FieldAppID:                              {Type: field.TypeUUID, Column: appusercontrol.FieldAppID},
			appusercontrol.FieldUserID:                             {Type: field.TypeUUID, Column: appusercontrol.FieldUserID},
			appusercontrol.FieldSigninVerifyByGoogleAuthentication: {Type: field.TypeBool, Column: appusercontrol.FieldSigninVerifyByGoogleAuthentication},
			appusercontrol.FieldGoogleAuthenticationVerified:       {Type: field.TypeBool, Column: appusercontrol.FieldGoogleAuthenticationVerified},
			appusercontrol.FieldSigninVerifyType:                   {Type: field.TypeString, Column: appusercontrol.FieldSigninVerifyType},
			appusercontrol.FieldKol:                                {Type: field.TypeBool, Column: appusercontrol.FieldKol},
			appusercontrol.FieldKolConfirmed:                       {Type: field.TypeBool, Column: appusercontrol.FieldKolConfirmed},
			appusercontrol.FieldSelectedLangID:                     {Type: field.TypeUUID, Column: appusercontrol.FieldSelectedLangID},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appuserextra.Table,
			Columns: appuserextra.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appuserextra.FieldID,
			},
		},
		Type: "AppUserExtra",
		Fields: map[string]*sqlgraph.FieldSpec{
			appuserextra.FieldCreatedAt:     {Type: field.TypeUint32, Column: appuserextra.FieldCreatedAt},
			appuserextra.FieldUpdatedAt:     {Type: field.TypeUint32, Column: appuserextra.FieldUpdatedAt},
			appuserextra.FieldDeletedAt:     {Type: field.TypeUint32, Column: appuserextra.FieldDeletedAt},
			appuserextra.FieldEntID:         {Type: field.TypeUUID, Column: appuserextra.FieldEntID},
			appuserextra.FieldAppID:         {Type: field.TypeUUID, Column: appuserextra.FieldAppID},
			appuserextra.FieldUserID:        {Type: field.TypeUUID, Column: appuserextra.FieldUserID},
			appuserextra.FieldUsername:      {Type: field.TypeString, Column: appuserextra.FieldUsername},
			appuserextra.FieldFirstName:     {Type: field.TypeString, Column: appuserextra.FieldFirstName},
			appuserextra.FieldLastName:      {Type: field.TypeString, Column: appuserextra.FieldLastName},
			appuserextra.FieldAddressFields: {Type: field.TypeJSON, Column: appuserextra.FieldAddressFields},
			appuserextra.FieldGender:        {Type: field.TypeString, Column: appuserextra.FieldGender},
			appuserextra.FieldPostalCode:    {Type: field.TypeString, Column: appuserextra.FieldPostalCode},
			appuserextra.FieldAge:           {Type: field.TypeUint32, Column: appuserextra.FieldAge},
			appuserextra.FieldBirthday:      {Type: field.TypeUint32, Column: appuserextra.FieldBirthday},
			appuserextra.FieldAvatar:        {Type: field.TypeString, Column: appuserextra.FieldAvatar},
			appuserextra.FieldOrganization:  {Type: field.TypeString, Column: appuserextra.FieldOrganization},
			appuserextra.FieldIDNumber:      {Type: field.TypeString, Column: appuserextra.FieldIDNumber},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appusersecret.Table,
			Columns: appusersecret.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appusersecret.FieldID,
			},
		},
		Type: "AppUserSecret",
		Fields: map[string]*sqlgraph.FieldSpec{
			appusersecret.FieldCreatedAt:    {Type: field.TypeUint32, Column: appusersecret.FieldCreatedAt},
			appusersecret.FieldUpdatedAt:    {Type: field.TypeUint32, Column: appusersecret.FieldUpdatedAt},
			appusersecret.FieldDeletedAt:    {Type: field.TypeUint32, Column: appusersecret.FieldDeletedAt},
			appusersecret.FieldEntID:        {Type: field.TypeUUID, Column: appusersecret.FieldEntID},
			appusersecret.FieldAppID:        {Type: field.TypeUUID, Column: appusersecret.FieldAppID},
			appusersecret.FieldUserID:       {Type: field.TypeUUID, Column: appusersecret.FieldUserID},
			appusersecret.FieldPasswordHash: {Type: field.TypeString, Column: appusersecret.FieldPasswordHash},
			appusersecret.FieldSalt:         {Type: field.TypeString, Column: appusersecret.FieldSalt},
			appusersecret.FieldGoogleSecret: {Type: field.TypeString, Column: appusersecret.FieldGoogleSecret},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appuserthirdparty.Table,
			Columns: appuserthirdparty.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appuserthirdparty.FieldID,
			},
		},
		Type: "AppUserThirdParty",
		Fields: map[string]*sqlgraph.FieldSpec{
			appuserthirdparty.FieldCreatedAt:          {Type: field.TypeUint32, Column: appuserthirdparty.FieldCreatedAt},
			appuserthirdparty.FieldUpdatedAt:          {Type: field.TypeUint32, Column: appuserthirdparty.FieldUpdatedAt},
			appuserthirdparty.FieldDeletedAt:          {Type: field.TypeUint32, Column: appuserthirdparty.FieldDeletedAt},
			appuserthirdparty.FieldEntID:              {Type: field.TypeUUID, Column: appuserthirdparty.FieldEntID},
			appuserthirdparty.FieldAppID:              {Type: field.TypeUUID, Column: appuserthirdparty.FieldAppID},
			appuserthirdparty.FieldUserID:             {Type: field.TypeUUID, Column: appuserthirdparty.FieldUserID},
			appuserthirdparty.FieldThirdPartyUserID:   {Type: field.TypeString, Column: appuserthirdparty.FieldThirdPartyUserID},
			appuserthirdparty.FieldThirdPartyID:       {Type: field.TypeUUID, Column: appuserthirdparty.FieldThirdPartyID},
			appuserthirdparty.FieldThirdPartyUsername: {Type: field.TypeString, Column: appuserthirdparty.FieldThirdPartyUsername},
			appuserthirdparty.FieldThirdPartyAvatar:   {Type: field.TypeString, Column: appuserthirdparty.FieldThirdPartyAvatar},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   auth.Table,
			Columns: auth.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: auth.FieldID,
			},
		},
		Type: "Auth",
		Fields: map[string]*sqlgraph.FieldSpec{
			auth.FieldCreatedAt: {Type: field.TypeUint32, Column: auth.FieldCreatedAt},
			auth.FieldUpdatedAt: {Type: field.TypeUint32, Column: auth.FieldUpdatedAt},
			auth.FieldDeletedAt: {Type: field.TypeUint32, Column: auth.FieldDeletedAt},
			auth.FieldEntID:     {Type: field.TypeUUID, Column: auth.FieldEntID},
			auth.FieldAppID:     {Type: field.TypeUUID, Column: auth.FieldAppID},
			auth.FieldRoleID:    {Type: field.TypeUUID, Column: auth.FieldRoleID},
			auth.FieldUserID:    {Type: field.TypeUUID, Column: auth.FieldUserID},
			auth.FieldResource:  {Type: field.TypeString, Column: auth.FieldResource},
			auth.FieldMethod:    {Type: field.TypeString, Column: auth.FieldMethod},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   authhistory.Table,
			Columns: authhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: authhistory.FieldID,
			},
		},
		Type: "AuthHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			authhistory.FieldCreatedAt: {Type: field.TypeUint32, Column: authhistory.FieldCreatedAt},
			authhistory.FieldUpdatedAt: {Type: field.TypeUint32, Column: authhistory.FieldUpdatedAt},
			authhistory.FieldDeletedAt: {Type: field.TypeUint32, Column: authhistory.FieldDeletedAt},
			authhistory.FieldEntID:     {Type: field.TypeUUID, Column: authhistory.FieldEntID},
			authhistory.FieldAppID:     {Type: field.TypeUUID, Column: authhistory.FieldAppID},
			authhistory.FieldUserID:    {Type: field.TypeUUID, Column: authhistory.FieldUserID},
			authhistory.FieldResource:  {Type: field.TypeString, Column: authhistory.FieldResource},
			authhistory.FieldMethod:    {Type: field.TypeString, Column: authhistory.FieldMethod},
			authhistory.FieldAllowed:   {Type: field.TypeBool, Column: authhistory.FieldAllowed},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   banapp.Table,
			Columns: banapp.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: banapp.FieldID,
			},
		},
		Type: "BanApp",
		Fields: map[string]*sqlgraph.FieldSpec{
			banapp.FieldCreatedAt: {Type: field.TypeUint32, Column: banapp.FieldCreatedAt},
			banapp.FieldUpdatedAt: {Type: field.TypeUint32, Column: banapp.FieldUpdatedAt},
			banapp.FieldDeletedAt: {Type: field.TypeUint32, Column: banapp.FieldDeletedAt},
			banapp.FieldEntID:     {Type: field.TypeUUID, Column: banapp.FieldEntID},
			banapp.FieldAppID:     {Type: field.TypeUUID, Column: banapp.FieldAppID},
			banapp.FieldMessage:   {Type: field.TypeString, Column: banapp.FieldMessage},
		},
	}
	graph.Nodes[14] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   banappuser.Table,
			Columns: banappuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: banappuser.FieldID,
			},
		},
		Type: "BanAppUser",
		Fields: map[string]*sqlgraph.FieldSpec{
			banappuser.FieldCreatedAt: {Type: field.TypeUint32, Column: banappuser.FieldCreatedAt},
			banappuser.FieldUpdatedAt: {Type: field.TypeUint32, Column: banappuser.FieldUpdatedAt},
			banappuser.FieldDeletedAt: {Type: field.TypeUint32, Column: banappuser.FieldDeletedAt},
			banappuser.FieldEntID:     {Type: field.TypeUUID, Column: banappuser.FieldEntID},
			banappuser.FieldAppID:     {Type: field.TypeUUID, Column: banappuser.FieldAppID},
			banappuser.FieldUserID:    {Type: field.TypeUUID, Column: banappuser.FieldUserID},
			banappuser.FieldMessage:   {Type: field.TypeString, Column: banappuser.FieldMessage},
		},
	}
	graph.Nodes[15] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   kyc.Table,
			Columns: kyc.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: kyc.FieldID,
			},
		},
		Type: "Kyc",
		Fields: map[string]*sqlgraph.FieldSpec{
			kyc.FieldCreatedAt:    {Type: field.TypeUint32, Column: kyc.FieldCreatedAt},
			kyc.FieldUpdatedAt:    {Type: field.TypeUint32, Column: kyc.FieldUpdatedAt},
			kyc.FieldDeletedAt:    {Type: field.TypeUint32, Column: kyc.FieldDeletedAt},
			kyc.FieldEntID:        {Type: field.TypeUUID, Column: kyc.FieldEntID},
			kyc.FieldAppID:        {Type: field.TypeUUID, Column: kyc.FieldAppID},
			kyc.FieldUserID:       {Type: field.TypeUUID, Column: kyc.FieldUserID},
			kyc.FieldDocumentType: {Type: field.TypeString, Column: kyc.FieldDocumentType},
			kyc.FieldIDNumber:     {Type: field.TypeString, Column: kyc.FieldIDNumber},
			kyc.FieldFrontImg:     {Type: field.TypeString, Column: kyc.FieldFrontImg},
			kyc.FieldBackImg:      {Type: field.TypeString, Column: kyc.FieldBackImg},
			kyc.FieldSelfieImg:    {Type: field.TypeString, Column: kyc.FieldSelfieImg},
			kyc.FieldEntityType:   {Type: field.TypeString, Column: kyc.FieldEntityType},
			kyc.FieldReviewID:     {Type: field.TypeUUID, Column: kyc.FieldReviewID},
			kyc.FieldState:        {Type: field.TypeString, Column: kyc.FieldState},
		},
	}
	graph.Nodes[16] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   loginhistory.Table,
			Columns: loginhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: loginhistory.FieldID,
			},
		},
		Type: "LoginHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			loginhistory.FieldCreatedAt: {Type: field.TypeUint32, Column: loginhistory.FieldCreatedAt},
			loginhistory.FieldUpdatedAt: {Type: field.TypeUint32, Column: loginhistory.FieldUpdatedAt},
			loginhistory.FieldDeletedAt: {Type: field.TypeUint32, Column: loginhistory.FieldDeletedAt},
			loginhistory.FieldEntID:     {Type: field.TypeUUID, Column: loginhistory.FieldEntID},
			loginhistory.FieldAppID:     {Type: field.TypeUUID, Column: loginhistory.FieldAppID},
			loginhistory.FieldUserID:    {Type: field.TypeUUID, Column: loginhistory.FieldUserID},
			loginhistory.FieldClientIP:  {Type: field.TypeString, Column: loginhistory.FieldClientIP},
			loginhistory.FieldUserAgent: {Type: field.TypeString, Column: loginhistory.FieldUserAgent},
			loginhistory.FieldLocation:  {Type: field.TypeString, Column: loginhistory.FieldLocation},
			loginhistory.FieldLoginType: {Type: field.TypeString, Column: loginhistory.FieldLoginType},
		},
	}
	graph.Nodes[17] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oauththirdparty.Table,
			Columns: oauththirdparty.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: oauththirdparty.FieldID,
			},
		},
		Type: "OAuthThirdParty",
		Fields: map[string]*sqlgraph.FieldSpec{
			oauththirdparty.FieldCreatedAt:      {Type: field.TypeUint32, Column: oauththirdparty.FieldCreatedAt},
			oauththirdparty.FieldUpdatedAt:      {Type: field.TypeUint32, Column: oauththirdparty.FieldUpdatedAt},
			oauththirdparty.FieldDeletedAt:      {Type: field.TypeUint32, Column: oauththirdparty.FieldDeletedAt},
			oauththirdparty.FieldEntID:          {Type: field.TypeUUID, Column: oauththirdparty.FieldEntID},
			oauththirdparty.FieldClientName:     {Type: field.TypeString, Column: oauththirdparty.FieldClientName},
			oauththirdparty.FieldClientTag:      {Type: field.TypeString, Column: oauththirdparty.FieldClientTag},
			oauththirdparty.FieldClientLogoURL:  {Type: field.TypeString, Column: oauththirdparty.FieldClientLogoURL},
			oauththirdparty.FieldClientOauthURL: {Type: field.TypeString, Column: oauththirdparty.FieldClientOauthURL},
			oauththirdparty.FieldResponseType:   {Type: field.TypeString, Column: oauththirdparty.FieldResponseType},
			oauththirdparty.FieldScope:          {Type: field.TypeString, Column: oauththirdparty.FieldScope},
		},
	}
	graph.Nodes[18] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   recoverycode.Table,
			Columns: recoverycode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: recoverycode.FieldID,
			},
		},
		Type: "RecoveryCode",
		Fields: map[string]*sqlgraph.FieldSpec{
			recoverycode.FieldCreatedAt: {Type: field.TypeUint32, Column: recoverycode.FieldCreatedAt},
			recoverycode.FieldUpdatedAt: {Type: field.TypeUint32, Column: recoverycode.FieldUpdatedAt},
			recoverycode.FieldDeletedAt: {Type: field.TypeUint32, Column: recoverycode.FieldDeletedAt},
			recoverycode.FieldEntID:     {Type: field.TypeUUID, Column: recoverycode.FieldEntID},
			recoverycode.FieldAppID:     {Type: field.TypeUUID, Column: recoverycode.FieldAppID},
			recoverycode.FieldUserID:    {Type: field.TypeUUID, Column: recoverycode.FieldUserID},
			recoverycode.FieldCode:      {Type: field.TypeString, Column: recoverycode.FieldCode},
			recoverycode.FieldUsed:      {Type: field.TypeBool, Column: recoverycode.FieldUsed},
		},
	}
	graph.Nodes[19] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   subscriber.Table,
			Columns: subscriber.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: subscriber.FieldID,
			},
		},
		Type: "Subscriber",
		Fields: map[string]*sqlgraph.FieldSpec{
			subscriber.FieldCreatedAt:    {Type: field.TypeUint32, Column: subscriber.FieldCreatedAt},
			subscriber.FieldUpdatedAt:    {Type: field.TypeUint32, Column: subscriber.FieldUpdatedAt},
			subscriber.FieldDeletedAt:    {Type: field.TypeUint32, Column: subscriber.FieldDeletedAt},
			subscriber.FieldEntID:        {Type: field.TypeUUID, Column: subscriber.FieldEntID},
			subscriber.FieldAppID:        {Type: field.TypeUUID, Column: subscriber.FieldAppID},
			subscriber.FieldEmailAddress: {Type: field.TypeString, Column: subscriber.FieldEmailAddress},
			subscriber.FieldRegistered:   {Type: field.TypeBool, Column: subscriber.FieldRegistered},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (aq *AppQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppQuery builder.
func (aq *AppQuery) Filter() *AppFilter {
	return &AppFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppMutation builder.
func (m *AppMutation) Filter() *AppFilter {
	return &AppFilter{config: m.config, predicateAdder: m}
}

// AppFilter provides a generic filtering capability at runtime for AppQuery.
type AppFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(app.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(app.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(app.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(app.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(app.FieldEntID))
}

// WhereCreatedBy applies the entql [16]byte predicate on the created_by field.
func (f *AppFilter) WhereCreatedBy(p entql.ValueP) {
	f.Where(p.Field(app.FieldCreatedBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *AppFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(app.FieldName))
}

// WhereLogo applies the entql string predicate on the logo field.
func (f *AppFilter) WhereLogo(p entql.StringP) {
	f.Where(p.Field(app.FieldLogo))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *AppFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(app.FieldDescription))
}

// addPredicate implements the predicateAdder interface.
func (acq *AppControlQuery) addPredicate(pred func(s *sql.Selector)) {
	acq.predicates = append(acq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppControlQuery builder.
func (acq *AppControlQuery) Filter() *AppControlFilter {
	return &AppControlFilter{config: acq.config, predicateAdder: acq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppControlMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppControlMutation builder.
func (m *AppControlMutation) Filter() *AppControlFilter {
	return &AppControlFilter{config: m.config, predicateAdder: m}
}

// AppControlFilter provides a generic filtering capability at runtime for AppControlQuery.
type AppControlFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppControlFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppControlFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appcontrol.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppControlFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appcontrol.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppControlFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appcontrol.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppControlFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appcontrol.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppControlFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appcontrol.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppControlFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appcontrol.FieldAppID))
}

// WhereSignupMethods applies the entql json.RawMessage predicate on the signup_methods field.
func (f *AppControlFilter) WhereSignupMethods(p entql.BytesP) {
	f.Where(p.Field(appcontrol.FieldSignupMethods))
}

// WhereExternSigninMethods applies the entql json.RawMessage predicate on the extern_signin_methods field.
func (f *AppControlFilter) WhereExternSigninMethods(p entql.BytesP) {
	f.Where(p.Field(appcontrol.FieldExternSigninMethods))
}

// WhereRecaptchaMethod applies the entql string predicate on the recaptcha_method field.
func (f *AppControlFilter) WhereRecaptchaMethod(p entql.StringP) {
	f.Where(p.Field(appcontrol.FieldRecaptchaMethod))
}

// WhereKycEnable applies the entql bool predicate on the kyc_enable field.
func (f *AppControlFilter) WhereKycEnable(p entql.BoolP) {
	f.Where(p.Field(appcontrol.FieldKycEnable))
}

// WhereSigninVerifyEnable applies the entql bool predicate on the signin_verify_enable field.
func (f *AppControlFilter) WhereSigninVerifyEnable(p entql.BoolP) {
	f.Where(p.Field(appcontrol.FieldSigninVerifyEnable))
}

// WhereInvitationCodeMust applies the entql bool predicate on the invitation_code_must field.
func (f *AppControlFilter) WhereInvitationCodeMust(p entql.BoolP) {
	f.Where(p.Field(appcontrol.FieldInvitationCodeMust))
}

// WhereCreateInvitationCodeWhen applies the entql string predicate on the create_invitation_code_when field.
func (f *AppControlFilter) WhereCreateInvitationCodeWhen(p entql.StringP) {
	f.Where(p.Field(appcontrol.FieldCreateInvitationCodeWhen))
}

// WhereMaxTypedCouponsPerOrder applies the entql uint32 predicate on the max_typed_coupons_per_order field.
func (f *AppControlFilter) WhereMaxTypedCouponsPerOrder(p entql.Uint32P) {
	f.Where(p.Field(appcontrol.FieldMaxTypedCouponsPerOrder))
}

// WhereMaintaining applies the entql bool predicate on the maintaining field.
func (f *AppControlFilter) WhereMaintaining(p entql.BoolP) {
	f.Where(p.Field(appcontrol.FieldMaintaining))
}

// WhereCouponWithdrawEnable applies the entql bool predicate on the coupon_withdraw_enable field.
func (f *AppControlFilter) WhereCouponWithdrawEnable(p entql.BoolP) {
	f.Where(p.Field(appcontrol.FieldCouponWithdrawEnable))
}

// WhereCommitButtonTargets applies the entql json.RawMessage predicate on the commit_button_targets field.
func (f *AppControlFilter) WhereCommitButtonTargets(p entql.BytesP) {
	f.Where(p.Field(appcontrol.FieldCommitButtonTargets))
}

// WhereResetUserMethod applies the entql string predicate on the reset_user_method field.
func (f *AppControlFilter) WhereResetUserMethod(p entql.StringP) {
	f.Where(p.Field(appcontrol.FieldResetUserMethod))
}

// addPredicate implements the predicateAdder interface.
func (aotpq *AppOAuthThirdPartyQuery) addPredicate(pred func(s *sql.Selector)) {
	aotpq.predicates = append(aotpq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppOAuthThirdPartyQuery builder.
func (aotpq *AppOAuthThirdPartyQuery) Filter() *AppOAuthThirdPartyFilter {
	return &AppOAuthThirdPartyFilter{config: aotpq.config, predicateAdder: aotpq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppOAuthThirdPartyMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppOAuthThirdPartyMutation builder.
func (m *AppOAuthThirdPartyMutation) Filter() *AppOAuthThirdPartyFilter {
	return &AppOAuthThirdPartyFilter{config: m.config, predicateAdder: m}
}

// AppOAuthThirdPartyFilter provides a generic filtering capability at runtime for AppOAuthThirdPartyQuery.
type AppOAuthThirdPartyFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppOAuthThirdPartyFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppOAuthThirdPartyFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appoauththirdparty.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppOAuthThirdPartyFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appoauththirdparty.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppOAuthThirdPartyFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appoauththirdparty.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppOAuthThirdPartyFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appoauththirdparty.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppOAuthThirdPartyFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appoauththirdparty.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppOAuthThirdPartyFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appoauththirdparty.FieldAppID))
}

// WhereThirdPartyID applies the entql [16]byte predicate on the third_party_id field.
func (f *AppOAuthThirdPartyFilter) WhereThirdPartyID(p entql.ValueP) {
	f.Where(p.Field(appoauththirdparty.FieldThirdPartyID))
}

// WhereClientID applies the entql string predicate on the client_id field.
func (f *AppOAuthThirdPartyFilter) WhereClientID(p entql.StringP) {
	f.Where(p.Field(appoauththirdparty.FieldClientID))
}

// WhereClientSecret applies the entql string predicate on the client_secret field.
func (f *AppOAuthThirdPartyFilter) WhereClientSecret(p entql.StringP) {
	f.Where(p.Field(appoauththirdparty.FieldClientSecret))
}

// WhereCallbackURL applies the entql string predicate on the callback_url field.
func (f *AppOAuthThirdPartyFilter) WhereCallbackURL(p entql.StringP) {
	f.Where(p.Field(appoauththirdparty.FieldCallbackURL))
}

// WhereSalt applies the entql string predicate on the salt field.
func (f *AppOAuthThirdPartyFilter) WhereSalt(p entql.StringP) {
	f.Where(p.Field(appoauththirdparty.FieldSalt))
}

// addPredicate implements the predicateAdder interface.
func (arq *AppRoleQuery) addPredicate(pred func(s *sql.Selector)) {
	arq.predicates = append(arq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppRoleQuery builder.
func (arq *AppRoleQuery) Filter() *AppRoleFilter {
	return &AppRoleFilter{config: arq.config, predicateAdder: arq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppRoleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppRoleMutation builder.
func (m *AppRoleMutation) Filter() *AppRoleFilter {
	return &AppRoleFilter{config: m.config, predicateAdder: m}
}

// AppRoleFilter provides a generic filtering capability at runtime for AppRoleQuery.
type AppRoleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppRoleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppRoleFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(approle.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppRoleFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(approle.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppRoleFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(approle.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppRoleFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(approle.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppRoleFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(approle.FieldEntID))
}

// WhereCreatedBy applies the entql [16]byte predicate on the created_by field.
func (f *AppRoleFilter) WhereCreatedBy(p entql.ValueP) {
	f.Where(p.Field(approle.FieldCreatedBy))
}

// WhereRole applies the entql string predicate on the role field.
func (f *AppRoleFilter) WhereRole(p entql.StringP) {
	f.Where(p.Field(approle.FieldRole))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *AppRoleFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(approle.FieldDescription))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppRoleFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(approle.FieldAppID))
}

// WhereDefault applies the entql bool predicate on the default field.
func (f *AppRoleFilter) WhereDefault(p entql.BoolP) {
	f.Where(p.Field(approle.FieldDefault))
}

// WhereGenesis applies the entql bool predicate on the genesis field.
func (f *AppRoleFilter) WhereGenesis(p entql.BoolP) {
	f.Where(p.Field(approle.FieldGenesis))
}

// addPredicate implements the predicateAdder interface.
func (aruq *AppRoleUserQuery) addPredicate(pred func(s *sql.Selector)) {
	aruq.predicates = append(aruq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppRoleUserQuery builder.
func (aruq *AppRoleUserQuery) Filter() *AppRoleUserFilter {
	return &AppRoleUserFilter{config: aruq.config, predicateAdder: aruq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppRoleUserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppRoleUserMutation builder.
func (m *AppRoleUserMutation) Filter() *AppRoleUserFilter {
	return &AppRoleUserFilter{config: m.config, predicateAdder: m}
}

// AppRoleUserFilter provides a generic filtering capability at runtime for AppRoleUserQuery.
type AppRoleUserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppRoleUserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppRoleUserFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(approleuser.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppRoleUserFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(approleuser.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppRoleUserFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(approleuser.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppRoleUserFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(approleuser.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppRoleUserFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(approleuser.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppRoleUserFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(approleuser.FieldAppID))
}

// WhereRoleID applies the entql [16]byte predicate on the role_id field.
func (f *AppRoleUserFilter) WhereRoleID(p entql.ValueP) {
	f.Where(p.Field(approleuser.FieldRoleID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *AppRoleUserFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(approleuser.FieldUserID))
}

// addPredicate implements the predicateAdder interface.
func (asq *AppSubscribeQuery) addPredicate(pred func(s *sql.Selector)) {
	asq.predicates = append(asq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppSubscribeQuery builder.
func (asq *AppSubscribeQuery) Filter() *AppSubscribeFilter {
	return &AppSubscribeFilter{config: asq.config, predicateAdder: asq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppSubscribeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppSubscribeMutation builder.
func (m *AppSubscribeMutation) Filter() *AppSubscribeFilter {
	return &AppSubscribeFilter{config: m.config, predicateAdder: m}
}

// AppSubscribeFilter provides a generic filtering capability at runtime for AppSubscribeQuery.
type AppSubscribeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppSubscribeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppSubscribeFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appsubscribe.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppSubscribeFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appsubscribe.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppSubscribeFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appsubscribe.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppSubscribeFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appsubscribe.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppSubscribeFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appsubscribe.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppSubscribeFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appsubscribe.FieldAppID))
}

// WhereSubscribeAppID applies the entql [16]byte predicate on the subscribe_app_id field.
func (f *AppSubscribeFilter) WhereSubscribeAppID(p entql.ValueP) {
	f.Where(p.Field(appsubscribe.FieldSubscribeAppID))
}

// addPredicate implements the predicateAdder interface.
func (auq *AppUserQuery) addPredicate(pred func(s *sql.Selector)) {
	auq.predicates = append(auq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppUserQuery builder.
func (auq *AppUserQuery) Filter() *AppUserFilter {
	return &AppUserFilter{config: auq.config, predicateAdder: auq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppUserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppUserMutation builder.
func (m *AppUserMutation) Filter() *AppUserFilter {
	return &AppUserFilter{config: m.config, predicateAdder: m}
}

// AppUserFilter provides a generic filtering capability at runtime for AppUserQuery.
type AppUserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppUserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppUserFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appuser.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppUserFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appuser.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppUserFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appuser.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppUserFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appuser.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppUserFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appuser.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppUserFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appuser.FieldAppID))
}

// WhereEmailAddress applies the entql string predicate on the email_address field.
func (f *AppUserFilter) WhereEmailAddress(p entql.StringP) {
	f.Where(p.Field(appuser.FieldEmailAddress))
}

// WherePhoneNo applies the entql string predicate on the phone_no field.
func (f *AppUserFilter) WherePhoneNo(p entql.StringP) {
	f.Where(p.Field(appuser.FieldPhoneNo))
}

// WhereImportFromApp applies the entql [16]byte predicate on the import_from_app field.
func (f *AppUserFilter) WhereImportFromApp(p entql.ValueP) {
	f.Where(p.Field(appuser.FieldImportFromApp))
}

// addPredicate implements the predicateAdder interface.
func (aucq *AppUserControlQuery) addPredicate(pred func(s *sql.Selector)) {
	aucq.predicates = append(aucq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppUserControlQuery builder.
func (aucq *AppUserControlQuery) Filter() *AppUserControlFilter {
	return &AppUserControlFilter{config: aucq.config, predicateAdder: aucq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppUserControlMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppUserControlMutation builder.
func (m *AppUserControlMutation) Filter() *AppUserControlFilter {
	return &AppUserControlFilter{config: m.config, predicateAdder: m}
}

// AppUserControlFilter provides a generic filtering capability at runtime for AppUserControlQuery.
type AppUserControlFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppUserControlFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppUserControlFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appusercontrol.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppUserControlFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appusercontrol.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppUserControlFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appusercontrol.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppUserControlFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appusercontrol.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppUserControlFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appusercontrol.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppUserControlFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appusercontrol.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *AppUserControlFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(appusercontrol.FieldUserID))
}

// WhereSigninVerifyByGoogleAuthentication applies the entql bool predicate on the signin_verify_by_google_authentication field.
func (f *AppUserControlFilter) WhereSigninVerifyByGoogleAuthentication(p entql.BoolP) {
	f.Where(p.Field(appusercontrol.FieldSigninVerifyByGoogleAuthentication))
}

// WhereGoogleAuthenticationVerified applies the entql bool predicate on the google_authentication_verified field.
func (f *AppUserControlFilter) WhereGoogleAuthenticationVerified(p entql.BoolP) {
	f.Where(p.Field(appusercontrol.FieldGoogleAuthenticationVerified))
}

// WhereSigninVerifyType applies the entql string predicate on the signin_verify_type field.
func (f *AppUserControlFilter) WhereSigninVerifyType(p entql.StringP) {
	f.Where(p.Field(appusercontrol.FieldSigninVerifyType))
}

// WhereKol applies the entql bool predicate on the kol field.
func (f *AppUserControlFilter) WhereKol(p entql.BoolP) {
	f.Where(p.Field(appusercontrol.FieldKol))
}

// WhereKolConfirmed applies the entql bool predicate on the kol_confirmed field.
func (f *AppUserControlFilter) WhereKolConfirmed(p entql.BoolP) {
	f.Where(p.Field(appusercontrol.FieldKolConfirmed))
}

// WhereSelectedLangID applies the entql [16]byte predicate on the selected_lang_id field.
func (f *AppUserControlFilter) WhereSelectedLangID(p entql.ValueP) {
	f.Where(p.Field(appusercontrol.FieldSelectedLangID))
}

// addPredicate implements the predicateAdder interface.
func (aueq *AppUserExtraQuery) addPredicate(pred func(s *sql.Selector)) {
	aueq.predicates = append(aueq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppUserExtraQuery builder.
func (aueq *AppUserExtraQuery) Filter() *AppUserExtraFilter {
	return &AppUserExtraFilter{config: aueq.config, predicateAdder: aueq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppUserExtraMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppUserExtraMutation builder.
func (m *AppUserExtraMutation) Filter() *AppUserExtraFilter {
	return &AppUserExtraFilter{config: m.config, predicateAdder: m}
}

// AppUserExtraFilter provides a generic filtering capability at runtime for AppUserExtraQuery.
type AppUserExtraFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppUserExtraFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppUserExtraFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appuserextra.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppUserExtraFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appuserextra.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppUserExtraFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appuserextra.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppUserExtraFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appuserextra.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppUserExtraFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appuserextra.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppUserExtraFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appuserextra.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *AppUserExtraFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(appuserextra.FieldUserID))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *AppUserExtraFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(appuserextra.FieldUsername))
}

// WhereFirstName applies the entql string predicate on the first_name field.
func (f *AppUserExtraFilter) WhereFirstName(p entql.StringP) {
	f.Where(p.Field(appuserextra.FieldFirstName))
}

// WhereLastName applies the entql string predicate on the last_name field.
func (f *AppUserExtraFilter) WhereLastName(p entql.StringP) {
	f.Where(p.Field(appuserextra.FieldLastName))
}

// WhereAddressFields applies the entql json.RawMessage predicate on the address_fields field.
func (f *AppUserExtraFilter) WhereAddressFields(p entql.BytesP) {
	f.Where(p.Field(appuserextra.FieldAddressFields))
}

// WhereGender applies the entql string predicate on the gender field.
func (f *AppUserExtraFilter) WhereGender(p entql.StringP) {
	f.Where(p.Field(appuserextra.FieldGender))
}

// WherePostalCode applies the entql string predicate on the postal_code field.
func (f *AppUserExtraFilter) WherePostalCode(p entql.StringP) {
	f.Where(p.Field(appuserextra.FieldPostalCode))
}

// WhereAge applies the entql uint32 predicate on the age field.
func (f *AppUserExtraFilter) WhereAge(p entql.Uint32P) {
	f.Where(p.Field(appuserextra.FieldAge))
}

// WhereBirthday applies the entql uint32 predicate on the birthday field.
func (f *AppUserExtraFilter) WhereBirthday(p entql.Uint32P) {
	f.Where(p.Field(appuserextra.FieldBirthday))
}

// WhereAvatar applies the entql string predicate on the avatar field.
func (f *AppUserExtraFilter) WhereAvatar(p entql.StringP) {
	f.Where(p.Field(appuserextra.FieldAvatar))
}

// WhereOrganization applies the entql string predicate on the organization field.
func (f *AppUserExtraFilter) WhereOrganization(p entql.StringP) {
	f.Where(p.Field(appuserextra.FieldOrganization))
}

// WhereIDNumber applies the entql string predicate on the id_number field.
func (f *AppUserExtraFilter) WhereIDNumber(p entql.StringP) {
	f.Where(p.Field(appuserextra.FieldIDNumber))
}

// addPredicate implements the predicateAdder interface.
func (ausq *AppUserSecretQuery) addPredicate(pred func(s *sql.Selector)) {
	ausq.predicates = append(ausq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppUserSecretQuery builder.
func (ausq *AppUserSecretQuery) Filter() *AppUserSecretFilter {
	return &AppUserSecretFilter{config: ausq.config, predicateAdder: ausq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppUserSecretMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppUserSecretMutation builder.
func (m *AppUserSecretMutation) Filter() *AppUserSecretFilter {
	return &AppUserSecretFilter{config: m.config, predicateAdder: m}
}

// AppUserSecretFilter provides a generic filtering capability at runtime for AppUserSecretQuery.
type AppUserSecretFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppUserSecretFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppUserSecretFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appusersecret.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppUserSecretFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appusersecret.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppUserSecretFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appusersecret.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppUserSecretFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appusersecret.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppUserSecretFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appusersecret.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppUserSecretFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appusersecret.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *AppUserSecretFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(appusersecret.FieldUserID))
}

// WherePasswordHash applies the entql string predicate on the password_hash field.
func (f *AppUserSecretFilter) WherePasswordHash(p entql.StringP) {
	f.Where(p.Field(appusersecret.FieldPasswordHash))
}

// WhereSalt applies the entql string predicate on the salt field.
func (f *AppUserSecretFilter) WhereSalt(p entql.StringP) {
	f.Where(p.Field(appusersecret.FieldSalt))
}

// WhereGoogleSecret applies the entql string predicate on the google_secret field.
func (f *AppUserSecretFilter) WhereGoogleSecret(p entql.StringP) {
	f.Where(p.Field(appusersecret.FieldGoogleSecret))
}

// addPredicate implements the predicateAdder interface.
func (autpq *AppUserThirdPartyQuery) addPredicate(pred func(s *sql.Selector)) {
	autpq.predicates = append(autpq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppUserThirdPartyQuery builder.
func (autpq *AppUserThirdPartyQuery) Filter() *AppUserThirdPartyFilter {
	return &AppUserThirdPartyFilter{config: autpq.config, predicateAdder: autpq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppUserThirdPartyMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppUserThirdPartyMutation builder.
func (m *AppUserThirdPartyMutation) Filter() *AppUserThirdPartyFilter {
	return &AppUserThirdPartyFilter{config: m.config, predicateAdder: m}
}

// AppUserThirdPartyFilter provides a generic filtering capability at runtime for AppUserThirdPartyQuery.
type AppUserThirdPartyFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppUserThirdPartyFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppUserThirdPartyFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appuserthirdparty.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppUserThirdPartyFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appuserthirdparty.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppUserThirdPartyFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appuserthirdparty.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppUserThirdPartyFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appuserthirdparty.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppUserThirdPartyFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appuserthirdparty.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppUserThirdPartyFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appuserthirdparty.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *AppUserThirdPartyFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(appuserthirdparty.FieldUserID))
}

// WhereThirdPartyUserID applies the entql string predicate on the third_party_user_id field.
func (f *AppUserThirdPartyFilter) WhereThirdPartyUserID(p entql.StringP) {
	f.Where(p.Field(appuserthirdparty.FieldThirdPartyUserID))
}

// WhereThirdPartyID applies the entql [16]byte predicate on the third_party_id field.
func (f *AppUserThirdPartyFilter) WhereThirdPartyID(p entql.ValueP) {
	f.Where(p.Field(appuserthirdparty.FieldThirdPartyID))
}

// WhereThirdPartyUsername applies the entql string predicate on the third_party_username field.
func (f *AppUserThirdPartyFilter) WhereThirdPartyUsername(p entql.StringP) {
	f.Where(p.Field(appuserthirdparty.FieldThirdPartyUsername))
}

// WhereThirdPartyAvatar applies the entql string predicate on the third_party_avatar field.
func (f *AppUserThirdPartyFilter) WhereThirdPartyAvatar(p entql.StringP) {
	f.Where(p.Field(appuserthirdparty.FieldThirdPartyAvatar))
}

// addPredicate implements the predicateAdder interface.
func (aq *AuthQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AuthQuery builder.
func (aq *AuthQuery) Filter() *AuthFilter {
	return &AuthFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AuthMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AuthMutation builder.
func (m *AuthMutation) Filter() *AuthFilter {
	return &AuthFilter{config: m.config, predicateAdder: m}
}

// AuthFilter provides a generic filtering capability at runtime for AuthQuery.
type AuthFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AuthFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AuthFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(auth.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AuthFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(auth.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AuthFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(auth.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AuthFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(auth.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AuthFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(auth.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AuthFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(auth.FieldAppID))
}

// WhereRoleID applies the entql [16]byte predicate on the role_id field.
func (f *AuthFilter) WhereRoleID(p entql.ValueP) {
	f.Where(p.Field(auth.FieldRoleID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *AuthFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(auth.FieldUserID))
}

// WhereResource applies the entql string predicate on the resource field.
func (f *AuthFilter) WhereResource(p entql.StringP) {
	f.Where(p.Field(auth.FieldResource))
}

// WhereMethod applies the entql string predicate on the method field.
func (f *AuthFilter) WhereMethod(p entql.StringP) {
	f.Where(p.Field(auth.FieldMethod))
}

// addPredicate implements the predicateAdder interface.
func (ahq *AuthHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	ahq.predicates = append(ahq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AuthHistoryQuery builder.
func (ahq *AuthHistoryQuery) Filter() *AuthHistoryFilter {
	return &AuthHistoryFilter{config: ahq.config, predicateAdder: ahq}
}

// addPredicate implements the predicateAdder interface.
func (m *AuthHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AuthHistoryMutation builder.
func (m *AuthHistoryMutation) Filter() *AuthHistoryFilter {
	return &AuthHistoryFilter{config: m.config, predicateAdder: m}
}

// AuthHistoryFilter provides a generic filtering capability at runtime for AuthHistoryQuery.
type AuthHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AuthHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AuthHistoryFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(authhistory.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AuthHistoryFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(authhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AuthHistoryFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(authhistory.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AuthHistoryFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(authhistory.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AuthHistoryFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(authhistory.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AuthHistoryFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(authhistory.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *AuthHistoryFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(authhistory.FieldUserID))
}

// WhereResource applies the entql string predicate on the resource field.
func (f *AuthHistoryFilter) WhereResource(p entql.StringP) {
	f.Where(p.Field(authhistory.FieldResource))
}

// WhereMethod applies the entql string predicate on the method field.
func (f *AuthHistoryFilter) WhereMethod(p entql.StringP) {
	f.Where(p.Field(authhistory.FieldMethod))
}

// WhereAllowed applies the entql bool predicate on the allowed field.
func (f *AuthHistoryFilter) WhereAllowed(p entql.BoolP) {
	f.Where(p.Field(authhistory.FieldAllowed))
}

// addPredicate implements the predicateAdder interface.
func (baq *BanAppQuery) addPredicate(pred func(s *sql.Selector)) {
	baq.predicates = append(baq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BanAppQuery builder.
func (baq *BanAppQuery) Filter() *BanAppFilter {
	return &BanAppFilter{config: baq.config, predicateAdder: baq}
}

// addPredicate implements the predicateAdder interface.
func (m *BanAppMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BanAppMutation builder.
func (m *BanAppMutation) Filter() *BanAppFilter {
	return &BanAppFilter{config: m.config, predicateAdder: m}
}

// BanAppFilter provides a generic filtering capability at runtime for BanAppQuery.
type BanAppFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BanAppFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *BanAppFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(banapp.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *BanAppFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(banapp.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *BanAppFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(banapp.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *BanAppFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(banapp.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *BanAppFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(banapp.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *BanAppFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(banapp.FieldAppID))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *BanAppFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(banapp.FieldMessage))
}

// addPredicate implements the predicateAdder interface.
func (bauq *BanAppUserQuery) addPredicate(pred func(s *sql.Selector)) {
	bauq.predicates = append(bauq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BanAppUserQuery builder.
func (bauq *BanAppUserQuery) Filter() *BanAppUserFilter {
	return &BanAppUserFilter{config: bauq.config, predicateAdder: bauq}
}

// addPredicate implements the predicateAdder interface.
func (m *BanAppUserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BanAppUserMutation builder.
func (m *BanAppUserMutation) Filter() *BanAppUserFilter {
	return &BanAppUserFilter{config: m.config, predicateAdder: m}
}

// BanAppUserFilter provides a generic filtering capability at runtime for BanAppUserQuery.
type BanAppUserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BanAppUserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[14].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *BanAppUserFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(banappuser.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *BanAppUserFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(banappuser.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *BanAppUserFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(banappuser.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *BanAppUserFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(banappuser.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *BanAppUserFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(banappuser.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *BanAppUserFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(banappuser.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *BanAppUserFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(banappuser.FieldUserID))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *BanAppUserFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(banappuser.FieldMessage))
}

// addPredicate implements the predicateAdder interface.
func (kq *KycQuery) addPredicate(pred func(s *sql.Selector)) {
	kq.predicates = append(kq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the KycQuery builder.
func (kq *KycQuery) Filter() *KycFilter {
	return &KycFilter{config: kq.config, predicateAdder: kq}
}

// addPredicate implements the predicateAdder interface.
func (m *KycMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the KycMutation builder.
func (m *KycMutation) Filter() *KycFilter {
	return &KycFilter{config: m.config, predicateAdder: m}
}

// KycFilter provides a generic filtering capability at runtime for KycQuery.
type KycFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *KycFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[15].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *KycFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(kyc.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *KycFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(kyc.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *KycFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(kyc.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *KycFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(kyc.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *KycFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(kyc.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *KycFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(kyc.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *KycFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(kyc.FieldUserID))
}

// WhereDocumentType applies the entql string predicate on the document_type field.
func (f *KycFilter) WhereDocumentType(p entql.StringP) {
	f.Where(p.Field(kyc.FieldDocumentType))
}

// WhereIDNumber applies the entql string predicate on the id_number field.
func (f *KycFilter) WhereIDNumber(p entql.StringP) {
	f.Where(p.Field(kyc.FieldIDNumber))
}

// WhereFrontImg applies the entql string predicate on the front_img field.
func (f *KycFilter) WhereFrontImg(p entql.StringP) {
	f.Where(p.Field(kyc.FieldFrontImg))
}

// WhereBackImg applies the entql string predicate on the back_img field.
func (f *KycFilter) WhereBackImg(p entql.StringP) {
	f.Where(p.Field(kyc.FieldBackImg))
}

// WhereSelfieImg applies the entql string predicate on the selfie_img field.
func (f *KycFilter) WhereSelfieImg(p entql.StringP) {
	f.Where(p.Field(kyc.FieldSelfieImg))
}

// WhereEntityType applies the entql string predicate on the entity_type field.
func (f *KycFilter) WhereEntityType(p entql.StringP) {
	f.Where(p.Field(kyc.FieldEntityType))
}

// WhereReviewID applies the entql [16]byte predicate on the review_id field.
func (f *KycFilter) WhereReviewID(p entql.ValueP) {
	f.Where(p.Field(kyc.FieldReviewID))
}

// WhereState applies the entql string predicate on the state field.
func (f *KycFilter) WhereState(p entql.StringP) {
	f.Where(p.Field(kyc.FieldState))
}

// addPredicate implements the predicateAdder interface.
func (lhq *LoginHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	lhq.predicates = append(lhq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the LoginHistoryQuery builder.
func (lhq *LoginHistoryQuery) Filter() *LoginHistoryFilter {
	return &LoginHistoryFilter{config: lhq.config, predicateAdder: lhq}
}

// addPredicate implements the predicateAdder interface.
func (m *LoginHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the LoginHistoryMutation builder.
func (m *LoginHistoryMutation) Filter() *LoginHistoryFilter {
	return &LoginHistoryFilter{config: m.config, predicateAdder: m}
}

// LoginHistoryFilter provides a generic filtering capability at runtime for LoginHistoryQuery.
type LoginHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *LoginHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[16].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *LoginHistoryFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(loginhistory.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *LoginHistoryFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(loginhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *LoginHistoryFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(loginhistory.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *LoginHistoryFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(loginhistory.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *LoginHistoryFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(loginhistory.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *LoginHistoryFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(loginhistory.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *LoginHistoryFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(loginhistory.FieldUserID))
}

// WhereClientIP applies the entql string predicate on the client_ip field.
func (f *LoginHistoryFilter) WhereClientIP(p entql.StringP) {
	f.Where(p.Field(loginhistory.FieldClientIP))
}

// WhereUserAgent applies the entql string predicate on the user_agent field.
func (f *LoginHistoryFilter) WhereUserAgent(p entql.StringP) {
	f.Where(p.Field(loginhistory.FieldUserAgent))
}

// WhereLocation applies the entql string predicate on the location field.
func (f *LoginHistoryFilter) WhereLocation(p entql.StringP) {
	f.Where(p.Field(loginhistory.FieldLocation))
}

// WhereLoginType applies the entql string predicate on the login_type field.
func (f *LoginHistoryFilter) WhereLoginType(p entql.StringP) {
	f.Where(p.Field(loginhistory.FieldLoginType))
}

// addPredicate implements the predicateAdder interface.
func (otpq *OAuthThirdPartyQuery) addPredicate(pred func(s *sql.Selector)) {
	otpq.predicates = append(otpq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OAuthThirdPartyQuery builder.
func (otpq *OAuthThirdPartyQuery) Filter() *OAuthThirdPartyFilter {
	return &OAuthThirdPartyFilter{config: otpq.config, predicateAdder: otpq}
}

// addPredicate implements the predicateAdder interface.
func (m *OAuthThirdPartyMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OAuthThirdPartyMutation builder.
func (m *OAuthThirdPartyMutation) Filter() *OAuthThirdPartyFilter {
	return &OAuthThirdPartyFilter{config: m.config, predicateAdder: m}
}

// OAuthThirdPartyFilter provides a generic filtering capability at runtime for OAuthThirdPartyQuery.
type OAuthThirdPartyFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OAuthThirdPartyFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[17].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *OAuthThirdPartyFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(oauththirdparty.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *OAuthThirdPartyFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(oauththirdparty.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *OAuthThirdPartyFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(oauththirdparty.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *OAuthThirdPartyFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(oauththirdparty.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *OAuthThirdPartyFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(oauththirdparty.FieldEntID))
}

// WhereClientName applies the entql string predicate on the client_name field.
func (f *OAuthThirdPartyFilter) WhereClientName(p entql.StringP) {
	f.Where(p.Field(oauththirdparty.FieldClientName))
}

// WhereClientTag applies the entql string predicate on the client_tag field.
func (f *OAuthThirdPartyFilter) WhereClientTag(p entql.StringP) {
	f.Where(p.Field(oauththirdparty.FieldClientTag))
}

// WhereClientLogoURL applies the entql string predicate on the client_logo_url field.
func (f *OAuthThirdPartyFilter) WhereClientLogoURL(p entql.StringP) {
	f.Where(p.Field(oauththirdparty.FieldClientLogoURL))
}

// WhereClientOauthURL applies the entql string predicate on the client_oauth_url field.
func (f *OAuthThirdPartyFilter) WhereClientOauthURL(p entql.StringP) {
	f.Where(p.Field(oauththirdparty.FieldClientOauthURL))
}

// WhereResponseType applies the entql string predicate on the response_type field.
func (f *OAuthThirdPartyFilter) WhereResponseType(p entql.StringP) {
	f.Where(p.Field(oauththirdparty.FieldResponseType))
}

// WhereScope applies the entql string predicate on the scope field.
func (f *OAuthThirdPartyFilter) WhereScope(p entql.StringP) {
	f.Where(p.Field(oauththirdparty.FieldScope))
}

// addPredicate implements the predicateAdder interface.
func (rcq *RecoveryCodeQuery) addPredicate(pred func(s *sql.Selector)) {
	rcq.predicates = append(rcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RecoveryCodeQuery builder.
func (rcq *RecoveryCodeQuery) Filter() *RecoveryCodeFilter {
	return &RecoveryCodeFilter{config: rcq.config, predicateAdder: rcq}
}

// addPredicate implements the predicateAdder interface.
func (m *RecoveryCodeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RecoveryCodeMutation builder.
func (m *RecoveryCodeMutation) Filter() *RecoveryCodeFilter {
	return &RecoveryCodeFilter{config: m.config, predicateAdder: m}
}

// RecoveryCodeFilter provides a generic filtering capability at runtime for RecoveryCodeQuery.
type RecoveryCodeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RecoveryCodeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[18].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *RecoveryCodeFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(recoverycode.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *RecoveryCodeFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(recoverycode.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *RecoveryCodeFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(recoverycode.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *RecoveryCodeFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(recoverycode.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *RecoveryCodeFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(recoverycode.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *RecoveryCodeFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(recoverycode.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *RecoveryCodeFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(recoverycode.FieldUserID))
}

// WhereCode applies the entql string predicate on the code field.
func (f *RecoveryCodeFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(recoverycode.FieldCode))
}

// WhereUsed applies the entql bool predicate on the used field.
func (f *RecoveryCodeFilter) WhereUsed(p entql.BoolP) {
	f.Where(p.Field(recoverycode.FieldUsed))
}

// addPredicate implements the predicateAdder interface.
func (sq *SubscriberQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SubscriberQuery builder.
func (sq *SubscriberQuery) Filter() *SubscriberFilter {
	return &SubscriberFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SubscriberMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SubscriberMutation builder.
func (m *SubscriberMutation) Filter() *SubscriberFilter {
	return &SubscriberFilter{config: m.config, predicateAdder: m}
}

// SubscriberFilter provides a generic filtering capability at runtime for SubscriberQuery.
type SubscriberFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SubscriberFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[19].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *SubscriberFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(subscriber.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *SubscriberFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(subscriber.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *SubscriberFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(subscriber.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *SubscriberFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(subscriber.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *SubscriberFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(subscriber.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *SubscriberFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(subscriber.FieldAppID))
}

// WhereEmailAddress applies the entql string predicate on the email_address field.
func (f *SubscriberFilter) WhereEmailAddress(p entql.StringP) {
	f.Where(p.Field(subscriber.FieldEmailAddress))
}

// WhereRegistered applies the entql bool predicate on the registered field.
func (f *SubscriberFilter) WhereRegistered(p entql.BoolP) {
	f.Where(p.Field(subscriber.FieldRegistered))
}

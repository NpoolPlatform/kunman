// Code generated by ent, DO NOT EDIT.

package appusersecret

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldEQ(FieldDeletedAt, v))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldEQ(FieldEntID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldEQ(FieldAppID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldEQ(FieldUserID, v))
}

// PasswordHash applies equality check predicate on the "password_hash" field. It's identical to PasswordHashEQ.
func PasswordHash(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldEQ(FieldPasswordHash, v))
}

// Salt applies equality check predicate on the "salt" field. It's identical to SaltEQ.
func Salt(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldEQ(FieldSalt, v))
}

// GoogleSecret applies equality check predicate on the "google_secret" field. It's identical to GoogleSecretEQ.
func GoogleSecret(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldEQ(FieldGoogleSecret, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldLTE(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldLTE(FieldEntID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldLTE(FieldAppID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldLTE(FieldUserID, v))
}

// PasswordHashEQ applies the EQ predicate on the "password_hash" field.
func PasswordHashEQ(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldEQ(FieldPasswordHash, v))
}

// PasswordHashNEQ applies the NEQ predicate on the "password_hash" field.
func PasswordHashNEQ(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldNEQ(FieldPasswordHash, v))
}

// PasswordHashIn applies the In predicate on the "password_hash" field.
func PasswordHashIn(vs ...string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldIn(FieldPasswordHash, vs...))
}

// PasswordHashNotIn applies the NotIn predicate on the "password_hash" field.
func PasswordHashNotIn(vs ...string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldNotIn(FieldPasswordHash, vs...))
}

// PasswordHashGT applies the GT predicate on the "password_hash" field.
func PasswordHashGT(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldGT(FieldPasswordHash, v))
}

// PasswordHashGTE applies the GTE predicate on the "password_hash" field.
func PasswordHashGTE(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldGTE(FieldPasswordHash, v))
}

// PasswordHashLT applies the LT predicate on the "password_hash" field.
func PasswordHashLT(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldLT(FieldPasswordHash, v))
}

// PasswordHashLTE applies the LTE predicate on the "password_hash" field.
func PasswordHashLTE(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldLTE(FieldPasswordHash, v))
}

// PasswordHashContains applies the Contains predicate on the "password_hash" field.
func PasswordHashContains(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldContains(FieldPasswordHash, v))
}

// PasswordHashHasPrefix applies the HasPrefix predicate on the "password_hash" field.
func PasswordHashHasPrefix(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldHasPrefix(FieldPasswordHash, v))
}

// PasswordHashHasSuffix applies the HasSuffix predicate on the "password_hash" field.
func PasswordHashHasSuffix(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldHasSuffix(FieldPasswordHash, v))
}

// PasswordHashEqualFold applies the EqualFold predicate on the "password_hash" field.
func PasswordHashEqualFold(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldEqualFold(FieldPasswordHash, v))
}

// PasswordHashContainsFold applies the ContainsFold predicate on the "password_hash" field.
func PasswordHashContainsFold(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldContainsFold(FieldPasswordHash, v))
}

// SaltEQ applies the EQ predicate on the "salt" field.
func SaltEQ(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldEQ(FieldSalt, v))
}

// SaltNEQ applies the NEQ predicate on the "salt" field.
func SaltNEQ(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldNEQ(FieldSalt, v))
}

// SaltIn applies the In predicate on the "salt" field.
func SaltIn(vs ...string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldIn(FieldSalt, vs...))
}

// SaltNotIn applies the NotIn predicate on the "salt" field.
func SaltNotIn(vs ...string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldNotIn(FieldSalt, vs...))
}

// SaltGT applies the GT predicate on the "salt" field.
func SaltGT(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldGT(FieldSalt, v))
}

// SaltGTE applies the GTE predicate on the "salt" field.
func SaltGTE(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldGTE(FieldSalt, v))
}

// SaltLT applies the LT predicate on the "salt" field.
func SaltLT(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldLT(FieldSalt, v))
}

// SaltLTE applies the LTE predicate on the "salt" field.
func SaltLTE(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldLTE(FieldSalt, v))
}

// SaltContains applies the Contains predicate on the "salt" field.
func SaltContains(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldContains(FieldSalt, v))
}

// SaltHasPrefix applies the HasPrefix predicate on the "salt" field.
func SaltHasPrefix(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldHasPrefix(FieldSalt, v))
}

// SaltHasSuffix applies the HasSuffix predicate on the "salt" field.
func SaltHasSuffix(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldHasSuffix(FieldSalt, v))
}

// SaltEqualFold applies the EqualFold predicate on the "salt" field.
func SaltEqualFold(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldEqualFold(FieldSalt, v))
}

// SaltContainsFold applies the ContainsFold predicate on the "salt" field.
func SaltContainsFold(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldContainsFold(FieldSalt, v))
}

// GoogleSecretEQ applies the EQ predicate on the "google_secret" field.
func GoogleSecretEQ(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldEQ(FieldGoogleSecret, v))
}

// GoogleSecretNEQ applies the NEQ predicate on the "google_secret" field.
func GoogleSecretNEQ(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldNEQ(FieldGoogleSecret, v))
}

// GoogleSecretIn applies the In predicate on the "google_secret" field.
func GoogleSecretIn(vs ...string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldIn(FieldGoogleSecret, vs...))
}

// GoogleSecretNotIn applies the NotIn predicate on the "google_secret" field.
func GoogleSecretNotIn(vs ...string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldNotIn(FieldGoogleSecret, vs...))
}

// GoogleSecretGT applies the GT predicate on the "google_secret" field.
func GoogleSecretGT(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldGT(FieldGoogleSecret, v))
}

// GoogleSecretGTE applies the GTE predicate on the "google_secret" field.
func GoogleSecretGTE(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldGTE(FieldGoogleSecret, v))
}

// GoogleSecretLT applies the LT predicate on the "google_secret" field.
func GoogleSecretLT(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldLT(FieldGoogleSecret, v))
}

// GoogleSecretLTE applies the LTE predicate on the "google_secret" field.
func GoogleSecretLTE(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldLTE(FieldGoogleSecret, v))
}

// GoogleSecretContains applies the Contains predicate on the "google_secret" field.
func GoogleSecretContains(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldContains(FieldGoogleSecret, v))
}

// GoogleSecretHasPrefix applies the HasPrefix predicate on the "google_secret" field.
func GoogleSecretHasPrefix(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldHasPrefix(FieldGoogleSecret, v))
}

// GoogleSecretHasSuffix applies the HasSuffix predicate on the "google_secret" field.
func GoogleSecretHasSuffix(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldHasSuffix(FieldGoogleSecret, v))
}

// GoogleSecretEqualFold applies the EqualFold predicate on the "google_secret" field.
func GoogleSecretEqualFold(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldEqualFold(FieldGoogleSecret, v))
}

// GoogleSecretContainsFold applies the ContainsFold predicate on the "google_secret" field.
func GoogleSecretContainsFold(v string) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.FieldContainsFold(FieldGoogleSecret, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppUserSecret) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppUserSecret) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppUserSecret) predicate.AppUserSecret {
	return predicate.AppUserSecret(sql.NotPredicates(p))
}

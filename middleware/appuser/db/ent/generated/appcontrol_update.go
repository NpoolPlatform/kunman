// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/appcontrol"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// AppControlUpdate is the builder for updating AppControl entities.
type AppControlUpdate struct {
	config
	hooks     []Hook
	mutation  *AppControlMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppControlUpdate builder.
func (acu *AppControlUpdate) Where(ps ...predicate.AppControl) *AppControlUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetCreatedAt sets the "created_at" field.
func (acu *AppControlUpdate) SetCreatedAt(u uint32) *AppControlUpdate {
	acu.mutation.ResetCreatedAt()
	acu.mutation.SetCreatedAt(u)
	return acu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acu *AppControlUpdate) SetNillableCreatedAt(u *uint32) *AppControlUpdate {
	if u != nil {
		acu.SetCreatedAt(*u)
	}
	return acu
}

// AddCreatedAt adds u to the "created_at" field.
func (acu *AppControlUpdate) AddCreatedAt(u int32) *AppControlUpdate {
	acu.mutation.AddCreatedAt(u)
	return acu
}

// SetUpdatedAt sets the "updated_at" field.
func (acu *AppControlUpdate) SetUpdatedAt(u uint32) *AppControlUpdate {
	acu.mutation.ResetUpdatedAt()
	acu.mutation.SetUpdatedAt(u)
	return acu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (acu *AppControlUpdate) AddUpdatedAt(u int32) *AppControlUpdate {
	acu.mutation.AddUpdatedAt(u)
	return acu
}

// SetDeletedAt sets the "deleted_at" field.
func (acu *AppControlUpdate) SetDeletedAt(u uint32) *AppControlUpdate {
	acu.mutation.ResetDeletedAt()
	acu.mutation.SetDeletedAt(u)
	return acu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (acu *AppControlUpdate) SetNillableDeletedAt(u *uint32) *AppControlUpdate {
	if u != nil {
		acu.SetDeletedAt(*u)
	}
	return acu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (acu *AppControlUpdate) AddDeletedAt(u int32) *AppControlUpdate {
	acu.mutation.AddDeletedAt(u)
	return acu
}

// SetEntID sets the "ent_id" field.
func (acu *AppControlUpdate) SetEntID(u uuid.UUID) *AppControlUpdate {
	acu.mutation.SetEntID(u)
	return acu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (acu *AppControlUpdate) SetNillableEntID(u *uuid.UUID) *AppControlUpdate {
	if u != nil {
		acu.SetEntID(*u)
	}
	return acu
}

// SetAppID sets the "app_id" field.
func (acu *AppControlUpdate) SetAppID(u uuid.UUID) *AppControlUpdate {
	acu.mutation.SetAppID(u)
	return acu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (acu *AppControlUpdate) SetNillableAppID(u *uuid.UUID) *AppControlUpdate {
	if u != nil {
		acu.SetAppID(*u)
	}
	return acu
}

// ClearAppID clears the value of the "app_id" field.
func (acu *AppControlUpdate) ClearAppID() *AppControlUpdate {
	acu.mutation.ClearAppID()
	return acu
}

// SetSignupMethods sets the "signup_methods" field.
func (acu *AppControlUpdate) SetSignupMethods(s []string) *AppControlUpdate {
	acu.mutation.SetSignupMethods(s)
	return acu
}

// AppendSignupMethods appends s to the "signup_methods" field.
func (acu *AppControlUpdate) AppendSignupMethods(s []string) *AppControlUpdate {
	acu.mutation.AppendSignupMethods(s)
	return acu
}

// ClearSignupMethods clears the value of the "signup_methods" field.
func (acu *AppControlUpdate) ClearSignupMethods() *AppControlUpdate {
	acu.mutation.ClearSignupMethods()
	return acu
}

// SetExternSigninMethods sets the "extern_signin_methods" field.
func (acu *AppControlUpdate) SetExternSigninMethods(s []string) *AppControlUpdate {
	acu.mutation.SetExternSigninMethods(s)
	return acu
}

// AppendExternSigninMethods appends s to the "extern_signin_methods" field.
func (acu *AppControlUpdate) AppendExternSigninMethods(s []string) *AppControlUpdate {
	acu.mutation.AppendExternSigninMethods(s)
	return acu
}

// ClearExternSigninMethods clears the value of the "extern_signin_methods" field.
func (acu *AppControlUpdate) ClearExternSigninMethods() *AppControlUpdate {
	acu.mutation.ClearExternSigninMethods()
	return acu
}

// SetRecaptchaMethod sets the "recaptcha_method" field.
func (acu *AppControlUpdate) SetRecaptchaMethod(s string) *AppControlUpdate {
	acu.mutation.SetRecaptchaMethod(s)
	return acu
}

// SetNillableRecaptchaMethod sets the "recaptcha_method" field if the given value is not nil.
func (acu *AppControlUpdate) SetNillableRecaptchaMethod(s *string) *AppControlUpdate {
	if s != nil {
		acu.SetRecaptchaMethod(*s)
	}
	return acu
}

// ClearRecaptchaMethod clears the value of the "recaptcha_method" field.
func (acu *AppControlUpdate) ClearRecaptchaMethod() *AppControlUpdate {
	acu.mutation.ClearRecaptchaMethod()
	return acu
}

// SetKycEnable sets the "kyc_enable" field.
func (acu *AppControlUpdate) SetKycEnable(b bool) *AppControlUpdate {
	acu.mutation.SetKycEnable(b)
	return acu
}

// SetNillableKycEnable sets the "kyc_enable" field if the given value is not nil.
func (acu *AppControlUpdate) SetNillableKycEnable(b *bool) *AppControlUpdate {
	if b != nil {
		acu.SetKycEnable(*b)
	}
	return acu
}

// ClearKycEnable clears the value of the "kyc_enable" field.
func (acu *AppControlUpdate) ClearKycEnable() *AppControlUpdate {
	acu.mutation.ClearKycEnable()
	return acu
}

// SetSigninVerifyEnable sets the "signin_verify_enable" field.
func (acu *AppControlUpdate) SetSigninVerifyEnable(b bool) *AppControlUpdate {
	acu.mutation.SetSigninVerifyEnable(b)
	return acu
}

// SetNillableSigninVerifyEnable sets the "signin_verify_enable" field if the given value is not nil.
func (acu *AppControlUpdate) SetNillableSigninVerifyEnable(b *bool) *AppControlUpdate {
	if b != nil {
		acu.SetSigninVerifyEnable(*b)
	}
	return acu
}

// ClearSigninVerifyEnable clears the value of the "signin_verify_enable" field.
func (acu *AppControlUpdate) ClearSigninVerifyEnable() *AppControlUpdate {
	acu.mutation.ClearSigninVerifyEnable()
	return acu
}

// SetInvitationCodeMust sets the "invitation_code_must" field.
func (acu *AppControlUpdate) SetInvitationCodeMust(b bool) *AppControlUpdate {
	acu.mutation.SetInvitationCodeMust(b)
	return acu
}

// SetNillableInvitationCodeMust sets the "invitation_code_must" field if the given value is not nil.
func (acu *AppControlUpdate) SetNillableInvitationCodeMust(b *bool) *AppControlUpdate {
	if b != nil {
		acu.SetInvitationCodeMust(*b)
	}
	return acu
}

// ClearInvitationCodeMust clears the value of the "invitation_code_must" field.
func (acu *AppControlUpdate) ClearInvitationCodeMust() *AppControlUpdate {
	acu.mutation.ClearInvitationCodeMust()
	return acu
}

// SetCreateInvitationCodeWhen sets the "create_invitation_code_when" field.
func (acu *AppControlUpdate) SetCreateInvitationCodeWhen(s string) *AppControlUpdate {
	acu.mutation.SetCreateInvitationCodeWhen(s)
	return acu
}

// SetNillableCreateInvitationCodeWhen sets the "create_invitation_code_when" field if the given value is not nil.
func (acu *AppControlUpdate) SetNillableCreateInvitationCodeWhen(s *string) *AppControlUpdate {
	if s != nil {
		acu.SetCreateInvitationCodeWhen(*s)
	}
	return acu
}

// ClearCreateInvitationCodeWhen clears the value of the "create_invitation_code_when" field.
func (acu *AppControlUpdate) ClearCreateInvitationCodeWhen() *AppControlUpdate {
	acu.mutation.ClearCreateInvitationCodeWhen()
	return acu
}

// SetMaxTypedCouponsPerOrder sets the "max_typed_coupons_per_order" field.
func (acu *AppControlUpdate) SetMaxTypedCouponsPerOrder(u uint32) *AppControlUpdate {
	acu.mutation.ResetMaxTypedCouponsPerOrder()
	acu.mutation.SetMaxTypedCouponsPerOrder(u)
	return acu
}

// SetNillableMaxTypedCouponsPerOrder sets the "max_typed_coupons_per_order" field if the given value is not nil.
func (acu *AppControlUpdate) SetNillableMaxTypedCouponsPerOrder(u *uint32) *AppControlUpdate {
	if u != nil {
		acu.SetMaxTypedCouponsPerOrder(*u)
	}
	return acu
}

// AddMaxTypedCouponsPerOrder adds u to the "max_typed_coupons_per_order" field.
func (acu *AppControlUpdate) AddMaxTypedCouponsPerOrder(u int32) *AppControlUpdate {
	acu.mutation.AddMaxTypedCouponsPerOrder(u)
	return acu
}

// ClearMaxTypedCouponsPerOrder clears the value of the "max_typed_coupons_per_order" field.
func (acu *AppControlUpdate) ClearMaxTypedCouponsPerOrder() *AppControlUpdate {
	acu.mutation.ClearMaxTypedCouponsPerOrder()
	return acu
}

// SetMaintaining sets the "maintaining" field.
func (acu *AppControlUpdate) SetMaintaining(b bool) *AppControlUpdate {
	acu.mutation.SetMaintaining(b)
	return acu
}

// SetNillableMaintaining sets the "maintaining" field if the given value is not nil.
func (acu *AppControlUpdate) SetNillableMaintaining(b *bool) *AppControlUpdate {
	if b != nil {
		acu.SetMaintaining(*b)
	}
	return acu
}

// ClearMaintaining clears the value of the "maintaining" field.
func (acu *AppControlUpdate) ClearMaintaining() *AppControlUpdate {
	acu.mutation.ClearMaintaining()
	return acu
}

// SetCouponWithdrawEnable sets the "coupon_withdraw_enable" field.
func (acu *AppControlUpdate) SetCouponWithdrawEnable(b bool) *AppControlUpdate {
	acu.mutation.SetCouponWithdrawEnable(b)
	return acu
}

// SetNillableCouponWithdrawEnable sets the "coupon_withdraw_enable" field if the given value is not nil.
func (acu *AppControlUpdate) SetNillableCouponWithdrawEnable(b *bool) *AppControlUpdate {
	if b != nil {
		acu.SetCouponWithdrawEnable(*b)
	}
	return acu
}

// ClearCouponWithdrawEnable clears the value of the "coupon_withdraw_enable" field.
func (acu *AppControlUpdate) ClearCouponWithdrawEnable() *AppControlUpdate {
	acu.mutation.ClearCouponWithdrawEnable()
	return acu
}

// SetCommitButtonTargets sets the "commit_button_targets" field.
func (acu *AppControlUpdate) SetCommitButtonTargets(s []string) *AppControlUpdate {
	acu.mutation.SetCommitButtonTargets(s)
	return acu
}

// AppendCommitButtonTargets appends s to the "commit_button_targets" field.
func (acu *AppControlUpdate) AppendCommitButtonTargets(s []string) *AppControlUpdate {
	acu.mutation.AppendCommitButtonTargets(s)
	return acu
}

// ClearCommitButtonTargets clears the value of the "commit_button_targets" field.
func (acu *AppControlUpdate) ClearCommitButtonTargets() *AppControlUpdate {
	acu.mutation.ClearCommitButtonTargets()
	return acu
}

// SetResetUserMethod sets the "reset_user_method" field.
func (acu *AppControlUpdate) SetResetUserMethod(s string) *AppControlUpdate {
	acu.mutation.SetResetUserMethod(s)
	return acu
}

// SetNillableResetUserMethod sets the "reset_user_method" field if the given value is not nil.
func (acu *AppControlUpdate) SetNillableResetUserMethod(s *string) *AppControlUpdate {
	if s != nil {
		acu.SetResetUserMethod(*s)
	}
	return acu
}

// ClearResetUserMethod clears the value of the "reset_user_method" field.
func (acu *AppControlUpdate) ClearResetUserMethod() *AppControlUpdate {
	acu.mutation.ClearResetUserMethod()
	return acu
}

// Mutation returns the AppControlMutation object of the builder.
func (acu *AppControlUpdate) Mutation() *AppControlMutation {
	return acu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *AppControlUpdate) Save(ctx context.Context) (int, error) {
	acu.defaults()
	return withHooks(ctx, acu.sqlSave, acu.mutation, acu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acu *AppControlUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *AppControlUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *AppControlUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acu *AppControlUpdate) defaults() {
	if _, ok := acu.mutation.UpdatedAt(); !ok {
		v := appcontrol.UpdateDefaultUpdatedAt()
		acu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (acu *AppControlUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppControlUpdate {
	acu.modifiers = append(acu.modifiers, modifiers...)
	return acu
}

func (acu *AppControlUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appcontrol.Table, appcontrol.Columns, sqlgraph.NewFieldSpec(appcontrol.FieldID, field.TypeUint32))
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acu.mutation.CreatedAt(); ok {
		_spec.SetField(appcontrol.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := acu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(appcontrol.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := acu.mutation.UpdatedAt(); ok {
		_spec.SetField(appcontrol.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := acu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(appcontrol.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := acu.mutation.DeletedAt(); ok {
		_spec.SetField(appcontrol.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := acu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(appcontrol.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := acu.mutation.EntID(); ok {
		_spec.SetField(appcontrol.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := acu.mutation.AppID(); ok {
		_spec.SetField(appcontrol.FieldAppID, field.TypeUUID, value)
	}
	if acu.mutation.AppIDCleared() {
		_spec.ClearField(appcontrol.FieldAppID, field.TypeUUID)
	}
	if value, ok := acu.mutation.SignupMethods(); ok {
		_spec.SetField(appcontrol.FieldSignupMethods, field.TypeJSON, value)
	}
	if value, ok := acu.mutation.AppendedSignupMethods(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, appcontrol.FieldSignupMethods, value)
		})
	}
	if acu.mutation.SignupMethodsCleared() {
		_spec.ClearField(appcontrol.FieldSignupMethods, field.TypeJSON)
	}
	if value, ok := acu.mutation.ExternSigninMethods(); ok {
		_spec.SetField(appcontrol.FieldExternSigninMethods, field.TypeJSON, value)
	}
	if value, ok := acu.mutation.AppendedExternSigninMethods(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, appcontrol.FieldExternSigninMethods, value)
		})
	}
	if acu.mutation.ExternSigninMethodsCleared() {
		_spec.ClearField(appcontrol.FieldExternSigninMethods, field.TypeJSON)
	}
	if value, ok := acu.mutation.RecaptchaMethod(); ok {
		_spec.SetField(appcontrol.FieldRecaptchaMethod, field.TypeString, value)
	}
	if acu.mutation.RecaptchaMethodCleared() {
		_spec.ClearField(appcontrol.FieldRecaptchaMethod, field.TypeString)
	}
	if value, ok := acu.mutation.KycEnable(); ok {
		_spec.SetField(appcontrol.FieldKycEnable, field.TypeBool, value)
	}
	if acu.mutation.KycEnableCleared() {
		_spec.ClearField(appcontrol.FieldKycEnable, field.TypeBool)
	}
	if value, ok := acu.mutation.SigninVerifyEnable(); ok {
		_spec.SetField(appcontrol.FieldSigninVerifyEnable, field.TypeBool, value)
	}
	if acu.mutation.SigninVerifyEnableCleared() {
		_spec.ClearField(appcontrol.FieldSigninVerifyEnable, field.TypeBool)
	}
	if value, ok := acu.mutation.InvitationCodeMust(); ok {
		_spec.SetField(appcontrol.FieldInvitationCodeMust, field.TypeBool, value)
	}
	if acu.mutation.InvitationCodeMustCleared() {
		_spec.ClearField(appcontrol.FieldInvitationCodeMust, field.TypeBool)
	}
	if value, ok := acu.mutation.CreateInvitationCodeWhen(); ok {
		_spec.SetField(appcontrol.FieldCreateInvitationCodeWhen, field.TypeString, value)
	}
	if acu.mutation.CreateInvitationCodeWhenCleared() {
		_spec.ClearField(appcontrol.FieldCreateInvitationCodeWhen, field.TypeString)
	}
	if value, ok := acu.mutation.MaxTypedCouponsPerOrder(); ok {
		_spec.SetField(appcontrol.FieldMaxTypedCouponsPerOrder, field.TypeUint32, value)
	}
	if value, ok := acu.mutation.AddedMaxTypedCouponsPerOrder(); ok {
		_spec.AddField(appcontrol.FieldMaxTypedCouponsPerOrder, field.TypeUint32, value)
	}
	if acu.mutation.MaxTypedCouponsPerOrderCleared() {
		_spec.ClearField(appcontrol.FieldMaxTypedCouponsPerOrder, field.TypeUint32)
	}
	if value, ok := acu.mutation.Maintaining(); ok {
		_spec.SetField(appcontrol.FieldMaintaining, field.TypeBool, value)
	}
	if acu.mutation.MaintainingCleared() {
		_spec.ClearField(appcontrol.FieldMaintaining, field.TypeBool)
	}
	if value, ok := acu.mutation.CouponWithdrawEnable(); ok {
		_spec.SetField(appcontrol.FieldCouponWithdrawEnable, field.TypeBool, value)
	}
	if acu.mutation.CouponWithdrawEnableCleared() {
		_spec.ClearField(appcontrol.FieldCouponWithdrawEnable, field.TypeBool)
	}
	if value, ok := acu.mutation.CommitButtonTargets(); ok {
		_spec.SetField(appcontrol.FieldCommitButtonTargets, field.TypeJSON, value)
	}
	if value, ok := acu.mutation.AppendedCommitButtonTargets(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, appcontrol.FieldCommitButtonTargets, value)
		})
	}
	if acu.mutation.CommitButtonTargetsCleared() {
		_spec.ClearField(appcontrol.FieldCommitButtonTargets, field.TypeJSON)
	}
	if value, ok := acu.mutation.ResetUserMethod(); ok {
		_spec.SetField(appcontrol.FieldResetUserMethod, field.TypeString, value)
	}
	if acu.mutation.ResetUserMethodCleared() {
		_spec.ClearField(appcontrol.FieldResetUserMethod, field.TypeString)
	}
	_spec.AddModifiers(acu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appcontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	acu.mutation.done = true
	return n, nil
}

// AppControlUpdateOne is the builder for updating a single AppControl entity.
type AppControlUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppControlMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (acuo *AppControlUpdateOne) SetCreatedAt(u uint32) *AppControlUpdateOne {
	acuo.mutation.ResetCreatedAt()
	acuo.mutation.SetCreatedAt(u)
	return acuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acuo *AppControlUpdateOne) SetNillableCreatedAt(u *uint32) *AppControlUpdateOne {
	if u != nil {
		acuo.SetCreatedAt(*u)
	}
	return acuo
}

// AddCreatedAt adds u to the "created_at" field.
func (acuo *AppControlUpdateOne) AddCreatedAt(u int32) *AppControlUpdateOne {
	acuo.mutation.AddCreatedAt(u)
	return acuo
}

// SetUpdatedAt sets the "updated_at" field.
func (acuo *AppControlUpdateOne) SetUpdatedAt(u uint32) *AppControlUpdateOne {
	acuo.mutation.ResetUpdatedAt()
	acuo.mutation.SetUpdatedAt(u)
	return acuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (acuo *AppControlUpdateOne) AddUpdatedAt(u int32) *AppControlUpdateOne {
	acuo.mutation.AddUpdatedAt(u)
	return acuo
}

// SetDeletedAt sets the "deleted_at" field.
func (acuo *AppControlUpdateOne) SetDeletedAt(u uint32) *AppControlUpdateOne {
	acuo.mutation.ResetDeletedAt()
	acuo.mutation.SetDeletedAt(u)
	return acuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (acuo *AppControlUpdateOne) SetNillableDeletedAt(u *uint32) *AppControlUpdateOne {
	if u != nil {
		acuo.SetDeletedAt(*u)
	}
	return acuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (acuo *AppControlUpdateOne) AddDeletedAt(u int32) *AppControlUpdateOne {
	acuo.mutation.AddDeletedAt(u)
	return acuo
}

// SetEntID sets the "ent_id" field.
func (acuo *AppControlUpdateOne) SetEntID(u uuid.UUID) *AppControlUpdateOne {
	acuo.mutation.SetEntID(u)
	return acuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (acuo *AppControlUpdateOne) SetNillableEntID(u *uuid.UUID) *AppControlUpdateOne {
	if u != nil {
		acuo.SetEntID(*u)
	}
	return acuo
}

// SetAppID sets the "app_id" field.
func (acuo *AppControlUpdateOne) SetAppID(u uuid.UUID) *AppControlUpdateOne {
	acuo.mutation.SetAppID(u)
	return acuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (acuo *AppControlUpdateOne) SetNillableAppID(u *uuid.UUID) *AppControlUpdateOne {
	if u != nil {
		acuo.SetAppID(*u)
	}
	return acuo
}

// ClearAppID clears the value of the "app_id" field.
func (acuo *AppControlUpdateOne) ClearAppID() *AppControlUpdateOne {
	acuo.mutation.ClearAppID()
	return acuo
}

// SetSignupMethods sets the "signup_methods" field.
func (acuo *AppControlUpdateOne) SetSignupMethods(s []string) *AppControlUpdateOne {
	acuo.mutation.SetSignupMethods(s)
	return acuo
}

// AppendSignupMethods appends s to the "signup_methods" field.
func (acuo *AppControlUpdateOne) AppendSignupMethods(s []string) *AppControlUpdateOne {
	acuo.mutation.AppendSignupMethods(s)
	return acuo
}

// ClearSignupMethods clears the value of the "signup_methods" field.
func (acuo *AppControlUpdateOne) ClearSignupMethods() *AppControlUpdateOne {
	acuo.mutation.ClearSignupMethods()
	return acuo
}

// SetExternSigninMethods sets the "extern_signin_methods" field.
func (acuo *AppControlUpdateOne) SetExternSigninMethods(s []string) *AppControlUpdateOne {
	acuo.mutation.SetExternSigninMethods(s)
	return acuo
}

// AppendExternSigninMethods appends s to the "extern_signin_methods" field.
func (acuo *AppControlUpdateOne) AppendExternSigninMethods(s []string) *AppControlUpdateOne {
	acuo.mutation.AppendExternSigninMethods(s)
	return acuo
}

// ClearExternSigninMethods clears the value of the "extern_signin_methods" field.
func (acuo *AppControlUpdateOne) ClearExternSigninMethods() *AppControlUpdateOne {
	acuo.mutation.ClearExternSigninMethods()
	return acuo
}

// SetRecaptchaMethod sets the "recaptcha_method" field.
func (acuo *AppControlUpdateOne) SetRecaptchaMethod(s string) *AppControlUpdateOne {
	acuo.mutation.SetRecaptchaMethod(s)
	return acuo
}

// SetNillableRecaptchaMethod sets the "recaptcha_method" field if the given value is not nil.
func (acuo *AppControlUpdateOne) SetNillableRecaptchaMethod(s *string) *AppControlUpdateOne {
	if s != nil {
		acuo.SetRecaptchaMethod(*s)
	}
	return acuo
}

// ClearRecaptchaMethod clears the value of the "recaptcha_method" field.
func (acuo *AppControlUpdateOne) ClearRecaptchaMethod() *AppControlUpdateOne {
	acuo.mutation.ClearRecaptchaMethod()
	return acuo
}

// SetKycEnable sets the "kyc_enable" field.
func (acuo *AppControlUpdateOne) SetKycEnable(b bool) *AppControlUpdateOne {
	acuo.mutation.SetKycEnable(b)
	return acuo
}

// SetNillableKycEnable sets the "kyc_enable" field if the given value is not nil.
func (acuo *AppControlUpdateOne) SetNillableKycEnable(b *bool) *AppControlUpdateOne {
	if b != nil {
		acuo.SetKycEnable(*b)
	}
	return acuo
}

// ClearKycEnable clears the value of the "kyc_enable" field.
func (acuo *AppControlUpdateOne) ClearKycEnable() *AppControlUpdateOne {
	acuo.mutation.ClearKycEnable()
	return acuo
}

// SetSigninVerifyEnable sets the "signin_verify_enable" field.
func (acuo *AppControlUpdateOne) SetSigninVerifyEnable(b bool) *AppControlUpdateOne {
	acuo.mutation.SetSigninVerifyEnable(b)
	return acuo
}

// SetNillableSigninVerifyEnable sets the "signin_verify_enable" field if the given value is not nil.
func (acuo *AppControlUpdateOne) SetNillableSigninVerifyEnable(b *bool) *AppControlUpdateOne {
	if b != nil {
		acuo.SetSigninVerifyEnable(*b)
	}
	return acuo
}

// ClearSigninVerifyEnable clears the value of the "signin_verify_enable" field.
func (acuo *AppControlUpdateOne) ClearSigninVerifyEnable() *AppControlUpdateOne {
	acuo.mutation.ClearSigninVerifyEnable()
	return acuo
}

// SetInvitationCodeMust sets the "invitation_code_must" field.
func (acuo *AppControlUpdateOne) SetInvitationCodeMust(b bool) *AppControlUpdateOne {
	acuo.mutation.SetInvitationCodeMust(b)
	return acuo
}

// SetNillableInvitationCodeMust sets the "invitation_code_must" field if the given value is not nil.
func (acuo *AppControlUpdateOne) SetNillableInvitationCodeMust(b *bool) *AppControlUpdateOne {
	if b != nil {
		acuo.SetInvitationCodeMust(*b)
	}
	return acuo
}

// ClearInvitationCodeMust clears the value of the "invitation_code_must" field.
func (acuo *AppControlUpdateOne) ClearInvitationCodeMust() *AppControlUpdateOne {
	acuo.mutation.ClearInvitationCodeMust()
	return acuo
}

// SetCreateInvitationCodeWhen sets the "create_invitation_code_when" field.
func (acuo *AppControlUpdateOne) SetCreateInvitationCodeWhen(s string) *AppControlUpdateOne {
	acuo.mutation.SetCreateInvitationCodeWhen(s)
	return acuo
}

// SetNillableCreateInvitationCodeWhen sets the "create_invitation_code_when" field if the given value is not nil.
func (acuo *AppControlUpdateOne) SetNillableCreateInvitationCodeWhen(s *string) *AppControlUpdateOne {
	if s != nil {
		acuo.SetCreateInvitationCodeWhen(*s)
	}
	return acuo
}

// ClearCreateInvitationCodeWhen clears the value of the "create_invitation_code_when" field.
func (acuo *AppControlUpdateOne) ClearCreateInvitationCodeWhen() *AppControlUpdateOne {
	acuo.mutation.ClearCreateInvitationCodeWhen()
	return acuo
}

// SetMaxTypedCouponsPerOrder sets the "max_typed_coupons_per_order" field.
func (acuo *AppControlUpdateOne) SetMaxTypedCouponsPerOrder(u uint32) *AppControlUpdateOne {
	acuo.mutation.ResetMaxTypedCouponsPerOrder()
	acuo.mutation.SetMaxTypedCouponsPerOrder(u)
	return acuo
}

// SetNillableMaxTypedCouponsPerOrder sets the "max_typed_coupons_per_order" field if the given value is not nil.
func (acuo *AppControlUpdateOne) SetNillableMaxTypedCouponsPerOrder(u *uint32) *AppControlUpdateOne {
	if u != nil {
		acuo.SetMaxTypedCouponsPerOrder(*u)
	}
	return acuo
}

// AddMaxTypedCouponsPerOrder adds u to the "max_typed_coupons_per_order" field.
func (acuo *AppControlUpdateOne) AddMaxTypedCouponsPerOrder(u int32) *AppControlUpdateOne {
	acuo.mutation.AddMaxTypedCouponsPerOrder(u)
	return acuo
}

// ClearMaxTypedCouponsPerOrder clears the value of the "max_typed_coupons_per_order" field.
func (acuo *AppControlUpdateOne) ClearMaxTypedCouponsPerOrder() *AppControlUpdateOne {
	acuo.mutation.ClearMaxTypedCouponsPerOrder()
	return acuo
}

// SetMaintaining sets the "maintaining" field.
func (acuo *AppControlUpdateOne) SetMaintaining(b bool) *AppControlUpdateOne {
	acuo.mutation.SetMaintaining(b)
	return acuo
}

// SetNillableMaintaining sets the "maintaining" field if the given value is not nil.
func (acuo *AppControlUpdateOne) SetNillableMaintaining(b *bool) *AppControlUpdateOne {
	if b != nil {
		acuo.SetMaintaining(*b)
	}
	return acuo
}

// ClearMaintaining clears the value of the "maintaining" field.
func (acuo *AppControlUpdateOne) ClearMaintaining() *AppControlUpdateOne {
	acuo.mutation.ClearMaintaining()
	return acuo
}

// SetCouponWithdrawEnable sets the "coupon_withdraw_enable" field.
func (acuo *AppControlUpdateOne) SetCouponWithdrawEnable(b bool) *AppControlUpdateOne {
	acuo.mutation.SetCouponWithdrawEnable(b)
	return acuo
}

// SetNillableCouponWithdrawEnable sets the "coupon_withdraw_enable" field if the given value is not nil.
func (acuo *AppControlUpdateOne) SetNillableCouponWithdrawEnable(b *bool) *AppControlUpdateOne {
	if b != nil {
		acuo.SetCouponWithdrawEnable(*b)
	}
	return acuo
}

// ClearCouponWithdrawEnable clears the value of the "coupon_withdraw_enable" field.
func (acuo *AppControlUpdateOne) ClearCouponWithdrawEnable() *AppControlUpdateOne {
	acuo.mutation.ClearCouponWithdrawEnable()
	return acuo
}

// SetCommitButtonTargets sets the "commit_button_targets" field.
func (acuo *AppControlUpdateOne) SetCommitButtonTargets(s []string) *AppControlUpdateOne {
	acuo.mutation.SetCommitButtonTargets(s)
	return acuo
}

// AppendCommitButtonTargets appends s to the "commit_button_targets" field.
func (acuo *AppControlUpdateOne) AppendCommitButtonTargets(s []string) *AppControlUpdateOne {
	acuo.mutation.AppendCommitButtonTargets(s)
	return acuo
}

// ClearCommitButtonTargets clears the value of the "commit_button_targets" field.
func (acuo *AppControlUpdateOne) ClearCommitButtonTargets() *AppControlUpdateOne {
	acuo.mutation.ClearCommitButtonTargets()
	return acuo
}

// SetResetUserMethod sets the "reset_user_method" field.
func (acuo *AppControlUpdateOne) SetResetUserMethod(s string) *AppControlUpdateOne {
	acuo.mutation.SetResetUserMethod(s)
	return acuo
}

// SetNillableResetUserMethod sets the "reset_user_method" field if the given value is not nil.
func (acuo *AppControlUpdateOne) SetNillableResetUserMethod(s *string) *AppControlUpdateOne {
	if s != nil {
		acuo.SetResetUserMethod(*s)
	}
	return acuo
}

// ClearResetUserMethod clears the value of the "reset_user_method" field.
func (acuo *AppControlUpdateOne) ClearResetUserMethod() *AppControlUpdateOne {
	acuo.mutation.ClearResetUserMethod()
	return acuo
}

// Mutation returns the AppControlMutation object of the builder.
func (acuo *AppControlUpdateOne) Mutation() *AppControlMutation {
	return acuo.mutation
}

// Where appends a list predicates to the AppControlUpdate builder.
func (acuo *AppControlUpdateOne) Where(ps ...predicate.AppControl) *AppControlUpdateOne {
	acuo.mutation.Where(ps...)
	return acuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *AppControlUpdateOne) Select(field string, fields ...string) *AppControlUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated AppControl entity.
func (acuo *AppControlUpdateOne) Save(ctx context.Context) (*AppControl, error) {
	acuo.defaults()
	return withHooks(ctx, acuo.sqlSave, acuo.mutation, acuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *AppControlUpdateOne) SaveX(ctx context.Context) *AppControl {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *AppControlUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *AppControlUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acuo *AppControlUpdateOne) defaults() {
	if _, ok := acuo.mutation.UpdatedAt(); !ok {
		v := appcontrol.UpdateDefaultUpdatedAt()
		acuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (acuo *AppControlUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppControlUpdateOne {
	acuo.modifiers = append(acuo.modifiers, modifiers...)
	return acuo
}

func (acuo *AppControlUpdateOne) sqlSave(ctx context.Context) (_node *AppControl, err error) {
	_spec := sqlgraph.NewUpdateSpec(appcontrol.Table, appcontrol.Columns, sqlgraph.NewFieldSpec(appcontrol.FieldID, field.TypeUint32))
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AppControl.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appcontrol.FieldID)
		for _, f := range fields {
			if !appcontrol.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != appcontrol.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acuo.mutation.CreatedAt(); ok {
		_spec.SetField(appcontrol.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := acuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(appcontrol.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := acuo.mutation.UpdatedAt(); ok {
		_spec.SetField(appcontrol.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := acuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(appcontrol.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := acuo.mutation.DeletedAt(); ok {
		_spec.SetField(appcontrol.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := acuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(appcontrol.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := acuo.mutation.EntID(); ok {
		_spec.SetField(appcontrol.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := acuo.mutation.AppID(); ok {
		_spec.SetField(appcontrol.FieldAppID, field.TypeUUID, value)
	}
	if acuo.mutation.AppIDCleared() {
		_spec.ClearField(appcontrol.FieldAppID, field.TypeUUID)
	}
	if value, ok := acuo.mutation.SignupMethods(); ok {
		_spec.SetField(appcontrol.FieldSignupMethods, field.TypeJSON, value)
	}
	if value, ok := acuo.mutation.AppendedSignupMethods(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, appcontrol.FieldSignupMethods, value)
		})
	}
	if acuo.mutation.SignupMethodsCleared() {
		_spec.ClearField(appcontrol.FieldSignupMethods, field.TypeJSON)
	}
	if value, ok := acuo.mutation.ExternSigninMethods(); ok {
		_spec.SetField(appcontrol.FieldExternSigninMethods, field.TypeJSON, value)
	}
	if value, ok := acuo.mutation.AppendedExternSigninMethods(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, appcontrol.FieldExternSigninMethods, value)
		})
	}
	if acuo.mutation.ExternSigninMethodsCleared() {
		_spec.ClearField(appcontrol.FieldExternSigninMethods, field.TypeJSON)
	}
	if value, ok := acuo.mutation.RecaptchaMethod(); ok {
		_spec.SetField(appcontrol.FieldRecaptchaMethod, field.TypeString, value)
	}
	if acuo.mutation.RecaptchaMethodCleared() {
		_spec.ClearField(appcontrol.FieldRecaptchaMethod, field.TypeString)
	}
	if value, ok := acuo.mutation.KycEnable(); ok {
		_spec.SetField(appcontrol.FieldKycEnable, field.TypeBool, value)
	}
	if acuo.mutation.KycEnableCleared() {
		_spec.ClearField(appcontrol.FieldKycEnable, field.TypeBool)
	}
	if value, ok := acuo.mutation.SigninVerifyEnable(); ok {
		_spec.SetField(appcontrol.FieldSigninVerifyEnable, field.TypeBool, value)
	}
	if acuo.mutation.SigninVerifyEnableCleared() {
		_spec.ClearField(appcontrol.FieldSigninVerifyEnable, field.TypeBool)
	}
	if value, ok := acuo.mutation.InvitationCodeMust(); ok {
		_spec.SetField(appcontrol.FieldInvitationCodeMust, field.TypeBool, value)
	}
	if acuo.mutation.InvitationCodeMustCleared() {
		_spec.ClearField(appcontrol.FieldInvitationCodeMust, field.TypeBool)
	}
	if value, ok := acuo.mutation.CreateInvitationCodeWhen(); ok {
		_spec.SetField(appcontrol.FieldCreateInvitationCodeWhen, field.TypeString, value)
	}
	if acuo.mutation.CreateInvitationCodeWhenCleared() {
		_spec.ClearField(appcontrol.FieldCreateInvitationCodeWhen, field.TypeString)
	}
	if value, ok := acuo.mutation.MaxTypedCouponsPerOrder(); ok {
		_spec.SetField(appcontrol.FieldMaxTypedCouponsPerOrder, field.TypeUint32, value)
	}
	if value, ok := acuo.mutation.AddedMaxTypedCouponsPerOrder(); ok {
		_spec.AddField(appcontrol.FieldMaxTypedCouponsPerOrder, field.TypeUint32, value)
	}
	if acuo.mutation.MaxTypedCouponsPerOrderCleared() {
		_spec.ClearField(appcontrol.FieldMaxTypedCouponsPerOrder, field.TypeUint32)
	}
	if value, ok := acuo.mutation.Maintaining(); ok {
		_spec.SetField(appcontrol.FieldMaintaining, field.TypeBool, value)
	}
	if acuo.mutation.MaintainingCleared() {
		_spec.ClearField(appcontrol.FieldMaintaining, field.TypeBool)
	}
	if value, ok := acuo.mutation.CouponWithdrawEnable(); ok {
		_spec.SetField(appcontrol.FieldCouponWithdrawEnable, field.TypeBool, value)
	}
	if acuo.mutation.CouponWithdrawEnableCleared() {
		_spec.ClearField(appcontrol.FieldCouponWithdrawEnable, field.TypeBool)
	}
	if value, ok := acuo.mutation.CommitButtonTargets(); ok {
		_spec.SetField(appcontrol.FieldCommitButtonTargets, field.TypeJSON, value)
	}
	if value, ok := acuo.mutation.AppendedCommitButtonTargets(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, appcontrol.FieldCommitButtonTargets, value)
		})
	}
	if acuo.mutation.CommitButtonTargetsCleared() {
		_spec.ClearField(appcontrol.FieldCommitButtonTargets, field.TypeJSON)
	}
	if value, ok := acuo.mutation.ResetUserMethod(); ok {
		_spec.SetField(appcontrol.FieldResetUserMethod, field.TypeString, value)
	}
	if acuo.mutation.ResetUserMethodCleared() {
		_spec.ClearField(appcontrol.FieldResetUserMethod, field.TypeString)
	}
	_spec.AddModifiers(acuo.modifiers...)
	_node = &AppControl{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appcontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	acuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package oauththirdparty

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the oauththirdparty type in the database.
	Label = "oauth_third_party"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldClientName holds the string denoting the client_name field in the database.
	FieldClientName = "client_name"
	// FieldClientTag holds the string denoting the client_tag field in the database.
	FieldClientTag = "client_tag"
	// FieldClientLogoURL holds the string denoting the client_logo_url field in the database.
	FieldClientLogoURL = "client_logo_url"
	// FieldClientOauthURL holds the string denoting the client_oauth_url field in the database.
	FieldClientOauthURL = "client_oauth_url"
	// FieldResponseType holds the string denoting the response_type field in the database.
	FieldResponseType = "response_type"
	// FieldScope holds the string denoting the scope field in the database.
	FieldScope = "scope"
	// Table holds the table name of the oauththirdparty in the database.
	Table = "oauth_third_parties"
)

// Columns holds all SQL columns for oauththirdparty fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldEntID,
	FieldClientName,
	FieldClientTag,
	FieldClientLogoURL,
	FieldClientOauthURL,
	FieldResponseType,
	FieldScope,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() uint32
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() uint32
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() uint32
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt func() uint32
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultClientName holds the default value on creation for the "client_name" field.
	DefaultClientName string
	// DefaultClientTag holds the default value on creation for the "client_tag" field.
	DefaultClientTag string
	// DefaultClientLogoURL holds the default value on creation for the "client_logo_url" field.
	DefaultClientLogoURL string
	// DefaultClientOauthURL holds the default value on creation for the "client_oauth_url" field.
	DefaultClientOauthURL string
	// DefaultResponseType holds the default value on creation for the "response_type" field.
	DefaultResponseType string
	// DefaultScope holds the default value on creation for the "scope" field.
	DefaultScope string
)

// OrderOption defines the ordering options for the OAuthThirdParty queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByClientName orders the results by the client_name field.
func ByClientName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientName, opts...).ToFunc()
}

// ByClientTag orders the results by the client_tag field.
func ByClientTag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientTag, opts...).ToFunc()
}

// ByClientLogoURL orders the results by the client_logo_url field.
func ByClientLogoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientLogoURL, opts...).ToFunc()
}

// ByClientOauthURL orders the results by the client_oauth_url field.
func ByClientOauthURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientOauthURL, opts...).ToFunc()
}

// ByResponseType orders the results by the response_type field.
func ByResponseType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResponseType, opts...).ToFunc()
}

// ByScope orders the results by the scope field.
func ByScope(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScope, opts...).ToFunc()
}

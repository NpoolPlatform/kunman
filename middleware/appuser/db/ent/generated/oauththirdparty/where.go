// Code generated by ent, DO NOT EDIT.

package oauththirdparty

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEQ(FieldDeletedAt, v))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEQ(FieldEntID, v))
}

// ClientName applies equality check predicate on the "client_name" field. It's identical to ClientNameEQ.
func ClientName(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEQ(FieldClientName, v))
}

// ClientTag applies equality check predicate on the "client_tag" field. It's identical to ClientTagEQ.
func ClientTag(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEQ(FieldClientTag, v))
}

// ClientLogoURL applies equality check predicate on the "client_logo_url" field. It's identical to ClientLogoURLEQ.
func ClientLogoURL(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEQ(FieldClientLogoURL, v))
}

// ClientOauthURL applies equality check predicate on the "client_oauth_url" field. It's identical to ClientOauthURLEQ.
func ClientOauthURL(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEQ(FieldClientOauthURL, v))
}

// ResponseType applies equality check predicate on the "response_type" field. It's identical to ResponseTypeEQ.
func ResponseType(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEQ(FieldResponseType, v))
}

// Scope applies equality check predicate on the "scope" field. It's identical to ScopeEQ.
func Scope(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEQ(FieldScope, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldLTE(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldLTE(FieldEntID, v))
}

// ClientNameEQ applies the EQ predicate on the "client_name" field.
func ClientNameEQ(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEQ(FieldClientName, v))
}

// ClientNameNEQ applies the NEQ predicate on the "client_name" field.
func ClientNameNEQ(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNEQ(FieldClientName, v))
}

// ClientNameIn applies the In predicate on the "client_name" field.
func ClientNameIn(vs ...string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldIn(FieldClientName, vs...))
}

// ClientNameNotIn applies the NotIn predicate on the "client_name" field.
func ClientNameNotIn(vs ...string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNotIn(FieldClientName, vs...))
}

// ClientNameGT applies the GT predicate on the "client_name" field.
func ClientNameGT(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldGT(FieldClientName, v))
}

// ClientNameGTE applies the GTE predicate on the "client_name" field.
func ClientNameGTE(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldGTE(FieldClientName, v))
}

// ClientNameLT applies the LT predicate on the "client_name" field.
func ClientNameLT(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldLT(FieldClientName, v))
}

// ClientNameLTE applies the LTE predicate on the "client_name" field.
func ClientNameLTE(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldLTE(FieldClientName, v))
}

// ClientNameContains applies the Contains predicate on the "client_name" field.
func ClientNameContains(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldContains(FieldClientName, v))
}

// ClientNameHasPrefix applies the HasPrefix predicate on the "client_name" field.
func ClientNameHasPrefix(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldHasPrefix(FieldClientName, v))
}

// ClientNameHasSuffix applies the HasSuffix predicate on the "client_name" field.
func ClientNameHasSuffix(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldHasSuffix(FieldClientName, v))
}

// ClientNameIsNil applies the IsNil predicate on the "client_name" field.
func ClientNameIsNil() predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldIsNull(FieldClientName))
}

// ClientNameNotNil applies the NotNil predicate on the "client_name" field.
func ClientNameNotNil() predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNotNull(FieldClientName))
}

// ClientNameEqualFold applies the EqualFold predicate on the "client_name" field.
func ClientNameEqualFold(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEqualFold(FieldClientName, v))
}

// ClientNameContainsFold applies the ContainsFold predicate on the "client_name" field.
func ClientNameContainsFold(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldContainsFold(FieldClientName, v))
}

// ClientTagEQ applies the EQ predicate on the "client_tag" field.
func ClientTagEQ(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEQ(FieldClientTag, v))
}

// ClientTagNEQ applies the NEQ predicate on the "client_tag" field.
func ClientTagNEQ(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNEQ(FieldClientTag, v))
}

// ClientTagIn applies the In predicate on the "client_tag" field.
func ClientTagIn(vs ...string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldIn(FieldClientTag, vs...))
}

// ClientTagNotIn applies the NotIn predicate on the "client_tag" field.
func ClientTagNotIn(vs ...string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNotIn(FieldClientTag, vs...))
}

// ClientTagGT applies the GT predicate on the "client_tag" field.
func ClientTagGT(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldGT(FieldClientTag, v))
}

// ClientTagGTE applies the GTE predicate on the "client_tag" field.
func ClientTagGTE(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldGTE(FieldClientTag, v))
}

// ClientTagLT applies the LT predicate on the "client_tag" field.
func ClientTagLT(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldLT(FieldClientTag, v))
}

// ClientTagLTE applies the LTE predicate on the "client_tag" field.
func ClientTagLTE(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldLTE(FieldClientTag, v))
}

// ClientTagContains applies the Contains predicate on the "client_tag" field.
func ClientTagContains(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldContains(FieldClientTag, v))
}

// ClientTagHasPrefix applies the HasPrefix predicate on the "client_tag" field.
func ClientTagHasPrefix(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldHasPrefix(FieldClientTag, v))
}

// ClientTagHasSuffix applies the HasSuffix predicate on the "client_tag" field.
func ClientTagHasSuffix(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldHasSuffix(FieldClientTag, v))
}

// ClientTagIsNil applies the IsNil predicate on the "client_tag" field.
func ClientTagIsNil() predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldIsNull(FieldClientTag))
}

// ClientTagNotNil applies the NotNil predicate on the "client_tag" field.
func ClientTagNotNil() predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNotNull(FieldClientTag))
}

// ClientTagEqualFold applies the EqualFold predicate on the "client_tag" field.
func ClientTagEqualFold(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEqualFold(FieldClientTag, v))
}

// ClientTagContainsFold applies the ContainsFold predicate on the "client_tag" field.
func ClientTagContainsFold(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldContainsFold(FieldClientTag, v))
}

// ClientLogoURLEQ applies the EQ predicate on the "client_logo_url" field.
func ClientLogoURLEQ(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEQ(FieldClientLogoURL, v))
}

// ClientLogoURLNEQ applies the NEQ predicate on the "client_logo_url" field.
func ClientLogoURLNEQ(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNEQ(FieldClientLogoURL, v))
}

// ClientLogoURLIn applies the In predicate on the "client_logo_url" field.
func ClientLogoURLIn(vs ...string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldIn(FieldClientLogoURL, vs...))
}

// ClientLogoURLNotIn applies the NotIn predicate on the "client_logo_url" field.
func ClientLogoURLNotIn(vs ...string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNotIn(FieldClientLogoURL, vs...))
}

// ClientLogoURLGT applies the GT predicate on the "client_logo_url" field.
func ClientLogoURLGT(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldGT(FieldClientLogoURL, v))
}

// ClientLogoURLGTE applies the GTE predicate on the "client_logo_url" field.
func ClientLogoURLGTE(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldGTE(FieldClientLogoURL, v))
}

// ClientLogoURLLT applies the LT predicate on the "client_logo_url" field.
func ClientLogoURLLT(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldLT(FieldClientLogoURL, v))
}

// ClientLogoURLLTE applies the LTE predicate on the "client_logo_url" field.
func ClientLogoURLLTE(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldLTE(FieldClientLogoURL, v))
}

// ClientLogoURLContains applies the Contains predicate on the "client_logo_url" field.
func ClientLogoURLContains(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldContains(FieldClientLogoURL, v))
}

// ClientLogoURLHasPrefix applies the HasPrefix predicate on the "client_logo_url" field.
func ClientLogoURLHasPrefix(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldHasPrefix(FieldClientLogoURL, v))
}

// ClientLogoURLHasSuffix applies the HasSuffix predicate on the "client_logo_url" field.
func ClientLogoURLHasSuffix(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldHasSuffix(FieldClientLogoURL, v))
}

// ClientLogoURLIsNil applies the IsNil predicate on the "client_logo_url" field.
func ClientLogoURLIsNil() predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldIsNull(FieldClientLogoURL))
}

// ClientLogoURLNotNil applies the NotNil predicate on the "client_logo_url" field.
func ClientLogoURLNotNil() predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNotNull(FieldClientLogoURL))
}

// ClientLogoURLEqualFold applies the EqualFold predicate on the "client_logo_url" field.
func ClientLogoURLEqualFold(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEqualFold(FieldClientLogoURL, v))
}

// ClientLogoURLContainsFold applies the ContainsFold predicate on the "client_logo_url" field.
func ClientLogoURLContainsFold(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldContainsFold(FieldClientLogoURL, v))
}

// ClientOauthURLEQ applies the EQ predicate on the "client_oauth_url" field.
func ClientOauthURLEQ(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEQ(FieldClientOauthURL, v))
}

// ClientOauthURLNEQ applies the NEQ predicate on the "client_oauth_url" field.
func ClientOauthURLNEQ(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNEQ(FieldClientOauthURL, v))
}

// ClientOauthURLIn applies the In predicate on the "client_oauth_url" field.
func ClientOauthURLIn(vs ...string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldIn(FieldClientOauthURL, vs...))
}

// ClientOauthURLNotIn applies the NotIn predicate on the "client_oauth_url" field.
func ClientOauthURLNotIn(vs ...string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNotIn(FieldClientOauthURL, vs...))
}

// ClientOauthURLGT applies the GT predicate on the "client_oauth_url" field.
func ClientOauthURLGT(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldGT(FieldClientOauthURL, v))
}

// ClientOauthURLGTE applies the GTE predicate on the "client_oauth_url" field.
func ClientOauthURLGTE(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldGTE(FieldClientOauthURL, v))
}

// ClientOauthURLLT applies the LT predicate on the "client_oauth_url" field.
func ClientOauthURLLT(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldLT(FieldClientOauthURL, v))
}

// ClientOauthURLLTE applies the LTE predicate on the "client_oauth_url" field.
func ClientOauthURLLTE(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldLTE(FieldClientOauthURL, v))
}

// ClientOauthURLContains applies the Contains predicate on the "client_oauth_url" field.
func ClientOauthURLContains(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldContains(FieldClientOauthURL, v))
}

// ClientOauthURLHasPrefix applies the HasPrefix predicate on the "client_oauth_url" field.
func ClientOauthURLHasPrefix(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldHasPrefix(FieldClientOauthURL, v))
}

// ClientOauthURLHasSuffix applies the HasSuffix predicate on the "client_oauth_url" field.
func ClientOauthURLHasSuffix(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldHasSuffix(FieldClientOauthURL, v))
}

// ClientOauthURLIsNil applies the IsNil predicate on the "client_oauth_url" field.
func ClientOauthURLIsNil() predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldIsNull(FieldClientOauthURL))
}

// ClientOauthURLNotNil applies the NotNil predicate on the "client_oauth_url" field.
func ClientOauthURLNotNil() predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNotNull(FieldClientOauthURL))
}

// ClientOauthURLEqualFold applies the EqualFold predicate on the "client_oauth_url" field.
func ClientOauthURLEqualFold(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEqualFold(FieldClientOauthURL, v))
}

// ClientOauthURLContainsFold applies the ContainsFold predicate on the "client_oauth_url" field.
func ClientOauthURLContainsFold(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldContainsFold(FieldClientOauthURL, v))
}

// ResponseTypeEQ applies the EQ predicate on the "response_type" field.
func ResponseTypeEQ(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEQ(FieldResponseType, v))
}

// ResponseTypeNEQ applies the NEQ predicate on the "response_type" field.
func ResponseTypeNEQ(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNEQ(FieldResponseType, v))
}

// ResponseTypeIn applies the In predicate on the "response_type" field.
func ResponseTypeIn(vs ...string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldIn(FieldResponseType, vs...))
}

// ResponseTypeNotIn applies the NotIn predicate on the "response_type" field.
func ResponseTypeNotIn(vs ...string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNotIn(FieldResponseType, vs...))
}

// ResponseTypeGT applies the GT predicate on the "response_type" field.
func ResponseTypeGT(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldGT(FieldResponseType, v))
}

// ResponseTypeGTE applies the GTE predicate on the "response_type" field.
func ResponseTypeGTE(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldGTE(FieldResponseType, v))
}

// ResponseTypeLT applies the LT predicate on the "response_type" field.
func ResponseTypeLT(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldLT(FieldResponseType, v))
}

// ResponseTypeLTE applies the LTE predicate on the "response_type" field.
func ResponseTypeLTE(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldLTE(FieldResponseType, v))
}

// ResponseTypeContains applies the Contains predicate on the "response_type" field.
func ResponseTypeContains(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldContains(FieldResponseType, v))
}

// ResponseTypeHasPrefix applies the HasPrefix predicate on the "response_type" field.
func ResponseTypeHasPrefix(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldHasPrefix(FieldResponseType, v))
}

// ResponseTypeHasSuffix applies the HasSuffix predicate on the "response_type" field.
func ResponseTypeHasSuffix(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldHasSuffix(FieldResponseType, v))
}

// ResponseTypeIsNil applies the IsNil predicate on the "response_type" field.
func ResponseTypeIsNil() predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldIsNull(FieldResponseType))
}

// ResponseTypeNotNil applies the NotNil predicate on the "response_type" field.
func ResponseTypeNotNil() predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNotNull(FieldResponseType))
}

// ResponseTypeEqualFold applies the EqualFold predicate on the "response_type" field.
func ResponseTypeEqualFold(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEqualFold(FieldResponseType, v))
}

// ResponseTypeContainsFold applies the ContainsFold predicate on the "response_type" field.
func ResponseTypeContainsFold(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldContainsFold(FieldResponseType, v))
}

// ScopeEQ applies the EQ predicate on the "scope" field.
func ScopeEQ(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEQ(FieldScope, v))
}

// ScopeNEQ applies the NEQ predicate on the "scope" field.
func ScopeNEQ(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNEQ(FieldScope, v))
}

// ScopeIn applies the In predicate on the "scope" field.
func ScopeIn(vs ...string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldIn(FieldScope, vs...))
}

// ScopeNotIn applies the NotIn predicate on the "scope" field.
func ScopeNotIn(vs ...string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNotIn(FieldScope, vs...))
}

// ScopeGT applies the GT predicate on the "scope" field.
func ScopeGT(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldGT(FieldScope, v))
}

// ScopeGTE applies the GTE predicate on the "scope" field.
func ScopeGTE(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldGTE(FieldScope, v))
}

// ScopeLT applies the LT predicate on the "scope" field.
func ScopeLT(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldLT(FieldScope, v))
}

// ScopeLTE applies the LTE predicate on the "scope" field.
func ScopeLTE(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldLTE(FieldScope, v))
}

// ScopeContains applies the Contains predicate on the "scope" field.
func ScopeContains(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldContains(FieldScope, v))
}

// ScopeHasPrefix applies the HasPrefix predicate on the "scope" field.
func ScopeHasPrefix(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldHasPrefix(FieldScope, v))
}

// ScopeHasSuffix applies the HasSuffix predicate on the "scope" field.
func ScopeHasSuffix(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldHasSuffix(FieldScope, v))
}

// ScopeIsNil applies the IsNil predicate on the "scope" field.
func ScopeIsNil() predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldIsNull(FieldScope))
}

// ScopeNotNil applies the NotNil predicate on the "scope" field.
func ScopeNotNil() predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldNotNull(FieldScope))
}

// ScopeEqualFold applies the EqualFold predicate on the "scope" field.
func ScopeEqualFold(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldEqualFold(FieldScope, v))
}

// ScopeContainsFold applies the ContainsFold predicate on the "scope" field.
func ScopeContainsFold(v string) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.FieldContainsFold(FieldScope, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OAuthThirdParty) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OAuthThirdParty) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OAuthThirdParty) predicate.OAuthThirdParty {
	return predicate.OAuthThirdParty(sql.NotPredicates(p))
}

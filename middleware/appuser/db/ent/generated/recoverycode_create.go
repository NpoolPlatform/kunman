// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/recoverycode"
	"github.com/google/uuid"
)

// RecoveryCodeCreate is the builder for creating a RecoveryCode entity.
type RecoveryCodeCreate struct {
	config
	mutation *RecoveryCodeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (rcc *RecoveryCodeCreate) SetCreatedAt(u uint32) *RecoveryCodeCreate {
	rcc.mutation.SetCreatedAt(u)
	return rcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rcc *RecoveryCodeCreate) SetNillableCreatedAt(u *uint32) *RecoveryCodeCreate {
	if u != nil {
		rcc.SetCreatedAt(*u)
	}
	return rcc
}

// SetUpdatedAt sets the "updated_at" field.
func (rcc *RecoveryCodeCreate) SetUpdatedAt(u uint32) *RecoveryCodeCreate {
	rcc.mutation.SetUpdatedAt(u)
	return rcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rcc *RecoveryCodeCreate) SetNillableUpdatedAt(u *uint32) *RecoveryCodeCreate {
	if u != nil {
		rcc.SetUpdatedAt(*u)
	}
	return rcc
}

// SetDeletedAt sets the "deleted_at" field.
func (rcc *RecoveryCodeCreate) SetDeletedAt(u uint32) *RecoveryCodeCreate {
	rcc.mutation.SetDeletedAt(u)
	return rcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rcc *RecoveryCodeCreate) SetNillableDeletedAt(u *uint32) *RecoveryCodeCreate {
	if u != nil {
		rcc.SetDeletedAt(*u)
	}
	return rcc
}

// SetEntID sets the "ent_id" field.
func (rcc *RecoveryCodeCreate) SetEntID(u uuid.UUID) *RecoveryCodeCreate {
	rcc.mutation.SetEntID(u)
	return rcc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (rcc *RecoveryCodeCreate) SetNillableEntID(u *uuid.UUID) *RecoveryCodeCreate {
	if u != nil {
		rcc.SetEntID(*u)
	}
	return rcc
}

// SetAppID sets the "app_id" field.
func (rcc *RecoveryCodeCreate) SetAppID(u uuid.UUID) *RecoveryCodeCreate {
	rcc.mutation.SetAppID(u)
	return rcc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (rcc *RecoveryCodeCreate) SetNillableAppID(u *uuid.UUID) *RecoveryCodeCreate {
	if u != nil {
		rcc.SetAppID(*u)
	}
	return rcc
}

// SetUserID sets the "user_id" field.
func (rcc *RecoveryCodeCreate) SetUserID(u uuid.UUID) *RecoveryCodeCreate {
	rcc.mutation.SetUserID(u)
	return rcc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (rcc *RecoveryCodeCreate) SetNillableUserID(u *uuid.UUID) *RecoveryCodeCreate {
	if u != nil {
		rcc.SetUserID(*u)
	}
	return rcc
}

// SetCode sets the "code" field.
func (rcc *RecoveryCodeCreate) SetCode(s string) *RecoveryCodeCreate {
	rcc.mutation.SetCode(s)
	return rcc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (rcc *RecoveryCodeCreate) SetNillableCode(s *string) *RecoveryCodeCreate {
	if s != nil {
		rcc.SetCode(*s)
	}
	return rcc
}

// SetUsed sets the "used" field.
func (rcc *RecoveryCodeCreate) SetUsed(b bool) *RecoveryCodeCreate {
	rcc.mutation.SetUsed(b)
	return rcc
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (rcc *RecoveryCodeCreate) SetNillableUsed(b *bool) *RecoveryCodeCreate {
	if b != nil {
		rcc.SetUsed(*b)
	}
	return rcc
}

// SetID sets the "id" field.
func (rcc *RecoveryCodeCreate) SetID(u uint32) *RecoveryCodeCreate {
	rcc.mutation.SetID(u)
	return rcc
}

// Mutation returns the RecoveryCodeMutation object of the builder.
func (rcc *RecoveryCodeCreate) Mutation() *RecoveryCodeMutation {
	return rcc.mutation
}

// Save creates the RecoveryCode in the database.
func (rcc *RecoveryCodeCreate) Save(ctx context.Context) (*RecoveryCode, error) {
	rcc.defaults()
	return withHooks(ctx, rcc.sqlSave, rcc.mutation, rcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rcc *RecoveryCodeCreate) SaveX(ctx context.Context) *RecoveryCode {
	v, err := rcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcc *RecoveryCodeCreate) Exec(ctx context.Context) error {
	_, err := rcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcc *RecoveryCodeCreate) ExecX(ctx context.Context) {
	if err := rcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcc *RecoveryCodeCreate) defaults() {
	if _, ok := rcc.mutation.CreatedAt(); !ok {
		v := recoverycode.DefaultCreatedAt()
		rcc.mutation.SetCreatedAt(v)
	}
	if _, ok := rcc.mutation.UpdatedAt(); !ok {
		v := recoverycode.DefaultUpdatedAt()
		rcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rcc.mutation.DeletedAt(); !ok {
		v := recoverycode.DefaultDeletedAt()
		rcc.mutation.SetDeletedAt(v)
	}
	if _, ok := rcc.mutation.EntID(); !ok {
		v := recoverycode.DefaultEntID()
		rcc.mutation.SetEntID(v)
	}
	if _, ok := rcc.mutation.AppID(); !ok {
		v := recoverycode.DefaultAppID()
		rcc.mutation.SetAppID(v)
	}
	if _, ok := rcc.mutation.UserID(); !ok {
		v := recoverycode.DefaultUserID()
		rcc.mutation.SetUserID(v)
	}
	if _, ok := rcc.mutation.Code(); !ok {
		v := recoverycode.DefaultCode
		rcc.mutation.SetCode(v)
	}
	if _, ok := rcc.mutation.Used(); !ok {
		v := recoverycode.DefaultUsed
		rcc.mutation.SetUsed(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcc *RecoveryCodeCreate) check() error {
	if _, ok := rcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "RecoveryCode.created_at"`)}
	}
	if _, ok := rcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "RecoveryCode.updated_at"`)}
	}
	if _, ok := rcc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "RecoveryCode.deleted_at"`)}
	}
	if _, ok := rcc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "RecoveryCode.ent_id"`)}
	}
	return nil
}

func (rcc *RecoveryCodeCreate) sqlSave(ctx context.Context) (*RecoveryCode, error) {
	if err := rcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	rcc.mutation.id = &_node.ID
	rcc.mutation.done = true
	return _node, nil
}

func (rcc *RecoveryCodeCreate) createSpec() (*RecoveryCode, *sqlgraph.CreateSpec) {
	var (
		_node = &RecoveryCode{config: rcc.config}
		_spec = sqlgraph.NewCreateSpec(recoverycode.Table, sqlgraph.NewFieldSpec(recoverycode.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = rcc.conflict
	if id, ok := rcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rcc.mutation.CreatedAt(); ok {
		_spec.SetField(recoverycode.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := rcc.mutation.UpdatedAt(); ok {
		_spec.SetField(recoverycode.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := rcc.mutation.DeletedAt(); ok {
		_spec.SetField(recoverycode.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := rcc.mutation.EntID(); ok {
		_spec.SetField(recoverycode.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := rcc.mutation.AppID(); ok {
		_spec.SetField(recoverycode.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := rcc.mutation.UserID(); ok {
		_spec.SetField(recoverycode.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := rcc.mutation.Code(); ok {
		_spec.SetField(recoverycode.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := rcc.mutation.Used(); ok {
		_spec.SetField(recoverycode.FieldUsed, field.TypeBool, value)
		_node.Used = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RecoveryCode.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RecoveryCodeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rcc *RecoveryCodeCreate) OnConflict(opts ...sql.ConflictOption) *RecoveryCodeUpsertOne {
	rcc.conflict = opts
	return &RecoveryCodeUpsertOne{
		create: rcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RecoveryCode.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcc *RecoveryCodeCreate) OnConflictColumns(columns ...string) *RecoveryCodeUpsertOne {
	rcc.conflict = append(rcc.conflict, sql.ConflictColumns(columns...))
	return &RecoveryCodeUpsertOne{
		create: rcc,
	}
}

type (
	// RecoveryCodeUpsertOne is the builder for "upsert"-ing
	//  one RecoveryCode node.
	RecoveryCodeUpsertOne struct {
		create *RecoveryCodeCreate
	}

	// RecoveryCodeUpsert is the "OnConflict" setter.
	RecoveryCodeUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *RecoveryCodeUpsert) SetCreatedAt(v uint32) *RecoveryCodeUpsert {
	u.Set(recoverycode.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RecoveryCodeUpsert) UpdateCreatedAt() *RecoveryCodeUpsert {
	u.SetExcluded(recoverycode.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *RecoveryCodeUpsert) AddCreatedAt(v uint32) *RecoveryCodeUpsert {
	u.Add(recoverycode.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RecoveryCodeUpsert) SetUpdatedAt(v uint32) *RecoveryCodeUpsert {
	u.Set(recoverycode.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RecoveryCodeUpsert) UpdateUpdatedAt() *RecoveryCodeUpsert {
	u.SetExcluded(recoverycode.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *RecoveryCodeUpsert) AddUpdatedAt(v uint32) *RecoveryCodeUpsert {
	u.Add(recoverycode.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RecoveryCodeUpsert) SetDeletedAt(v uint32) *RecoveryCodeUpsert {
	u.Set(recoverycode.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RecoveryCodeUpsert) UpdateDeletedAt() *RecoveryCodeUpsert {
	u.SetExcluded(recoverycode.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RecoveryCodeUpsert) AddDeletedAt(v uint32) *RecoveryCodeUpsert {
	u.Add(recoverycode.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *RecoveryCodeUpsert) SetEntID(v uuid.UUID) *RecoveryCodeUpsert {
	u.Set(recoverycode.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *RecoveryCodeUpsert) UpdateEntID() *RecoveryCodeUpsert {
	u.SetExcluded(recoverycode.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *RecoveryCodeUpsert) SetAppID(v uuid.UUID) *RecoveryCodeUpsert {
	u.Set(recoverycode.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *RecoveryCodeUpsert) UpdateAppID() *RecoveryCodeUpsert {
	u.SetExcluded(recoverycode.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *RecoveryCodeUpsert) ClearAppID() *RecoveryCodeUpsert {
	u.SetNull(recoverycode.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *RecoveryCodeUpsert) SetUserID(v uuid.UUID) *RecoveryCodeUpsert {
	u.Set(recoverycode.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *RecoveryCodeUpsert) UpdateUserID() *RecoveryCodeUpsert {
	u.SetExcluded(recoverycode.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *RecoveryCodeUpsert) ClearUserID() *RecoveryCodeUpsert {
	u.SetNull(recoverycode.FieldUserID)
	return u
}

// SetCode sets the "code" field.
func (u *RecoveryCodeUpsert) SetCode(v string) *RecoveryCodeUpsert {
	u.Set(recoverycode.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *RecoveryCodeUpsert) UpdateCode() *RecoveryCodeUpsert {
	u.SetExcluded(recoverycode.FieldCode)
	return u
}

// ClearCode clears the value of the "code" field.
func (u *RecoveryCodeUpsert) ClearCode() *RecoveryCodeUpsert {
	u.SetNull(recoverycode.FieldCode)
	return u
}

// SetUsed sets the "used" field.
func (u *RecoveryCodeUpsert) SetUsed(v bool) *RecoveryCodeUpsert {
	u.Set(recoverycode.FieldUsed, v)
	return u
}

// UpdateUsed sets the "used" field to the value that was provided on create.
func (u *RecoveryCodeUpsert) UpdateUsed() *RecoveryCodeUpsert {
	u.SetExcluded(recoverycode.FieldUsed)
	return u
}

// ClearUsed clears the value of the "used" field.
func (u *RecoveryCodeUpsert) ClearUsed() *RecoveryCodeUpsert {
	u.SetNull(recoverycode.FieldUsed)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RecoveryCode.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(recoverycode.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RecoveryCodeUpsertOne) UpdateNewValues() *RecoveryCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(recoverycode.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RecoveryCode.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RecoveryCodeUpsertOne) Ignore() *RecoveryCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RecoveryCodeUpsertOne) DoNothing() *RecoveryCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RecoveryCodeCreate.OnConflict
// documentation for more info.
func (u *RecoveryCodeUpsertOne) Update(set func(*RecoveryCodeUpsert)) *RecoveryCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RecoveryCodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RecoveryCodeUpsertOne) SetCreatedAt(v uint32) *RecoveryCodeUpsertOne {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *RecoveryCodeUpsertOne) AddCreatedAt(v uint32) *RecoveryCodeUpsertOne {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RecoveryCodeUpsertOne) UpdateCreatedAt() *RecoveryCodeUpsertOne {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RecoveryCodeUpsertOne) SetUpdatedAt(v uint32) *RecoveryCodeUpsertOne {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *RecoveryCodeUpsertOne) AddUpdatedAt(v uint32) *RecoveryCodeUpsertOne {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RecoveryCodeUpsertOne) UpdateUpdatedAt() *RecoveryCodeUpsertOne {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RecoveryCodeUpsertOne) SetDeletedAt(v uint32) *RecoveryCodeUpsertOne {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RecoveryCodeUpsertOne) AddDeletedAt(v uint32) *RecoveryCodeUpsertOne {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RecoveryCodeUpsertOne) UpdateDeletedAt() *RecoveryCodeUpsertOne {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *RecoveryCodeUpsertOne) SetEntID(v uuid.UUID) *RecoveryCodeUpsertOne {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *RecoveryCodeUpsertOne) UpdateEntID() *RecoveryCodeUpsertOne {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *RecoveryCodeUpsertOne) SetAppID(v uuid.UUID) *RecoveryCodeUpsertOne {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *RecoveryCodeUpsertOne) UpdateAppID() *RecoveryCodeUpsertOne {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *RecoveryCodeUpsertOne) ClearAppID() *RecoveryCodeUpsertOne {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *RecoveryCodeUpsertOne) SetUserID(v uuid.UUID) *RecoveryCodeUpsertOne {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *RecoveryCodeUpsertOne) UpdateUserID() *RecoveryCodeUpsertOne {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *RecoveryCodeUpsertOne) ClearUserID() *RecoveryCodeUpsertOne {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.ClearUserID()
	})
}

// SetCode sets the "code" field.
func (u *RecoveryCodeUpsertOne) SetCode(v string) *RecoveryCodeUpsertOne {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *RecoveryCodeUpsertOne) UpdateCode() *RecoveryCodeUpsertOne {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *RecoveryCodeUpsertOne) ClearCode() *RecoveryCodeUpsertOne {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.ClearCode()
	})
}

// SetUsed sets the "used" field.
func (u *RecoveryCodeUpsertOne) SetUsed(v bool) *RecoveryCodeUpsertOne {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.SetUsed(v)
	})
}

// UpdateUsed sets the "used" field to the value that was provided on create.
func (u *RecoveryCodeUpsertOne) UpdateUsed() *RecoveryCodeUpsertOne {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.UpdateUsed()
	})
}

// ClearUsed clears the value of the "used" field.
func (u *RecoveryCodeUpsertOne) ClearUsed() *RecoveryCodeUpsertOne {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.ClearUsed()
	})
}

// Exec executes the query.
func (u *RecoveryCodeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for RecoveryCodeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RecoveryCodeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RecoveryCodeUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RecoveryCodeUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RecoveryCodeCreateBulk is the builder for creating many RecoveryCode entities in bulk.
type RecoveryCodeCreateBulk struct {
	config
	err      error
	builders []*RecoveryCodeCreate
	conflict []sql.ConflictOption
}

// Save creates the RecoveryCode entities in the database.
func (rccb *RecoveryCodeCreateBulk) Save(ctx context.Context) ([]*RecoveryCode, error) {
	if rccb.err != nil {
		return nil, rccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rccb.builders))
	nodes := make([]*RecoveryCode, len(rccb.builders))
	mutators := make([]Mutator, len(rccb.builders))
	for i := range rccb.builders {
		func(i int, root context.Context) {
			builder := rccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RecoveryCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rccb *RecoveryCodeCreateBulk) SaveX(ctx context.Context) []*RecoveryCode {
	v, err := rccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rccb *RecoveryCodeCreateBulk) Exec(ctx context.Context) error {
	_, err := rccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rccb *RecoveryCodeCreateBulk) ExecX(ctx context.Context) {
	if err := rccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RecoveryCode.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RecoveryCodeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rccb *RecoveryCodeCreateBulk) OnConflict(opts ...sql.ConflictOption) *RecoveryCodeUpsertBulk {
	rccb.conflict = opts
	return &RecoveryCodeUpsertBulk{
		create: rccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RecoveryCode.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rccb *RecoveryCodeCreateBulk) OnConflictColumns(columns ...string) *RecoveryCodeUpsertBulk {
	rccb.conflict = append(rccb.conflict, sql.ConflictColumns(columns...))
	return &RecoveryCodeUpsertBulk{
		create: rccb,
	}
}

// RecoveryCodeUpsertBulk is the builder for "upsert"-ing
// a bulk of RecoveryCode nodes.
type RecoveryCodeUpsertBulk struct {
	create *RecoveryCodeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RecoveryCode.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(recoverycode.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RecoveryCodeUpsertBulk) UpdateNewValues() *RecoveryCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(recoverycode.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RecoveryCode.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RecoveryCodeUpsertBulk) Ignore() *RecoveryCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RecoveryCodeUpsertBulk) DoNothing() *RecoveryCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RecoveryCodeCreateBulk.OnConflict
// documentation for more info.
func (u *RecoveryCodeUpsertBulk) Update(set func(*RecoveryCodeUpsert)) *RecoveryCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RecoveryCodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RecoveryCodeUpsertBulk) SetCreatedAt(v uint32) *RecoveryCodeUpsertBulk {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *RecoveryCodeUpsertBulk) AddCreatedAt(v uint32) *RecoveryCodeUpsertBulk {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RecoveryCodeUpsertBulk) UpdateCreatedAt() *RecoveryCodeUpsertBulk {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RecoveryCodeUpsertBulk) SetUpdatedAt(v uint32) *RecoveryCodeUpsertBulk {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *RecoveryCodeUpsertBulk) AddUpdatedAt(v uint32) *RecoveryCodeUpsertBulk {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RecoveryCodeUpsertBulk) UpdateUpdatedAt() *RecoveryCodeUpsertBulk {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RecoveryCodeUpsertBulk) SetDeletedAt(v uint32) *RecoveryCodeUpsertBulk {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RecoveryCodeUpsertBulk) AddDeletedAt(v uint32) *RecoveryCodeUpsertBulk {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RecoveryCodeUpsertBulk) UpdateDeletedAt() *RecoveryCodeUpsertBulk {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *RecoveryCodeUpsertBulk) SetEntID(v uuid.UUID) *RecoveryCodeUpsertBulk {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *RecoveryCodeUpsertBulk) UpdateEntID() *RecoveryCodeUpsertBulk {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *RecoveryCodeUpsertBulk) SetAppID(v uuid.UUID) *RecoveryCodeUpsertBulk {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *RecoveryCodeUpsertBulk) UpdateAppID() *RecoveryCodeUpsertBulk {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *RecoveryCodeUpsertBulk) ClearAppID() *RecoveryCodeUpsertBulk {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *RecoveryCodeUpsertBulk) SetUserID(v uuid.UUID) *RecoveryCodeUpsertBulk {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *RecoveryCodeUpsertBulk) UpdateUserID() *RecoveryCodeUpsertBulk {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *RecoveryCodeUpsertBulk) ClearUserID() *RecoveryCodeUpsertBulk {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.ClearUserID()
	})
}

// SetCode sets the "code" field.
func (u *RecoveryCodeUpsertBulk) SetCode(v string) *RecoveryCodeUpsertBulk {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *RecoveryCodeUpsertBulk) UpdateCode() *RecoveryCodeUpsertBulk {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *RecoveryCodeUpsertBulk) ClearCode() *RecoveryCodeUpsertBulk {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.ClearCode()
	})
}

// SetUsed sets the "used" field.
func (u *RecoveryCodeUpsertBulk) SetUsed(v bool) *RecoveryCodeUpsertBulk {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.SetUsed(v)
	})
}

// UpdateUsed sets the "used" field to the value that was provided on create.
func (u *RecoveryCodeUpsertBulk) UpdateUsed() *RecoveryCodeUpsertBulk {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.UpdateUsed()
	})
}

// ClearUsed clears the value of the "used" field.
func (u *RecoveryCodeUpsertBulk) ClearUsed() *RecoveryCodeUpsertBulk {
	return u.Update(func(s *RecoveryCodeUpsert) {
		s.ClearUsed()
	})
}

// Exec executes the query.
func (u *RecoveryCodeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the RecoveryCodeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for RecoveryCodeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RecoveryCodeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

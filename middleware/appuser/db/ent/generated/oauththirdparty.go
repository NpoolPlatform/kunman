// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/oauththirdparty"
	"github.com/google/uuid"
)

// OAuthThirdParty is the model entity for the OAuthThirdParty schema.
type OAuthThirdParty struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// ClientName holds the value of the "client_name" field.
	ClientName string `json:"client_name,omitempty"`
	// ClientTag holds the value of the "client_tag" field.
	ClientTag string `json:"client_tag,omitempty"`
	// ClientLogoURL holds the value of the "client_logo_url" field.
	ClientLogoURL string `json:"client_logo_url,omitempty"`
	// ClientOauthURL holds the value of the "client_oauth_url" field.
	ClientOauthURL string `json:"client_oauth_url,omitempty"`
	// ResponseType holds the value of the "response_type" field.
	ResponseType string `json:"response_type,omitempty"`
	// Scope holds the value of the "scope" field.
	Scope        string `json:"scope,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OAuthThirdParty) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauththirdparty.FieldID, oauththirdparty.FieldCreatedAt, oauththirdparty.FieldUpdatedAt, oauththirdparty.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case oauththirdparty.FieldClientName, oauththirdparty.FieldClientTag, oauththirdparty.FieldClientLogoURL, oauththirdparty.FieldClientOauthURL, oauththirdparty.FieldResponseType, oauththirdparty.FieldScope:
			values[i] = new(sql.NullString)
		case oauththirdparty.FieldEntID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OAuthThirdParty fields.
func (otp *OAuthThirdParty) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauththirdparty.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			otp.ID = uint32(value.Int64)
		case oauththirdparty.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				otp.CreatedAt = uint32(value.Int64)
			}
		case oauththirdparty.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				otp.UpdatedAt = uint32(value.Int64)
			}
		case oauththirdparty.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				otp.DeletedAt = uint32(value.Int64)
			}
		case oauththirdparty.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				otp.EntID = *value
			}
		case oauththirdparty.FieldClientName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_name", values[i])
			} else if value.Valid {
				otp.ClientName = value.String
			}
		case oauththirdparty.FieldClientTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_tag", values[i])
			} else if value.Valid {
				otp.ClientTag = value.String
			}
		case oauththirdparty.FieldClientLogoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_logo_url", values[i])
			} else if value.Valid {
				otp.ClientLogoURL = value.String
			}
		case oauththirdparty.FieldClientOauthURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_oauth_url", values[i])
			} else if value.Valid {
				otp.ClientOauthURL = value.String
			}
		case oauththirdparty.FieldResponseType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field response_type", values[i])
			} else if value.Valid {
				otp.ResponseType = value.String
			}
		case oauththirdparty.FieldScope:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scope", values[i])
			} else if value.Valid {
				otp.Scope = value.String
			}
		default:
			otp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OAuthThirdParty.
// This includes values selected through modifiers, order, etc.
func (otp *OAuthThirdParty) Value(name string) (ent.Value, error) {
	return otp.selectValues.Get(name)
}

// Update returns a builder for updating this OAuthThirdParty.
// Note that you need to call OAuthThirdParty.Unwrap() before calling this method if this OAuthThirdParty
// was returned from a transaction, and the transaction was committed or rolled back.
func (otp *OAuthThirdParty) Update() *OAuthThirdPartyUpdateOne {
	return NewOAuthThirdPartyClient(otp.config).UpdateOne(otp)
}

// Unwrap unwraps the OAuthThirdParty entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (otp *OAuthThirdParty) Unwrap() *OAuthThirdParty {
	_tx, ok := otp.config.driver.(*txDriver)
	if !ok {
		panic("generated: OAuthThirdParty is not a transactional entity")
	}
	otp.config.driver = _tx.drv
	return otp
}

// String implements the fmt.Stringer.
func (otp *OAuthThirdParty) String() string {
	var builder strings.Builder
	builder.WriteString("OAuthThirdParty(")
	builder.WriteString(fmt.Sprintf("id=%v, ", otp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", otp.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", otp.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", otp.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", otp.EntID))
	builder.WriteString(", ")
	builder.WriteString("client_name=")
	builder.WriteString(otp.ClientName)
	builder.WriteString(", ")
	builder.WriteString("client_tag=")
	builder.WriteString(otp.ClientTag)
	builder.WriteString(", ")
	builder.WriteString("client_logo_url=")
	builder.WriteString(otp.ClientLogoURL)
	builder.WriteString(", ")
	builder.WriteString("client_oauth_url=")
	builder.WriteString(otp.ClientOauthURL)
	builder.WriteString(", ")
	builder.WriteString("response_type=")
	builder.WriteString(otp.ResponseType)
	builder.WriteString(", ")
	builder.WriteString("scope=")
	builder.WriteString(otp.Scope)
	builder.WriteByte(')')
	return builder.String()
}

// OAuthThirdParties is a parsable slice of OAuthThirdParty.
type OAuthThirdParties []*OAuthThirdParty

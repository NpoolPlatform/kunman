// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/banapp"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// BanAppUpdate is the builder for updating BanApp entities.
type BanAppUpdate struct {
	config
	hooks     []Hook
	mutation  *BanAppMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BanAppUpdate builder.
func (bau *BanAppUpdate) Where(ps ...predicate.BanApp) *BanAppUpdate {
	bau.mutation.Where(ps...)
	return bau
}

// SetCreatedAt sets the "created_at" field.
func (bau *BanAppUpdate) SetCreatedAt(u uint32) *BanAppUpdate {
	bau.mutation.ResetCreatedAt()
	bau.mutation.SetCreatedAt(u)
	return bau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bau *BanAppUpdate) SetNillableCreatedAt(u *uint32) *BanAppUpdate {
	if u != nil {
		bau.SetCreatedAt(*u)
	}
	return bau
}

// AddCreatedAt adds u to the "created_at" field.
func (bau *BanAppUpdate) AddCreatedAt(u int32) *BanAppUpdate {
	bau.mutation.AddCreatedAt(u)
	return bau
}

// SetUpdatedAt sets the "updated_at" field.
func (bau *BanAppUpdate) SetUpdatedAt(u uint32) *BanAppUpdate {
	bau.mutation.ResetUpdatedAt()
	bau.mutation.SetUpdatedAt(u)
	return bau
}

// AddUpdatedAt adds u to the "updated_at" field.
func (bau *BanAppUpdate) AddUpdatedAt(u int32) *BanAppUpdate {
	bau.mutation.AddUpdatedAt(u)
	return bau
}

// SetDeletedAt sets the "deleted_at" field.
func (bau *BanAppUpdate) SetDeletedAt(u uint32) *BanAppUpdate {
	bau.mutation.ResetDeletedAt()
	bau.mutation.SetDeletedAt(u)
	return bau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bau *BanAppUpdate) SetNillableDeletedAt(u *uint32) *BanAppUpdate {
	if u != nil {
		bau.SetDeletedAt(*u)
	}
	return bau
}

// AddDeletedAt adds u to the "deleted_at" field.
func (bau *BanAppUpdate) AddDeletedAt(u int32) *BanAppUpdate {
	bau.mutation.AddDeletedAt(u)
	return bau
}

// SetEntID sets the "ent_id" field.
func (bau *BanAppUpdate) SetEntID(u uuid.UUID) *BanAppUpdate {
	bau.mutation.SetEntID(u)
	return bau
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (bau *BanAppUpdate) SetNillableEntID(u *uuid.UUID) *BanAppUpdate {
	if u != nil {
		bau.SetEntID(*u)
	}
	return bau
}

// SetAppID sets the "app_id" field.
func (bau *BanAppUpdate) SetAppID(u uuid.UUID) *BanAppUpdate {
	bau.mutation.SetAppID(u)
	return bau
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (bau *BanAppUpdate) SetNillableAppID(u *uuid.UUID) *BanAppUpdate {
	if u != nil {
		bau.SetAppID(*u)
	}
	return bau
}

// SetMessage sets the "message" field.
func (bau *BanAppUpdate) SetMessage(s string) *BanAppUpdate {
	bau.mutation.SetMessage(s)
	return bau
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (bau *BanAppUpdate) SetNillableMessage(s *string) *BanAppUpdate {
	if s != nil {
		bau.SetMessage(*s)
	}
	return bau
}

// Mutation returns the BanAppMutation object of the builder.
func (bau *BanAppUpdate) Mutation() *BanAppMutation {
	return bau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bau *BanAppUpdate) Save(ctx context.Context) (int, error) {
	bau.defaults()
	return withHooks(ctx, bau.sqlSave, bau.mutation, bau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bau *BanAppUpdate) SaveX(ctx context.Context) int {
	affected, err := bau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bau *BanAppUpdate) Exec(ctx context.Context) error {
	_, err := bau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bau *BanAppUpdate) ExecX(ctx context.Context) {
	if err := bau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bau *BanAppUpdate) defaults() {
	if _, ok := bau.mutation.UpdatedAt(); !ok {
		v := banapp.UpdateDefaultUpdatedAt()
		bau.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bau *BanAppUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BanAppUpdate {
	bau.modifiers = append(bau.modifiers, modifiers...)
	return bau
}

func (bau *BanAppUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(banapp.Table, banapp.Columns, sqlgraph.NewFieldSpec(banapp.FieldID, field.TypeUint32))
	if ps := bau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bau.mutation.CreatedAt(); ok {
		_spec.SetField(banapp.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := bau.mutation.AddedCreatedAt(); ok {
		_spec.AddField(banapp.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := bau.mutation.UpdatedAt(); ok {
		_spec.SetField(banapp.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := bau.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(banapp.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := bau.mutation.DeletedAt(); ok {
		_spec.SetField(banapp.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := bau.mutation.AddedDeletedAt(); ok {
		_spec.AddField(banapp.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := bau.mutation.EntID(); ok {
		_spec.SetField(banapp.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := bau.mutation.AppID(); ok {
		_spec.SetField(banapp.FieldAppID, field.TypeUUID, value)
	}
	if value, ok := bau.mutation.Message(); ok {
		_spec.SetField(banapp.FieldMessage, field.TypeString, value)
	}
	_spec.AddModifiers(bau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, bau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{banapp.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bau.mutation.done = true
	return n, nil
}

// BanAppUpdateOne is the builder for updating a single BanApp entity.
type BanAppUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BanAppMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (bauo *BanAppUpdateOne) SetCreatedAt(u uint32) *BanAppUpdateOne {
	bauo.mutation.ResetCreatedAt()
	bauo.mutation.SetCreatedAt(u)
	return bauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bauo *BanAppUpdateOne) SetNillableCreatedAt(u *uint32) *BanAppUpdateOne {
	if u != nil {
		bauo.SetCreatedAt(*u)
	}
	return bauo
}

// AddCreatedAt adds u to the "created_at" field.
func (bauo *BanAppUpdateOne) AddCreatedAt(u int32) *BanAppUpdateOne {
	bauo.mutation.AddCreatedAt(u)
	return bauo
}

// SetUpdatedAt sets the "updated_at" field.
func (bauo *BanAppUpdateOne) SetUpdatedAt(u uint32) *BanAppUpdateOne {
	bauo.mutation.ResetUpdatedAt()
	bauo.mutation.SetUpdatedAt(u)
	return bauo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (bauo *BanAppUpdateOne) AddUpdatedAt(u int32) *BanAppUpdateOne {
	bauo.mutation.AddUpdatedAt(u)
	return bauo
}

// SetDeletedAt sets the "deleted_at" field.
func (bauo *BanAppUpdateOne) SetDeletedAt(u uint32) *BanAppUpdateOne {
	bauo.mutation.ResetDeletedAt()
	bauo.mutation.SetDeletedAt(u)
	return bauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bauo *BanAppUpdateOne) SetNillableDeletedAt(u *uint32) *BanAppUpdateOne {
	if u != nil {
		bauo.SetDeletedAt(*u)
	}
	return bauo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (bauo *BanAppUpdateOne) AddDeletedAt(u int32) *BanAppUpdateOne {
	bauo.mutation.AddDeletedAt(u)
	return bauo
}

// SetEntID sets the "ent_id" field.
func (bauo *BanAppUpdateOne) SetEntID(u uuid.UUID) *BanAppUpdateOne {
	bauo.mutation.SetEntID(u)
	return bauo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (bauo *BanAppUpdateOne) SetNillableEntID(u *uuid.UUID) *BanAppUpdateOne {
	if u != nil {
		bauo.SetEntID(*u)
	}
	return bauo
}

// SetAppID sets the "app_id" field.
func (bauo *BanAppUpdateOne) SetAppID(u uuid.UUID) *BanAppUpdateOne {
	bauo.mutation.SetAppID(u)
	return bauo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (bauo *BanAppUpdateOne) SetNillableAppID(u *uuid.UUID) *BanAppUpdateOne {
	if u != nil {
		bauo.SetAppID(*u)
	}
	return bauo
}

// SetMessage sets the "message" field.
func (bauo *BanAppUpdateOne) SetMessage(s string) *BanAppUpdateOne {
	bauo.mutation.SetMessage(s)
	return bauo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (bauo *BanAppUpdateOne) SetNillableMessage(s *string) *BanAppUpdateOne {
	if s != nil {
		bauo.SetMessage(*s)
	}
	return bauo
}

// Mutation returns the BanAppMutation object of the builder.
func (bauo *BanAppUpdateOne) Mutation() *BanAppMutation {
	return bauo.mutation
}

// Where appends a list predicates to the BanAppUpdate builder.
func (bauo *BanAppUpdateOne) Where(ps ...predicate.BanApp) *BanAppUpdateOne {
	bauo.mutation.Where(ps...)
	return bauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bauo *BanAppUpdateOne) Select(field string, fields ...string) *BanAppUpdateOne {
	bauo.fields = append([]string{field}, fields...)
	return bauo
}

// Save executes the query and returns the updated BanApp entity.
func (bauo *BanAppUpdateOne) Save(ctx context.Context) (*BanApp, error) {
	bauo.defaults()
	return withHooks(ctx, bauo.sqlSave, bauo.mutation, bauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bauo *BanAppUpdateOne) SaveX(ctx context.Context) *BanApp {
	node, err := bauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bauo *BanAppUpdateOne) Exec(ctx context.Context) error {
	_, err := bauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bauo *BanAppUpdateOne) ExecX(ctx context.Context) {
	if err := bauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bauo *BanAppUpdateOne) defaults() {
	if _, ok := bauo.mutation.UpdatedAt(); !ok {
		v := banapp.UpdateDefaultUpdatedAt()
		bauo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bauo *BanAppUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BanAppUpdateOne {
	bauo.modifiers = append(bauo.modifiers, modifiers...)
	return bauo
}

func (bauo *BanAppUpdateOne) sqlSave(ctx context.Context) (_node *BanApp, err error) {
	_spec := sqlgraph.NewUpdateSpec(banapp.Table, banapp.Columns, sqlgraph.NewFieldSpec(banapp.FieldID, field.TypeUint32))
	id, ok := bauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "BanApp.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, banapp.FieldID)
		for _, f := range fields {
			if !banapp.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != banapp.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bauo.mutation.CreatedAt(); ok {
		_spec.SetField(banapp.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := bauo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(banapp.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := bauo.mutation.UpdatedAt(); ok {
		_spec.SetField(banapp.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := bauo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(banapp.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := bauo.mutation.DeletedAt(); ok {
		_spec.SetField(banapp.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := bauo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(banapp.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := bauo.mutation.EntID(); ok {
		_spec.SetField(banapp.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := bauo.mutation.AppID(); ok {
		_spec.SetField(banapp.FieldAppID, field.TypeUUID, value)
	}
	if value, ok := bauo.mutation.Message(); ok {
		_spec.SetField(banapp.FieldMessage, field.TypeString, value)
	}
	_spec.AddModifiers(bauo.modifiers...)
	_node = &BanApp{config: bauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{banapp.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bauo.mutation.done = true
	return _node, nil
}

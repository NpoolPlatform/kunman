// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"

	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated"

	"entgo.io/ent/entql"
	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns a formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return privacy.Allowf(format, a...)
}

// Denyf returns a formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return privacy.Denyf(format, a...)
}

// Skipf returns a formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return privacy.Skipf(format, a...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
	// MutationRuleFunc type is an adapter which allows the use of
	// ordinary functions as mutation rules.
	MutationRuleFunc = privacy.MutationRuleFunc

	// QueryMutationRule is an interface which groups query and mutation rules.
	QueryMutationRule = privacy.QueryMutationRule
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, generated.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	return f(ctx, q)
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return privacy.AlwaysAllowRule()
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return privacy.AlwaysDenyRule()
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return privacy.ContextQueryMutationRule(eval)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op generated.Op) MutationRule {
	return privacy.OnMutationOperation(rule, op)
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op generated.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m generated.Mutation) error {
		return Denyf("generated/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The AppQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppQueryRuleFunc func(context.Context, *generated.AppQuery) error

// EvalQuery return f(ctx, q).
func (f AppQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppQuery", q)
}

// The AppMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppMutationRuleFunc func(context.Context, *generated.AppMutation) error

// EvalMutation calls f(ctx, m).
func (f AppMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppMutation", m)
}

// The AppControlQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppControlQueryRuleFunc func(context.Context, *generated.AppControlQuery) error

// EvalQuery return f(ctx, q).
func (f AppControlQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppControlQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppControlQuery", q)
}

// The AppControlMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppControlMutationRuleFunc func(context.Context, *generated.AppControlMutation) error

// EvalMutation calls f(ctx, m).
func (f AppControlMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppControlMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppControlMutation", m)
}

// The AppOAuthThirdPartyQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppOAuthThirdPartyQueryRuleFunc func(context.Context, *generated.AppOAuthThirdPartyQuery) error

// EvalQuery return f(ctx, q).
func (f AppOAuthThirdPartyQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppOAuthThirdPartyQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppOAuthThirdPartyQuery", q)
}

// The AppOAuthThirdPartyMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppOAuthThirdPartyMutationRuleFunc func(context.Context, *generated.AppOAuthThirdPartyMutation) error

// EvalMutation calls f(ctx, m).
func (f AppOAuthThirdPartyMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppOAuthThirdPartyMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppOAuthThirdPartyMutation", m)
}

// The AppRoleQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppRoleQueryRuleFunc func(context.Context, *generated.AppRoleQuery) error

// EvalQuery return f(ctx, q).
func (f AppRoleQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppRoleQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppRoleQuery", q)
}

// The AppRoleMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppRoleMutationRuleFunc func(context.Context, *generated.AppRoleMutation) error

// EvalMutation calls f(ctx, m).
func (f AppRoleMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppRoleMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppRoleMutation", m)
}

// The AppRoleUserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppRoleUserQueryRuleFunc func(context.Context, *generated.AppRoleUserQuery) error

// EvalQuery return f(ctx, q).
func (f AppRoleUserQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppRoleUserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppRoleUserQuery", q)
}

// The AppRoleUserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppRoleUserMutationRuleFunc func(context.Context, *generated.AppRoleUserMutation) error

// EvalMutation calls f(ctx, m).
func (f AppRoleUserMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppRoleUserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppRoleUserMutation", m)
}

// The AppSubscribeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppSubscribeQueryRuleFunc func(context.Context, *generated.AppSubscribeQuery) error

// EvalQuery return f(ctx, q).
func (f AppSubscribeQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppSubscribeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppSubscribeQuery", q)
}

// The AppSubscribeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppSubscribeMutationRuleFunc func(context.Context, *generated.AppSubscribeMutation) error

// EvalMutation calls f(ctx, m).
func (f AppSubscribeMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppSubscribeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppSubscribeMutation", m)
}

// The AppUserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppUserQueryRuleFunc func(context.Context, *generated.AppUserQuery) error

// EvalQuery return f(ctx, q).
func (f AppUserQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppUserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppUserQuery", q)
}

// The AppUserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppUserMutationRuleFunc func(context.Context, *generated.AppUserMutation) error

// EvalMutation calls f(ctx, m).
func (f AppUserMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppUserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppUserMutation", m)
}

// The AppUserControlQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppUserControlQueryRuleFunc func(context.Context, *generated.AppUserControlQuery) error

// EvalQuery return f(ctx, q).
func (f AppUserControlQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppUserControlQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppUserControlQuery", q)
}

// The AppUserControlMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppUserControlMutationRuleFunc func(context.Context, *generated.AppUserControlMutation) error

// EvalMutation calls f(ctx, m).
func (f AppUserControlMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppUserControlMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppUserControlMutation", m)
}

// The AppUserExtraQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppUserExtraQueryRuleFunc func(context.Context, *generated.AppUserExtraQuery) error

// EvalQuery return f(ctx, q).
func (f AppUserExtraQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppUserExtraQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppUserExtraQuery", q)
}

// The AppUserExtraMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppUserExtraMutationRuleFunc func(context.Context, *generated.AppUserExtraMutation) error

// EvalMutation calls f(ctx, m).
func (f AppUserExtraMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppUserExtraMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppUserExtraMutation", m)
}

// The AppUserSecretQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppUserSecretQueryRuleFunc func(context.Context, *generated.AppUserSecretQuery) error

// EvalQuery return f(ctx, q).
func (f AppUserSecretQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppUserSecretQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppUserSecretQuery", q)
}

// The AppUserSecretMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppUserSecretMutationRuleFunc func(context.Context, *generated.AppUserSecretMutation) error

// EvalMutation calls f(ctx, m).
func (f AppUserSecretMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppUserSecretMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppUserSecretMutation", m)
}

// The AppUserThirdPartyQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppUserThirdPartyQueryRuleFunc func(context.Context, *generated.AppUserThirdPartyQuery) error

// EvalQuery return f(ctx, q).
func (f AppUserThirdPartyQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppUserThirdPartyQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppUserThirdPartyQuery", q)
}

// The AppUserThirdPartyMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppUserThirdPartyMutationRuleFunc func(context.Context, *generated.AppUserThirdPartyMutation) error

// EvalMutation calls f(ctx, m).
func (f AppUserThirdPartyMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppUserThirdPartyMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppUserThirdPartyMutation", m)
}

// The AuthQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AuthQueryRuleFunc func(context.Context, *generated.AuthQuery) error

// EvalQuery return f(ctx, q).
func (f AuthQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AuthQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AuthQuery", q)
}

// The AuthMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AuthMutationRuleFunc func(context.Context, *generated.AuthMutation) error

// EvalMutation calls f(ctx, m).
func (f AuthMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AuthMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AuthMutation", m)
}

// The AuthHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AuthHistoryQueryRuleFunc func(context.Context, *generated.AuthHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f AuthHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AuthHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AuthHistoryQuery", q)
}

// The AuthHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AuthHistoryMutationRuleFunc func(context.Context, *generated.AuthHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f AuthHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AuthHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AuthHistoryMutation", m)
}

// The BanAppQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BanAppQueryRuleFunc func(context.Context, *generated.BanAppQuery) error

// EvalQuery return f(ctx, q).
func (f BanAppQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.BanAppQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.BanAppQuery", q)
}

// The BanAppMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BanAppMutationRuleFunc func(context.Context, *generated.BanAppMutation) error

// EvalMutation calls f(ctx, m).
func (f BanAppMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.BanAppMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.BanAppMutation", m)
}

// The BanAppUserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BanAppUserQueryRuleFunc func(context.Context, *generated.BanAppUserQuery) error

// EvalQuery return f(ctx, q).
func (f BanAppUserQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.BanAppUserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.BanAppUserQuery", q)
}

// The BanAppUserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BanAppUserMutationRuleFunc func(context.Context, *generated.BanAppUserMutation) error

// EvalMutation calls f(ctx, m).
func (f BanAppUserMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.BanAppUserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.BanAppUserMutation", m)
}

// The KycQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type KycQueryRuleFunc func(context.Context, *generated.KycQuery) error

// EvalQuery return f(ctx, q).
func (f KycQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.KycQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.KycQuery", q)
}

// The KycMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type KycMutationRuleFunc func(context.Context, *generated.KycMutation) error

// EvalMutation calls f(ctx, m).
func (f KycMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.KycMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.KycMutation", m)
}

// The LoginHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type LoginHistoryQueryRuleFunc func(context.Context, *generated.LoginHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f LoginHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.LoginHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.LoginHistoryQuery", q)
}

// The LoginHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type LoginHistoryMutationRuleFunc func(context.Context, *generated.LoginHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f LoginHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.LoginHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.LoginHistoryMutation", m)
}

// The OAuthThirdPartyQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OAuthThirdPartyQueryRuleFunc func(context.Context, *generated.OAuthThirdPartyQuery) error

// EvalQuery return f(ctx, q).
func (f OAuthThirdPartyQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OAuthThirdPartyQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.OAuthThirdPartyQuery", q)
}

// The OAuthThirdPartyMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OAuthThirdPartyMutationRuleFunc func(context.Context, *generated.OAuthThirdPartyMutation) error

// EvalMutation calls f(ctx, m).
func (f OAuthThirdPartyMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.OAuthThirdPartyMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.OAuthThirdPartyMutation", m)
}

// The RecoveryCodeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RecoveryCodeQueryRuleFunc func(context.Context, *generated.RecoveryCodeQuery) error

// EvalQuery return f(ctx, q).
func (f RecoveryCodeQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.RecoveryCodeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.RecoveryCodeQuery", q)
}

// The RecoveryCodeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RecoveryCodeMutationRuleFunc func(context.Context, *generated.RecoveryCodeMutation) error

// EvalMutation calls f(ctx, m).
func (f RecoveryCodeMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.RecoveryCodeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.RecoveryCodeMutation", m)
}

// The SubscriberQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SubscriberQueryRuleFunc func(context.Context, *generated.SubscriberQuery) error

// EvalQuery return f(ctx, q).
func (f SubscriberQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.SubscriberQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.SubscriberQuery", q)
}

// The SubscriberMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SubscriberMutationRuleFunc func(context.Context, *generated.SubscriberMutation) error

// EvalMutation calls f(ctx, m).
func (f SubscriberMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.SubscriberMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.SubscriberMutation", m)
}

type (
	// Filter is the interface that wraps the Where function
	// for filtering nodes in queries and mutations.
	Filter interface {
		// Where applies a filter on the executed query/mutation.
		Where(entql.P)
	}

	// The FilterFunc type is an adapter that allows the use of ordinary
	// functions as filters for query and mutation types.
	FilterFunc func(context.Context, Filter) error
)

// EvalQuery calls f(ctx, q) if the query implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	fr, err := queryFilter(q)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

// EvalMutation calls f(ctx, q) if the mutation implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	fr, err := mutationFilter(m)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

var _ QueryMutationRule = FilterFunc(nil)

func queryFilter(q generated.Query) (Filter, error) {
	switch q := q.(type) {
	case *generated.AppQuery:
		return q.Filter(), nil
	case *generated.AppControlQuery:
		return q.Filter(), nil
	case *generated.AppOAuthThirdPartyQuery:
		return q.Filter(), nil
	case *generated.AppRoleQuery:
		return q.Filter(), nil
	case *generated.AppRoleUserQuery:
		return q.Filter(), nil
	case *generated.AppSubscribeQuery:
		return q.Filter(), nil
	case *generated.AppUserQuery:
		return q.Filter(), nil
	case *generated.AppUserControlQuery:
		return q.Filter(), nil
	case *generated.AppUserExtraQuery:
		return q.Filter(), nil
	case *generated.AppUserSecretQuery:
		return q.Filter(), nil
	case *generated.AppUserThirdPartyQuery:
		return q.Filter(), nil
	case *generated.AuthQuery:
		return q.Filter(), nil
	case *generated.AuthHistoryQuery:
		return q.Filter(), nil
	case *generated.BanAppQuery:
		return q.Filter(), nil
	case *generated.BanAppUserQuery:
		return q.Filter(), nil
	case *generated.KycQuery:
		return q.Filter(), nil
	case *generated.LoginHistoryQuery:
		return q.Filter(), nil
	case *generated.OAuthThirdPartyQuery:
		return q.Filter(), nil
	case *generated.RecoveryCodeQuery:
		return q.Filter(), nil
	case *generated.SubscriberQuery:
		return q.Filter(), nil
	default:
		return nil, Denyf("generated/privacy: unexpected query type %T for query filter", q)
	}
}

func mutationFilter(m generated.Mutation) (Filter, error) {
	switch m := m.(type) {
	case *generated.AppMutation:
		return m.Filter(), nil
	case *generated.AppControlMutation:
		return m.Filter(), nil
	case *generated.AppOAuthThirdPartyMutation:
		return m.Filter(), nil
	case *generated.AppRoleMutation:
		return m.Filter(), nil
	case *generated.AppRoleUserMutation:
		return m.Filter(), nil
	case *generated.AppSubscribeMutation:
		return m.Filter(), nil
	case *generated.AppUserMutation:
		return m.Filter(), nil
	case *generated.AppUserControlMutation:
		return m.Filter(), nil
	case *generated.AppUserExtraMutation:
		return m.Filter(), nil
	case *generated.AppUserSecretMutation:
		return m.Filter(), nil
	case *generated.AppUserThirdPartyMutation:
		return m.Filter(), nil
	case *generated.AuthMutation:
		return m.Filter(), nil
	case *generated.AuthHistoryMutation:
		return m.Filter(), nil
	case *generated.BanAppMutation:
		return m.Filter(), nil
	case *generated.BanAppUserMutation:
		return m.Filter(), nil
	case *generated.KycMutation:
		return m.Filter(), nil
	case *generated.LoginHistoryMutation:
		return m.Filter(), nil
	case *generated.OAuthThirdPartyMutation:
		return m.Filter(), nil
	case *generated.RecoveryCodeMutation:
		return m.Filter(), nil
	case *generated.SubscriberMutation:
		return m.Filter(), nil
	default:
		return nil, Denyf("generated/privacy: unexpected mutation type %T for mutation filter", m)
	}
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/appusersecret"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/predicate"
)

// AppUserSecretDelete is the builder for deleting a AppUserSecret entity.
type AppUserSecretDelete struct {
	config
	hooks    []Hook
	mutation *AppUserSecretMutation
}

// Where appends a list predicates to the AppUserSecretDelete builder.
func (ausd *AppUserSecretDelete) Where(ps ...predicate.AppUserSecret) *AppUserSecretDelete {
	ausd.mutation.Where(ps...)
	return ausd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ausd *AppUserSecretDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ausd.sqlExec, ausd.mutation, ausd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ausd *AppUserSecretDelete) ExecX(ctx context.Context) int {
	n, err := ausd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ausd *AppUserSecretDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(appusersecret.Table, sqlgraph.NewFieldSpec(appusersecret.FieldID, field.TypeUint32))
	if ps := ausd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ausd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ausd.mutation.done = true
	return affected, err
}

// AppUserSecretDeleteOne is the builder for deleting a single AppUserSecret entity.
type AppUserSecretDeleteOne struct {
	ausd *AppUserSecretDelete
}

// Where appends a list predicates to the AppUserSecretDelete builder.
func (ausdo *AppUserSecretDeleteOne) Where(ps ...predicate.AppUserSecret) *AppUserSecretDeleteOne {
	ausdo.ausd.mutation.Where(ps...)
	return ausdo
}

// Exec executes the deletion query.
func (ausdo *AppUserSecretDeleteOne) Exec(ctx context.Context) error {
	n, err := ausdo.ausd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{appusersecret.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ausdo *AppUserSecretDeleteOne) ExecX(ctx context.Context) {
	if err := ausdo.Exec(ctx); err != nil {
		panic(err)
	}
}

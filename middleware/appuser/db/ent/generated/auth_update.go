// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/auth"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// AuthUpdate is the builder for updating Auth entities.
type AuthUpdate struct {
	config
	hooks     []Hook
	mutation  *AuthMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AuthUpdate builder.
func (au *AuthUpdate) Where(ps ...predicate.Auth) *AuthUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *AuthUpdate) SetCreatedAt(u uint32) *AuthUpdate {
	au.mutation.ResetCreatedAt()
	au.mutation.SetCreatedAt(u)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *AuthUpdate) SetNillableCreatedAt(u *uint32) *AuthUpdate {
	if u != nil {
		au.SetCreatedAt(*u)
	}
	return au
}

// AddCreatedAt adds u to the "created_at" field.
func (au *AuthUpdate) AddCreatedAt(u int32) *AuthUpdate {
	au.mutation.AddCreatedAt(u)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AuthUpdate) SetUpdatedAt(u uint32) *AuthUpdate {
	au.mutation.ResetUpdatedAt()
	au.mutation.SetUpdatedAt(u)
	return au
}

// AddUpdatedAt adds u to the "updated_at" field.
func (au *AuthUpdate) AddUpdatedAt(u int32) *AuthUpdate {
	au.mutation.AddUpdatedAt(u)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AuthUpdate) SetDeletedAt(u uint32) *AuthUpdate {
	au.mutation.ResetDeletedAt()
	au.mutation.SetDeletedAt(u)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AuthUpdate) SetNillableDeletedAt(u *uint32) *AuthUpdate {
	if u != nil {
		au.SetDeletedAt(*u)
	}
	return au
}

// AddDeletedAt adds u to the "deleted_at" field.
func (au *AuthUpdate) AddDeletedAt(u int32) *AuthUpdate {
	au.mutation.AddDeletedAt(u)
	return au
}

// SetEntID sets the "ent_id" field.
func (au *AuthUpdate) SetEntID(u uuid.UUID) *AuthUpdate {
	au.mutation.SetEntID(u)
	return au
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (au *AuthUpdate) SetNillableEntID(u *uuid.UUID) *AuthUpdate {
	if u != nil {
		au.SetEntID(*u)
	}
	return au
}

// SetAppID sets the "app_id" field.
func (au *AuthUpdate) SetAppID(u uuid.UUID) *AuthUpdate {
	au.mutation.SetAppID(u)
	return au
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (au *AuthUpdate) SetNillableAppID(u *uuid.UUID) *AuthUpdate {
	if u != nil {
		au.SetAppID(*u)
	}
	return au
}

// ClearAppID clears the value of the "app_id" field.
func (au *AuthUpdate) ClearAppID() *AuthUpdate {
	au.mutation.ClearAppID()
	return au
}

// SetRoleID sets the "role_id" field.
func (au *AuthUpdate) SetRoleID(u uuid.UUID) *AuthUpdate {
	au.mutation.SetRoleID(u)
	return au
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (au *AuthUpdate) SetNillableRoleID(u *uuid.UUID) *AuthUpdate {
	if u != nil {
		au.SetRoleID(*u)
	}
	return au
}

// ClearRoleID clears the value of the "role_id" field.
func (au *AuthUpdate) ClearRoleID() *AuthUpdate {
	au.mutation.ClearRoleID()
	return au
}

// SetUserID sets the "user_id" field.
func (au *AuthUpdate) SetUserID(u uuid.UUID) *AuthUpdate {
	au.mutation.SetUserID(u)
	return au
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (au *AuthUpdate) SetNillableUserID(u *uuid.UUID) *AuthUpdate {
	if u != nil {
		au.SetUserID(*u)
	}
	return au
}

// ClearUserID clears the value of the "user_id" field.
func (au *AuthUpdate) ClearUserID() *AuthUpdate {
	au.mutation.ClearUserID()
	return au
}

// SetResource sets the "resource" field.
func (au *AuthUpdate) SetResource(s string) *AuthUpdate {
	au.mutation.SetResource(s)
	return au
}

// SetNillableResource sets the "resource" field if the given value is not nil.
func (au *AuthUpdate) SetNillableResource(s *string) *AuthUpdate {
	if s != nil {
		au.SetResource(*s)
	}
	return au
}

// ClearResource clears the value of the "resource" field.
func (au *AuthUpdate) ClearResource() *AuthUpdate {
	au.mutation.ClearResource()
	return au
}

// SetMethod sets the "method" field.
func (au *AuthUpdate) SetMethod(s string) *AuthUpdate {
	au.mutation.SetMethod(s)
	return au
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (au *AuthUpdate) SetNillableMethod(s *string) *AuthUpdate {
	if s != nil {
		au.SetMethod(*s)
	}
	return au
}

// ClearMethod clears the value of the "method" field.
func (au *AuthUpdate) ClearMethod() *AuthUpdate {
	au.mutation.ClearMethod()
	return au
}

// Mutation returns the AuthMutation object of the builder.
func (au *AuthUpdate) Mutation() *AuthMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AuthUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AuthUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AuthUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AuthUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AuthUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := auth.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AuthUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AuthUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AuthUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(auth.Table, auth.Columns, sqlgraph.NewFieldSpec(auth.FieldID, field.TypeUint32))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.SetField(auth.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := au.mutation.AddedCreatedAt(); ok {
		_spec.AddField(auth.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(auth.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := au.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(auth.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(auth.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := au.mutation.AddedDeletedAt(); ok {
		_spec.AddField(auth.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := au.mutation.EntID(); ok {
		_spec.SetField(auth.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := au.mutation.AppID(); ok {
		_spec.SetField(auth.FieldAppID, field.TypeUUID, value)
	}
	if au.mutation.AppIDCleared() {
		_spec.ClearField(auth.FieldAppID, field.TypeUUID)
	}
	if value, ok := au.mutation.RoleID(); ok {
		_spec.SetField(auth.FieldRoleID, field.TypeUUID, value)
	}
	if au.mutation.RoleIDCleared() {
		_spec.ClearField(auth.FieldRoleID, field.TypeUUID)
	}
	if value, ok := au.mutation.UserID(); ok {
		_spec.SetField(auth.FieldUserID, field.TypeUUID, value)
	}
	if au.mutation.UserIDCleared() {
		_spec.ClearField(auth.FieldUserID, field.TypeUUID)
	}
	if value, ok := au.mutation.Resource(); ok {
		_spec.SetField(auth.FieldResource, field.TypeString, value)
	}
	if au.mutation.ResourceCleared() {
		_spec.ClearField(auth.FieldResource, field.TypeString)
	}
	if value, ok := au.mutation.Method(); ok {
		_spec.SetField(auth.FieldMethod, field.TypeString, value)
	}
	if au.mutation.MethodCleared() {
		_spec.ClearField(auth.FieldMethod, field.TypeString)
	}
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{auth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AuthUpdateOne is the builder for updating a single Auth entity.
type AuthUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AuthMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (auo *AuthUpdateOne) SetCreatedAt(u uint32) *AuthUpdateOne {
	auo.mutation.ResetCreatedAt()
	auo.mutation.SetCreatedAt(u)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *AuthUpdateOne) SetNillableCreatedAt(u *uint32) *AuthUpdateOne {
	if u != nil {
		auo.SetCreatedAt(*u)
	}
	return auo
}

// AddCreatedAt adds u to the "created_at" field.
func (auo *AuthUpdateOne) AddCreatedAt(u int32) *AuthUpdateOne {
	auo.mutation.AddCreatedAt(u)
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AuthUpdateOne) SetUpdatedAt(u uint32) *AuthUpdateOne {
	auo.mutation.ResetUpdatedAt()
	auo.mutation.SetUpdatedAt(u)
	return auo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (auo *AuthUpdateOne) AddUpdatedAt(u int32) *AuthUpdateOne {
	auo.mutation.AddUpdatedAt(u)
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AuthUpdateOne) SetDeletedAt(u uint32) *AuthUpdateOne {
	auo.mutation.ResetDeletedAt()
	auo.mutation.SetDeletedAt(u)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AuthUpdateOne) SetNillableDeletedAt(u *uint32) *AuthUpdateOne {
	if u != nil {
		auo.SetDeletedAt(*u)
	}
	return auo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (auo *AuthUpdateOne) AddDeletedAt(u int32) *AuthUpdateOne {
	auo.mutation.AddDeletedAt(u)
	return auo
}

// SetEntID sets the "ent_id" field.
func (auo *AuthUpdateOne) SetEntID(u uuid.UUID) *AuthUpdateOne {
	auo.mutation.SetEntID(u)
	return auo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (auo *AuthUpdateOne) SetNillableEntID(u *uuid.UUID) *AuthUpdateOne {
	if u != nil {
		auo.SetEntID(*u)
	}
	return auo
}

// SetAppID sets the "app_id" field.
func (auo *AuthUpdateOne) SetAppID(u uuid.UUID) *AuthUpdateOne {
	auo.mutation.SetAppID(u)
	return auo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (auo *AuthUpdateOne) SetNillableAppID(u *uuid.UUID) *AuthUpdateOne {
	if u != nil {
		auo.SetAppID(*u)
	}
	return auo
}

// ClearAppID clears the value of the "app_id" field.
func (auo *AuthUpdateOne) ClearAppID() *AuthUpdateOne {
	auo.mutation.ClearAppID()
	return auo
}

// SetRoleID sets the "role_id" field.
func (auo *AuthUpdateOne) SetRoleID(u uuid.UUID) *AuthUpdateOne {
	auo.mutation.SetRoleID(u)
	return auo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (auo *AuthUpdateOne) SetNillableRoleID(u *uuid.UUID) *AuthUpdateOne {
	if u != nil {
		auo.SetRoleID(*u)
	}
	return auo
}

// ClearRoleID clears the value of the "role_id" field.
func (auo *AuthUpdateOne) ClearRoleID() *AuthUpdateOne {
	auo.mutation.ClearRoleID()
	return auo
}

// SetUserID sets the "user_id" field.
func (auo *AuthUpdateOne) SetUserID(u uuid.UUID) *AuthUpdateOne {
	auo.mutation.SetUserID(u)
	return auo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (auo *AuthUpdateOne) SetNillableUserID(u *uuid.UUID) *AuthUpdateOne {
	if u != nil {
		auo.SetUserID(*u)
	}
	return auo
}

// ClearUserID clears the value of the "user_id" field.
func (auo *AuthUpdateOne) ClearUserID() *AuthUpdateOne {
	auo.mutation.ClearUserID()
	return auo
}

// SetResource sets the "resource" field.
func (auo *AuthUpdateOne) SetResource(s string) *AuthUpdateOne {
	auo.mutation.SetResource(s)
	return auo
}

// SetNillableResource sets the "resource" field if the given value is not nil.
func (auo *AuthUpdateOne) SetNillableResource(s *string) *AuthUpdateOne {
	if s != nil {
		auo.SetResource(*s)
	}
	return auo
}

// ClearResource clears the value of the "resource" field.
func (auo *AuthUpdateOne) ClearResource() *AuthUpdateOne {
	auo.mutation.ClearResource()
	return auo
}

// SetMethod sets the "method" field.
func (auo *AuthUpdateOne) SetMethod(s string) *AuthUpdateOne {
	auo.mutation.SetMethod(s)
	return auo
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (auo *AuthUpdateOne) SetNillableMethod(s *string) *AuthUpdateOne {
	if s != nil {
		auo.SetMethod(*s)
	}
	return auo
}

// ClearMethod clears the value of the "method" field.
func (auo *AuthUpdateOne) ClearMethod() *AuthUpdateOne {
	auo.mutation.ClearMethod()
	return auo
}

// Mutation returns the AuthMutation object of the builder.
func (auo *AuthUpdateOne) Mutation() *AuthMutation {
	return auo.mutation
}

// Where appends a list predicates to the AuthUpdate builder.
func (auo *AuthUpdateOne) Where(ps ...predicate.Auth) *AuthUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AuthUpdateOne) Select(field string, fields ...string) *AuthUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Auth entity.
func (auo *AuthUpdateOne) Save(ctx context.Context) (*Auth, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AuthUpdateOne) SaveX(ctx context.Context) *Auth {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AuthUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AuthUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AuthUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := auth.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AuthUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AuthUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AuthUpdateOne) sqlSave(ctx context.Context) (_node *Auth, err error) {
	_spec := sqlgraph.NewUpdateSpec(auth.Table, auth.Columns, sqlgraph.NewFieldSpec(auth.FieldID, field.TypeUint32))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Auth.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, auth.FieldID)
		for _, f := range fields {
			if !auth.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != auth.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.SetField(auth.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := auo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(auth.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(auth.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := auo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(auth.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(auth.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := auo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(auth.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := auo.mutation.EntID(); ok {
		_spec.SetField(auth.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := auo.mutation.AppID(); ok {
		_spec.SetField(auth.FieldAppID, field.TypeUUID, value)
	}
	if auo.mutation.AppIDCleared() {
		_spec.ClearField(auth.FieldAppID, field.TypeUUID)
	}
	if value, ok := auo.mutation.RoleID(); ok {
		_spec.SetField(auth.FieldRoleID, field.TypeUUID, value)
	}
	if auo.mutation.RoleIDCleared() {
		_spec.ClearField(auth.FieldRoleID, field.TypeUUID)
	}
	if value, ok := auo.mutation.UserID(); ok {
		_spec.SetField(auth.FieldUserID, field.TypeUUID, value)
	}
	if auo.mutation.UserIDCleared() {
		_spec.ClearField(auth.FieldUserID, field.TypeUUID)
	}
	if value, ok := auo.mutation.Resource(); ok {
		_spec.SetField(auth.FieldResource, field.TypeString, value)
	}
	if auo.mutation.ResourceCleared() {
		_spec.ClearField(auth.FieldResource, field.TypeString)
	}
	if value, ok := auo.mutation.Method(); ok {
		_spec.SetField(auth.FieldMethod, field.TypeString, value)
	}
	if auo.mutation.MethodCleared() {
		_spec.ClearField(auth.FieldMethod, field.TypeString)
	}
	_spec.AddModifiers(auo.modifiers...)
	_node = &Auth{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{auth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}

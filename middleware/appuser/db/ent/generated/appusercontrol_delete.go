// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/appusercontrol"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/predicate"
)

// AppUserControlDelete is the builder for deleting a AppUserControl entity.
type AppUserControlDelete struct {
	config
	hooks    []Hook
	mutation *AppUserControlMutation
}

// Where appends a list predicates to the AppUserControlDelete builder.
func (aucd *AppUserControlDelete) Where(ps ...predicate.AppUserControl) *AppUserControlDelete {
	aucd.mutation.Where(ps...)
	return aucd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (aucd *AppUserControlDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, aucd.sqlExec, aucd.mutation, aucd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (aucd *AppUserControlDelete) ExecX(ctx context.Context) int {
	n, err := aucd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (aucd *AppUserControlDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(appusercontrol.Table, sqlgraph.NewFieldSpec(appusercontrol.FieldID, field.TypeUint32))
	if ps := aucd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, aucd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	aucd.mutation.done = true
	return affected, err
}

// AppUserControlDeleteOne is the builder for deleting a single AppUserControl entity.
type AppUserControlDeleteOne struct {
	aucd *AppUserControlDelete
}

// Where appends a list predicates to the AppUserControlDelete builder.
func (aucdo *AppUserControlDeleteOne) Where(ps ...predicate.AppUserControl) *AppUserControlDeleteOne {
	aucdo.aucd.mutation.Where(ps...)
	return aucdo
}

// Exec executes the deletion query.
func (aucdo *AppUserControlDeleteOne) Exec(ctx context.Context) error {
	n, err := aucdo.aucd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{appusercontrol.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (aucdo *AppUserControlDeleteOne) ExecX(ctx context.Context) {
	if err := aucdo.Exec(ctx); err != nil {
		panic(err)
	}
}

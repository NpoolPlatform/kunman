// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/appuser"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// AppUserUpdate is the builder for updating AppUser entities.
type AppUserUpdate struct {
	config
	hooks     []Hook
	mutation  *AppUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppUserUpdate builder.
func (auu *AppUserUpdate) Where(ps ...predicate.AppUser) *AppUserUpdate {
	auu.mutation.Where(ps...)
	return auu
}

// SetCreatedAt sets the "created_at" field.
func (auu *AppUserUpdate) SetCreatedAt(u uint32) *AppUserUpdate {
	auu.mutation.ResetCreatedAt()
	auu.mutation.SetCreatedAt(u)
	return auu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableCreatedAt(u *uint32) *AppUserUpdate {
	if u != nil {
		auu.SetCreatedAt(*u)
	}
	return auu
}

// AddCreatedAt adds u to the "created_at" field.
func (auu *AppUserUpdate) AddCreatedAt(u int32) *AppUserUpdate {
	auu.mutation.AddCreatedAt(u)
	return auu
}

// SetUpdatedAt sets the "updated_at" field.
func (auu *AppUserUpdate) SetUpdatedAt(u uint32) *AppUserUpdate {
	auu.mutation.ResetUpdatedAt()
	auu.mutation.SetUpdatedAt(u)
	return auu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (auu *AppUserUpdate) AddUpdatedAt(u int32) *AppUserUpdate {
	auu.mutation.AddUpdatedAt(u)
	return auu
}

// SetDeletedAt sets the "deleted_at" field.
func (auu *AppUserUpdate) SetDeletedAt(u uint32) *AppUserUpdate {
	auu.mutation.ResetDeletedAt()
	auu.mutation.SetDeletedAt(u)
	return auu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableDeletedAt(u *uint32) *AppUserUpdate {
	if u != nil {
		auu.SetDeletedAt(*u)
	}
	return auu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (auu *AppUserUpdate) AddDeletedAt(u int32) *AppUserUpdate {
	auu.mutation.AddDeletedAt(u)
	return auu
}

// SetEntID sets the "ent_id" field.
func (auu *AppUserUpdate) SetEntID(u uuid.UUID) *AppUserUpdate {
	auu.mutation.SetEntID(u)
	return auu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableEntID(u *uuid.UUID) *AppUserUpdate {
	if u != nil {
		auu.SetEntID(*u)
	}
	return auu
}

// SetAppID sets the "app_id" field.
func (auu *AppUserUpdate) SetAppID(u uuid.UUID) *AppUserUpdate {
	auu.mutation.SetAppID(u)
	return auu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableAppID(u *uuid.UUID) *AppUserUpdate {
	if u != nil {
		auu.SetAppID(*u)
	}
	return auu
}

// ClearAppID clears the value of the "app_id" field.
func (auu *AppUserUpdate) ClearAppID() *AppUserUpdate {
	auu.mutation.ClearAppID()
	return auu
}

// SetEmailAddress sets the "email_address" field.
func (auu *AppUserUpdate) SetEmailAddress(s string) *AppUserUpdate {
	auu.mutation.SetEmailAddress(s)
	return auu
}

// SetNillableEmailAddress sets the "email_address" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableEmailAddress(s *string) *AppUserUpdate {
	if s != nil {
		auu.SetEmailAddress(*s)
	}
	return auu
}

// ClearEmailAddress clears the value of the "email_address" field.
func (auu *AppUserUpdate) ClearEmailAddress() *AppUserUpdate {
	auu.mutation.ClearEmailAddress()
	return auu
}

// SetPhoneNo sets the "phone_no" field.
func (auu *AppUserUpdate) SetPhoneNo(s string) *AppUserUpdate {
	auu.mutation.SetPhoneNo(s)
	return auu
}

// SetNillablePhoneNo sets the "phone_no" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillablePhoneNo(s *string) *AppUserUpdate {
	if s != nil {
		auu.SetPhoneNo(*s)
	}
	return auu
}

// ClearPhoneNo clears the value of the "phone_no" field.
func (auu *AppUserUpdate) ClearPhoneNo() *AppUserUpdate {
	auu.mutation.ClearPhoneNo()
	return auu
}

// SetImportFromApp sets the "import_from_app" field.
func (auu *AppUserUpdate) SetImportFromApp(u uuid.UUID) *AppUserUpdate {
	auu.mutation.SetImportFromApp(u)
	return auu
}

// SetNillableImportFromApp sets the "import_from_app" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableImportFromApp(u *uuid.UUID) *AppUserUpdate {
	if u != nil {
		auu.SetImportFromApp(*u)
	}
	return auu
}

// ClearImportFromApp clears the value of the "import_from_app" field.
func (auu *AppUserUpdate) ClearImportFromApp() *AppUserUpdate {
	auu.mutation.ClearImportFromApp()
	return auu
}

// Mutation returns the AppUserMutation object of the builder.
func (auu *AppUserUpdate) Mutation() *AppUserMutation {
	return auu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (auu *AppUserUpdate) Save(ctx context.Context) (int, error) {
	auu.defaults()
	return withHooks(ctx, auu.sqlSave, auu.mutation, auu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auu *AppUserUpdate) SaveX(ctx context.Context) int {
	affected, err := auu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (auu *AppUserUpdate) Exec(ctx context.Context) error {
	_, err := auu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auu *AppUserUpdate) ExecX(ctx context.Context) {
	if err := auu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auu *AppUserUpdate) defaults() {
	if _, ok := auu.mutation.UpdatedAt(); !ok {
		v := appuser.UpdateDefaultUpdatedAt()
		auu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auu *AppUserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppUserUpdate {
	auu.modifiers = append(auu.modifiers, modifiers...)
	return auu
}

func (auu *AppUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appuser.Table, appuser.Columns, sqlgraph.NewFieldSpec(appuser.FieldID, field.TypeUint32))
	if ps := auu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auu.mutation.CreatedAt(); ok {
		_spec.SetField(appuser.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := auu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(appuser.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := auu.mutation.UpdatedAt(); ok {
		_spec.SetField(appuser.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := auu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(appuser.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := auu.mutation.DeletedAt(); ok {
		_spec.SetField(appuser.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := auu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(appuser.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := auu.mutation.EntID(); ok {
		_spec.SetField(appuser.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := auu.mutation.AppID(); ok {
		_spec.SetField(appuser.FieldAppID, field.TypeUUID, value)
	}
	if auu.mutation.AppIDCleared() {
		_spec.ClearField(appuser.FieldAppID, field.TypeUUID)
	}
	if value, ok := auu.mutation.EmailAddress(); ok {
		_spec.SetField(appuser.FieldEmailAddress, field.TypeString, value)
	}
	if auu.mutation.EmailAddressCleared() {
		_spec.ClearField(appuser.FieldEmailAddress, field.TypeString)
	}
	if value, ok := auu.mutation.PhoneNo(); ok {
		_spec.SetField(appuser.FieldPhoneNo, field.TypeString, value)
	}
	if auu.mutation.PhoneNoCleared() {
		_spec.ClearField(appuser.FieldPhoneNo, field.TypeString)
	}
	if value, ok := auu.mutation.ImportFromApp(); ok {
		_spec.SetField(appuser.FieldImportFromApp, field.TypeUUID, value)
	}
	if auu.mutation.ImportFromAppCleared() {
		_spec.ClearField(appuser.FieldImportFromApp, field.TypeUUID)
	}
	_spec.AddModifiers(auu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, auu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	auu.mutation.done = true
	return n, nil
}

// AppUserUpdateOne is the builder for updating a single AppUser entity.
type AppUserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (auuo *AppUserUpdateOne) SetCreatedAt(u uint32) *AppUserUpdateOne {
	auuo.mutation.ResetCreatedAt()
	auuo.mutation.SetCreatedAt(u)
	return auuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableCreatedAt(u *uint32) *AppUserUpdateOne {
	if u != nil {
		auuo.SetCreatedAt(*u)
	}
	return auuo
}

// AddCreatedAt adds u to the "created_at" field.
func (auuo *AppUserUpdateOne) AddCreatedAt(u int32) *AppUserUpdateOne {
	auuo.mutation.AddCreatedAt(u)
	return auuo
}

// SetUpdatedAt sets the "updated_at" field.
func (auuo *AppUserUpdateOne) SetUpdatedAt(u uint32) *AppUserUpdateOne {
	auuo.mutation.ResetUpdatedAt()
	auuo.mutation.SetUpdatedAt(u)
	return auuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (auuo *AppUserUpdateOne) AddUpdatedAt(u int32) *AppUserUpdateOne {
	auuo.mutation.AddUpdatedAt(u)
	return auuo
}

// SetDeletedAt sets the "deleted_at" field.
func (auuo *AppUserUpdateOne) SetDeletedAt(u uint32) *AppUserUpdateOne {
	auuo.mutation.ResetDeletedAt()
	auuo.mutation.SetDeletedAt(u)
	return auuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableDeletedAt(u *uint32) *AppUserUpdateOne {
	if u != nil {
		auuo.SetDeletedAt(*u)
	}
	return auuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (auuo *AppUserUpdateOne) AddDeletedAt(u int32) *AppUserUpdateOne {
	auuo.mutation.AddDeletedAt(u)
	return auuo
}

// SetEntID sets the "ent_id" field.
func (auuo *AppUserUpdateOne) SetEntID(u uuid.UUID) *AppUserUpdateOne {
	auuo.mutation.SetEntID(u)
	return auuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableEntID(u *uuid.UUID) *AppUserUpdateOne {
	if u != nil {
		auuo.SetEntID(*u)
	}
	return auuo
}

// SetAppID sets the "app_id" field.
func (auuo *AppUserUpdateOne) SetAppID(u uuid.UUID) *AppUserUpdateOne {
	auuo.mutation.SetAppID(u)
	return auuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableAppID(u *uuid.UUID) *AppUserUpdateOne {
	if u != nil {
		auuo.SetAppID(*u)
	}
	return auuo
}

// ClearAppID clears the value of the "app_id" field.
func (auuo *AppUserUpdateOne) ClearAppID() *AppUserUpdateOne {
	auuo.mutation.ClearAppID()
	return auuo
}

// SetEmailAddress sets the "email_address" field.
func (auuo *AppUserUpdateOne) SetEmailAddress(s string) *AppUserUpdateOne {
	auuo.mutation.SetEmailAddress(s)
	return auuo
}

// SetNillableEmailAddress sets the "email_address" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableEmailAddress(s *string) *AppUserUpdateOne {
	if s != nil {
		auuo.SetEmailAddress(*s)
	}
	return auuo
}

// ClearEmailAddress clears the value of the "email_address" field.
func (auuo *AppUserUpdateOne) ClearEmailAddress() *AppUserUpdateOne {
	auuo.mutation.ClearEmailAddress()
	return auuo
}

// SetPhoneNo sets the "phone_no" field.
func (auuo *AppUserUpdateOne) SetPhoneNo(s string) *AppUserUpdateOne {
	auuo.mutation.SetPhoneNo(s)
	return auuo
}

// SetNillablePhoneNo sets the "phone_no" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillablePhoneNo(s *string) *AppUserUpdateOne {
	if s != nil {
		auuo.SetPhoneNo(*s)
	}
	return auuo
}

// ClearPhoneNo clears the value of the "phone_no" field.
func (auuo *AppUserUpdateOne) ClearPhoneNo() *AppUserUpdateOne {
	auuo.mutation.ClearPhoneNo()
	return auuo
}

// SetImportFromApp sets the "import_from_app" field.
func (auuo *AppUserUpdateOne) SetImportFromApp(u uuid.UUID) *AppUserUpdateOne {
	auuo.mutation.SetImportFromApp(u)
	return auuo
}

// SetNillableImportFromApp sets the "import_from_app" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableImportFromApp(u *uuid.UUID) *AppUserUpdateOne {
	if u != nil {
		auuo.SetImportFromApp(*u)
	}
	return auuo
}

// ClearImportFromApp clears the value of the "import_from_app" field.
func (auuo *AppUserUpdateOne) ClearImportFromApp() *AppUserUpdateOne {
	auuo.mutation.ClearImportFromApp()
	return auuo
}

// Mutation returns the AppUserMutation object of the builder.
func (auuo *AppUserUpdateOne) Mutation() *AppUserMutation {
	return auuo.mutation
}

// Where appends a list predicates to the AppUserUpdate builder.
func (auuo *AppUserUpdateOne) Where(ps ...predicate.AppUser) *AppUserUpdateOne {
	auuo.mutation.Where(ps...)
	return auuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auuo *AppUserUpdateOne) Select(field string, fields ...string) *AppUserUpdateOne {
	auuo.fields = append([]string{field}, fields...)
	return auuo
}

// Save executes the query and returns the updated AppUser entity.
func (auuo *AppUserUpdateOne) Save(ctx context.Context) (*AppUser, error) {
	auuo.defaults()
	return withHooks(ctx, auuo.sqlSave, auuo.mutation, auuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auuo *AppUserUpdateOne) SaveX(ctx context.Context) *AppUser {
	node, err := auuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auuo *AppUserUpdateOne) Exec(ctx context.Context) error {
	_, err := auuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auuo *AppUserUpdateOne) ExecX(ctx context.Context) {
	if err := auuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auuo *AppUserUpdateOne) defaults() {
	if _, ok := auuo.mutation.UpdatedAt(); !ok {
		v := appuser.UpdateDefaultUpdatedAt()
		auuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auuo *AppUserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppUserUpdateOne {
	auuo.modifiers = append(auuo.modifiers, modifiers...)
	return auuo
}

func (auuo *AppUserUpdateOne) sqlSave(ctx context.Context) (_node *AppUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(appuser.Table, appuser.Columns, sqlgraph.NewFieldSpec(appuser.FieldID, field.TypeUint32))
	id, ok := auuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AppUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appuser.FieldID)
		for _, f := range fields {
			if !appuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != appuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auuo.mutation.CreatedAt(); ok {
		_spec.SetField(appuser.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := auuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(appuser.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := auuo.mutation.UpdatedAt(); ok {
		_spec.SetField(appuser.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := auuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(appuser.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := auuo.mutation.DeletedAt(); ok {
		_spec.SetField(appuser.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := auuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(appuser.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := auuo.mutation.EntID(); ok {
		_spec.SetField(appuser.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := auuo.mutation.AppID(); ok {
		_spec.SetField(appuser.FieldAppID, field.TypeUUID, value)
	}
	if auuo.mutation.AppIDCleared() {
		_spec.ClearField(appuser.FieldAppID, field.TypeUUID)
	}
	if value, ok := auuo.mutation.EmailAddress(); ok {
		_spec.SetField(appuser.FieldEmailAddress, field.TypeString, value)
	}
	if auuo.mutation.EmailAddressCleared() {
		_spec.ClearField(appuser.FieldEmailAddress, field.TypeString)
	}
	if value, ok := auuo.mutation.PhoneNo(); ok {
		_spec.SetField(appuser.FieldPhoneNo, field.TypeString, value)
	}
	if auuo.mutation.PhoneNoCleared() {
		_spec.ClearField(appuser.FieldPhoneNo, field.TypeString)
	}
	if value, ok := auuo.mutation.ImportFromApp(); ok {
		_spec.SetField(appuser.FieldImportFromApp, field.TypeUUID, value)
	}
	if auuo.mutation.ImportFromAppCleared() {
		_spec.ClearField(appuser.FieldImportFromApp, field.TypeUUID)
	}
	_spec.AddModifiers(auuo.modifiers...)
	_node = &AppUser{config: auuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auuo.mutation.done = true
	return _node, nil
}

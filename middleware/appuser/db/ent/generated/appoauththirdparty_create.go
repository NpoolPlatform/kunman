// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/appoauththirdparty"
	"github.com/google/uuid"
)

// AppOAuthThirdPartyCreate is the builder for creating a AppOAuthThirdParty entity.
type AppOAuthThirdPartyCreate struct {
	config
	mutation *AppOAuthThirdPartyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (aotpc *AppOAuthThirdPartyCreate) SetCreatedAt(u uint32) *AppOAuthThirdPartyCreate {
	aotpc.mutation.SetCreatedAt(u)
	return aotpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aotpc *AppOAuthThirdPartyCreate) SetNillableCreatedAt(u *uint32) *AppOAuthThirdPartyCreate {
	if u != nil {
		aotpc.SetCreatedAt(*u)
	}
	return aotpc
}

// SetUpdatedAt sets the "updated_at" field.
func (aotpc *AppOAuthThirdPartyCreate) SetUpdatedAt(u uint32) *AppOAuthThirdPartyCreate {
	aotpc.mutation.SetUpdatedAt(u)
	return aotpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aotpc *AppOAuthThirdPartyCreate) SetNillableUpdatedAt(u *uint32) *AppOAuthThirdPartyCreate {
	if u != nil {
		aotpc.SetUpdatedAt(*u)
	}
	return aotpc
}

// SetDeletedAt sets the "deleted_at" field.
func (aotpc *AppOAuthThirdPartyCreate) SetDeletedAt(u uint32) *AppOAuthThirdPartyCreate {
	aotpc.mutation.SetDeletedAt(u)
	return aotpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aotpc *AppOAuthThirdPartyCreate) SetNillableDeletedAt(u *uint32) *AppOAuthThirdPartyCreate {
	if u != nil {
		aotpc.SetDeletedAt(*u)
	}
	return aotpc
}

// SetEntID sets the "ent_id" field.
func (aotpc *AppOAuthThirdPartyCreate) SetEntID(u uuid.UUID) *AppOAuthThirdPartyCreate {
	aotpc.mutation.SetEntID(u)
	return aotpc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (aotpc *AppOAuthThirdPartyCreate) SetNillableEntID(u *uuid.UUID) *AppOAuthThirdPartyCreate {
	if u != nil {
		aotpc.SetEntID(*u)
	}
	return aotpc
}

// SetAppID sets the "app_id" field.
func (aotpc *AppOAuthThirdPartyCreate) SetAppID(u uuid.UUID) *AppOAuthThirdPartyCreate {
	aotpc.mutation.SetAppID(u)
	return aotpc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (aotpc *AppOAuthThirdPartyCreate) SetNillableAppID(u *uuid.UUID) *AppOAuthThirdPartyCreate {
	if u != nil {
		aotpc.SetAppID(*u)
	}
	return aotpc
}

// SetThirdPartyID sets the "third_party_id" field.
func (aotpc *AppOAuthThirdPartyCreate) SetThirdPartyID(u uuid.UUID) *AppOAuthThirdPartyCreate {
	aotpc.mutation.SetThirdPartyID(u)
	return aotpc
}

// SetNillableThirdPartyID sets the "third_party_id" field if the given value is not nil.
func (aotpc *AppOAuthThirdPartyCreate) SetNillableThirdPartyID(u *uuid.UUID) *AppOAuthThirdPartyCreate {
	if u != nil {
		aotpc.SetThirdPartyID(*u)
	}
	return aotpc
}

// SetClientID sets the "client_id" field.
func (aotpc *AppOAuthThirdPartyCreate) SetClientID(s string) *AppOAuthThirdPartyCreate {
	aotpc.mutation.SetClientID(s)
	return aotpc
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (aotpc *AppOAuthThirdPartyCreate) SetNillableClientID(s *string) *AppOAuthThirdPartyCreate {
	if s != nil {
		aotpc.SetClientID(*s)
	}
	return aotpc
}

// SetClientSecret sets the "client_secret" field.
func (aotpc *AppOAuthThirdPartyCreate) SetClientSecret(s string) *AppOAuthThirdPartyCreate {
	aotpc.mutation.SetClientSecret(s)
	return aotpc
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (aotpc *AppOAuthThirdPartyCreate) SetNillableClientSecret(s *string) *AppOAuthThirdPartyCreate {
	if s != nil {
		aotpc.SetClientSecret(*s)
	}
	return aotpc
}

// SetCallbackURL sets the "callback_url" field.
func (aotpc *AppOAuthThirdPartyCreate) SetCallbackURL(s string) *AppOAuthThirdPartyCreate {
	aotpc.mutation.SetCallbackURL(s)
	return aotpc
}

// SetNillableCallbackURL sets the "callback_url" field if the given value is not nil.
func (aotpc *AppOAuthThirdPartyCreate) SetNillableCallbackURL(s *string) *AppOAuthThirdPartyCreate {
	if s != nil {
		aotpc.SetCallbackURL(*s)
	}
	return aotpc
}

// SetSalt sets the "salt" field.
func (aotpc *AppOAuthThirdPartyCreate) SetSalt(s string) *AppOAuthThirdPartyCreate {
	aotpc.mutation.SetSalt(s)
	return aotpc
}

// SetNillableSalt sets the "salt" field if the given value is not nil.
func (aotpc *AppOAuthThirdPartyCreate) SetNillableSalt(s *string) *AppOAuthThirdPartyCreate {
	if s != nil {
		aotpc.SetSalt(*s)
	}
	return aotpc
}

// SetID sets the "id" field.
func (aotpc *AppOAuthThirdPartyCreate) SetID(u uint32) *AppOAuthThirdPartyCreate {
	aotpc.mutation.SetID(u)
	return aotpc
}

// Mutation returns the AppOAuthThirdPartyMutation object of the builder.
func (aotpc *AppOAuthThirdPartyCreate) Mutation() *AppOAuthThirdPartyMutation {
	return aotpc.mutation
}

// Save creates the AppOAuthThirdParty in the database.
func (aotpc *AppOAuthThirdPartyCreate) Save(ctx context.Context) (*AppOAuthThirdParty, error) {
	aotpc.defaults()
	return withHooks(ctx, aotpc.sqlSave, aotpc.mutation, aotpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aotpc *AppOAuthThirdPartyCreate) SaveX(ctx context.Context) *AppOAuthThirdParty {
	v, err := aotpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aotpc *AppOAuthThirdPartyCreate) Exec(ctx context.Context) error {
	_, err := aotpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aotpc *AppOAuthThirdPartyCreate) ExecX(ctx context.Context) {
	if err := aotpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aotpc *AppOAuthThirdPartyCreate) defaults() {
	if _, ok := aotpc.mutation.CreatedAt(); !ok {
		v := appoauththirdparty.DefaultCreatedAt()
		aotpc.mutation.SetCreatedAt(v)
	}
	if _, ok := aotpc.mutation.UpdatedAt(); !ok {
		v := appoauththirdparty.DefaultUpdatedAt()
		aotpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := aotpc.mutation.DeletedAt(); !ok {
		v := appoauththirdparty.DefaultDeletedAt()
		aotpc.mutation.SetDeletedAt(v)
	}
	if _, ok := aotpc.mutation.EntID(); !ok {
		v := appoauththirdparty.DefaultEntID()
		aotpc.mutation.SetEntID(v)
	}
	if _, ok := aotpc.mutation.AppID(); !ok {
		v := appoauththirdparty.DefaultAppID()
		aotpc.mutation.SetAppID(v)
	}
	if _, ok := aotpc.mutation.ThirdPartyID(); !ok {
		v := appoauththirdparty.DefaultThirdPartyID()
		aotpc.mutation.SetThirdPartyID(v)
	}
	if _, ok := aotpc.mutation.ClientID(); !ok {
		v := appoauththirdparty.DefaultClientID
		aotpc.mutation.SetClientID(v)
	}
	if _, ok := aotpc.mutation.ClientSecret(); !ok {
		v := appoauththirdparty.DefaultClientSecret
		aotpc.mutation.SetClientSecret(v)
	}
	if _, ok := aotpc.mutation.CallbackURL(); !ok {
		v := appoauththirdparty.DefaultCallbackURL
		aotpc.mutation.SetCallbackURL(v)
	}
	if _, ok := aotpc.mutation.Salt(); !ok {
		v := appoauththirdparty.DefaultSalt
		aotpc.mutation.SetSalt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aotpc *AppOAuthThirdPartyCreate) check() error {
	if _, ok := aotpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "AppOAuthThirdParty.created_at"`)}
	}
	if _, ok := aotpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "AppOAuthThirdParty.updated_at"`)}
	}
	if _, ok := aotpc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "AppOAuthThirdParty.deleted_at"`)}
	}
	if _, ok := aotpc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "AppOAuthThirdParty.ent_id"`)}
	}
	return nil
}

func (aotpc *AppOAuthThirdPartyCreate) sqlSave(ctx context.Context) (*AppOAuthThirdParty, error) {
	if err := aotpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := aotpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, aotpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	aotpc.mutation.id = &_node.ID
	aotpc.mutation.done = true
	return _node, nil
}

func (aotpc *AppOAuthThirdPartyCreate) createSpec() (*AppOAuthThirdParty, *sqlgraph.CreateSpec) {
	var (
		_node = &AppOAuthThirdParty{config: aotpc.config}
		_spec = sqlgraph.NewCreateSpec(appoauththirdparty.Table, sqlgraph.NewFieldSpec(appoauththirdparty.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = aotpc.conflict
	if id, ok := aotpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := aotpc.mutation.CreatedAt(); ok {
		_spec.SetField(appoauththirdparty.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := aotpc.mutation.UpdatedAt(); ok {
		_spec.SetField(appoauththirdparty.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := aotpc.mutation.DeletedAt(); ok {
		_spec.SetField(appoauththirdparty.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := aotpc.mutation.EntID(); ok {
		_spec.SetField(appoauththirdparty.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := aotpc.mutation.AppID(); ok {
		_spec.SetField(appoauththirdparty.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := aotpc.mutation.ThirdPartyID(); ok {
		_spec.SetField(appoauththirdparty.FieldThirdPartyID, field.TypeUUID, value)
		_node.ThirdPartyID = value
	}
	if value, ok := aotpc.mutation.ClientID(); ok {
		_spec.SetField(appoauththirdparty.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := aotpc.mutation.ClientSecret(); ok {
		_spec.SetField(appoauththirdparty.FieldClientSecret, field.TypeString, value)
		_node.ClientSecret = value
	}
	if value, ok := aotpc.mutation.CallbackURL(); ok {
		_spec.SetField(appoauththirdparty.FieldCallbackURL, field.TypeString, value)
		_node.CallbackURL = value
	}
	if value, ok := aotpc.mutation.Salt(); ok {
		_spec.SetField(appoauththirdparty.FieldSalt, field.TypeString, value)
		_node.Salt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppOAuthThirdParty.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppOAuthThirdPartyUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (aotpc *AppOAuthThirdPartyCreate) OnConflict(opts ...sql.ConflictOption) *AppOAuthThirdPartyUpsertOne {
	aotpc.conflict = opts
	return &AppOAuthThirdPartyUpsertOne{
		create: aotpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppOAuthThirdParty.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aotpc *AppOAuthThirdPartyCreate) OnConflictColumns(columns ...string) *AppOAuthThirdPartyUpsertOne {
	aotpc.conflict = append(aotpc.conflict, sql.ConflictColumns(columns...))
	return &AppOAuthThirdPartyUpsertOne{
		create: aotpc,
	}
}

type (
	// AppOAuthThirdPartyUpsertOne is the builder for "upsert"-ing
	//  one AppOAuthThirdParty node.
	AppOAuthThirdPartyUpsertOne struct {
		create *AppOAuthThirdPartyCreate
	}

	// AppOAuthThirdPartyUpsert is the "OnConflict" setter.
	AppOAuthThirdPartyUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *AppOAuthThirdPartyUpsert) SetCreatedAt(v uint32) *AppOAuthThirdPartyUpsert {
	u.Set(appoauththirdparty.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsert) UpdateCreatedAt() *AppOAuthThirdPartyUpsert {
	u.SetExcluded(appoauththirdparty.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppOAuthThirdPartyUpsert) AddCreatedAt(v uint32) *AppOAuthThirdPartyUpsert {
	u.Add(appoauththirdparty.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppOAuthThirdPartyUpsert) SetUpdatedAt(v uint32) *AppOAuthThirdPartyUpsert {
	u.Set(appoauththirdparty.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsert) UpdateUpdatedAt() *AppOAuthThirdPartyUpsert {
	u.SetExcluded(appoauththirdparty.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppOAuthThirdPartyUpsert) AddUpdatedAt(v uint32) *AppOAuthThirdPartyUpsert {
	u.Add(appoauththirdparty.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppOAuthThirdPartyUpsert) SetDeletedAt(v uint32) *AppOAuthThirdPartyUpsert {
	u.Set(appoauththirdparty.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsert) UpdateDeletedAt() *AppOAuthThirdPartyUpsert {
	u.SetExcluded(appoauththirdparty.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppOAuthThirdPartyUpsert) AddDeletedAt(v uint32) *AppOAuthThirdPartyUpsert {
	u.Add(appoauththirdparty.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppOAuthThirdPartyUpsert) SetEntID(v uuid.UUID) *AppOAuthThirdPartyUpsert {
	u.Set(appoauththirdparty.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsert) UpdateEntID() *AppOAuthThirdPartyUpsert {
	u.SetExcluded(appoauththirdparty.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppOAuthThirdPartyUpsert) SetAppID(v uuid.UUID) *AppOAuthThirdPartyUpsert {
	u.Set(appoauththirdparty.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsert) UpdateAppID() *AppOAuthThirdPartyUpsert {
	u.SetExcluded(appoauththirdparty.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppOAuthThirdPartyUpsert) ClearAppID() *AppOAuthThirdPartyUpsert {
	u.SetNull(appoauththirdparty.FieldAppID)
	return u
}

// SetThirdPartyID sets the "third_party_id" field.
func (u *AppOAuthThirdPartyUpsert) SetThirdPartyID(v uuid.UUID) *AppOAuthThirdPartyUpsert {
	u.Set(appoauththirdparty.FieldThirdPartyID, v)
	return u
}

// UpdateThirdPartyID sets the "third_party_id" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsert) UpdateThirdPartyID() *AppOAuthThirdPartyUpsert {
	u.SetExcluded(appoauththirdparty.FieldThirdPartyID)
	return u
}

// ClearThirdPartyID clears the value of the "third_party_id" field.
func (u *AppOAuthThirdPartyUpsert) ClearThirdPartyID() *AppOAuthThirdPartyUpsert {
	u.SetNull(appoauththirdparty.FieldThirdPartyID)
	return u
}

// SetClientID sets the "client_id" field.
func (u *AppOAuthThirdPartyUpsert) SetClientID(v string) *AppOAuthThirdPartyUpsert {
	u.Set(appoauththirdparty.FieldClientID, v)
	return u
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsert) UpdateClientID() *AppOAuthThirdPartyUpsert {
	u.SetExcluded(appoauththirdparty.FieldClientID)
	return u
}

// ClearClientID clears the value of the "client_id" field.
func (u *AppOAuthThirdPartyUpsert) ClearClientID() *AppOAuthThirdPartyUpsert {
	u.SetNull(appoauththirdparty.FieldClientID)
	return u
}

// SetClientSecret sets the "client_secret" field.
func (u *AppOAuthThirdPartyUpsert) SetClientSecret(v string) *AppOAuthThirdPartyUpsert {
	u.Set(appoauththirdparty.FieldClientSecret, v)
	return u
}

// UpdateClientSecret sets the "client_secret" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsert) UpdateClientSecret() *AppOAuthThirdPartyUpsert {
	u.SetExcluded(appoauththirdparty.FieldClientSecret)
	return u
}

// ClearClientSecret clears the value of the "client_secret" field.
func (u *AppOAuthThirdPartyUpsert) ClearClientSecret() *AppOAuthThirdPartyUpsert {
	u.SetNull(appoauththirdparty.FieldClientSecret)
	return u
}

// SetCallbackURL sets the "callback_url" field.
func (u *AppOAuthThirdPartyUpsert) SetCallbackURL(v string) *AppOAuthThirdPartyUpsert {
	u.Set(appoauththirdparty.FieldCallbackURL, v)
	return u
}

// UpdateCallbackURL sets the "callback_url" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsert) UpdateCallbackURL() *AppOAuthThirdPartyUpsert {
	u.SetExcluded(appoauththirdparty.FieldCallbackURL)
	return u
}

// ClearCallbackURL clears the value of the "callback_url" field.
func (u *AppOAuthThirdPartyUpsert) ClearCallbackURL() *AppOAuthThirdPartyUpsert {
	u.SetNull(appoauththirdparty.FieldCallbackURL)
	return u
}

// SetSalt sets the "salt" field.
func (u *AppOAuthThirdPartyUpsert) SetSalt(v string) *AppOAuthThirdPartyUpsert {
	u.Set(appoauththirdparty.FieldSalt, v)
	return u
}

// UpdateSalt sets the "salt" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsert) UpdateSalt() *AppOAuthThirdPartyUpsert {
	u.SetExcluded(appoauththirdparty.FieldSalt)
	return u
}

// ClearSalt clears the value of the "salt" field.
func (u *AppOAuthThirdPartyUpsert) ClearSalt() *AppOAuthThirdPartyUpsert {
	u.SetNull(appoauththirdparty.FieldSalt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppOAuthThirdParty.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appoauththirdparty.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppOAuthThirdPartyUpsertOne) UpdateNewValues() *AppOAuthThirdPartyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appoauththirdparty.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppOAuthThirdParty.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppOAuthThirdPartyUpsertOne) Ignore() *AppOAuthThirdPartyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppOAuthThirdPartyUpsertOne) DoNothing() *AppOAuthThirdPartyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppOAuthThirdPartyCreate.OnConflict
// documentation for more info.
func (u *AppOAuthThirdPartyUpsertOne) Update(set func(*AppOAuthThirdPartyUpsert)) *AppOAuthThirdPartyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppOAuthThirdPartyUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppOAuthThirdPartyUpsertOne) SetCreatedAt(v uint32) *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppOAuthThirdPartyUpsertOne) AddCreatedAt(v uint32) *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsertOne) UpdateCreatedAt() *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppOAuthThirdPartyUpsertOne) SetUpdatedAt(v uint32) *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppOAuthThirdPartyUpsertOne) AddUpdatedAt(v uint32) *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsertOne) UpdateUpdatedAt() *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppOAuthThirdPartyUpsertOne) SetDeletedAt(v uint32) *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppOAuthThirdPartyUpsertOne) AddDeletedAt(v uint32) *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsertOne) UpdateDeletedAt() *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *AppOAuthThirdPartyUpsertOne) SetEntID(v uuid.UUID) *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsertOne) UpdateEntID() *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppOAuthThirdPartyUpsertOne) SetAppID(v uuid.UUID) *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsertOne) UpdateAppID() *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppOAuthThirdPartyUpsertOne) ClearAppID() *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.ClearAppID()
	})
}

// SetThirdPartyID sets the "third_party_id" field.
func (u *AppOAuthThirdPartyUpsertOne) SetThirdPartyID(v uuid.UUID) *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.SetThirdPartyID(v)
	})
}

// UpdateThirdPartyID sets the "third_party_id" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsertOne) UpdateThirdPartyID() *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.UpdateThirdPartyID()
	})
}

// ClearThirdPartyID clears the value of the "third_party_id" field.
func (u *AppOAuthThirdPartyUpsertOne) ClearThirdPartyID() *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.ClearThirdPartyID()
	})
}

// SetClientID sets the "client_id" field.
func (u *AppOAuthThirdPartyUpsertOne) SetClientID(v string) *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.SetClientID(v)
	})
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsertOne) UpdateClientID() *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.UpdateClientID()
	})
}

// ClearClientID clears the value of the "client_id" field.
func (u *AppOAuthThirdPartyUpsertOne) ClearClientID() *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.ClearClientID()
	})
}

// SetClientSecret sets the "client_secret" field.
func (u *AppOAuthThirdPartyUpsertOne) SetClientSecret(v string) *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.SetClientSecret(v)
	})
}

// UpdateClientSecret sets the "client_secret" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsertOne) UpdateClientSecret() *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.UpdateClientSecret()
	})
}

// ClearClientSecret clears the value of the "client_secret" field.
func (u *AppOAuthThirdPartyUpsertOne) ClearClientSecret() *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.ClearClientSecret()
	})
}

// SetCallbackURL sets the "callback_url" field.
func (u *AppOAuthThirdPartyUpsertOne) SetCallbackURL(v string) *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.SetCallbackURL(v)
	})
}

// UpdateCallbackURL sets the "callback_url" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsertOne) UpdateCallbackURL() *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.UpdateCallbackURL()
	})
}

// ClearCallbackURL clears the value of the "callback_url" field.
func (u *AppOAuthThirdPartyUpsertOne) ClearCallbackURL() *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.ClearCallbackURL()
	})
}

// SetSalt sets the "salt" field.
func (u *AppOAuthThirdPartyUpsertOne) SetSalt(v string) *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.SetSalt(v)
	})
}

// UpdateSalt sets the "salt" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsertOne) UpdateSalt() *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.UpdateSalt()
	})
}

// ClearSalt clears the value of the "salt" field.
func (u *AppOAuthThirdPartyUpsertOne) ClearSalt() *AppOAuthThirdPartyUpsertOne {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.ClearSalt()
	})
}

// Exec executes the query.
func (u *AppOAuthThirdPartyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppOAuthThirdPartyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppOAuthThirdPartyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppOAuthThirdPartyUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppOAuthThirdPartyUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppOAuthThirdPartyCreateBulk is the builder for creating many AppOAuthThirdParty entities in bulk.
type AppOAuthThirdPartyCreateBulk struct {
	config
	err      error
	builders []*AppOAuthThirdPartyCreate
	conflict []sql.ConflictOption
}

// Save creates the AppOAuthThirdParty entities in the database.
func (aotpcb *AppOAuthThirdPartyCreateBulk) Save(ctx context.Context) ([]*AppOAuthThirdParty, error) {
	if aotpcb.err != nil {
		return nil, aotpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aotpcb.builders))
	nodes := make([]*AppOAuthThirdParty, len(aotpcb.builders))
	mutators := make([]Mutator, len(aotpcb.builders))
	for i := range aotpcb.builders {
		func(i int, root context.Context) {
			builder := aotpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppOAuthThirdPartyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aotpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aotpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aotpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aotpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aotpcb *AppOAuthThirdPartyCreateBulk) SaveX(ctx context.Context) []*AppOAuthThirdParty {
	v, err := aotpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aotpcb *AppOAuthThirdPartyCreateBulk) Exec(ctx context.Context) error {
	_, err := aotpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aotpcb *AppOAuthThirdPartyCreateBulk) ExecX(ctx context.Context) {
	if err := aotpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppOAuthThirdParty.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppOAuthThirdPartyUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (aotpcb *AppOAuthThirdPartyCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppOAuthThirdPartyUpsertBulk {
	aotpcb.conflict = opts
	return &AppOAuthThirdPartyUpsertBulk{
		create: aotpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppOAuthThirdParty.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aotpcb *AppOAuthThirdPartyCreateBulk) OnConflictColumns(columns ...string) *AppOAuthThirdPartyUpsertBulk {
	aotpcb.conflict = append(aotpcb.conflict, sql.ConflictColumns(columns...))
	return &AppOAuthThirdPartyUpsertBulk{
		create: aotpcb,
	}
}

// AppOAuthThirdPartyUpsertBulk is the builder for "upsert"-ing
// a bulk of AppOAuthThirdParty nodes.
type AppOAuthThirdPartyUpsertBulk struct {
	create *AppOAuthThirdPartyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppOAuthThirdParty.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appoauththirdparty.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppOAuthThirdPartyUpsertBulk) UpdateNewValues() *AppOAuthThirdPartyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appoauththirdparty.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppOAuthThirdParty.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppOAuthThirdPartyUpsertBulk) Ignore() *AppOAuthThirdPartyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppOAuthThirdPartyUpsertBulk) DoNothing() *AppOAuthThirdPartyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppOAuthThirdPartyCreateBulk.OnConflict
// documentation for more info.
func (u *AppOAuthThirdPartyUpsertBulk) Update(set func(*AppOAuthThirdPartyUpsert)) *AppOAuthThirdPartyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppOAuthThirdPartyUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppOAuthThirdPartyUpsertBulk) SetCreatedAt(v uint32) *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppOAuthThirdPartyUpsertBulk) AddCreatedAt(v uint32) *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsertBulk) UpdateCreatedAt() *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppOAuthThirdPartyUpsertBulk) SetUpdatedAt(v uint32) *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppOAuthThirdPartyUpsertBulk) AddUpdatedAt(v uint32) *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsertBulk) UpdateUpdatedAt() *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppOAuthThirdPartyUpsertBulk) SetDeletedAt(v uint32) *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppOAuthThirdPartyUpsertBulk) AddDeletedAt(v uint32) *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsertBulk) UpdateDeletedAt() *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *AppOAuthThirdPartyUpsertBulk) SetEntID(v uuid.UUID) *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsertBulk) UpdateEntID() *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppOAuthThirdPartyUpsertBulk) SetAppID(v uuid.UUID) *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsertBulk) UpdateAppID() *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppOAuthThirdPartyUpsertBulk) ClearAppID() *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.ClearAppID()
	})
}

// SetThirdPartyID sets the "third_party_id" field.
func (u *AppOAuthThirdPartyUpsertBulk) SetThirdPartyID(v uuid.UUID) *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.SetThirdPartyID(v)
	})
}

// UpdateThirdPartyID sets the "third_party_id" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsertBulk) UpdateThirdPartyID() *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.UpdateThirdPartyID()
	})
}

// ClearThirdPartyID clears the value of the "third_party_id" field.
func (u *AppOAuthThirdPartyUpsertBulk) ClearThirdPartyID() *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.ClearThirdPartyID()
	})
}

// SetClientID sets the "client_id" field.
func (u *AppOAuthThirdPartyUpsertBulk) SetClientID(v string) *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.SetClientID(v)
	})
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsertBulk) UpdateClientID() *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.UpdateClientID()
	})
}

// ClearClientID clears the value of the "client_id" field.
func (u *AppOAuthThirdPartyUpsertBulk) ClearClientID() *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.ClearClientID()
	})
}

// SetClientSecret sets the "client_secret" field.
func (u *AppOAuthThirdPartyUpsertBulk) SetClientSecret(v string) *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.SetClientSecret(v)
	})
}

// UpdateClientSecret sets the "client_secret" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsertBulk) UpdateClientSecret() *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.UpdateClientSecret()
	})
}

// ClearClientSecret clears the value of the "client_secret" field.
func (u *AppOAuthThirdPartyUpsertBulk) ClearClientSecret() *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.ClearClientSecret()
	})
}

// SetCallbackURL sets the "callback_url" field.
func (u *AppOAuthThirdPartyUpsertBulk) SetCallbackURL(v string) *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.SetCallbackURL(v)
	})
}

// UpdateCallbackURL sets the "callback_url" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsertBulk) UpdateCallbackURL() *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.UpdateCallbackURL()
	})
}

// ClearCallbackURL clears the value of the "callback_url" field.
func (u *AppOAuthThirdPartyUpsertBulk) ClearCallbackURL() *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.ClearCallbackURL()
	})
}

// SetSalt sets the "salt" field.
func (u *AppOAuthThirdPartyUpsertBulk) SetSalt(v string) *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.SetSalt(v)
	})
}

// UpdateSalt sets the "salt" field to the value that was provided on create.
func (u *AppOAuthThirdPartyUpsertBulk) UpdateSalt() *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.UpdateSalt()
	})
}

// ClearSalt clears the value of the "salt" field.
func (u *AppOAuthThirdPartyUpsertBulk) ClearSalt() *AppOAuthThirdPartyUpsertBulk {
	return u.Update(func(s *AppOAuthThirdPartyUpsert) {
		s.ClearSalt()
	})
}

// Exec executes the query.
func (u *AppOAuthThirdPartyUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the AppOAuthThirdPartyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for AppOAuthThirdPartyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppOAuthThirdPartyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

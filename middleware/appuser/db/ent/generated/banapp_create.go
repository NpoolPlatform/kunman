// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/banapp"
	"github.com/google/uuid"
)

// BanAppCreate is the builder for creating a BanApp entity.
type BanAppCreate struct {
	config
	mutation *BanAppMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (bac *BanAppCreate) SetCreatedAt(u uint32) *BanAppCreate {
	bac.mutation.SetCreatedAt(u)
	return bac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bac *BanAppCreate) SetNillableCreatedAt(u *uint32) *BanAppCreate {
	if u != nil {
		bac.SetCreatedAt(*u)
	}
	return bac
}

// SetUpdatedAt sets the "updated_at" field.
func (bac *BanAppCreate) SetUpdatedAt(u uint32) *BanAppCreate {
	bac.mutation.SetUpdatedAt(u)
	return bac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bac *BanAppCreate) SetNillableUpdatedAt(u *uint32) *BanAppCreate {
	if u != nil {
		bac.SetUpdatedAt(*u)
	}
	return bac
}

// SetDeletedAt sets the "deleted_at" field.
func (bac *BanAppCreate) SetDeletedAt(u uint32) *BanAppCreate {
	bac.mutation.SetDeletedAt(u)
	return bac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bac *BanAppCreate) SetNillableDeletedAt(u *uint32) *BanAppCreate {
	if u != nil {
		bac.SetDeletedAt(*u)
	}
	return bac
}

// SetEntID sets the "ent_id" field.
func (bac *BanAppCreate) SetEntID(u uuid.UUID) *BanAppCreate {
	bac.mutation.SetEntID(u)
	return bac
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (bac *BanAppCreate) SetNillableEntID(u *uuid.UUID) *BanAppCreate {
	if u != nil {
		bac.SetEntID(*u)
	}
	return bac
}

// SetAppID sets the "app_id" field.
func (bac *BanAppCreate) SetAppID(u uuid.UUID) *BanAppCreate {
	bac.mutation.SetAppID(u)
	return bac
}

// SetMessage sets the "message" field.
func (bac *BanAppCreate) SetMessage(s string) *BanAppCreate {
	bac.mutation.SetMessage(s)
	return bac
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (bac *BanAppCreate) SetNillableMessage(s *string) *BanAppCreate {
	if s != nil {
		bac.SetMessage(*s)
	}
	return bac
}

// SetID sets the "id" field.
func (bac *BanAppCreate) SetID(u uint32) *BanAppCreate {
	bac.mutation.SetID(u)
	return bac
}

// Mutation returns the BanAppMutation object of the builder.
func (bac *BanAppCreate) Mutation() *BanAppMutation {
	return bac.mutation
}

// Save creates the BanApp in the database.
func (bac *BanAppCreate) Save(ctx context.Context) (*BanApp, error) {
	bac.defaults()
	return withHooks(ctx, bac.sqlSave, bac.mutation, bac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bac *BanAppCreate) SaveX(ctx context.Context) *BanApp {
	v, err := bac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bac *BanAppCreate) Exec(ctx context.Context) error {
	_, err := bac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bac *BanAppCreate) ExecX(ctx context.Context) {
	if err := bac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bac *BanAppCreate) defaults() {
	if _, ok := bac.mutation.CreatedAt(); !ok {
		v := banapp.DefaultCreatedAt()
		bac.mutation.SetCreatedAt(v)
	}
	if _, ok := bac.mutation.UpdatedAt(); !ok {
		v := banapp.DefaultUpdatedAt()
		bac.mutation.SetUpdatedAt(v)
	}
	if _, ok := bac.mutation.DeletedAt(); !ok {
		v := banapp.DefaultDeletedAt()
		bac.mutation.SetDeletedAt(v)
	}
	if _, ok := bac.mutation.EntID(); !ok {
		v := banapp.DefaultEntID()
		bac.mutation.SetEntID(v)
	}
	if _, ok := bac.mutation.Message(); !ok {
		v := banapp.DefaultMessage
		bac.mutation.SetMessage(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bac *BanAppCreate) check() error {
	if _, ok := bac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "BanApp.created_at"`)}
	}
	if _, ok := bac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "BanApp.updated_at"`)}
	}
	if _, ok := bac.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "BanApp.deleted_at"`)}
	}
	if _, ok := bac.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "BanApp.ent_id"`)}
	}
	if _, ok := bac.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`generated: missing required field "BanApp.app_id"`)}
	}
	if _, ok := bac.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`generated: missing required field "BanApp.message"`)}
	}
	return nil
}

func (bac *BanAppCreate) sqlSave(ctx context.Context) (*BanApp, error) {
	if err := bac.check(); err != nil {
		return nil, err
	}
	_node, _spec := bac.createSpec()
	if err := sqlgraph.CreateNode(ctx, bac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	bac.mutation.id = &_node.ID
	bac.mutation.done = true
	return _node, nil
}

func (bac *BanAppCreate) createSpec() (*BanApp, *sqlgraph.CreateSpec) {
	var (
		_node = &BanApp{config: bac.config}
		_spec = sqlgraph.NewCreateSpec(banapp.Table, sqlgraph.NewFieldSpec(banapp.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = bac.conflict
	if id, ok := bac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bac.mutation.CreatedAt(); ok {
		_spec.SetField(banapp.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := bac.mutation.UpdatedAt(); ok {
		_spec.SetField(banapp.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := bac.mutation.DeletedAt(); ok {
		_spec.SetField(banapp.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := bac.mutation.EntID(); ok {
		_spec.SetField(banapp.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := bac.mutation.AppID(); ok {
		_spec.SetField(banapp.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := bac.mutation.Message(); ok {
		_spec.SetField(banapp.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BanApp.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BanAppUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bac *BanAppCreate) OnConflict(opts ...sql.ConflictOption) *BanAppUpsertOne {
	bac.conflict = opts
	return &BanAppUpsertOne{
		create: bac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BanApp.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bac *BanAppCreate) OnConflictColumns(columns ...string) *BanAppUpsertOne {
	bac.conflict = append(bac.conflict, sql.ConflictColumns(columns...))
	return &BanAppUpsertOne{
		create: bac,
	}
}

type (
	// BanAppUpsertOne is the builder for "upsert"-ing
	//  one BanApp node.
	BanAppUpsertOne struct {
		create *BanAppCreate
	}

	// BanAppUpsert is the "OnConflict" setter.
	BanAppUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *BanAppUpsert) SetCreatedAt(v uint32) *BanAppUpsert {
	u.Set(banapp.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *BanAppUpsert) UpdateCreatedAt() *BanAppUpsert {
	u.SetExcluded(banapp.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *BanAppUpsert) AddCreatedAt(v uint32) *BanAppUpsert {
	u.Add(banapp.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BanAppUpsert) SetUpdatedAt(v uint32) *BanAppUpsert {
	u.Set(banapp.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BanAppUpsert) UpdateUpdatedAt() *BanAppUpsert {
	u.SetExcluded(banapp.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *BanAppUpsert) AddUpdatedAt(v uint32) *BanAppUpsert {
	u.Add(banapp.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BanAppUpsert) SetDeletedAt(v uint32) *BanAppUpsert {
	u.Set(banapp.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BanAppUpsert) UpdateDeletedAt() *BanAppUpsert {
	u.SetExcluded(banapp.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *BanAppUpsert) AddDeletedAt(v uint32) *BanAppUpsert {
	u.Add(banapp.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *BanAppUpsert) SetEntID(v uuid.UUID) *BanAppUpsert {
	u.Set(banapp.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *BanAppUpsert) UpdateEntID() *BanAppUpsert {
	u.SetExcluded(banapp.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *BanAppUpsert) SetAppID(v uuid.UUID) *BanAppUpsert {
	u.Set(banapp.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *BanAppUpsert) UpdateAppID() *BanAppUpsert {
	u.SetExcluded(banapp.FieldAppID)
	return u
}

// SetMessage sets the "message" field.
func (u *BanAppUpsert) SetMessage(v string) *BanAppUpsert {
	u.Set(banapp.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *BanAppUpsert) UpdateMessage() *BanAppUpsert {
	u.SetExcluded(banapp.FieldMessage)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BanApp.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(banapp.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BanAppUpsertOne) UpdateNewValues() *BanAppUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(banapp.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BanApp.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BanAppUpsertOne) Ignore() *BanAppUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BanAppUpsertOne) DoNothing() *BanAppUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BanAppCreate.OnConflict
// documentation for more info.
func (u *BanAppUpsertOne) Update(set func(*BanAppUpsert)) *BanAppUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BanAppUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *BanAppUpsertOne) SetCreatedAt(v uint32) *BanAppUpsertOne {
	return u.Update(func(s *BanAppUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *BanAppUpsertOne) AddCreatedAt(v uint32) *BanAppUpsertOne {
	return u.Update(func(s *BanAppUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *BanAppUpsertOne) UpdateCreatedAt() *BanAppUpsertOne {
	return u.Update(func(s *BanAppUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BanAppUpsertOne) SetUpdatedAt(v uint32) *BanAppUpsertOne {
	return u.Update(func(s *BanAppUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *BanAppUpsertOne) AddUpdatedAt(v uint32) *BanAppUpsertOne {
	return u.Update(func(s *BanAppUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BanAppUpsertOne) UpdateUpdatedAt() *BanAppUpsertOne {
	return u.Update(func(s *BanAppUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BanAppUpsertOne) SetDeletedAt(v uint32) *BanAppUpsertOne {
	return u.Update(func(s *BanAppUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *BanAppUpsertOne) AddDeletedAt(v uint32) *BanAppUpsertOne {
	return u.Update(func(s *BanAppUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BanAppUpsertOne) UpdateDeletedAt() *BanAppUpsertOne {
	return u.Update(func(s *BanAppUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *BanAppUpsertOne) SetEntID(v uuid.UUID) *BanAppUpsertOne {
	return u.Update(func(s *BanAppUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *BanAppUpsertOne) UpdateEntID() *BanAppUpsertOne {
	return u.Update(func(s *BanAppUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *BanAppUpsertOne) SetAppID(v uuid.UUID) *BanAppUpsertOne {
	return u.Update(func(s *BanAppUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *BanAppUpsertOne) UpdateAppID() *BanAppUpsertOne {
	return u.Update(func(s *BanAppUpsert) {
		s.UpdateAppID()
	})
}

// SetMessage sets the "message" field.
func (u *BanAppUpsertOne) SetMessage(v string) *BanAppUpsertOne {
	return u.Update(func(s *BanAppUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *BanAppUpsertOne) UpdateMessage() *BanAppUpsertOne {
	return u.Update(func(s *BanAppUpsert) {
		s.UpdateMessage()
	})
}

// Exec executes the query.
func (u *BanAppUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for BanAppCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BanAppUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BanAppUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BanAppUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BanAppCreateBulk is the builder for creating many BanApp entities in bulk.
type BanAppCreateBulk struct {
	config
	err      error
	builders []*BanAppCreate
	conflict []sql.ConflictOption
}

// Save creates the BanApp entities in the database.
func (bacb *BanAppCreateBulk) Save(ctx context.Context) ([]*BanApp, error) {
	if bacb.err != nil {
		return nil, bacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bacb.builders))
	nodes := make([]*BanApp, len(bacb.builders))
	mutators := make([]Mutator, len(bacb.builders))
	for i := range bacb.builders {
		func(i int, root context.Context) {
			builder := bacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BanAppMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bacb *BanAppCreateBulk) SaveX(ctx context.Context) []*BanApp {
	v, err := bacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bacb *BanAppCreateBulk) Exec(ctx context.Context) error {
	_, err := bacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bacb *BanAppCreateBulk) ExecX(ctx context.Context) {
	if err := bacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BanApp.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BanAppUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bacb *BanAppCreateBulk) OnConflict(opts ...sql.ConflictOption) *BanAppUpsertBulk {
	bacb.conflict = opts
	return &BanAppUpsertBulk{
		create: bacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BanApp.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bacb *BanAppCreateBulk) OnConflictColumns(columns ...string) *BanAppUpsertBulk {
	bacb.conflict = append(bacb.conflict, sql.ConflictColumns(columns...))
	return &BanAppUpsertBulk{
		create: bacb,
	}
}

// BanAppUpsertBulk is the builder for "upsert"-ing
// a bulk of BanApp nodes.
type BanAppUpsertBulk struct {
	create *BanAppCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BanApp.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(banapp.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BanAppUpsertBulk) UpdateNewValues() *BanAppUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(banapp.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BanApp.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BanAppUpsertBulk) Ignore() *BanAppUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BanAppUpsertBulk) DoNothing() *BanAppUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BanAppCreateBulk.OnConflict
// documentation for more info.
func (u *BanAppUpsertBulk) Update(set func(*BanAppUpsert)) *BanAppUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BanAppUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *BanAppUpsertBulk) SetCreatedAt(v uint32) *BanAppUpsertBulk {
	return u.Update(func(s *BanAppUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *BanAppUpsertBulk) AddCreatedAt(v uint32) *BanAppUpsertBulk {
	return u.Update(func(s *BanAppUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *BanAppUpsertBulk) UpdateCreatedAt() *BanAppUpsertBulk {
	return u.Update(func(s *BanAppUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BanAppUpsertBulk) SetUpdatedAt(v uint32) *BanAppUpsertBulk {
	return u.Update(func(s *BanAppUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *BanAppUpsertBulk) AddUpdatedAt(v uint32) *BanAppUpsertBulk {
	return u.Update(func(s *BanAppUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BanAppUpsertBulk) UpdateUpdatedAt() *BanAppUpsertBulk {
	return u.Update(func(s *BanAppUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BanAppUpsertBulk) SetDeletedAt(v uint32) *BanAppUpsertBulk {
	return u.Update(func(s *BanAppUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *BanAppUpsertBulk) AddDeletedAt(v uint32) *BanAppUpsertBulk {
	return u.Update(func(s *BanAppUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BanAppUpsertBulk) UpdateDeletedAt() *BanAppUpsertBulk {
	return u.Update(func(s *BanAppUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *BanAppUpsertBulk) SetEntID(v uuid.UUID) *BanAppUpsertBulk {
	return u.Update(func(s *BanAppUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *BanAppUpsertBulk) UpdateEntID() *BanAppUpsertBulk {
	return u.Update(func(s *BanAppUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *BanAppUpsertBulk) SetAppID(v uuid.UUID) *BanAppUpsertBulk {
	return u.Update(func(s *BanAppUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *BanAppUpsertBulk) UpdateAppID() *BanAppUpsertBulk {
	return u.Update(func(s *BanAppUpsert) {
		s.UpdateAppID()
	})
}

// SetMessage sets the "message" field.
func (u *BanAppUpsertBulk) SetMessage(v string) *BanAppUpsertBulk {
	return u.Update(func(s *BanAppUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *BanAppUpsertBulk) UpdateMessage() *BanAppUpsertBulk {
	return u.Update(func(s *BanAppUpsert) {
		s.UpdateMessage()
	})
}

// Exec executes the query.
func (u *BanAppUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the BanAppCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for BanAppCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BanAppUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/appsubscribe"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// AppSubscribeUpdate is the builder for updating AppSubscribe entities.
type AppSubscribeUpdate struct {
	config
	hooks     []Hook
	mutation  *AppSubscribeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppSubscribeUpdate builder.
func (asu *AppSubscribeUpdate) Where(ps ...predicate.AppSubscribe) *AppSubscribeUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetCreatedAt sets the "created_at" field.
func (asu *AppSubscribeUpdate) SetCreatedAt(u uint32) *AppSubscribeUpdate {
	asu.mutation.ResetCreatedAt()
	asu.mutation.SetCreatedAt(u)
	return asu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asu *AppSubscribeUpdate) SetNillableCreatedAt(u *uint32) *AppSubscribeUpdate {
	if u != nil {
		asu.SetCreatedAt(*u)
	}
	return asu
}

// AddCreatedAt adds u to the "created_at" field.
func (asu *AppSubscribeUpdate) AddCreatedAt(u int32) *AppSubscribeUpdate {
	asu.mutation.AddCreatedAt(u)
	return asu
}

// SetUpdatedAt sets the "updated_at" field.
func (asu *AppSubscribeUpdate) SetUpdatedAt(u uint32) *AppSubscribeUpdate {
	asu.mutation.ResetUpdatedAt()
	asu.mutation.SetUpdatedAt(u)
	return asu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (asu *AppSubscribeUpdate) AddUpdatedAt(u int32) *AppSubscribeUpdate {
	asu.mutation.AddUpdatedAt(u)
	return asu
}

// SetDeletedAt sets the "deleted_at" field.
func (asu *AppSubscribeUpdate) SetDeletedAt(u uint32) *AppSubscribeUpdate {
	asu.mutation.ResetDeletedAt()
	asu.mutation.SetDeletedAt(u)
	return asu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (asu *AppSubscribeUpdate) SetNillableDeletedAt(u *uint32) *AppSubscribeUpdate {
	if u != nil {
		asu.SetDeletedAt(*u)
	}
	return asu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (asu *AppSubscribeUpdate) AddDeletedAt(u int32) *AppSubscribeUpdate {
	asu.mutation.AddDeletedAt(u)
	return asu
}

// SetEntID sets the "ent_id" field.
func (asu *AppSubscribeUpdate) SetEntID(u uuid.UUID) *AppSubscribeUpdate {
	asu.mutation.SetEntID(u)
	return asu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (asu *AppSubscribeUpdate) SetNillableEntID(u *uuid.UUID) *AppSubscribeUpdate {
	if u != nil {
		asu.SetEntID(*u)
	}
	return asu
}

// SetAppID sets the "app_id" field.
func (asu *AppSubscribeUpdate) SetAppID(u uuid.UUID) *AppSubscribeUpdate {
	asu.mutation.SetAppID(u)
	return asu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (asu *AppSubscribeUpdate) SetNillableAppID(u *uuid.UUID) *AppSubscribeUpdate {
	if u != nil {
		asu.SetAppID(*u)
	}
	return asu
}

// ClearAppID clears the value of the "app_id" field.
func (asu *AppSubscribeUpdate) ClearAppID() *AppSubscribeUpdate {
	asu.mutation.ClearAppID()
	return asu
}

// SetSubscribeAppID sets the "subscribe_app_id" field.
func (asu *AppSubscribeUpdate) SetSubscribeAppID(u uuid.UUID) *AppSubscribeUpdate {
	asu.mutation.SetSubscribeAppID(u)
	return asu
}

// SetNillableSubscribeAppID sets the "subscribe_app_id" field if the given value is not nil.
func (asu *AppSubscribeUpdate) SetNillableSubscribeAppID(u *uuid.UUID) *AppSubscribeUpdate {
	if u != nil {
		asu.SetSubscribeAppID(*u)
	}
	return asu
}

// ClearSubscribeAppID clears the value of the "subscribe_app_id" field.
func (asu *AppSubscribeUpdate) ClearSubscribeAppID() *AppSubscribeUpdate {
	asu.mutation.ClearSubscribeAppID()
	return asu
}

// Mutation returns the AppSubscribeMutation object of the builder.
func (asu *AppSubscribeUpdate) Mutation() *AppSubscribeMutation {
	return asu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *AppSubscribeUpdate) Save(ctx context.Context) (int, error) {
	asu.defaults()
	return withHooks(ctx, asu.sqlSave, asu.mutation, asu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AppSubscribeUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AppSubscribeUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AppSubscribeUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asu *AppSubscribeUpdate) defaults() {
	if _, ok := asu.mutation.UpdatedAt(); !ok {
		v := appsubscribe.UpdateDefaultUpdatedAt()
		asu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (asu *AppSubscribeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppSubscribeUpdate {
	asu.modifiers = append(asu.modifiers, modifiers...)
	return asu
}

func (asu *AppSubscribeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appsubscribe.Table, appsubscribe.Columns, sqlgraph.NewFieldSpec(appsubscribe.FieldID, field.TypeUint32))
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.CreatedAt(); ok {
		_spec.SetField(appsubscribe.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := asu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(appsubscribe.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := asu.mutation.UpdatedAt(); ok {
		_spec.SetField(appsubscribe.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := asu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(appsubscribe.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := asu.mutation.DeletedAt(); ok {
		_spec.SetField(appsubscribe.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := asu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(appsubscribe.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := asu.mutation.EntID(); ok {
		_spec.SetField(appsubscribe.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := asu.mutation.AppID(); ok {
		_spec.SetField(appsubscribe.FieldAppID, field.TypeUUID, value)
	}
	if asu.mutation.AppIDCleared() {
		_spec.ClearField(appsubscribe.FieldAppID, field.TypeUUID)
	}
	if value, ok := asu.mutation.SubscribeAppID(); ok {
		_spec.SetField(appsubscribe.FieldSubscribeAppID, field.TypeUUID, value)
	}
	if asu.mutation.SubscribeAppIDCleared() {
		_spec.ClearField(appsubscribe.FieldSubscribeAppID, field.TypeUUID)
	}
	_spec.AddModifiers(asu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appsubscribe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	asu.mutation.done = true
	return n, nil
}

// AppSubscribeUpdateOne is the builder for updating a single AppSubscribe entity.
type AppSubscribeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppSubscribeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (asuo *AppSubscribeUpdateOne) SetCreatedAt(u uint32) *AppSubscribeUpdateOne {
	asuo.mutation.ResetCreatedAt()
	asuo.mutation.SetCreatedAt(u)
	return asuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asuo *AppSubscribeUpdateOne) SetNillableCreatedAt(u *uint32) *AppSubscribeUpdateOne {
	if u != nil {
		asuo.SetCreatedAt(*u)
	}
	return asuo
}

// AddCreatedAt adds u to the "created_at" field.
func (asuo *AppSubscribeUpdateOne) AddCreatedAt(u int32) *AppSubscribeUpdateOne {
	asuo.mutation.AddCreatedAt(u)
	return asuo
}

// SetUpdatedAt sets the "updated_at" field.
func (asuo *AppSubscribeUpdateOne) SetUpdatedAt(u uint32) *AppSubscribeUpdateOne {
	asuo.mutation.ResetUpdatedAt()
	asuo.mutation.SetUpdatedAt(u)
	return asuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (asuo *AppSubscribeUpdateOne) AddUpdatedAt(u int32) *AppSubscribeUpdateOne {
	asuo.mutation.AddUpdatedAt(u)
	return asuo
}

// SetDeletedAt sets the "deleted_at" field.
func (asuo *AppSubscribeUpdateOne) SetDeletedAt(u uint32) *AppSubscribeUpdateOne {
	asuo.mutation.ResetDeletedAt()
	asuo.mutation.SetDeletedAt(u)
	return asuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (asuo *AppSubscribeUpdateOne) SetNillableDeletedAt(u *uint32) *AppSubscribeUpdateOne {
	if u != nil {
		asuo.SetDeletedAt(*u)
	}
	return asuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (asuo *AppSubscribeUpdateOne) AddDeletedAt(u int32) *AppSubscribeUpdateOne {
	asuo.mutation.AddDeletedAt(u)
	return asuo
}

// SetEntID sets the "ent_id" field.
func (asuo *AppSubscribeUpdateOne) SetEntID(u uuid.UUID) *AppSubscribeUpdateOne {
	asuo.mutation.SetEntID(u)
	return asuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (asuo *AppSubscribeUpdateOne) SetNillableEntID(u *uuid.UUID) *AppSubscribeUpdateOne {
	if u != nil {
		asuo.SetEntID(*u)
	}
	return asuo
}

// SetAppID sets the "app_id" field.
func (asuo *AppSubscribeUpdateOne) SetAppID(u uuid.UUID) *AppSubscribeUpdateOne {
	asuo.mutation.SetAppID(u)
	return asuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (asuo *AppSubscribeUpdateOne) SetNillableAppID(u *uuid.UUID) *AppSubscribeUpdateOne {
	if u != nil {
		asuo.SetAppID(*u)
	}
	return asuo
}

// ClearAppID clears the value of the "app_id" field.
func (asuo *AppSubscribeUpdateOne) ClearAppID() *AppSubscribeUpdateOne {
	asuo.mutation.ClearAppID()
	return asuo
}

// SetSubscribeAppID sets the "subscribe_app_id" field.
func (asuo *AppSubscribeUpdateOne) SetSubscribeAppID(u uuid.UUID) *AppSubscribeUpdateOne {
	asuo.mutation.SetSubscribeAppID(u)
	return asuo
}

// SetNillableSubscribeAppID sets the "subscribe_app_id" field if the given value is not nil.
func (asuo *AppSubscribeUpdateOne) SetNillableSubscribeAppID(u *uuid.UUID) *AppSubscribeUpdateOne {
	if u != nil {
		asuo.SetSubscribeAppID(*u)
	}
	return asuo
}

// ClearSubscribeAppID clears the value of the "subscribe_app_id" field.
func (asuo *AppSubscribeUpdateOne) ClearSubscribeAppID() *AppSubscribeUpdateOne {
	asuo.mutation.ClearSubscribeAppID()
	return asuo
}

// Mutation returns the AppSubscribeMutation object of the builder.
func (asuo *AppSubscribeUpdateOne) Mutation() *AppSubscribeMutation {
	return asuo.mutation
}

// Where appends a list predicates to the AppSubscribeUpdate builder.
func (asuo *AppSubscribeUpdateOne) Where(ps ...predicate.AppSubscribe) *AppSubscribeUpdateOne {
	asuo.mutation.Where(ps...)
	return asuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *AppSubscribeUpdateOne) Select(field string, fields ...string) *AppSubscribeUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated AppSubscribe entity.
func (asuo *AppSubscribeUpdateOne) Save(ctx context.Context) (*AppSubscribe, error) {
	asuo.defaults()
	return withHooks(ctx, asuo.sqlSave, asuo.mutation, asuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AppSubscribeUpdateOne) SaveX(ctx context.Context) *AppSubscribe {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *AppSubscribeUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AppSubscribeUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asuo *AppSubscribeUpdateOne) defaults() {
	if _, ok := asuo.mutation.UpdatedAt(); !ok {
		v := appsubscribe.UpdateDefaultUpdatedAt()
		asuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (asuo *AppSubscribeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppSubscribeUpdateOne {
	asuo.modifiers = append(asuo.modifiers, modifiers...)
	return asuo
}

func (asuo *AppSubscribeUpdateOne) sqlSave(ctx context.Context) (_node *AppSubscribe, err error) {
	_spec := sqlgraph.NewUpdateSpec(appsubscribe.Table, appsubscribe.Columns, sqlgraph.NewFieldSpec(appsubscribe.FieldID, field.TypeUint32))
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AppSubscribe.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appsubscribe.FieldID)
		for _, f := range fields {
			if !appsubscribe.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != appsubscribe.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.CreatedAt(); ok {
		_spec.SetField(appsubscribe.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := asuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(appsubscribe.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := asuo.mutation.UpdatedAt(); ok {
		_spec.SetField(appsubscribe.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := asuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(appsubscribe.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := asuo.mutation.DeletedAt(); ok {
		_spec.SetField(appsubscribe.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := asuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(appsubscribe.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := asuo.mutation.EntID(); ok {
		_spec.SetField(appsubscribe.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := asuo.mutation.AppID(); ok {
		_spec.SetField(appsubscribe.FieldAppID, field.TypeUUID, value)
	}
	if asuo.mutation.AppIDCleared() {
		_spec.ClearField(appsubscribe.FieldAppID, field.TypeUUID)
	}
	if value, ok := asuo.mutation.SubscribeAppID(); ok {
		_spec.SetField(appsubscribe.FieldSubscribeAppID, field.TypeUUID, value)
	}
	if asuo.mutation.SubscribeAppIDCleared() {
		_spec.ClearField(appsubscribe.FieldSubscribeAppID, field.TypeUUID)
	}
	_spec.AddModifiers(asuo.modifiers...)
	_node = &AppSubscribe{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appsubscribe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	asuo.mutation.done = true
	return _node, nil
}

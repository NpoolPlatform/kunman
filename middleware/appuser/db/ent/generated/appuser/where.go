// Code generated by ent, DO NOT EDIT.

package appuser

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldEQ(FieldDeletedAt, v))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldEQ(FieldEntID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldEQ(FieldAppID, v))
}

// EmailAddress applies equality check predicate on the "email_address" field. It's identical to EmailAddressEQ.
func EmailAddress(v string) predicate.AppUser {
	return predicate.AppUser(sql.FieldEQ(FieldEmailAddress, v))
}

// PhoneNo applies equality check predicate on the "phone_no" field. It's identical to PhoneNoEQ.
func PhoneNo(v string) predicate.AppUser {
	return predicate.AppUser(sql.FieldEQ(FieldPhoneNo, v))
}

// ImportFromApp applies equality check predicate on the "import_from_app" field. It's identical to ImportFromAppEQ.
func ImportFromApp(v uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldEQ(FieldImportFromApp, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.AppUser {
	return predicate.AppUser(sql.FieldLTE(FieldDeletedAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldLTE(FieldEntID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldLTE(FieldAppID, v))
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.AppUser {
	return predicate.AppUser(sql.FieldIsNull(FieldAppID))
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.AppUser {
	return predicate.AppUser(sql.FieldNotNull(FieldAppID))
}

// EmailAddressEQ applies the EQ predicate on the "email_address" field.
func EmailAddressEQ(v string) predicate.AppUser {
	return predicate.AppUser(sql.FieldEQ(FieldEmailAddress, v))
}

// EmailAddressNEQ applies the NEQ predicate on the "email_address" field.
func EmailAddressNEQ(v string) predicate.AppUser {
	return predicate.AppUser(sql.FieldNEQ(FieldEmailAddress, v))
}

// EmailAddressIn applies the In predicate on the "email_address" field.
func EmailAddressIn(vs ...string) predicate.AppUser {
	return predicate.AppUser(sql.FieldIn(FieldEmailAddress, vs...))
}

// EmailAddressNotIn applies the NotIn predicate on the "email_address" field.
func EmailAddressNotIn(vs ...string) predicate.AppUser {
	return predicate.AppUser(sql.FieldNotIn(FieldEmailAddress, vs...))
}

// EmailAddressGT applies the GT predicate on the "email_address" field.
func EmailAddressGT(v string) predicate.AppUser {
	return predicate.AppUser(sql.FieldGT(FieldEmailAddress, v))
}

// EmailAddressGTE applies the GTE predicate on the "email_address" field.
func EmailAddressGTE(v string) predicate.AppUser {
	return predicate.AppUser(sql.FieldGTE(FieldEmailAddress, v))
}

// EmailAddressLT applies the LT predicate on the "email_address" field.
func EmailAddressLT(v string) predicate.AppUser {
	return predicate.AppUser(sql.FieldLT(FieldEmailAddress, v))
}

// EmailAddressLTE applies the LTE predicate on the "email_address" field.
func EmailAddressLTE(v string) predicate.AppUser {
	return predicate.AppUser(sql.FieldLTE(FieldEmailAddress, v))
}

// EmailAddressContains applies the Contains predicate on the "email_address" field.
func EmailAddressContains(v string) predicate.AppUser {
	return predicate.AppUser(sql.FieldContains(FieldEmailAddress, v))
}

// EmailAddressHasPrefix applies the HasPrefix predicate on the "email_address" field.
func EmailAddressHasPrefix(v string) predicate.AppUser {
	return predicate.AppUser(sql.FieldHasPrefix(FieldEmailAddress, v))
}

// EmailAddressHasSuffix applies the HasSuffix predicate on the "email_address" field.
func EmailAddressHasSuffix(v string) predicate.AppUser {
	return predicate.AppUser(sql.FieldHasSuffix(FieldEmailAddress, v))
}

// EmailAddressIsNil applies the IsNil predicate on the "email_address" field.
func EmailAddressIsNil() predicate.AppUser {
	return predicate.AppUser(sql.FieldIsNull(FieldEmailAddress))
}

// EmailAddressNotNil applies the NotNil predicate on the "email_address" field.
func EmailAddressNotNil() predicate.AppUser {
	return predicate.AppUser(sql.FieldNotNull(FieldEmailAddress))
}

// EmailAddressEqualFold applies the EqualFold predicate on the "email_address" field.
func EmailAddressEqualFold(v string) predicate.AppUser {
	return predicate.AppUser(sql.FieldEqualFold(FieldEmailAddress, v))
}

// EmailAddressContainsFold applies the ContainsFold predicate on the "email_address" field.
func EmailAddressContainsFold(v string) predicate.AppUser {
	return predicate.AppUser(sql.FieldContainsFold(FieldEmailAddress, v))
}

// PhoneNoEQ applies the EQ predicate on the "phone_no" field.
func PhoneNoEQ(v string) predicate.AppUser {
	return predicate.AppUser(sql.FieldEQ(FieldPhoneNo, v))
}

// PhoneNoNEQ applies the NEQ predicate on the "phone_no" field.
func PhoneNoNEQ(v string) predicate.AppUser {
	return predicate.AppUser(sql.FieldNEQ(FieldPhoneNo, v))
}

// PhoneNoIn applies the In predicate on the "phone_no" field.
func PhoneNoIn(vs ...string) predicate.AppUser {
	return predicate.AppUser(sql.FieldIn(FieldPhoneNo, vs...))
}

// PhoneNoNotIn applies the NotIn predicate on the "phone_no" field.
func PhoneNoNotIn(vs ...string) predicate.AppUser {
	return predicate.AppUser(sql.FieldNotIn(FieldPhoneNo, vs...))
}

// PhoneNoGT applies the GT predicate on the "phone_no" field.
func PhoneNoGT(v string) predicate.AppUser {
	return predicate.AppUser(sql.FieldGT(FieldPhoneNo, v))
}

// PhoneNoGTE applies the GTE predicate on the "phone_no" field.
func PhoneNoGTE(v string) predicate.AppUser {
	return predicate.AppUser(sql.FieldGTE(FieldPhoneNo, v))
}

// PhoneNoLT applies the LT predicate on the "phone_no" field.
func PhoneNoLT(v string) predicate.AppUser {
	return predicate.AppUser(sql.FieldLT(FieldPhoneNo, v))
}

// PhoneNoLTE applies the LTE predicate on the "phone_no" field.
func PhoneNoLTE(v string) predicate.AppUser {
	return predicate.AppUser(sql.FieldLTE(FieldPhoneNo, v))
}

// PhoneNoContains applies the Contains predicate on the "phone_no" field.
func PhoneNoContains(v string) predicate.AppUser {
	return predicate.AppUser(sql.FieldContains(FieldPhoneNo, v))
}

// PhoneNoHasPrefix applies the HasPrefix predicate on the "phone_no" field.
func PhoneNoHasPrefix(v string) predicate.AppUser {
	return predicate.AppUser(sql.FieldHasPrefix(FieldPhoneNo, v))
}

// PhoneNoHasSuffix applies the HasSuffix predicate on the "phone_no" field.
func PhoneNoHasSuffix(v string) predicate.AppUser {
	return predicate.AppUser(sql.FieldHasSuffix(FieldPhoneNo, v))
}

// PhoneNoIsNil applies the IsNil predicate on the "phone_no" field.
func PhoneNoIsNil() predicate.AppUser {
	return predicate.AppUser(sql.FieldIsNull(FieldPhoneNo))
}

// PhoneNoNotNil applies the NotNil predicate on the "phone_no" field.
func PhoneNoNotNil() predicate.AppUser {
	return predicate.AppUser(sql.FieldNotNull(FieldPhoneNo))
}

// PhoneNoEqualFold applies the EqualFold predicate on the "phone_no" field.
func PhoneNoEqualFold(v string) predicate.AppUser {
	return predicate.AppUser(sql.FieldEqualFold(FieldPhoneNo, v))
}

// PhoneNoContainsFold applies the ContainsFold predicate on the "phone_no" field.
func PhoneNoContainsFold(v string) predicate.AppUser {
	return predicate.AppUser(sql.FieldContainsFold(FieldPhoneNo, v))
}

// ImportFromAppEQ applies the EQ predicate on the "import_from_app" field.
func ImportFromAppEQ(v uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldEQ(FieldImportFromApp, v))
}

// ImportFromAppNEQ applies the NEQ predicate on the "import_from_app" field.
func ImportFromAppNEQ(v uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldNEQ(FieldImportFromApp, v))
}

// ImportFromAppIn applies the In predicate on the "import_from_app" field.
func ImportFromAppIn(vs ...uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldIn(FieldImportFromApp, vs...))
}

// ImportFromAppNotIn applies the NotIn predicate on the "import_from_app" field.
func ImportFromAppNotIn(vs ...uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldNotIn(FieldImportFromApp, vs...))
}

// ImportFromAppGT applies the GT predicate on the "import_from_app" field.
func ImportFromAppGT(v uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldGT(FieldImportFromApp, v))
}

// ImportFromAppGTE applies the GTE predicate on the "import_from_app" field.
func ImportFromAppGTE(v uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldGTE(FieldImportFromApp, v))
}

// ImportFromAppLT applies the LT predicate on the "import_from_app" field.
func ImportFromAppLT(v uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldLT(FieldImportFromApp, v))
}

// ImportFromAppLTE applies the LTE predicate on the "import_from_app" field.
func ImportFromAppLTE(v uuid.UUID) predicate.AppUser {
	return predicate.AppUser(sql.FieldLTE(FieldImportFromApp, v))
}

// ImportFromAppIsNil applies the IsNil predicate on the "import_from_app" field.
func ImportFromAppIsNil() predicate.AppUser {
	return predicate.AppUser(sql.FieldIsNull(FieldImportFromApp))
}

// ImportFromAppNotNil applies the NotNil predicate on the "import_from_app" field.
func ImportFromAppNotNil() predicate.AppUser {
	return predicate.AppUser(sql.FieldNotNull(FieldImportFromApp))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppUser) predicate.AppUser {
	return predicate.AppUser(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppUser) predicate.AppUser {
	return predicate.AppUser(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppUser) predicate.AppUser {
	return predicate.AppUser(sql.NotPredicates(p))
}

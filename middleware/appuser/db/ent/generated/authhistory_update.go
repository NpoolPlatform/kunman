// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/authhistory"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// AuthHistoryUpdate is the builder for updating AuthHistory entities.
type AuthHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *AuthHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AuthHistoryUpdate builder.
func (ahu *AuthHistoryUpdate) Where(ps ...predicate.AuthHistory) *AuthHistoryUpdate {
	ahu.mutation.Where(ps...)
	return ahu
}

// SetCreatedAt sets the "created_at" field.
func (ahu *AuthHistoryUpdate) SetCreatedAt(u uint32) *AuthHistoryUpdate {
	ahu.mutation.ResetCreatedAt()
	ahu.mutation.SetCreatedAt(u)
	return ahu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ahu *AuthHistoryUpdate) SetNillableCreatedAt(u *uint32) *AuthHistoryUpdate {
	if u != nil {
		ahu.SetCreatedAt(*u)
	}
	return ahu
}

// AddCreatedAt adds u to the "created_at" field.
func (ahu *AuthHistoryUpdate) AddCreatedAt(u int32) *AuthHistoryUpdate {
	ahu.mutation.AddCreatedAt(u)
	return ahu
}

// SetUpdatedAt sets the "updated_at" field.
func (ahu *AuthHistoryUpdate) SetUpdatedAt(u uint32) *AuthHistoryUpdate {
	ahu.mutation.ResetUpdatedAt()
	ahu.mutation.SetUpdatedAt(u)
	return ahu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ahu *AuthHistoryUpdate) AddUpdatedAt(u int32) *AuthHistoryUpdate {
	ahu.mutation.AddUpdatedAt(u)
	return ahu
}

// SetDeletedAt sets the "deleted_at" field.
func (ahu *AuthHistoryUpdate) SetDeletedAt(u uint32) *AuthHistoryUpdate {
	ahu.mutation.ResetDeletedAt()
	ahu.mutation.SetDeletedAt(u)
	return ahu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ahu *AuthHistoryUpdate) SetNillableDeletedAt(u *uint32) *AuthHistoryUpdate {
	if u != nil {
		ahu.SetDeletedAt(*u)
	}
	return ahu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ahu *AuthHistoryUpdate) AddDeletedAt(u int32) *AuthHistoryUpdate {
	ahu.mutation.AddDeletedAt(u)
	return ahu
}

// SetEntID sets the "ent_id" field.
func (ahu *AuthHistoryUpdate) SetEntID(u uuid.UUID) *AuthHistoryUpdate {
	ahu.mutation.SetEntID(u)
	return ahu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ahu *AuthHistoryUpdate) SetNillableEntID(u *uuid.UUID) *AuthHistoryUpdate {
	if u != nil {
		ahu.SetEntID(*u)
	}
	return ahu
}

// SetAppID sets the "app_id" field.
func (ahu *AuthHistoryUpdate) SetAppID(u uuid.UUID) *AuthHistoryUpdate {
	ahu.mutation.SetAppID(u)
	return ahu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ahu *AuthHistoryUpdate) SetNillableAppID(u *uuid.UUID) *AuthHistoryUpdate {
	if u != nil {
		ahu.SetAppID(*u)
	}
	return ahu
}

// ClearAppID clears the value of the "app_id" field.
func (ahu *AuthHistoryUpdate) ClearAppID() *AuthHistoryUpdate {
	ahu.mutation.ClearAppID()
	return ahu
}

// SetUserID sets the "user_id" field.
func (ahu *AuthHistoryUpdate) SetUserID(u uuid.UUID) *AuthHistoryUpdate {
	ahu.mutation.SetUserID(u)
	return ahu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ahu *AuthHistoryUpdate) SetNillableUserID(u *uuid.UUID) *AuthHistoryUpdate {
	if u != nil {
		ahu.SetUserID(*u)
	}
	return ahu
}

// ClearUserID clears the value of the "user_id" field.
func (ahu *AuthHistoryUpdate) ClearUserID() *AuthHistoryUpdate {
	ahu.mutation.ClearUserID()
	return ahu
}

// SetResource sets the "resource" field.
func (ahu *AuthHistoryUpdate) SetResource(s string) *AuthHistoryUpdate {
	ahu.mutation.SetResource(s)
	return ahu
}

// SetNillableResource sets the "resource" field if the given value is not nil.
func (ahu *AuthHistoryUpdate) SetNillableResource(s *string) *AuthHistoryUpdate {
	if s != nil {
		ahu.SetResource(*s)
	}
	return ahu
}

// ClearResource clears the value of the "resource" field.
func (ahu *AuthHistoryUpdate) ClearResource() *AuthHistoryUpdate {
	ahu.mutation.ClearResource()
	return ahu
}

// SetMethod sets the "method" field.
func (ahu *AuthHistoryUpdate) SetMethod(s string) *AuthHistoryUpdate {
	ahu.mutation.SetMethod(s)
	return ahu
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (ahu *AuthHistoryUpdate) SetNillableMethod(s *string) *AuthHistoryUpdate {
	if s != nil {
		ahu.SetMethod(*s)
	}
	return ahu
}

// ClearMethod clears the value of the "method" field.
func (ahu *AuthHistoryUpdate) ClearMethod() *AuthHistoryUpdate {
	ahu.mutation.ClearMethod()
	return ahu
}

// SetAllowed sets the "allowed" field.
func (ahu *AuthHistoryUpdate) SetAllowed(b bool) *AuthHistoryUpdate {
	ahu.mutation.SetAllowed(b)
	return ahu
}

// SetNillableAllowed sets the "allowed" field if the given value is not nil.
func (ahu *AuthHistoryUpdate) SetNillableAllowed(b *bool) *AuthHistoryUpdate {
	if b != nil {
		ahu.SetAllowed(*b)
	}
	return ahu
}

// ClearAllowed clears the value of the "allowed" field.
func (ahu *AuthHistoryUpdate) ClearAllowed() *AuthHistoryUpdate {
	ahu.mutation.ClearAllowed()
	return ahu
}

// Mutation returns the AuthHistoryMutation object of the builder.
func (ahu *AuthHistoryUpdate) Mutation() *AuthHistoryMutation {
	return ahu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ahu *AuthHistoryUpdate) Save(ctx context.Context) (int, error) {
	ahu.defaults()
	return withHooks(ctx, ahu.sqlSave, ahu.mutation, ahu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ahu *AuthHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ahu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ahu *AuthHistoryUpdate) Exec(ctx context.Context) error {
	_, err := ahu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahu *AuthHistoryUpdate) ExecX(ctx context.Context) {
	if err := ahu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ahu *AuthHistoryUpdate) defaults() {
	if _, ok := ahu.mutation.UpdatedAt(); !ok {
		v := authhistory.UpdateDefaultUpdatedAt()
		ahu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ahu *AuthHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AuthHistoryUpdate {
	ahu.modifiers = append(ahu.modifiers, modifiers...)
	return ahu
}

func (ahu *AuthHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(authhistory.Table, authhistory.Columns, sqlgraph.NewFieldSpec(authhistory.FieldID, field.TypeUint32))
	if ps := ahu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ahu.mutation.CreatedAt(); ok {
		_spec.SetField(authhistory.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ahu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(authhistory.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ahu.mutation.UpdatedAt(); ok {
		_spec.SetField(authhistory.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ahu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(authhistory.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ahu.mutation.DeletedAt(); ok {
		_spec.SetField(authhistory.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ahu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(authhistory.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ahu.mutation.EntID(); ok {
		_spec.SetField(authhistory.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := ahu.mutation.AppID(); ok {
		_spec.SetField(authhistory.FieldAppID, field.TypeUUID, value)
	}
	if ahu.mutation.AppIDCleared() {
		_spec.ClearField(authhistory.FieldAppID, field.TypeUUID)
	}
	if value, ok := ahu.mutation.UserID(); ok {
		_spec.SetField(authhistory.FieldUserID, field.TypeUUID, value)
	}
	if ahu.mutation.UserIDCleared() {
		_spec.ClearField(authhistory.FieldUserID, field.TypeUUID)
	}
	if value, ok := ahu.mutation.Resource(); ok {
		_spec.SetField(authhistory.FieldResource, field.TypeString, value)
	}
	if ahu.mutation.ResourceCleared() {
		_spec.ClearField(authhistory.FieldResource, field.TypeString)
	}
	if value, ok := ahu.mutation.Method(); ok {
		_spec.SetField(authhistory.FieldMethod, field.TypeString, value)
	}
	if ahu.mutation.MethodCleared() {
		_spec.ClearField(authhistory.FieldMethod, field.TypeString)
	}
	if value, ok := ahu.mutation.Allowed(); ok {
		_spec.SetField(authhistory.FieldAllowed, field.TypeBool, value)
	}
	if ahu.mutation.AllowedCleared() {
		_spec.ClearField(authhistory.FieldAllowed, field.TypeBool)
	}
	_spec.AddModifiers(ahu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ahu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ahu.mutation.done = true
	return n, nil
}

// AuthHistoryUpdateOne is the builder for updating a single AuthHistory entity.
type AuthHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AuthHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (ahuo *AuthHistoryUpdateOne) SetCreatedAt(u uint32) *AuthHistoryUpdateOne {
	ahuo.mutation.ResetCreatedAt()
	ahuo.mutation.SetCreatedAt(u)
	return ahuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ahuo *AuthHistoryUpdateOne) SetNillableCreatedAt(u *uint32) *AuthHistoryUpdateOne {
	if u != nil {
		ahuo.SetCreatedAt(*u)
	}
	return ahuo
}

// AddCreatedAt adds u to the "created_at" field.
func (ahuo *AuthHistoryUpdateOne) AddCreatedAt(u int32) *AuthHistoryUpdateOne {
	ahuo.mutation.AddCreatedAt(u)
	return ahuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ahuo *AuthHistoryUpdateOne) SetUpdatedAt(u uint32) *AuthHistoryUpdateOne {
	ahuo.mutation.ResetUpdatedAt()
	ahuo.mutation.SetUpdatedAt(u)
	return ahuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ahuo *AuthHistoryUpdateOne) AddUpdatedAt(u int32) *AuthHistoryUpdateOne {
	ahuo.mutation.AddUpdatedAt(u)
	return ahuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ahuo *AuthHistoryUpdateOne) SetDeletedAt(u uint32) *AuthHistoryUpdateOne {
	ahuo.mutation.ResetDeletedAt()
	ahuo.mutation.SetDeletedAt(u)
	return ahuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ahuo *AuthHistoryUpdateOne) SetNillableDeletedAt(u *uint32) *AuthHistoryUpdateOne {
	if u != nil {
		ahuo.SetDeletedAt(*u)
	}
	return ahuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ahuo *AuthHistoryUpdateOne) AddDeletedAt(u int32) *AuthHistoryUpdateOne {
	ahuo.mutation.AddDeletedAt(u)
	return ahuo
}

// SetEntID sets the "ent_id" field.
func (ahuo *AuthHistoryUpdateOne) SetEntID(u uuid.UUID) *AuthHistoryUpdateOne {
	ahuo.mutation.SetEntID(u)
	return ahuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ahuo *AuthHistoryUpdateOne) SetNillableEntID(u *uuid.UUID) *AuthHistoryUpdateOne {
	if u != nil {
		ahuo.SetEntID(*u)
	}
	return ahuo
}

// SetAppID sets the "app_id" field.
func (ahuo *AuthHistoryUpdateOne) SetAppID(u uuid.UUID) *AuthHistoryUpdateOne {
	ahuo.mutation.SetAppID(u)
	return ahuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ahuo *AuthHistoryUpdateOne) SetNillableAppID(u *uuid.UUID) *AuthHistoryUpdateOne {
	if u != nil {
		ahuo.SetAppID(*u)
	}
	return ahuo
}

// ClearAppID clears the value of the "app_id" field.
func (ahuo *AuthHistoryUpdateOne) ClearAppID() *AuthHistoryUpdateOne {
	ahuo.mutation.ClearAppID()
	return ahuo
}

// SetUserID sets the "user_id" field.
func (ahuo *AuthHistoryUpdateOne) SetUserID(u uuid.UUID) *AuthHistoryUpdateOne {
	ahuo.mutation.SetUserID(u)
	return ahuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ahuo *AuthHistoryUpdateOne) SetNillableUserID(u *uuid.UUID) *AuthHistoryUpdateOne {
	if u != nil {
		ahuo.SetUserID(*u)
	}
	return ahuo
}

// ClearUserID clears the value of the "user_id" field.
func (ahuo *AuthHistoryUpdateOne) ClearUserID() *AuthHistoryUpdateOne {
	ahuo.mutation.ClearUserID()
	return ahuo
}

// SetResource sets the "resource" field.
func (ahuo *AuthHistoryUpdateOne) SetResource(s string) *AuthHistoryUpdateOne {
	ahuo.mutation.SetResource(s)
	return ahuo
}

// SetNillableResource sets the "resource" field if the given value is not nil.
func (ahuo *AuthHistoryUpdateOne) SetNillableResource(s *string) *AuthHistoryUpdateOne {
	if s != nil {
		ahuo.SetResource(*s)
	}
	return ahuo
}

// ClearResource clears the value of the "resource" field.
func (ahuo *AuthHistoryUpdateOne) ClearResource() *AuthHistoryUpdateOne {
	ahuo.mutation.ClearResource()
	return ahuo
}

// SetMethod sets the "method" field.
func (ahuo *AuthHistoryUpdateOne) SetMethod(s string) *AuthHistoryUpdateOne {
	ahuo.mutation.SetMethod(s)
	return ahuo
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (ahuo *AuthHistoryUpdateOne) SetNillableMethod(s *string) *AuthHistoryUpdateOne {
	if s != nil {
		ahuo.SetMethod(*s)
	}
	return ahuo
}

// ClearMethod clears the value of the "method" field.
func (ahuo *AuthHistoryUpdateOne) ClearMethod() *AuthHistoryUpdateOne {
	ahuo.mutation.ClearMethod()
	return ahuo
}

// SetAllowed sets the "allowed" field.
func (ahuo *AuthHistoryUpdateOne) SetAllowed(b bool) *AuthHistoryUpdateOne {
	ahuo.mutation.SetAllowed(b)
	return ahuo
}

// SetNillableAllowed sets the "allowed" field if the given value is not nil.
func (ahuo *AuthHistoryUpdateOne) SetNillableAllowed(b *bool) *AuthHistoryUpdateOne {
	if b != nil {
		ahuo.SetAllowed(*b)
	}
	return ahuo
}

// ClearAllowed clears the value of the "allowed" field.
func (ahuo *AuthHistoryUpdateOne) ClearAllowed() *AuthHistoryUpdateOne {
	ahuo.mutation.ClearAllowed()
	return ahuo
}

// Mutation returns the AuthHistoryMutation object of the builder.
func (ahuo *AuthHistoryUpdateOne) Mutation() *AuthHistoryMutation {
	return ahuo.mutation
}

// Where appends a list predicates to the AuthHistoryUpdate builder.
func (ahuo *AuthHistoryUpdateOne) Where(ps ...predicate.AuthHistory) *AuthHistoryUpdateOne {
	ahuo.mutation.Where(ps...)
	return ahuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ahuo *AuthHistoryUpdateOne) Select(field string, fields ...string) *AuthHistoryUpdateOne {
	ahuo.fields = append([]string{field}, fields...)
	return ahuo
}

// Save executes the query and returns the updated AuthHistory entity.
func (ahuo *AuthHistoryUpdateOne) Save(ctx context.Context) (*AuthHistory, error) {
	ahuo.defaults()
	return withHooks(ctx, ahuo.sqlSave, ahuo.mutation, ahuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ahuo *AuthHistoryUpdateOne) SaveX(ctx context.Context) *AuthHistory {
	node, err := ahuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ahuo *AuthHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ahuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahuo *AuthHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := ahuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ahuo *AuthHistoryUpdateOne) defaults() {
	if _, ok := ahuo.mutation.UpdatedAt(); !ok {
		v := authhistory.UpdateDefaultUpdatedAt()
		ahuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ahuo *AuthHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AuthHistoryUpdateOne {
	ahuo.modifiers = append(ahuo.modifiers, modifiers...)
	return ahuo
}

func (ahuo *AuthHistoryUpdateOne) sqlSave(ctx context.Context) (_node *AuthHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(authhistory.Table, authhistory.Columns, sqlgraph.NewFieldSpec(authhistory.FieldID, field.TypeUint32))
	id, ok := ahuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AuthHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ahuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authhistory.FieldID)
		for _, f := range fields {
			if !authhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != authhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ahuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ahuo.mutation.CreatedAt(); ok {
		_spec.SetField(authhistory.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ahuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(authhistory.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ahuo.mutation.UpdatedAt(); ok {
		_spec.SetField(authhistory.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ahuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(authhistory.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ahuo.mutation.DeletedAt(); ok {
		_spec.SetField(authhistory.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ahuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(authhistory.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ahuo.mutation.EntID(); ok {
		_spec.SetField(authhistory.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := ahuo.mutation.AppID(); ok {
		_spec.SetField(authhistory.FieldAppID, field.TypeUUID, value)
	}
	if ahuo.mutation.AppIDCleared() {
		_spec.ClearField(authhistory.FieldAppID, field.TypeUUID)
	}
	if value, ok := ahuo.mutation.UserID(); ok {
		_spec.SetField(authhistory.FieldUserID, field.TypeUUID, value)
	}
	if ahuo.mutation.UserIDCleared() {
		_spec.ClearField(authhistory.FieldUserID, field.TypeUUID)
	}
	if value, ok := ahuo.mutation.Resource(); ok {
		_spec.SetField(authhistory.FieldResource, field.TypeString, value)
	}
	if ahuo.mutation.ResourceCleared() {
		_spec.ClearField(authhistory.FieldResource, field.TypeString)
	}
	if value, ok := ahuo.mutation.Method(); ok {
		_spec.SetField(authhistory.FieldMethod, field.TypeString, value)
	}
	if ahuo.mutation.MethodCleared() {
		_spec.ClearField(authhistory.FieldMethod, field.TypeString)
	}
	if value, ok := ahuo.mutation.Allowed(); ok {
		_spec.SetField(authhistory.FieldAllowed, field.TypeBool, value)
	}
	if ahuo.mutation.AllowedCleared() {
		_spec.ClearField(authhistory.FieldAllowed, field.TypeBool)
	}
	_spec.AddModifiers(ahuo.modifiers...)
	_node = &AuthHistory{config: ahuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ahuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ahuo.mutation.done = true
	return _node, nil
}

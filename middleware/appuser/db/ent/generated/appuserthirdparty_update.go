// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/appuserthirdparty"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// AppUserThirdPartyUpdate is the builder for updating AppUserThirdParty entities.
type AppUserThirdPartyUpdate struct {
	config
	hooks     []Hook
	mutation  *AppUserThirdPartyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppUserThirdPartyUpdate builder.
func (autpu *AppUserThirdPartyUpdate) Where(ps ...predicate.AppUserThirdParty) *AppUserThirdPartyUpdate {
	autpu.mutation.Where(ps...)
	return autpu
}

// SetCreatedAt sets the "created_at" field.
func (autpu *AppUserThirdPartyUpdate) SetCreatedAt(u uint32) *AppUserThirdPartyUpdate {
	autpu.mutation.ResetCreatedAt()
	autpu.mutation.SetCreatedAt(u)
	return autpu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (autpu *AppUserThirdPartyUpdate) SetNillableCreatedAt(u *uint32) *AppUserThirdPartyUpdate {
	if u != nil {
		autpu.SetCreatedAt(*u)
	}
	return autpu
}

// AddCreatedAt adds u to the "created_at" field.
func (autpu *AppUserThirdPartyUpdate) AddCreatedAt(u int32) *AppUserThirdPartyUpdate {
	autpu.mutation.AddCreatedAt(u)
	return autpu
}

// SetUpdatedAt sets the "updated_at" field.
func (autpu *AppUserThirdPartyUpdate) SetUpdatedAt(u uint32) *AppUserThirdPartyUpdate {
	autpu.mutation.ResetUpdatedAt()
	autpu.mutation.SetUpdatedAt(u)
	return autpu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (autpu *AppUserThirdPartyUpdate) AddUpdatedAt(u int32) *AppUserThirdPartyUpdate {
	autpu.mutation.AddUpdatedAt(u)
	return autpu
}

// SetDeletedAt sets the "deleted_at" field.
func (autpu *AppUserThirdPartyUpdate) SetDeletedAt(u uint32) *AppUserThirdPartyUpdate {
	autpu.mutation.ResetDeletedAt()
	autpu.mutation.SetDeletedAt(u)
	return autpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (autpu *AppUserThirdPartyUpdate) SetNillableDeletedAt(u *uint32) *AppUserThirdPartyUpdate {
	if u != nil {
		autpu.SetDeletedAt(*u)
	}
	return autpu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (autpu *AppUserThirdPartyUpdate) AddDeletedAt(u int32) *AppUserThirdPartyUpdate {
	autpu.mutation.AddDeletedAt(u)
	return autpu
}

// SetEntID sets the "ent_id" field.
func (autpu *AppUserThirdPartyUpdate) SetEntID(u uuid.UUID) *AppUserThirdPartyUpdate {
	autpu.mutation.SetEntID(u)
	return autpu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (autpu *AppUserThirdPartyUpdate) SetNillableEntID(u *uuid.UUID) *AppUserThirdPartyUpdate {
	if u != nil {
		autpu.SetEntID(*u)
	}
	return autpu
}

// SetAppID sets the "app_id" field.
func (autpu *AppUserThirdPartyUpdate) SetAppID(u uuid.UUID) *AppUserThirdPartyUpdate {
	autpu.mutation.SetAppID(u)
	return autpu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (autpu *AppUserThirdPartyUpdate) SetNillableAppID(u *uuid.UUID) *AppUserThirdPartyUpdate {
	if u != nil {
		autpu.SetAppID(*u)
	}
	return autpu
}

// ClearAppID clears the value of the "app_id" field.
func (autpu *AppUserThirdPartyUpdate) ClearAppID() *AppUserThirdPartyUpdate {
	autpu.mutation.ClearAppID()
	return autpu
}

// SetUserID sets the "user_id" field.
func (autpu *AppUserThirdPartyUpdate) SetUserID(u uuid.UUID) *AppUserThirdPartyUpdate {
	autpu.mutation.SetUserID(u)
	return autpu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (autpu *AppUserThirdPartyUpdate) SetNillableUserID(u *uuid.UUID) *AppUserThirdPartyUpdate {
	if u != nil {
		autpu.SetUserID(*u)
	}
	return autpu
}

// ClearUserID clears the value of the "user_id" field.
func (autpu *AppUserThirdPartyUpdate) ClearUserID() *AppUserThirdPartyUpdate {
	autpu.mutation.ClearUserID()
	return autpu
}

// SetThirdPartyUserID sets the "third_party_user_id" field.
func (autpu *AppUserThirdPartyUpdate) SetThirdPartyUserID(s string) *AppUserThirdPartyUpdate {
	autpu.mutation.SetThirdPartyUserID(s)
	return autpu
}

// SetNillableThirdPartyUserID sets the "third_party_user_id" field if the given value is not nil.
func (autpu *AppUserThirdPartyUpdate) SetNillableThirdPartyUserID(s *string) *AppUserThirdPartyUpdate {
	if s != nil {
		autpu.SetThirdPartyUserID(*s)
	}
	return autpu
}

// ClearThirdPartyUserID clears the value of the "third_party_user_id" field.
func (autpu *AppUserThirdPartyUpdate) ClearThirdPartyUserID() *AppUserThirdPartyUpdate {
	autpu.mutation.ClearThirdPartyUserID()
	return autpu
}

// SetThirdPartyID sets the "third_party_id" field.
func (autpu *AppUserThirdPartyUpdate) SetThirdPartyID(u uuid.UUID) *AppUserThirdPartyUpdate {
	autpu.mutation.SetThirdPartyID(u)
	return autpu
}

// SetNillableThirdPartyID sets the "third_party_id" field if the given value is not nil.
func (autpu *AppUserThirdPartyUpdate) SetNillableThirdPartyID(u *uuid.UUID) *AppUserThirdPartyUpdate {
	if u != nil {
		autpu.SetThirdPartyID(*u)
	}
	return autpu
}

// ClearThirdPartyID clears the value of the "third_party_id" field.
func (autpu *AppUserThirdPartyUpdate) ClearThirdPartyID() *AppUserThirdPartyUpdate {
	autpu.mutation.ClearThirdPartyID()
	return autpu
}

// SetThirdPartyUsername sets the "third_party_username" field.
func (autpu *AppUserThirdPartyUpdate) SetThirdPartyUsername(s string) *AppUserThirdPartyUpdate {
	autpu.mutation.SetThirdPartyUsername(s)
	return autpu
}

// SetNillableThirdPartyUsername sets the "third_party_username" field if the given value is not nil.
func (autpu *AppUserThirdPartyUpdate) SetNillableThirdPartyUsername(s *string) *AppUserThirdPartyUpdate {
	if s != nil {
		autpu.SetThirdPartyUsername(*s)
	}
	return autpu
}

// ClearThirdPartyUsername clears the value of the "third_party_username" field.
func (autpu *AppUserThirdPartyUpdate) ClearThirdPartyUsername() *AppUserThirdPartyUpdate {
	autpu.mutation.ClearThirdPartyUsername()
	return autpu
}

// SetThirdPartyAvatar sets the "third_party_avatar" field.
func (autpu *AppUserThirdPartyUpdate) SetThirdPartyAvatar(s string) *AppUserThirdPartyUpdate {
	autpu.mutation.SetThirdPartyAvatar(s)
	return autpu
}

// SetNillableThirdPartyAvatar sets the "third_party_avatar" field if the given value is not nil.
func (autpu *AppUserThirdPartyUpdate) SetNillableThirdPartyAvatar(s *string) *AppUserThirdPartyUpdate {
	if s != nil {
		autpu.SetThirdPartyAvatar(*s)
	}
	return autpu
}

// ClearThirdPartyAvatar clears the value of the "third_party_avatar" field.
func (autpu *AppUserThirdPartyUpdate) ClearThirdPartyAvatar() *AppUserThirdPartyUpdate {
	autpu.mutation.ClearThirdPartyAvatar()
	return autpu
}

// Mutation returns the AppUserThirdPartyMutation object of the builder.
func (autpu *AppUserThirdPartyUpdate) Mutation() *AppUserThirdPartyMutation {
	return autpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (autpu *AppUserThirdPartyUpdate) Save(ctx context.Context) (int, error) {
	autpu.defaults()
	return withHooks(ctx, autpu.sqlSave, autpu.mutation, autpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (autpu *AppUserThirdPartyUpdate) SaveX(ctx context.Context) int {
	affected, err := autpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (autpu *AppUserThirdPartyUpdate) Exec(ctx context.Context) error {
	_, err := autpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (autpu *AppUserThirdPartyUpdate) ExecX(ctx context.Context) {
	if err := autpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (autpu *AppUserThirdPartyUpdate) defaults() {
	if _, ok := autpu.mutation.UpdatedAt(); !ok {
		v := appuserthirdparty.UpdateDefaultUpdatedAt()
		autpu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (autpu *AppUserThirdPartyUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppUserThirdPartyUpdate {
	autpu.modifiers = append(autpu.modifiers, modifiers...)
	return autpu
}

func (autpu *AppUserThirdPartyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appuserthirdparty.Table, appuserthirdparty.Columns, sqlgraph.NewFieldSpec(appuserthirdparty.FieldID, field.TypeUint32))
	if ps := autpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := autpu.mutation.CreatedAt(); ok {
		_spec.SetField(appuserthirdparty.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := autpu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(appuserthirdparty.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := autpu.mutation.UpdatedAt(); ok {
		_spec.SetField(appuserthirdparty.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := autpu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(appuserthirdparty.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := autpu.mutation.DeletedAt(); ok {
		_spec.SetField(appuserthirdparty.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := autpu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(appuserthirdparty.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := autpu.mutation.EntID(); ok {
		_spec.SetField(appuserthirdparty.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := autpu.mutation.AppID(); ok {
		_spec.SetField(appuserthirdparty.FieldAppID, field.TypeUUID, value)
	}
	if autpu.mutation.AppIDCleared() {
		_spec.ClearField(appuserthirdparty.FieldAppID, field.TypeUUID)
	}
	if value, ok := autpu.mutation.UserID(); ok {
		_spec.SetField(appuserthirdparty.FieldUserID, field.TypeUUID, value)
	}
	if autpu.mutation.UserIDCleared() {
		_spec.ClearField(appuserthirdparty.FieldUserID, field.TypeUUID)
	}
	if value, ok := autpu.mutation.ThirdPartyUserID(); ok {
		_spec.SetField(appuserthirdparty.FieldThirdPartyUserID, field.TypeString, value)
	}
	if autpu.mutation.ThirdPartyUserIDCleared() {
		_spec.ClearField(appuserthirdparty.FieldThirdPartyUserID, field.TypeString)
	}
	if value, ok := autpu.mutation.ThirdPartyID(); ok {
		_spec.SetField(appuserthirdparty.FieldThirdPartyID, field.TypeUUID, value)
	}
	if autpu.mutation.ThirdPartyIDCleared() {
		_spec.ClearField(appuserthirdparty.FieldThirdPartyID, field.TypeUUID)
	}
	if value, ok := autpu.mutation.ThirdPartyUsername(); ok {
		_spec.SetField(appuserthirdparty.FieldThirdPartyUsername, field.TypeString, value)
	}
	if autpu.mutation.ThirdPartyUsernameCleared() {
		_spec.ClearField(appuserthirdparty.FieldThirdPartyUsername, field.TypeString)
	}
	if value, ok := autpu.mutation.ThirdPartyAvatar(); ok {
		_spec.SetField(appuserthirdparty.FieldThirdPartyAvatar, field.TypeString, value)
	}
	if autpu.mutation.ThirdPartyAvatarCleared() {
		_spec.ClearField(appuserthirdparty.FieldThirdPartyAvatar, field.TypeString)
	}
	_spec.AddModifiers(autpu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, autpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appuserthirdparty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	autpu.mutation.done = true
	return n, nil
}

// AppUserThirdPartyUpdateOne is the builder for updating a single AppUserThirdParty entity.
type AppUserThirdPartyUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppUserThirdPartyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (autpuo *AppUserThirdPartyUpdateOne) SetCreatedAt(u uint32) *AppUserThirdPartyUpdateOne {
	autpuo.mutation.ResetCreatedAt()
	autpuo.mutation.SetCreatedAt(u)
	return autpuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (autpuo *AppUserThirdPartyUpdateOne) SetNillableCreatedAt(u *uint32) *AppUserThirdPartyUpdateOne {
	if u != nil {
		autpuo.SetCreatedAt(*u)
	}
	return autpuo
}

// AddCreatedAt adds u to the "created_at" field.
func (autpuo *AppUserThirdPartyUpdateOne) AddCreatedAt(u int32) *AppUserThirdPartyUpdateOne {
	autpuo.mutation.AddCreatedAt(u)
	return autpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (autpuo *AppUserThirdPartyUpdateOne) SetUpdatedAt(u uint32) *AppUserThirdPartyUpdateOne {
	autpuo.mutation.ResetUpdatedAt()
	autpuo.mutation.SetUpdatedAt(u)
	return autpuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (autpuo *AppUserThirdPartyUpdateOne) AddUpdatedAt(u int32) *AppUserThirdPartyUpdateOne {
	autpuo.mutation.AddUpdatedAt(u)
	return autpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (autpuo *AppUserThirdPartyUpdateOne) SetDeletedAt(u uint32) *AppUserThirdPartyUpdateOne {
	autpuo.mutation.ResetDeletedAt()
	autpuo.mutation.SetDeletedAt(u)
	return autpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (autpuo *AppUserThirdPartyUpdateOne) SetNillableDeletedAt(u *uint32) *AppUserThirdPartyUpdateOne {
	if u != nil {
		autpuo.SetDeletedAt(*u)
	}
	return autpuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (autpuo *AppUserThirdPartyUpdateOne) AddDeletedAt(u int32) *AppUserThirdPartyUpdateOne {
	autpuo.mutation.AddDeletedAt(u)
	return autpuo
}

// SetEntID sets the "ent_id" field.
func (autpuo *AppUserThirdPartyUpdateOne) SetEntID(u uuid.UUID) *AppUserThirdPartyUpdateOne {
	autpuo.mutation.SetEntID(u)
	return autpuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (autpuo *AppUserThirdPartyUpdateOne) SetNillableEntID(u *uuid.UUID) *AppUserThirdPartyUpdateOne {
	if u != nil {
		autpuo.SetEntID(*u)
	}
	return autpuo
}

// SetAppID sets the "app_id" field.
func (autpuo *AppUserThirdPartyUpdateOne) SetAppID(u uuid.UUID) *AppUserThirdPartyUpdateOne {
	autpuo.mutation.SetAppID(u)
	return autpuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (autpuo *AppUserThirdPartyUpdateOne) SetNillableAppID(u *uuid.UUID) *AppUserThirdPartyUpdateOne {
	if u != nil {
		autpuo.SetAppID(*u)
	}
	return autpuo
}

// ClearAppID clears the value of the "app_id" field.
func (autpuo *AppUserThirdPartyUpdateOne) ClearAppID() *AppUserThirdPartyUpdateOne {
	autpuo.mutation.ClearAppID()
	return autpuo
}

// SetUserID sets the "user_id" field.
func (autpuo *AppUserThirdPartyUpdateOne) SetUserID(u uuid.UUID) *AppUserThirdPartyUpdateOne {
	autpuo.mutation.SetUserID(u)
	return autpuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (autpuo *AppUserThirdPartyUpdateOne) SetNillableUserID(u *uuid.UUID) *AppUserThirdPartyUpdateOne {
	if u != nil {
		autpuo.SetUserID(*u)
	}
	return autpuo
}

// ClearUserID clears the value of the "user_id" field.
func (autpuo *AppUserThirdPartyUpdateOne) ClearUserID() *AppUserThirdPartyUpdateOne {
	autpuo.mutation.ClearUserID()
	return autpuo
}

// SetThirdPartyUserID sets the "third_party_user_id" field.
func (autpuo *AppUserThirdPartyUpdateOne) SetThirdPartyUserID(s string) *AppUserThirdPartyUpdateOne {
	autpuo.mutation.SetThirdPartyUserID(s)
	return autpuo
}

// SetNillableThirdPartyUserID sets the "third_party_user_id" field if the given value is not nil.
func (autpuo *AppUserThirdPartyUpdateOne) SetNillableThirdPartyUserID(s *string) *AppUserThirdPartyUpdateOne {
	if s != nil {
		autpuo.SetThirdPartyUserID(*s)
	}
	return autpuo
}

// ClearThirdPartyUserID clears the value of the "third_party_user_id" field.
func (autpuo *AppUserThirdPartyUpdateOne) ClearThirdPartyUserID() *AppUserThirdPartyUpdateOne {
	autpuo.mutation.ClearThirdPartyUserID()
	return autpuo
}

// SetThirdPartyID sets the "third_party_id" field.
func (autpuo *AppUserThirdPartyUpdateOne) SetThirdPartyID(u uuid.UUID) *AppUserThirdPartyUpdateOne {
	autpuo.mutation.SetThirdPartyID(u)
	return autpuo
}

// SetNillableThirdPartyID sets the "third_party_id" field if the given value is not nil.
func (autpuo *AppUserThirdPartyUpdateOne) SetNillableThirdPartyID(u *uuid.UUID) *AppUserThirdPartyUpdateOne {
	if u != nil {
		autpuo.SetThirdPartyID(*u)
	}
	return autpuo
}

// ClearThirdPartyID clears the value of the "third_party_id" field.
func (autpuo *AppUserThirdPartyUpdateOne) ClearThirdPartyID() *AppUserThirdPartyUpdateOne {
	autpuo.mutation.ClearThirdPartyID()
	return autpuo
}

// SetThirdPartyUsername sets the "third_party_username" field.
func (autpuo *AppUserThirdPartyUpdateOne) SetThirdPartyUsername(s string) *AppUserThirdPartyUpdateOne {
	autpuo.mutation.SetThirdPartyUsername(s)
	return autpuo
}

// SetNillableThirdPartyUsername sets the "third_party_username" field if the given value is not nil.
func (autpuo *AppUserThirdPartyUpdateOne) SetNillableThirdPartyUsername(s *string) *AppUserThirdPartyUpdateOne {
	if s != nil {
		autpuo.SetThirdPartyUsername(*s)
	}
	return autpuo
}

// ClearThirdPartyUsername clears the value of the "third_party_username" field.
func (autpuo *AppUserThirdPartyUpdateOne) ClearThirdPartyUsername() *AppUserThirdPartyUpdateOne {
	autpuo.mutation.ClearThirdPartyUsername()
	return autpuo
}

// SetThirdPartyAvatar sets the "third_party_avatar" field.
func (autpuo *AppUserThirdPartyUpdateOne) SetThirdPartyAvatar(s string) *AppUserThirdPartyUpdateOne {
	autpuo.mutation.SetThirdPartyAvatar(s)
	return autpuo
}

// SetNillableThirdPartyAvatar sets the "third_party_avatar" field if the given value is not nil.
func (autpuo *AppUserThirdPartyUpdateOne) SetNillableThirdPartyAvatar(s *string) *AppUserThirdPartyUpdateOne {
	if s != nil {
		autpuo.SetThirdPartyAvatar(*s)
	}
	return autpuo
}

// ClearThirdPartyAvatar clears the value of the "third_party_avatar" field.
func (autpuo *AppUserThirdPartyUpdateOne) ClearThirdPartyAvatar() *AppUserThirdPartyUpdateOne {
	autpuo.mutation.ClearThirdPartyAvatar()
	return autpuo
}

// Mutation returns the AppUserThirdPartyMutation object of the builder.
func (autpuo *AppUserThirdPartyUpdateOne) Mutation() *AppUserThirdPartyMutation {
	return autpuo.mutation
}

// Where appends a list predicates to the AppUserThirdPartyUpdate builder.
func (autpuo *AppUserThirdPartyUpdateOne) Where(ps ...predicate.AppUserThirdParty) *AppUserThirdPartyUpdateOne {
	autpuo.mutation.Where(ps...)
	return autpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (autpuo *AppUserThirdPartyUpdateOne) Select(field string, fields ...string) *AppUserThirdPartyUpdateOne {
	autpuo.fields = append([]string{field}, fields...)
	return autpuo
}

// Save executes the query and returns the updated AppUserThirdParty entity.
func (autpuo *AppUserThirdPartyUpdateOne) Save(ctx context.Context) (*AppUserThirdParty, error) {
	autpuo.defaults()
	return withHooks(ctx, autpuo.sqlSave, autpuo.mutation, autpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (autpuo *AppUserThirdPartyUpdateOne) SaveX(ctx context.Context) *AppUserThirdParty {
	node, err := autpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (autpuo *AppUserThirdPartyUpdateOne) Exec(ctx context.Context) error {
	_, err := autpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (autpuo *AppUserThirdPartyUpdateOne) ExecX(ctx context.Context) {
	if err := autpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (autpuo *AppUserThirdPartyUpdateOne) defaults() {
	if _, ok := autpuo.mutation.UpdatedAt(); !ok {
		v := appuserthirdparty.UpdateDefaultUpdatedAt()
		autpuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (autpuo *AppUserThirdPartyUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppUserThirdPartyUpdateOne {
	autpuo.modifiers = append(autpuo.modifiers, modifiers...)
	return autpuo
}

func (autpuo *AppUserThirdPartyUpdateOne) sqlSave(ctx context.Context) (_node *AppUserThirdParty, err error) {
	_spec := sqlgraph.NewUpdateSpec(appuserthirdparty.Table, appuserthirdparty.Columns, sqlgraph.NewFieldSpec(appuserthirdparty.FieldID, field.TypeUint32))
	id, ok := autpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AppUserThirdParty.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := autpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appuserthirdparty.FieldID)
		for _, f := range fields {
			if !appuserthirdparty.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != appuserthirdparty.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := autpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := autpuo.mutation.CreatedAt(); ok {
		_spec.SetField(appuserthirdparty.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := autpuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(appuserthirdparty.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := autpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(appuserthirdparty.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := autpuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(appuserthirdparty.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := autpuo.mutation.DeletedAt(); ok {
		_spec.SetField(appuserthirdparty.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := autpuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(appuserthirdparty.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := autpuo.mutation.EntID(); ok {
		_spec.SetField(appuserthirdparty.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := autpuo.mutation.AppID(); ok {
		_spec.SetField(appuserthirdparty.FieldAppID, field.TypeUUID, value)
	}
	if autpuo.mutation.AppIDCleared() {
		_spec.ClearField(appuserthirdparty.FieldAppID, field.TypeUUID)
	}
	if value, ok := autpuo.mutation.UserID(); ok {
		_spec.SetField(appuserthirdparty.FieldUserID, field.TypeUUID, value)
	}
	if autpuo.mutation.UserIDCleared() {
		_spec.ClearField(appuserthirdparty.FieldUserID, field.TypeUUID)
	}
	if value, ok := autpuo.mutation.ThirdPartyUserID(); ok {
		_spec.SetField(appuserthirdparty.FieldThirdPartyUserID, field.TypeString, value)
	}
	if autpuo.mutation.ThirdPartyUserIDCleared() {
		_spec.ClearField(appuserthirdparty.FieldThirdPartyUserID, field.TypeString)
	}
	if value, ok := autpuo.mutation.ThirdPartyID(); ok {
		_spec.SetField(appuserthirdparty.FieldThirdPartyID, field.TypeUUID, value)
	}
	if autpuo.mutation.ThirdPartyIDCleared() {
		_spec.ClearField(appuserthirdparty.FieldThirdPartyID, field.TypeUUID)
	}
	if value, ok := autpuo.mutation.ThirdPartyUsername(); ok {
		_spec.SetField(appuserthirdparty.FieldThirdPartyUsername, field.TypeString, value)
	}
	if autpuo.mutation.ThirdPartyUsernameCleared() {
		_spec.ClearField(appuserthirdparty.FieldThirdPartyUsername, field.TypeString)
	}
	if value, ok := autpuo.mutation.ThirdPartyAvatar(); ok {
		_spec.SetField(appuserthirdparty.FieldThirdPartyAvatar, field.TypeString, value)
	}
	if autpuo.mutation.ThirdPartyAvatarCleared() {
		_spec.ClearField(appuserthirdparty.FieldThirdPartyAvatar, field.TypeString)
	}
	_spec.AddModifiers(autpuo.modifiers...)
	_node = &AppUserThirdParty{config: autpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, autpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appuserthirdparty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	autpuo.mutation.done = true
	return _node, nil
}

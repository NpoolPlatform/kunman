// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/banapp"
	"github.com/google/uuid"
)

// BanApp is the model entity for the BanApp schema.
type BanApp struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// Message holds the value of the "message" field.
	Message      string `json:"message,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BanApp) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case banapp.FieldID, banapp.FieldCreatedAt, banapp.FieldUpdatedAt, banapp.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case banapp.FieldMessage:
			values[i] = new(sql.NullString)
		case banapp.FieldEntID, banapp.FieldAppID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BanApp fields.
func (ba *BanApp) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case banapp.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ba.ID = uint32(value.Int64)
		case banapp.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ba.CreatedAt = uint32(value.Int64)
			}
		case banapp.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ba.UpdatedAt = uint32(value.Int64)
			}
		case banapp.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ba.DeletedAt = uint32(value.Int64)
			}
		case banapp.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				ba.EntID = *value
			}
		case banapp.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				ba.AppID = *value
			}
		case banapp.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				ba.Message = value.String
			}
		default:
			ba.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BanApp.
// This includes values selected through modifiers, order, etc.
func (ba *BanApp) Value(name string) (ent.Value, error) {
	return ba.selectValues.Get(name)
}

// Update returns a builder for updating this BanApp.
// Note that you need to call BanApp.Unwrap() before calling this method if this BanApp
// was returned from a transaction, and the transaction was committed or rolled back.
func (ba *BanApp) Update() *BanAppUpdateOne {
	return NewBanAppClient(ba.config).UpdateOne(ba)
}

// Unwrap unwraps the BanApp entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ba *BanApp) Unwrap() *BanApp {
	_tx, ok := ba.config.driver.(*txDriver)
	if !ok {
		panic("generated: BanApp is not a transactional entity")
	}
	ba.config.driver = _tx.drv
	return ba
}

// String implements the fmt.Stringer.
func (ba *BanApp) String() string {
	var builder strings.Builder
	builder.WriteString("BanApp(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ba.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", ba.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ba.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", ba.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", ba.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", ba.AppID))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(ba.Message)
	builder.WriteByte(')')
	return builder.String()
}

// BanApps is a parsable slice of BanApp.
type BanApps []*BanApp

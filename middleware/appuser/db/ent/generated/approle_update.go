// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/approle"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// AppRoleUpdate is the builder for updating AppRole entities.
type AppRoleUpdate struct {
	config
	hooks     []Hook
	mutation  *AppRoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppRoleUpdate builder.
func (aru *AppRoleUpdate) Where(ps ...predicate.AppRole) *AppRoleUpdate {
	aru.mutation.Where(ps...)
	return aru
}

// SetCreatedAt sets the "created_at" field.
func (aru *AppRoleUpdate) SetCreatedAt(u uint32) *AppRoleUpdate {
	aru.mutation.ResetCreatedAt()
	aru.mutation.SetCreatedAt(u)
	return aru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aru *AppRoleUpdate) SetNillableCreatedAt(u *uint32) *AppRoleUpdate {
	if u != nil {
		aru.SetCreatedAt(*u)
	}
	return aru
}

// AddCreatedAt adds u to the "created_at" field.
func (aru *AppRoleUpdate) AddCreatedAt(u int32) *AppRoleUpdate {
	aru.mutation.AddCreatedAt(u)
	return aru
}

// SetUpdatedAt sets the "updated_at" field.
func (aru *AppRoleUpdate) SetUpdatedAt(u uint32) *AppRoleUpdate {
	aru.mutation.ResetUpdatedAt()
	aru.mutation.SetUpdatedAt(u)
	return aru
}

// AddUpdatedAt adds u to the "updated_at" field.
func (aru *AppRoleUpdate) AddUpdatedAt(u int32) *AppRoleUpdate {
	aru.mutation.AddUpdatedAt(u)
	return aru
}

// SetDeletedAt sets the "deleted_at" field.
func (aru *AppRoleUpdate) SetDeletedAt(u uint32) *AppRoleUpdate {
	aru.mutation.ResetDeletedAt()
	aru.mutation.SetDeletedAt(u)
	return aru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aru *AppRoleUpdate) SetNillableDeletedAt(u *uint32) *AppRoleUpdate {
	if u != nil {
		aru.SetDeletedAt(*u)
	}
	return aru
}

// AddDeletedAt adds u to the "deleted_at" field.
func (aru *AppRoleUpdate) AddDeletedAt(u int32) *AppRoleUpdate {
	aru.mutation.AddDeletedAt(u)
	return aru
}

// SetEntID sets the "ent_id" field.
func (aru *AppRoleUpdate) SetEntID(u uuid.UUID) *AppRoleUpdate {
	aru.mutation.SetEntID(u)
	return aru
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (aru *AppRoleUpdate) SetNillableEntID(u *uuid.UUID) *AppRoleUpdate {
	if u != nil {
		aru.SetEntID(*u)
	}
	return aru
}

// SetCreatedBy sets the "created_by" field.
func (aru *AppRoleUpdate) SetCreatedBy(u uuid.UUID) *AppRoleUpdate {
	aru.mutation.SetCreatedBy(u)
	return aru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (aru *AppRoleUpdate) SetNillableCreatedBy(u *uuid.UUID) *AppRoleUpdate {
	if u != nil {
		aru.SetCreatedBy(*u)
	}
	return aru
}

// ClearCreatedBy clears the value of the "created_by" field.
func (aru *AppRoleUpdate) ClearCreatedBy() *AppRoleUpdate {
	aru.mutation.ClearCreatedBy()
	return aru
}

// SetRole sets the "role" field.
func (aru *AppRoleUpdate) SetRole(s string) *AppRoleUpdate {
	aru.mutation.SetRole(s)
	return aru
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (aru *AppRoleUpdate) SetNillableRole(s *string) *AppRoleUpdate {
	if s != nil {
		aru.SetRole(*s)
	}
	return aru
}

// ClearRole clears the value of the "role" field.
func (aru *AppRoleUpdate) ClearRole() *AppRoleUpdate {
	aru.mutation.ClearRole()
	return aru
}

// SetDescription sets the "description" field.
func (aru *AppRoleUpdate) SetDescription(s string) *AppRoleUpdate {
	aru.mutation.SetDescription(s)
	return aru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (aru *AppRoleUpdate) SetNillableDescription(s *string) *AppRoleUpdate {
	if s != nil {
		aru.SetDescription(*s)
	}
	return aru
}

// ClearDescription clears the value of the "description" field.
func (aru *AppRoleUpdate) ClearDescription() *AppRoleUpdate {
	aru.mutation.ClearDescription()
	return aru
}

// SetAppID sets the "app_id" field.
func (aru *AppRoleUpdate) SetAppID(u uuid.UUID) *AppRoleUpdate {
	aru.mutation.SetAppID(u)
	return aru
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (aru *AppRoleUpdate) SetNillableAppID(u *uuid.UUID) *AppRoleUpdate {
	if u != nil {
		aru.SetAppID(*u)
	}
	return aru
}

// ClearAppID clears the value of the "app_id" field.
func (aru *AppRoleUpdate) ClearAppID() *AppRoleUpdate {
	aru.mutation.ClearAppID()
	return aru
}

// SetDefault sets the "default" field.
func (aru *AppRoleUpdate) SetDefault(b bool) *AppRoleUpdate {
	aru.mutation.SetDefault(b)
	return aru
}

// SetNillableDefault sets the "default" field if the given value is not nil.
func (aru *AppRoleUpdate) SetNillableDefault(b *bool) *AppRoleUpdate {
	if b != nil {
		aru.SetDefault(*b)
	}
	return aru
}

// ClearDefault clears the value of the "default" field.
func (aru *AppRoleUpdate) ClearDefault() *AppRoleUpdate {
	aru.mutation.ClearDefault()
	return aru
}

// SetGenesis sets the "genesis" field.
func (aru *AppRoleUpdate) SetGenesis(b bool) *AppRoleUpdate {
	aru.mutation.SetGenesis(b)
	return aru
}

// SetNillableGenesis sets the "genesis" field if the given value is not nil.
func (aru *AppRoleUpdate) SetNillableGenesis(b *bool) *AppRoleUpdate {
	if b != nil {
		aru.SetGenesis(*b)
	}
	return aru
}

// ClearGenesis clears the value of the "genesis" field.
func (aru *AppRoleUpdate) ClearGenesis() *AppRoleUpdate {
	aru.mutation.ClearGenesis()
	return aru
}

// Mutation returns the AppRoleMutation object of the builder.
func (aru *AppRoleUpdate) Mutation() *AppRoleMutation {
	return aru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aru *AppRoleUpdate) Save(ctx context.Context) (int, error) {
	aru.defaults()
	return withHooks(ctx, aru.sqlSave, aru.mutation, aru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aru *AppRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := aru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aru *AppRoleUpdate) Exec(ctx context.Context) error {
	_, err := aru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aru *AppRoleUpdate) ExecX(ctx context.Context) {
	if err := aru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aru *AppRoleUpdate) defaults() {
	if _, ok := aru.mutation.UpdatedAt(); !ok {
		v := approle.UpdateDefaultUpdatedAt()
		aru.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aru *AppRoleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppRoleUpdate {
	aru.modifiers = append(aru.modifiers, modifiers...)
	return aru
}

func (aru *AppRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(approle.Table, approle.Columns, sqlgraph.NewFieldSpec(approle.FieldID, field.TypeUint32))
	if ps := aru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aru.mutation.CreatedAt(); ok {
		_spec.SetField(approle.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := aru.mutation.AddedCreatedAt(); ok {
		_spec.AddField(approle.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := aru.mutation.UpdatedAt(); ok {
		_spec.SetField(approle.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := aru.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(approle.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := aru.mutation.DeletedAt(); ok {
		_spec.SetField(approle.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := aru.mutation.AddedDeletedAt(); ok {
		_spec.AddField(approle.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := aru.mutation.EntID(); ok {
		_spec.SetField(approle.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := aru.mutation.CreatedBy(); ok {
		_spec.SetField(approle.FieldCreatedBy, field.TypeUUID, value)
	}
	if aru.mutation.CreatedByCleared() {
		_spec.ClearField(approle.FieldCreatedBy, field.TypeUUID)
	}
	if value, ok := aru.mutation.Role(); ok {
		_spec.SetField(approle.FieldRole, field.TypeString, value)
	}
	if aru.mutation.RoleCleared() {
		_spec.ClearField(approle.FieldRole, field.TypeString)
	}
	if value, ok := aru.mutation.Description(); ok {
		_spec.SetField(approle.FieldDescription, field.TypeString, value)
	}
	if aru.mutation.DescriptionCleared() {
		_spec.ClearField(approle.FieldDescription, field.TypeString)
	}
	if value, ok := aru.mutation.AppID(); ok {
		_spec.SetField(approle.FieldAppID, field.TypeUUID, value)
	}
	if aru.mutation.AppIDCleared() {
		_spec.ClearField(approle.FieldAppID, field.TypeUUID)
	}
	if value, ok := aru.mutation.Default(); ok {
		_spec.SetField(approle.FieldDefault, field.TypeBool, value)
	}
	if aru.mutation.DefaultCleared() {
		_spec.ClearField(approle.FieldDefault, field.TypeBool)
	}
	if value, ok := aru.mutation.Genesis(); ok {
		_spec.SetField(approle.FieldGenesis, field.TypeBool, value)
	}
	if aru.mutation.GenesisCleared() {
		_spec.ClearField(approle.FieldGenesis, field.TypeBool)
	}
	_spec.AddModifiers(aru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, aru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{approle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aru.mutation.done = true
	return n, nil
}

// AppRoleUpdateOne is the builder for updating a single AppRole entity.
type AppRoleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppRoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (aruo *AppRoleUpdateOne) SetCreatedAt(u uint32) *AppRoleUpdateOne {
	aruo.mutation.ResetCreatedAt()
	aruo.mutation.SetCreatedAt(u)
	return aruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aruo *AppRoleUpdateOne) SetNillableCreatedAt(u *uint32) *AppRoleUpdateOne {
	if u != nil {
		aruo.SetCreatedAt(*u)
	}
	return aruo
}

// AddCreatedAt adds u to the "created_at" field.
func (aruo *AppRoleUpdateOne) AddCreatedAt(u int32) *AppRoleUpdateOne {
	aruo.mutation.AddCreatedAt(u)
	return aruo
}

// SetUpdatedAt sets the "updated_at" field.
func (aruo *AppRoleUpdateOne) SetUpdatedAt(u uint32) *AppRoleUpdateOne {
	aruo.mutation.ResetUpdatedAt()
	aruo.mutation.SetUpdatedAt(u)
	return aruo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (aruo *AppRoleUpdateOne) AddUpdatedAt(u int32) *AppRoleUpdateOne {
	aruo.mutation.AddUpdatedAt(u)
	return aruo
}

// SetDeletedAt sets the "deleted_at" field.
func (aruo *AppRoleUpdateOne) SetDeletedAt(u uint32) *AppRoleUpdateOne {
	aruo.mutation.ResetDeletedAt()
	aruo.mutation.SetDeletedAt(u)
	return aruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aruo *AppRoleUpdateOne) SetNillableDeletedAt(u *uint32) *AppRoleUpdateOne {
	if u != nil {
		aruo.SetDeletedAt(*u)
	}
	return aruo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (aruo *AppRoleUpdateOne) AddDeletedAt(u int32) *AppRoleUpdateOne {
	aruo.mutation.AddDeletedAt(u)
	return aruo
}

// SetEntID sets the "ent_id" field.
func (aruo *AppRoleUpdateOne) SetEntID(u uuid.UUID) *AppRoleUpdateOne {
	aruo.mutation.SetEntID(u)
	return aruo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (aruo *AppRoleUpdateOne) SetNillableEntID(u *uuid.UUID) *AppRoleUpdateOne {
	if u != nil {
		aruo.SetEntID(*u)
	}
	return aruo
}

// SetCreatedBy sets the "created_by" field.
func (aruo *AppRoleUpdateOne) SetCreatedBy(u uuid.UUID) *AppRoleUpdateOne {
	aruo.mutation.SetCreatedBy(u)
	return aruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (aruo *AppRoleUpdateOne) SetNillableCreatedBy(u *uuid.UUID) *AppRoleUpdateOne {
	if u != nil {
		aruo.SetCreatedBy(*u)
	}
	return aruo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (aruo *AppRoleUpdateOne) ClearCreatedBy() *AppRoleUpdateOne {
	aruo.mutation.ClearCreatedBy()
	return aruo
}

// SetRole sets the "role" field.
func (aruo *AppRoleUpdateOne) SetRole(s string) *AppRoleUpdateOne {
	aruo.mutation.SetRole(s)
	return aruo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (aruo *AppRoleUpdateOne) SetNillableRole(s *string) *AppRoleUpdateOne {
	if s != nil {
		aruo.SetRole(*s)
	}
	return aruo
}

// ClearRole clears the value of the "role" field.
func (aruo *AppRoleUpdateOne) ClearRole() *AppRoleUpdateOne {
	aruo.mutation.ClearRole()
	return aruo
}

// SetDescription sets the "description" field.
func (aruo *AppRoleUpdateOne) SetDescription(s string) *AppRoleUpdateOne {
	aruo.mutation.SetDescription(s)
	return aruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (aruo *AppRoleUpdateOne) SetNillableDescription(s *string) *AppRoleUpdateOne {
	if s != nil {
		aruo.SetDescription(*s)
	}
	return aruo
}

// ClearDescription clears the value of the "description" field.
func (aruo *AppRoleUpdateOne) ClearDescription() *AppRoleUpdateOne {
	aruo.mutation.ClearDescription()
	return aruo
}

// SetAppID sets the "app_id" field.
func (aruo *AppRoleUpdateOne) SetAppID(u uuid.UUID) *AppRoleUpdateOne {
	aruo.mutation.SetAppID(u)
	return aruo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (aruo *AppRoleUpdateOne) SetNillableAppID(u *uuid.UUID) *AppRoleUpdateOne {
	if u != nil {
		aruo.SetAppID(*u)
	}
	return aruo
}

// ClearAppID clears the value of the "app_id" field.
func (aruo *AppRoleUpdateOne) ClearAppID() *AppRoleUpdateOne {
	aruo.mutation.ClearAppID()
	return aruo
}

// SetDefault sets the "default" field.
func (aruo *AppRoleUpdateOne) SetDefault(b bool) *AppRoleUpdateOne {
	aruo.mutation.SetDefault(b)
	return aruo
}

// SetNillableDefault sets the "default" field if the given value is not nil.
func (aruo *AppRoleUpdateOne) SetNillableDefault(b *bool) *AppRoleUpdateOne {
	if b != nil {
		aruo.SetDefault(*b)
	}
	return aruo
}

// ClearDefault clears the value of the "default" field.
func (aruo *AppRoleUpdateOne) ClearDefault() *AppRoleUpdateOne {
	aruo.mutation.ClearDefault()
	return aruo
}

// SetGenesis sets the "genesis" field.
func (aruo *AppRoleUpdateOne) SetGenesis(b bool) *AppRoleUpdateOne {
	aruo.mutation.SetGenesis(b)
	return aruo
}

// SetNillableGenesis sets the "genesis" field if the given value is not nil.
func (aruo *AppRoleUpdateOne) SetNillableGenesis(b *bool) *AppRoleUpdateOne {
	if b != nil {
		aruo.SetGenesis(*b)
	}
	return aruo
}

// ClearGenesis clears the value of the "genesis" field.
func (aruo *AppRoleUpdateOne) ClearGenesis() *AppRoleUpdateOne {
	aruo.mutation.ClearGenesis()
	return aruo
}

// Mutation returns the AppRoleMutation object of the builder.
func (aruo *AppRoleUpdateOne) Mutation() *AppRoleMutation {
	return aruo.mutation
}

// Where appends a list predicates to the AppRoleUpdate builder.
func (aruo *AppRoleUpdateOne) Where(ps ...predicate.AppRole) *AppRoleUpdateOne {
	aruo.mutation.Where(ps...)
	return aruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aruo *AppRoleUpdateOne) Select(field string, fields ...string) *AppRoleUpdateOne {
	aruo.fields = append([]string{field}, fields...)
	return aruo
}

// Save executes the query and returns the updated AppRole entity.
func (aruo *AppRoleUpdateOne) Save(ctx context.Context) (*AppRole, error) {
	aruo.defaults()
	return withHooks(ctx, aruo.sqlSave, aruo.mutation, aruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aruo *AppRoleUpdateOne) SaveX(ctx context.Context) *AppRole {
	node, err := aruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aruo *AppRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := aruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruo *AppRoleUpdateOne) ExecX(ctx context.Context) {
	if err := aruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aruo *AppRoleUpdateOne) defaults() {
	if _, ok := aruo.mutation.UpdatedAt(); !ok {
		v := approle.UpdateDefaultUpdatedAt()
		aruo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aruo *AppRoleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppRoleUpdateOne {
	aruo.modifiers = append(aruo.modifiers, modifiers...)
	return aruo
}

func (aruo *AppRoleUpdateOne) sqlSave(ctx context.Context) (_node *AppRole, err error) {
	_spec := sqlgraph.NewUpdateSpec(approle.Table, approle.Columns, sqlgraph.NewFieldSpec(approle.FieldID, field.TypeUint32))
	id, ok := aruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AppRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, approle.FieldID)
		for _, f := range fields {
			if !approle.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != approle.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aruo.mutation.CreatedAt(); ok {
		_spec.SetField(approle.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := aruo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(approle.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := aruo.mutation.UpdatedAt(); ok {
		_spec.SetField(approle.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := aruo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(approle.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := aruo.mutation.DeletedAt(); ok {
		_spec.SetField(approle.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := aruo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(approle.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := aruo.mutation.EntID(); ok {
		_spec.SetField(approle.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := aruo.mutation.CreatedBy(); ok {
		_spec.SetField(approle.FieldCreatedBy, field.TypeUUID, value)
	}
	if aruo.mutation.CreatedByCleared() {
		_spec.ClearField(approle.FieldCreatedBy, field.TypeUUID)
	}
	if value, ok := aruo.mutation.Role(); ok {
		_spec.SetField(approle.FieldRole, field.TypeString, value)
	}
	if aruo.mutation.RoleCleared() {
		_spec.ClearField(approle.FieldRole, field.TypeString)
	}
	if value, ok := aruo.mutation.Description(); ok {
		_spec.SetField(approle.FieldDescription, field.TypeString, value)
	}
	if aruo.mutation.DescriptionCleared() {
		_spec.ClearField(approle.FieldDescription, field.TypeString)
	}
	if value, ok := aruo.mutation.AppID(); ok {
		_spec.SetField(approle.FieldAppID, field.TypeUUID, value)
	}
	if aruo.mutation.AppIDCleared() {
		_spec.ClearField(approle.FieldAppID, field.TypeUUID)
	}
	if value, ok := aruo.mutation.Default(); ok {
		_spec.SetField(approle.FieldDefault, field.TypeBool, value)
	}
	if aruo.mutation.DefaultCleared() {
		_spec.ClearField(approle.FieldDefault, field.TypeBool)
	}
	if value, ok := aruo.mutation.Genesis(); ok {
		_spec.SetField(approle.FieldGenesis, field.TypeBool, value)
	}
	if aruo.mutation.GenesisCleared() {
		_spec.ClearField(approle.FieldGenesis, field.TypeBool)
	}
	_spec.AddModifiers(aruo.modifiers...)
	_node = &AppRole{config: aruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{approle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aruo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/approleuser"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/predicate"
)

// AppRoleUserDelete is the builder for deleting a AppRoleUser entity.
type AppRoleUserDelete struct {
	config
	hooks    []Hook
	mutation *AppRoleUserMutation
}

// Where appends a list predicates to the AppRoleUserDelete builder.
func (arud *AppRoleUserDelete) Where(ps ...predicate.AppRoleUser) *AppRoleUserDelete {
	arud.mutation.Where(ps...)
	return arud
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (arud *AppRoleUserDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, arud.sqlExec, arud.mutation, arud.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (arud *AppRoleUserDelete) ExecX(ctx context.Context) int {
	n, err := arud.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (arud *AppRoleUserDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(approleuser.Table, sqlgraph.NewFieldSpec(approleuser.FieldID, field.TypeUint32))
	if ps := arud.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, arud.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	arud.mutation.done = true
	return affected, err
}

// AppRoleUserDeleteOne is the builder for deleting a single AppRoleUser entity.
type AppRoleUserDeleteOne struct {
	arud *AppRoleUserDelete
}

// Where appends a list predicates to the AppRoleUserDelete builder.
func (arudo *AppRoleUserDeleteOne) Where(ps ...predicate.AppRoleUser) *AppRoleUserDeleteOne {
	arudo.arud.mutation.Where(ps...)
	return arudo
}

// Exec executes the deletion query.
func (arudo *AppRoleUserDeleteOne) Exec(ctx context.Context) error {
	n, err := arudo.arud.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{approleuser.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (arudo *AppRoleUserDeleteOne) ExecX(ctx context.Context) {
	if err := arudo.Exec(ctx); err != nil {
		panic(err)
	}
}

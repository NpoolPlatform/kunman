// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/appuser/db/ent/generated/oauththirdparty"
	"github.com/google/uuid"
)

// OAuthThirdPartyCreate is the builder for creating a OAuthThirdParty entity.
type OAuthThirdPartyCreate struct {
	config
	mutation *OAuthThirdPartyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (otpc *OAuthThirdPartyCreate) SetCreatedAt(u uint32) *OAuthThirdPartyCreate {
	otpc.mutation.SetCreatedAt(u)
	return otpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (otpc *OAuthThirdPartyCreate) SetNillableCreatedAt(u *uint32) *OAuthThirdPartyCreate {
	if u != nil {
		otpc.SetCreatedAt(*u)
	}
	return otpc
}

// SetUpdatedAt sets the "updated_at" field.
func (otpc *OAuthThirdPartyCreate) SetUpdatedAt(u uint32) *OAuthThirdPartyCreate {
	otpc.mutation.SetUpdatedAt(u)
	return otpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (otpc *OAuthThirdPartyCreate) SetNillableUpdatedAt(u *uint32) *OAuthThirdPartyCreate {
	if u != nil {
		otpc.SetUpdatedAt(*u)
	}
	return otpc
}

// SetDeletedAt sets the "deleted_at" field.
func (otpc *OAuthThirdPartyCreate) SetDeletedAt(u uint32) *OAuthThirdPartyCreate {
	otpc.mutation.SetDeletedAt(u)
	return otpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (otpc *OAuthThirdPartyCreate) SetNillableDeletedAt(u *uint32) *OAuthThirdPartyCreate {
	if u != nil {
		otpc.SetDeletedAt(*u)
	}
	return otpc
}

// SetEntID sets the "ent_id" field.
func (otpc *OAuthThirdPartyCreate) SetEntID(u uuid.UUID) *OAuthThirdPartyCreate {
	otpc.mutation.SetEntID(u)
	return otpc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (otpc *OAuthThirdPartyCreate) SetNillableEntID(u *uuid.UUID) *OAuthThirdPartyCreate {
	if u != nil {
		otpc.SetEntID(*u)
	}
	return otpc
}

// SetClientName sets the "client_name" field.
func (otpc *OAuthThirdPartyCreate) SetClientName(s string) *OAuthThirdPartyCreate {
	otpc.mutation.SetClientName(s)
	return otpc
}

// SetNillableClientName sets the "client_name" field if the given value is not nil.
func (otpc *OAuthThirdPartyCreate) SetNillableClientName(s *string) *OAuthThirdPartyCreate {
	if s != nil {
		otpc.SetClientName(*s)
	}
	return otpc
}

// SetClientTag sets the "client_tag" field.
func (otpc *OAuthThirdPartyCreate) SetClientTag(s string) *OAuthThirdPartyCreate {
	otpc.mutation.SetClientTag(s)
	return otpc
}

// SetNillableClientTag sets the "client_tag" field if the given value is not nil.
func (otpc *OAuthThirdPartyCreate) SetNillableClientTag(s *string) *OAuthThirdPartyCreate {
	if s != nil {
		otpc.SetClientTag(*s)
	}
	return otpc
}

// SetClientLogoURL sets the "client_logo_url" field.
func (otpc *OAuthThirdPartyCreate) SetClientLogoURL(s string) *OAuthThirdPartyCreate {
	otpc.mutation.SetClientLogoURL(s)
	return otpc
}

// SetNillableClientLogoURL sets the "client_logo_url" field if the given value is not nil.
func (otpc *OAuthThirdPartyCreate) SetNillableClientLogoURL(s *string) *OAuthThirdPartyCreate {
	if s != nil {
		otpc.SetClientLogoURL(*s)
	}
	return otpc
}

// SetClientOauthURL sets the "client_oauth_url" field.
func (otpc *OAuthThirdPartyCreate) SetClientOauthURL(s string) *OAuthThirdPartyCreate {
	otpc.mutation.SetClientOauthURL(s)
	return otpc
}

// SetNillableClientOauthURL sets the "client_oauth_url" field if the given value is not nil.
func (otpc *OAuthThirdPartyCreate) SetNillableClientOauthURL(s *string) *OAuthThirdPartyCreate {
	if s != nil {
		otpc.SetClientOauthURL(*s)
	}
	return otpc
}

// SetResponseType sets the "response_type" field.
func (otpc *OAuthThirdPartyCreate) SetResponseType(s string) *OAuthThirdPartyCreate {
	otpc.mutation.SetResponseType(s)
	return otpc
}

// SetNillableResponseType sets the "response_type" field if the given value is not nil.
func (otpc *OAuthThirdPartyCreate) SetNillableResponseType(s *string) *OAuthThirdPartyCreate {
	if s != nil {
		otpc.SetResponseType(*s)
	}
	return otpc
}

// SetScope sets the "scope" field.
func (otpc *OAuthThirdPartyCreate) SetScope(s string) *OAuthThirdPartyCreate {
	otpc.mutation.SetScope(s)
	return otpc
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (otpc *OAuthThirdPartyCreate) SetNillableScope(s *string) *OAuthThirdPartyCreate {
	if s != nil {
		otpc.SetScope(*s)
	}
	return otpc
}

// SetID sets the "id" field.
func (otpc *OAuthThirdPartyCreate) SetID(u uint32) *OAuthThirdPartyCreate {
	otpc.mutation.SetID(u)
	return otpc
}

// Mutation returns the OAuthThirdPartyMutation object of the builder.
func (otpc *OAuthThirdPartyCreate) Mutation() *OAuthThirdPartyMutation {
	return otpc.mutation
}

// Save creates the OAuthThirdParty in the database.
func (otpc *OAuthThirdPartyCreate) Save(ctx context.Context) (*OAuthThirdParty, error) {
	otpc.defaults()
	return withHooks(ctx, otpc.sqlSave, otpc.mutation, otpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (otpc *OAuthThirdPartyCreate) SaveX(ctx context.Context) *OAuthThirdParty {
	v, err := otpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (otpc *OAuthThirdPartyCreate) Exec(ctx context.Context) error {
	_, err := otpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otpc *OAuthThirdPartyCreate) ExecX(ctx context.Context) {
	if err := otpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (otpc *OAuthThirdPartyCreate) defaults() {
	if _, ok := otpc.mutation.CreatedAt(); !ok {
		v := oauththirdparty.DefaultCreatedAt()
		otpc.mutation.SetCreatedAt(v)
	}
	if _, ok := otpc.mutation.UpdatedAt(); !ok {
		v := oauththirdparty.DefaultUpdatedAt()
		otpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := otpc.mutation.DeletedAt(); !ok {
		v := oauththirdparty.DefaultDeletedAt()
		otpc.mutation.SetDeletedAt(v)
	}
	if _, ok := otpc.mutation.EntID(); !ok {
		v := oauththirdparty.DefaultEntID()
		otpc.mutation.SetEntID(v)
	}
	if _, ok := otpc.mutation.ClientName(); !ok {
		v := oauththirdparty.DefaultClientName
		otpc.mutation.SetClientName(v)
	}
	if _, ok := otpc.mutation.ClientTag(); !ok {
		v := oauththirdparty.DefaultClientTag
		otpc.mutation.SetClientTag(v)
	}
	if _, ok := otpc.mutation.ClientLogoURL(); !ok {
		v := oauththirdparty.DefaultClientLogoURL
		otpc.mutation.SetClientLogoURL(v)
	}
	if _, ok := otpc.mutation.ClientOauthURL(); !ok {
		v := oauththirdparty.DefaultClientOauthURL
		otpc.mutation.SetClientOauthURL(v)
	}
	if _, ok := otpc.mutation.ResponseType(); !ok {
		v := oauththirdparty.DefaultResponseType
		otpc.mutation.SetResponseType(v)
	}
	if _, ok := otpc.mutation.Scope(); !ok {
		v := oauththirdparty.DefaultScope
		otpc.mutation.SetScope(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (otpc *OAuthThirdPartyCreate) check() error {
	if _, ok := otpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "OAuthThirdParty.created_at"`)}
	}
	if _, ok := otpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "OAuthThirdParty.updated_at"`)}
	}
	if _, ok := otpc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "OAuthThirdParty.deleted_at"`)}
	}
	if _, ok := otpc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "OAuthThirdParty.ent_id"`)}
	}
	return nil
}

func (otpc *OAuthThirdPartyCreate) sqlSave(ctx context.Context) (*OAuthThirdParty, error) {
	if err := otpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := otpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, otpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	otpc.mutation.id = &_node.ID
	otpc.mutation.done = true
	return _node, nil
}

func (otpc *OAuthThirdPartyCreate) createSpec() (*OAuthThirdParty, *sqlgraph.CreateSpec) {
	var (
		_node = &OAuthThirdParty{config: otpc.config}
		_spec = sqlgraph.NewCreateSpec(oauththirdparty.Table, sqlgraph.NewFieldSpec(oauththirdparty.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = otpc.conflict
	if id, ok := otpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := otpc.mutation.CreatedAt(); ok {
		_spec.SetField(oauththirdparty.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := otpc.mutation.UpdatedAt(); ok {
		_spec.SetField(oauththirdparty.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := otpc.mutation.DeletedAt(); ok {
		_spec.SetField(oauththirdparty.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := otpc.mutation.EntID(); ok {
		_spec.SetField(oauththirdparty.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := otpc.mutation.ClientName(); ok {
		_spec.SetField(oauththirdparty.FieldClientName, field.TypeString, value)
		_node.ClientName = value
	}
	if value, ok := otpc.mutation.ClientTag(); ok {
		_spec.SetField(oauththirdparty.FieldClientTag, field.TypeString, value)
		_node.ClientTag = value
	}
	if value, ok := otpc.mutation.ClientLogoURL(); ok {
		_spec.SetField(oauththirdparty.FieldClientLogoURL, field.TypeString, value)
		_node.ClientLogoURL = value
	}
	if value, ok := otpc.mutation.ClientOauthURL(); ok {
		_spec.SetField(oauththirdparty.FieldClientOauthURL, field.TypeString, value)
		_node.ClientOauthURL = value
	}
	if value, ok := otpc.mutation.ResponseType(); ok {
		_spec.SetField(oauththirdparty.FieldResponseType, field.TypeString, value)
		_node.ResponseType = value
	}
	if value, ok := otpc.mutation.Scope(); ok {
		_spec.SetField(oauththirdparty.FieldScope, field.TypeString, value)
		_node.Scope = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OAuthThirdParty.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OAuthThirdPartyUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (otpc *OAuthThirdPartyCreate) OnConflict(opts ...sql.ConflictOption) *OAuthThirdPartyUpsertOne {
	otpc.conflict = opts
	return &OAuthThirdPartyUpsertOne{
		create: otpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OAuthThirdParty.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (otpc *OAuthThirdPartyCreate) OnConflictColumns(columns ...string) *OAuthThirdPartyUpsertOne {
	otpc.conflict = append(otpc.conflict, sql.ConflictColumns(columns...))
	return &OAuthThirdPartyUpsertOne{
		create: otpc,
	}
}

type (
	// OAuthThirdPartyUpsertOne is the builder for "upsert"-ing
	//  one OAuthThirdParty node.
	OAuthThirdPartyUpsertOne struct {
		create *OAuthThirdPartyCreate
	}

	// OAuthThirdPartyUpsert is the "OnConflict" setter.
	OAuthThirdPartyUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *OAuthThirdPartyUpsert) SetCreatedAt(v uint32) *OAuthThirdPartyUpsert {
	u.Set(oauththirdparty.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsert) UpdateCreatedAt() *OAuthThirdPartyUpsert {
	u.SetExcluded(oauththirdparty.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OAuthThirdPartyUpsert) AddCreatedAt(v uint32) *OAuthThirdPartyUpsert {
	u.Add(oauththirdparty.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OAuthThirdPartyUpsert) SetUpdatedAt(v uint32) *OAuthThirdPartyUpsert {
	u.Set(oauththirdparty.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsert) UpdateUpdatedAt() *OAuthThirdPartyUpsert {
	u.SetExcluded(oauththirdparty.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OAuthThirdPartyUpsert) AddUpdatedAt(v uint32) *OAuthThirdPartyUpsert {
	u.Add(oauththirdparty.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OAuthThirdPartyUpsert) SetDeletedAt(v uint32) *OAuthThirdPartyUpsert {
	u.Set(oauththirdparty.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsert) UpdateDeletedAt() *OAuthThirdPartyUpsert {
	u.SetExcluded(oauththirdparty.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OAuthThirdPartyUpsert) AddDeletedAt(v uint32) *OAuthThirdPartyUpsert {
	u.Add(oauththirdparty.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *OAuthThirdPartyUpsert) SetEntID(v uuid.UUID) *OAuthThirdPartyUpsert {
	u.Set(oauththirdparty.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsert) UpdateEntID() *OAuthThirdPartyUpsert {
	u.SetExcluded(oauththirdparty.FieldEntID)
	return u
}

// SetClientName sets the "client_name" field.
func (u *OAuthThirdPartyUpsert) SetClientName(v string) *OAuthThirdPartyUpsert {
	u.Set(oauththirdparty.FieldClientName, v)
	return u
}

// UpdateClientName sets the "client_name" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsert) UpdateClientName() *OAuthThirdPartyUpsert {
	u.SetExcluded(oauththirdparty.FieldClientName)
	return u
}

// ClearClientName clears the value of the "client_name" field.
func (u *OAuthThirdPartyUpsert) ClearClientName() *OAuthThirdPartyUpsert {
	u.SetNull(oauththirdparty.FieldClientName)
	return u
}

// SetClientTag sets the "client_tag" field.
func (u *OAuthThirdPartyUpsert) SetClientTag(v string) *OAuthThirdPartyUpsert {
	u.Set(oauththirdparty.FieldClientTag, v)
	return u
}

// UpdateClientTag sets the "client_tag" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsert) UpdateClientTag() *OAuthThirdPartyUpsert {
	u.SetExcluded(oauththirdparty.FieldClientTag)
	return u
}

// ClearClientTag clears the value of the "client_tag" field.
func (u *OAuthThirdPartyUpsert) ClearClientTag() *OAuthThirdPartyUpsert {
	u.SetNull(oauththirdparty.FieldClientTag)
	return u
}

// SetClientLogoURL sets the "client_logo_url" field.
func (u *OAuthThirdPartyUpsert) SetClientLogoURL(v string) *OAuthThirdPartyUpsert {
	u.Set(oauththirdparty.FieldClientLogoURL, v)
	return u
}

// UpdateClientLogoURL sets the "client_logo_url" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsert) UpdateClientLogoURL() *OAuthThirdPartyUpsert {
	u.SetExcluded(oauththirdparty.FieldClientLogoURL)
	return u
}

// ClearClientLogoURL clears the value of the "client_logo_url" field.
func (u *OAuthThirdPartyUpsert) ClearClientLogoURL() *OAuthThirdPartyUpsert {
	u.SetNull(oauththirdparty.FieldClientLogoURL)
	return u
}

// SetClientOauthURL sets the "client_oauth_url" field.
func (u *OAuthThirdPartyUpsert) SetClientOauthURL(v string) *OAuthThirdPartyUpsert {
	u.Set(oauththirdparty.FieldClientOauthURL, v)
	return u
}

// UpdateClientOauthURL sets the "client_oauth_url" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsert) UpdateClientOauthURL() *OAuthThirdPartyUpsert {
	u.SetExcluded(oauththirdparty.FieldClientOauthURL)
	return u
}

// ClearClientOauthURL clears the value of the "client_oauth_url" field.
func (u *OAuthThirdPartyUpsert) ClearClientOauthURL() *OAuthThirdPartyUpsert {
	u.SetNull(oauththirdparty.FieldClientOauthURL)
	return u
}

// SetResponseType sets the "response_type" field.
func (u *OAuthThirdPartyUpsert) SetResponseType(v string) *OAuthThirdPartyUpsert {
	u.Set(oauththirdparty.FieldResponseType, v)
	return u
}

// UpdateResponseType sets the "response_type" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsert) UpdateResponseType() *OAuthThirdPartyUpsert {
	u.SetExcluded(oauththirdparty.FieldResponseType)
	return u
}

// ClearResponseType clears the value of the "response_type" field.
func (u *OAuthThirdPartyUpsert) ClearResponseType() *OAuthThirdPartyUpsert {
	u.SetNull(oauththirdparty.FieldResponseType)
	return u
}

// SetScope sets the "scope" field.
func (u *OAuthThirdPartyUpsert) SetScope(v string) *OAuthThirdPartyUpsert {
	u.Set(oauththirdparty.FieldScope, v)
	return u
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsert) UpdateScope() *OAuthThirdPartyUpsert {
	u.SetExcluded(oauththirdparty.FieldScope)
	return u
}

// ClearScope clears the value of the "scope" field.
func (u *OAuthThirdPartyUpsert) ClearScope() *OAuthThirdPartyUpsert {
	u.SetNull(oauththirdparty.FieldScope)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OAuthThirdParty.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oauththirdparty.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OAuthThirdPartyUpsertOne) UpdateNewValues() *OAuthThirdPartyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(oauththirdparty.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OAuthThirdParty.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OAuthThirdPartyUpsertOne) Ignore() *OAuthThirdPartyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OAuthThirdPartyUpsertOne) DoNothing() *OAuthThirdPartyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OAuthThirdPartyCreate.OnConflict
// documentation for more info.
func (u *OAuthThirdPartyUpsertOne) Update(set func(*OAuthThirdPartyUpsert)) *OAuthThirdPartyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OAuthThirdPartyUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OAuthThirdPartyUpsertOne) SetCreatedAt(v uint32) *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OAuthThirdPartyUpsertOne) AddCreatedAt(v uint32) *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsertOne) UpdateCreatedAt() *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OAuthThirdPartyUpsertOne) SetUpdatedAt(v uint32) *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OAuthThirdPartyUpsertOne) AddUpdatedAt(v uint32) *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsertOne) UpdateUpdatedAt() *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OAuthThirdPartyUpsertOne) SetDeletedAt(v uint32) *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OAuthThirdPartyUpsertOne) AddDeletedAt(v uint32) *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsertOne) UpdateDeletedAt() *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *OAuthThirdPartyUpsertOne) SetEntID(v uuid.UUID) *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsertOne) UpdateEntID() *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.UpdateEntID()
	})
}

// SetClientName sets the "client_name" field.
func (u *OAuthThirdPartyUpsertOne) SetClientName(v string) *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.SetClientName(v)
	})
}

// UpdateClientName sets the "client_name" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsertOne) UpdateClientName() *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.UpdateClientName()
	})
}

// ClearClientName clears the value of the "client_name" field.
func (u *OAuthThirdPartyUpsertOne) ClearClientName() *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.ClearClientName()
	})
}

// SetClientTag sets the "client_tag" field.
func (u *OAuthThirdPartyUpsertOne) SetClientTag(v string) *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.SetClientTag(v)
	})
}

// UpdateClientTag sets the "client_tag" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsertOne) UpdateClientTag() *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.UpdateClientTag()
	})
}

// ClearClientTag clears the value of the "client_tag" field.
func (u *OAuthThirdPartyUpsertOne) ClearClientTag() *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.ClearClientTag()
	})
}

// SetClientLogoURL sets the "client_logo_url" field.
func (u *OAuthThirdPartyUpsertOne) SetClientLogoURL(v string) *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.SetClientLogoURL(v)
	})
}

// UpdateClientLogoURL sets the "client_logo_url" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsertOne) UpdateClientLogoURL() *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.UpdateClientLogoURL()
	})
}

// ClearClientLogoURL clears the value of the "client_logo_url" field.
func (u *OAuthThirdPartyUpsertOne) ClearClientLogoURL() *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.ClearClientLogoURL()
	})
}

// SetClientOauthURL sets the "client_oauth_url" field.
func (u *OAuthThirdPartyUpsertOne) SetClientOauthURL(v string) *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.SetClientOauthURL(v)
	})
}

// UpdateClientOauthURL sets the "client_oauth_url" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsertOne) UpdateClientOauthURL() *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.UpdateClientOauthURL()
	})
}

// ClearClientOauthURL clears the value of the "client_oauth_url" field.
func (u *OAuthThirdPartyUpsertOne) ClearClientOauthURL() *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.ClearClientOauthURL()
	})
}

// SetResponseType sets the "response_type" field.
func (u *OAuthThirdPartyUpsertOne) SetResponseType(v string) *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.SetResponseType(v)
	})
}

// UpdateResponseType sets the "response_type" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsertOne) UpdateResponseType() *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.UpdateResponseType()
	})
}

// ClearResponseType clears the value of the "response_type" field.
func (u *OAuthThirdPartyUpsertOne) ClearResponseType() *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.ClearResponseType()
	})
}

// SetScope sets the "scope" field.
func (u *OAuthThirdPartyUpsertOne) SetScope(v string) *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.SetScope(v)
	})
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsertOne) UpdateScope() *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.UpdateScope()
	})
}

// ClearScope clears the value of the "scope" field.
func (u *OAuthThirdPartyUpsertOne) ClearScope() *OAuthThirdPartyUpsertOne {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.ClearScope()
	})
}

// Exec executes the query.
func (u *OAuthThirdPartyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for OAuthThirdPartyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OAuthThirdPartyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OAuthThirdPartyUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OAuthThirdPartyUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OAuthThirdPartyCreateBulk is the builder for creating many OAuthThirdParty entities in bulk.
type OAuthThirdPartyCreateBulk struct {
	config
	err      error
	builders []*OAuthThirdPartyCreate
	conflict []sql.ConflictOption
}

// Save creates the OAuthThirdParty entities in the database.
func (otpcb *OAuthThirdPartyCreateBulk) Save(ctx context.Context) ([]*OAuthThirdParty, error) {
	if otpcb.err != nil {
		return nil, otpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(otpcb.builders))
	nodes := make([]*OAuthThirdParty, len(otpcb.builders))
	mutators := make([]Mutator, len(otpcb.builders))
	for i := range otpcb.builders {
		func(i int, root context.Context) {
			builder := otpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OAuthThirdPartyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, otpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = otpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, otpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, otpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (otpcb *OAuthThirdPartyCreateBulk) SaveX(ctx context.Context) []*OAuthThirdParty {
	v, err := otpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (otpcb *OAuthThirdPartyCreateBulk) Exec(ctx context.Context) error {
	_, err := otpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otpcb *OAuthThirdPartyCreateBulk) ExecX(ctx context.Context) {
	if err := otpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OAuthThirdParty.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OAuthThirdPartyUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (otpcb *OAuthThirdPartyCreateBulk) OnConflict(opts ...sql.ConflictOption) *OAuthThirdPartyUpsertBulk {
	otpcb.conflict = opts
	return &OAuthThirdPartyUpsertBulk{
		create: otpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OAuthThirdParty.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (otpcb *OAuthThirdPartyCreateBulk) OnConflictColumns(columns ...string) *OAuthThirdPartyUpsertBulk {
	otpcb.conflict = append(otpcb.conflict, sql.ConflictColumns(columns...))
	return &OAuthThirdPartyUpsertBulk{
		create: otpcb,
	}
}

// OAuthThirdPartyUpsertBulk is the builder for "upsert"-ing
// a bulk of OAuthThirdParty nodes.
type OAuthThirdPartyUpsertBulk struct {
	create *OAuthThirdPartyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OAuthThirdParty.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oauththirdparty.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OAuthThirdPartyUpsertBulk) UpdateNewValues() *OAuthThirdPartyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(oauththirdparty.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OAuthThirdParty.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OAuthThirdPartyUpsertBulk) Ignore() *OAuthThirdPartyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OAuthThirdPartyUpsertBulk) DoNothing() *OAuthThirdPartyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OAuthThirdPartyCreateBulk.OnConflict
// documentation for more info.
func (u *OAuthThirdPartyUpsertBulk) Update(set func(*OAuthThirdPartyUpsert)) *OAuthThirdPartyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OAuthThirdPartyUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OAuthThirdPartyUpsertBulk) SetCreatedAt(v uint32) *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OAuthThirdPartyUpsertBulk) AddCreatedAt(v uint32) *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsertBulk) UpdateCreatedAt() *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OAuthThirdPartyUpsertBulk) SetUpdatedAt(v uint32) *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OAuthThirdPartyUpsertBulk) AddUpdatedAt(v uint32) *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsertBulk) UpdateUpdatedAt() *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OAuthThirdPartyUpsertBulk) SetDeletedAt(v uint32) *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OAuthThirdPartyUpsertBulk) AddDeletedAt(v uint32) *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsertBulk) UpdateDeletedAt() *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *OAuthThirdPartyUpsertBulk) SetEntID(v uuid.UUID) *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsertBulk) UpdateEntID() *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.UpdateEntID()
	})
}

// SetClientName sets the "client_name" field.
func (u *OAuthThirdPartyUpsertBulk) SetClientName(v string) *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.SetClientName(v)
	})
}

// UpdateClientName sets the "client_name" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsertBulk) UpdateClientName() *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.UpdateClientName()
	})
}

// ClearClientName clears the value of the "client_name" field.
func (u *OAuthThirdPartyUpsertBulk) ClearClientName() *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.ClearClientName()
	})
}

// SetClientTag sets the "client_tag" field.
func (u *OAuthThirdPartyUpsertBulk) SetClientTag(v string) *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.SetClientTag(v)
	})
}

// UpdateClientTag sets the "client_tag" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsertBulk) UpdateClientTag() *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.UpdateClientTag()
	})
}

// ClearClientTag clears the value of the "client_tag" field.
func (u *OAuthThirdPartyUpsertBulk) ClearClientTag() *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.ClearClientTag()
	})
}

// SetClientLogoURL sets the "client_logo_url" field.
func (u *OAuthThirdPartyUpsertBulk) SetClientLogoURL(v string) *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.SetClientLogoURL(v)
	})
}

// UpdateClientLogoURL sets the "client_logo_url" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsertBulk) UpdateClientLogoURL() *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.UpdateClientLogoURL()
	})
}

// ClearClientLogoURL clears the value of the "client_logo_url" field.
func (u *OAuthThirdPartyUpsertBulk) ClearClientLogoURL() *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.ClearClientLogoURL()
	})
}

// SetClientOauthURL sets the "client_oauth_url" field.
func (u *OAuthThirdPartyUpsertBulk) SetClientOauthURL(v string) *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.SetClientOauthURL(v)
	})
}

// UpdateClientOauthURL sets the "client_oauth_url" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsertBulk) UpdateClientOauthURL() *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.UpdateClientOauthURL()
	})
}

// ClearClientOauthURL clears the value of the "client_oauth_url" field.
func (u *OAuthThirdPartyUpsertBulk) ClearClientOauthURL() *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.ClearClientOauthURL()
	})
}

// SetResponseType sets the "response_type" field.
func (u *OAuthThirdPartyUpsertBulk) SetResponseType(v string) *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.SetResponseType(v)
	})
}

// UpdateResponseType sets the "response_type" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsertBulk) UpdateResponseType() *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.UpdateResponseType()
	})
}

// ClearResponseType clears the value of the "response_type" field.
func (u *OAuthThirdPartyUpsertBulk) ClearResponseType() *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.ClearResponseType()
	})
}

// SetScope sets the "scope" field.
func (u *OAuthThirdPartyUpsertBulk) SetScope(v string) *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.SetScope(v)
	})
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *OAuthThirdPartyUpsertBulk) UpdateScope() *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.UpdateScope()
	})
}

// ClearScope clears the value of the "scope" field.
func (u *OAuthThirdPartyUpsertBulk) ClearScope() *OAuthThirdPartyUpsertBulk {
	return u.Update(func(s *OAuthThirdPartyUpsert) {
		s.ClearScope()
	})
}

// Exec executes the query.
func (u *OAuthThirdPartyUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the OAuthThirdPartyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for OAuthThirdPartyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OAuthThirdPartyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/subscriptionorderstate"
	"github.com/google/uuid"
)

// SubscriptionOrderStateCreate is the builder for creating a SubscriptionOrderState entity.
type SubscriptionOrderStateCreate struct {
	config
	mutation *SubscriptionOrderStateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (sosc *SubscriptionOrderStateCreate) SetEntID(u uuid.UUID) *SubscriptionOrderStateCreate {
	sosc.mutation.SetEntID(u)
	return sosc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (sosc *SubscriptionOrderStateCreate) SetNillableEntID(u *uuid.UUID) *SubscriptionOrderStateCreate {
	if u != nil {
		sosc.SetEntID(*u)
	}
	return sosc
}

// SetOrderID sets the "order_id" field.
func (sosc *SubscriptionOrderStateCreate) SetOrderID(u uuid.UUID) *SubscriptionOrderStateCreate {
	sosc.mutation.SetOrderID(u)
	return sosc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (sosc *SubscriptionOrderStateCreate) SetNillableOrderID(u *uuid.UUID) *SubscriptionOrderStateCreate {
	if u != nil {
		sosc.SetOrderID(*u)
	}
	return sosc
}

// SetPaymentID sets the "payment_id" field.
func (sosc *SubscriptionOrderStateCreate) SetPaymentID(u uuid.UUID) *SubscriptionOrderStateCreate {
	sosc.mutation.SetPaymentID(u)
	return sosc
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (sosc *SubscriptionOrderStateCreate) SetNillablePaymentID(u *uuid.UUID) *SubscriptionOrderStateCreate {
	if u != nil {
		sosc.SetPaymentID(*u)
	}
	return sosc
}

// SetPaidAt sets the "paid_at" field.
func (sosc *SubscriptionOrderStateCreate) SetPaidAt(u uint32) *SubscriptionOrderStateCreate {
	sosc.mutation.SetPaidAt(u)
	return sosc
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (sosc *SubscriptionOrderStateCreate) SetNillablePaidAt(u *uint32) *SubscriptionOrderStateCreate {
	if u != nil {
		sosc.SetPaidAt(*u)
	}
	return sosc
}

// SetUserSetPaid sets the "user_set_paid" field.
func (sosc *SubscriptionOrderStateCreate) SetUserSetPaid(b bool) *SubscriptionOrderStateCreate {
	sosc.mutation.SetUserSetPaid(b)
	return sosc
}

// SetNillableUserSetPaid sets the "user_set_paid" field if the given value is not nil.
func (sosc *SubscriptionOrderStateCreate) SetNillableUserSetPaid(b *bool) *SubscriptionOrderStateCreate {
	if b != nil {
		sosc.SetUserSetPaid(*b)
	}
	return sosc
}

// SetUserSetCanceled sets the "user_set_canceled" field.
func (sosc *SubscriptionOrderStateCreate) SetUserSetCanceled(b bool) *SubscriptionOrderStateCreate {
	sosc.mutation.SetUserSetCanceled(b)
	return sosc
}

// SetNillableUserSetCanceled sets the "user_set_canceled" field if the given value is not nil.
func (sosc *SubscriptionOrderStateCreate) SetNillableUserSetCanceled(b *bool) *SubscriptionOrderStateCreate {
	if b != nil {
		sosc.SetUserSetCanceled(*b)
	}
	return sosc
}

// SetAdminSetCanceled sets the "admin_set_canceled" field.
func (sosc *SubscriptionOrderStateCreate) SetAdminSetCanceled(b bool) *SubscriptionOrderStateCreate {
	sosc.mutation.SetAdminSetCanceled(b)
	return sosc
}

// SetNillableAdminSetCanceled sets the "admin_set_canceled" field if the given value is not nil.
func (sosc *SubscriptionOrderStateCreate) SetNillableAdminSetCanceled(b *bool) *SubscriptionOrderStateCreate {
	if b != nil {
		sosc.SetAdminSetCanceled(*b)
	}
	return sosc
}

// SetPaymentState sets the "payment_state" field.
func (sosc *SubscriptionOrderStateCreate) SetPaymentState(s string) *SubscriptionOrderStateCreate {
	sosc.mutation.SetPaymentState(s)
	return sosc
}

// SetNillablePaymentState sets the "payment_state" field if the given value is not nil.
func (sosc *SubscriptionOrderStateCreate) SetNillablePaymentState(s *string) *SubscriptionOrderStateCreate {
	if s != nil {
		sosc.SetPaymentState(*s)
	}
	return sosc
}

// SetCancelState sets the "cancel_state" field.
func (sosc *SubscriptionOrderStateCreate) SetCancelState(s string) *SubscriptionOrderStateCreate {
	sosc.mutation.SetCancelState(s)
	return sosc
}

// SetNillableCancelState sets the "cancel_state" field if the given value is not nil.
func (sosc *SubscriptionOrderStateCreate) SetNillableCancelState(s *string) *SubscriptionOrderStateCreate {
	if s != nil {
		sosc.SetCancelState(*s)
	}
	return sosc
}

// SetCanceledAt sets the "canceled_at" field.
func (sosc *SubscriptionOrderStateCreate) SetCanceledAt(u uint32) *SubscriptionOrderStateCreate {
	sosc.mutation.SetCanceledAt(u)
	return sosc
}

// SetNillableCanceledAt sets the "canceled_at" field if the given value is not nil.
func (sosc *SubscriptionOrderStateCreate) SetNillableCanceledAt(u *uint32) *SubscriptionOrderStateCreate {
	if u != nil {
		sosc.SetCanceledAt(*u)
	}
	return sosc
}

// SetID sets the "id" field.
func (sosc *SubscriptionOrderStateCreate) SetID(u uint32) *SubscriptionOrderStateCreate {
	sosc.mutation.SetID(u)
	return sosc
}

// Mutation returns the SubscriptionOrderStateMutation object of the builder.
func (sosc *SubscriptionOrderStateCreate) Mutation() *SubscriptionOrderStateMutation {
	return sosc.mutation
}

// Save creates the SubscriptionOrderState in the database.
func (sosc *SubscriptionOrderStateCreate) Save(ctx context.Context) (*SubscriptionOrderState, error) {
	sosc.defaults()
	return withHooks(ctx, sosc.sqlSave, sosc.mutation, sosc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sosc *SubscriptionOrderStateCreate) SaveX(ctx context.Context) *SubscriptionOrderState {
	v, err := sosc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sosc *SubscriptionOrderStateCreate) Exec(ctx context.Context) error {
	_, err := sosc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sosc *SubscriptionOrderStateCreate) ExecX(ctx context.Context) {
	if err := sosc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sosc *SubscriptionOrderStateCreate) defaults() {
	if _, ok := sosc.mutation.EntID(); !ok {
		v := subscriptionorderstate.DefaultEntID()
		sosc.mutation.SetEntID(v)
	}
	if _, ok := sosc.mutation.OrderID(); !ok {
		v := subscriptionorderstate.DefaultOrderID()
		sosc.mutation.SetOrderID(v)
	}
	if _, ok := sosc.mutation.PaymentID(); !ok {
		v := subscriptionorderstate.DefaultPaymentID()
		sosc.mutation.SetPaymentID(v)
	}
	if _, ok := sosc.mutation.PaidAt(); !ok {
		v := subscriptionorderstate.DefaultPaidAt
		sosc.mutation.SetPaidAt(v)
	}
	if _, ok := sosc.mutation.UserSetPaid(); !ok {
		v := subscriptionorderstate.DefaultUserSetPaid
		sosc.mutation.SetUserSetPaid(v)
	}
	if _, ok := sosc.mutation.UserSetCanceled(); !ok {
		v := subscriptionorderstate.DefaultUserSetCanceled
		sosc.mutation.SetUserSetCanceled(v)
	}
	if _, ok := sosc.mutation.AdminSetCanceled(); !ok {
		v := subscriptionorderstate.DefaultAdminSetCanceled
		sosc.mutation.SetAdminSetCanceled(v)
	}
	if _, ok := sosc.mutation.PaymentState(); !ok {
		v := subscriptionorderstate.DefaultPaymentState
		sosc.mutation.SetPaymentState(v)
	}
	if _, ok := sosc.mutation.CancelState(); !ok {
		v := subscriptionorderstate.DefaultCancelState
		sosc.mutation.SetCancelState(v)
	}
	if _, ok := sosc.mutation.CanceledAt(); !ok {
		v := subscriptionorderstate.DefaultCanceledAt
		sosc.mutation.SetCanceledAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sosc *SubscriptionOrderStateCreate) check() error {
	if _, ok := sosc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "SubscriptionOrderState.ent_id"`)}
	}
	return nil
}

func (sosc *SubscriptionOrderStateCreate) sqlSave(ctx context.Context) (*SubscriptionOrderState, error) {
	if err := sosc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sosc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sosc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	sosc.mutation.id = &_node.ID
	sosc.mutation.done = true
	return _node, nil
}

func (sosc *SubscriptionOrderStateCreate) createSpec() (*SubscriptionOrderState, *sqlgraph.CreateSpec) {
	var (
		_node = &SubscriptionOrderState{config: sosc.config}
		_spec = sqlgraph.NewCreateSpec(subscriptionorderstate.Table, sqlgraph.NewFieldSpec(subscriptionorderstate.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = sosc.conflict
	if id, ok := sosc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sosc.mutation.EntID(); ok {
		_spec.SetField(subscriptionorderstate.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := sosc.mutation.OrderID(); ok {
		_spec.SetField(subscriptionorderstate.FieldOrderID, field.TypeUUID, value)
		_node.OrderID = value
	}
	if value, ok := sosc.mutation.PaymentID(); ok {
		_spec.SetField(subscriptionorderstate.FieldPaymentID, field.TypeUUID, value)
		_node.PaymentID = value
	}
	if value, ok := sosc.mutation.PaidAt(); ok {
		_spec.SetField(subscriptionorderstate.FieldPaidAt, field.TypeUint32, value)
		_node.PaidAt = value
	}
	if value, ok := sosc.mutation.UserSetPaid(); ok {
		_spec.SetField(subscriptionorderstate.FieldUserSetPaid, field.TypeBool, value)
		_node.UserSetPaid = value
	}
	if value, ok := sosc.mutation.UserSetCanceled(); ok {
		_spec.SetField(subscriptionorderstate.FieldUserSetCanceled, field.TypeBool, value)
		_node.UserSetCanceled = value
	}
	if value, ok := sosc.mutation.AdminSetCanceled(); ok {
		_spec.SetField(subscriptionorderstate.FieldAdminSetCanceled, field.TypeBool, value)
		_node.AdminSetCanceled = value
	}
	if value, ok := sosc.mutation.PaymentState(); ok {
		_spec.SetField(subscriptionorderstate.FieldPaymentState, field.TypeString, value)
		_node.PaymentState = value
	}
	if value, ok := sosc.mutation.CancelState(); ok {
		_spec.SetField(subscriptionorderstate.FieldCancelState, field.TypeString, value)
		_node.CancelState = value
	}
	if value, ok := sosc.mutation.CanceledAt(); ok {
		_spec.SetField(subscriptionorderstate.FieldCanceledAt, field.TypeUint32, value)
		_node.CanceledAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscriptionOrderState.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionOrderStateUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (sosc *SubscriptionOrderStateCreate) OnConflict(opts ...sql.ConflictOption) *SubscriptionOrderStateUpsertOne {
	sosc.conflict = opts
	return &SubscriptionOrderStateUpsertOne{
		create: sosc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscriptionOrderState.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sosc *SubscriptionOrderStateCreate) OnConflictColumns(columns ...string) *SubscriptionOrderStateUpsertOne {
	sosc.conflict = append(sosc.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionOrderStateUpsertOne{
		create: sosc,
	}
}

type (
	// SubscriptionOrderStateUpsertOne is the builder for "upsert"-ing
	//  one SubscriptionOrderState node.
	SubscriptionOrderStateUpsertOne struct {
		create *SubscriptionOrderStateCreate
	}

	// SubscriptionOrderStateUpsert is the "OnConflict" setter.
	SubscriptionOrderStateUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *SubscriptionOrderStateUpsert) SetEntID(v uuid.UUID) *SubscriptionOrderStateUpsert {
	u.Set(subscriptionorderstate.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsert) UpdateEntID() *SubscriptionOrderStateUpsert {
	u.SetExcluded(subscriptionorderstate.FieldEntID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *SubscriptionOrderStateUpsert) SetOrderID(v uuid.UUID) *SubscriptionOrderStateUpsert {
	u.Set(subscriptionorderstate.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsert) UpdateOrderID() *SubscriptionOrderStateUpsert {
	u.SetExcluded(subscriptionorderstate.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *SubscriptionOrderStateUpsert) ClearOrderID() *SubscriptionOrderStateUpsert {
	u.SetNull(subscriptionorderstate.FieldOrderID)
	return u
}

// SetPaymentID sets the "payment_id" field.
func (u *SubscriptionOrderStateUpsert) SetPaymentID(v uuid.UUID) *SubscriptionOrderStateUpsert {
	u.Set(subscriptionorderstate.FieldPaymentID, v)
	return u
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsert) UpdatePaymentID() *SubscriptionOrderStateUpsert {
	u.SetExcluded(subscriptionorderstate.FieldPaymentID)
	return u
}

// ClearPaymentID clears the value of the "payment_id" field.
func (u *SubscriptionOrderStateUpsert) ClearPaymentID() *SubscriptionOrderStateUpsert {
	u.SetNull(subscriptionorderstate.FieldPaymentID)
	return u
}

// SetPaidAt sets the "paid_at" field.
func (u *SubscriptionOrderStateUpsert) SetPaidAt(v uint32) *SubscriptionOrderStateUpsert {
	u.Set(subscriptionorderstate.FieldPaidAt, v)
	return u
}

// UpdatePaidAt sets the "paid_at" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsert) UpdatePaidAt() *SubscriptionOrderStateUpsert {
	u.SetExcluded(subscriptionorderstate.FieldPaidAt)
	return u
}

// AddPaidAt adds v to the "paid_at" field.
func (u *SubscriptionOrderStateUpsert) AddPaidAt(v uint32) *SubscriptionOrderStateUpsert {
	u.Add(subscriptionorderstate.FieldPaidAt, v)
	return u
}

// ClearPaidAt clears the value of the "paid_at" field.
func (u *SubscriptionOrderStateUpsert) ClearPaidAt() *SubscriptionOrderStateUpsert {
	u.SetNull(subscriptionorderstate.FieldPaidAt)
	return u
}

// SetUserSetPaid sets the "user_set_paid" field.
func (u *SubscriptionOrderStateUpsert) SetUserSetPaid(v bool) *SubscriptionOrderStateUpsert {
	u.Set(subscriptionorderstate.FieldUserSetPaid, v)
	return u
}

// UpdateUserSetPaid sets the "user_set_paid" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsert) UpdateUserSetPaid() *SubscriptionOrderStateUpsert {
	u.SetExcluded(subscriptionorderstate.FieldUserSetPaid)
	return u
}

// ClearUserSetPaid clears the value of the "user_set_paid" field.
func (u *SubscriptionOrderStateUpsert) ClearUserSetPaid() *SubscriptionOrderStateUpsert {
	u.SetNull(subscriptionorderstate.FieldUserSetPaid)
	return u
}

// SetUserSetCanceled sets the "user_set_canceled" field.
func (u *SubscriptionOrderStateUpsert) SetUserSetCanceled(v bool) *SubscriptionOrderStateUpsert {
	u.Set(subscriptionorderstate.FieldUserSetCanceled, v)
	return u
}

// UpdateUserSetCanceled sets the "user_set_canceled" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsert) UpdateUserSetCanceled() *SubscriptionOrderStateUpsert {
	u.SetExcluded(subscriptionorderstate.FieldUserSetCanceled)
	return u
}

// ClearUserSetCanceled clears the value of the "user_set_canceled" field.
func (u *SubscriptionOrderStateUpsert) ClearUserSetCanceled() *SubscriptionOrderStateUpsert {
	u.SetNull(subscriptionorderstate.FieldUserSetCanceled)
	return u
}

// SetAdminSetCanceled sets the "admin_set_canceled" field.
func (u *SubscriptionOrderStateUpsert) SetAdminSetCanceled(v bool) *SubscriptionOrderStateUpsert {
	u.Set(subscriptionorderstate.FieldAdminSetCanceled, v)
	return u
}

// UpdateAdminSetCanceled sets the "admin_set_canceled" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsert) UpdateAdminSetCanceled() *SubscriptionOrderStateUpsert {
	u.SetExcluded(subscriptionorderstate.FieldAdminSetCanceled)
	return u
}

// ClearAdminSetCanceled clears the value of the "admin_set_canceled" field.
func (u *SubscriptionOrderStateUpsert) ClearAdminSetCanceled() *SubscriptionOrderStateUpsert {
	u.SetNull(subscriptionorderstate.FieldAdminSetCanceled)
	return u
}

// SetPaymentState sets the "payment_state" field.
func (u *SubscriptionOrderStateUpsert) SetPaymentState(v string) *SubscriptionOrderStateUpsert {
	u.Set(subscriptionorderstate.FieldPaymentState, v)
	return u
}

// UpdatePaymentState sets the "payment_state" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsert) UpdatePaymentState() *SubscriptionOrderStateUpsert {
	u.SetExcluded(subscriptionorderstate.FieldPaymentState)
	return u
}

// ClearPaymentState clears the value of the "payment_state" field.
func (u *SubscriptionOrderStateUpsert) ClearPaymentState() *SubscriptionOrderStateUpsert {
	u.SetNull(subscriptionorderstate.FieldPaymentState)
	return u
}

// SetCancelState sets the "cancel_state" field.
func (u *SubscriptionOrderStateUpsert) SetCancelState(v string) *SubscriptionOrderStateUpsert {
	u.Set(subscriptionorderstate.FieldCancelState, v)
	return u
}

// UpdateCancelState sets the "cancel_state" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsert) UpdateCancelState() *SubscriptionOrderStateUpsert {
	u.SetExcluded(subscriptionorderstate.FieldCancelState)
	return u
}

// ClearCancelState clears the value of the "cancel_state" field.
func (u *SubscriptionOrderStateUpsert) ClearCancelState() *SubscriptionOrderStateUpsert {
	u.SetNull(subscriptionorderstate.FieldCancelState)
	return u
}

// SetCanceledAt sets the "canceled_at" field.
func (u *SubscriptionOrderStateUpsert) SetCanceledAt(v uint32) *SubscriptionOrderStateUpsert {
	u.Set(subscriptionorderstate.FieldCanceledAt, v)
	return u
}

// UpdateCanceledAt sets the "canceled_at" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsert) UpdateCanceledAt() *SubscriptionOrderStateUpsert {
	u.SetExcluded(subscriptionorderstate.FieldCanceledAt)
	return u
}

// AddCanceledAt adds v to the "canceled_at" field.
func (u *SubscriptionOrderStateUpsert) AddCanceledAt(v uint32) *SubscriptionOrderStateUpsert {
	u.Add(subscriptionorderstate.FieldCanceledAt, v)
	return u
}

// ClearCanceledAt clears the value of the "canceled_at" field.
func (u *SubscriptionOrderStateUpsert) ClearCanceledAt() *SubscriptionOrderStateUpsert {
	u.SetNull(subscriptionorderstate.FieldCanceledAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SubscriptionOrderState.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscriptionorderstate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionOrderStateUpsertOne) UpdateNewValues() *SubscriptionOrderStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(subscriptionorderstate.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscriptionOrderState.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SubscriptionOrderStateUpsertOne) Ignore() *SubscriptionOrderStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionOrderStateUpsertOne) DoNothing() *SubscriptionOrderStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionOrderStateCreate.OnConflict
// documentation for more info.
func (u *SubscriptionOrderStateUpsertOne) Update(set func(*SubscriptionOrderStateUpsert)) *SubscriptionOrderStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionOrderStateUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *SubscriptionOrderStateUpsertOne) SetEntID(v uuid.UUID) *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsertOne) UpdateEntID() *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.UpdateEntID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *SubscriptionOrderStateUpsertOne) SetOrderID(v uuid.UUID) *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsertOne) UpdateOrderID() *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *SubscriptionOrderStateUpsertOne) ClearOrderID() *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.ClearOrderID()
	})
}

// SetPaymentID sets the "payment_id" field.
func (u *SubscriptionOrderStateUpsertOne) SetPaymentID(v uuid.UUID) *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.SetPaymentID(v)
	})
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsertOne) UpdatePaymentID() *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.UpdatePaymentID()
	})
}

// ClearPaymentID clears the value of the "payment_id" field.
func (u *SubscriptionOrderStateUpsertOne) ClearPaymentID() *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.ClearPaymentID()
	})
}

// SetPaidAt sets the "paid_at" field.
func (u *SubscriptionOrderStateUpsertOne) SetPaidAt(v uint32) *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.SetPaidAt(v)
	})
}

// AddPaidAt adds v to the "paid_at" field.
func (u *SubscriptionOrderStateUpsertOne) AddPaidAt(v uint32) *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.AddPaidAt(v)
	})
}

// UpdatePaidAt sets the "paid_at" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsertOne) UpdatePaidAt() *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.UpdatePaidAt()
	})
}

// ClearPaidAt clears the value of the "paid_at" field.
func (u *SubscriptionOrderStateUpsertOne) ClearPaidAt() *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.ClearPaidAt()
	})
}

// SetUserSetPaid sets the "user_set_paid" field.
func (u *SubscriptionOrderStateUpsertOne) SetUserSetPaid(v bool) *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.SetUserSetPaid(v)
	})
}

// UpdateUserSetPaid sets the "user_set_paid" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsertOne) UpdateUserSetPaid() *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.UpdateUserSetPaid()
	})
}

// ClearUserSetPaid clears the value of the "user_set_paid" field.
func (u *SubscriptionOrderStateUpsertOne) ClearUserSetPaid() *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.ClearUserSetPaid()
	})
}

// SetUserSetCanceled sets the "user_set_canceled" field.
func (u *SubscriptionOrderStateUpsertOne) SetUserSetCanceled(v bool) *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.SetUserSetCanceled(v)
	})
}

// UpdateUserSetCanceled sets the "user_set_canceled" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsertOne) UpdateUserSetCanceled() *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.UpdateUserSetCanceled()
	})
}

// ClearUserSetCanceled clears the value of the "user_set_canceled" field.
func (u *SubscriptionOrderStateUpsertOne) ClearUserSetCanceled() *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.ClearUserSetCanceled()
	})
}

// SetAdminSetCanceled sets the "admin_set_canceled" field.
func (u *SubscriptionOrderStateUpsertOne) SetAdminSetCanceled(v bool) *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.SetAdminSetCanceled(v)
	})
}

// UpdateAdminSetCanceled sets the "admin_set_canceled" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsertOne) UpdateAdminSetCanceled() *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.UpdateAdminSetCanceled()
	})
}

// ClearAdminSetCanceled clears the value of the "admin_set_canceled" field.
func (u *SubscriptionOrderStateUpsertOne) ClearAdminSetCanceled() *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.ClearAdminSetCanceled()
	})
}

// SetPaymentState sets the "payment_state" field.
func (u *SubscriptionOrderStateUpsertOne) SetPaymentState(v string) *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.SetPaymentState(v)
	})
}

// UpdatePaymentState sets the "payment_state" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsertOne) UpdatePaymentState() *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.UpdatePaymentState()
	})
}

// ClearPaymentState clears the value of the "payment_state" field.
func (u *SubscriptionOrderStateUpsertOne) ClearPaymentState() *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.ClearPaymentState()
	})
}

// SetCancelState sets the "cancel_state" field.
func (u *SubscriptionOrderStateUpsertOne) SetCancelState(v string) *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.SetCancelState(v)
	})
}

// UpdateCancelState sets the "cancel_state" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsertOne) UpdateCancelState() *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.UpdateCancelState()
	})
}

// ClearCancelState clears the value of the "cancel_state" field.
func (u *SubscriptionOrderStateUpsertOne) ClearCancelState() *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.ClearCancelState()
	})
}

// SetCanceledAt sets the "canceled_at" field.
func (u *SubscriptionOrderStateUpsertOne) SetCanceledAt(v uint32) *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.SetCanceledAt(v)
	})
}

// AddCanceledAt adds v to the "canceled_at" field.
func (u *SubscriptionOrderStateUpsertOne) AddCanceledAt(v uint32) *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.AddCanceledAt(v)
	})
}

// UpdateCanceledAt sets the "canceled_at" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsertOne) UpdateCanceledAt() *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.UpdateCanceledAt()
	})
}

// ClearCanceledAt clears the value of the "canceled_at" field.
func (u *SubscriptionOrderStateUpsertOne) ClearCanceledAt() *SubscriptionOrderStateUpsertOne {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.ClearCanceledAt()
	})
}

// Exec executes the query.
func (u *SubscriptionOrderStateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for SubscriptionOrderStateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionOrderStateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubscriptionOrderStateUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubscriptionOrderStateUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubscriptionOrderStateCreateBulk is the builder for creating many SubscriptionOrderState entities in bulk.
type SubscriptionOrderStateCreateBulk struct {
	config
	err      error
	builders []*SubscriptionOrderStateCreate
	conflict []sql.ConflictOption
}

// Save creates the SubscriptionOrderState entities in the database.
func (soscb *SubscriptionOrderStateCreateBulk) Save(ctx context.Context) ([]*SubscriptionOrderState, error) {
	if soscb.err != nil {
		return nil, soscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(soscb.builders))
	nodes := make([]*SubscriptionOrderState, len(soscb.builders))
	mutators := make([]Mutator, len(soscb.builders))
	for i := range soscb.builders {
		func(i int, root context.Context) {
			builder := soscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionOrderStateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, soscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = soscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, soscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, soscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (soscb *SubscriptionOrderStateCreateBulk) SaveX(ctx context.Context) []*SubscriptionOrderState {
	v, err := soscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (soscb *SubscriptionOrderStateCreateBulk) Exec(ctx context.Context) error {
	_, err := soscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (soscb *SubscriptionOrderStateCreateBulk) ExecX(ctx context.Context) {
	if err := soscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscriptionOrderState.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionOrderStateUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (soscb *SubscriptionOrderStateCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubscriptionOrderStateUpsertBulk {
	soscb.conflict = opts
	return &SubscriptionOrderStateUpsertBulk{
		create: soscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscriptionOrderState.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (soscb *SubscriptionOrderStateCreateBulk) OnConflictColumns(columns ...string) *SubscriptionOrderStateUpsertBulk {
	soscb.conflict = append(soscb.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionOrderStateUpsertBulk{
		create: soscb,
	}
}

// SubscriptionOrderStateUpsertBulk is the builder for "upsert"-ing
// a bulk of SubscriptionOrderState nodes.
type SubscriptionOrderStateUpsertBulk struct {
	create *SubscriptionOrderStateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SubscriptionOrderState.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscriptionorderstate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionOrderStateUpsertBulk) UpdateNewValues() *SubscriptionOrderStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(subscriptionorderstate.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscriptionOrderState.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SubscriptionOrderStateUpsertBulk) Ignore() *SubscriptionOrderStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionOrderStateUpsertBulk) DoNothing() *SubscriptionOrderStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionOrderStateCreateBulk.OnConflict
// documentation for more info.
func (u *SubscriptionOrderStateUpsertBulk) Update(set func(*SubscriptionOrderStateUpsert)) *SubscriptionOrderStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionOrderStateUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *SubscriptionOrderStateUpsertBulk) SetEntID(v uuid.UUID) *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsertBulk) UpdateEntID() *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.UpdateEntID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *SubscriptionOrderStateUpsertBulk) SetOrderID(v uuid.UUID) *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsertBulk) UpdateOrderID() *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *SubscriptionOrderStateUpsertBulk) ClearOrderID() *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.ClearOrderID()
	})
}

// SetPaymentID sets the "payment_id" field.
func (u *SubscriptionOrderStateUpsertBulk) SetPaymentID(v uuid.UUID) *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.SetPaymentID(v)
	})
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsertBulk) UpdatePaymentID() *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.UpdatePaymentID()
	})
}

// ClearPaymentID clears the value of the "payment_id" field.
func (u *SubscriptionOrderStateUpsertBulk) ClearPaymentID() *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.ClearPaymentID()
	})
}

// SetPaidAt sets the "paid_at" field.
func (u *SubscriptionOrderStateUpsertBulk) SetPaidAt(v uint32) *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.SetPaidAt(v)
	})
}

// AddPaidAt adds v to the "paid_at" field.
func (u *SubscriptionOrderStateUpsertBulk) AddPaidAt(v uint32) *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.AddPaidAt(v)
	})
}

// UpdatePaidAt sets the "paid_at" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsertBulk) UpdatePaidAt() *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.UpdatePaidAt()
	})
}

// ClearPaidAt clears the value of the "paid_at" field.
func (u *SubscriptionOrderStateUpsertBulk) ClearPaidAt() *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.ClearPaidAt()
	})
}

// SetUserSetPaid sets the "user_set_paid" field.
func (u *SubscriptionOrderStateUpsertBulk) SetUserSetPaid(v bool) *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.SetUserSetPaid(v)
	})
}

// UpdateUserSetPaid sets the "user_set_paid" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsertBulk) UpdateUserSetPaid() *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.UpdateUserSetPaid()
	})
}

// ClearUserSetPaid clears the value of the "user_set_paid" field.
func (u *SubscriptionOrderStateUpsertBulk) ClearUserSetPaid() *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.ClearUserSetPaid()
	})
}

// SetUserSetCanceled sets the "user_set_canceled" field.
func (u *SubscriptionOrderStateUpsertBulk) SetUserSetCanceled(v bool) *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.SetUserSetCanceled(v)
	})
}

// UpdateUserSetCanceled sets the "user_set_canceled" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsertBulk) UpdateUserSetCanceled() *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.UpdateUserSetCanceled()
	})
}

// ClearUserSetCanceled clears the value of the "user_set_canceled" field.
func (u *SubscriptionOrderStateUpsertBulk) ClearUserSetCanceled() *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.ClearUserSetCanceled()
	})
}

// SetAdminSetCanceled sets the "admin_set_canceled" field.
func (u *SubscriptionOrderStateUpsertBulk) SetAdminSetCanceled(v bool) *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.SetAdminSetCanceled(v)
	})
}

// UpdateAdminSetCanceled sets the "admin_set_canceled" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsertBulk) UpdateAdminSetCanceled() *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.UpdateAdminSetCanceled()
	})
}

// ClearAdminSetCanceled clears the value of the "admin_set_canceled" field.
func (u *SubscriptionOrderStateUpsertBulk) ClearAdminSetCanceled() *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.ClearAdminSetCanceled()
	})
}

// SetPaymentState sets the "payment_state" field.
func (u *SubscriptionOrderStateUpsertBulk) SetPaymentState(v string) *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.SetPaymentState(v)
	})
}

// UpdatePaymentState sets the "payment_state" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsertBulk) UpdatePaymentState() *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.UpdatePaymentState()
	})
}

// ClearPaymentState clears the value of the "payment_state" field.
func (u *SubscriptionOrderStateUpsertBulk) ClearPaymentState() *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.ClearPaymentState()
	})
}

// SetCancelState sets the "cancel_state" field.
func (u *SubscriptionOrderStateUpsertBulk) SetCancelState(v string) *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.SetCancelState(v)
	})
}

// UpdateCancelState sets the "cancel_state" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsertBulk) UpdateCancelState() *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.UpdateCancelState()
	})
}

// ClearCancelState clears the value of the "cancel_state" field.
func (u *SubscriptionOrderStateUpsertBulk) ClearCancelState() *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.ClearCancelState()
	})
}

// SetCanceledAt sets the "canceled_at" field.
func (u *SubscriptionOrderStateUpsertBulk) SetCanceledAt(v uint32) *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.SetCanceledAt(v)
	})
}

// AddCanceledAt adds v to the "canceled_at" field.
func (u *SubscriptionOrderStateUpsertBulk) AddCanceledAt(v uint32) *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.AddCanceledAt(v)
	})
}

// UpdateCanceledAt sets the "canceled_at" field to the value that was provided on create.
func (u *SubscriptionOrderStateUpsertBulk) UpdateCanceledAt() *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.UpdateCanceledAt()
	})
}

// ClearCanceledAt clears the value of the "canceled_at" field.
func (u *SubscriptionOrderStateUpsertBulk) ClearCanceledAt() *SubscriptionOrderStateUpsertBulk {
	return u.Update(func(s *SubscriptionOrderStateUpsert) {
		s.ClearCanceledAt()
	})
}

// Exec executes the query.
func (u *SubscriptionOrderStateUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the SubscriptionOrderStateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for SubscriptionOrderStateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionOrderStateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

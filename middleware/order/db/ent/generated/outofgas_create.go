// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/outofgas"
	"github.com/google/uuid"
)

// OutOfGasCreate is the builder for creating a OutOfGas entity.
type OutOfGasCreate struct {
	config
	mutation *OutOfGasMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (oogc *OutOfGasCreate) SetEntID(u uuid.UUID) *OutOfGasCreate {
	oogc.mutation.SetEntID(u)
	return oogc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (oogc *OutOfGasCreate) SetNillableEntID(u *uuid.UUID) *OutOfGasCreate {
	if u != nil {
		oogc.SetEntID(*u)
	}
	return oogc
}

// SetOrderID sets the "order_id" field.
func (oogc *OutOfGasCreate) SetOrderID(u uuid.UUID) *OutOfGasCreate {
	oogc.mutation.SetOrderID(u)
	return oogc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (oogc *OutOfGasCreate) SetNillableOrderID(u *uuid.UUID) *OutOfGasCreate {
	if u != nil {
		oogc.SetOrderID(*u)
	}
	return oogc
}

// SetStartAt sets the "start_at" field.
func (oogc *OutOfGasCreate) SetStartAt(u uint32) *OutOfGasCreate {
	oogc.mutation.SetStartAt(u)
	return oogc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (oogc *OutOfGasCreate) SetNillableStartAt(u *uint32) *OutOfGasCreate {
	if u != nil {
		oogc.SetStartAt(*u)
	}
	return oogc
}

// SetEndAt sets the "end_at" field.
func (oogc *OutOfGasCreate) SetEndAt(u uint32) *OutOfGasCreate {
	oogc.mutation.SetEndAt(u)
	return oogc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (oogc *OutOfGasCreate) SetNillableEndAt(u *uint32) *OutOfGasCreate {
	if u != nil {
		oogc.SetEndAt(*u)
	}
	return oogc
}

// SetID sets the "id" field.
func (oogc *OutOfGasCreate) SetID(u uint32) *OutOfGasCreate {
	oogc.mutation.SetID(u)
	return oogc
}

// Mutation returns the OutOfGasMutation object of the builder.
func (oogc *OutOfGasCreate) Mutation() *OutOfGasMutation {
	return oogc.mutation
}

// Save creates the OutOfGas in the database.
func (oogc *OutOfGasCreate) Save(ctx context.Context) (*OutOfGas, error) {
	oogc.defaults()
	return withHooks(ctx, oogc.sqlSave, oogc.mutation, oogc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oogc *OutOfGasCreate) SaveX(ctx context.Context) *OutOfGas {
	v, err := oogc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oogc *OutOfGasCreate) Exec(ctx context.Context) error {
	_, err := oogc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oogc *OutOfGasCreate) ExecX(ctx context.Context) {
	if err := oogc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oogc *OutOfGasCreate) defaults() {
	if _, ok := oogc.mutation.EntID(); !ok {
		v := outofgas.DefaultEntID()
		oogc.mutation.SetEntID(v)
	}
	if _, ok := oogc.mutation.OrderID(); !ok {
		v := outofgas.DefaultOrderID()
		oogc.mutation.SetOrderID(v)
	}
	if _, ok := oogc.mutation.StartAt(); !ok {
		v := outofgas.DefaultStartAt
		oogc.mutation.SetStartAt(v)
	}
	if _, ok := oogc.mutation.EndAt(); !ok {
		v := outofgas.DefaultEndAt
		oogc.mutation.SetEndAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oogc *OutOfGasCreate) check() error {
	if _, ok := oogc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "OutOfGas.ent_id"`)}
	}
	return nil
}

func (oogc *OutOfGasCreate) sqlSave(ctx context.Context) (*OutOfGas, error) {
	if err := oogc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oogc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oogc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	oogc.mutation.id = &_node.ID
	oogc.mutation.done = true
	return _node, nil
}

func (oogc *OutOfGasCreate) createSpec() (*OutOfGas, *sqlgraph.CreateSpec) {
	var (
		_node = &OutOfGas{config: oogc.config}
		_spec = sqlgraph.NewCreateSpec(outofgas.Table, sqlgraph.NewFieldSpec(outofgas.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = oogc.conflict
	if id, ok := oogc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oogc.mutation.EntID(); ok {
		_spec.SetField(outofgas.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := oogc.mutation.OrderID(); ok {
		_spec.SetField(outofgas.FieldOrderID, field.TypeUUID, value)
		_node.OrderID = value
	}
	if value, ok := oogc.mutation.StartAt(); ok {
		_spec.SetField(outofgas.FieldStartAt, field.TypeUint32, value)
		_node.StartAt = value
	}
	if value, ok := oogc.mutation.EndAt(); ok {
		_spec.SetField(outofgas.FieldEndAt, field.TypeUint32, value)
		_node.EndAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OutOfGas.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OutOfGasUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (oogc *OutOfGasCreate) OnConflict(opts ...sql.ConflictOption) *OutOfGasUpsertOne {
	oogc.conflict = opts
	return &OutOfGasUpsertOne{
		create: oogc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OutOfGas.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oogc *OutOfGasCreate) OnConflictColumns(columns ...string) *OutOfGasUpsertOne {
	oogc.conflict = append(oogc.conflict, sql.ConflictColumns(columns...))
	return &OutOfGasUpsertOne{
		create: oogc,
	}
}

type (
	// OutOfGasUpsertOne is the builder for "upsert"-ing
	//  one OutOfGas node.
	OutOfGasUpsertOne struct {
		create *OutOfGasCreate
	}

	// OutOfGasUpsert is the "OnConflict" setter.
	OutOfGasUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *OutOfGasUpsert) SetEntID(v uuid.UUID) *OutOfGasUpsert {
	u.Set(outofgas.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OutOfGasUpsert) UpdateEntID() *OutOfGasUpsert {
	u.SetExcluded(outofgas.FieldEntID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *OutOfGasUpsert) SetOrderID(v uuid.UUID) *OutOfGasUpsert {
	u.Set(outofgas.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OutOfGasUpsert) UpdateOrderID() *OutOfGasUpsert {
	u.SetExcluded(outofgas.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OutOfGasUpsert) ClearOrderID() *OutOfGasUpsert {
	u.SetNull(outofgas.FieldOrderID)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *OutOfGasUpsert) SetStartAt(v uint32) *OutOfGasUpsert {
	u.Set(outofgas.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *OutOfGasUpsert) UpdateStartAt() *OutOfGasUpsert {
	u.SetExcluded(outofgas.FieldStartAt)
	return u
}

// AddStartAt adds v to the "start_at" field.
func (u *OutOfGasUpsert) AddStartAt(v uint32) *OutOfGasUpsert {
	u.Add(outofgas.FieldStartAt, v)
	return u
}

// ClearStartAt clears the value of the "start_at" field.
func (u *OutOfGasUpsert) ClearStartAt() *OutOfGasUpsert {
	u.SetNull(outofgas.FieldStartAt)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *OutOfGasUpsert) SetEndAt(v uint32) *OutOfGasUpsert {
	u.Set(outofgas.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *OutOfGasUpsert) UpdateEndAt() *OutOfGasUpsert {
	u.SetExcluded(outofgas.FieldEndAt)
	return u
}

// AddEndAt adds v to the "end_at" field.
func (u *OutOfGasUpsert) AddEndAt(v uint32) *OutOfGasUpsert {
	u.Add(outofgas.FieldEndAt, v)
	return u
}

// ClearEndAt clears the value of the "end_at" field.
func (u *OutOfGasUpsert) ClearEndAt() *OutOfGasUpsert {
	u.SetNull(outofgas.FieldEndAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OutOfGas.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(outofgas.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OutOfGasUpsertOne) UpdateNewValues() *OutOfGasUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(outofgas.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OutOfGas.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OutOfGasUpsertOne) Ignore() *OutOfGasUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OutOfGasUpsertOne) DoNothing() *OutOfGasUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OutOfGasCreate.OnConflict
// documentation for more info.
func (u *OutOfGasUpsertOne) Update(set func(*OutOfGasUpsert)) *OutOfGasUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OutOfGasUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *OutOfGasUpsertOne) SetEntID(v uuid.UUID) *OutOfGasUpsertOne {
	return u.Update(func(s *OutOfGasUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OutOfGasUpsertOne) UpdateEntID() *OutOfGasUpsertOne {
	return u.Update(func(s *OutOfGasUpsert) {
		s.UpdateEntID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OutOfGasUpsertOne) SetOrderID(v uuid.UUID) *OutOfGasUpsertOne {
	return u.Update(func(s *OutOfGasUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OutOfGasUpsertOne) UpdateOrderID() *OutOfGasUpsertOne {
	return u.Update(func(s *OutOfGasUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OutOfGasUpsertOne) ClearOrderID() *OutOfGasUpsertOne {
	return u.Update(func(s *OutOfGasUpsert) {
		s.ClearOrderID()
	})
}

// SetStartAt sets the "start_at" field.
func (u *OutOfGasUpsertOne) SetStartAt(v uint32) *OutOfGasUpsertOne {
	return u.Update(func(s *OutOfGasUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *OutOfGasUpsertOne) AddStartAt(v uint32) *OutOfGasUpsertOne {
	return u.Update(func(s *OutOfGasUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *OutOfGasUpsertOne) UpdateStartAt() *OutOfGasUpsertOne {
	return u.Update(func(s *OutOfGasUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *OutOfGasUpsertOne) ClearStartAt() *OutOfGasUpsertOne {
	return u.Update(func(s *OutOfGasUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *OutOfGasUpsertOne) SetEndAt(v uint32) *OutOfGasUpsertOne {
	return u.Update(func(s *OutOfGasUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *OutOfGasUpsertOne) AddEndAt(v uint32) *OutOfGasUpsertOne {
	return u.Update(func(s *OutOfGasUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *OutOfGasUpsertOne) UpdateEndAt() *OutOfGasUpsertOne {
	return u.Update(func(s *OutOfGasUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *OutOfGasUpsertOne) ClearEndAt() *OutOfGasUpsertOne {
	return u.Update(func(s *OutOfGasUpsert) {
		s.ClearEndAt()
	})
}

// Exec executes the query.
func (u *OutOfGasUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for OutOfGasCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OutOfGasUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OutOfGasUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OutOfGasUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OutOfGasCreateBulk is the builder for creating many OutOfGas entities in bulk.
type OutOfGasCreateBulk struct {
	config
	err      error
	builders []*OutOfGasCreate
	conflict []sql.ConflictOption
}

// Save creates the OutOfGas entities in the database.
func (oogcb *OutOfGasCreateBulk) Save(ctx context.Context) ([]*OutOfGas, error) {
	if oogcb.err != nil {
		return nil, oogcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oogcb.builders))
	nodes := make([]*OutOfGas, len(oogcb.builders))
	mutators := make([]Mutator, len(oogcb.builders))
	for i := range oogcb.builders {
		func(i int, root context.Context) {
			builder := oogcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OutOfGasMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oogcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oogcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oogcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oogcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oogcb *OutOfGasCreateBulk) SaveX(ctx context.Context) []*OutOfGas {
	v, err := oogcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oogcb *OutOfGasCreateBulk) Exec(ctx context.Context) error {
	_, err := oogcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oogcb *OutOfGasCreateBulk) ExecX(ctx context.Context) {
	if err := oogcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OutOfGas.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OutOfGasUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (oogcb *OutOfGasCreateBulk) OnConflict(opts ...sql.ConflictOption) *OutOfGasUpsertBulk {
	oogcb.conflict = opts
	return &OutOfGasUpsertBulk{
		create: oogcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OutOfGas.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oogcb *OutOfGasCreateBulk) OnConflictColumns(columns ...string) *OutOfGasUpsertBulk {
	oogcb.conflict = append(oogcb.conflict, sql.ConflictColumns(columns...))
	return &OutOfGasUpsertBulk{
		create: oogcb,
	}
}

// OutOfGasUpsertBulk is the builder for "upsert"-ing
// a bulk of OutOfGas nodes.
type OutOfGasUpsertBulk struct {
	create *OutOfGasCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OutOfGas.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(outofgas.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OutOfGasUpsertBulk) UpdateNewValues() *OutOfGasUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(outofgas.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OutOfGas.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OutOfGasUpsertBulk) Ignore() *OutOfGasUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OutOfGasUpsertBulk) DoNothing() *OutOfGasUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OutOfGasCreateBulk.OnConflict
// documentation for more info.
func (u *OutOfGasUpsertBulk) Update(set func(*OutOfGasUpsert)) *OutOfGasUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OutOfGasUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *OutOfGasUpsertBulk) SetEntID(v uuid.UUID) *OutOfGasUpsertBulk {
	return u.Update(func(s *OutOfGasUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OutOfGasUpsertBulk) UpdateEntID() *OutOfGasUpsertBulk {
	return u.Update(func(s *OutOfGasUpsert) {
		s.UpdateEntID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OutOfGasUpsertBulk) SetOrderID(v uuid.UUID) *OutOfGasUpsertBulk {
	return u.Update(func(s *OutOfGasUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OutOfGasUpsertBulk) UpdateOrderID() *OutOfGasUpsertBulk {
	return u.Update(func(s *OutOfGasUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OutOfGasUpsertBulk) ClearOrderID() *OutOfGasUpsertBulk {
	return u.Update(func(s *OutOfGasUpsert) {
		s.ClearOrderID()
	})
}

// SetStartAt sets the "start_at" field.
func (u *OutOfGasUpsertBulk) SetStartAt(v uint32) *OutOfGasUpsertBulk {
	return u.Update(func(s *OutOfGasUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *OutOfGasUpsertBulk) AddStartAt(v uint32) *OutOfGasUpsertBulk {
	return u.Update(func(s *OutOfGasUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *OutOfGasUpsertBulk) UpdateStartAt() *OutOfGasUpsertBulk {
	return u.Update(func(s *OutOfGasUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *OutOfGasUpsertBulk) ClearStartAt() *OutOfGasUpsertBulk {
	return u.Update(func(s *OutOfGasUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *OutOfGasUpsertBulk) SetEndAt(v uint32) *OutOfGasUpsertBulk {
	return u.Update(func(s *OutOfGasUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *OutOfGasUpsertBulk) AddEndAt(v uint32) *OutOfGasUpsertBulk {
	return u.Update(func(s *OutOfGasUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *OutOfGasUpsertBulk) UpdateEndAt() *OutOfGasUpsertBulk {
	return u.Update(func(s *OutOfGasUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *OutOfGasUpsertBulk) ClearEndAt() *OutOfGasUpsertBulk {
	return u.Update(func(s *OutOfGasUpsert) {
		s.ClearEndAt()
	})
}

// Exec executes the query.
func (u *OutOfGasUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the OutOfGasCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for OutOfGasCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OutOfGasUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

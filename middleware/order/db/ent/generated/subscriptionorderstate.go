// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/subscriptionorderstate"
	"github.com/google/uuid"
)

// SubscriptionOrderState is the model entity for the SubscriptionOrderState schema.
type SubscriptionOrderState struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID uuid.UUID `json:"order_id,omitempty"`
	// PaymentID holds the value of the "payment_id" field.
	PaymentID uuid.UUID `json:"payment_id,omitempty"`
	// PaidAt holds the value of the "paid_at" field.
	PaidAt uint32 `json:"paid_at,omitempty"`
	// UserSetPaid holds the value of the "user_set_paid" field.
	UserSetPaid bool `json:"user_set_paid,omitempty"`
	// UserSetCanceled holds the value of the "user_set_canceled" field.
	UserSetCanceled bool `json:"user_set_canceled,omitempty"`
	// AdminSetCanceled holds the value of the "admin_set_canceled" field.
	AdminSetCanceled bool `json:"admin_set_canceled,omitempty"`
	// PaymentState holds the value of the "payment_state" field.
	PaymentState string `json:"payment_state,omitempty"`
	// CancelState holds the value of the "cancel_state" field.
	CancelState string `json:"cancel_state,omitempty"`
	// CanceledAt holds the value of the "canceled_at" field.
	CanceledAt uint32 `json:"canceled_at,omitempty"`
	// DealEventID holds the value of the "deal_event_id" field.
	DealEventID  string `json:"deal_event_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubscriptionOrderState) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscriptionorderstate.FieldUserSetPaid, subscriptionorderstate.FieldUserSetCanceled, subscriptionorderstate.FieldAdminSetCanceled:
			values[i] = new(sql.NullBool)
		case subscriptionorderstate.FieldID, subscriptionorderstate.FieldCreatedAt, subscriptionorderstate.FieldUpdatedAt, subscriptionorderstate.FieldDeletedAt, subscriptionorderstate.FieldPaidAt, subscriptionorderstate.FieldCanceledAt:
			values[i] = new(sql.NullInt64)
		case subscriptionorderstate.FieldPaymentState, subscriptionorderstate.FieldCancelState, subscriptionorderstate.FieldDealEventID:
			values[i] = new(sql.NullString)
		case subscriptionorderstate.FieldEntID, subscriptionorderstate.FieldOrderID, subscriptionorderstate.FieldPaymentID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubscriptionOrderState fields.
func (sos *SubscriptionOrderState) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscriptionorderstate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sos.ID = uint32(value.Int64)
		case subscriptionorderstate.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				sos.EntID = *value
			}
		case subscriptionorderstate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sos.CreatedAt = uint32(value.Int64)
			}
		case subscriptionorderstate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sos.UpdatedAt = uint32(value.Int64)
			}
		case subscriptionorderstate.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sos.DeletedAt = uint32(value.Int64)
			}
		case subscriptionorderstate.FieldOrderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value != nil {
				sos.OrderID = *value
			}
		case subscriptionorderstate.FieldPaymentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field payment_id", values[i])
			} else if value != nil {
				sos.PaymentID = *value
			}
		case subscriptionorderstate.FieldPaidAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field paid_at", values[i])
			} else if value.Valid {
				sos.PaidAt = uint32(value.Int64)
			}
		case subscriptionorderstate.FieldUserSetPaid:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field user_set_paid", values[i])
			} else if value.Valid {
				sos.UserSetPaid = value.Bool
			}
		case subscriptionorderstate.FieldUserSetCanceled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field user_set_canceled", values[i])
			} else if value.Valid {
				sos.UserSetCanceled = value.Bool
			}
		case subscriptionorderstate.FieldAdminSetCanceled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field admin_set_canceled", values[i])
			} else if value.Valid {
				sos.AdminSetCanceled = value.Bool
			}
		case subscriptionorderstate.FieldPaymentState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_state", values[i])
			} else if value.Valid {
				sos.PaymentState = value.String
			}
		case subscriptionorderstate.FieldCancelState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cancel_state", values[i])
			} else if value.Valid {
				sos.CancelState = value.String
			}
		case subscriptionorderstate.FieldCanceledAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field canceled_at", values[i])
			} else if value.Valid {
				sos.CanceledAt = uint32(value.Int64)
			}
		case subscriptionorderstate.FieldDealEventID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deal_event_id", values[i])
			} else if value.Valid {
				sos.DealEventID = value.String
			}
		default:
			sos.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubscriptionOrderState.
// This includes values selected through modifiers, order, etc.
func (sos *SubscriptionOrderState) Value(name string) (ent.Value, error) {
	return sos.selectValues.Get(name)
}

// Update returns a builder for updating this SubscriptionOrderState.
// Note that you need to call SubscriptionOrderState.Unwrap() before calling this method if this SubscriptionOrderState
// was returned from a transaction, and the transaction was committed or rolled back.
func (sos *SubscriptionOrderState) Update() *SubscriptionOrderStateUpdateOne {
	return NewSubscriptionOrderStateClient(sos.config).UpdateOne(sos)
}

// Unwrap unwraps the SubscriptionOrderState entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sos *SubscriptionOrderState) Unwrap() *SubscriptionOrderState {
	_tx, ok := sos.config.driver.(*txDriver)
	if !ok {
		panic("generated: SubscriptionOrderState is not a transactional entity")
	}
	sos.config.driver = _tx.drv
	return sos
}

// String implements the fmt.Stringer.
func (sos *SubscriptionOrderState) String() string {
	var builder strings.Builder
	builder.WriteString("SubscriptionOrderState(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sos.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", sos.EntID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", sos.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", sos.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", sos.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", sos.OrderID))
	builder.WriteString(", ")
	builder.WriteString("payment_id=")
	builder.WriteString(fmt.Sprintf("%v", sos.PaymentID))
	builder.WriteString(", ")
	builder.WriteString("paid_at=")
	builder.WriteString(fmt.Sprintf("%v", sos.PaidAt))
	builder.WriteString(", ")
	builder.WriteString("user_set_paid=")
	builder.WriteString(fmt.Sprintf("%v", sos.UserSetPaid))
	builder.WriteString(", ")
	builder.WriteString("user_set_canceled=")
	builder.WriteString(fmt.Sprintf("%v", sos.UserSetCanceled))
	builder.WriteString(", ")
	builder.WriteString("admin_set_canceled=")
	builder.WriteString(fmt.Sprintf("%v", sos.AdminSetCanceled))
	builder.WriteString(", ")
	builder.WriteString("payment_state=")
	builder.WriteString(sos.PaymentState)
	builder.WriteString(", ")
	builder.WriteString("cancel_state=")
	builder.WriteString(sos.CancelState)
	builder.WriteString(", ")
	builder.WriteString("canceled_at=")
	builder.WriteString(fmt.Sprintf("%v", sos.CanceledAt))
	builder.WriteString(", ")
	builder.WriteString("deal_event_id=")
	builder.WriteString(sos.DealEventID)
	builder.WriteByte(')')
	return builder.String()
}

// SubscriptionOrderStates is a parsable slice of SubscriptionOrderState.
type SubscriptionOrderStates []*SubscriptionOrderState

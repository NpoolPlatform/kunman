// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/orderbase"
	"github.com/google/uuid"
)

// OrderBaseCreate is the builder for creating a OrderBase entity.
type OrderBaseCreate struct {
	config
	mutation *OrderBaseMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (obc *OrderBaseCreate) SetEntID(u uuid.UUID) *OrderBaseCreate {
	obc.mutation.SetEntID(u)
	return obc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (obc *OrderBaseCreate) SetNillableEntID(u *uuid.UUID) *OrderBaseCreate {
	if u != nil {
		obc.SetEntID(*u)
	}
	return obc
}

// SetAppID sets the "app_id" field.
func (obc *OrderBaseCreate) SetAppID(u uuid.UUID) *OrderBaseCreate {
	obc.mutation.SetAppID(u)
	return obc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (obc *OrderBaseCreate) SetNillableAppID(u *uuid.UUID) *OrderBaseCreate {
	if u != nil {
		obc.SetAppID(*u)
	}
	return obc
}

// SetUserID sets the "user_id" field.
func (obc *OrderBaseCreate) SetUserID(u uuid.UUID) *OrderBaseCreate {
	obc.mutation.SetUserID(u)
	return obc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (obc *OrderBaseCreate) SetNillableUserID(u *uuid.UUID) *OrderBaseCreate {
	if u != nil {
		obc.SetUserID(*u)
	}
	return obc
}

// SetGoodID sets the "good_id" field.
func (obc *OrderBaseCreate) SetGoodID(u uuid.UUID) *OrderBaseCreate {
	obc.mutation.SetGoodID(u)
	return obc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (obc *OrderBaseCreate) SetNillableGoodID(u *uuid.UUID) *OrderBaseCreate {
	if u != nil {
		obc.SetGoodID(*u)
	}
	return obc
}

// SetAppGoodID sets the "app_good_id" field.
func (obc *OrderBaseCreate) SetAppGoodID(u uuid.UUID) *OrderBaseCreate {
	obc.mutation.SetAppGoodID(u)
	return obc
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (obc *OrderBaseCreate) SetNillableAppGoodID(u *uuid.UUID) *OrderBaseCreate {
	if u != nil {
		obc.SetAppGoodID(*u)
	}
	return obc
}

// SetGoodType sets the "good_type" field.
func (obc *OrderBaseCreate) SetGoodType(s string) *OrderBaseCreate {
	obc.mutation.SetGoodType(s)
	return obc
}

// SetNillableGoodType sets the "good_type" field if the given value is not nil.
func (obc *OrderBaseCreate) SetNillableGoodType(s *string) *OrderBaseCreate {
	if s != nil {
		obc.SetGoodType(*s)
	}
	return obc
}

// SetParentOrderID sets the "parent_order_id" field.
func (obc *OrderBaseCreate) SetParentOrderID(u uuid.UUID) *OrderBaseCreate {
	obc.mutation.SetParentOrderID(u)
	return obc
}

// SetNillableParentOrderID sets the "parent_order_id" field if the given value is not nil.
func (obc *OrderBaseCreate) SetNillableParentOrderID(u *uuid.UUID) *OrderBaseCreate {
	if u != nil {
		obc.SetParentOrderID(*u)
	}
	return obc
}

// SetOrderType sets the "order_type" field.
func (obc *OrderBaseCreate) SetOrderType(s string) *OrderBaseCreate {
	obc.mutation.SetOrderType(s)
	return obc
}

// SetNillableOrderType sets the "order_type" field if the given value is not nil.
func (obc *OrderBaseCreate) SetNillableOrderType(s *string) *OrderBaseCreate {
	if s != nil {
		obc.SetOrderType(*s)
	}
	return obc
}

// SetCreateMethod sets the "create_method" field.
func (obc *OrderBaseCreate) SetCreateMethod(s string) *OrderBaseCreate {
	obc.mutation.SetCreateMethod(s)
	return obc
}

// SetNillableCreateMethod sets the "create_method" field if the given value is not nil.
func (obc *OrderBaseCreate) SetNillableCreateMethod(s *string) *OrderBaseCreate {
	if s != nil {
		obc.SetCreateMethod(*s)
	}
	return obc
}

// SetSimulate sets the "simulate" field.
func (obc *OrderBaseCreate) SetSimulate(b bool) *OrderBaseCreate {
	obc.mutation.SetSimulate(b)
	return obc
}

// SetNillableSimulate sets the "simulate" field if the given value is not nil.
func (obc *OrderBaseCreate) SetNillableSimulate(b *bool) *OrderBaseCreate {
	if b != nil {
		obc.SetSimulate(*b)
	}
	return obc
}

// SetID sets the "id" field.
func (obc *OrderBaseCreate) SetID(u uint32) *OrderBaseCreate {
	obc.mutation.SetID(u)
	return obc
}

// Mutation returns the OrderBaseMutation object of the builder.
func (obc *OrderBaseCreate) Mutation() *OrderBaseMutation {
	return obc.mutation
}

// Save creates the OrderBase in the database.
func (obc *OrderBaseCreate) Save(ctx context.Context) (*OrderBase, error) {
	obc.defaults()
	return withHooks(ctx, obc.sqlSave, obc.mutation, obc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (obc *OrderBaseCreate) SaveX(ctx context.Context) *OrderBase {
	v, err := obc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (obc *OrderBaseCreate) Exec(ctx context.Context) error {
	_, err := obc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (obc *OrderBaseCreate) ExecX(ctx context.Context) {
	if err := obc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (obc *OrderBaseCreate) defaults() {
	if _, ok := obc.mutation.EntID(); !ok {
		v := orderbase.DefaultEntID()
		obc.mutation.SetEntID(v)
	}
	if _, ok := obc.mutation.AppID(); !ok {
		v := orderbase.DefaultAppID()
		obc.mutation.SetAppID(v)
	}
	if _, ok := obc.mutation.UserID(); !ok {
		v := orderbase.DefaultUserID()
		obc.mutation.SetUserID(v)
	}
	if _, ok := obc.mutation.GoodID(); !ok {
		v := orderbase.DefaultGoodID()
		obc.mutation.SetGoodID(v)
	}
	if _, ok := obc.mutation.AppGoodID(); !ok {
		v := orderbase.DefaultAppGoodID()
		obc.mutation.SetAppGoodID(v)
	}
	if _, ok := obc.mutation.GoodType(); !ok {
		v := orderbase.DefaultGoodType
		obc.mutation.SetGoodType(v)
	}
	if _, ok := obc.mutation.ParentOrderID(); !ok {
		v := orderbase.DefaultParentOrderID()
		obc.mutation.SetParentOrderID(v)
	}
	if _, ok := obc.mutation.OrderType(); !ok {
		v := orderbase.DefaultOrderType
		obc.mutation.SetOrderType(v)
	}
	if _, ok := obc.mutation.CreateMethod(); !ok {
		v := orderbase.DefaultCreateMethod
		obc.mutation.SetCreateMethod(v)
	}
	if _, ok := obc.mutation.Simulate(); !ok {
		v := orderbase.DefaultSimulate
		obc.mutation.SetSimulate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (obc *OrderBaseCreate) check() error {
	if _, ok := obc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "OrderBase.ent_id"`)}
	}
	return nil
}

func (obc *OrderBaseCreate) sqlSave(ctx context.Context) (*OrderBase, error) {
	if err := obc.check(); err != nil {
		return nil, err
	}
	_node, _spec := obc.createSpec()
	if err := sqlgraph.CreateNode(ctx, obc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	obc.mutation.id = &_node.ID
	obc.mutation.done = true
	return _node, nil
}

func (obc *OrderBaseCreate) createSpec() (*OrderBase, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderBase{config: obc.config}
		_spec = sqlgraph.NewCreateSpec(orderbase.Table, sqlgraph.NewFieldSpec(orderbase.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = obc.conflict
	if id, ok := obc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := obc.mutation.EntID(); ok {
		_spec.SetField(orderbase.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := obc.mutation.AppID(); ok {
		_spec.SetField(orderbase.FieldAppID, field.TypeUUID, value)
		_node.AppID = value
	}
	if value, ok := obc.mutation.UserID(); ok {
		_spec.SetField(orderbase.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := obc.mutation.GoodID(); ok {
		_spec.SetField(orderbase.FieldGoodID, field.TypeUUID, value)
		_node.GoodID = value
	}
	if value, ok := obc.mutation.AppGoodID(); ok {
		_spec.SetField(orderbase.FieldAppGoodID, field.TypeUUID, value)
		_node.AppGoodID = value
	}
	if value, ok := obc.mutation.GoodType(); ok {
		_spec.SetField(orderbase.FieldGoodType, field.TypeString, value)
		_node.GoodType = value
	}
	if value, ok := obc.mutation.ParentOrderID(); ok {
		_spec.SetField(orderbase.FieldParentOrderID, field.TypeUUID, value)
		_node.ParentOrderID = value
	}
	if value, ok := obc.mutation.OrderType(); ok {
		_spec.SetField(orderbase.FieldOrderType, field.TypeString, value)
		_node.OrderType = value
	}
	if value, ok := obc.mutation.CreateMethod(); ok {
		_spec.SetField(orderbase.FieldCreateMethod, field.TypeString, value)
		_node.CreateMethod = value
	}
	if value, ok := obc.mutation.Simulate(); ok {
		_spec.SetField(orderbase.FieldSimulate, field.TypeBool, value)
		_node.Simulate = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderBase.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderBaseUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (obc *OrderBaseCreate) OnConflict(opts ...sql.ConflictOption) *OrderBaseUpsertOne {
	obc.conflict = opts
	return &OrderBaseUpsertOne{
		create: obc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderBase.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (obc *OrderBaseCreate) OnConflictColumns(columns ...string) *OrderBaseUpsertOne {
	obc.conflict = append(obc.conflict, sql.ConflictColumns(columns...))
	return &OrderBaseUpsertOne{
		create: obc,
	}
}

type (
	// OrderBaseUpsertOne is the builder for "upsert"-ing
	//  one OrderBase node.
	OrderBaseUpsertOne struct {
		create *OrderBaseCreate
	}

	// OrderBaseUpsert is the "OnConflict" setter.
	OrderBaseUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *OrderBaseUpsert) SetEntID(v uuid.UUID) *OrderBaseUpsert {
	u.Set(orderbase.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderBaseUpsert) UpdateEntID() *OrderBaseUpsert {
	u.SetExcluded(orderbase.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *OrderBaseUpsert) SetAppID(v uuid.UUID) *OrderBaseUpsert {
	u.Set(orderbase.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *OrderBaseUpsert) UpdateAppID() *OrderBaseUpsert {
	u.SetExcluded(orderbase.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *OrderBaseUpsert) ClearAppID() *OrderBaseUpsert {
	u.SetNull(orderbase.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *OrderBaseUpsert) SetUserID(v uuid.UUID) *OrderBaseUpsert {
	u.Set(orderbase.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrderBaseUpsert) UpdateUserID() *OrderBaseUpsert {
	u.SetExcluded(orderbase.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *OrderBaseUpsert) ClearUserID() *OrderBaseUpsert {
	u.SetNull(orderbase.FieldUserID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *OrderBaseUpsert) SetGoodID(v uuid.UUID) *OrderBaseUpsert {
	u.Set(orderbase.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *OrderBaseUpsert) UpdateGoodID() *OrderBaseUpsert {
	u.SetExcluded(orderbase.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *OrderBaseUpsert) ClearGoodID() *OrderBaseUpsert {
	u.SetNull(orderbase.FieldGoodID)
	return u
}

// SetAppGoodID sets the "app_good_id" field.
func (u *OrderBaseUpsert) SetAppGoodID(v uuid.UUID) *OrderBaseUpsert {
	u.Set(orderbase.FieldAppGoodID, v)
	return u
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *OrderBaseUpsert) UpdateAppGoodID() *OrderBaseUpsert {
	u.SetExcluded(orderbase.FieldAppGoodID)
	return u
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *OrderBaseUpsert) ClearAppGoodID() *OrderBaseUpsert {
	u.SetNull(orderbase.FieldAppGoodID)
	return u
}

// SetGoodType sets the "good_type" field.
func (u *OrderBaseUpsert) SetGoodType(v string) *OrderBaseUpsert {
	u.Set(orderbase.FieldGoodType, v)
	return u
}

// UpdateGoodType sets the "good_type" field to the value that was provided on create.
func (u *OrderBaseUpsert) UpdateGoodType() *OrderBaseUpsert {
	u.SetExcluded(orderbase.FieldGoodType)
	return u
}

// ClearGoodType clears the value of the "good_type" field.
func (u *OrderBaseUpsert) ClearGoodType() *OrderBaseUpsert {
	u.SetNull(orderbase.FieldGoodType)
	return u
}

// SetParentOrderID sets the "parent_order_id" field.
func (u *OrderBaseUpsert) SetParentOrderID(v uuid.UUID) *OrderBaseUpsert {
	u.Set(orderbase.FieldParentOrderID, v)
	return u
}

// UpdateParentOrderID sets the "parent_order_id" field to the value that was provided on create.
func (u *OrderBaseUpsert) UpdateParentOrderID() *OrderBaseUpsert {
	u.SetExcluded(orderbase.FieldParentOrderID)
	return u
}

// ClearParentOrderID clears the value of the "parent_order_id" field.
func (u *OrderBaseUpsert) ClearParentOrderID() *OrderBaseUpsert {
	u.SetNull(orderbase.FieldParentOrderID)
	return u
}

// SetOrderType sets the "order_type" field.
func (u *OrderBaseUpsert) SetOrderType(v string) *OrderBaseUpsert {
	u.Set(orderbase.FieldOrderType, v)
	return u
}

// UpdateOrderType sets the "order_type" field to the value that was provided on create.
func (u *OrderBaseUpsert) UpdateOrderType() *OrderBaseUpsert {
	u.SetExcluded(orderbase.FieldOrderType)
	return u
}

// ClearOrderType clears the value of the "order_type" field.
func (u *OrderBaseUpsert) ClearOrderType() *OrderBaseUpsert {
	u.SetNull(orderbase.FieldOrderType)
	return u
}

// SetCreateMethod sets the "create_method" field.
func (u *OrderBaseUpsert) SetCreateMethod(v string) *OrderBaseUpsert {
	u.Set(orderbase.FieldCreateMethod, v)
	return u
}

// UpdateCreateMethod sets the "create_method" field to the value that was provided on create.
func (u *OrderBaseUpsert) UpdateCreateMethod() *OrderBaseUpsert {
	u.SetExcluded(orderbase.FieldCreateMethod)
	return u
}

// ClearCreateMethod clears the value of the "create_method" field.
func (u *OrderBaseUpsert) ClearCreateMethod() *OrderBaseUpsert {
	u.SetNull(orderbase.FieldCreateMethod)
	return u
}

// SetSimulate sets the "simulate" field.
func (u *OrderBaseUpsert) SetSimulate(v bool) *OrderBaseUpsert {
	u.Set(orderbase.FieldSimulate, v)
	return u
}

// UpdateSimulate sets the "simulate" field to the value that was provided on create.
func (u *OrderBaseUpsert) UpdateSimulate() *OrderBaseUpsert {
	u.SetExcluded(orderbase.FieldSimulate)
	return u
}

// ClearSimulate clears the value of the "simulate" field.
func (u *OrderBaseUpsert) ClearSimulate() *OrderBaseUpsert {
	u.SetNull(orderbase.FieldSimulate)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrderBase.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderbase.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderBaseUpsertOne) UpdateNewValues() *OrderBaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(orderbase.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderBase.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrderBaseUpsertOne) Ignore() *OrderBaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderBaseUpsertOne) DoNothing() *OrderBaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderBaseCreate.OnConflict
// documentation for more info.
func (u *OrderBaseUpsertOne) Update(set func(*OrderBaseUpsert)) *OrderBaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderBaseUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *OrderBaseUpsertOne) SetEntID(v uuid.UUID) *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderBaseUpsertOne) UpdateEntID() *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *OrderBaseUpsertOne) SetAppID(v uuid.UUID) *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *OrderBaseUpsertOne) UpdateAppID() *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *OrderBaseUpsertOne) ClearAppID() *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *OrderBaseUpsertOne) SetUserID(v uuid.UUID) *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrderBaseUpsertOne) UpdateUserID() *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *OrderBaseUpsertOne) ClearUserID() *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.ClearUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *OrderBaseUpsertOne) SetGoodID(v uuid.UUID) *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *OrderBaseUpsertOne) UpdateGoodID() *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *OrderBaseUpsertOne) ClearGoodID() *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.ClearGoodID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *OrderBaseUpsertOne) SetAppGoodID(v uuid.UUID) *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *OrderBaseUpsertOne) UpdateAppGoodID() *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *OrderBaseUpsertOne) ClearAppGoodID() *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.ClearAppGoodID()
	})
}

// SetGoodType sets the "good_type" field.
func (u *OrderBaseUpsertOne) SetGoodType(v string) *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.SetGoodType(v)
	})
}

// UpdateGoodType sets the "good_type" field to the value that was provided on create.
func (u *OrderBaseUpsertOne) UpdateGoodType() *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.UpdateGoodType()
	})
}

// ClearGoodType clears the value of the "good_type" field.
func (u *OrderBaseUpsertOne) ClearGoodType() *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.ClearGoodType()
	})
}

// SetParentOrderID sets the "parent_order_id" field.
func (u *OrderBaseUpsertOne) SetParentOrderID(v uuid.UUID) *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.SetParentOrderID(v)
	})
}

// UpdateParentOrderID sets the "parent_order_id" field to the value that was provided on create.
func (u *OrderBaseUpsertOne) UpdateParentOrderID() *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.UpdateParentOrderID()
	})
}

// ClearParentOrderID clears the value of the "parent_order_id" field.
func (u *OrderBaseUpsertOne) ClearParentOrderID() *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.ClearParentOrderID()
	})
}

// SetOrderType sets the "order_type" field.
func (u *OrderBaseUpsertOne) SetOrderType(v string) *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.SetOrderType(v)
	})
}

// UpdateOrderType sets the "order_type" field to the value that was provided on create.
func (u *OrderBaseUpsertOne) UpdateOrderType() *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.UpdateOrderType()
	})
}

// ClearOrderType clears the value of the "order_type" field.
func (u *OrderBaseUpsertOne) ClearOrderType() *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.ClearOrderType()
	})
}

// SetCreateMethod sets the "create_method" field.
func (u *OrderBaseUpsertOne) SetCreateMethod(v string) *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.SetCreateMethod(v)
	})
}

// UpdateCreateMethod sets the "create_method" field to the value that was provided on create.
func (u *OrderBaseUpsertOne) UpdateCreateMethod() *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.UpdateCreateMethod()
	})
}

// ClearCreateMethod clears the value of the "create_method" field.
func (u *OrderBaseUpsertOne) ClearCreateMethod() *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.ClearCreateMethod()
	})
}

// SetSimulate sets the "simulate" field.
func (u *OrderBaseUpsertOne) SetSimulate(v bool) *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.SetSimulate(v)
	})
}

// UpdateSimulate sets the "simulate" field to the value that was provided on create.
func (u *OrderBaseUpsertOne) UpdateSimulate() *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.UpdateSimulate()
	})
}

// ClearSimulate clears the value of the "simulate" field.
func (u *OrderBaseUpsertOne) ClearSimulate() *OrderBaseUpsertOne {
	return u.Update(func(s *OrderBaseUpsert) {
		s.ClearSimulate()
	})
}

// Exec executes the query.
func (u *OrderBaseUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for OrderBaseCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderBaseUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderBaseUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderBaseUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderBaseCreateBulk is the builder for creating many OrderBase entities in bulk.
type OrderBaseCreateBulk struct {
	config
	err      error
	builders []*OrderBaseCreate
	conflict []sql.ConflictOption
}

// Save creates the OrderBase entities in the database.
func (obcb *OrderBaseCreateBulk) Save(ctx context.Context) ([]*OrderBase, error) {
	if obcb.err != nil {
		return nil, obcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(obcb.builders))
	nodes := make([]*OrderBase, len(obcb.builders))
	mutators := make([]Mutator, len(obcb.builders))
	for i := range obcb.builders {
		func(i int, root context.Context) {
			builder := obcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderBaseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, obcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = obcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, obcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, obcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (obcb *OrderBaseCreateBulk) SaveX(ctx context.Context) []*OrderBase {
	v, err := obcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (obcb *OrderBaseCreateBulk) Exec(ctx context.Context) error {
	_, err := obcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (obcb *OrderBaseCreateBulk) ExecX(ctx context.Context) {
	if err := obcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderBase.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderBaseUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (obcb *OrderBaseCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderBaseUpsertBulk {
	obcb.conflict = opts
	return &OrderBaseUpsertBulk{
		create: obcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderBase.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (obcb *OrderBaseCreateBulk) OnConflictColumns(columns ...string) *OrderBaseUpsertBulk {
	obcb.conflict = append(obcb.conflict, sql.ConflictColumns(columns...))
	return &OrderBaseUpsertBulk{
		create: obcb,
	}
}

// OrderBaseUpsertBulk is the builder for "upsert"-ing
// a bulk of OrderBase nodes.
type OrderBaseUpsertBulk struct {
	create *OrderBaseCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrderBase.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderbase.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderBaseUpsertBulk) UpdateNewValues() *OrderBaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(orderbase.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderBase.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrderBaseUpsertBulk) Ignore() *OrderBaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderBaseUpsertBulk) DoNothing() *OrderBaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderBaseCreateBulk.OnConflict
// documentation for more info.
func (u *OrderBaseUpsertBulk) Update(set func(*OrderBaseUpsert)) *OrderBaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderBaseUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *OrderBaseUpsertBulk) SetEntID(v uuid.UUID) *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderBaseUpsertBulk) UpdateEntID() *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *OrderBaseUpsertBulk) SetAppID(v uuid.UUID) *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *OrderBaseUpsertBulk) UpdateAppID() *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *OrderBaseUpsertBulk) ClearAppID() *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *OrderBaseUpsertBulk) SetUserID(v uuid.UUID) *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrderBaseUpsertBulk) UpdateUserID() *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *OrderBaseUpsertBulk) ClearUserID() *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.ClearUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *OrderBaseUpsertBulk) SetGoodID(v uuid.UUID) *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *OrderBaseUpsertBulk) UpdateGoodID() *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *OrderBaseUpsertBulk) ClearGoodID() *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.ClearGoodID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *OrderBaseUpsertBulk) SetAppGoodID(v uuid.UUID) *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *OrderBaseUpsertBulk) UpdateAppGoodID() *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *OrderBaseUpsertBulk) ClearAppGoodID() *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.ClearAppGoodID()
	})
}

// SetGoodType sets the "good_type" field.
func (u *OrderBaseUpsertBulk) SetGoodType(v string) *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.SetGoodType(v)
	})
}

// UpdateGoodType sets the "good_type" field to the value that was provided on create.
func (u *OrderBaseUpsertBulk) UpdateGoodType() *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.UpdateGoodType()
	})
}

// ClearGoodType clears the value of the "good_type" field.
func (u *OrderBaseUpsertBulk) ClearGoodType() *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.ClearGoodType()
	})
}

// SetParentOrderID sets the "parent_order_id" field.
func (u *OrderBaseUpsertBulk) SetParentOrderID(v uuid.UUID) *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.SetParentOrderID(v)
	})
}

// UpdateParentOrderID sets the "parent_order_id" field to the value that was provided on create.
func (u *OrderBaseUpsertBulk) UpdateParentOrderID() *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.UpdateParentOrderID()
	})
}

// ClearParentOrderID clears the value of the "parent_order_id" field.
func (u *OrderBaseUpsertBulk) ClearParentOrderID() *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.ClearParentOrderID()
	})
}

// SetOrderType sets the "order_type" field.
func (u *OrderBaseUpsertBulk) SetOrderType(v string) *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.SetOrderType(v)
	})
}

// UpdateOrderType sets the "order_type" field to the value that was provided on create.
func (u *OrderBaseUpsertBulk) UpdateOrderType() *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.UpdateOrderType()
	})
}

// ClearOrderType clears the value of the "order_type" field.
func (u *OrderBaseUpsertBulk) ClearOrderType() *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.ClearOrderType()
	})
}

// SetCreateMethod sets the "create_method" field.
func (u *OrderBaseUpsertBulk) SetCreateMethod(v string) *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.SetCreateMethod(v)
	})
}

// UpdateCreateMethod sets the "create_method" field to the value that was provided on create.
func (u *OrderBaseUpsertBulk) UpdateCreateMethod() *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.UpdateCreateMethod()
	})
}

// ClearCreateMethod clears the value of the "create_method" field.
func (u *OrderBaseUpsertBulk) ClearCreateMethod() *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.ClearCreateMethod()
	})
}

// SetSimulate sets the "simulate" field.
func (u *OrderBaseUpsertBulk) SetSimulate(v bool) *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.SetSimulate(v)
	})
}

// UpdateSimulate sets the "simulate" field to the value that was provided on create.
func (u *OrderBaseUpsertBulk) UpdateSimulate() *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.UpdateSimulate()
	})
}

// ClearSimulate clears the value of the "simulate" field.
func (u *OrderBaseUpsertBulk) ClearSimulate() *OrderBaseUpsertBulk {
	return u.Update(func(s *OrderBaseUpsert) {
		s.ClearSimulate()
	})
}

// Exec executes the query.
func (u *OrderBaseUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the OrderBaseCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for OrderBaseCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderBaseUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

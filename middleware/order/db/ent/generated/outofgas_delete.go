// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/outofgas"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/predicate"
)

// OutOfGasDelete is the builder for deleting a OutOfGas entity.
type OutOfGasDelete struct {
	config
	hooks    []Hook
	mutation *OutOfGasMutation
}

// Where appends a list predicates to the OutOfGasDelete builder.
func (oogd *OutOfGasDelete) Where(ps ...predicate.OutOfGas) *OutOfGasDelete {
	oogd.mutation.Where(ps...)
	return oogd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (oogd *OutOfGasDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, oogd.sqlExec, oogd.mutation, oogd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (oogd *OutOfGasDelete) ExecX(ctx context.Context) int {
	n, err := oogd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (oogd *OutOfGasDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(outofgas.Table, sqlgraph.NewFieldSpec(outofgas.FieldID, field.TypeUint32))
	if ps := oogd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, oogd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	oogd.mutation.done = true
	return affected, err
}

// OutOfGasDeleteOne is the builder for deleting a single OutOfGas entity.
type OutOfGasDeleteOne struct {
	oogd *OutOfGasDelete
}

// Where appends a list predicates to the OutOfGasDelete builder.
func (oogdo *OutOfGasDeleteOne) Where(ps ...predicate.OutOfGas) *OutOfGasDeleteOne {
	oogdo.oogd.mutation.Where(ps...)
	return oogdo
}

// Exec executes the deletion query.
func (oogdo *OutOfGasDeleteOne) Exec(ctx context.Context) error {
	n, err := oogdo.oogd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{outofgas.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (oogdo *OutOfGasDeleteOne) ExecX(ctx context.Context) {
	if err := oogdo.Exec(ctx); err != nil {
		panic(err)
	}
}

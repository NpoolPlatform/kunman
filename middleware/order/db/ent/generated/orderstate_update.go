// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/orderstate"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// OrderStateUpdate is the builder for updating OrderState entities.
type OrderStateUpdate struct {
	config
	hooks     []Hook
	mutation  *OrderStateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrderStateUpdate builder.
func (osu *OrderStateUpdate) Where(ps ...predicate.OrderState) *OrderStateUpdate {
	osu.mutation.Where(ps...)
	return osu
}

// SetEntID sets the "ent_id" field.
func (osu *OrderStateUpdate) SetEntID(u uuid.UUID) *OrderStateUpdate {
	osu.mutation.SetEntID(u)
	return osu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (osu *OrderStateUpdate) SetNillableEntID(u *uuid.UUID) *OrderStateUpdate {
	if u != nil {
		osu.SetEntID(*u)
	}
	return osu
}

// SetOrderID sets the "order_id" field.
func (osu *OrderStateUpdate) SetOrderID(u uuid.UUID) *OrderStateUpdate {
	osu.mutation.SetOrderID(u)
	return osu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (osu *OrderStateUpdate) SetNillableOrderID(u *uuid.UUID) *OrderStateUpdate {
	if u != nil {
		osu.SetOrderID(*u)
	}
	return osu
}

// SetOrderState sets the "order_state" field.
func (osu *OrderStateUpdate) SetOrderState(s string) *OrderStateUpdate {
	osu.mutation.SetOrderState(s)
	return osu
}

// SetNillableOrderState sets the "order_state" field if the given value is not nil.
func (osu *OrderStateUpdate) SetNillableOrderState(s *string) *OrderStateUpdate {
	if s != nil {
		osu.SetOrderState(*s)
	}
	return osu
}

// ClearOrderState clears the value of the "order_state" field.
func (osu *OrderStateUpdate) ClearOrderState() *OrderStateUpdate {
	osu.mutation.ClearOrderState()
	return osu
}

// SetCancelState sets the "cancel_state" field.
func (osu *OrderStateUpdate) SetCancelState(s string) *OrderStateUpdate {
	osu.mutation.SetCancelState(s)
	return osu
}

// SetNillableCancelState sets the "cancel_state" field if the given value is not nil.
func (osu *OrderStateUpdate) SetNillableCancelState(s *string) *OrderStateUpdate {
	if s != nil {
		osu.SetCancelState(*s)
	}
	return osu
}

// ClearCancelState clears the value of the "cancel_state" field.
func (osu *OrderStateUpdate) ClearCancelState() *OrderStateUpdate {
	osu.mutation.ClearCancelState()
	return osu
}

// SetStartMode sets the "start_mode" field.
func (osu *OrderStateUpdate) SetStartMode(s string) *OrderStateUpdate {
	osu.mutation.SetStartMode(s)
	return osu
}

// SetNillableStartMode sets the "start_mode" field if the given value is not nil.
func (osu *OrderStateUpdate) SetNillableStartMode(s *string) *OrderStateUpdate {
	if s != nil {
		osu.SetStartMode(*s)
	}
	return osu
}

// ClearStartMode clears the value of the "start_mode" field.
func (osu *OrderStateUpdate) ClearStartMode() *OrderStateUpdate {
	osu.mutation.ClearStartMode()
	return osu
}

// SetStartAt sets the "start_at" field.
func (osu *OrderStateUpdate) SetStartAt(u uint32) *OrderStateUpdate {
	osu.mutation.ResetStartAt()
	osu.mutation.SetStartAt(u)
	return osu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (osu *OrderStateUpdate) SetNillableStartAt(u *uint32) *OrderStateUpdate {
	if u != nil {
		osu.SetStartAt(*u)
	}
	return osu
}

// AddStartAt adds u to the "start_at" field.
func (osu *OrderStateUpdate) AddStartAt(u int32) *OrderStateUpdate {
	osu.mutation.AddStartAt(u)
	return osu
}

// ClearStartAt clears the value of the "start_at" field.
func (osu *OrderStateUpdate) ClearStartAt() *OrderStateUpdate {
	osu.mutation.ClearStartAt()
	return osu
}

// SetEndAt sets the "end_at" field.
func (osu *OrderStateUpdate) SetEndAt(u uint32) *OrderStateUpdate {
	osu.mutation.ResetEndAt()
	osu.mutation.SetEndAt(u)
	return osu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (osu *OrderStateUpdate) SetNillableEndAt(u *uint32) *OrderStateUpdate {
	if u != nil {
		osu.SetEndAt(*u)
	}
	return osu
}

// AddEndAt adds u to the "end_at" field.
func (osu *OrderStateUpdate) AddEndAt(u int32) *OrderStateUpdate {
	osu.mutation.AddEndAt(u)
	return osu
}

// ClearEndAt clears the value of the "end_at" field.
func (osu *OrderStateUpdate) ClearEndAt() *OrderStateUpdate {
	osu.mutation.ClearEndAt()
	return osu
}

// SetPaidAt sets the "paid_at" field.
func (osu *OrderStateUpdate) SetPaidAt(u uint32) *OrderStateUpdate {
	osu.mutation.ResetPaidAt()
	osu.mutation.SetPaidAt(u)
	return osu
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (osu *OrderStateUpdate) SetNillablePaidAt(u *uint32) *OrderStateUpdate {
	if u != nil {
		osu.SetPaidAt(*u)
	}
	return osu
}

// AddPaidAt adds u to the "paid_at" field.
func (osu *OrderStateUpdate) AddPaidAt(u int32) *OrderStateUpdate {
	osu.mutation.AddPaidAt(u)
	return osu
}

// ClearPaidAt clears the value of the "paid_at" field.
func (osu *OrderStateUpdate) ClearPaidAt() *OrderStateUpdate {
	osu.mutation.ClearPaidAt()
	return osu
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (osu *OrderStateUpdate) SetLastBenefitAt(u uint32) *OrderStateUpdate {
	osu.mutation.ResetLastBenefitAt()
	osu.mutation.SetLastBenefitAt(u)
	return osu
}

// SetNillableLastBenefitAt sets the "last_benefit_at" field if the given value is not nil.
func (osu *OrderStateUpdate) SetNillableLastBenefitAt(u *uint32) *OrderStateUpdate {
	if u != nil {
		osu.SetLastBenefitAt(*u)
	}
	return osu
}

// AddLastBenefitAt adds u to the "last_benefit_at" field.
func (osu *OrderStateUpdate) AddLastBenefitAt(u int32) *OrderStateUpdate {
	osu.mutation.AddLastBenefitAt(u)
	return osu
}

// ClearLastBenefitAt clears the value of the "last_benefit_at" field.
func (osu *OrderStateUpdate) ClearLastBenefitAt() *OrderStateUpdate {
	osu.mutation.ClearLastBenefitAt()
	return osu
}

// SetBenefitState sets the "benefit_state" field.
func (osu *OrderStateUpdate) SetBenefitState(s string) *OrderStateUpdate {
	osu.mutation.SetBenefitState(s)
	return osu
}

// SetNillableBenefitState sets the "benefit_state" field if the given value is not nil.
func (osu *OrderStateUpdate) SetNillableBenefitState(s *string) *OrderStateUpdate {
	if s != nil {
		osu.SetBenefitState(*s)
	}
	return osu
}

// ClearBenefitState clears the value of the "benefit_state" field.
func (osu *OrderStateUpdate) ClearBenefitState() *OrderStateUpdate {
	osu.mutation.ClearBenefitState()
	return osu
}

// SetUserSetPaid sets the "user_set_paid" field.
func (osu *OrderStateUpdate) SetUserSetPaid(b bool) *OrderStateUpdate {
	osu.mutation.SetUserSetPaid(b)
	return osu
}

// SetNillableUserSetPaid sets the "user_set_paid" field if the given value is not nil.
func (osu *OrderStateUpdate) SetNillableUserSetPaid(b *bool) *OrderStateUpdate {
	if b != nil {
		osu.SetUserSetPaid(*b)
	}
	return osu
}

// ClearUserSetPaid clears the value of the "user_set_paid" field.
func (osu *OrderStateUpdate) ClearUserSetPaid() *OrderStateUpdate {
	osu.mutation.ClearUserSetPaid()
	return osu
}

// SetUserSetCanceled sets the "user_set_canceled" field.
func (osu *OrderStateUpdate) SetUserSetCanceled(b bool) *OrderStateUpdate {
	osu.mutation.SetUserSetCanceled(b)
	return osu
}

// SetNillableUserSetCanceled sets the "user_set_canceled" field if the given value is not nil.
func (osu *OrderStateUpdate) SetNillableUserSetCanceled(b *bool) *OrderStateUpdate {
	if b != nil {
		osu.SetUserSetCanceled(*b)
	}
	return osu
}

// ClearUserSetCanceled clears the value of the "user_set_canceled" field.
func (osu *OrderStateUpdate) ClearUserSetCanceled() *OrderStateUpdate {
	osu.mutation.ClearUserSetCanceled()
	return osu
}

// SetAdminSetCanceled sets the "admin_set_canceled" field.
func (osu *OrderStateUpdate) SetAdminSetCanceled(b bool) *OrderStateUpdate {
	osu.mutation.SetAdminSetCanceled(b)
	return osu
}

// SetNillableAdminSetCanceled sets the "admin_set_canceled" field if the given value is not nil.
func (osu *OrderStateUpdate) SetNillableAdminSetCanceled(b *bool) *OrderStateUpdate {
	if b != nil {
		osu.SetAdminSetCanceled(*b)
	}
	return osu
}

// ClearAdminSetCanceled clears the value of the "admin_set_canceled" field.
func (osu *OrderStateUpdate) ClearAdminSetCanceled() *OrderStateUpdate {
	osu.mutation.ClearAdminSetCanceled()
	return osu
}

// SetPaymentTransactionID sets the "payment_transaction_id" field.
func (osu *OrderStateUpdate) SetPaymentTransactionID(s string) *OrderStateUpdate {
	osu.mutation.SetPaymentTransactionID(s)
	return osu
}

// SetNillablePaymentTransactionID sets the "payment_transaction_id" field if the given value is not nil.
func (osu *OrderStateUpdate) SetNillablePaymentTransactionID(s *string) *OrderStateUpdate {
	if s != nil {
		osu.SetPaymentTransactionID(*s)
	}
	return osu
}

// ClearPaymentTransactionID clears the value of the "payment_transaction_id" field.
func (osu *OrderStateUpdate) ClearPaymentTransactionID() *OrderStateUpdate {
	osu.mutation.ClearPaymentTransactionID()
	return osu
}

// SetPaymentFinishAmount sets the "payment_finish_amount" field.
func (osu *OrderStateUpdate) SetPaymentFinishAmount(d decimal.Decimal) *OrderStateUpdate {
	osu.mutation.SetPaymentFinishAmount(d)
	return osu
}

// SetNillablePaymentFinishAmount sets the "payment_finish_amount" field if the given value is not nil.
func (osu *OrderStateUpdate) SetNillablePaymentFinishAmount(d *decimal.Decimal) *OrderStateUpdate {
	if d != nil {
		osu.SetPaymentFinishAmount(*d)
	}
	return osu
}

// ClearPaymentFinishAmount clears the value of the "payment_finish_amount" field.
func (osu *OrderStateUpdate) ClearPaymentFinishAmount() *OrderStateUpdate {
	osu.mutation.ClearPaymentFinishAmount()
	return osu
}

// SetPaymentState sets the "payment_state" field.
func (osu *OrderStateUpdate) SetPaymentState(s string) *OrderStateUpdate {
	osu.mutation.SetPaymentState(s)
	return osu
}

// SetNillablePaymentState sets the "payment_state" field if the given value is not nil.
func (osu *OrderStateUpdate) SetNillablePaymentState(s *string) *OrderStateUpdate {
	if s != nil {
		osu.SetPaymentState(*s)
	}
	return osu
}

// ClearPaymentState clears the value of the "payment_state" field.
func (osu *OrderStateUpdate) ClearPaymentState() *OrderStateUpdate {
	osu.mutation.ClearPaymentState()
	return osu
}

// SetOutofgasHours sets the "outofgas_hours" field.
func (osu *OrderStateUpdate) SetOutofgasHours(u uint32) *OrderStateUpdate {
	osu.mutation.ResetOutofgasHours()
	osu.mutation.SetOutofgasHours(u)
	return osu
}

// SetNillableOutofgasHours sets the "outofgas_hours" field if the given value is not nil.
func (osu *OrderStateUpdate) SetNillableOutofgasHours(u *uint32) *OrderStateUpdate {
	if u != nil {
		osu.SetOutofgasHours(*u)
	}
	return osu
}

// AddOutofgasHours adds u to the "outofgas_hours" field.
func (osu *OrderStateUpdate) AddOutofgasHours(u int32) *OrderStateUpdate {
	osu.mutation.AddOutofgasHours(u)
	return osu
}

// ClearOutofgasHours clears the value of the "outofgas_hours" field.
func (osu *OrderStateUpdate) ClearOutofgasHours() *OrderStateUpdate {
	osu.mutation.ClearOutofgasHours()
	return osu
}

// SetCompensateHours sets the "compensate_hours" field.
func (osu *OrderStateUpdate) SetCompensateHours(u uint32) *OrderStateUpdate {
	osu.mutation.ResetCompensateHours()
	osu.mutation.SetCompensateHours(u)
	return osu
}

// SetNillableCompensateHours sets the "compensate_hours" field if the given value is not nil.
func (osu *OrderStateUpdate) SetNillableCompensateHours(u *uint32) *OrderStateUpdate {
	if u != nil {
		osu.SetCompensateHours(*u)
	}
	return osu
}

// AddCompensateHours adds u to the "compensate_hours" field.
func (osu *OrderStateUpdate) AddCompensateHours(u int32) *OrderStateUpdate {
	osu.mutation.AddCompensateHours(u)
	return osu
}

// ClearCompensateHours clears the value of the "compensate_hours" field.
func (osu *OrderStateUpdate) ClearCompensateHours() *OrderStateUpdate {
	osu.mutation.ClearCompensateHours()
	return osu
}

// SetRenewState sets the "renew_state" field.
func (osu *OrderStateUpdate) SetRenewState(s string) *OrderStateUpdate {
	osu.mutation.SetRenewState(s)
	return osu
}

// SetNillableRenewState sets the "renew_state" field if the given value is not nil.
func (osu *OrderStateUpdate) SetNillableRenewState(s *string) *OrderStateUpdate {
	if s != nil {
		osu.SetRenewState(*s)
	}
	return osu
}

// ClearRenewState clears the value of the "renew_state" field.
func (osu *OrderStateUpdate) ClearRenewState() *OrderStateUpdate {
	osu.mutation.ClearRenewState()
	return osu
}

// SetRenewNotifyAt sets the "renew_notify_at" field.
func (osu *OrderStateUpdate) SetRenewNotifyAt(u uint32) *OrderStateUpdate {
	osu.mutation.ResetRenewNotifyAt()
	osu.mutation.SetRenewNotifyAt(u)
	return osu
}

// SetNillableRenewNotifyAt sets the "renew_notify_at" field if the given value is not nil.
func (osu *OrderStateUpdate) SetNillableRenewNotifyAt(u *uint32) *OrderStateUpdate {
	if u != nil {
		osu.SetRenewNotifyAt(*u)
	}
	return osu
}

// AddRenewNotifyAt adds u to the "renew_notify_at" field.
func (osu *OrderStateUpdate) AddRenewNotifyAt(u int32) *OrderStateUpdate {
	osu.mutation.AddRenewNotifyAt(u)
	return osu
}

// ClearRenewNotifyAt clears the value of the "renew_notify_at" field.
func (osu *OrderStateUpdate) ClearRenewNotifyAt() *OrderStateUpdate {
	osu.mutation.ClearRenewNotifyAt()
	return osu
}

// Mutation returns the OrderStateMutation object of the builder.
func (osu *OrderStateUpdate) Mutation() *OrderStateMutation {
	return osu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (osu *OrderStateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, osu.sqlSave, osu.mutation, osu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osu *OrderStateUpdate) SaveX(ctx context.Context) int {
	affected, err := osu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (osu *OrderStateUpdate) Exec(ctx context.Context) error {
	_, err := osu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osu *OrderStateUpdate) ExecX(ctx context.Context) {
	if err := osu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (osu *OrderStateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderStateUpdate {
	osu.modifiers = append(osu.modifiers, modifiers...)
	return osu
}

func (osu *OrderStateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderstate.Table, orderstate.Columns, sqlgraph.NewFieldSpec(orderstate.FieldID, field.TypeUint32))
	if ps := osu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osu.mutation.EntID(); ok {
		_spec.SetField(orderstate.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := osu.mutation.OrderID(); ok {
		_spec.SetField(orderstate.FieldOrderID, field.TypeUUID, value)
	}
	if value, ok := osu.mutation.OrderState(); ok {
		_spec.SetField(orderstate.FieldOrderState, field.TypeString, value)
	}
	if osu.mutation.OrderStateCleared() {
		_spec.ClearField(orderstate.FieldOrderState, field.TypeString)
	}
	if value, ok := osu.mutation.CancelState(); ok {
		_spec.SetField(orderstate.FieldCancelState, field.TypeString, value)
	}
	if osu.mutation.CancelStateCleared() {
		_spec.ClearField(orderstate.FieldCancelState, field.TypeString)
	}
	if value, ok := osu.mutation.StartMode(); ok {
		_spec.SetField(orderstate.FieldStartMode, field.TypeString, value)
	}
	if osu.mutation.StartModeCleared() {
		_spec.ClearField(orderstate.FieldStartMode, field.TypeString)
	}
	if value, ok := osu.mutation.StartAt(); ok {
		_spec.SetField(orderstate.FieldStartAt, field.TypeUint32, value)
	}
	if value, ok := osu.mutation.AddedStartAt(); ok {
		_spec.AddField(orderstate.FieldStartAt, field.TypeUint32, value)
	}
	if osu.mutation.StartAtCleared() {
		_spec.ClearField(orderstate.FieldStartAt, field.TypeUint32)
	}
	if value, ok := osu.mutation.EndAt(); ok {
		_spec.SetField(orderstate.FieldEndAt, field.TypeUint32, value)
	}
	if value, ok := osu.mutation.AddedEndAt(); ok {
		_spec.AddField(orderstate.FieldEndAt, field.TypeUint32, value)
	}
	if osu.mutation.EndAtCleared() {
		_spec.ClearField(orderstate.FieldEndAt, field.TypeUint32)
	}
	if value, ok := osu.mutation.PaidAt(); ok {
		_spec.SetField(orderstate.FieldPaidAt, field.TypeUint32, value)
	}
	if value, ok := osu.mutation.AddedPaidAt(); ok {
		_spec.AddField(orderstate.FieldPaidAt, field.TypeUint32, value)
	}
	if osu.mutation.PaidAtCleared() {
		_spec.ClearField(orderstate.FieldPaidAt, field.TypeUint32)
	}
	if value, ok := osu.mutation.LastBenefitAt(); ok {
		_spec.SetField(orderstate.FieldLastBenefitAt, field.TypeUint32, value)
	}
	if value, ok := osu.mutation.AddedLastBenefitAt(); ok {
		_spec.AddField(orderstate.FieldLastBenefitAt, field.TypeUint32, value)
	}
	if osu.mutation.LastBenefitAtCleared() {
		_spec.ClearField(orderstate.FieldLastBenefitAt, field.TypeUint32)
	}
	if value, ok := osu.mutation.BenefitState(); ok {
		_spec.SetField(orderstate.FieldBenefitState, field.TypeString, value)
	}
	if osu.mutation.BenefitStateCleared() {
		_spec.ClearField(orderstate.FieldBenefitState, field.TypeString)
	}
	if value, ok := osu.mutation.UserSetPaid(); ok {
		_spec.SetField(orderstate.FieldUserSetPaid, field.TypeBool, value)
	}
	if osu.mutation.UserSetPaidCleared() {
		_spec.ClearField(orderstate.FieldUserSetPaid, field.TypeBool)
	}
	if value, ok := osu.mutation.UserSetCanceled(); ok {
		_spec.SetField(orderstate.FieldUserSetCanceled, field.TypeBool, value)
	}
	if osu.mutation.UserSetCanceledCleared() {
		_spec.ClearField(orderstate.FieldUserSetCanceled, field.TypeBool)
	}
	if value, ok := osu.mutation.AdminSetCanceled(); ok {
		_spec.SetField(orderstate.FieldAdminSetCanceled, field.TypeBool, value)
	}
	if osu.mutation.AdminSetCanceledCleared() {
		_spec.ClearField(orderstate.FieldAdminSetCanceled, field.TypeBool)
	}
	if value, ok := osu.mutation.PaymentTransactionID(); ok {
		_spec.SetField(orderstate.FieldPaymentTransactionID, field.TypeString, value)
	}
	if osu.mutation.PaymentTransactionIDCleared() {
		_spec.ClearField(orderstate.FieldPaymentTransactionID, field.TypeString)
	}
	if value, ok := osu.mutation.PaymentFinishAmount(); ok {
		_spec.SetField(orderstate.FieldPaymentFinishAmount, field.TypeOther, value)
	}
	if osu.mutation.PaymentFinishAmountCleared() {
		_spec.ClearField(orderstate.FieldPaymentFinishAmount, field.TypeOther)
	}
	if value, ok := osu.mutation.PaymentState(); ok {
		_spec.SetField(orderstate.FieldPaymentState, field.TypeString, value)
	}
	if osu.mutation.PaymentStateCleared() {
		_spec.ClearField(orderstate.FieldPaymentState, field.TypeString)
	}
	if value, ok := osu.mutation.OutofgasHours(); ok {
		_spec.SetField(orderstate.FieldOutofgasHours, field.TypeUint32, value)
	}
	if value, ok := osu.mutation.AddedOutofgasHours(); ok {
		_spec.AddField(orderstate.FieldOutofgasHours, field.TypeUint32, value)
	}
	if osu.mutation.OutofgasHoursCleared() {
		_spec.ClearField(orderstate.FieldOutofgasHours, field.TypeUint32)
	}
	if value, ok := osu.mutation.CompensateHours(); ok {
		_spec.SetField(orderstate.FieldCompensateHours, field.TypeUint32, value)
	}
	if value, ok := osu.mutation.AddedCompensateHours(); ok {
		_spec.AddField(orderstate.FieldCompensateHours, field.TypeUint32, value)
	}
	if osu.mutation.CompensateHoursCleared() {
		_spec.ClearField(orderstate.FieldCompensateHours, field.TypeUint32)
	}
	if value, ok := osu.mutation.RenewState(); ok {
		_spec.SetField(orderstate.FieldRenewState, field.TypeString, value)
	}
	if osu.mutation.RenewStateCleared() {
		_spec.ClearField(orderstate.FieldRenewState, field.TypeString)
	}
	if value, ok := osu.mutation.RenewNotifyAt(); ok {
		_spec.SetField(orderstate.FieldRenewNotifyAt, field.TypeUint32, value)
	}
	if value, ok := osu.mutation.AddedRenewNotifyAt(); ok {
		_spec.AddField(orderstate.FieldRenewNotifyAt, field.TypeUint32, value)
	}
	if osu.mutation.RenewNotifyAtCleared() {
		_spec.ClearField(orderstate.FieldRenewNotifyAt, field.TypeUint32)
	}
	_spec.AddModifiers(osu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, osu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderstate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	osu.mutation.done = true
	return n, nil
}

// OrderStateUpdateOne is the builder for updating a single OrderState entity.
type OrderStateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrderStateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (osuo *OrderStateUpdateOne) SetEntID(u uuid.UUID) *OrderStateUpdateOne {
	osuo.mutation.SetEntID(u)
	return osuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (osuo *OrderStateUpdateOne) SetNillableEntID(u *uuid.UUID) *OrderStateUpdateOne {
	if u != nil {
		osuo.SetEntID(*u)
	}
	return osuo
}

// SetOrderID sets the "order_id" field.
func (osuo *OrderStateUpdateOne) SetOrderID(u uuid.UUID) *OrderStateUpdateOne {
	osuo.mutation.SetOrderID(u)
	return osuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (osuo *OrderStateUpdateOne) SetNillableOrderID(u *uuid.UUID) *OrderStateUpdateOne {
	if u != nil {
		osuo.SetOrderID(*u)
	}
	return osuo
}

// SetOrderState sets the "order_state" field.
func (osuo *OrderStateUpdateOne) SetOrderState(s string) *OrderStateUpdateOne {
	osuo.mutation.SetOrderState(s)
	return osuo
}

// SetNillableOrderState sets the "order_state" field if the given value is not nil.
func (osuo *OrderStateUpdateOne) SetNillableOrderState(s *string) *OrderStateUpdateOne {
	if s != nil {
		osuo.SetOrderState(*s)
	}
	return osuo
}

// ClearOrderState clears the value of the "order_state" field.
func (osuo *OrderStateUpdateOne) ClearOrderState() *OrderStateUpdateOne {
	osuo.mutation.ClearOrderState()
	return osuo
}

// SetCancelState sets the "cancel_state" field.
func (osuo *OrderStateUpdateOne) SetCancelState(s string) *OrderStateUpdateOne {
	osuo.mutation.SetCancelState(s)
	return osuo
}

// SetNillableCancelState sets the "cancel_state" field if the given value is not nil.
func (osuo *OrderStateUpdateOne) SetNillableCancelState(s *string) *OrderStateUpdateOne {
	if s != nil {
		osuo.SetCancelState(*s)
	}
	return osuo
}

// ClearCancelState clears the value of the "cancel_state" field.
func (osuo *OrderStateUpdateOne) ClearCancelState() *OrderStateUpdateOne {
	osuo.mutation.ClearCancelState()
	return osuo
}

// SetStartMode sets the "start_mode" field.
func (osuo *OrderStateUpdateOne) SetStartMode(s string) *OrderStateUpdateOne {
	osuo.mutation.SetStartMode(s)
	return osuo
}

// SetNillableStartMode sets the "start_mode" field if the given value is not nil.
func (osuo *OrderStateUpdateOne) SetNillableStartMode(s *string) *OrderStateUpdateOne {
	if s != nil {
		osuo.SetStartMode(*s)
	}
	return osuo
}

// ClearStartMode clears the value of the "start_mode" field.
func (osuo *OrderStateUpdateOne) ClearStartMode() *OrderStateUpdateOne {
	osuo.mutation.ClearStartMode()
	return osuo
}

// SetStartAt sets the "start_at" field.
func (osuo *OrderStateUpdateOne) SetStartAt(u uint32) *OrderStateUpdateOne {
	osuo.mutation.ResetStartAt()
	osuo.mutation.SetStartAt(u)
	return osuo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (osuo *OrderStateUpdateOne) SetNillableStartAt(u *uint32) *OrderStateUpdateOne {
	if u != nil {
		osuo.SetStartAt(*u)
	}
	return osuo
}

// AddStartAt adds u to the "start_at" field.
func (osuo *OrderStateUpdateOne) AddStartAt(u int32) *OrderStateUpdateOne {
	osuo.mutation.AddStartAt(u)
	return osuo
}

// ClearStartAt clears the value of the "start_at" field.
func (osuo *OrderStateUpdateOne) ClearStartAt() *OrderStateUpdateOne {
	osuo.mutation.ClearStartAt()
	return osuo
}

// SetEndAt sets the "end_at" field.
func (osuo *OrderStateUpdateOne) SetEndAt(u uint32) *OrderStateUpdateOne {
	osuo.mutation.ResetEndAt()
	osuo.mutation.SetEndAt(u)
	return osuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (osuo *OrderStateUpdateOne) SetNillableEndAt(u *uint32) *OrderStateUpdateOne {
	if u != nil {
		osuo.SetEndAt(*u)
	}
	return osuo
}

// AddEndAt adds u to the "end_at" field.
func (osuo *OrderStateUpdateOne) AddEndAt(u int32) *OrderStateUpdateOne {
	osuo.mutation.AddEndAt(u)
	return osuo
}

// ClearEndAt clears the value of the "end_at" field.
func (osuo *OrderStateUpdateOne) ClearEndAt() *OrderStateUpdateOne {
	osuo.mutation.ClearEndAt()
	return osuo
}

// SetPaidAt sets the "paid_at" field.
func (osuo *OrderStateUpdateOne) SetPaidAt(u uint32) *OrderStateUpdateOne {
	osuo.mutation.ResetPaidAt()
	osuo.mutation.SetPaidAt(u)
	return osuo
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (osuo *OrderStateUpdateOne) SetNillablePaidAt(u *uint32) *OrderStateUpdateOne {
	if u != nil {
		osuo.SetPaidAt(*u)
	}
	return osuo
}

// AddPaidAt adds u to the "paid_at" field.
func (osuo *OrderStateUpdateOne) AddPaidAt(u int32) *OrderStateUpdateOne {
	osuo.mutation.AddPaidAt(u)
	return osuo
}

// ClearPaidAt clears the value of the "paid_at" field.
func (osuo *OrderStateUpdateOne) ClearPaidAt() *OrderStateUpdateOne {
	osuo.mutation.ClearPaidAt()
	return osuo
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (osuo *OrderStateUpdateOne) SetLastBenefitAt(u uint32) *OrderStateUpdateOne {
	osuo.mutation.ResetLastBenefitAt()
	osuo.mutation.SetLastBenefitAt(u)
	return osuo
}

// SetNillableLastBenefitAt sets the "last_benefit_at" field if the given value is not nil.
func (osuo *OrderStateUpdateOne) SetNillableLastBenefitAt(u *uint32) *OrderStateUpdateOne {
	if u != nil {
		osuo.SetLastBenefitAt(*u)
	}
	return osuo
}

// AddLastBenefitAt adds u to the "last_benefit_at" field.
func (osuo *OrderStateUpdateOne) AddLastBenefitAt(u int32) *OrderStateUpdateOne {
	osuo.mutation.AddLastBenefitAt(u)
	return osuo
}

// ClearLastBenefitAt clears the value of the "last_benefit_at" field.
func (osuo *OrderStateUpdateOne) ClearLastBenefitAt() *OrderStateUpdateOne {
	osuo.mutation.ClearLastBenefitAt()
	return osuo
}

// SetBenefitState sets the "benefit_state" field.
func (osuo *OrderStateUpdateOne) SetBenefitState(s string) *OrderStateUpdateOne {
	osuo.mutation.SetBenefitState(s)
	return osuo
}

// SetNillableBenefitState sets the "benefit_state" field if the given value is not nil.
func (osuo *OrderStateUpdateOne) SetNillableBenefitState(s *string) *OrderStateUpdateOne {
	if s != nil {
		osuo.SetBenefitState(*s)
	}
	return osuo
}

// ClearBenefitState clears the value of the "benefit_state" field.
func (osuo *OrderStateUpdateOne) ClearBenefitState() *OrderStateUpdateOne {
	osuo.mutation.ClearBenefitState()
	return osuo
}

// SetUserSetPaid sets the "user_set_paid" field.
func (osuo *OrderStateUpdateOne) SetUserSetPaid(b bool) *OrderStateUpdateOne {
	osuo.mutation.SetUserSetPaid(b)
	return osuo
}

// SetNillableUserSetPaid sets the "user_set_paid" field if the given value is not nil.
func (osuo *OrderStateUpdateOne) SetNillableUserSetPaid(b *bool) *OrderStateUpdateOne {
	if b != nil {
		osuo.SetUserSetPaid(*b)
	}
	return osuo
}

// ClearUserSetPaid clears the value of the "user_set_paid" field.
func (osuo *OrderStateUpdateOne) ClearUserSetPaid() *OrderStateUpdateOne {
	osuo.mutation.ClearUserSetPaid()
	return osuo
}

// SetUserSetCanceled sets the "user_set_canceled" field.
func (osuo *OrderStateUpdateOne) SetUserSetCanceled(b bool) *OrderStateUpdateOne {
	osuo.mutation.SetUserSetCanceled(b)
	return osuo
}

// SetNillableUserSetCanceled sets the "user_set_canceled" field if the given value is not nil.
func (osuo *OrderStateUpdateOne) SetNillableUserSetCanceled(b *bool) *OrderStateUpdateOne {
	if b != nil {
		osuo.SetUserSetCanceled(*b)
	}
	return osuo
}

// ClearUserSetCanceled clears the value of the "user_set_canceled" field.
func (osuo *OrderStateUpdateOne) ClearUserSetCanceled() *OrderStateUpdateOne {
	osuo.mutation.ClearUserSetCanceled()
	return osuo
}

// SetAdminSetCanceled sets the "admin_set_canceled" field.
func (osuo *OrderStateUpdateOne) SetAdminSetCanceled(b bool) *OrderStateUpdateOne {
	osuo.mutation.SetAdminSetCanceled(b)
	return osuo
}

// SetNillableAdminSetCanceled sets the "admin_set_canceled" field if the given value is not nil.
func (osuo *OrderStateUpdateOne) SetNillableAdminSetCanceled(b *bool) *OrderStateUpdateOne {
	if b != nil {
		osuo.SetAdminSetCanceled(*b)
	}
	return osuo
}

// ClearAdminSetCanceled clears the value of the "admin_set_canceled" field.
func (osuo *OrderStateUpdateOne) ClearAdminSetCanceled() *OrderStateUpdateOne {
	osuo.mutation.ClearAdminSetCanceled()
	return osuo
}

// SetPaymentTransactionID sets the "payment_transaction_id" field.
func (osuo *OrderStateUpdateOne) SetPaymentTransactionID(s string) *OrderStateUpdateOne {
	osuo.mutation.SetPaymentTransactionID(s)
	return osuo
}

// SetNillablePaymentTransactionID sets the "payment_transaction_id" field if the given value is not nil.
func (osuo *OrderStateUpdateOne) SetNillablePaymentTransactionID(s *string) *OrderStateUpdateOne {
	if s != nil {
		osuo.SetPaymentTransactionID(*s)
	}
	return osuo
}

// ClearPaymentTransactionID clears the value of the "payment_transaction_id" field.
func (osuo *OrderStateUpdateOne) ClearPaymentTransactionID() *OrderStateUpdateOne {
	osuo.mutation.ClearPaymentTransactionID()
	return osuo
}

// SetPaymentFinishAmount sets the "payment_finish_amount" field.
func (osuo *OrderStateUpdateOne) SetPaymentFinishAmount(d decimal.Decimal) *OrderStateUpdateOne {
	osuo.mutation.SetPaymentFinishAmount(d)
	return osuo
}

// SetNillablePaymentFinishAmount sets the "payment_finish_amount" field if the given value is not nil.
func (osuo *OrderStateUpdateOne) SetNillablePaymentFinishAmount(d *decimal.Decimal) *OrderStateUpdateOne {
	if d != nil {
		osuo.SetPaymentFinishAmount(*d)
	}
	return osuo
}

// ClearPaymentFinishAmount clears the value of the "payment_finish_amount" field.
func (osuo *OrderStateUpdateOne) ClearPaymentFinishAmount() *OrderStateUpdateOne {
	osuo.mutation.ClearPaymentFinishAmount()
	return osuo
}

// SetPaymentState sets the "payment_state" field.
func (osuo *OrderStateUpdateOne) SetPaymentState(s string) *OrderStateUpdateOne {
	osuo.mutation.SetPaymentState(s)
	return osuo
}

// SetNillablePaymentState sets the "payment_state" field if the given value is not nil.
func (osuo *OrderStateUpdateOne) SetNillablePaymentState(s *string) *OrderStateUpdateOne {
	if s != nil {
		osuo.SetPaymentState(*s)
	}
	return osuo
}

// ClearPaymentState clears the value of the "payment_state" field.
func (osuo *OrderStateUpdateOne) ClearPaymentState() *OrderStateUpdateOne {
	osuo.mutation.ClearPaymentState()
	return osuo
}

// SetOutofgasHours sets the "outofgas_hours" field.
func (osuo *OrderStateUpdateOne) SetOutofgasHours(u uint32) *OrderStateUpdateOne {
	osuo.mutation.ResetOutofgasHours()
	osuo.mutation.SetOutofgasHours(u)
	return osuo
}

// SetNillableOutofgasHours sets the "outofgas_hours" field if the given value is not nil.
func (osuo *OrderStateUpdateOne) SetNillableOutofgasHours(u *uint32) *OrderStateUpdateOne {
	if u != nil {
		osuo.SetOutofgasHours(*u)
	}
	return osuo
}

// AddOutofgasHours adds u to the "outofgas_hours" field.
func (osuo *OrderStateUpdateOne) AddOutofgasHours(u int32) *OrderStateUpdateOne {
	osuo.mutation.AddOutofgasHours(u)
	return osuo
}

// ClearOutofgasHours clears the value of the "outofgas_hours" field.
func (osuo *OrderStateUpdateOne) ClearOutofgasHours() *OrderStateUpdateOne {
	osuo.mutation.ClearOutofgasHours()
	return osuo
}

// SetCompensateHours sets the "compensate_hours" field.
func (osuo *OrderStateUpdateOne) SetCompensateHours(u uint32) *OrderStateUpdateOne {
	osuo.mutation.ResetCompensateHours()
	osuo.mutation.SetCompensateHours(u)
	return osuo
}

// SetNillableCompensateHours sets the "compensate_hours" field if the given value is not nil.
func (osuo *OrderStateUpdateOne) SetNillableCompensateHours(u *uint32) *OrderStateUpdateOne {
	if u != nil {
		osuo.SetCompensateHours(*u)
	}
	return osuo
}

// AddCompensateHours adds u to the "compensate_hours" field.
func (osuo *OrderStateUpdateOne) AddCompensateHours(u int32) *OrderStateUpdateOne {
	osuo.mutation.AddCompensateHours(u)
	return osuo
}

// ClearCompensateHours clears the value of the "compensate_hours" field.
func (osuo *OrderStateUpdateOne) ClearCompensateHours() *OrderStateUpdateOne {
	osuo.mutation.ClearCompensateHours()
	return osuo
}

// SetRenewState sets the "renew_state" field.
func (osuo *OrderStateUpdateOne) SetRenewState(s string) *OrderStateUpdateOne {
	osuo.mutation.SetRenewState(s)
	return osuo
}

// SetNillableRenewState sets the "renew_state" field if the given value is not nil.
func (osuo *OrderStateUpdateOne) SetNillableRenewState(s *string) *OrderStateUpdateOne {
	if s != nil {
		osuo.SetRenewState(*s)
	}
	return osuo
}

// ClearRenewState clears the value of the "renew_state" field.
func (osuo *OrderStateUpdateOne) ClearRenewState() *OrderStateUpdateOne {
	osuo.mutation.ClearRenewState()
	return osuo
}

// SetRenewNotifyAt sets the "renew_notify_at" field.
func (osuo *OrderStateUpdateOne) SetRenewNotifyAt(u uint32) *OrderStateUpdateOne {
	osuo.mutation.ResetRenewNotifyAt()
	osuo.mutation.SetRenewNotifyAt(u)
	return osuo
}

// SetNillableRenewNotifyAt sets the "renew_notify_at" field if the given value is not nil.
func (osuo *OrderStateUpdateOne) SetNillableRenewNotifyAt(u *uint32) *OrderStateUpdateOne {
	if u != nil {
		osuo.SetRenewNotifyAt(*u)
	}
	return osuo
}

// AddRenewNotifyAt adds u to the "renew_notify_at" field.
func (osuo *OrderStateUpdateOne) AddRenewNotifyAt(u int32) *OrderStateUpdateOne {
	osuo.mutation.AddRenewNotifyAt(u)
	return osuo
}

// ClearRenewNotifyAt clears the value of the "renew_notify_at" field.
func (osuo *OrderStateUpdateOne) ClearRenewNotifyAt() *OrderStateUpdateOne {
	osuo.mutation.ClearRenewNotifyAt()
	return osuo
}

// Mutation returns the OrderStateMutation object of the builder.
func (osuo *OrderStateUpdateOne) Mutation() *OrderStateMutation {
	return osuo.mutation
}

// Where appends a list predicates to the OrderStateUpdate builder.
func (osuo *OrderStateUpdateOne) Where(ps ...predicate.OrderState) *OrderStateUpdateOne {
	osuo.mutation.Where(ps...)
	return osuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (osuo *OrderStateUpdateOne) Select(field string, fields ...string) *OrderStateUpdateOne {
	osuo.fields = append([]string{field}, fields...)
	return osuo
}

// Save executes the query and returns the updated OrderState entity.
func (osuo *OrderStateUpdateOne) Save(ctx context.Context) (*OrderState, error) {
	return withHooks(ctx, osuo.sqlSave, osuo.mutation, osuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osuo *OrderStateUpdateOne) SaveX(ctx context.Context) *OrderState {
	node, err := osuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (osuo *OrderStateUpdateOne) Exec(ctx context.Context) error {
	_, err := osuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osuo *OrderStateUpdateOne) ExecX(ctx context.Context) {
	if err := osuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (osuo *OrderStateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderStateUpdateOne {
	osuo.modifiers = append(osuo.modifiers, modifiers...)
	return osuo
}

func (osuo *OrderStateUpdateOne) sqlSave(ctx context.Context) (_node *OrderState, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderstate.Table, orderstate.Columns, sqlgraph.NewFieldSpec(orderstate.FieldID, field.TypeUint32))
	id, ok := osuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "OrderState.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := osuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderstate.FieldID)
		for _, f := range fields {
			if !orderstate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != orderstate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := osuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osuo.mutation.EntID(); ok {
		_spec.SetField(orderstate.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := osuo.mutation.OrderID(); ok {
		_spec.SetField(orderstate.FieldOrderID, field.TypeUUID, value)
	}
	if value, ok := osuo.mutation.OrderState(); ok {
		_spec.SetField(orderstate.FieldOrderState, field.TypeString, value)
	}
	if osuo.mutation.OrderStateCleared() {
		_spec.ClearField(orderstate.FieldOrderState, field.TypeString)
	}
	if value, ok := osuo.mutation.CancelState(); ok {
		_spec.SetField(orderstate.FieldCancelState, field.TypeString, value)
	}
	if osuo.mutation.CancelStateCleared() {
		_spec.ClearField(orderstate.FieldCancelState, field.TypeString)
	}
	if value, ok := osuo.mutation.StartMode(); ok {
		_spec.SetField(orderstate.FieldStartMode, field.TypeString, value)
	}
	if osuo.mutation.StartModeCleared() {
		_spec.ClearField(orderstate.FieldStartMode, field.TypeString)
	}
	if value, ok := osuo.mutation.StartAt(); ok {
		_spec.SetField(orderstate.FieldStartAt, field.TypeUint32, value)
	}
	if value, ok := osuo.mutation.AddedStartAt(); ok {
		_spec.AddField(orderstate.FieldStartAt, field.TypeUint32, value)
	}
	if osuo.mutation.StartAtCleared() {
		_spec.ClearField(orderstate.FieldStartAt, field.TypeUint32)
	}
	if value, ok := osuo.mutation.EndAt(); ok {
		_spec.SetField(orderstate.FieldEndAt, field.TypeUint32, value)
	}
	if value, ok := osuo.mutation.AddedEndAt(); ok {
		_spec.AddField(orderstate.FieldEndAt, field.TypeUint32, value)
	}
	if osuo.mutation.EndAtCleared() {
		_spec.ClearField(orderstate.FieldEndAt, field.TypeUint32)
	}
	if value, ok := osuo.mutation.PaidAt(); ok {
		_spec.SetField(orderstate.FieldPaidAt, field.TypeUint32, value)
	}
	if value, ok := osuo.mutation.AddedPaidAt(); ok {
		_spec.AddField(orderstate.FieldPaidAt, field.TypeUint32, value)
	}
	if osuo.mutation.PaidAtCleared() {
		_spec.ClearField(orderstate.FieldPaidAt, field.TypeUint32)
	}
	if value, ok := osuo.mutation.LastBenefitAt(); ok {
		_spec.SetField(orderstate.FieldLastBenefitAt, field.TypeUint32, value)
	}
	if value, ok := osuo.mutation.AddedLastBenefitAt(); ok {
		_spec.AddField(orderstate.FieldLastBenefitAt, field.TypeUint32, value)
	}
	if osuo.mutation.LastBenefitAtCleared() {
		_spec.ClearField(orderstate.FieldLastBenefitAt, field.TypeUint32)
	}
	if value, ok := osuo.mutation.BenefitState(); ok {
		_spec.SetField(orderstate.FieldBenefitState, field.TypeString, value)
	}
	if osuo.mutation.BenefitStateCleared() {
		_spec.ClearField(orderstate.FieldBenefitState, field.TypeString)
	}
	if value, ok := osuo.mutation.UserSetPaid(); ok {
		_spec.SetField(orderstate.FieldUserSetPaid, field.TypeBool, value)
	}
	if osuo.mutation.UserSetPaidCleared() {
		_spec.ClearField(orderstate.FieldUserSetPaid, field.TypeBool)
	}
	if value, ok := osuo.mutation.UserSetCanceled(); ok {
		_spec.SetField(orderstate.FieldUserSetCanceled, field.TypeBool, value)
	}
	if osuo.mutation.UserSetCanceledCleared() {
		_spec.ClearField(orderstate.FieldUserSetCanceled, field.TypeBool)
	}
	if value, ok := osuo.mutation.AdminSetCanceled(); ok {
		_spec.SetField(orderstate.FieldAdminSetCanceled, field.TypeBool, value)
	}
	if osuo.mutation.AdminSetCanceledCleared() {
		_spec.ClearField(orderstate.FieldAdminSetCanceled, field.TypeBool)
	}
	if value, ok := osuo.mutation.PaymentTransactionID(); ok {
		_spec.SetField(orderstate.FieldPaymentTransactionID, field.TypeString, value)
	}
	if osuo.mutation.PaymentTransactionIDCleared() {
		_spec.ClearField(orderstate.FieldPaymentTransactionID, field.TypeString)
	}
	if value, ok := osuo.mutation.PaymentFinishAmount(); ok {
		_spec.SetField(orderstate.FieldPaymentFinishAmount, field.TypeOther, value)
	}
	if osuo.mutation.PaymentFinishAmountCleared() {
		_spec.ClearField(orderstate.FieldPaymentFinishAmount, field.TypeOther)
	}
	if value, ok := osuo.mutation.PaymentState(); ok {
		_spec.SetField(orderstate.FieldPaymentState, field.TypeString, value)
	}
	if osuo.mutation.PaymentStateCleared() {
		_spec.ClearField(orderstate.FieldPaymentState, field.TypeString)
	}
	if value, ok := osuo.mutation.OutofgasHours(); ok {
		_spec.SetField(orderstate.FieldOutofgasHours, field.TypeUint32, value)
	}
	if value, ok := osuo.mutation.AddedOutofgasHours(); ok {
		_spec.AddField(orderstate.FieldOutofgasHours, field.TypeUint32, value)
	}
	if osuo.mutation.OutofgasHoursCleared() {
		_spec.ClearField(orderstate.FieldOutofgasHours, field.TypeUint32)
	}
	if value, ok := osuo.mutation.CompensateHours(); ok {
		_spec.SetField(orderstate.FieldCompensateHours, field.TypeUint32, value)
	}
	if value, ok := osuo.mutation.AddedCompensateHours(); ok {
		_spec.AddField(orderstate.FieldCompensateHours, field.TypeUint32, value)
	}
	if osuo.mutation.CompensateHoursCleared() {
		_spec.ClearField(orderstate.FieldCompensateHours, field.TypeUint32)
	}
	if value, ok := osuo.mutation.RenewState(); ok {
		_spec.SetField(orderstate.FieldRenewState, field.TypeString, value)
	}
	if osuo.mutation.RenewStateCleared() {
		_spec.ClearField(orderstate.FieldRenewState, field.TypeString)
	}
	if value, ok := osuo.mutation.RenewNotifyAt(); ok {
		_spec.SetField(orderstate.FieldRenewNotifyAt, field.TypeUint32, value)
	}
	if value, ok := osuo.mutation.AddedRenewNotifyAt(); ok {
		_spec.AddField(orderstate.FieldRenewNotifyAt, field.TypeUint32, value)
	}
	if osuo.mutation.RenewNotifyAtCleared() {
		_spec.ClearField(orderstate.FieldRenewNotifyAt, field.TypeUint32)
	}
	_spec.AddModifiers(osuo.modifiers...)
	_node = &OrderState{config: osuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, osuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderstate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	osuo.mutation.done = true
	return _node, nil
}

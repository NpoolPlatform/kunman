// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"

	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated"

	"entgo.io/ent/entql"
	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns a formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return privacy.Allowf(format, a...)
}

// Denyf returns a formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return privacy.Denyf(format, a...)
}

// Skipf returns a formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return privacy.Skipf(format, a...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
	// MutationRuleFunc type is an adapter which allows the use of
	// ordinary functions as mutation rules.
	MutationRuleFunc = privacy.MutationRuleFunc

	// QueryMutationRule is an interface which groups query and mutation rules.
	QueryMutationRule = privacy.QueryMutationRule
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, generated.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	return f(ctx, q)
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return privacy.AlwaysAllowRule()
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return privacy.AlwaysDenyRule()
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return privacy.ContextQueryMutationRule(eval)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op generated.Op) MutationRule {
	return privacy.OnMutationOperation(rule, op)
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op generated.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m generated.Mutation) error {
		return Denyf("generated/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The AppConfigQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppConfigQueryRuleFunc func(context.Context, *generated.AppConfigQuery) error

// EvalQuery return f(ctx, q).
func (f AppConfigQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.AppConfigQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.AppConfigQuery", q)
}

// The AppConfigMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppConfigMutationRuleFunc func(context.Context, *generated.AppConfigMutation) error

// EvalMutation calls f(ctx, m).
func (f AppConfigMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.AppConfigMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.AppConfigMutation", m)
}

// The CompensateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CompensateQueryRuleFunc func(context.Context, *generated.CompensateQuery) error

// EvalQuery return f(ctx, q).
func (f CompensateQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.CompensateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.CompensateQuery", q)
}

// The CompensateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CompensateMutationRuleFunc func(context.Context, *generated.CompensateMutation) error

// EvalMutation calls f(ctx, m).
func (f CompensateMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.CompensateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.CompensateMutation", m)
}

// The FeeOrderQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FeeOrderQueryRuleFunc func(context.Context, *generated.FeeOrderQuery) error

// EvalQuery return f(ctx, q).
func (f FeeOrderQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.FeeOrderQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.FeeOrderQuery", q)
}

// The FeeOrderMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FeeOrderMutationRuleFunc func(context.Context, *generated.FeeOrderMutation) error

// EvalMutation calls f(ctx, m).
func (f FeeOrderMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.FeeOrderMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.FeeOrderMutation", m)
}

// The FeeOrderStateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FeeOrderStateQueryRuleFunc func(context.Context, *generated.FeeOrderStateQuery) error

// EvalQuery return f(ctx, q).
func (f FeeOrderStateQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.FeeOrderStateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.FeeOrderStateQuery", q)
}

// The FeeOrderStateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FeeOrderStateMutationRuleFunc func(context.Context, *generated.FeeOrderStateMutation) error

// EvalMutation calls f(ctx, m).
func (f FeeOrderStateMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.FeeOrderStateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.FeeOrderStateMutation", m)
}

// The OrderQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrderQueryRuleFunc func(context.Context, *generated.OrderQuery) error

// EvalQuery return f(ctx, q).
func (f OrderQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OrderQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.OrderQuery", q)
}

// The OrderMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrderMutationRuleFunc func(context.Context, *generated.OrderMutation) error

// EvalMutation calls f(ctx, m).
func (f OrderMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.OrderMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.OrderMutation", m)
}

// The OrderBaseQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrderBaseQueryRuleFunc func(context.Context, *generated.OrderBaseQuery) error

// EvalQuery return f(ctx, q).
func (f OrderBaseQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OrderBaseQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.OrderBaseQuery", q)
}

// The OrderBaseMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrderBaseMutationRuleFunc func(context.Context, *generated.OrderBaseMutation) error

// EvalMutation calls f(ctx, m).
func (f OrderBaseMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.OrderBaseMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.OrderBaseMutation", m)
}

// The OrderCouponQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrderCouponQueryRuleFunc func(context.Context, *generated.OrderCouponQuery) error

// EvalQuery return f(ctx, q).
func (f OrderCouponQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OrderCouponQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.OrderCouponQuery", q)
}

// The OrderCouponMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrderCouponMutationRuleFunc func(context.Context, *generated.OrderCouponMutation) error

// EvalMutation calls f(ctx, m).
func (f OrderCouponMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.OrderCouponMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.OrderCouponMutation", m)
}

// The OrderLockQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrderLockQueryRuleFunc func(context.Context, *generated.OrderLockQuery) error

// EvalQuery return f(ctx, q).
func (f OrderLockQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OrderLockQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.OrderLockQuery", q)
}

// The OrderLockMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrderLockMutationRuleFunc func(context.Context, *generated.OrderLockMutation) error

// EvalMutation calls f(ctx, m).
func (f OrderLockMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.OrderLockMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.OrderLockMutation", m)
}

// The OrderStateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrderStateQueryRuleFunc func(context.Context, *generated.OrderStateQuery) error

// EvalQuery return f(ctx, q).
func (f OrderStateQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OrderStateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.OrderStateQuery", q)
}

// The OrderStateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrderStateMutationRuleFunc func(context.Context, *generated.OrderStateMutation) error

// EvalMutation calls f(ctx, m).
func (f OrderStateMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.OrderStateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.OrderStateMutation", m)
}

// The OrderStateBaseQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrderStateBaseQueryRuleFunc func(context.Context, *generated.OrderStateBaseQuery) error

// EvalQuery return f(ctx, q).
func (f OrderStateBaseQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OrderStateBaseQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.OrderStateBaseQuery", q)
}

// The OrderStateBaseMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrderStateBaseMutationRuleFunc func(context.Context, *generated.OrderStateBaseMutation) error

// EvalMutation calls f(ctx, m).
func (f OrderStateBaseMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.OrderStateBaseMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.OrderStateBaseMutation", m)
}

// The OutOfGasQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OutOfGasQueryRuleFunc func(context.Context, *generated.OutOfGasQuery) error

// EvalQuery return f(ctx, q).
func (f OutOfGasQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OutOfGasQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.OutOfGasQuery", q)
}

// The OutOfGasMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OutOfGasMutationRuleFunc func(context.Context, *generated.OutOfGasMutation) error

// EvalMutation calls f(ctx, m).
func (f OutOfGasMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.OutOfGasMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.OutOfGasMutation", m)
}

// The PaymentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PaymentQueryRuleFunc func(context.Context, *generated.PaymentQuery) error

// EvalQuery return f(ctx, q).
func (f PaymentQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.PaymentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.PaymentQuery", q)
}

// The PaymentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PaymentMutationRuleFunc func(context.Context, *generated.PaymentMutation) error

// EvalMutation calls f(ctx, m).
func (f PaymentMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.PaymentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.PaymentMutation", m)
}

// The PaymentBalanceQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PaymentBalanceQueryRuleFunc func(context.Context, *generated.PaymentBalanceQuery) error

// EvalQuery return f(ctx, q).
func (f PaymentBalanceQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.PaymentBalanceQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.PaymentBalanceQuery", q)
}

// The PaymentBalanceMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PaymentBalanceMutationRuleFunc func(context.Context, *generated.PaymentBalanceMutation) error

// EvalMutation calls f(ctx, m).
func (f PaymentBalanceMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.PaymentBalanceMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.PaymentBalanceMutation", m)
}

// The PaymentBalanceLockQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PaymentBalanceLockQueryRuleFunc func(context.Context, *generated.PaymentBalanceLockQuery) error

// EvalQuery return f(ctx, q).
func (f PaymentBalanceLockQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.PaymentBalanceLockQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.PaymentBalanceLockQuery", q)
}

// The PaymentBalanceLockMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PaymentBalanceLockMutationRuleFunc func(context.Context, *generated.PaymentBalanceLockMutation) error

// EvalMutation calls f(ctx, m).
func (f PaymentBalanceLockMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.PaymentBalanceLockMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.PaymentBalanceLockMutation", m)
}

// The PaymentBaseQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PaymentBaseQueryRuleFunc func(context.Context, *generated.PaymentBaseQuery) error

// EvalQuery return f(ctx, q).
func (f PaymentBaseQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.PaymentBaseQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.PaymentBaseQuery", q)
}

// The PaymentBaseMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PaymentBaseMutationRuleFunc func(context.Context, *generated.PaymentBaseMutation) error

// EvalMutation calls f(ctx, m).
func (f PaymentBaseMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.PaymentBaseMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.PaymentBaseMutation", m)
}

// The PaymentContractQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PaymentContractQueryRuleFunc func(context.Context, *generated.PaymentContractQuery) error

// EvalQuery return f(ctx, q).
func (f PaymentContractQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.PaymentContractQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.PaymentContractQuery", q)
}

// The PaymentContractMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PaymentContractMutationRuleFunc func(context.Context, *generated.PaymentContractMutation) error

// EvalMutation calls f(ctx, m).
func (f PaymentContractMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.PaymentContractMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.PaymentContractMutation", m)
}

// The PaymentTransferQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PaymentTransferQueryRuleFunc func(context.Context, *generated.PaymentTransferQuery) error

// EvalQuery return f(ctx, q).
func (f PaymentTransferQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.PaymentTransferQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.PaymentTransferQuery", q)
}

// The PaymentTransferMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PaymentTransferMutationRuleFunc func(context.Context, *generated.PaymentTransferMutation) error

// EvalMutation calls f(ctx, m).
func (f PaymentTransferMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.PaymentTransferMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.PaymentTransferMutation", m)
}

// The PoolOrderUserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PoolOrderUserQueryRuleFunc func(context.Context, *generated.PoolOrderUserQuery) error

// EvalQuery return f(ctx, q).
func (f PoolOrderUserQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.PoolOrderUserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.PoolOrderUserQuery", q)
}

// The PoolOrderUserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PoolOrderUserMutationRuleFunc func(context.Context, *generated.PoolOrderUserMutation) error

// EvalMutation calls f(ctx, m).
func (f PoolOrderUserMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.PoolOrderUserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.PoolOrderUserMutation", m)
}

// The PowerRentalQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PowerRentalQueryRuleFunc func(context.Context, *generated.PowerRentalQuery) error

// EvalQuery return f(ctx, q).
func (f PowerRentalQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.PowerRentalQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.PowerRentalQuery", q)
}

// The PowerRentalMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PowerRentalMutationRuleFunc func(context.Context, *generated.PowerRentalMutation) error

// EvalMutation calls f(ctx, m).
func (f PowerRentalMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.PowerRentalMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.PowerRentalMutation", m)
}

// The PowerRentalStateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PowerRentalStateQueryRuleFunc func(context.Context, *generated.PowerRentalStateQuery) error

// EvalQuery return f(ctx, q).
func (f PowerRentalStateQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.PowerRentalStateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.PowerRentalStateQuery", q)
}

// The PowerRentalStateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PowerRentalStateMutationRuleFunc func(context.Context, *generated.PowerRentalStateMutation) error

// EvalMutation calls f(ctx, m).
func (f PowerRentalStateMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.PowerRentalStateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.PowerRentalStateMutation", m)
}

type (
	// Filter is the interface that wraps the Where function
	// for filtering nodes in queries and mutations.
	Filter interface {
		// Where applies a filter on the executed query/mutation.
		Where(entql.P)
	}

	// The FilterFunc type is an adapter that allows the use of ordinary
	// functions as filters for query and mutation types.
	FilterFunc func(context.Context, Filter) error
)

// EvalQuery calls f(ctx, q) if the query implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	fr, err := queryFilter(q)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

// EvalMutation calls f(ctx, q) if the mutation implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	fr, err := mutationFilter(m)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

var _ QueryMutationRule = FilterFunc(nil)

func queryFilter(q generated.Query) (Filter, error) {
	switch q := q.(type) {
	case *generated.AppConfigQuery:
		return q.Filter(), nil
	case *generated.CompensateQuery:
		return q.Filter(), nil
	case *generated.FeeOrderQuery:
		return q.Filter(), nil
	case *generated.FeeOrderStateQuery:
		return q.Filter(), nil
	case *generated.OrderQuery:
		return q.Filter(), nil
	case *generated.OrderBaseQuery:
		return q.Filter(), nil
	case *generated.OrderCouponQuery:
		return q.Filter(), nil
	case *generated.OrderLockQuery:
		return q.Filter(), nil
	case *generated.OrderStateQuery:
		return q.Filter(), nil
	case *generated.OrderStateBaseQuery:
		return q.Filter(), nil
	case *generated.OutOfGasQuery:
		return q.Filter(), nil
	case *generated.PaymentQuery:
		return q.Filter(), nil
	case *generated.PaymentBalanceQuery:
		return q.Filter(), nil
	case *generated.PaymentBalanceLockQuery:
		return q.Filter(), nil
	case *generated.PaymentBaseQuery:
		return q.Filter(), nil
	case *generated.PaymentContractQuery:
		return q.Filter(), nil
	case *generated.PaymentTransferQuery:
		return q.Filter(), nil
	case *generated.PoolOrderUserQuery:
		return q.Filter(), nil
	case *generated.PowerRentalQuery:
		return q.Filter(), nil
	case *generated.PowerRentalStateQuery:
		return q.Filter(), nil
	default:
		return nil, Denyf("generated/privacy: unexpected query type %T for query filter", q)
	}
}

func mutationFilter(m generated.Mutation) (Filter, error) {
	switch m := m.(type) {
	case *generated.AppConfigMutation:
		return m.Filter(), nil
	case *generated.CompensateMutation:
		return m.Filter(), nil
	case *generated.FeeOrderMutation:
		return m.Filter(), nil
	case *generated.FeeOrderStateMutation:
		return m.Filter(), nil
	case *generated.OrderMutation:
		return m.Filter(), nil
	case *generated.OrderBaseMutation:
		return m.Filter(), nil
	case *generated.OrderCouponMutation:
		return m.Filter(), nil
	case *generated.OrderLockMutation:
		return m.Filter(), nil
	case *generated.OrderStateMutation:
		return m.Filter(), nil
	case *generated.OrderStateBaseMutation:
		return m.Filter(), nil
	case *generated.OutOfGasMutation:
		return m.Filter(), nil
	case *generated.PaymentMutation:
		return m.Filter(), nil
	case *generated.PaymentBalanceMutation:
		return m.Filter(), nil
	case *generated.PaymentBalanceLockMutation:
		return m.Filter(), nil
	case *generated.PaymentBaseMutation:
		return m.Filter(), nil
	case *generated.PaymentContractMutation:
		return m.Filter(), nil
	case *generated.PaymentTransferMutation:
		return m.Filter(), nil
	case *generated.PoolOrderUserMutation:
		return m.Filter(), nil
	case *generated.PowerRentalMutation:
		return m.Filter(), nil
	case *generated.PowerRentalStateMutation:
		return m.Filter(), nil
	default:
		return nil, Denyf("generated/privacy: unexpected mutation type %T for mutation filter", m)
	}
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/paymentfiat"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// PaymentFiatCreate is the builder for creating a PaymentFiat entity.
type PaymentFiatCreate struct {
	config
	mutation *PaymentFiatMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (pfc *PaymentFiatCreate) SetEntID(u uuid.UUID) *PaymentFiatCreate {
	pfc.mutation.SetEntID(u)
	return pfc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (pfc *PaymentFiatCreate) SetNillableEntID(u *uuid.UUID) *PaymentFiatCreate {
	if u != nil {
		pfc.SetEntID(*u)
	}
	return pfc
}

// SetCreatedAt sets the "created_at" field.
func (pfc *PaymentFiatCreate) SetCreatedAt(u uint32) *PaymentFiatCreate {
	pfc.mutation.SetCreatedAt(u)
	return pfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pfc *PaymentFiatCreate) SetNillableCreatedAt(u *uint32) *PaymentFiatCreate {
	if u != nil {
		pfc.SetCreatedAt(*u)
	}
	return pfc
}

// SetUpdatedAt sets the "updated_at" field.
func (pfc *PaymentFiatCreate) SetUpdatedAt(u uint32) *PaymentFiatCreate {
	pfc.mutation.SetUpdatedAt(u)
	return pfc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pfc *PaymentFiatCreate) SetNillableUpdatedAt(u *uint32) *PaymentFiatCreate {
	if u != nil {
		pfc.SetUpdatedAt(*u)
	}
	return pfc
}

// SetDeletedAt sets the "deleted_at" field.
func (pfc *PaymentFiatCreate) SetDeletedAt(u uint32) *PaymentFiatCreate {
	pfc.mutation.SetDeletedAt(u)
	return pfc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pfc *PaymentFiatCreate) SetNillableDeletedAt(u *uint32) *PaymentFiatCreate {
	if u != nil {
		pfc.SetDeletedAt(*u)
	}
	return pfc
}

// SetPaymentID sets the "payment_id" field.
func (pfc *PaymentFiatCreate) SetPaymentID(u uuid.UUID) *PaymentFiatCreate {
	pfc.mutation.SetPaymentID(u)
	return pfc
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (pfc *PaymentFiatCreate) SetNillablePaymentID(u *uuid.UUID) *PaymentFiatCreate {
	if u != nil {
		pfc.SetPaymentID(*u)
	}
	return pfc
}

// SetFiatID sets the "fiat_id" field.
func (pfc *PaymentFiatCreate) SetFiatID(u uuid.UUID) *PaymentFiatCreate {
	pfc.mutation.SetFiatID(u)
	return pfc
}

// SetNillableFiatID sets the "fiat_id" field if the given value is not nil.
func (pfc *PaymentFiatCreate) SetNillableFiatID(u *uuid.UUID) *PaymentFiatCreate {
	if u != nil {
		pfc.SetFiatID(*u)
	}
	return pfc
}

// SetPaymentChannel sets the "payment_channel" field.
func (pfc *PaymentFiatCreate) SetPaymentChannel(s string) *PaymentFiatCreate {
	pfc.mutation.SetPaymentChannel(s)
	return pfc
}

// SetNillablePaymentChannel sets the "payment_channel" field if the given value is not nil.
func (pfc *PaymentFiatCreate) SetNillablePaymentChannel(s *string) *PaymentFiatCreate {
	if s != nil {
		pfc.SetPaymentChannel(*s)
	}
	return pfc
}

// SetAmount sets the "amount" field.
func (pfc *PaymentFiatCreate) SetAmount(d decimal.Decimal) *PaymentFiatCreate {
	pfc.mutation.SetAmount(d)
	return pfc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pfc *PaymentFiatCreate) SetNillableAmount(d *decimal.Decimal) *PaymentFiatCreate {
	if d != nil {
		pfc.SetAmount(*d)
	}
	return pfc
}

// SetChannelPaymentID sets the "channel_payment_id" field.
func (pfc *PaymentFiatCreate) SetChannelPaymentID(s string) *PaymentFiatCreate {
	pfc.mutation.SetChannelPaymentID(s)
	return pfc
}

// SetNillableChannelPaymentID sets the "channel_payment_id" field if the given value is not nil.
func (pfc *PaymentFiatCreate) SetNillableChannelPaymentID(s *string) *PaymentFiatCreate {
	if s != nil {
		pfc.SetChannelPaymentID(*s)
	}
	return pfc
}

// SetUsdCurrency sets the "usd_currency" field.
func (pfc *PaymentFiatCreate) SetUsdCurrency(d decimal.Decimal) *PaymentFiatCreate {
	pfc.mutation.SetUsdCurrency(d)
	return pfc
}

// SetNillableUsdCurrency sets the "usd_currency" field if the given value is not nil.
func (pfc *PaymentFiatCreate) SetNillableUsdCurrency(d *decimal.Decimal) *PaymentFiatCreate {
	if d != nil {
		pfc.SetUsdCurrency(*d)
	}
	return pfc
}

// SetID sets the "id" field.
func (pfc *PaymentFiatCreate) SetID(u uint32) *PaymentFiatCreate {
	pfc.mutation.SetID(u)
	return pfc
}

// Mutation returns the PaymentFiatMutation object of the builder.
func (pfc *PaymentFiatCreate) Mutation() *PaymentFiatMutation {
	return pfc.mutation
}

// Save creates the PaymentFiat in the database.
func (pfc *PaymentFiatCreate) Save(ctx context.Context) (*PaymentFiat, error) {
	pfc.defaults()
	return withHooks(ctx, pfc.sqlSave, pfc.mutation, pfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pfc *PaymentFiatCreate) SaveX(ctx context.Context) *PaymentFiat {
	v, err := pfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pfc *PaymentFiatCreate) Exec(ctx context.Context) error {
	_, err := pfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfc *PaymentFiatCreate) ExecX(ctx context.Context) {
	if err := pfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfc *PaymentFiatCreate) defaults() {
	if _, ok := pfc.mutation.EntID(); !ok {
		v := paymentfiat.DefaultEntID()
		pfc.mutation.SetEntID(v)
	}
	if _, ok := pfc.mutation.CreatedAt(); !ok {
		v := paymentfiat.DefaultCreatedAt()
		pfc.mutation.SetCreatedAt(v)
	}
	if _, ok := pfc.mutation.UpdatedAt(); !ok {
		v := paymentfiat.DefaultUpdatedAt()
		pfc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pfc.mutation.DeletedAt(); !ok {
		v := paymentfiat.DefaultDeletedAt()
		pfc.mutation.SetDeletedAt(v)
	}
	if _, ok := pfc.mutation.PaymentID(); !ok {
		v := paymentfiat.DefaultPaymentID()
		pfc.mutation.SetPaymentID(v)
	}
	if _, ok := pfc.mutation.FiatID(); !ok {
		v := paymentfiat.DefaultFiatID()
		pfc.mutation.SetFiatID(v)
	}
	if _, ok := pfc.mutation.PaymentChannel(); !ok {
		v := paymentfiat.DefaultPaymentChannel
		pfc.mutation.SetPaymentChannel(v)
	}
	if _, ok := pfc.mutation.Amount(); !ok {
		v := paymentfiat.DefaultAmount
		pfc.mutation.SetAmount(v)
	}
	if _, ok := pfc.mutation.ChannelPaymentID(); !ok {
		v := paymentfiat.DefaultChannelPaymentID
		pfc.mutation.SetChannelPaymentID(v)
	}
	if _, ok := pfc.mutation.UsdCurrency(); !ok {
		v := paymentfiat.DefaultUsdCurrency
		pfc.mutation.SetUsdCurrency(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pfc *PaymentFiatCreate) check() error {
	if _, ok := pfc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "PaymentFiat.ent_id"`)}
	}
	if _, ok := pfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "PaymentFiat.created_at"`)}
	}
	if _, ok := pfc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "PaymentFiat.updated_at"`)}
	}
	if _, ok := pfc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "PaymentFiat.deleted_at"`)}
	}
	return nil
}

func (pfc *PaymentFiatCreate) sqlSave(ctx context.Context) (*PaymentFiat, error) {
	if err := pfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	pfc.mutation.id = &_node.ID
	pfc.mutation.done = true
	return _node, nil
}

func (pfc *PaymentFiatCreate) createSpec() (*PaymentFiat, *sqlgraph.CreateSpec) {
	var (
		_node = &PaymentFiat{config: pfc.config}
		_spec = sqlgraph.NewCreateSpec(paymentfiat.Table, sqlgraph.NewFieldSpec(paymentfiat.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = pfc.conflict
	if id, ok := pfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pfc.mutation.EntID(); ok {
		_spec.SetField(paymentfiat.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := pfc.mutation.CreatedAt(); ok {
		_spec.SetField(paymentfiat.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := pfc.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentfiat.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := pfc.mutation.DeletedAt(); ok {
		_spec.SetField(paymentfiat.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := pfc.mutation.PaymentID(); ok {
		_spec.SetField(paymentfiat.FieldPaymentID, field.TypeUUID, value)
		_node.PaymentID = value
	}
	if value, ok := pfc.mutation.FiatID(); ok {
		_spec.SetField(paymentfiat.FieldFiatID, field.TypeUUID, value)
		_node.FiatID = value
	}
	if value, ok := pfc.mutation.PaymentChannel(); ok {
		_spec.SetField(paymentfiat.FieldPaymentChannel, field.TypeString, value)
		_node.PaymentChannel = value
	}
	if value, ok := pfc.mutation.Amount(); ok {
		_spec.SetField(paymentfiat.FieldAmount, field.TypeOther, value)
		_node.Amount = value
	}
	if value, ok := pfc.mutation.ChannelPaymentID(); ok {
		_spec.SetField(paymentfiat.FieldChannelPaymentID, field.TypeString, value)
		_node.ChannelPaymentID = value
	}
	if value, ok := pfc.mutation.UsdCurrency(); ok {
		_spec.SetField(paymentfiat.FieldUsdCurrency, field.TypeOther, value)
		_node.UsdCurrency = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PaymentFiat.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaymentFiatUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (pfc *PaymentFiatCreate) OnConflict(opts ...sql.ConflictOption) *PaymentFiatUpsertOne {
	pfc.conflict = opts
	return &PaymentFiatUpsertOne{
		create: pfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PaymentFiat.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pfc *PaymentFiatCreate) OnConflictColumns(columns ...string) *PaymentFiatUpsertOne {
	pfc.conflict = append(pfc.conflict, sql.ConflictColumns(columns...))
	return &PaymentFiatUpsertOne{
		create: pfc,
	}
}

type (
	// PaymentFiatUpsertOne is the builder for "upsert"-ing
	//  one PaymentFiat node.
	PaymentFiatUpsertOne struct {
		create *PaymentFiatCreate
	}

	// PaymentFiatUpsert is the "OnConflict" setter.
	PaymentFiatUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *PaymentFiatUpsert) SetEntID(v uuid.UUID) *PaymentFiatUpsert {
	u.Set(paymentfiat.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PaymentFiatUpsert) UpdateEntID() *PaymentFiatUpsert {
	u.SetExcluded(paymentfiat.FieldEntID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PaymentFiatUpsert) SetCreatedAt(v uint32) *PaymentFiatUpsert {
	u.Set(paymentfiat.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentFiatUpsert) UpdateCreatedAt() *PaymentFiatUpsert {
	u.SetExcluded(paymentfiat.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PaymentFiatUpsert) AddCreatedAt(v uint32) *PaymentFiatUpsert {
	u.Add(paymentfiat.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentFiatUpsert) SetUpdatedAt(v uint32) *PaymentFiatUpsert {
	u.Set(paymentfiat.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentFiatUpsert) UpdateUpdatedAt() *PaymentFiatUpsert {
	u.SetExcluded(paymentfiat.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PaymentFiatUpsert) AddUpdatedAt(v uint32) *PaymentFiatUpsert {
	u.Add(paymentfiat.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PaymentFiatUpsert) SetDeletedAt(v uint32) *PaymentFiatUpsert {
	u.Set(paymentfiat.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PaymentFiatUpsert) UpdateDeletedAt() *PaymentFiatUpsert {
	u.SetExcluded(paymentfiat.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PaymentFiatUpsert) AddDeletedAt(v uint32) *PaymentFiatUpsert {
	u.Add(paymentfiat.FieldDeletedAt, v)
	return u
}

// SetPaymentID sets the "payment_id" field.
func (u *PaymentFiatUpsert) SetPaymentID(v uuid.UUID) *PaymentFiatUpsert {
	u.Set(paymentfiat.FieldPaymentID, v)
	return u
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *PaymentFiatUpsert) UpdatePaymentID() *PaymentFiatUpsert {
	u.SetExcluded(paymentfiat.FieldPaymentID)
	return u
}

// ClearPaymentID clears the value of the "payment_id" field.
func (u *PaymentFiatUpsert) ClearPaymentID() *PaymentFiatUpsert {
	u.SetNull(paymentfiat.FieldPaymentID)
	return u
}

// SetFiatID sets the "fiat_id" field.
func (u *PaymentFiatUpsert) SetFiatID(v uuid.UUID) *PaymentFiatUpsert {
	u.Set(paymentfiat.FieldFiatID, v)
	return u
}

// UpdateFiatID sets the "fiat_id" field to the value that was provided on create.
func (u *PaymentFiatUpsert) UpdateFiatID() *PaymentFiatUpsert {
	u.SetExcluded(paymentfiat.FieldFiatID)
	return u
}

// ClearFiatID clears the value of the "fiat_id" field.
func (u *PaymentFiatUpsert) ClearFiatID() *PaymentFiatUpsert {
	u.SetNull(paymentfiat.FieldFiatID)
	return u
}

// SetPaymentChannel sets the "payment_channel" field.
func (u *PaymentFiatUpsert) SetPaymentChannel(v string) *PaymentFiatUpsert {
	u.Set(paymentfiat.FieldPaymentChannel, v)
	return u
}

// UpdatePaymentChannel sets the "payment_channel" field to the value that was provided on create.
func (u *PaymentFiatUpsert) UpdatePaymentChannel() *PaymentFiatUpsert {
	u.SetExcluded(paymentfiat.FieldPaymentChannel)
	return u
}

// ClearPaymentChannel clears the value of the "payment_channel" field.
func (u *PaymentFiatUpsert) ClearPaymentChannel() *PaymentFiatUpsert {
	u.SetNull(paymentfiat.FieldPaymentChannel)
	return u
}

// SetAmount sets the "amount" field.
func (u *PaymentFiatUpsert) SetAmount(v decimal.Decimal) *PaymentFiatUpsert {
	u.Set(paymentfiat.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PaymentFiatUpsert) UpdateAmount() *PaymentFiatUpsert {
	u.SetExcluded(paymentfiat.FieldAmount)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *PaymentFiatUpsert) ClearAmount() *PaymentFiatUpsert {
	u.SetNull(paymentfiat.FieldAmount)
	return u
}

// SetChannelPaymentID sets the "channel_payment_id" field.
func (u *PaymentFiatUpsert) SetChannelPaymentID(v string) *PaymentFiatUpsert {
	u.Set(paymentfiat.FieldChannelPaymentID, v)
	return u
}

// UpdateChannelPaymentID sets the "channel_payment_id" field to the value that was provided on create.
func (u *PaymentFiatUpsert) UpdateChannelPaymentID() *PaymentFiatUpsert {
	u.SetExcluded(paymentfiat.FieldChannelPaymentID)
	return u
}

// ClearChannelPaymentID clears the value of the "channel_payment_id" field.
func (u *PaymentFiatUpsert) ClearChannelPaymentID() *PaymentFiatUpsert {
	u.SetNull(paymentfiat.FieldChannelPaymentID)
	return u
}

// SetUsdCurrency sets the "usd_currency" field.
func (u *PaymentFiatUpsert) SetUsdCurrency(v decimal.Decimal) *PaymentFiatUpsert {
	u.Set(paymentfiat.FieldUsdCurrency, v)
	return u
}

// UpdateUsdCurrency sets the "usd_currency" field to the value that was provided on create.
func (u *PaymentFiatUpsert) UpdateUsdCurrency() *PaymentFiatUpsert {
	u.SetExcluded(paymentfiat.FieldUsdCurrency)
	return u
}

// ClearUsdCurrency clears the value of the "usd_currency" field.
func (u *PaymentFiatUpsert) ClearUsdCurrency() *PaymentFiatUpsert {
	u.SetNull(paymentfiat.FieldUsdCurrency)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PaymentFiat.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(paymentfiat.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PaymentFiatUpsertOne) UpdateNewValues() *PaymentFiatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(paymentfiat.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PaymentFiat.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PaymentFiatUpsertOne) Ignore() *PaymentFiatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaymentFiatUpsertOne) DoNothing() *PaymentFiatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaymentFiatCreate.OnConflict
// documentation for more info.
func (u *PaymentFiatUpsertOne) Update(set func(*PaymentFiatUpsert)) *PaymentFiatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaymentFiatUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *PaymentFiatUpsertOne) SetEntID(v uuid.UUID) *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PaymentFiatUpsertOne) UpdateEntID() *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *PaymentFiatUpsertOne) SetCreatedAt(v uint32) *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PaymentFiatUpsertOne) AddCreatedAt(v uint32) *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentFiatUpsertOne) UpdateCreatedAt() *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentFiatUpsertOne) SetUpdatedAt(v uint32) *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PaymentFiatUpsertOne) AddUpdatedAt(v uint32) *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentFiatUpsertOne) UpdateUpdatedAt() *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PaymentFiatUpsertOne) SetDeletedAt(v uint32) *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PaymentFiatUpsertOne) AddDeletedAt(v uint32) *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PaymentFiatUpsertOne) UpdateDeletedAt() *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetPaymentID sets the "payment_id" field.
func (u *PaymentFiatUpsertOne) SetPaymentID(v uuid.UUID) *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.SetPaymentID(v)
	})
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *PaymentFiatUpsertOne) UpdatePaymentID() *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.UpdatePaymentID()
	})
}

// ClearPaymentID clears the value of the "payment_id" field.
func (u *PaymentFiatUpsertOne) ClearPaymentID() *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.ClearPaymentID()
	})
}

// SetFiatID sets the "fiat_id" field.
func (u *PaymentFiatUpsertOne) SetFiatID(v uuid.UUID) *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.SetFiatID(v)
	})
}

// UpdateFiatID sets the "fiat_id" field to the value that was provided on create.
func (u *PaymentFiatUpsertOne) UpdateFiatID() *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.UpdateFiatID()
	})
}

// ClearFiatID clears the value of the "fiat_id" field.
func (u *PaymentFiatUpsertOne) ClearFiatID() *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.ClearFiatID()
	})
}

// SetPaymentChannel sets the "payment_channel" field.
func (u *PaymentFiatUpsertOne) SetPaymentChannel(v string) *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.SetPaymentChannel(v)
	})
}

// UpdatePaymentChannel sets the "payment_channel" field to the value that was provided on create.
func (u *PaymentFiatUpsertOne) UpdatePaymentChannel() *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.UpdatePaymentChannel()
	})
}

// ClearPaymentChannel clears the value of the "payment_channel" field.
func (u *PaymentFiatUpsertOne) ClearPaymentChannel() *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.ClearPaymentChannel()
	})
}

// SetAmount sets the "amount" field.
func (u *PaymentFiatUpsertOne) SetAmount(v decimal.Decimal) *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PaymentFiatUpsertOne) UpdateAmount() *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *PaymentFiatUpsertOne) ClearAmount() *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.ClearAmount()
	})
}

// SetChannelPaymentID sets the "channel_payment_id" field.
func (u *PaymentFiatUpsertOne) SetChannelPaymentID(v string) *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.SetChannelPaymentID(v)
	})
}

// UpdateChannelPaymentID sets the "channel_payment_id" field to the value that was provided on create.
func (u *PaymentFiatUpsertOne) UpdateChannelPaymentID() *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.UpdateChannelPaymentID()
	})
}

// ClearChannelPaymentID clears the value of the "channel_payment_id" field.
func (u *PaymentFiatUpsertOne) ClearChannelPaymentID() *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.ClearChannelPaymentID()
	})
}

// SetUsdCurrency sets the "usd_currency" field.
func (u *PaymentFiatUpsertOne) SetUsdCurrency(v decimal.Decimal) *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.SetUsdCurrency(v)
	})
}

// UpdateUsdCurrency sets the "usd_currency" field to the value that was provided on create.
func (u *PaymentFiatUpsertOne) UpdateUsdCurrency() *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.UpdateUsdCurrency()
	})
}

// ClearUsdCurrency clears the value of the "usd_currency" field.
func (u *PaymentFiatUpsertOne) ClearUsdCurrency() *PaymentFiatUpsertOne {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.ClearUsdCurrency()
	})
}

// Exec executes the query.
func (u *PaymentFiatUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for PaymentFiatCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentFiatUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PaymentFiatUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PaymentFiatUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PaymentFiatCreateBulk is the builder for creating many PaymentFiat entities in bulk.
type PaymentFiatCreateBulk struct {
	config
	err      error
	builders []*PaymentFiatCreate
	conflict []sql.ConflictOption
}

// Save creates the PaymentFiat entities in the database.
func (pfcb *PaymentFiatCreateBulk) Save(ctx context.Context) ([]*PaymentFiat, error) {
	if pfcb.err != nil {
		return nil, pfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pfcb.builders))
	nodes := make([]*PaymentFiat, len(pfcb.builders))
	mutators := make([]Mutator, len(pfcb.builders))
	for i := range pfcb.builders {
		func(i int, root context.Context) {
			builder := pfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentFiatMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pfcb *PaymentFiatCreateBulk) SaveX(ctx context.Context) []*PaymentFiat {
	v, err := pfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pfcb *PaymentFiatCreateBulk) Exec(ctx context.Context) error {
	_, err := pfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfcb *PaymentFiatCreateBulk) ExecX(ctx context.Context) {
	if err := pfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PaymentFiat.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaymentFiatUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (pfcb *PaymentFiatCreateBulk) OnConflict(opts ...sql.ConflictOption) *PaymentFiatUpsertBulk {
	pfcb.conflict = opts
	return &PaymentFiatUpsertBulk{
		create: pfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PaymentFiat.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pfcb *PaymentFiatCreateBulk) OnConflictColumns(columns ...string) *PaymentFiatUpsertBulk {
	pfcb.conflict = append(pfcb.conflict, sql.ConflictColumns(columns...))
	return &PaymentFiatUpsertBulk{
		create: pfcb,
	}
}

// PaymentFiatUpsertBulk is the builder for "upsert"-ing
// a bulk of PaymentFiat nodes.
type PaymentFiatUpsertBulk struct {
	create *PaymentFiatCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PaymentFiat.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(paymentfiat.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PaymentFiatUpsertBulk) UpdateNewValues() *PaymentFiatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(paymentfiat.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PaymentFiat.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PaymentFiatUpsertBulk) Ignore() *PaymentFiatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaymentFiatUpsertBulk) DoNothing() *PaymentFiatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaymentFiatCreateBulk.OnConflict
// documentation for more info.
func (u *PaymentFiatUpsertBulk) Update(set func(*PaymentFiatUpsert)) *PaymentFiatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaymentFiatUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *PaymentFiatUpsertBulk) SetEntID(v uuid.UUID) *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PaymentFiatUpsertBulk) UpdateEntID() *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *PaymentFiatUpsertBulk) SetCreatedAt(v uint32) *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PaymentFiatUpsertBulk) AddCreatedAt(v uint32) *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentFiatUpsertBulk) UpdateCreatedAt() *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentFiatUpsertBulk) SetUpdatedAt(v uint32) *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PaymentFiatUpsertBulk) AddUpdatedAt(v uint32) *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentFiatUpsertBulk) UpdateUpdatedAt() *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PaymentFiatUpsertBulk) SetDeletedAt(v uint32) *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PaymentFiatUpsertBulk) AddDeletedAt(v uint32) *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PaymentFiatUpsertBulk) UpdateDeletedAt() *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetPaymentID sets the "payment_id" field.
func (u *PaymentFiatUpsertBulk) SetPaymentID(v uuid.UUID) *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.SetPaymentID(v)
	})
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *PaymentFiatUpsertBulk) UpdatePaymentID() *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.UpdatePaymentID()
	})
}

// ClearPaymentID clears the value of the "payment_id" field.
func (u *PaymentFiatUpsertBulk) ClearPaymentID() *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.ClearPaymentID()
	})
}

// SetFiatID sets the "fiat_id" field.
func (u *PaymentFiatUpsertBulk) SetFiatID(v uuid.UUID) *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.SetFiatID(v)
	})
}

// UpdateFiatID sets the "fiat_id" field to the value that was provided on create.
func (u *PaymentFiatUpsertBulk) UpdateFiatID() *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.UpdateFiatID()
	})
}

// ClearFiatID clears the value of the "fiat_id" field.
func (u *PaymentFiatUpsertBulk) ClearFiatID() *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.ClearFiatID()
	})
}

// SetPaymentChannel sets the "payment_channel" field.
func (u *PaymentFiatUpsertBulk) SetPaymentChannel(v string) *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.SetPaymentChannel(v)
	})
}

// UpdatePaymentChannel sets the "payment_channel" field to the value that was provided on create.
func (u *PaymentFiatUpsertBulk) UpdatePaymentChannel() *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.UpdatePaymentChannel()
	})
}

// ClearPaymentChannel clears the value of the "payment_channel" field.
func (u *PaymentFiatUpsertBulk) ClearPaymentChannel() *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.ClearPaymentChannel()
	})
}

// SetAmount sets the "amount" field.
func (u *PaymentFiatUpsertBulk) SetAmount(v decimal.Decimal) *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PaymentFiatUpsertBulk) UpdateAmount() *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *PaymentFiatUpsertBulk) ClearAmount() *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.ClearAmount()
	})
}

// SetChannelPaymentID sets the "channel_payment_id" field.
func (u *PaymentFiatUpsertBulk) SetChannelPaymentID(v string) *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.SetChannelPaymentID(v)
	})
}

// UpdateChannelPaymentID sets the "channel_payment_id" field to the value that was provided on create.
func (u *PaymentFiatUpsertBulk) UpdateChannelPaymentID() *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.UpdateChannelPaymentID()
	})
}

// ClearChannelPaymentID clears the value of the "channel_payment_id" field.
func (u *PaymentFiatUpsertBulk) ClearChannelPaymentID() *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.ClearChannelPaymentID()
	})
}

// SetUsdCurrency sets the "usd_currency" field.
func (u *PaymentFiatUpsertBulk) SetUsdCurrency(v decimal.Decimal) *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.SetUsdCurrency(v)
	})
}

// UpdateUsdCurrency sets the "usd_currency" field to the value that was provided on create.
func (u *PaymentFiatUpsertBulk) UpdateUsdCurrency() *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.UpdateUsdCurrency()
	})
}

// ClearUsdCurrency clears the value of the "usd_currency" field.
func (u *PaymentFiatUpsertBulk) ClearUsdCurrency() *PaymentFiatUpsertBulk {
	return u.Update(func(s *PaymentFiatUpsert) {
		s.ClearUsdCurrency()
	})
}

// Exec executes the query.
func (u *PaymentFiatUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the PaymentFiatCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for PaymentFiatCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentFiatUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

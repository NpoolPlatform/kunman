// Code generated by ent, DO NOT EDIT.

package order

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the order type in the database.
	Label = "order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldGoodID holds the string denoting the good_id field in the database.
	FieldGoodID = "good_id"
	// FieldAppGoodID holds the string denoting the app_good_id field in the database.
	FieldAppGoodID = "app_good_id"
	// FieldPaymentID holds the string denoting the payment_id field in the database.
	FieldPaymentID = "payment_id"
	// FieldParentOrderID holds the string denoting the parent_order_id field in the database.
	FieldParentOrderID = "parent_order_id"
	// FieldUnitsV1 holds the string denoting the units_v1 field in the database.
	FieldUnitsV1 = "units_v1"
	// FieldGoodValue holds the string denoting the good_value field in the database.
	FieldGoodValue = "good_value"
	// FieldGoodValueUsd holds the string denoting the good_value_usd field in the database.
	FieldGoodValueUsd = "good_value_usd"
	// FieldPaymentAmount holds the string denoting the payment_amount field in the database.
	FieldPaymentAmount = "payment_amount"
	// FieldDiscountAmount holds the string denoting the discount_amount field in the database.
	FieldDiscountAmount = "discount_amount"
	// FieldPromotionID holds the string denoting the promotion_id field in the database.
	FieldPromotionID = "promotion_id"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldOrderType holds the string denoting the order_type field in the database.
	FieldOrderType = "order_type"
	// FieldInvestmentType holds the string denoting the investment_type field in the database.
	FieldInvestmentType = "investment_type"
	// FieldCouponIds holds the string denoting the coupon_ids field in the database.
	FieldCouponIds = "coupon_ids"
	// FieldPaymentType holds the string denoting the payment_type field in the database.
	FieldPaymentType = "payment_type"
	// FieldCoinTypeID holds the string denoting the coin_type_id field in the database.
	FieldCoinTypeID = "coin_type_id"
	// FieldPaymentCoinTypeID holds the string denoting the payment_coin_type_id field in the database.
	FieldPaymentCoinTypeID = "payment_coin_type_id"
	// FieldTransferAmount holds the string denoting the transfer_amount field in the database.
	FieldTransferAmount = "transfer_amount"
	// FieldBalanceAmount holds the string denoting the balance_amount field in the database.
	FieldBalanceAmount = "balance_amount"
	// FieldCoinUsdCurrency holds the string denoting the coin_usd_currency field in the database.
	FieldCoinUsdCurrency = "coin_usd_currency"
	// FieldLocalCoinUsdCurrency holds the string denoting the local_coin_usd_currency field in the database.
	FieldLocalCoinUsdCurrency = "local_coin_usd_currency"
	// FieldLiveCoinUsdCurrency holds the string denoting the live_coin_usd_currency field in the database.
	FieldLiveCoinUsdCurrency = "live_coin_usd_currency"
	// FieldSimulate holds the string denoting the simulate field in the database.
	FieldSimulate = "simulate"
	// FieldCreateMethod holds the string denoting the create_method field in the database.
	FieldCreateMethod = "create_method"
	// FieldMultiPaymentCoins holds the string denoting the multi_payment_coins field in the database.
	FieldMultiPaymentCoins = "multi_payment_coins"
	// Table holds the table name of the order in the database.
	Table = "orders"
)

// Columns holds all SQL columns for order fields.
var Columns = []string{
	FieldID,
	FieldEntID,
	FieldAppID,
	FieldUserID,
	FieldGoodID,
	FieldAppGoodID,
	FieldPaymentID,
	FieldParentOrderID,
	FieldUnitsV1,
	FieldGoodValue,
	FieldGoodValueUsd,
	FieldPaymentAmount,
	FieldDiscountAmount,
	FieldPromotionID,
	FieldDuration,
	FieldOrderType,
	FieldInvestmentType,
	FieldCouponIds,
	FieldPaymentType,
	FieldCoinTypeID,
	FieldPaymentCoinTypeID,
	FieldTransferAmount,
	FieldBalanceAmount,
	FieldCoinUsdCurrency,
	FieldLocalCoinUsdCurrency,
	FieldLiveCoinUsdCurrency,
	FieldSimulate,
	FieldCreateMethod,
	FieldMultiPaymentCoins,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultPaymentID holds the default value on creation for the "payment_id" field.
	DefaultPaymentID func() uuid.UUID
	// DefaultParentOrderID holds the default value on creation for the "parent_order_id" field.
	DefaultParentOrderID func() uuid.UUID
	// DefaultUnitsV1 holds the default value on creation for the "units_v1" field.
	DefaultUnitsV1 decimal.Decimal
	// DefaultGoodValue holds the default value on creation for the "good_value" field.
	DefaultGoodValue decimal.Decimal
	// DefaultGoodValueUsd holds the default value on creation for the "good_value_usd" field.
	DefaultGoodValueUsd decimal.Decimal
	// DefaultPaymentAmount holds the default value on creation for the "payment_amount" field.
	DefaultPaymentAmount decimal.Decimal
	// DefaultDiscountAmount holds the default value on creation for the "discount_amount" field.
	DefaultDiscountAmount decimal.Decimal
	// DefaultPromotionID holds the default value on creation for the "promotion_id" field.
	DefaultPromotionID func() uuid.UUID
	// DefaultDuration holds the default value on creation for the "duration" field.
	DefaultDuration uint32
	// DefaultOrderType holds the default value on creation for the "order_type" field.
	DefaultOrderType string
	// DefaultInvestmentType holds the default value on creation for the "investment_type" field.
	DefaultInvestmentType string
	// DefaultCouponIds holds the default value on creation for the "coupon_ids" field.
	DefaultCouponIds func() []uuid.UUID
	// DefaultPaymentType holds the default value on creation for the "payment_type" field.
	DefaultPaymentType string
	// DefaultPaymentCoinTypeID holds the default value on creation for the "payment_coin_type_id" field.
	DefaultPaymentCoinTypeID func() uuid.UUID
	// DefaultTransferAmount holds the default value on creation for the "transfer_amount" field.
	DefaultTransferAmount decimal.Decimal
	// DefaultBalanceAmount holds the default value on creation for the "balance_amount" field.
	DefaultBalanceAmount decimal.Decimal
	// DefaultCoinUsdCurrency holds the default value on creation for the "coin_usd_currency" field.
	DefaultCoinUsdCurrency decimal.Decimal
	// DefaultLocalCoinUsdCurrency holds the default value on creation for the "local_coin_usd_currency" field.
	DefaultLocalCoinUsdCurrency decimal.Decimal
	// DefaultLiveCoinUsdCurrency holds the default value on creation for the "live_coin_usd_currency" field.
	DefaultLiveCoinUsdCurrency decimal.Decimal
	// DefaultSimulate holds the default value on creation for the "simulate" field.
	DefaultSimulate bool
	// DefaultCreateMethod holds the default value on creation for the "create_method" field.
	DefaultCreateMethod string
	// DefaultMultiPaymentCoins holds the default value on creation for the "multi_payment_coins" field.
	DefaultMultiPaymentCoins bool
)

// OrderOption defines the ordering options for the Order queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByAppID orders the results by the app_id field.
func ByAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByGoodID orders the results by the good_id field.
func ByGoodID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodID, opts...).ToFunc()
}

// ByAppGoodID orders the results by the app_good_id field.
func ByAppGoodID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppGoodID, opts...).ToFunc()
}

// ByPaymentID orders the results by the payment_id field.
func ByPaymentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentID, opts...).ToFunc()
}

// ByParentOrderID orders the results by the parent_order_id field.
func ByParentOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentOrderID, opts...).ToFunc()
}

// ByUnitsV1 orders the results by the units_v1 field.
func ByUnitsV1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitsV1, opts...).ToFunc()
}

// ByGoodValue orders the results by the good_value field.
func ByGoodValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodValue, opts...).ToFunc()
}

// ByGoodValueUsd orders the results by the good_value_usd field.
func ByGoodValueUsd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodValueUsd, opts...).ToFunc()
}

// ByPaymentAmount orders the results by the payment_amount field.
func ByPaymentAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentAmount, opts...).ToFunc()
}

// ByDiscountAmount orders the results by the discount_amount field.
func ByDiscountAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscountAmount, opts...).ToFunc()
}

// ByPromotionID orders the results by the promotion_id field.
func ByPromotionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPromotionID, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByOrderType orders the results by the order_type field.
func ByOrderType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderType, opts...).ToFunc()
}

// ByInvestmentType orders the results by the investment_type field.
func ByInvestmentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvestmentType, opts...).ToFunc()
}

// ByPaymentType orders the results by the payment_type field.
func ByPaymentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentType, opts...).ToFunc()
}

// ByCoinTypeID orders the results by the coin_type_id field.
func ByCoinTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoinTypeID, opts...).ToFunc()
}

// ByPaymentCoinTypeID orders the results by the payment_coin_type_id field.
func ByPaymentCoinTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentCoinTypeID, opts...).ToFunc()
}

// ByTransferAmount orders the results by the transfer_amount field.
func ByTransferAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransferAmount, opts...).ToFunc()
}

// ByBalanceAmount orders the results by the balance_amount field.
func ByBalanceAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBalanceAmount, opts...).ToFunc()
}

// ByCoinUsdCurrency orders the results by the coin_usd_currency field.
func ByCoinUsdCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoinUsdCurrency, opts...).ToFunc()
}

// ByLocalCoinUsdCurrency orders the results by the local_coin_usd_currency field.
func ByLocalCoinUsdCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalCoinUsdCurrency, opts...).ToFunc()
}

// ByLiveCoinUsdCurrency orders the results by the live_coin_usd_currency field.
func ByLiveCoinUsdCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLiveCoinUsdCurrency, opts...).ToFunc()
}

// BySimulate orders the results by the simulate field.
func BySimulate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSimulate, opts...).ToFunc()
}

// ByCreateMethod orders the results by the create_method field.
func ByCreateMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateMethod, opts...).ToFunc()
}

// ByMultiPaymentCoins orders the results by the multi_payment_coins field.
func ByMultiPaymentCoins(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMultiPaymentCoins, opts...).ToFunc()
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/paymenttransfer"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// PaymentTransferUpdate is the builder for updating PaymentTransfer entities.
type PaymentTransferUpdate struct {
	config
	hooks     []Hook
	mutation  *PaymentTransferMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PaymentTransferUpdate builder.
func (ptu *PaymentTransferUpdate) Where(ps ...predicate.PaymentTransfer) *PaymentTransferUpdate {
	ptu.mutation.Where(ps...)
	return ptu
}

// SetEntID sets the "ent_id" field.
func (ptu *PaymentTransferUpdate) SetEntID(u uuid.UUID) *PaymentTransferUpdate {
	ptu.mutation.SetEntID(u)
	return ptu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ptu *PaymentTransferUpdate) SetNillableEntID(u *uuid.UUID) *PaymentTransferUpdate {
	if u != nil {
		ptu.SetEntID(*u)
	}
	return ptu
}

// SetCreatedAt sets the "created_at" field.
func (ptu *PaymentTransferUpdate) SetCreatedAt(u uint32) *PaymentTransferUpdate {
	ptu.mutation.ResetCreatedAt()
	ptu.mutation.SetCreatedAt(u)
	return ptu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptu *PaymentTransferUpdate) SetNillableCreatedAt(u *uint32) *PaymentTransferUpdate {
	if u != nil {
		ptu.SetCreatedAt(*u)
	}
	return ptu
}

// AddCreatedAt adds u to the "created_at" field.
func (ptu *PaymentTransferUpdate) AddCreatedAt(u int32) *PaymentTransferUpdate {
	ptu.mutation.AddCreatedAt(u)
	return ptu
}

// SetUpdatedAt sets the "updated_at" field.
func (ptu *PaymentTransferUpdate) SetUpdatedAt(u uint32) *PaymentTransferUpdate {
	ptu.mutation.ResetUpdatedAt()
	ptu.mutation.SetUpdatedAt(u)
	return ptu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ptu *PaymentTransferUpdate) AddUpdatedAt(u int32) *PaymentTransferUpdate {
	ptu.mutation.AddUpdatedAt(u)
	return ptu
}

// SetDeletedAt sets the "deleted_at" field.
func (ptu *PaymentTransferUpdate) SetDeletedAt(u uint32) *PaymentTransferUpdate {
	ptu.mutation.ResetDeletedAt()
	ptu.mutation.SetDeletedAt(u)
	return ptu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ptu *PaymentTransferUpdate) SetNillableDeletedAt(u *uint32) *PaymentTransferUpdate {
	if u != nil {
		ptu.SetDeletedAt(*u)
	}
	return ptu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ptu *PaymentTransferUpdate) AddDeletedAt(u int32) *PaymentTransferUpdate {
	ptu.mutation.AddDeletedAt(u)
	return ptu
}

// SetPaymentID sets the "payment_id" field.
func (ptu *PaymentTransferUpdate) SetPaymentID(u uuid.UUID) *PaymentTransferUpdate {
	ptu.mutation.SetPaymentID(u)
	return ptu
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (ptu *PaymentTransferUpdate) SetNillablePaymentID(u *uuid.UUID) *PaymentTransferUpdate {
	if u != nil {
		ptu.SetPaymentID(*u)
	}
	return ptu
}

// ClearPaymentID clears the value of the "payment_id" field.
func (ptu *PaymentTransferUpdate) ClearPaymentID() *PaymentTransferUpdate {
	ptu.mutation.ClearPaymentID()
	return ptu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (ptu *PaymentTransferUpdate) SetCoinTypeID(u uuid.UUID) *PaymentTransferUpdate {
	ptu.mutation.SetCoinTypeID(u)
	return ptu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (ptu *PaymentTransferUpdate) SetNillableCoinTypeID(u *uuid.UUID) *PaymentTransferUpdate {
	if u != nil {
		ptu.SetCoinTypeID(*u)
	}
	return ptu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (ptu *PaymentTransferUpdate) ClearCoinTypeID() *PaymentTransferUpdate {
	ptu.mutation.ClearCoinTypeID()
	return ptu
}

// SetAccountID sets the "account_id" field.
func (ptu *PaymentTransferUpdate) SetAccountID(u uuid.UUID) *PaymentTransferUpdate {
	ptu.mutation.SetAccountID(u)
	return ptu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (ptu *PaymentTransferUpdate) SetNillableAccountID(u *uuid.UUID) *PaymentTransferUpdate {
	if u != nil {
		ptu.SetAccountID(*u)
	}
	return ptu
}

// ClearAccountID clears the value of the "account_id" field.
func (ptu *PaymentTransferUpdate) ClearAccountID() *PaymentTransferUpdate {
	ptu.mutation.ClearAccountID()
	return ptu
}

// SetAmount sets the "amount" field.
func (ptu *PaymentTransferUpdate) SetAmount(d decimal.Decimal) *PaymentTransferUpdate {
	ptu.mutation.SetAmount(d)
	return ptu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ptu *PaymentTransferUpdate) SetNillableAmount(d *decimal.Decimal) *PaymentTransferUpdate {
	if d != nil {
		ptu.SetAmount(*d)
	}
	return ptu
}

// ClearAmount clears the value of the "amount" field.
func (ptu *PaymentTransferUpdate) ClearAmount() *PaymentTransferUpdate {
	ptu.mutation.ClearAmount()
	return ptu
}

// SetStartAmount sets the "start_amount" field.
func (ptu *PaymentTransferUpdate) SetStartAmount(d decimal.Decimal) *PaymentTransferUpdate {
	ptu.mutation.SetStartAmount(d)
	return ptu
}

// SetNillableStartAmount sets the "start_amount" field if the given value is not nil.
func (ptu *PaymentTransferUpdate) SetNillableStartAmount(d *decimal.Decimal) *PaymentTransferUpdate {
	if d != nil {
		ptu.SetStartAmount(*d)
	}
	return ptu
}

// ClearStartAmount clears the value of the "start_amount" field.
func (ptu *PaymentTransferUpdate) ClearStartAmount() *PaymentTransferUpdate {
	ptu.mutation.ClearStartAmount()
	return ptu
}

// SetFinishAmount sets the "finish_amount" field.
func (ptu *PaymentTransferUpdate) SetFinishAmount(d decimal.Decimal) *PaymentTransferUpdate {
	ptu.mutation.SetFinishAmount(d)
	return ptu
}

// SetNillableFinishAmount sets the "finish_amount" field if the given value is not nil.
func (ptu *PaymentTransferUpdate) SetNillableFinishAmount(d *decimal.Decimal) *PaymentTransferUpdate {
	if d != nil {
		ptu.SetFinishAmount(*d)
	}
	return ptu
}

// ClearFinishAmount clears the value of the "finish_amount" field.
func (ptu *PaymentTransferUpdate) ClearFinishAmount() *PaymentTransferUpdate {
	ptu.mutation.ClearFinishAmount()
	return ptu
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (ptu *PaymentTransferUpdate) SetCoinUsdCurrency(d decimal.Decimal) *PaymentTransferUpdate {
	ptu.mutation.SetCoinUsdCurrency(d)
	return ptu
}

// SetNillableCoinUsdCurrency sets the "coin_usd_currency" field if the given value is not nil.
func (ptu *PaymentTransferUpdate) SetNillableCoinUsdCurrency(d *decimal.Decimal) *PaymentTransferUpdate {
	if d != nil {
		ptu.SetCoinUsdCurrency(*d)
	}
	return ptu
}

// ClearCoinUsdCurrency clears the value of the "coin_usd_currency" field.
func (ptu *PaymentTransferUpdate) ClearCoinUsdCurrency() *PaymentTransferUpdate {
	ptu.mutation.ClearCoinUsdCurrency()
	return ptu
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (ptu *PaymentTransferUpdate) SetLocalCoinUsdCurrency(d decimal.Decimal) *PaymentTransferUpdate {
	ptu.mutation.SetLocalCoinUsdCurrency(d)
	return ptu
}

// SetNillableLocalCoinUsdCurrency sets the "local_coin_usd_currency" field if the given value is not nil.
func (ptu *PaymentTransferUpdate) SetNillableLocalCoinUsdCurrency(d *decimal.Decimal) *PaymentTransferUpdate {
	if d != nil {
		ptu.SetLocalCoinUsdCurrency(*d)
	}
	return ptu
}

// ClearLocalCoinUsdCurrency clears the value of the "local_coin_usd_currency" field.
func (ptu *PaymentTransferUpdate) ClearLocalCoinUsdCurrency() *PaymentTransferUpdate {
	ptu.mutation.ClearLocalCoinUsdCurrency()
	return ptu
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (ptu *PaymentTransferUpdate) SetLiveCoinUsdCurrency(d decimal.Decimal) *PaymentTransferUpdate {
	ptu.mutation.SetLiveCoinUsdCurrency(d)
	return ptu
}

// SetNillableLiveCoinUsdCurrency sets the "live_coin_usd_currency" field if the given value is not nil.
func (ptu *PaymentTransferUpdate) SetNillableLiveCoinUsdCurrency(d *decimal.Decimal) *PaymentTransferUpdate {
	if d != nil {
		ptu.SetLiveCoinUsdCurrency(*d)
	}
	return ptu
}

// ClearLiveCoinUsdCurrency clears the value of the "live_coin_usd_currency" field.
func (ptu *PaymentTransferUpdate) ClearLiveCoinUsdCurrency() *PaymentTransferUpdate {
	ptu.mutation.ClearLiveCoinUsdCurrency()
	return ptu
}

// Mutation returns the PaymentTransferMutation object of the builder.
func (ptu *PaymentTransferUpdate) Mutation() *PaymentTransferMutation {
	return ptu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *PaymentTransferUpdate) Save(ctx context.Context) (int, error) {
	ptu.defaults()
	return withHooks(ctx, ptu.sqlSave, ptu.mutation, ptu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *PaymentTransferUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *PaymentTransferUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *PaymentTransferUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptu *PaymentTransferUpdate) defaults() {
	if _, ok := ptu.mutation.UpdatedAt(); !ok {
		v := paymenttransfer.UpdateDefaultUpdatedAt()
		ptu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ptu *PaymentTransferUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PaymentTransferUpdate {
	ptu.modifiers = append(ptu.modifiers, modifiers...)
	return ptu
}

func (ptu *PaymentTransferUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(paymenttransfer.Table, paymenttransfer.Columns, sqlgraph.NewFieldSpec(paymenttransfer.FieldID, field.TypeUint32))
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptu.mutation.EntID(); ok {
		_spec.SetField(paymenttransfer.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := ptu.mutation.CreatedAt(); ok {
		_spec.SetField(paymenttransfer.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ptu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(paymenttransfer.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ptu.mutation.UpdatedAt(); ok {
		_spec.SetField(paymenttransfer.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ptu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(paymenttransfer.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ptu.mutation.DeletedAt(); ok {
		_spec.SetField(paymenttransfer.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ptu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(paymenttransfer.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ptu.mutation.PaymentID(); ok {
		_spec.SetField(paymenttransfer.FieldPaymentID, field.TypeUUID, value)
	}
	if ptu.mutation.PaymentIDCleared() {
		_spec.ClearField(paymenttransfer.FieldPaymentID, field.TypeUUID)
	}
	if value, ok := ptu.mutation.CoinTypeID(); ok {
		_spec.SetField(paymenttransfer.FieldCoinTypeID, field.TypeUUID, value)
	}
	if ptu.mutation.CoinTypeIDCleared() {
		_spec.ClearField(paymenttransfer.FieldCoinTypeID, field.TypeUUID)
	}
	if value, ok := ptu.mutation.AccountID(); ok {
		_spec.SetField(paymenttransfer.FieldAccountID, field.TypeUUID, value)
	}
	if ptu.mutation.AccountIDCleared() {
		_spec.ClearField(paymenttransfer.FieldAccountID, field.TypeUUID)
	}
	if value, ok := ptu.mutation.Amount(); ok {
		_spec.SetField(paymenttransfer.FieldAmount, field.TypeOther, value)
	}
	if ptu.mutation.AmountCleared() {
		_spec.ClearField(paymenttransfer.FieldAmount, field.TypeOther)
	}
	if value, ok := ptu.mutation.StartAmount(); ok {
		_spec.SetField(paymenttransfer.FieldStartAmount, field.TypeOther, value)
	}
	if ptu.mutation.StartAmountCleared() {
		_spec.ClearField(paymenttransfer.FieldStartAmount, field.TypeOther)
	}
	if value, ok := ptu.mutation.FinishAmount(); ok {
		_spec.SetField(paymenttransfer.FieldFinishAmount, field.TypeOther, value)
	}
	if ptu.mutation.FinishAmountCleared() {
		_spec.ClearField(paymenttransfer.FieldFinishAmount, field.TypeOther)
	}
	if value, ok := ptu.mutation.CoinUsdCurrency(); ok {
		_spec.SetField(paymenttransfer.FieldCoinUsdCurrency, field.TypeOther, value)
	}
	if ptu.mutation.CoinUsdCurrencyCleared() {
		_spec.ClearField(paymenttransfer.FieldCoinUsdCurrency, field.TypeOther)
	}
	if value, ok := ptu.mutation.LocalCoinUsdCurrency(); ok {
		_spec.SetField(paymenttransfer.FieldLocalCoinUsdCurrency, field.TypeOther, value)
	}
	if ptu.mutation.LocalCoinUsdCurrencyCleared() {
		_spec.ClearField(paymenttransfer.FieldLocalCoinUsdCurrency, field.TypeOther)
	}
	if value, ok := ptu.mutation.LiveCoinUsdCurrency(); ok {
		_spec.SetField(paymenttransfer.FieldLiveCoinUsdCurrency, field.TypeOther, value)
	}
	if ptu.mutation.LiveCoinUsdCurrencyCleared() {
		_spec.ClearField(paymenttransfer.FieldLiveCoinUsdCurrency, field.TypeOther)
	}
	_spec.AddModifiers(ptu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymenttransfer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptu.mutation.done = true
	return n, nil
}

// PaymentTransferUpdateOne is the builder for updating a single PaymentTransfer entity.
type PaymentTransferUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PaymentTransferMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (ptuo *PaymentTransferUpdateOne) SetEntID(u uuid.UUID) *PaymentTransferUpdateOne {
	ptuo.mutation.SetEntID(u)
	return ptuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ptuo *PaymentTransferUpdateOne) SetNillableEntID(u *uuid.UUID) *PaymentTransferUpdateOne {
	if u != nil {
		ptuo.SetEntID(*u)
	}
	return ptuo
}

// SetCreatedAt sets the "created_at" field.
func (ptuo *PaymentTransferUpdateOne) SetCreatedAt(u uint32) *PaymentTransferUpdateOne {
	ptuo.mutation.ResetCreatedAt()
	ptuo.mutation.SetCreatedAt(u)
	return ptuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptuo *PaymentTransferUpdateOne) SetNillableCreatedAt(u *uint32) *PaymentTransferUpdateOne {
	if u != nil {
		ptuo.SetCreatedAt(*u)
	}
	return ptuo
}

// AddCreatedAt adds u to the "created_at" field.
func (ptuo *PaymentTransferUpdateOne) AddCreatedAt(u int32) *PaymentTransferUpdateOne {
	ptuo.mutation.AddCreatedAt(u)
	return ptuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ptuo *PaymentTransferUpdateOne) SetUpdatedAt(u uint32) *PaymentTransferUpdateOne {
	ptuo.mutation.ResetUpdatedAt()
	ptuo.mutation.SetUpdatedAt(u)
	return ptuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ptuo *PaymentTransferUpdateOne) AddUpdatedAt(u int32) *PaymentTransferUpdateOne {
	ptuo.mutation.AddUpdatedAt(u)
	return ptuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ptuo *PaymentTransferUpdateOne) SetDeletedAt(u uint32) *PaymentTransferUpdateOne {
	ptuo.mutation.ResetDeletedAt()
	ptuo.mutation.SetDeletedAt(u)
	return ptuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ptuo *PaymentTransferUpdateOne) SetNillableDeletedAt(u *uint32) *PaymentTransferUpdateOne {
	if u != nil {
		ptuo.SetDeletedAt(*u)
	}
	return ptuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ptuo *PaymentTransferUpdateOne) AddDeletedAt(u int32) *PaymentTransferUpdateOne {
	ptuo.mutation.AddDeletedAt(u)
	return ptuo
}

// SetPaymentID sets the "payment_id" field.
func (ptuo *PaymentTransferUpdateOne) SetPaymentID(u uuid.UUID) *PaymentTransferUpdateOne {
	ptuo.mutation.SetPaymentID(u)
	return ptuo
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (ptuo *PaymentTransferUpdateOne) SetNillablePaymentID(u *uuid.UUID) *PaymentTransferUpdateOne {
	if u != nil {
		ptuo.SetPaymentID(*u)
	}
	return ptuo
}

// ClearPaymentID clears the value of the "payment_id" field.
func (ptuo *PaymentTransferUpdateOne) ClearPaymentID() *PaymentTransferUpdateOne {
	ptuo.mutation.ClearPaymentID()
	return ptuo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (ptuo *PaymentTransferUpdateOne) SetCoinTypeID(u uuid.UUID) *PaymentTransferUpdateOne {
	ptuo.mutation.SetCoinTypeID(u)
	return ptuo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (ptuo *PaymentTransferUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *PaymentTransferUpdateOne {
	if u != nil {
		ptuo.SetCoinTypeID(*u)
	}
	return ptuo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (ptuo *PaymentTransferUpdateOne) ClearCoinTypeID() *PaymentTransferUpdateOne {
	ptuo.mutation.ClearCoinTypeID()
	return ptuo
}

// SetAccountID sets the "account_id" field.
func (ptuo *PaymentTransferUpdateOne) SetAccountID(u uuid.UUID) *PaymentTransferUpdateOne {
	ptuo.mutation.SetAccountID(u)
	return ptuo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (ptuo *PaymentTransferUpdateOne) SetNillableAccountID(u *uuid.UUID) *PaymentTransferUpdateOne {
	if u != nil {
		ptuo.SetAccountID(*u)
	}
	return ptuo
}

// ClearAccountID clears the value of the "account_id" field.
func (ptuo *PaymentTransferUpdateOne) ClearAccountID() *PaymentTransferUpdateOne {
	ptuo.mutation.ClearAccountID()
	return ptuo
}

// SetAmount sets the "amount" field.
func (ptuo *PaymentTransferUpdateOne) SetAmount(d decimal.Decimal) *PaymentTransferUpdateOne {
	ptuo.mutation.SetAmount(d)
	return ptuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ptuo *PaymentTransferUpdateOne) SetNillableAmount(d *decimal.Decimal) *PaymentTransferUpdateOne {
	if d != nil {
		ptuo.SetAmount(*d)
	}
	return ptuo
}

// ClearAmount clears the value of the "amount" field.
func (ptuo *PaymentTransferUpdateOne) ClearAmount() *PaymentTransferUpdateOne {
	ptuo.mutation.ClearAmount()
	return ptuo
}

// SetStartAmount sets the "start_amount" field.
func (ptuo *PaymentTransferUpdateOne) SetStartAmount(d decimal.Decimal) *PaymentTransferUpdateOne {
	ptuo.mutation.SetStartAmount(d)
	return ptuo
}

// SetNillableStartAmount sets the "start_amount" field if the given value is not nil.
func (ptuo *PaymentTransferUpdateOne) SetNillableStartAmount(d *decimal.Decimal) *PaymentTransferUpdateOne {
	if d != nil {
		ptuo.SetStartAmount(*d)
	}
	return ptuo
}

// ClearStartAmount clears the value of the "start_amount" field.
func (ptuo *PaymentTransferUpdateOne) ClearStartAmount() *PaymentTransferUpdateOne {
	ptuo.mutation.ClearStartAmount()
	return ptuo
}

// SetFinishAmount sets the "finish_amount" field.
func (ptuo *PaymentTransferUpdateOne) SetFinishAmount(d decimal.Decimal) *PaymentTransferUpdateOne {
	ptuo.mutation.SetFinishAmount(d)
	return ptuo
}

// SetNillableFinishAmount sets the "finish_amount" field if the given value is not nil.
func (ptuo *PaymentTransferUpdateOne) SetNillableFinishAmount(d *decimal.Decimal) *PaymentTransferUpdateOne {
	if d != nil {
		ptuo.SetFinishAmount(*d)
	}
	return ptuo
}

// ClearFinishAmount clears the value of the "finish_amount" field.
func (ptuo *PaymentTransferUpdateOne) ClearFinishAmount() *PaymentTransferUpdateOne {
	ptuo.mutation.ClearFinishAmount()
	return ptuo
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (ptuo *PaymentTransferUpdateOne) SetCoinUsdCurrency(d decimal.Decimal) *PaymentTransferUpdateOne {
	ptuo.mutation.SetCoinUsdCurrency(d)
	return ptuo
}

// SetNillableCoinUsdCurrency sets the "coin_usd_currency" field if the given value is not nil.
func (ptuo *PaymentTransferUpdateOne) SetNillableCoinUsdCurrency(d *decimal.Decimal) *PaymentTransferUpdateOne {
	if d != nil {
		ptuo.SetCoinUsdCurrency(*d)
	}
	return ptuo
}

// ClearCoinUsdCurrency clears the value of the "coin_usd_currency" field.
func (ptuo *PaymentTransferUpdateOne) ClearCoinUsdCurrency() *PaymentTransferUpdateOne {
	ptuo.mutation.ClearCoinUsdCurrency()
	return ptuo
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (ptuo *PaymentTransferUpdateOne) SetLocalCoinUsdCurrency(d decimal.Decimal) *PaymentTransferUpdateOne {
	ptuo.mutation.SetLocalCoinUsdCurrency(d)
	return ptuo
}

// SetNillableLocalCoinUsdCurrency sets the "local_coin_usd_currency" field if the given value is not nil.
func (ptuo *PaymentTransferUpdateOne) SetNillableLocalCoinUsdCurrency(d *decimal.Decimal) *PaymentTransferUpdateOne {
	if d != nil {
		ptuo.SetLocalCoinUsdCurrency(*d)
	}
	return ptuo
}

// ClearLocalCoinUsdCurrency clears the value of the "local_coin_usd_currency" field.
func (ptuo *PaymentTransferUpdateOne) ClearLocalCoinUsdCurrency() *PaymentTransferUpdateOne {
	ptuo.mutation.ClearLocalCoinUsdCurrency()
	return ptuo
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (ptuo *PaymentTransferUpdateOne) SetLiveCoinUsdCurrency(d decimal.Decimal) *PaymentTransferUpdateOne {
	ptuo.mutation.SetLiveCoinUsdCurrency(d)
	return ptuo
}

// SetNillableLiveCoinUsdCurrency sets the "live_coin_usd_currency" field if the given value is not nil.
func (ptuo *PaymentTransferUpdateOne) SetNillableLiveCoinUsdCurrency(d *decimal.Decimal) *PaymentTransferUpdateOne {
	if d != nil {
		ptuo.SetLiveCoinUsdCurrency(*d)
	}
	return ptuo
}

// ClearLiveCoinUsdCurrency clears the value of the "live_coin_usd_currency" field.
func (ptuo *PaymentTransferUpdateOne) ClearLiveCoinUsdCurrency() *PaymentTransferUpdateOne {
	ptuo.mutation.ClearLiveCoinUsdCurrency()
	return ptuo
}

// Mutation returns the PaymentTransferMutation object of the builder.
func (ptuo *PaymentTransferUpdateOne) Mutation() *PaymentTransferMutation {
	return ptuo.mutation
}

// Where appends a list predicates to the PaymentTransferUpdate builder.
func (ptuo *PaymentTransferUpdateOne) Where(ps ...predicate.PaymentTransfer) *PaymentTransferUpdateOne {
	ptuo.mutation.Where(ps...)
	return ptuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *PaymentTransferUpdateOne) Select(field string, fields ...string) *PaymentTransferUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated PaymentTransfer entity.
func (ptuo *PaymentTransferUpdateOne) Save(ctx context.Context) (*PaymentTransfer, error) {
	ptuo.defaults()
	return withHooks(ctx, ptuo.sqlSave, ptuo.mutation, ptuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *PaymentTransferUpdateOne) SaveX(ctx context.Context) *PaymentTransfer {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *PaymentTransferUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *PaymentTransferUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptuo *PaymentTransferUpdateOne) defaults() {
	if _, ok := ptuo.mutation.UpdatedAt(); !ok {
		v := paymenttransfer.UpdateDefaultUpdatedAt()
		ptuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ptuo *PaymentTransferUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PaymentTransferUpdateOne {
	ptuo.modifiers = append(ptuo.modifiers, modifiers...)
	return ptuo
}

func (ptuo *PaymentTransferUpdateOne) sqlSave(ctx context.Context) (_node *PaymentTransfer, err error) {
	_spec := sqlgraph.NewUpdateSpec(paymenttransfer.Table, paymenttransfer.Columns, sqlgraph.NewFieldSpec(paymenttransfer.FieldID, field.TypeUint32))
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "PaymentTransfer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymenttransfer.FieldID)
		for _, f := range fields {
			if !paymenttransfer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != paymenttransfer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptuo.mutation.EntID(); ok {
		_spec.SetField(paymenttransfer.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := ptuo.mutation.CreatedAt(); ok {
		_spec.SetField(paymenttransfer.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ptuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(paymenttransfer.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := ptuo.mutation.UpdatedAt(); ok {
		_spec.SetField(paymenttransfer.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ptuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(paymenttransfer.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := ptuo.mutation.DeletedAt(); ok {
		_spec.SetField(paymenttransfer.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ptuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(paymenttransfer.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := ptuo.mutation.PaymentID(); ok {
		_spec.SetField(paymenttransfer.FieldPaymentID, field.TypeUUID, value)
	}
	if ptuo.mutation.PaymentIDCleared() {
		_spec.ClearField(paymenttransfer.FieldPaymentID, field.TypeUUID)
	}
	if value, ok := ptuo.mutation.CoinTypeID(); ok {
		_spec.SetField(paymenttransfer.FieldCoinTypeID, field.TypeUUID, value)
	}
	if ptuo.mutation.CoinTypeIDCleared() {
		_spec.ClearField(paymenttransfer.FieldCoinTypeID, field.TypeUUID)
	}
	if value, ok := ptuo.mutation.AccountID(); ok {
		_spec.SetField(paymenttransfer.FieldAccountID, field.TypeUUID, value)
	}
	if ptuo.mutation.AccountIDCleared() {
		_spec.ClearField(paymenttransfer.FieldAccountID, field.TypeUUID)
	}
	if value, ok := ptuo.mutation.Amount(); ok {
		_spec.SetField(paymenttransfer.FieldAmount, field.TypeOther, value)
	}
	if ptuo.mutation.AmountCleared() {
		_spec.ClearField(paymenttransfer.FieldAmount, field.TypeOther)
	}
	if value, ok := ptuo.mutation.StartAmount(); ok {
		_spec.SetField(paymenttransfer.FieldStartAmount, field.TypeOther, value)
	}
	if ptuo.mutation.StartAmountCleared() {
		_spec.ClearField(paymenttransfer.FieldStartAmount, field.TypeOther)
	}
	if value, ok := ptuo.mutation.FinishAmount(); ok {
		_spec.SetField(paymenttransfer.FieldFinishAmount, field.TypeOther, value)
	}
	if ptuo.mutation.FinishAmountCleared() {
		_spec.ClearField(paymenttransfer.FieldFinishAmount, field.TypeOther)
	}
	if value, ok := ptuo.mutation.CoinUsdCurrency(); ok {
		_spec.SetField(paymenttransfer.FieldCoinUsdCurrency, field.TypeOther, value)
	}
	if ptuo.mutation.CoinUsdCurrencyCleared() {
		_spec.ClearField(paymenttransfer.FieldCoinUsdCurrency, field.TypeOther)
	}
	if value, ok := ptuo.mutation.LocalCoinUsdCurrency(); ok {
		_spec.SetField(paymenttransfer.FieldLocalCoinUsdCurrency, field.TypeOther, value)
	}
	if ptuo.mutation.LocalCoinUsdCurrencyCleared() {
		_spec.ClearField(paymenttransfer.FieldLocalCoinUsdCurrency, field.TypeOther)
	}
	if value, ok := ptuo.mutation.LiveCoinUsdCurrency(); ok {
		_spec.SetField(paymenttransfer.FieldLiveCoinUsdCurrency, field.TypeOther, value)
	}
	if ptuo.mutation.LiveCoinUsdCurrencyCleared() {
		_spec.ClearField(paymenttransfer.FieldLiveCoinUsdCurrency, field.TypeOther)
	}
	_spec.AddModifiers(ptuo.modifiers...)
	_node = &PaymentTransfer{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymenttransfer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/paymentfiat"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// PaymentFiat is the model entity for the PaymentFiat schema.
type PaymentFiat struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// PaymentID holds the value of the "payment_id" field.
	PaymentID uuid.UUID `json:"payment_id,omitempty"`
	// FiatID holds the value of the "fiat_id" field.
	FiatID uuid.UUID `json:"fiat_id,omitempty"`
	// PaymentChannel holds the value of the "payment_channel" field.
	PaymentChannel string `json:"payment_channel,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount decimal.Decimal `json:"amount,omitempty"`
	// UsdCurrency holds the value of the "usd_currency" field.
	UsdCurrency  decimal.Decimal `json:"usd_currency,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentFiat) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case paymentfiat.FieldAmount, paymentfiat.FieldUsdCurrency:
			values[i] = new(decimal.Decimal)
		case paymentfiat.FieldID:
			values[i] = new(sql.NullInt64)
		case paymentfiat.FieldPaymentChannel:
			values[i] = new(sql.NullString)
		case paymentfiat.FieldEntID, paymentfiat.FieldPaymentID, paymentfiat.FieldFiatID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentFiat fields.
func (pf *PaymentFiat) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paymentfiat.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pf.ID = uint32(value.Int64)
		case paymentfiat.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				pf.EntID = *value
			}
		case paymentfiat.FieldPaymentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field payment_id", values[i])
			} else if value != nil {
				pf.PaymentID = *value
			}
		case paymentfiat.FieldFiatID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field fiat_id", values[i])
			} else if value != nil {
				pf.FiatID = *value
			}
		case paymentfiat.FieldPaymentChannel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_channel", values[i])
			} else if value.Valid {
				pf.PaymentChannel = value.String
			}
		case paymentfiat.FieldAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				pf.Amount = *value
			}
		case paymentfiat.FieldUsdCurrency:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field usd_currency", values[i])
			} else if value != nil {
				pf.UsdCurrency = *value
			}
		default:
			pf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PaymentFiat.
// This includes values selected through modifiers, order, etc.
func (pf *PaymentFiat) Value(name string) (ent.Value, error) {
	return pf.selectValues.Get(name)
}

// Update returns a builder for updating this PaymentFiat.
// Note that you need to call PaymentFiat.Unwrap() before calling this method if this PaymentFiat
// was returned from a transaction, and the transaction was committed or rolled back.
func (pf *PaymentFiat) Update() *PaymentFiatUpdateOne {
	return NewPaymentFiatClient(pf.config).UpdateOne(pf)
}

// Unwrap unwraps the PaymentFiat entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pf *PaymentFiat) Unwrap() *PaymentFiat {
	_tx, ok := pf.config.driver.(*txDriver)
	if !ok {
		panic("generated: PaymentFiat is not a transactional entity")
	}
	pf.config.driver = _tx.drv
	return pf
}

// String implements the fmt.Stringer.
func (pf *PaymentFiat) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentFiat(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pf.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", pf.EntID))
	builder.WriteString(", ")
	builder.WriteString("payment_id=")
	builder.WriteString(fmt.Sprintf("%v", pf.PaymentID))
	builder.WriteString(", ")
	builder.WriteString("fiat_id=")
	builder.WriteString(fmt.Sprintf("%v", pf.FiatID))
	builder.WriteString(", ")
	builder.WriteString("payment_channel=")
	builder.WriteString(pf.PaymentChannel)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", pf.Amount))
	builder.WriteString(", ")
	builder.WriteString("usd_currency=")
	builder.WriteString(fmt.Sprintf("%v", pf.UsdCurrency))
	builder.WriteByte(')')
	return builder.String()
}

// PaymentFiats is a parsable slice of PaymentFiat.
type PaymentFiats []*PaymentFiat

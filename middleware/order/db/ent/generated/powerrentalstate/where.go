// Code generated by ent, DO NOT EDIT.

package powerrentalstate

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldEntID, v))
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldOrderID, v))
}

// CancelState applies equality check predicate on the "cancel_state" field. It's identical to CancelStateEQ.
func CancelState(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldCancelState, v))
}

// CanceledAt applies equality check predicate on the "canceled_at" field. It's identical to CanceledAtEQ.
func CanceledAt(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldCanceledAt, v))
}

// PaymentID applies equality check predicate on the "payment_id" field. It's identical to PaymentIDEQ.
func PaymentID(v uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldPaymentID, v))
}

// PaidAt applies equality check predicate on the "paid_at" field. It's identical to PaidAtEQ.
func PaidAt(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldPaidAt, v))
}

// UserSetPaid applies equality check predicate on the "user_set_paid" field. It's identical to UserSetPaidEQ.
func UserSetPaid(v bool) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldUserSetPaid, v))
}

// UserSetCanceled applies equality check predicate on the "user_set_canceled" field. It's identical to UserSetCanceledEQ.
func UserSetCanceled(v bool) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldUserSetCanceled, v))
}

// AdminSetCanceled applies equality check predicate on the "admin_set_canceled" field. It's identical to AdminSetCanceledEQ.
func AdminSetCanceled(v bool) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldAdminSetCanceled, v))
}

// PaymentState applies equality check predicate on the "payment_state" field. It's identical to PaymentStateEQ.
func PaymentState(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldPaymentState, v))
}

// OutofgasSeconds applies equality check predicate on the "outofgas_seconds" field. It's identical to OutofgasSecondsEQ.
func OutofgasSeconds(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldOutofgasSeconds, v))
}

// CompensateSeconds applies equality check predicate on the "compensate_seconds" field. It's identical to CompensateSecondsEQ.
func CompensateSeconds(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldCompensateSeconds, v))
}

// RenewState applies equality check predicate on the "renew_state" field. It's identical to RenewStateEQ.
func RenewState(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldRenewState, v))
}

// RenewNotifyAt applies equality check predicate on the "renew_notify_at" field. It's identical to RenewNotifyAtEQ.
func RenewNotifyAt(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldRenewNotifyAt, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldLTE(FieldEntID, v))
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldOrderID, v))
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNEQ(FieldOrderID, v))
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldIn(FieldOrderID, vs...))
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNotIn(FieldOrderID, vs...))
}

// OrderIDGT applies the GT predicate on the "order_id" field.
func OrderIDGT(v uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldGT(FieldOrderID, v))
}

// OrderIDGTE applies the GTE predicate on the "order_id" field.
func OrderIDGTE(v uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldGTE(FieldOrderID, v))
}

// OrderIDLT applies the LT predicate on the "order_id" field.
func OrderIDLT(v uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldLT(FieldOrderID, v))
}

// OrderIDLTE applies the LTE predicate on the "order_id" field.
func OrderIDLTE(v uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldLTE(FieldOrderID, v))
}

// OrderIDIsNil applies the IsNil predicate on the "order_id" field.
func OrderIDIsNil() predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldIsNull(FieldOrderID))
}

// OrderIDNotNil applies the NotNil predicate on the "order_id" field.
func OrderIDNotNil() predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNotNull(FieldOrderID))
}

// CancelStateEQ applies the EQ predicate on the "cancel_state" field.
func CancelStateEQ(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldCancelState, v))
}

// CancelStateNEQ applies the NEQ predicate on the "cancel_state" field.
func CancelStateNEQ(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNEQ(FieldCancelState, v))
}

// CancelStateIn applies the In predicate on the "cancel_state" field.
func CancelStateIn(vs ...string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldIn(FieldCancelState, vs...))
}

// CancelStateNotIn applies the NotIn predicate on the "cancel_state" field.
func CancelStateNotIn(vs ...string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNotIn(FieldCancelState, vs...))
}

// CancelStateGT applies the GT predicate on the "cancel_state" field.
func CancelStateGT(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldGT(FieldCancelState, v))
}

// CancelStateGTE applies the GTE predicate on the "cancel_state" field.
func CancelStateGTE(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldGTE(FieldCancelState, v))
}

// CancelStateLT applies the LT predicate on the "cancel_state" field.
func CancelStateLT(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldLT(FieldCancelState, v))
}

// CancelStateLTE applies the LTE predicate on the "cancel_state" field.
func CancelStateLTE(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldLTE(FieldCancelState, v))
}

// CancelStateContains applies the Contains predicate on the "cancel_state" field.
func CancelStateContains(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldContains(FieldCancelState, v))
}

// CancelStateHasPrefix applies the HasPrefix predicate on the "cancel_state" field.
func CancelStateHasPrefix(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldHasPrefix(FieldCancelState, v))
}

// CancelStateHasSuffix applies the HasSuffix predicate on the "cancel_state" field.
func CancelStateHasSuffix(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldHasSuffix(FieldCancelState, v))
}

// CancelStateIsNil applies the IsNil predicate on the "cancel_state" field.
func CancelStateIsNil() predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldIsNull(FieldCancelState))
}

// CancelStateNotNil applies the NotNil predicate on the "cancel_state" field.
func CancelStateNotNil() predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNotNull(FieldCancelState))
}

// CancelStateEqualFold applies the EqualFold predicate on the "cancel_state" field.
func CancelStateEqualFold(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEqualFold(FieldCancelState, v))
}

// CancelStateContainsFold applies the ContainsFold predicate on the "cancel_state" field.
func CancelStateContainsFold(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldContainsFold(FieldCancelState, v))
}

// CanceledAtEQ applies the EQ predicate on the "canceled_at" field.
func CanceledAtEQ(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldCanceledAt, v))
}

// CanceledAtNEQ applies the NEQ predicate on the "canceled_at" field.
func CanceledAtNEQ(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNEQ(FieldCanceledAt, v))
}

// CanceledAtIn applies the In predicate on the "canceled_at" field.
func CanceledAtIn(vs ...uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldIn(FieldCanceledAt, vs...))
}

// CanceledAtNotIn applies the NotIn predicate on the "canceled_at" field.
func CanceledAtNotIn(vs ...uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNotIn(FieldCanceledAt, vs...))
}

// CanceledAtGT applies the GT predicate on the "canceled_at" field.
func CanceledAtGT(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldGT(FieldCanceledAt, v))
}

// CanceledAtGTE applies the GTE predicate on the "canceled_at" field.
func CanceledAtGTE(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldGTE(FieldCanceledAt, v))
}

// CanceledAtLT applies the LT predicate on the "canceled_at" field.
func CanceledAtLT(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldLT(FieldCanceledAt, v))
}

// CanceledAtLTE applies the LTE predicate on the "canceled_at" field.
func CanceledAtLTE(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldLTE(FieldCanceledAt, v))
}

// CanceledAtIsNil applies the IsNil predicate on the "canceled_at" field.
func CanceledAtIsNil() predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldIsNull(FieldCanceledAt))
}

// CanceledAtNotNil applies the NotNil predicate on the "canceled_at" field.
func CanceledAtNotNil() predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNotNull(FieldCanceledAt))
}

// PaymentIDEQ applies the EQ predicate on the "payment_id" field.
func PaymentIDEQ(v uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldPaymentID, v))
}

// PaymentIDNEQ applies the NEQ predicate on the "payment_id" field.
func PaymentIDNEQ(v uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNEQ(FieldPaymentID, v))
}

// PaymentIDIn applies the In predicate on the "payment_id" field.
func PaymentIDIn(vs ...uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldIn(FieldPaymentID, vs...))
}

// PaymentIDNotIn applies the NotIn predicate on the "payment_id" field.
func PaymentIDNotIn(vs ...uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNotIn(FieldPaymentID, vs...))
}

// PaymentIDGT applies the GT predicate on the "payment_id" field.
func PaymentIDGT(v uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldGT(FieldPaymentID, v))
}

// PaymentIDGTE applies the GTE predicate on the "payment_id" field.
func PaymentIDGTE(v uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldGTE(FieldPaymentID, v))
}

// PaymentIDLT applies the LT predicate on the "payment_id" field.
func PaymentIDLT(v uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldLT(FieldPaymentID, v))
}

// PaymentIDLTE applies the LTE predicate on the "payment_id" field.
func PaymentIDLTE(v uuid.UUID) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldLTE(FieldPaymentID, v))
}

// PaymentIDIsNil applies the IsNil predicate on the "payment_id" field.
func PaymentIDIsNil() predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldIsNull(FieldPaymentID))
}

// PaymentIDNotNil applies the NotNil predicate on the "payment_id" field.
func PaymentIDNotNil() predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNotNull(FieldPaymentID))
}

// PaidAtEQ applies the EQ predicate on the "paid_at" field.
func PaidAtEQ(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldPaidAt, v))
}

// PaidAtNEQ applies the NEQ predicate on the "paid_at" field.
func PaidAtNEQ(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNEQ(FieldPaidAt, v))
}

// PaidAtIn applies the In predicate on the "paid_at" field.
func PaidAtIn(vs ...uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldIn(FieldPaidAt, vs...))
}

// PaidAtNotIn applies the NotIn predicate on the "paid_at" field.
func PaidAtNotIn(vs ...uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNotIn(FieldPaidAt, vs...))
}

// PaidAtGT applies the GT predicate on the "paid_at" field.
func PaidAtGT(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldGT(FieldPaidAt, v))
}

// PaidAtGTE applies the GTE predicate on the "paid_at" field.
func PaidAtGTE(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldGTE(FieldPaidAt, v))
}

// PaidAtLT applies the LT predicate on the "paid_at" field.
func PaidAtLT(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldLT(FieldPaidAt, v))
}

// PaidAtLTE applies the LTE predicate on the "paid_at" field.
func PaidAtLTE(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldLTE(FieldPaidAt, v))
}

// PaidAtIsNil applies the IsNil predicate on the "paid_at" field.
func PaidAtIsNil() predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldIsNull(FieldPaidAt))
}

// PaidAtNotNil applies the NotNil predicate on the "paid_at" field.
func PaidAtNotNil() predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNotNull(FieldPaidAt))
}

// UserSetPaidEQ applies the EQ predicate on the "user_set_paid" field.
func UserSetPaidEQ(v bool) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldUserSetPaid, v))
}

// UserSetPaidNEQ applies the NEQ predicate on the "user_set_paid" field.
func UserSetPaidNEQ(v bool) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNEQ(FieldUserSetPaid, v))
}

// UserSetPaidIsNil applies the IsNil predicate on the "user_set_paid" field.
func UserSetPaidIsNil() predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldIsNull(FieldUserSetPaid))
}

// UserSetPaidNotNil applies the NotNil predicate on the "user_set_paid" field.
func UserSetPaidNotNil() predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNotNull(FieldUserSetPaid))
}

// UserSetCanceledEQ applies the EQ predicate on the "user_set_canceled" field.
func UserSetCanceledEQ(v bool) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldUserSetCanceled, v))
}

// UserSetCanceledNEQ applies the NEQ predicate on the "user_set_canceled" field.
func UserSetCanceledNEQ(v bool) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNEQ(FieldUserSetCanceled, v))
}

// UserSetCanceledIsNil applies the IsNil predicate on the "user_set_canceled" field.
func UserSetCanceledIsNil() predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldIsNull(FieldUserSetCanceled))
}

// UserSetCanceledNotNil applies the NotNil predicate on the "user_set_canceled" field.
func UserSetCanceledNotNil() predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNotNull(FieldUserSetCanceled))
}

// AdminSetCanceledEQ applies the EQ predicate on the "admin_set_canceled" field.
func AdminSetCanceledEQ(v bool) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldAdminSetCanceled, v))
}

// AdminSetCanceledNEQ applies the NEQ predicate on the "admin_set_canceled" field.
func AdminSetCanceledNEQ(v bool) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNEQ(FieldAdminSetCanceled, v))
}

// AdminSetCanceledIsNil applies the IsNil predicate on the "admin_set_canceled" field.
func AdminSetCanceledIsNil() predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldIsNull(FieldAdminSetCanceled))
}

// AdminSetCanceledNotNil applies the NotNil predicate on the "admin_set_canceled" field.
func AdminSetCanceledNotNil() predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNotNull(FieldAdminSetCanceled))
}

// PaymentStateEQ applies the EQ predicate on the "payment_state" field.
func PaymentStateEQ(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldPaymentState, v))
}

// PaymentStateNEQ applies the NEQ predicate on the "payment_state" field.
func PaymentStateNEQ(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNEQ(FieldPaymentState, v))
}

// PaymentStateIn applies the In predicate on the "payment_state" field.
func PaymentStateIn(vs ...string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldIn(FieldPaymentState, vs...))
}

// PaymentStateNotIn applies the NotIn predicate on the "payment_state" field.
func PaymentStateNotIn(vs ...string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNotIn(FieldPaymentState, vs...))
}

// PaymentStateGT applies the GT predicate on the "payment_state" field.
func PaymentStateGT(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldGT(FieldPaymentState, v))
}

// PaymentStateGTE applies the GTE predicate on the "payment_state" field.
func PaymentStateGTE(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldGTE(FieldPaymentState, v))
}

// PaymentStateLT applies the LT predicate on the "payment_state" field.
func PaymentStateLT(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldLT(FieldPaymentState, v))
}

// PaymentStateLTE applies the LTE predicate on the "payment_state" field.
func PaymentStateLTE(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldLTE(FieldPaymentState, v))
}

// PaymentStateContains applies the Contains predicate on the "payment_state" field.
func PaymentStateContains(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldContains(FieldPaymentState, v))
}

// PaymentStateHasPrefix applies the HasPrefix predicate on the "payment_state" field.
func PaymentStateHasPrefix(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldHasPrefix(FieldPaymentState, v))
}

// PaymentStateHasSuffix applies the HasSuffix predicate on the "payment_state" field.
func PaymentStateHasSuffix(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldHasSuffix(FieldPaymentState, v))
}

// PaymentStateIsNil applies the IsNil predicate on the "payment_state" field.
func PaymentStateIsNil() predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldIsNull(FieldPaymentState))
}

// PaymentStateNotNil applies the NotNil predicate on the "payment_state" field.
func PaymentStateNotNil() predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNotNull(FieldPaymentState))
}

// PaymentStateEqualFold applies the EqualFold predicate on the "payment_state" field.
func PaymentStateEqualFold(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEqualFold(FieldPaymentState, v))
}

// PaymentStateContainsFold applies the ContainsFold predicate on the "payment_state" field.
func PaymentStateContainsFold(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldContainsFold(FieldPaymentState, v))
}

// OutofgasSecondsEQ applies the EQ predicate on the "outofgas_seconds" field.
func OutofgasSecondsEQ(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldOutofgasSeconds, v))
}

// OutofgasSecondsNEQ applies the NEQ predicate on the "outofgas_seconds" field.
func OutofgasSecondsNEQ(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNEQ(FieldOutofgasSeconds, v))
}

// OutofgasSecondsIn applies the In predicate on the "outofgas_seconds" field.
func OutofgasSecondsIn(vs ...uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldIn(FieldOutofgasSeconds, vs...))
}

// OutofgasSecondsNotIn applies the NotIn predicate on the "outofgas_seconds" field.
func OutofgasSecondsNotIn(vs ...uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNotIn(FieldOutofgasSeconds, vs...))
}

// OutofgasSecondsGT applies the GT predicate on the "outofgas_seconds" field.
func OutofgasSecondsGT(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldGT(FieldOutofgasSeconds, v))
}

// OutofgasSecondsGTE applies the GTE predicate on the "outofgas_seconds" field.
func OutofgasSecondsGTE(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldGTE(FieldOutofgasSeconds, v))
}

// OutofgasSecondsLT applies the LT predicate on the "outofgas_seconds" field.
func OutofgasSecondsLT(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldLT(FieldOutofgasSeconds, v))
}

// OutofgasSecondsLTE applies the LTE predicate on the "outofgas_seconds" field.
func OutofgasSecondsLTE(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldLTE(FieldOutofgasSeconds, v))
}

// OutofgasSecondsIsNil applies the IsNil predicate on the "outofgas_seconds" field.
func OutofgasSecondsIsNil() predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldIsNull(FieldOutofgasSeconds))
}

// OutofgasSecondsNotNil applies the NotNil predicate on the "outofgas_seconds" field.
func OutofgasSecondsNotNil() predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNotNull(FieldOutofgasSeconds))
}

// CompensateSecondsEQ applies the EQ predicate on the "compensate_seconds" field.
func CompensateSecondsEQ(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldCompensateSeconds, v))
}

// CompensateSecondsNEQ applies the NEQ predicate on the "compensate_seconds" field.
func CompensateSecondsNEQ(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNEQ(FieldCompensateSeconds, v))
}

// CompensateSecondsIn applies the In predicate on the "compensate_seconds" field.
func CompensateSecondsIn(vs ...uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldIn(FieldCompensateSeconds, vs...))
}

// CompensateSecondsNotIn applies the NotIn predicate on the "compensate_seconds" field.
func CompensateSecondsNotIn(vs ...uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNotIn(FieldCompensateSeconds, vs...))
}

// CompensateSecondsGT applies the GT predicate on the "compensate_seconds" field.
func CompensateSecondsGT(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldGT(FieldCompensateSeconds, v))
}

// CompensateSecondsGTE applies the GTE predicate on the "compensate_seconds" field.
func CompensateSecondsGTE(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldGTE(FieldCompensateSeconds, v))
}

// CompensateSecondsLT applies the LT predicate on the "compensate_seconds" field.
func CompensateSecondsLT(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldLT(FieldCompensateSeconds, v))
}

// CompensateSecondsLTE applies the LTE predicate on the "compensate_seconds" field.
func CompensateSecondsLTE(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldLTE(FieldCompensateSeconds, v))
}

// CompensateSecondsIsNil applies the IsNil predicate on the "compensate_seconds" field.
func CompensateSecondsIsNil() predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldIsNull(FieldCompensateSeconds))
}

// CompensateSecondsNotNil applies the NotNil predicate on the "compensate_seconds" field.
func CompensateSecondsNotNil() predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNotNull(FieldCompensateSeconds))
}

// RenewStateEQ applies the EQ predicate on the "renew_state" field.
func RenewStateEQ(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldRenewState, v))
}

// RenewStateNEQ applies the NEQ predicate on the "renew_state" field.
func RenewStateNEQ(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNEQ(FieldRenewState, v))
}

// RenewStateIn applies the In predicate on the "renew_state" field.
func RenewStateIn(vs ...string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldIn(FieldRenewState, vs...))
}

// RenewStateNotIn applies the NotIn predicate on the "renew_state" field.
func RenewStateNotIn(vs ...string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNotIn(FieldRenewState, vs...))
}

// RenewStateGT applies the GT predicate on the "renew_state" field.
func RenewStateGT(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldGT(FieldRenewState, v))
}

// RenewStateGTE applies the GTE predicate on the "renew_state" field.
func RenewStateGTE(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldGTE(FieldRenewState, v))
}

// RenewStateLT applies the LT predicate on the "renew_state" field.
func RenewStateLT(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldLT(FieldRenewState, v))
}

// RenewStateLTE applies the LTE predicate on the "renew_state" field.
func RenewStateLTE(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldLTE(FieldRenewState, v))
}

// RenewStateContains applies the Contains predicate on the "renew_state" field.
func RenewStateContains(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldContains(FieldRenewState, v))
}

// RenewStateHasPrefix applies the HasPrefix predicate on the "renew_state" field.
func RenewStateHasPrefix(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldHasPrefix(FieldRenewState, v))
}

// RenewStateHasSuffix applies the HasSuffix predicate on the "renew_state" field.
func RenewStateHasSuffix(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldHasSuffix(FieldRenewState, v))
}

// RenewStateIsNil applies the IsNil predicate on the "renew_state" field.
func RenewStateIsNil() predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldIsNull(FieldRenewState))
}

// RenewStateNotNil applies the NotNil predicate on the "renew_state" field.
func RenewStateNotNil() predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNotNull(FieldRenewState))
}

// RenewStateEqualFold applies the EqualFold predicate on the "renew_state" field.
func RenewStateEqualFold(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEqualFold(FieldRenewState, v))
}

// RenewStateContainsFold applies the ContainsFold predicate on the "renew_state" field.
func RenewStateContainsFold(v string) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldContainsFold(FieldRenewState, v))
}

// RenewNotifyAtEQ applies the EQ predicate on the "renew_notify_at" field.
func RenewNotifyAtEQ(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldEQ(FieldRenewNotifyAt, v))
}

// RenewNotifyAtNEQ applies the NEQ predicate on the "renew_notify_at" field.
func RenewNotifyAtNEQ(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNEQ(FieldRenewNotifyAt, v))
}

// RenewNotifyAtIn applies the In predicate on the "renew_notify_at" field.
func RenewNotifyAtIn(vs ...uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldIn(FieldRenewNotifyAt, vs...))
}

// RenewNotifyAtNotIn applies the NotIn predicate on the "renew_notify_at" field.
func RenewNotifyAtNotIn(vs ...uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNotIn(FieldRenewNotifyAt, vs...))
}

// RenewNotifyAtGT applies the GT predicate on the "renew_notify_at" field.
func RenewNotifyAtGT(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldGT(FieldRenewNotifyAt, v))
}

// RenewNotifyAtGTE applies the GTE predicate on the "renew_notify_at" field.
func RenewNotifyAtGTE(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldGTE(FieldRenewNotifyAt, v))
}

// RenewNotifyAtLT applies the LT predicate on the "renew_notify_at" field.
func RenewNotifyAtLT(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldLT(FieldRenewNotifyAt, v))
}

// RenewNotifyAtLTE applies the LTE predicate on the "renew_notify_at" field.
func RenewNotifyAtLTE(v uint32) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldLTE(FieldRenewNotifyAt, v))
}

// RenewNotifyAtIsNil applies the IsNil predicate on the "renew_notify_at" field.
func RenewNotifyAtIsNil() predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldIsNull(FieldRenewNotifyAt))
}

// RenewNotifyAtNotNil applies the NotNil predicate on the "renew_notify_at" field.
func RenewNotifyAtNotNil() predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.FieldNotNull(FieldRenewNotifyAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PowerRentalState) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PowerRentalState) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PowerRentalState) predicate.PowerRentalState {
	return predicate.PowerRentalState(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package powerrental

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldEntID, v))
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldOrderID, v))
}

// AppGoodStockID applies equality check predicate on the "app_good_stock_id" field. It's identical to AppGoodStockIDEQ.
func AppGoodStockID(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldAppGoodStockID, v))
}

// Units applies equality check predicate on the "units" field. It's identical to UnitsEQ.
func Units(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldUnits, v))
}

// GoodValueUsd applies equality check predicate on the "good_value_usd" field. It's identical to GoodValueUsdEQ.
func GoodValueUsd(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldGoodValueUsd, v))
}

// PaymentAmountUsd applies equality check predicate on the "payment_amount_usd" field. It's identical to PaymentAmountUsdEQ.
func PaymentAmountUsd(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldPaymentAmountUsd, v))
}

// DiscountAmountUsd applies equality check predicate on the "discount_amount_usd" field. It's identical to DiscountAmountUsdEQ.
func DiscountAmountUsd(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldDiscountAmountUsd, v))
}

// PromotionID applies equality check predicate on the "promotion_id" field. It's identical to PromotionIDEQ.
func PromotionID(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldPromotionID, v))
}

// InvestmentType applies equality check predicate on the "investment_type" field. It's identical to InvestmentTypeEQ.
func InvestmentType(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldInvestmentType, v))
}

// GoodStockMode applies equality check predicate on the "good_stock_mode" field. It's identical to GoodStockModeEQ.
func GoodStockMode(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldGoodStockMode, v))
}

// DurationSeconds applies equality check predicate on the "duration_seconds" field. It's identical to DurationSecondsEQ.
func DurationSeconds(v uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldDurationSeconds, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLTE(FieldEntID, v))
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldOrderID, v))
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNEQ(FieldOrderID, v))
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIn(FieldOrderID, vs...))
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotIn(FieldOrderID, vs...))
}

// OrderIDGT applies the GT predicate on the "order_id" field.
func OrderIDGT(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGT(FieldOrderID, v))
}

// OrderIDGTE applies the GTE predicate on the "order_id" field.
func OrderIDGTE(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGTE(FieldOrderID, v))
}

// OrderIDLT applies the LT predicate on the "order_id" field.
func OrderIDLT(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLT(FieldOrderID, v))
}

// OrderIDLTE applies the LTE predicate on the "order_id" field.
func OrderIDLTE(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLTE(FieldOrderID, v))
}

// OrderIDIsNil applies the IsNil predicate on the "order_id" field.
func OrderIDIsNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIsNull(FieldOrderID))
}

// OrderIDNotNil applies the NotNil predicate on the "order_id" field.
func OrderIDNotNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotNull(FieldOrderID))
}

// AppGoodStockIDEQ applies the EQ predicate on the "app_good_stock_id" field.
func AppGoodStockIDEQ(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldAppGoodStockID, v))
}

// AppGoodStockIDNEQ applies the NEQ predicate on the "app_good_stock_id" field.
func AppGoodStockIDNEQ(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNEQ(FieldAppGoodStockID, v))
}

// AppGoodStockIDIn applies the In predicate on the "app_good_stock_id" field.
func AppGoodStockIDIn(vs ...uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIn(FieldAppGoodStockID, vs...))
}

// AppGoodStockIDNotIn applies the NotIn predicate on the "app_good_stock_id" field.
func AppGoodStockIDNotIn(vs ...uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotIn(FieldAppGoodStockID, vs...))
}

// AppGoodStockIDGT applies the GT predicate on the "app_good_stock_id" field.
func AppGoodStockIDGT(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGT(FieldAppGoodStockID, v))
}

// AppGoodStockIDGTE applies the GTE predicate on the "app_good_stock_id" field.
func AppGoodStockIDGTE(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGTE(FieldAppGoodStockID, v))
}

// AppGoodStockIDLT applies the LT predicate on the "app_good_stock_id" field.
func AppGoodStockIDLT(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLT(FieldAppGoodStockID, v))
}

// AppGoodStockIDLTE applies the LTE predicate on the "app_good_stock_id" field.
func AppGoodStockIDLTE(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLTE(FieldAppGoodStockID, v))
}

// AppGoodStockIDIsNil applies the IsNil predicate on the "app_good_stock_id" field.
func AppGoodStockIDIsNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIsNull(FieldAppGoodStockID))
}

// AppGoodStockIDNotNil applies the NotNil predicate on the "app_good_stock_id" field.
func AppGoodStockIDNotNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotNull(FieldAppGoodStockID))
}

// UnitsEQ applies the EQ predicate on the "units" field.
func UnitsEQ(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldUnits, v))
}

// UnitsNEQ applies the NEQ predicate on the "units" field.
func UnitsNEQ(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNEQ(FieldUnits, v))
}

// UnitsIn applies the In predicate on the "units" field.
func UnitsIn(vs ...decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIn(FieldUnits, vs...))
}

// UnitsNotIn applies the NotIn predicate on the "units" field.
func UnitsNotIn(vs ...decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotIn(FieldUnits, vs...))
}

// UnitsGT applies the GT predicate on the "units" field.
func UnitsGT(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGT(FieldUnits, v))
}

// UnitsGTE applies the GTE predicate on the "units" field.
func UnitsGTE(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGTE(FieldUnits, v))
}

// UnitsLT applies the LT predicate on the "units" field.
func UnitsLT(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLT(FieldUnits, v))
}

// UnitsLTE applies the LTE predicate on the "units" field.
func UnitsLTE(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLTE(FieldUnits, v))
}

// UnitsIsNil applies the IsNil predicate on the "units" field.
func UnitsIsNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIsNull(FieldUnits))
}

// UnitsNotNil applies the NotNil predicate on the "units" field.
func UnitsNotNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotNull(FieldUnits))
}

// GoodValueUsdEQ applies the EQ predicate on the "good_value_usd" field.
func GoodValueUsdEQ(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldGoodValueUsd, v))
}

// GoodValueUsdNEQ applies the NEQ predicate on the "good_value_usd" field.
func GoodValueUsdNEQ(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNEQ(FieldGoodValueUsd, v))
}

// GoodValueUsdIn applies the In predicate on the "good_value_usd" field.
func GoodValueUsdIn(vs ...decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIn(FieldGoodValueUsd, vs...))
}

// GoodValueUsdNotIn applies the NotIn predicate on the "good_value_usd" field.
func GoodValueUsdNotIn(vs ...decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotIn(FieldGoodValueUsd, vs...))
}

// GoodValueUsdGT applies the GT predicate on the "good_value_usd" field.
func GoodValueUsdGT(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGT(FieldGoodValueUsd, v))
}

// GoodValueUsdGTE applies the GTE predicate on the "good_value_usd" field.
func GoodValueUsdGTE(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGTE(FieldGoodValueUsd, v))
}

// GoodValueUsdLT applies the LT predicate on the "good_value_usd" field.
func GoodValueUsdLT(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLT(FieldGoodValueUsd, v))
}

// GoodValueUsdLTE applies the LTE predicate on the "good_value_usd" field.
func GoodValueUsdLTE(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLTE(FieldGoodValueUsd, v))
}

// GoodValueUsdIsNil applies the IsNil predicate on the "good_value_usd" field.
func GoodValueUsdIsNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIsNull(FieldGoodValueUsd))
}

// GoodValueUsdNotNil applies the NotNil predicate on the "good_value_usd" field.
func GoodValueUsdNotNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotNull(FieldGoodValueUsd))
}

// PaymentAmountUsdEQ applies the EQ predicate on the "payment_amount_usd" field.
func PaymentAmountUsdEQ(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldPaymentAmountUsd, v))
}

// PaymentAmountUsdNEQ applies the NEQ predicate on the "payment_amount_usd" field.
func PaymentAmountUsdNEQ(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNEQ(FieldPaymentAmountUsd, v))
}

// PaymentAmountUsdIn applies the In predicate on the "payment_amount_usd" field.
func PaymentAmountUsdIn(vs ...decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIn(FieldPaymentAmountUsd, vs...))
}

// PaymentAmountUsdNotIn applies the NotIn predicate on the "payment_amount_usd" field.
func PaymentAmountUsdNotIn(vs ...decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotIn(FieldPaymentAmountUsd, vs...))
}

// PaymentAmountUsdGT applies the GT predicate on the "payment_amount_usd" field.
func PaymentAmountUsdGT(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGT(FieldPaymentAmountUsd, v))
}

// PaymentAmountUsdGTE applies the GTE predicate on the "payment_amount_usd" field.
func PaymentAmountUsdGTE(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGTE(FieldPaymentAmountUsd, v))
}

// PaymentAmountUsdLT applies the LT predicate on the "payment_amount_usd" field.
func PaymentAmountUsdLT(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLT(FieldPaymentAmountUsd, v))
}

// PaymentAmountUsdLTE applies the LTE predicate on the "payment_amount_usd" field.
func PaymentAmountUsdLTE(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLTE(FieldPaymentAmountUsd, v))
}

// PaymentAmountUsdIsNil applies the IsNil predicate on the "payment_amount_usd" field.
func PaymentAmountUsdIsNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIsNull(FieldPaymentAmountUsd))
}

// PaymentAmountUsdNotNil applies the NotNil predicate on the "payment_amount_usd" field.
func PaymentAmountUsdNotNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotNull(FieldPaymentAmountUsd))
}

// DiscountAmountUsdEQ applies the EQ predicate on the "discount_amount_usd" field.
func DiscountAmountUsdEQ(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldDiscountAmountUsd, v))
}

// DiscountAmountUsdNEQ applies the NEQ predicate on the "discount_amount_usd" field.
func DiscountAmountUsdNEQ(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNEQ(FieldDiscountAmountUsd, v))
}

// DiscountAmountUsdIn applies the In predicate on the "discount_amount_usd" field.
func DiscountAmountUsdIn(vs ...decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIn(FieldDiscountAmountUsd, vs...))
}

// DiscountAmountUsdNotIn applies the NotIn predicate on the "discount_amount_usd" field.
func DiscountAmountUsdNotIn(vs ...decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotIn(FieldDiscountAmountUsd, vs...))
}

// DiscountAmountUsdGT applies the GT predicate on the "discount_amount_usd" field.
func DiscountAmountUsdGT(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGT(FieldDiscountAmountUsd, v))
}

// DiscountAmountUsdGTE applies the GTE predicate on the "discount_amount_usd" field.
func DiscountAmountUsdGTE(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGTE(FieldDiscountAmountUsd, v))
}

// DiscountAmountUsdLT applies the LT predicate on the "discount_amount_usd" field.
func DiscountAmountUsdLT(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLT(FieldDiscountAmountUsd, v))
}

// DiscountAmountUsdLTE applies the LTE predicate on the "discount_amount_usd" field.
func DiscountAmountUsdLTE(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLTE(FieldDiscountAmountUsd, v))
}

// DiscountAmountUsdIsNil applies the IsNil predicate on the "discount_amount_usd" field.
func DiscountAmountUsdIsNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIsNull(FieldDiscountAmountUsd))
}

// DiscountAmountUsdNotNil applies the NotNil predicate on the "discount_amount_usd" field.
func DiscountAmountUsdNotNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotNull(FieldDiscountAmountUsd))
}

// PromotionIDEQ applies the EQ predicate on the "promotion_id" field.
func PromotionIDEQ(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldPromotionID, v))
}

// PromotionIDNEQ applies the NEQ predicate on the "promotion_id" field.
func PromotionIDNEQ(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNEQ(FieldPromotionID, v))
}

// PromotionIDIn applies the In predicate on the "promotion_id" field.
func PromotionIDIn(vs ...uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIn(FieldPromotionID, vs...))
}

// PromotionIDNotIn applies the NotIn predicate on the "promotion_id" field.
func PromotionIDNotIn(vs ...uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotIn(FieldPromotionID, vs...))
}

// PromotionIDGT applies the GT predicate on the "promotion_id" field.
func PromotionIDGT(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGT(FieldPromotionID, v))
}

// PromotionIDGTE applies the GTE predicate on the "promotion_id" field.
func PromotionIDGTE(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGTE(FieldPromotionID, v))
}

// PromotionIDLT applies the LT predicate on the "promotion_id" field.
func PromotionIDLT(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLT(FieldPromotionID, v))
}

// PromotionIDLTE applies the LTE predicate on the "promotion_id" field.
func PromotionIDLTE(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLTE(FieldPromotionID, v))
}

// PromotionIDIsNil applies the IsNil predicate on the "promotion_id" field.
func PromotionIDIsNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIsNull(FieldPromotionID))
}

// PromotionIDNotNil applies the NotNil predicate on the "promotion_id" field.
func PromotionIDNotNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotNull(FieldPromotionID))
}

// InvestmentTypeEQ applies the EQ predicate on the "investment_type" field.
func InvestmentTypeEQ(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldInvestmentType, v))
}

// InvestmentTypeNEQ applies the NEQ predicate on the "investment_type" field.
func InvestmentTypeNEQ(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNEQ(FieldInvestmentType, v))
}

// InvestmentTypeIn applies the In predicate on the "investment_type" field.
func InvestmentTypeIn(vs ...string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIn(FieldInvestmentType, vs...))
}

// InvestmentTypeNotIn applies the NotIn predicate on the "investment_type" field.
func InvestmentTypeNotIn(vs ...string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotIn(FieldInvestmentType, vs...))
}

// InvestmentTypeGT applies the GT predicate on the "investment_type" field.
func InvestmentTypeGT(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGT(FieldInvestmentType, v))
}

// InvestmentTypeGTE applies the GTE predicate on the "investment_type" field.
func InvestmentTypeGTE(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGTE(FieldInvestmentType, v))
}

// InvestmentTypeLT applies the LT predicate on the "investment_type" field.
func InvestmentTypeLT(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLT(FieldInvestmentType, v))
}

// InvestmentTypeLTE applies the LTE predicate on the "investment_type" field.
func InvestmentTypeLTE(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLTE(FieldInvestmentType, v))
}

// InvestmentTypeContains applies the Contains predicate on the "investment_type" field.
func InvestmentTypeContains(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldContains(FieldInvestmentType, v))
}

// InvestmentTypeHasPrefix applies the HasPrefix predicate on the "investment_type" field.
func InvestmentTypeHasPrefix(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldHasPrefix(FieldInvestmentType, v))
}

// InvestmentTypeHasSuffix applies the HasSuffix predicate on the "investment_type" field.
func InvestmentTypeHasSuffix(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldHasSuffix(FieldInvestmentType, v))
}

// InvestmentTypeIsNil applies the IsNil predicate on the "investment_type" field.
func InvestmentTypeIsNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIsNull(FieldInvestmentType))
}

// InvestmentTypeNotNil applies the NotNil predicate on the "investment_type" field.
func InvestmentTypeNotNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotNull(FieldInvestmentType))
}

// InvestmentTypeEqualFold applies the EqualFold predicate on the "investment_type" field.
func InvestmentTypeEqualFold(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEqualFold(FieldInvestmentType, v))
}

// InvestmentTypeContainsFold applies the ContainsFold predicate on the "investment_type" field.
func InvestmentTypeContainsFold(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldContainsFold(FieldInvestmentType, v))
}

// GoodStockModeEQ applies the EQ predicate on the "good_stock_mode" field.
func GoodStockModeEQ(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldGoodStockMode, v))
}

// GoodStockModeNEQ applies the NEQ predicate on the "good_stock_mode" field.
func GoodStockModeNEQ(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNEQ(FieldGoodStockMode, v))
}

// GoodStockModeIn applies the In predicate on the "good_stock_mode" field.
func GoodStockModeIn(vs ...string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIn(FieldGoodStockMode, vs...))
}

// GoodStockModeNotIn applies the NotIn predicate on the "good_stock_mode" field.
func GoodStockModeNotIn(vs ...string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotIn(FieldGoodStockMode, vs...))
}

// GoodStockModeGT applies the GT predicate on the "good_stock_mode" field.
func GoodStockModeGT(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGT(FieldGoodStockMode, v))
}

// GoodStockModeGTE applies the GTE predicate on the "good_stock_mode" field.
func GoodStockModeGTE(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGTE(FieldGoodStockMode, v))
}

// GoodStockModeLT applies the LT predicate on the "good_stock_mode" field.
func GoodStockModeLT(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLT(FieldGoodStockMode, v))
}

// GoodStockModeLTE applies the LTE predicate on the "good_stock_mode" field.
func GoodStockModeLTE(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLTE(FieldGoodStockMode, v))
}

// GoodStockModeContains applies the Contains predicate on the "good_stock_mode" field.
func GoodStockModeContains(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldContains(FieldGoodStockMode, v))
}

// GoodStockModeHasPrefix applies the HasPrefix predicate on the "good_stock_mode" field.
func GoodStockModeHasPrefix(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldHasPrefix(FieldGoodStockMode, v))
}

// GoodStockModeHasSuffix applies the HasSuffix predicate on the "good_stock_mode" field.
func GoodStockModeHasSuffix(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldHasSuffix(FieldGoodStockMode, v))
}

// GoodStockModeIsNil applies the IsNil predicate on the "good_stock_mode" field.
func GoodStockModeIsNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIsNull(FieldGoodStockMode))
}

// GoodStockModeNotNil applies the NotNil predicate on the "good_stock_mode" field.
func GoodStockModeNotNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotNull(FieldGoodStockMode))
}

// GoodStockModeEqualFold applies the EqualFold predicate on the "good_stock_mode" field.
func GoodStockModeEqualFold(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEqualFold(FieldGoodStockMode, v))
}

// GoodStockModeContainsFold applies the ContainsFold predicate on the "good_stock_mode" field.
func GoodStockModeContainsFold(v string) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldContainsFold(FieldGoodStockMode, v))
}

// DurationSecondsEQ applies the EQ predicate on the "duration_seconds" field.
func DurationSecondsEQ(v uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldEQ(FieldDurationSeconds, v))
}

// DurationSecondsNEQ applies the NEQ predicate on the "duration_seconds" field.
func DurationSecondsNEQ(v uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNEQ(FieldDurationSeconds, v))
}

// DurationSecondsIn applies the In predicate on the "duration_seconds" field.
func DurationSecondsIn(vs ...uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIn(FieldDurationSeconds, vs...))
}

// DurationSecondsNotIn applies the NotIn predicate on the "duration_seconds" field.
func DurationSecondsNotIn(vs ...uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotIn(FieldDurationSeconds, vs...))
}

// DurationSecondsGT applies the GT predicate on the "duration_seconds" field.
func DurationSecondsGT(v uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGT(FieldDurationSeconds, v))
}

// DurationSecondsGTE applies the GTE predicate on the "duration_seconds" field.
func DurationSecondsGTE(v uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldGTE(FieldDurationSeconds, v))
}

// DurationSecondsLT applies the LT predicate on the "duration_seconds" field.
func DurationSecondsLT(v uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLT(FieldDurationSeconds, v))
}

// DurationSecondsLTE applies the LTE predicate on the "duration_seconds" field.
func DurationSecondsLTE(v uint32) predicate.PowerRental {
	return predicate.PowerRental(sql.FieldLTE(FieldDurationSeconds, v))
}

// DurationSecondsIsNil applies the IsNil predicate on the "duration_seconds" field.
func DurationSecondsIsNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldIsNull(FieldDurationSeconds))
}

// DurationSecondsNotNil applies the NotNil predicate on the "duration_seconds" field.
func DurationSecondsNotNil() predicate.PowerRental {
	return predicate.PowerRental(sql.FieldNotNull(FieldDurationSeconds))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PowerRental) predicate.PowerRental {
	return predicate.PowerRental(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PowerRental) predicate.PowerRental {
	return predicate.PowerRental(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PowerRental) predicate.PowerRental {
	return predicate.PowerRental(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package powerrental

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the powerrental type in the database.
	Label = "power_rental"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldAppGoodStockID holds the string denoting the app_good_stock_id field in the database.
	FieldAppGoodStockID = "app_good_stock_id"
	// FieldUnits holds the string denoting the units field in the database.
	FieldUnits = "units"
	// FieldGoodValueUsd holds the string denoting the good_value_usd field in the database.
	FieldGoodValueUsd = "good_value_usd"
	// FieldPaymentAmountUsd holds the string denoting the payment_amount_usd field in the database.
	FieldPaymentAmountUsd = "payment_amount_usd"
	// FieldDiscountAmountUsd holds the string denoting the discount_amount_usd field in the database.
	FieldDiscountAmountUsd = "discount_amount_usd"
	// FieldPromotionID holds the string denoting the promotion_id field in the database.
	FieldPromotionID = "promotion_id"
	// FieldInvestmentType holds the string denoting the investment_type field in the database.
	FieldInvestmentType = "investment_type"
	// FieldGoodStockMode holds the string denoting the good_stock_mode field in the database.
	FieldGoodStockMode = "good_stock_mode"
	// FieldDurationSeconds holds the string denoting the duration_seconds field in the database.
	FieldDurationSeconds = "duration_seconds"
	// Table holds the table name of the powerrental in the database.
	Table = "power_rentals"
)

// Columns holds all SQL columns for powerrental fields.
var Columns = []string{
	FieldID,
	FieldEntID,
	FieldOrderID,
	FieldAppGoodStockID,
	FieldUnits,
	FieldGoodValueUsd,
	FieldPaymentAmountUsd,
	FieldDiscountAmountUsd,
	FieldPromotionID,
	FieldInvestmentType,
	FieldGoodStockMode,
	FieldDurationSeconds,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultOrderID holds the default value on creation for the "order_id" field.
	DefaultOrderID func() uuid.UUID
	// DefaultAppGoodStockID holds the default value on creation for the "app_good_stock_id" field.
	DefaultAppGoodStockID func() uuid.UUID
	// DefaultUnits holds the default value on creation for the "units" field.
	DefaultUnits decimal.Decimal
	// DefaultGoodValueUsd holds the default value on creation for the "good_value_usd" field.
	DefaultGoodValueUsd decimal.Decimal
	// DefaultPaymentAmountUsd holds the default value on creation for the "payment_amount_usd" field.
	DefaultPaymentAmountUsd decimal.Decimal
	// DefaultDiscountAmountUsd holds the default value on creation for the "discount_amount_usd" field.
	DefaultDiscountAmountUsd decimal.Decimal
	// DefaultPromotionID holds the default value on creation for the "promotion_id" field.
	DefaultPromotionID func() uuid.UUID
	// DefaultInvestmentType holds the default value on creation for the "investment_type" field.
	DefaultInvestmentType string
	// DefaultGoodStockMode holds the default value on creation for the "good_stock_mode" field.
	DefaultGoodStockMode string
	// DefaultDurationSeconds holds the default value on creation for the "duration_seconds" field.
	DefaultDurationSeconds uint32
)

// OrderOption defines the ordering options for the PowerRental queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByOrderID orders the results by the order_id field.
func ByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderID, opts...).ToFunc()
}

// ByAppGoodStockID orders the results by the app_good_stock_id field.
func ByAppGoodStockID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppGoodStockID, opts...).ToFunc()
}

// ByUnits orders the results by the units field.
func ByUnits(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnits, opts...).ToFunc()
}

// ByGoodValueUsd orders the results by the good_value_usd field.
func ByGoodValueUsd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodValueUsd, opts...).ToFunc()
}

// ByPaymentAmountUsd orders the results by the payment_amount_usd field.
func ByPaymentAmountUsd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentAmountUsd, opts...).ToFunc()
}

// ByDiscountAmountUsd orders the results by the discount_amount_usd field.
func ByDiscountAmountUsd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscountAmountUsd, opts...).ToFunc()
}

// ByPromotionID orders the results by the promotion_id field.
func ByPromotionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPromotionID, opts...).ToFunc()
}

// ByInvestmentType orders the results by the investment_type field.
func ByInvestmentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvestmentType, opts...).ToFunc()
}

// ByGoodStockMode orders the results by the good_stock_mode field.
func ByGoodStockMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodStockMode, opts...).ToFunc()
}

// ByDurationSeconds orders the results by the duration_seconds field.
func ByDurationSeconds(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDurationSeconds, opts...).ToFunc()
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/paymentbalancelock"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// PaymentBalanceLockUpdate is the builder for updating PaymentBalanceLock entities.
type PaymentBalanceLockUpdate struct {
	config
	hooks     []Hook
	mutation  *PaymentBalanceLockMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PaymentBalanceLockUpdate builder.
func (pblu *PaymentBalanceLockUpdate) Where(ps ...predicate.PaymentBalanceLock) *PaymentBalanceLockUpdate {
	pblu.mutation.Where(ps...)
	return pblu
}

// SetEntID sets the "ent_id" field.
func (pblu *PaymentBalanceLockUpdate) SetEntID(u uuid.UUID) *PaymentBalanceLockUpdate {
	pblu.mutation.SetEntID(u)
	return pblu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (pblu *PaymentBalanceLockUpdate) SetNillableEntID(u *uuid.UUID) *PaymentBalanceLockUpdate {
	if u != nil {
		pblu.SetEntID(*u)
	}
	return pblu
}

// SetPaymentID sets the "payment_id" field.
func (pblu *PaymentBalanceLockUpdate) SetPaymentID(u uuid.UUID) *PaymentBalanceLockUpdate {
	pblu.mutation.SetPaymentID(u)
	return pblu
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (pblu *PaymentBalanceLockUpdate) SetNillablePaymentID(u *uuid.UUID) *PaymentBalanceLockUpdate {
	if u != nil {
		pblu.SetPaymentID(*u)
	}
	return pblu
}

// ClearPaymentID clears the value of the "payment_id" field.
func (pblu *PaymentBalanceLockUpdate) ClearPaymentID() *PaymentBalanceLockUpdate {
	pblu.mutation.ClearPaymentID()
	return pblu
}

// SetLedgerLockID sets the "ledger_lock_id" field.
func (pblu *PaymentBalanceLockUpdate) SetLedgerLockID(u uuid.UUID) *PaymentBalanceLockUpdate {
	pblu.mutation.SetLedgerLockID(u)
	return pblu
}

// SetNillableLedgerLockID sets the "ledger_lock_id" field if the given value is not nil.
func (pblu *PaymentBalanceLockUpdate) SetNillableLedgerLockID(u *uuid.UUID) *PaymentBalanceLockUpdate {
	if u != nil {
		pblu.SetLedgerLockID(*u)
	}
	return pblu
}

// ClearLedgerLockID clears the value of the "ledger_lock_id" field.
func (pblu *PaymentBalanceLockUpdate) ClearLedgerLockID() *PaymentBalanceLockUpdate {
	pblu.mutation.ClearLedgerLockID()
	return pblu
}

// Mutation returns the PaymentBalanceLockMutation object of the builder.
func (pblu *PaymentBalanceLockUpdate) Mutation() *PaymentBalanceLockMutation {
	return pblu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pblu *PaymentBalanceLockUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pblu.sqlSave, pblu.mutation, pblu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pblu *PaymentBalanceLockUpdate) SaveX(ctx context.Context) int {
	affected, err := pblu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pblu *PaymentBalanceLockUpdate) Exec(ctx context.Context) error {
	_, err := pblu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pblu *PaymentBalanceLockUpdate) ExecX(ctx context.Context) {
	if err := pblu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pblu *PaymentBalanceLockUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PaymentBalanceLockUpdate {
	pblu.modifiers = append(pblu.modifiers, modifiers...)
	return pblu
}

func (pblu *PaymentBalanceLockUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(paymentbalancelock.Table, paymentbalancelock.Columns, sqlgraph.NewFieldSpec(paymentbalancelock.FieldID, field.TypeUint32))
	if ps := pblu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pblu.mutation.EntID(); ok {
		_spec.SetField(paymentbalancelock.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := pblu.mutation.PaymentID(); ok {
		_spec.SetField(paymentbalancelock.FieldPaymentID, field.TypeUUID, value)
	}
	if pblu.mutation.PaymentIDCleared() {
		_spec.ClearField(paymentbalancelock.FieldPaymentID, field.TypeUUID)
	}
	if value, ok := pblu.mutation.LedgerLockID(); ok {
		_spec.SetField(paymentbalancelock.FieldLedgerLockID, field.TypeUUID, value)
	}
	if pblu.mutation.LedgerLockIDCleared() {
		_spec.ClearField(paymentbalancelock.FieldLedgerLockID, field.TypeUUID)
	}
	_spec.AddModifiers(pblu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pblu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentbalancelock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pblu.mutation.done = true
	return n, nil
}

// PaymentBalanceLockUpdateOne is the builder for updating a single PaymentBalanceLock entity.
type PaymentBalanceLockUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PaymentBalanceLockMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (pbluo *PaymentBalanceLockUpdateOne) SetEntID(u uuid.UUID) *PaymentBalanceLockUpdateOne {
	pbluo.mutation.SetEntID(u)
	return pbluo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (pbluo *PaymentBalanceLockUpdateOne) SetNillableEntID(u *uuid.UUID) *PaymentBalanceLockUpdateOne {
	if u != nil {
		pbluo.SetEntID(*u)
	}
	return pbluo
}

// SetPaymentID sets the "payment_id" field.
func (pbluo *PaymentBalanceLockUpdateOne) SetPaymentID(u uuid.UUID) *PaymentBalanceLockUpdateOne {
	pbluo.mutation.SetPaymentID(u)
	return pbluo
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (pbluo *PaymentBalanceLockUpdateOne) SetNillablePaymentID(u *uuid.UUID) *PaymentBalanceLockUpdateOne {
	if u != nil {
		pbluo.SetPaymentID(*u)
	}
	return pbluo
}

// ClearPaymentID clears the value of the "payment_id" field.
func (pbluo *PaymentBalanceLockUpdateOne) ClearPaymentID() *PaymentBalanceLockUpdateOne {
	pbluo.mutation.ClearPaymentID()
	return pbluo
}

// SetLedgerLockID sets the "ledger_lock_id" field.
func (pbluo *PaymentBalanceLockUpdateOne) SetLedgerLockID(u uuid.UUID) *PaymentBalanceLockUpdateOne {
	pbluo.mutation.SetLedgerLockID(u)
	return pbluo
}

// SetNillableLedgerLockID sets the "ledger_lock_id" field if the given value is not nil.
func (pbluo *PaymentBalanceLockUpdateOne) SetNillableLedgerLockID(u *uuid.UUID) *PaymentBalanceLockUpdateOne {
	if u != nil {
		pbluo.SetLedgerLockID(*u)
	}
	return pbluo
}

// ClearLedgerLockID clears the value of the "ledger_lock_id" field.
func (pbluo *PaymentBalanceLockUpdateOne) ClearLedgerLockID() *PaymentBalanceLockUpdateOne {
	pbluo.mutation.ClearLedgerLockID()
	return pbluo
}

// Mutation returns the PaymentBalanceLockMutation object of the builder.
func (pbluo *PaymentBalanceLockUpdateOne) Mutation() *PaymentBalanceLockMutation {
	return pbluo.mutation
}

// Where appends a list predicates to the PaymentBalanceLockUpdate builder.
func (pbluo *PaymentBalanceLockUpdateOne) Where(ps ...predicate.PaymentBalanceLock) *PaymentBalanceLockUpdateOne {
	pbluo.mutation.Where(ps...)
	return pbluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pbluo *PaymentBalanceLockUpdateOne) Select(field string, fields ...string) *PaymentBalanceLockUpdateOne {
	pbluo.fields = append([]string{field}, fields...)
	return pbluo
}

// Save executes the query and returns the updated PaymentBalanceLock entity.
func (pbluo *PaymentBalanceLockUpdateOne) Save(ctx context.Context) (*PaymentBalanceLock, error) {
	return withHooks(ctx, pbluo.sqlSave, pbluo.mutation, pbluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pbluo *PaymentBalanceLockUpdateOne) SaveX(ctx context.Context) *PaymentBalanceLock {
	node, err := pbluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pbluo *PaymentBalanceLockUpdateOne) Exec(ctx context.Context) error {
	_, err := pbluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pbluo *PaymentBalanceLockUpdateOne) ExecX(ctx context.Context) {
	if err := pbluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pbluo *PaymentBalanceLockUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PaymentBalanceLockUpdateOne {
	pbluo.modifiers = append(pbluo.modifiers, modifiers...)
	return pbluo
}

func (pbluo *PaymentBalanceLockUpdateOne) sqlSave(ctx context.Context) (_node *PaymentBalanceLock, err error) {
	_spec := sqlgraph.NewUpdateSpec(paymentbalancelock.Table, paymentbalancelock.Columns, sqlgraph.NewFieldSpec(paymentbalancelock.FieldID, field.TypeUint32))
	id, ok := pbluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "PaymentBalanceLock.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pbluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentbalancelock.FieldID)
		for _, f := range fields {
			if !paymentbalancelock.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != paymentbalancelock.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pbluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pbluo.mutation.EntID(); ok {
		_spec.SetField(paymentbalancelock.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := pbluo.mutation.PaymentID(); ok {
		_spec.SetField(paymentbalancelock.FieldPaymentID, field.TypeUUID, value)
	}
	if pbluo.mutation.PaymentIDCleared() {
		_spec.ClearField(paymentbalancelock.FieldPaymentID, field.TypeUUID)
	}
	if value, ok := pbluo.mutation.LedgerLockID(); ok {
		_spec.SetField(paymentbalancelock.FieldLedgerLockID, field.TypeUUID, value)
	}
	if pbluo.mutation.LedgerLockIDCleared() {
		_spec.ClearField(paymentbalancelock.FieldLedgerLockID, field.TypeUUID)
	}
	_spec.AddModifiers(pbluo.modifiers...)
	_node = &PaymentBalanceLock{config: pbluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pbluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentbalancelock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pbluo.mutation.done = true
	return _node, nil
}

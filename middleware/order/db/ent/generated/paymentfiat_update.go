// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/paymentfiat"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// PaymentFiatUpdate is the builder for updating PaymentFiat entities.
type PaymentFiatUpdate struct {
	config
	hooks     []Hook
	mutation  *PaymentFiatMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PaymentFiatUpdate builder.
func (pfu *PaymentFiatUpdate) Where(ps ...predicate.PaymentFiat) *PaymentFiatUpdate {
	pfu.mutation.Where(ps...)
	return pfu
}

// SetEntID sets the "ent_id" field.
func (pfu *PaymentFiatUpdate) SetEntID(u uuid.UUID) *PaymentFiatUpdate {
	pfu.mutation.SetEntID(u)
	return pfu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (pfu *PaymentFiatUpdate) SetNillableEntID(u *uuid.UUID) *PaymentFiatUpdate {
	if u != nil {
		pfu.SetEntID(*u)
	}
	return pfu
}

// SetCreatedAt sets the "created_at" field.
func (pfu *PaymentFiatUpdate) SetCreatedAt(u uint32) *PaymentFiatUpdate {
	pfu.mutation.ResetCreatedAt()
	pfu.mutation.SetCreatedAt(u)
	return pfu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pfu *PaymentFiatUpdate) SetNillableCreatedAt(u *uint32) *PaymentFiatUpdate {
	if u != nil {
		pfu.SetCreatedAt(*u)
	}
	return pfu
}

// AddCreatedAt adds u to the "created_at" field.
func (pfu *PaymentFiatUpdate) AddCreatedAt(u int32) *PaymentFiatUpdate {
	pfu.mutation.AddCreatedAt(u)
	return pfu
}

// SetUpdatedAt sets the "updated_at" field.
func (pfu *PaymentFiatUpdate) SetUpdatedAt(u uint32) *PaymentFiatUpdate {
	pfu.mutation.ResetUpdatedAt()
	pfu.mutation.SetUpdatedAt(u)
	return pfu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (pfu *PaymentFiatUpdate) AddUpdatedAt(u int32) *PaymentFiatUpdate {
	pfu.mutation.AddUpdatedAt(u)
	return pfu
}

// SetDeletedAt sets the "deleted_at" field.
func (pfu *PaymentFiatUpdate) SetDeletedAt(u uint32) *PaymentFiatUpdate {
	pfu.mutation.ResetDeletedAt()
	pfu.mutation.SetDeletedAt(u)
	return pfu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pfu *PaymentFiatUpdate) SetNillableDeletedAt(u *uint32) *PaymentFiatUpdate {
	if u != nil {
		pfu.SetDeletedAt(*u)
	}
	return pfu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (pfu *PaymentFiatUpdate) AddDeletedAt(u int32) *PaymentFiatUpdate {
	pfu.mutation.AddDeletedAt(u)
	return pfu
}

// SetPaymentID sets the "payment_id" field.
func (pfu *PaymentFiatUpdate) SetPaymentID(u uuid.UUID) *PaymentFiatUpdate {
	pfu.mutation.SetPaymentID(u)
	return pfu
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (pfu *PaymentFiatUpdate) SetNillablePaymentID(u *uuid.UUID) *PaymentFiatUpdate {
	if u != nil {
		pfu.SetPaymentID(*u)
	}
	return pfu
}

// ClearPaymentID clears the value of the "payment_id" field.
func (pfu *PaymentFiatUpdate) ClearPaymentID() *PaymentFiatUpdate {
	pfu.mutation.ClearPaymentID()
	return pfu
}

// SetFiatID sets the "fiat_id" field.
func (pfu *PaymentFiatUpdate) SetFiatID(u uuid.UUID) *PaymentFiatUpdate {
	pfu.mutation.SetFiatID(u)
	return pfu
}

// SetNillableFiatID sets the "fiat_id" field if the given value is not nil.
func (pfu *PaymentFiatUpdate) SetNillableFiatID(u *uuid.UUID) *PaymentFiatUpdate {
	if u != nil {
		pfu.SetFiatID(*u)
	}
	return pfu
}

// ClearFiatID clears the value of the "fiat_id" field.
func (pfu *PaymentFiatUpdate) ClearFiatID() *PaymentFiatUpdate {
	pfu.mutation.ClearFiatID()
	return pfu
}

// SetPaymentChannel sets the "payment_channel" field.
func (pfu *PaymentFiatUpdate) SetPaymentChannel(s string) *PaymentFiatUpdate {
	pfu.mutation.SetPaymentChannel(s)
	return pfu
}

// SetNillablePaymentChannel sets the "payment_channel" field if the given value is not nil.
func (pfu *PaymentFiatUpdate) SetNillablePaymentChannel(s *string) *PaymentFiatUpdate {
	if s != nil {
		pfu.SetPaymentChannel(*s)
	}
	return pfu
}

// ClearPaymentChannel clears the value of the "payment_channel" field.
func (pfu *PaymentFiatUpdate) ClearPaymentChannel() *PaymentFiatUpdate {
	pfu.mutation.ClearPaymentChannel()
	return pfu
}

// SetAmount sets the "amount" field.
func (pfu *PaymentFiatUpdate) SetAmount(d decimal.Decimal) *PaymentFiatUpdate {
	pfu.mutation.SetAmount(d)
	return pfu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pfu *PaymentFiatUpdate) SetNillableAmount(d *decimal.Decimal) *PaymentFiatUpdate {
	if d != nil {
		pfu.SetAmount(*d)
	}
	return pfu
}

// ClearAmount clears the value of the "amount" field.
func (pfu *PaymentFiatUpdate) ClearAmount() *PaymentFiatUpdate {
	pfu.mutation.ClearAmount()
	return pfu
}

// SetChannelPaymentID sets the "channel_payment_id" field.
func (pfu *PaymentFiatUpdate) SetChannelPaymentID(s string) *PaymentFiatUpdate {
	pfu.mutation.SetChannelPaymentID(s)
	return pfu
}

// SetNillableChannelPaymentID sets the "channel_payment_id" field if the given value is not nil.
func (pfu *PaymentFiatUpdate) SetNillableChannelPaymentID(s *string) *PaymentFiatUpdate {
	if s != nil {
		pfu.SetChannelPaymentID(*s)
	}
	return pfu
}

// ClearChannelPaymentID clears the value of the "channel_payment_id" field.
func (pfu *PaymentFiatUpdate) ClearChannelPaymentID() *PaymentFiatUpdate {
	pfu.mutation.ClearChannelPaymentID()
	return pfu
}

// SetUsdCurrency sets the "usd_currency" field.
func (pfu *PaymentFiatUpdate) SetUsdCurrency(d decimal.Decimal) *PaymentFiatUpdate {
	pfu.mutation.SetUsdCurrency(d)
	return pfu
}

// SetNillableUsdCurrency sets the "usd_currency" field if the given value is not nil.
func (pfu *PaymentFiatUpdate) SetNillableUsdCurrency(d *decimal.Decimal) *PaymentFiatUpdate {
	if d != nil {
		pfu.SetUsdCurrency(*d)
	}
	return pfu
}

// ClearUsdCurrency clears the value of the "usd_currency" field.
func (pfu *PaymentFiatUpdate) ClearUsdCurrency() *PaymentFiatUpdate {
	pfu.mutation.ClearUsdCurrency()
	return pfu
}

// Mutation returns the PaymentFiatMutation object of the builder.
func (pfu *PaymentFiatUpdate) Mutation() *PaymentFiatMutation {
	return pfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pfu *PaymentFiatUpdate) Save(ctx context.Context) (int, error) {
	pfu.defaults()
	return withHooks(ctx, pfu.sqlSave, pfu.mutation, pfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pfu *PaymentFiatUpdate) SaveX(ctx context.Context) int {
	affected, err := pfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pfu *PaymentFiatUpdate) Exec(ctx context.Context) error {
	_, err := pfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfu *PaymentFiatUpdate) ExecX(ctx context.Context) {
	if err := pfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfu *PaymentFiatUpdate) defaults() {
	if _, ok := pfu.mutation.UpdatedAt(); !ok {
		v := paymentfiat.UpdateDefaultUpdatedAt()
		pfu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pfu *PaymentFiatUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PaymentFiatUpdate {
	pfu.modifiers = append(pfu.modifiers, modifiers...)
	return pfu
}

func (pfu *PaymentFiatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(paymentfiat.Table, paymentfiat.Columns, sqlgraph.NewFieldSpec(paymentfiat.FieldID, field.TypeUint32))
	if ps := pfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pfu.mutation.EntID(); ok {
		_spec.SetField(paymentfiat.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := pfu.mutation.CreatedAt(); ok {
		_spec.SetField(paymentfiat.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := pfu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(paymentfiat.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := pfu.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentfiat.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := pfu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(paymentfiat.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := pfu.mutation.DeletedAt(); ok {
		_spec.SetField(paymentfiat.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := pfu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(paymentfiat.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := pfu.mutation.PaymentID(); ok {
		_spec.SetField(paymentfiat.FieldPaymentID, field.TypeUUID, value)
	}
	if pfu.mutation.PaymentIDCleared() {
		_spec.ClearField(paymentfiat.FieldPaymentID, field.TypeUUID)
	}
	if value, ok := pfu.mutation.FiatID(); ok {
		_spec.SetField(paymentfiat.FieldFiatID, field.TypeUUID, value)
	}
	if pfu.mutation.FiatIDCleared() {
		_spec.ClearField(paymentfiat.FieldFiatID, field.TypeUUID)
	}
	if value, ok := pfu.mutation.PaymentChannel(); ok {
		_spec.SetField(paymentfiat.FieldPaymentChannel, field.TypeString, value)
	}
	if pfu.mutation.PaymentChannelCleared() {
		_spec.ClearField(paymentfiat.FieldPaymentChannel, field.TypeString)
	}
	if value, ok := pfu.mutation.Amount(); ok {
		_spec.SetField(paymentfiat.FieldAmount, field.TypeOther, value)
	}
	if pfu.mutation.AmountCleared() {
		_spec.ClearField(paymentfiat.FieldAmount, field.TypeOther)
	}
	if value, ok := pfu.mutation.ChannelPaymentID(); ok {
		_spec.SetField(paymentfiat.FieldChannelPaymentID, field.TypeString, value)
	}
	if pfu.mutation.ChannelPaymentIDCleared() {
		_spec.ClearField(paymentfiat.FieldChannelPaymentID, field.TypeString)
	}
	if value, ok := pfu.mutation.UsdCurrency(); ok {
		_spec.SetField(paymentfiat.FieldUsdCurrency, field.TypeOther, value)
	}
	if pfu.mutation.UsdCurrencyCleared() {
		_spec.ClearField(paymentfiat.FieldUsdCurrency, field.TypeOther)
	}
	_spec.AddModifiers(pfu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentfiat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pfu.mutation.done = true
	return n, nil
}

// PaymentFiatUpdateOne is the builder for updating a single PaymentFiat entity.
type PaymentFiatUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PaymentFiatMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (pfuo *PaymentFiatUpdateOne) SetEntID(u uuid.UUID) *PaymentFiatUpdateOne {
	pfuo.mutation.SetEntID(u)
	return pfuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (pfuo *PaymentFiatUpdateOne) SetNillableEntID(u *uuid.UUID) *PaymentFiatUpdateOne {
	if u != nil {
		pfuo.SetEntID(*u)
	}
	return pfuo
}

// SetCreatedAt sets the "created_at" field.
func (pfuo *PaymentFiatUpdateOne) SetCreatedAt(u uint32) *PaymentFiatUpdateOne {
	pfuo.mutation.ResetCreatedAt()
	pfuo.mutation.SetCreatedAt(u)
	return pfuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pfuo *PaymentFiatUpdateOne) SetNillableCreatedAt(u *uint32) *PaymentFiatUpdateOne {
	if u != nil {
		pfuo.SetCreatedAt(*u)
	}
	return pfuo
}

// AddCreatedAt adds u to the "created_at" field.
func (pfuo *PaymentFiatUpdateOne) AddCreatedAt(u int32) *PaymentFiatUpdateOne {
	pfuo.mutation.AddCreatedAt(u)
	return pfuo
}

// SetUpdatedAt sets the "updated_at" field.
func (pfuo *PaymentFiatUpdateOne) SetUpdatedAt(u uint32) *PaymentFiatUpdateOne {
	pfuo.mutation.ResetUpdatedAt()
	pfuo.mutation.SetUpdatedAt(u)
	return pfuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (pfuo *PaymentFiatUpdateOne) AddUpdatedAt(u int32) *PaymentFiatUpdateOne {
	pfuo.mutation.AddUpdatedAt(u)
	return pfuo
}

// SetDeletedAt sets the "deleted_at" field.
func (pfuo *PaymentFiatUpdateOne) SetDeletedAt(u uint32) *PaymentFiatUpdateOne {
	pfuo.mutation.ResetDeletedAt()
	pfuo.mutation.SetDeletedAt(u)
	return pfuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pfuo *PaymentFiatUpdateOne) SetNillableDeletedAt(u *uint32) *PaymentFiatUpdateOne {
	if u != nil {
		pfuo.SetDeletedAt(*u)
	}
	return pfuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (pfuo *PaymentFiatUpdateOne) AddDeletedAt(u int32) *PaymentFiatUpdateOne {
	pfuo.mutation.AddDeletedAt(u)
	return pfuo
}

// SetPaymentID sets the "payment_id" field.
func (pfuo *PaymentFiatUpdateOne) SetPaymentID(u uuid.UUID) *PaymentFiatUpdateOne {
	pfuo.mutation.SetPaymentID(u)
	return pfuo
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (pfuo *PaymentFiatUpdateOne) SetNillablePaymentID(u *uuid.UUID) *PaymentFiatUpdateOne {
	if u != nil {
		pfuo.SetPaymentID(*u)
	}
	return pfuo
}

// ClearPaymentID clears the value of the "payment_id" field.
func (pfuo *PaymentFiatUpdateOne) ClearPaymentID() *PaymentFiatUpdateOne {
	pfuo.mutation.ClearPaymentID()
	return pfuo
}

// SetFiatID sets the "fiat_id" field.
func (pfuo *PaymentFiatUpdateOne) SetFiatID(u uuid.UUID) *PaymentFiatUpdateOne {
	pfuo.mutation.SetFiatID(u)
	return pfuo
}

// SetNillableFiatID sets the "fiat_id" field if the given value is not nil.
func (pfuo *PaymentFiatUpdateOne) SetNillableFiatID(u *uuid.UUID) *PaymentFiatUpdateOne {
	if u != nil {
		pfuo.SetFiatID(*u)
	}
	return pfuo
}

// ClearFiatID clears the value of the "fiat_id" field.
func (pfuo *PaymentFiatUpdateOne) ClearFiatID() *PaymentFiatUpdateOne {
	pfuo.mutation.ClearFiatID()
	return pfuo
}

// SetPaymentChannel sets the "payment_channel" field.
func (pfuo *PaymentFiatUpdateOne) SetPaymentChannel(s string) *PaymentFiatUpdateOne {
	pfuo.mutation.SetPaymentChannel(s)
	return pfuo
}

// SetNillablePaymentChannel sets the "payment_channel" field if the given value is not nil.
func (pfuo *PaymentFiatUpdateOne) SetNillablePaymentChannel(s *string) *PaymentFiatUpdateOne {
	if s != nil {
		pfuo.SetPaymentChannel(*s)
	}
	return pfuo
}

// ClearPaymentChannel clears the value of the "payment_channel" field.
func (pfuo *PaymentFiatUpdateOne) ClearPaymentChannel() *PaymentFiatUpdateOne {
	pfuo.mutation.ClearPaymentChannel()
	return pfuo
}

// SetAmount sets the "amount" field.
func (pfuo *PaymentFiatUpdateOne) SetAmount(d decimal.Decimal) *PaymentFiatUpdateOne {
	pfuo.mutation.SetAmount(d)
	return pfuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pfuo *PaymentFiatUpdateOne) SetNillableAmount(d *decimal.Decimal) *PaymentFiatUpdateOne {
	if d != nil {
		pfuo.SetAmount(*d)
	}
	return pfuo
}

// ClearAmount clears the value of the "amount" field.
func (pfuo *PaymentFiatUpdateOne) ClearAmount() *PaymentFiatUpdateOne {
	pfuo.mutation.ClearAmount()
	return pfuo
}

// SetChannelPaymentID sets the "channel_payment_id" field.
func (pfuo *PaymentFiatUpdateOne) SetChannelPaymentID(s string) *PaymentFiatUpdateOne {
	pfuo.mutation.SetChannelPaymentID(s)
	return pfuo
}

// SetNillableChannelPaymentID sets the "channel_payment_id" field if the given value is not nil.
func (pfuo *PaymentFiatUpdateOne) SetNillableChannelPaymentID(s *string) *PaymentFiatUpdateOne {
	if s != nil {
		pfuo.SetChannelPaymentID(*s)
	}
	return pfuo
}

// ClearChannelPaymentID clears the value of the "channel_payment_id" field.
func (pfuo *PaymentFiatUpdateOne) ClearChannelPaymentID() *PaymentFiatUpdateOne {
	pfuo.mutation.ClearChannelPaymentID()
	return pfuo
}

// SetUsdCurrency sets the "usd_currency" field.
func (pfuo *PaymentFiatUpdateOne) SetUsdCurrency(d decimal.Decimal) *PaymentFiatUpdateOne {
	pfuo.mutation.SetUsdCurrency(d)
	return pfuo
}

// SetNillableUsdCurrency sets the "usd_currency" field if the given value is not nil.
func (pfuo *PaymentFiatUpdateOne) SetNillableUsdCurrency(d *decimal.Decimal) *PaymentFiatUpdateOne {
	if d != nil {
		pfuo.SetUsdCurrency(*d)
	}
	return pfuo
}

// ClearUsdCurrency clears the value of the "usd_currency" field.
func (pfuo *PaymentFiatUpdateOne) ClearUsdCurrency() *PaymentFiatUpdateOne {
	pfuo.mutation.ClearUsdCurrency()
	return pfuo
}

// Mutation returns the PaymentFiatMutation object of the builder.
func (pfuo *PaymentFiatUpdateOne) Mutation() *PaymentFiatMutation {
	return pfuo.mutation
}

// Where appends a list predicates to the PaymentFiatUpdate builder.
func (pfuo *PaymentFiatUpdateOne) Where(ps ...predicate.PaymentFiat) *PaymentFiatUpdateOne {
	pfuo.mutation.Where(ps...)
	return pfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pfuo *PaymentFiatUpdateOne) Select(field string, fields ...string) *PaymentFiatUpdateOne {
	pfuo.fields = append([]string{field}, fields...)
	return pfuo
}

// Save executes the query and returns the updated PaymentFiat entity.
func (pfuo *PaymentFiatUpdateOne) Save(ctx context.Context) (*PaymentFiat, error) {
	pfuo.defaults()
	return withHooks(ctx, pfuo.sqlSave, pfuo.mutation, pfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pfuo *PaymentFiatUpdateOne) SaveX(ctx context.Context) *PaymentFiat {
	node, err := pfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pfuo *PaymentFiatUpdateOne) Exec(ctx context.Context) error {
	_, err := pfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfuo *PaymentFiatUpdateOne) ExecX(ctx context.Context) {
	if err := pfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfuo *PaymentFiatUpdateOne) defaults() {
	if _, ok := pfuo.mutation.UpdatedAt(); !ok {
		v := paymentfiat.UpdateDefaultUpdatedAt()
		pfuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pfuo *PaymentFiatUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PaymentFiatUpdateOne {
	pfuo.modifiers = append(pfuo.modifiers, modifiers...)
	return pfuo
}

func (pfuo *PaymentFiatUpdateOne) sqlSave(ctx context.Context) (_node *PaymentFiat, err error) {
	_spec := sqlgraph.NewUpdateSpec(paymentfiat.Table, paymentfiat.Columns, sqlgraph.NewFieldSpec(paymentfiat.FieldID, field.TypeUint32))
	id, ok := pfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "PaymentFiat.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentfiat.FieldID)
		for _, f := range fields {
			if !paymentfiat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != paymentfiat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pfuo.mutation.EntID(); ok {
		_spec.SetField(paymentfiat.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := pfuo.mutation.CreatedAt(); ok {
		_spec.SetField(paymentfiat.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := pfuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(paymentfiat.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := pfuo.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentfiat.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := pfuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(paymentfiat.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := pfuo.mutation.DeletedAt(); ok {
		_spec.SetField(paymentfiat.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := pfuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(paymentfiat.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := pfuo.mutation.PaymentID(); ok {
		_spec.SetField(paymentfiat.FieldPaymentID, field.TypeUUID, value)
	}
	if pfuo.mutation.PaymentIDCleared() {
		_spec.ClearField(paymentfiat.FieldPaymentID, field.TypeUUID)
	}
	if value, ok := pfuo.mutation.FiatID(); ok {
		_spec.SetField(paymentfiat.FieldFiatID, field.TypeUUID, value)
	}
	if pfuo.mutation.FiatIDCleared() {
		_spec.ClearField(paymentfiat.FieldFiatID, field.TypeUUID)
	}
	if value, ok := pfuo.mutation.PaymentChannel(); ok {
		_spec.SetField(paymentfiat.FieldPaymentChannel, field.TypeString, value)
	}
	if pfuo.mutation.PaymentChannelCleared() {
		_spec.ClearField(paymentfiat.FieldPaymentChannel, field.TypeString)
	}
	if value, ok := pfuo.mutation.Amount(); ok {
		_spec.SetField(paymentfiat.FieldAmount, field.TypeOther, value)
	}
	if pfuo.mutation.AmountCleared() {
		_spec.ClearField(paymentfiat.FieldAmount, field.TypeOther)
	}
	if value, ok := pfuo.mutation.ChannelPaymentID(); ok {
		_spec.SetField(paymentfiat.FieldChannelPaymentID, field.TypeString, value)
	}
	if pfuo.mutation.ChannelPaymentIDCleared() {
		_spec.ClearField(paymentfiat.FieldChannelPaymentID, field.TypeString)
	}
	if value, ok := pfuo.mutation.UsdCurrency(); ok {
		_spec.SetField(paymentfiat.FieldUsdCurrency, field.TypeOther, value)
	}
	if pfuo.mutation.UsdCurrencyCleared() {
		_spec.ClearField(paymentfiat.FieldUsdCurrency, field.TypeOther)
	}
	_spec.AddModifiers(pfuo.modifiers...)
	_node = &PaymentFiat{config: pfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentfiat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pfuo.mutation.done = true
	return _node, nil
}

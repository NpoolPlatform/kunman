// Code generated by ent, DO NOT EDIT.

package subscriptionorderstate

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the subscriptionorderstate type in the database.
	Label = "subscription_order_state"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldPaymentID holds the string denoting the payment_id field in the database.
	FieldPaymentID = "payment_id"
	// FieldPaidAt holds the string denoting the paid_at field in the database.
	FieldPaidAt = "paid_at"
	// FieldUserSetPaid holds the string denoting the user_set_paid field in the database.
	FieldUserSetPaid = "user_set_paid"
	// FieldUserSetCanceled holds the string denoting the user_set_canceled field in the database.
	FieldUserSetCanceled = "user_set_canceled"
	// FieldAdminSetCanceled holds the string denoting the admin_set_canceled field in the database.
	FieldAdminSetCanceled = "admin_set_canceled"
	// FieldPaymentState holds the string denoting the payment_state field in the database.
	FieldPaymentState = "payment_state"
	// FieldCancelState holds the string denoting the cancel_state field in the database.
	FieldCancelState = "cancel_state"
	// FieldCanceledAt holds the string denoting the canceled_at field in the database.
	FieldCanceledAt = "canceled_at"
	// FieldDealEventID holds the string denoting the deal_event_id field in the database.
	FieldDealEventID = "deal_event_id"
	// Table holds the table name of the subscriptionorderstate in the database.
	Table = "subscription_order_states"
)

// Columns holds all SQL columns for subscriptionorderstate fields.
var Columns = []string{
	FieldID,
	FieldEntID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldOrderID,
	FieldPaymentID,
	FieldPaidAt,
	FieldUserSetPaid,
	FieldUserSetCanceled,
	FieldAdminSetCanceled,
	FieldPaymentState,
	FieldCancelState,
	FieldCanceledAt,
	FieldDealEventID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() uint32
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() uint32
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() uint32
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt func() uint32
	// DefaultOrderID holds the default value on creation for the "order_id" field.
	DefaultOrderID func() uuid.UUID
	// DefaultPaymentID holds the default value on creation for the "payment_id" field.
	DefaultPaymentID func() uuid.UUID
	// DefaultPaidAt holds the default value on creation for the "paid_at" field.
	DefaultPaidAt uint32
	// DefaultUserSetPaid holds the default value on creation for the "user_set_paid" field.
	DefaultUserSetPaid bool
	// DefaultUserSetCanceled holds the default value on creation for the "user_set_canceled" field.
	DefaultUserSetCanceled bool
	// DefaultAdminSetCanceled holds the default value on creation for the "admin_set_canceled" field.
	DefaultAdminSetCanceled bool
	// DefaultPaymentState holds the default value on creation for the "payment_state" field.
	DefaultPaymentState string
	// DefaultCancelState holds the default value on creation for the "cancel_state" field.
	DefaultCancelState string
	// DefaultCanceledAt holds the default value on creation for the "canceled_at" field.
	DefaultCanceledAt uint32
	// DefaultDealEventID holds the default value on creation for the "deal_event_id" field.
	DefaultDealEventID string
)

// OrderOption defines the ordering options for the SubscriptionOrderState queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByOrderID orders the results by the order_id field.
func ByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderID, opts...).ToFunc()
}

// ByPaymentID orders the results by the payment_id field.
func ByPaymentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentID, opts...).ToFunc()
}

// ByPaidAt orders the results by the paid_at field.
func ByPaidAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaidAt, opts...).ToFunc()
}

// ByUserSetPaid orders the results by the user_set_paid field.
func ByUserSetPaid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserSetPaid, opts...).ToFunc()
}

// ByUserSetCanceled orders the results by the user_set_canceled field.
func ByUserSetCanceled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserSetCanceled, opts...).ToFunc()
}

// ByAdminSetCanceled orders the results by the admin_set_canceled field.
func ByAdminSetCanceled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAdminSetCanceled, opts...).ToFunc()
}

// ByPaymentState orders the results by the payment_state field.
func ByPaymentState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentState, opts...).ToFunc()
}

// ByCancelState orders the results by the cancel_state field.
func ByCancelState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCancelState, opts...).ToFunc()
}

// ByCanceledAt orders the results by the canceled_at field.
func ByCanceledAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanceledAt, opts...).ToFunc()
}

// ByDealEventID orders the results by the deal_event_id field.
func ByDealEventID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDealEventID, opts...).ToFunc()
}

// Code generated by ent, DO NOT EDIT.

package poolorderuser

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldEQ(FieldEntID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldEQ(FieldDeletedAt, v))
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldEQ(FieldOrderID, v))
}

// PoolOrderUserID applies equality check predicate on the "pool_order_user_id" field. It's identical to PoolOrderUserIDEQ.
func PoolOrderUserID(v uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldEQ(FieldPoolOrderUserID, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldLTE(FieldEntID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldLTE(FieldDeletedAt, v))
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldEQ(FieldOrderID, v))
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldNEQ(FieldOrderID, v))
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldIn(FieldOrderID, vs...))
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldNotIn(FieldOrderID, vs...))
}

// OrderIDGT applies the GT predicate on the "order_id" field.
func OrderIDGT(v uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldGT(FieldOrderID, v))
}

// OrderIDGTE applies the GTE predicate on the "order_id" field.
func OrderIDGTE(v uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldGTE(FieldOrderID, v))
}

// OrderIDLT applies the LT predicate on the "order_id" field.
func OrderIDLT(v uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldLT(FieldOrderID, v))
}

// OrderIDLTE applies the LTE predicate on the "order_id" field.
func OrderIDLTE(v uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldLTE(FieldOrderID, v))
}

// PoolOrderUserIDEQ applies the EQ predicate on the "pool_order_user_id" field.
func PoolOrderUserIDEQ(v uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldEQ(FieldPoolOrderUserID, v))
}

// PoolOrderUserIDNEQ applies the NEQ predicate on the "pool_order_user_id" field.
func PoolOrderUserIDNEQ(v uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldNEQ(FieldPoolOrderUserID, v))
}

// PoolOrderUserIDIn applies the In predicate on the "pool_order_user_id" field.
func PoolOrderUserIDIn(vs ...uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldIn(FieldPoolOrderUserID, vs...))
}

// PoolOrderUserIDNotIn applies the NotIn predicate on the "pool_order_user_id" field.
func PoolOrderUserIDNotIn(vs ...uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldNotIn(FieldPoolOrderUserID, vs...))
}

// PoolOrderUserIDGT applies the GT predicate on the "pool_order_user_id" field.
func PoolOrderUserIDGT(v uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldGT(FieldPoolOrderUserID, v))
}

// PoolOrderUserIDGTE applies the GTE predicate on the "pool_order_user_id" field.
func PoolOrderUserIDGTE(v uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldGTE(FieldPoolOrderUserID, v))
}

// PoolOrderUserIDLT applies the LT predicate on the "pool_order_user_id" field.
func PoolOrderUserIDLT(v uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldLT(FieldPoolOrderUserID, v))
}

// PoolOrderUserIDLTE applies the LTE predicate on the "pool_order_user_id" field.
func PoolOrderUserIDLTE(v uuid.UUID) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.FieldLTE(FieldPoolOrderUserID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PoolOrderUser) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PoolOrderUser) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PoolOrderUser) predicate.PoolOrderUser {
	return predicate.PoolOrderUser(sql.NotPredicates(p))
}

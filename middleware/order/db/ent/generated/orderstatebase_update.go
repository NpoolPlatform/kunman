// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/orderstatebase"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// OrderStateBaseUpdate is the builder for updating OrderStateBase entities.
type OrderStateBaseUpdate struct {
	config
	hooks     []Hook
	mutation  *OrderStateBaseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrderStateBaseUpdate builder.
func (osbu *OrderStateBaseUpdate) Where(ps ...predicate.OrderStateBase) *OrderStateBaseUpdate {
	osbu.mutation.Where(ps...)
	return osbu
}

// SetEntID sets the "ent_id" field.
func (osbu *OrderStateBaseUpdate) SetEntID(u uuid.UUID) *OrderStateBaseUpdate {
	osbu.mutation.SetEntID(u)
	return osbu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (osbu *OrderStateBaseUpdate) SetNillableEntID(u *uuid.UUID) *OrderStateBaseUpdate {
	if u != nil {
		osbu.SetEntID(*u)
	}
	return osbu
}

// SetCreatedAt sets the "created_at" field.
func (osbu *OrderStateBaseUpdate) SetCreatedAt(u uint32) *OrderStateBaseUpdate {
	osbu.mutation.ResetCreatedAt()
	osbu.mutation.SetCreatedAt(u)
	return osbu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (osbu *OrderStateBaseUpdate) SetNillableCreatedAt(u *uint32) *OrderStateBaseUpdate {
	if u != nil {
		osbu.SetCreatedAt(*u)
	}
	return osbu
}

// AddCreatedAt adds u to the "created_at" field.
func (osbu *OrderStateBaseUpdate) AddCreatedAt(u int32) *OrderStateBaseUpdate {
	osbu.mutation.AddCreatedAt(u)
	return osbu
}

// SetUpdatedAt sets the "updated_at" field.
func (osbu *OrderStateBaseUpdate) SetUpdatedAt(u uint32) *OrderStateBaseUpdate {
	osbu.mutation.ResetUpdatedAt()
	osbu.mutation.SetUpdatedAt(u)
	return osbu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (osbu *OrderStateBaseUpdate) AddUpdatedAt(u int32) *OrderStateBaseUpdate {
	osbu.mutation.AddUpdatedAt(u)
	return osbu
}

// SetDeletedAt sets the "deleted_at" field.
func (osbu *OrderStateBaseUpdate) SetDeletedAt(u uint32) *OrderStateBaseUpdate {
	osbu.mutation.ResetDeletedAt()
	osbu.mutation.SetDeletedAt(u)
	return osbu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (osbu *OrderStateBaseUpdate) SetNillableDeletedAt(u *uint32) *OrderStateBaseUpdate {
	if u != nil {
		osbu.SetDeletedAt(*u)
	}
	return osbu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (osbu *OrderStateBaseUpdate) AddDeletedAt(u int32) *OrderStateBaseUpdate {
	osbu.mutation.AddDeletedAt(u)
	return osbu
}

// SetOrderID sets the "order_id" field.
func (osbu *OrderStateBaseUpdate) SetOrderID(u uuid.UUID) *OrderStateBaseUpdate {
	osbu.mutation.SetOrderID(u)
	return osbu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (osbu *OrderStateBaseUpdate) SetNillableOrderID(u *uuid.UUID) *OrderStateBaseUpdate {
	if u != nil {
		osbu.SetOrderID(*u)
	}
	return osbu
}

// ClearOrderID clears the value of the "order_id" field.
func (osbu *OrderStateBaseUpdate) ClearOrderID() *OrderStateBaseUpdate {
	osbu.mutation.ClearOrderID()
	return osbu
}

// SetOrderState sets the "order_state" field.
func (osbu *OrderStateBaseUpdate) SetOrderState(s string) *OrderStateBaseUpdate {
	osbu.mutation.SetOrderState(s)
	return osbu
}

// SetNillableOrderState sets the "order_state" field if the given value is not nil.
func (osbu *OrderStateBaseUpdate) SetNillableOrderState(s *string) *OrderStateBaseUpdate {
	if s != nil {
		osbu.SetOrderState(*s)
	}
	return osbu
}

// ClearOrderState clears the value of the "order_state" field.
func (osbu *OrderStateBaseUpdate) ClearOrderState() *OrderStateBaseUpdate {
	osbu.mutation.ClearOrderState()
	return osbu
}

// SetStartMode sets the "start_mode" field.
func (osbu *OrderStateBaseUpdate) SetStartMode(s string) *OrderStateBaseUpdate {
	osbu.mutation.SetStartMode(s)
	return osbu
}

// SetNillableStartMode sets the "start_mode" field if the given value is not nil.
func (osbu *OrderStateBaseUpdate) SetNillableStartMode(s *string) *OrderStateBaseUpdate {
	if s != nil {
		osbu.SetStartMode(*s)
	}
	return osbu
}

// ClearStartMode clears the value of the "start_mode" field.
func (osbu *OrderStateBaseUpdate) ClearStartMode() *OrderStateBaseUpdate {
	osbu.mutation.ClearStartMode()
	return osbu
}

// SetStartAt sets the "start_at" field.
func (osbu *OrderStateBaseUpdate) SetStartAt(u uint32) *OrderStateBaseUpdate {
	osbu.mutation.ResetStartAt()
	osbu.mutation.SetStartAt(u)
	return osbu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (osbu *OrderStateBaseUpdate) SetNillableStartAt(u *uint32) *OrderStateBaseUpdate {
	if u != nil {
		osbu.SetStartAt(*u)
	}
	return osbu
}

// AddStartAt adds u to the "start_at" field.
func (osbu *OrderStateBaseUpdate) AddStartAt(u int32) *OrderStateBaseUpdate {
	osbu.mutation.AddStartAt(u)
	return osbu
}

// ClearStartAt clears the value of the "start_at" field.
func (osbu *OrderStateBaseUpdate) ClearStartAt() *OrderStateBaseUpdate {
	osbu.mutation.ClearStartAt()
	return osbu
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (osbu *OrderStateBaseUpdate) SetLastBenefitAt(u uint32) *OrderStateBaseUpdate {
	osbu.mutation.ResetLastBenefitAt()
	osbu.mutation.SetLastBenefitAt(u)
	return osbu
}

// SetNillableLastBenefitAt sets the "last_benefit_at" field if the given value is not nil.
func (osbu *OrderStateBaseUpdate) SetNillableLastBenefitAt(u *uint32) *OrderStateBaseUpdate {
	if u != nil {
		osbu.SetLastBenefitAt(*u)
	}
	return osbu
}

// AddLastBenefitAt adds u to the "last_benefit_at" field.
func (osbu *OrderStateBaseUpdate) AddLastBenefitAt(u int32) *OrderStateBaseUpdate {
	osbu.mutation.AddLastBenefitAt(u)
	return osbu
}

// ClearLastBenefitAt clears the value of the "last_benefit_at" field.
func (osbu *OrderStateBaseUpdate) ClearLastBenefitAt() *OrderStateBaseUpdate {
	osbu.mutation.ClearLastBenefitAt()
	return osbu
}

// SetBenefitState sets the "benefit_state" field.
func (osbu *OrderStateBaseUpdate) SetBenefitState(s string) *OrderStateBaseUpdate {
	osbu.mutation.SetBenefitState(s)
	return osbu
}

// SetNillableBenefitState sets the "benefit_state" field if the given value is not nil.
func (osbu *OrderStateBaseUpdate) SetNillableBenefitState(s *string) *OrderStateBaseUpdate {
	if s != nil {
		osbu.SetBenefitState(*s)
	}
	return osbu
}

// ClearBenefitState clears the value of the "benefit_state" field.
func (osbu *OrderStateBaseUpdate) ClearBenefitState() *OrderStateBaseUpdate {
	osbu.mutation.ClearBenefitState()
	return osbu
}

// SetPaymentType sets the "payment_type" field.
func (osbu *OrderStateBaseUpdate) SetPaymentType(s string) *OrderStateBaseUpdate {
	osbu.mutation.SetPaymentType(s)
	return osbu
}

// SetNillablePaymentType sets the "payment_type" field if the given value is not nil.
func (osbu *OrderStateBaseUpdate) SetNillablePaymentType(s *string) *OrderStateBaseUpdate {
	if s != nil {
		osbu.SetPaymentType(*s)
	}
	return osbu
}

// ClearPaymentType clears the value of the "payment_type" field.
func (osbu *OrderStateBaseUpdate) ClearPaymentType() *OrderStateBaseUpdate {
	osbu.mutation.ClearPaymentType()
	return osbu
}

// Mutation returns the OrderStateBaseMutation object of the builder.
func (osbu *OrderStateBaseUpdate) Mutation() *OrderStateBaseMutation {
	return osbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (osbu *OrderStateBaseUpdate) Save(ctx context.Context) (int, error) {
	osbu.defaults()
	return withHooks(ctx, osbu.sqlSave, osbu.mutation, osbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osbu *OrderStateBaseUpdate) SaveX(ctx context.Context) int {
	affected, err := osbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (osbu *OrderStateBaseUpdate) Exec(ctx context.Context) error {
	_, err := osbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osbu *OrderStateBaseUpdate) ExecX(ctx context.Context) {
	if err := osbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osbu *OrderStateBaseUpdate) defaults() {
	if _, ok := osbu.mutation.UpdatedAt(); !ok {
		v := orderstatebase.UpdateDefaultUpdatedAt()
		osbu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (osbu *OrderStateBaseUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderStateBaseUpdate {
	osbu.modifiers = append(osbu.modifiers, modifiers...)
	return osbu
}

func (osbu *OrderStateBaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderstatebase.Table, orderstatebase.Columns, sqlgraph.NewFieldSpec(orderstatebase.FieldID, field.TypeUint32))
	if ps := osbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osbu.mutation.EntID(); ok {
		_spec.SetField(orderstatebase.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := osbu.mutation.CreatedAt(); ok {
		_spec.SetField(orderstatebase.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := osbu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(orderstatebase.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := osbu.mutation.UpdatedAt(); ok {
		_spec.SetField(orderstatebase.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := osbu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(orderstatebase.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := osbu.mutation.DeletedAt(); ok {
		_spec.SetField(orderstatebase.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := osbu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(orderstatebase.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := osbu.mutation.OrderID(); ok {
		_spec.SetField(orderstatebase.FieldOrderID, field.TypeUUID, value)
	}
	if osbu.mutation.OrderIDCleared() {
		_spec.ClearField(orderstatebase.FieldOrderID, field.TypeUUID)
	}
	if value, ok := osbu.mutation.OrderState(); ok {
		_spec.SetField(orderstatebase.FieldOrderState, field.TypeString, value)
	}
	if osbu.mutation.OrderStateCleared() {
		_spec.ClearField(orderstatebase.FieldOrderState, field.TypeString)
	}
	if value, ok := osbu.mutation.StartMode(); ok {
		_spec.SetField(orderstatebase.FieldStartMode, field.TypeString, value)
	}
	if osbu.mutation.StartModeCleared() {
		_spec.ClearField(orderstatebase.FieldStartMode, field.TypeString)
	}
	if value, ok := osbu.mutation.StartAt(); ok {
		_spec.SetField(orderstatebase.FieldStartAt, field.TypeUint32, value)
	}
	if value, ok := osbu.mutation.AddedStartAt(); ok {
		_spec.AddField(orderstatebase.FieldStartAt, field.TypeUint32, value)
	}
	if osbu.mutation.StartAtCleared() {
		_spec.ClearField(orderstatebase.FieldStartAt, field.TypeUint32)
	}
	if value, ok := osbu.mutation.LastBenefitAt(); ok {
		_spec.SetField(orderstatebase.FieldLastBenefitAt, field.TypeUint32, value)
	}
	if value, ok := osbu.mutation.AddedLastBenefitAt(); ok {
		_spec.AddField(orderstatebase.FieldLastBenefitAt, field.TypeUint32, value)
	}
	if osbu.mutation.LastBenefitAtCleared() {
		_spec.ClearField(orderstatebase.FieldLastBenefitAt, field.TypeUint32)
	}
	if value, ok := osbu.mutation.BenefitState(); ok {
		_spec.SetField(orderstatebase.FieldBenefitState, field.TypeString, value)
	}
	if osbu.mutation.BenefitStateCleared() {
		_spec.ClearField(orderstatebase.FieldBenefitState, field.TypeString)
	}
	if value, ok := osbu.mutation.PaymentType(); ok {
		_spec.SetField(orderstatebase.FieldPaymentType, field.TypeString, value)
	}
	if osbu.mutation.PaymentTypeCleared() {
		_spec.ClearField(orderstatebase.FieldPaymentType, field.TypeString)
	}
	_spec.AddModifiers(osbu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, osbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderstatebase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	osbu.mutation.done = true
	return n, nil
}

// OrderStateBaseUpdateOne is the builder for updating a single OrderStateBase entity.
type OrderStateBaseUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrderStateBaseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (osbuo *OrderStateBaseUpdateOne) SetEntID(u uuid.UUID) *OrderStateBaseUpdateOne {
	osbuo.mutation.SetEntID(u)
	return osbuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (osbuo *OrderStateBaseUpdateOne) SetNillableEntID(u *uuid.UUID) *OrderStateBaseUpdateOne {
	if u != nil {
		osbuo.SetEntID(*u)
	}
	return osbuo
}

// SetCreatedAt sets the "created_at" field.
func (osbuo *OrderStateBaseUpdateOne) SetCreatedAt(u uint32) *OrderStateBaseUpdateOne {
	osbuo.mutation.ResetCreatedAt()
	osbuo.mutation.SetCreatedAt(u)
	return osbuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (osbuo *OrderStateBaseUpdateOne) SetNillableCreatedAt(u *uint32) *OrderStateBaseUpdateOne {
	if u != nil {
		osbuo.SetCreatedAt(*u)
	}
	return osbuo
}

// AddCreatedAt adds u to the "created_at" field.
func (osbuo *OrderStateBaseUpdateOne) AddCreatedAt(u int32) *OrderStateBaseUpdateOne {
	osbuo.mutation.AddCreatedAt(u)
	return osbuo
}

// SetUpdatedAt sets the "updated_at" field.
func (osbuo *OrderStateBaseUpdateOne) SetUpdatedAt(u uint32) *OrderStateBaseUpdateOne {
	osbuo.mutation.ResetUpdatedAt()
	osbuo.mutation.SetUpdatedAt(u)
	return osbuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (osbuo *OrderStateBaseUpdateOne) AddUpdatedAt(u int32) *OrderStateBaseUpdateOne {
	osbuo.mutation.AddUpdatedAt(u)
	return osbuo
}

// SetDeletedAt sets the "deleted_at" field.
func (osbuo *OrderStateBaseUpdateOne) SetDeletedAt(u uint32) *OrderStateBaseUpdateOne {
	osbuo.mutation.ResetDeletedAt()
	osbuo.mutation.SetDeletedAt(u)
	return osbuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (osbuo *OrderStateBaseUpdateOne) SetNillableDeletedAt(u *uint32) *OrderStateBaseUpdateOne {
	if u != nil {
		osbuo.SetDeletedAt(*u)
	}
	return osbuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (osbuo *OrderStateBaseUpdateOne) AddDeletedAt(u int32) *OrderStateBaseUpdateOne {
	osbuo.mutation.AddDeletedAt(u)
	return osbuo
}

// SetOrderID sets the "order_id" field.
func (osbuo *OrderStateBaseUpdateOne) SetOrderID(u uuid.UUID) *OrderStateBaseUpdateOne {
	osbuo.mutation.SetOrderID(u)
	return osbuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (osbuo *OrderStateBaseUpdateOne) SetNillableOrderID(u *uuid.UUID) *OrderStateBaseUpdateOne {
	if u != nil {
		osbuo.SetOrderID(*u)
	}
	return osbuo
}

// ClearOrderID clears the value of the "order_id" field.
func (osbuo *OrderStateBaseUpdateOne) ClearOrderID() *OrderStateBaseUpdateOne {
	osbuo.mutation.ClearOrderID()
	return osbuo
}

// SetOrderState sets the "order_state" field.
func (osbuo *OrderStateBaseUpdateOne) SetOrderState(s string) *OrderStateBaseUpdateOne {
	osbuo.mutation.SetOrderState(s)
	return osbuo
}

// SetNillableOrderState sets the "order_state" field if the given value is not nil.
func (osbuo *OrderStateBaseUpdateOne) SetNillableOrderState(s *string) *OrderStateBaseUpdateOne {
	if s != nil {
		osbuo.SetOrderState(*s)
	}
	return osbuo
}

// ClearOrderState clears the value of the "order_state" field.
func (osbuo *OrderStateBaseUpdateOne) ClearOrderState() *OrderStateBaseUpdateOne {
	osbuo.mutation.ClearOrderState()
	return osbuo
}

// SetStartMode sets the "start_mode" field.
func (osbuo *OrderStateBaseUpdateOne) SetStartMode(s string) *OrderStateBaseUpdateOne {
	osbuo.mutation.SetStartMode(s)
	return osbuo
}

// SetNillableStartMode sets the "start_mode" field if the given value is not nil.
func (osbuo *OrderStateBaseUpdateOne) SetNillableStartMode(s *string) *OrderStateBaseUpdateOne {
	if s != nil {
		osbuo.SetStartMode(*s)
	}
	return osbuo
}

// ClearStartMode clears the value of the "start_mode" field.
func (osbuo *OrderStateBaseUpdateOne) ClearStartMode() *OrderStateBaseUpdateOne {
	osbuo.mutation.ClearStartMode()
	return osbuo
}

// SetStartAt sets the "start_at" field.
func (osbuo *OrderStateBaseUpdateOne) SetStartAt(u uint32) *OrderStateBaseUpdateOne {
	osbuo.mutation.ResetStartAt()
	osbuo.mutation.SetStartAt(u)
	return osbuo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (osbuo *OrderStateBaseUpdateOne) SetNillableStartAt(u *uint32) *OrderStateBaseUpdateOne {
	if u != nil {
		osbuo.SetStartAt(*u)
	}
	return osbuo
}

// AddStartAt adds u to the "start_at" field.
func (osbuo *OrderStateBaseUpdateOne) AddStartAt(u int32) *OrderStateBaseUpdateOne {
	osbuo.mutation.AddStartAt(u)
	return osbuo
}

// ClearStartAt clears the value of the "start_at" field.
func (osbuo *OrderStateBaseUpdateOne) ClearStartAt() *OrderStateBaseUpdateOne {
	osbuo.mutation.ClearStartAt()
	return osbuo
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (osbuo *OrderStateBaseUpdateOne) SetLastBenefitAt(u uint32) *OrderStateBaseUpdateOne {
	osbuo.mutation.ResetLastBenefitAt()
	osbuo.mutation.SetLastBenefitAt(u)
	return osbuo
}

// SetNillableLastBenefitAt sets the "last_benefit_at" field if the given value is not nil.
func (osbuo *OrderStateBaseUpdateOne) SetNillableLastBenefitAt(u *uint32) *OrderStateBaseUpdateOne {
	if u != nil {
		osbuo.SetLastBenefitAt(*u)
	}
	return osbuo
}

// AddLastBenefitAt adds u to the "last_benefit_at" field.
func (osbuo *OrderStateBaseUpdateOne) AddLastBenefitAt(u int32) *OrderStateBaseUpdateOne {
	osbuo.mutation.AddLastBenefitAt(u)
	return osbuo
}

// ClearLastBenefitAt clears the value of the "last_benefit_at" field.
func (osbuo *OrderStateBaseUpdateOne) ClearLastBenefitAt() *OrderStateBaseUpdateOne {
	osbuo.mutation.ClearLastBenefitAt()
	return osbuo
}

// SetBenefitState sets the "benefit_state" field.
func (osbuo *OrderStateBaseUpdateOne) SetBenefitState(s string) *OrderStateBaseUpdateOne {
	osbuo.mutation.SetBenefitState(s)
	return osbuo
}

// SetNillableBenefitState sets the "benefit_state" field if the given value is not nil.
func (osbuo *OrderStateBaseUpdateOne) SetNillableBenefitState(s *string) *OrderStateBaseUpdateOne {
	if s != nil {
		osbuo.SetBenefitState(*s)
	}
	return osbuo
}

// ClearBenefitState clears the value of the "benefit_state" field.
func (osbuo *OrderStateBaseUpdateOne) ClearBenefitState() *OrderStateBaseUpdateOne {
	osbuo.mutation.ClearBenefitState()
	return osbuo
}

// SetPaymentType sets the "payment_type" field.
func (osbuo *OrderStateBaseUpdateOne) SetPaymentType(s string) *OrderStateBaseUpdateOne {
	osbuo.mutation.SetPaymentType(s)
	return osbuo
}

// SetNillablePaymentType sets the "payment_type" field if the given value is not nil.
func (osbuo *OrderStateBaseUpdateOne) SetNillablePaymentType(s *string) *OrderStateBaseUpdateOne {
	if s != nil {
		osbuo.SetPaymentType(*s)
	}
	return osbuo
}

// ClearPaymentType clears the value of the "payment_type" field.
func (osbuo *OrderStateBaseUpdateOne) ClearPaymentType() *OrderStateBaseUpdateOne {
	osbuo.mutation.ClearPaymentType()
	return osbuo
}

// Mutation returns the OrderStateBaseMutation object of the builder.
func (osbuo *OrderStateBaseUpdateOne) Mutation() *OrderStateBaseMutation {
	return osbuo.mutation
}

// Where appends a list predicates to the OrderStateBaseUpdate builder.
func (osbuo *OrderStateBaseUpdateOne) Where(ps ...predicate.OrderStateBase) *OrderStateBaseUpdateOne {
	osbuo.mutation.Where(ps...)
	return osbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (osbuo *OrderStateBaseUpdateOne) Select(field string, fields ...string) *OrderStateBaseUpdateOne {
	osbuo.fields = append([]string{field}, fields...)
	return osbuo
}

// Save executes the query and returns the updated OrderStateBase entity.
func (osbuo *OrderStateBaseUpdateOne) Save(ctx context.Context) (*OrderStateBase, error) {
	osbuo.defaults()
	return withHooks(ctx, osbuo.sqlSave, osbuo.mutation, osbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osbuo *OrderStateBaseUpdateOne) SaveX(ctx context.Context) *OrderStateBase {
	node, err := osbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (osbuo *OrderStateBaseUpdateOne) Exec(ctx context.Context) error {
	_, err := osbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osbuo *OrderStateBaseUpdateOne) ExecX(ctx context.Context) {
	if err := osbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osbuo *OrderStateBaseUpdateOne) defaults() {
	if _, ok := osbuo.mutation.UpdatedAt(); !ok {
		v := orderstatebase.UpdateDefaultUpdatedAt()
		osbuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (osbuo *OrderStateBaseUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderStateBaseUpdateOne {
	osbuo.modifiers = append(osbuo.modifiers, modifiers...)
	return osbuo
}

func (osbuo *OrderStateBaseUpdateOne) sqlSave(ctx context.Context) (_node *OrderStateBase, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderstatebase.Table, orderstatebase.Columns, sqlgraph.NewFieldSpec(orderstatebase.FieldID, field.TypeUint32))
	id, ok := osbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "OrderStateBase.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := osbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderstatebase.FieldID)
		for _, f := range fields {
			if !orderstatebase.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != orderstatebase.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := osbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osbuo.mutation.EntID(); ok {
		_spec.SetField(orderstatebase.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := osbuo.mutation.CreatedAt(); ok {
		_spec.SetField(orderstatebase.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := osbuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(orderstatebase.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := osbuo.mutation.UpdatedAt(); ok {
		_spec.SetField(orderstatebase.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := osbuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(orderstatebase.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := osbuo.mutation.DeletedAt(); ok {
		_spec.SetField(orderstatebase.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := osbuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(orderstatebase.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := osbuo.mutation.OrderID(); ok {
		_spec.SetField(orderstatebase.FieldOrderID, field.TypeUUID, value)
	}
	if osbuo.mutation.OrderIDCleared() {
		_spec.ClearField(orderstatebase.FieldOrderID, field.TypeUUID)
	}
	if value, ok := osbuo.mutation.OrderState(); ok {
		_spec.SetField(orderstatebase.FieldOrderState, field.TypeString, value)
	}
	if osbuo.mutation.OrderStateCleared() {
		_spec.ClearField(orderstatebase.FieldOrderState, field.TypeString)
	}
	if value, ok := osbuo.mutation.StartMode(); ok {
		_spec.SetField(orderstatebase.FieldStartMode, field.TypeString, value)
	}
	if osbuo.mutation.StartModeCleared() {
		_spec.ClearField(orderstatebase.FieldStartMode, field.TypeString)
	}
	if value, ok := osbuo.mutation.StartAt(); ok {
		_spec.SetField(orderstatebase.FieldStartAt, field.TypeUint32, value)
	}
	if value, ok := osbuo.mutation.AddedStartAt(); ok {
		_spec.AddField(orderstatebase.FieldStartAt, field.TypeUint32, value)
	}
	if osbuo.mutation.StartAtCleared() {
		_spec.ClearField(orderstatebase.FieldStartAt, field.TypeUint32)
	}
	if value, ok := osbuo.mutation.LastBenefitAt(); ok {
		_spec.SetField(orderstatebase.FieldLastBenefitAt, field.TypeUint32, value)
	}
	if value, ok := osbuo.mutation.AddedLastBenefitAt(); ok {
		_spec.AddField(orderstatebase.FieldLastBenefitAt, field.TypeUint32, value)
	}
	if osbuo.mutation.LastBenefitAtCleared() {
		_spec.ClearField(orderstatebase.FieldLastBenefitAt, field.TypeUint32)
	}
	if value, ok := osbuo.mutation.BenefitState(); ok {
		_spec.SetField(orderstatebase.FieldBenefitState, field.TypeString, value)
	}
	if osbuo.mutation.BenefitStateCleared() {
		_spec.ClearField(orderstatebase.FieldBenefitState, field.TypeString)
	}
	if value, ok := osbuo.mutation.PaymentType(); ok {
		_spec.SetField(orderstatebase.FieldPaymentType, field.TypeString, value)
	}
	if osbuo.mutation.PaymentTypeCleared() {
		_spec.ClearField(orderstatebase.FieldPaymentType, field.TypeString)
	}
	_spec.AddModifiers(osbuo.modifiers...)
	_node = &OrderStateBase{config: osbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, osbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderstatebase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	osbuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/poolorderuser"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/predicate"
)

// PoolOrderUserDelete is the builder for deleting a PoolOrderUser entity.
type PoolOrderUserDelete struct {
	config
	hooks    []Hook
	mutation *PoolOrderUserMutation
}

// Where appends a list predicates to the PoolOrderUserDelete builder.
func (poud *PoolOrderUserDelete) Where(ps ...predicate.PoolOrderUser) *PoolOrderUserDelete {
	poud.mutation.Where(ps...)
	return poud
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (poud *PoolOrderUserDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, poud.sqlExec, poud.mutation, poud.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (poud *PoolOrderUserDelete) ExecX(ctx context.Context) int {
	n, err := poud.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (poud *PoolOrderUserDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(poolorderuser.Table, sqlgraph.NewFieldSpec(poolorderuser.FieldID, field.TypeUint32))
	if ps := poud.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, poud.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	poud.mutation.done = true
	return affected, err
}

// PoolOrderUserDeleteOne is the builder for deleting a single PoolOrderUser entity.
type PoolOrderUserDeleteOne struct {
	poud *PoolOrderUserDelete
}

// Where appends a list predicates to the PoolOrderUserDelete builder.
func (poudo *PoolOrderUserDeleteOne) Where(ps ...predicate.PoolOrderUser) *PoolOrderUserDeleteOne {
	poudo.poud.mutation.Where(ps...)
	return poudo
}

// Exec executes the deletion query.
func (poudo *PoolOrderUserDeleteOne) Exec(ctx context.Context) error {
	n, err := poudo.poud.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{poolorderuser.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (poudo *PoolOrderUserDeleteOne) ExecX(ctx context.Context) {
	if err := poudo.Exec(ctx); err != nil {
		panic(err)
	}
}

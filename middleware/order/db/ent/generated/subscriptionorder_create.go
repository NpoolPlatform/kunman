// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/subscriptionorder"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// SubscriptionOrderCreate is the builder for creating a SubscriptionOrder entity.
type SubscriptionOrderCreate struct {
	config
	mutation *SubscriptionOrderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (soc *SubscriptionOrderCreate) SetEntID(u uuid.UUID) *SubscriptionOrderCreate {
	soc.mutation.SetEntID(u)
	return soc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (soc *SubscriptionOrderCreate) SetNillableEntID(u *uuid.UUID) *SubscriptionOrderCreate {
	if u != nil {
		soc.SetEntID(*u)
	}
	return soc
}

// SetCreatedAt sets the "created_at" field.
func (soc *SubscriptionOrderCreate) SetCreatedAt(u uint32) *SubscriptionOrderCreate {
	soc.mutation.SetCreatedAt(u)
	return soc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (soc *SubscriptionOrderCreate) SetNillableCreatedAt(u *uint32) *SubscriptionOrderCreate {
	if u != nil {
		soc.SetCreatedAt(*u)
	}
	return soc
}

// SetUpdatedAt sets the "updated_at" field.
func (soc *SubscriptionOrderCreate) SetUpdatedAt(u uint32) *SubscriptionOrderCreate {
	soc.mutation.SetUpdatedAt(u)
	return soc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (soc *SubscriptionOrderCreate) SetNillableUpdatedAt(u *uint32) *SubscriptionOrderCreate {
	if u != nil {
		soc.SetUpdatedAt(*u)
	}
	return soc
}

// SetDeletedAt sets the "deleted_at" field.
func (soc *SubscriptionOrderCreate) SetDeletedAt(u uint32) *SubscriptionOrderCreate {
	soc.mutation.SetDeletedAt(u)
	return soc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (soc *SubscriptionOrderCreate) SetNillableDeletedAt(u *uint32) *SubscriptionOrderCreate {
	if u != nil {
		soc.SetDeletedAt(*u)
	}
	return soc
}

// SetOrderID sets the "order_id" field.
func (soc *SubscriptionOrderCreate) SetOrderID(u uuid.UUID) *SubscriptionOrderCreate {
	soc.mutation.SetOrderID(u)
	return soc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (soc *SubscriptionOrderCreate) SetNillableOrderID(u *uuid.UUID) *SubscriptionOrderCreate {
	if u != nil {
		soc.SetOrderID(*u)
	}
	return soc
}

// SetGoodValueUsd sets the "good_value_usd" field.
func (soc *SubscriptionOrderCreate) SetGoodValueUsd(d decimal.Decimal) *SubscriptionOrderCreate {
	soc.mutation.SetGoodValueUsd(d)
	return soc
}

// SetNillableGoodValueUsd sets the "good_value_usd" field if the given value is not nil.
func (soc *SubscriptionOrderCreate) SetNillableGoodValueUsd(d *decimal.Decimal) *SubscriptionOrderCreate {
	if d != nil {
		soc.SetGoodValueUsd(*d)
	}
	return soc
}

// SetPaymentAmountUsd sets the "payment_amount_usd" field.
func (soc *SubscriptionOrderCreate) SetPaymentAmountUsd(d decimal.Decimal) *SubscriptionOrderCreate {
	soc.mutation.SetPaymentAmountUsd(d)
	return soc
}

// SetNillablePaymentAmountUsd sets the "payment_amount_usd" field if the given value is not nil.
func (soc *SubscriptionOrderCreate) SetNillablePaymentAmountUsd(d *decimal.Decimal) *SubscriptionOrderCreate {
	if d != nil {
		soc.SetPaymentAmountUsd(*d)
	}
	return soc
}

// SetDiscountAmountUsd sets the "discount_amount_usd" field.
func (soc *SubscriptionOrderCreate) SetDiscountAmountUsd(d decimal.Decimal) *SubscriptionOrderCreate {
	soc.mutation.SetDiscountAmountUsd(d)
	return soc
}

// SetNillableDiscountAmountUsd sets the "discount_amount_usd" field if the given value is not nil.
func (soc *SubscriptionOrderCreate) SetNillableDiscountAmountUsd(d *decimal.Decimal) *SubscriptionOrderCreate {
	if d != nil {
		soc.SetDiscountAmountUsd(*d)
	}
	return soc
}

// SetPromotionID sets the "promotion_id" field.
func (soc *SubscriptionOrderCreate) SetPromotionID(u uuid.UUID) *SubscriptionOrderCreate {
	soc.mutation.SetPromotionID(u)
	return soc
}

// SetNillablePromotionID sets the "promotion_id" field if the given value is not nil.
func (soc *SubscriptionOrderCreate) SetNillablePromotionID(u *uuid.UUID) *SubscriptionOrderCreate {
	if u != nil {
		soc.SetPromotionID(*u)
	}
	return soc
}

// SetLifeSeconds sets the "life_seconds" field.
func (soc *SubscriptionOrderCreate) SetLifeSeconds(u uint32) *SubscriptionOrderCreate {
	soc.mutation.SetLifeSeconds(u)
	return soc
}

// SetNillableLifeSeconds sets the "life_seconds" field if the given value is not nil.
func (soc *SubscriptionOrderCreate) SetNillableLifeSeconds(u *uint32) *SubscriptionOrderCreate {
	if u != nil {
		soc.SetLifeSeconds(*u)
	}
	return soc
}

// SetID sets the "id" field.
func (soc *SubscriptionOrderCreate) SetID(u uint32) *SubscriptionOrderCreate {
	soc.mutation.SetID(u)
	return soc
}

// Mutation returns the SubscriptionOrderMutation object of the builder.
func (soc *SubscriptionOrderCreate) Mutation() *SubscriptionOrderMutation {
	return soc.mutation
}

// Save creates the SubscriptionOrder in the database.
func (soc *SubscriptionOrderCreate) Save(ctx context.Context) (*SubscriptionOrder, error) {
	soc.defaults()
	return withHooks(ctx, soc.sqlSave, soc.mutation, soc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (soc *SubscriptionOrderCreate) SaveX(ctx context.Context) *SubscriptionOrder {
	v, err := soc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (soc *SubscriptionOrderCreate) Exec(ctx context.Context) error {
	_, err := soc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (soc *SubscriptionOrderCreate) ExecX(ctx context.Context) {
	if err := soc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (soc *SubscriptionOrderCreate) defaults() {
	if _, ok := soc.mutation.EntID(); !ok {
		v := subscriptionorder.DefaultEntID()
		soc.mutation.SetEntID(v)
	}
	if _, ok := soc.mutation.CreatedAt(); !ok {
		v := subscriptionorder.DefaultCreatedAt()
		soc.mutation.SetCreatedAt(v)
	}
	if _, ok := soc.mutation.UpdatedAt(); !ok {
		v := subscriptionorder.DefaultUpdatedAt()
		soc.mutation.SetUpdatedAt(v)
	}
	if _, ok := soc.mutation.DeletedAt(); !ok {
		v := subscriptionorder.DefaultDeletedAt()
		soc.mutation.SetDeletedAt(v)
	}
	if _, ok := soc.mutation.OrderID(); !ok {
		v := subscriptionorder.DefaultOrderID()
		soc.mutation.SetOrderID(v)
	}
	if _, ok := soc.mutation.GoodValueUsd(); !ok {
		v := subscriptionorder.DefaultGoodValueUsd
		soc.mutation.SetGoodValueUsd(v)
	}
	if _, ok := soc.mutation.PaymentAmountUsd(); !ok {
		v := subscriptionorder.DefaultPaymentAmountUsd
		soc.mutation.SetPaymentAmountUsd(v)
	}
	if _, ok := soc.mutation.DiscountAmountUsd(); !ok {
		v := subscriptionorder.DefaultDiscountAmountUsd
		soc.mutation.SetDiscountAmountUsd(v)
	}
	if _, ok := soc.mutation.PromotionID(); !ok {
		v := subscriptionorder.DefaultPromotionID()
		soc.mutation.SetPromotionID(v)
	}
	if _, ok := soc.mutation.LifeSeconds(); !ok {
		v := subscriptionorder.DefaultLifeSeconds
		soc.mutation.SetLifeSeconds(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (soc *SubscriptionOrderCreate) check() error {
	if _, ok := soc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "SubscriptionOrder.ent_id"`)}
	}
	if _, ok := soc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "SubscriptionOrder.created_at"`)}
	}
	if _, ok := soc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "SubscriptionOrder.updated_at"`)}
	}
	if _, ok := soc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`generated: missing required field "SubscriptionOrder.deleted_at"`)}
	}
	return nil
}

func (soc *SubscriptionOrderCreate) sqlSave(ctx context.Context) (*SubscriptionOrder, error) {
	if err := soc.check(); err != nil {
		return nil, err
	}
	_node, _spec := soc.createSpec()
	if err := sqlgraph.CreateNode(ctx, soc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	soc.mutation.id = &_node.ID
	soc.mutation.done = true
	return _node, nil
}

func (soc *SubscriptionOrderCreate) createSpec() (*SubscriptionOrder, *sqlgraph.CreateSpec) {
	var (
		_node = &SubscriptionOrder{config: soc.config}
		_spec = sqlgraph.NewCreateSpec(subscriptionorder.Table, sqlgraph.NewFieldSpec(subscriptionorder.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = soc.conflict
	if id, ok := soc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := soc.mutation.EntID(); ok {
		_spec.SetField(subscriptionorder.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := soc.mutation.CreatedAt(); ok {
		_spec.SetField(subscriptionorder.FieldCreatedAt, field.TypeUint32, value)
		_node.CreatedAt = value
	}
	if value, ok := soc.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionorder.FieldUpdatedAt, field.TypeUint32, value)
		_node.UpdatedAt = value
	}
	if value, ok := soc.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptionorder.FieldDeletedAt, field.TypeUint32, value)
		_node.DeletedAt = value
	}
	if value, ok := soc.mutation.OrderID(); ok {
		_spec.SetField(subscriptionorder.FieldOrderID, field.TypeUUID, value)
		_node.OrderID = value
	}
	if value, ok := soc.mutation.GoodValueUsd(); ok {
		_spec.SetField(subscriptionorder.FieldGoodValueUsd, field.TypeOther, value)
		_node.GoodValueUsd = value
	}
	if value, ok := soc.mutation.PaymentAmountUsd(); ok {
		_spec.SetField(subscriptionorder.FieldPaymentAmountUsd, field.TypeOther, value)
		_node.PaymentAmountUsd = value
	}
	if value, ok := soc.mutation.DiscountAmountUsd(); ok {
		_spec.SetField(subscriptionorder.FieldDiscountAmountUsd, field.TypeOther, value)
		_node.DiscountAmountUsd = value
	}
	if value, ok := soc.mutation.PromotionID(); ok {
		_spec.SetField(subscriptionorder.FieldPromotionID, field.TypeUUID, value)
		_node.PromotionID = value
	}
	if value, ok := soc.mutation.LifeSeconds(); ok {
		_spec.SetField(subscriptionorder.FieldLifeSeconds, field.TypeUint32, value)
		_node.LifeSeconds = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscriptionOrder.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionOrderUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (soc *SubscriptionOrderCreate) OnConflict(opts ...sql.ConflictOption) *SubscriptionOrderUpsertOne {
	soc.conflict = opts
	return &SubscriptionOrderUpsertOne{
		create: soc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscriptionOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (soc *SubscriptionOrderCreate) OnConflictColumns(columns ...string) *SubscriptionOrderUpsertOne {
	soc.conflict = append(soc.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionOrderUpsertOne{
		create: soc,
	}
}

type (
	// SubscriptionOrderUpsertOne is the builder for "upsert"-ing
	//  one SubscriptionOrder node.
	SubscriptionOrderUpsertOne struct {
		create *SubscriptionOrderCreate
	}

	// SubscriptionOrderUpsert is the "OnConflict" setter.
	SubscriptionOrderUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *SubscriptionOrderUpsert) SetEntID(v uuid.UUID) *SubscriptionOrderUpsert {
	u.Set(subscriptionorder.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SubscriptionOrderUpsert) UpdateEntID() *SubscriptionOrderUpsert {
	u.SetExcluded(subscriptionorder.FieldEntID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SubscriptionOrderUpsert) SetCreatedAt(v uint32) *SubscriptionOrderUpsert {
	u.Set(subscriptionorder.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SubscriptionOrderUpsert) UpdateCreatedAt() *SubscriptionOrderUpsert {
	u.SetExcluded(subscriptionorder.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SubscriptionOrderUpsert) AddCreatedAt(v uint32) *SubscriptionOrderUpsert {
	u.Add(subscriptionorder.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionOrderUpsert) SetUpdatedAt(v uint32) *SubscriptionOrderUpsert {
	u.Set(subscriptionorder.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionOrderUpsert) UpdateUpdatedAt() *SubscriptionOrderUpsert {
	u.SetExcluded(subscriptionorder.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SubscriptionOrderUpsert) AddUpdatedAt(v uint32) *SubscriptionOrderUpsert {
	u.Add(subscriptionorder.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionOrderUpsert) SetDeletedAt(v uint32) *SubscriptionOrderUpsert {
	u.Set(subscriptionorder.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionOrderUpsert) UpdateDeletedAt() *SubscriptionOrderUpsert {
	u.SetExcluded(subscriptionorder.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SubscriptionOrderUpsert) AddDeletedAt(v uint32) *SubscriptionOrderUpsert {
	u.Add(subscriptionorder.FieldDeletedAt, v)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *SubscriptionOrderUpsert) SetOrderID(v uuid.UUID) *SubscriptionOrderUpsert {
	u.Set(subscriptionorder.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *SubscriptionOrderUpsert) UpdateOrderID() *SubscriptionOrderUpsert {
	u.SetExcluded(subscriptionorder.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *SubscriptionOrderUpsert) ClearOrderID() *SubscriptionOrderUpsert {
	u.SetNull(subscriptionorder.FieldOrderID)
	return u
}

// SetGoodValueUsd sets the "good_value_usd" field.
func (u *SubscriptionOrderUpsert) SetGoodValueUsd(v decimal.Decimal) *SubscriptionOrderUpsert {
	u.Set(subscriptionorder.FieldGoodValueUsd, v)
	return u
}

// UpdateGoodValueUsd sets the "good_value_usd" field to the value that was provided on create.
func (u *SubscriptionOrderUpsert) UpdateGoodValueUsd() *SubscriptionOrderUpsert {
	u.SetExcluded(subscriptionorder.FieldGoodValueUsd)
	return u
}

// ClearGoodValueUsd clears the value of the "good_value_usd" field.
func (u *SubscriptionOrderUpsert) ClearGoodValueUsd() *SubscriptionOrderUpsert {
	u.SetNull(subscriptionorder.FieldGoodValueUsd)
	return u
}

// SetPaymentAmountUsd sets the "payment_amount_usd" field.
func (u *SubscriptionOrderUpsert) SetPaymentAmountUsd(v decimal.Decimal) *SubscriptionOrderUpsert {
	u.Set(subscriptionorder.FieldPaymentAmountUsd, v)
	return u
}

// UpdatePaymentAmountUsd sets the "payment_amount_usd" field to the value that was provided on create.
func (u *SubscriptionOrderUpsert) UpdatePaymentAmountUsd() *SubscriptionOrderUpsert {
	u.SetExcluded(subscriptionorder.FieldPaymentAmountUsd)
	return u
}

// ClearPaymentAmountUsd clears the value of the "payment_amount_usd" field.
func (u *SubscriptionOrderUpsert) ClearPaymentAmountUsd() *SubscriptionOrderUpsert {
	u.SetNull(subscriptionorder.FieldPaymentAmountUsd)
	return u
}

// SetDiscountAmountUsd sets the "discount_amount_usd" field.
func (u *SubscriptionOrderUpsert) SetDiscountAmountUsd(v decimal.Decimal) *SubscriptionOrderUpsert {
	u.Set(subscriptionorder.FieldDiscountAmountUsd, v)
	return u
}

// UpdateDiscountAmountUsd sets the "discount_amount_usd" field to the value that was provided on create.
func (u *SubscriptionOrderUpsert) UpdateDiscountAmountUsd() *SubscriptionOrderUpsert {
	u.SetExcluded(subscriptionorder.FieldDiscountAmountUsd)
	return u
}

// ClearDiscountAmountUsd clears the value of the "discount_amount_usd" field.
func (u *SubscriptionOrderUpsert) ClearDiscountAmountUsd() *SubscriptionOrderUpsert {
	u.SetNull(subscriptionorder.FieldDiscountAmountUsd)
	return u
}

// SetPromotionID sets the "promotion_id" field.
func (u *SubscriptionOrderUpsert) SetPromotionID(v uuid.UUID) *SubscriptionOrderUpsert {
	u.Set(subscriptionorder.FieldPromotionID, v)
	return u
}

// UpdatePromotionID sets the "promotion_id" field to the value that was provided on create.
func (u *SubscriptionOrderUpsert) UpdatePromotionID() *SubscriptionOrderUpsert {
	u.SetExcluded(subscriptionorder.FieldPromotionID)
	return u
}

// ClearPromotionID clears the value of the "promotion_id" field.
func (u *SubscriptionOrderUpsert) ClearPromotionID() *SubscriptionOrderUpsert {
	u.SetNull(subscriptionorder.FieldPromotionID)
	return u
}

// SetLifeSeconds sets the "life_seconds" field.
func (u *SubscriptionOrderUpsert) SetLifeSeconds(v uint32) *SubscriptionOrderUpsert {
	u.Set(subscriptionorder.FieldLifeSeconds, v)
	return u
}

// UpdateLifeSeconds sets the "life_seconds" field to the value that was provided on create.
func (u *SubscriptionOrderUpsert) UpdateLifeSeconds() *SubscriptionOrderUpsert {
	u.SetExcluded(subscriptionorder.FieldLifeSeconds)
	return u
}

// AddLifeSeconds adds v to the "life_seconds" field.
func (u *SubscriptionOrderUpsert) AddLifeSeconds(v uint32) *SubscriptionOrderUpsert {
	u.Add(subscriptionorder.FieldLifeSeconds, v)
	return u
}

// ClearLifeSeconds clears the value of the "life_seconds" field.
func (u *SubscriptionOrderUpsert) ClearLifeSeconds() *SubscriptionOrderUpsert {
	u.SetNull(subscriptionorder.FieldLifeSeconds)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SubscriptionOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscriptionorder.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionOrderUpsertOne) UpdateNewValues() *SubscriptionOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(subscriptionorder.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscriptionOrder.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SubscriptionOrderUpsertOne) Ignore() *SubscriptionOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionOrderUpsertOne) DoNothing() *SubscriptionOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionOrderCreate.OnConflict
// documentation for more info.
func (u *SubscriptionOrderUpsertOne) Update(set func(*SubscriptionOrderUpsert)) *SubscriptionOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *SubscriptionOrderUpsertOne) SetEntID(v uuid.UUID) *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SubscriptionOrderUpsertOne) UpdateEntID() *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SubscriptionOrderUpsertOne) SetCreatedAt(v uint32) *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SubscriptionOrderUpsertOne) AddCreatedAt(v uint32) *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SubscriptionOrderUpsertOne) UpdateCreatedAt() *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionOrderUpsertOne) SetUpdatedAt(v uint32) *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SubscriptionOrderUpsertOne) AddUpdatedAt(v uint32) *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionOrderUpsertOne) UpdateUpdatedAt() *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionOrderUpsertOne) SetDeletedAt(v uint32) *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SubscriptionOrderUpsertOne) AddDeletedAt(v uint32) *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionOrderUpsertOne) UpdateDeletedAt() *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetOrderID sets the "order_id" field.
func (u *SubscriptionOrderUpsertOne) SetOrderID(v uuid.UUID) *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *SubscriptionOrderUpsertOne) UpdateOrderID() *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *SubscriptionOrderUpsertOne) ClearOrderID() *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.ClearOrderID()
	})
}

// SetGoodValueUsd sets the "good_value_usd" field.
func (u *SubscriptionOrderUpsertOne) SetGoodValueUsd(v decimal.Decimal) *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.SetGoodValueUsd(v)
	})
}

// UpdateGoodValueUsd sets the "good_value_usd" field to the value that was provided on create.
func (u *SubscriptionOrderUpsertOne) UpdateGoodValueUsd() *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.UpdateGoodValueUsd()
	})
}

// ClearGoodValueUsd clears the value of the "good_value_usd" field.
func (u *SubscriptionOrderUpsertOne) ClearGoodValueUsd() *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.ClearGoodValueUsd()
	})
}

// SetPaymentAmountUsd sets the "payment_amount_usd" field.
func (u *SubscriptionOrderUpsertOne) SetPaymentAmountUsd(v decimal.Decimal) *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.SetPaymentAmountUsd(v)
	})
}

// UpdatePaymentAmountUsd sets the "payment_amount_usd" field to the value that was provided on create.
func (u *SubscriptionOrderUpsertOne) UpdatePaymentAmountUsd() *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.UpdatePaymentAmountUsd()
	})
}

// ClearPaymentAmountUsd clears the value of the "payment_amount_usd" field.
func (u *SubscriptionOrderUpsertOne) ClearPaymentAmountUsd() *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.ClearPaymentAmountUsd()
	})
}

// SetDiscountAmountUsd sets the "discount_amount_usd" field.
func (u *SubscriptionOrderUpsertOne) SetDiscountAmountUsd(v decimal.Decimal) *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.SetDiscountAmountUsd(v)
	})
}

// UpdateDiscountAmountUsd sets the "discount_amount_usd" field to the value that was provided on create.
func (u *SubscriptionOrderUpsertOne) UpdateDiscountAmountUsd() *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.UpdateDiscountAmountUsd()
	})
}

// ClearDiscountAmountUsd clears the value of the "discount_amount_usd" field.
func (u *SubscriptionOrderUpsertOne) ClearDiscountAmountUsd() *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.ClearDiscountAmountUsd()
	})
}

// SetPromotionID sets the "promotion_id" field.
func (u *SubscriptionOrderUpsertOne) SetPromotionID(v uuid.UUID) *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.SetPromotionID(v)
	})
}

// UpdatePromotionID sets the "promotion_id" field to the value that was provided on create.
func (u *SubscriptionOrderUpsertOne) UpdatePromotionID() *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.UpdatePromotionID()
	})
}

// ClearPromotionID clears the value of the "promotion_id" field.
func (u *SubscriptionOrderUpsertOne) ClearPromotionID() *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.ClearPromotionID()
	})
}

// SetLifeSeconds sets the "life_seconds" field.
func (u *SubscriptionOrderUpsertOne) SetLifeSeconds(v uint32) *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.SetLifeSeconds(v)
	})
}

// AddLifeSeconds adds v to the "life_seconds" field.
func (u *SubscriptionOrderUpsertOne) AddLifeSeconds(v uint32) *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.AddLifeSeconds(v)
	})
}

// UpdateLifeSeconds sets the "life_seconds" field to the value that was provided on create.
func (u *SubscriptionOrderUpsertOne) UpdateLifeSeconds() *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.UpdateLifeSeconds()
	})
}

// ClearLifeSeconds clears the value of the "life_seconds" field.
func (u *SubscriptionOrderUpsertOne) ClearLifeSeconds() *SubscriptionOrderUpsertOne {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.ClearLifeSeconds()
	})
}

// Exec executes the query.
func (u *SubscriptionOrderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for SubscriptionOrderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionOrderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubscriptionOrderUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubscriptionOrderUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubscriptionOrderCreateBulk is the builder for creating many SubscriptionOrder entities in bulk.
type SubscriptionOrderCreateBulk struct {
	config
	err      error
	builders []*SubscriptionOrderCreate
	conflict []sql.ConflictOption
}

// Save creates the SubscriptionOrder entities in the database.
func (socb *SubscriptionOrderCreateBulk) Save(ctx context.Context) ([]*SubscriptionOrder, error) {
	if socb.err != nil {
		return nil, socb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(socb.builders))
	nodes := make([]*SubscriptionOrder, len(socb.builders))
	mutators := make([]Mutator, len(socb.builders))
	for i := range socb.builders {
		func(i int, root context.Context) {
			builder := socb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionOrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, socb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = socb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, socb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, socb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (socb *SubscriptionOrderCreateBulk) SaveX(ctx context.Context) []*SubscriptionOrder {
	v, err := socb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (socb *SubscriptionOrderCreateBulk) Exec(ctx context.Context) error {
	_, err := socb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (socb *SubscriptionOrderCreateBulk) ExecX(ctx context.Context) {
	if err := socb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscriptionOrder.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionOrderUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (socb *SubscriptionOrderCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubscriptionOrderUpsertBulk {
	socb.conflict = opts
	return &SubscriptionOrderUpsertBulk{
		create: socb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscriptionOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (socb *SubscriptionOrderCreateBulk) OnConflictColumns(columns ...string) *SubscriptionOrderUpsertBulk {
	socb.conflict = append(socb.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionOrderUpsertBulk{
		create: socb,
	}
}

// SubscriptionOrderUpsertBulk is the builder for "upsert"-ing
// a bulk of SubscriptionOrder nodes.
type SubscriptionOrderUpsertBulk struct {
	create *SubscriptionOrderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SubscriptionOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscriptionorder.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionOrderUpsertBulk) UpdateNewValues() *SubscriptionOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(subscriptionorder.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscriptionOrder.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SubscriptionOrderUpsertBulk) Ignore() *SubscriptionOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionOrderUpsertBulk) DoNothing() *SubscriptionOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionOrderCreateBulk.OnConflict
// documentation for more info.
func (u *SubscriptionOrderUpsertBulk) Update(set func(*SubscriptionOrderUpsert)) *SubscriptionOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *SubscriptionOrderUpsertBulk) SetEntID(v uuid.UUID) *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SubscriptionOrderUpsertBulk) UpdateEntID() *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SubscriptionOrderUpsertBulk) SetCreatedAt(v uint32) *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SubscriptionOrderUpsertBulk) AddCreatedAt(v uint32) *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SubscriptionOrderUpsertBulk) UpdateCreatedAt() *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionOrderUpsertBulk) SetUpdatedAt(v uint32) *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SubscriptionOrderUpsertBulk) AddUpdatedAt(v uint32) *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionOrderUpsertBulk) UpdateUpdatedAt() *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionOrderUpsertBulk) SetDeletedAt(v uint32) *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SubscriptionOrderUpsertBulk) AddDeletedAt(v uint32) *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionOrderUpsertBulk) UpdateDeletedAt() *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetOrderID sets the "order_id" field.
func (u *SubscriptionOrderUpsertBulk) SetOrderID(v uuid.UUID) *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *SubscriptionOrderUpsertBulk) UpdateOrderID() *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *SubscriptionOrderUpsertBulk) ClearOrderID() *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.ClearOrderID()
	})
}

// SetGoodValueUsd sets the "good_value_usd" field.
func (u *SubscriptionOrderUpsertBulk) SetGoodValueUsd(v decimal.Decimal) *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.SetGoodValueUsd(v)
	})
}

// UpdateGoodValueUsd sets the "good_value_usd" field to the value that was provided on create.
func (u *SubscriptionOrderUpsertBulk) UpdateGoodValueUsd() *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.UpdateGoodValueUsd()
	})
}

// ClearGoodValueUsd clears the value of the "good_value_usd" field.
func (u *SubscriptionOrderUpsertBulk) ClearGoodValueUsd() *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.ClearGoodValueUsd()
	})
}

// SetPaymentAmountUsd sets the "payment_amount_usd" field.
func (u *SubscriptionOrderUpsertBulk) SetPaymentAmountUsd(v decimal.Decimal) *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.SetPaymentAmountUsd(v)
	})
}

// UpdatePaymentAmountUsd sets the "payment_amount_usd" field to the value that was provided on create.
func (u *SubscriptionOrderUpsertBulk) UpdatePaymentAmountUsd() *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.UpdatePaymentAmountUsd()
	})
}

// ClearPaymentAmountUsd clears the value of the "payment_amount_usd" field.
func (u *SubscriptionOrderUpsertBulk) ClearPaymentAmountUsd() *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.ClearPaymentAmountUsd()
	})
}

// SetDiscountAmountUsd sets the "discount_amount_usd" field.
func (u *SubscriptionOrderUpsertBulk) SetDiscountAmountUsd(v decimal.Decimal) *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.SetDiscountAmountUsd(v)
	})
}

// UpdateDiscountAmountUsd sets the "discount_amount_usd" field to the value that was provided on create.
func (u *SubscriptionOrderUpsertBulk) UpdateDiscountAmountUsd() *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.UpdateDiscountAmountUsd()
	})
}

// ClearDiscountAmountUsd clears the value of the "discount_amount_usd" field.
func (u *SubscriptionOrderUpsertBulk) ClearDiscountAmountUsd() *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.ClearDiscountAmountUsd()
	})
}

// SetPromotionID sets the "promotion_id" field.
func (u *SubscriptionOrderUpsertBulk) SetPromotionID(v uuid.UUID) *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.SetPromotionID(v)
	})
}

// UpdatePromotionID sets the "promotion_id" field to the value that was provided on create.
func (u *SubscriptionOrderUpsertBulk) UpdatePromotionID() *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.UpdatePromotionID()
	})
}

// ClearPromotionID clears the value of the "promotion_id" field.
func (u *SubscriptionOrderUpsertBulk) ClearPromotionID() *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.ClearPromotionID()
	})
}

// SetLifeSeconds sets the "life_seconds" field.
func (u *SubscriptionOrderUpsertBulk) SetLifeSeconds(v uint32) *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.SetLifeSeconds(v)
	})
}

// AddLifeSeconds adds v to the "life_seconds" field.
func (u *SubscriptionOrderUpsertBulk) AddLifeSeconds(v uint32) *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.AddLifeSeconds(v)
	})
}

// UpdateLifeSeconds sets the "life_seconds" field to the value that was provided on create.
func (u *SubscriptionOrderUpsertBulk) UpdateLifeSeconds() *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.UpdateLifeSeconds()
	})
}

// ClearLifeSeconds clears the value of the "life_seconds" field.
func (u *SubscriptionOrderUpsertBulk) ClearLifeSeconds() *SubscriptionOrderUpsertBulk {
	return u.Update(func(s *SubscriptionOrderUpsert) {
		s.ClearLifeSeconds()
	})
}

// Exec executes the query.
func (u *SubscriptionOrderUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the SubscriptionOrderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for SubscriptionOrderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionOrderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

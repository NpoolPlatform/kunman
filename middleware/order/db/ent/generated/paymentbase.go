// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/paymentbase"
	"github.com/google/uuid"
)

// PaymentBase is the model entity for the PaymentBase schema.
type PaymentBase struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID uuid.UUID `json:"order_id,omitempty"`
	// ObseleteState holds the value of the "obselete_state" field.
	ObseleteState string `json:"obselete_state,omitempty"`
	selectValues  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentBase) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case paymentbase.FieldID:
			values[i] = new(sql.NullInt64)
		case paymentbase.FieldObseleteState:
			values[i] = new(sql.NullString)
		case paymentbase.FieldEntID, paymentbase.FieldOrderID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentBase fields.
func (pb *PaymentBase) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paymentbase.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pb.ID = uint32(value.Int64)
		case paymentbase.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				pb.EntID = *value
			}
		case paymentbase.FieldOrderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value != nil {
				pb.OrderID = *value
			}
		case paymentbase.FieldObseleteState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field obselete_state", values[i])
			} else if value.Valid {
				pb.ObseleteState = value.String
			}
		default:
			pb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PaymentBase.
// This includes values selected through modifiers, order, etc.
func (pb *PaymentBase) Value(name string) (ent.Value, error) {
	return pb.selectValues.Get(name)
}

// Update returns a builder for updating this PaymentBase.
// Note that you need to call PaymentBase.Unwrap() before calling this method if this PaymentBase
// was returned from a transaction, and the transaction was committed or rolled back.
func (pb *PaymentBase) Update() *PaymentBaseUpdateOne {
	return NewPaymentBaseClient(pb.config).UpdateOne(pb)
}

// Unwrap unwraps the PaymentBase entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pb *PaymentBase) Unwrap() *PaymentBase {
	_tx, ok := pb.config.driver.(*txDriver)
	if !ok {
		panic("generated: PaymentBase is not a transactional entity")
	}
	pb.config.driver = _tx.drv
	return pb
}

// String implements the fmt.Stringer.
func (pb *PaymentBase) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentBase(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pb.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", pb.EntID))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", pb.OrderID))
	builder.WriteString(", ")
	builder.WriteString("obselete_state=")
	builder.WriteString(pb.ObseleteState)
	builder.WriteByte(')')
	return builder.String()
}

// PaymentBases is a parsable slice of PaymentBase.
type PaymentBases []*PaymentBase

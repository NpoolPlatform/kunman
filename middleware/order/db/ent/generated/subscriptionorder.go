// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/subscriptionorder"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// SubscriptionOrder is the model entity for the SubscriptionOrder schema.
type SubscriptionOrder struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID uuid.UUID `json:"order_id,omitempty"`
	// GoodValueUsd holds the value of the "good_value_usd" field.
	GoodValueUsd decimal.Decimal `json:"good_value_usd,omitempty"`
	// PaymentAmountUsd holds the value of the "payment_amount_usd" field.
	PaymentAmountUsd decimal.Decimal `json:"payment_amount_usd,omitempty"`
	// DiscountAmountUsd holds the value of the "discount_amount_usd" field.
	DiscountAmountUsd decimal.Decimal `json:"discount_amount_usd,omitempty"`
	// PromotionID holds the value of the "promotion_id" field.
	PromotionID uuid.UUID `json:"promotion_id,omitempty"`
	// DurationSeconds holds the value of the "duration_seconds" field.
	DurationSeconds uint32 `json:"duration_seconds,omitempty"`
	selectValues    sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubscriptionOrder) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscriptionorder.FieldGoodValueUsd, subscriptionorder.FieldPaymentAmountUsd, subscriptionorder.FieldDiscountAmountUsd:
			values[i] = new(decimal.Decimal)
		case subscriptionorder.FieldID, subscriptionorder.FieldCreatedAt, subscriptionorder.FieldUpdatedAt, subscriptionorder.FieldDeletedAt, subscriptionorder.FieldDurationSeconds:
			values[i] = new(sql.NullInt64)
		case subscriptionorder.FieldEntID, subscriptionorder.FieldOrderID, subscriptionorder.FieldPromotionID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubscriptionOrder fields.
func (so *SubscriptionOrder) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscriptionorder.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			so.ID = uint32(value.Int64)
		case subscriptionorder.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				so.EntID = *value
			}
		case subscriptionorder.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				so.CreatedAt = uint32(value.Int64)
			}
		case subscriptionorder.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				so.UpdatedAt = uint32(value.Int64)
			}
		case subscriptionorder.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				so.DeletedAt = uint32(value.Int64)
			}
		case subscriptionorder.FieldOrderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value != nil {
				so.OrderID = *value
			}
		case subscriptionorder.FieldGoodValueUsd:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field good_value_usd", values[i])
			} else if value != nil {
				so.GoodValueUsd = *value
			}
		case subscriptionorder.FieldPaymentAmountUsd:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field payment_amount_usd", values[i])
			} else if value != nil {
				so.PaymentAmountUsd = *value
			}
		case subscriptionorder.FieldDiscountAmountUsd:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field discount_amount_usd", values[i])
			} else if value != nil {
				so.DiscountAmountUsd = *value
			}
		case subscriptionorder.FieldPromotionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field promotion_id", values[i])
			} else if value != nil {
				so.PromotionID = *value
			}
		case subscriptionorder.FieldDurationSeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_seconds", values[i])
			} else if value.Valid {
				so.DurationSeconds = uint32(value.Int64)
			}
		default:
			so.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubscriptionOrder.
// This includes values selected through modifiers, order, etc.
func (so *SubscriptionOrder) Value(name string) (ent.Value, error) {
	return so.selectValues.Get(name)
}

// Update returns a builder for updating this SubscriptionOrder.
// Note that you need to call SubscriptionOrder.Unwrap() before calling this method if this SubscriptionOrder
// was returned from a transaction, and the transaction was committed or rolled back.
func (so *SubscriptionOrder) Update() *SubscriptionOrderUpdateOne {
	return NewSubscriptionOrderClient(so.config).UpdateOne(so)
}

// Unwrap unwraps the SubscriptionOrder entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (so *SubscriptionOrder) Unwrap() *SubscriptionOrder {
	_tx, ok := so.config.driver.(*txDriver)
	if !ok {
		panic("generated: SubscriptionOrder is not a transactional entity")
	}
	so.config.driver = _tx.drv
	return so
}

// String implements the fmt.Stringer.
func (so *SubscriptionOrder) String() string {
	var builder strings.Builder
	builder.WriteString("SubscriptionOrder(")
	builder.WriteString(fmt.Sprintf("id=%v, ", so.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", so.EntID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", so.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", so.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", so.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", so.OrderID))
	builder.WriteString(", ")
	builder.WriteString("good_value_usd=")
	builder.WriteString(fmt.Sprintf("%v", so.GoodValueUsd))
	builder.WriteString(", ")
	builder.WriteString("payment_amount_usd=")
	builder.WriteString(fmt.Sprintf("%v", so.PaymentAmountUsd))
	builder.WriteString(", ")
	builder.WriteString("discount_amount_usd=")
	builder.WriteString(fmt.Sprintf("%v", so.DiscountAmountUsd))
	builder.WriteString(", ")
	builder.WriteString("promotion_id=")
	builder.WriteString(fmt.Sprintf("%v", so.PromotionID))
	builder.WriteString(", ")
	builder.WriteString("duration_seconds=")
	builder.WriteString(fmt.Sprintf("%v", so.DurationSeconds))
	builder.WriteByte(')')
	return builder.String()
}

// SubscriptionOrders is a parsable slice of SubscriptionOrder.
type SubscriptionOrders []*SubscriptionOrder

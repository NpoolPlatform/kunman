// Code generated by ent, DO NOT EDIT.

package paymentbase

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldEQ(FieldEntID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldEQ(FieldDeletedAt, v))
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v uuid.UUID) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldEQ(FieldOrderID, v))
}

// ObseleteState applies equality check predicate on the "obselete_state" field. It's identical to ObseleteStateEQ.
func ObseleteState(v string) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldEQ(FieldObseleteState, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldLTE(FieldEntID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldLTE(FieldDeletedAt, v))
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v uuid.UUID) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldEQ(FieldOrderID, v))
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v uuid.UUID) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldNEQ(FieldOrderID, v))
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...uuid.UUID) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldIn(FieldOrderID, vs...))
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...uuid.UUID) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldNotIn(FieldOrderID, vs...))
}

// OrderIDGT applies the GT predicate on the "order_id" field.
func OrderIDGT(v uuid.UUID) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldGT(FieldOrderID, v))
}

// OrderIDGTE applies the GTE predicate on the "order_id" field.
func OrderIDGTE(v uuid.UUID) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldGTE(FieldOrderID, v))
}

// OrderIDLT applies the LT predicate on the "order_id" field.
func OrderIDLT(v uuid.UUID) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldLT(FieldOrderID, v))
}

// OrderIDLTE applies the LTE predicate on the "order_id" field.
func OrderIDLTE(v uuid.UUID) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldLTE(FieldOrderID, v))
}

// OrderIDIsNil applies the IsNil predicate on the "order_id" field.
func OrderIDIsNil() predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldIsNull(FieldOrderID))
}

// OrderIDNotNil applies the NotNil predicate on the "order_id" field.
func OrderIDNotNil() predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldNotNull(FieldOrderID))
}

// ObseleteStateEQ applies the EQ predicate on the "obselete_state" field.
func ObseleteStateEQ(v string) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldEQ(FieldObseleteState, v))
}

// ObseleteStateNEQ applies the NEQ predicate on the "obselete_state" field.
func ObseleteStateNEQ(v string) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldNEQ(FieldObseleteState, v))
}

// ObseleteStateIn applies the In predicate on the "obselete_state" field.
func ObseleteStateIn(vs ...string) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldIn(FieldObseleteState, vs...))
}

// ObseleteStateNotIn applies the NotIn predicate on the "obselete_state" field.
func ObseleteStateNotIn(vs ...string) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldNotIn(FieldObseleteState, vs...))
}

// ObseleteStateGT applies the GT predicate on the "obselete_state" field.
func ObseleteStateGT(v string) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldGT(FieldObseleteState, v))
}

// ObseleteStateGTE applies the GTE predicate on the "obselete_state" field.
func ObseleteStateGTE(v string) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldGTE(FieldObseleteState, v))
}

// ObseleteStateLT applies the LT predicate on the "obselete_state" field.
func ObseleteStateLT(v string) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldLT(FieldObseleteState, v))
}

// ObseleteStateLTE applies the LTE predicate on the "obselete_state" field.
func ObseleteStateLTE(v string) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldLTE(FieldObseleteState, v))
}

// ObseleteStateContains applies the Contains predicate on the "obselete_state" field.
func ObseleteStateContains(v string) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldContains(FieldObseleteState, v))
}

// ObseleteStateHasPrefix applies the HasPrefix predicate on the "obselete_state" field.
func ObseleteStateHasPrefix(v string) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldHasPrefix(FieldObseleteState, v))
}

// ObseleteStateHasSuffix applies the HasSuffix predicate on the "obselete_state" field.
func ObseleteStateHasSuffix(v string) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldHasSuffix(FieldObseleteState, v))
}

// ObseleteStateIsNil applies the IsNil predicate on the "obselete_state" field.
func ObseleteStateIsNil() predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldIsNull(FieldObseleteState))
}

// ObseleteStateNotNil applies the NotNil predicate on the "obselete_state" field.
func ObseleteStateNotNil() predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldNotNull(FieldObseleteState))
}

// ObseleteStateEqualFold applies the EqualFold predicate on the "obselete_state" field.
func ObseleteStateEqualFold(v string) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldEqualFold(FieldObseleteState, v))
}

// ObseleteStateContainsFold applies the ContainsFold predicate on the "obselete_state" field.
func ObseleteStateContainsFold(v string) predicate.PaymentBase {
	return predicate.PaymentBase(sql.FieldContainsFold(FieldObseleteState, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PaymentBase) predicate.PaymentBase {
	return predicate.PaymentBase(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PaymentBase) predicate.PaymentBase {
	return predicate.PaymentBase(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PaymentBase) predicate.PaymentBase {
	return predicate.PaymentBase(sql.NotPredicates(p))
}

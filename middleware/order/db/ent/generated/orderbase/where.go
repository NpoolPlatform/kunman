// Code generated by ent, DO NOT EDIT.

package orderbase

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldEQ(FieldEntID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldEQ(FieldAppID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldEQ(FieldUserID, v))
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldEQ(FieldGoodID, v))
}

// AppGoodID applies equality check predicate on the "app_good_id" field. It's identical to AppGoodIDEQ.
func AppGoodID(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldEQ(FieldAppGoodID, v))
}

// GoodType applies equality check predicate on the "good_type" field. It's identical to GoodTypeEQ.
func GoodType(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldEQ(FieldGoodType, v))
}

// ParentOrderID applies equality check predicate on the "parent_order_id" field. It's identical to ParentOrderIDEQ.
func ParentOrderID(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldEQ(FieldParentOrderID, v))
}

// OrderType applies equality check predicate on the "order_type" field. It's identical to OrderTypeEQ.
func OrderType(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldEQ(FieldOrderType, v))
}

// CreateMethod applies equality check predicate on the "create_method" field. It's identical to CreateMethodEQ.
func CreateMethod(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldEQ(FieldCreateMethod, v))
}

// Simulate applies equality check predicate on the "simulate" field. It's identical to SimulateEQ.
func Simulate(v bool) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldEQ(FieldSimulate, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldLTE(FieldEntID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldLTE(FieldAppID, v))
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.OrderBase {
	return predicate.OrderBase(sql.FieldIsNull(FieldAppID))
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNotNull(FieldAppID))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldLTE(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.OrderBase {
	return predicate.OrderBase(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNotNull(FieldUserID))
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldEQ(FieldGoodID, v))
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNEQ(FieldGoodID, v))
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldIn(FieldGoodID, vs...))
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNotIn(FieldGoodID, vs...))
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldGT(FieldGoodID, v))
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldGTE(FieldGoodID, v))
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldLT(FieldGoodID, v))
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldLTE(FieldGoodID, v))
}

// GoodIDIsNil applies the IsNil predicate on the "good_id" field.
func GoodIDIsNil() predicate.OrderBase {
	return predicate.OrderBase(sql.FieldIsNull(FieldGoodID))
}

// GoodIDNotNil applies the NotNil predicate on the "good_id" field.
func GoodIDNotNil() predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNotNull(FieldGoodID))
}

// AppGoodIDEQ applies the EQ predicate on the "app_good_id" field.
func AppGoodIDEQ(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldEQ(FieldAppGoodID, v))
}

// AppGoodIDNEQ applies the NEQ predicate on the "app_good_id" field.
func AppGoodIDNEQ(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNEQ(FieldAppGoodID, v))
}

// AppGoodIDIn applies the In predicate on the "app_good_id" field.
func AppGoodIDIn(vs ...uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldIn(FieldAppGoodID, vs...))
}

// AppGoodIDNotIn applies the NotIn predicate on the "app_good_id" field.
func AppGoodIDNotIn(vs ...uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNotIn(FieldAppGoodID, vs...))
}

// AppGoodIDGT applies the GT predicate on the "app_good_id" field.
func AppGoodIDGT(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldGT(FieldAppGoodID, v))
}

// AppGoodIDGTE applies the GTE predicate on the "app_good_id" field.
func AppGoodIDGTE(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldGTE(FieldAppGoodID, v))
}

// AppGoodIDLT applies the LT predicate on the "app_good_id" field.
func AppGoodIDLT(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldLT(FieldAppGoodID, v))
}

// AppGoodIDLTE applies the LTE predicate on the "app_good_id" field.
func AppGoodIDLTE(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldLTE(FieldAppGoodID, v))
}

// AppGoodIDIsNil applies the IsNil predicate on the "app_good_id" field.
func AppGoodIDIsNil() predicate.OrderBase {
	return predicate.OrderBase(sql.FieldIsNull(FieldAppGoodID))
}

// AppGoodIDNotNil applies the NotNil predicate on the "app_good_id" field.
func AppGoodIDNotNil() predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNotNull(FieldAppGoodID))
}

// GoodTypeEQ applies the EQ predicate on the "good_type" field.
func GoodTypeEQ(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldEQ(FieldGoodType, v))
}

// GoodTypeNEQ applies the NEQ predicate on the "good_type" field.
func GoodTypeNEQ(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNEQ(FieldGoodType, v))
}

// GoodTypeIn applies the In predicate on the "good_type" field.
func GoodTypeIn(vs ...string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldIn(FieldGoodType, vs...))
}

// GoodTypeNotIn applies the NotIn predicate on the "good_type" field.
func GoodTypeNotIn(vs ...string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNotIn(FieldGoodType, vs...))
}

// GoodTypeGT applies the GT predicate on the "good_type" field.
func GoodTypeGT(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldGT(FieldGoodType, v))
}

// GoodTypeGTE applies the GTE predicate on the "good_type" field.
func GoodTypeGTE(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldGTE(FieldGoodType, v))
}

// GoodTypeLT applies the LT predicate on the "good_type" field.
func GoodTypeLT(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldLT(FieldGoodType, v))
}

// GoodTypeLTE applies the LTE predicate on the "good_type" field.
func GoodTypeLTE(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldLTE(FieldGoodType, v))
}

// GoodTypeContains applies the Contains predicate on the "good_type" field.
func GoodTypeContains(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldContains(FieldGoodType, v))
}

// GoodTypeHasPrefix applies the HasPrefix predicate on the "good_type" field.
func GoodTypeHasPrefix(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldHasPrefix(FieldGoodType, v))
}

// GoodTypeHasSuffix applies the HasSuffix predicate on the "good_type" field.
func GoodTypeHasSuffix(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldHasSuffix(FieldGoodType, v))
}

// GoodTypeIsNil applies the IsNil predicate on the "good_type" field.
func GoodTypeIsNil() predicate.OrderBase {
	return predicate.OrderBase(sql.FieldIsNull(FieldGoodType))
}

// GoodTypeNotNil applies the NotNil predicate on the "good_type" field.
func GoodTypeNotNil() predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNotNull(FieldGoodType))
}

// GoodTypeEqualFold applies the EqualFold predicate on the "good_type" field.
func GoodTypeEqualFold(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldEqualFold(FieldGoodType, v))
}

// GoodTypeContainsFold applies the ContainsFold predicate on the "good_type" field.
func GoodTypeContainsFold(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldContainsFold(FieldGoodType, v))
}

// ParentOrderIDEQ applies the EQ predicate on the "parent_order_id" field.
func ParentOrderIDEQ(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldEQ(FieldParentOrderID, v))
}

// ParentOrderIDNEQ applies the NEQ predicate on the "parent_order_id" field.
func ParentOrderIDNEQ(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNEQ(FieldParentOrderID, v))
}

// ParentOrderIDIn applies the In predicate on the "parent_order_id" field.
func ParentOrderIDIn(vs ...uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldIn(FieldParentOrderID, vs...))
}

// ParentOrderIDNotIn applies the NotIn predicate on the "parent_order_id" field.
func ParentOrderIDNotIn(vs ...uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNotIn(FieldParentOrderID, vs...))
}

// ParentOrderIDGT applies the GT predicate on the "parent_order_id" field.
func ParentOrderIDGT(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldGT(FieldParentOrderID, v))
}

// ParentOrderIDGTE applies the GTE predicate on the "parent_order_id" field.
func ParentOrderIDGTE(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldGTE(FieldParentOrderID, v))
}

// ParentOrderIDLT applies the LT predicate on the "parent_order_id" field.
func ParentOrderIDLT(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldLT(FieldParentOrderID, v))
}

// ParentOrderIDLTE applies the LTE predicate on the "parent_order_id" field.
func ParentOrderIDLTE(v uuid.UUID) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldLTE(FieldParentOrderID, v))
}

// ParentOrderIDIsNil applies the IsNil predicate on the "parent_order_id" field.
func ParentOrderIDIsNil() predicate.OrderBase {
	return predicate.OrderBase(sql.FieldIsNull(FieldParentOrderID))
}

// ParentOrderIDNotNil applies the NotNil predicate on the "parent_order_id" field.
func ParentOrderIDNotNil() predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNotNull(FieldParentOrderID))
}

// OrderTypeEQ applies the EQ predicate on the "order_type" field.
func OrderTypeEQ(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldEQ(FieldOrderType, v))
}

// OrderTypeNEQ applies the NEQ predicate on the "order_type" field.
func OrderTypeNEQ(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNEQ(FieldOrderType, v))
}

// OrderTypeIn applies the In predicate on the "order_type" field.
func OrderTypeIn(vs ...string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldIn(FieldOrderType, vs...))
}

// OrderTypeNotIn applies the NotIn predicate on the "order_type" field.
func OrderTypeNotIn(vs ...string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNotIn(FieldOrderType, vs...))
}

// OrderTypeGT applies the GT predicate on the "order_type" field.
func OrderTypeGT(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldGT(FieldOrderType, v))
}

// OrderTypeGTE applies the GTE predicate on the "order_type" field.
func OrderTypeGTE(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldGTE(FieldOrderType, v))
}

// OrderTypeLT applies the LT predicate on the "order_type" field.
func OrderTypeLT(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldLT(FieldOrderType, v))
}

// OrderTypeLTE applies the LTE predicate on the "order_type" field.
func OrderTypeLTE(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldLTE(FieldOrderType, v))
}

// OrderTypeContains applies the Contains predicate on the "order_type" field.
func OrderTypeContains(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldContains(FieldOrderType, v))
}

// OrderTypeHasPrefix applies the HasPrefix predicate on the "order_type" field.
func OrderTypeHasPrefix(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldHasPrefix(FieldOrderType, v))
}

// OrderTypeHasSuffix applies the HasSuffix predicate on the "order_type" field.
func OrderTypeHasSuffix(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldHasSuffix(FieldOrderType, v))
}

// OrderTypeIsNil applies the IsNil predicate on the "order_type" field.
func OrderTypeIsNil() predicate.OrderBase {
	return predicate.OrderBase(sql.FieldIsNull(FieldOrderType))
}

// OrderTypeNotNil applies the NotNil predicate on the "order_type" field.
func OrderTypeNotNil() predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNotNull(FieldOrderType))
}

// OrderTypeEqualFold applies the EqualFold predicate on the "order_type" field.
func OrderTypeEqualFold(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldEqualFold(FieldOrderType, v))
}

// OrderTypeContainsFold applies the ContainsFold predicate on the "order_type" field.
func OrderTypeContainsFold(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldContainsFold(FieldOrderType, v))
}

// CreateMethodEQ applies the EQ predicate on the "create_method" field.
func CreateMethodEQ(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldEQ(FieldCreateMethod, v))
}

// CreateMethodNEQ applies the NEQ predicate on the "create_method" field.
func CreateMethodNEQ(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNEQ(FieldCreateMethod, v))
}

// CreateMethodIn applies the In predicate on the "create_method" field.
func CreateMethodIn(vs ...string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldIn(FieldCreateMethod, vs...))
}

// CreateMethodNotIn applies the NotIn predicate on the "create_method" field.
func CreateMethodNotIn(vs ...string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNotIn(FieldCreateMethod, vs...))
}

// CreateMethodGT applies the GT predicate on the "create_method" field.
func CreateMethodGT(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldGT(FieldCreateMethod, v))
}

// CreateMethodGTE applies the GTE predicate on the "create_method" field.
func CreateMethodGTE(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldGTE(FieldCreateMethod, v))
}

// CreateMethodLT applies the LT predicate on the "create_method" field.
func CreateMethodLT(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldLT(FieldCreateMethod, v))
}

// CreateMethodLTE applies the LTE predicate on the "create_method" field.
func CreateMethodLTE(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldLTE(FieldCreateMethod, v))
}

// CreateMethodContains applies the Contains predicate on the "create_method" field.
func CreateMethodContains(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldContains(FieldCreateMethod, v))
}

// CreateMethodHasPrefix applies the HasPrefix predicate on the "create_method" field.
func CreateMethodHasPrefix(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldHasPrefix(FieldCreateMethod, v))
}

// CreateMethodHasSuffix applies the HasSuffix predicate on the "create_method" field.
func CreateMethodHasSuffix(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldHasSuffix(FieldCreateMethod, v))
}

// CreateMethodIsNil applies the IsNil predicate on the "create_method" field.
func CreateMethodIsNil() predicate.OrderBase {
	return predicate.OrderBase(sql.FieldIsNull(FieldCreateMethod))
}

// CreateMethodNotNil applies the NotNil predicate on the "create_method" field.
func CreateMethodNotNil() predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNotNull(FieldCreateMethod))
}

// CreateMethodEqualFold applies the EqualFold predicate on the "create_method" field.
func CreateMethodEqualFold(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldEqualFold(FieldCreateMethod, v))
}

// CreateMethodContainsFold applies the ContainsFold predicate on the "create_method" field.
func CreateMethodContainsFold(v string) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldContainsFold(FieldCreateMethod, v))
}

// SimulateEQ applies the EQ predicate on the "simulate" field.
func SimulateEQ(v bool) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldEQ(FieldSimulate, v))
}

// SimulateNEQ applies the NEQ predicate on the "simulate" field.
func SimulateNEQ(v bool) predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNEQ(FieldSimulate, v))
}

// SimulateIsNil applies the IsNil predicate on the "simulate" field.
func SimulateIsNil() predicate.OrderBase {
	return predicate.OrderBase(sql.FieldIsNull(FieldSimulate))
}

// SimulateNotNil applies the NotNil predicate on the "simulate" field.
func SimulateNotNil() predicate.OrderBase {
	return predicate.OrderBase(sql.FieldNotNull(FieldSimulate))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderBase) predicate.OrderBase {
	return predicate.OrderBase(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderBase) predicate.OrderBase {
	return predicate.OrderBase(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderBase) predicate.OrderBase {
	return predicate.OrderBase(sql.NotPredicates(p))
}

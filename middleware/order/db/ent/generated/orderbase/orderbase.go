// Code generated by ent, DO NOT EDIT.

package orderbase

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the orderbase type in the database.
	Label = "order_base"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldGoodID holds the string denoting the good_id field in the database.
	FieldGoodID = "good_id"
	// FieldAppGoodID holds the string denoting the app_good_id field in the database.
	FieldAppGoodID = "app_good_id"
	// FieldGoodType holds the string denoting the good_type field in the database.
	FieldGoodType = "good_type"
	// FieldParentOrderID holds the string denoting the parent_order_id field in the database.
	FieldParentOrderID = "parent_order_id"
	// FieldOrderType holds the string denoting the order_type field in the database.
	FieldOrderType = "order_type"
	// FieldCreateMethod holds the string denoting the create_method field in the database.
	FieldCreateMethod = "create_method"
	// FieldSimulate holds the string denoting the simulate field in the database.
	FieldSimulate = "simulate"
	// Table holds the table name of the orderbase in the database.
	Table = "order_bases"
)

// Columns holds all SQL columns for orderbase fields.
var Columns = []string{
	FieldID,
	FieldEntID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldAppID,
	FieldUserID,
	FieldGoodID,
	FieldAppGoodID,
	FieldGoodType,
	FieldParentOrderID,
	FieldOrderType,
	FieldCreateMethod,
	FieldSimulate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() uint32
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() uint32
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() uint32
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt func() uint32
	// DefaultAppID holds the default value on creation for the "app_id" field.
	DefaultAppID func() uuid.UUID
	// DefaultUserID holds the default value on creation for the "user_id" field.
	DefaultUserID func() uuid.UUID
	// DefaultGoodID holds the default value on creation for the "good_id" field.
	DefaultGoodID func() uuid.UUID
	// DefaultAppGoodID holds the default value on creation for the "app_good_id" field.
	DefaultAppGoodID func() uuid.UUID
	// DefaultGoodType holds the default value on creation for the "good_type" field.
	DefaultGoodType string
	// DefaultParentOrderID holds the default value on creation for the "parent_order_id" field.
	DefaultParentOrderID func() uuid.UUID
	// DefaultOrderType holds the default value on creation for the "order_type" field.
	DefaultOrderType string
	// DefaultCreateMethod holds the default value on creation for the "create_method" field.
	DefaultCreateMethod string
	// DefaultSimulate holds the default value on creation for the "simulate" field.
	DefaultSimulate bool
)

// OrderOption defines the ordering options for the OrderBase queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByAppID orders the results by the app_id field.
func ByAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByGoodID orders the results by the good_id field.
func ByGoodID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodID, opts...).ToFunc()
}

// ByAppGoodID orders the results by the app_good_id field.
func ByAppGoodID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppGoodID, opts...).ToFunc()
}

// ByGoodType orders the results by the good_type field.
func ByGoodType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodType, opts...).ToFunc()
}

// ByParentOrderID orders the results by the parent_order_id field.
func ByParentOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentOrderID, opts...).ToFunc()
}

// ByOrderType orders the results by the order_type field.
func ByOrderType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderType, opts...).ToFunc()
}

// ByCreateMethod orders the results by the create_method field.
func ByCreateMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateMethod, opts...).ToFunc()
}

// BySimulate orders the results by the simulate field.
func BySimulate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSimulate, opts...).ToFunc()
}

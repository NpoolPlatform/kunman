// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/payment"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// PaymentUpdate is the builder for updating Payment entities.
type PaymentUpdate struct {
	config
	hooks     []Hook
	mutation  *PaymentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PaymentUpdate builder.
func (pu *PaymentUpdate) Where(ps ...predicate.Payment) *PaymentUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetEntID sets the "ent_id" field.
func (pu *PaymentUpdate) SetEntID(u uuid.UUID) *PaymentUpdate {
	pu.mutation.SetEntID(u)
	return pu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableEntID(u *uuid.UUID) *PaymentUpdate {
	if u != nil {
		pu.SetEntID(*u)
	}
	return pu
}

// SetAppID sets the "app_id" field.
func (pu *PaymentUpdate) SetAppID(u uuid.UUID) *PaymentUpdate {
	pu.mutation.SetAppID(u)
	return pu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableAppID(u *uuid.UUID) *PaymentUpdate {
	if u != nil {
		pu.SetAppID(*u)
	}
	return pu
}

// SetUserID sets the "user_id" field.
func (pu *PaymentUpdate) SetUserID(u uuid.UUID) *PaymentUpdate {
	pu.mutation.SetUserID(u)
	return pu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableUserID(u *uuid.UUID) *PaymentUpdate {
	if u != nil {
		pu.SetUserID(*u)
	}
	return pu
}

// SetGoodID sets the "good_id" field.
func (pu *PaymentUpdate) SetGoodID(u uuid.UUID) *PaymentUpdate {
	pu.mutation.SetGoodID(u)
	return pu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableGoodID(u *uuid.UUID) *PaymentUpdate {
	if u != nil {
		pu.SetGoodID(*u)
	}
	return pu
}

// SetOrderID sets the "order_id" field.
func (pu *PaymentUpdate) SetOrderID(u uuid.UUID) *PaymentUpdate {
	pu.mutation.SetOrderID(u)
	return pu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableOrderID(u *uuid.UUID) *PaymentUpdate {
	if u != nil {
		pu.SetOrderID(*u)
	}
	return pu
}

// SetAccountID sets the "account_id" field.
func (pu *PaymentUpdate) SetAccountID(u uuid.UUID) *PaymentUpdate {
	pu.mutation.SetAccountID(u)
	return pu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableAccountID(u *uuid.UUID) *PaymentUpdate {
	if u != nil {
		pu.SetAccountID(*u)
	}
	return pu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (pu *PaymentUpdate) SetCoinTypeID(u uuid.UUID) *PaymentUpdate {
	pu.mutation.SetCoinTypeID(u)
	return pu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableCoinTypeID(u *uuid.UUID) *PaymentUpdate {
	if u != nil {
		pu.SetCoinTypeID(*u)
	}
	return pu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (pu *PaymentUpdate) ClearCoinTypeID() *PaymentUpdate {
	pu.mutation.ClearCoinTypeID()
	return pu
}

// SetCoinInfoID sets the "coin_info_id" field.
func (pu *PaymentUpdate) SetCoinInfoID(u uuid.UUID) *PaymentUpdate {
	pu.mutation.SetCoinInfoID(u)
	return pu
}

// SetNillableCoinInfoID sets the "coin_info_id" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableCoinInfoID(u *uuid.UUID) *PaymentUpdate {
	if u != nil {
		pu.SetCoinInfoID(*u)
	}
	return pu
}

// ClearCoinInfoID clears the value of the "coin_info_id" field.
func (pu *PaymentUpdate) ClearCoinInfoID() *PaymentUpdate {
	pu.mutation.ClearCoinInfoID()
	return pu
}

// SetStartAmount sets the "start_amount" field.
func (pu *PaymentUpdate) SetStartAmount(d decimal.Decimal) *PaymentUpdate {
	pu.mutation.SetStartAmount(d)
	return pu
}

// SetNillableStartAmount sets the "start_amount" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableStartAmount(d *decimal.Decimal) *PaymentUpdate {
	if d != nil {
		pu.SetStartAmount(*d)
	}
	return pu
}

// ClearStartAmount clears the value of the "start_amount" field.
func (pu *PaymentUpdate) ClearStartAmount() *PaymentUpdate {
	pu.mutation.ClearStartAmount()
	return pu
}

// Mutation returns the PaymentMutation object of the builder.
func (pu *PaymentUpdate) Mutation() *PaymentMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PaymentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PaymentUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PaymentUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PaymentUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PaymentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PaymentUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PaymentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(payment.Table, payment.Columns, sqlgraph.NewFieldSpec(payment.FieldID, field.TypeUint32))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.EntID(); ok {
		_spec.SetField(payment.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := pu.mutation.AppID(); ok {
		_spec.SetField(payment.FieldAppID, field.TypeUUID, value)
	}
	if value, ok := pu.mutation.UserID(); ok {
		_spec.SetField(payment.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := pu.mutation.GoodID(); ok {
		_spec.SetField(payment.FieldGoodID, field.TypeUUID, value)
	}
	if value, ok := pu.mutation.OrderID(); ok {
		_spec.SetField(payment.FieldOrderID, field.TypeUUID, value)
	}
	if value, ok := pu.mutation.AccountID(); ok {
		_spec.SetField(payment.FieldAccountID, field.TypeUUID, value)
	}
	if value, ok := pu.mutation.CoinTypeID(); ok {
		_spec.SetField(payment.FieldCoinTypeID, field.TypeUUID, value)
	}
	if pu.mutation.CoinTypeIDCleared() {
		_spec.ClearField(payment.FieldCoinTypeID, field.TypeUUID)
	}
	if value, ok := pu.mutation.CoinInfoID(); ok {
		_spec.SetField(payment.FieldCoinInfoID, field.TypeUUID, value)
	}
	if pu.mutation.CoinInfoIDCleared() {
		_spec.ClearField(payment.FieldCoinInfoID, field.TypeUUID)
	}
	if value, ok := pu.mutation.StartAmount(); ok {
		_spec.SetField(payment.FieldStartAmount, field.TypeOther, value)
	}
	if pu.mutation.StartAmountCleared() {
		_spec.ClearField(payment.FieldStartAmount, field.TypeOther)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PaymentUpdateOne is the builder for updating a single Payment entity.
type PaymentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PaymentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (puo *PaymentUpdateOne) SetEntID(u uuid.UUID) *PaymentUpdateOne {
	puo.mutation.SetEntID(u)
	return puo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableEntID(u *uuid.UUID) *PaymentUpdateOne {
	if u != nil {
		puo.SetEntID(*u)
	}
	return puo
}

// SetAppID sets the "app_id" field.
func (puo *PaymentUpdateOne) SetAppID(u uuid.UUID) *PaymentUpdateOne {
	puo.mutation.SetAppID(u)
	return puo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableAppID(u *uuid.UUID) *PaymentUpdateOne {
	if u != nil {
		puo.SetAppID(*u)
	}
	return puo
}

// SetUserID sets the "user_id" field.
func (puo *PaymentUpdateOne) SetUserID(u uuid.UUID) *PaymentUpdateOne {
	puo.mutation.SetUserID(u)
	return puo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableUserID(u *uuid.UUID) *PaymentUpdateOne {
	if u != nil {
		puo.SetUserID(*u)
	}
	return puo
}

// SetGoodID sets the "good_id" field.
func (puo *PaymentUpdateOne) SetGoodID(u uuid.UUID) *PaymentUpdateOne {
	puo.mutation.SetGoodID(u)
	return puo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableGoodID(u *uuid.UUID) *PaymentUpdateOne {
	if u != nil {
		puo.SetGoodID(*u)
	}
	return puo
}

// SetOrderID sets the "order_id" field.
func (puo *PaymentUpdateOne) SetOrderID(u uuid.UUID) *PaymentUpdateOne {
	puo.mutation.SetOrderID(u)
	return puo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableOrderID(u *uuid.UUID) *PaymentUpdateOne {
	if u != nil {
		puo.SetOrderID(*u)
	}
	return puo
}

// SetAccountID sets the "account_id" field.
func (puo *PaymentUpdateOne) SetAccountID(u uuid.UUID) *PaymentUpdateOne {
	puo.mutation.SetAccountID(u)
	return puo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableAccountID(u *uuid.UUID) *PaymentUpdateOne {
	if u != nil {
		puo.SetAccountID(*u)
	}
	return puo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (puo *PaymentUpdateOne) SetCoinTypeID(u uuid.UUID) *PaymentUpdateOne {
	puo.mutation.SetCoinTypeID(u)
	return puo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *PaymentUpdateOne {
	if u != nil {
		puo.SetCoinTypeID(*u)
	}
	return puo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (puo *PaymentUpdateOne) ClearCoinTypeID() *PaymentUpdateOne {
	puo.mutation.ClearCoinTypeID()
	return puo
}

// SetCoinInfoID sets the "coin_info_id" field.
func (puo *PaymentUpdateOne) SetCoinInfoID(u uuid.UUID) *PaymentUpdateOne {
	puo.mutation.SetCoinInfoID(u)
	return puo
}

// SetNillableCoinInfoID sets the "coin_info_id" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableCoinInfoID(u *uuid.UUID) *PaymentUpdateOne {
	if u != nil {
		puo.SetCoinInfoID(*u)
	}
	return puo
}

// ClearCoinInfoID clears the value of the "coin_info_id" field.
func (puo *PaymentUpdateOne) ClearCoinInfoID() *PaymentUpdateOne {
	puo.mutation.ClearCoinInfoID()
	return puo
}

// SetStartAmount sets the "start_amount" field.
func (puo *PaymentUpdateOne) SetStartAmount(d decimal.Decimal) *PaymentUpdateOne {
	puo.mutation.SetStartAmount(d)
	return puo
}

// SetNillableStartAmount sets the "start_amount" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableStartAmount(d *decimal.Decimal) *PaymentUpdateOne {
	if d != nil {
		puo.SetStartAmount(*d)
	}
	return puo
}

// ClearStartAmount clears the value of the "start_amount" field.
func (puo *PaymentUpdateOne) ClearStartAmount() *PaymentUpdateOne {
	puo.mutation.ClearStartAmount()
	return puo
}

// Mutation returns the PaymentMutation object of the builder.
func (puo *PaymentUpdateOne) Mutation() *PaymentMutation {
	return puo.mutation
}

// Where appends a list predicates to the PaymentUpdate builder.
func (puo *PaymentUpdateOne) Where(ps ...predicate.Payment) *PaymentUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PaymentUpdateOne) Select(field string, fields ...string) *PaymentUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Payment entity.
func (puo *PaymentUpdateOne) Save(ctx context.Context) (*Payment, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PaymentUpdateOne) SaveX(ctx context.Context) *Payment {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PaymentUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PaymentUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PaymentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PaymentUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PaymentUpdateOne) sqlSave(ctx context.Context) (_node *Payment, err error) {
	_spec := sqlgraph.NewUpdateSpec(payment.Table, payment.Columns, sqlgraph.NewFieldSpec(payment.FieldID, field.TypeUint32))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Payment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, payment.FieldID)
		for _, f := range fields {
			if !payment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != payment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.EntID(); ok {
		_spec.SetField(payment.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := puo.mutation.AppID(); ok {
		_spec.SetField(payment.FieldAppID, field.TypeUUID, value)
	}
	if value, ok := puo.mutation.UserID(); ok {
		_spec.SetField(payment.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := puo.mutation.GoodID(); ok {
		_spec.SetField(payment.FieldGoodID, field.TypeUUID, value)
	}
	if value, ok := puo.mutation.OrderID(); ok {
		_spec.SetField(payment.FieldOrderID, field.TypeUUID, value)
	}
	if value, ok := puo.mutation.AccountID(); ok {
		_spec.SetField(payment.FieldAccountID, field.TypeUUID, value)
	}
	if value, ok := puo.mutation.CoinTypeID(); ok {
		_spec.SetField(payment.FieldCoinTypeID, field.TypeUUID, value)
	}
	if puo.mutation.CoinTypeIDCleared() {
		_spec.ClearField(payment.FieldCoinTypeID, field.TypeUUID)
	}
	if value, ok := puo.mutation.CoinInfoID(); ok {
		_spec.SetField(payment.FieldCoinInfoID, field.TypeUUID, value)
	}
	if puo.mutation.CoinInfoIDCleared() {
		_spec.ClearField(payment.FieldCoinInfoID, field.TypeUUID)
	}
	if value, ok := puo.mutation.StartAmount(); ok {
		_spec.SetField(payment.FieldStartAmount, field.TypeOther, value)
	}
	if puo.mutation.StartAmountCleared() {
		_spec.ClearField(payment.FieldStartAmount, field.TypeOther)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Payment{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}

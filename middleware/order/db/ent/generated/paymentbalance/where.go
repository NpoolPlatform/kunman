// Code generated by ent, DO NOT EDIT.

package paymentbalance

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldEQ(FieldEntID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldEQ(FieldDeletedAt, v))
}

// PaymentID applies equality check predicate on the "payment_id" field. It's identical to PaymentIDEQ.
func PaymentID(v uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldEQ(FieldPaymentID, v))
}

// CoinTypeID applies equality check predicate on the "coin_type_id" field. It's identical to CoinTypeIDEQ.
func CoinTypeID(v uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldEQ(FieldCoinTypeID, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldEQ(FieldAmount, v))
}

// CoinUsdCurrency applies equality check predicate on the "coin_usd_currency" field. It's identical to CoinUsdCurrencyEQ.
func CoinUsdCurrency(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldEQ(FieldCoinUsdCurrency, v))
}

// LocalCoinUsdCurrency applies equality check predicate on the "local_coin_usd_currency" field. It's identical to LocalCoinUsdCurrencyEQ.
func LocalCoinUsdCurrency(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldEQ(FieldLocalCoinUsdCurrency, v))
}

// LiveCoinUsdCurrency applies equality check predicate on the "live_coin_usd_currency" field. It's identical to LiveCoinUsdCurrencyEQ.
func LiveCoinUsdCurrency(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldEQ(FieldLiveCoinUsdCurrency, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldLTE(FieldEntID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldLTE(FieldDeletedAt, v))
}

// PaymentIDEQ applies the EQ predicate on the "payment_id" field.
func PaymentIDEQ(v uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldEQ(FieldPaymentID, v))
}

// PaymentIDNEQ applies the NEQ predicate on the "payment_id" field.
func PaymentIDNEQ(v uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNEQ(FieldPaymentID, v))
}

// PaymentIDIn applies the In predicate on the "payment_id" field.
func PaymentIDIn(vs ...uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldIn(FieldPaymentID, vs...))
}

// PaymentIDNotIn applies the NotIn predicate on the "payment_id" field.
func PaymentIDNotIn(vs ...uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNotIn(FieldPaymentID, vs...))
}

// PaymentIDGT applies the GT predicate on the "payment_id" field.
func PaymentIDGT(v uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldGT(FieldPaymentID, v))
}

// PaymentIDGTE applies the GTE predicate on the "payment_id" field.
func PaymentIDGTE(v uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldGTE(FieldPaymentID, v))
}

// PaymentIDLT applies the LT predicate on the "payment_id" field.
func PaymentIDLT(v uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldLT(FieldPaymentID, v))
}

// PaymentIDLTE applies the LTE predicate on the "payment_id" field.
func PaymentIDLTE(v uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldLTE(FieldPaymentID, v))
}

// PaymentIDIsNil applies the IsNil predicate on the "payment_id" field.
func PaymentIDIsNil() predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldIsNull(FieldPaymentID))
}

// PaymentIDNotNil applies the NotNil predicate on the "payment_id" field.
func PaymentIDNotNil() predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNotNull(FieldPaymentID))
}

// CoinTypeIDEQ applies the EQ predicate on the "coin_type_id" field.
func CoinTypeIDEQ(v uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldEQ(FieldCoinTypeID, v))
}

// CoinTypeIDNEQ applies the NEQ predicate on the "coin_type_id" field.
func CoinTypeIDNEQ(v uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNEQ(FieldCoinTypeID, v))
}

// CoinTypeIDIn applies the In predicate on the "coin_type_id" field.
func CoinTypeIDIn(vs ...uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldIn(FieldCoinTypeID, vs...))
}

// CoinTypeIDNotIn applies the NotIn predicate on the "coin_type_id" field.
func CoinTypeIDNotIn(vs ...uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNotIn(FieldCoinTypeID, vs...))
}

// CoinTypeIDGT applies the GT predicate on the "coin_type_id" field.
func CoinTypeIDGT(v uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldGT(FieldCoinTypeID, v))
}

// CoinTypeIDGTE applies the GTE predicate on the "coin_type_id" field.
func CoinTypeIDGTE(v uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldGTE(FieldCoinTypeID, v))
}

// CoinTypeIDLT applies the LT predicate on the "coin_type_id" field.
func CoinTypeIDLT(v uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldLT(FieldCoinTypeID, v))
}

// CoinTypeIDLTE applies the LTE predicate on the "coin_type_id" field.
func CoinTypeIDLTE(v uuid.UUID) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldLTE(FieldCoinTypeID, v))
}

// CoinTypeIDIsNil applies the IsNil predicate on the "coin_type_id" field.
func CoinTypeIDIsNil() predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldIsNull(FieldCoinTypeID))
}

// CoinTypeIDNotNil applies the NotNil predicate on the "coin_type_id" field.
func CoinTypeIDNotNil() predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNotNull(FieldCoinTypeID))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldLTE(FieldAmount, v))
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldIsNull(FieldAmount))
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNotNull(FieldAmount))
}

// CoinUsdCurrencyEQ applies the EQ predicate on the "coin_usd_currency" field.
func CoinUsdCurrencyEQ(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldEQ(FieldCoinUsdCurrency, v))
}

// CoinUsdCurrencyNEQ applies the NEQ predicate on the "coin_usd_currency" field.
func CoinUsdCurrencyNEQ(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNEQ(FieldCoinUsdCurrency, v))
}

// CoinUsdCurrencyIn applies the In predicate on the "coin_usd_currency" field.
func CoinUsdCurrencyIn(vs ...decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldIn(FieldCoinUsdCurrency, vs...))
}

// CoinUsdCurrencyNotIn applies the NotIn predicate on the "coin_usd_currency" field.
func CoinUsdCurrencyNotIn(vs ...decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNotIn(FieldCoinUsdCurrency, vs...))
}

// CoinUsdCurrencyGT applies the GT predicate on the "coin_usd_currency" field.
func CoinUsdCurrencyGT(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldGT(FieldCoinUsdCurrency, v))
}

// CoinUsdCurrencyGTE applies the GTE predicate on the "coin_usd_currency" field.
func CoinUsdCurrencyGTE(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldGTE(FieldCoinUsdCurrency, v))
}

// CoinUsdCurrencyLT applies the LT predicate on the "coin_usd_currency" field.
func CoinUsdCurrencyLT(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldLT(FieldCoinUsdCurrency, v))
}

// CoinUsdCurrencyLTE applies the LTE predicate on the "coin_usd_currency" field.
func CoinUsdCurrencyLTE(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldLTE(FieldCoinUsdCurrency, v))
}

// CoinUsdCurrencyIsNil applies the IsNil predicate on the "coin_usd_currency" field.
func CoinUsdCurrencyIsNil() predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldIsNull(FieldCoinUsdCurrency))
}

// CoinUsdCurrencyNotNil applies the NotNil predicate on the "coin_usd_currency" field.
func CoinUsdCurrencyNotNil() predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNotNull(FieldCoinUsdCurrency))
}

// LocalCoinUsdCurrencyEQ applies the EQ predicate on the "local_coin_usd_currency" field.
func LocalCoinUsdCurrencyEQ(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldEQ(FieldLocalCoinUsdCurrency, v))
}

// LocalCoinUsdCurrencyNEQ applies the NEQ predicate on the "local_coin_usd_currency" field.
func LocalCoinUsdCurrencyNEQ(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNEQ(FieldLocalCoinUsdCurrency, v))
}

// LocalCoinUsdCurrencyIn applies the In predicate on the "local_coin_usd_currency" field.
func LocalCoinUsdCurrencyIn(vs ...decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldIn(FieldLocalCoinUsdCurrency, vs...))
}

// LocalCoinUsdCurrencyNotIn applies the NotIn predicate on the "local_coin_usd_currency" field.
func LocalCoinUsdCurrencyNotIn(vs ...decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNotIn(FieldLocalCoinUsdCurrency, vs...))
}

// LocalCoinUsdCurrencyGT applies the GT predicate on the "local_coin_usd_currency" field.
func LocalCoinUsdCurrencyGT(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldGT(FieldLocalCoinUsdCurrency, v))
}

// LocalCoinUsdCurrencyGTE applies the GTE predicate on the "local_coin_usd_currency" field.
func LocalCoinUsdCurrencyGTE(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldGTE(FieldLocalCoinUsdCurrency, v))
}

// LocalCoinUsdCurrencyLT applies the LT predicate on the "local_coin_usd_currency" field.
func LocalCoinUsdCurrencyLT(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldLT(FieldLocalCoinUsdCurrency, v))
}

// LocalCoinUsdCurrencyLTE applies the LTE predicate on the "local_coin_usd_currency" field.
func LocalCoinUsdCurrencyLTE(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldLTE(FieldLocalCoinUsdCurrency, v))
}

// LocalCoinUsdCurrencyIsNil applies the IsNil predicate on the "local_coin_usd_currency" field.
func LocalCoinUsdCurrencyIsNil() predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldIsNull(FieldLocalCoinUsdCurrency))
}

// LocalCoinUsdCurrencyNotNil applies the NotNil predicate on the "local_coin_usd_currency" field.
func LocalCoinUsdCurrencyNotNil() predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNotNull(FieldLocalCoinUsdCurrency))
}

// LiveCoinUsdCurrencyEQ applies the EQ predicate on the "live_coin_usd_currency" field.
func LiveCoinUsdCurrencyEQ(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldEQ(FieldLiveCoinUsdCurrency, v))
}

// LiveCoinUsdCurrencyNEQ applies the NEQ predicate on the "live_coin_usd_currency" field.
func LiveCoinUsdCurrencyNEQ(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNEQ(FieldLiveCoinUsdCurrency, v))
}

// LiveCoinUsdCurrencyIn applies the In predicate on the "live_coin_usd_currency" field.
func LiveCoinUsdCurrencyIn(vs ...decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldIn(FieldLiveCoinUsdCurrency, vs...))
}

// LiveCoinUsdCurrencyNotIn applies the NotIn predicate on the "live_coin_usd_currency" field.
func LiveCoinUsdCurrencyNotIn(vs ...decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNotIn(FieldLiveCoinUsdCurrency, vs...))
}

// LiveCoinUsdCurrencyGT applies the GT predicate on the "live_coin_usd_currency" field.
func LiveCoinUsdCurrencyGT(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldGT(FieldLiveCoinUsdCurrency, v))
}

// LiveCoinUsdCurrencyGTE applies the GTE predicate on the "live_coin_usd_currency" field.
func LiveCoinUsdCurrencyGTE(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldGTE(FieldLiveCoinUsdCurrency, v))
}

// LiveCoinUsdCurrencyLT applies the LT predicate on the "live_coin_usd_currency" field.
func LiveCoinUsdCurrencyLT(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldLT(FieldLiveCoinUsdCurrency, v))
}

// LiveCoinUsdCurrencyLTE applies the LTE predicate on the "live_coin_usd_currency" field.
func LiveCoinUsdCurrencyLTE(v decimal.Decimal) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldLTE(FieldLiveCoinUsdCurrency, v))
}

// LiveCoinUsdCurrencyIsNil applies the IsNil predicate on the "live_coin_usd_currency" field.
func LiveCoinUsdCurrencyIsNil() predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldIsNull(FieldLiveCoinUsdCurrency))
}

// LiveCoinUsdCurrencyNotNil applies the NotNil predicate on the "live_coin_usd_currency" field.
func LiveCoinUsdCurrencyNotNil() predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.FieldNotNull(FieldLiveCoinUsdCurrency))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PaymentBalance) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PaymentBalance) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PaymentBalance) predicate.PaymentBalance {
	return predicate.PaymentBalance(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/paymentbalancelock"
	"github.com/google/uuid"
)

// PaymentBalanceLockCreate is the builder for creating a PaymentBalanceLock entity.
type PaymentBalanceLockCreate struct {
	config
	mutation *PaymentBalanceLockMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (pblc *PaymentBalanceLockCreate) SetEntID(u uuid.UUID) *PaymentBalanceLockCreate {
	pblc.mutation.SetEntID(u)
	return pblc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (pblc *PaymentBalanceLockCreate) SetNillableEntID(u *uuid.UUID) *PaymentBalanceLockCreate {
	if u != nil {
		pblc.SetEntID(*u)
	}
	return pblc
}

// SetPaymentID sets the "payment_id" field.
func (pblc *PaymentBalanceLockCreate) SetPaymentID(u uuid.UUID) *PaymentBalanceLockCreate {
	pblc.mutation.SetPaymentID(u)
	return pblc
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (pblc *PaymentBalanceLockCreate) SetNillablePaymentID(u *uuid.UUID) *PaymentBalanceLockCreate {
	if u != nil {
		pblc.SetPaymentID(*u)
	}
	return pblc
}

// SetLedgerLockID sets the "ledger_lock_id" field.
func (pblc *PaymentBalanceLockCreate) SetLedgerLockID(u uuid.UUID) *PaymentBalanceLockCreate {
	pblc.mutation.SetLedgerLockID(u)
	return pblc
}

// SetNillableLedgerLockID sets the "ledger_lock_id" field if the given value is not nil.
func (pblc *PaymentBalanceLockCreate) SetNillableLedgerLockID(u *uuid.UUID) *PaymentBalanceLockCreate {
	if u != nil {
		pblc.SetLedgerLockID(*u)
	}
	return pblc
}

// SetID sets the "id" field.
func (pblc *PaymentBalanceLockCreate) SetID(u uint32) *PaymentBalanceLockCreate {
	pblc.mutation.SetID(u)
	return pblc
}

// Mutation returns the PaymentBalanceLockMutation object of the builder.
func (pblc *PaymentBalanceLockCreate) Mutation() *PaymentBalanceLockMutation {
	return pblc.mutation
}

// Save creates the PaymentBalanceLock in the database.
func (pblc *PaymentBalanceLockCreate) Save(ctx context.Context) (*PaymentBalanceLock, error) {
	pblc.defaults()
	return withHooks(ctx, pblc.sqlSave, pblc.mutation, pblc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pblc *PaymentBalanceLockCreate) SaveX(ctx context.Context) *PaymentBalanceLock {
	v, err := pblc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pblc *PaymentBalanceLockCreate) Exec(ctx context.Context) error {
	_, err := pblc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pblc *PaymentBalanceLockCreate) ExecX(ctx context.Context) {
	if err := pblc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pblc *PaymentBalanceLockCreate) defaults() {
	if _, ok := pblc.mutation.EntID(); !ok {
		v := paymentbalancelock.DefaultEntID()
		pblc.mutation.SetEntID(v)
	}
	if _, ok := pblc.mutation.PaymentID(); !ok {
		v := paymentbalancelock.DefaultPaymentID()
		pblc.mutation.SetPaymentID(v)
	}
	if _, ok := pblc.mutation.LedgerLockID(); !ok {
		v := paymentbalancelock.DefaultLedgerLockID()
		pblc.mutation.SetLedgerLockID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pblc *PaymentBalanceLockCreate) check() error {
	if _, ok := pblc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`generated: missing required field "PaymentBalanceLock.ent_id"`)}
	}
	return nil
}

func (pblc *PaymentBalanceLockCreate) sqlSave(ctx context.Context) (*PaymentBalanceLock, error) {
	if err := pblc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pblc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pblc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	pblc.mutation.id = &_node.ID
	pblc.mutation.done = true
	return _node, nil
}

func (pblc *PaymentBalanceLockCreate) createSpec() (*PaymentBalanceLock, *sqlgraph.CreateSpec) {
	var (
		_node = &PaymentBalanceLock{config: pblc.config}
		_spec = sqlgraph.NewCreateSpec(paymentbalancelock.Table, sqlgraph.NewFieldSpec(paymentbalancelock.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = pblc.conflict
	if id, ok := pblc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pblc.mutation.EntID(); ok {
		_spec.SetField(paymentbalancelock.FieldEntID, field.TypeUUID, value)
		_node.EntID = value
	}
	if value, ok := pblc.mutation.PaymentID(); ok {
		_spec.SetField(paymentbalancelock.FieldPaymentID, field.TypeUUID, value)
		_node.PaymentID = value
	}
	if value, ok := pblc.mutation.LedgerLockID(); ok {
		_spec.SetField(paymentbalancelock.FieldLedgerLockID, field.TypeUUID, value)
		_node.LedgerLockID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PaymentBalanceLock.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaymentBalanceLockUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (pblc *PaymentBalanceLockCreate) OnConflict(opts ...sql.ConflictOption) *PaymentBalanceLockUpsertOne {
	pblc.conflict = opts
	return &PaymentBalanceLockUpsertOne{
		create: pblc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PaymentBalanceLock.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pblc *PaymentBalanceLockCreate) OnConflictColumns(columns ...string) *PaymentBalanceLockUpsertOne {
	pblc.conflict = append(pblc.conflict, sql.ConflictColumns(columns...))
	return &PaymentBalanceLockUpsertOne{
		create: pblc,
	}
}

type (
	// PaymentBalanceLockUpsertOne is the builder for "upsert"-ing
	//  one PaymentBalanceLock node.
	PaymentBalanceLockUpsertOne struct {
		create *PaymentBalanceLockCreate
	}

	// PaymentBalanceLockUpsert is the "OnConflict" setter.
	PaymentBalanceLockUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *PaymentBalanceLockUpsert) SetEntID(v uuid.UUID) *PaymentBalanceLockUpsert {
	u.Set(paymentbalancelock.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PaymentBalanceLockUpsert) UpdateEntID() *PaymentBalanceLockUpsert {
	u.SetExcluded(paymentbalancelock.FieldEntID)
	return u
}

// SetPaymentID sets the "payment_id" field.
func (u *PaymentBalanceLockUpsert) SetPaymentID(v uuid.UUID) *PaymentBalanceLockUpsert {
	u.Set(paymentbalancelock.FieldPaymentID, v)
	return u
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *PaymentBalanceLockUpsert) UpdatePaymentID() *PaymentBalanceLockUpsert {
	u.SetExcluded(paymentbalancelock.FieldPaymentID)
	return u
}

// ClearPaymentID clears the value of the "payment_id" field.
func (u *PaymentBalanceLockUpsert) ClearPaymentID() *PaymentBalanceLockUpsert {
	u.SetNull(paymentbalancelock.FieldPaymentID)
	return u
}

// SetLedgerLockID sets the "ledger_lock_id" field.
func (u *PaymentBalanceLockUpsert) SetLedgerLockID(v uuid.UUID) *PaymentBalanceLockUpsert {
	u.Set(paymentbalancelock.FieldLedgerLockID, v)
	return u
}

// UpdateLedgerLockID sets the "ledger_lock_id" field to the value that was provided on create.
func (u *PaymentBalanceLockUpsert) UpdateLedgerLockID() *PaymentBalanceLockUpsert {
	u.SetExcluded(paymentbalancelock.FieldLedgerLockID)
	return u
}

// ClearLedgerLockID clears the value of the "ledger_lock_id" field.
func (u *PaymentBalanceLockUpsert) ClearLedgerLockID() *PaymentBalanceLockUpsert {
	u.SetNull(paymentbalancelock.FieldLedgerLockID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PaymentBalanceLock.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(paymentbalancelock.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PaymentBalanceLockUpsertOne) UpdateNewValues() *PaymentBalanceLockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(paymentbalancelock.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PaymentBalanceLock.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PaymentBalanceLockUpsertOne) Ignore() *PaymentBalanceLockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaymentBalanceLockUpsertOne) DoNothing() *PaymentBalanceLockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaymentBalanceLockCreate.OnConflict
// documentation for more info.
func (u *PaymentBalanceLockUpsertOne) Update(set func(*PaymentBalanceLockUpsert)) *PaymentBalanceLockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaymentBalanceLockUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *PaymentBalanceLockUpsertOne) SetEntID(v uuid.UUID) *PaymentBalanceLockUpsertOne {
	return u.Update(func(s *PaymentBalanceLockUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PaymentBalanceLockUpsertOne) UpdateEntID() *PaymentBalanceLockUpsertOne {
	return u.Update(func(s *PaymentBalanceLockUpsert) {
		s.UpdateEntID()
	})
}

// SetPaymentID sets the "payment_id" field.
func (u *PaymentBalanceLockUpsertOne) SetPaymentID(v uuid.UUID) *PaymentBalanceLockUpsertOne {
	return u.Update(func(s *PaymentBalanceLockUpsert) {
		s.SetPaymentID(v)
	})
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *PaymentBalanceLockUpsertOne) UpdatePaymentID() *PaymentBalanceLockUpsertOne {
	return u.Update(func(s *PaymentBalanceLockUpsert) {
		s.UpdatePaymentID()
	})
}

// ClearPaymentID clears the value of the "payment_id" field.
func (u *PaymentBalanceLockUpsertOne) ClearPaymentID() *PaymentBalanceLockUpsertOne {
	return u.Update(func(s *PaymentBalanceLockUpsert) {
		s.ClearPaymentID()
	})
}

// SetLedgerLockID sets the "ledger_lock_id" field.
func (u *PaymentBalanceLockUpsertOne) SetLedgerLockID(v uuid.UUID) *PaymentBalanceLockUpsertOne {
	return u.Update(func(s *PaymentBalanceLockUpsert) {
		s.SetLedgerLockID(v)
	})
}

// UpdateLedgerLockID sets the "ledger_lock_id" field to the value that was provided on create.
func (u *PaymentBalanceLockUpsertOne) UpdateLedgerLockID() *PaymentBalanceLockUpsertOne {
	return u.Update(func(s *PaymentBalanceLockUpsert) {
		s.UpdateLedgerLockID()
	})
}

// ClearLedgerLockID clears the value of the "ledger_lock_id" field.
func (u *PaymentBalanceLockUpsertOne) ClearLedgerLockID() *PaymentBalanceLockUpsertOne {
	return u.Update(func(s *PaymentBalanceLockUpsert) {
		s.ClearLedgerLockID()
	})
}

// Exec executes the query.
func (u *PaymentBalanceLockUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for PaymentBalanceLockCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentBalanceLockUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PaymentBalanceLockUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PaymentBalanceLockUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PaymentBalanceLockCreateBulk is the builder for creating many PaymentBalanceLock entities in bulk.
type PaymentBalanceLockCreateBulk struct {
	config
	err      error
	builders []*PaymentBalanceLockCreate
	conflict []sql.ConflictOption
}

// Save creates the PaymentBalanceLock entities in the database.
func (pblcb *PaymentBalanceLockCreateBulk) Save(ctx context.Context) ([]*PaymentBalanceLock, error) {
	if pblcb.err != nil {
		return nil, pblcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pblcb.builders))
	nodes := make([]*PaymentBalanceLock, len(pblcb.builders))
	mutators := make([]Mutator, len(pblcb.builders))
	for i := range pblcb.builders {
		func(i int, root context.Context) {
			builder := pblcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentBalanceLockMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pblcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pblcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pblcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pblcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pblcb *PaymentBalanceLockCreateBulk) SaveX(ctx context.Context) []*PaymentBalanceLock {
	v, err := pblcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pblcb *PaymentBalanceLockCreateBulk) Exec(ctx context.Context) error {
	_, err := pblcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pblcb *PaymentBalanceLockCreateBulk) ExecX(ctx context.Context) {
	if err := pblcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PaymentBalanceLock.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaymentBalanceLockUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (pblcb *PaymentBalanceLockCreateBulk) OnConflict(opts ...sql.ConflictOption) *PaymentBalanceLockUpsertBulk {
	pblcb.conflict = opts
	return &PaymentBalanceLockUpsertBulk{
		create: pblcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PaymentBalanceLock.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pblcb *PaymentBalanceLockCreateBulk) OnConflictColumns(columns ...string) *PaymentBalanceLockUpsertBulk {
	pblcb.conflict = append(pblcb.conflict, sql.ConflictColumns(columns...))
	return &PaymentBalanceLockUpsertBulk{
		create: pblcb,
	}
}

// PaymentBalanceLockUpsertBulk is the builder for "upsert"-ing
// a bulk of PaymentBalanceLock nodes.
type PaymentBalanceLockUpsertBulk struct {
	create *PaymentBalanceLockCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PaymentBalanceLock.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(paymentbalancelock.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PaymentBalanceLockUpsertBulk) UpdateNewValues() *PaymentBalanceLockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(paymentbalancelock.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PaymentBalanceLock.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PaymentBalanceLockUpsertBulk) Ignore() *PaymentBalanceLockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaymentBalanceLockUpsertBulk) DoNothing() *PaymentBalanceLockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaymentBalanceLockCreateBulk.OnConflict
// documentation for more info.
func (u *PaymentBalanceLockUpsertBulk) Update(set func(*PaymentBalanceLockUpsert)) *PaymentBalanceLockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaymentBalanceLockUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *PaymentBalanceLockUpsertBulk) SetEntID(v uuid.UUID) *PaymentBalanceLockUpsertBulk {
	return u.Update(func(s *PaymentBalanceLockUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PaymentBalanceLockUpsertBulk) UpdateEntID() *PaymentBalanceLockUpsertBulk {
	return u.Update(func(s *PaymentBalanceLockUpsert) {
		s.UpdateEntID()
	})
}

// SetPaymentID sets the "payment_id" field.
func (u *PaymentBalanceLockUpsertBulk) SetPaymentID(v uuid.UUID) *PaymentBalanceLockUpsertBulk {
	return u.Update(func(s *PaymentBalanceLockUpsert) {
		s.SetPaymentID(v)
	})
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *PaymentBalanceLockUpsertBulk) UpdatePaymentID() *PaymentBalanceLockUpsertBulk {
	return u.Update(func(s *PaymentBalanceLockUpsert) {
		s.UpdatePaymentID()
	})
}

// ClearPaymentID clears the value of the "payment_id" field.
func (u *PaymentBalanceLockUpsertBulk) ClearPaymentID() *PaymentBalanceLockUpsertBulk {
	return u.Update(func(s *PaymentBalanceLockUpsert) {
		s.ClearPaymentID()
	})
}

// SetLedgerLockID sets the "ledger_lock_id" field.
func (u *PaymentBalanceLockUpsertBulk) SetLedgerLockID(v uuid.UUID) *PaymentBalanceLockUpsertBulk {
	return u.Update(func(s *PaymentBalanceLockUpsert) {
		s.SetLedgerLockID(v)
	})
}

// UpdateLedgerLockID sets the "ledger_lock_id" field to the value that was provided on create.
func (u *PaymentBalanceLockUpsertBulk) UpdateLedgerLockID() *PaymentBalanceLockUpsertBulk {
	return u.Update(func(s *PaymentBalanceLockUpsert) {
		s.UpdateLedgerLockID()
	})
}

// ClearLedgerLockID clears the value of the "ledger_lock_id" field.
func (u *PaymentBalanceLockUpsertBulk) ClearLedgerLockID() *PaymentBalanceLockUpsertBulk {
	return u.Update(func(s *PaymentBalanceLockUpsert) {
		s.ClearLedgerLockID()
	})
}

// Exec executes the query.
func (u *PaymentBalanceLockUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the PaymentBalanceLockCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for PaymentBalanceLockCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentBalanceLockUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/appconfig"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/compensate"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/feeorder"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/feeorderstate"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/order"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/orderbase"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/ordercoupon"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/orderlock"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/orderstate"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/orderstatebase"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/outofgas"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/payment"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/paymentbalance"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/paymentbalancelock"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/paymentbase"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/paymentcontract"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/paymenttransfer"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/poolorderuser"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/powerrental"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/powerrentalstate"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AppConfig is the client for interacting with the AppConfig builders.
	AppConfig *AppConfigClient
	// Compensate is the client for interacting with the Compensate builders.
	Compensate *CompensateClient
	// FeeOrder is the client for interacting with the FeeOrder builders.
	FeeOrder *FeeOrderClient
	// FeeOrderState is the client for interacting with the FeeOrderState builders.
	FeeOrderState *FeeOrderStateClient
	// Order is the client for interacting with the Order builders.
	Order *OrderClient
	// OrderBase is the client for interacting with the OrderBase builders.
	OrderBase *OrderBaseClient
	// OrderCoupon is the client for interacting with the OrderCoupon builders.
	OrderCoupon *OrderCouponClient
	// OrderLock is the client for interacting with the OrderLock builders.
	OrderLock *OrderLockClient
	// OrderState is the client for interacting with the OrderState builders.
	OrderState *OrderStateClient
	// OrderStateBase is the client for interacting with the OrderStateBase builders.
	OrderStateBase *OrderStateBaseClient
	// OutOfGas is the client for interacting with the OutOfGas builders.
	OutOfGas *OutOfGasClient
	// Payment is the client for interacting with the Payment builders.
	Payment *PaymentClient
	// PaymentBalance is the client for interacting with the PaymentBalance builders.
	PaymentBalance *PaymentBalanceClient
	// PaymentBalanceLock is the client for interacting with the PaymentBalanceLock builders.
	PaymentBalanceLock *PaymentBalanceLockClient
	// PaymentBase is the client for interacting with the PaymentBase builders.
	PaymentBase *PaymentBaseClient
	// PaymentContract is the client for interacting with the PaymentContract builders.
	PaymentContract *PaymentContractClient
	// PaymentTransfer is the client for interacting with the PaymentTransfer builders.
	PaymentTransfer *PaymentTransferClient
	// PoolOrderUser is the client for interacting with the PoolOrderUser builders.
	PoolOrderUser *PoolOrderUserClient
	// PowerRental is the client for interacting with the PowerRental builders.
	PowerRental *PowerRentalClient
	// PowerRentalState is the client for interacting with the PowerRentalState builders.
	PowerRentalState *PowerRentalStateClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AppConfig = NewAppConfigClient(c.config)
	c.Compensate = NewCompensateClient(c.config)
	c.FeeOrder = NewFeeOrderClient(c.config)
	c.FeeOrderState = NewFeeOrderStateClient(c.config)
	c.Order = NewOrderClient(c.config)
	c.OrderBase = NewOrderBaseClient(c.config)
	c.OrderCoupon = NewOrderCouponClient(c.config)
	c.OrderLock = NewOrderLockClient(c.config)
	c.OrderState = NewOrderStateClient(c.config)
	c.OrderStateBase = NewOrderStateBaseClient(c.config)
	c.OutOfGas = NewOutOfGasClient(c.config)
	c.Payment = NewPaymentClient(c.config)
	c.PaymentBalance = NewPaymentBalanceClient(c.config)
	c.PaymentBalanceLock = NewPaymentBalanceLockClient(c.config)
	c.PaymentBase = NewPaymentBaseClient(c.config)
	c.PaymentContract = NewPaymentContractClient(c.config)
	c.PaymentTransfer = NewPaymentTransferClient(c.config)
	c.PoolOrderUser = NewPoolOrderUserClient(c.config)
	c.PowerRental = NewPowerRentalClient(c.config)
	c.PowerRentalState = NewPowerRentalStateClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("generated: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("generated: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		AppConfig:          NewAppConfigClient(cfg),
		Compensate:         NewCompensateClient(cfg),
		FeeOrder:           NewFeeOrderClient(cfg),
		FeeOrderState:      NewFeeOrderStateClient(cfg),
		Order:              NewOrderClient(cfg),
		OrderBase:          NewOrderBaseClient(cfg),
		OrderCoupon:        NewOrderCouponClient(cfg),
		OrderLock:          NewOrderLockClient(cfg),
		OrderState:         NewOrderStateClient(cfg),
		OrderStateBase:     NewOrderStateBaseClient(cfg),
		OutOfGas:           NewOutOfGasClient(cfg),
		Payment:            NewPaymentClient(cfg),
		PaymentBalance:     NewPaymentBalanceClient(cfg),
		PaymentBalanceLock: NewPaymentBalanceLockClient(cfg),
		PaymentBase:        NewPaymentBaseClient(cfg),
		PaymentContract:    NewPaymentContractClient(cfg),
		PaymentTransfer:    NewPaymentTransferClient(cfg),
		PoolOrderUser:      NewPoolOrderUserClient(cfg),
		PowerRental:        NewPowerRentalClient(cfg),
		PowerRentalState:   NewPowerRentalStateClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		AppConfig:          NewAppConfigClient(cfg),
		Compensate:         NewCompensateClient(cfg),
		FeeOrder:           NewFeeOrderClient(cfg),
		FeeOrderState:      NewFeeOrderStateClient(cfg),
		Order:              NewOrderClient(cfg),
		OrderBase:          NewOrderBaseClient(cfg),
		OrderCoupon:        NewOrderCouponClient(cfg),
		OrderLock:          NewOrderLockClient(cfg),
		OrderState:         NewOrderStateClient(cfg),
		OrderStateBase:     NewOrderStateBaseClient(cfg),
		OutOfGas:           NewOutOfGasClient(cfg),
		Payment:            NewPaymentClient(cfg),
		PaymentBalance:     NewPaymentBalanceClient(cfg),
		PaymentBalanceLock: NewPaymentBalanceLockClient(cfg),
		PaymentBase:        NewPaymentBaseClient(cfg),
		PaymentContract:    NewPaymentContractClient(cfg),
		PaymentTransfer:    NewPaymentTransferClient(cfg),
		PoolOrderUser:      NewPoolOrderUserClient(cfg),
		PowerRental:        NewPowerRentalClient(cfg),
		PowerRentalState:   NewPowerRentalStateClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AppConfig.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AppConfig, c.Compensate, c.FeeOrder, c.FeeOrderState, c.Order, c.OrderBase,
		c.OrderCoupon, c.OrderLock, c.OrderState, c.OrderStateBase, c.OutOfGas,
		c.Payment, c.PaymentBalance, c.PaymentBalanceLock, c.PaymentBase,
		c.PaymentContract, c.PaymentTransfer, c.PoolOrderUser, c.PowerRental,
		c.PowerRentalState,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AppConfig, c.Compensate, c.FeeOrder, c.FeeOrderState, c.Order, c.OrderBase,
		c.OrderCoupon, c.OrderLock, c.OrderState, c.OrderStateBase, c.OutOfGas,
		c.Payment, c.PaymentBalance, c.PaymentBalanceLock, c.PaymentBase,
		c.PaymentContract, c.PaymentTransfer, c.PoolOrderUser, c.PowerRental,
		c.PowerRentalState,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AppConfigMutation:
		return c.AppConfig.mutate(ctx, m)
	case *CompensateMutation:
		return c.Compensate.mutate(ctx, m)
	case *FeeOrderMutation:
		return c.FeeOrder.mutate(ctx, m)
	case *FeeOrderStateMutation:
		return c.FeeOrderState.mutate(ctx, m)
	case *OrderMutation:
		return c.Order.mutate(ctx, m)
	case *OrderBaseMutation:
		return c.OrderBase.mutate(ctx, m)
	case *OrderCouponMutation:
		return c.OrderCoupon.mutate(ctx, m)
	case *OrderLockMutation:
		return c.OrderLock.mutate(ctx, m)
	case *OrderStateMutation:
		return c.OrderState.mutate(ctx, m)
	case *OrderStateBaseMutation:
		return c.OrderStateBase.mutate(ctx, m)
	case *OutOfGasMutation:
		return c.OutOfGas.mutate(ctx, m)
	case *PaymentMutation:
		return c.Payment.mutate(ctx, m)
	case *PaymentBalanceMutation:
		return c.PaymentBalance.mutate(ctx, m)
	case *PaymentBalanceLockMutation:
		return c.PaymentBalanceLock.mutate(ctx, m)
	case *PaymentBaseMutation:
		return c.PaymentBase.mutate(ctx, m)
	case *PaymentContractMutation:
		return c.PaymentContract.mutate(ctx, m)
	case *PaymentTransferMutation:
		return c.PaymentTransfer.mutate(ctx, m)
	case *PoolOrderUserMutation:
		return c.PoolOrderUser.mutate(ctx, m)
	case *PowerRentalMutation:
		return c.PowerRental.mutate(ctx, m)
	case *PowerRentalStateMutation:
		return c.PowerRentalState.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("generated: unknown mutation type %T", m)
	}
}

// AppConfigClient is a client for the AppConfig schema.
type AppConfigClient struct {
	config
}

// NewAppConfigClient returns a client for the AppConfig from the given config.
func NewAppConfigClient(c config) *AppConfigClient {
	return &AppConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appconfig.Hooks(f(g(h())))`.
func (c *AppConfigClient) Use(hooks ...Hook) {
	c.hooks.AppConfig = append(c.hooks.AppConfig, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `appconfig.Intercept(f(g(h())))`.
func (c *AppConfigClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppConfig = append(c.inters.AppConfig, interceptors...)
}

// Create returns a builder for creating a AppConfig entity.
func (c *AppConfigClient) Create() *AppConfigCreate {
	mutation := newAppConfigMutation(c.config, OpCreate)
	return &AppConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppConfig entities.
func (c *AppConfigClient) CreateBulk(builders ...*AppConfigCreate) *AppConfigCreateBulk {
	return &AppConfigCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AppConfigClient) MapCreateBulk(slice any, setFunc func(*AppConfigCreate, int)) *AppConfigCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AppConfigCreateBulk{err: fmt.Errorf("calling to AppConfigClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AppConfigCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AppConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppConfig.
func (c *AppConfigClient) Update() *AppConfigUpdate {
	mutation := newAppConfigMutation(c.config, OpUpdate)
	return &AppConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppConfigClient) UpdateOne(ac *AppConfig) *AppConfigUpdateOne {
	mutation := newAppConfigMutation(c.config, OpUpdateOne, withAppConfig(ac))
	return &AppConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppConfigClient) UpdateOneID(id uint32) *AppConfigUpdateOne {
	mutation := newAppConfigMutation(c.config, OpUpdateOne, withAppConfigID(id))
	return &AppConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppConfig.
func (c *AppConfigClient) Delete() *AppConfigDelete {
	mutation := newAppConfigMutation(c.config, OpDelete)
	return &AppConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppConfigClient) DeleteOne(ac *AppConfig) *AppConfigDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppConfigClient) DeleteOneID(id uint32) *AppConfigDeleteOne {
	builder := c.Delete().Where(appconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppConfigDeleteOne{builder}
}

// Query returns a query builder for AppConfig.
func (c *AppConfigClient) Query() *AppConfigQuery {
	return &AppConfigQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppConfig},
		inters: c.Interceptors(),
	}
}

// Get returns a AppConfig entity by its id.
func (c *AppConfigClient) Get(ctx context.Context, id uint32) (*AppConfig, error) {
	return c.Query().Where(appconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppConfigClient) GetX(ctx context.Context, id uint32) *AppConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppConfigClient) Hooks() []Hook {
	return c.hooks.AppConfig
}

// Interceptors returns the client interceptors.
func (c *AppConfigClient) Interceptors() []Interceptor {
	return c.inters.AppConfig
}

func (c *AppConfigClient) mutate(ctx context.Context, m *AppConfigMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppConfigCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppConfigDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown AppConfig mutation op: %q", m.Op())
	}
}

// CompensateClient is a client for the Compensate schema.
type CompensateClient struct {
	config
}

// NewCompensateClient returns a client for the Compensate from the given config.
func NewCompensateClient(c config) *CompensateClient {
	return &CompensateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `compensate.Hooks(f(g(h())))`.
func (c *CompensateClient) Use(hooks ...Hook) {
	c.hooks.Compensate = append(c.hooks.Compensate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `compensate.Intercept(f(g(h())))`.
func (c *CompensateClient) Intercept(interceptors ...Interceptor) {
	c.inters.Compensate = append(c.inters.Compensate, interceptors...)
}

// Create returns a builder for creating a Compensate entity.
func (c *CompensateClient) Create() *CompensateCreate {
	mutation := newCompensateMutation(c.config, OpCreate)
	return &CompensateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Compensate entities.
func (c *CompensateClient) CreateBulk(builders ...*CompensateCreate) *CompensateCreateBulk {
	return &CompensateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CompensateClient) MapCreateBulk(slice any, setFunc func(*CompensateCreate, int)) *CompensateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CompensateCreateBulk{err: fmt.Errorf("calling to CompensateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CompensateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CompensateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Compensate.
func (c *CompensateClient) Update() *CompensateUpdate {
	mutation := newCompensateMutation(c.config, OpUpdate)
	return &CompensateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CompensateClient) UpdateOne(co *Compensate) *CompensateUpdateOne {
	mutation := newCompensateMutation(c.config, OpUpdateOne, withCompensate(co))
	return &CompensateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CompensateClient) UpdateOneID(id uint32) *CompensateUpdateOne {
	mutation := newCompensateMutation(c.config, OpUpdateOne, withCompensateID(id))
	return &CompensateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Compensate.
func (c *CompensateClient) Delete() *CompensateDelete {
	mutation := newCompensateMutation(c.config, OpDelete)
	return &CompensateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CompensateClient) DeleteOne(co *Compensate) *CompensateDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CompensateClient) DeleteOneID(id uint32) *CompensateDeleteOne {
	builder := c.Delete().Where(compensate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CompensateDeleteOne{builder}
}

// Query returns a query builder for Compensate.
func (c *CompensateClient) Query() *CompensateQuery {
	return &CompensateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCompensate},
		inters: c.Interceptors(),
	}
}

// Get returns a Compensate entity by its id.
func (c *CompensateClient) Get(ctx context.Context, id uint32) (*Compensate, error) {
	return c.Query().Where(compensate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CompensateClient) GetX(ctx context.Context, id uint32) *Compensate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CompensateClient) Hooks() []Hook {
	return c.hooks.Compensate
}

// Interceptors returns the client interceptors.
func (c *CompensateClient) Interceptors() []Interceptor {
	return c.inters.Compensate
}

func (c *CompensateClient) mutate(ctx context.Context, m *CompensateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CompensateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CompensateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CompensateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CompensateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Compensate mutation op: %q", m.Op())
	}
}

// FeeOrderClient is a client for the FeeOrder schema.
type FeeOrderClient struct {
	config
}

// NewFeeOrderClient returns a client for the FeeOrder from the given config.
func NewFeeOrderClient(c config) *FeeOrderClient {
	return &FeeOrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feeorder.Hooks(f(g(h())))`.
func (c *FeeOrderClient) Use(hooks ...Hook) {
	c.hooks.FeeOrder = append(c.hooks.FeeOrder, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feeorder.Intercept(f(g(h())))`.
func (c *FeeOrderClient) Intercept(interceptors ...Interceptor) {
	c.inters.FeeOrder = append(c.inters.FeeOrder, interceptors...)
}

// Create returns a builder for creating a FeeOrder entity.
func (c *FeeOrderClient) Create() *FeeOrderCreate {
	mutation := newFeeOrderMutation(c.config, OpCreate)
	return &FeeOrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FeeOrder entities.
func (c *FeeOrderClient) CreateBulk(builders ...*FeeOrderCreate) *FeeOrderCreateBulk {
	return &FeeOrderCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeeOrderClient) MapCreateBulk(slice any, setFunc func(*FeeOrderCreate, int)) *FeeOrderCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeeOrderCreateBulk{err: fmt.Errorf("calling to FeeOrderClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeeOrderCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeeOrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeeOrder.
func (c *FeeOrderClient) Update() *FeeOrderUpdate {
	mutation := newFeeOrderMutation(c.config, OpUpdate)
	return &FeeOrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeeOrderClient) UpdateOne(fo *FeeOrder) *FeeOrderUpdateOne {
	mutation := newFeeOrderMutation(c.config, OpUpdateOne, withFeeOrder(fo))
	return &FeeOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeeOrderClient) UpdateOneID(id uint32) *FeeOrderUpdateOne {
	mutation := newFeeOrderMutation(c.config, OpUpdateOne, withFeeOrderID(id))
	return &FeeOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeeOrder.
func (c *FeeOrderClient) Delete() *FeeOrderDelete {
	mutation := newFeeOrderMutation(c.config, OpDelete)
	return &FeeOrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeeOrderClient) DeleteOne(fo *FeeOrder) *FeeOrderDeleteOne {
	return c.DeleteOneID(fo.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeeOrderClient) DeleteOneID(id uint32) *FeeOrderDeleteOne {
	builder := c.Delete().Where(feeorder.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeeOrderDeleteOne{builder}
}

// Query returns a query builder for FeeOrder.
func (c *FeeOrderClient) Query() *FeeOrderQuery {
	return &FeeOrderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeeOrder},
		inters: c.Interceptors(),
	}
}

// Get returns a FeeOrder entity by its id.
func (c *FeeOrderClient) Get(ctx context.Context, id uint32) (*FeeOrder, error) {
	return c.Query().Where(feeorder.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeeOrderClient) GetX(ctx context.Context, id uint32) *FeeOrder {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FeeOrderClient) Hooks() []Hook {
	return c.hooks.FeeOrder
}

// Interceptors returns the client interceptors.
func (c *FeeOrderClient) Interceptors() []Interceptor {
	return c.inters.FeeOrder
}

func (c *FeeOrderClient) mutate(ctx context.Context, m *FeeOrderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeeOrderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeeOrderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeeOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeeOrderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown FeeOrder mutation op: %q", m.Op())
	}
}

// FeeOrderStateClient is a client for the FeeOrderState schema.
type FeeOrderStateClient struct {
	config
}

// NewFeeOrderStateClient returns a client for the FeeOrderState from the given config.
func NewFeeOrderStateClient(c config) *FeeOrderStateClient {
	return &FeeOrderStateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feeorderstate.Hooks(f(g(h())))`.
func (c *FeeOrderStateClient) Use(hooks ...Hook) {
	c.hooks.FeeOrderState = append(c.hooks.FeeOrderState, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feeorderstate.Intercept(f(g(h())))`.
func (c *FeeOrderStateClient) Intercept(interceptors ...Interceptor) {
	c.inters.FeeOrderState = append(c.inters.FeeOrderState, interceptors...)
}

// Create returns a builder for creating a FeeOrderState entity.
func (c *FeeOrderStateClient) Create() *FeeOrderStateCreate {
	mutation := newFeeOrderStateMutation(c.config, OpCreate)
	return &FeeOrderStateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FeeOrderState entities.
func (c *FeeOrderStateClient) CreateBulk(builders ...*FeeOrderStateCreate) *FeeOrderStateCreateBulk {
	return &FeeOrderStateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeeOrderStateClient) MapCreateBulk(slice any, setFunc func(*FeeOrderStateCreate, int)) *FeeOrderStateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeeOrderStateCreateBulk{err: fmt.Errorf("calling to FeeOrderStateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeeOrderStateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeeOrderStateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeeOrderState.
func (c *FeeOrderStateClient) Update() *FeeOrderStateUpdate {
	mutation := newFeeOrderStateMutation(c.config, OpUpdate)
	return &FeeOrderStateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeeOrderStateClient) UpdateOne(fos *FeeOrderState) *FeeOrderStateUpdateOne {
	mutation := newFeeOrderStateMutation(c.config, OpUpdateOne, withFeeOrderState(fos))
	return &FeeOrderStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeeOrderStateClient) UpdateOneID(id uint32) *FeeOrderStateUpdateOne {
	mutation := newFeeOrderStateMutation(c.config, OpUpdateOne, withFeeOrderStateID(id))
	return &FeeOrderStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeeOrderState.
func (c *FeeOrderStateClient) Delete() *FeeOrderStateDelete {
	mutation := newFeeOrderStateMutation(c.config, OpDelete)
	return &FeeOrderStateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeeOrderStateClient) DeleteOne(fos *FeeOrderState) *FeeOrderStateDeleteOne {
	return c.DeleteOneID(fos.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeeOrderStateClient) DeleteOneID(id uint32) *FeeOrderStateDeleteOne {
	builder := c.Delete().Where(feeorderstate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeeOrderStateDeleteOne{builder}
}

// Query returns a query builder for FeeOrderState.
func (c *FeeOrderStateClient) Query() *FeeOrderStateQuery {
	return &FeeOrderStateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeeOrderState},
		inters: c.Interceptors(),
	}
}

// Get returns a FeeOrderState entity by its id.
func (c *FeeOrderStateClient) Get(ctx context.Context, id uint32) (*FeeOrderState, error) {
	return c.Query().Where(feeorderstate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeeOrderStateClient) GetX(ctx context.Context, id uint32) *FeeOrderState {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FeeOrderStateClient) Hooks() []Hook {
	return c.hooks.FeeOrderState
}

// Interceptors returns the client interceptors.
func (c *FeeOrderStateClient) Interceptors() []Interceptor {
	return c.inters.FeeOrderState
}

func (c *FeeOrderStateClient) mutate(ctx context.Context, m *FeeOrderStateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeeOrderStateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeeOrderStateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeeOrderStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeeOrderStateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown FeeOrderState mutation op: %q", m.Op())
	}
}

// OrderClient is a client for the Order schema.
type OrderClient struct {
	config
}

// NewOrderClient returns a client for the Order from the given config.
func NewOrderClient(c config) *OrderClient {
	return &OrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `order.Hooks(f(g(h())))`.
func (c *OrderClient) Use(hooks ...Hook) {
	c.hooks.Order = append(c.hooks.Order, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `order.Intercept(f(g(h())))`.
func (c *OrderClient) Intercept(interceptors ...Interceptor) {
	c.inters.Order = append(c.inters.Order, interceptors...)
}

// Create returns a builder for creating a Order entity.
func (c *OrderClient) Create() *OrderCreate {
	mutation := newOrderMutation(c.config, OpCreate)
	return &OrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Order entities.
func (c *OrderClient) CreateBulk(builders ...*OrderCreate) *OrderCreateBulk {
	return &OrderCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderClient) MapCreateBulk(slice any, setFunc func(*OrderCreate, int)) *OrderCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderCreateBulk{err: fmt.Errorf("calling to OrderClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Order.
func (c *OrderClient) Update() *OrderUpdate {
	mutation := newOrderMutation(c.config, OpUpdate)
	return &OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderClient) UpdateOne(o *Order) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrder(o))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderClient) UpdateOneID(id uint32) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrderID(id))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Order.
func (c *OrderClient) Delete() *OrderDelete {
	mutation := newOrderMutation(c.config, OpDelete)
	return &OrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderClient) DeleteOne(o *Order) *OrderDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderClient) DeleteOneID(id uint32) *OrderDeleteOne {
	builder := c.Delete().Where(order.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderDeleteOne{builder}
}

// Query returns a query builder for Order.
func (c *OrderClient) Query() *OrderQuery {
	return &OrderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrder},
		inters: c.Interceptors(),
	}
}

// Get returns a Order entity by its id.
func (c *OrderClient) Get(ctx context.Context, id uint32) (*Order, error) {
	return c.Query().Where(order.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderClient) GetX(ctx context.Context, id uint32) *Order {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderClient) Hooks() []Hook {
	return c.hooks.Order
}

// Interceptors returns the client interceptors.
func (c *OrderClient) Interceptors() []Interceptor {
	return c.inters.Order
}

func (c *OrderClient) mutate(ctx context.Context, m *OrderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Order mutation op: %q", m.Op())
	}
}

// OrderBaseClient is a client for the OrderBase schema.
type OrderBaseClient struct {
	config
}

// NewOrderBaseClient returns a client for the OrderBase from the given config.
func NewOrderBaseClient(c config) *OrderBaseClient {
	return &OrderBaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderbase.Hooks(f(g(h())))`.
func (c *OrderBaseClient) Use(hooks ...Hook) {
	c.hooks.OrderBase = append(c.hooks.OrderBase, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `orderbase.Intercept(f(g(h())))`.
func (c *OrderBaseClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderBase = append(c.inters.OrderBase, interceptors...)
}

// Create returns a builder for creating a OrderBase entity.
func (c *OrderBaseClient) Create() *OrderBaseCreate {
	mutation := newOrderBaseMutation(c.config, OpCreate)
	return &OrderBaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderBase entities.
func (c *OrderBaseClient) CreateBulk(builders ...*OrderBaseCreate) *OrderBaseCreateBulk {
	return &OrderBaseCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderBaseClient) MapCreateBulk(slice any, setFunc func(*OrderBaseCreate, int)) *OrderBaseCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderBaseCreateBulk{err: fmt.Errorf("calling to OrderBaseClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderBaseCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderBaseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderBase.
func (c *OrderBaseClient) Update() *OrderBaseUpdate {
	mutation := newOrderBaseMutation(c.config, OpUpdate)
	return &OrderBaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderBaseClient) UpdateOne(ob *OrderBase) *OrderBaseUpdateOne {
	mutation := newOrderBaseMutation(c.config, OpUpdateOne, withOrderBase(ob))
	return &OrderBaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderBaseClient) UpdateOneID(id uint32) *OrderBaseUpdateOne {
	mutation := newOrderBaseMutation(c.config, OpUpdateOne, withOrderBaseID(id))
	return &OrderBaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderBase.
func (c *OrderBaseClient) Delete() *OrderBaseDelete {
	mutation := newOrderBaseMutation(c.config, OpDelete)
	return &OrderBaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderBaseClient) DeleteOne(ob *OrderBase) *OrderBaseDeleteOne {
	return c.DeleteOneID(ob.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderBaseClient) DeleteOneID(id uint32) *OrderBaseDeleteOne {
	builder := c.Delete().Where(orderbase.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderBaseDeleteOne{builder}
}

// Query returns a query builder for OrderBase.
func (c *OrderBaseClient) Query() *OrderBaseQuery {
	return &OrderBaseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderBase},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderBase entity by its id.
func (c *OrderBaseClient) Get(ctx context.Context, id uint32) (*OrderBase, error) {
	return c.Query().Where(orderbase.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderBaseClient) GetX(ctx context.Context, id uint32) *OrderBase {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderBaseClient) Hooks() []Hook {
	return c.hooks.OrderBase
}

// Interceptors returns the client interceptors.
func (c *OrderBaseClient) Interceptors() []Interceptor {
	return c.inters.OrderBase
}

func (c *OrderBaseClient) mutate(ctx context.Context, m *OrderBaseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderBaseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderBaseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderBaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderBaseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown OrderBase mutation op: %q", m.Op())
	}
}

// OrderCouponClient is a client for the OrderCoupon schema.
type OrderCouponClient struct {
	config
}

// NewOrderCouponClient returns a client for the OrderCoupon from the given config.
func NewOrderCouponClient(c config) *OrderCouponClient {
	return &OrderCouponClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ordercoupon.Hooks(f(g(h())))`.
func (c *OrderCouponClient) Use(hooks ...Hook) {
	c.hooks.OrderCoupon = append(c.hooks.OrderCoupon, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ordercoupon.Intercept(f(g(h())))`.
func (c *OrderCouponClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderCoupon = append(c.inters.OrderCoupon, interceptors...)
}

// Create returns a builder for creating a OrderCoupon entity.
func (c *OrderCouponClient) Create() *OrderCouponCreate {
	mutation := newOrderCouponMutation(c.config, OpCreate)
	return &OrderCouponCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderCoupon entities.
func (c *OrderCouponClient) CreateBulk(builders ...*OrderCouponCreate) *OrderCouponCreateBulk {
	return &OrderCouponCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderCouponClient) MapCreateBulk(slice any, setFunc func(*OrderCouponCreate, int)) *OrderCouponCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderCouponCreateBulk{err: fmt.Errorf("calling to OrderCouponClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderCouponCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderCouponCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderCoupon.
func (c *OrderCouponClient) Update() *OrderCouponUpdate {
	mutation := newOrderCouponMutation(c.config, OpUpdate)
	return &OrderCouponUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderCouponClient) UpdateOne(oc *OrderCoupon) *OrderCouponUpdateOne {
	mutation := newOrderCouponMutation(c.config, OpUpdateOne, withOrderCoupon(oc))
	return &OrderCouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderCouponClient) UpdateOneID(id uint32) *OrderCouponUpdateOne {
	mutation := newOrderCouponMutation(c.config, OpUpdateOne, withOrderCouponID(id))
	return &OrderCouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderCoupon.
func (c *OrderCouponClient) Delete() *OrderCouponDelete {
	mutation := newOrderCouponMutation(c.config, OpDelete)
	return &OrderCouponDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderCouponClient) DeleteOne(oc *OrderCoupon) *OrderCouponDeleteOne {
	return c.DeleteOneID(oc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderCouponClient) DeleteOneID(id uint32) *OrderCouponDeleteOne {
	builder := c.Delete().Where(ordercoupon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderCouponDeleteOne{builder}
}

// Query returns a query builder for OrderCoupon.
func (c *OrderCouponClient) Query() *OrderCouponQuery {
	return &OrderCouponQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderCoupon},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderCoupon entity by its id.
func (c *OrderCouponClient) Get(ctx context.Context, id uint32) (*OrderCoupon, error) {
	return c.Query().Where(ordercoupon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderCouponClient) GetX(ctx context.Context, id uint32) *OrderCoupon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderCouponClient) Hooks() []Hook {
	return c.hooks.OrderCoupon
}

// Interceptors returns the client interceptors.
func (c *OrderCouponClient) Interceptors() []Interceptor {
	return c.inters.OrderCoupon
}

func (c *OrderCouponClient) mutate(ctx context.Context, m *OrderCouponMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderCouponCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderCouponUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderCouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderCouponDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown OrderCoupon mutation op: %q", m.Op())
	}
}

// OrderLockClient is a client for the OrderLock schema.
type OrderLockClient struct {
	config
}

// NewOrderLockClient returns a client for the OrderLock from the given config.
func NewOrderLockClient(c config) *OrderLockClient {
	return &OrderLockClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderlock.Hooks(f(g(h())))`.
func (c *OrderLockClient) Use(hooks ...Hook) {
	c.hooks.OrderLock = append(c.hooks.OrderLock, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `orderlock.Intercept(f(g(h())))`.
func (c *OrderLockClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderLock = append(c.inters.OrderLock, interceptors...)
}

// Create returns a builder for creating a OrderLock entity.
func (c *OrderLockClient) Create() *OrderLockCreate {
	mutation := newOrderLockMutation(c.config, OpCreate)
	return &OrderLockCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderLock entities.
func (c *OrderLockClient) CreateBulk(builders ...*OrderLockCreate) *OrderLockCreateBulk {
	return &OrderLockCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderLockClient) MapCreateBulk(slice any, setFunc func(*OrderLockCreate, int)) *OrderLockCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderLockCreateBulk{err: fmt.Errorf("calling to OrderLockClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderLockCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderLockCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderLock.
func (c *OrderLockClient) Update() *OrderLockUpdate {
	mutation := newOrderLockMutation(c.config, OpUpdate)
	return &OrderLockUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderLockClient) UpdateOne(ol *OrderLock) *OrderLockUpdateOne {
	mutation := newOrderLockMutation(c.config, OpUpdateOne, withOrderLock(ol))
	return &OrderLockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderLockClient) UpdateOneID(id uint32) *OrderLockUpdateOne {
	mutation := newOrderLockMutation(c.config, OpUpdateOne, withOrderLockID(id))
	return &OrderLockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderLock.
func (c *OrderLockClient) Delete() *OrderLockDelete {
	mutation := newOrderLockMutation(c.config, OpDelete)
	return &OrderLockDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderLockClient) DeleteOne(ol *OrderLock) *OrderLockDeleteOne {
	return c.DeleteOneID(ol.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderLockClient) DeleteOneID(id uint32) *OrderLockDeleteOne {
	builder := c.Delete().Where(orderlock.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderLockDeleteOne{builder}
}

// Query returns a query builder for OrderLock.
func (c *OrderLockClient) Query() *OrderLockQuery {
	return &OrderLockQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderLock},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderLock entity by its id.
func (c *OrderLockClient) Get(ctx context.Context, id uint32) (*OrderLock, error) {
	return c.Query().Where(orderlock.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderLockClient) GetX(ctx context.Context, id uint32) *OrderLock {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderLockClient) Hooks() []Hook {
	return c.hooks.OrderLock
}

// Interceptors returns the client interceptors.
func (c *OrderLockClient) Interceptors() []Interceptor {
	return c.inters.OrderLock
}

func (c *OrderLockClient) mutate(ctx context.Context, m *OrderLockMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderLockCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderLockUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderLockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderLockDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown OrderLock mutation op: %q", m.Op())
	}
}

// OrderStateClient is a client for the OrderState schema.
type OrderStateClient struct {
	config
}

// NewOrderStateClient returns a client for the OrderState from the given config.
func NewOrderStateClient(c config) *OrderStateClient {
	return &OrderStateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderstate.Hooks(f(g(h())))`.
func (c *OrderStateClient) Use(hooks ...Hook) {
	c.hooks.OrderState = append(c.hooks.OrderState, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `orderstate.Intercept(f(g(h())))`.
func (c *OrderStateClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderState = append(c.inters.OrderState, interceptors...)
}

// Create returns a builder for creating a OrderState entity.
func (c *OrderStateClient) Create() *OrderStateCreate {
	mutation := newOrderStateMutation(c.config, OpCreate)
	return &OrderStateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderState entities.
func (c *OrderStateClient) CreateBulk(builders ...*OrderStateCreate) *OrderStateCreateBulk {
	return &OrderStateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderStateClient) MapCreateBulk(slice any, setFunc func(*OrderStateCreate, int)) *OrderStateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderStateCreateBulk{err: fmt.Errorf("calling to OrderStateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderStateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderStateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderState.
func (c *OrderStateClient) Update() *OrderStateUpdate {
	mutation := newOrderStateMutation(c.config, OpUpdate)
	return &OrderStateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderStateClient) UpdateOne(os *OrderState) *OrderStateUpdateOne {
	mutation := newOrderStateMutation(c.config, OpUpdateOne, withOrderState(os))
	return &OrderStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderStateClient) UpdateOneID(id uint32) *OrderStateUpdateOne {
	mutation := newOrderStateMutation(c.config, OpUpdateOne, withOrderStateID(id))
	return &OrderStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderState.
func (c *OrderStateClient) Delete() *OrderStateDelete {
	mutation := newOrderStateMutation(c.config, OpDelete)
	return &OrderStateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderStateClient) DeleteOne(os *OrderState) *OrderStateDeleteOne {
	return c.DeleteOneID(os.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderStateClient) DeleteOneID(id uint32) *OrderStateDeleteOne {
	builder := c.Delete().Where(orderstate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderStateDeleteOne{builder}
}

// Query returns a query builder for OrderState.
func (c *OrderStateClient) Query() *OrderStateQuery {
	return &OrderStateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderState},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderState entity by its id.
func (c *OrderStateClient) Get(ctx context.Context, id uint32) (*OrderState, error) {
	return c.Query().Where(orderstate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderStateClient) GetX(ctx context.Context, id uint32) *OrderState {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderStateClient) Hooks() []Hook {
	return c.hooks.OrderState
}

// Interceptors returns the client interceptors.
func (c *OrderStateClient) Interceptors() []Interceptor {
	return c.inters.OrderState
}

func (c *OrderStateClient) mutate(ctx context.Context, m *OrderStateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderStateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderStateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderStateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown OrderState mutation op: %q", m.Op())
	}
}

// OrderStateBaseClient is a client for the OrderStateBase schema.
type OrderStateBaseClient struct {
	config
}

// NewOrderStateBaseClient returns a client for the OrderStateBase from the given config.
func NewOrderStateBaseClient(c config) *OrderStateBaseClient {
	return &OrderStateBaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderstatebase.Hooks(f(g(h())))`.
func (c *OrderStateBaseClient) Use(hooks ...Hook) {
	c.hooks.OrderStateBase = append(c.hooks.OrderStateBase, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `orderstatebase.Intercept(f(g(h())))`.
func (c *OrderStateBaseClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderStateBase = append(c.inters.OrderStateBase, interceptors...)
}

// Create returns a builder for creating a OrderStateBase entity.
func (c *OrderStateBaseClient) Create() *OrderStateBaseCreate {
	mutation := newOrderStateBaseMutation(c.config, OpCreate)
	return &OrderStateBaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderStateBase entities.
func (c *OrderStateBaseClient) CreateBulk(builders ...*OrderStateBaseCreate) *OrderStateBaseCreateBulk {
	return &OrderStateBaseCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderStateBaseClient) MapCreateBulk(slice any, setFunc func(*OrderStateBaseCreate, int)) *OrderStateBaseCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderStateBaseCreateBulk{err: fmt.Errorf("calling to OrderStateBaseClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderStateBaseCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderStateBaseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderStateBase.
func (c *OrderStateBaseClient) Update() *OrderStateBaseUpdate {
	mutation := newOrderStateBaseMutation(c.config, OpUpdate)
	return &OrderStateBaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderStateBaseClient) UpdateOne(osb *OrderStateBase) *OrderStateBaseUpdateOne {
	mutation := newOrderStateBaseMutation(c.config, OpUpdateOne, withOrderStateBase(osb))
	return &OrderStateBaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderStateBaseClient) UpdateOneID(id uint32) *OrderStateBaseUpdateOne {
	mutation := newOrderStateBaseMutation(c.config, OpUpdateOne, withOrderStateBaseID(id))
	return &OrderStateBaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderStateBase.
func (c *OrderStateBaseClient) Delete() *OrderStateBaseDelete {
	mutation := newOrderStateBaseMutation(c.config, OpDelete)
	return &OrderStateBaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderStateBaseClient) DeleteOne(osb *OrderStateBase) *OrderStateBaseDeleteOne {
	return c.DeleteOneID(osb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderStateBaseClient) DeleteOneID(id uint32) *OrderStateBaseDeleteOne {
	builder := c.Delete().Where(orderstatebase.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderStateBaseDeleteOne{builder}
}

// Query returns a query builder for OrderStateBase.
func (c *OrderStateBaseClient) Query() *OrderStateBaseQuery {
	return &OrderStateBaseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderStateBase},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderStateBase entity by its id.
func (c *OrderStateBaseClient) Get(ctx context.Context, id uint32) (*OrderStateBase, error) {
	return c.Query().Where(orderstatebase.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderStateBaseClient) GetX(ctx context.Context, id uint32) *OrderStateBase {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderStateBaseClient) Hooks() []Hook {
	return c.hooks.OrderStateBase
}

// Interceptors returns the client interceptors.
func (c *OrderStateBaseClient) Interceptors() []Interceptor {
	return c.inters.OrderStateBase
}

func (c *OrderStateBaseClient) mutate(ctx context.Context, m *OrderStateBaseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderStateBaseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderStateBaseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderStateBaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderStateBaseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown OrderStateBase mutation op: %q", m.Op())
	}
}

// OutOfGasClient is a client for the OutOfGas schema.
type OutOfGasClient struct {
	config
}

// NewOutOfGasClient returns a client for the OutOfGas from the given config.
func NewOutOfGasClient(c config) *OutOfGasClient {
	return &OutOfGasClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `outofgas.Hooks(f(g(h())))`.
func (c *OutOfGasClient) Use(hooks ...Hook) {
	c.hooks.OutOfGas = append(c.hooks.OutOfGas, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `outofgas.Intercept(f(g(h())))`.
func (c *OutOfGasClient) Intercept(interceptors ...Interceptor) {
	c.inters.OutOfGas = append(c.inters.OutOfGas, interceptors...)
}

// Create returns a builder for creating a OutOfGas entity.
func (c *OutOfGasClient) Create() *OutOfGasCreate {
	mutation := newOutOfGasMutation(c.config, OpCreate)
	return &OutOfGasCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OutOfGas entities.
func (c *OutOfGasClient) CreateBulk(builders ...*OutOfGasCreate) *OutOfGasCreateBulk {
	return &OutOfGasCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OutOfGasClient) MapCreateBulk(slice any, setFunc func(*OutOfGasCreate, int)) *OutOfGasCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OutOfGasCreateBulk{err: fmt.Errorf("calling to OutOfGasClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OutOfGasCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OutOfGasCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OutOfGas.
func (c *OutOfGasClient) Update() *OutOfGasUpdate {
	mutation := newOutOfGasMutation(c.config, OpUpdate)
	return &OutOfGasUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OutOfGasClient) UpdateOne(oog *OutOfGas) *OutOfGasUpdateOne {
	mutation := newOutOfGasMutation(c.config, OpUpdateOne, withOutOfGas(oog))
	return &OutOfGasUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OutOfGasClient) UpdateOneID(id uint32) *OutOfGasUpdateOne {
	mutation := newOutOfGasMutation(c.config, OpUpdateOne, withOutOfGasID(id))
	return &OutOfGasUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OutOfGas.
func (c *OutOfGasClient) Delete() *OutOfGasDelete {
	mutation := newOutOfGasMutation(c.config, OpDelete)
	return &OutOfGasDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OutOfGasClient) DeleteOne(oog *OutOfGas) *OutOfGasDeleteOne {
	return c.DeleteOneID(oog.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OutOfGasClient) DeleteOneID(id uint32) *OutOfGasDeleteOne {
	builder := c.Delete().Where(outofgas.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OutOfGasDeleteOne{builder}
}

// Query returns a query builder for OutOfGas.
func (c *OutOfGasClient) Query() *OutOfGasQuery {
	return &OutOfGasQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOutOfGas},
		inters: c.Interceptors(),
	}
}

// Get returns a OutOfGas entity by its id.
func (c *OutOfGasClient) Get(ctx context.Context, id uint32) (*OutOfGas, error) {
	return c.Query().Where(outofgas.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OutOfGasClient) GetX(ctx context.Context, id uint32) *OutOfGas {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OutOfGasClient) Hooks() []Hook {
	return c.hooks.OutOfGas
}

// Interceptors returns the client interceptors.
func (c *OutOfGasClient) Interceptors() []Interceptor {
	return c.inters.OutOfGas
}

func (c *OutOfGasClient) mutate(ctx context.Context, m *OutOfGasMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OutOfGasCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OutOfGasUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OutOfGasUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OutOfGasDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown OutOfGas mutation op: %q", m.Op())
	}
}

// PaymentClient is a client for the Payment schema.
type PaymentClient struct {
	config
}

// NewPaymentClient returns a client for the Payment from the given config.
func NewPaymentClient(c config) *PaymentClient {
	return &PaymentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `payment.Hooks(f(g(h())))`.
func (c *PaymentClient) Use(hooks ...Hook) {
	c.hooks.Payment = append(c.hooks.Payment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `payment.Intercept(f(g(h())))`.
func (c *PaymentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Payment = append(c.inters.Payment, interceptors...)
}

// Create returns a builder for creating a Payment entity.
func (c *PaymentClient) Create() *PaymentCreate {
	mutation := newPaymentMutation(c.config, OpCreate)
	return &PaymentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Payment entities.
func (c *PaymentClient) CreateBulk(builders ...*PaymentCreate) *PaymentCreateBulk {
	return &PaymentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PaymentClient) MapCreateBulk(slice any, setFunc func(*PaymentCreate, int)) *PaymentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PaymentCreateBulk{err: fmt.Errorf("calling to PaymentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PaymentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PaymentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Payment.
func (c *PaymentClient) Update() *PaymentUpdate {
	mutation := newPaymentMutation(c.config, OpUpdate)
	return &PaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentClient) UpdateOne(pa *Payment) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPayment(pa))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentClient) UpdateOneID(id uint32) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPaymentID(id))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Payment.
func (c *PaymentClient) Delete() *PaymentDelete {
	mutation := newPaymentMutation(c.config, OpDelete)
	return &PaymentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentClient) DeleteOne(pa *Payment) *PaymentDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentClient) DeleteOneID(id uint32) *PaymentDeleteOne {
	builder := c.Delete().Where(payment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentDeleteOne{builder}
}

// Query returns a query builder for Payment.
func (c *PaymentClient) Query() *PaymentQuery {
	return &PaymentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePayment},
		inters: c.Interceptors(),
	}
}

// Get returns a Payment entity by its id.
func (c *PaymentClient) Get(ctx context.Context, id uint32) (*Payment, error) {
	return c.Query().Where(payment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentClient) GetX(ctx context.Context, id uint32) *Payment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PaymentClient) Hooks() []Hook {
	return c.hooks.Payment
}

// Interceptors returns the client interceptors.
func (c *PaymentClient) Interceptors() []Interceptor {
	return c.inters.Payment
}

func (c *PaymentClient) mutate(ctx context.Context, m *PaymentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Payment mutation op: %q", m.Op())
	}
}

// PaymentBalanceClient is a client for the PaymentBalance schema.
type PaymentBalanceClient struct {
	config
}

// NewPaymentBalanceClient returns a client for the PaymentBalance from the given config.
func NewPaymentBalanceClient(c config) *PaymentBalanceClient {
	return &PaymentBalanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymentbalance.Hooks(f(g(h())))`.
func (c *PaymentBalanceClient) Use(hooks ...Hook) {
	c.hooks.PaymentBalance = append(c.hooks.PaymentBalance, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `paymentbalance.Intercept(f(g(h())))`.
func (c *PaymentBalanceClient) Intercept(interceptors ...Interceptor) {
	c.inters.PaymentBalance = append(c.inters.PaymentBalance, interceptors...)
}

// Create returns a builder for creating a PaymentBalance entity.
func (c *PaymentBalanceClient) Create() *PaymentBalanceCreate {
	mutation := newPaymentBalanceMutation(c.config, OpCreate)
	return &PaymentBalanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentBalance entities.
func (c *PaymentBalanceClient) CreateBulk(builders ...*PaymentBalanceCreate) *PaymentBalanceCreateBulk {
	return &PaymentBalanceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PaymentBalanceClient) MapCreateBulk(slice any, setFunc func(*PaymentBalanceCreate, int)) *PaymentBalanceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PaymentBalanceCreateBulk{err: fmt.Errorf("calling to PaymentBalanceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PaymentBalanceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PaymentBalanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentBalance.
func (c *PaymentBalanceClient) Update() *PaymentBalanceUpdate {
	mutation := newPaymentBalanceMutation(c.config, OpUpdate)
	return &PaymentBalanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentBalanceClient) UpdateOne(pb *PaymentBalance) *PaymentBalanceUpdateOne {
	mutation := newPaymentBalanceMutation(c.config, OpUpdateOne, withPaymentBalance(pb))
	return &PaymentBalanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentBalanceClient) UpdateOneID(id uint32) *PaymentBalanceUpdateOne {
	mutation := newPaymentBalanceMutation(c.config, OpUpdateOne, withPaymentBalanceID(id))
	return &PaymentBalanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentBalance.
func (c *PaymentBalanceClient) Delete() *PaymentBalanceDelete {
	mutation := newPaymentBalanceMutation(c.config, OpDelete)
	return &PaymentBalanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentBalanceClient) DeleteOne(pb *PaymentBalance) *PaymentBalanceDeleteOne {
	return c.DeleteOneID(pb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentBalanceClient) DeleteOneID(id uint32) *PaymentBalanceDeleteOne {
	builder := c.Delete().Where(paymentbalance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentBalanceDeleteOne{builder}
}

// Query returns a query builder for PaymentBalance.
func (c *PaymentBalanceClient) Query() *PaymentBalanceQuery {
	return &PaymentBalanceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePaymentBalance},
		inters: c.Interceptors(),
	}
}

// Get returns a PaymentBalance entity by its id.
func (c *PaymentBalanceClient) Get(ctx context.Context, id uint32) (*PaymentBalance, error) {
	return c.Query().Where(paymentbalance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentBalanceClient) GetX(ctx context.Context, id uint32) *PaymentBalance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PaymentBalanceClient) Hooks() []Hook {
	return c.hooks.PaymentBalance
}

// Interceptors returns the client interceptors.
func (c *PaymentBalanceClient) Interceptors() []Interceptor {
	return c.inters.PaymentBalance
}

func (c *PaymentBalanceClient) mutate(ctx context.Context, m *PaymentBalanceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentBalanceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentBalanceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentBalanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentBalanceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown PaymentBalance mutation op: %q", m.Op())
	}
}

// PaymentBalanceLockClient is a client for the PaymentBalanceLock schema.
type PaymentBalanceLockClient struct {
	config
}

// NewPaymentBalanceLockClient returns a client for the PaymentBalanceLock from the given config.
func NewPaymentBalanceLockClient(c config) *PaymentBalanceLockClient {
	return &PaymentBalanceLockClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymentbalancelock.Hooks(f(g(h())))`.
func (c *PaymentBalanceLockClient) Use(hooks ...Hook) {
	c.hooks.PaymentBalanceLock = append(c.hooks.PaymentBalanceLock, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `paymentbalancelock.Intercept(f(g(h())))`.
func (c *PaymentBalanceLockClient) Intercept(interceptors ...Interceptor) {
	c.inters.PaymentBalanceLock = append(c.inters.PaymentBalanceLock, interceptors...)
}

// Create returns a builder for creating a PaymentBalanceLock entity.
func (c *PaymentBalanceLockClient) Create() *PaymentBalanceLockCreate {
	mutation := newPaymentBalanceLockMutation(c.config, OpCreate)
	return &PaymentBalanceLockCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentBalanceLock entities.
func (c *PaymentBalanceLockClient) CreateBulk(builders ...*PaymentBalanceLockCreate) *PaymentBalanceLockCreateBulk {
	return &PaymentBalanceLockCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PaymentBalanceLockClient) MapCreateBulk(slice any, setFunc func(*PaymentBalanceLockCreate, int)) *PaymentBalanceLockCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PaymentBalanceLockCreateBulk{err: fmt.Errorf("calling to PaymentBalanceLockClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PaymentBalanceLockCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PaymentBalanceLockCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentBalanceLock.
func (c *PaymentBalanceLockClient) Update() *PaymentBalanceLockUpdate {
	mutation := newPaymentBalanceLockMutation(c.config, OpUpdate)
	return &PaymentBalanceLockUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentBalanceLockClient) UpdateOne(pbl *PaymentBalanceLock) *PaymentBalanceLockUpdateOne {
	mutation := newPaymentBalanceLockMutation(c.config, OpUpdateOne, withPaymentBalanceLock(pbl))
	return &PaymentBalanceLockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentBalanceLockClient) UpdateOneID(id uint32) *PaymentBalanceLockUpdateOne {
	mutation := newPaymentBalanceLockMutation(c.config, OpUpdateOne, withPaymentBalanceLockID(id))
	return &PaymentBalanceLockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentBalanceLock.
func (c *PaymentBalanceLockClient) Delete() *PaymentBalanceLockDelete {
	mutation := newPaymentBalanceLockMutation(c.config, OpDelete)
	return &PaymentBalanceLockDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentBalanceLockClient) DeleteOne(pbl *PaymentBalanceLock) *PaymentBalanceLockDeleteOne {
	return c.DeleteOneID(pbl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentBalanceLockClient) DeleteOneID(id uint32) *PaymentBalanceLockDeleteOne {
	builder := c.Delete().Where(paymentbalancelock.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentBalanceLockDeleteOne{builder}
}

// Query returns a query builder for PaymentBalanceLock.
func (c *PaymentBalanceLockClient) Query() *PaymentBalanceLockQuery {
	return &PaymentBalanceLockQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePaymentBalanceLock},
		inters: c.Interceptors(),
	}
}

// Get returns a PaymentBalanceLock entity by its id.
func (c *PaymentBalanceLockClient) Get(ctx context.Context, id uint32) (*PaymentBalanceLock, error) {
	return c.Query().Where(paymentbalancelock.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentBalanceLockClient) GetX(ctx context.Context, id uint32) *PaymentBalanceLock {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PaymentBalanceLockClient) Hooks() []Hook {
	return c.hooks.PaymentBalanceLock
}

// Interceptors returns the client interceptors.
func (c *PaymentBalanceLockClient) Interceptors() []Interceptor {
	return c.inters.PaymentBalanceLock
}

func (c *PaymentBalanceLockClient) mutate(ctx context.Context, m *PaymentBalanceLockMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentBalanceLockCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentBalanceLockUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentBalanceLockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentBalanceLockDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown PaymentBalanceLock mutation op: %q", m.Op())
	}
}

// PaymentBaseClient is a client for the PaymentBase schema.
type PaymentBaseClient struct {
	config
}

// NewPaymentBaseClient returns a client for the PaymentBase from the given config.
func NewPaymentBaseClient(c config) *PaymentBaseClient {
	return &PaymentBaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymentbase.Hooks(f(g(h())))`.
func (c *PaymentBaseClient) Use(hooks ...Hook) {
	c.hooks.PaymentBase = append(c.hooks.PaymentBase, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `paymentbase.Intercept(f(g(h())))`.
func (c *PaymentBaseClient) Intercept(interceptors ...Interceptor) {
	c.inters.PaymentBase = append(c.inters.PaymentBase, interceptors...)
}

// Create returns a builder for creating a PaymentBase entity.
func (c *PaymentBaseClient) Create() *PaymentBaseCreate {
	mutation := newPaymentBaseMutation(c.config, OpCreate)
	return &PaymentBaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentBase entities.
func (c *PaymentBaseClient) CreateBulk(builders ...*PaymentBaseCreate) *PaymentBaseCreateBulk {
	return &PaymentBaseCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PaymentBaseClient) MapCreateBulk(slice any, setFunc func(*PaymentBaseCreate, int)) *PaymentBaseCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PaymentBaseCreateBulk{err: fmt.Errorf("calling to PaymentBaseClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PaymentBaseCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PaymentBaseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentBase.
func (c *PaymentBaseClient) Update() *PaymentBaseUpdate {
	mutation := newPaymentBaseMutation(c.config, OpUpdate)
	return &PaymentBaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentBaseClient) UpdateOne(pb *PaymentBase) *PaymentBaseUpdateOne {
	mutation := newPaymentBaseMutation(c.config, OpUpdateOne, withPaymentBase(pb))
	return &PaymentBaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentBaseClient) UpdateOneID(id uint32) *PaymentBaseUpdateOne {
	mutation := newPaymentBaseMutation(c.config, OpUpdateOne, withPaymentBaseID(id))
	return &PaymentBaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentBase.
func (c *PaymentBaseClient) Delete() *PaymentBaseDelete {
	mutation := newPaymentBaseMutation(c.config, OpDelete)
	return &PaymentBaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentBaseClient) DeleteOne(pb *PaymentBase) *PaymentBaseDeleteOne {
	return c.DeleteOneID(pb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentBaseClient) DeleteOneID(id uint32) *PaymentBaseDeleteOne {
	builder := c.Delete().Where(paymentbase.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentBaseDeleteOne{builder}
}

// Query returns a query builder for PaymentBase.
func (c *PaymentBaseClient) Query() *PaymentBaseQuery {
	return &PaymentBaseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePaymentBase},
		inters: c.Interceptors(),
	}
}

// Get returns a PaymentBase entity by its id.
func (c *PaymentBaseClient) Get(ctx context.Context, id uint32) (*PaymentBase, error) {
	return c.Query().Where(paymentbase.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentBaseClient) GetX(ctx context.Context, id uint32) *PaymentBase {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PaymentBaseClient) Hooks() []Hook {
	return c.hooks.PaymentBase
}

// Interceptors returns the client interceptors.
func (c *PaymentBaseClient) Interceptors() []Interceptor {
	return c.inters.PaymentBase
}

func (c *PaymentBaseClient) mutate(ctx context.Context, m *PaymentBaseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentBaseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentBaseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentBaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentBaseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown PaymentBase mutation op: %q", m.Op())
	}
}

// PaymentContractClient is a client for the PaymentContract schema.
type PaymentContractClient struct {
	config
}

// NewPaymentContractClient returns a client for the PaymentContract from the given config.
func NewPaymentContractClient(c config) *PaymentContractClient {
	return &PaymentContractClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymentcontract.Hooks(f(g(h())))`.
func (c *PaymentContractClient) Use(hooks ...Hook) {
	c.hooks.PaymentContract = append(c.hooks.PaymentContract, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `paymentcontract.Intercept(f(g(h())))`.
func (c *PaymentContractClient) Intercept(interceptors ...Interceptor) {
	c.inters.PaymentContract = append(c.inters.PaymentContract, interceptors...)
}

// Create returns a builder for creating a PaymentContract entity.
func (c *PaymentContractClient) Create() *PaymentContractCreate {
	mutation := newPaymentContractMutation(c.config, OpCreate)
	return &PaymentContractCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentContract entities.
func (c *PaymentContractClient) CreateBulk(builders ...*PaymentContractCreate) *PaymentContractCreateBulk {
	return &PaymentContractCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PaymentContractClient) MapCreateBulk(slice any, setFunc func(*PaymentContractCreate, int)) *PaymentContractCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PaymentContractCreateBulk{err: fmt.Errorf("calling to PaymentContractClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PaymentContractCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PaymentContractCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentContract.
func (c *PaymentContractClient) Update() *PaymentContractUpdate {
	mutation := newPaymentContractMutation(c.config, OpUpdate)
	return &PaymentContractUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentContractClient) UpdateOne(pc *PaymentContract) *PaymentContractUpdateOne {
	mutation := newPaymentContractMutation(c.config, OpUpdateOne, withPaymentContract(pc))
	return &PaymentContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentContractClient) UpdateOneID(id uint32) *PaymentContractUpdateOne {
	mutation := newPaymentContractMutation(c.config, OpUpdateOne, withPaymentContractID(id))
	return &PaymentContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentContract.
func (c *PaymentContractClient) Delete() *PaymentContractDelete {
	mutation := newPaymentContractMutation(c.config, OpDelete)
	return &PaymentContractDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentContractClient) DeleteOne(pc *PaymentContract) *PaymentContractDeleteOne {
	return c.DeleteOneID(pc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentContractClient) DeleteOneID(id uint32) *PaymentContractDeleteOne {
	builder := c.Delete().Where(paymentcontract.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentContractDeleteOne{builder}
}

// Query returns a query builder for PaymentContract.
func (c *PaymentContractClient) Query() *PaymentContractQuery {
	return &PaymentContractQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePaymentContract},
		inters: c.Interceptors(),
	}
}

// Get returns a PaymentContract entity by its id.
func (c *PaymentContractClient) Get(ctx context.Context, id uint32) (*PaymentContract, error) {
	return c.Query().Where(paymentcontract.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentContractClient) GetX(ctx context.Context, id uint32) *PaymentContract {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PaymentContractClient) Hooks() []Hook {
	return c.hooks.PaymentContract
}

// Interceptors returns the client interceptors.
func (c *PaymentContractClient) Interceptors() []Interceptor {
	return c.inters.PaymentContract
}

func (c *PaymentContractClient) mutate(ctx context.Context, m *PaymentContractMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentContractCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentContractUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentContractDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown PaymentContract mutation op: %q", m.Op())
	}
}

// PaymentTransferClient is a client for the PaymentTransfer schema.
type PaymentTransferClient struct {
	config
}

// NewPaymentTransferClient returns a client for the PaymentTransfer from the given config.
func NewPaymentTransferClient(c config) *PaymentTransferClient {
	return &PaymentTransferClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymenttransfer.Hooks(f(g(h())))`.
func (c *PaymentTransferClient) Use(hooks ...Hook) {
	c.hooks.PaymentTransfer = append(c.hooks.PaymentTransfer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `paymenttransfer.Intercept(f(g(h())))`.
func (c *PaymentTransferClient) Intercept(interceptors ...Interceptor) {
	c.inters.PaymentTransfer = append(c.inters.PaymentTransfer, interceptors...)
}

// Create returns a builder for creating a PaymentTransfer entity.
func (c *PaymentTransferClient) Create() *PaymentTransferCreate {
	mutation := newPaymentTransferMutation(c.config, OpCreate)
	return &PaymentTransferCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentTransfer entities.
func (c *PaymentTransferClient) CreateBulk(builders ...*PaymentTransferCreate) *PaymentTransferCreateBulk {
	return &PaymentTransferCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PaymentTransferClient) MapCreateBulk(slice any, setFunc func(*PaymentTransferCreate, int)) *PaymentTransferCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PaymentTransferCreateBulk{err: fmt.Errorf("calling to PaymentTransferClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PaymentTransferCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PaymentTransferCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentTransfer.
func (c *PaymentTransferClient) Update() *PaymentTransferUpdate {
	mutation := newPaymentTransferMutation(c.config, OpUpdate)
	return &PaymentTransferUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentTransferClient) UpdateOne(pt *PaymentTransfer) *PaymentTransferUpdateOne {
	mutation := newPaymentTransferMutation(c.config, OpUpdateOne, withPaymentTransfer(pt))
	return &PaymentTransferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentTransferClient) UpdateOneID(id uint32) *PaymentTransferUpdateOne {
	mutation := newPaymentTransferMutation(c.config, OpUpdateOne, withPaymentTransferID(id))
	return &PaymentTransferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentTransfer.
func (c *PaymentTransferClient) Delete() *PaymentTransferDelete {
	mutation := newPaymentTransferMutation(c.config, OpDelete)
	return &PaymentTransferDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentTransferClient) DeleteOne(pt *PaymentTransfer) *PaymentTransferDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentTransferClient) DeleteOneID(id uint32) *PaymentTransferDeleteOne {
	builder := c.Delete().Where(paymenttransfer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentTransferDeleteOne{builder}
}

// Query returns a query builder for PaymentTransfer.
func (c *PaymentTransferClient) Query() *PaymentTransferQuery {
	return &PaymentTransferQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePaymentTransfer},
		inters: c.Interceptors(),
	}
}

// Get returns a PaymentTransfer entity by its id.
func (c *PaymentTransferClient) Get(ctx context.Context, id uint32) (*PaymentTransfer, error) {
	return c.Query().Where(paymenttransfer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentTransferClient) GetX(ctx context.Context, id uint32) *PaymentTransfer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PaymentTransferClient) Hooks() []Hook {
	return c.hooks.PaymentTransfer
}

// Interceptors returns the client interceptors.
func (c *PaymentTransferClient) Interceptors() []Interceptor {
	return c.inters.PaymentTransfer
}

func (c *PaymentTransferClient) mutate(ctx context.Context, m *PaymentTransferMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentTransferCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentTransferUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentTransferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentTransferDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown PaymentTransfer mutation op: %q", m.Op())
	}
}

// PoolOrderUserClient is a client for the PoolOrderUser schema.
type PoolOrderUserClient struct {
	config
}

// NewPoolOrderUserClient returns a client for the PoolOrderUser from the given config.
func NewPoolOrderUserClient(c config) *PoolOrderUserClient {
	return &PoolOrderUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `poolorderuser.Hooks(f(g(h())))`.
func (c *PoolOrderUserClient) Use(hooks ...Hook) {
	c.hooks.PoolOrderUser = append(c.hooks.PoolOrderUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `poolorderuser.Intercept(f(g(h())))`.
func (c *PoolOrderUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.PoolOrderUser = append(c.inters.PoolOrderUser, interceptors...)
}

// Create returns a builder for creating a PoolOrderUser entity.
func (c *PoolOrderUserClient) Create() *PoolOrderUserCreate {
	mutation := newPoolOrderUserMutation(c.config, OpCreate)
	return &PoolOrderUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PoolOrderUser entities.
func (c *PoolOrderUserClient) CreateBulk(builders ...*PoolOrderUserCreate) *PoolOrderUserCreateBulk {
	return &PoolOrderUserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PoolOrderUserClient) MapCreateBulk(slice any, setFunc func(*PoolOrderUserCreate, int)) *PoolOrderUserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PoolOrderUserCreateBulk{err: fmt.Errorf("calling to PoolOrderUserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PoolOrderUserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PoolOrderUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PoolOrderUser.
func (c *PoolOrderUserClient) Update() *PoolOrderUserUpdate {
	mutation := newPoolOrderUserMutation(c.config, OpUpdate)
	return &PoolOrderUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PoolOrderUserClient) UpdateOne(pou *PoolOrderUser) *PoolOrderUserUpdateOne {
	mutation := newPoolOrderUserMutation(c.config, OpUpdateOne, withPoolOrderUser(pou))
	return &PoolOrderUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PoolOrderUserClient) UpdateOneID(id uint32) *PoolOrderUserUpdateOne {
	mutation := newPoolOrderUserMutation(c.config, OpUpdateOne, withPoolOrderUserID(id))
	return &PoolOrderUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PoolOrderUser.
func (c *PoolOrderUserClient) Delete() *PoolOrderUserDelete {
	mutation := newPoolOrderUserMutation(c.config, OpDelete)
	return &PoolOrderUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PoolOrderUserClient) DeleteOne(pou *PoolOrderUser) *PoolOrderUserDeleteOne {
	return c.DeleteOneID(pou.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PoolOrderUserClient) DeleteOneID(id uint32) *PoolOrderUserDeleteOne {
	builder := c.Delete().Where(poolorderuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PoolOrderUserDeleteOne{builder}
}

// Query returns a query builder for PoolOrderUser.
func (c *PoolOrderUserClient) Query() *PoolOrderUserQuery {
	return &PoolOrderUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePoolOrderUser},
		inters: c.Interceptors(),
	}
}

// Get returns a PoolOrderUser entity by its id.
func (c *PoolOrderUserClient) Get(ctx context.Context, id uint32) (*PoolOrderUser, error) {
	return c.Query().Where(poolorderuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PoolOrderUserClient) GetX(ctx context.Context, id uint32) *PoolOrderUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PoolOrderUserClient) Hooks() []Hook {
	return c.hooks.PoolOrderUser
}

// Interceptors returns the client interceptors.
func (c *PoolOrderUserClient) Interceptors() []Interceptor {
	return c.inters.PoolOrderUser
}

func (c *PoolOrderUserClient) mutate(ctx context.Context, m *PoolOrderUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PoolOrderUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PoolOrderUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PoolOrderUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PoolOrderUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown PoolOrderUser mutation op: %q", m.Op())
	}
}

// PowerRentalClient is a client for the PowerRental schema.
type PowerRentalClient struct {
	config
}

// NewPowerRentalClient returns a client for the PowerRental from the given config.
func NewPowerRentalClient(c config) *PowerRentalClient {
	return &PowerRentalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `powerrental.Hooks(f(g(h())))`.
func (c *PowerRentalClient) Use(hooks ...Hook) {
	c.hooks.PowerRental = append(c.hooks.PowerRental, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `powerrental.Intercept(f(g(h())))`.
func (c *PowerRentalClient) Intercept(interceptors ...Interceptor) {
	c.inters.PowerRental = append(c.inters.PowerRental, interceptors...)
}

// Create returns a builder for creating a PowerRental entity.
func (c *PowerRentalClient) Create() *PowerRentalCreate {
	mutation := newPowerRentalMutation(c.config, OpCreate)
	return &PowerRentalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PowerRental entities.
func (c *PowerRentalClient) CreateBulk(builders ...*PowerRentalCreate) *PowerRentalCreateBulk {
	return &PowerRentalCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PowerRentalClient) MapCreateBulk(slice any, setFunc func(*PowerRentalCreate, int)) *PowerRentalCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PowerRentalCreateBulk{err: fmt.Errorf("calling to PowerRentalClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PowerRentalCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PowerRentalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PowerRental.
func (c *PowerRentalClient) Update() *PowerRentalUpdate {
	mutation := newPowerRentalMutation(c.config, OpUpdate)
	return &PowerRentalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PowerRentalClient) UpdateOne(pr *PowerRental) *PowerRentalUpdateOne {
	mutation := newPowerRentalMutation(c.config, OpUpdateOne, withPowerRental(pr))
	return &PowerRentalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PowerRentalClient) UpdateOneID(id uint32) *PowerRentalUpdateOne {
	mutation := newPowerRentalMutation(c.config, OpUpdateOne, withPowerRentalID(id))
	return &PowerRentalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PowerRental.
func (c *PowerRentalClient) Delete() *PowerRentalDelete {
	mutation := newPowerRentalMutation(c.config, OpDelete)
	return &PowerRentalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PowerRentalClient) DeleteOne(pr *PowerRental) *PowerRentalDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PowerRentalClient) DeleteOneID(id uint32) *PowerRentalDeleteOne {
	builder := c.Delete().Where(powerrental.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PowerRentalDeleteOne{builder}
}

// Query returns a query builder for PowerRental.
func (c *PowerRentalClient) Query() *PowerRentalQuery {
	return &PowerRentalQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePowerRental},
		inters: c.Interceptors(),
	}
}

// Get returns a PowerRental entity by its id.
func (c *PowerRentalClient) Get(ctx context.Context, id uint32) (*PowerRental, error) {
	return c.Query().Where(powerrental.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PowerRentalClient) GetX(ctx context.Context, id uint32) *PowerRental {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PowerRentalClient) Hooks() []Hook {
	return c.hooks.PowerRental
}

// Interceptors returns the client interceptors.
func (c *PowerRentalClient) Interceptors() []Interceptor {
	return c.inters.PowerRental
}

func (c *PowerRentalClient) mutate(ctx context.Context, m *PowerRentalMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PowerRentalCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PowerRentalUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PowerRentalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PowerRentalDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown PowerRental mutation op: %q", m.Op())
	}
}

// PowerRentalStateClient is a client for the PowerRentalState schema.
type PowerRentalStateClient struct {
	config
}

// NewPowerRentalStateClient returns a client for the PowerRentalState from the given config.
func NewPowerRentalStateClient(c config) *PowerRentalStateClient {
	return &PowerRentalStateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `powerrentalstate.Hooks(f(g(h())))`.
func (c *PowerRentalStateClient) Use(hooks ...Hook) {
	c.hooks.PowerRentalState = append(c.hooks.PowerRentalState, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `powerrentalstate.Intercept(f(g(h())))`.
func (c *PowerRentalStateClient) Intercept(interceptors ...Interceptor) {
	c.inters.PowerRentalState = append(c.inters.PowerRentalState, interceptors...)
}

// Create returns a builder for creating a PowerRentalState entity.
func (c *PowerRentalStateClient) Create() *PowerRentalStateCreate {
	mutation := newPowerRentalStateMutation(c.config, OpCreate)
	return &PowerRentalStateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PowerRentalState entities.
func (c *PowerRentalStateClient) CreateBulk(builders ...*PowerRentalStateCreate) *PowerRentalStateCreateBulk {
	return &PowerRentalStateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PowerRentalStateClient) MapCreateBulk(slice any, setFunc func(*PowerRentalStateCreate, int)) *PowerRentalStateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PowerRentalStateCreateBulk{err: fmt.Errorf("calling to PowerRentalStateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PowerRentalStateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PowerRentalStateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PowerRentalState.
func (c *PowerRentalStateClient) Update() *PowerRentalStateUpdate {
	mutation := newPowerRentalStateMutation(c.config, OpUpdate)
	return &PowerRentalStateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PowerRentalStateClient) UpdateOne(prs *PowerRentalState) *PowerRentalStateUpdateOne {
	mutation := newPowerRentalStateMutation(c.config, OpUpdateOne, withPowerRentalState(prs))
	return &PowerRentalStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PowerRentalStateClient) UpdateOneID(id uint32) *PowerRentalStateUpdateOne {
	mutation := newPowerRentalStateMutation(c.config, OpUpdateOne, withPowerRentalStateID(id))
	return &PowerRentalStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PowerRentalState.
func (c *PowerRentalStateClient) Delete() *PowerRentalStateDelete {
	mutation := newPowerRentalStateMutation(c.config, OpDelete)
	return &PowerRentalStateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PowerRentalStateClient) DeleteOne(prs *PowerRentalState) *PowerRentalStateDeleteOne {
	return c.DeleteOneID(prs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PowerRentalStateClient) DeleteOneID(id uint32) *PowerRentalStateDeleteOne {
	builder := c.Delete().Where(powerrentalstate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PowerRentalStateDeleteOne{builder}
}

// Query returns a query builder for PowerRentalState.
func (c *PowerRentalStateClient) Query() *PowerRentalStateQuery {
	return &PowerRentalStateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePowerRentalState},
		inters: c.Interceptors(),
	}
}

// Get returns a PowerRentalState entity by its id.
func (c *PowerRentalStateClient) Get(ctx context.Context, id uint32) (*PowerRentalState, error) {
	return c.Query().Where(powerrentalstate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PowerRentalStateClient) GetX(ctx context.Context, id uint32) *PowerRentalState {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PowerRentalStateClient) Hooks() []Hook {
	return c.hooks.PowerRentalState
}

// Interceptors returns the client interceptors.
func (c *PowerRentalStateClient) Interceptors() []Interceptor {
	return c.inters.PowerRentalState
}

func (c *PowerRentalStateClient) mutate(ctx context.Context, m *PowerRentalStateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PowerRentalStateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PowerRentalStateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PowerRentalStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PowerRentalStateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown PowerRentalState mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AppConfig, Compensate, FeeOrder, FeeOrderState, Order, OrderBase, OrderCoupon,
		OrderLock, OrderState, OrderStateBase, OutOfGas, Payment, PaymentBalance,
		PaymentBalanceLock, PaymentBase, PaymentContract, PaymentTransfer,
		PoolOrderUser, PowerRental, PowerRentalState []ent.Hook
	}
	inters struct {
		AppConfig, Compensate, FeeOrder, FeeOrderState, Order, OrderBase, OrderCoupon,
		OrderLock, OrderState, OrderStateBase, OutOfGas, Payment, PaymentBalance,
		PaymentBalanceLock, PaymentBase, PaymentContract, PaymentTransfer,
		PoolOrderUser, PowerRental, PowerRentalState []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}

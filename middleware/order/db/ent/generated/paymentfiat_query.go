// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/paymentfiat"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/predicate"
)

// PaymentFiatQuery is the builder for querying PaymentFiat entities.
type PaymentFiatQuery struct {
	config
	ctx        *QueryContext
	order      []paymentfiat.OrderOption
	inters     []Interceptor
	predicates []predicate.PaymentFiat
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PaymentFiatQuery builder.
func (pfq *PaymentFiatQuery) Where(ps ...predicate.PaymentFiat) *PaymentFiatQuery {
	pfq.predicates = append(pfq.predicates, ps...)
	return pfq
}

// Limit the number of records to be returned by this query.
func (pfq *PaymentFiatQuery) Limit(limit int) *PaymentFiatQuery {
	pfq.ctx.Limit = &limit
	return pfq
}

// Offset to start from.
func (pfq *PaymentFiatQuery) Offset(offset int) *PaymentFiatQuery {
	pfq.ctx.Offset = &offset
	return pfq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pfq *PaymentFiatQuery) Unique(unique bool) *PaymentFiatQuery {
	pfq.ctx.Unique = &unique
	return pfq
}

// Order specifies how the records should be ordered.
func (pfq *PaymentFiatQuery) Order(o ...paymentfiat.OrderOption) *PaymentFiatQuery {
	pfq.order = append(pfq.order, o...)
	return pfq
}

// First returns the first PaymentFiat entity from the query.
// Returns a *NotFoundError when no PaymentFiat was found.
func (pfq *PaymentFiatQuery) First(ctx context.Context) (*PaymentFiat, error) {
	nodes, err := pfq.Limit(1).All(setContextOp(ctx, pfq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{paymentfiat.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pfq *PaymentFiatQuery) FirstX(ctx context.Context) *PaymentFiat {
	node, err := pfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PaymentFiat ID from the query.
// Returns a *NotFoundError when no PaymentFiat ID was found.
func (pfq *PaymentFiatQuery) FirstID(ctx context.Context) (id uint32, err error) {
	var ids []uint32
	if ids, err = pfq.Limit(1).IDs(setContextOp(ctx, pfq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{paymentfiat.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pfq *PaymentFiatQuery) FirstIDX(ctx context.Context) uint32 {
	id, err := pfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PaymentFiat entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PaymentFiat entity is found.
// Returns a *NotFoundError when no PaymentFiat entities are found.
func (pfq *PaymentFiatQuery) Only(ctx context.Context) (*PaymentFiat, error) {
	nodes, err := pfq.Limit(2).All(setContextOp(ctx, pfq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{paymentfiat.Label}
	default:
		return nil, &NotSingularError{paymentfiat.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pfq *PaymentFiatQuery) OnlyX(ctx context.Context) *PaymentFiat {
	node, err := pfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PaymentFiat ID in the query.
// Returns a *NotSingularError when more than one PaymentFiat ID is found.
// Returns a *NotFoundError when no entities are found.
func (pfq *PaymentFiatQuery) OnlyID(ctx context.Context) (id uint32, err error) {
	var ids []uint32
	if ids, err = pfq.Limit(2).IDs(setContextOp(ctx, pfq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{paymentfiat.Label}
	default:
		err = &NotSingularError{paymentfiat.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pfq *PaymentFiatQuery) OnlyIDX(ctx context.Context) uint32 {
	id, err := pfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PaymentFiats.
func (pfq *PaymentFiatQuery) All(ctx context.Context) ([]*PaymentFiat, error) {
	ctx = setContextOp(ctx, pfq.ctx, ent.OpQueryAll)
	if err := pfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PaymentFiat, *PaymentFiatQuery]()
	return withInterceptors[[]*PaymentFiat](ctx, pfq, qr, pfq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pfq *PaymentFiatQuery) AllX(ctx context.Context) []*PaymentFiat {
	nodes, err := pfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PaymentFiat IDs.
func (pfq *PaymentFiatQuery) IDs(ctx context.Context) (ids []uint32, err error) {
	if pfq.ctx.Unique == nil && pfq.path != nil {
		pfq.Unique(true)
	}
	ctx = setContextOp(ctx, pfq.ctx, ent.OpQueryIDs)
	if err = pfq.Select(paymentfiat.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pfq *PaymentFiatQuery) IDsX(ctx context.Context) []uint32 {
	ids, err := pfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pfq *PaymentFiatQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pfq.ctx, ent.OpQueryCount)
	if err := pfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pfq, querierCount[*PaymentFiatQuery](), pfq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pfq *PaymentFiatQuery) CountX(ctx context.Context) int {
	count, err := pfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pfq *PaymentFiatQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pfq.ctx, ent.OpQueryExist)
	switch _, err := pfq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pfq *PaymentFiatQuery) ExistX(ctx context.Context) bool {
	exist, err := pfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PaymentFiatQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pfq *PaymentFiatQuery) Clone() *PaymentFiatQuery {
	if pfq == nil {
		return nil
	}
	return &PaymentFiatQuery{
		config:     pfq.config,
		ctx:        pfq.ctx.Clone(),
		order:      append([]paymentfiat.OrderOption{}, pfq.order...),
		inters:     append([]Interceptor{}, pfq.inters...),
		predicates: append([]predicate.PaymentFiat{}, pfq.predicates...),
		// clone intermediate query.
		sql:       pfq.sql.Clone(),
		path:      pfq.path,
		modifiers: append([]func(*sql.Selector){}, pfq.modifiers...),
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		EntID uuid.UUID `json:"ent_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PaymentFiat.Query().
//		GroupBy(paymentfiat.FieldEntID).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (pfq *PaymentFiatQuery) GroupBy(field string, fields ...string) *PaymentFiatGroupBy {
	pfq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PaymentFiatGroupBy{build: pfq}
	grbuild.flds = &pfq.ctx.Fields
	grbuild.label = paymentfiat.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		EntID uuid.UUID `json:"ent_id,omitempty"`
//	}
//
//	client.PaymentFiat.Query().
//		Select(paymentfiat.FieldEntID).
//		Scan(ctx, &v)
func (pfq *PaymentFiatQuery) Select(fields ...string) *PaymentFiatSelect {
	pfq.ctx.Fields = append(pfq.ctx.Fields, fields...)
	sbuild := &PaymentFiatSelect{PaymentFiatQuery: pfq}
	sbuild.label = paymentfiat.Label
	sbuild.flds, sbuild.scan = &pfq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PaymentFiatSelect configured with the given aggregations.
func (pfq *PaymentFiatQuery) Aggregate(fns ...AggregateFunc) *PaymentFiatSelect {
	return pfq.Select().Aggregate(fns...)
}

func (pfq *PaymentFiatQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pfq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pfq); err != nil {
				return err
			}
		}
	}
	for _, f := range pfq.ctx.Fields {
		if !paymentfiat.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if pfq.path != nil {
		prev, err := pfq.path(ctx)
		if err != nil {
			return err
		}
		pfq.sql = prev
	}
	return nil
}

func (pfq *PaymentFiatQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PaymentFiat, error) {
	var (
		nodes = []*PaymentFiat{}
		_spec = pfq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PaymentFiat).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PaymentFiat{config: pfq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(pfq.modifiers) > 0 {
		_spec.Modifiers = pfq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (pfq *PaymentFiatQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pfq.querySpec()
	if len(pfq.modifiers) > 0 {
		_spec.Modifiers = pfq.modifiers
	}
	_spec.Node.Columns = pfq.ctx.Fields
	if len(pfq.ctx.Fields) > 0 {
		_spec.Unique = pfq.ctx.Unique != nil && *pfq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pfq.driver, _spec)
}

func (pfq *PaymentFiatQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(paymentfiat.Table, paymentfiat.Columns, sqlgraph.NewFieldSpec(paymentfiat.FieldID, field.TypeUint32))
	_spec.From = pfq.sql
	if unique := pfq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pfq.path != nil {
		_spec.Unique = true
	}
	if fields := pfq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentfiat.FieldID)
		for i := range fields {
			if fields[i] != paymentfiat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pfq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pfq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pfq *PaymentFiatQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pfq.driver.Dialect())
	t1 := builder.Table(paymentfiat.Table)
	columns := pfq.ctx.Fields
	if len(columns) == 0 {
		columns = paymentfiat.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pfq.sql != nil {
		selector = pfq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pfq.ctx.Unique != nil && *pfq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range pfq.modifiers {
		m(selector)
	}
	for _, p := range pfq.predicates {
		p(selector)
	}
	for _, p := range pfq.order {
		p(selector)
	}
	if offset := pfq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pfq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (pfq *PaymentFiatQuery) ForUpdate(opts ...sql.LockOption) *PaymentFiatQuery {
	if pfq.driver.Dialect() == dialect.Postgres {
		pfq.Unique(false)
	}
	pfq.modifiers = append(pfq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return pfq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (pfq *PaymentFiatQuery) ForShare(opts ...sql.LockOption) *PaymentFiatQuery {
	if pfq.driver.Dialect() == dialect.Postgres {
		pfq.Unique(false)
	}
	pfq.modifiers = append(pfq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return pfq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (pfq *PaymentFiatQuery) Modify(modifiers ...func(s *sql.Selector)) *PaymentFiatSelect {
	pfq.modifiers = append(pfq.modifiers, modifiers...)
	return pfq.Select()
}

// PaymentFiatGroupBy is the group-by builder for PaymentFiat entities.
type PaymentFiatGroupBy struct {
	selector
	build *PaymentFiatQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pfgb *PaymentFiatGroupBy) Aggregate(fns ...AggregateFunc) *PaymentFiatGroupBy {
	pfgb.fns = append(pfgb.fns, fns...)
	return pfgb
}

// Scan applies the selector query and scans the result into the given value.
func (pfgb *PaymentFiatGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pfgb.build.ctx, ent.OpQueryGroupBy)
	if err := pfgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PaymentFiatQuery, *PaymentFiatGroupBy](ctx, pfgb.build, pfgb, pfgb.build.inters, v)
}

func (pfgb *PaymentFiatGroupBy) sqlScan(ctx context.Context, root *PaymentFiatQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pfgb.fns))
	for _, fn := range pfgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pfgb.flds)+len(pfgb.fns))
		for _, f := range *pfgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pfgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pfgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PaymentFiatSelect is the builder for selecting fields of PaymentFiat entities.
type PaymentFiatSelect struct {
	*PaymentFiatQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pfs *PaymentFiatSelect) Aggregate(fns ...AggregateFunc) *PaymentFiatSelect {
	pfs.fns = append(pfs.fns, fns...)
	return pfs
}

// Scan applies the selector query and scans the result into the given value.
func (pfs *PaymentFiatSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pfs.ctx, ent.OpQuerySelect)
	if err := pfs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PaymentFiatQuery, *PaymentFiatSelect](ctx, pfs.PaymentFiatQuery, pfs, pfs.inters, v)
}

func (pfs *PaymentFiatSelect) sqlScan(ctx context.Context, root *PaymentFiatQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pfs.fns))
	for _, fn := range pfs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pfs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (pfs *PaymentFiatSelect) Modify(modifiers ...func(s *sql.Selector)) *PaymentFiatSelect {
	pfs.modifiers = append(pfs.modifiers, modifiers...)
	return pfs
}

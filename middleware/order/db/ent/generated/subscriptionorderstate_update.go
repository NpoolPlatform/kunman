// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/subscriptionorderstate"
	"github.com/google/uuid"
)

// SubscriptionOrderStateUpdate is the builder for updating SubscriptionOrderState entities.
type SubscriptionOrderStateUpdate struct {
	config
	hooks     []Hook
	mutation  *SubscriptionOrderStateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SubscriptionOrderStateUpdate builder.
func (sosu *SubscriptionOrderStateUpdate) Where(ps ...predicate.SubscriptionOrderState) *SubscriptionOrderStateUpdate {
	sosu.mutation.Where(ps...)
	return sosu
}

// SetEntID sets the "ent_id" field.
func (sosu *SubscriptionOrderStateUpdate) SetEntID(u uuid.UUID) *SubscriptionOrderStateUpdate {
	sosu.mutation.SetEntID(u)
	return sosu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (sosu *SubscriptionOrderStateUpdate) SetNillableEntID(u *uuid.UUID) *SubscriptionOrderStateUpdate {
	if u != nil {
		sosu.SetEntID(*u)
	}
	return sosu
}

// SetCreatedAt sets the "created_at" field.
func (sosu *SubscriptionOrderStateUpdate) SetCreatedAt(u uint32) *SubscriptionOrderStateUpdate {
	sosu.mutation.ResetCreatedAt()
	sosu.mutation.SetCreatedAt(u)
	return sosu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sosu *SubscriptionOrderStateUpdate) SetNillableCreatedAt(u *uint32) *SubscriptionOrderStateUpdate {
	if u != nil {
		sosu.SetCreatedAt(*u)
	}
	return sosu
}

// AddCreatedAt adds u to the "created_at" field.
func (sosu *SubscriptionOrderStateUpdate) AddCreatedAt(u int32) *SubscriptionOrderStateUpdate {
	sosu.mutation.AddCreatedAt(u)
	return sosu
}

// SetUpdatedAt sets the "updated_at" field.
func (sosu *SubscriptionOrderStateUpdate) SetUpdatedAt(u uint32) *SubscriptionOrderStateUpdate {
	sosu.mutation.ResetUpdatedAt()
	sosu.mutation.SetUpdatedAt(u)
	return sosu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (sosu *SubscriptionOrderStateUpdate) AddUpdatedAt(u int32) *SubscriptionOrderStateUpdate {
	sosu.mutation.AddUpdatedAt(u)
	return sosu
}

// SetDeletedAt sets the "deleted_at" field.
func (sosu *SubscriptionOrderStateUpdate) SetDeletedAt(u uint32) *SubscriptionOrderStateUpdate {
	sosu.mutation.ResetDeletedAt()
	sosu.mutation.SetDeletedAt(u)
	return sosu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sosu *SubscriptionOrderStateUpdate) SetNillableDeletedAt(u *uint32) *SubscriptionOrderStateUpdate {
	if u != nil {
		sosu.SetDeletedAt(*u)
	}
	return sosu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (sosu *SubscriptionOrderStateUpdate) AddDeletedAt(u int32) *SubscriptionOrderStateUpdate {
	sosu.mutation.AddDeletedAt(u)
	return sosu
}

// SetOrderID sets the "order_id" field.
func (sosu *SubscriptionOrderStateUpdate) SetOrderID(u uuid.UUID) *SubscriptionOrderStateUpdate {
	sosu.mutation.SetOrderID(u)
	return sosu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (sosu *SubscriptionOrderStateUpdate) SetNillableOrderID(u *uuid.UUID) *SubscriptionOrderStateUpdate {
	if u != nil {
		sosu.SetOrderID(*u)
	}
	return sosu
}

// ClearOrderID clears the value of the "order_id" field.
func (sosu *SubscriptionOrderStateUpdate) ClearOrderID() *SubscriptionOrderStateUpdate {
	sosu.mutation.ClearOrderID()
	return sosu
}

// SetPaymentID sets the "payment_id" field.
func (sosu *SubscriptionOrderStateUpdate) SetPaymentID(u uuid.UUID) *SubscriptionOrderStateUpdate {
	sosu.mutation.SetPaymentID(u)
	return sosu
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (sosu *SubscriptionOrderStateUpdate) SetNillablePaymentID(u *uuid.UUID) *SubscriptionOrderStateUpdate {
	if u != nil {
		sosu.SetPaymentID(*u)
	}
	return sosu
}

// ClearPaymentID clears the value of the "payment_id" field.
func (sosu *SubscriptionOrderStateUpdate) ClearPaymentID() *SubscriptionOrderStateUpdate {
	sosu.mutation.ClearPaymentID()
	return sosu
}

// SetPaidAt sets the "paid_at" field.
func (sosu *SubscriptionOrderStateUpdate) SetPaidAt(u uint32) *SubscriptionOrderStateUpdate {
	sosu.mutation.ResetPaidAt()
	sosu.mutation.SetPaidAt(u)
	return sosu
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (sosu *SubscriptionOrderStateUpdate) SetNillablePaidAt(u *uint32) *SubscriptionOrderStateUpdate {
	if u != nil {
		sosu.SetPaidAt(*u)
	}
	return sosu
}

// AddPaidAt adds u to the "paid_at" field.
func (sosu *SubscriptionOrderStateUpdate) AddPaidAt(u int32) *SubscriptionOrderStateUpdate {
	sosu.mutation.AddPaidAt(u)
	return sosu
}

// ClearPaidAt clears the value of the "paid_at" field.
func (sosu *SubscriptionOrderStateUpdate) ClearPaidAt() *SubscriptionOrderStateUpdate {
	sosu.mutation.ClearPaidAt()
	return sosu
}

// SetUserSetPaid sets the "user_set_paid" field.
func (sosu *SubscriptionOrderStateUpdate) SetUserSetPaid(b bool) *SubscriptionOrderStateUpdate {
	sosu.mutation.SetUserSetPaid(b)
	return sosu
}

// SetNillableUserSetPaid sets the "user_set_paid" field if the given value is not nil.
func (sosu *SubscriptionOrderStateUpdate) SetNillableUserSetPaid(b *bool) *SubscriptionOrderStateUpdate {
	if b != nil {
		sosu.SetUserSetPaid(*b)
	}
	return sosu
}

// ClearUserSetPaid clears the value of the "user_set_paid" field.
func (sosu *SubscriptionOrderStateUpdate) ClearUserSetPaid() *SubscriptionOrderStateUpdate {
	sosu.mutation.ClearUserSetPaid()
	return sosu
}

// SetUserSetCanceled sets the "user_set_canceled" field.
func (sosu *SubscriptionOrderStateUpdate) SetUserSetCanceled(b bool) *SubscriptionOrderStateUpdate {
	sosu.mutation.SetUserSetCanceled(b)
	return sosu
}

// SetNillableUserSetCanceled sets the "user_set_canceled" field if the given value is not nil.
func (sosu *SubscriptionOrderStateUpdate) SetNillableUserSetCanceled(b *bool) *SubscriptionOrderStateUpdate {
	if b != nil {
		sosu.SetUserSetCanceled(*b)
	}
	return sosu
}

// ClearUserSetCanceled clears the value of the "user_set_canceled" field.
func (sosu *SubscriptionOrderStateUpdate) ClearUserSetCanceled() *SubscriptionOrderStateUpdate {
	sosu.mutation.ClearUserSetCanceled()
	return sosu
}

// SetAdminSetCanceled sets the "admin_set_canceled" field.
func (sosu *SubscriptionOrderStateUpdate) SetAdminSetCanceled(b bool) *SubscriptionOrderStateUpdate {
	sosu.mutation.SetAdminSetCanceled(b)
	return sosu
}

// SetNillableAdminSetCanceled sets the "admin_set_canceled" field if the given value is not nil.
func (sosu *SubscriptionOrderStateUpdate) SetNillableAdminSetCanceled(b *bool) *SubscriptionOrderStateUpdate {
	if b != nil {
		sosu.SetAdminSetCanceled(*b)
	}
	return sosu
}

// ClearAdminSetCanceled clears the value of the "admin_set_canceled" field.
func (sosu *SubscriptionOrderStateUpdate) ClearAdminSetCanceled() *SubscriptionOrderStateUpdate {
	sosu.mutation.ClearAdminSetCanceled()
	return sosu
}

// SetPaymentState sets the "payment_state" field.
func (sosu *SubscriptionOrderStateUpdate) SetPaymentState(s string) *SubscriptionOrderStateUpdate {
	sosu.mutation.SetPaymentState(s)
	return sosu
}

// SetNillablePaymentState sets the "payment_state" field if the given value is not nil.
func (sosu *SubscriptionOrderStateUpdate) SetNillablePaymentState(s *string) *SubscriptionOrderStateUpdate {
	if s != nil {
		sosu.SetPaymentState(*s)
	}
	return sosu
}

// ClearPaymentState clears the value of the "payment_state" field.
func (sosu *SubscriptionOrderStateUpdate) ClearPaymentState() *SubscriptionOrderStateUpdate {
	sosu.mutation.ClearPaymentState()
	return sosu
}

// SetCancelState sets the "cancel_state" field.
func (sosu *SubscriptionOrderStateUpdate) SetCancelState(s string) *SubscriptionOrderStateUpdate {
	sosu.mutation.SetCancelState(s)
	return sosu
}

// SetNillableCancelState sets the "cancel_state" field if the given value is not nil.
func (sosu *SubscriptionOrderStateUpdate) SetNillableCancelState(s *string) *SubscriptionOrderStateUpdate {
	if s != nil {
		sosu.SetCancelState(*s)
	}
	return sosu
}

// ClearCancelState clears the value of the "cancel_state" field.
func (sosu *SubscriptionOrderStateUpdate) ClearCancelState() *SubscriptionOrderStateUpdate {
	sosu.mutation.ClearCancelState()
	return sosu
}

// SetCanceledAt sets the "canceled_at" field.
func (sosu *SubscriptionOrderStateUpdate) SetCanceledAt(u uint32) *SubscriptionOrderStateUpdate {
	sosu.mutation.ResetCanceledAt()
	sosu.mutation.SetCanceledAt(u)
	return sosu
}

// SetNillableCanceledAt sets the "canceled_at" field if the given value is not nil.
func (sosu *SubscriptionOrderStateUpdate) SetNillableCanceledAt(u *uint32) *SubscriptionOrderStateUpdate {
	if u != nil {
		sosu.SetCanceledAt(*u)
	}
	return sosu
}

// AddCanceledAt adds u to the "canceled_at" field.
func (sosu *SubscriptionOrderStateUpdate) AddCanceledAt(u int32) *SubscriptionOrderStateUpdate {
	sosu.mutation.AddCanceledAt(u)
	return sosu
}

// ClearCanceledAt clears the value of the "canceled_at" field.
func (sosu *SubscriptionOrderStateUpdate) ClearCanceledAt() *SubscriptionOrderStateUpdate {
	sosu.mutation.ClearCanceledAt()
	return sosu
}

// Mutation returns the SubscriptionOrderStateMutation object of the builder.
func (sosu *SubscriptionOrderStateUpdate) Mutation() *SubscriptionOrderStateMutation {
	return sosu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sosu *SubscriptionOrderStateUpdate) Save(ctx context.Context) (int, error) {
	sosu.defaults()
	return withHooks(ctx, sosu.sqlSave, sosu.mutation, sosu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sosu *SubscriptionOrderStateUpdate) SaveX(ctx context.Context) int {
	affected, err := sosu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sosu *SubscriptionOrderStateUpdate) Exec(ctx context.Context) error {
	_, err := sosu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sosu *SubscriptionOrderStateUpdate) ExecX(ctx context.Context) {
	if err := sosu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sosu *SubscriptionOrderStateUpdate) defaults() {
	if _, ok := sosu.mutation.UpdatedAt(); !ok {
		v := subscriptionorderstate.UpdateDefaultUpdatedAt()
		sosu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sosu *SubscriptionOrderStateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubscriptionOrderStateUpdate {
	sosu.modifiers = append(sosu.modifiers, modifiers...)
	return sosu
}

func (sosu *SubscriptionOrderStateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(subscriptionorderstate.Table, subscriptionorderstate.Columns, sqlgraph.NewFieldSpec(subscriptionorderstate.FieldID, field.TypeUint32))
	if ps := sosu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sosu.mutation.EntID(); ok {
		_spec.SetField(subscriptionorderstate.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := sosu.mutation.CreatedAt(); ok {
		_spec.SetField(subscriptionorderstate.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := sosu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(subscriptionorderstate.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := sosu.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionorderstate.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := sosu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(subscriptionorderstate.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := sosu.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptionorderstate.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := sosu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(subscriptionorderstate.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := sosu.mutation.OrderID(); ok {
		_spec.SetField(subscriptionorderstate.FieldOrderID, field.TypeUUID, value)
	}
	if sosu.mutation.OrderIDCleared() {
		_spec.ClearField(subscriptionorderstate.FieldOrderID, field.TypeUUID)
	}
	if value, ok := sosu.mutation.PaymentID(); ok {
		_spec.SetField(subscriptionorderstate.FieldPaymentID, field.TypeUUID, value)
	}
	if sosu.mutation.PaymentIDCleared() {
		_spec.ClearField(subscriptionorderstate.FieldPaymentID, field.TypeUUID)
	}
	if value, ok := sosu.mutation.PaidAt(); ok {
		_spec.SetField(subscriptionorderstate.FieldPaidAt, field.TypeUint32, value)
	}
	if value, ok := sosu.mutation.AddedPaidAt(); ok {
		_spec.AddField(subscriptionorderstate.FieldPaidAt, field.TypeUint32, value)
	}
	if sosu.mutation.PaidAtCleared() {
		_spec.ClearField(subscriptionorderstate.FieldPaidAt, field.TypeUint32)
	}
	if value, ok := sosu.mutation.UserSetPaid(); ok {
		_spec.SetField(subscriptionorderstate.FieldUserSetPaid, field.TypeBool, value)
	}
	if sosu.mutation.UserSetPaidCleared() {
		_spec.ClearField(subscriptionorderstate.FieldUserSetPaid, field.TypeBool)
	}
	if value, ok := sosu.mutation.UserSetCanceled(); ok {
		_spec.SetField(subscriptionorderstate.FieldUserSetCanceled, field.TypeBool, value)
	}
	if sosu.mutation.UserSetCanceledCleared() {
		_spec.ClearField(subscriptionorderstate.FieldUserSetCanceled, field.TypeBool)
	}
	if value, ok := sosu.mutation.AdminSetCanceled(); ok {
		_spec.SetField(subscriptionorderstate.FieldAdminSetCanceled, field.TypeBool, value)
	}
	if sosu.mutation.AdminSetCanceledCleared() {
		_spec.ClearField(subscriptionorderstate.FieldAdminSetCanceled, field.TypeBool)
	}
	if value, ok := sosu.mutation.PaymentState(); ok {
		_spec.SetField(subscriptionorderstate.FieldPaymentState, field.TypeString, value)
	}
	if sosu.mutation.PaymentStateCleared() {
		_spec.ClearField(subscriptionorderstate.FieldPaymentState, field.TypeString)
	}
	if value, ok := sosu.mutation.CancelState(); ok {
		_spec.SetField(subscriptionorderstate.FieldCancelState, field.TypeString, value)
	}
	if sosu.mutation.CancelStateCleared() {
		_spec.ClearField(subscriptionorderstate.FieldCancelState, field.TypeString)
	}
	if value, ok := sosu.mutation.CanceledAt(); ok {
		_spec.SetField(subscriptionorderstate.FieldCanceledAt, field.TypeUint32, value)
	}
	if value, ok := sosu.mutation.AddedCanceledAt(); ok {
		_spec.AddField(subscriptionorderstate.FieldCanceledAt, field.TypeUint32, value)
	}
	if sosu.mutation.CanceledAtCleared() {
		_spec.ClearField(subscriptionorderstate.FieldCanceledAt, field.TypeUint32)
	}
	_spec.AddModifiers(sosu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sosu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionorderstate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sosu.mutation.done = true
	return n, nil
}

// SubscriptionOrderStateUpdateOne is the builder for updating a single SubscriptionOrderState entity.
type SubscriptionOrderStateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SubscriptionOrderStateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (sosuo *SubscriptionOrderStateUpdateOne) SetEntID(u uuid.UUID) *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.SetEntID(u)
	return sosuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (sosuo *SubscriptionOrderStateUpdateOne) SetNillableEntID(u *uuid.UUID) *SubscriptionOrderStateUpdateOne {
	if u != nil {
		sosuo.SetEntID(*u)
	}
	return sosuo
}

// SetCreatedAt sets the "created_at" field.
func (sosuo *SubscriptionOrderStateUpdateOne) SetCreatedAt(u uint32) *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.ResetCreatedAt()
	sosuo.mutation.SetCreatedAt(u)
	return sosuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sosuo *SubscriptionOrderStateUpdateOne) SetNillableCreatedAt(u *uint32) *SubscriptionOrderStateUpdateOne {
	if u != nil {
		sosuo.SetCreatedAt(*u)
	}
	return sosuo
}

// AddCreatedAt adds u to the "created_at" field.
func (sosuo *SubscriptionOrderStateUpdateOne) AddCreatedAt(u int32) *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.AddCreatedAt(u)
	return sosuo
}

// SetUpdatedAt sets the "updated_at" field.
func (sosuo *SubscriptionOrderStateUpdateOne) SetUpdatedAt(u uint32) *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.ResetUpdatedAt()
	sosuo.mutation.SetUpdatedAt(u)
	return sosuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (sosuo *SubscriptionOrderStateUpdateOne) AddUpdatedAt(u int32) *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.AddUpdatedAt(u)
	return sosuo
}

// SetDeletedAt sets the "deleted_at" field.
func (sosuo *SubscriptionOrderStateUpdateOne) SetDeletedAt(u uint32) *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.ResetDeletedAt()
	sosuo.mutation.SetDeletedAt(u)
	return sosuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sosuo *SubscriptionOrderStateUpdateOne) SetNillableDeletedAt(u *uint32) *SubscriptionOrderStateUpdateOne {
	if u != nil {
		sosuo.SetDeletedAt(*u)
	}
	return sosuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (sosuo *SubscriptionOrderStateUpdateOne) AddDeletedAt(u int32) *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.AddDeletedAt(u)
	return sosuo
}

// SetOrderID sets the "order_id" field.
func (sosuo *SubscriptionOrderStateUpdateOne) SetOrderID(u uuid.UUID) *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.SetOrderID(u)
	return sosuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (sosuo *SubscriptionOrderStateUpdateOne) SetNillableOrderID(u *uuid.UUID) *SubscriptionOrderStateUpdateOne {
	if u != nil {
		sosuo.SetOrderID(*u)
	}
	return sosuo
}

// ClearOrderID clears the value of the "order_id" field.
func (sosuo *SubscriptionOrderStateUpdateOne) ClearOrderID() *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.ClearOrderID()
	return sosuo
}

// SetPaymentID sets the "payment_id" field.
func (sosuo *SubscriptionOrderStateUpdateOne) SetPaymentID(u uuid.UUID) *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.SetPaymentID(u)
	return sosuo
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (sosuo *SubscriptionOrderStateUpdateOne) SetNillablePaymentID(u *uuid.UUID) *SubscriptionOrderStateUpdateOne {
	if u != nil {
		sosuo.SetPaymentID(*u)
	}
	return sosuo
}

// ClearPaymentID clears the value of the "payment_id" field.
func (sosuo *SubscriptionOrderStateUpdateOne) ClearPaymentID() *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.ClearPaymentID()
	return sosuo
}

// SetPaidAt sets the "paid_at" field.
func (sosuo *SubscriptionOrderStateUpdateOne) SetPaidAt(u uint32) *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.ResetPaidAt()
	sosuo.mutation.SetPaidAt(u)
	return sosuo
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (sosuo *SubscriptionOrderStateUpdateOne) SetNillablePaidAt(u *uint32) *SubscriptionOrderStateUpdateOne {
	if u != nil {
		sosuo.SetPaidAt(*u)
	}
	return sosuo
}

// AddPaidAt adds u to the "paid_at" field.
func (sosuo *SubscriptionOrderStateUpdateOne) AddPaidAt(u int32) *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.AddPaidAt(u)
	return sosuo
}

// ClearPaidAt clears the value of the "paid_at" field.
func (sosuo *SubscriptionOrderStateUpdateOne) ClearPaidAt() *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.ClearPaidAt()
	return sosuo
}

// SetUserSetPaid sets the "user_set_paid" field.
func (sosuo *SubscriptionOrderStateUpdateOne) SetUserSetPaid(b bool) *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.SetUserSetPaid(b)
	return sosuo
}

// SetNillableUserSetPaid sets the "user_set_paid" field if the given value is not nil.
func (sosuo *SubscriptionOrderStateUpdateOne) SetNillableUserSetPaid(b *bool) *SubscriptionOrderStateUpdateOne {
	if b != nil {
		sosuo.SetUserSetPaid(*b)
	}
	return sosuo
}

// ClearUserSetPaid clears the value of the "user_set_paid" field.
func (sosuo *SubscriptionOrderStateUpdateOne) ClearUserSetPaid() *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.ClearUserSetPaid()
	return sosuo
}

// SetUserSetCanceled sets the "user_set_canceled" field.
func (sosuo *SubscriptionOrderStateUpdateOne) SetUserSetCanceled(b bool) *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.SetUserSetCanceled(b)
	return sosuo
}

// SetNillableUserSetCanceled sets the "user_set_canceled" field if the given value is not nil.
func (sosuo *SubscriptionOrderStateUpdateOne) SetNillableUserSetCanceled(b *bool) *SubscriptionOrderStateUpdateOne {
	if b != nil {
		sosuo.SetUserSetCanceled(*b)
	}
	return sosuo
}

// ClearUserSetCanceled clears the value of the "user_set_canceled" field.
func (sosuo *SubscriptionOrderStateUpdateOne) ClearUserSetCanceled() *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.ClearUserSetCanceled()
	return sosuo
}

// SetAdminSetCanceled sets the "admin_set_canceled" field.
func (sosuo *SubscriptionOrderStateUpdateOne) SetAdminSetCanceled(b bool) *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.SetAdminSetCanceled(b)
	return sosuo
}

// SetNillableAdminSetCanceled sets the "admin_set_canceled" field if the given value is not nil.
func (sosuo *SubscriptionOrderStateUpdateOne) SetNillableAdminSetCanceled(b *bool) *SubscriptionOrderStateUpdateOne {
	if b != nil {
		sosuo.SetAdminSetCanceled(*b)
	}
	return sosuo
}

// ClearAdminSetCanceled clears the value of the "admin_set_canceled" field.
func (sosuo *SubscriptionOrderStateUpdateOne) ClearAdminSetCanceled() *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.ClearAdminSetCanceled()
	return sosuo
}

// SetPaymentState sets the "payment_state" field.
func (sosuo *SubscriptionOrderStateUpdateOne) SetPaymentState(s string) *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.SetPaymentState(s)
	return sosuo
}

// SetNillablePaymentState sets the "payment_state" field if the given value is not nil.
func (sosuo *SubscriptionOrderStateUpdateOne) SetNillablePaymentState(s *string) *SubscriptionOrderStateUpdateOne {
	if s != nil {
		sosuo.SetPaymentState(*s)
	}
	return sosuo
}

// ClearPaymentState clears the value of the "payment_state" field.
func (sosuo *SubscriptionOrderStateUpdateOne) ClearPaymentState() *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.ClearPaymentState()
	return sosuo
}

// SetCancelState sets the "cancel_state" field.
func (sosuo *SubscriptionOrderStateUpdateOne) SetCancelState(s string) *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.SetCancelState(s)
	return sosuo
}

// SetNillableCancelState sets the "cancel_state" field if the given value is not nil.
func (sosuo *SubscriptionOrderStateUpdateOne) SetNillableCancelState(s *string) *SubscriptionOrderStateUpdateOne {
	if s != nil {
		sosuo.SetCancelState(*s)
	}
	return sosuo
}

// ClearCancelState clears the value of the "cancel_state" field.
func (sosuo *SubscriptionOrderStateUpdateOne) ClearCancelState() *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.ClearCancelState()
	return sosuo
}

// SetCanceledAt sets the "canceled_at" field.
func (sosuo *SubscriptionOrderStateUpdateOne) SetCanceledAt(u uint32) *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.ResetCanceledAt()
	sosuo.mutation.SetCanceledAt(u)
	return sosuo
}

// SetNillableCanceledAt sets the "canceled_at" field if the given value is not nil.
func (sosuo *SubscriptionOrderStateUpdateOne) SetNillableCanceledAt(u *uint32) *SubscriptionOrderStateUpdateOne {
	if u != nil {
		sosuo.SetCanceledAt(*u)
	}
	return sosuo
}

// AddCanceledAt adds u to the "canceled_at" field.
func (sosuo *SubscriptionOrderStateUpdateOne) AddCanceledAt(u int32) *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.AddCanceledAt(u)
	return sosuo
}

// ClearCanceledAt clears the value of the "canceled_at" field.
func (sosuo *SubscriptionOrderStateUpdateOne) ClearCanceledAt() *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.ClearCanceledAt()
	return sosuo
}

// Mutation returns the SubscriptionOrderStateMutation object of the builder.
func (sosuo *SubscriptionOrderStateUpdateOne) Mutation() *SubscriptionOrderStateMutation {
	return sosuo.mutation
}

// Where appends a list predicates to the SubscriptionOrderStateUpdate builder.
func (sosuo *SubscriptionOrderStateUpdateOne) Where(ps ...predicate.SubscriptionOrderState) *SubscriptionOrderStateUpdateOne {
	sosuo.mutation.Where(ps...)
	return sosuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sosuo *SubscriptionOrderStateUpdateOne) Select(field string, fields ...string) *SubscriptionOrderStateUpdateOne {
	sosuo.fields = append([]string{field}, fields...)
	return sosuo
}

// Save executes the query and returns the updated SubscriptionOrderState entity.
func (sosuo *SubscriptionOrderStateUpdateOne) Save(ctx context.Context) (*SubscriptionOrderState, error) {
	sosuo.defaults()
	return withHooks(ctx, sosuo.sqlSave, sosuo.mutation, sosuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sosuo *SubscriptionOrderStateUpdateOne) SaveX(ctx context.Context) *SubscriptionOrderState {
	node, err := sosuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sosuo *SubscriptionOrderStateUpdateOne) Exec(ctx context.Context) error {
	_, err := sosuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sosuo *SubscriptionOrderStateUpdateOne) ExecX(ctx context.Context) {
	if err := sosuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sosuo *SubscriptionOrderStateUpdateOne) defaults() {
	if _, ok := sosuo.mutation.UpdatedAt(); !ok {
		v := subscriptionorderstate.UpdateDefaultUpdatedAt()
		sosuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sosuo *SubscriptionOrderStateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubscriptionOrderStateUpdateOne {
	sosuo.modifiers = append(sosuo.modifiers, modifiers...)
	return sosuo
}

func (sosuo *SubscriptionOrderStateUpdateOne) sqlSave(ctx context.Context) (_node *SubscriptionOrderState, err error) {
	_spec := sqlgraph.NewUpdateSpec(subscriptionorderstate.Table, subscriptionorderstate.Columns, sqlgraph.NewFieldSpec(subscriptionorderstate.FieldID, field.TypeUint32))
	id, ok := sosuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "SubscriptionOrderState.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sosuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptionorderstate.FieldID)
		for _, f := range fields {
			if !subscriptionorderstate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != subscriptionorderstate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sosuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sosuo.mutation.EntID(); ok {
		_spec.SetField(subscriptionorderstate.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := sosuo.mutation.CreatedAt(); ok {
		_spec.SetField(subscriptionorderstate.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := sosuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(subscriptionorderstate.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := sosuo.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionorderstate.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := sosuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(subscriptionorderstate.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := sosuo.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptionorderstate.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := sosuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(subscriptionorderstate.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := sosuo.mutation.OrderID(); ok {
		_spec.SetField(subscriptionorderstate.FieldOrderID, field.TypeUUID, value)
	}
	if sosuo.mutation.OrderIDCleared() {
		_spec.ClearField(subscriptionorderstate.FieldOrderID, field.TypeUUID)
	}
	if value, ok := sosuo.mutation.PaymentID(); ok {
		_spec.SetField(subscriptionorderstate.FieldPaymentID, field.TypeUUID, value)
	}
	if sosuo.mutation.PaymentIDCleared() {
		_spec.ClearField(subscriptionorderstate.FieldPaymentID, field.TypeUUID)
	}
	if value, ok := sosuo.mutation.PaidAt(); ok {
		_spec.SetField(subscriptionorderstate.FieldPaidAt, field.TypeUint32, value)
	}
	if value, ok := sosuo.mutation.AddedPaidAt(); ok {
		_spec.AddField(subscriptionorderstate.FieldPaidAt, field.TypeUint32, value)
	}
	if sosuo.mutation.PaidAtCleared() {
		_spec.ClearField(subscriptionorderstate.FieldPaidAt, field.TypeUint32)
	}
	if value, ok := sosuo.mutation.UserSetPaid(); ok {
		_spec.SetField(subscriptionorderstate.FieldUserSetPaid, field.TypeBool, value)
	}
	if sosuo.mutation.UserSetPaidCleared() {
		_spec.ClearField(subscriptionorderstate.FieldUserSetPaid, field.TypeBool)
	}
	if value, ok := sosuo.mutation.UserSetCanceled(); ok {
		_spec.SetField(subscriptionorderstate.FieldUserSetCanceled, field.TypeBool, value)
	}
	if sosuo.mutation.UserSetCanceledCleared() {
		_spec.ClearField(subscriptionorderstate.FieldUserSetCanceled, field.TypeBool)
	}
	if value, ok := sosuo.mutation.AdminSetCanceled(); ok {
		_spec.SetField(subscriptionorderstate.FieldAdminSetCanceled, field.TypeBool, value)
	}
	if sosuo.mutation.AdminSetCanceledCleared() {
		_spec.ClearField(subscriptionorderstate.FieldAdminSetCanceled, field.TypeBool)
	}
	if value, ok := sosuo.mutation.PaymentState(); ok {
		_spec.SetField(subscriptionorderstate.FieldPaymentState, field.TypeString, value)
	}
	if sosuo.mutation.PaymentStateCleared() {
		_spec.ClearField(subscriptionorderstate.FieldPaymentState, field.TypeString)
	}
	if value, ok := sosuo.mutation.CancelState(); ok {
		_spec.SetField(subscriptionorderstate.FieldCancelState, field.TypeString, value)
	}
	if sosuo.mutation.CancelStateCleared() {
		_spec.ClearField(subscriptionorderstate.FieldCancelState, field.TypeString)
	}
	if value, ok := sosuo.mutation.CanceledAt(); ok {
		_spec.SetField(subscriptionorderstate.FieldCanceledAt, field.TypeUint32, value)
	}
	if value, ok := sosuo.mutation.AddedCanceledAt(); ok {
		_spec.AddField(subscriptionorderstate.FieldCanceledAt, field.TypeUint32, value)
	}
	if sosuo.mutation.CanceledAtCleared() {
		_spec.ClearField(subscriptionorderstate.FieldCanceledAt, field.TypeUint32)
	}
	_spec.AddModifiers(sosuo.modifiers...)
	_node = &SubscriptionOrderState{config: sosuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sosuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionorderstate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sosuo.mutation.done = true
	return _node, nil
}

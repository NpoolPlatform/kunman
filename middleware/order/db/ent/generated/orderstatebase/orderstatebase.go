// Code generated by ent, DO NOT EDIT.

package orderstatebase

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the orderstatebase type in the database.
	Label = "order_state_base"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldOrderState holds the string denoting the order_state field in the database.
	FieldOrderState = "order_state"
	// FieldStartMode holds the string denoting the start_mode field in the database.
	FieldStartMode = "start_mode"
	// FieldStartAt holds the string denoting the start_at field in the database.
	FieldStartAt = "start_at"
	// FieldLastBenefitAt holds the string denoting the last_benefit_at field in the database.
	FieldLastBenefitAt = "last_benefit_at"
	// FieldBenefitState holds the string denoting the benefit_state field in the database.
	FieldBenefitState = "benefit_state"
	// FieldPaymentType holds the string denoting the payment_type field in the database.
	FieldPaymentType = "payment_type"
	// Table holds the table name of the orderstatebase in the database.
	Table = "order_state_bases"
)

// Columns holds all SQL columns for orderstatebase fields.
var Columns = []string{
	FieldID,
	FieldEntID,
	FieldOrderID,
	FieldOrderState,
	FieldStartMode,
	FieldStartAt,
	FieldLastBenefitAt,
	FieldBenefitState,
	FieldPaymentType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultOrderID holds the default value on creation for the "order_id" field.
	DefaultOrderID func() uuid.UUID
	// DefaultOrderState holds the default value on creation for the "order_state" field.
	DefaultOrderState string
	// DefaultStartMode holds the default value on creation for the "start_mode" field.
	DefaultStartMode string
	// DefaultStartAt holds the default value on creation for the "start_at" field.
	DefaultStartAt uint32
	// DefaultLastBenefitAt holds the default value on creation for the "last_benefit_at" field.
	DefaultLastBenefitAt uint32
	// DefaultBenefitState holds the default value on creation for the "benefit_state" field.
	DefaultBenefitState string
	// DefaultPaymentType holds the default value on creation for the "payment_type" field.
	DefaultPaymentType string
)

// OrderOption defines the ordering options for the OrderStateBase queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByOrderID orders the results by the order_id field.
func ByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderID, opts...).ToFunc()
}

// ByOrderState orders the results by the order_state field.
func ByOrderState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderState, opts...).ToFunc()
}

// ByStartMode orders the results by the start_mode field.
func ByStartMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartMode, opts...).ToFunc()
}

// ByStartAt orders the results by the start_at field.
func ByStartAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartAt, opts...).ToFunc()
}

// ByLastBenefitAt orders the results by the last_benefit_at field.
func ByLastBenefitAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastBenefitAt, opts...).ToFunc()
}

// ByBenefitState orders the results by the benefit_state field.
func ByBenefitState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBenefitState, opts...).ToFunc()
}

// ByPaymentType orders the results by the payment_type field.
func ByPaymentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentType, opts...).ToFunc()
}

// Code generated by ent, DO NOT EDIT.

package orderstatebase

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEQ(FieldEntID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEQ(FieldDeletedAt, v))
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v uuid.UUID) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEQ(FieldOrderID, v))
}

// OrderState applies equality check predicate on the "order_state" field. It's identical to OrderStateEQ.
func OrderState(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEQ(FieldOrderState, v))
}

// StartMode applies equality check predicate on the "start_mode" field. It's identical to StartModeEQ.
func StartMode(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEQ(FieldStartMode, v))
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEQ(FieldStartAt, v))
}

// LastBenefitAt applies equality check predicate on the "last_benefit_at" field. It's identical to LastBenefitAtEQ.
func LastBenefitAt(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEQ(FieldLastBenefitAt, v))
}

// BenefitState applies equality check predicate on the "benefit_state" field. It's identical to BenefitStateEQ.
func BenefitState(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEQ(FieldBenefitState, v))
}

// PaymentType applies equality check predicate on the "payment_type" field. It's identical to PaymentTypeEQ.
func PaymentType(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEQ(FieldPaymentType, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldLTE(FieldEntID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldLTE(FieldDeletedAt, v))
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v uuid.UUID) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEQ(FieldOrderID, v))
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v uuid.UUID) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNEQ(FieldOrderID, v))
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...uuid.UUID) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldIn(FieldOrderID, vs...))
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...uuid.UUID) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNotIn(FieldOrderID, vs...))
}

// OrderIDGT applies the GT predicate on the "order_id" field.
func OrderIDGT(v uuid.UUID) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldGT(FieldOrderID, v))
}

// OrderIDGTE applies the GTE predicate on the "order_id" field.
func OrderIDGTE(v uuid.UUID) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldGTE(FieldOrderID, v))
}

// OrderIDLT applies the LT predicate on the "order_id" field.
func OrderIDLT(v uuid.UUID) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldLT(FieldOrderID, v))
}

// OrderIDLTE applies the LTE predicate on the "order_id" field.
func OrderIDLTE(v uuid.UUID) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldLTE(FieldOrderID, v))
}

// OrderIDIsNil applies the IsNil predicate on the "order_id" field.
func OrderIDIsNil() predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldIsNull(FieldOrderID))
}

// OrderIDNotNil applies the NotNil predicate on the "order_id" field.
func OrderIDNotNil() predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNotNull(FieldOrderID))
}

// OrderStateEQ applies the EQ predicate on the "order_state" field.
func OrderStateEQ(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEQ(FieldOrderState, v))
}

// OrderStateNEQ applies the NEQ predicate on the "order_state" field.
func OrderStateNEQ(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNEQ(FieldOrderState, v))
}

// OrderStateIn applies the In predicate on the "order_state" field.
func OrderStateIn(vs ...string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldIn(FieldOrderState, vs...))
}

// OrderStateNotIn applies the NotIn predicate on the "order_state" field.
func OrderStateNotIn(vs ...string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNotIn(FieldOrderState, vs...))
}

// OrderStateGT applies the GT predicate on the "order_state" field.
func OrderStateGT(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldGT(FieldOrderState, v))
}

// OrderStateGTE applies the GTE predicate on the "order_state" field.
func OrderStateGTE(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldGTE(FieldOrderState, v))
}

// OrderStateLT applies the LT predicate on the "order_state" field.
func OrderStateLT(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldLT(FieldOrderState, v))
}

// OrderStateLTE applies the LTE predicate on the "order_state" field.
func OrderStateLTE(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldLTE(FieldOrderState, v))
}

// OrderStateContains applies the Contains predicate on the "order_state" field.
func OrderStateContains(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldContains(FieldOrderState, v))
}

// OrderStateHasPrefix applies the HasPrefix predicate on the "order_state" field.
func OrderStateHasPrefix(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldHasPrefix(FieldOrderState, v))
}

// OrderStateHasSuffix applies the HasSuffix predicate on the "order_state" field.
func OrderStateHasSuffix(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldHasSuffix(FieldOrderState, v))
}

// OrderStateIsNil applies the IsNil predicate on the "order_state" field.
func OrderStateIsNil() predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldIsNull(FieldOrderState))
}

// OrderStateNotNil applies the NotNil predicate on the "order_state" field.
func OrderStateNotNil() predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNotNull(FieldOrderState))
}

// OrderStateEqualFold applies the EqualFold predicate on the "order_state" field.
func OrderStateEqualFold(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEqualFold(FieldOrderState, v))
}

// OrderStateContainsFold applies the ContainsFold predicate on the "order_state" field.
func OrderStateContainsFold(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldContainsFold(FieldOrderState, v))
}

// StartModeEQ applies the EQ predicate on the "start_mode" field.
func StartModeEQ(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEQ(FieldStartMode, v))
}

// StartModeNEQ applies the NEQ predicate on the "start_mode" field.
func StartModeNEQ(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNEQ(FieldStartMode, v))
}

// StartModeIn applies the In predicate on the "start_mode" field.
func StartModeIn(vs ...string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldIn(FieldStartMode, vs...))
}

// StartModeNotIn applies the NotIn predicate on the "start_mode" field.
func StartModeNotIn(vs ...string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNotIn(FieldStartMode, vs...))
}

// StartModeGT applies the GT predicate on the "start_mode" field.
func StartModeGT(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldGT(FieldStartMode, v))
}

// StartModeGTE applies the GTE predicate on the "start_mode" field.
func StartModeGTE(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldGTE(FieldStartMode, v))
}

// StartModeLT applies the LT predicate on the "start_mode" field.
func StartModeLT(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldLT(FieldStartMode, v))
}

// StartModeLTE applies the LTE predicate on the "start_mode" field.
func StartModeLTE(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldLTE(FieldStartMode, v))
}

// StartModeContains applies the Contains predicate on the "start_mode" field.
func StartModeContains(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldContains(FieldStartMode, v))
}

// StartModeHasPrefix applies the HasPrefix predicate on the "start_mode" field.
func StartModeHasPrefix(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldHasPrefix(FieldStartMode, v))
}

// StartModeHasSuffix applies the HasSuffix predicate on the "start_mode" field.
func StartModeHasSuffix(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldHasSuffix(FieldStartMode, v))
}

// StartModeIsNil applies the IsNil predicate on the "start_mode" field.
func StartModeIsNil() predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldIsNull(FieldStartMode))
}

// StartModeNotNil applies the NotNil predicate on the "start_mode" field.
func StartModeNotNil() predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNotNull(FieldStartMode))
}

// StartModeEqualFold applies the EqualFold predicate on the "start_mode" field.
func StartModeEqualFold(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEqualFold(FieldStartMode, v))
}

// StartModeContainsFold applies the ContainsFold predicate on the "start_mode" field.
func StartModeContainsFold(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldContainsFold(FieldStartMode, v))
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEQ(FieldStartAt, v))
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNEQ(FieldStartAt, v))
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldIn(FieldStartAt, vs...))
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNotIn(FieldStartAt, vs...))
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldGT(FieldStartAt, v))
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldGTE(FieldStartAt, v))
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldLT(FieldStartAt, v))
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldLTE(FieldStartAt, v))
}

// StartAtIsNil applies the IsNil predicate on the "start_at" field.
func StartAtIsNil() predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldIsNull(FieldStartAt))
}

// StartAtNotNil applies the NotNil predicate on the "start_at" field.
func StartAtNotNil() predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNotNull(FieldStartAt))
}

// LastBenefitAtEQ applies the EQ predicate on the "last_benefit_at" field.
func LastBenefitAtEQ(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEQ(FieldLastBenefitAt, v))
}

// LastBenefitAtNEQ applies the NEQ predicate on the "last_benefit_at" field.
func LastBenefitAtNEQ(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNEQ(FieldLastBenefitAt, v))
}

// LastBenefitAtIn applies the In predicate on the "last_benefit_at" field.
func LastBenefitAtIn(vs ...uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldIn(FieldLastBenefitAt, vs...))
}

// LastBenefitAtNotIn applies the NotIn predicate on the "last_benefit_at" field.
func LastBenefitAtNotIn(vs ...uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNotIn(FieldLastBenefitAt, vs...))
}

// LastBenefitAtGT applies the GT predicate on the "last_benefit_at" field.
func LastBenefitAtGT(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldGT(FieldLastBenefitAt, v))
}

// LastBenefitAtGTE applies the GTE predicate on the "last_benefit_at" field.
func LastBenefitAtGTE(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldGTE(FieldLastBenefitAt, v))
}

// LastBenefitAtLT applies the LT predicate on the "last_benefit_at" field.
func LastBenefitAtLT(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldLT(FieldLastBenefitAt, v))
}

// LastBenefitAtLTE applies the LTE predicate on the "last_benefit_at" field.
func LastBenefitAtLTE(v uint32) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldLTE(FieldLastBenefitAt, v))
}

// LastBenefitAtIsNil applies the IsNil predicate on the "last_benefit_at" field.
func LastBenefitAtIsNil() predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldIsNull(FieldLastBenefitAt))
}

// LastBenefitAtNotNil applies the NotNil predicate on the "last_benefit_at" field.
func LastBenefitAtNotNil() predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNotNull(FieldLastBenefitAt))
}

// BenefitStateEQ applies the EQ predicate on the "benefit_state" field.
func BenefitStateEQ(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEQ(FieldBenefitState, v))
}

// BenefitStateNEQ applies the NEQ predicate on the "benefit_state" field.
func BenefitStateNEQ(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNEQ(FieldBenefitState, v))
}

// BenefitStateIn applies the In predicate on the "benefit_state" field.
func BenefitStateIn(vs ...string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldIn(FieldBenefitState, vs...))
}

// BenefitStateNotIn applies the NotIn predicate on the "benefit_state" field.
func BenefitStateNotIn(vs ...string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNotIn(FieldBenefitState, vs...))
}

// BenefitStateGT applies the GT predicate on the "benefit_state" field.
func BenefitStateGT(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldGT(FieldBenefitState, v))
}

// BenefitStateGTE applies the GTE predicate on the "benefit_state" field.
func BenefitStateGTE(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldGTE(FieldBenefitState, v))
}

// BenefitStateLT applies the LT predicate on the "benefit_state" field.
func BenefitStateLT(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldLT(FieldBenefitState, v))
}

// BenefitStateLTE applies the LTE predicate on the "benefit_state" field.
func BenefitStateLTE(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldLTE(FieldBenefitState, v))
}

// BenefitStateContains applies the Contains predicate on the "benefit_state" field.
func BenefitStateContains(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldContains(FieldBenefitState, v))
}

// BenefitStateHasPrefix applies the HasPrefix predicate on the "benefit_state" field.
func BenefitStateHasPrefix(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldHasPrefix(FieldBenefitState, v))
}

// BenefitStateHasSuffix applies the HasSuffix predicate on the "benefit_state" field.
func BenefitStateHasSuffix(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldHasSuffix(FieldBenefitState, v))
}

// BenefitStateIsNil applies the IsNil predicate on the "benefit_state" field.
func BenefitStateIsNil() predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldIsNull(FieldBenefitState))
}

// BenefitStateNotNil applies the NotNil predicate on the "benefit_state" field.
func BenefitStateNotNil() predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNotNull(FieldBenefitState))
}

// BenefitStateEqualFold applies the EqualFold predicate on the "benefit_state" field.
func BenefitStateEqualFold(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEqualFold(FieldBenefitState, v))
}

// BenefitStateContainsFold applies the ContainsFold predicate on the "benefit_state" field.
func BenefitStateContainsFold(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldContainsFold(FieldBenefitState, v))
}

// PaymentTypeEQ applies the EQ predicate on the "payment_type" field.
func PaymentTypeEQ(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEQ(FieldPaymentType, v))
}

// PaymentTypeNEQ applies the NEQ predicate on the "payment_type" field.
func PaymentTypeNEQ(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNEQ(FieldPaymentType, v))
}

// PaymentTypeIn applies the In predicate on the "payment_type" field.
func PaymentTypeIn(vs ...string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldIn(FieldPaymentType, vs...))
}

// PaymentTypeNotIn applies the NotIn predicate on the "payment_type" field.
func PaymentTypeNotIn(vs ...string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNotIn(FieldPaymentType, vs...))
}

// PaymentTypeGT applies the GT predicate on the "payment_type" field.
func PaymentTypeGT(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldGT(FieldPaymentType, v))
}

// PaymentTypeGTE applies the GTE predicate on the "payment_type" field.
func PaymentTypeGTE(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldGTE(FieldPaymentType, v))
}

// PaymentTypeLT applies the LT predicate on the "payment_type" field.
func PaymentTypeLT(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldLT(FieldPaymentType, v))
}

// PaymentTypeLTE applies the LTE predicate on the "payment_type" field.
func PaymentTypeLTE(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldLTE(FieldPaymentType, v))
}

// PaymentTypeContains applies the Contains predicate on the "payment_type" field.
func PaymentTypeContains(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldContains(FieldPaymentType, v))
}

// PaymentTypeHasPrefix applies the HasPrefix predicate on the "payment_type" field.
func PaymentTypeHasPrefix(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldHasPrefix(FieldPaymentType, v))
}

// PaymentTypeHasSuffix applies the HasSuffix predicate on the "payment_type" field.
func PaymentTypeHasSuffix(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldHasSuffix(FieldPaymentType, v))
}

// PaymentTypeIsNil applies the IsNil predicate on the "payment_type" field.
func PaymentTypeIsNil() predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldIsNull(FieldPaymentType))
}

// PaymentTypeNotNil applies the NotNil predicate on the "payment_type" field.
func PaymentTypeNotNil() predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldNotNull(FieldPaymentType))
}

// PaymentTypeEqualFold applies the EqualFold predicate on the "payment_type" field.
func PaymentTypeEqualFold(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldEqualFold(FieldPaymentType, v))
}

// PaymentTypeContainsFold applies the ContainsFold predicate on the "payment_type" field.
func PaymentTypeContainsFold(v string) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.FieldContainsFold(FieldPaymentType, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderStateBase) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderStateBase) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderStateBase) predicate.OrderStateBase {
	return predicate.OrderStateBase(sql.NotPredicates(p))
}

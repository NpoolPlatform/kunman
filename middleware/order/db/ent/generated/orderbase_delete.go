// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/orderbase"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/predicate"
)

// OrderBaseDelete is the builder for deleting a OrderBase entity.
type OrderBaseDelete struct {
	config
	hooks    []Hook
	mutation *OrderBaseMutation
}

// Where appends a list predicates to the OrderBaseDelete builder.
func (obd *OrderBaseDelete) Where(ps ...predicate.OrderBase) *OrderBaseDelete {
	obd.mutation.Where(ps...)
	return obd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (obd *OrderBaseDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, obd.sqlExec, obd.mutation, obd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (obd *OrderBaseDelete) ExecX(ctx context.Context) int {
	n, err := obd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (obd *OrderBaseDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(orderbase.Table, sqlgraph.NewFieldSpec(orderbase.FieldID, field.TypeUint32))
	if ps := obd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, obd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	obd.mutation.done = true
	return affected, err
}

// OrderBaseDeleteOne is the builder for deleting a single OrderBase entity.
type OrderBaseDeleteOne struct {
	obd *OrderBaseDelete
}

// Where appends a list predicates to the OrderBaseDelete builder.
func (obdo *OrderBaseDeleteOne) Where(ps ...predicate.OrderBase) *OrderBaseDeleteOne {
	obdo.obd.mutation.Where(ps...)
	return obdo
}

// Exec executes the deletion query.
func (obdo *OrderBaseDeleteOne) Exec(ctx context.Context) error {
	n, err := obdo.obd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{orderbase.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (obdo *OrderBaseDeleteOne) ExecX(ctx context.Context) {
	if err := obdo.Exec(ctx); err != nil {
		panic(err)
	}
}

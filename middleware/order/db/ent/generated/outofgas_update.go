// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/outofgas"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// OutOfGasUpdate is the builder for updating OutOfGas entities.
type OutOfGasUpdate struct {
	config
	hooks     []Hook
	mutation  *OutOfGasMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OutOfGasUpdate builder.
func (oogu *OutOfGasUpdate) Where(ps ...predicate.OutOfGas) *OutOfGasUpdate {
	oogu.mutation.Where(ps...)
	return oogu
}

// SetEntID sets the "ent_id" field.
func (oogu *OutOfGasUpdate) SetEntID(u uuid.UUID) *OutOfGasUpdate {
	oogu.mutation.SetEntID(u)
	return oogu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (oogu *OutOfGasUpdate) SetNillableEntID(u *uuid.UUID) *OutOfGasUpdate {
	if u != nil {
		oogu.SetEntID(*u)
	}
	return oogu
}

// SetOrderID sets the "order_id" field.
func (oogu *OutOfGasUpdate) SetOrderID(u uuid.UUID) *OutOfGasUpdate {
	oogu.mutation.SetOrderID(u)
	return oogu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (oogu *OutOfGasUpdate) SetNillableOrderID(u *uuid.UUID) *OutOfGasUpdate {
	if u != nil {
		oogu.SetOrderID(*u)
	}
	return oogu
}

// ClearOrderID clears the value of the "order_id" field.
func (oogu *OutOfGasUpdate) ClearOrderID() *OutOfGasUpdate {
	oogu.mutation.ClearOrderID()
	return oogu
}

// SetStartAt sets the "start_at" field.
func (oogu *OutOfGasUpdate) SetStartAt(u uint32) *OutOfGasUpdate {
	oogu.mutation.ResetStartAt()
	oogu.mutation.SetStartAt(u)
	return oogu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (oogu *OutOfGasUpdate) SetNillableStartAt(u *uint32) *OutOfGasUpdate {
	if u != nil {
		oogu.SetStartAt(*u)
	}
	return oogu
}

// AddStartAt adds u to the "start_at" field.
func (oogu *OutOfGasUpdate) AddStartAt(u int32) *OutOfGasUpdate {
	oogu.mutation.AddStartAt(u)
	return oogu
}

// ClearStartAt clears the value of the "start_at" field.
func (oogu *OutOfGasUpdate) ClearStartAt() *OutOfGasUpdate {
	oogu.mutation.ClearStartAt()
	return oogu
}

// SetEndAt sets the "end_at" field.
func (oogu *OutOfGasUpdate) SetEndAt(u uint32) *OutOfGasUpdate {
	oogu.mutation.ResetEndAt()
	oogu.mutation.SetEndAt(u)
	return oogu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (oogu *OutOfGasUpdate) SetNillableEndAt(u *uint32) *OutOfGasUpdate {
	if u != nil {
		oogu.SetEndAt(*u)
	}
	return oogu
}

// AddEndAt adds u to the "end_at" field.
func (oogu *OutOfGasUpdate) AddEndAt(u int32) *OutOfGasUpdate {
	oogu.mutation.AddEndAt(u)
	return oogu
}

// ClearEndAt clears the value of the "end_at" field.
func (oogu *OutOfGasUpdate) ClearEndAt() *OutOfGasUpdate {
	oogu.mutation.ClearEndAt()
	return oogu
}

// Mutation returns the OutOfGasMutation object of the builder.
func (oogu *OutOfGasUpdate) Mutation() *OutOfGasMutation {
	return oogu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oogu *OutOfGasUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, oogu.sqlSave, oogu.mutation, oogu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oogu *OutOfGasUpdate) SaveX(ctx context.Context) int {
	affected, err := oogu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oogu *OutOfGasUpdate) Exec(ctx context.Context) error {
	_, err := oogu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oogu *OutOfGasUpdate) ExecX(ctx context.Context) {
	if err := oogu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oogu *OutOfGasUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OutOfGasUpdate {
	oogu.modifiers = append(oogu.modifiers, modifiers...)
	return oogu
}

func (oogu *OutOfGasUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(outofgas.Table, outofgas.Columns, sqlgraph.NewFieldSpec(outofgas.FieldID, field.TypeUint32))
	if ps := oogu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oogu.mutation.EntID(); ok {
		_spec.SetField(outofgas.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := oogu.mutation.OrderID(); ok {
		_spec.SetField(outofgas.FieldOrderID, field.TypeUUID, value)
	}
	if oogu.mutation.OrderIDCleared() {
		_spec.ClearField(outofgas.FieldOrderID, field.TypeUUID)
	}
	if value, ok := oogu.mutation.StartAt(); ok {
		_spec.SetField(outofgas.FieldStartAt, field.TypeUint32, value)
	}
	if value, ok := oogu.mutation.AddedStartAt(); ok {
		_spec.AddField(outofgas.FieldStartAt, field.TypeUint32, value)
	}
	if oogu.mutation.StartAtCleared() {
		_spec.ClearField(outofgas.FieldStartAt, field.TypeUint32)
	}
	if value, ok := oogu.mutation.EndAt(); ok {
		_spec.SetField(outofgas.FieldEndAt, field.TypeUint32, value)
	}
	if value, ok := oogu.mutation.AddedEndAt(); ok {
		_spec.AddField(outofgas.FieldEndAt, field.TypeUint32, value)
	}
	if oogu.mutation.EndAtCleared() {
		_spec.ClearField(outofgas.FieldEndAt, field.TypeUint32)
	}
	_spec.AddModifiers(oogu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, oogu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{outofgas.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oogu.mutation.done = true
	return n, nil
}

// OutOfGasUpdateOne is the builder for updating a single OutOfGas entity.
type OutOfGasUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OutOfGasMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (ooguo *OutOfGasUpdateOne) SetEntID(u uuid.UUID) *OutOfGasUpdateOne {
	ooguo.mutation.SetEntID(u)
	return ooguo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ooguo *OutOfGasUpdateOne) SetNillableEntID(u *uuid.UUID) *OutOfGasUpdateOne {
	if u != nil {
		ooguo.SetEntID(*u)
	}
	return ooguo
}

// SetOrderID sets the "order_id" field.
func (ooguo *OutOfGasUpdateOne) SetOrderID(u uuid.UUID) *OutOfGasUpdateOne {
	ooguo.mutation.SetOrderID(u)
	return ooguo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (ooguo *OutOfGasUpdateOne) SetNillableOrderID(u *uuid.UUID) *OutOfGasUpdateOne {
	if u != nil {
		ooguo.SetOrderID(*u)
	}
	return ooguo
}

// ClearOrderID clears the value of the "order_id" field.
func (ooguo *OutOfGasUpdateOne) ClearOrderID() *OutOfGasUpdateOne {
	ooguo.mutation.ClearOrderID()
	return ooguo
}

// SetStartAt sets the "start_at" field.
func (ooguo *OutOfGasUpdateOne) SetStartAt(u uint32) *OutOfGasUpdateOne {
	ooguo.mutation.ResetStartAt()
	ooguo.mutation.SetStartAt(u)
	return ooguo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (ooguo *OutOfGasUpdateOne) SetNillableStartAt(u *uint32) *OutOfGasUpdateOne {
	if u != nil {
		ooguo.SetStartAt(*u)
	}
	return ooguo
}

// AddStartAt adds u to the "start_at" field.
func (ooguo *OutOfGasUpdateOne) AddStartAt(u int32) *OutOfGasUpdateOne {
	ooguo.mutation.AddStartAt(u)
	return ooguo
}

// ClearStartAt clears the value of the "start_at" field.
func (ooguo *OutOfGasUpdateOne) ClearStartAt() *OutOfGasUpdateOne {
	ooguo.mutation.ClearStartAt()
	return ooguo
}

// SetEndAt sets the "end_at" field.
func (ooguo *OutOfGasUpdateOne) SetEndAt(u uint32) *OutOfGasUpdateOne {
	ooguo.mutation.ResetEndAt()
	ooguo.mutation.SetEndAt(u)
	return ooguo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (ooguo *OutOfGasUpdateOne) SetNillableEndAt(u *uint32) *OutOfGasUpdateOne {
	if u != nil {
		ooguo.SetEndAt(*u)
	}
	return ooguo
}

// AddEndAt adds u to the "end_at" field.
func (ooguo *OutOfGasUpdateOne) AddEndAt(u int32) *OutOfGasUpdateOne {
	ooguo.mutation.AddEndAt(u)
	return ooguo
}

// ClearEndAt clears the value of the "end_at" field.
func (ooguo *OutOfGasUpdateOne) ClearEndAt() *OutOfGasUpdateOne {
	ooguo.mutation.ClearEndAt()
	return ooguo
}

// Mutation returns the OutOfGasMutation object of the builder.
func (ooguo *OutOfGasUpdateOne) Mutation() *OutOfGasMutation {
	return ooguo.mutation
}

// Where appends a list predicates to the OutOfGasUpdate builder.
func (ooguo *OutOfGasUpdateOne) Where(ps ...predicate.OutOfGas) *OutOfGasUpdateOne {
	ooguo.mutation.Where(ps...)
	return ooguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ooguo *OutOfGasUpdateOne) Select(field string, fields ...string) *OutOfGasUpdateOne {
	ooguo.fields = append([]string{field}, fields...)
	return ooguo
}

// Save executes the query and returns the updated OutOfGas entity.
func (ooguo *OutOfGasUpdateOne) Save(ctx context.Context) (*OutOfGas, error) {
	return withHooks(ctx, ooguo.sqlSave, ooguo.mutation, ooguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ooguo *OutOfGasUpdateOne) SaveX(ctx context.Context) *OutOfGas {
	node, err := ooguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ooguo *OutOfGasUpdateOne) Exec(ctx context.Context) error {
	_, err := ooguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ooguo *OutOfGasUpdateOne) ExecX(ctx context.Context) {
	if err := ooguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ooguo *OutOfGasUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OutOfGasUpdateOne {
	ooguo.modifiers = append(ooguo.modifiers, modifiers...)
	return ooguo
}

func (ooguo *OutOfGasUpdateOne) sqlSave(ctx context.Context) (_node *OutOfGas, err error) {
	_spec := sqlgraph.NewUpdateSpec(outofgas.Table, outofgas.Columns, sqlgraph.NewFieldSpec(outofgas.FieldID, field.TypeUint32))
	id, ok := ooguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "OutOfGas.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ooguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, outofgas.FieldID)
		for _, f := range fields {
			if !outofgas.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != outofgas.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ooguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ooguo.mutation.EntID(); ok {
		_spec.SetField(outofgas.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := ooguo.mutation.OrderID(); ok {
		_spec.SetField(outofgas.FieldOrderID, field.TypeUUID, value)
	}
	if ooguo.mutation.OrderIDCleared() {
		_spec.ClearField(outofgas.FieldOrderID, field.TypeUUID)
	}
	if value, ok := ooguo.mutation.StartAt(); ok {
		_spec.SetField(outofgas.FieldStartAt, field.TypeUint32, value)
	}
	if value, ok := ooguo.mutation.AddedStartAt(); ok {
		_spec.AddField(outofgas.FieldStartAt, field.TypeUint32, value)
	}
	if ooguo.mutation.StartAtCleared() {
		_spec.ClearField(outofgas.FieldStartAt, field.TypeUint32)
	}
	if value, ok := ooguo.mutation.EndAt(); ok {
		_spec.SetField(outofgas.FieldEndAt, field.TypeUint32, value)
	}
	if value, ok := ooguo.mutation.AddedEndAt(); ok {
		_spec.AddField(outofgas.FieldEndAt, field.TypeUint32, value)
	}
	if ooguo.mutation.EndAtCleared() {
		_spec.ClearField(outofgas.FieldEndAt, field.TypeUint32)
	}
	_spec.AddModifiers(ooguo.modifiers...)
	_node = &OutOfGas{config: ooguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ooguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{outofgas.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ooguo.mutation.done = true
	return _node, nil
}

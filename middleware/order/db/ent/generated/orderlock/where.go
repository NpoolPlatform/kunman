// Code generated by ent, DO NOT EDIT.

package orderlock

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldLTE(FieldID, id))
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldEQ(FieldEntID, v))
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldEQ(FieldOrderID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldEQ(FieldUserID, v))
}

// LockType applies equality check predicate on the "lock_type" field. It's identical to LockTypeEQ.
func LockType(v string) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldEQ(FieldLockType, v))
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldEQ(FieldEntID, v))
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldNEQ(FieldEntID, v))
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldIn(FieldEntID, vs...))
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldNotIn(FieldEntID, vs...))
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldGT(FieldEntID, v))
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldGTE(FieldEntID, v))
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldLT(FieldEntID, v))
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldLTE(FieldEntID, v))
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldEQ(FieldOrderID, v))
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldNEQ(FieldOrderID, v))
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldIn(FieldOrderID, vs...))
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldNotIn(FieldOrderID, vs...))
}

// OrderIDGT applies the GT predicate on the "order_id" field.
func OrderIDGT(v uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldGT(FieldOrderID, v))
}

// OrderIDGTE applies the GTE predicate on the "order_id" field.
func OrderIDGTE(v uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldGTE(FieldOrderID, v))
}

// OrderIDLT applies the LT predicate on the "order_id" field.
func OrderIDLT(v uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldLT(FieldOrderID, v))
}

// OrderIDLTE applies the LTE predicate on the "order_id" field.
func OrderIDLTE(v uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldLTE(FieldOrderID, v))
}

// OrderIDIsNil applies the IsNil predicate on the "order_id" field.
func OrderIDIsNil() predicate.OrderLock {
	return predicate.OrderLock(sql.FieldIsNull(FieldOrderID))
}

// OrderIDNotNil applies the NotNil predicate on the "order_id" field.
func OrderIDNotNil() predicate.OrderLock {
	return predicate.OrderLock(sql.FieldNotNull(FieldOrderID))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldLTE(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.OrderLock {
	return predicate.OrderLock(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.OrderLock {
	return predicate.OrderLock(sql.FieldNotNull(FieldUserID))
}

// LockTypeEQ applies the EQ predicate on the "lock_type" field.
func LockTypeEQ(v string) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldEQ(FieldLockType, v))
}

// LockTypeNEQ applies the NEQ predicate on the "lock_type" field.
func LockTypeNEQ(v string) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldNEQ(FieldLockType, v))
}

// LockTypeIn applies the In predicate on the "lock_type" field.
func LockTypeIn(vs ...string) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldIn(FieldLockType, vs...))
}

// LockTypeNotIn applies the NotIn predicate on the "lock_type" field.
func LockTypeNotIn(vs ...string) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldNotIn(FieldLockType, vs...))
}

// LockTypeGT applies the GT predicate on the "lock_type" field.
func LockTypeGT(v string) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldGT(FieldLockType, v))
}

// LockTypeGTE applies the GTE predicate on the "lock_type" field.
func LockTypeGTE(v string) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldGTE(FieldLockType, v))
}

// LockTypeLT applies the LT predicate on the "lock_type" field.
func LockTypeLT(v string) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldLT(FieldLockType, v))
}

// LockTypeLTE applies the LTE predicate on the "lock_type" field.
func LockTypeLTE(v string) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldLTE(FieldLockType, v))
}

// LockTypeContains applies the Contains predicate on the "lock_type" field.
func LockTypeContains(v string) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldContains(FieldLockType, v))
}

// LockTypeHasPrefix applies the HasPrefix predicate on the "lock_type" field.
func LockTypeHasPrefix(v string) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldHasPrefix(FieldLockType, v))
}

// LockTypeHasSuffix applies the HasSuffix predicate on the "lock_type" field.
func LockTypeHasSuffix(v string) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldHasSuffix(FieldLockType, v))
}

// LockTypeIsNil applies the IsNil predicate on the "lock_type" field.
func LockTypeIsNil() predicate.OrderLock {
	return predicate.OrderLock(sql.FieldIsNull(FieldLockType))
}

// LockTypeNotNil applies the NotNil predicate on the "lock_type" field.
func LockTypeNotNil() predicate.OrderLock {
	return predicate.OrderLock(sql.FieldNotNull(FieldLockType))
}

// LockTypeEqualFold applies the EqualFold predicate on the "lock_type" field.
func LockTypeEqualFold(v string) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldEqualFold(FieldLockType, v))
}

// LockTypeContainsFold applies the ContainsFold predicate on the "lock_type" field.
func LockTypeContainsFold(v string) predicate.OrderLock {
	return predicate.OrderLock(sql.FieldContainsFold(FieldLockType, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderLock) predicate.OrderLock {
	return predicate.OrderLock(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderLock) predicate.OrderLock {
	return predicate.OrderLock(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderLock) predicate.OrderLock {
	return predicate.OrderLock(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/predicate"
	"github.com/NpoolPlatform/kunman/middleware/order/db/ent/generated/subscriptionorder"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// SubscriptionOrderUpdate is the builder for updating SubscriptionOrder entities.
type SubscriptionOrderUpdate struct {
	config
	hooks     []Hook
	mutation  *SubscriptionOrderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SubscriptionOrderUpdate builder.
func (sou *SubscriptionOrderUpdate) Where(ps ...predicate.SubscriptionOrder) *SubscriptionOrderUpdate {
	sou.mutation.Where(ps...)
	return sou
}

// SetEntID sets the "ent_id" field.
func (sou *SubscriptionOrderUpdate) SetEntID(u uuid.UUID) *SubscriptionOrderUpdate {
	sou.mutation.SetEntID(u)
	return sou
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (sou *SubscriptionOrderUpdate) SetNillableEntID(u *uuid.UUID) *SubscriptionOrderUpdate {
	if u != nil {
		sou.SetEntID(*u)
	}
	return sou
}

// SetCreatedAt sets the "created_at" field.
func (sou *SubscriptionOrderUpdate) SetCreatedAt(u uint32) *SubscriptionOrderUpdate {
	sou.mutation.ResetCreatedAt()
	sou.mutation.SetCreatedAt(u)
	return sou
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sou *SubscriptionOrderUpdate) SetNillableCreatedAt(u *uint32) *SubscriptionOrderUpdate {
	if u != nil {
		sou.SetCreatedAt(*u)
	}
	return sou
}

// AddCreatedAt adds u to the "created_at" field.
func (sou *SubscriptionOrderUpdate) AddCreatedAt(u int32) *SubscriptionOrderUpdate {
	sou.mutation.AddCreatedAt(u)
	return sou
}

// SetUpdatedAt sets the "updated_at" field.
func (sou *SubscriptionOrderUpdate) SetUpdatedAt(u uint32) *SubscriptionOrderUpdate {
	sou.mutation.ResetUpdatedAt()
	sou.mutation.SetUpdatedAt(u)
	return sou
}

// AddUpdatedAt adds u to the "updated_at" field.
func (sou *SubscriptionOrderUpdate) AddUpdatedAt(u int32) *SubscriptionOrderUpdate {
	sou.mutation.AddUpdatedAt(u)
	return sou
}

// SetDeletedAt sets the "deleted_at" field.
func (sou *SubscriptionOrderUpdate) SetDeletedAt(u uint32) *SubscriptionOrderUpdate {
	sou.mutation.ResetDeletedAt()
	sou.mutation.SetDeletedAt(u)
	return sou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sou *SubscriptionOrderUpdate) SetNillableDeletedAt(u *uint32) *SubscriptionOrderUpdate {
	if u != nil {
		sou.SetDeletedAt(*u)
	}
	return sou
}

// AddDeletedAt adds u to the "deleted_at" field.
func (sou *SubscriptionOrderUpdate) AddDeletedAt(u int32) *SubscriptionOrderUpdate {
	sou.mutation.AddDeletedAt(u)
	return sou
}

// SetOrderID sets the "order_id" field.
func (sou *SubscriptionOrderUpdate) SetOrderID(u uuid.UUID) *SubscriptionOrderUpdate {
	sou.mutation.SetOrderID(u)
	return sou
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (sou *SubscriptionOrderUpdate) SetNillableOrderID(u *uuid.UUID) *SubscriptionOrderUpdate {
	if u != nil {
		sou.SetOrderID(*u)
	}
	return sou
}

// ClearOrderID clears the value of the "order_id" field.
func (sou *SubscriptionOrderUpdate) ClearOrderID() *SubscriptionOrderUpdate {
	sou.mutation.ClearOrderID()
	return sou
}

// SetGoodValueUsd sets the "good_value_usd" field.
func (sou *SubscriptionOrderUpdate) SetGoodValueUsd(d decimal.Decimal) *SubscriptionOrderUpdate {
	sou.mutation.SetGoodValueUsd(d)
	return sou
}

// SetNillableGoodValueUsd sets the "good_value_usd" field if the given value is not nil.
func (sou *SubscriptionOrderUpdate) SetNillableGoodValueUsd(d *decimal.Decimal) *SubscriptionOrderUpdate {
	if d != nil {
		sou.SetGoodValueUsd(*d)
	}
	return sou
}

// ClearGoodValueUsd clears the value of the "good_value_usd" field.
func (sou *SubscriptionOrderUpdate) ClearGoodValueUsd() *SubscriptionOrderUpdate {
	sou.mutation.ClearGoodValueUsd()
	return sou
}

// SetPaymentAmountUsd sets the "payment_amount_usd" field.
func (sou *SubscriptionOrderUpdate) SetPaymentAmountUsd(d decimal.Decimal) *SubscriptionOrderUpdate {
	sou.mutation.SetPaymentAmountUsd(d)
	return sou
}

// SetNillablePaymentAmountUsd sets the "payment_amount_usd" field if the given value is not nil.
func (sou *SubscriptionOrderUpdate) SetNillablePaymentAmountUsd(d *decimal.Decimal) *SubscriptionOrderUpdate {
	if d != nil {
		sou.SetPaymentAmountUsd(*d)
	}
	return sou
}

// ClearPaymentAmountUsd clears the value of the "payment_amount_usd" field.
func (sou *SubscriptionOrderUpdate) ClearPaymentAmountUsd() *SubscriptionOrderUpdate {
	sou.mutation.ClearPaymentAmountUsd()
	return sou
}

// SetDiscountAmountUsd sets the "discount_amount_usd" field.
func (sou *SubscriptionOrderUpdate) SetDiscountAmountUsd(d decimal.Decimal) *SubscriptionOrderUpdate {
	sou.mutation.SetDiscountAmountUsd(d)
	return sou
}

// SetNillableDiscountAmountUsd sets the "discount_amount_usd" field if the given value is not nil.
func (sou *SubscriptionOrderUpdate) SetNillableDiscountAmountUsd(d *decimal.Decimal) *SubscriptionOrderUpdate {
	if d != nil {
		sou.SetDiscountAmountUsd(*d)
	}
	return sou
}

// ClearDiscountAmountUsd clears the value of the "discount_amount_usd" field.
func (sou *SubscriptionOrderUpdate) ClearDiscountAmountUsd() *SubscriptionOrderUpdate {
	sou.mutation.ClearDiscountAmountUsd()
	return sou
}

// SetPromotionID sets the "promotion_id" field.
func (sou *SubscriptionOrderUpdate) SetPromotionID(u uuid.UUID) *SubscriptionOrderUpdate {
	sou.mutation.SetPromotionID(u)
	return sou
}

// SetNillablePromotionID sets the "promotion_id" field if the given value is not nil.
func (sou *SubscriptionOrderUpdate) SetNillablePromotionID(u *uuid.UUID) *SubscriptionOrderUpdate {
	if u != nil {
		sou.SetPromotionID(*u)
	}
	return sou
}

// ClearPromotionID clears the value of the "promotion_id" field.
func (sou *SubscriptionOrderUpdate) ClearPromotionID() *SubscriptionOrderUpdate {
	sou.mutation.ClearPromotionID()
	return sou
}

// SetLifeSeconds sets the "life_seconds" field.
func (sou *SubscriptionOrderUpdate) SetLifeSeconds(u uint32) *SubscriptionOrderUpdate {
	sou.mutation.ResetLifeSeconds()
	sou.mutation.SetLifeSeconds(u)
	return sou
}

// SetNillableLifeSeconds sets the "life_seconds" field if the given value is not nil.
func (sou *SubscriptionOrderUpdate) SetNillableLifeSeconds(u *uint32) *SubscriptionOrderUpdate {
	if u != nil {
		sou.SetLifeSeconds(*u)
	}
	return sou
}

// AddLifeSeconds adds u to the "life_seconds" field.
func (sou *SubscriptionOrderUpdate) AddLifeSeconds(u int32) *SubscriptionOrderUpdate {
	sou.mutation.AddLifeSeconds(u)
	return sou
}

// ClearLifeSeconds clears the value of the "life_seconds" field.
func (sou *SubscriptionOrderUpdate) ClearLifeSeconds() *SubscriptionOrderUpdate {
	sou.mutation.ClearLifeSeconds()
	return sou
}

// Mutation returns the SubscriptionOrderMutation object of the builder.
func (sou *SubscriptionOrderUpdate) Mutation() *SubscriptionOrderMutation {
	return sou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sou *SubscriptionOrderUpdate) Save(ctx context.Context) (int, error) {
	sou.defaults()
	return withHooks(ctx, sou.sqlSave, sou.mutation, sou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sou *SubscriptionOrderUpdate) SaveX(ctx context.Context) int {
	affected, err := sou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sou *SubscriptionOrderUpdate) Exec(ctx context.Context) error {
	_, err := sou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sou *SubscriptionOrderUpdate) ExecX(ctx context.Context) {
	if err := sou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sou *SubscriptionOrderUpdate) defaults() {
	if _, ok := sou.mutation.UpdatedAt(); !ok {
		v := subscriptionorder.UpdateDefaultUpdatedAt()
		sou.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sou *SubscriptionOrderUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubscriptionOrderUpdate {
	sou.modifiers = append(sou.modifiers, modifiers...)
	return sou
}

func (sou *SubscriptionOrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(subscriptionorder.Table, subscriptionorder.Columns, sqlgraph.NewFieldSpec(subscriptionorder.FieldID, field.TypeUint32))
	if ps := sou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sou.mutation.EntID(); ok {
		_spec.SetField(subscriptionorder.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := sou.mutation.CreatedAt(); ok {
		_spec.SetField(subscriptionorder.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := sou.mutation.AddedCreatedAt(); ok {
		_spec.AddField(subscriptionorder.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := sou.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionorder.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := sou.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(subscriptionorder.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := sou.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptionorder.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := sou.mutation.AddedDeletedAt(); ok {
		_spec.AddField(subscriptionorder.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := sou.mutation.OrderID(); ok {
		_spec.SetField(subscriptionorder.FieldOrderID, field.TypeUUID, value)
	}
	if sou.mutation.OrderIDCleared() {
		_spec.ClearField(subscriptionorder.FieldOrderID, field.TypeUUID)
	}
	if value, ok := sou.mutation.GoodValueUsd(); ok {
		_spec.SetField(subscriptionorder.FieldGoodValueUsd, field.TypeOther, value)
	}
	if sou.mutation.GoodValueUsdCleared() {
		_spec.ClearField(subscriptionorder.FieldGoodValueUsd, field.TypeOther)
	}
	if value, ok := sou.mutation.PaymentAmountUsd(); ok {
		_spec.SetField(subscriptionorder.FieldPaymentAmountUsd, field.TypeOther, value)
	}
	if sou.mutation.PaymentAmountUsdCleared() {
		_spec.ClearField(subscriptionorder.FieldPaymentAmountUsd, field.TypeOther)
	}
	if value, ok := sou.mutation.DiscountAmountUsd(); ok {
		_spec.SetField(subscriptionorder.FieldDiscountAmountUsd, field.TypeOther, value)
	}
	if sou.mutation.DiscountAmountUsdCleared() {
		_spec.ClearField(subscriptionorder.FieldDiscountAmountUsd, field.TypeOther)
	}
	if value, ok := sou.mutation.PromotionID(); ok {
		_spec.SetField(subscriptionorder.FieldPromotionID, field.TypeUUID, value)
	}
	if sou.mutation.PromotionIDCleared() {
		_spec.ClearField(subscriptionorder.FieldPromotionID, field.TypeUUID)
	}
	if value, ok := sou.mutation.LifeSeconds(); ok {
		_spec.SetField(subscriptionorder.FieldLifeSeconds, field.TypeUint32, value)
	}
	if value, ok := sou.mutation.AddedLifeSeconds(); ok {
		_spec.AddField(subscriptionorder.FieldLifeSeconds, field.TypeUint32, value)
	}
	if sou.mutation.LifeSecondsCleared() {
		_spec.ClearField(subscriptionorder.FieldLifeSeconds, field.TypeUint32)
	}
	_spec.AddModifiers(sou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sou.mutation.done = true
	return n, nil
}

// SubscriptionOrderUpdateOne is the builder for updating a single SubscriptionOrder entity.
type SubscriptionOrderUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SubscriptionOrderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (souo *SubscriptionOrderUpdateOne) SetEntID(u uuid.UUID) *SubscriptionOrderUpdateOne {
	souo.mutation.SetEntID(u)
	return souo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (souo *SubscriptionOrderUpdateOne) SetNillableEntID(u *uuid.UUID) *SubscriptionOrderUpdateOne {
	if u != nil {
		souo.SetEntID(*u)
	}
	return souo
}

// SetCreatedAt sets the "created_at" field.
func (souo *SubscriptionOrderUpdateOne) SetCreatedAt(u uint32) *SubscriptionOrderUpdateOne {
	souo.mutation.ResetCreatedAt()
	souo.mutation.SetCreatedAt(u)
	return souo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (souo *SubscriptionOrderUpdateOne) SetNillableCreatedAt(u *uint32) *SubscriptionOrderUpdateOne {
	if u != nil {
		souo.SetCreatedAt(*u)
	}
	return souo
}

// AddCreatedAt adds u to the "created_at" field.
func (souo *SubscriptionOrderUpdateOne) AddCreatedAt(u int32) *SubscriptionOrderUpdateOne {
	souo.mutation.AddCreatedAt(u)
	return souo
}

// SetUpdatedAt sets the "updated_at" field.
func (souo *SubscriptionOrderUpdateOne) SetUpdatedAt(u uint32) *SubscriptionOrderUpdateOne {
	souo.mutation.ResetUpdatedAt()
	souo.mutation.SetUpdatedAt(u)
	return souo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (souo *SubscriptionOrderUpdateOne) AddUpdatedAt(u int32) *SubscriptionOrderUpdateOne {
	souo.mutation.AddUpdatedAt(u)
	return souo
}

// SetDeletedAt sets the "deleted_at" field.
func (souo *SubscriptionOrderUpdateOne) SetDeletedAt(u uint32) *SubscriptionOrderUpdateOne {
	souo.mutation.ResetDeletedAt()
	souo.mutation.SetDeletedAt(u)
	return souo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (souo *SubscriptionOrderUpdateOne) SetNillableDeletedAt(u *uint32) *SubscriptionOrderUpdateOne {
	if u != nil {
		souo.SetDeletedAt(*u)
	}
	return souo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (souo *SubscriptionOrderUpdateOne) AddDeletedAt(u int32) *SubscriptionOrderUpdateOne {
	souo.mutation.AddDeletedAt(u)
	return souo
}

// SetOrderID sets the "order_id" field.
func (souo *SubscriptionOrderUpdateOne) SetOrderID(u uuid.UUID) *SubscriptionOrderUpdateOne {
	souo.mutation.SetOrderID(u)
	return souo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (souo *SubscriptionOrderUpdateOne) SetNillableOrderID(u *uuid.UUID) *SubscriptionOrderUpdateOne {
	if u != nil {
		souo.SetOrderID(*u)
	}
	return souo
}

// ClearOrderID clears the value of the "order_id" field.
func (souo *SubscriptionOrderUpdateOne) ClearOrderID() *SubscriptionOrderUpdateOne {
	souo.mutation.ClearOrderID()
	return souo
}

// SetGoodValueUsd sets the "good_value_usd" field.
func (souo *SubscriptionOrderUpdateOne) SetGoodValueUsd(d decimal.Decimal) *SubscriptionOrderUpdateOne {
	souo.mutation.SetGoodValueUsd(d)
	return souo
}

// SetNillableGoodValueUsd sets the "good_value_usd" field if the given value is not nil.
func (souo *SubscriptionOrderUpdateOne) SetNillableGoodValueUsd(d *decimal.Decimal) *SubscriptionOrderUpdateOne {
	if d != nil {
		souo.SetGoodValueUsd(*d)
	}
	return souo
}

// ClearGoodValueUsd clears the value of the "good_value_usd" field.
func (souo *SubscriptionOrderUpdateOne) ClearGoodValueUsd() *SubscriptionOrderUpdateOne {
	souo.mutation.ClearGoodValueUsd()
	return souo
}

// SetPaymentAmountUsd sets the "payment_amount_usd" field.
func (souo *SubscriptionOrderUpdateOne) SetPaymentAmountUsd(d decimal.Decimal) *SubscriptionOrderUpdateOne {
	souo.mutation.SetPaymentAmountUsd(d)
	return souo
}

// SetNillablePaymentAmountUsd sets the "payment_amount_usd" field if the given value is not nil.
func (souo *SubscriptionOrderUpdateOne) SetNillablePaymentAmountUsd(d *decimal.Decimal) *SubscriptionOrderUpdateOne {
	if d != nil {
		souo.SetPaymentAmountUsd(*d)
	}
	return souo
}

// ClearPaymentAmountUsd clears the value of the "payment_amount_usd" field.
func (souo *SubscriptionOrderUpdateOne) ClearPaymentAmountUsd() *SubscriptionOrderUpdateOne {
	souo.mutation.ClearPaymentAmountUsd()
	return souo
}

// SetDiscountAmountUsd sets the "discount_amount_usd" field.
func (souo *SubscriptionOrderUpdateOne) SetDiscountAmountUsd(d decimal.Decimal) *SubscriptionOrderUpdateOne {
	souo.mutation.SetDiscountAmountUsd(d)
	return souo
}

// SetNillableDiscountAmountUsd sets the "discount_amount_usd" field if the given value is not nil.
func (souo *SubscriptionOrderUpdateOne) SetNillableDiscountAmountUsd(d *decimal.Decimal) *SubscriptionOrderUpdateOne {
	if d != nil {
		souo.SetDiscountAmountUsd(*d)
	}
	return souo
}

// ClearDiscountAmountUsd clears the value of the "discount_amount_usd" field.
func (souo *SubscriptionOrderUpdateOne) ClearDiscountAmountUsd() *SubscriptionOrderUpdateOne {
	souo.mutation.ClearDiscountAmountUsd()
	return souo
}

// SetPromotionID sets the "promotion_id" field.
func (souo *SubscriptionOrderUpdateOne) SetPromotionID(u uuid.UUID) *SubscriptionOrderUpdateOne {
	souo.mutation.SetPromotionID(u)
	return souo
}

// SetNillablePromotionID sets the "promotion_id" field if the given value is not nil.
func (souo *SubscriptionOrderUpdateOne) SetNillablePromotionID(u *uuid.UUID) *SubscriptionOrderUpdateOne {
	if u != nil {
		souo.SetPromotionID(*u)
	}
	return souo
}

// ClearPromotionID clears the value of the "promotion_id" field.
func (souo *SubscriptionOrderUpdateOne) ClearPromotionID() *SubscriptionOrderUpdateOne {
	souo.mutation.ClearPromotionID()
	return souo
}

// SetLifeSeconds sets the "life_seconds" field.
func (souo *SubscriptionOrderUpdateOne) SetLifeSeconds(u uint32) *SubscriptionOrderUpdateOne {
	souo.mutation.ResetLifeSeconds()
	souo.mutation.SetLifeSeconds(u)
	return souo
}

// SetNillableLifeSeconds sets the "life_seconds" field if the given value is not nil.
func (souo *SubscriptionOrderUpdateOne) SetNillableLifeSeconds(u *uint32) *SubscriptionOrderUpdateOne {
	if u != nil {
		souo.SetLifeSeconds(*u)
	}
	return souo
}

// AddLifeSeconds adds u to the "life_seconds" field.
func (souo *SubscriptionOrderUpdateOne) AddLifeSeconds(u int32) *SubscriptionOrderUpdateOne {
	souo.mutation.AddLifeSeconds(u)
	return souo
}

// ClearLifeSeconds clears the value of the "life_seconds" field.
func (souo *SubscriptionOrderUpdateOne) ClearLifeSeconds() *SubscriptionOrderUpdateOne {
	souo.mutation.ClearLifeSeconds()
	return souo
}

// Mutation returns the SubscriptionOrderMutation object of the builder.
func (souo *SubscriptionOrderUpdateOne) Mutation() *SubscriptionOrderMutation {
	return souo.mutation
}

// Where appends a list predicates to the SubscriptionOrderUpdate builder.
func (souo *SubscriptionOrderUpdateOne) Where(ps ...predicate.SubscriptionOrder) *SubscriptionOrderUpdateOne {
	souo.mutation.Where(ps...)
	return souo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (souo *SubscriptionOrderUpdateOne) Select(field string, fields ...string) *SubscriptionOrderUpdateOne {
	souo.fields = append([]string{field}, fields...)
	return souo
}

// Save executes the query and returns the updated SubscriptionOrder entity.
func (souo *SubscriptionOrderUpdateOne) Save(ctx context.Context) (*SubscriptionOrder, error) {
	souo.defaults()
	return withHooks(ctx, souo.sqlSave, souo.mutation, souo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (souo *SubscriptionOrderUpdateOne) SaveX(ctx context.Context) *SubscriptionOrder {
	node, err := souo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (souo *SubscriptionOrderUpdateOne) Exec(ctx context.Context) error {
	_, err := souo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (souo *SubscriptionOrderUpdateOne) ExecX(ctx context.Context) {
	if err := souo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (souo *SubscriptionOrderUpdateOne) defaults() {
	if _, ok := souo.mutation.UpdatedAt(); !ok {
		v := subscriptionorder.UpdateDefaultUpdatedAt()
		souo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (souo *SubscriptionOrderUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubscriptionOrderUpdateOne {
	souo.modifiers = append(souo.modifiers, modifiers...)
	return souo
}

func (souo *SubscriptionOrderUpdateOne) sqlSave(ctx context.Context) (_node *SubscriptionOrder, err error) {
	_spec := sqlgraph.NewUpdateSpec(subscriptionorder.Table, subscriptionorder.Columns, sqlgraph.NewFieldSpec(subscriptionorder.FieldID, field.TypeUint32))
	id, ok := souo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "SubscriptionOrder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := souo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptionorder.FieldID)
		for _, f := range fields {
			if !subscriptionorder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != subscriptionorder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := souo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := souo.mutation.EntID(); ok {
		_spec.SetField(subscriptionorder.FieldEntID, field.TypeUUID, value)
	}
	if value, ok := souo.mutation.CreatedAt(); ok {
		_spec.SetField(subscriptionorder.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := souo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(subscriptionorder.FieldCreatedAt, field.TypeUint32, value)
	}
	if value, ok := souo.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionorder.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := souo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(subscriptionorder.FieldUpdatedAt, field.TypeUint32, value)
	}
	if value, ok := souo.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptionorder.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := souo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(subscriptionorder.FieldDeletedAt, field.TypeUint32, value)
	}
	if value, ok := souo.mutation.OrderID(); ok {
		_spec.SetField(subscriptionorder.FieldOrderID, field.TypeUUID, value)
	}
	if souo.mutation.OrderIDCleared() {
		_spec.ClearField(subscriptionorder.FieldOrderID, field.TypeUUID)
	}
	if value, ok := souo.mutation.GoodValueUsd(); ok {
		_spec.SetField(subscriptionorder.FieldGoodValueUsd, field.TypeOther, value)
	}
	if souo.mutation.GoodValueUsdCleared() {
		_spec.ClearField(subscriptionorder.FieldGoodValueUsd, field.TypeOther)
	}
	if value, ok := souo.mutation.PaymentAmountUsd(); ok {
		_spec.SetField(subscriptionorder.FieldPaymentAmountUsd, field.TypeOther, value)
	}
	if souo.mutation.PaymentAmountUsdCleared() {
		_spec.ClearField(subscriptionorder.FieldPaymentAmountUsd, field.TypeOther)
	}
	if value, ok := souo.mutation.DiscountAmountUsd(); ok {
		_spec.SetField(subscriptionorder.FieldDiscountAmountUsd, field.TypeOther, value)
	}
	if souo.mutation.DiscountAmountUsdCleared() {
		_spec.ClearField(subscriptionorder.FieldDiscountAmountUsd, field.TypeOther)
	}
	if value, ok := souo.mutation.PromotionID(); ok {
		_spec.SetField(subscriptionorder.FieldPromotionID, field.TypeUUID, value)
	}
	if souo.mutation.PromotionIDCleared() {
		_spec.ClearField(subscriptionorder.FieldPromotionID, field.TypeUUID)
	}
	if value, ok := souo.mutation.LifeSeconds(); ok {
		_spec.SetField(subscriptionorder.FieldLifeSeconds, field.TypeUint32, value)
	}
	if value, ok := souo.mutation.AddedLifeSeconds(); ok {
		_spec.AddField(subscriptionorder.FieldLifeSeconds, field.TypeUint32, value)
	}
	if souo.mutation.LifeSecondsCleared() {
		_spec.ClearField(subscriptionorder.FieldLifeSeconds, field.TypeUint32)
	}
	_spec.AddModifiers(souo.modifiers...)
	_node = &SubscriptionOrder{config: souo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, souo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	souo.mutation.done = true
	return _node, nil
}

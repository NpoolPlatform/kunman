// Code generated by ent, DO NOT EDIT.

package paymenttransfer

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the paymenttransfer type in the database.
	Label = "payment_transfer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntID holds the string denoting the ent_id field in the database.
	FieldEntID = "ent_id"
	// FieldPaymentID holds the string denoting the payment_id field in the database.
	FieldPaymentID = "payment_id"
	// FieldCoinTypeID holds the string denoting the coin_type_id field in the database.
	FieldCoinTypeID = "coin_type_id"
	// FieldAccountID holds the string denoting the account_id field in the database.
	FieldAccountID = "account_id"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldStartAmount holds the string denoting the start_amount field in the database.
	FieldStartAmount = "start_amount"
	// FieldFinishAmount holds the string denoting the finish_amount field in the database.
	FieldFinishAmount = "finish_amount"
	// FieldCoinUsdCurrency holds the string denoting the coin_usd_currency field in the database.
	FieldCoinUsdCurrency = "coin_usd_currency"
	// FieldLocalCoinUsdCurrency holds the string denoting the local_coin_usd_currency field in the database.
	FieldLocalCoinUsdCurrency = "local_coin_usd_currency"
	// FieldLiveCoinUsdCurrency holds the string denoting the live_coin_usd_currency field in the database.
	FieldLiveCoinUsdCurrency = "live_coin_usd_currency"
	// Table holds the table name of the paymenttransfer in the database.
	Table = "payment_transfers"
)

// Columns holds all SQL columns for paymenttransfer fields.
var Columns = []string{
	FieldID,
	FieldEntID,
	FieldPaymentID,
	FieldCoinTypeID,
	FieldAccountID,
	FieldAmount,
	FieldStartAmount,
	FieldFinishAmount,
	FieldCoinUsdCurrency,
	FieldLocalCoinUsdCurrency,
	FieldLiveCoinUsdCurrency,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntID holds the default value on creation for the "ent_id" field.
	DefaultEntID func() uuid.UUID
	// DefaultPaymentID holds the default value on creation for the "payment_id" field.
	DefaultPaymentID func() uuid.UUID
	// DefaultCoinTypeID holds the default value on creation for the "coin_type_id" field.
	DefaultCoinTypeID func() uuid.UUID
	// DefaultAccountID holds the default value on creation for the "account_id" field.
	DefaultAccountID func() uuid.UUID
	// DefaultAmount holds the default value on creation for the "amount" field.
	DefaultAmount decimal.Decimal
	// DefaultStartAmount holds the default value on creation for the "start_amount" field.
	DefaultStartAmount decimal.Decimal
	// DefaultFinishAmount holds the default value on creation for the "finish_amount" field.
	DefaultFinishAmount decimal.Decimal
	// DefaultCoinUsdCurrency holds the default value on creation for the "coin_usd_currency" field.
	DefaultCoinUsdCurrency decimal.Decimal
	// DefaultLocalCoinUsdCurrency holds the default value on creation for the "local_coin_usd_currency" field.
	DefaultLocalCoinUsdCurrency decimal.Decimal
	// DefaultLiveCoinUsdCurrency holds the default value on creation for the "live_coin_usd_currency" field.
	DefaultLiveCoinUsdCurrency decimal.Decimal
)

// OrderOption defines the ordering options for the PaymentTransfer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntID orders the results by the ent_id field.
func ByEntID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntID, opts...).ToFunc()
}

// ByPaymentID orders the results by the payment_id field.
func ByPaymentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentID, opts...).ToFunc()
}

// ByCoinTypeID orders the results by the coin_type_id field.
func ByCoinTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoinTypeID, opts...).ToFunc()
}

// ByAccountID orders the results by the account_id field.
func ByAccountID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountID, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByStartAmount orders the results by the start_amount field.
func ByStartAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartAmount, opts...).ToFunc()
}

// ByFinishAmount orders the results by the finish_amount field.
func ByFinishAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinishAmount, opts...).ToFunc()
}

// ByCoinUsdCurrency orders the results by the coin_usd_currency field.
func ByCoinUsdCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoinUsdCurrency, opts...).ToFunc()
}

// ByLocalCoinUsdCurrency orders the results by the local_coin_usd_currency field.
func ByLocalCoinUsdCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalCoinUsdCurrency, opts...).ToFunc()
}

// ByLiveCoinUsdCurrency orders the results by the live_coin_usd_currency field.
func ByLiveCoinUsdCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLiveCoinUsdCurrency, opts...).ToFunc()
}

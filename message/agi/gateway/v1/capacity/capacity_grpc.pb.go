// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: agi/gateway/v1/capacity/capacity.proto

package capacity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_AdminCreateCapacity_FullMethodName  = "/agi.gateway.capacity.v1.Gateway/AdminCreateCapacity"
	Gateway_CreateCapacity_FullMethodName       = "/agi.gateway.capacity.v1.Gateway/CreateCapacity"
	Gateway_UpdateCapacity_FullMethodName       = "/agi.gateway.capacity.v1.Gateway/UpdateCapacity"
	Gateway_AdminGetCapacities_FullMethodName   = "/agi.gateway.capacity.v1.Gateway/AdminGetCapacities"
	Gateway_GetCapacities_FullMethodName        = "/agi.gateway.capacity.v1.Gateway/GetCapacities"
	Gateway_AdminCountCapacities_FullMethodName = "/agi.gateway.capacity.v1.Gateway/AdminCountCapacities"
	Gateway_CountCapacities_FullMethodName      = "/agi.gateway.capacity.v1.Gateway/CountCapacities"
	Gateway_DeleteCapacity_FullMethodName       = "/agi.gateway.capacity.v1.Gateway/DeleteCapacity"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	AdminCreateCapacity(ctx context.Context, in *AdminCreateCapacityRequest, opts ...grpc.CallOption) (*AdminCreateCapacityResponse, error)
	CreateCapacity(ctx context.Context, in *CreateCapacityRequest, opts ...grpc.CallOption) (*CreateCapacityResponse, error)
	UpdateCapacity(ctx context.Context, in *UpdateCapacityRequest, opts ...grpc.CallOption) (*UpdateCapacityResponse, error)
	AdminGetCapacities(ctx context.Context, in *AdminGetCapacitiesRequest, opts ...grpc.CallOption) (*AdminGetCapacitiesResponse, error)
	GetCapacities(ctx context.Context, in *GetCapacitiesRequest, opts ...grpc.CallOption) (*GetCapacitiesResponse, error)
	AdminCountCapacities(ctx context.Context, in *AdminCountCapacitiesRequest, opts ...grpc.CallOption) (*AdminCountCapacitiesResponse, error)
	CountCapacities(ctx context.Context, in *CountCapacitiesRequest, opts ...grpc.CallOption) (*CountCapacitiesResponse, error)
	DeleteCapacity(ctx context.Context, in *DeleteCapacityRequest, opts ...grpc.CallOption) (*DeleteCapacityResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) AdminCreateCapacity(ctx context.Context, in *AdminCreateCapacityRequest, opts ...grpc.CallOption) (*AdminCreateCapacityResponse, error) {
	out := new(AdminCreateCapacityResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminCreateCapacity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateCapacity(ctx context.Context, in *CreateCapacityRequest, opts ...grpc.CallOption) (*CreateCapacityResponse, error) {
	out := new(CreateCapacityResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateCapacity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateCapacity(ctx context.Context, in *UpdateCapacityRequest, opts ...grpc.CallOption) (*UpdateCapacityResponse, error) {
	out := new(UpdateCapacityResponse)
	err := c.cc.Invoke(ctx, Gateway_UpdateCapacity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminGetCapacities(ctx context.Context, in *AdminGetCapacitiesRequest, opts ...grpc.CallOption) (*AdminGetCapacitiesResponse, error) {
	out := new(AdminGetCapacitiesResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminGetCapacities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetCapacities(ctx context.Context, in *GetCapacitiesRequest, opts ...grpc.CallOption) (*GetCapacitiesResponse, error) {
	out := new(GetCapacitiesResponse)
	err := c.cc.Invoke(ctx, Gateway_GetCapacities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminCountCapacities(ctx context.Context, in *AdminCountCapacitiesRequest, opts ...grpc.CallOption) (*AdminCountCapacitiesResponse, error) {
	out := new(AdminCountCapacitiesResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminCountCapacities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CountCapacities(ctx context.Context, in *CountCapacitiesRequest, opts ...grpc.CallOption) (*CountCapacitiesResponse, error) {
	out := new(CountCapacitiesResponse)
	err := c.cc.Invoke(ctx, Gateway_CountCapacities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteCapacity(ctx context.Context, in *DeleteCapacityRequest, opts ...grpc.CallOption) (*DeleteCapacityResponse, error) {
	out := new(DeleteCapacityResponse)
	err := c.cc.Invoke(ctx, Gateway_DeleteCapacity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	AdminCreateCapacity(context.Context, *AdminCreateCapacityRequest) (*AdminCreateCapacityResponse, error)
	CreateCapacity(context.Context, *CreateCapacityRequest) (*CreateCapacityResponse, error)
	UpdateCapacity(context.Context, *UpdateCapacityRequest) (*UpdateCapacityResponse, error)
	AdminGetCapacities(context.Context, *AdminGetCapacitiesRequest) (*AdminGetCapacitiesResponse, error)
	GetCapacities(context.Context, *GetCapacitiesRequest) (*GetCapacitiesResponse, error)
	AdminCountCapacities(context.Context, *AdminCountCapacitiesRequest) (*AdminCountCapacitiesResponse, error)
	CountCapacities(context.Context, *CountCapacitiesRequest) (*CountCapacitiesResponse, error)
	DeleteCapacity(context.Context, *DeleteCapacityRequest) (*DeleteCapacityResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) AdminCreateCapacity(context.Context, *AdminCreateCapacityRequest) (*AdminCreateCapacityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateCapacity not implemented")
}
func (UnimplementedGatewayServer) CreateCapacity(context.Context, *CreateCapacityRequest) (*CreateCapacityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCapacity not implemented")
}
func (UnimplementedGatewayServer) UpdateCapacity(context.Context, *UpdateCapacityRequest) (*UpdateCapacityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCapacity not implemented")
}
func (UnimplementedGatewayServer) AdminGetCapacities(context.Context, *AdminGetCapacitiesRequest) (*AdminGetCapacitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetCapacities not implemented")
}
func (UnimplementedGatewayServer) GetCapacities(context.Context, *GetCapacitiesRequest) (*GetCapacitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCapacities not implemented")
}
func (UnimplementedGatewayServer) AdminCountCapacities(context.Context, *AdminCountCapacitiesRequest) (*AdminCountCapacitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCountCapacities not implemented")
}
func (UnimplementedGatewayServer) CountCapacities(context.Context, *CountCapacitiesRequest) (*CountCapacitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCapacities not implemented")
}
func (UnimplementedGatewayServer) DeleteCapacity(context.Context, *DeleteCapacityRequest) (*DeleteCapacityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCapacity not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_AdminCreateCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateCapacityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCreateCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminCreateCapacity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCreateCapacity(ctx, req.(*AdminCreateCapacityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCapacityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateCapacity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateCapacity(ctx, req.(*CreateCapacityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCapacityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateCapacity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateCapacity(ctx, req.(*UpdateCapacityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminGetCapacities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetCapacitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminGetCapacities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminGetCapacities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminGetCapacities(ctx, req.(*AdminGetCapacitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetCapacities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCapacitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetCapacities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetCapacities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetCapacities(ctx, req.(*GetCapacitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminCountCapacities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCountCapacitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCountCapacities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminCountCapacities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCountCapacities(ctx, req.(*AdminCountCapacitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CountCapacities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountCapacitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CountCapacities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CountCapacities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CountCapacities(ctx, req.(*CountCapacitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCapacityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_DeleteCapacity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteCapacity(ctx, req.(*DeleteCapacityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agi.gateway.capacity.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminCreateCapacity",
			Handler:    _Gateway_AdminCreateCapacity_Handler,
		},
		{
			MethodName: "CreateCapacity",
			Handler:    _Gateway_CreateCapacity_Handler,
		},
		{
			MethodName: "UpdateCapacity",
			Handler:    _Gateway_UpdateCapacity_Handler,
		},
		{
			MethodName: "AdminGetCapacities",
			Handler:    _Gateway_AdminGetCapacities_Handler,
		},
		{
			MethodName: "GetCapacities",
			Handler:    _Gateway_GetCapacities_Handler,
		},
		{
			MethodName: "AdminCountCapacities",
			Handler:    _Gateway_AdminCountCapacities_Handler,
		},
		{
			MethodName: "CountCapacities",
			Handler:    _Gateway_CountCapacities_Handler,
		},
		{
			MethodName: "DeleteCapacity",
			Handler:    _Gateway_DeleteCapacity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agi/gateway/v1/capacity/capacity.proto",
}

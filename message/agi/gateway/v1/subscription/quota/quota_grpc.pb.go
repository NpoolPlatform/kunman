// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: agi/gateway/v1/subscription/quota/quota.proto

package quota

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_AdminGetQuotas_FullMethodName   = "/agi.gateway.subscription.quota.v1.Gateway/AdminGetQuotas"
	Gateway_AdminCountQuotas_FullMethodName = "/agi.gateway.subscription.quota.v1.Gateway/AdminCountQuotas"
	Gateway_GetQuotas_FullMethodName        = "/agi.gateway.subscription.quota.v1.Gateway/GetQuotas"
	Gateway_CountQuotas_FullMethodName      = "/agi.gateway.subscription.quota.v1.Gateway/CountQuotas"
	Gateway_GetMyQuotas_FullMethodName      = "/agi.gateway.subscription.quota.v1.Gateway/GetMyQuotas"
	Gateway_CountMyQuotas_FullMethodName    = "/agi.gateway.subscription.quota.v1.Gateway/CountMyQuotas"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	AdminGetQuotas(ctx context.Context, in *AdminGetQuotasRequest, opts ...grpc.CallOption) (*AdminGetQuotasResponse, error)
	AdminCountQuotas(ctx context.Context, in *AdminCountQuotasRequest, opts ...grpc.CallOption) (*AdminCountQuotasResponse, error)
	GetQuotas(ctx context.Context, in *GetQuotasRequest, opts ...grpc.CallOption) (*GetQuotasResponse, error)
	CountQuotas(ctx context.Context, in *CountQuotasRequest, opts ...grpc.CallOption) (*CountQuotasResponse, error)
	GetMyQuotas(ctx context.Context, in *GetQuotasRequest, opts ...grpc.CallOption) (*GetQuotasResponse, error)
	CountMyQuotas(ctx context.Context, in *CountQuotasRequest, opts ...grpc.CallOption) (*CountQuotasResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) AdminGetQuotas(ctx context.Context, in *AdminGetQuotasRequest, opts ...grpc.CallOption) (*AdminGetQuotasResponse, error) {
	out := new(AdminGetQuotasResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminGetQuotas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminCountQuotas(ctx context.Context, in *AdminCountQuotasRequest, opts ...grpc.CallOption) (*AdminCountQuotasResponse, error) {
	out := new(AdminCountQuotasResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminCountQuotas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetQuotas(ctx context.Context, in *GetQuotasRequest, opts ...grpc.CallOption) (*GetQuotasResponse, error) {
	out := new(GetQuotasResponse)
	err := c.cc.Invoke(ctx, Gateway_GetQuotas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CountQuotas(ctx context.Context, in *CountQuotasRequest, opts ...grpc.CallOption) (*CountQuotasResponse, error) {
	out := new(CountQuotasResponse)
	err := c.cc.Invoke(ctx, Gateway_CountQuotas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetMyQuotas(ctx context.Context, in *GetQuotasRequest, opts ...grpc.CallOption) (*GetQuotasResponse, error) {
	out := new(GetQuotasResponse)
	err := c.cc.Invoke(ctx, Gateway_GetMyQuotas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CountMyQuotas(ctx context.Context, in *CountQuotasRequest, opts ...grpc.CallOption) (*CountQuotasResponse, error) {
	out := new(CountQuotasResponse)
	err := c.cc.Invoke(ctx, Gateway_CountMyQuotas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	AdminGetQuotas(context.Context, *AdminGetQuotasRequest) (*AdminGetQuotasResponse, error)
	AdminCountQuotas(context.Context, *AdminCountQuotasRequest) (*AdminCountQuotasResponse, error)
	GetQuotas(context.Context, *GetQuotasRequest) (*GetQuotasResponse, error)
	CountQuotas(context.Context, *CountQuotasRequest) (*CountQuotasResponse, error)
	GetMyQuotas(context.Context, *GetQuotasRequest) (*GetQuotasResponse, error)
	CountMyQuotas(context.Context, *CountQuotasRequest) (*CountQuotasResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct{}

func (UnimplementedGatewayServer) AdminGetQuotas(context.Context, *AdminGetQuotasRequest) (*AdminGetQuotasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetQuotas not implemented")
}

func (UnimplementedGatewayServer) AdminCountQuotas(context.Context, *AdminCountQuotasRequest) (*AdminCountQuotasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCountQuotas not implemented")
}

func (UnimplementedGatewayServer) GetQuotas(context.Context, *GetQuotasRequest) (*GetQuotasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuotas not implemented")
}

func (UnimplementedGatewayServer) CountQuotas(context.Context, *CountQuotasRequest) (*CountQuotasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountQuotas not implemented")
}

func (UnimplementedGatewayServer) GetMyQuotas(context.Context, *GetQuotasRequest) (*GetQuotasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyQuotas not implemented")
}

func (UnimplementedGatewayServer) CountMyQuotas(context.Context, *CountQuotasRequest) (*CountQuotasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountMyQuotas not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_AdminGetQuotas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetQuotasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminGetQuotas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminGetQuotas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminGetQuotas(ctx, req.(*AdminGetQuotasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminCountQuotas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCountQuotasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCountQuotas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminCountQuotas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCountQuotas(ctx, req.(*AdminCountQuotasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetQuotas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetQuotas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetQuotas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetQuotas(ctx, req.(*GetQuotasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CountQuotas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountQuotasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CountQuotas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CountQuotas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CountQuotas(ctx, req.(*CountQuotasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetMyQuotas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetMyQuotas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetMyQuotas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetMyQuotas(ctx, req.(*GetQuotasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CountMyQuotas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountQuotasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CountMyQuotas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CountMyQuotas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CountMyQuotas(ctx, req.(*CountQuotasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agi.gateway.subscription.quota.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminGetQuotas",
			Handler:    _Gateway_AdminGetQuotas_Handler,
		},
		{
			MethodName: "AdminCountQuotas",
			Handler:    _Gateway_AdminCountQuotas_Handler,
		},
		{
			MethodName: "GetQuotas",
			Handler:    _Gateway_GetQuotas_Handler,
		},
		{
			MethodName: "CountQuotas",
			Handler:    _Gateway_CountQuotas_Handler,
		},
		{
			MethodName: "GetMyQuotas",
			Handler:    _Gateway_GetMyQuotas_Handler,
		},
		{
			MethodName: "CountMyQuotas",
			Handler:    _Gateway_CountMyQuotas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agi/gateway/v1/subscription/quota/quota.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: agi/gateway/v1/subscription/subscription.proto

package subscription

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_GetSubscription_FullMethodName         = "/agi.gateway.subscription.v1.Gateway/GetSubscription"
	Gateway_GetSubscriptions_FullMethodName        = "/agi.gateway.subscription.v1.Gateway/GetSubscriptions"
	Gateway_CountSubscriptions_FullMethodName      = "/agi.gateway.subscription.v1.Gateway/CountSubscriptions"
	Gateway_AdminGetSubscriptions_FullMethodName   = "/agi.gateway.subscription.v1.Gateway/AdminGetSubscriptions"
	Gateway_AdminCountSubscriptions_FullMethodName = "/agi.gateway.subscription.v1.Gateway/AdminCountSubscriptions"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error)
	GetSubscriptions(ctx context.Context, in *GetSubscriptionsRequest, opts ...grpc.CallOption) (*GetSubscriptionsResponse, error)
	CountSubscriptions(ctx context.Context, in *CountSubscriptionsRequest, opts ...grpc.CallOption) (*CountSubscriptionsResponse, error)
	AdminGetSubscriptions(ctx context.Context, in *AdminGetSubscriptionsRequest, opts ...grpc.CallOption) (*AdminGetSubscriptionsResponse, error)
	AdminCountSubscriptions(ctx context.Context, in *AdminCountSubscriptionsRequest, opts ...grpc.CallOption) (*AdminCountSubscriptionsResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error) {
	out := new(GetSubscriptionResponse)
	err := c.cc.Invoke(ctx, Gateway_GetSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetSubscriptions(ctx context.Context, in *GetSubscriptionsRequest, opts ...grpc.CallOption) (*GetSubscriptionsResponse, error) {
	out := new(GetSubscriptionsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetSubscriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CountSubscriptions(ctx context.Context, in *CountSubscriptionsRequest, opts ...grpc.CallOption) (*CountSubscriptionsResponse, error) {
	out := new(CountSubscriptionsResponse)
	err := c.cc.Invoke(ctx, Gateway_CountSubscriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminGetSubscriptions(ctx context.Context, in *AdminGetSubscriptionsRequest, opts ...grpc.CallOption) (*AdminGetSubscriptionsResponse, error) {
	out := new(AdminGetSubscriptionsResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminGetSubscriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminCountSubscriptions(ctx context.Context, in *AdminCountSubscriptionsRequest, opts ...grpc.CallOption) (*AdminCountSubscriptionsResponse, error) {
	out := new(AdminCountSubscriptionsResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminCountSubscriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	GetSubscription(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error)
	GetSubscriptions(context.Context, *GetSubscriptionsRequest) (*GetSubscriptionsResponse, error)
	CountSubscriptions(context.Context, *CountSubscriptionsRequest) (*CountSubscriptionsResponse, error)
	AdminGetSubscriptions(context.Context, *AdminGetSubscriptionsRequest) (*AdminGetSubscriptionsResponse, error)
	AdminCountSubscriptions(context.Context, *AdminCountSubscriptionsRequest) (*AdminCountSubscriptionsResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) GetSubscription(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscription not implemented")
}
func (UnimplementedGatewayServer) GetSubscriptions(context.Context, *GetSubscriptionsRequest) (*GetSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptions not implemented")
}
func (UnimplementedGatewayServer) CountSubscriptions(context.Context, *CountSubscriptionsRequest) (*CountSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountSubscriptions not implemented")
}
func (UnimplementedGatewayServer) AdminGetSubscriptions(context.Context, *AdminGetSubscriptionsRequest) (*AdminGetSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetSubscriptions not implemented")
}
func (UnimplementedGatewayServer) AdminCountSubscriptions(context.Context, *AdminCountSubscriptionsRequest) (*AdminCountSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCountSubscriptions not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_GetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetSubscription(ctx, req.(*GetSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetSubscriptions(ctx, req.(*GetSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CountSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CountSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CountSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CountSubscriptions(ctx, req.(*CountSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminGetSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminGetSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminGetSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminGetSubscriptions(ctx, req.(*AdminGetSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminCountSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCountSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCountSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminCountSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCountSubscriptions(ctx, req.(*AdminCountSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agi.gateway.subscription.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubscription",
			Handler:    _Gateway_GetSubscription_Handler,
		},
		{
			MethodName: "GetSubscriptions",
			Handler:    _Gateway_GetSubscriptions_Handler,
		},
		{
			MethodName: "CountSubscriptions",
			Handler:    _Gateway_CountSubscriptions_Handler,
		},
		{
			MethodName: "AdminGetSubscriptions",
			Handler:    _Gateway_AdminGetSubscriptions_Handler,
		},
		{
			MethodName: "AdminCountSubscriptions",
			Handler:    _Gateway_AdminCountSubscriptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agi/gateway/v1/subscription/subscription.proto",
}

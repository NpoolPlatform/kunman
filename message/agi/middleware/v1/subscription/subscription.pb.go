// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: billing/middleware/v1/subscription/subscription.proto

package subscription

import (
	v1 "github.com/NpoolPlatform/kunman/message/basetypes/billing/v1"
	v11 "github.com/NpoolPlatform/kunman/message/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubscriptionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          *uint32         `protobuf:"varint,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID       *string         `protobuf:"bytes,20,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID       *string         `protobuf:"bytes,30,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	PackageName *string         `protobuf:"bytes,40,opt,name=PackageName,proto3,oneof" json:"PackageName,omitempty"`
	UsdPrice    *string         `protobuf:"bytes,50,opt,name=UsdPrice,proto3,oneof" json:"UsdPrice,omitempty"`
	Description *string         `protobuf:"bytes,60,opt,name=Description,proto3,oneof" json:"Description,omitempty"`
	SortOrder   *uint32         `protobuf:"varint,70,opt,name=SortOrder,proto3,oneof" json:"SortOrder,omitempty"`
	PackageType *v1.PackageType `protobuf:"varint,80,opt,name=PackageType,proto3,enum=basetypes.billing.v1.PackageType,oneof" json:"PackageType,omitempty"`
	Credit      *uint32         `protobuf:"varint,90,opt,name=Credit,proto3,oneof" json:"Credit,omitempty"`
	ResetType   *v1.ResetType   `protobuf:"varint,100,opt,name=ResetType,proto3,enum=basetypes.billing.v1.ResetType,oneof" json:"ResetType,omitempty"`
	QPSLimit    *uint32         `protobuf:"varint,110,opt,name=QPSLimit,proto3,oneof" json:"QPSLimit,omitempty"`
}

func (x *SubscriptionReq) Reset() {
	*x = SubscriptionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_middleware_v1_subscription_subscription_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionReq) ProtoMessage() {}

func (x *SubscriptionReq) ProtoReflect() protoreflect.Message {
	mi := &file_billing_middleware_v1_subscription_subscription_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionReq.ProtoReflect.Descriptor instead.
func (*SubscriptionReq) Descriptor() ([]byte, []int) {
	return file_billing_middleware_v1_subscription_subscription_proto_rawDescGZIP(), []int{0}
}

func (x *SubscriptionReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *SubscriptionReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *SubscriptionReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *SubscriptionReq) GetPackageName() string {
	if x != nil && x.PackageName != nil {
		return *x.PackageName
	}
	return ""
}

func (x *SubscriptionReq) GetUsdPrice() string {
	if x != nil && x.UsdPrice != nil {
		return *x.UsdPrice
	}
	return ""
}

func (x *SubscriptionReq) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *SubscriptionReq) GetSortOrder() uint32 {
	if x != nil && x.SortOrder != nil {
		return *x.SortOrder
	}
	return 0
}

func (x *SubscriptionReq) GetPackageType() v1.PackageType {
	if x != nil && x.PackageType != nil {
		return *x.PackageType
	}
	return v1.PackageType(0)
}

func (x *SubscriptionReq) GetCredit() uint32 {
	if x != nil && x.Credit != nil {
		return *x.Credit
	}
	return 0
}

func (x *SubscriptionReq) GetResetType() v1.ResetType {
	if x != nil && x.ResetType != nil {
		return *x.ResetType
	}
	return v1.ResetType(0)
}

func (x *SubscriptionReq) GetQPSLimit() uint32 {
	if x != nil && x.QPSLimit != nil {
		return *x.QPSLimit
	}
	return 0
}

type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"app_id"
	AppID string `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty" sql:"app_id"`
	// @inject_tag: sql:"package_name"
	PackageName string `protobuf:"bytes,40,opt,name=PackageName,proto3" json:"PackageName,omitempty" sql:"package_name"`
	// @inject_tag: sql:"usd_price"
	UsdPrice string `protobuf:"bytes,50,opt,name=UsdPrice,proto3" json:"UsdPrice,omitempty" sql:"usd_price"`
	// @inject_tag: sql:"description"
	Description string `protobuf:"bytes,60,opt,name=Description,proto3" json:"Description,omitempty" sql:"description"`
	// @inject_tag: sql:"sort_order"
	SortOrder uint32 `protobuf:"varint,70,opt,name=SortOrder,proto3" json:"SortOrder,omitempty" sql:"sort_order"`
	// @inject_tag: sql:"package_type"
	PackageTypeStr string         `protobuf:"bytes,80,opt,name=PackageTypeStr,proto3" json:"PackageTypeStr,omitempty" sql:"package_type"`
	PackageType    v1.PackageType `protobuf:"varint,81,opt,name=PackageType,proto3,enum=basetypes.billing.v1.PackageType" json:"PackageType,omitempty"`
	// @inject_tag: sql:"credit"
	Credit uint32 `protobuf:"varint,90,opt,name=Credit,proto3" json:"Credit,omitempty" sql:"credit"`
	// @inject_tag: sql:"reset_type"
	ResetTypeStr string       `protobuf:"bytes,100,opt,name=ResetTypeStr,proto3" json:"ResetTypeStr,omitempty" sql:"reset_type"`
	ResetType    v1.ResetType `protobuf:"varint,101,opt,name=ResetType,proto3,enum=basetypes.billing.v1.ResetType" json:"ResetType,omitempty"`
	// @inject_tag: sql:"qps_limit"
	QPSLimit uint32 `protobuf:"varint,110,opt,name=QPSLimit,proto3" json:"QPSLimit,omitempty" sql:"qps_limit"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_middleware_v1_subscription_subscription_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_billing_middleware_v1_subscription_subscription_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_billing_middleware_v1_subscription_subscription_proto_rawDescGZIP(), []int{1}
}

func (x *Subscription) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Subscription) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *Subscription) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *Subscription) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *Subscription) GetUsdPrice() string {
	if x != nil {
		return x.UsdPrice
	}
	return ""
}

func (x *Subscription) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Subscription) GetSortOrder() uint32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *Subscription) GetPackageTypeStr() string {
	if x != nil {
		return x.PackageTypeStr
	}
	return ""
}

func (x *Subscription) GetPackageType() v1.PackageType {
	if x != nil {
		return x.PackageType
	}
	return v1.PackageType(0)
}

func (x *Subscription) GetCredit() uint32 {
	if x != nil {
		return x.Credit
	}
	return 0
}

func (x *Subscription) GetResetTypeStr() string {
	if x != nil {
		return x.ResetTypeStr
	}
	return ""
}

func (x *Subscription) GetResetType() v1.ResetType {
	if x != nil {
		return x.ResetType
	}
	return v1.ResetType(0)
}

func (x *Subscription) GetQPSLimit() uint32 {
	if x != nil {
		return x.QPSLimit
	}
	return 0
}

func (x *Subscription) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Subscription) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          *v11.Uint32Val      `protobuf:"bytes,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID       *v11.StringVal      `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID       *v11.StringVal      `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	PackageName *v11.StringVal      `protobuf:"bytes,30,opt,name=PackageName,proto3,oneof" json:"PackageName,omitempty"`
	SortOrder   *v11.Uint32Val      `protobuf:"bytes,40,opt,name=SortOrder,proto3,oneof" json:"SortOrder,omitempty"`
	PackageType *v11.Uint32Val      `protobuf:"bytes,50,opt,name=PackageType,proto3,oneof" json:"PackageType,omitempty"`
	ResetType   *v11.Uint32Val      `protobuf:"bytes,60,opt,name=ResetType,proto3,oneof" json:"ResetType,omitempty"`
	IDs         *v11.Uint32SliceVal `protobuf:"bytes,1000,opt,name=IDs,proto3,oneof" json:"IDs,omitempty"`
	EntIDs      *v11.StringSliceVal `protobuf:"bytes,1010,opt,name=EntIDs,proto3,oneof" json:"EntIDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_middleware_v1_subscription_subscription_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_billing_middleware_v1_subscription_subscription_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_billing_middleware_v1_subscription_subscription_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *v11.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetEntID() *v11.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetAppID() *v11.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetPackageName() *v11.StringVal {
	if x != nil {
		return x.PackageName
	}
	return nil
}

func (x *Conds) GetSortOrder() *v11.Uint32Val {
	if x != nil {
		return x.SortOrder
	}
	return nil
}

func (x *Conds) GetPackageType() *v11.Uint32Val {
	if x != nil {
		return x.PackageType
	}
	return nil
}

func (x *Conds) GetResetType() *v11.Uint32Val {
	if x != nil {
		return x.ResetType
	}
	return nil
}

func (x *Conds) GetIDs() *v11.Uint32SliceVal {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *Conds) GetEntIDs() *v11.StringSliceVal {
	if x != nil {
		return x.EntIDs
	}
	return nil
}

var File_billing_middleware_v1_subscription_subscription_proto protoreflect.FileDescriptor

var file_billing_middleware_v1_subscription_subscription_proto_rawDesc = []byte{
	0x0a, 0x35, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x18, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x04, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x55, 0x73, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x08, 0x55, 0x73, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x09, 0x53, 0x6f, 0x72, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x07, 0x52, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x08, 0x52, 0x06, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x42, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x09, 0x52, 0x09, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x51, 0x50, 0x53, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x6e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a, 0x52, 0x08, 0x51, 0x50, 0x53, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x55, 0x73, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x51, 0x50, 0x53, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x8a, 0x04, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x55, 0x73, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x55, 0x73, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x74, 0x72, 0x12, 0x43, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x74, 0x72, 0x12, 0x3d, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x50, 0x53, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x6e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x51, 0x50, 0x53, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xe8, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xf1, 0x04,
	0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x48, 0x02, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a,
	0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x0b, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a,
	0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x09, 0x53, 0x6f, 0x72,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0b, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x05, 0x52, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x09, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x06, 0x52, 0x09, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0xe8, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61,
	0x6c, 0x48, 0x07, 0x52, 0x03, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x06, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x08, 0x52, 0x06, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x49, 0x44, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x73, 0x42, 0x4c, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6b, 0x75,
	0x6e, 0x6d, 0x61, 0x6e, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_billing_middleware_v1_subscription_subscription_proto_rawDescOnce sync.Once
	file_billing_middleware_v1_subscription_subscription_proto_rawDescData = file_billing_middleware_v1_subscription_subscription_proto_rawDesc
)

func file_billing_middleware_v1_subscription_subscription_proto_rawDescGZIP() []byte {
	file_billing_middleware_v1_subscription_subscription_proto_rawDescOnce.Do(func() {
		file_billing_middleware_v1_subscription_subscription_proto_rawDescData = protoimpl.X.CompressGZIP(file_billing_middleware_v1_subscription_subscription_proto_rawDescData)
	})
	return file_billing_middleware_v1_subscription_subscription_proto_rawDescData
}

var file_billing_middleware_v1_subscription_subscription_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_billing_middleware_v1_subscription_subscription_proto_goTypes = []interface{}{
	(*SubscriptionReq)(nil),    // 0: billing.middleware.subscription.v1.SubscriptionReq
	(*Subscription)(nil),       // 1: billing.middleware.subscription.v1.Subscription
	(*Conds)(nil),              // 2: billing.middleware.subscription.v1.Conds
	(v1.PackageType)(0),        // 3: basetypes.billing.v1.PackageType
	(v1.ResetType)(0),          // 4: basetypes.billing.v1.ResetType
	(*v11.Uint32Val)(nil),      // 5: basetypes.v1.Uint32Val
	(*v11.StringVal)(nil),      // 6: basetypes.v1.StringVal
	(*v11.Uint32SliceVal)(nil), // 7: basetypes.v1.Uint32SliceVal
	(*v11.StringSliceVal)(nil), // 8: basetypes.v1.StringSliceVal
}
var file_billing_middleware_v1_subscription_subscription_proto_depIdxs = []int32{
	3,  // 0: billing.middleware.subscription.v1.SubscriptionReq.PackageType:type_name -> basetypes.billing.v1.PackageType
	4,  // 1: billing.middleware.subscription.v1.SubscriptionReq.ResetType:type_name -> basetypes.billing.v1.ResetType
	3,  // 2: billing.middleware.subscription.v1.Subscription.PackageType:type_name -> basetypes.billing.v1.PackageType
	4,  // 3: billing.middleware.subscription.v1.Subscription.ResetType:type_name -> basetypes.billing.v1.ResetType
	5,  // 4: billing.middleware.subscription.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	6,  // 5: billing.middleware.subscription.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	6,  // 6: billing.middleware.subscription.v1.Conds.AppID:type_name -> basetypes.v1.StringVal
	6,  // 7: billing.middleware.subscription.v1.Conds.PackageName:type_name -> basetypes.v1.StringVal
	5,  // 8: billing.middleware.subscription.v1.Conds.SortOrder:type_name -> basetypes.v1.Uint32Val
	5,  // 9: billing.middleware.subscription.v1.Conds.PackageType:type_name -> basetypes.v1.Uint32Val
	5,  // 10: billing.middleware.subscription.v1.Conds.ResetType:type_name -> basetypes.v1.Uint32Val
	7,  // 11: billing.middleware.subscription.v1.Conds.IDs:type_name -> basetypes.v1.Uint32SliceVal
	8,  // 12: billing.middleware.subscription.v1.Conds.EntIDs:type_name -> basetypes.v1.StringSliceVal
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_billing_middleware_v1_subscription_subscription_proto_init() }
func file_billing_middleware_v1_subscription_subscription_proto_init() {
	if File_billing_middleware_v1_subscription_subscription_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_billing_middleware_v1_subscription_subscription_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_middleware_v1_subscription_subscription_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_middleware_v1_subscription_subscription_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_billing_middleware_v1_subscription_subscription_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_billing_middleware_v1_subscription_subscription_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_billing_middleware_v1_subscription_subscription_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_billing_middleware_v1_subscription_subscription_proto_goTypes,
		DependencyIndexes: file_billing_middleware_v1_subscription_subscription_proto_depIdxs,
		MessageInfos:      file_billing_middleware_v1_subscription_subscription_proto_msgTypes,
	}.Build()
	File_billing_middleware_v1_subscription_subscription_proto = out.File
	file_billing_middleware_v1_subscription_subscription_proto_rawDesc = nil
	file_billing_middleware_v1_subscription_subscription_proto_goTypes = nil
	file_billing_middleware_v1_subscription_subscription_proto_depIdxs = nil
}

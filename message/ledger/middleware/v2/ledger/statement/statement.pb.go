// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: ledger/middleware/v2/ledger/statement/statement.proto

package statement

import (
	v1 "github.com/NpoolPlatform/kunman/message/basetypes/ledger/v1"
	v11 "github.com/NpoolPlatform/kunman/message/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StatementReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         *uint32       `protobuf:"varint,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID      *string       `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID      *string       `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	UserID     *string       `protobuf:"bytes,30,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	CoinTypeID *string       `protobuf:"bytes,40,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	IOType     *v1.IOType    `protobuf:"varint,50,opt,name=IOType,proto3,enum=basetypes.ledger.v1.IOType,oneof" json:"IOType,omitempty"`
	IOSubType  *v1.IOSubType `protobuf:"varint,60,opt,name=IOSubType,proto3,enum=basetypes.ledger.v1.IOSubType,oneof" json:"IOSubType,omitempty"`
	Amount     *string       `protobuf:"bytes,70,opt,name=Amount,proto3,oneof" json:"Amount,omitempty"`
	IOExtra    *string       `protobuf:"bytes,100,opt,name=IOExtra,proto3,oneof" json:"IOExtra,omitempty"`
	CreatedAt  *uint32       `protobuf:"varint,110,opt,name=CreatedAt,proto3,oneof" json:"CreatedAt,omitempty"`
	Rollback   *bool         `protobuf:"varint,1000,opt,name=Rollback,proto3,oneof" json:"Rollback,omitempty"`
}

func (x *StatementReq) Reset() {
	*x = StatementReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_middleware_v2_ledger_statement_statement_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatementReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatementReq) ProtoMessage() {}

func (x *StatementReq) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_middleware_v2_ledger_statement_statement_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatementReq.ProtoReflect.Descriptor instead.
func (*StatementReq) Descriptor() ([]byte, []int) {
	return file_ledger_middleware_v2_ledger_statement_statement_proto_rawDescGZIP(), []int{0}
}

func (x *StatementReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *StatementReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *StatementReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *StatementReq) GetUserID() string {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return ""
}

func (x *StatementReq) GetCoinTypeID() string {
	if x != nil && x.CoinTypeID != nil {
		return *x.CoinTypeID
	}
	return ""
}

func (x *StatementReq) GetIOType() v1.IOType {
	if x != nil && x.IOType != nil {
		return *x.IOType
	}
	return v1.IOType(0)
}

func (x *StatementReq) GetIOSubType() v1.IOSubType {
	if x != nil && x.IOSubType != nil {
		return *x.IOSubType
	}
	return v1.IOSubType(0)
}

func (x *StatementReq) GetAmount() string {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return ""
}

func (x *StatementReq) GetIOExtra() string {
	if x != nil && x.IOExtra != nil {
		return *x.IOExtra
	}
	return ""
}

func (x *StatementReq) GetCreatedAt() uint32 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *StatementReq) GetRollback() bool {
	if x != nil && x.Rollback != nil {
		return *x.Rollback
	}
	return false
}

type Statement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,9,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"app_id"
	AppID string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty" sql:"app_id"`
	// @inject_tag: sql:"user_id"
	UserID string `protobuf:"bytes,30,opt,name=UserID,proto3" json:"UserID,omitempty" sql:"user_id"`
	// @inject_tag: sql:"coin_type_id"
	CoinTypeID string `protobuf:"bytes,40,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty" sql:"coin_type_id"`
	// @inject_tag: sql:"io_type"
	IOTypeStr string    `protobuf:"bytes,41,opt,name=IOTypeStr,proto3" json:"IOTypeStr,omitempty" sql:"io_type"`
	IOType    v1.IOType `protobuf:"varint,50,opt,name=IOType,proto3,enum=basetypes.ledger.v1.IOType" json:"IOType,omitempty"`
	// @inject_tag: sql:"io_sub_type"
	IOSubTypeStr string       `protobuf:"bytes,51,opt,name=IOSubTypeStr,proto3" json:"IOSubTypeStr,omitempty" sql:"io_sub_type"`
	IOSubType    v1.IOSubType `protobuf:"varint,60,opt,name=IOSubType,proto3,enum=basetypes.ledger.v1.IOSubType" json:"IOSubType,omitempty"`
	// @inject_tag: sql:"amount"
	Amount string `protobuf:"bytes,70,opt,name=Amount,proto3" json:"Amount,omitempty" sql:"amount"`
	// @inject_tag: sql:"io_extra_v1"
	IOExtra string `protobuf:"bytes,100,opt,name=IOExtra,proto3" json:"IOExtra,omitempty" sql:"io_extra_v1"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,110,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,120,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *Statement) Reset() {
	*x = Statement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_middleware_v2_ledger_statement_statement_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Statement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statement) ProtoMessage() {}

func (x *Statement) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_middleware_v2_ledger_statement_statement_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statement.ProtoReflect.Descriptor instead.
func (*Statement) Descriptor() ([]byte, []int) {
	return file_ledger_middleware_v2_ledger_statement_statement_proto_rawDescGZIP(), []int{1}
}

func (x *Statement) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Statement) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *Statement) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *Statement) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Statement) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *Statement) GetIOTypeStr() string {
	if x != nil {
		return x.IOTypeStr
	}
	return ""
}

func (x *Statement) GetIOType() v1.IOType {
	if x != nil {
		return x.IOType
	}
	return v1.IOType(0)
}

func (x *Statement) GetIOSubTypeStr() string {
	if x != nil {
		return x.IOSubTypeStr
	}
	return ""
}

func (x *Statement) GetIOSubType() v1.IOSubType {
	if x != nil {
		return x.IOSubType
	}
	return v1.IOSubType(0)
}

func (x *Statement) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Statement) GetIOExtra() string {
	if x != nil {
		return x.IOExtra
	}
	return ""
}

func (x *Statement) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Statement) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID       *v11.StringVal      `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID       *v11.StringVal      `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	UserID      *v11.StringVal      `protobuf:"bytes,30,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	CoinTypeID  *v11.StringVal      `protobuf:"bytes,40,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	IOType      *v11.Uint32Val      `protobuf:"bytes,50,opt,name=IOType,proto3,oneof" json:"IOType,omitempty"`
	IOSubType   *v11.Uint32Val      `protobuf:"bytes,60,opt,name=IOSubType,proto3,oneof" json:"IOSubType,omitempty"`
	IOExtra     *v11.StringVal      `protobuf:"bytes,100,opt,name=IOExtra,proto3,oneof" json:"IOExtra,omitempty"`
	StartAt     *v11.Uint32Val      `protobuf:"bytes,110,opt,name=StartAt,proto3,oneof" json:"StartAt,omitempty"`
	EndAt       *v11.Uint32Val      `protobuf:"bytes,120,opt,name=EndAt,proto3,oneof" json:"EndAt,omitempty"`
	IOSubTypes  *v11.Uint32SliceVal `protobuf:"bytes,130,opt,name=IOSubTypes,proto3,oneof" json:"IOSubTypes,omitempty"`
	CoinTypeIDs *v11.StringSliceVal `protobuf:"bytes,140,opt,name=CoinTypeIDs,proto3,oneof" json:"CoinTypeIDs,omitempty"`
	UserIDs     *v11.StringSliceVal `protobuf:"bytes,150,opt,name=UserIDs,proto3,oneof" json:"UserIDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_middleware_v2_ledger_statement_statement_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_middleware_v2_ledger_statement_statement_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_ledger_middleware_v2_ledger_statement_statement_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetEntID() *v11.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetAppID() *v11.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetUserID() *v11.StringVal {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *Conds) GetCoinTypeID() *v11.StringVal {
	if x != nil {
		return x.CoinTypeID
	}
	return nil
}

func (x *Conds) GetIOType() *v11.Uint32Val {
	if x != nil {
		return x.IOType
	}
	return nil
}

func (x *Conds) GetIOSubType() *v11.Uint32Val {
	if x != nil {
		return x.IOSubType
	}
	return nil
}

func (x *Conds) GetIOExtra() *v11.StringVal {
	if x != nil {
		return x.IOExtra
	}
	return nil
}

func (x *Conds) GetStartAt() *v11.Uint32Val {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *Conds) GetEndAt() *v11.Uint32Val {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *Conds) GetIOSubTypes() *v11.Uint32SliceVal {
	if x != nil {
		return x.IOSubTypes
	}
	return nil
}

func (x *Conds) GetCoinTypeIDs() *v11.StringSliceVal {
	if x != nil {
		return x.CoinTypeIDs
	}
	return nil
}

func (x *Conds) GetUserIDs() *v11.StringSliceVal {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

var File_ledger_middleware_v2_ledger_statement_statement_proto protoreflect.FileDescriptor

var file_ledger_middleware_v2_ledger_statement_statement_proto_rawDesc = []byte{
	0x0a, 0x35, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x1a, 0x18,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99, 0x04, 0x0a, 0x0c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x06, 0x49, 0x4f, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x4f,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x05, 0x52, 0x06, 0x49, 0x4f, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x41, 0x0a, 0x09, 0x49, 0x4f, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x4f, 0x53, 0x75, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x06, 0x52, 0x09, 0x49, 0x4f, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x46,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x49, 0x4f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x49, 0x4f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6e, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18,
	0xe8, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x08, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x49,
	0x4f, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x49, 0x4f, 0x53, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x49, 0x4f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x52, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 0xa2, 0x03, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x4f, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x74, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x4f, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x33, 0x0a, 0x06, 0x49, 0x4f, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x4f, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x06, 0x49, 0x4f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x4f,
	0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x49, 0x4f, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x3c,
	0x0a, 0x09, 0x49, 0x4f, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x4f, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x49, 0x4f, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x4f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x4f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd5, 0x06, 0x0a, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x05,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x48, 0x01, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48,
	0x03, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x34, 0x0a, 0x06, 0x49, 0x4f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x06, 0x49, 0x4f, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x09, 0x49, 0x4f, 0x53, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x48, 0x05, 0x52, 0x09, 0x49, 0x4f, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x49, 0x4f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x06, 0x52, 0x07,
	0x49, 0x4f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x48, 0x07, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x08, 0x52, 0x05, 0x45, 0x6e,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0a, 0x49, 0x4f, 0x53, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x09, 0x52, 0x0a, 0x49, 0x4f, 0x53,
	0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0b, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x0a,
	0x52, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x3c, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x96, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c,
	0x48, 0x0b, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x49, 0x4f, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x49, 0x4f, 0x53, 0x75,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x49, 0x4f, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x49, 0x4f, 0x53, 0x75,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x73, 0x42, 0x4f, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6b,
	0x75, 0x6e, 0x6d, 0x61, 0x6e, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2f,
	0x76, 0x32, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ledger_middleware_v2_ledger_statement_statement_proto_rawDescOnce sync.Once
	file_ledger_middleware_v2_ledger_statement_statement_proto_rawDescData = file_ledger_middleware_v2_ledger_statement_statement_proto_rawDesc
)

func file_ledger_middleware_v2_ledger_statement_statement_proto_rawDescGZIP() []byte {
	file_ledger_middleware_v2_ledger_statement_statement_proto_rawDescOnce.Do(func() {
		file_ledger_middleware_v2_ledger_statement_statement_proto_rawDescData = protoimpl.X.CompressGZIP(file_ledger_middleware_v2_ledger_statement_statement_proto_rawDescData)
	})
	return file_ledger_middleware_v2_ledger_statement_statement_proto_rawDescData
}

var file_ledger_middleware_v2_ledger_statement_statement_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_ledger_middleware_v2_ledger_statement_statement_proto_goTypes = []interface{}{
	(*StatementReq)(nil),       // 0: ledger.middleware.ledger.statement.v2.StatementReq
	(*Statement)(nil),          // 1: ledger.middleware.ledger.statement.v2.Statement
	(*Conds)(nil),              // 2: ledger.middleware.ledger.statement.v2.Conds
	(v1.IOType)(0),             // 3: basetypes.ledger.v1.IOType
	(v1.IOSubType)(0),          // 4: basetypes.ledger.v1.IOSubType
	(*v11.StringVal)(nil),      // 5: basetypes.v1.StringVal
	(*v11.Uint32Val)(nil),      // 6: basetypes.v1.Uint32Val
	(*v11.Uint32SliceVal)(nil), // 7: basetypes.v1.Uint32SliceVal
	(*v11.StringSliceVal)(nil), // 8: basetypes.v1.StringSliceVal
}
var file_ledger_middleware_v2_ledger_statement_statement_proto_depIdxs = []int32{
	3,  // 0: ledger.middleware.ledger.statement.v2.StatementReq.IOType:type_name -> basetypes.ledger.v1.IOType
	4,  // 1: ledger.middleware.ledger.statement.v2.StatementReq.IOSubType:type_name -> basetypes.ledger.v1.IOSubType
	3,  // 2: ledger.middleware.ledger.statement.v2.Statement.IOType:type_name -> basetypes.ledger.v1.IOType
	4,  // 3: ledger.middleware.ledger.statement.v2.Statement.IOSubType:type_name -> basetypes.ledger.v1.IOSubType
	5,  // 4: ledger.middleware.ledger.statement.v2.Conds.EntID:type_name -> basetypes.v1.StringVal
	5,  // 5: ledger.middleware.ledger.statement.v2.Conds.AppID:type_name -> basetypes.v1.StringVal
	5,  // 6: ledger.middleware.ledger.statement.v2.Conds.UserID:type_name -> basetypes.v1.StringVal
	5,  // 7: ledger.middleware.ledger.statement.v2.Conds.CoinTypeID:type_name -> basetypes.v1.StringVal
	6,  // 8: ledger.middleware.ledger.statement.v2.Conds.IOType:type_name -> basetypes.v1.Uint32Val
	6,  // 9: ledger.middleware.ledger.statement.v2.Conds.IOSubType:type_name -> basetypes.v1.Uint32Val
	5,  // 10: ledger.middleware.ledger.statement.v2.Conds.IOExtra:type_name -> basetypes.v1.StringVal
	6,  // 11: ledger.middleware.ledger.statement.v2.Conds.StartAt:type_name -> basetypes.v1.Uint32Val
	6,  // 12: ledger.middleware.ledger.statement.v2.Conds.EndAt:type_name -> basetypes.v1.Uint32Val
	7,  // 13: ledger.middleware.ledger.statement.v2.Conds.IOSubTypes:type_name -> basetypes.v1.Uint32SliceVal
	8,  // 14: ledger.middleware.ledger.statement.v2.Conds.CoinTypeIDs:type_name -> basetypes.v1.StringSliceVal
	8,  // 15: ledger.middleware.ledger.statement.v2.Conds.UserIDs:type_name -> basetypes.v1.StringSliceVal
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_ledger_middleware_v2_ledger_statement_statement_proto_init() }
func file_ledger_middleware_v2_ledger_statement_statement_proto_init() {
	if File_ledger_middleware_v2_ledger_statement_statement_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ledger_middleware_v2_ledger_statement_statement_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatementReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_middleware_v2_ledger_statement_statement_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Statement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_middleware_v2_ledger_statement_statement_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ledger_middleware_v2_ledger_statement_statement_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_ledger_middleware_v2_ledger_statement_statement_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ledger_middleware_v2_ledger_statement_statement_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ledger_middleware_v2_ledger_statement_statement_proto_goTypes,
		DependencyIndexes: file_ledger_middleware_v2_ledger_statement_statement_proto_depIdxs,
		MessageInfos:      file_ledger_middleware_v2_ledger_statement_statement_proto_msgTypes,
	}.Build()
	File_ledger_middleware_v2_ledger_statement_statement_proto = out.File
	file_ledger_middleware_v2_ledger_statement_statement_proto_rawDesc = nil
	file_ledger_middleware_v2_ledger_statement_statement_proto_goTypes = nil
	file_ledger_middleware_v2_ledger_statement_statement_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: miningpool/middleware/v1/fractionwithdrawalrule/fractionwithdrawalrule.proto

package fractionwithdrawalrule

import (
	reflect "reflect"
	sync "sync"

	v1 "github.com/NpoolPlatform/kunman/message/basetypes/miningpool/v1"
	v11 "github.com/NpoolPlatform/kunman/message/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FractionWithdrawalRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                    *uint32 `protobuf:"varint,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID                 *string `protobuf:"bytes,20,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	PoolCoinTypeID        *string `protobuf:"bytes,30,opt,name=PoolCoinTypeID,proto3,oneof" json:"PoolCoinTypeID,omitempty"`
	WithdrawInterval      *uint32 `protobuf:"varint,50,opt,name=WithdrawInterval,proto3,oneof" json:"WithdrawInterval,omitempty"`
	PayoutThreshold       *string `protobuf:"bytes,60,opt,name=PayoutThreshold,proto3,oneof" json:"PayoutThreshold,omitempty"`
	LeastWithdrawalAmount *string `protobuf:"bytes,70,opt,name=LeastWithdrawalAmount,proto3,oneof" json:"LeastWithdrawalAmount,omitempty"`
	WithdrawFee           *string `protobuf:"bytes,80,opt,name=WithdrawFee,proto3,oneof" json:"WithdrawFee,omitempty"`
}

func (x *FractionWithdrawalRuleReq) Reset() {
	*x = FractionWithdrawalRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FractionWithdrawalRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FractionWithdrawalRuleReq) ProtoMessage() {}

func (x *FractionWithdrawalRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FractionWithdrawalRuleReq.ProtoReflect.Descriptor instead.
func (*FractionWithdrawalRuleReq) Descriptor() ([]byte, []int) {
	return file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_rawDescGZIP(), []int{0}
}

func (x *FractionWithdrawalRuleReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *FractionWithdrawalRuleReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *FractionWithdrawalRuleReq) GetPoolCoinTypeID() string {
	if x != nil && x.PoolCoinTypeID != nil {
		return *x.PoolCoinTypeID
	}
	return ""
}

func (x *FractionWithdrawalRuleReq) GetWithdrawInterval() uint32 {
	if x != nil && x.WithdrawInterval != nil {
		return *x.WithdrawInterval
	}
	return 0
}

func (x *FractionWithdrawalRuleReq) GetPayoutThreshold() string {
	if x != nil && x.PayoutThreshold != nil {
		return *x.PayoutThreshold
	}
	return ""
}

func (x *FractionWithdrawalRuleReq) GetLeastWithdrawalAmount() string {
	if x != nil && x.LeastWithdrawalAmount != nil {
		return *x.LeastWithdrawalAmount
	}
	return ""
}

func (x *FractionWithdrawalRuleReq) GetWithdrawFee() string {
	if x != nil && x.WithdrawFee != nil {
		return *x.WithdrawFee
	}
	return ""
}

type FractionWithdrawalRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"pool_id"
	PoolID string `protobuf:"bytes,29,opt,name=PoolID,proto3" json:"PoolID,omitempty" sql:"pool_id"`
	// @inject_tag: sql:"pool_coin_type_id"
	PoolCoinTypeID string `protobuf:"bytes,30,opt,name=PoolCoinTypeID,proto3" json:"PoolCoinTypeID,omitempty" sql:"pool_coin_type_id"`
	// @inject_tag: sql:"coin_type_id"
	CoinTypeID string `protobuf:"bytes,31,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty" sql:"coin_type_id"`
	// @inject_tag: sql:"withdraw_interval"
	WithdrawInterval uint32 `protobuf:"varint,40,opt,name=WithdrawInterval,proto3" json:"WithdrawInterval,omitempty" sql:"withdraw_interval"`
	// @inject_tag: sql:"payout_threshold"
	PayoutThreshold string `protobuf:"bytes,50,opt,name=PayoutThreshold,proto3" json:"PayoutThreshold,omitempty" sql:"payout_threshold"`
	// @inject_tag: sql:"least_withdrawal_amount"
	LeastWithdrawalAmount string `protobuf:"bytes,60,opt,name=LeastWithdrawalAmount,proto3" json:"LeastWithdrawalAmount,omitempty" sql:"least_withdrawal_amount"`
	// @inject_tag: sql:"withdraw_fee"
	WithdrawFee string `protobuf:"bytes,70,opt,name=WithdrawFee,proto3" json:"WithdrawFee,omitempty" sql:"withdraw_fee"`
	// @inject_tag: sql:"mining_pool_type"
	MiningPoolTypeStr string            `protobuf:"bytes,80,opt,name=MiningPoolTypeStr,proto3" json:"MiningPoolTypeStr,omitempty" sql:"mining_pool_type"`
	MiningPoolType    v1.MiningPoolType `protobuf:"varint,81,opt,name=MiningPoolType,proto3,enum=basetypes.miningpool.v1.MiningPoolType" json:"MiningPoolType,omitempty"`
	// @inject_tag: sql:"coin_type"
	CoinTypeStr string       `protobuf:"bytes,90,opt,name=CoinTypeStr,proto3" json:"CoinTypeStr,omitempty" sql:"coin_type"`
	CoinType    v11.CoinType `protobuf:"varint,91,opt,name=CoinType,proto3,enum=basetypes.v1.CoinType" json:"CoinType,omitempty"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,100,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,110,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *FractionWithdrawalRule) Reset() {
	*x = FractionWithdrawalRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FractionWithdrawalRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FractionWithdrawalRule) ProtoMessage() {}

func (x *FractionWithdrawalRule) ProtoReflect() protoreflect.Message {
	mi := &file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FractionWithdrawalRule.ProtoReflect.Descriptor instead.
func (*FractionWithdrawalRule) Descriptor() ([]byte, []int) {
	return file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_rawDescGZIP(), []int{1}
}

func (x *FractionWithdrawalRule) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *FractionWithdrawalRule) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *FractionWithdrawalRule) GetPoolID() string {
	if x != nil {
		return x.PoolID
	}
	return ""
}

func (x *FractionWithdrawalRule) GetPoolCoinTypeID() string {
	if x != nil {
		return x.PoolCoinTypeID
	}
	return ""
}

func (x *FractionWithdrawalRule) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *FractionWithdrawalRule) GetWithdrawInterval() uint32 {
	if x != nil {
		return x.WithdrawInterval
	}
	return 0
}

func (x *FractionWithdrawalRule) GetPayoutThreshold() string {
	if x != nil {
		return x.PayoutThreshold
	}
	return ""
}

func (x *FractionWithdrawalRule) GetLeastWithdrawalAmount() string {
	if x != nil {
		return x.LeastWithdrawalAmount
	}
	return ""
}

func (x *FractionWithdrawalRule) GetWithdrawFee() string {
	if x != nil {
		return x.WithdrawFee
	}
	return ""
}

func (x *FractionWithdrawalRule) GetMiningPoolTypeStr() string {
	if x != nil {
		return x.MiningPoolTypeStr
	}
	return ""
}

func (x *FractionWithdrawalRule) GetMiningPoolType() v1.MiningPoolType {
	if x != nil {
		return x.MiningPoolType
	}
	return v1.MiningPoolType(0)
}

func (x *FractionWithdrawalRule) GetCoinTypeStr() string {
	if x != nil {
		return x.CoinTypeStr
	}
	return ""
}

func (x *FractionWithdrawalRule) GetCoinType() v11.CoinType {
	if x != nil {
		return x.CoinType
	}
	return v11.CoinType(0)
}

func (x *FractionWithdrawalRule) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *FractionWithdrawalRule) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             *v11.Uint32Val      `protobuf:"bytes,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID          *v11.StringVal      `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	PoolCoinTypeID *v11.StringVal      `protobuf:"bytes,20,opt,name=PoolCoinTypeID,proto3,oneof" json:"PoolCoinTypeID,omitempty"`
	PoolID         *v11.StringVal      `protobuf:"bytes,30,opt,name=PoolID,proto3,oneof" json:"PoolID,omitempty"`
	EntIDs         *v11.StringSliceVal `protobuf:"bytes,50,opt,name=EntIDs,proto3,oneof" json:"EntIDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *v11.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetEntID() *v11.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetPoolCoinTypeID() *v11.StringVal {
	if x != nil {
		return x.PoolCoinTypeID
	}
	return nil
}

func (x *Conds) GetPoolID() *v11.StringVal {
	if x != nil {
		return x.PoolID
	}
	return nil
}

func (x *Conds) GetEntIDs() *v11.StringSliceVal {
	if x != nil {
		return x.EntIDs
	}
	return nil
}

var File_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto protoreflect.FileDescriptor

var file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_rawDesc = []byte{
	0x0a, 0x4c, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x72, 0x75, 0x6c,
	0x65, 0x2f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2f,
	0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x1a,
	0x18, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x03, 0x0a, 0x19,
	0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x50, 0x6f, 0x6f,
	0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0e, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x03, 0x52, 0x10, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x50, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x0f, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x15, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65,
	0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x50, 0x6f,
	0x6f, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x22,
	0xdd, 0x04, 0x0a, 0x16, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x6f, 0x6f, 0x6c,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x12, 0x2a, 0x0a, 0x10, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x74, 0x72, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x4f, 0x0a, 0x0e,
	0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x51,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x4d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12,
	0x32, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x5b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0xda, 0x02, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48,
	0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0e, 0x50,
	0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x0e,
	0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x06, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x06, 0x50, 0x6f,
	0x6f, 0x6c, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x06, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x50, 0x6f, 0x6f, 0x6c, 0x49,
	0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x42, 0x59, 0x5a, 0x57,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6b, 0x75, 0x6e, 0x6d, 0x61, 0x6e, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x72, 0x75, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_rawDescOnce sync.Once
	file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_rawDescData = file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_rawDesc
)

func file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_rawDescGZIP() []byte {
	file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_rawDescOnce.Do(func() {
		file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_rawDescData = protoimpl.X.CompressGZIP(file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_rawDescData)
	})
	return file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_rawDescData
}

var (
	file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
	file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_goTypes  = []interface{}{
		(*FractionWithdrawalRuleReq)(nil), // 0: miningpool.middleware.fractionwithdrawalrule.v1.FractionWithdrawalRuleReq
		(*FractionWithdrawalRule)(nil),    // 1: miningpool.middleware.fractionwithdrawalrule.v1.FractionWithdrawalRule
		(*Conds)(nil),                     // 2: miningpool.middleware.fractionwithdrawalrule.v1.Conds
		(v1.MiningPoolType)(0),            // 3: basetypes.miningpool.v1.MiningPoolType
		(v11.CoinType)(0),                 // 4: basetypes.v1.CoinType
		(*v11.Uint32Val)(nil),             // 5: basetypes.v1.Uint32Val
		(*v11.StringVal)(nil),             // 6: basetypes.v1.StringVal
		(*v11.StringSliceVal)(nil),        // 7: basetypes.v1.StringSliceVal
	}
)
var file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_depIdxs = []int32{
	3, // 0: miningpool.middleware.fractionwithdrawalrule.v1.FractionWithdrawalRule.MiningPoolType:type_name -> basetypes.miningpool.v1.MiningPoolType
	4, // 1: miningpool.middleware.fractionwithdrawalrule.v1.FractionWithdrawalRule.CoinType:type_name -> basetypes.v1.CoinType
	5, // 2: miningpool.middleware.fractionwithdrawalrule.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	6, // 3: miningpool.middleware.fractionwithdrawalrule.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	6, // 4: miningpool.middleware.fractionwithdrawalrule.v1.Conds.PoolCoinTypeID:type_name -> basetypes.v1.StringVal
	6, // 5: miningpool.middleware.fractionwithdrawalrule.v1.Conds.PoolID:type_name -> basetypes.v1.StringVal
	7, // 6: miningpool.middleware.fractionwithdrawalrule.v1.Conds.EntIDs:type_name -> basetypes.v1.StringSliceVal
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_init() }
func file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_init() {
	if File_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FractionWithdrawalRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FractionWithdrawalRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_goTypes,
		DependencyIndexes: file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_depIdxs,
		MessageInfos:      file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_msgTypes,
	}.Build()
	File_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto = out.File
	file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_rawDesc = nil
	file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_goTypes = nil
	file_miningpool_middleware_v1_fractionwithdrawalrule_fractionwithdrawalrule_proto_depIdxs = nil
}

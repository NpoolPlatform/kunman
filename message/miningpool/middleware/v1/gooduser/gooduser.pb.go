// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: miningpool/middleware/v1/gooduser/gooduser.proto

package gooduser

import (
	v1 "github.com/NpoolPlatform/kunman/message/basetypes/miningpool/v1"
	v11 "github.com/NpoolPlatform/kunman/message/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GoodUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    *uint32 `protobuf:"varint,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID *string `protobuf:"bytes,20,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	// for check if cointypes is supported in the miningpool
	// not stored in db
	CoinTypeIDs  []string `protobuf:"bytes,30,rep,name=CoinTypeIDs,proto3" json:"CoinTypeIDs,omitempty"`
	RootUserID   *string  `protobuf:"bytes,40,opt,name=RootUserID,proto3,oneof" json:"RootUserID,omitempty"`
	Name         *string  `protobuf:"bytes,50,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	ReadPageLink *string  `protobuf:"bytes,60,opt,name=ReadPageLink,proto3,oneof" json:"ReadPageLink,omitempty"`
}

func (x *GoodUserReq) Reset() {
	*x = GoodUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_miningpool_middleware_v1_gooduser_gooduser_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodUserReq) ProtoMessage() {}

func (x *GoodUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_miningpool_middleware_v1_gooduser_gooduser_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodUserReq.ProtoReflect.Descriptor instead.
func (*GoodUserReq) Descriptor() ([]byte, []int) {
	return file_miningpool_middleware_v1_gooduser_gooduser_proto_rawDescGZIP(), []int{0}
}

func (x *GoodUserReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *GoodUserReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *GoodUserReq) GetCoinTypeIDs() []string {
	if x != nil {
		return x.CoinTypeIDs
	}
	return nil
}

func (x *GoodUserReq) GetRootUserID() string {
	if x != nil && x.RootUserID != nil {
		return *x.RootUserID
	}
	return ""
}

func (x *GoodUserReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GoodUserReq) GetReadPageLink() string {
	if x != nil && x.ReadPageLink != nil {
		return *x.ReadPageLink
	}
	return ""
}

type GoodUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"root_user_id"
	RootUserID string `protobuf:"bytes,30,opt,name=RootUserID,proto3" json:"RootUserID,omitempty" sql:"root_user_id"`
	// @inject_tag: sql:"name"
	Name string `protobuf:"bytes,40,opt,name=Name,proto3" json:"Name,omitempty" sql:"name"`
	// @inject_tag: sql:"read_page_link"
	ReadPageLink string `protobuf:"bytes,50,opt,name=ReadPageLink,proto3" json:"ReadPageLink,omitempty" sql:"read_page_link"`
	// @inject_tag: sql:"pool_id"
	PoolID string `protobuf:"bytes,70,opt,name=PoolID,proto3" json:"PoolID,omitempty" sql:"pool_id"`
	// @inject_tag: sql:"mining_pool_type"
	MiningPoolTypeStr string            `protobuf:"bytes,80,opt,name=MiningPoolTypeStr,proto3" json:"MiningPoolTypeStr,omitempty" sql:"mining_pool_type"`
	MiningPoolType    v1.MiningPoolType `protobuf:"varint,81,opt,name=MiningPoolType,proto3,enum=basetypes.miningpool.v1.MiningPoolType" json:"MiningPoolType,omitempty"`
	// @inject_tag: sql:"mining_pool_name"
	MiningPoolName string `protobuf:"bytes,90,opt,name=MiningPoolName,proto3" json:"MiningPoolName,omitempty" sql:"mining_pool_name"`
	// @inject_tag: sql:"mining_pool_site"
	MiningPoolSite string `protobuf:"bytes,100,opt,name=MiningPoolSite,proto3" json:"MiningPoolSite,omitempty" sql:"mining_pool_site"`
	// @inject_tag: sql:"mining_pool_logo"
	MiningPoolLogo string `protobuf:"bytes,110,opt,name=MiningPoolLogo,proto3" json:"MiningPoolLogo,omitempty" sql:"mining_pool_logo"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,130,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,140,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *GoodUser) Reset() {
	*x = GoodUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_miningpool_middleware_v1_gooduser_gooduser_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodUser) ProtoMessage() {}

func (x *GoodUser) ProtoReflect() protoreflect.Message {
	mi := &file_miningpool_middleware_v1_gooduser_gooduser_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodUser.ProtoReflect.Descriptor instead.
func (*GoodUser) Descriptor() ([]byte, []int) {
	return file_miningpool_middleware_v1_gooduser_gooduser_proto_rawDescGZIP(), []int{1}
}

func (x *GoodUser) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *GoodUser) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *GoodUser) GetRootUserID() string {
	if x != nil {
		return x.RootUserID
	}
	return ""
}

func (x *GoodUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoodUser) GetReadPageLink() string {
	if x != nil {
		return x.ReadPageLink
	}
	return ""
}

func (x *GoodUser) GetPoolID() string {
	if x != nil {
		return x.PoolID
	}
	return ""
}

func (x *GoodUser) GetMiningPoolTypeStr() string {
	if x != nil {
		return x.MiningPoolTypeStr
	}
	return ""
}

func (x *GoodUser) GetMiningPoolType() v1.MiningPoolType {
	if x != nil {
		return x.MiningPoolType
	}
	return v1.MiningPoolType(0)
}

func (x *GoodUser) GetMiningPoolName() string {
	if x != nil {
		return x.MiningPoolName
	}
	return ""
}

func (x *GoodUser) GetMiningPoolSite() string {
	if x != nil {
		return x.MiningPoolSite
	}
	return ""
}

func (x *GoodUser) GetMiningPoolLogo() string {
	if x != nil {
		return x.MiningPoolLogo
	}
	return ""
}

func (x *GoodUser) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GoodUser) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         *v11.Uint32Val      `protobuf:"bytes,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID      *v11.StringVal      `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	Name       *v11.StringVal      `protobuf:"bytes,20,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	RootUserID *v11.StringVal      `protobuf:"bytes,30,opt,name=RootUserID,proto3,oneof" json:"RootUserID,omitempty"`
	EntIDs     *v11.StringSliceVal `protobuf:"bytes,40,opt,name=EntIDs,proto3,oneof" json:"EntIDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_miningpool_middleware_v1_gooduser_gooduser_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_miningpool_middleware_v1_gooduser_gooduser_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_miningpool_middleware_v1_gooduser_gooduser_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *v11.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetEntID() *v11.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetName() *v11.StringVal {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Conds) GetRootUserID() *v11.StringVal {
	if x != nil {
		return x.RootUserID
	}
	return nil
}

func (x *Conds) GetEntIDs() *v11.StringSliceVal {
	if x != nil {
		return x.EntIDs
	}
	return nil
}

var File_miningpool_middleware_v1_gooduser_gooduser_proto protoreflect.FileDescriptor

var file_miningpool_middleware_v1_gooduser_gooduser_proto_rawDesc = []byte{
	0x0a, 0x30, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x21, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x18, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x23, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x02, 0x0a, 0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x52, 0x6f, 0x6f, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x52, 0x6f,
	0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x67, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x52, 0x65,
	0x61, 0x64, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x52, 0x6f, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x50,
	0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0xd5, 0x03, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x6f,
	0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x52, 0x6f, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x4f, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x53,
	0x69, 0x74, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x6f, 0x67,
	0x6f, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x82,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x8c, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0xc8, 0x02, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48,
	0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x48, 0x02, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a,
	0x0a, 0x52, 0x6f, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x0a, 0x52, 0x6f,
	0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x06, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x52, 0x6f, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x42, 0x4b, 0x5a, 0x49, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6b, 0x75, 0x6e, 0x6d, 0x61, 0x6e, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c,
	0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x6f, 0x6f, 0x64, 0x75, 0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_miningpool_middleware_v1_gooduser_gooduser_proto_rawDescOnce sync.Once
	file_miningpool_middleware_v1_gooduser_gooduser_proto_rawDescData = file_miningpool_middleware_v1_gooduser_gooduser_proto_rawDesc
)

func file_miningpool_middleware_v1_gooduser_gooduser_proto_rawDescGZIP() []byte {
	file_miningpool_middleware_v1_gooduser_gooduser_proto_rawDescOnce.Do(func() {
		file_miningpool_middleware_v1_gooduser_gooduser_proto_rawDescData = protoimpl.X.CompressGZIP(file_miningpool_middleware_v1_gooduser_gooduser_proto_rawDescData)
	})
	return file_miningpool_middleware_v1_gooduser_gooduser_proto_rawDescData
}

var file_miningpool_middleware_v1_gooduser_gooduser_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_miningpool_middleware_v1_gooduser_gooduser_proto_goTypes = []interface{}{
	(*GoodUserReq)(nil),        // 0: miningpool.middleware.gooduser.v1.GoodUserReq
	(*GoodUser)(nil),           // 1: miningpool.middleware.gooduser.v1.GoodUser
	(*Conds)(nil),              // 2: miningpool.middleware.gooduser.v1.Conds
	(v1.MiningPoolType)(0),     // 3: basetypes.miningpool.v1.MiningPoolType
	(*v11.Uint32Val)(nil),      // 4: basetypes.v1.Uint32Val
	(*v11.StringVal)(nil),      // 5: basetypes.v1.StringVal
	(*v11.StringSliceVal)(nil), // 6: basetypes.v1.StringSliceVal
}
var file_miningpool_middleware_v1_gooduser_gooduser_proto_depIdxs = []int32{
	3, // 0: miningpool.middleware.gooduser.v1.GoodUser.MiningPoolType:type_name -> basetypes.miningpool.v1.MiningPoolType
	4, // 1: miningpool.middleware.gooduser.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	5, // 2: miningpool.middleware.gooduser.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	5, // 3: miningpool.middleware.gooduser.v1.Conds.Name:type_name -> basetypes.v1.StringVal
	5, // 4: miningpool.middleware.gooduser.v1.Conds.RootUserID:type_name -> basetypes.v1.StringVal
	6, // 5: miningpool.middleware.gooduser.v1.Conds.EntIDs:type_name -> basetypes.v1.StringSliceVal
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_miningpool_middleware_v1_gooduser_gooduser_proto_init() }
func file_miningpool_middleware_v1_gooduser_gooduser_proto_init() {
	if File_miningpool_middleware_v1_gooduser_gooduser_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_miningpool_middleware_v1_gooduser_gooduser_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_miningpool_middleware_v1_gooduser_gooduser_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_miningpool_middleware_v1_gooduser_gooduser_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_miningpool_middleware_v1_gooduser_gooduser_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_miningpool_middleware_v1_gooduser_gooduser_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_miningpool_middleware_v1_gooduser_gooduser_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_miningpool_middleware_v1_gooduser_gooduser_proto_goTypes,
		DependencyIndexes: file_miningpool_middleware_v1_gooduser_gooduser_proto_depIdxs,
		MessageInfos:      file_miningpool_middleware_v1_gooduser_gooduser_proto_msgTypes,
	}.Build()
	File_miningpool_middleware_v1_gooduser_gooduser_proto = out.File
	file_miningpool_middleware_v1_gooduser_gooduser_proto_rawDesc = nil
	file_miningpool_middleware_v1_gooduser_gooduser_proto_goTypes = nil
	file_miningpool_middleware_v1_gooduser_gooduser_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: notif/middleware/v1/notif/goodbenefit/goodbenefit.proto

package goodbenefit

import (
	v1 "github.com/NpoolPlatform/kunman/message/basetypes/good/v1"
	v11 "github.com/NpoolPlatform/kunman/message/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GoodBenefitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          *uint32      `protobuf:"varint,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID       *string      `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	GoodID      *string      `protobuf:"bytes,20,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	GoodType    *v1.GoodType `protobuf:"varint,30,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType,oneof" json:"GoodType,omitempty"`
	GoodName    *string      `protobuf:"bytes,40,opt,name=GoodName,proto3,oneof" json:"GoodName,omitempty"`
	CoinTypeID  *string      `protobuf:"bytes,50,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	Amount      *string      `protobuf:"bytes,60,opt,name=Amount,proto3,oneof" json:"Amount,omitempty"`
	State       *v11.Result  `protobuf:"varint,70,opt,name=State,proto3,enum=basetypes.v1.Result,oneof" json:"State,omitempty"`
	Message     *string      `protobuf:"bytes,80,opt,name=Message,proto3,oneof" json:"Message,omitempty"`
	BenefitDate *uint32      `protobuf:"varint,90,opt,name=BenefitDate,proto3,oneof" json:"BenefitDate,omitempty"`
	TxID        *string      `protobuf:"bytes,100,opt,name=TxID,proto3,oneof" json:"TxID,omitempty"`
	Generated   *bool        `protobuf:"varint,110,opt,name=Generated,proto3,oneof" json:"Generated,omitempty"`
}

func (x *GoodBenefitReq) Reset() {
	*x = GoodBenefitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodBenefitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodBenefitReq) ProtoMessage() {}

func (x *GoodBenefitReq) ProtoReflect() protoreflect.Message {
	mi := &file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodBenefitReq.ProtoReflect.Descriptor instead.
func (*GoodBenefitReq) Descriptor() ([]byte, []int) {
	return file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_rawDescGZIP(), []int{0}
}

func (x *GoodBenefitReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *GoodBenefitReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *GoodBenefitReq) GetGoodID() string {
	if x != nil && x.GoodID != nil {
		return *x.GoodID
	}
	return ""
}

func (x *GoodBenefitReq) GetGoodType() v1.GoodType {
	if x != nil && x.GoodType != nil {
		return *x.GoodType
	}
	return v1.GoodType(0)
}

func (x *GoodBenefitReq) GetGoodName() string {
	if x != nil && x.GoodName != nil {
		return *x.GoodName
	}
	return ""
}

func (x *GoodBenefitReq) GetCoinTypeID() string {
	if x != nil && x.CoinTypeID != nil {
		return *x.CoinTypeID
	}
	return ""
}

func (x *GoodBenefitReq) GetAmount() string {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return ""
}

func (x *GoodBenefitReq) GetState() v11.Result {
	if x != nil && x.State != nil {
		return *x.State
	}
	return v11.Result(0)
}

func (x *GoodBenefitReq) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GoodBenefitReq) GetBenefitDate() uint32 {
	if x != nil && x.BenefitDate != nil {
		return *x.BenefitDate
	}
	return 0
}

func (x *GoodBenefitReq) GetTxID() string {
	if x != nil && x.TxID != nil {
		return *x.TxID
	}
	return ""
}

func (x *GoodBenefitReq) GetGenerated() bool {
	if x != nil && x.Generated != nil {
		return *x.Generated
	}
	return false
}

type GoodBenefit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"good_id"
	GoodID string `protobuf:"bytes,30,opt,name=GoodID,proto3" json:"GoodID,omitempty" sql:"good_id"`
	// @inject_tag: sql:"good_type"
	GoodTypeStr string      `protobuf:"bytes,40,opt,name=GoodTypeStr,proto3" json:"GoodTypeStr,omitempty" sql:"good_type"`
	GoodType    v1.GoodType `protobuf:"varint,50,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType" json:"GoodType,omitempty"`
	// @inject_tag: sql:"good_name"
	GoodName string `protobuf:"bytes,60,opt,name=GoodName,proto3" json:"GoodName,omitempty" sql:"good_name"`
	// @inject_tag: sql:"coin_type_id"
	CoinTypeID string `protobuf:"bytes,70,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty" sql:"coin_type_id"`
	// @inject_tag: sql:"amount"
	Amount string `protobuf:"bytes,80,opt,name=Amount,proto3" json:"Amount,omitempty" sql:"amount"`
	// @inject_tag: sql:"state"
	StateStr string     `protobuf:"bytes,90,opt,name=StateStr,proto3" json:"StateStr,omitempty" sql:"state"`
	State    v11.Result `protobuf:"varint,100,opt,name=State,proto3,enum=basetypes.v1.Result" json:"State,omitempty"`
	// @inject_tag: sql:"message"
	Message string `protobuf:"bytes,110,opt,name=Message,proto3" json:"Message,omitempty" sql:"message"`
	// @inject_tag: sql:"benefit_date"
	BenefitDate uint32 `protobuf:"varint,120,opt,name=BenefitDate,proto3" json:"BenefitDate,omitempty" sql:"benefit_date"`
	// @inject_tag: sql:"tx_id"
	TxID string `protobuf:"bytes,130,opt,name=TxID,proto3" json:"TxID,omitempty" sql:"tx_id"`
	// @inject_tag: sql:"generated"
	Generated bool `protobuf:"varint,140,opt,name=Generated,proto3" json:"Generated,omitempty" sql:"generated"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *GoodBenefit) Reset() {
	*x = GoodBenefit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodBenefit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodBenefit) ProtoMessage() {}

func (x *GoodBenefit) ProtoReflect() protoreflect.Message {
	mi := &file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodBenefit.ProtoReflect.Descriptor instead.
func (*GoodBenefit) Descriptor() ([]byte, []int) {
	return file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_rawDescGZIP(), []int{1}
}

func (x *GoodBenefit) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *GoodBenefit) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *GoodBenefit) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *GoodBenefit) GetGoodTypeStr() string {
	if x != nil {
		return x.GoodTypeStr
	}
	return ""
}

func (x *GoodBenefit) GetGoodType() v1.GoodType {
	if x != nil {
		return x.GoodType
	}
	return v1.GoodType(0)
}

func (x *GoodBenefit) GetGoodName() string {
	if x != nil {
		return x.GoodName
	}
	return ""
}

func (x *GoodBenefit) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *GoodBenefit) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *GoodBenefit) GetStateStr() string {
	if x != nil {
		return x.StateStr
	}
	return ""
}

func (x *GoodBenefit) GetState() v11.Result {
	if x != nil {
		return x.State
	}
	return v11.Result(0)
}

func (x *GoodBenefit) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GoodBenefit) GetBenefitDate() uint32 {
	if x != nil {
		return x.BenefitDate
	}
	return 0
}

func (x *GoodBenefit) GetTxID() string {
	if x != nil {
		return x.TxID
	}
	return ""
}

func (x *GoodBenefit) GetGenerated() bool {
	if x != nil {
		return x.Generated
	}
	return false
}

func (x *GoodBenefit) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GoodBenefit) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               *v11.Uint32Val      `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID            *v11.StringVal      `protobuf:"bytes,20,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	GoodID           *v11.StringVal      `protobuf:"bytes,30,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	GoodType         *v11.Uint32Val      `protobuf:"bytes,40,opt,name=GoodType,proto3,oneof" json:"GoodType,omitempty"`
	GoodTypes        *v11.Uint32SliceVal `protobuf:"bytes,50,opt,name=GoodTypes,proto3,oneof" json:"GoodTypes,omitempty"`
	Generated        *v11.BoolVal        `protobuf:"bytes,60,opt,name=Generated,proto3,oneof" json:"Generated,omitempty"`
	BenefitDateStart *v11.Uint32Val      `protobuf:"bytes,70,opt,name=BenefitDateStart,proto3,oneof" json:"BenefitDateStart,omitempty"`
	BenefitDateEnd   *v11.Uint32Val      `protobuf:"bytes,80,opt,name=BenefitDateEnd,proto3,oneof" json:"BenefitDateEnd,omitempty"`
	CoinTypeID       *v11.StringVal      `protobuf:"bytes,90,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *v11.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetEntID() *v11.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetGoodID() *v11.StringVal {
	if x != nil {
		return x.GoodID
	}
	return nil
}

func (x *Conds) GetGoodType() *v11.Uint32Val {
	if x != nil {
		return x.GoodType
	}
	return nil
}

func (x *Conds) GetGoodTypes() *v11.Uint32SliceVal {
	if x != nil {
		return x.GoodTypes
	}
	return nil
}

func (x *Conds) GetGenerated() *v11.BoolVal {
	if x != nil {
		return x.Generated
	}
	return nil
}

func (x *Conds) GetBenefitDateStart() *v11.Uint32Val {
	if x != nil {
		return x.BenefitDateStart
	}
	return nil
}

func (x *Conds) GetBenefitDateEnd() *v11.Uint32Val {
	if x != nil {
		return x.BenefitDateEnd
	}
	return nil
}

func (x *Conds) GetCoinTypeID() *v11.StringVal {
	if x != nil {
		return x.CoinTypeID
	}
	return nil
}

var File_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto protoreflect.FileDescriptor

var file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_rawDesc = []byte{
	0x0a, 0x37, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2f, 0x67, 0x6f, 0x6f, 0x64,
	0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x1a, 0x18, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x04, 0x0a, 0x0e, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x46,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x07, 0x52, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x0b, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x54, 0x78, 0x49, 0x44, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x04, 0x54, 0x78,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x09, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x54, 0x78, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x22, 0xf0, 0x03, 0x0a, 0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x74, 0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x37, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0x5a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x12, 0x2a,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x44, 0x18, 0x82,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x78, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x09, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x9e, 0x05, 0x0a, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52,
	0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x08, 0x47, 0x6f,
	0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x48,
	0x05, 0x52, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x48, 0x0a, 0x10, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x48, 0x06, 0x52, 0x10, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0e, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x50, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x07, 0x52, 0x0e, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x3c, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x5a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x08, 0x52, 0x0a,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x47, 0x6f,
	0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x4f, 0x5a, 0x4d, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6b, 0x75, 0x6e, 0x6d, 0x61, 0x6e, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2f, 0x67,
	0x6f, 0x6f, 0x64, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_rawDescOnce sync.Once
	file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_rawDescData = file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_rawDesc
)

func file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_rawDescGZIP() []byte {
	file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_rawDescOnce.Do(func() {
		file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_rawDescData = protoimpl.X.CompressGZIP(file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_rawDescData)
	})
	return file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_rawDescData
}

var file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_goTypes = []interface{}{
	(*GoodBenefitReq)(nil),     // 0: notif.middleware.notif.goodbenefit.v1.GoodBenefitReq
	(*GoodBenefit)(nil),        // 1: notif.middleware.notif.goodbenefit.v1.GoodBenefit
	(*Conds)(nil),              // 2: notif.middleware.notif.goodbenefit.v1.Conds
	(v1.GoodType)(0),           // 3: basetypes.good.v1.GoodType
	(v11.Result)(0),            // 4: basetypes.v1.Result
	(*v11.Uint32Val)(nil),      // 5: basetypes.v1.Uint32Val
	(*v11.StringVal)(nil),      // 6: basetypes.v1.StringVal
	(*v11.Uint32SliceVal)(nil), // 7: basetypes.v1.Uint32SliceVal
	(*v11.BoolVal)(nil),        // 8: basetypes.v1.BoolVal
}
var file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_depIdxs = []int32{
	3,  // 0: notif.middleware.notif.goodbenefit.v1.GoodBenefitReq.GoodType:type_name -> basetypes.good.v1.GoodType
	4,  // 1: notif.middleware.notif.goodbenefit.v1.GoodBenefitReq.State:type_name -> basetypes.v1.Result
	3,  // 2: notif.middleware.notif.goodbenefit.v1.GoodBenefit.GoodType:type_name -> basetypes.good.v1.GoodType
	4,  // 3: notif.middleware.notif.goodbenefit.v1.GoodBenefit.State:type_name -> basetypes.v1.Result
	5,  // 4: notif.middleware.notif.goodbenefit.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	6,  // 5: notif.middleware.notif.goodbenefit.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	6,  // 6: notif.middleware.notif.goodbenefit.v1.Conds.GoodID:type_name -> basetypes.v1.StringVal
	5,  // 7: notif.middleware.notif.goodbenefit.v1.Conds.GoodType:type_name -> basetypes.v1.Uint32Val
	7,  // 8: notif.middleware.notif.goodbenefit.v1.Conds.GoodTypes:type_name -> basetypes.v1.Uint32SliceVal
	8,  // 9: notif.middleware.notif.goodbenefit.v1.Conds.Generated:type_name -> basetypes.v1.BoolVal
	5,  // 10: notif.middleware.notif.goodbenefit.v1.Conds.BenefitDateStart:type_name -> basetypes.v1.Uint32Val
	5,  // 11: notif.middleware.notif.goodbenefit.v1.Conds.BenefitDateEnd:type_name -> basetypes.v1.Uint32Val
	6,  // 12: notif.middleware.notif.goodbenefit.v1.Conds.CoinTypeID:type_name -> basetypes.v1.StringVal
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_init() }
func file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_init() {
	if File_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodBenefitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodBenefit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_goTypes,
		DependencyIndexes: file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_depIdxs,
		MessageInfos:      file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_msgTypes,
	}.Build()
	File_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto = out.File
	file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_rawDesc = nil
	file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_goTypes = nil
	file_notif_middleware_v1_notif_goodbenefit_goodbenefit_proto_depIdxs = nil
}

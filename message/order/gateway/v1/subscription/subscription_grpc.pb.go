// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: order/gateway/v1/subscription/subscription.proto

package subscription

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_CreateSubscriptionOrder_FullMethodName      = "/order.gateway.subscription.v1.Gateway/CreateSubscriptionOrder"
	Gateway_CreateUserSubscriptionOrder_FullMethodName  = "/order.gateway.subscription.v1.Gateway/CreateUserSubscriptionOrder"
	Gateway_UpdateSubscriptionOrder_FullMethodName      = "/order.gateway.subscription.v1.Gateway/UpdateSubscriptionOrder"
	Gateway_UpdateUserSubscriptionOrder_FullMethodName  = "/order.gateway.subscription.v1.Gateway/UpdateUserSubscriptionOrder"
	Gateway_GetSubscriptionOrder_FullMethodName         = "/order.gateway.subscription.v1.Gateway/GetSubscriptionOrder"
	Gateway_GetSubscriptionOrders_FullMethodName        = "/order.gateway.subscription.v1.Gateway/GetSubscriptionOrders"
	Gateway_GetMySubscriptionOrders_FullMethodName      = "/order.gateway.subscription.v1.Gateway/GetMySubscriptionOrders"
	Gateway_AdminCreateSubscriptionOrder_FullMethodName = "/order.gateway.subscription.v1.Gateway/AdminCreateSubscriptionOrder"
	Gateway_AdminUpdateSubscriptionOrder_FullMethodName = "/order.gateway.subscription.v1.Gateway/AdminUpdateSubscriptionOrder"
	Gateway_AdminGetSubscriptionOrders_FullMethodName   = "/order.gateway.subscription.v1.Gateway/AdminGetSubscriptionOrders"
	Gateway_AdminDeleteSubscriptionOrder_FullMethodName = "/order.gateway.subscription.v1.Gateway/AdminDeleteSubscriptionOrder"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateSubscriptionOrder(ctx context.Context, in *CreateSubscriptionOrderRequest, opts ...grpc.CallOption) (*CreateSubscriptionOrderResponse, error)
	CreateUserSubscriptionOrder(ctx context.Context, in *CreateUserSubscriptionOrderRequest, opts ...grpc.CallOption) (*CreateUserSubscriptionOrderResponse, error)
	UpdateSubscriptionOrder(ctx context.Context, in *UpdateSubscriptionOrderRequest, opts ...grpc.CallOption) (*UpdateSubscriptionOrderResponse, error)
	UpdateUserSubscriptionOrder(ctx context.Context, in *UpdateUserSubscriptionOrderRequest, opts ...grpc.CallOption) (*UpdateUserSubscriptionOrderResponse, error)
	GetSubscriptionOrder(ctx context.Context, in *GetSubscriptionOrderRequest, opts ...grpc.CallOption) (*GetSubscriptionOrderResponse, error)
	GetSubscriptionOrders(ctx context.Context, in *GetSubscriptionOrdersRequest, opts ...grpc.CallOption) (*GetSubscriptionOrdersResponse, error)
	GetMySubscriptionOrders(ctx context.Context, in *GetMySubscriptionOrdersRequest, opts ...grpc.CallOption) (*GetMySubscriptionOrdersResponse, error)
	// Admin apis
	AdminCreateSubscriptionOrder(ctx context.Context, in *AdminCreateSubscriptionOrderRequest, opts ...grpc.CallOption) (*AdminCreateSubscriptionOrderResponse, error)
	AdminUpdateSubscriptionOrder(ctx context.Context, in *AdminUpdateSubscriptionOrderRequest, opts ...grpc.CallOption) (*AdminUpdateSubscriptionOrderResponse, error)
	AdminGetSubscriptionOrders(ctx context.Context, in *AdminGetSubscriptionOrdersRequest, opts ...grpc.CallOption) (*AdminGetSubscriptionOrdersResponse, error)
	AdminDeleteSubscriptionOrder(ctx context.Context, in *AdminDeleteSubscriptionOrderRequest, opts ...grpc.CallOption) (*AdminDeleteSubscriptionOrderResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateSubscriptionOrder(ctx context.Context, in *CreateSubscriptionOrderRequest, opts ...grpc.CallOption) (*CreateSubscriptionOrderResponse, error) {
	out := new(CreateSubscriptionOrderResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateSubscriptionOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateUserSubscriptionOrder(ctx context.Context, in *CreateUserSubscriptionOrderRequest, opts ...grpc.CallOption) (*CreateUserSubscriptionOrderResponse, error) {
	out := new(CreateUserSubscriptionOrderResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateUserSubscriptionOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateSubscriptionOrder(ctx context.Context, in *UpdateSubscriptionOrderRequest, opts ...grpc.CallOption) (*UpdateSubscriptionOrderResponse, error) {
	out := new(UpdateSubscriptionOrderResponse)
	err := c.cc.Invoke(ctx, Gateway_UpdateSubscriptionOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateUserSubscriptionOrder(ctx context.Context, in *UpdateUserSubscriptionOrderRequest, opts ...grpc.CallOption) (*UpdateUserSubscriptionOrderResponse, error) {
	out := new(UpdateUserSubscriptionOrderResponse)
	err := c.cc.Invoke(ctx, Gateway_UpdateUserSubscriptionOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetSubscriptionOrder(ctx context.Context, in *GetSubscriptionOrderRequest, opts ...grpc.CallOption) (*GetSubscriptionOrderResponse, error) {
	out := new(GetSubscriptionOrderResponse)
	err := c.cc.Invoke(ctx, Gateway_GetSubscriptionOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetSubscriptionOrders(ctx context.Context, in *GetSubscriptionOrdersRequest, opts ...grpc.CallOption) (*GetSubscriptionOrdersResponse, error) {
	out := new(GetSubscriptionOrdersResponse)
	err := c.cc.Invoke(ctx, Gateway_GetSubscriptionOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetMySubscriptionOrders(ctx context.Context, in *GetMySubscriptionOrdersRequest, opts ...grpc.CallOption) (*GetMySubscriptionOrdersResponse, error) {
	out := new(GetMySubscriptionOrdersResponse)
	err := c.cc.Invoke(ctx, Gateway_GetMySubscriptionOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminCreateSubscriptionOrder(ctx context.Context, in *AdminCreateSubscriptionOrderRequest, opts ...grpc.CallOption) (*AdminCreateSubscriptionOrderResponse, error) {
	out := new(AdminCreateSubscriptionOrderResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminCreateSubscriptionOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminUpdateSubscriptionOrder(ctx context.Context, in *AdminUpdateSubscriptionOrderRequest, opts ...grpc.CallOption) (*AdminUpdateSubscriptionOrderResponse, error) {
	out := new(AdminUpdateSubscriptionOrderResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminUpdateSubscriptionOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminGetSubscriptionOrders(ctx context.Context, in *AdminGetSubscriptionOrdersRequest, opts ...grpc.CallOption) (*AdminGetSubscriptionOrdersResponse, error) {
	out := new(AdminGetSubscriptionOrdersResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminGetSubscriptionOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminDeleteSubscriptionOrder(ctx context.Context, in *AdminDeleteSubscriptionOrderRequest, opts ...grpc.CallOption) (*AdminDeleteSubscriptionOrderResponse, error) {
	out := new(AdminDeleteSubscriptionOrderResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminDeleteSubscriptionOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateSubscriptionOrder(context.Context, *CreateSubscriptionOrderRequest) (*CreateSubscriptionOrderResponse, error)
	CreateUserSubscriptionOrder(context.Context, *CreateUserSubscriptionOrderRequest) (*CreateUserSubscriptionOrderResponse, error)
	UpdateSubscriptionOrder(context.Context, *UpdateSubscriptionOrderRequest) (*UpdateSubscriptionOrderResponse, error)
	UpdateUserSubscriptionOrder(context.Context, *UpdateUserSubscriptionOrderRequest) (*UpdateUserSubscriptionOrderResponse, error)
	GetSubscriptionOrder(context.Context, *GetSubscriptionOrderRequest) (*GetSubscriptionOrderResponse, error)
	GetSubscriptionOrders(context.Context, *GetSubscriptionOrdersRequest) (*GetSubscriptionOrdersResponse, error)
	GetMySubscriptionOrders(context.Context, *GetMySubscriptionOrdersRequest) (*GetMySubscriptionOrdersResponse, error)
	// Admin apis
	AdminCreateSubscriptionOrder(context.Context, *AdminCreateSubscriptionOrderRequest) (*AdminCreateSubscriptionOrderResponse, error)
	AdminUpdateSubscriptionOrder(context.Context, *AdminUpdateSubscriptionOrderRequest) (*AdminUpdateSubscriptionOrderResponse, error)
	AdminGetSubscriptionOrders(context.Context, *AdminGetSubscriptionOrdersRequest) (*AdminGetSubscriptionOrdersResponse, error)
	AdminDeleteSubscriptionOrder(context.Context, *AdminDeleteSubscriptionOrderRequest) (*AdminDeleteSubscriptionOrderResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct{}

func (UnimplementedGatewayServer) CreateSubscriptionOrder(context.Context, *CreateSubscriptionOrderRequest) (*CreateSubscriptionOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscriptionOrder not implemented")
}

func (UnimplementedGatewayServer) CreateUserSubscriptionOrder(context.Context, *CreateUserSubscriptionOrderRequest) (*CreateUserSubscriptionOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserSubscriptionOrder not implemented")
}

func (UnimplementedGatewayServer) UpdateSubscriptionOrder(context.Context, *UpdateSubscriptionOrderRequest) (*UpdateSubscriptionOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscriptionOrder not implemented")
}

func (UnimplementedGatewayServer) UpdateUserSubscriptionOrder(context.Context, *UpdateUserSubscriptionOrderRequest) (*UpdateUserSubscriptionOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserSubscriptionOrder not implemented")
}

func (UnimplementedGatewayServer) GetSubscriptionOrder(context.Context, *GetSubscriptionOrderRequest) (*GetSubscriptionOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionOrder not implemented")
}

func (UnimplementedGatewayServer) GetSubscriptionOrders(context.Context, *GetSubscriptionOrdersRequest) (*GetSubscriptionOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionOrders not implemented")
}

func (UnimplementedGatewayServer) GetMySubscriptionOrders(context.Context, *GetMySubscriptionOrdersRequest) (*GetMySubscriptionOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMySubscriptionOrders not implemented")
}

func (UnimplementedGatewayServer) AdminCreateSubscriptionOrder(context.Context, *AdminCreateSubscriptionOrderRequest) (*AdminCreateSubscriptionOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateSubscriptionOrder not implemented")
}

func (UnimplementedGatewayServer) AdminUpdateSubscriptionOrder(context.Context, *AdminUpdateSubscriptionOrderRequest) (*AdminUpdateSubscriptionOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateSubscriptionOrder not implemented")
}

func (UnimplementedGatewayServer) AdminGetSubscriptionOrders(context.Context, *AdminGetSubscriptionOrdersRequest) (*AdminGetSubscriptionOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetSubscriptionOrders not implemented")
}

func (UnimplementedGatewayServer) AdminDeleteSubscriptionOrder(context.Context, *AdminDeleteSubscriptionOrderRequest) (*AdminDeleteSubscriptionOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteSubscriptionOrder not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateSubscriptionOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriptionOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateSubscriptionOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateSubscriptionOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateSubscriptionOrder(ctx, req.(*CreateSubscriptionOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateUserSubscriptionOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserSubscriptionOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateUserSubscriptionOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateUserSubscriptionOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateUserSubscriptionOrder(ctx, req.(*CreateUserSubscriptionOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateSubscriptionOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscriptionOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateSubscriptionOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateSubscriptionOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateSubscriptionOrder(ctx, req.(*UpdateSubscriptionOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateUserSubscriptionOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserSubscriptionOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateUserSubscriptionOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateUserSubscriptionOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateUserSubscriptionOrder(ctx, req.(*UpdateUserSubscriptionOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetSubscriptionOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetSubscriptionOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetSubscriptionOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetSubscriptionOrder(ctx, req.(*GetSubscriptionOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetSubscriptionOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetSubscriptionOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetSubscriptionOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetSubscriptionOrders(ctx, req.(*GetSubscriptionOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetMySubscriptionOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMySubscriptionOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetMySubscriptionOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetMySubscriptionOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetMySubscriptionOrders(ctx, req.(*GetMySubscriptionOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminCreateSubscriptionOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateSubscriptionOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCreateSubscriptionOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminCreateSubscriptionOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCreateSubscriptionOrder(ctx, req.(*AdminCreateSubscriptionOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminUpdateSubscriptionOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateSubscriptionOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminUpdateSubscriptionOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminUpdateSubscriptionOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminUpdateSubscriptionOrder(ctx, req.(*AdminUpdateSubscriptionOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminGetSubscriptionOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetSubscriptionOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminGetSubscriptionOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminGetSubscriptionOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminGetSubscriptionOrders(ctx, req.(*AdminGetSubscriptionOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminDeleteSubscriptionOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteSubscriptionOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminDeleteSubscriptionOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminDeleteSubscriptionOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminDeleteSubscriptionOrder(ctx, req.(*AdminDeleteSubscriptionOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.gateway.subscription.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubscriptionOrder",
			Handler:    _Gateway_CreateSubscriptionOrder_Handler,
		},
		{
			MethodName: "CreateUserSubscriptionOrder",
			Handler:    _Gateway_CreateUserSubscriptionOrder_Handler,
		},
		{
			MethodName: "UpdateSubscriptionOrder",
			Handler:    _Gateway_UpdateSubscriptionOrder_Handler,
		},
		{
			MethodName: "UpdateUserSubscriptionOrder",
			Handler:    _Gateway_UpdateUserSubscriptionOrder_Handler,
		},
		{
			MethodName: "GetSubscriptionOrder",
			Handler:    _Gateway_GetSubscriptionOrder_Handler,
		},
		{
			MethodName: "GetSubscriptionOrders",
			Handler:    _Gateway_GetSubscriptionOrders_Handler,
		},
		{
			MethodName: "GetMySubscriptionOrders",
			Handler:    _Gateway_GetMySubscriptionOrders_Handler,
		},
		{
			MethodName: "AdminCreateSubscriptionOrder",
			Handler:    _Gateway_AdminCreateSubscriptionOrder_Handler,
		},
		{
			MethodName: "AdminUpdateSubscriptionOrder",
			Handler:    _Gateway_AdminUpdateSubscriptionOrder_Handler,
		},
		{
			MethodName: "AdminGetSubscriptionOrders",
			Handler:    _Gateway_AdminGetSubscriptionOrders_Handler,
		},
		{
			MethodName: "AdminDeleteSubscriptionOrder",
			Handler:    _Gateway_AdminDeleteSubscriptionOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order/gateway/v1/subscription/subscription.proto",
}

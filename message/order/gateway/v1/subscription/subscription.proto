syntax = "proto3";

package order.gateway.subscription.v1;

option go_package = "github.com/NpoolPlatform/kunman/message/order/gateway/v1/subscription";

import "google/api/annotations.proto";
import "basetypes/order/v1/enums.proto";
import "basetypes/good/v1/enums.proto";
import "order/gateway/v1/order/coupon/coupon.proto";
import "order/gateway/v1/payment/payment.proto";

// Service Name
service Gateway {
    rpc CreateSubscriptionOrder (CreateSubscriptionOrderRequest) returns (CreateSubscriptionOrderResponse) {
        option (google.api.http) = {
            post: "/v1/create/subscriptionorder"
            body: "*"
        };
    }

    rpc CreateUserSubscriptionOrder (CreateUserSubscriptionOrderRequest) returns (CreateUserSubscriptionOrderResponse) {
        option (google.api.http) = {
            post: "/v1/create/user/subscriptionorder"
            body: "*"
        };
    }

    rpc UpdateSubscriptionOrder (UpdateSubscriptionOrderRequest) returns (UpdateSubscriptionOrderResponse) {
        option (google.api.http) = {
            post: "/v1/update/subscriptionorder"
            body: "*"
        };
    }

    rpc UpdateUserSubscriptionOrder (UpdateUserSubscriptionOrderRequest) returns (UpdateUserSubscriptionOrderResponse) {
        option (google.api.http) = {
            post: "/v1/update/user/subscriptionorder"
            body: "*"
        };
    }

    rpc GetSubscriptionOrder (GetSubscriptionOrderRequest) returns (GetSubscriptionOrderResponse) {
        option (google.api.http) = {
            post: "/v1/get/subscriptionorder"
            body: "*"
        };
    }

    rpc GetSubscriptionOrders (GetSubscriptionOrdersRequest) returns (GetSubscriptionOrdersResponse) {
        option (google.api.http) = {
            post: "/v1/get/subscriptionorders"
            body: "*"
        };
    }

    rpc GetMySubscriptionOrders (GetMySubscriptionOrdersRequest) returns (GetMySubscriptionOrdersResponse) {
        option (google.api.http) = {
            post: "/v1/get/my/subscriptionorders"
            body: "*"
        };
    }

    // Admin apis
    rpc AdminCreateSubscriptionOrder (AdminCreateSubscriptionOrderRequest) returns (AdminCreateSubscriptionOrderResponse) {
        option (google.api.http) = {
            post: "/v1/admin/create/subscriptionorder"
            body: "*"
        };
    }

    rpc AdminUpdateSubscriptionOrder (AdminUpdateSubscriptionOrderRequest) returns (AdminUpdateSubscriptionOrderResponse) {
      option (google.api.http) = {
          post: "/v1/admin/update/subscriptionorder"
          body: "*"
      };
    }

    rpc AdminGetSubscriptionOrders (AdminGetSubscriptionOrdersRequest) returns (AdminGetSubscriptionOrdersResponse) {
        option (google.api.http) = {
            post: "/v1/admin/get/subscriptionorders"
            body: "*"
        };
    }

    rpc AdminDeleteSubscriptionOrder (AdminDeleteSubscriptionOrderRequest) returns (AdminDeleteSubscriptionOrderResponse) {
        option (google.api.http) = {
            post: "/v1/admin/delete/subscriptionorder"
            body: "*"
        };
    }
}

message SubscriptionOrder {
    uint32 ID = 10;
    string EntID = 20;
    string AppID = 30;
    string AppName = 40;
    string UserID = 50;
    string EmailAddress = 60;
    string PhoneNO = 70;
    string GoodID = 80;
    basetypes.good.v1.GoodType GoodType = 90;
    string GoodName = 100;
    string AppGoodID = 110;
    string AppGoodName = 120;
    string OrderID = 130;

    basetypes.order.v1.OrderType OrderType = 180;
    basetypes.order.v1.PaymentType PaymentType = 190;
    basetypes.order.v1.OrderCreateMethod CreateMethod = 200;

    basetypes.order.v1.OrderState OrderState = 250;

    string GoodValueUSD = 300;
    string PaymentAmountUSD = 310;
    string DiscountAmountUSD = 320;
    string PromotionID = 330;
    string TopMostTitle = 340;
    string TopMostTargetUrl = 350;
    string PaymentGoodValueUSD = 360;

    basetypes.good.v1.GoodDurationType DurationDisplayType = 400;
    string DurationUnit = 410;
    uint32 LifeSeconds = 420;
    uint32 Durations = 430;
    basetypes.order.v1.OrderState CancelState = 440;
    uint32 CanceledAt = 450;
    uint32 PaidAt = 460;
    bool UserSetPaid = 470;
    bool UserSetCanceled = 480;
    bool AdminSetCanceled = 490;
    basetypes.order.v1.PaymentState PaymentState = 500;

    string LedgerLockID = 510;
    string PaymentID = 520;

    repeated order.gateway.order1.coupon.v1.OrderCouponInfo Coupons = 600;
    repeated order.gateway.payment.v1.PaymentBalanceInfo PaymentBalances = 610;
    repeated order.gateway.payment.v1.PaymentTransferInfo PaymentTransfers = 620;
    repeated order.gateway.payment.v1.PaymentFiatInfo PaymentFiats = 630;

    uint32 CreatedAt = 1000;
    uint32 UpdatedAt = 1010;
}

message CreateSubscriptionOrderRequest {
    string AppID = 10;
    string UserID = 20;
    string AppGoodID = 30;
    repeated order.gateway.payment.v1.PaymentBalance Balances = 40;
    optional string PaymentTransferCoinTypeID = 50;
    optional string PaymentFiatID = 60;
    optional string FiatPaymentRedirectURL = 61;
    optional basetypes.order.v1.FiatPaymentChannel FiatPaymentChannel = 62;
    repeated string CouponIDs = 70;
    optional uint32 LifeSeconds = 80;
}

message CreateSubscriptionOrderResponse {
    SubscriptionOrder Info = 10;
}

message CreateUserSubscriptionOrderRequest {
    string AppID = 10;
    string TargetUserID = 20;
    string AppGoodID = 30;
}

message CreateUserSubscriptionOrderResponse {
    SubscriptionOrder Info = 10;
}

message UpdateSubscriptionOrderRequest {
    uint32 ID = 10;
    string EntID = 20;
    string AppID = 30;
    string UserID = 40;
    string OrderID = 50;
    repeated order.gateway.payment.v1.PaymentBalance Balances = 60;
    optional string PaymentTransferCoinTypeID = 70;
    optional string PaymentFiatID = 80;
    optional bool Paid = 90;
    optional bool Canceled = 100;
}

message UpdateSubscriptionOrderResponse {
    SubscriptionOrder Info = 10;
}

message UpdateUserSubscriptionOrderRequest {
    uint32 ID = 10;
    string EntID = 20;
    string AppID = 30;
    string TargetUserID = 40;
    string OrderID = 50;
    optional bool Canceled = 60;
}

message UpdateUserSubscriptionOrderResponse {
    SubscriptionOrder Info = 10;
}

message GetSubscriptionOrderRequest {
    string AppID = 10;
    string UserID = 20;
    string OrderID = 30;
}

message GetSubscriptionOrderResponse {
    SubscriptionOrder Info = 10;
}

message GetSubscriptionOrdersRequest {
    string AppID = 10;
    optional string TargetUserID = 20;
    optional string AppGoodID = 30;
    int32 Offset = 40;
    int32 Limit = 50;
}

message GetSubscriptionOrdersResponse {
    repeated SubscriptionOrder Infos = 10;
    uint32 Total = 20;
}

message GetMySubscriptionOrdersRequest {
    string AppID = 10;
    string UserID = 20;
    optional string AppGoodID = 30;
    int32 Offset = 40;
    int32 Limit = 50;
}

message GetMySubscriptionOrdersResponse {
    repeated SubscriptionOrder Infos = 10;
    uint32 Total = 20;
}

message AdminCreateSubscriptionOrderRequest {
    string TargetAppID = 10;
    string TargetUserID = 20;
    string AppGoodID = 30;
    uint32 LifeSeconds = 50;
}

message AdminCreateSubscriptionOrderResponse {
    SubscriptionOrder Info = 10;
}

message AdminUpdateSubscriptionOrderRequest {
    uint32 ID = 10;
    string EntID = 20;
    string TargetAppID = 30;
    string TargetUserID = 40;
    string OrderID = 50;
    optional bool Canceled = 60;
}

message AdminUpdateSubscriptionOrderResponse {
    SubscriptionOrder Info = 10;
}

message AdminGetSubscriptionOrdersRequest {
    optional string TargetAppID = 10;
    optional string GoodID = 20;
    int32 Offset = 30;
    int32 Limit = 40;
}

message AdminGetSubscriptionOrdersResponse {
    repeated SubscriptionOrder Infos = 10;
    uint32 Total = 20;
}

message AdminDeleteSubscriptionOrderRequest {
    uint32 ID = 10;
    string EntID = 20;
    string TargetAppID = 30;
    string TargetUserID = 40;
    string OrderID = 50;
}

message AdminDeleteSubscriptionOrderResponse {
    SubscriptionOrder Info = 10;
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: appuser/middleware/v1/kyc/kyc.proto

package kyc

import (
	v1 "github.com/NpoolPlatform/kunman/message/basetypes/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KycReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           *uint32             `protobuf:"varint,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID        *string             `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID        *string             `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	UserID       *string             `protobuf:"bytes,30,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	DocumentType *v1.KycDocumentType `protobuf:"varint,40,opt,name=DocumentType,proto3,enum=basetypes.v1.KycDocumentType,oneof" json:"DocumentType,omitempty"`
	IDNumber     *string             `protobuf:"bytes,50,opt,name=IDNumber,proto3,oneof" json:"IDNumber,omitempty"`
	FrontImg     *string             `protobuf:"bytes,60,opt,name=FrontImg,proto3,oneof" json:"FrontImg,omitempty"`
	BackImg      *string             `protobuf:"bytes,70,opt,name=BackImg,proto3,oneof" json:"BackImg,omitempty"`
	SelfieImg    *string             `protobuf:"bytes,80,opt,name=SelfieImg,proto3,oneof" json:"SelfieImg,omitempty"`
	EntityType   *v1.KycEntityType   `protobuf:"varint,90,opt,name=EntityType,proto3,enum=basetypes.v1.KycEntityType,oneof" json:"EntityType,omitempty"`
	ReviewID     *string             `protobuf:"bytes,100,opt,name=ReviewID,proto3,oneof" json:"ReviewID,omitempty"`
	State        *v1.KycState        `protobuf:"varint,110,opt,name=State,proto3,enum=basetypes.v1.KycState,oneof" json:"State,omitempty"`
}

func (x *KycReq) Reset() {
	*x = KycReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appuser_middleware_v1_kyc_kyc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KycReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KycReq) ProtoMessage() {}

func (x *KycReq) ProtoReflect() protoreflect.Message {
	mi := &file_appuser_middleware_v1_kyc_kyc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KycReq.ProtoReflect.Descriptor instead.
func (*KycReq) Descriptor() ([]byte, []int) {
	return file_appuser_middleware_v1_kyc_kyc_proto_rawDescGZIP(), []int{0}
}

func (x *KycReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *KycReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *KycReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *KycReq) GetUserID() string {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return ""
}

func (x *KycReq) GetDocumentType() v1.KycDocumentType {
	if x != nil && x.DocumentType != nil {
		return *x.DocumentType
	}
	return v1.KycDocumentType(0)
}

func (x *KycReq) GetIDNumber() string {
	if x != nil && x.IDNumber != nil {
		return *x.IDNumber
	}
	return ""
}

func (x *KycReq) GetFrontImg() string {
	if x != nil && x.FrontImg != nil {
		return *x.FrontImg
	}
	return ""
}

func (x *KycReq) GetBackImg() string {
	if x != nil && x.BackImg != nil {
		return *x.BackImg
	}
	return ""
}

func (x *KycReq) GetSelfieImg() string {
	if x != nil && x.SelfieImg != nil {
		return *x.SelfieImg
	}
	return ""
}

func (x *KycReq) GetEntityType() v1.KycEntityType {
	if x != nil && x.EntityType != nil {
		return *x.EntityType
	}
	return v1.KycEntityType(0)
}

func (x *KycReq) GetReviewID() string {
	if x != nil && x.ReviewID != nil {
		return *x.ReviewID
	}
	return ""
}

func (x *KycReq) GetState() v1.KycState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return v1.KycState(0)
}

type Kyc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,9,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"app_id"
	AppID string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty" sql:"app_id"`
	// @inject_tag: sql:"app_name"
	AppName string `protobuf:"bytes,30,opt,name=AppName,proto3" json:"AppName,omitempty" sql:"app_name"`
	// @inject_tag: sql:"app_logo"
	AppLogo string `protobuf:"bytes,40,opt,name=AppLogo,proto3" json:"AppLogo,omitempty" sql:"app_logo"`
	// @inject_tag: sql:"user_id"
	UserID string `protobuf:"bytes,50,opt,name=UserID,proto3" json:"UserID,omitempty" sql:"user_id"`
	// @inject_tag: sql:"email_address"
	EmailAddress string `protobuf:"bytes,60,opt,name=EmailAddress,proto3" json:"EmailAddress,omitempty" sql:"email_address"`
	// @inject_tag: sql:"phone_no"
	PhoneNO string `protobuf:"bytes,70,opt,name=PhoneNO,proto3" json:"PhoneNO,omitempty" sql:"phone_no"`
	// @inject_tag: sql:"document_type"
	DocumentTypeStr string             `protobuf:"bytes,80,opt,name=DocumentTypeStr,proto3" json:"DocumentTypeStr,omitempty" sql:"document_type"`
	DocumentType    v1.KycDocumentType `protobuf:"varint,90,opt,name=DocumentType,proto3,enum=basetypes.v1.KycDocumentType" json:"DocumentType,omitempty"`
	// @inject_tag: sql:"id_number"
	IDNumber string `protobuf:"bytes,100,opt,name=IDNumber,proto3" json:"IDNumber,omitempty" sql:"id_number"`
	// @inject_tag: sql:"front_img"
	FrontImg string `protobuf:"bytes,110,opt,name=FrontImg,proto3" json:"FrontImg,omitempty" sql:"front_img"`
	// @inject_tag: sql:"back_img"
	BackImg string `protobuf:"bytes,120,opt,name=BackImg,proto3" json:"BackImg,omitempty" sql:"back_img"`
	// @inject_tag: sql:"selfie_img"
	SelfieImg string `protobuf:"bytes,130,opt,name=SelfieImg,proto3" json:"SelfieImg,omitempty" sql:"selfie_img"`
	// @inject_tag: sql:"entity_type"
	EntityTypeStr string           `protobuf:"bytes,140,opt,name=EntityTypeStr,proto3" json:"EntityTypeStr,omitempty" sql:"entity_type"`
	EntityType    v1.KycEntityType `protobuf:"varint,150,opt,name=EntityType,proto3,enum=basetypes.v1.KycEntityType" json:"EntityType,omitempty"`
	// @inject_tag: sql:"review_id"
	ReviewID string `protobuf:"bytes,160,opt,name=ReviewID,proto3" json:"ReviewID,omitempty" sql:"review_id"`
	// @inject_tag: sql:"state"
	StateStr      string      `protobuf:"bytes,170,opt,name=StateStr,proto3" json:"StateStr,omitempty" sql:"state"`
	State         v1.KycState `protobuf:"varint,180,opt,name=State,proto3,enum=basetypes.v1.KycState" json:"State,omitempty"`
	ReviewMessage string      `protobuf:"bytes,181,opt,name=ReviewMessage,proto3" json:"ReviewMessage,omitempty"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,190,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,200,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *Kyc) Reset() {
	*x = Kyc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appuser_middleware_v1_kyc_kyc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kyc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kyc) ProtoMessage() {}

func (x *Kyc) ProtoReflect() protoreflect.Message {
	mi := &file_appuser_middleware_v1_kyc_kyc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kyc.ProtoReflect.Descriptor instead.
func (*Kyc) Descriptor() ([]byte, []int) {
	return file_appuser_middleware_v1_kyc_kyc_proto_rawDescGZIP(), []int{1}
}

func (x *Kyc) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Kyc) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *Kyc) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *Kyc) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *Kyc) GetAppLogo() string {
	if x != nil {
		return x.AppLogo
	}
	return ""
}

func (x *Kyc) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Kyc) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *Kyc) GetPhoneNO() string {
	if x != nil {
		return x.PhoneNO
	}
	return ""
}

func (x *Kyc) GetDocumentTypeStr() string {
	if x != nil {
		return x.DocumentTypeStr
	}
	return ""
}

func (x *Kyc) GetDocumentType() v1.KycDocumentType {
	if x != nil {
		return x.DocumentType
	}
	return v1.KycDocumentType(0)
}

func (x *Kyc) GetIDNumber() string {
	if x != nil {
		return x.IDNumber
	}
	return ""
}

func (x *Kyc) GetFrontImg() string {
	if x != nil {
		return x.FrontImg
	}
	return ""
}

func (x *Kyc) GetBackImg() string {
	if x != nil {
		return x.BackImg
	}
	return ""
}

func (x *Kyc) GetSelfieImg() string {
	if x != nil {
		return x.SelfieImg
	}
	return ""
}

func (x *Kyc) GetEntityTypeStr() string {
	if x != nil {
		return x.EntityTypeStr
	}
	return ""
}

func (x *Kyc) GetEntityType() v1.KycEntityType {
	if x != nil {
		return x.EntityType
	}
	return v1.KycEntityType(0)
}

func (x *Kyc) GetReviewID() string {
	if x != nil {
		return x.ReviewID
	}
	return ""
}

func (x *Kyc) GetStateStr() string {
	if x != nil {
		return x.StateStr
	}
	return ""
}

func (x *Kyc) GetState() v1.KycState {
	if x != nil {
		return x.State
	}
	return v1.KycState(0)
}

func (x *Kyc) GetReviewMessage() string {
	if x != nil {
		return x.ReviewMessage
	}
	return ""
}

func (x *Kyc) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Kyc) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           *v1.Uint32Val `protobuf:"bytes,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID        *v1.StringVal `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID        *v1.StringVal `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	UserID       *v1.StringVal `protobuf:"bytes,30,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	ReviewID     *v1.StringVal `protobuf:"bytes,40,opt,name=ReviewID,proto3,oneof" json:"ReviewID,omitempty"`
	IDNumber     *v1.StringVal `protobuf:"bytes,50,opt,name=IDNumber,proto3,oneof" json:"IDNumber,omitempty"`
	DocumentType *v1.Uint32Val `protobuf:"bytes,60,opt,name=DocumentType,proto3,oneof" json:"DocumentType,omitempty"`
	EntityType   *v1.Uint32Val `protobuf:"bytes,70,opt,name=EntityType,proto3,oneof" json:"EntityType,omitempty"`
	State        *v1.Uint32Val `protobuf:"bytes,80,opt,name=State,proto3,oneof" json:"State,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appuser_middleware_v1_kyc_kyc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_appuser_middleware_v1_kyc_kyc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_appuser_middleware_v1_kyc_kyc_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *v1.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetEntID() *v1.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetAppID() *v1.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetUserID() *v1.StringVal {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *Conds) GetReviewID() *v1.StringVal {
	if x != nil {
		return x.ReviewID
	}
	return nil
}

func (x *Conds) GetIDNumber() *v1.StringVal {
	if x != nil {
		return x.IDNumber
	}
	return nil
}

func (x *Conds) GetDocumentType() *v1.Uint32Val {
	if x != nil {
		return x.DocumentType
	}
	return nil
}

func (x *Conds) GetEntityType() *v1.Uint32Val {
	if x != nil {
		return x.EntityType
	}
	return nil
}

func (x *Conds) GetState() *v1.Uint32Val {
	if x != nil {
		return x.State
	}
	return nil
}

var File_appuser_middleware_v1_kyc_kyc_proto protoreflect.FileDescriptor

var file_appuser_middleware_v1_kyc_kyc_proto_rawDesc = []byte{
	0x0a, 0x23, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x79, 0x63, 0x2f, 0x6b, 0x79, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x79, 0x63, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x04, 0x0a, 0x06, 0x4b, 0x79, 0x63, 0x52, 0x65, 0x71,
	0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x79,
	0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x04, 0x52,
	0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x6d, 0x67, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x6d, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x49, 0x6d, 0x67, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x49, 0x6d, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x53, 0x65, 0x6c, 0x66, 0x69, 0x65, 0x49, 0x6d, 0x67, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x53, 0x65, 0x6c, 0x66, 0x69, 0x65, 0x49, 0x6d,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x79, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x48, 0x09, 0x52, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x49, 0x44, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x6e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x79, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x0b,
	0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49,
	0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x6d, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x42, 0x61, 0x63, 0x6b, 0x49, 0x6d, 0x67, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x65, 0x6c, 0x66,
	0x69, 0x65, 0x49, 0x6d, 0x67, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49,
	0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xdc, 0x05, 0x0a, 0x03,
	0x4b, 0x79, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x70, 0x70,
	0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x70, 0x70, 0x4c,
	0x6f, 0x67, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x4f, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x4f, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x74, 0x72, 0x12, 0x41, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x79, 0x63, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x6d, 0x67, 0x18, 0x6e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x6d, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x49, 0x6d, 0x67, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x42, 0x61, 0x63, 0x6b, 0x49, 0x6d, 0x67, 0x12, 0x1d, 0x0a, 0x09, 0x53, 0x65, 0x6c, 0x66,
	0x69, 0x65, 0x49, 0x6d, 0x67, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65,
	0x6c, 0x66, 0x69, 0x65, 0x49, 0x6d, 0x67, 0x12, 0x25, 0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x3c,
	0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x96, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x79, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x08,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x44, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x08, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x12, 0x2d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xb4, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x79, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe5, 0x04, 0x0a, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02,
	0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x38, 0x0a, 0x08, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x08, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x08, 0x49, 0x44,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x05, 0x52, 0x08, 0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x48, 0x06, 0x52, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x48, 0x07, 0x52, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x08, 0x52, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x43, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6b,
	0x75, 0x6e, 0x6d, 0x61, 0x6e, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x61, 0x70,
	0x70, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x79, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_appuser_middleware_v1_kyc_kyc_proto_rawDescOnce sync.Once
	file_appuser_middleware_v1_kyc_kyc_proto_rawDescData = file_appuser_middleware_v1_kyc_kyc_proto_rawDesc
)

func file_appuser_middleware_v1_kyc_kyc_proto_rawDescGZIP() []byte {
	file_appuser_middleware_v1_kyc_kyc_proto_rawDescOnce.Do(func() {
		file_appuser_middleware_v1_kyc_kyc_proto_rawDescData = protoimpl.X.CompressGZIP(file_appuser_middleware_v1_kyc_kyc_proto_rawDescData)
	})
	return file_appuser_middleware_v1_kyc_kyc_proto_rawDescData
}

var file_appuser_middleware_v1_kyc_kyc_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_appuser_middleware_v1_kyc_kyc_proto_goTypes = []interface{}{
	(*KycReq)(nil),          // 0: appuser.middleware.kyc.v1.KycReq
	(*Kyc)(nil),             // 1: appuser.middleware.kyc.v1.Kyc
	(*Conds)(nil),           // 2: appuser.middleware.kyc.v1.Conds
	(v1.KycDocumentType)(0), // 3: basetypes.v1.KycDocumentType
	(v1.KycEntityType)(0),   // 4: basetypes.v1.KycEntityType
	(v1.KycState)(0),        // 5: basetypes.v1.KycState
	(*v1.Uint32Val)(nil),    // 6: basetypes.v1.Uint32Val
	(*v1.StringVal)(nil),    // 7: basetypes.v1.StringVal
}
var file_appuser_middleware_v1_kyc_kyc_proto_depIdxs = []int32{
	3,  // 0: appuser.middleware.kyc.v1.KycReq.DocumentType:type_name -> basetypes.v1.KycDocumentType
	4,  // 1: appuser.middleware.kyc.v1.KycReq.EntityType:type_name -> basetypes.v1.KycEntityType
	5,  // 2: appuser.middleware.kyc.v1.KycReq.State:type_name -> basetypes.v1.KycState
	3,  // 3: appuser.middleware.kyc.v1.Kyc.DocumentType:type_name -> basetypes.v1.KycDocumentType
	4,  // 4: appuser.middleware.kyc.v1.Kyc.EntityType:type_name -> basetypes.v1.KycEntityType
	5,  // 5: appuser.middleware.kyc.v1.Kyc.State:type_name -> basetypes.v1.KycState
	6,  // 6: appuser.middleware.kyc.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	7,  // 7: appuser.middleware.kyc.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	7,  // 8: appuser.middleware.kyc.v1.Conds.AppID:type_name -> basetypes.v1.StringVal
	7,  // 9: appuser.middleware.kyc.v1.Conds.UserID:type_name -> basetypes.v1.StringVal
	7,  // 10: appuser.middleware.kyc.v1.Conds.ReviewID:type_name -> basetypes.v1.StringVal
	7,  // 11: appuser.middleware.kyc.v1.Conds.IDNumber:type_name -> basetypes.v1.StringVal
	6,  // 12: appuser.middleware.kyc.v1.Conds.DocumentType:type_name -> basetypes.v1.Uint32Val
	6,  // 13: appuser.middleware.kyc.v1.Conds.EntityType:type_name -> basetypes.v1.Uint32Val
	6,  // 14: appuser.middleware.kyc.v1.Conds.State:type_name -> basetypes.v1.Uint32Val
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_appuser_middleware_v1_kyc_kyc_proto_init() }
func file_appuser_middleware_v1_kyc_kyc_proto_init() {
	if File_appuser_middleware_v1_kyc_kyc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_appuser_middleware_v1_kyc_kyc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KycReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appuser_middleware_v1_kyc_kyc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kyc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appuser_middleware_v1_kyc_kyc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_appuser_middleware_v1_kyc_kyc_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_appuser_middleware_v1_kyc_kyc_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_appuser_middleware_v1_kyc_kyc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_appuser_middleware_v1_kyc_kyc_proto_goTypes,
		DependencyIndexes: file_appuser_middleware_v1_kyc_kyc_proto_depIdxs,
		MessageInfos:      file_appuser_middleware_v1_kyc_kyc_proto_msgTypes,
	}.Build()
	File_appuser_middleware_v1_kyc_kyc_proto = out.File
	file_appuser_middleware_v1_kyc_kyc_proto_rawDesc = nil
	file_appuser_middleware_v1_kyc_kyc_proto_goTypes = nil
	file_appuser_middleware_v1_kyc_kyc_proto_depIdxs = nil
}

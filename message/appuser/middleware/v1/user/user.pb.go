// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: appuser/middleware/v1/user/user.proto

package user

import (
	v1 "github.com/NpoolPlatform/kunman/message/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base
	ID           *uint32 `protobuf:"varint,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID        *string `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID        *string `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	EmailAddress *string `protobuf:"bytes,30,opt,name=EmailAddress,proto3,oneof" json:"EmailAddress,omitempty"`
	PhoneNO      *string `protobuf:"bytes,40,opt,name=PhoneNO,proto3,oneof" json:"PhoneNO,omitempty"`
	// Imported
	ImportedFromAppID *string `protobuf:"bytes,50,opt,name=ImportedFromAppID,proto3,oneof" json:"ImportedFromAppID,omitempty"`
	// Extra
	Username      *string  `protobuf:"bytes,60,opt,name=Username,proto3,oneof" json:"Username,omitempty"`
	AddressFields []string `protobuf:"bytes,70,rep,name=AddressFields,proto3" json:"AddressFields,omitempty"`
	Gender        *string  `protobuf:"bytes,80,opt,name=Gender,proto3,oneof" json:"Gender,omitempty"`
	PostalCode    *string  `protobuf:"bytes,90,opt,name=PostalCode,proto3,oneof" json:"PostalCode,omitempty"`
	Age           *uint32  `protobuf:"varint,100,opt,name=Age,proto3,oneof" json:"Age,omitempty"`
	Birthday      *uint32  `protobuf:"varint,110,opt,name=Birthday,proto3,oneof" json:"Birthday,omitempty"`
	Avatar        *string  `protobuf:"bytes,120,opt,name=Avatar,proto3,oneof" json:"Avatar,omitempty"`
	Organization  *string  `protobuf:"bytes,130,opt,name=Organization,proto3,oneof" json:"Organization,omitempty"`
	FirstName     *string  `protobuf:"bytes,140,opt,name=FirstName,proto3,oneof" json:"FirstName,omitempty"`
	LastName      *string  `protobuf:"bytes,150,opt,name=LastName,proto3,oneof" json:"LastName,omitempty"`
	IDNumber      *string  `protobuf:"bytes,160,opt,name=IDNumber,proto3,oneof" json:"IDNumber,omitempty"`
	// Control
	SigninVerifyType   *v1.SignMethod `protobuf:"varint,170,opt,name=SigninVerifyType,proto3,enum=basetypes.v1.SignMethod,oneof" json:"SigninVerifyType,omitempty"`
	GoogleAuthVerified *bool          `protobuf:"varint,180,opt,name=GoogleAuthVerified,proto3,oneof" json:"GoogleAuthVerified,omitempty"`
	// Secret
	PasswordHash *string `protobuf:"bytes,190,opt,name=PasswordHash,proto3,oneof" json:"PasswordHash,omitempty"`
	GoogleSecret *string `protobuf:"bytes,200,opt,name=GoogleSecret,proto3,oneof" json:"GoogleSecret,omitempty"`
	// ThirdParty
	ThirdPartyID       *string `protobuf:"bytes,210,opt,name=ThirdPartyID,proto3,oneof" json:"ThirdPartyID,omitempty"`
	ThirdPartyUserID   *string `protobuf:"bytes,220,opt,name=ThirdPartyUserID,proto3,oneof" json:"ThirdPartyUserID,omitempty"`
	ThirdPartyUsername *string `protobuf:"bytes,230,opt,name=ThirdPartyUsername,proto3,oneof" json:"ThirdPartyUsername,omitempty"`
	ThirdPartyAvatar   *string `protobuf:"bytes,240,opt,name=ThirdPartyAvatar,proto3,oneof" json:"ThirdPartyAvatar,omitempty"`
	// Banned
	Banned     *bool   `protobuf:"varint,250,opt,name=Banned,proto3,oneof" json:"Banned,omitempty"`
	BanMessage *string `protobuf:"bytes,260,opt,name=BanMessage,proto3,oneof" json:"BanMessage,omitempty"`
	// RoleUser
	RoleIDs        []string `protobuf:"bytes,270,rep,name=RoleIDs,proto3" json:"RoleIDs,omitempty"`
	Kol            *bool    `protobuf:"varint,280,opt,name=Kol,proto3,oneof" json:"Kol,omitempty"`
	KolConfirmed   *bool    `protobuf:"varint,290,opt,name=KolConfirmed,proto3,oneof" json:"KolConfirmed,omitempty"`
	SelectedLangID *string  `protobuf:"bytes,310,opt,name=SelectedLangID,proto3,oneof" json:"SelectedLangID,omitempty"`
}

func (x *UserReq) Reset() {
	*x = UserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appuser_middleware_v1_user_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReq) ProtoMessage() {}

func (x *UserReq) ProtoReflect() protoreflect.Message {
	mi := &file_appuser_middleware_v1_user_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReq.ProtoReflect.Descriptor instead.
func (*UserReq) Descriptor() ([]byte, []int) {
	return file_appuser_middleware_v1_user_user_proto_rawDescGZIP(), []int{0}
}

func (x *UserReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *UserReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *UserReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *UserReq) GetEmailAddress() string {
	if x != nil && x.EmailAddress != nil {
		return *x.EmailAddress
	}
	return ""
}

func (x *UserReq) GetPhoneNO() string {
	if x != nil && x.PhoneNO != nil {
		return *x.PhoneNO
	}
	return ""
}

func (x *UserReq) GetImportedFromAppID() string {
	if x != nil && x.ImportedFromAppID != nil {
		return *x.ImportedFromAppID
	}
	return ""
}

func (x *UserReq) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *UserReq) GetAddressFields() []string {
	if x != nil {
		return x.AddressFields
	}
	return nil
}

func (x *UserReq) GetGender() string {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return ""
}

func (x *UserReq) GetPostalCode() string {
	if x != nil && x.PostalCode != nil {
		return *x.PostalCode
	}
	return ""
}

func (x *UserReq) GetAge() uint32 {
	if x != nil && x.Age != nil {
		return *x.Age
	}
	return 0
}

func (x *UserReq) GetBirthday() uint32 {
	if x != nil && x.Birthday != nil {
		return *x.Birthday
	}
	return 0
}

func (x *UserReq) GetAvatar() string {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return ""
}

func (x *UserReq) GetOrganization() string {
	if x != nil && x.Organization != nil {
		return *x.Organization
	}
	return ""
}

func (x *UserReq) GetFirstName() string {
	if x != nil && x.FirstName != nil {
		return *x.FirstName
	}
	return ""
}

func (x *UserReq) GetLastName() string {
	if x != nil && x.LastName != nil {
		return *x.LastName
	}
	return ""
}

func (x *UserReq) GetIDNumber() string {
	if x != nil && x.IDNumber != nil {
		return *x.IDNumber
	}
	return ""
}

func (x *UserReq) GetSigninVerifyType() v1.SignMethod {
	if x != nil && x.SigninVerifyType != nil {
		return *x.SigninVerifyType
	}
	return v1.SignMethod(0)
}

func (x *UserReq) GetGoogleAuthVerified() bool {
	if x != nil && x.GoogleAuthVerified != nil {
		return *x.GoogleAuthVerified
	}
	return false
}

func (x *UserReq) GetPasswordHash() string {
	if x != nil && x.PasswordHash != nil {
		return *x.PasswordHash
	}
	return ""
}

func (x *UserReq) GetGoogleSecret() string {
	if x != nil && x.GoogleSecret != nil {
		return *x.GoogleSecret
	}
	return ""
}

func (x *UserReq) GetThirdPartyID() string {
	if x != nil && x.ThirdPartyID != nil {
		return *x.ThirdPartyID
	}
	return ""
}

func (x *UserReq) GetThirdPartyUserID() string {
	if x != nil && x.ThirdPartyUserID != nil {
		return *x.ThirdPartyUserID
	}
	return ""
}

func (x *UserReq) GetThirdPartyUsername() string {
	if x != nil && x.ThirdPartyUsername != nil {
		return *x.ThirdPartyUsername
	}
	return ""
}

func (x *UserReq) GetThirdPartyAvatar() string {
	if x != nil && x.ThirdPartyAvatar != nil {
		return *x.ThirdPartyAvatar
	}
	return ""
}

func (x *UserReq) GetBanned() bool {
	if x != nil && x.Banned != nil {
		return *x.Banned
	}
	return false
}

func (x *UserReq) GetBanMessage() string {
	if x != nil && x.BanMessage != nil {
		return *x.BanMessage
	}
	return ""
}

func (x *UserReq) GetRoleIDs() []string {
	if x != nil {
		return x.RoleIDs
	}
	return nil
}

func (x *UserReq) GetKol() bool {
	if x != nil && x.Kol != nil {
		return *x.Kol
	}
	return false
}

func (x *UserReq) GetKolConfirmed() bool {
	if x != nil && x.KolConfirmed != nil {
		return *x.KolConfirmed
	}
	return false
}

func (x *UserReq) GetSelectedLangID() string {
	if x != nil && x.SelectedLangID != nil {
		return *x.SelectedLangID
	}
	return ""
}

type OAuthThirdParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"third_party_id"
	ThirdPartyID string `protobuf:"bytes,10,opt,name=ThirdPartyID,proto3" json:"ThirdPartyID,omitempty" sql:"third_party_id"`
	// @inject_tag: sql:"third_party_user_id"
	ThirdPartyUserID string `protobuf:"bytes,20,opt,name=ThirdPartyUserID,proto3" json:"ThirdPartyUserID,omitempty" sql:"third_party_user_id"`
	// @inject_tag: sql:"third_party_username"
	ThirdPartyUsername string `protobuf:"bytes,30,opt,name=ThirdPartyUsername,proto3" json:"ThirdPartyUsername,omitempty" sql:"third_party_username"`
	// @inject_tag: sql:"third_party_avatar"
	ThirdPartyAvatar string `protobuf:"bytes,40,opt,name=ThirdPartyAvatar,proto3" json:"ThirdPartyAvatar,omitempty" sql:"third_party_avatar"`
	// @inject_tag: sql:"user_id"
	UserID string `protobuf:"bytes,50,opt,name=UserID,proto3" json:"UserID,omitempty" sql:"user_id"`
}

func (x *OAuthThirdParty) Reset() {
	*x = OAuthThirdParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appuser_middleware_v1_user_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OAuthThirdParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuthThirdParty) ProtoMessage() {}

func (x *OAuthThirdParty) ProtoReflect() protoreflect.Message {
	mi := &file_appuser_middleware_v1_user_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuthThirdParty.ProtoReflect.Descriptor instead.
func (*OAuthThirdParty) Descriptor() ([]byte, []int) {
	return file_appuser_middleware_v1_user_user_proto_rawDescGZIP(), []int{1}
}

func (x *OAuthThirdParty) GetThirdPartyID() string {
	if x != nil {
		return x.ThirdPartyID
	}
	return ""
}

func (x *OAuthThirdParty) GetThirdPartyUserID() string {
	if x != nil {
		return x.ThirdPartyUserID
	}
	return ""
}

func (x *OAuthThirdParty) GetThirdPartyUsername() string {
	if x != nil {
		return x.ThirdPartyUsername
	}
	return ""
}

func (x *OAuthThirdParty) GetThirdPartyAvatar() string {
	if x != nil {
		return x.ThirdPartyAvatar
	}
	return ""
}

func (x *OAuthThirdParty) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base
	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,9,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"app_id"
	AppID string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty" sql:"app_id"`
	// @inject_tag: sql:"email_address"
	EmailAddress string `protobuf:"bytes,30,opt,name=EmailAddress,proto3" json:"EmailAddress,omitempty" sql:"email_address"`
	// @inject_tag: sql:"phone_no"
	PhoneNO string `protobuf:"bytes,40,opt,name=PhoneNO,proto3" json:"PhoneNO,omitempty" sql:"phone_no"`
	// Imported
	// @inject_tag: sql:"import_from_app"
	ImportedFromAppID string `protobuf:"bytes,50,opt,name=ImportedFromAppID,proto3" json:"ImportedFromAppID,omitempty" sql:"import_from_app"`
	// @inject_tag: sql:"imported_from_app_name"
	ImportedFromAppName string `protobuf:"bytes,60,opt,name=ImportedFromAppName,proto3" json:"ImportedFromAppName,omitempty" sql:"imported_from_app_name"`
	// @inject_tag: sql:"imported_from_app_logo"
	ImportedFromAppLogo string `protobuf:"bytes,70,opt,name=ImportedFromAppLogo,proto3" json:"ImportedFromAppLogo,omitempty" sql:"imported_from_app_logo"`
	// @inject_tag: sql:"imported_from_app_home"
	ImportedFromAppHome string `protobuf:"bytes,80,opt,name=ImportedFromAppHome,proto3" json:"ImportedFromAppHome,omitempty" sql:"imported_from_app_home"`
	// Extra
	// @inject_tag: sql:"username"
	Username string `protobuf:"bytes,90,opt,name=Username,proto3" json:"Username,omitempty" sql:"username"`
	// @inject_tag: sql:"address_fields"
	AddressFieldsString string   `protobuf:"bytes,100,opt,name=AddressFieldsString,proto3" json:"AddressFieldsString,omitempty" sql:"address_fields"`
	AddressFields       []string `protobuf:"bytes,110,rep,name=AddressFields,proto3" json:"AddressFields,omitempty"`
	// @inject_tag: sql:"gender"
	Gender string `protobuf:"bytes,120,opt,name=Gender,proto3" json:"Gender,omitempty" sql:"gender"`
	// @inject_tag: sql:"postal_code"
	PostalCode string `protobuf:"bytes,130,opt,name=PostalCode,proto3" json:"PostalCode,omitempty" sql:"postal_code"`
	// @inject_tag: sql:"age"
	Age uint32 `protobuf:"varint,140,opt,name=Age,proto3" json:"Age,omitempty" sql:"age"`
	// @inject_tag: sql:"birthday"
	Birthday uint32 `protobuf:"varint,150,opt,name=Birthday,proto3" json:"Birthday,omitempty" sql:"birthday"`
	// @inject_tag: sql:"avatar"
	Avatar string `protobuf:"bytes,160,opt,name=Avatar,proto3" json:"Avatar,omitempty" sql:"avatar"`
	// @inject_tag: sql:"organization"
	Organization string `protobuf:"bytes,170,opt,name=Organization,proto3" json:"Organization,omitempty" sql:"organization"`
	// @inject_tag: sql:"first_name"
	FirstName string `protobuf:"bytes,180,opt,name=FirstName,proto3" json:"FirstName,omitempty" sql:"first_name"`
	// @inject_tag: sql:"last_name"
	LastName string `protobuf:"bytes,190,opt,name=LastName,proto3" json:"LastName,omitempty" sql:"last_name"`
	// @inject_tag: sql:"id_number"
	IDNumber string `protobuf:"bytes,200,opt,name=IDNumber,proto3" json:"IDNumber,omitempty" sql:"id_number"`
	// Control flag
	// @inject_tag: sql:"signin_verify_type"
	SigninVerifyTypeStr string        `protobuf:"bytes,210,opt,name=SigninVerifyTypeStr,proto3" json:"SigninVerifyTypeStr,omitempty" sql:"signin_verify_type"`
	SigninVerifyType    v1.SignMethod `protobuf:"varint,220,opt,name=SigninVerifyType,proto3,enum=basetypes.v1.SignMethod" json:"SigninVerifyType,omitempty"`
	// @inject_tag: sql:"signin_verify_by_google_authentication"
	SigninVerifyByGoogleAuth bool `protobuf:"varint,222,opt,name=SigninVerifyByGoogleAuth,proto3" json:"SigninVerifyByGoogleAuth,omitempty" sql:"signin_verify_by_google_authentication"`
	// @inject_tag: sql:"google_authentication_verified"
	GoogleAuthVerified bool `protobuf:"varint,240,opt,name=GoogleAuthVerified,proto3" json:"GoogleAuthVerified,omitempty" sql:"google_authentication_verified"`
	// @inject_tag: sql:"ban_app_user_id"
	BanAppUserID string `protobuf:"bytes,250,opt,name=BanAppUserID,proto3" json:"BanAppUserID,omitempty" sql:"ban_app_user_id"`
	Banned       bool   `protobuf:"varint,260,opt,name=Banned,proto3" json:"Banned,omitempty"`
	// @inject_tag: sql:"ban_message"
	BanMessage string `protobuf:"bytes,270,opt,name=BanMessage,proto3" json:"BanMessage,omitempty" sql:"ban_message"`
	// @inject_tag: sql:"ban_deleted_at"
	BanDeletedAt uint32 `protobuf:"varint,271,opt,name=BanDeletedAt,proto3" json:"BanDeletedAt,omitempty" sql:"ban_deleted_at"`
	// Secret map
	// @inject_tag: sql:"google_secret"
	GoogleSecret    string `protobuf:"bytes,280,opt,name=GoogleSecret,proto3" json:"GoogleSecret,omitempty" sql:"google_secret"`
	HasGoogleSecret bool   `protobuf:"varint,290,opt,name=HasGoogleSecret,proto3" json:"HasGoogleSecret,omitempty"`
	GoogleOTPAuth   string `protobuf:"bytes,291,opt,name=GoogleOTPAuth,proto3" json:"GoogleOTPAuth,omitempty"`
	// Role
	Roles []string `protobuf:"bytes,300,rep,name=Roles,proto3" json:"Roles,omitempty"`
	// Login info
	Logined              bool          `protobuf:"varint,310,opt,name=Logined,proto3" json:"Logined,omitempty"`
	LoginAccount         string        `protobuf:"bytes,320,opt,name=LoginAccount,proto3" json:"LoginAccount,omitempty"`
	LoginAccountType     v1.SignMethod `protobuf:"varint,330,opt,name=LoginAccountType,proto3,enum=basetypes.v1.SignMethod" json:"LoginAccountType,omitempty"`
	LoginToken           string        `protobuf:"bytes,340,opt,name=LoginToken,proto3" json:"LoginToken,omitempty"`
	LoginClientIP        string        `protobuf:"bytes,350,opt,name=LoginClientIP,proto3" json:"LoginClientIP,omitempty"`
	LoginClientUserAgent string        `protobuf:"bytes,360,opt,name=LoginClientUserAgent,proto3" json:"LoginClientUserAgent,omitempty"`
	// @inject_tag: sql:"created_at"
	CreatedAt      uint32  `protobuf:"varint,370,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	InvitationCode *string `protobuf:"bytes,380,opt,name=InvitationCode,proto3,oneof" json:"InvitationCode,omitempty"`
	LoginVerified  bool    `protobuf:"varint,390,opt,name=LoginVerified,proto3" json:"LoginVerified,omitempty"`
	// @inject_tag: sql:"kyc_state"
	KycStateStr string      `protobuf:"bytes,400,opt,name=KycStateStr,proto3" json:"KycStateStr,omitempty" sql:"kyc_state"`
	State       v1.KycState `protobuf:"varint,410,opt,name=State,proto3,enum=basetypes.v1.KycState" json:"State,omitempty"`
	// @inject_tag: sql:"kol"
	Kol bool `protobuf:"varint,420,opt,name=Kol,proto3" json:"Kol,omitempty" sql:"kol"`
	// @inject_tag: sql:"kol_confirmed"
	KolConfirmed bool `protobuf:"varint,430,opt,name=KolConfirmed,proto3" json:"KolConfirmed,omitempty" sql:"kol_confirmed"`
	// @inject_tag: sql:"selected_lang_id"
	SelectedLangID *string `protobuf:"bytes,450,opt,name=SelectedLangID,proto3,oneof" json:"SelectedLangID,omitempty" sql:"selected_lang_id"`
	// Third info
	// @inject_tag: sql:"third_party_id"
	ThirdPartyID *string `protobuf:"bytes,460,opt,name=ThirdPartyID,proto3,oneof" json:"ThirdPartyID,omitempty" sql:"third_party_id"`
	// @inject_tag: sql:"third_party_user_id"
	ThirdPartyUserID *string `protobuf:"bytes,470,opt,name=ThirdPartyUserID,proto3,oneof" json:"ThirdPartyUserID,omitempty" sql:"third_party_user_id"`
	// @inject_tag: sql:"third_party_username"
	ThirdPartyUsername *string `protobuf:"bytes,480,opt,name=ThirdPartyUsername,proto3,oneof" json:"ThirdPartyUsername,omitempty" sql:"third_party_username"`
	// @inject_tag: sql:"third_party_avatar"
	ThirdPartyAvatar  *string            `protobuf:"bytes,490,opt,name=ThirdPartyAvatar,proto3,oneof" json:"ThirdPartyAvatar,omitempty" sql:"third_party_avatar"`
	OAuthThirdParties []*OAuthThirdParty `protobuf:"bytes,500,rep,name=OAuthThirdParties,proto3" json:"OAuthThirdParties,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appuser_middleware_v1_user_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_appuser_middleware_v1_user_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_appuser_middleware_v1_user_user_proto_rawDescGZIP(), []int{2}
}

func (x *User) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *User) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *User) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *User) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *User) GetPhoneNO() string {
	if x != nil {
		return x.PhoneNO
	}
	return ""
}

func (x *User) GetImportedFromAppID() string {
	if x != nil {
		return x.ImportedFromAppID
	}
	return ""
}

func (x *User) GetImportedFromAppName() string {
	if x != nil {
		return x.ImportedFromAppName
	}
	return ""
}

func (x *User) GetImportedFromAppLogo() string {
	if x != nil {
		return x.ImportedFromAppLogo
	}
	return ""
}

func (x *User) GetImportedFromAppHome() string {
	if x != nil {
		return x.ImportedFromAppHome
	}
	return ""
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetAddressFieldsString() string {
	if x != nil {
		return x.AddressFieldsString
	}
	return ""
}

func (x *User) GetAddressFields() []string {
	if x != nil {
		return x.AddressFields
	}
	return nil
}

func (x *User) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *User) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *User) GetAge() uint32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *User) GetBirthday() uint32 {
	if x != nil {
		return x.Birthday
	}
	return 0
}

func (x *User) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *User) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *User) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *User) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *User) GetIDNumber() string {
	if x != nil {
		return x.IDNumber
	}
	return ""
}

func (x *User) GetSigninVerifyTypeStr() string {
	if x != nil {
		return x.SigninVerifyTypeStr
	}
	return ""
}

func (x *User) GetSigninVerifyType() v1.SignMethod {
	if x != nil {
		return x.SigninVerifyType
	}
	return v1.SignMethod(0)
}

func (x *User) GetSigninVerifyByGoogleAuth() bool {
	if x != nil {
		return x.SigninVerifyByGoogleAuth
	}
	return false
}

func (x *User) GetGoogleAuthVerified() bool {
	if x != nil {
		return x.GoogleAuthVerified
	}
	return false
}

func (x *User) GetBanAppUserID() string {
	if x != nil {
		return x.BanAppUserID
	}
	return ""
}

func (x *User) GetBanned() bool {
	if x != nil {
		return x.Banned
	}
	return false
}

func (x *User) GetBanMessage() string {
	if x != nil {
		return x.BanMessage
	}
	return ""
}

func (x *User) GetBanDeletedAt() uint32 {
	if x != nil {
		return x.BanDeletedAt
	}
	return 0
}

func (x *User) GetGoogleSecret() string {
	if x != nil {
		return x.GoogleSecret
	}
	return ""
}

func (x *User) GetHasGoogleSecret() bool {
	if x != nil {
		return x.HasGoogleSecret
	}
	return false
}

func (x *User) GetGoogleOTPAuth() string {
	if x != nil {
		return x.GoogleOTPAuth
	}
	return ""
}

func (x *User) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *User) GetLogined() bool {
	if x != nil {
		return x.Logined
	}
	return false
}

func (x *User) GetLoginAccount() string {
	if x != nil {
		return x.LoginAccount
	}
	return ""
}

func (x *User) GetLoginAccountType() v1.SignMethod {
	if x != nil {
		return x.LoginAccountType
	}
	return v1.SignMethod(0)
}

func (x *User) GetLoginToken() string {
	if x != nil {
		return x.LoginToken
	}
	return ""
}

func (x *User) GetLoginClientIP() string {
	if x != nil {
		return x.LoginClientIP
	}
	return ""
}

func (x *User) GetLoginClientUserAgent() string {
	if x != nil {
		return x.LoginClientUserAgent
	}
	return ""
}

func (x *User) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *User) GetInvitationCode() string {
	if x != nil && x.InvitationCode != nil {
		return *x.InvitationCode
	}
	return ""
}

func (x *User) GetLoginVerified() bool {
	if x != nil {
		return x.LoginVerified
	}
	return false
}

func (x *User) GetKycStateStr() string {
	if x != nil {
		return x.KycStateStr
	}
	return ""
}

func (x *User) GetState() v1.KycState {
	if x != nil {
		return x.State
	}
	return v1.KycState(0)
}

func (x *User) GetKol() bool {
	if x != nil {
		return x.Kol
	}
	return false
}

func (x *User) GetKolConfirmed() bool {
	if x != nil {
		return x.KolConfirmed
	}
	return false
}

func (x *User) GetSelectedLangID() string {
	if x != nil && x.SelectedLangID != nil {
		return *x.SelectedLangID
	}
	return ""
}

func (x *User) GetThirdPartyID() string {
	if x != nil && x.ThirdPartyID != nil {
		return *x.ThirdPartyID
	}
	return ""
}

func (x *User) GetThirdPartyUserID() string {
	if x != nil && x.ThirdPartyUserID != nil {
		return *x.ThirdPartyUserID
	}
	return ""
}

func (x *User) GetThirdPartyUsername() string {
	if x != nil && x.ThirdPartyUsername != nil {
		return *x.ThirdPartyUsername
	}
	return ""
}

func (x *User) GetThirdPartyAvatar() string {
	if x != nil && x.ThirdPartyAvatar != nil {
		return *x.ThirdPartyAvatar
	}
	return ""
}

func (x *User) GetOAuthThirdParties() []*OAuthThirdParty {
	if x != nil {
		return x.OAuthThirdParties
	}
	return nil
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               *v1.Uint32Val      `protobuf:"bytes,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID            *v1.StringVal      `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID            *v1.StringVal      `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	PhoneNO          *v1.StringVal      `protobuf:"bytes,30,opt,name=PhoneNO,proto3,oneof" json:"PhoneNO,omitempty"`
	EmailAddress     *v1.StringVal      `protobuf:"bytes,40,opt,name=EmailAddress,proto3,oneof" json:"EmailAddress,omitempty"`
	ImportFromApp    *v1.StringVal      `protobuf:"bytes,50,opt,name=ImportFromApp,proto3,oneof" json:"ImportFromApp,omitempty"`
	EntIDs           *v1.StringSliceVal `protobuf:"bytes,60,opt,name=EntIDs,proto3,oneof" json:"EntIDs,omitempty"`
	ThirdPartyID     *v1.StringVal      `protobuf:"bytes,70,opt,name=ThirdPartyID,proto3,oneof" json:"ThirdPartyID,omitempty"`
	ThirdPartyUserID *v1.StringVal      `protobuf:"bytes,80,opt,name=ThirdPartyUserID,proto3,oneof" json:"ThirdPartyUserID,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appuser_middleware_v1_user_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_appuser_middleware_v1_user_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_appuser_middleware_v1_user_user_proto_rawDescGZIP(), []int{3}
}

func (x *Conds) GetID() *v1.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetEntID() *v1.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetAppID() *v1.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetPhoneNO() *v1.StringVal {
	if x != nil {
		return x.PhoneNO
	}
	return nil
}

func (x *Conds) GetEmailAddress() *v1.StringVal {
	if x != nil {
		return x.EmailAddress
	}
	return nil
}

func (x *Conds) GetImportFromApp() *v1.StringVal {
	if x != nil {
		return x.ImportFromApp
	}
	return nil
}

func (x *Conds) GetEntIDs() *v1.StringSliceVal {
	if x != nil {
		return x.EntIDs
	}
	return nil
}

func (x *Conds) GetThirdPartyID() *v1.StringVal {
	if x != nil {
		return x.ThirdPartyID
	}
	return nil
}

func (x *Conds) GetThirdPartyUserID() *v1.StringVal {
	if x != nil {
		return x.ThirdPartyUserID
	}
	return nil
}

var File_appuser_middleware_v1_user_user_proto protoreflect.FileDescriptor

var file_appuser_middleware_v1_user_user_proto_rawDesc = []byte{
	0x0a, 0x25, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x1a, 0x1d, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x18, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x79, 0x63, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x0c, 0x0a, 0x07, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x4f, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x4f, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x11, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0d,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x46, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x5a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x41, 0x67, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x09, 0x52, 0x03, 0x41, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x42,
	0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a, 0x52,
	0x08, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x06,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0c, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0c, 0x52, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x08, 0x4c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x08, 0x49, 0x44, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x08,
	0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x10, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18,
	0xaa, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x48, 0x10, 0x52, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x12, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0xb4, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x11, 0x52, 0x12, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0xbe, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x48, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0c, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13,
	0x52, 0x0c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0c, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x44, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0c, 0x54, 0x68, 0x69, 0x72,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x10, 0x54,
	0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0xdc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x10, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x12, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x12, 0x54, 0x68,
	0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x10, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17,
	0x52, 0x10, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18,
	0xfa, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x18, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x07, 0x52, 0x6f, 0x6c,
	0x65, 0x49, 0x44, 0x73, 0x18, 0x8e, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x52, 0x6f, 0x6c,
	0x65, 0x49, 0x44, 0x73, 0x12, 0x16, 0x0a, 0x03, 0x4b, 0x6f, 0x6c, 0x18, 0x98, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x1a, 0x52, 0x03, 0x4b, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0c,
	0x4b, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0xa2, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x1b, 0x52, 0x0c, 0x4b, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x49, 0x44, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1c, 0x52, 0x0e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x4f, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x50,
	0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x41, 0x67,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x4c, 0x61, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x44, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x54, 0x68, 0x69, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x42, 0x61, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x4b, 0x6f, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x4b, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x49, 0x44, 0x22, 0xd5, 0x01, 0x0a, 0x0f, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c,
	0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44,
	0x12, 0x2a, 0x0a, 0x10, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x54, 0x68, 0x69, 0x72,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12,
	0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x22, 0xfa, 0x10, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x4f, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x4f, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x12, 0x30, 0x0a, 0x13, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f,
	0x6d, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x70,
	0x70, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x48, 0x6f, 0x6d, 0x65, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d,
	0x41, 0x70, 0x70, 0x48, 0x6f, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x6e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x03, 0x41, 0x67, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x41, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x42, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x79, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x42, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x12, 0x17, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0xa0,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x23, 0x0a,
	0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xaa, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0xb4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xbe, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x08, 0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x13, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x74, 0x72, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x45,
	0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x18, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x42, 0x79, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x18, 0xde, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x42, 0x79, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x12, 0x2f, 0x0a, 0x12, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x41,
	0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x8e, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x8f, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x98, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x0f,
	0x48, 0x61, 0x73, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0xa2, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x48, 0x61, 0x73, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x4f, 0x54, 0x50, 0x41, 0x75, 0x74, 0x68, 0x18, 0xa3, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4f, 0x54, 0x50, 0x41, 0x75, 0x74, 0x68, 0x12, 0x15,
	0x0a, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0xac, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x23, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0xca, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x10, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0a,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0xd4, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a,
	0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x18, 0xde,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x50, 0x12, 0x33, 0x0a, 0x14, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0xe8, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf2, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0xfc, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x86, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x0b, 0x4b, 0x79, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0x90, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4b, 0x79, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72,
	0x12, 0x2d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9a, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x79, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x11, 0x0a, 0x03, 0x4b, 0x6f, 0x6c, 0x18, 0xa4, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x4b,
	0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x0c, 0x4b, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x65, 0x64, 0x18, 0xae, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x4b, 0x6f, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x49, 0x44, 0x18, 0xc2, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0c, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0xcc, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c,
	0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x10, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0xd6, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x10, 0x54, 0x68,
	0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x12, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xe0, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x12, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x10, 0x54, 0x68, 0x69, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0xea, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x10, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x11, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0xf4,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x52, 0x11, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x49, 0x44, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x54, 0x68, 0x69,
	0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x9d, 0x05,
	0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x48, 0x02, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x07, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x4f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x07, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x4f, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0d, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x05, 0x52, 0x0d, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x06, 0x52, 0x06, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0c, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x07, 0x52, 0x0c, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x10, 0x54, 0x68, 0x69, 0x72,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x08, 0x52, 0x10, 0x54,
	0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x4f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x54, 0x68, 0x69, 0x72,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x54, 0x68, 0x69,
	0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x44, 0x5a,
	0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f,
	0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6b, 0x75, 0x6e, 0x6d, 0x61, 0x6e,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72,
	0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_appuser_middleware_v1_user_user_proto_rawDescOnce sync.Once
	file_appuser_middleware_v1_user_user_proto_rawDescData = file_appuser_middleware_v1_user_user_proto_rawDesc
)

func file_appuser_middleware_v1_user_user_proto_rawDescGZIP() []byte {
	file_appuser_middleware_v1_user_user_proto_rawDescOnce.Do(func() {
		file_appuser_middleware_v1_user_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_appuser_middleware_v1_user_user_proto_rawDescData)
	})
	return file_appuser_middleware_v1_user_user_proto_rawDescData
}

var file_appuser_middleware_v1_user_user_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_appuser_middleware_v1_user_user_proto_goTypes = []interface{}{
	(*UserReq)(nil),           // 0: appuser.middleware.user.v1.UserReq
	(*OAuthThirdParty)(nil),   // 1: appuser.middleware.user.v1.OAuthThirdParty
	(*User)(nil),              // 2: appuser.middleware.user.v1.User
	(*Conds)(nil),             // 3: appuser.middleware.user.v1.Conds
	(v1.SignMethod)(0),        // 4: basetypes.v1.SignMethod
	(v1.KycState)(0),          // 5: basetypes.v1.KycState
	(*v1.Uint32Val)(nil),      // 6: basetypes.v1.Uint32Val
	(*v1.StringVal)(nil),      // 7: basetypes.v1.StringVal
	(*v1.StringSliceVal)(nil), // 8: basetypes.v1.StringSliceVal
}
var file_appuser_middleware_v1_user_user_proto_depIdxs = []int32{
	4,  // 0: appuser.middleware.user.v1.UserReq.SigninVerifyType:type_name -> basetypes.v1.SignMethod
	4,  // 1: appuser.middleware.user.v1.User.SigninVerifyType:type_name -> basetypes.v1.SignMethod
	4,  // 2: appuser.middleware.user.v1.User.LoginAccountType:type_name -> basetypes.v1.SignMethod
	5,  // 3: appuser.middleware.user.v1.User.State:type_name -> basetypes.v1.KycState
	1,  // 4: appuser.middleware.user.v1.User.OAuthThirdParties:type_name -> appuser.middleware.user.v1.OAuthThirdParty
	6,  // 5: appuser.middleware.user.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	7,  // 6: appuser.middleware.user.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	7,  // 7: appuser.middleware.user.v1.Conds.AppID:type_name -> basetypes.v1.StringVal
	7,  // 8: appuser.middleware.user.v1.Conds.PhoneNO:type_name -> basetypes.v1.StringVal
	7,  // 9: appuser.middleware.user.v1.Conds.EmailAddress:type_name -> basetypes.v1.StringVal
	7,  // 10: appuser.middleware.user.v1.Conds.ImportFromApp:type_name -> basetypes.v1.StringVal
	8,  // 11: appuser.middleware.user.v1.Conds.EntIDs:type_name -> basetypes.v1.StringSliceVal
	7,  // 12: appuser.middleware.user.v1.Conds.ThirdPartyID:type_name -> basetypes.v1.StringVal
	7,  // 13: appuser.middleware.user.v1.Conds.ThirdPartyUserID:type_name -> basetypes.v1.StringVal
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_appuser_middleware_v1_user_user_proto_init() }
func file_appuser_middleware_v1_user_user_proto_init() {
	if File_appuser_middleware_v1_user_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_appuser_middleware_v1_user_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appuser_middleware_v1_user_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OAuthThirdParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appuser_middleware_v1_user_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appuser_middleware_v1_user_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_appuser_middleware_v1_user_user_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_appuser_middleware_v1_user_user_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_appuser_middleware_v1_user_user_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_appuser_middleware_v1_user_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_appuser_middleware_v1_user_user_proto_goTypes,
		DependencyIndexes: file_appuser_middleware_v1_user_user_proto_depIdxs,
		MessageInfos:      file_appuser_middleware_v1_user_user_proto_msgTypes,
	}.Build()
	File_appuser_middleware_v1_user_user_proto = out.File
	file_appuser_middleware_v1_user_user_proto_rawDesc = nil
	file_appuser_middleware_v1_user_user_proto_goTypes = nil
	file_appuser_middleware_v1_user_user_proto_depIdxs = nil
}

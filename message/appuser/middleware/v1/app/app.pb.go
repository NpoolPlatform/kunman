// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: appuser/middleware/v1/app/app.proto

package app

import (
	v11 "github.com/NpoolPlatform/kunman/message/basetypes/appuser/v1"
	v1 "github.com/NpoolPlatform/kunman/message/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AppReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base info
	ID          *uint32 `protobuf:"varint,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID       *string `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	CreatedBy   *string `protobuf:"bytes,20,opt,name=CreatedBy,proto3,oneof" json:"CreatedBy,omitempty"`
	Name        *string `protobuf:"bytes,30,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	Logo        *string `protobuf:"bytes,40,opt,name=Logo,proto3,oneof" json:"Logo,omitempty"`
	Description *string `protobuf:"bytes,50,opt,name=Description,proto3,oneof" json:"Description,omitempty"`
	// Banned
	Banned     *bool   `protobuf:"varint,60,opt,name=Banned,proto3,oneof" json:"Banned,omitempty"`
	BanMessage *string `protobuf:"bytes,70,opt,name=BanMessage,proto3,oneof" json:"BanMessage,omitempty"`
	// Sign methods
	SignupMethods    []v1.SignMethod `protobuf:"varint,80,rep,packed,name=SignupMethods,proto3,enum=basetypes.v1.SignMethod" json:"SignupMethods,omitempty"`
	ExtSigninMethods []v1.SignMethod `protobuf:"varint,90,rep,packed,name=ExtSigninMethods,proto3,enum=basetypes.v1.SignMethod" json:"ExtSigninMethods,omitempty"`
	// Control flag
	RecaptchaMethod          *v1.RecaptchaMethod          `protobuf:"varint,100,opt,name=RecaptchaMethod,proto3,enum=basetypes.v1.RecaptchaMethod,oneof" json:"RecaptchaMethod,omitempty"`
	KycEnable                *bool                        `protobuf:"varint,110,opt,name=KycEnable,proto3,oneof" json:"KycEnable,omitempty"`
	SigninVerifyEnable       *bool                        `protobuf:"varint,120,opt,name=SigninVerifyEnable,proto3,oneof" json:"SigninVerifyEnable,omitempty"`
	InvitationCodeMust       *bool                        `protobuf:"varint,130,opt,name=InvitationCodeMust,proto3,oneof" json:"InvitationCodeMust,omitempty"`
	CreateInvitationCodeWhen *v1.CreateInvitationCodeWhen `protobuf:"varint,140,opt,name=CreateInvitationCodeWhen,proto3,enum=basetypes.v1.CreateInvitationCodeWhen,oneof" json:"CreateInvitationCodeWhen,omitempty"`
	MaxTypedCouponsPerOrder  *uint32                      `protobuf:"varint,150,opt,name=MaxTypedCouponsPerOrder,proto3,oneof" json:"MaxTypedCouponsPerOrder,omitempty"`
	Maintaining              *bool                        `protobuf:"varint,160,opt,name=Maintaining,proto3,oneof" json:"Maintaining,omitempty"`
	CommitButtonTargets      []string                     `protobuf:"bytes,170,rep,name=CommitButtonTargets,proto3" json:"CommitButtonTargets,omitempty"`
	CouponWithdrawEnable     *bool                        `protobuf:"varint,180,opt,name=CouponWithdrawEnable,proto3,oneof" json:"CouponWithdrawEnable,omitempty"`
	ResetUserMethod          *v11.ResetUserMethod         `protobuf:"varint,200,opt,name=ResetUserMethod,proto3,enum=basetypes.appuser.v1.ResetUserMethod,oneof" json:"ResetUserMethod,omitempty"`
}

func (x *AppReq) Reset() {
	*x = AppReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appuser_middleware_v1_app_app_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppReq) ProtoMessage() {}

func (x *AppReq) ProtoReflect() protoreflect.Message {
	mi := &file_appuser_middleware_v1_app_app_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppReq.ProtoReflect.Descriptor instead.
func (*AppReq) Descriptor() ([]byte, []int) {
	return file_appuser_middleware_v1_app_app_proto_rawDescGZIP(), []int{0}
}

func (x *AppReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *AppReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *AppReq) GetCreatedBy() string {
	if x != nil && x.CreatedBy != nil {
		return *x.CreatedBy
	}
	return ""
}

func (x *AppReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AppReq) GetLogo() string {
	if x != nil && x.Logo != nil {
		return *x.Logo
	}
	return ""
}

func (x *AppReq) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *AppReq) GetBanned() bool {
	if x != nil && x.Banned != nil {
		return *x.Banned
	}
	return false
}

func (x *AppReq) GetBanMessage() string {
	if x != nil && x.BanMessage != nil {
		return *x.BanMessage
	}
	return ""
}

func (x *AppReq) GetSignupMethods() []v1.SignMethod {
	if x != nil {
		return x.SignupMethods
	}
	return nil
}

func (x *AppReq) GetExtSigninMethods() []v1.SignMethod {
	if x != nil {
		return x.ExtSigninMethods
	}
	return nil
}

func (x *AppReq) GetRecaptchaMethod() v1.RecaptchaMethod {
	if x != nil && x.RecaptchaMethod != nil {
		return *x.RecaptchaMethod
	}
	return v1.RecaptchaMethod(0)
}

func (x *AppReq) GetKycEnable() bool {
	if x != nil && x.KycEnable != nil {
		return *x.KycEnable
	}
	return false
}

func (x *AppReq) GetSigninVerifyEnable() bool {
	if x != nil && x.SigninVerifyEnable != nil {
		return *x.SigninVerifyEnable
	}
	return false
}

func (x *AppReq) GetInvitationCodeMust() bool {
	if x != nil && x.InvitationCodeMust != nil {
		return *x.InvitationCodeMust
	}
	return false
}

func (x *AppReq) GetCreateInvitationCodeWhen() v1.CreateInvitationCodeWhen {
	if x != nil && x.CreateInvitationCodeWhen != nil {
		return *x.CreateInvitationCodeWhen
	}
	return v1.CreateInvitationCodeWhen(0)
}

func (x *AppReq) GetMaxTypedCouponsPerOrder() uint32 {
	if x != nil && x.MaxTypedCouponsPerOrder != nil {
		return *x.MaxTypedCouponsPerOrder
	}
	return 0
}

func (x *AppReq) GetMaintaining() bool {
	if x != nil && x.Maintaining != nil {
		return *x.Maintaining
	}
	return false
}

func (x *AppReq) GetCommitButtonTargets() []string {
	if x != nil {
		return x.CommitButtonTargets
	}
	return nil
}

func (x *AppReq) GetCouponWithdrawEnable() bool {
	if x != nil && x.CouponWithdrawEnable != nil {
		return *x.CouponWithdrawEnable
	}
	return false
}

func (x *AppReq) GetResetUserMethod() v11.ResetUserMethod {
	if x != nil && x.ResetUserMethod != nil {
		return *x.ResetUserMethod
	}
	return v11.ResetUserMethod(0)
}

type App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base info
	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,9,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"created_by"
	CreatedBy string `protobuf:"bytes,20,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty" sql:"created_by"`
	// @inject_tag: sql:"name"
	Name string `protobuf:"bytes,30,opt,name=Name,proto3" json:"Name,omitempty" sql:"name"`
	// @inject_tag: sql:"logo"
	Logo string `protobuf:"bytes,40,opt,name=Logo,proto3" json:"Logo,omitempty" sql:"logo"`
	// @inject_tag: sql:"description"
	Description string `protobuf:"bytes,50,opt,name=Description,proto3" json:"Description,omitempty" sql:"description"`
	// Banned
	// @inject_tag: sql:"ban_app_id"
	BanAppID string `protobuf:"bytes,60,opt,name=BanAppID,proto3" json:"BanAppID,omitempty" sql:"ban_app_id"`
	Banned   bool   `protobuf:"varint,70,opt,name=Banned,proto3" json:"Banned,omitempty"`
	// @inject_tag: sql:"ban_message"
	BanMessage string `protobuf:"bytes,80,opt,name=BanMessage,proto3" json:"BanMessage,omitempty" sql:"ban_message"`
	// Sign methods
	// @inject_tag: sql:"signup_methods"
	SignupMethodsStr string          `protobuf:"bytes,90,opt,name=SignupMethodsStr,proto3" json:"SignupMethodsStr,omitempty" sql:"signup_methods"`
	SignupMethods    []v1.SignMethod `protobuf:"varint,100,rep,packed,name=SignupMethods,proto3,enum=basetypes.v1.SignMethod" json:"SignupMethods,omitempty"`
	// @inject_tag: sql:"extern_signin_methods"
	ExtSigninMethodsStr string          `protobuf:"bytes,110,opt,name=ExtSigninMethodsStr,proto3" json:"ExtSigninMethodsStr,omitempty" sql:"extern_signin_methods"`
	ExtSigninMethods    []v1.SignMethod `protobuf:"varint,120,rep,packed,name=ExtSigninMethods,proto3,enum=basetypes.v1.SignMethod" json:"ExtSigninMethods,omitempty"`
	// Control flag
	// @inject_tag: sql:"recaptcha_method"
	RecaptchaMethodStr string             `protobuf:"bytes,130,opt,name=RecaptchaMethodStr,proto3" json:"RecaptchaMethodStr,omitempty" sql:"recaptcha_method"`
	RecaptchaMethod    v1.RecaptchaMethod `protobuf:"varint,131,opt,name=RecaptchaMethod,proto3,enum=basetypes.v1.RecaptchaMethod" json:"RecaptchaMethod,omitempty"`
	// @inject_tag: sql:"kyc_enable"
	KycEnable bool `protobuf:"varint,150,opt,name=KycEnable,proto3" json:"KycEnable,omitempty" sql:"kyc_enable"`
	// @inject_tag: sql:"signin_verify_enable"
	SigninVerifyEnable bool `protobuf:"varint,170,opt,name=SigninVerifyEnable,proto3" json:"SigninVerifyEnable,omitempty" sql:"signin_verify_enable"`
	// @inject_tag: sql:"invitation_code_must"
	InvitationCodeMust bool `protobuf:"varint,190,opt,name=InvitationCodeMust,proto3" json:"InvitationCodeMust,omitempty" sql:"invitation_code_must"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,200,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"create_invitation_code_when"
	CreateInvitationCodeWhenStr string                      `protobuf:"bytes,210,opt,name=CreateInvitationCodeWhenStr,proto3" json:"CreateInvitationCodeWhenStr,omitempty" sql:"create_invitation_code_when"`
	CreateInvitationCodeWhen    v1.CreateInvitationCodeWhen `protobuf:"varint,220,opt,name=CreateInvitationCodeWhen,proto3,enum=basetypes.v1.CreateInvitationCodeWhen" json:"CreateInvitationCodeWhen,omitempty"`
	// @inject_tag: sql:"max_typed_coupons_per_order"
	MaxTypedCouponsPerOrder uint32 `protobuf:"varint,230,opt,name=MaxTypedCouponsPerOrder,proto3" json:"MaxTypedCouponsPerOrder,omitempty" sql:"max_typed_coupons_per_order"`
	// @inject_tag: sql:"maintaining"
	Maintaining bool `protobuf:"varint,240,opt,name=Maintaining,proto3" json:"Maintaining,omitempty" sql:"maintaining"`
	// @inject_tag: sql:"commit_button_targets"
	CommitButtonTargetsStr string   `protobuf:"bytes,250,opt,name=CommitButtonTargetsStr,proto3" json:"CommitButtonTargetsStr,omitempty" sql:"commit_button_targets"`
	CommitButtonTargets    []string `protobuf:"bytes,260,rep,name=CommitButtonTargets,proto3" json:"CommitButtonTargets,omitempty"`
	// @inject_tag: sql:"coupon_withdraw_enable"
	CouponWithdrawEnable bool `protobuf:"varint,270,opt,name=CouponWithdrawEnable,proto3" json:"CouponWithdrawEnable,omitempty" sql:"coupon_withdraw_enable"`
	// @inject_tag: sql:"reset_user_method"
	ResetUserMethodStr string              `protobuf:"bytes,300,opt,name=ResetUserMethodStr,proto3" json:"ResetUserMethodStr,omitempty" sql:"reset_user_method"`
	ResetUserMethod    v11.ResetUserMethod `protobuf:"varint,310,opt,name=ResetUserMethod,proto3,enum=basetypes.appuser.v1.ResetUserMethod" json:"ResetUserMethod,omitempty"`
}

func (x *App) Reset() {
	*x = App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appuser_middleware_v1_app_app_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*App) ProtoMessage() {}

func (x *App) ProtoReflect() protoreflect.Message {
	mi := &file_appuser_middleware_v1_app_app_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use App.ProtoReflect.Descriptor instead.
func (*App) Descriptor() ([]byte, []int) {
	return file_appuser_middleware_v1_app_app_proto_rawDescGZIP(), []int{1}
}

func (x *App) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *App) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *App) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *App) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *App) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *App) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *App) GetBanAppID() string {
	if x != nil {
		return x.BanAppID
	}
	return ""
}

func (x *App) GetBanned() bool {
	if x != nil {
		return x.Banned
	}
	return false
}

func (x *App) GetBanMessage() string {
	if x != nil {
		return x.BanMessage
	}
	return ""
}

func (x *App) GetSignupMethodsStr() string {
	if x != nil {
		return x.SignupMethodsStr
	}
	return ""
}

func (x *App) GetSignupMethods() []v1.SignMethod {
	if x != nil {
		return x.SignupMethods
	}
	return nil
}

func (x *App) GetExtSigninMethodsStr() string {
	if x != nil {
		return x.ExtSigninMethodsStr
	}
	return ""
}

func (x *App) GetExtSigninMethods() []v1.SignMethod {
	if x != nil {
		return x.ExtSigninMethods
	}
	return nil
}

func (x *App) GetRecaptchaMethodStr() string {
	if x != nil {
		return x.RecaptchaMethodStr
	}
	return ""
}

func (x *App) GetRecaptchaMethod() v1.RecaptchaMethod {
	if x != nil {
		return x.RecaptchaMethod
	}
	return v1.RecaptchaMethod(0)
}

func (x *App) GetKycEnable() bool {
	if x != nil {
		return x.KycEnable
	}
	return false
}

func (x *App) GetSigninVerifyEnable() bool {
	if x != nil {
		return x.SigninVerifyEnable
	}
	return false
}

func (x *App) GetInvitationCodeMust() bool {
	if x != nil {
		return x.InvitationCodeMust
	}
	return false
}

func (x *App) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *App) GetCreateInvitationCodeWhenStr() string {
	if x != nil {
		return x.CreateInvitationCodeWhenStr
	}
	return ""
}

func (x *App) GetCreateInvitationCodeWhen() v1.CreateInvitationCodeWhen {
	if x != nil {
		return x.CreateInvitationCodeWhen
	}
	return v1.CreateInvitationCodeWhen(0)
}

func (x *App) GetMaxTypedCouponsPerOrder() uint32 {
	if x != nil {
		return x.MaxTypedCouponsPerOrder
	}
	return 0
}

func (x *App) GetMaintaining() bool {
	if x != nil {
		return x.Maintaining
	}
	return false
}

func (x *App) GetCommitButtonTargetsStr() string {
	if x != nil {
		return x.CommitButtonTargetsStr
	}
	return ""
}

func (x *App) GetCommitButtonTargets() []string {
	if x != nil {
		return x.CommitButtonTargets
	}
	return nil
}

func (x *App) GetCouponWithdrawEnable() bool {
	if x != nil {
		return x.CouponWithdrawEnable
	}
	return false
}

func (x *App) GetResetUserMethodStr() string {
	if x != nil {
		return x.ResetUserMethodStr
	}
	return ""
}

func (x *App) GetResetUserMethod() v11.ResetUserMethod {
	if x != nil {
		return x.ResetUserMethod
	}
	return v11.ResetUserMethod(0)
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        *v1.Uint32Val      `protobuf:"bytes,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID     *v1.StringVal      `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	EntIDs    *v1.StringSliceVal `protobuf:"bytes,20,opt,name=EntIDs,proto3,oneof" json:"EntIDs,omitempty"`
	CreatedBy *v1.StringVal      `protobuf:"bytes,30,opt,name=CreatedBy,proto3,oneof" json:"CreatedBy,omitempty"`
	Name      *v1.StringVal      `protobuf:"bytes,40,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appuser_middleware_v1_app_app_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_appuser_middleware_v1_app_app_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_appuser_middleware_v1_app_app_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *v1.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetEntID() *v1.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetEntIDs() *v1.StringSliceVal {
	if x != nil {
		return x.EntIDs
	}
	return nil
}

func (x *Conds) GetCreatedBy() *v1.StringVal {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Conds) GetName() *v1.StringVal {
	if x != nil {
		return x.Name
	}
	return nil
}

var File_appuser_middleware_v1_app_app_proto protoreflect.FileDescriptor

var file_appuser_middleware_v1_app_app_proto_rawDesc = []byte{
	0x0a, 0x23, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x61, 0x70, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31,
	0x1a, 0x1d, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2b, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x77, 0x68, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x61, 0x70,
	0x74, 0x63, 0x68, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x0a, 0x0a, 0x06, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x04, 0x4c,
	0x6f, 0x67, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52,
	0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x42, 0x61,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x0a, 0x42, 0x61, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3e, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x18, 0x50, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12,
	0x44, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x18, 0x5a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x10, 0x45, 0x78, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x61, 0x70, 0x74, 0x63,
	0x68, 0x61, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x48, 0x08, 0x52,
	0x0f, 0x52, 0x65, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x4b, 0x79, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x6e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x09, 0x4b, 0x79, 0x63, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x78, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x0a, 0x52, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x12, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x75, 0x73,
	0x74, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x12, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x75, 0x73, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x68, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x57, 0x68, 0x65, 0x6e, 0x18, 0x8c, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x57, 0x68, 0x65, 0x6e, 0x48, 0x0c, 0x52, 0x18,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x57, 0x68, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x17, 0x4d,
	0x61, 0x78, 0x54, 0x79, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x50, 0x65,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0d, 0x52,
	0x17, 0x4d, 0x61, 0x78, 0x54, 0x79, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73,
	0x50, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x4d,
	0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x0e, 0x52, 0x0b, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0xaa, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xb4,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0f, 0x52, 0x14, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x55, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x48, 0x10, 0x52, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x4c, 0x6f, 0x67, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x42, 0x61, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x52, 0x65, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x4b, 0x79, 0x63, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x75,
	0x73, 0x74, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x57, 0x68, 0x65, 0x6e, 0x42,
	0x1a, 0x0a, 0x18, 0x5f, 0x4d, 0x61, 0x78, 0x54, 0x79, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x90, 0x0a, 0x0a, 0x03, 0x41, 0x70, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x6f,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x20, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x53, 0x74, 0x72, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x69,
	0x67, 0x6e, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x53, 0x74, 0x72, 0x12, 0x3e,
	0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18,
	0x64, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x0d, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x30,
	0x0a, 0x13, 0x45, 0x78, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x53, 0x74, 0x72, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x45, 0x78, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x53, 0x74, 0x72,
	0x12, 0x44, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x18, 0x78, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x52, 0x10, 0x45, 0x78, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x61, 0x70, 0x74,
	0x63, 0x68, 0x61, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x74, 0x72, 0x18, 0x82, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x52, 0x65, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x53, 0x74, 0x72, 0x12, 0x48, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x61, 0x70,
	0x74, 0x63, 0x68, 0x61, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x0f, 0x52, 0x65, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x1d, 0x0a, 0x09, 0x4b, 0x79, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x96,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x4b, 0x79, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x2f, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x2f, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x4d, 0x75, 0x73, 0x74, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x75,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0xc8, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x41, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x57, 0x68, 0x65, 0x6e, 0x53, 0x74, 0x72,
	0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x57, 0x68, 0x65,
	0x6e, 0x53, 0x74, 0x72, 0x12, 0x63, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x57, 0x68, 0x65, 0x6e,
	0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x57, 0x68, 0x65, 0x6e, 0x52,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x57, 0x68, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x17, 0x4d, 0x61, 0x78,
	0x54, 0x79, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x4d, 0x61, 0x78,
	0x54, 0x79, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0b, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x4d, 0x61, 0x69, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x53, 0x74,
	0x72, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x53, 0x74, 0x72,
	0x12, 0x31, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x84, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x8e, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x74, 0x72, 0x18, 0xac,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x74, 0x72, 0x12, 0x50, 0x0a, 0x0f, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0xb6, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0f, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xc5, 0x02, 0x0a, 0x05,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x05, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x06, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x3a, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x03,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e,
	0x61, 0x6d, 0x65, 0x42, 0x43, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x6b, 0x75, 0x6e, 0x6d, 0x61, 0x6e, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x61,
	0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_appuser_middleware_v1_app_app_proto_rawDescOnce sync.Once
	file_appuser_middleware_v1_app_app_proto_rawDescData = file_appuser_middleware_v1_app_app_proto_rawDesc
)

func file_appuser_middleware_v1_app_app_proto_rawDescGZIP() []byte {
	file_appuser_middleware_v1_app_app_proto_rawDescOnce.Do(func() {
		file_appuser_middleware_v1_app_app_proto_rawDescData = protoimpl.X.CompressGZIP(file_appuser_middleware_v1_app_app_proto_rawDescData)
	})
	return file_appuser_middleware_v1_app_app_proto_rawDescData
}

var file_appuser_middleware_v1_app_app_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_appuser_middleware_v1_app_app_proto_goTypes = []interface{}{
	(*AppReq)(nil),                   // 0: appuser.middleware.app.v1.AppReq
	(*App)(nil),                      // 1: appuser.middleware.app.v1.App
	(*Conds)(nil),                    // 2: appuser.middleware.app.v1.Conds
	(v1.SignMethod)(0),               // 3: basetypes.v1.SignMethod
	(v1.RecaptchaMethod)(0),          // 4: basetypes.v1.RecaptchaMethod
	(v1.CreateInvitationCodeWhen)(0), // 5: basetypes.v1.CreateInvitationCodeWhen
	(v11.ResetUserMethod)(0),         // 6: basetypes.appuser.v1.ResetUserMethod
	(*v1.Uint32Val)(nil),             // 7: basetypes.v1.Uint32Val
	(*v1.StringVal)(nil),             // 8: basetypes.v1.StringVal
	(*v1.StringSliceVal)(nil),        // 9: basetypes.v1.StringSliceVal
}
var file_appuser_middleware_v1_app_app_proto_depIdxs = []int32{
	3,  // 0: appuser.middleware.app.v1.AppReq.SignupMethods:type_name -> basetypes.v1.SignMethod
	3,  // 1: appuser.middleware.app.v1.AppReq.ExtSigninMethods:type_name -> basetypes.v1.SignMethod
	4,  // 2: appuser.middleware.app.v1.AppReq.RecaptchaMethod:type_name -> basetypes.v1.RecaptchaMethod
	5,  // 3: appuser.middleware.app.v1.AppReq.CreateInvitationCodeWhen:type_name -> basetypes.v1.CreateInvitationCodeWhen
	6,  // 4: appuser.middleware.app.v1.AppReq.ResetUserMethod:type_name -> basetypes.appuser.v1.ResetUserMethod
	3,  // 5: appuser.middleware.app.v1.App.SignupMethods:type_name -> basetypes.v1.SignMethod
	3,  // 6: appuser.middleware.app.v1.App.ExtSigninMethods:type_name -> basetypes.v1.SignMethod
	4,  // 7: appuser.middleware.app.v1.App.RecaptchaMethod:type_name -> basetypes.v1.RecaptchaMethod
	5,  // 8: appuser.middleware.app.v1.App.CreateInvitationCodeWhen:type_name -> basetypes.v1.CreateInvitationCodeWhen
	6,  // 9: appuser.middleware.app.v1.App.ResetUserMethod:type_name -> basetypes.appuser.v1.ResetUserMethod
	7,  // 10: appuser.middleware.app.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	8,  // 11: appuser.middleware.app.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	9,  // 12: appuser.middleware.app.v1.Conds.EntIDs:type_name -> basetypes.v1.StringSliceVal
	8,  // 13: appuser.middleware.app.v1.Conds.CreatedBy:type_name -> basetypes.v1.StringVal
	8,  // 14: appuser.middleware.app.v1.Conds.Name:type_name -> basetypes.v1.StringVal
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_appuser_middleware_v1_app_app_proto_init() }
func file_appuser_middleware_v1_app_app_proto_init() {
	if File_appuser_middleware_v1_app_app_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_appuser_middleware_v1_app_app_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appuser_middleware_v1_app_app_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appuser_middleware_v1_app_app_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_appuser_middleware_v1_app_app_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_appuser_middleware_v1_app_app_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_appuser_middleware_v1_app_app_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_appuser_middleware_v1_app_app_proto_goTypes,
		DependencyIndexes: file_appuser_middleware_v1_app_app_proto_depIdxs,
		MessageInfos:      file_appuser_middleware_v1_app_app_proto_msgTypes,
	}.Build()
	File_appuser_middleware_v1_app_app_proto = out.File
	file_appuser_middleware_v1_app_app_proto_rawDesc = nil
	file_appuser_middleware_v1_app_app_proto_goTypes = nil
	file_appuser_middleware_v1_app_app_proto_depIdxs = nil
}

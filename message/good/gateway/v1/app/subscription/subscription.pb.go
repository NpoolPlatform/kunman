// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: good/gateway/v1/app/subscription/subscription.proto

package subscription

import (
	v1 "github.com/NpoolPlatform/kunman/message/basetypes/good/v1"
	_ "github.com/NpoolPlatform/kunman/message/good/gateway/v1/good/coin"
	_ "github.com/NpoolPlatform/kunman/message/good/gateway/v1/good/coin/reward"
	_ "github.com/NpoolPlatform/kunman/message/good/gateway/v1/good/stock"
	description "github.com/NpoolPlatform/kunman/message/good/middleware/v1/app/good/description"
	color "github.com/NpoolPlatform/kunman/message/good/middleware/v1/app/good/display/color"
	name "github.com/NpoolPlatform/kunman/message/good/middleware/v1/app/good/display/name"
	label "github.com/NpoolPlatform/kunman/message/good/middleware/v1/app/good/label"
	poster "github.com/NpoolPlatform/kunman/message/good/middleware/v1/app/good/poster"
	_ "github.com/NpoolPlatform/kunman/message/good/middleware/v1/app/good/required"
	_ "github.com/NpoolPlatform/kunman/message/good/middleware/v1/app/good/stock/mining"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AppSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  uint32                         `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID               string                         `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	AppID               string                         `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty"`
	AppName             string                         `protobuf:"bytes,40,opt,name=AppName,proto3" json:"AppName,omitempty"`
	GoodID              string                         `protobuf:"bytes,50,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	AppGoodID           string                         `protobuf:"bytes,60,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
	USDPrice            string                         `protobuf:"bytes,180,opt,name=USDPrice,proto3" json:"USDPrice,omitempty"`
	DurationDisplayType v1.GoodDurationType            `protobuf:"varint,230,opt,name=DurationDisplayType,proto3,enum=basetypes.good.v1.GoodDurationType" json:"DurationDisplayType,omitempty"`
	GoodType            v1.GoodType                    `protobuf:"varint,240,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType" json:"GoodType,omitempty"`
	GoodName            string                         `protobuf:"bytes,260,opt,name=GoodName,proto3" json:"GoodName,omitempty"`
	DurationUnits       uint32                         `protobuf:"varint,270,opt,name=DurationUnits,proto3" json:"DurationUnits,omitempty"`
	DurationQuota       uint32                         `protobuf:"varint,280,opt,name=DurationQuota,proto3" json:"DurationQuota,omitempty"`
	DailyBonusQuota     uint32                         `protobuf:"varint,290,opt,name=DailyBonusQuota,proto3" json:"DailyBonusQuota,omitempty"`
	AppGoodName         string                         `protobuf:"bytes,390,opt,name=AppGoodName,proto3" json:"AppGoodName,omitempty"`
	Banner              string                         `protobuf:"bytes,410,opt,name=Banner,proto3" json:"Banner,omitempty"`
	EnableSetCommission bool                           `protobuf:"varint,440,opt,name=EnableSetCommission,proto3" json:"EnableSetCommission,omitempty"`
	ProductID           string                         `protobuf:"bytes,500,opt,name=ProductID,proto3" json:"ProductID,omitempty"`
	TrialUnits          uint32                         `protobuf:"varint,510,opt,name=TrialUnits,proto3" json:"TrialUnits,omitempty"`
	TrialUSDPrice       string                         `protobuf:"bytes,520,opt,name=TrialUSDPrice,proto3" json:"TrialUSDPrice,omitempty"`
	PriceFiatID         string                         `protobuf:"bytes,600,opt,name=PriceFiatID,proto3" json:"PriceFiatID,omitempty"`
	FiatPrice           string                         `protobuf:"bytes,610,opt,name=FiatPrice,proto3" json:"FiatPrice,omitempty"`
	TrialFiatPrice      string                         `protobuf:"bytes,620,opt,name=TrialFiatPrice,proto3" json:"TrialFiatPrice,omitempty"`
	Descriptions        []*description.DescriptionInfo `protobuf:"bytes,910,rep,name=Descriptions,proto3" json:"Descriptions,omitempty"`
	Posters             []*poster.PosterInfo           `protobuf:"bytes,920,rep,name=Posters,proto3" json:"Posters,omitempty"`
	DisplayNames        []*name.DisplayNameInfo        `protobuf:"bytes,930,rep,name=DisplayNames,proto3" json:"DisplayNames,omitempty"`
	DisplayColors       []*color.DisplayColorInfo      `protobuf:"bytes,940,rep,name=DisplayColors,proto3" json:"DisplayColors,omitempty"`
	Labels              []*label.LabelInfo             `protobuf:"bytes,970,rep,name=Labels,proto3" json:"Labels,omitempty"`
	CreatedAt           uint32                         `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt           uint32                         `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *AppSubscription) Reset() {
	*x = AppSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppSubscription) ProtoMessage() {}

func (x *AppSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppSubscription.ProtoReflect.Descriptor instead.
func (*AppSubscription) Descriptor() ([]byte, []int) {
	return file_good_gateway_v1_app_subscription_subscription_proto_rawDescGZIP(), []int{0}
}

func (x *AppSubscription) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AppSubscription) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *AppSubscription) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *AppSubscription) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *AppSubscription) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *AppSubscription) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *AppSubscription) GetUSDPrice() string {
	if x != nil {
		return x.USDPrice
	}
	return ""
}

func (x *AppSubscription) GetDurationDisplayType() v1.GoodDurationType {
	if x != nil {
		return x.DurationDisplayType
	}
	return v1.GoodDurationType(0)
}

func (x *AppSubscription) GetGoodType() v1.GoodType {
	if x != nil {
		return x.GoodType
	}
	return v1.GoodType(0)
}

func (x *AppSubscription) GetGoodName() string {
	if x != nil {
		return x.GoodName
	}
	return ""
}

func (x *AppSubscription) GetDurationUnits() uint32 {
	if x != nil {
		return x.DurationUnits
	}
	return 0
}

func (x *AppSubscription) GetDurationQuota() uint32 {
	if x != nil {
		return x.DurationQuota
	}
	return 0
}

func (x *AppSubscription) GetDailyBonusQuota() uint32 {
	if x != nil {
		return x.DailyBonusQuota
	}
	return 0
}

func (x *AppSubscription) GetAppGoodName() string {
	if x != nil {
		return x.AppGoodName
	}
	return ""
}

func (x *AppSubscription) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *AppSubscription) GetEnableSetCommission() bool {
	if x != nil {
		return x.EnableSetCommission
	}
	return false
}

func (x *AppSubscription) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *AppSubscription) GetTrialUnits() uint32 {
	if x != nil {
		return x.TrialUnits
	}
	return 0
}

func (x *AppSubscription) GetTrialUSDPrice() string {
	if x != nil {
		return x.TrialUSDPrice
	}
	return ""
}

func (x *AppSubscription) GetPriceFiatID() string {
	if x != nil {
		return x.PriceFiatID
	}
	return ""
}

func (x *AppSubscription) GetFiatPrice() string {
	if x != nil {
		return x.FiatPrice
	}
	return ""
}

func (x *AppSubscription) GetTrialFiatPrice() string {
	if x != nil {
		return x.TrialFiatPrice
	}
	return ""
}

func (x *AppSubscription) GetDescriptions() []*description.DescriptionInfo {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *AppSubscription) GetPosters() []*poster.PosterInfo {
	if x != nil {
		return x.Posters
	}
	return nil
}

func (x *AppSubscription) GetDisplayNames() []*name.DisplayNameInfo {
	if x != nil {
		return x.DisplayNames
	}
	return nil
}

func (x *AppSubscription) GetDisplayColors() []*color.DisplayColorInfo {
	if x != nil {
		return x.DisplayColors
	}
	return nil
}

func (x *AppSubscription) GetLabels() []*label.LabelInfo {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *AppSubscription) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AppSubscription) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type UpdateAppSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  uint32  `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID               string  `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	AppID               string  `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty"`
	AppGoodID           string  `protobuf:"bytes,40,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
	Name                *string `protobuf:"bytes,100,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	Banner              *string `protobuf:"bytes,120,opt,name=Banner,proto3,oneof" json:"Banner,omitempty"`
	EnableSetCommission *bool   `protobuf:"varint,160,opt,name=EnableSetCommission,proto3,oneof" json:"EnableSetCommission,omitempty"`
	USDPrice            *string `protobuf:"bytes,220,opt,name=USDPrice,proto3,oneof" json:"USDPrice,omitempty"`
	ProductID           *string `protobuf:"bytes,300,opt,name=ProductID,proto3,oneof" json:"ProductID,omitempty"`
	TrialUnits          *uint32 `protobuf:"varint,310,opt,name=TrialUnits,proto3,oneof" json:"TrialUnits,omitempty"`
	TrialUSDPrice       *string `protobuf:"bytes,320,opt,name=TrialUSDPrice,proto3,oneof" json:"TrialUSDPrice,omitempty"`
	PriceFiatID         *string `protobuf:"bytes,400,opt,name=PriceFiatID,proto3,oneof" json:"PriceFiatID,omitempty"`
	FiatPrice           *string `protobuf:"bytes,410,opt,name=FiatPrice,proto3,oneof" json:"FiatPrice,omitempty"`
	TrialFiatPrice      *string `protobuf:"bytes,420,opt,name=TrialFiatPrice,proto3,oneof" json:"TrialFiatPrice,omitempty"`
}

func (x *UpdateAppSubscriptionRequest) Reset() {
	*x = UpdateAppSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppSubscriptionRequest) ProtoMessage() {}

func (x *UpdateAppSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_good_gateway_v1_app_subscription_subscription_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateAppSubscriptionRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateAppSubscriptionRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *UpdateAppSubscriptionRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *UpdateAppSubscriptionRequest) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *UpdateAppSubscriptionRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateAppSubscriptionRequest) GetBanner() string {
	if x != nil && x.Banner != nil {
		return *x.Banner
	}
	return ""
}

func (x *UpdateAppSubscriptionRequest) GetEnableSetCommission() bool {
	if x != nil && x.EnableSetCommission != nil {
		return *x.EnableSetCommission
	}
	return false
}

func (x *UpdateAppSubscriptionRequest) GetUSDPrice() string {
	if x != nil && x.USDPrice != nil {
		return *x.USDPrice
	}
	return ""
}

func (x *UpdateAppSubscriptionRequest) GetProductID() string {
	if x != nil && x.ProductID != nil {
		return *x.ProductID
	}
	return ""
}

func (x *UpdateAppSubscriptionRequest) GetTrialUnits() uint32 {
	if x != nil && x.TrialUnits != nil {
		return *x.TrialUnits
	}
	return 0
}

func (x *UpdateAppSubscriptionRequest) GetTrialUSDPrice() string {
	if x != nil && x.TrialUSDPrice != nil {
		return *x.TrialUSDPrice
	}
	return ""
}

func (x *UpdateAppSubscriptionRequest) GetPriceFiatID() string {
	if x != nil && x.PriceFiatID != nil {
		return *x.PriceFiatID
	}
	return ""
}

func (x *UpdateAppSubscriptionRequest) GetFiatPrice() string {
	if x != nil && x.FiatPrice != nil {
		return *x.FiatPrice
	}
	return ""
}

func (x *UpdateAppSubscriptionRequest) GetTrialFiatPrice() string {
	if x != nil && x.TrialFiatPrice != nil {
		return *x.TrialFiatPrice
	}
	return ""
}

type UpdateAppSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppSubscription `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateAppSubscriptionResponse) Reset() {
	*x = UpdateAppSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppSubscriptionResponse) ProtoMessage() {}

func (x *UpdateAppSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*UpdateAppSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_good_gateway_v1_app_subscription_subscription_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateAppSubscriptionResponse) GetInfo() *AppSubscription {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetAppSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppGoodID string `protobuf:"bytes,10,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
}

func (x *GetAppSubscriptionRequest) Reset() {
	*x = GetAppSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppSubscriptionRequest) ProtoMessage() {}

func (x *GetAppSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*GetAppSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_good_gateway_v1_app_subscription_subscription_proto_rawDescGZIP(), []int{3}
}

func (x *GetAppSubscriptionRequest) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

type GetAppSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppSubscription `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetAppSubscriptionResponse) Reset() {
	*x = GetAppSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppSubscriptionResponse) ProtoMessage() {}

func (x *GetAppSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*GetAppSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_good_gateway_v1_app_subscription_subscription_proto_rawDescGZIP(), []int{4}
}

func (x *GetAppSubscriptionResponse) GetInfo() *AppSubscription {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetAppSubscriptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetAppSubscriptionsRequest) Reset() {
	*x = GetAppSubscriptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppSubscriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppSubscriptionsRequest) ProtoMessage() {}

func (x *GetAppSubscriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppSubscriptionsRequest.ProtoReflect.Descriptor instead.
func (*GetAppSubscriptionsRequest) Descriptor() ([]byte, []int) {
	return file_good_gateway_v1_app_subscription_subscription_proto_rawDescGZIP(), []int{5}
}

func (x *GetAppSubscriptionsRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetAppSubscriptionsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAppSubscriptionsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetAppSubscriptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*AppSubscription `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32             `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetAppSubscriptionsResponse) Reset() {
	*x = GetAppSubscriptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppSubscriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppSubscriptionsResponse) ProtoMessage() {}

func (x *GetAppSubscriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppSubscriptionsResponse.ProtoReflect.Descriptor instead.
func (*GetAppSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return file_good_gateway_v1_app_subscription_subscription_proto_rawDescGZIP(), []int{6}
}

func (x *GetAppSubscriptionsResponse) GetInfos() []*AppSubscription {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetAppSubscriptionsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AdminCreateAppSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID         string  `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	GoodID              string  `protobuf:"bytes,20,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	Name                string  `protobuf:"bytes,80,opt,name=Name,proto3" json:"Name,omitempty"`
	Banner              *string `protobuf:"bytes,100,opt,name=Banner,proto3,oneof" json:"Banner,omitempty"`
	EnableSetCommission *bool   `protobuf:"varint,140,opt,name=EnableSetCommission,proto3,oneof" json:"EnableSetCommission,omitempty"`
	USDPrice            string  `protobuf:"bytes,200,opt,name=USDPrice,proto3" json:"USDPrice,omitempty"`
	ProductID           *string `protobuf:"bytes,300,opt,name=ProductID,proto3,oneof" json:"ProductID,omitempty"`
	TrialUnits          *uint32 `protobuf:"varint,310,opt,name=TrialUnits,proto3,oneof" json:"TrialUnits,omitempty"`
	TrialUSDPrice       *string `protobuf:"bytes,320,opt,name=TrialUSDPrice,proto3,oneof" json:"TrialUSDPrice,omitempty"`
	PriceFiatID         *string `protobuf:"bytes,400,opt,name=PriceFiatID,proto3,oneof" json:"PriceFiatID,omitempty"`
	FiatPrice           *string `protobuf:"bytes,410,opt,name=FiatPrice,proto3,oneof" json:"FiatPrice,omitempty"`
	TrialFiatPrice      *string `protobuf:"bytes,420,opt,name=TrialFiatPrice,proto3,oneof" json:"TrialFiatPrice,omitempty"`
}

func (x *AdminCreateAppSubscriptionRequest) Reset() {
	*x = AdminCreateAppSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreateAppSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateAppSubscriptionRequest) ProtoMessage() {}

func (x *AdminCreateAppSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateAppSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*AdminCreateAppSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_good_gateway_v1_app_subscription_subscription_proto_rawDescGZIP(), []int{7}
}

func (x *AdminCreateAppSubscriptionRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *AdminCreateAppSubscriptionRequest) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *AdminCreateAppSubscriptionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdminCreateAppSubscriptionRequest) GetBanner() string {
	if x != nil && x.Banner != nil {
		return *x.Banner
	}
	return ""
}

func (x *AdminCreateAppSubscriptionRequest) GetEnableSetCommission() bool {
	if x != nil && x.EnableSetCommission != nil {
		return *x.EnableSetCommission
	}
	return false
}

func (x *AdminCreateAppSubscriptionRequest) GetUSDPrice() string {
	if x != nil {
		return x.USDPrice
	}
	return ""
}

func (x *AdminCreateAppSubscriptionRequest) GetProductID() string {
	if x != nil && x.ProductID != nil {
		return *x.ProductID
	}
	return ""
}

func (x *AdminCreateAppSubscriptionRequest) GetTrialUnits() uint32 {
	if x != nil && x.TrialUnits != nil {
		return *x.TrialUnits
	}
	return 0
}

func (x *AdminCreateAppSubscriptionRequest) GetTrialUSDPrice() string {
	if x != nil && x.TrialUSDPrice != nil {
		return *x.TrialUSDPrice
	}
	return ""
}

func (x *AdminCreateAppSubscriptionRequest) GetPriceFiatID() string {
	if x != nil && x.PriceFiatID != nil {
		return *x.PriceFiatID
	}
	return ""
}

func (x *AdminCreateAppSubscriptionRequest) GetFiatPrice() string {
	if x != nil && x.FiatPrice != nil {
		return *x.FiatPrice
	}
	return ""
}

func (x *AdminCreateAppSubscriptionRequest) GetTrialFiatPrice() string {
	if x != nil && x.TrialFiatPrice != nil {
		return *x.TrialFiatPrice
	}
	return ""
}

type AdminCreateAppSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppSubscription `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminCreateAppSubscriptionResponse) Reset() {
	*x = AdminCreateAppSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreateAppSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateAppSubscriptionResponse) ProtoMessage() {}

func (x *AdminCreateAppSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateAppSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*AdminCreateAppSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_good_gateway_v1_app_subscription_subscription_proto_rawDescGZIP(), []int{8}
}

func (x *AdminCreateAppSubscriptionResponse) GetInfo() *AppSubscription {
	if x != nil {
		return x.Info
	}
	return nil
}

type AdminUpdateAppSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  uint32  `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID               string  `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	TargetAppID         string  `protobuf:"bytes,30,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	AppGoodID           string  `protobuf:"bytes,40,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
	Name                *string `protobuf:"bytes,100,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	Banner              *string `protobuf:"bytes,120,opt,name=Banner,proto3,oneof" json:"Banner,omitempty"`
	EnableSetCommission *bool   `protobuf:"varint,160,opt,name=EnableSetCommission,proto3,oneof" json:"EnableSetCommission,omitempty"`
}

func (x *AdminUpdateAppSubscriptionRequest) Reset() {
	*x = AdminUpdateAppSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdateAppSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateAppSubscriptionRequest) ProtoMessage() {}

func (x *AdminUpdateAppSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateAppSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*AdminUpdateAppSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_good_gateway_v1_app_subscription_subscription_proto_rawDescGZIP(), []int{9}
}

func (x *AdminUpdateAppSubscriptionRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AdminUpdateAppSubscriptionRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *AdminUpdateAppSubscriptionRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *AdminUpdateAppSubscriptionRequest) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *AdminUpdateAppSubscriptionRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AdminUpdateAppSubscriptionRequest) GetBanner() string {
	if x != nil && x.Banner != nil {
		return *x.Banner
	}
	return ""
}

func (x *AdminUpdateAppSubscriptionRequest) GetEnableSetCommission() bool {
	if x != nil && x.EnableSetCommission != nil {
		return *x.EnableSetCommission
	}
	return false
}

type AdminUpdateAppSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppSubscription `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminUpdateAppSubscriptionResponse) Reset() {
	*x = AdminUpdateAppSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdateAppSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateAppSubscriptionResponse) ProtoMessage() {}

func (x *AdminUpdateAppSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateAppSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*AdminUpdateAppSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_good_gateway_v1_app_subscription_subscription_proto_rawDescGZIP(), []int{10}
}

func (x *AdminUpdateAppSubscriptionResponse) GetInfo() *AppSubscription {
	if x != nil {
		return x.Info
	}
	return nil
}

type AdminGetAppSubscriptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	Offset      int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit       int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *AdminGetAppSubscriptionsRequest) Reset() {
	*x = AdminGetAppSubscriptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminGetAppSubscriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGetAppSubscriptionsRequest) ProtoMessage() {}

func (x *AdminGetAppSubscriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGetAppSubscriptionsRequest.ProtoReflect.Descriptor instead.
func (*AdminGetAppSubscriptionsRequest) Descriptor() ([]byte, []int) {
	return file_good_gateway_v1_app_subscription_subscription_proto_rawDescGZIP(), []int{11}
}

func (x *AdminGetAppSubscriptionsRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *AdminGetAppSubscriptionsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *AdminGetAppSubscriptionsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type AdminGetAppSubscriptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*AppSubscription `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32             `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *AdminGetAppSubscriptionsResponse) Reset() {
	*x = AdminGetAppSubscriptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminGetAppSubscriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGetAppSubscriptionsResponse) ProtoMessage() {}

func (x *AdminGetAppSubscriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGetAppSubscriptionsResponse.ProtoReflect.Descriptor instead.
func (*AdminGetAppSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return file_good_gateway_v1_app_subscription_subscription_proto_rawDescGZIP(), []int{12}
}

func (x *AdminGetAppSubscriptionsResponse) GetInfos() []*AppSubscription {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *AdminGetAppSubscriptionsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AdminDeleteAppSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID       string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	TargetAppID string `protobuf:"bytes,30,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	AppGoodID   string `protobuf:"bytes,40,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
}

func (x *AdminDeleteAppSubscriptionRequest) Reset() {
	*x = AdminDeleteAppSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeleteAppSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeleteAppSubscriptionRequest) ProtoMessage() {}

func (x *AdminDeleteAppSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeleteAppSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*AdminDeleteAppSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_good_gateway_v1_app_subscription_subscription_proto_rawDescGZIP(), []int{13}
}

func (x *AdminDeleteAppSubscriptionRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AdminDeleteAppSubscriptionRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *AdminDeleteAppSubscriptionRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *AdminDeleteAppSubscriptionRequest) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

type AdminDeleteAppSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppSubscription `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminDeleteAppSubscriptionResponse) Reset() {
	*x = AdminDeleteAppSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeleteAppSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeleteAppSubscriptionResponse) ProtoMessage() {}

func (x *AdminDeleteAppSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeleteAppSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*AdminDeleteAppSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_good_gateway_v1_app_subscription_subscription_proto_rawDescGZIP(), []int{14}
}

func (x *AdminDeleteAppSubscriptionResponse) GetInfo() *AppSubscription {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_good_gateway_v1_app_subscription_subscription_proto protoreflect.FileDescriptor

var file_good_gateway_v1_app_subscription_subscription_proto_rawDesc = []byte{
	0x0a, 0x33, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x67, 0x6f, 0x6f, 0x64,
	0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f,
	0x6f, 0x64, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67,
	0x6f, 0x6f, 0x64, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f,
	0x6f, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f,
	0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x67, 0x6f, 0x6f, 0x64,
	0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x33, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67,
	0x6f, 0x6f, 0x64, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x67,
	0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x6f, 0x6f, 0x64, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x69, 0x6e,
	0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x0a, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x08, 0x55, 0x53, 0x44, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x53, 0x44, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x56, 0x0a, 0x13, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x47, 0x6f, 0x6f,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x84, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x18, 0x8e, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0d, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x98, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x29,
	0x0a, 0x0f, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x18, 0xa2, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42,
	0x6f, 0x6e, 0x75, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0b, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x06,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x9a, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xb8, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x0a, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0xfe, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0d, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x55, 0x53, 0x44, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x88, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x53, 0x44, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x21, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x46, 0x69, 0x61, 0x74, 0x49, 0x44, 0x18, 0xd8,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x46, 0x69, 0x61, 0x74,
	0x49, 0x44, 0x12, 0x1d, 0x0a, 0x09, 0x46, 0x69, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0xe2, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x27, 0x0a, 0x0e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x61, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0xec, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x46, 0x69, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x0c, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x8e, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x07, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x98, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5f, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0xa2, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0xac, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x06,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xca, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x91, 0x05, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x17, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x02, 0x52, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x08, 0x55,
	0x53, 0x44, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x08, 0x55, 0x53, 0x44, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0a, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18,
	0xb6, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x0a, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0d, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x55, 0x53, 0x44, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x0d, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x53, 0x44, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x46, 0x69, 0x61, 0x74,
	0x49, 0x44, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x46, 0x69, 0x61, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x09, 0x46,
	0x69, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x9a, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x08, 0x52, 0x09, 0x46, 0x69, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x0e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0xa4, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0e, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x46, 0x69, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x55, 0x53,
	0x44, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x53, 0x44,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x46,
	0x69, 0x61, 0x74, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x69, 0x61, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x61,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x66, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x39,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x22, 0x63, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x60,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x7c, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xd6,
	0x04, 0x0a, 0x21, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x36, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52,
	0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x08, 0x55, 0x53, 0x44, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x53, 0x44, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0a, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52,
	0x0a, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0d, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x53, 0x44, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0xc0, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0d, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x55,
	0x53, 0x44, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x46, 0x69, 0x61, 0x74, 0x49, 0x44, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x46, 0x69, 0x61, 0x74, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x09, 0x46, 0x69, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x9a, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x46, 0x69, 0x61, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x46,
	0x69, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0xa4, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x07, 0x52, 0x0e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x53,
	0x44, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x46, 0x69, 0x61, 0x74, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x69, 0x61, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69,
	0x61, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x6b, 0x0a, 0x22, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa3, 0x02, 0x0a, 0x21, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x12, 0x17, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xa0, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x0a, 0x22, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x45, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x71, 0x0a, 0x1f, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x20, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x89,
	0x01, 0x0a, 0x21, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x22, 0x6b, 0x0a, 0x22, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x45, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x8f, 0x0b, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0xbf, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb3, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a,
	0x01, 0x2a, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb7, 0x01, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xd4, 0x01, 0x0a, 0x1a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xd4, 0x01, 0x0a,
	0x1a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01,
	0x2a, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0xcc, 0x01, 0x0a, 0x18, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a,
	0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x67, 0x65,
	0x74, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0xd4, 0x01, 0x0a, 0x1a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x4a, 0x5a, 0x48, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6b, 0x75, 0x6e, 0x6d, 0x61, 0x6e, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_good_gateway_v1_app_subscription_subscription_proto_rawDescOnce sync.Once
	file_good_gateway_v1_app_subscription_subscription_proto_rawDescData = file_good_gateway_v1_app_subscription_subscription_proto_rawDesc
)

func file_good_gateway_v1_app_subscription_subscription_proto_rawDescGZIP() []byte {
	file_good_gateway_v1_app_subscription_subscription_proto_rawDescOnce.Do(func() {
		file_good_gateway_v1_app_subscription_subscription_proto_rawDescData = protoimpl.X.CompressGZIP(file_good_gateway_v1_app_subscription_subscription_proto_rawDescData)
	})
	return file_good_gateway_v1_app_subscription_subscription_proto_rawDescData
}

var file_good_gateway_v1_app_subscription_subscription_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_good_gateway_v1_app_subscription_subscription_proto_goTypes = []interface{}{
	(*AppSubscription)(nil),                    // 0: good.gateway.app.subscription.v1.AppSubscription
	(*UpdateAppSubscriptionRequest)(nil),       // 1: good.gateway.app.subscription.v1.UpdateAppSubscriptionRequest
	(*UpdateAppSubscriptionResponse)(nil),      // 2: good.gateway.app.subscription.v1.UpdateAppSubscriptionResponse
	(*GetAppSubscriptionRequest)(nil),          // 3: good.gateway.app.subscription.v1.GetAppSubscriptionRequest
	(*GetAppSubscriptionResponse)(nil),         // 4: good.gateway.app.subscription.v1.GetAppSubscriptionResponse
	(*GetAppSubscriptionsRequest)(nil),         // 5: good.gateway.app.subscription.v1.GetAppSubscriptionsRequest
	(*GetAppSubscriptionsResponse)(nil),        // 6: good.gateway.app.subscription.v1.GetAppSubscriptionsResponse
	(*AdminCreateAppSubscriptionRequest)(nil),  // 7: good.gateway.app.subscription.v1.AdminCreateAppSubscriptionRequest
	(*AdminCreateAppSubscriptionResponse)(nil), // 8: good.gateway.app.subscription.v1.AdminCreateAppSubscriptionResponse
	(*AdminUpdateAppSubscriptionRequest)(nil),  // 9: good.gateway.app.subscription.v1.AdminUpdateAppSubscriptionRequest
	(*AdminUpdateAppSubscriptionResponse)(nil), // 10: good.gateway.app.subscription.v1.AdminUpdateAppSubscriptionResponse
	(*AdminGetAppSubscriptionsRequest)(nil),    // 11: good.gateway.app.subscription.v1.AdminGetAppSubscriptionsRequest
	(*AdminGetAppSubscriptionsResponse)(nil),   // 12: good.gateway.app.subscription.v1.AdminGetAppSubscriptionsResponse
	(*AdminDeleteAppSubscriptionRequest)(nil),  // 13: good.gateway.app.subscription.v1.AdminDeleteAppSubscriptionRequest
	(*AdminDeleteAppSubscriptionResponse)(nil), // 14: good.gateway.app.subscription.v1.AdminDeleteAppSubscriptionResponse
	(v1.GoodDurationType)(0),                   // 15: basetypes.good.v1.GoodDurationType
	(v1.GoodType)(0),                           // 16: basetypes.good.v1.GoodType
	(*description.DescriptionInfo)(nil),        // 17: good.middleware.app.good1.description.v1.DescriptionInfo
	(*poster.PosterInfo)(nil),                  // 18: good.middleware.app.good1.poster.v1.PosterInfo
	(*name.DisplayNameInfo)(nil),               // 19: good.middleware.app.good1.display.name.v1.DisplayNameInfo
	(*color.DisplayColorInfo)(nil),             // 20: good.middleware.app.good1.display.color.v1.DisplayColorInfo
	(*label.LabelInfo)(nil),                    // 21: good.middleware.app.good1.label.v1.LabelInfo
}
var file_good_gateway_v1_app_subscription_subscription_proto_depIdxs = []int32{
	15, // 0: good.gateway.app.subscription.v1.AppSubscription.DurationDisplayType:type_name -> basetypes.good.v1.GoodDurationType
	16, // 1: good.gateway.app.subscription.v1.AppSubscription.GoodType:type_name -> basetypes.good.v1.GoodType
	17, // 2: good.gateway.app.subscription.v1.AppSubscription.Descriptions:type_name -> good.middleware.app.good1.description.v1.DescriptionInfo
	18, // 3: good.gateway.app.subscription.v1.AppSubscription.Posters:type_name -> good.middleware.app.good1.poster.v1.PosterInfo
	19, // 4: good.gateway.app.subscription.v1.AppSubscription.DisplayNames:type_name -> good.middleware.app.good1.display.name.v1.DisplayNameInfo
	20, // 5: good.gateway.app.subscription.v1.AppSubscription.DisplayColors:type_name -> good.middleware.app.good1.display.color.v1.DisplayColorInfo
	21, // 6: good.gateway.app.subscription.v1.AppSubscription.Labels:type_name -> good.middleware.app.good1.label.v1.LabelInfo
	0,  // 7: good.gateway.app.subscription.v1.UpdateAppSubscriptionResponse.Info:type_name -> good.gateway.app.subscription.v1.AppSubscription
	0,  // 8: good.gateway.app.subscription.v1.GetAppSubscriptionResponse.Info:type_name -> good.gateway.app.subscription.v1.AppSubscription
	0,  // 9: good.gateway.app.subscription.v1.GetAppSubscriptionsResponse.Infos:type_name -> good.gateway.app.subscription.v1.AppSubscription
	0,  // 10: good.gateway.app.subscription.v1.AdminCreateAppSubscriptionResponse.Info:type_name -> good.gateway.app.subscription.v1.AppSubscription
	0,  // 11: good.gateway.app.subscription.v1.AdminUpdateAppSubscriptionResponse.Info:type_name -> good.gateway.app.subscription.v1.AppSubscription
	0,  // 12: good.gateway.app.subscription.v1.AdminGetAppSubscriptionsResponse.Infos:type_name -> good.gateway.app.subscription.v1.AppSubscription
	0,  // 13: good.gateway.app.subscription.v1.AdminDeleteAppSubscriptionResponse.Info:type_name -> good.gateway.app.subscription.v1.AppSubscription
	1,  // 14: good.gateway.app.subscription.v1.Gateway.UpdateAppSubscription:input_type -> good.gateway.app.subscription.v1.UpdateAppSubscriptionRequest
	3,  // 15: good.gateway.app.subscription.v1.Gateway.GetAppSubscription:input_type -> good.gateway.app.subscription.v1.GetAppSubscriptionRequest
	5,  // 16: good.gateway.app.subscription.v1.Gateway.GetAppSubscriptions:input_type -> good.gateway.app.subscription.v1.GetAppSubscriptionsRequest
	7,  // 17: good.gateway.app.subscription.v1.Gateway.AdminCreateAppSubscription:input_type -> good.gateway.app.subscription.v1.AdminCreateAppSubscriptionRequest
	9,  // 18: good.gateway.app.subscription.v1.Gateway.AdminUpdateAppSubscription:input_type -> good.gateway.app.subscription.v1.AdminUpdateAppSubscriptionRequest
	11, // 19: good.gateway.app.subscription.v1.Gateway.AdminGetAppSubscriptions:input_type -> good.gateway.app.subscription.v1.AdminGetAppSubscriptionsRequest
	13, // 20: good.gateway.app.subscription.v1.Gateway.AdminDeleteAppSubscription:input_type -> good.gateway.app.subscription.v1.AdminDeleteAppSubscriptionRequest
	2,  // 21: good.gateway.app.subscription.v1.Gateway.UpdateAppSubscription:output_type -> good.gateway.app.subscription.v1.UpdateAppSubscriptionResponse
	4,  // 22: good.gateway.app.subscription.v1.Gateway.GetAppSubscription:output_type -> good.gateway.app.subscription.v1.GetAppSubscriptionResponse
	6,  // 23: good.gateway.app.subscription.v1.Gateway.GetAppSubscriptions:output_type -> good.gateway.app.subscription.v1.GetAppSubscriptionsResponse
	8,  // 24: good.gateway.app.subscription.v1.Gateway.AdminCreateAppSubscription:output_type -> good.gateway.app.subscription.v1.AdminCreateAppSubscriptionResponse
	10, // 25: good.gateway.app.subscription.v1.Gateway.AdminUpdateAppSubscription:output_type -> good.gateway.app.subscription.v1.AdminUpdateAppSubscriptionResponse
	12, // 26: good.gateway.app.subscription.v1.Gateway.AdminGetAppSubscriptions:output_type -> good.gateway.app.subscription.v1.AdminGetAppSubscriptionsResponse
	14, // 27: good.gateway.app.subscription.v1.Gateway.AdminDeleteAppSubscription:output_type -> good.gateway.app.subscription.v1.AdminDeleteAppSubscriptionResponse
	21, // [21:28] is the sub-list for method output_type
	14, // [14:21] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_good_gateway_v1_app_subscription_subscription_proto_init() }
func file_good_gateway_v1_app_subscription_subscription_proto_init() {
	if File_good_gateway_v1_app_subscription_subscription_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppSubscriptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppSubscriptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreateAppSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreateAppSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdateAppSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdateAppSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminGetAppSubscriptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminGetAppSubscriptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeleteAppSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeleteAppSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_good_gateway_v1_app_subscription_subscription_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_good_gateway_v1_app_subscription_subscription_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_good_gateway_v1_app_subscription_subscription_proto_goTypes,
		DependencyIndexes: file_good_gateway_v1_app_subscription_subscription_proto_depIdxs,
		MessageInfos:      file_good_gateway_v1_app_subscription_subscription_proto_msgTypes,
	}.Build()
	File_good_gateway_v1_app_subscription_subscription_proto = out.File
	file_good_gateway_v1_app_subscription_subscription_proto_rawDesc = nil
	file_good_gateway_v1_app_subscription_subscription_proto_goTypes = nil
	file_good_gateway_v1_app_subscription_subscription_proto_depIdxs = nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: good/gateway/v1/app/subscription/subscription.proto

package subscription

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_UpdateAppSubscription_FullMethodName      = "/good.gateway.app.subscription.v1.Gateway/UpdateAppSubscription"
	Gateway_GetAppSubscription_FullMethodName         = "/good.gateway.app.subscription.v1.Gateway/GetAppSubscription"
	Gateway_GetAppSubscriptions_FullMethodName        = "/good.gateway.app.subscription.v1.Gateway/GetAppSubscriptions"
	Gateway_AdminCreateAppSubscription_FullMethodName = "/good.gateway.app.subscription.v1.Gateway/AdminCreateAppSubscription"
	Gateway_AdminUpdateAppSubscription_FullMethodName = "/good.gateway.app.subscription.v1.Gateway/AdminUpdateAppSubscription"
	Gateway_AdminGetAppSubscriptions_FullMethodName   = "/good.gateway.app.subscription.v1.Gateway/AdminGetAppSubscriptions"
	Gateway_AdminDeleteAppSubscription_FullMethodName = "/good.gateway.app.subscription.v1.Gateway/AdminDeleteAppSubscription"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	UpdateAppSubscription(ctx context.Context, in *UpdateAppSubscriptionRequest, opts ...grpc.CallOption) (*UpdateAppSubscriptionResponse, error)
	GetAppSubscription(ctx context.Context, in *GetAppSubscriptionRequest, opts ...grpc.CallOption) (*GetAppSubscriptionResponse, error)
	GetAppSubscriptions(ctx context.Context, in *GetAppSubscriptionsRequest, opts ...grpc.CallOption) (*GetAppSubscriptionsResponse, error)
	// Run by church admin
	AdminCreateAppSubscription(ctx context.Context, in *AdminCreateAppSubscriptionRequest, opts ...grpc.CallOption) (*AdminCreateAppSubscriptionResponse, error)
	AdminUpdateAppSubscription(ctx context.Context, in *AdminUpdateAppSubscriptionRequest, opts ...grpc.CallOption) (*AdminUpdateAppSubscriptionResponse, error)
	AdminGetAppSubscriptions(ctx context.Context, in *AdminGetAppSubscriptionsRequest, opts ...grpc.CallOption) (*AdminGetAppSubscriptionsResponse, error)
	AdminDeleteAppSubscription(ctx context.Context, in *AdminDeleteAppSubscriptionRequest, opts ...grpc.CallOption) (*AdminDeleteAppSubscriptionResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) UpdateAppSubscription(ctx context.Context, in *UpdateAppSubscriptionRequest, opts ...grpc.CallOption) (*UpdateAppSubscriptionResponse, error) {
	out := new(UpdateAppSubscriptionResponse)
	err := c.cc.Invoke(ctx, Gateway_UpdateAppSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAppSubscription(ctx context.Context, in *GetAppSubscriptionRequest, opts ...grpc.CallOption) (*GetAppSubscriptionResponse, error) {
	out := new(GetAppSubscriptionResponse)
	err := c.cc.Invoke(ctx, Gateway_GetAppSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAppSubscriptions(ctx context.Context, in *GetAppSubscriptionsRequest, opts ...grpc.CallOption) (*GetAppSubscriptionsResponse, error) {
	out := new(GetAppSubscriptionsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetAppSubscriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminCreateAppSubscription(ctx context.Context, in *AdminCreateAppSubscriptionRequest, opts ...grpc.CallOption) (*AdminCreateAppSubscriptionResponse, error) {
	out := new(AdminCreateAppSubscriptionResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminCreateAppSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminUpdateAppSubscription(ctx context.Context, in *AdminUpdateAppSubscriptionRequest, opts ...grpc.CallOption) (*AdminUpdateAppSubscriptionResponse, error) {
	out := new(AdminUpdateAppSubscriptionResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminUpdateAppSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminGetAppSubscriptions(ctx context.Context, in *AdminGetAppSubscriptionsRequest, opts ...grpc.CallOption) (*AdminGetAppSubscriptionsResponse, error) {
	out := new(AdminGetAppSubscriptionsResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminGetAppSubscriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminDeleteAppSubscription(ctx context.Context, in *AdminDeleteAppSubscriptionRequest, opts ...grpc.CallOption) (*AdminDeleteAppSubscriptionResponse, error) {
	out := new(AdminDeleteAppSubscriptionResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminDeleteAppSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	UpdateAppSubscription(context.Context, *UpdateAppSubscriptionRequest) (*UpdateAppSubscriptionResponse, error)
	GetAppSubscription(context.Context, *GetAppSubscriptionRequest) (*GetAppSubscriptionResponse, error)
	GetAppSubscriptions(context.Context, *GetAppSubscriptionsRequest) (*GetAppSubscriptionsResponse, error)
	// Run by church admin
	AdminCreateAppSubscription(context.Context, *AdminCreateAppSubscriptionRequest) (*AdminCreateAppSubscriptionResponse, error)
	AdminUpdateAppSubscription(context.Context, *AdminUpdateAppSubscriptionRequest) (*AdminUpdateAppSubscriptionResponse, error)
	AdminGetAppSubscriptions(context.Context, *AdminGetAppSubscriptionsRequest) (*AdminGetAppSubscriptionsResponse, error)
	AdminDeleteAppSubscription(context.Context, *AdminDeleteAppSubscriptionRequest) (*AdminDeleteAppSubscriptionResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct{}

func (UnimplementedGatewayServer) UpdateAppSubscription(context.Context, *UpdateAppSubscriptionRequest) (*UpdateAppSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppSubscription not implemented")
}

func (UnimplementedGatewayServer) GetAppSubscription(context.Context, *GetAppSubscriptionRequest) (*GetAppSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppSubscription not implemented")
}

func (UnimplementedGatewayServer) GetAppSubscriptions(context.Context, *GetAppSubscriptionsRequest) (*GetAppSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppSubscriptions not implemented")
}

func (UnimplementedGatewayServer) AdminCreateAppSubscription(context.Context, *AdminCreateAppSubscriptionRequest) (*AdminCreateAppSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateAppSubscription not implemented")
}

func (UnimplementedGatewayServer) AdminUpdateAppSubscription(context.Context, *AdminUpdateAppSubscriptionRequest) (*AdminUpdateAppSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateAppSubscription not implemented")
}

func (UnimplementedGatewayServer) AdminGetAppSubscriptions(context.Context, *AdminGetAppSubscriptionsRequest) (*AdminGetAppSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetAppSubscriptions not implemented")
}

func (UnimplementedGatewayServer) AdminDeleteAppSubscription(context.Context, *AdminDeleteAppSubscriptionRequest) (*AdminDeleteAppSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteAppSubscription not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_UpdateAppSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateAppSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateAppSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateAppSubscription(ctx, req.(*UpdateAppSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAppSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAppSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetAppSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAppSubscription(ctx, req.(*GetAppSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAppSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAppSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetAppSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAppSubscriptions(ctx, req.(*GetAppSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminCreateAppSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateAppSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCreateAppSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminCreateAppSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCreateAppSubscription(ctx, req.(*AdminCreateAppSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminUpdateAppSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateAppSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminUpdateAppSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminUpdateAppSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminUpdateAppSubscription(ctx, req.(*AdminUpdateAppSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminGetAppSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetAppSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminGetAppSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminGetAppSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminGetAppSubscriptions(ctx, req.(*AdminGetAppSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminDeleteAppSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteAppSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminDeleteAppSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminDeleteAppSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminDeleteAppSubscription(ctx, req.(*AdminDeleteAppSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.gateway.app.subscription.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateAppSubscription",
			Handler:    _Gateway_UpdateAppSubscription_Handler,
		},
		{
			MethodName: "GetAppSubscription",
			Handler:    _Gateway_GetAppSubscription_Handler,
		},
		{
			MethodName: "GetAppSubscriptions",
			Handler:    _Gateway_GetAppSubscriptions_Handler,
		},
		{
			MethodName: "AdminCreateAppSubscription",
			Handler:    _Gateway_AdminCreateAppSubscription_Handler,
		},
		{
			MethodName: "AdminUpdateAppSubscription",
			Handler:    _Gateway_AdminUpdateAppSubscription_Handler,
		},
		{
			MethodName: "AdminGetAppSubscriptions",
			Handler:    _Gateway_AdminGetAppSubscriptions_Handler,
		},
		{
			MethodName: "AdminDeleteAppSubscription",
			Handler:    _Gateway_AdminDeleteAppSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "good/gateway/v1/app/subscription/subscription.proto",
}

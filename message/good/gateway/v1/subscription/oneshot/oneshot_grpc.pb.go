// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: good/gateway/v1/subscription/oneshot/oneshot.proto

package oneshot

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_AdminCreateOneShot_FullMethodName = "/good.gateway.subscription.oneshot.v1.Gateway/AdminCreateOneShot"
	Gateway_AdminUpdateOneShot_FullMethodName = "/good.gateway.subscription.oneshot.v1.Gateway/AdminUpdateOneShot"
	Gateway_GetOneShot_FullMethodName         = "/good.gateway.subscription.oneshot.v1.Gateway/GetOneShot"
	Gateway_GetOneShots_FullMethodName        = "/good.gateway.subscription.oneshot.v1.Gateway/GetOneShots"
	Gateway_AdminDeleteOneShot_FullMethodName = "/good.gateway.subscription.oneshot.v1.Gateway/AdminDeleteOneShot"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	AdminCreateOneShot(ctx context.Context, in *AdminCreateOneShotRequest, opts ...grpc.CallOption) (*AdminCreateOneShotResponse, error)
	AdminUpdateOneShot(ctx context.Context, in *AdminUpdateOneShotRequest, opts ...grpc.CallOption) (*AdminUpdateOneShotResponse, error)
	GetOneShot(ctx context.Context, in *GetOneShotRequest, opts ...grpc.CallOption) (*GetOneShotResponse, error)
	GetOneShots(ctx context.Context, in *GetOneShotsRequest, opts ...grpc.CallOption) (*GetOneShotsResponse, error)
	AdminDeleteOneShot(ctx context.Context, in *AdminDeleteOneShotRequest, opts ...grpc.CallOption) (*AdminDeleteOneShotResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) AdminCreateOneShot(ctx context.Context, in *AdminCreateOneShotRequest, opts ...grpc.CallOption) (*AdminCreateOneShotResponse, error) {
	out := new(AdminCreateOneShotResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminCreateOneShot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminUpdateOneShot(ctx context.Context, in *AdminUpdateOneShotRequest, opts ...grpc.CallOption) (*AdminUpdateOneShotResponse, error) {
	out := new(AdminUpdateOneShotResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminUpdateOneShot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetOneShot(ctx context.Context, in *GetOneShotRequest, opts ...grpc.CallOption) (*GetOneShotResponse, error) {
	out := new(GetOneShotResponse)
	err := c.cc.Invoke(ctx, Gateway_GetOneShot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetOneShots(ctx context.Context, in *GetOneShotsRequest, opts ...grpc.CallOption) (*GetOneShotsResponse, error) {
	out := new(GetOneShotsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetOneShots_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminDeleteOneShot(ctx context.Context, in *AdminDeleteOneShotRequest, opts ...grpc.CallOption) (*AdminDeleteOneShotResponse, error) {
	out := new(AdminDeleteOneShotResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminDeleteOneShot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	AdminCreateOneShot(context.Context, *AdminCreateOneShotRequest) (*AdminCreateOneShotResponse, error)
	AdminUpdateOneShot(context.Context, *AdminUpdateOneShotRequest) (*AdminUpdateOneShotResponse, error)
	GetOneShot(context.Context, *GetOneShotRequest) (*GetOneShotResponse, error)
	GetOneShots(context.Context, *GetOneShotsRequest) (*GetOneShotsResponse, error)
	AdminDeleteOneShot(context.Context, *AdminDeleteOneShotRequest) (*AdminDeleteOneShotResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct{}

func (UnimplementedGatewayServer) AdminCreateOneShot(context.Context, *AdminCreateOneShotRequest) (*AdminCreateOneShotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateOneShot not implemented")
}

func (UnimplementedGatewayServer) AdminUpdateOneShot(context.Context, *AdminUpdateOneShotRequest) (*AdminUpdateOneShotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateOneShot not implemented")
}

func (UnimplementedGatewayServer) GetOneShot(context.Context, *GetOneShotRequest) (*GetOneShotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneShot not implemented")
}

func (UnimplementedGatewayServer) GetOneShots(context.Context, *GetOneShotsRequest) (*GetOneShotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneShots not implemented")
}

func (UnimplementedGatewayServer) AdminDeleteOneShot(context.Context, *AdminDeleteOneShotRequest) (*AdminDeleteOneShotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteOneShot not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_AdminCreateOneShot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateOneShotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCreateOneShot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminCreateOneShot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCreateOneShot(ctx, req.(*AdminCreateOneShotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminUpdateOneShot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateOneShotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminUpdateOneShot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminUpdateOneShot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminUpdateOneShot(ctx, req.(*AdminUpdateOneShotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetOneShot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneShotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetOneShot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetOneShot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetOneShot(ctx, req.(*GetOneShotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetOneShots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneShotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetOneShots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetOneShots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetOneShots(ctx, req.(*GetOneShotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminDeleteOneShot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteOneShotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminDeleteOneShot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminDeleteOneShot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminDeleteOneShot(ctx, req.(*AdminDeleteOneShotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.gateway.subscription.oneshot.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminCreateOneShot",
			Handler:    _Gateway_AdminCreateOneShot_Handler,
		},
		{
			MethodName: "AdminUpdateOneShot",
			Handler:    _Gateway_AdminUpdateOneShot_Handler,
		},
		{
			MethodName: "GetOneShot",
			Handler:    _Gateway_GetOneShot_Handler,
		},
		{
			MethodName: "GetOneShots",
			Handler:    _Gateway_GetOneShots_Handler,
		},
		{
			MethodName: "AdminDeleteOneShot",
			Handler:    _Gateway_AdminDeleteOneShot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "good/gateway/v1/subscription/oneshot/oneshot.proto",
}

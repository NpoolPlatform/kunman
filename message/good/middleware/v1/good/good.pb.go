// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: good/middleware/v1/good/good.proto

package good

import (
	v1 "github.com/NpoolPlatform/kunman/message/basetypes/good/v1"
	v11 "github.com/NpoolPlatform/kunman/message/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Good struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"good_type"
	GoodTypeStr string      `protobuf:"bytes,30,opt,name=GoodTypeStr,proto3" json:"GoodTypeStr,omitempty" sql:"good_type"`
	GoodType    v1.GoodType `protobuf:"varint,40,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType" json:"GoodType,omitempty"`
	// @inject_tag: sql:"benefit_type"
	BenefitTypeStr string         `protobuf:"bytes,50,opt,name=BenefitTypeStr,proto3" json:"BenefitTypeStr,omitempty" sql:"benefit_type"`
	BenefitType    v1.BenefitType `protobuf:"varint,60,opt,name=BenefitType,proto3,enum=basetypes.good.v1.BenefitType" json:"BenefitType,omitempty"`
	// @inject_tag: sql:"name"
	Name string `protobuf:"bytes,70,opt,name=Name,proto3" json:"Name,omitempty" sql:"name"`
	// @inject_tag: sql:"service_start_at"
	ServiceStartAt uint32 `protobuf:"varint,80,opt,name=ServiceStartAt,proto3" json:"ServiceStartAt,omitempty" sql:"service_start_at"`
	// @inject_tag: sql:"start_mode"
	StartModeStr string           `protobuf:"bytes,90,opt,name=StartModeStr,proto3" json:"StartModeStr,omitempty" sql:"start_mode"`
	StartMode    v1.GoodStartMode `protobuf:"varint,100,opt,name=StartMode,proto3,enum=basetypes.good.v1.GoodStartMode" json:"StartMode,omitempty"`
	// @inject_tag: sql:"test_only"
	TestOnly bool `protobuf:"varint,110,opt,name=TestOnly,proto3" json:"TestOnly,omitempty" sql:"test_only"`
	// @inject_tag: sql:"benefit_interval_hours"
	BenefitIntervalHours uint32 `protobuf:"varint,120,opt,name=BenefitIntervalHours,proto3" json:"BenefitIntervalHours,omitempty" sql:"benefit_interval_hours"`
	// @inject_tag: sql:"purchasable"
	Purchasable bool `protobuf:"varint,130,opt,name=Purchasable,proto3" json:"Purchasable,omitempty" sql:"purchasable"`
	// @inject_tag: sql:"online"
	Online bool `protobuf:"varint,140,opt,name=Online,proto3" json:"Online,omitempty" sql:"online"`
	// @inject_tag: sql:"state"
	StateStr string       `protobuf:"bytes,150,opt,name=StateStr,proto3" json:"StateStr,omitempty" sql:"state"`
	State    v1.GoodState `protobuf:"varint,151,opt,name=State,proto3,enum=basetypes.good.v1.GoodState" json:"State,omitempty"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *Good) Reset() {
	*x = Good{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_middleware_v1_good_good_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Good) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Good) ProtoMessage() {}

func (x *Good) ProtoReflect() protoreflect.Message {
	mi := &file_good_middleware_v1_good_good_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Good.ProtoReflect.Descriptor instead.
func (*Good) Descriptor() ([]byte, []int) {
	return file_good_middleware_v1_good_good_proto_rawDescGZIP(), []int{0}
}

func (x *Good) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Good) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *Good) GetGoodTypeStr() string {
	if x != nil {
		return x.GoodTypeStr
	}
	return ""
}

func (x *Good) GetGoodType() v1.GoodType {
	if x != nil {
		return x.GoodType
	}
	return v1.GoodType(0)
}

func (x *Good) GetBenefitTypeStr() string {
	if x != nil {
		return x.BenefitTypeStr
	}
	return ""
}

func (x *Good) GetBenefitType() v1.BenefitType {
	if x != nil {
		return x.BenefitType
	}
	return v1.BenefitType(0)
}

func (x *Good) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Good) GetServiceStartAt() uint32 {
	if x != nil {
		return x.ServiceStartAt
	}
	return 0
}

func (x *Good) GetStartModeStr() string {
	if x != nil {
		return x.StartModeStr
	}
	return ""
}

func (x *Good) GetStartMode() v1.GoodStartMode {
	if x != nil {
		return x.StartMode
	}
	return v1.GoodStartMode(0)
}

func (x *Good) GetTestOnly() bool {
	if x != nil {
		return x.TestOnly
	}
	return false
}

func (x *Good) GetBenefitIntervalHours() uint32 {
	if x != nil {
		return x.BenefitIntervalHours
	}
	return 0
}

func (x *Good) GetPurchasable() bool {
	if x != nil {
		return x.Purchasable
	}
	return false
}

func (x *Good) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *Good) GetStateStr() string {
	if x != nil {
		return x.StateStr
	}
	return ""
}

func (x *Good) GetState() v1.GoodState {
	if x != nil {
		return x.State
	}
	return v1.GoodState(0)
}

func (x *Good) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Good) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        *v11.Uint32Val      `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	IDs       *v11.Uint32SliceVal `protobuf:"bytes,20,opt,name=IDs,proto3,oneof" json:"IDs,omitempty"`
	EntID     *v11.StringVal      `protobuf:"bytes,30,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	EntIDs    *v11.StringSliceVal `protobuf:"bytes,40,opt,name=EntIDs,proto3,oneof" json:"EntIDs,omitempty"`
	GoodType  *v11.Uint32Val      `protobuf:"bytes,50,opt,name=GoodType,proto3,oneof" json:"GoodType,omitempty"`
	GoodTypes *v11.Uint32SliceVal `protobuf:"bytes,60,opt,name=GoodTypes,proto3,oneof" json:"GoodTypes,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_middleware_v1_good_good_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_good_middleware_v1_good_good_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_good_middleware_v1_good_good_proto_rawDescGZIP(), []int{1}
}

func (x *Conds) GetID() *v11.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetIDs() *v11.Uint32SliceVal {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *Conds) GetEntID() *v11.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetEntIDs() *v11.StringSliceVal {
	if x != nil {
		return x.EntIDs
	}
	return nil
}

func (x *Conds) GetGoodType() *v11.Uint32Val {
	if x != nil {
		return x.GoodType
	}
	return nil
}

func (x *Conds) GetGoodTypes() *v11.Uint32SliceVal {
	if x != nil {
		return x.GoodTypes
	}
	return nil
}

var File_good_middleware_v1_good_good_proto protoreflect.FileDescriptor

var file_good_middleware_v1_good_good_proto_rawDesc = []byte{
	0x0a, 0x22, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x1a, 0x18,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x05, 0x0a, 0x04, 0x47, 0x6f, 0x6f, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x6f, 0x6f,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x37, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x74, 0x72, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x12, 0x3e, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54,
	0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x54,
	0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18,
	0x78, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0b, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x17,
	0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x12, 0x33, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x93, 0x03, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x03, 0x49, 0x44,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x05,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x06, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x04,
	0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a,
	0x09, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x05,
	0x52, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x49, 0x44, 0x73, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x41, 0x5a,
	0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f,
	0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6b, 0x75, 0x6e, 0x6d, 0x61, 0x6e,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_good_middleware_v1_good_good_proto_rawDescOnce sync.Once
	file_good_middleware_v1_good_good_proto_rawDescData = file_good_middleware_v1_good_good_proto_rawDesc
)

func file_good_middleware_v1_good_good_proto_rawDescGZIP() []byte {
	file_good_middleware_v1_good_good_proto_rawDescOnce.Do(func() {
		file_good_middleware_v1_good_good_proto_rawDescData = protoimpl.X.CompressGZIP(file_good_middleware_v1_good_good_proto_rawDescData)
	})
	return file_good_middleware_v1_good_good_proto_rawDescData
}

var file_good_middleware_v1_good_good_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_good_middleware_v1_good_good_proto_goTypes = []interface{}{
	(*Good)(nil),               // 0: good.middleware.good1.v1.Good
	(*Conds)(nil),              // 1: good.middleware.good1.v1.Conds
	(v1.GoodType)(0),           // 2: basetypes.good.v1.GoodType
	(v1.BenefitType)(0),        // 3: basetypes.good.v1.BenefitType
	(v1.GoodStartMode)(0),      // 4: basetypes.good.v1.GoodStartMode
	(v1.GoodState)(0),          // 5: basetypes.good.v1.GoodState
	(*v11.Uint32Val)(nil),      // 6: basetypes.v1.Uint32Val
	(*v11.Uint32SliceVal)(nil), // 7: basetypes.v1.Uint32SliceVal
	(*v11.StringVal)(nil),      // 8: basetypes.v1.StringVal
	(*v11.StringSliceVal)(nil), // 9: basetypes.v1.StringSliceVal
}
var file_good_middleware_v1_good_good_proto_depIdxs = []int32{
	2,  // 0: good.middleware.good1.v1.Good.GoodType:type_name -> basetypes.good.v1.GoodType
	3,  // 1: good.middleware.good1.v1.Good.BenefitType:type_name -> basetypes.good.v1.BenefitType
	4,  // 2: good.middleware.good1.v1.Good.StartMode:type_name -> basetypes.good.v1.GoodStartMode
	5,  // 3: good.middleware.good1.v1.Good.State:type_name -> basetypes.good.v1.GoodState
	6,  // 4: good.middleware.good1.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	7,  // 5: good.middleware.good1.v1.Conds.IDs:type_name -> basetypes.v1.Uint32SliceVal
	8,  // 6: good.middleware.good1.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	9,  // 7: good.middleware.good1.v1.Conds.EntIDs:type_name -> basetypes.v1.StringSliceVal
	6,  // 8: good.middleware.good1.v1.Conds.GoodType:type_name -> basetypes.v1.Uint32Val
	7,  // 9: good.middleware.good1.v1.Conds.GoodTypes:type_name -> basetypes.v1.Uint32SliceVal
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_good_middleware_v1_good_good_proto_init() }
func file_good_middleware_v1_good_good_proto_init() {
	if File_good_middleware_v1_good_good_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_good_middleware_v1_good_good_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Good); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_good_middleware_v1_good_good_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_good_middleware_v1_good_good_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_good_middleware_v1_good_good_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_good_middleware_v1_good_good_proto_goTypes,
		DependencyIndexes: file_good_middleware_v1_good_good_proto_depIdxs,
		MessageInfos:      file_good_middleware_v1_good_good_proto_msgTypes,
	}.Build()
	File_good_middleware_v1_good_good_proto = out.File
	file_good_middleware_v1_good_good_proto_rawDesc = nil
	file_good_middleware_v1_good_good_proto_goTypes = nil
	file_good_middleware_v1_good_good_proto_depIdxs = nil
}

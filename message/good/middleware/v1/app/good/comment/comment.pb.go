// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: good/middleware/v1/app/good/comment/comment.proto

package comment

import (
	reflect "reflect"
	sync "sync"

	v1 "github.com/NpoolPlatform/kunman/message/basetypes/good/v1"
	v11 "github.com/NpoolPlatform/kunman/message/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            *uint32                   `protobuf:"varint,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID         *string                   `protobuf:"bytes,20,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	UserID        *string                   `protobuf:"bytes,30,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	AppGoodID     *string                   `protobuf:"bytes,40,opt,name=AppGoodID,proto3,oneof" json:"AppGoodID,omitempty"`
	OrderID       *string                   `protobuf:"bytes,50,opt,name=OrderID,proto3,oneof" json:"OrderID,omitempty"`
	Content       *string                   `protobuf:"bytes,60,opt,name=Content,proto3,oneof" json:"Content,omitempty"`
	ReplyToID     *string                   `protobuf:"bytes,70,opt,name=ReplyToID,proto3,oneof" json:"ReplyToID,omitempty"`
	Anonymous     *bool                     `protobuf:"varint,80,opt,name=Anonymous,proto3,oneof" json:"Anonymous,omitempty"`
	PurchasedUser *bool                     `protobuf:"varint,90,opt,name=PurchasedUser,proto3,oneof" json:"PurchasedUser,omitempty"`
	TrialUser     *bool                     `protobuf:"varint,100,opt,name=TrialUser,proto3,oneof" json:"TrialUser,omitempty"`
	Score         *string                   `protobuf:"bytes,110,opt,name=Score,proto3,oneof" json:"Score,omitempty"`
	Hide          *bool                     `protobuf:"varint,120,opt,name=Hide,proto3,oneof" json:"Hide,omitempty"`
	HideReason    *v1.GoodCommentHideReason `protobuf:"varint,130,opt,name=HideReason,proto3,enum=basetypes.good.v1.GoodCommentHideReason,oneof" json:"HideReason,omitempty"`
}

func (x *CommentReq) Reset() {
	*x = CommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_middleware_v1_app_good_comment_comment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentReq) ProtoMessage() {}

func (x *CommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_good_middleware_v1_app_good_comment_comment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentReq.ProtoReflect.Descriptor instead.
func (*CommentReq) Descriptor() ([]byte, []int) {
	return file_good_middleware_v1_app_good_comment_comment_proto_rawDescGZIP(), []int{0}
}

func (x *CommentReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *CommentReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *CommentReq) GetUserID() string {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return ""
}

func (x *CommentReq) GetAppGoodID() string {
	if x != nil && x.AppGoodID != nil {
		return *x.AppGoodID
	}
	return ""
}

func (x *CommentReq) GetOrderID() string {
	if x != nil && x.OrderID != nil {
		return *x.OrderID
	}
	return ""
}

func (x *CommentReq) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *CommentReq) GetReplyToID() string {
	if x != nil && x.ReplyToID != nil {
		return *x.ReplyToID
	}
	return ""
}

func (x *CommentReq) GetAnonymous() bool {
	if x != nil && x.Anonymous != nil {
		return *x.Anonymous
	}
	return false
}

func (x *CommentReq) GetPurchasedUser() bool {
	if x != nil && x.PurchasedUser != nil {
		return *x.PurchasedUser
	}
	return false
}

func (x *CommentReq) GetTrialUser() bool {
	if x != nil && x.TrialUser != nil {
		return *x.TrialUser
	}
	return false
}

func (x *CommentReq) GetScore() string {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return ""
}

func (x *CommentReq) GetHide() bool {
	if x != nil && x.Hide != nil {
		return *x.Hide
	}
	return false
}

func (x *CommentReq) GetHideReason() v1.GoodCommentHideReason {
	if x != nil && x.HideReason != nil {
		return *x.HideReason
	}
	return v1.GoodCommentHideReason(0)
}

type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,9,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"app_id"
	AppID string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty" sql:"app_id"`
	// @inject_tag: sql:"user_id"
	UserID string `protobuf:"bytes,30,opt,name=UserID,proto3" json:"UserID,omitempty" sql:"user_id"`
	// @inject_tag: sql:"app_good_id"
	AppGoodID string `protobuf:"bytes,40,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty" sql:"app_good_id"`
	// @inject_tag: sql:"good_name"
	GoodName string `protobuf:"bytes,50,opt,name=GoodName,proto3" json:"GoodName,omitempty" sql:"good_name"`
	// @inject_tag: sql:"order_id"
	OrderID string `protobuf:"bytes,60,opt,name=OrderID,proto3" json:"OrderID,omitempty" sql:"order_id"`
	// @inject_tag: sql:"content"
	Content string `protobuf:"bytes,70,opt,name=Content,proto3" json:"Content,omitempty" sql:"content"`
	// @inject_tag: sql:"reply_to_id"
	ReplyToID string `protobuf:"bytes,80,opt,name=ReplyToID,proto3" json:"ReplyToID,omitempty" sql:"reply_to_id"`
	// @inject_tag: sql:"good_id"
	GoodID string `protobuf:"bytes,90,opt,name=GoodID,proto3" json:"GoodID,omitempty" sql:"good_id"`
	// @inject_tag: sql:"anonymous"
	Anonymous bool `protobuf:"varint,100,opt,name=Anonymous,proto3" json:"Anonymous,omitempty" sql:"anonymous"`
	// @inject_tag: sql:"purchased_user"
	PurchasedUser bool `protobuf:"varint,110,opt,name=PurchasedUser,proto3" json:"PurchasedUser,omitempty" sql:"purchased_user"`
	// @inject_tag: sql:"trial_user"
	TrialUser bool `protobuf:"varint,120,opt,name=TrialUser,proto3" json:"TrialUser,omitempty" sql:"trial_user"`
	// @inject_tag: sql:"score"
	Score string `protobuf:"bytes,140,opt,name=Score,proto3" json:"Score,omitempty" sql:"score"`
	// @inject_tag: sql:"hide"
	Hide bool `protobuf:"varint,150,opt,name=Hide,proto3" json:"Hide,omitempty" sql:"hide"`
	// @inject_tag: sql:"hide_reason"
	HideReasonStr string                   `protobuf:"bytes,160,opt,name=HideReasonStr,proto3" json:"HideReasonStr,omitempty" sql:"hide_reason"`
	HideReason    v1.GoodCommentHideReason `protobuf:"varint,170,opt,name=HideReason,proto3,enum=basetypes.good.v1.GoodCommentHideReason" json:"HideReason,omitempty"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_middleware_v1_app_good_comment_comment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_good_middleware_v1_app_good_comment_comment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_good_middleware_v1_app_good_comment_comment_proto_rawDescGZIP(), []int{1}
}

func (x *Comment) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Comment) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *Comment) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *Comment) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Comment) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *Comment) GetGoodName() string {
	if x != nil {
		return x.GoodName
	}
	return ""
}

func (x *Comment) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *Comment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Comment) GetReplyToID() string {
	if x != nil {
		return x.ReplyToID
	}
	return ""
}

func (x *Comment) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *Comment) GetAnonymous() bool {
	if x != nil {
		return x.Anonymous
	}
	return false
}

func (x *Comment) GetPurchasedUser() bool {
	if x != nil {
		return x.PurchasedUser
	}
	return false
}

func (x *Comment) GetTrialUser() bool {
	if x != nil {
		return x.TrialUser
	}
	return false
}

func (x *Comment) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *Comment) GetHide() bool {
	if x != nil {
		return x.Hide
	}
	return false
}

func (x *Comment) GetHideReasonStr() string {
	if x != nil {
		return x.HideReasonStr
	}
	return ""
}

func (x *Comment) GetHideReason() v1.GoodCommentHideReason {
	if x != nil {
		return x.HideReason
	}
	return v1.GoodCommentHideReason(0)
}

func (x *Comment) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Comment) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         *v11.Uint32Val      `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID      *v11.StringVal      `protobuf:"bytes,20,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID      *v11.StringVal      `protobuf:"bytes,30,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	UserID     *v11.StringVal      `protobuf:"bytes,40,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	AppGoodID  *v11.StringVal      `protobuf:"bytes,50,opt,name=AppGoodID,proto3,oneof" json:"AppGoodID,omitempty"`
	AppGoodIDs *v11.StringSliceVal `protobuf:"bytes,60,opt,name=AppGoodIDs,proto3,oneof" json:"AppGoodIDs,omitempty"`
	OrderID    *v11.StringVal      `protobuf:"bytes,70,opt,name=OrderID,proto3,oneof" json:"OrderID,omitempty"`
	OrderIDs   *v11.StringSliceVal `protobuf:"bytes,80,opt,name=OrderIDs,proto3,oneof" json:"OrderIDs,omitempty"`
	GoodID     *v11.StringVal      `protobuf:"bytes,90,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_middleware_v1_app_good_comment_comment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_good_middleware_v1_app_good_comment_comment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_good_middleware_v1_app_good_comment_comment_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *v11.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetEntID() *v11.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetAppID() *v11.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetUserID() *v11.StringVal {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *Conds) GetAppGoodID() *v11.StringVal {
	if x != nil {
		return x.AppGoodID
	}
	return nil
}

func (x *Conds) GetAppGoodIDs() *v11.StringSliceVal {
	if x != nil {
		return x.AppGoodIDs
	}
	return nil
}

func (x *Conds) GetOrderID() *v11.StringVal {
	if x != nil {
		return x.OrderID
	}
	return nil
}

func (x *Conds) GetOrderIDs() *v11.StringSliceVal {
	if x != nil {
		return x.OrderIDs
	}
	return nil
}

func (x *Conds) GetGoodID() *v11.StringVal {
	if x != nil {
		return x.GoodID
	}
	return nil
}

var File_good_middleware_v1_app_good_comment_comment_proto protoreflect.FileDescriptor

var file_good_middleware_v1_app_good_comment_comment_proto_rawDesc = []byte{
	0x0a, 0x31, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x24, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x18, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x67,
	0x6f, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf2, 0x04, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x49, 0x44, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x09, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x0d,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x09, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x6e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0a, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x48, 0x69, 0x64, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x04,
	0x48, 0x69, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x0a, 0x48, 0x69, 0x64, 0x65, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x64, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x48, 0x0c, 0x52, 0x0a, 0x48, 0x69, 0x64, 0x65, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x54, 0x6f, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x41, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x6f, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x48, 0x69, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x48, 0x69, 0x64,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xbf, 0x04, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f,
	0x49, 0x44, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54,
	0x6f, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x5a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x18, 0x78, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x15, 0x0a,
	0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x13, 0x0a, 0x04, 0x48, 0x69, 0x64, 0x65, 0x18, 0x96, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x48, 0x69, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x48, 0x69, 0x64,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x48, 0x69, 0x64, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72,
	0x12, 0x49, 0x0a, 0x0a, 0x48, 0x69, 0x64, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0xaa,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x64, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x0a, 0x48, 0x69, 0x64, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe6, 0x04, 0x0a, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x48, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x3a, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x09, 0x41,
	0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0a, 0x41,
	0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x05, 0x52,
	0x0a, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x36,
	0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x06, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x73, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x07, 0x52, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18,
	0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x08,
	0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x47, 0x6f, 0x6f, 0x64,
	0x49, 0x44, 0x42, 0x4d, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6b,
	0x75, 0x6e, 0x6d, 0x61, 0x6e, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x67, 0x6f,
	0x6f, 0x64, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_good_middleware_v1_app_good_comment_comment_proto_rawDescOnce sync.Once
	file_good_middleware_v1_app_good_comment_comment_proto_rawDescData = file_good_middleware_v1_app_good_comment_comment_proto_rawDesc
)

func file_good_middleware_v1_app_good_comment_comment_proto_rawDescGZIP() []byte {
	file_good_middleware_v1_app_good_comment_comment_proto_rawDescOnce.Do(func() {
		file_good_middleware_v1_app_good_comment_comment_proto_rawDescData = protoimpl.X.CompressGZIP(file_good_middleware_v1_app_good_comment_comment_proto_rawDescData)
	})
	return file_good_middleware_v1_app_good_comment_comment_proto_rawDescData
}

var (
	file_good_middleware_v1_app_good_comment_comment_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
	file_good_middleware_v1_app_good_comment_comment_proto_goTypes  = []interface{}{
		(*CommentReq)(nil),            // 0: good.middleware.app.good1.comment.v1.CommentReq
		(*Comment)(nil),               // 1: good.middleware.app.good1.comment.v1.Comment
		(*Conds)(nil),                 // 2: good.middleware.app.good1.comment.v1.Conds
		(v1.GoodCommentHideReason)(0), // 3: basetypes.good.v1.GoodCommentHideReason
		(*v11.Uint32Val)(nil),         // 4: basetypes.v1.Uint32Val
		(*v11.StringVal)(nil),         // 5: basetypes.v1.StringVal
		(*v11.StringSliceVal)(nil),    // 6: basetypes.v1.StringSliceVal
	}
)
var file_good_middleware_v1_app_good_comment_comment_proto_depIdxs = []int32{
	3,  // 0: good.middleware.app.good1.comment.v1.CommentReq.HideReason:type_name -> basetypes.good.v1.GoodCommentHideReason
	3,  // 1: good.middleware.app.good1.comment.v1.Comment.HideReason:type_name -> basetypes.good.v1.GoodCommentHideReason
	4,  // 2: good.middleware.app.good1.comment.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	5,  // 3: good.middleware.app.good1.comment.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	5,  // 4: good.middleware.app.good1.comment.v1.Conds.AppID:type_name -> basetypes.v1.StringVal
	5,  // 5: good.middleware.app.good1.comment.v1.Conds.UserID:type_name -> basetypes.v1.StringVal
	5,  // 6: good.middleware.app.good1.comment.v1.Conds.AppGoodID:type_name -> basetypes.v1.StringVal
	6,  // 7: good.middleware.app.good1.comment.v1.Conds.AppGoodIDs:type_name -> basetypes.v1.StringSliceVal
	5,  // 8: good.middleware.app.good1.comment.v1.Conds.OrderID:type_name -> basetypes.v1.StringVal
	6,  // 9: good.middleware.app.good1.comment.v1.Conds.OrderIDs:type_name -> basetypes.v1.StringSliceVal
	5,  // 10: good.middleware.app.good1.comment.v1.Conds.GoodID:type_name -> basetypes.v1.StringVal
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_good_middleware_v1_app_good_comment_comment_proto_init() }
func file_good_middleware_v1_app_good_comment_comment_proto_init() {
	if File_good_middleware_v1_app_good_comment_comment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_good_middleware_v1_app_good_comment_comment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_good_middleware_v1_app_good_comment_comment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_good_middleware_v1_app_good_comment_comment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_good_middleware_v1_app_good_comment_comment_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_good_middleware_v1_app_good_comment_comment_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_good_middleware_v1_app_good_comment_comment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_good_middleware_v1_app_good_comment_comment_proto_goTypes,
		DependencyIndexes: file_good_middleware_v1_app_good_comment_comment_proto_depIdxs,
		MessageInfos:      file_good_middleware_v1_app_good_comment_comment_proto_msgTypes,
	}.Build()
	File_good_middleware_v1_app_good_comment_comment_proto = out.File
	file_good_middleware_v1_app_good_comment_comment_proto_rawDesc = nil
	file_good_middleware_v1_app_good_comment_comment_proto_goTypes = nil
	file_good_middleware_v1_app_good_comment_comment_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: good/middleware/v1/app/good/label/label.proto

package label

import (
	reflect "reflect"
	sync "sync"

	v1 "github.com/NpoolPlatform/kunman/message/basetypes/good/v1"
	v11 "github.com/NpoolPlatform/kunman/message/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LabelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           *uint32       `protobuf:"varint,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID        *string       `protobuf:"bytes,20,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppGoodID    *string       `protobuf:"bytes,30,opt,name=AppGoodID,proto3,oneof" json:"AppGoodID,omitempty"`
	Icon         *string       `protobuf:"bytes,40,opt,name=Icon,proto3,oneof" json:"Icon,omitempty"`
	IconBgColor  *string       `protobuf:"bytes,50,opt,name=IconBgColor,proto3,oneof" json:"IconBgColor,omitempty"`
	Label        *v1.GoodLabel `protobuf:"varint,60,opt,name=Label,proto3,enum=basetypes.good.v1.GoodLabel,oneof" json:"Label,omitempty"`
	LabelBgColor *string       `protobuf:"bytes,70,opt,name=LabelBgColor,proto3,oneof" json:"LabelBgColor,omitempty"`
	Index        *uint32       `protobuf:"varint,80,opt,name=Index,proto3,oneof" json:"Index,omitempty"`
}

func (x *LabelReq) Reset() {
	*x = LabelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_middleware_v1_app_good_label_label_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelReq) ProtoMessage() {}

func (x *LabelReq) ProtoReflect() protoreflect.Message {
	mi := &file_good_middleware_v1_app_good_label_label_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelReq.ProtoReflect.Descriptor instead.
func (*LabelReq) Descriptor() ([]byte, []int) {
	return file_good_middleware_v1_app_good_label_label_proto_rawDescGZIP(), []int{0}
}

func (x *LabelReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *LabelReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *LabelReq) GetAppGoodID() string {
	if x != nil && x.AppGoodID != nil {
		return *x.AppGoodID
	}
	return ""
}

func (x *LabelReq) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *LabelReq) GetIconBgColor() string {
	if x != nil && x.IconBgColor != nil {
		return *x.IconBgColor
	}
	return ""
}

func (x *LabelReq) GetLabel() v1.GoodLabel {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return v1.GoodLabel(0)
}

func (x *LabelReq) GetLabelBgColor() string {
	if x != nil && x.LabelBgColor != nil {
		return *x.LabelBgColor
	}
	return ""
}

func (x *LabelReq) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"app_id"
	AppID string `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty" sql:"app_id"`
	// @inject_tag: sql:"good_id"
	GoodID string `protobuf:"bytes,40,opt,name=GoodID,proto3" json:"GoodID,omitempty" sql:"good_id"`
	// @inject_tag: sql:"good_name"
	GoodName string `protobuf:"bytes,50,opt,name=GoodName,proto3" json:"GoodName,omitempty" sql:"good_name"`
	// @inject_tag: sql:"app_good_id"
	AppGoodID string `protobuf:"bytes,60,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty" sql:"app_good_id"`
	// @inject_tag: sql:"app_good_name"
	AppGoodName string `protobuf:"bytes,70,opt,name=AppGoodName,proto3" json:"AppGoodName,omitempty" sql:"app_good_name"`
	// @inject_tag: sql:"icon"
	Icon string `protobuf:"bytes,80,opt,name=Icon,proto3" json:"Icon,omitempty" sql:"icon"`
	// @inject_tag: sql:"icon_bg_color"
	IconBgColor string `protobuf:"bytes,90,opt,name=IconBgColor,proto3" json:"IconBgColor,omitempty" sql:"icon_bg_color"`
	// @inject_tag: sql:"label"
	LabelStr string       `protobuf:"bytes,100,opt,name=LabelStr,proto3" json:"LabelStr,omitempty" sql:"label"`
	Label    v1.GoodLabel `protobuf:"varint,110,opt,name=Label,proto3,enum=basetypes.good.v1.GoodLabel" json:"Label,omitempty"`
	// @inject_tag: sql:"label_bg_color"
	LabelBgColor string `protobuf:"bytes,120,opt,name=LabelBgColor,proto3" json:"LabelBgColor,omitempty" sql:"label_bg_color"`
	// @inject_tag: sql:"good_type"
	GoodTypeStr string      `protobuf:"bytes,130,opt,name=GoodTypeStr,proto3" json:"GoodTypeStr,omitempty" sql:"good_type"`
	GoodType    v1.GoodType `protobuf:"varint,140,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType" json:"GoodType,omitempty"`
	// @inject_tag: sql:"index"
	Index uint32 `protobuf:"varint,150,opt,name=Index,proto3" json:"Index,omitempty" sql:"index"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_middleware_v1_app_good_label_label_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_good_middleware_v1_app_good_label_label_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_good_middleware_v1_app_good_label_label_proto_rawDescGZIP(), []int{1}
}

func (x *Label) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Label) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *Label) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *Label) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *Label) GetGoodName() string {
	if x != nil {
		return x.GoodName
	}
	return ""
}

func (x *Label) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *Label) GetAppGoodName() string {
	if x != nil {
		return x.AppGoodName
	}
	return ""
}

func (x *Label) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Label) GetIconBgColor() string {
	if x != nil {
		return x.IconBgColor
	}
	return ""
}

func (x *Label) GetLabelStr() string {
	if x != nil {
		return x.LabelStr
	}
	return ""
}

func (x *Label) GetLabel() v1.GoodLabel {
	if x != nil {
		return x.Label
	}
	return v1.GoodLabel(0)
}

func (x *Label) GetLabelBgColor() string {
	if x != nil {
		return x.LabelBgColor
	}
	return ""
}

func (x *Label) GetGoodTypeStr() string {
	if x != nil {
		return x.GoodTypeStr
	}
	return ""
}

func (x *Label) GetGoodType() v1.GoodType {
	if x != nil {
		return x.GoodType
	}
	return v1.GoodType(0)
}

func (x *Label) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Label) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Label) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type LabelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"app_good_id"
	AppGoodID string `protobuf:"bytes,10,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty" sql:"app_good_id"`
	// @inject_tag: sql:"icon"
	Icon string `protobuf:"bytes,20,opt,name=Icon,proto3" json:"Icon,omitempty" sql:"icon"`
	// @inject_tag: sql:"icon_bg_color"
	IconBgColor string `protobuf:"bytes,30,opt,name=IconBgColor,proto3" json:"IconBgColor,omitempty" sql:"icon_bg_color"`
	// @inject_tag: sql:"label"
	LabelStr string       `protobuf:"bytes,40,opt,name=LabelStr,proto3" json:"LabelStr,omitempty" sql:"label"`
	Label    v1.GoodLabel `protobuf:"varint,50,opt,name=Label,proto3,enum=basetypes.good.v1.GoodLabel" json:"Label,omitempty"`
	// @inject_tag: sql:"label_bg_color"
	LabelBgColor string `protobuf:"bytes,60,opt,name=LabelBgColor,proto3" json:"LabelBgColor,omitempty" sql:"label_bg_color"`
	// @inject_tag: sql:"index"
	Index uint32 `protobuf:"varint,70,opt,name=Index,proto3" json:"Index,omitempty" sql:"index"`
}

func (x *LabelInfo) Reset() {
	*x = LabelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_middleware_v1_app_good_label_label_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelInfo) ProtoMessage() {}

func (x *LabelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_good_middleware_v1_app_good_label_label_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelInfo.ProtoReflect.Descriptor instead.
func (*LabelInfo) Descriptor() ([]byte, []int) {
	return file_good_middleware_v1_app_good_label_label_proto_rawDescGZIP(), []int{2}
}

func (x *LabelInfo) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *LabelInfo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *LabelInfo) GetIconBgColor() string {
	if x != nil {
		return x.IconBgColor
	}
	return ""
}

func (x *LabelInfo) GetLabelStr() string {
	if x != nil {
		return x.LabelStr
	}
	return ""
}

func (x *LabelInfo) GetLabel() v1.GoodLabel {
	if x != nil {
		return x.Label
	}
	return v1.GoodLabel(0)
}

func (x *LabelInfo) GetLabelBgColor() string {
	if x != nil {
		return x.LabelBgColor
	}
	return ""
}

func (x *LabelInfo) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         *v11.Uint32Val      `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID      *v11.StringVal      `protobuf:"bytes,20,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID      *v11.StringVal      `protobuf:"bytes,30,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	GoodID     *v11.StringVal      `protobuf:"bytes,40,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	GoodIDs    *v11.StringSliceVal `protobuf:"bytes,50,opt,name=GoodIDs,proto3,oneof" json:"GoodIDs,omitempty"`
	AppGoodID  *v11.StringVal      `protobuf:"bytes,60,opt,name=AppGoodID,proto3,oneof" json:"AppGoodID,omitempty"`
	AppGoodIDs *v11.StringSliceVal `protobuf:"bytes,70,opt,name=AppGoodIDs,proto3,oneof" json:"AppGoodIDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_middleware_v1_app_good_label_label_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_good_middleware_v1_app_good_label_label_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_good_middleware_v1_app_good_label_label_proto_rawDescGZIP(), []int{3}
}

func (x *Conds) GetID() *v11.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetEntID() *v11.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetAppID() *v11.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetGoodID() *v11.StringVal {
	if x != nil {
		return x.GoodID
	}
	return nil
}

func (x *Conds) GetGoodIDs() *v11.StringSliceVal {
	if x != nil {
		return x.GoodIDs
	}
	return nil
}

func (x *Conds) GetAppGoodID() *v11.StringVal {
	if x != nil {
		return x.AppGoodID
	}
	return nil
}

func (x *Conds) GetAppGoodIDs() *v11.StringSliceVal {
	if x != nil {
		return x.AppGoodIDs
	}
	return nil
}

var File_good_middleware_v1_app_good_label_label_proto protoreflect.FileDescriptor

var file_good_middleware_v1_app_good_label_label_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x22, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x1a, 0x18, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf7, 0x02, 0x0a,
	0x08, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x49, 0x63, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x49, 0x63,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x49, 0x63, 0x6f, 0x6e, 0x42, 0x67, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x49, 0x63,
	0x6f, 0x6e, 0x42, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x05,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x48, 0x05, 0x52, 0x05, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x67,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0c, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x42, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52,
	0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x41,
	0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x49, 0x63, 0x6f,
	0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x49, 0x63, 0x6f, 0x6e, 0x42, 0x67, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x93, 0x04, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x63, 0x6f, 0x6e, 0x42, 0x67, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x63, 0x6f, 0x6e, 0x42,
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53,
	0x74, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53,
	0x74, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52,
	0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42,
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x42, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0b, 0x47, 0x6f,
	0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x38, 0x0a,
	0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x47,
	0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe9, 0x01, 0x0a,
	0x09, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41,
	0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x49, 0x63, 0x6f, 0x6e, 0x42, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x49, 0x63, 0x6f, 0x6e, 0x42, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x22,
	0x0a, 0x0c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x67, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xde, 0x03, 0x0a, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64,
	0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x48, 0x03, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3b,
	0x0a, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52,
	0x07, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x09, 0x41,
	0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x05, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x06, 0x52, 0x0a, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49,
	0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x41,
	0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x42, 0x4b, 0x5a, 0x49, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6b, 0x75, 0x6e, 0x6d, 0x61, 0x6e, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64,
	0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_good_middleware_v1_app_good_label_label_proto_rawDescOnce sync.Once
	file_good_middleware_v1_app_good_label_label_proto_rawDescData = file_good_middleware_v1_app_good_label_label_proto_rawDesc
)

func file_good_middleware_v1_app_good_label_label_proto_rawDescGZIP() []byte {
	file_good_middleware_v1_app_good_label_label_proto_rawDescOnce.Do(func() {
		file_good_middleware_v1_app_good_label_label_proto_rawDescData = protoimpl.X.CompressGZIP(file_good_middleware_v1_app_good_label_label_proto_rawDescData)
	})
	return file_good_middleware_v1_app_good_label_label_proto_rawDescData
}

var (
	file_good_middleware_v1_app_good_label_label_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
	file_good_middleware_v1_app_good_label_label_proto_goTypes  = []interface{}{
		(*LabelReq)(nil),           // 0: good.middleware.app.good1.label.v1.LabelReq
		(*Label)(nil),              // 1: good.middleware.app.good1.label.v1.Label
		(*LabelInfo)(nil),          // 2: good.middleware.app.good1.label.v1.LabelInfo
		(*Conds)(nil),              // 3: good.middleware.app.good1.label.v1.Conds
		(v1.GoodLabel)(0),          // 4: basetypes.good.v1.GoodLabel
		(v1.GoodType)(0),           // 5: basetypes.good.v1.GoodType
		(*v11.Uint32Val)(nil),      // 6: basetypes.v1.Uint32Val
		(*v11.StringVal)(nil),      // 7: basetypes.v1.StringVal
		(*v11.StringSliceVal)(nil), // 8: basetypes.v1.StringSliceVal
	}
)
var file_good_middleware_v1_app_good_label_label_proto_depIdxs = []int32{
	4,  // 0: good.middleware.app.good1.label.v1.LabelReq.Label:type_name -> basetypes.good.v1.GoodLabel
	4,  // 1: good.middleware.app.good1.label.v1.Label.Label:type_name -> basetypes.good.v1.GoodLabel
	5,  // 2: good.middleware.app.good1.label.v1.Label.GoodType:type_name -> basetypes.good.v1.GoodType
	4,  // 3: good.middleware.app.good1.label.v1.LabelInfo.Label:type_name -> basetypes.good.v1.GoodLabel
	6,  // 4: good.middleware.app.good1.label.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	7,  // 5: good.middleware.app.good1.label.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	7,  // 6: good.middleware.app.good1.label.v1.Conds.AppID:type_name -> basetypes.v1.StringVal
	7,  // 7: good.middleware.app.good1.label.v1.Conds.GoodID:type_name -> basetypes.v1.StringVal
	8,  // 8: good.middleware.app.good1.label.v1.Conds.GoodIDs:type_name -> basetypes.v1.StringSliceVal
	7,  // 9: good.middleware.app.good1.label.v1.Conds.AppGoodID:type_name -> basetypes.v1.StringVal
	8,  // 10: good.middleware.app.good1.label.v1.Conds.AppGoodIDs:type_name -> basetypes.v1.StringSliceVal
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_good_middleware_v1_app_good_label_label_proto_init() }
func file_good_middleware_v1_app_good_label_label_proto_init() {
	if File_good_middleware_v1_app_good_label_label_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_good_middleware_v1_app_good_label_label_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_good_middleware_v1_app_good_label_label_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_good_middleware_v1_app_good_label_label_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_good_middleware_v1_app_good_label_label_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_good_middleware_v1_app_good_label_label_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_good_middleware_v1_app_good_label_label_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_good_middleware_v1_app_good_label_label_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_good_middleware_v1_app_good_label_label_proto_goTypes,
		DependencyIndexes: file_good_middleware_v1_app_good_label_label_proto_depIdxs,
		MessageInfos:      file_good_middleware_v1_app_good_label_label_proto_msgTypes,
	}.Build()
	File_good_middleware_v1_app_good_label_label_proto = out.File
	file_good_middleware_v1_app_good_label_label_proto_rawDesc = nil
	file_good_middleware_v1_app_good_label_label_proto_goTypes = nil
	file_good_middleware_v1_app_good_label_label_proto_depIdxs = nil
}

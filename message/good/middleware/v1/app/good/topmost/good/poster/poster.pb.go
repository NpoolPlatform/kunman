// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: good/middleware/v1/app/good/topmost/good/poster/poster.proto

package poster

import (
	v1 "github.com/NpoolPlatform/kunman/message/basetypes/good/v1"
	v11 "github.com/NpoolPlatform/kunman/message/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PosterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            *uint32 `protobuf:"varint,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID         *string `protobuf:"bytes,20,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	TopMostGoodID *string `protobuf:"bytes,30,opt,name=TopMostGoodID,proto3,oneof" json:"TopMostGoodID,omitempty"`
	Poster        *string `protobuf:"bytes,40,opt,name=Poster,proto3,oneof" json:"Poster,omitempty"`
	Index         *uint32 `protobuf:"varint,50,opt,name=Index,proto3,oneof" json:"Index,omitempty"`
}

func (x *PosterReq) Reset() {
	*x = PosterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PosterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PosterReq) ProtoMessage() {}

func (x *PosterReq) ProtoReflect() protoreflect.Message {
	mi := &file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PosterReq.ProtoReflect.Descriptor instead.
func (*PosterReq) Descriptor() ([]byte, []int) {
	return file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_rawDescGZIP(), []int{0}
}

func (x *PosterReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *PosterReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *PosterReq) GetTopMostGoodID() string {
	if x != nil && x.TopMostGoodID != nil {
		return *x.TopMostGoodID
	}
	return ""
}

func (x *PosterReq) GetPoster() string {
	if x != nil && x.Poster != nil {
		return *x.Poster
	}
	return ""
}

func (x *PosterReq) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type Poster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"app_id"
	AppID string `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty" sql:"app_id"`
	// @inject_tag: sql:"top_most_id"
	TopMostID string `protobuf:"bytes,40,opt,name=TopMostID,proto3" json:"TopMostID,omitempty" sql:"top_most_id"`
	// @inject_tag: sql:"top_most_type"
	TopMostTypeStr string             `protobuf:"bytes,50,opt,name=TopMostTypeStr,proto3" json:"TopMostTypeStr,omitempty" sql:"top_most_type"`
	TopMostType    v1.GoodTopMostType `protobuf:"varint,60,opt,name=TopMostType,proto3,enum=basetypes.good.v1.GoodTopMostType" json:"TopMostType,omitempty"`
	// @inject_tag: sql:"top_most_title"
	TopMostTitle string `protobuf:"bytes,70,opt,name=TopMostTitle,proto3" json:"TopMostTitle,omitempty" sql:"top_most_title"`
	// @inject_tag: sql:"top_most_message"
	TopMostMessage string `protobuf:"bytes,80,opt,name=TopMostMessage,proto3" json:"TopMostMessage,omitempty" sql:"top_most_message"`
	// @inject_tag: sql:"top_most_target_url"
	TopMostTargetUrl string `protobuf:"bytes,90,opt,name=TopMostTargetUrl,proto3" json:"TopMostTargetUrl,omitempty" sql:"top_most_target_url"`
	// @inject_tag: sql:"top_most_good_id"
	TopMostGoodID string `protobuf:"bytes,100,opt,name=TopMostGoodID,proto3" json:"TopMostGoodID,omitempty" sql:"top_most_good_id"`
	// @inject_tag: sql:"app_good_id"
	AppGoodID string `protobuf:"bytes,110,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty" sql:"app_good_id"`
	// @inject_tag: sql:"app_good_name"
	AppGoodName string `protobuf:"bytes,120,opt,name=AppGoodName,proto3" json:"AppGoodName,omitempty" sql:"app_good_name"`
	// @inject_tag: sql:"poster"
	Poster string `protobuf:"bytes,130,opt,name=Poster,proto3" json:"Poster,omitempty" sql:"poster"`
	// @inject_tag: sql:"index"
	Index uint32 `protobuf:"varint,140,opt,name=Index,proto3" json:"Index,omitempty" sql:"index"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *Poster) Reset() {
	*x = Poster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Poster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Poster) ProtoMessage() {}

func (x *Poster) ProtoReflect() protoreflect.Message {
	mi := &file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Poster.ProtoReflect.Descriptor instead.
func (*Poster) Descriptor() ([]byte, []int) {
	return file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_rawDescGZIP(), []int{1}
}

func (x *Poster) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Poster) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *Poster) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *Poster) GetTopMostID() string {
	if x != nil {
		return x.TopMostID
	}
	return ""
}

func (x *Poster) GetTopMostTypeStr() string {
	if x != nil {
		return x.TopMostTypeStr
	}
	return ""
}

func (x *Poster) GetTopMostType() v1.GoodTopMostType {
	if x != nil {
		return x.TopMostType
	}
	return v1.GoodTopMostType(0)
}

func (x *Poster) GetTopMostTitle() string {
	if x != nil {
		return x.TopMostTitle
	}
	return ""
}

func (x *Poster) GetTopMostMessage() string {
	if x != nil {
		return x.TopMostMessage
	}
	return ""
}

func (x *Poster) GetTopMostTargetUrl() string {
	if x != nil {
		return x.TopMostTargetUrl
	}
	return ""
}

func (x *Poster) GetTopMostGoodID() string {
	if x != nil {
		return x.TopMostGoodID
	}
	return ""
}

func (x *Poster) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *Poster) GetAppGoodName() string {
	if x != nil {
		return x.AppGoodName
	}
	return ""
}

func (x *Poster) GetPoster() string {
	if x != nil {
		return x.Poster
	}
	return ""
}

func (x *Poster) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Poster) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Poster) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type PosterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"poster"
	Poster string `protobuf:"bytes,10,opt,name=Poster,proto3" json:"Poster,omitempty" sql:"poster"`
	// @inject_tag: sql:"index"
	Index uint32 `protobuf:"varint,20,opt,name=Index,proto3" json:"Index,omitempty" sql:"index"`
}

func (x *PosterInfo) Reset() {
	*x = PosterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PosterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PosterInfo) ProtoMessage() {}

func (x *PosterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PosterInfo.ProtoReflect.Descriptor instead.
func (*PosterInfo) Descriptor() ([]byte, []int) {
	return file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_rawDescGZIP(), []int{2}
}

func (x *PosterInfo) GetPoster() string {
	if x != nil {
		return x.Poster
	}
	return ""
}

func (x *PosterInfo) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             *v11.Uint32Val      `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID          *v11.StringVal      `protobuf:"bytes,20,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID          *v11.StringVal      `protobuf:"bytes,30,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	TopMostGoodID  *v11.StringVal      `protobuf:"bytes,40,opt,name=TopMostGoodID,proto3,oneof" json:"TopMostGoodID,omitempty"`
	TopMostGoodIDs *v11.StringSliceVal `protobuf:"bytes,50,opt,name=TopMostGoodIDs,proto3,oneof" json:"TopMostGoodIDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_rawDescGZIP(), []int{3}
}

func (x *Conds) GetID() *v11.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetEntID() *v11.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetAppID() *v11.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetTopMostGoodID() *v11.StringVal {
	if x != nil {
		return x.TopMostGoodID
	}
	return nil
}

func (x *Conds) GetTopMostGoodIDs() *v11.StringSliceVal {
	if x != nil {
		return x.TopMostGoodIDs
	}
	return nil
}

var File_good_middleware_v1_app_good_topmost_good_poster_poster_proto protoreflect.FileDescriptor

var file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_rawDesc = []byte{
	0x0a, 0x3c, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x74, 0x6f,
	0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x31,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73,
	0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x1a, 0x18, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x01, 0x0a, 0x09, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x54, 0x6f, 0x70, 0x4d,
	0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0d, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x04, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x9c, 0x04, 0x0a, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f,
	0x70, 0x4d, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54,
	0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x6f, 0x70, 0x4d,
	0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72,
	0x12, 0x44, 0x0a, 0x0b, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x6f,
	0x70, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x54, 0x6f, 0x70, 0x4d, 0x6f,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73,
	0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x6f,
	0x70, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x6f,
	0x70, 0x4d, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x54, 0x6f,
	0x70, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x24,
	0x0a, 0x0d, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x82,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x15, 0x0a,
	0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x3a, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xec,
	0x02, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52,
	0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01,
	0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x48, 0x02, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x42,
	0x0a, 0x0d, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x03,
	0x52, 0x0d, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x49, 0x0a, 0x0e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x0e, 0x54, 0x6f, 0x70, 0x4d,
	0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x54, 0x6f, 0x70,
	0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x54,
	0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x42, 0x52, 0x5a,
	0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f,
	0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x74, 0x6f,
	0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_rawDescOnce sync.Once
	file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_rawDescData = file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_rawDesc
)

func file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_rawDescGZIP() []byte {
	file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_rawDescOnce.Do(func() {
		file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_rawDescData = protoimpl.X.CompressGZIP(file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_rawDescData)
	})
	return file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_rawDescData
}

var file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_goTypes = []interface{}{
	(*PosterReq)(nil),          // 0: good.middleware.app.good1.topmost.good2.poster.v1.PosterReq
	(*Poster)(nil),             // 1: good.middleware.app.good1.topmost.good2.poster.v1.Poster
	(*PosterInfo)(nil),         // 2: good.middleware.app.good1.topmost.good2.poster.v1.PosterInfo
	(*Conds)(nil),              // 3: good.middleware.app.good1.topmost.good2.poster.v1.Conds
	(v1.GoodTopMostType)(0),    // 4: basetypes.good.v1.GoodTopMostType
	(*v11.Uint32Val)(nil),      // 5: basetypes.v1.Uint32Val
	(*v11.StringVal)(nil),      // 6: basetypes.v1.StringVal
	(*v11.StringSliceVal)(nil), // 7: basetypes.v1.StringSliceVal
}
var file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_depIdxs = []int32{
	4, // 0: good.middleware.app.good1.topmost.good2.poster.v1.Poster.TopMostType:type_name -> basetypes.good.v1.GoodTopMostType
	5, // 1: good.middleware.app.good1.topmost.good2.poster.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	6, // 2: good.middleware.app.good1.topmost.good2.poster.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	6, // 3: good.middleware.app.good1.topmost.good2.poster.v1.Conds.AppID:type_name -> basetypes.v1.StringVal
	6, // 4: good.middleware.app.good1.topmost.good2.poster.v1.Conds.TopMostGoodID:type_name -> basetypes.v1.StringVal
	7, // 5: good.middleware.app.good1.topmost.good2.poster.v1.Conds.TopMostGoodIDs:type_name -> basetypes.v1.StringSliceVal
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_init() }
func file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_init() {
	if File_good_middleware_v1_app_good_topmost_good_poster_poster_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PosterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Poster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PosterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_goTypes,
		DependencyIndexes: file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_depIdxs,
		MessageInfos:      file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_msgTypes,
	}.Build()
	File_good_middleware_v1_app_good_topmost_good_poster_poster_proto = out.File
	file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_rawDesc = nil
	file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_goTypes = nil
	file_good_middleware_v1_app_good_topmost_good_poster_poster_proto_depIdxs = nil
}

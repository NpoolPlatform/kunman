// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: good/middleware/v1/app/subscription/subscription.proto

package subscription

import (
	v1 "github.com/NpoolPlatform/kunman/message/basetypes/good/v1"
	v11 "github.com/NpoolPlatform/kunman/message/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubscriptionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        *uint32 `protobuf:"varint,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID     *string `protobuf:"bytes,20,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID     *string `protobuf:"bytes,30,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	GoodID    *string `protobuf:"bytes,40,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	AppGoodID *string `protobuf:"bytes,50,opt,name=AppGoodID,proto3,oneof" json:"AppGoodID,omitempty"`
	Name      *string `protobuf:"bytes,70,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	Banner    *string `protobuf:"bytes,80,opt,name=Banner,proto3,oneof" json:"Banner,omitempty"`
	USDPrice  *string `protobuf:"bytes,90,opt,name=USDPrice,proto3,oneof" json:"USDPrice,omitempty"`
	// For payment channel like paypal
	ProductID     *string `protobuf:"bytes,100,opt,name=ProductID,proto3,oneof" json:"ProductID,omitempty"`
	TrialUnits    *uint32 `protobuf:"varint,110,opt,name=TrialUnits,proto3,oneof" json:"TrialUnits,omitempty"`
	TrialUSDPrice *string `protobuf:"bytes,120,opt,name=TrialUSDPrice,proto3,oneof" json:"TrialUSDPrice,omitempty"`
	// For specific local market
	PriceFiatID    *string `protobuf:"bytes,130,opt,name=PriceFiatID,proto3,oneof" json:"PriceFiatID,omitempty"`
	FiatPrice      *string `protobuf:"bytes,140,opt,name=FiatPrice,proto3,oneof" json:"FiatPrice,omitempty"`
	TrialFiatPrice *string `protobuf:"bytes,150,opt,name=TrialFiatPrice,proto3,oneof" json:"TrialFiatPrice,omitempty"`
}

func (x *SubscriptionReq) Reset() {
	*x = SubscriptionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_middleware_v1_app_subscription_subscription_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionReq) ProtoMessage() {}

func (x *SubscriptionReq) ProtoReflect() protoreflect.Message {
	mi := &file_good_middleware_v1_app_subscription_subscription_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionReq.ProtoReflect.Descriptor instead.
func (*SubscriptionReq) Descriptor() ([]byte, []int) {
	return file_good_middleware_v1_app_subscription_subscription_proto_rawDescGZIP(), []int{0}
}

func (x *SubscriptionReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *SubscriptionReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *SubscriptionReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *SubscriptionReq) GetGoodID() string {
	if x != nil && x.GoodID != nil {
		return *x.GoodID
	}
	return ""
}

func (x *SubscriptionReq) GetAppGoodID() string {
	if x != nil && x.AppGoodID != nil {
		return *x.AppGoodID
	}
	return ""
}

func (x *SubscriptionReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SubscriptionReq) GetBanner() string {
	if x != nil && x.Banner != nil {
		return *x.Banner
	}
	return ""
}

func (x *SubscriptionReq) GetUSDPrice() string {
	if x != nil && x.USDPrice != nil {
		return *x.USDPrice
	}
	return ""
}

func (x *SubscriptionReq) GetProductID() string {
	if x != nil && x.ProductID != nil {
		return *x.ProductID
	}
	return ""
}

func (x *SubscriptionReq) GetTrialUnits() uint32 {
	if x != nil && x.TrialUnits != nil {
		return *x.TrialUnits
	}
	return 0
}

func (x *SubscriptionReq) GetTrialUSDPrice() string {
	if x != nil && x.TrialUSDPrice != nil {
		return *x.TrialUSDPrice
	}
	return ""
}

func (x *SubscriptionReq) GetPriceFiatID() string {
	if x != nil && x.PriceFiatID != nil {
		return *x.PriceFiatID
	}
	return ""
}

func (x *SubscriptionReq) GetFiatPrice() string {
	if x != nil && x.FiatPrice != nil {
		return *x.FiatPrice
	}
	return ""
}

func (x *SubscriptionReq) GetTrialFiatPrice() string {
	if x != nil && x.TrialFiatPrice != nil {
		return *x.TrialFiatPrice
	}
	return ""
}

type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"app_id"
	AppID string `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty" sql:"app_id"`
	// @inject_tag: sql:"good_id"
	GoodID string `protobuf:"bytes,40,opt,name=GoodID,proto3" json:"GoodID,omitempty" sql:"good_id"`
	// @inject_tag: sql:"app_good_id"
	AppGoodID string `protobuf:"bytes,50,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty" sql:"app_good_id"`
	// @inject_tag: sql:"product_page"
	ProductPage string `protobuf:"bytes,60,opt,name=ProductPage,proto3" json:"ProductPage,omitempty" sql:"product_page"`
	// @inject_tag: sql:"good_type"
	GoodTypeStr string      `protobuf:"bytes,70,opt,name=GoodTypeStr,proto3" json:"GoodTypeStr,omitempty" sql:"good_type"`
	GoodType    v1.GoodType `protobuf:"varint,80,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType" json:"GoodType,omitempty"`
	// @inject_tag: sql:"good_name"
	GoodName string `protobuf:"bytes,90,opt,name=GoodName,proto3" json:"GoodName,omitempty" sql:"good_name"`
	// @inject_tag: sql:"app_good_name"
	AppGoodName string `protobuf:"bytes,100,opt,name=AppGoodName,proto3" json:"AppGoodName,omitempty" sql:"app_good_name"`
	// @inject_tag: sql:"duration_display_type"
	DurationDisplayTypeStr string              `protobuf:"bytes,110,opt,name=DurationDisplayTypeStr,proto3" json:"DurationDisplayTypeStr,omitempty" sql:"duration_display_type"`
	DurationDisplayType    v1.GoodDurationType `protobuf:"varint,120,opt,name=DurationDisplayType,proto3,enum=basetypes.good.v1.GoodDurationType" json:"DurationDisplayType,omitempty"`
	// @inject_tag: sql:"banner"
	Banner string `protobuf:"bytes,150,opt,name=Banner,proto3" json:"Banner,omitempty" sql:"banner"`
	// @inject_tag: sql:"duration_units"
	DurationUnits uint32 `protobuf:"varint,160,opt,name=DurationUnits,proto3" json:"DurationUnits,omitempty" sql:"duration_units"`
	// @inject_tag: sql:"duration_quota"
	DurationQuota uint32 `protobuf:"varint,170,opt,name=DurationQuota,proto3" json:"DurationQuota,omitempty" sql:"duration_quota"`
	// @inject_tag: sql:"daily_bonus_quota"
	DailyBonusQuota uint32 `protobuf:"varint,180,opt,name=DailyBonusQuota,proto3" json:"DailyBonusQuota,omitempty" sql:"daily_bonus_quota"`
	// @inject_tag: sql:"usd_price"
	USDPrice string `protobuf:"bytes,190,opt,name=USDPrice,proto3" json:"USDPrice,omitempty" sql:"usd_price"`
	// @inject_tag: sql:"product_id"
	ProductID string `protobuf:"bytes,200,opt,name=ProductID,proto3" json:"ProductID,omitempty" sql:"product_id"`
	// @inject_tag: sql:"trail_units"
	TrialUnits uint32 `protobuf:"varint,210,opt,name=TrialUnits,proto3" json:"TrialUnits,omitempty" sql:"trail_units"`
	// @inject_tag: sql:"trial_usd_price"
	TrialUSDPrice string `protobuf:"bytes,220,opt,name=TrialUSDPrice,proto3" json:"TrialUSDPrice,omitempty" sql:"trial_usd_price"`
	// @inject_tag: sql:"price_fiat_id"
	PriceFiatID string `protobuf:"bytes,300,opt,name=PriceFiatID,proto3" json:"PriceFiatID,omitempty" sql:"price_fiat_id"`
	// @inject_tag: sql:"fiat_price"
	FiatPrice string `protobuf:"bytes,310,opt,name=FiatPrice,proto3" json:"FiatPrice,omitempty" sql:"fiat_price"`
	// @inject_tag: sql:"trial_fiat_price"
	TrialFiatPrice string `protobuf:"bytes,320,opt,name=TrialFiatPrice,proto3" json:"TrialFiatPrice,omitempty" sql:"trial_fiat_price"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_middleware_v1_app_subscription_subscription_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_good_middleware_v1_app_subscription_subscription_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_good_middleware_v1_app_subscription_subscription_proto_rawDescGZIP(), []int{1}
}

func (x *Subscription) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Subscription) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *Subscription) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *Subscription) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *Subscription) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *Subscription) GetProductPage() string {
	if x != nil {
		return x.ProductPage
	}
	return ""
}

func (x *Subscription) GetGoodTypeStr() string {
	if x != nil {
		return x.GoodTypeStr
	}
	return ""
}

func (x *Subscription) GetGoodType() v1.GoodType {
	if x != nil {
		return x.GoodType
	}
	return v1.GoodType(0)
}

func (x *Subscription) GetGoodName() string {
	if x != nil {
		return x.GoodName
	}
	return ""
}

func (x *Subscription) GetAppGoodName() string {
	if x != nil {
		return x.AppGoodName
	}
	return ""
}

func (x *Subscription) GetDurationDisplayTypeStr() string {
	if x != nil {
		return x.DurationDisplayTypeStr
	}
	return ""
}

func (x *Subscription) GetDurationDisplayType() v1.GoodDurationType {
	if x != nil {
		return x.DurationDisplayType
	}
	return v1.GoodDurationType(0)
}

func (x *Subscription) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *Subscription) GetDurationUnits() uint32 {
	if x != nil {
		return x.DurationUnits
	}
	return 0
}

func (x *Subscription) GetDurationQuota() uint32 {
	if x != nil {
		return x.DurationQuota
	}
	return 0
}

func (x *Subscription) GetDailyBonusQuota() uint32 {
	if x != nil {
		return x.DailyBonusQuota
	}
	return 0
}

func (x *Subscription) GetUSDPrice() string {
	if x != nil {
		return x.USDPrice
	}
	return ""
}

func (x *Subscription) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *Subscription) GetTrialUnits() uint32 {
	if x != nil {
		return x.TrialUnits
	}
	return 0
}

func (x *Subscription) GetTrialUSDPrice() string {
	if x != nil {
		return x.TrialUSDPrice
	}
	return ""
}

func (x *Subscription) GetPriceFiatID() string {
	if x != nil {
		return x.PriceFiatID
	}
	return ""
}

func (x *Subscription) GetFiatPrice() string {
	if x != nil {
		return x.FiatPrice
	}
	return ""
}

func (x *Subscription) GetTrialFiatPrice() string {
	if x != nil {
		return x.TrialFiatPrice
	}
	return ""
}

func (x *Subscription) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Subscription) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         *v11.Uint32Val      `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	IDs        *v11.Uint32SliceVal `protobuf:"bytes,20,opt,name=IDs,proto3,oneof" json:"IDs,omitempty"`
	AppID      *v11.StringVal      `protobuf:"bytes,30,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	AppIDs     *v11.StringSliceVal `protobuf:"bytes,40,opt,name=AppIDs,proto3,oneof" json:"AppIDs,omitempty"`
	EntID      *v11.StringVal      `protobuf:"bytes,50,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	EntIDs     *v11.StringSliceVal `protobuf:"bytes,60,opt,name=EntIDs,proto3,oneof" json:"EntIDs,omitempty"`
	GoodID     *v11.StringVal      `protobuf:"bytes,70,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	GoodIDs    *v11.StringSliceVal `protobuf:"bytes,80,opt,name=GoodIDs,proto3,oneof" json:"GoodIDs,omitempty"`
	AppGoodID  *v11.StringVal      `protobuf:"bytes,90,opt,name=AppGoodID,proto3,oneof" json:"AppGoodID,omitempty"`
	AppGoodIDs *v11.StringSliceVal `protobuf:"bytes,100,opt,name=AppGoodIDs,proto3,oneof" json:"AppGoodIDs,omitempty"`
	GoodType   *v11.Uint32Val      `protobuf:"bytes,120,opt,name=GoodType,proto3,oneof" json:"GoodType,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_good_middleware_v1_app_subscription_subscription_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_good_middleware_v1_app_subscription_subscription_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_good_middleware_v1_app_subscription_subscription_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *v11.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetIDs() *v11.Uint32SliceVal {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *Conds) GetAppID() *v11.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetAppIDs() *v11.StringSliceVal {
	if x != nil {
		return x.AppIDs
	}
	return nil
}

func (x *Conds) GetEntID() *v11.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetEntIDs() *v11.StringSliceVal {
	if x != nil {
		return x.EntIDs
	}
	return nil
}

func (x *Conds) GetGoodID() *v11.StringVal {
	if x != nil {
		return x.GoodID
	}
	return nil
}

func (x *Conds) GetGoodIDs() *v11.StringSliceVal {
	if x != nil {
		return x.GoodIDs
	}
	return nil
}

func (x *Conds) GetAppGoodID() *v11.StringVal {
	if x != nil {
		return x.AppGoodID
	}
	return nil
}

func (x *Conds) GetAppGoodIDs() *v11.StringSliceVal {
	if x != nil {
		return x.AppGoodIDs
	}
	return nil
}

func (x *Conds) GetGoodType() *v11.Uint32Val {
	if x != nil {
		return x.GoodType
	}
	return nil
}

var File_good_middleware_v1_app_subscription_subscription_proto protoreflect.FileDescriptor

var file_good_middleware_v1_app_subscription_subscription_proto_rawDesc = []byte{
	0x0a, 0x36, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1d, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x05, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x55,
	0x53, 0x44, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x08, 0x55, 0x53, 0x44, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x08, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x6e, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x53, 0x44,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0d, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x55, 0x53, 0x44, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x46, 0x69, 0x61, 0x74, 0x49, 0x44, 0x18, 0x82,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x46, 0x69,
	0x61, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x09, 0x46, 0x69, 0x61, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x09, 0x46,
	0x69, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x96, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x61,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x55, 0x53, 0x44, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x53, 0x44, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x46, 0x69, 0x61, 0x74, 0x49, 0x44, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x46, 0x69, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x89,
	0x07, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x74, 0x72, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x37, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x74, 0x72, 0x12, 0x55, 0x0a, 0x13, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0d, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0xaa, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x12, 0x29, 0x0a, 0x0f, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b, 0x0a,
	0x08, 0x55, 0x53, 0x44, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x55, 0x53, 0x44, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x0a, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0d, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x55, 0x53, 0x44, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0xdc, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x53, 0x44, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x21, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x46, 0x69, 0x61, 0x74, 0x49, 0x44,
	0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x46, 0x69,
	0x61, 0x74, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x09, 0x46, 0x69, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x61, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x61, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x46, 0x69, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xee, 0x05, 0x0a, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52,
	0x03, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48,
	0x02, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x06, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x04,
	0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x05, 0x52, 0x06, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x06,
	0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x07, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x07, 0x52, 0x07, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x48, 0x08, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x09, 0x52, 0x0a, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x48, 0x0a, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x49, 0x44, 0x73,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x49, 0x5a, 0x47, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6b, 0x75, 0x6e, 0x6d, 0x61, 0x6e, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_good_middleware_v1_app_subscription_subscription_proto_rawDescOnce sync.Once
	file_good_middleware_v1_app_subscription_subscription_proto_rawDescData = file_good_middleware_v1_app_subscription_subscription_proto_rawDesc
)

func file_good_middleware_v1_app_subscription_subscription_proto_rawDescGZIP() []byte {
	file_good_middleware_v1_app_subscription_subscription_proto_rawDescOnce.Do(func() {
		file_good_middleware_v1_app_subscription_subscription_proto_rawDescData = protoimpl.X.CompressGZIP(file_good_middleware_v1_app_subscription_subscription_proto_rawDescData)
	})
	return file_good_middleware_v1_app_subscription_subscription_proto_rawDescData
}

var file_good_middleware_v1_app_subscription_subscription_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_good_middleware_v1_app_subscription_subscription_proto_goTypes = []interface{}{
	(*SubscriptionReq)(nil),    // 0: good.middleware.app.subscription.v1.SubscriptionReq
	(*Subscription)(nil),       // 1: good.middleware.app.subscription.v1.Subscription
	(*Conds)(nil),              // 2: good.middleware.app.subscription.v1.Conds
	(v1.GoodType)(0),           // 3: basetypes.good.v1.GoodType
	(v1.GoodDurationType)(0),   // 4: basetypes.good.v1.GoodDurationType
	(*v11.Uint32Val)(nil),      // 5: basetypes.v1.Uint32Val
	(*v11.Uint32SliceVal)(nil), // 6: basetypes.v1.Uint32SliceVal
	(*v11.StringVal)(nil),      // 7: basetypes.v1.StringVal
	(*v11.StringSliceVal)(nil), // 8: basetypes.v1.StringSliceVal
}
var file_good_middleware_v1_app_subscription_subscription_proto_depIdxs = []int32{
	3,  // 0: good.middleware.app.subscription.v1.Subscription.GoodType:type_name -> basetypes.good.v1.GoodType
	4,  // 1: good.middleware.app.subscription.v1.Subscription.DurationDisplayType:type_name -> basetypes.good.v1.GoodDurationType
	5,  // 2: good.middleware.app.subscription.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	6,  // 3: good.middleware.app.subscription.v1.Conds.IDs:type_name -> basetypes.v1.Uint32SliceVal
	7,  // 4: good.middleware.app.subscription.v1.Conds.AppID:type_name -> basetypes.v1.StringVal
	8,  // 5: good.middleware.app.subscription.v1.Conds.AppIDs:type_name -> basetypes.v1.StringSliceVal
	7,  // 6: good.middleware.app.subscription.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	8,  // 7: good.middleware.app.subscription.v1.Conds.EntIDs:type_name -> basetypes.v1.StringSliceVal
	7,  // 8: good.middleware.app.subscription.v1.Conds.GoodID:type_name -> basetypes.v1.StringVal
	8,  // 9: good.middleware.app.subscription.v1.Conds.GoodIDs:type_name -> basetypes.v1.StringSliceVal
	7,  // 10: good.middleware.app.subscription.v1.Conds.AppGoodID:type_name -> basetypes.v1.StringVal
	8,  // 11: good.middleware.app.subscription.v1.Conds.AppGoodIDs:type_name -> basetypes.v1.StringSliceVal
	5,  // 12: good.middleware.app.subscription.v1.Conds.GoodType:type_name -> basetypes.v1.Uint32Val
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_good_middleware_v1_app_subscription_subscription_proto_init() }
func file_good_middleware_v1_app_subscription_subscription_proto_init() {
	if File_good_middleware_v1_app_subscription_subscription_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_good_middleware_v1_app_subscription_subscription_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_good_middleware_v1_app_subscription_subscription_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_good_middleware_v1_app_subscription_subscription_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_good_middleware_v1_app_subscription_subscription_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_good_middleware_v1_app_subscription_subscription_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_good_middleware_v1_app_subscription_subscription_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_good_middleware_v1_app_subscription_subscription_proto_goTypes,
		DependencyIndexes: file_good_middleware_v1_app_subscription_subscription_proto_depIdxs,
		MessageInfos:      file_good_middleware_v1_app_subscription_subscription_proto_msgTypes,
	}.Build()
	File_good_middleware_v1_app_subscription_subscription_proto = out.File
	file_good_middleware_v1_app_subscription_subscription_proto_rawDesc = nil
	file_good_middleware_v1_app_subscription_subscription_proto_goTypes = nil
	file_good_middleware_v1_app_subscription_subscription_proto_depIdxs = nil
}

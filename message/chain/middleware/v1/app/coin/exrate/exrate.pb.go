// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: chain/middleware/v1/app/coin/exrate/exrate.proto

package exchangerate

import (
	v1 "github.com/NpoolPlatform/kunman/message/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExchangeRateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            *uint32  `protobuf:"varint,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID         *string  `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID         *string  `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	CoinTypeID    *string  `protobuf:"bytes,30,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	MarketValue   *string  `protobuf:"bytes,40,opt,name=MarketValue,proto3,oneof" json:"MarketValue,omitempty"`
	SettleValue   *string  `protobuf:"bytes,50,opt,name=SettleValue,proto3,oneof" json:"SettleValue,omitempty"`
	SettlePercent *uint32  `protobuf:"varint,60,opt,name=SettlePercent,proto3,oneof" json:"SettlePercent,omitempty"`
	SettleTips    []string `protobuf:"bytes,61,rep,name=SettleTips,proto3" json:"SettleTips,omitempty"`
	Setter        *string  `protobuf:"bytes,70,opt,name=Setter,proto3,oneof" json:"Setter,omitempty"`
	DeletedAt     *uint32  `protobuf:"varint,80,opt,name=DeletedAt,proto3,oneof" json:"DeletedAt,omitempty"`
}

func (x *ExchangeRateReq) Reset() {
	*x = ExchangeRateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_middleware_v1_app_coin_exrate_exrate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRateReq) ProtoMessage() {}

func (x *ExchangeRateReq) ProtoReflect() protoreflect.Message {
	mi := &file_chain_middleware_v1_app_coin_exrate_exrate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRateReq.ProtoReflect.Descriptor instead.
func (*ExchangeRateReq) Descriptor() ([]byte, []int) {
	return file_chain_middleware_v1_app_coin_exrate_exrate_proto_rawDescGZIP(), []int{0}
}

func (x *ExchangeRateReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *ExchangeRateReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *ExchangeRateReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *ExchangeRateReq) GetCoinTypeID() string {
	if x != nil && x.CoinTypeID != nil {
		return *x.CoinTypeID
	}
	return ""
}

func (x *ExchangeRateReq) GetMarketValue() string {
	if x != nil && x.MarketValue != nil {
		return *x.MarketValue
	}
	return ""
}

func (x *ExchangeRateReq) GetSettleValue() string {
	if x != nil && x.SettleValue != nil {
		return *x.SettleValue
	}
	return ""
}

func (x *ExchangeRateReq) GetSettlePercent() uint32 {
	if x != nil && x.SettlePercent != nil {
		return *x.SettlePercent
	}
	return 0
}

func (x *ExchangeRateReq) GetSettleTips() []string {
	if x != nil {
		return x.SettleTips
	}
	return nil
}

func (x *ExchangeRateReq) GetSetter() string {
	if x != nil && x.Setter != nil {
		return *x.Setter
	}
	return ""
}

func (x *ExchangeRateReq) GetDeletedAt() uint32 {
	if x != nil && x.DeletedAt != nil {
		return *x.DeletedAt
	}
	return 0
}

type ExchangeRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,9,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"app_id"
	AppID string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty" sql:"app_id"`
	// @inject_tag: sql:"coin_type_id"
	CoinTypeID string `protobuf:"bytes,30,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty" sql:"coin_type_id"`
	// @inject_tag: sql:"market_value"
	MarketValue string `protobuf:"bytes,40,opt,name=MarketValue,proto3" json:"MarketValue,omitempty" sql:"market_value"`
	// @inject_tag: sql:"settle_value"
	SettleValue string `protobuf:"bytes,50,opt,name=SettleValue,proto3" json:"SettleValue,omitempty" sql:"settle_value"`
	// @inject_tag: sql:"settle_percent"
	SettlePercent uint32 `protobuf:"varint,60,opt,name=SettlePercent,proto3" json:"SettlePercent,omitempty" sql:"settle_percent"`
	// @inject_tag: sql:"settle_tips"
	SettleTipsStr string   `protobuf:"bytes,62,opt,name=SettleTipsStr,proto3" json:"SettleTipsStr,omitempty" sql:"settle_tips"`
	SettleTips    []string `protobuf:"bytes,61,rep,name=SettleTips,proto3" json:"SettleTips,omitempty"`
	// @inject_tag: sql:"setter"
	Setter string `protobuf:"bytes,70,opt,name=Setter,proto3" json:"Setter,omitempty" sql:"setter"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,80,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,90,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *ExchangeRate) Reset() {
	*x = ExchangeRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_middleware_v1_app_coin_exrate_exrate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRate) ProtoMessage() {}

func (x *ExchangeRate) ProtoReflect() protoreflect.Message {
	mi := &file_chain_middleware_v1_app_coin_exrate_exrate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRate.ProtoReflect.Descriptor instead.
func (*ExchangeRate) Descriptor() ([]byte, []int) {
	return file_chain_middleware_v1_app_coin_exrate_exrate_proto_rawDescGZIP(), []int{1}
}

func (x *ExchangeRate) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ExchangeRate) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *ExchangeRate) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *ExchangeRate) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *ExchangeRate) GetMarketValue() string {
	if x != nil {
		return x.MarketValue
	}
	return ""
}

func (x *ExchangeRate) GetSettleValue() string {
	if x != nil {
		return x.SettleValue
	}
	return ""
}

func (x *ExchangeRate) GetSettlePercent() uint32 {
	if x != nil {
		return x.SettlePercent
	}
	return 0
}

func (x *ExchangeRate) GetSettleTipsStr() string {
	if x != nil {
		return x.SettleTipsStr
	}
	return ""
}

func (x *ExchangeRate) GetSettleTips() []string {
	if x != nil {
		return x.SettleTips
	}
	return nil
}

func (x *ExchangeRate) GetSetter() string {
	if x != nil {
		return x.Setter
	}
	return ""
}

func (x *ExchangeRate) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ExchangeRate) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID      *v1.StringVal `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID      *v1.StringVal `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	CoinTypeID *v1.StringVal `protobuf:"bytes,30,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_middleware_v1_app_coin_exrate_exrate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_chain_middleware_v1_app_coin_exrate_exrate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_chain_middleware_v1_app_coin_exrate_exrate_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetEntID() *v1.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetAppID() *v1.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetCoinTypeID() *v1.StringVal {
	if x != nil {
		return x.CoinTypeID
	}
	return nil
}

var File_chain_middleware_v1_app_coin_exrate_exrate_proto protoreflect.FileDescriptor

var file_chain_middleware_v1_app_coin_exrate_exrate_proto_rawDesc = []byte{
	0x0a, 0x30, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x65,
	0x78, 0x72, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x29, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x18, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf, 0x03, 0x0a, 0x0f, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x06, 0x52, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69,
	0x70, 0x73, 0x18, 0x3d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x54, 0x69, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x46,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x53, 0x65, 0x74, 0x74, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xee, 0x02, 0x0a, 0x0c, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x70, 0x73, 0x53, 0x74,
	0x72, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54,
	0x69, 0x70, 0x73, 0x53, 0x74, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x54, 0x69, 0x70, 0x73, 0x18, 0x3d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x54, 0x69, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd0, 0x01, 0x0a, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x05,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x48, 0x01, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0a,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x0a, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x53, 0x5a,
	0x51, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f,
	0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6b, 0x75, 0x6e, 0x6d, 0x61, 0x6e,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70,
	0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chain_middleware_v1_app_coin_exrate_exrate_proto_rawDescOnce sync.Once
	file_chain_middleware_v1_app_coin_exrate_exrate_proto_rawDescData = file_chain_middleware_v1_app_coin_exrate_exrate_proto_rawDesc
)

func file_chain_middleware_v1_app_coin_exrate_exrate_proto_rawDescGZIP() []byte {
	file_chain_middleware_v1_app_coin_exrate_exrate_proto_rawDescOnce.Do(func() {
		file_chain_middleware_v1_app_coin_exrate_exrate_proto_rawDescData = protoimpl.X.CompressGZIP(file_chain_middleware_v1_app_coin_exrate_exrate_proto_rawDescData)
	})
	return file_chain_middleware_v1_app_coin_exrate_exrate_proto_rawDescData
}

var file_chain_middleware_v1_app_coin_exrate_exrate_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_chain_middleware_v1_app_coin_exrate_exrate_proto_goTypes = []interface{}{
	(*ExchangeRateReq)(nil), // 0: chain.middleware.app.coin.exchangerate.v1.ExchangeRateReq
	(*ExchangeRate)(nil),    // 1: chain.middleware.app.coin.exchangerate.v1.ExchangeRate
	(*Conds)(nil),           // 2: chain.middleware.app.coin.exchangerate.v1.Conds
	(*v1.StringVal)(nil),    // 3: basetypes.v1.StringVal
}
var file_chain_middleware_v1_app_coin_exrate_exrate_proto_depIdxs = []int32{
	3, // 0: chain.middleware.app.coin.exchangerate.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	3, // 1: chain.middleware.app.coin.exchangerate.v1.Conds.AppID:type_name -> basetypes.v1.StringVal
	3, // 2: chain.middleware.app.coin.exchangerate.v1.Conds.CoinTypeID:type_name -> basetypes.v1.StringVal
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_chain_middleware_v1_app_coin_exrate_exrate_proto_init() }
func file_chain_middleware_v1_app_coin_exrate_exrate_proto_init() {
	if File_chain_middleware_v1_app_coin_exrate_exrate_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chain_middleware_v1_app_coin_exrate_exrate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_middleware_v1_app_coin_exrate_exrate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_middleware_v1_app_coin_exrate_exrate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chain_middleware_v1_app_coin_exrate_exrate_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_chain_middleware_v1_app_coin_exrate_exrate_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chain_middleware_v1_app_coin_exrate_exrate_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chain_middleware_v1_app_coin_exrate_exrate_proto_goTypes,
		DependencyIndexes: file_chain_middleware_v1_app_coin_exrate_exrate_proto_depIdxs,
		MessageInfos:      file_chain_middleware_v1_app_coin_exrate_exrate_proto_msgTypes,
	}.Build()
	File_chain_middleware_v1_app_coin_exrate_exrate_proto = out.File
	file_chain_middleware_v1_app_coin_exrate_exrate_proto_rawDesc = nil
	file_chain_middleware_v1_app_coin_exrate_exrate_proto_goTypes = nil
	file_chain_middleware_v1_app_coin_exrate_exrate_proto_depIdxs = nil
}

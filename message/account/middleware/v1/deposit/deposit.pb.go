// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: account/middleware/v1/deposit/deposit.proto

package deposit

import (
	v11 "github.com/NpoolPlatform/kunman/message/basetypes/v1"
	v1 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            *uint32             `protobuf:"varint,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID         *string             `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID         *string             `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	UserID        *string             `protobuf:"bytes,30,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	CoinTypeID    *string             `protobuf:"bytes,40,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	AccountID     *string             `protobuf:"bytes,50,opt,name=AccountID,proto3,oneof" json:"AccountID,omitempty"`
	Address       *string             `protobuf:"bytes,60,opt,name=Address,proto3,oneof" json:"Address,omitempty"`
	Active        *bool               `protobuf:"varint,70,opt,name=Active,proto3,oneof" json:"Active,omitempty"`
	Locked        *bool               `protobuf:"varint,80,opt,name=Locked,proto3,oneof" json:"Locked,omitempty"` // Locked when collecting
	LockedBy      *v1.AccountLockedBy `protobuf:"varint,90,opt,name=LockedBy,proto3,enum=basetypes.v1.AccountLockedBy,oneof" json:"LockedBy,omitempty"`
	Blocked       *bool               `protobuf:"varint,100,opt,name=Blocked,proto3,oneof" json:"Blocked,omitempty"`
	CollectingTID *string             `protobuf:"bytes,110,opt,name=CollectingTID,proto3,oneof" json:"CollectingTID,omitempty"` // Used to free the address when transaction done
	Incoming      *string             `protobuf:"bytes,120,opt,name=Incoming,proto3,oneof" json:"Incoming,omitempty"`
	Outcoming     *string             `protobuf:"bytes,130,opt,name=Outcoming,proto3,oneof" json:"Outcoming,omitempty"`
	ScannableAt   *uint32             `protobuf:"varint,140,opt,name=ScannableAt,proto3,oneof" json:"ScannableAt,omitempty"`
}

func (x *AccountReq) Reset() {
	*x = AccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_middleware_v1_deposit_deposit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountReq) ProtoMessage() {}

func (x *AccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_middleware_v1_deposit_deposit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountReq.ProtoReflect.Descriptor instead.
func (*AccountReq) Descriptor() ([]byte, []int) {
	return file_account_middleware_v1_deposit_deposit_proto_rawDescGZIP(), []int{0}
}

func (x *AccountReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *AccountReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *AccountReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *AccountReq) GetUserID() string {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return ""
}

func (x *AccountReq) GetCoinTypeID() string {
	if x != nil && x.CoinTypeID != nil {
		return *x.CoinTypeID
	}
	return ""
}

func (x *AccountReq) GetAccountID() string {
	if x != nil && x.AccountID != nil {
		return *x.AccountID
	}
	return ""
}

func (x *AccountReq) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *AccountReq) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

func (x *AccountReq) GetLocked() bool {
	if x != nil && x.Locked != nil {
		return *x.Locked
	}
	return false
}

func (x *AccountReq) GetLockedBy() v1.AccountLockedBy {
	if x != nil && x.LockedBy != nil {
		return *x.LockedBy
	}
	return v1.AccountLockedBy(0)
}

func (x *AccountReq) GetBlocked() bool {
	if x != nil && x.Blocked != nil {
		return *x.Blocked
	}
	return false
}

func (x *AccountReq) GetCollectingTID() string {
	if x != nil && x.CollectingTID != nil {
		return *x.CollectingTID
	}
	return ""
}

func (x *AccountReq) GetIncoming() string {
	if x != nil && x.Incoming != nil {
		return *x.Incoming
	}
	return ""
}

func (x *AccountReq) GetOutcoming() string {
	if x != nil && x.Outcoming != nil {
		return *x.Outcoming
	}
	return ""
}

func (x *AccountReq) GetScannableAt() uint32 {
	if x != nil && x.ScannableAt != nil {
		return *x.ScannableAt
	}
	return 0
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,9,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"app_id"
	AppID string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty" sql:"app_id"`
	// @inject_tag: sql:"user_id"
	UserID string `protobuf:"bytes,30,opt,name=UserID,proto3" json:"UserID,omitempty" sql:"user_id"`
	// @inject_tag: sql:"coin_type_id"
	CoinTypeID string `protobuf:"bytes,40,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty" sql:"coin_type_id"`
	// @inject_tag: sql:"account_id"
	AccountID string `protobuf:"bytes,50,opt,name=AccountID,proto3" json:"AccountID,omitempty" sql:"account_id"`
	// @inject_tag: sql:"address"
	Address string `protobuf:"bytes,60,opt,name=Address,proto3" json:"Address,omitempty" sql:"address"`
	// @inject_tag: sql:"active"
	Active bool `protobuf:"varint,80,opt,name=Active,proto3" json:"Active,omitempty" sql:"active"`
	// @inject_tag: sql:"locked"
	Locked bool `protobuf:"varint,100,opt,name=Locked,proto3" json:"Locked,omitempty" sql:"locked"`
	// @inject_tag: sql:"locked_by"
	LockedByStr string             `protobuf:"bytes,110,opt,name=LockedByStr,proto3" json:"LockedByStr,omitempty" sql:"locked_by"`
	LockedBy    v1.AccountLockedBy `protobuf:"varint,120,opt,name=LockedBy,proto3,enum=basetypes.v1.AccountLockedBy" json:"LockedBy,omitempty"`
	// @inject_tag: sql:"blocked"
	Blocked bool `protobuf:"varint,140,opt,name=Blocked,proto3" json:"Blocked,omitempty" sql:"blocked"`
	// @inject_tag: sql:"collecting_tid"
	CollectingTID string `protobuf:"bytes,170,opt,name=CollectingTID,proto3" json:"CollectingTID,omitempty" sql:"collecting_tid"`
	// @inject_tag: sql:"incoming"
	Incoming string `protobuf:"bytes,180,opt,name=Incoming,proto3" json:"Incoming,omitempty" sql:"incoming"`
	// @inject_tag: sql:"outcoming"
	Outcoming string `protobuf:"bytes,190,opt,name=Outcoming,proto3" json:"Outcoming,omitempty" sql:"outcoming"`
	// @inject_tag: sql:"scannable_at"
	ScannableAt uint32 `protobuf:"varint,200,opt,name=ScannableAt,proto3" json:"ScannableAt,omitempty" sql:"scannable_at"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_middleware_v1_deposit_deposit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_account_middleware_v1_deposit_deposit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_account_middleware_v1_deposit_deposit_proto_rawDescGZIP(), []int{1}
}

func (x *Account) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Account) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *Account) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *Account) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Account) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *Account) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *Account) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Account) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Account) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *Account) GetLockedByStr() string {
	if x != nil {
		return x.LockedByStr
	}
	return ""
}

func (x *Account) GetLockedBy() v1.AccountLockedBy {
	if x != nil {
		return x.LockedBy
	}
	return v1.AccountLockedBy(0)
}

func (x *Account) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *Account) GetCollectingTID() string {
	if x != nil {
		return x.CollectingTID
	}
	return ""
}

func (x *Account) GetIncoming() string {
	if x != nil {
		return x.Incoming
	}
	return ""
}

func (x *Account) GetOutcoming() string {
	if x != nil {
		return x.Outcoming
	}
	return ""
}

func (x *Account) GetScannableAt() uint32 {
	if x != nil {
		return x.ScannableAt
	}
	return 0
}

func (x *Account) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Account) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          *v11.Uint32Val `protobuf:"bytes,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID       *v11.StringVal `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID       *v11.StringVal `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	UserID      *v11.StringVal `protobuf:"bytes,30,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	CoinTypeID  *v11.StringVal `protobuf:"bytes,40,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	AccountID   *v11.StringVal `protobuf:"bytes,50,opt,name=AccountID,proto3,oneof" json:"AccountID,omitempty"`
	Address     *v11.StringVal `protobuf:"bytes,60,opt,name=Address,proto3,oneof" json:"Address,omitempty"`
	Active      *v11.BoolVal   `protobuf:"bytes,70,opt,name=Active,proto3,oneof" json:"Active,omitempty"`
	Locked      *v11.BoolVal   `protobuf:"bytes,80,opt,name=Locked,proto3,oneof" json:"Locked,omitempty"`
	LockedBy    *v11.Uint32Val `protobuf:"bytes,90,opt,name=LockedBy,proto3,oneof" json:"LockedBy,omitempty"`
	Blocked     *v11.BoolVal   `protobuf:"bytes,100,opt,name=Blocked,proto3,oneof" json:"Blocked,omitempty"`
	ScannableAt *v11.Uint32Val `protobuf:"bytes,110,opt,name=ScannableAt,proto3,oneof" json:"ScannableAt,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_middleware_v1_deposit_deposit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_account_middleware_v1_deposit_deposit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_account_middleware_v1_deposit_deposit_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *v11.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetEntID() *v11.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetAppID() *v11.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetUserID() *v11.StringVal {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *Conds) GetCoinTypeID() *v11.StringVal {
	if x != nil {
		return x.CoinTypeID
	}
	return nil
}

func (x *Conds) GetAccountID() *v11.StringVal {
	if x != nil {
		return x.AccountID
	}
	return nil
}

func (x *Conds) GetAddress() *v11.StringVal {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Conds) GetActive() *v11.BoolVal {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *Conds) GetLocked() *v11.BoolVal {
	if x != nil {
		return x.Locked
	}
	return nil
}

func (x *Conds) GetLockedBy() *v11.Uint32Val {
	if x != nil {
		return x.LockedBy
	}
	return nil
}

func (x *Conds) GetBlocked() *v11.BoolVal {
	if x != nil {
		return x.Blocked
	}
	return nil
}

func (x *Conds) GetScannableAt() *v11.Uint32Val {
	if x != nil {
		return x.ScannableAt
	}
	return nil
}

var File_account_middleware_v1_deposit_deposit_proto protoreflect.FileDescriptor

var file_account_middleware_v1_deposit_deposit_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2f,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x18, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x62, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x05, 0x0a, 0x0a, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x06, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x3e, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x18, 0x5a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x42, 0x79, 0x48, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x49, 0x44, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0d, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c,
	0x52, 0x08, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x09, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0d, 0x52, 0x09, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74,
	0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0e, 0x52, 0x0b, 0x53, 0x63, 0x61, 0x6e, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x4f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x74, 0x22, 0xa1, 0x04, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x53, 0x74, 0x72, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x53, 0x74, 0x72, 0x12, 0x39,
	0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x52,
	0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x12, 0x19, 0x0a, 0x07, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6e, 0x67, 0x54, 0x49, 0x44, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x08, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x09, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6e, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x53,
	0x63, 0x61, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xab, 0x06, 0x0a, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x48, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3c,
	0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x0a, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x09,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x05, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x48, 0x06, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x32, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x48, 0x07, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x48, 0x08, 0x52, 0x06, 0x4c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x48, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x34, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x48, 0x0a, 0x52, 0x07, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6e,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x0b, 0x52, 0x0b, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x53, 0x63, 0x61, 0x6e, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x42, 0x47, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x6b, 0x75, 0x6e, 0x6d, 0x61, 0x6e, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_account_middleware_v1_deposit_deposit_proto_rawDescOnce sync.Once
	file_account_middleware_v1_deposit_deposit_proto_rawDescData = file_account_middleware_v1_deposit_deposit_proto_rawDesc
)

func file_account_middleware_v1_deposit_deposit_proto_rawDescGZIP() []byte {
	file_account_middleware_v1_deposit_deposit_proto_rawDescOnce.Do(func() {
		file_account_middleware_v1_deposit_deposit_proto_rawDescData = protoimpl.X.CompressGZIP(file_account_middleware_v1_deposit_deposit_proto_rawDescData)
	})
	return file_account_middleware_v1_deposit_deposit_proto_rawDescData
}

var file_account_middleware_v1_deposit_deposit_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_account_middleware_v1_deposit_deposit_proto_goTypes = []interface{}{
	(*AccountReq)(nil),      // 0: account.middleware.deposit.v1.AccountReq
	(*Account)(nil),         // 1: account.middleware.deposit.v1.Account
	(*Conds)(nil),           // 2: account.middleware.deposit.v1.Conds
	(v1.AccountLockedBy)(0), // 3: basetypes.v1.AccountLockedBy
	(*v11.Uint32Val)(nil),   // 4: basetypes.v1.Uint32Val
	(*v11.StringVal)(nil),   // 5: basetypes.v1.StringVal
	(*v11.BoolVal)(nil),     // 6: basetypes.v1.BoolVal
}
var file_account_middleware_v1_deposit_deposit_proto_depIdxs = []int32{
	3,  // 0: account.middleware.deposit.v1.AccountReq.LockedBy:type_name -> basetypes.v1.AccountLockedBy
	3,  // 1: account.middleware.deposit.v1.Account.LockedBy:type_name -> basetypes.v1.AccountLockedBy
	4,  // 2: account.middleware.deposit.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	5,  // 3: account.middleware.deposit.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	5,  // 4: account.middleware.deposit.v1.Conds.AppID:type_name -> basetypes.v1.StringVal
	5,  // 5: account.middleware.deposit.v1.Conds.UserID:type_name -> basetypes.v1.StringVal
	5,  // 6: account.middleware.deposit.v1.Conds.CoinTypeID:type_name -> basetypes.v1.StringVal
	5,  // 7: account.middleware.deposit.v1.Conds.AccountID:type_name -> basetypes.v1.StringVal
	5,  // 8: account.middleware.deposit.v1.Conds.Address:type_name -> basetypes.v1.StringVal
	6,  // 9: account.middleware.deposit.v1.Conds.Active:type_name -> basetypes.v1.BoolVal
	6,  // 10: account.middleware.deposit.v1.Conds.Locked:type_name -> basetypes.v1.BoolVal
	4,  // 11: account.middleware.deposit.v1.Conds.LockedBy:type_name -> basetypes.v1.Uint32Val
	6,  // 12: account.middleware.deposit.v1.Conds.Blocked:type_name -> basetypes.v1.BoolVal
	4,  // 13: account.middleware.deposit.v1.Conds.ScannableAt:type_name -> basetypes.v1.Uint32Val
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_account_middleware_v1_deposit_deposit_proto_init() }
func file_account_middleware_v1_deposit_deposit_proto_init() {
	if File_account_middleware_v1_deposit_deposit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_account_middleware_v1_deposit_deposit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_middleware_v1_deposit_deposit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_middleware_v1_deposit_deposit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_account_middleware_v1_deposit_deposit_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_account_middleware_v1_deposit_deposit_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_account_middleware_v1_deposit_deposit_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_account_middleware_v1_deposit_deposit_proto_goTypes,
		DependencyIndexes: file_account_middleware_v1_deposit_deposit_proto_depIdxs,
		MessageInfos:      file_account_middleware_v1_deposit_deposit_proto_msgTypes,
	}.Build()
	File_account_middleware_v1_deposit_deposit_proto = out.File
	file_account_middleware_v1_deposit_deposit_proto_rawDesc = nil
	file_account_middleware_v1_deposit_deposit_proto_goTypes = nil
	file_account_middleware_v1_deposit_deposit_proto_depIdxs = nil
}
